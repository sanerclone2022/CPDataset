[{"authorTime":"2020-01-21 03:51:54","codes":[{"authorDate":"2020-01-17 06:40:32","commitOrder":2,"curCode":"  public void testAnyAggregatorsOnHeapNumericNulls() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT ANY_VALUE(l1), ANY_VALUE(d1), ANY_VALUE(f1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      aggregators(\n                          new LongAnyAggregatorFactory(\"a0\", \"l1\"),\n                          new DoubleAnyAggregatorFactory(\"a1\", \"d1\"),\n                          new FloatAnyAggregatorFactory(\"a2\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{7L, 1.0, 1.0f}\n        )\n    );\n  }\n","date":"2020-01-17 06:40:32","endLine":1373,"groupId":"15727","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAnyAggregatorsOnHeapNumericNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/89/9ffa2897512cf59d731da308cefd6cccdb7837.src","preCode":"  public void testAnyAggregatorsOnHeapNumericNulls() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT ANY_VALUE(l1), ANY_VALUE(d1), ANY_VALUE(f1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      aggregators(\n                          new LongAnyAggregatorFactory(\"a0\", \"l1\"),\n                          new DoubleAnyAggregatorFactory(\"a1\", \"d1\"),\n                          new FloatAnyAggregatorFactory(\"a2\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{7L, 1.0, 1.0f}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1347,"status":"NB"},{"authorDate":"2020-01-21 03:51:54","commitOrder":2,"curCode":"  public void testEarliestAggregatorsNumericNulls() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT EARLIEST(l1), EARLIEST(d1), EARLIEST(f1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      aggregators(\n                          new LongFirstAggregatorFactory(\"a0\", \"l1\"),\n                          new DoubleFirstAggregatorFactory(\"a1\", \"d1\"),\n                          new FloatFirstAggregatorFactory(\"a2\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{7L, 1.0, 1.0f}\n        )\n    );\n  }\n","date":"2020-01-21 03:51:54","endLine":1712,"groupId":"15727","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEarliestAggregatorsNumericNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/d6ccd14905b03f29d530e6926d34b67ece734c.src","preCode":"  public void testEarliestAggregatorsNumericNulls() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT EARLIEST(l1), EARLIEST(d1), EARLIEST(f1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      aggregators(\n                          new LongFirstAggregatorFactory(\"a0\", \"l1\"),\n                          new DoubleFirstAggregatorFactory(\"a1\", \"d1\"),\n                          new FloatFirstAggregatorFactory(\"a2\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{7L, 1.0, 1.0f}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1686,"status":"B"}],"commitId":"8011211a0ca26ae6fd221e3dfcaf64119609c120","commitMessage":"@@@first/last aggregators and nulls (#9161)\n\n* null handling for numeric first/last aggregators.  refactor to not extend nullable numeric agg since they are complex typed aggs\n\n* initially null or not based on config\n\n* review stuff.  make string first/last consistent with null handling of numeric columns.  more tests\n\n* docs\n\n* handle nil selectors.  revert to primitive first/last types so groupby v1 works...\n","date":"2020-01-21 03:51:54","modifiedFileCount":"34","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-01-21 03:51:54","codes":[{"authorDate":"2020-09-15 10:44:58","commitOrder":3,"curCode":"  public void testAnyAggregatorsOnHeapNumericNulls() throws Exception\n  {\n    testQuery(\n        \"SELECT ANY_VALUE(l1), ANY_VALUE(d1), ANY_VALUE(f1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      aggregators(\n                          new LongAnyAggregatorFactory(\"a0\", \"l1\"),\n                          new DoubleAnyAggregatorFactory(\"a1\", \"d1\"),\n                          new FloatAnyAggregatorFactory(\"a2\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{7L, 1.0, 1.0f}\n        )\n    );\n  }\n","date":"2020-09-15 10:44:58","endLine":1975,"groupId":"15727","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAnyAggregatorsOnHeapNumericNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/eb/7fa4ceed3c7b804ab1ca49735882421e2e2569.src","preCode":"  public void testAnyAggregatorsOnHeapNumericNulls() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT ANY_VALUE(l1), ANY_VALUE(d1), ANY_VALUE(f1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      aggregators(\n                          new LongAnyAggregatorFactory(\"a0\", \"l1\"),\n                          new DoubleAnyAggregatorFactory(\"a1\", \"d1\"),\n                          new FloatAnyAggregatorFactory(\"a2\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{7L, 1.0, 1.0f}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1952,"status":"M"},{"authorDate":"2020-01-21 03:51:54","commitOrder":3,"curCode":"  public void testEarliestAggregatorsNumericNulls() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT EARLIEST(l1), EARLIEST(d1), EARLIEST(f1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      aggregators(\n                          new LongFirstAggregatorFactory(\"a0\", \"l1\"),\n                          new DoubleFirstAggregatorFactory(\"a1\", \"d1\"),\n                          new FloatFirstAggregatorFactory(\"a2\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{7L, 1.0, 1.0f}\n        )\n    );\n  }\n","date":"2020-01-21 03:51:54","endLine":1712,"groupId":"15727","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEarliestAggregatorsNumericNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/d6ccd14905b03f29d530e6926d34b67ece734c.src","preCode":"  public void testEarliestAggregatorsNumericNulls() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT EARLIEST(l1), EARLIEST(d1), EARLIEST(f1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      aggregators(\n                          new LongFirstAggregatorFactory(\"a0\", \"l1\"),\n                          new DoubleFirstAggregatorFactory(\"a1\", \"d1\"),\n                          new FloatFirstAggregatorFactory(\"a2\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{7L, 1.0, 1.0f}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1686,"status":"N"}],"commitId":"f71ba6f2c202d3edc0cdf8efa2274d0e247ddca8","commitMessage":"@@@Vectorized ANY aggregators (#10338)\n\n* WIP vectorized ANY aggregators\n\n* tests\n\n* fix aggs\n\n* cleanup\n\n* code review + tests\n\n* docs\n\n* use NilVectorSelector when needed\n\n* fix spellcheck\n\n* dont instantiate vectors\n\n* cleanup","date":"2020-09-15 10:44:58","modifiedFileCount":"5","status":"M","submitter":"Suneet Saldanha"},{"authorTime":"2021-05-11 01:13:37","codes":[{"authorDate":"2021-05-11 01:13:37","commitOrder":4,"curCode":"  public void testAnyAggregatorsOnHeapNumericNulls() throws Exception\n  {\n    testQuery(\n        \"SELECT ANY_VALUE(l1), ANY_VALUE(d1), ANY_VALUE(f1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      aggregators(\n                          new LongAnyAggregatorFactory(\"a0\", \"l1\"),\n                          new DoubleAnyAggregatorFactory(\"a1\", \"d1\"),\n                          new FloatAnyAggregatorFactory(\"a2\", \"f1\")\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{7L, 1.0, 1.0f}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":2277,"groupId":"101608","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAnyAggregatorsOnHeapNumericNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testAnyAggregatorsOnHeapNumericNulls() throws Exception\n  {\n    testQuery(\n        \"SELECT ANY_VALUE(l1), ANY_VALUE(d1), ANY_VALUE(f1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      aggregators(\n                          new LongAnyAggregatorFactory(\"a0\", \"l1\"),\n                          new DoubleAnyAggregatorFactory(\"a1\", \"d1\"),\n                          new FloatAnyAggregatorFactory(\"a2\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{7L, 1.0, 1.0f}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2254,"status":"M"},{"authorDate":"2021-05-11 01:13:37","commitOrder":4,"curCode":"  public void testEarliestAggregatorsNumericNulls() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT EARLIEST(l1), EARLIEST(d1), EARLIEST(f1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      aggregators(\n                          new LongFirstAggregatorFactory(\"a0\", \"l1\"),\n                          new DoubleFirstAggregatorFactory(\"a1\", \"d1\"),\n                          new FloatFirstAggregatorFactory(\"a2\", \"f1\")\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{7L, 1.0, 1.0f}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":2612,"groupId":"101608","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testEarliestAggregatorsNumericNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testEarliestAggregatorsNumericNulls() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT EARLIEST(l1), EARLIEST(d1), EARLIEST(f1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      aggregators(\n                          new LongFirstAggregatorFactory(\"a0\", \"l1\"),\n                          new DoubleFirstAggregatorFactory(\"a1\", \"d1\"),\n                          new FloatFirstAggregatorFactory(\"a2\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{7L, 1.0, 1.0f}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2586,"status":"M"}],"commitId":"691d7a1d548909951468005348a603380f4d6d74","commitMessage":"@@@SQL timeseries no longer skip empty buckets with all granularity (#11188)\n\n* SQL timeseries no longer skip empty buckets with all granularity\n\n* add comment.  fix tests\n\n* the ol switcheroo\n\n* revert unintended change\n\n* docs and more tests\n\n* style\n\n* make checkstyle happy\n\n* docs fixes and more tests\n\n* add docs.  tests for array_agg\n\n* fixes\n\n* oops\n\n* doc stuffs\n\n* fix compile.  match doc style","date":"2021-05-11 01:13:37","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"}]
