[{"authorTime":"2021-02-12 19:03:20","codes":[{"authorDate":"2021-02-12 19:03:20","commitOrder":1,"curCode":"  public void testCompactWithGranularitySpec()\n  {\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            new UniformGranularitySpec(Granularities.YEAR, null, null),\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    ArgumentCaptor<List<DataSegment>> segmentsCaptor = ArgumentCaptor.forClass(List.class);\n    ArgumentCaptor<ClientCompactionTaskQueryGranularitySpec> granularitySpecArgumentCaptor = ArgumentCaptor.forClass(ClientCompactionTaskQueryGranularitySpec.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        segmentsCaptor.capture(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        granularitySpecArgumentCaptor.capture(),\n        ArgumentMatchers.any()\n    );\n    \r\n    \r\n    Assert.assertEquals(datasourceToSegments.get(dataSource).size(), segmentsCaptor.getValue().size());\n    Assert.assertEquals(Granularities.YEAR, granularitySpecArgumentCaptor.getValue().getSegmentGranularity());\n  }\n","date":"2021-02-12 19:03:20","endLine":666,"groupId":"11830","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCompactWithGranularitySpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c8/928103c09569938a64b3dda423ebd903ba11a2.src","preCode":"  public void testCompactWithGranularitySpec()\n  {\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            new UniformGranularitySpec(Granularities.YEAR, null, null),\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    ArgumentCaptor<List<DataSegment>> segmentsCaptor = ArgumentCaptor.forClass(List.class);\n    ArgumentCaptor<ClientCompactionTaskQueryGranularitySpec> granularitySpecArgumentCaptor = ArgumentCaptor.forClass(ClientCompactionTaskQueryGranularitySpec.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        segmentsCaptor.capture(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        granularitySpecArgumentCaptor.capture(),\n        ArgumentMatchers.any()\n    );\n    \r\n    \r\n    Assert.assertEquals(datasourceToSegments.get(dataSource).size(), segmentsCaptor.getValue().size());\n    Assert.assertEquals(Granularities.YEAR, granularitySpecArgumentCaptor.getValue().getSegmentGranularity());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/duty/CompactSegmentsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":615,"status":"B"},{"authorDate":"2021-02-12 19:03:20","commitOrder":1,"curCode":"  public void testCompactWithGranularitySpecConflictWithActiveCompactionTask()\n  {\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    final String conflictTaskId = \"taskIdDummy\";\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    TaskStatusPlus runningConflictCompactionTask = new TaskStatusPlus(\n        conflictTaskId,\n        \"groupId\",\n        \"compact\",\n        DateTimes.EPOCH,\n        DateTimes.EPOCH,\n        TaskState.RUNNING,\n        RunnerTaskState.RUNNING,\n        -1L,\n        TaskLocation.unknown(),\n        dataSource,\n        null\n    );\n    TaskPayloadResponse runningConflictCompactionTaskPayload = new TaskPayloadResponse(\n        conflictTaskId,\n        new ClientCompactionTaskQuery(\n            conflictTaskId,\n            dataSource,\n            new ClientCompactionIOConfig(\n                new ClientCompactionIntervalSpec(\n                    Intervals.of(\"2000/2099\"),\n                    \"testSha256OfSortedSegmentIds\"\n                )\n            ),\n            null,\n            new ClientCompactionTaskQueryGranularitySpec(Granularities.DAY, null, null),\n            null\n        )\n    );\n    Mockito.when(mockIndexingServiceClient.getActiveTasks()).thenReturn(ImmutableList.of(runningConflictCompactionTask));\n    Mockito.when(mockIndexingServiceClient.getTaskPayload(ArgumentMatchers.eq(conflictTaskId))).thenReturn(runningConflictCompactionTaskPayload);\n\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            new UniformGranularitySpec(Granularities.YEAR, null, null),\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    \r\n    Mockito.verify(mockIndexingServiceClient).cancelTask(conflictTaskId);\n    \r\n    \r\n    \r\n    ArgumentCaptor<List<DataSegment>> segmentsCaptor = ArgumentCaptor.forClass(List.class);\n    ArgumentCaptor<ClientCompactionTaskQueryGranularitySpec> granularitySpecArgumentCaptor = ArgumentCaptor.forClass(ClientCompactionTaskQueryGranularitySpec.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        segmentsCaptor.capture(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        granularitySpecArgumentCaptor.capture(),\n        ArgumentMatchers.any()\n    );\n    \r\n    \r\n    Assert.assertEquals(datasourceToSegments.get(dataSource).size(), segmentsCaptor.getValue().size());\n    Assert.assertEquals(Granularities.YEAR, granularitySpecArgumentCaptor.getValue().getSegmentGranularity());\n  }\n","date":"2021-02-12 19:03:20","endLine":758,"groupId":"11830","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCompactWithGranularitySpecConflictWithActiveCompactionTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c8/928103c09569938a64b3dda423ebd903ba11a2.src","preCode":"  public void testCompactWithGranularitySpecConflictWithActiveCompactionTask()\n  {\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    final String conflictTaskId = \"taskIdDummy\";\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    TaskStatusPlus runningConflictCompactionTask = new TaskStatusPlus(\n        conflictTaskId,\n        \"groupId\",\n        \"compact\",\n        DateTimes.EPOCH,\n        DateTimes.EPOCH,\n        TaskState.RUNNING,\n        RunnerTaskState.RUNNING,\n        -1L,\n        TaskLocation.unknown(),\n        dataSource,\n        null\n    );\n    TaskPayloadResponse runningConflictCompactionTaskPayload = new TaskPayloadResponse(\n        conflictTaskId,\n        new ClientCompactionTaskQuery(\n            conflictTaskId,\n            dataSource,\n            new ClientCompactionIOConfig(\n                new ClientCompactionIntervalSpec(\n                    Intervals.of(\"2000/2099\"),\n                    \"testSha256OfSortedSegmentIds\"\n                )\n            ),\n            null,\n            new ClientCompactionTaskQueryGranularitySpec(Granularities.DAY, null, null),\n            null\n        )\n    );\n    Mockito.when(mockIndexingServiceClient.getActiveTasks()).thenReturn(ImmutableList.of(runningConflictCompactionTask));\n    Mockito.when(mockIndexingServiceClient.getTaskPayload(ArgumentMatchers.eq(conflictTaskId))).thenReturn(runningConflictCompactionTaskPayload);\n\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            new UniformGranularitySpec(Granularities.YEAR, null, null),\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    \r\n    Mockito.verify(mockIndexingServiceClient).cancelTask(conflictTaskId);\n    \r\n    \r\n    \r\n    ArgumentCaptor<List<DataSegment>> segmentsCaptor = ArgumentCaptor.forClass(List.class);\n    ArgumentCaptor<ClientCompactionTaskQueryGranularitySpec> granularitySpecArgumentCaptor = ArgumentCaptor.forClass(ClientCompactionTaskQueryGranularitySpec.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        segmentsCaptor.capture(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        granularitySpecArgumentCaptor.capture(),\n        ArgumentMatchers.any()\n    );\n    \r\n    \r\n    Assert.assertEquals(datasourceToSegments.get(dataSource).size(), segmentsCaptor.getValue().size());\n    Assert.assertEquals(Granularities.YEAR, granularitySpecArgumentCaptor.getValue().getSegmentGranularity());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/duty/CompactSegmentsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"B"}],"commitId":"6541178c21839530a42af4b4675a9bc680bffca6","commitMessage":"@@@Support segmentGranularity for auto-compaction (#10843)\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* resolve conflict\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* fix tests\n\n* fix more tests\n\n* fix checkstyle\n\n* add unit tests\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* add unit tests\n\n* add integration tests\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix failing tests\n\n* address comments\n\n* address comments\n\n* fix tests\n\n* fix tests\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test","date":"2021-02-12 19:03:20","modifiedFileCount":"32","status":"B","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-03-03 03:23:52","codes":[{"authorDate":"2021-03-03 03:23:52","commitOrder":2,"curCode":"  public void testCompactWithGranularitySpec()\n  {\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            new UserCompactionTaskGranularityConfig(Granularities.YEAR, null),\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    ArgumentCaptor<List<DataSegment>> segmentsCaptor = ArgumentCaptor.forClass(List.class);\n    ArgumentCaptor<ClientCompactionTaskGranularitySpec> granularitySpecArgumentCaptor = ArgumentCaptor.forClass(\n        ClientCompactionTaskGranularitySpec.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        segmentsCaptor.capture(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        granularitySpecArgumentCaptor.capture(),\n        ArgumentMatchers.any()\n    );\n    \r\n    \r\n    Assert.assertEquals(datasourceToSegments.get(dataSource).size(), segmentsCaptor.getValue().size());\n    ClientCompactionTaskGranularitySpec actual = granularitySpecArgumentCaptor.getValue();\n    Assert.assertNotNull(actual);\n    ClientCompactionTaskGranularitySpec expected = new ClientCompactionTaskGranularitySpec(Granularities.YEAR, null);\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2021-03-03 03:23:52","endLine":671,"groupId":"13859","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCompactWithGranularitySpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4b/ec733940cfe87cea88d3adeb2e709678a5abcd.src","preCode":"  public void testCompactWithGranularitySpec()\n  {\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            new UniformGranularitySpec(Granularities.YEAR, null, null),\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    ArgumentCaptor<List<DataSegment>> segmentsCaptor = ArgumentCaptor.forClass(List.class);\n    ArgumentCaptor<ClientCompactionTaskQueryGranularitySpec> granularitySpecArgumentCaptor = ArgumentCaptor.forClass(ClientCompactionTaskQueryGranularitySpec.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        segmentsCaptor.capture(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        granularitySpecArgumentCaptor.capture(),\n        ArgumentMatchers.any()\n    );\n    \r\n    \r\n    Assert.assertEquals(datasourceToSegments.get(dataSource).size(), segmentsCaptor.getValue().size());\n    Assert.assertEquals(Granularities.YEAR, granularitySpecArgumentCaptor.getValue().getSegmentGranularity());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/duty/CompactSegmentsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":616,"status":"M"},{"authorDate":"2021-03-03 03:23:52","commitOrder":2,"curCode":"  public void testCompactWithGranularitySpecConflictWithActiveCompactionTask()\n  {\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    final String conflictTaskId = \"taskIdDummy\";\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    TaskStatusPlus runningConflictCompactionTask = new TaskStatusPlus(\n        conflictTaskId,\n        \"groupId\",\n        \"compact\",\n        DateTimes.EPOCH,\n        DateTimes.EPOCH,\n        TaskState.RUNNING,\n        RunnerTaskState.RUNNING,\n        -1L,\n        TaskLocation.unknown(),\n        dataSource,\n        null\n    );\n    TaskPayloadResponse runningConflictCompactionTaskPayload = new TaskPayloadResponse(\n        conflictTaskId,\n        new ClientCompactionTaskQuery(\n            conflictTaskId,\n            dataSource,\n            new ClientCompactionIOConfig(\n                new ClientCompactionIntervalSpec(\n                    Intervals.of(\"2000/2099\"),\n                    \"testSha256OfSortedSegmentIds\"\n                )\n            ),\n            null,\n            new ClientCompactionTaskGranularitySpec(Granularities.DAY, null),\n            null\n        )\n    );\n    Mockito.when(mockIndexingServiceClient.getActiveTasks()).thenReturn(ImmutableList.of(runningConflictCompactionTask));\n    Mockito.when(mockIndexingServiceClient.getTaskPayload(ArgumentMatchers.eq(conflictTaskId))).thenReturn(runningConflictCompactionTaskPayload);\n\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            new UserCompactionTaskGranularityConfig(Granularities.YEAR, null),\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    \r\n    Mockito.verify(mockIndexingServiceClient).cancelTask(conflictTaskId);\n    \r\n    \r\n    \r\n    ArgumentCaptor<List<DataSegment>> segmentsCaptor = ArgumentCaptor.forClass(List.class);\n    ArgumentCaptor<ClientCompactionTaskGranularitySpec> granularitySpecArgumentCaptor = ArgumentCaptor.forClass(\n        ClientCompactionTaskGranularitySpec.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        segmentsCaptor.capture(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        granularitySpecArgumentCaptor.capture(),\n        ArgumentMatchers.any()\n    );\n    \r\n    \r\n    Assert.assertEquals(datasourceToSegments.get(dataSource).size(), segmentsCaptor.getValue().size());\n    ClientCompactionTaskGranularitySpec actual = granularitySpecArgumentCaptor.getValue();\n    Assert.assertNotNull(actual);\n    ClientCompactionTaskGranularitySpec expected = new ClientCompactionTaskGranularitySpec(Granularities.YEAR, null);\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2021-03-03 03:23:52","endLine":767,"groupId":"13859","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCompactWithGranularitySpecConflictWithActiveCompactionTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4b/ec733940cfe87cea88d3adeb2e709678a5abcd.src","preCode":"  public void testCompactWithGranularitySpecConflictWithActiveCompactionTask()\n  {\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    final String conflictTaskId = \"taskIdDummy\";\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    TaskStatusPlus runningConflictCompactionTask = new TaskStatusPlus(\n        conflictTaskId,\n        \"groupId\",\n        \"compact\",\n        DateTimes.EPOCH,\n        DateTimes.EPOCH,\n        TaskState.RUNNING,\n        RunnerTaskState.RUNNING,\n        -1L,\n        TaskLocation.unknown(),\n        dataSource,\n        null\n    );\n    TaskPayloadResponse runningConflictCompactionTaskPayload = new TaskPayloadResponse(\n        conflictTaskId,\n        new ClientCompactionTaskQuery(\n            conflictTaskId,\n            dataSource,\n            new ClientCompactionIOConfig(\n                new ClientCompactionIntervalSpec(\n                    Intervals.of(\"2000/2099\"),\n                    \"testSha256OfSortedSegmentIds\"\n                )\n            ),\n            null,\n            new ClientCompactionTaskQueryGranularitySpec(Granularities.DAY, null, null),\n            null\n        )\n    );\n    Mockito.when(mockIndexingServiceClient.getActiveTasks()).thenReturn(ImmutableList.of(runningConflictCompactionTask));\n    Mockito.when(mockIndexingServiceClient.getTaskPayload(ArgumentMatchers.eq(conflictTaskId))).thenReturn(runningConflictCompactionTaskPayload);\n\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            new UniformGranularitySpec(Granularities.YEAR, null, null),\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    \r\n    Mockito.verify(mockIndexingServiceClient).cancelTask(conflictTaskId);\n    \r\n    \r\n    \r\n    ArgumentCaptor<List<DataSegment>> segmentsCaptor = ArgumentCaptor.forClass(List.class);\n    ArgumentCaptor<ClientCompactionTaskQueryGranularitySpec> granularitySpecArgumentCaptor = ArgumentCaptor.forClass(ClientCompactionTaskQueryGranularitySpec.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        segmentsCaptor.capture(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        granularitySpecArgumentCaptor.capture(),\n        ArgumentMatchers.any()\n    );\n    \r\n    \r\n    Assert.assertEquals(datasourceToSegments.get(dataSource).size(), segmentsCaptor.getValue().size());\n    Assert.assertEquals(Granularities.YEAR, granularitySpecArgumentCaptor.getValue().getSegmentGranularity());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/duty/CompactSegmentsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":674,"status":"M"}],"commitId":"b7b0ee83627dd7887392e8f9d6fb5cb29465c28c","commitMessage":"@@@Add query granularity to compaction task (#10900)\n\n* add query granularity to compaction task\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix test\n\n* fix test\n\n* add tests\n\n* fix test\n\n* fix test\n\n* cleanup\n\n* rename class\n\n* fix test\n\n* fix test\n\n* add test\n\n* fix test","date":"2021-03-03 03:23:52","modifiedFileCount":"15","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-04-09 15:12:28","codes":[{"authorDate":"2021-04-09 15:12:28","commitOrder":3,"curCode":"  public void testCompactWithGranularitySpec()\n  {\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            new UserCompactionTaskGranularityConfig(Granularities.YEAR, null),\n            null,\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    ArgumentCaptor<List<DataSegment>> segmentsCaptor = ArgumentCaptor.forClass(List.class);\n    ArgumentCaptor<ClientCompactionTaskGranularitySpec> granularitySpecArgumentCaptor = ArgumentCaptor.forClass(\n        ClientCompactionTaskGranularitySpec.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        segmentsCaptor.capture(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        granularitySpecArgumentCaptor.capture(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.any()\n    );\n    \r\n    \r\n    Assert.assertEquals(datasourceToSegments.get(dataSource).size(), segmentsCaptor.getValue().size());\n    ClientCompactionTaskGranularitySpec actual = granularitySpecArgumentCaptor.getValue();\n    Assert.assertNotNull(actual);\n    ClientCompactionTaskGranularitySpec expected = new ClientCompactionTaskGranularitySpec(Granularities.YEAR, null);\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2021-04-09 15:12:28","endLine":780,"groupId":"4361","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCompactWithGranularitySpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/90/b3b5db952939ebd6604942bbf776ab93db998f.src","preCode":"  public void testCompactWithGranularitySpec()\n  {\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            new UserCompactionTaskGranularityConfig(Granularities.YEAR, null),\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    ArgumentCaptor<List<DataSegment>> segmentsCaptor = ArgumentCaptor.forClass(List.class);\n    ArgumentCaptor<ClientCompactionTaskGranularitySpec> granularitySpecArgumentCaptor = ArgumentCaptor.forClass(\n        ClientCompactionTaskGranularitySpec.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        segmentsCaptor.capture(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        granularitySpecArgumentCaptor.capture(),\n        ArgumentMatchers.any()\n    );\n    \r\n    \r\n    Assert.assertEquals(datasourceToSegments.get(dataSource).size(), segmentsCaptor.getValue().size());\n    ClientCompactionTaskGranularitySpec actual = granularitySpecArgumentCaptor.getValue();\n    Assert.assertNotNull(actual);\n    ClientCompactionTaskGranularitySpec expected = new ClientCompactionTaskGranularitySpec(Granularities.YEAR, null);\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/duty/CompactSegmentsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":723,"status":"M"},{"authorDate":"2021-04-09 15:12:28","commitOrder":3,"curCode":"  public void testCompactWithGranularitySpecConflictWithActiveCompactionTask()\n  {\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    final String conflictTaskId = \"taskIdDummy\";\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    TaskStatusPlus runningConflictCompactionTask = new TaskStatusPlus(\n        conflictTaskId,\n        \"groupId\",\n        \"compact\",\n        DateTimes.EPOCH,\n        DateTimes.EPOCH,\n        TaskState.RUNNING,\n        RunnerTaskState.RUNNING,\n        -1L,\n        TaskLocation.unknown(),\n        dataSource,\n        null\n    );\n    TaskPayloadResponse runningConflictCompactionTaskPayload = new TaskPayloadResponse(\n        conflictTaskId,\n        new ClientCompactionTaskQuery(\n            conflictTaskId,\n            dataSource,\n            new ClientCompactionIOConfig(\n                new ClientCompactionIntervalSpec(\n                    Intervals.of(\"2000/2099\"),\n                    \"testSha256OfSortedSegmentIds\"\n                ),\n                null\n            ),\n            null,\n            new ClientCompactionTaskGranularitySpec(Granularities.DAY, null),\n            null\n        )\n    );\n    Mockito.when(mockIndexingServiceClient.getActiveTasks()).thenReturn(ImmutableList.of(runningConflictCompactionTask));\n    Mockito.when(mockIndexingServiceClient.getTaskPayload(ArgumentMatchers.eq(conflictTaskId))).thenReturn(runningConflictCompactionTaskPayload);\n\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            new UserCompactionTaskGranularityConfig(Granularities.YEAR, null),\n            null,\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    \r\n    Mockito.verify(mockIndexingServiceClient).cancelTask(conflictTaskId);\n    \r\n    \r\n    \r\n    ArgumentCaptor<List<DataSegment>> segmentsCaptor = ArgumentCaptor.forClass(List.class);\n    ArgumentCaptor<ClientCompactionTaskGranularitySpec> granularitySpecArgumentCaptor = ArgumentCaptor.forClass(\n        ClientCompactionTaskGranularitySpec.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        segmentsCaptor.capture(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        granularitySpecArgumentCaptor.capture(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.any()\n    );\n    \r\n    \r\n    Assert.assertEquals(datasourceToSegments.get(dataSource).size(), segmentsCaptor.getValue().size());\n    ClientCompactionTaskGranularitySpec actual = granularitySpecArgumentCaptor.getValue();\n    Assert.assertNotNull(actual);\n    ClientCompactionTaskGranularitySpec expected = new ClientCompactionTaskGranularitySpec(Granularities.YEAR, null);\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2021-04-09 15:12:28","endLine":879,"groupId":"4363","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCompactWithGranularitySpecConflictWithActiveCompactionTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/90/b3b5db952939ebd6604942bbf776ab93db998f.src","preCode":"  public void testCompactWithGranularitySpecConflictWithActiveCompactionTask()\n  {\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    final String conflictTaskId = \"taskIdDummy\";\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    TaskStatusPlus runningConflictCompactionTask = new TaskStatusPlus(\n        conflictTaskId,\n        \"groupId\",\n        \"compact\",\n        DateTimes.EPOCH,\n        DateTimes.EPOCH,\n        TaskState.RUNNING,\n        RunnerTaskState.RUNNING,\n        -1L,\n        TaskLocation.unknown(),\n        dataSource,\n        null\n    );\n    TaskPayloadResponse runningConflictCompactionTaskPayload = new TaskPayloadResponse(\n        conflictTaskId,\n        new ClientCompactionTaskQuery(\n            conflictTaskId,\n            dataSource,\n            new ClientCompactionIOConfig(\n                new ClientCompactionIntervalSpec(\n                    Intervals.of(\"2000/2099\"),\n                    \"testSha256OfSortedSegmentIds\"\n                )\n            ),\n            null,\n            new ClientCompactionTaskGranularitySpec(Granularities.DAY, null),\n            null\n        )\n    );\n    Mockito.when(mockIndexingServiceClient.getActiveTasks()).thenReturn(ImmutableList.of(runningConflictCompactionTask));\n    Mockito.when(mockIndexingServiceClient.getTaskPayload(ArgumentMatchers.eq(conflictTaskId))).thenReturn(runningConflictCompactionTaskPayload);\n\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            new UserCompactionTaskGranularityConfig(Granularities.YEAR, null),\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    \r\n    Mockito.verify(mockIndexingServiceClient).cancelTask(conflictTaskId);\n    \r\n    \r\n    \r\n    ArgumentCaptor<List<DataSegment>> segmentsCaptor = ArgumentCaptor.forClass(List.class);\n    ArgumentCaptor<ClientCompactionTaskGranularitySpec> granularitySpecArgumentCaptor = ArgumentCaptor.forClass(\n        ClientCompactionTaskGranularitySpec.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        segmentsCaptor.capture(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        granularitySpecArgumentCaptor.capture(),\n        ArgumentMatchers.any()\n    );\n    \r\n    \r\n    Assert.assertEquals(datasourceToSegments.get(dataSource).size(), segmentsCaptor.getValue().size());\n    ClientCompactionTaskGranularitySpec actual = granularitySpecArgumentCaptor.getValue();\n    Assert.assertNotNull(actual);\n    ClientCompactionTaskGranularitySpec expected = new ClientCompactionTaskGranularitySpec(Granularities.YEAR, null);\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/duty/CompactSegmentsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":783,"status":"M"}],"commitId":"4576152e4a0213d17048a330e7089aa9d89f3972","commitMessage":"@@@Make dropExisting flag for Compaction configurable and add warning documentations (#11070)\n\n* Make dropExisting flag for Compaction configurable\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix test\n\n* add tests\n\n* fix spelling\n\n* fix docs\n\n* add IT\n\n* fix test\n\n* fix doc\n\n* fix doc","date":"2021-04-09 15:12:28","modifiedFileCount":"20","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-06-21 08:21:59","codes":[{"authorDate":"2021-06-21 08:21:59","commitOrder":4,"curCode":"  public void testCompactWithGranularitySpec()\n  {\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    final CompactSegments compactSegments = new CompactSegments(COORDINATOR_CONFIG, JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            new UserCompactionTaskGranularityConfig(Granularities.YEAR, null),\n            null,\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    ArgumentCaptor<List<DataSegment>> segmentsCaptor = ArgumentCaptor.forClass(List.class);\n    ArgumentCaptor<ClientCompactionTaskGranularitySpec> granularitySpecArgumentCaptor = ArgumentCaptor.forClass(\n        ClientCompactionTaskGranularitySpec.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        segmentsCaptor.capture(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        granularitySpecArgumentCaptor.capture(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.any()\n    );\n    \r\n    \r\n    Assert.assertEquals(datasourceToSegments.get(dataSource).size(), segmentsCaptor.getValue().size());\n    ClientCompactionTaskGranularitySpec actual = granularitySpecArgumentCaptor.getValue();\n    Assert.assertNotNull(actual);\n    ClientCompactionTaskGranularitySpec expected = new ClientCompactionTaskGranularitySpec(Granularities.YEAR, null);\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2021-06-21 08:21:59","endLine":783,"groupId":"10531","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCompactWithGranularitySpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a1/932dd1f4c60c16e6d0bbc3f4f96f080a5a5022.src","preCode":"  public void testCompactWithGranularitySpec()\n  {\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            new UserCompactionTaskGranularityConfig(Granularities.YEAR, null),\n            null,\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    ArgumentCaptor<List<DataSegment>> segmentsCaptor = ArgumentCaptor.forClass(List.class);\n    ArgumentCaptor<ClientCompactionTaskGranularitySpec> granularitySpecArgumentCaptor = ArgumentCaptor.forClass(\n        ClientCompactionTaskGranularitySpec.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        segmentsCaptor.capture(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        granularitySpecArgumentCaptor.capture(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.any()\n    );\n    \r\n    \r\n    Assert.assertEquals(datasourceToSegments.get(dataSource).size(), segmentsCaptor.getValue().size());\n    ClientCompactionTaskGranularitySpec actual = granularitySpecArgumentCaptor.getValue();\n    Assert.assertNotNull(actual);\n    ClientCompactionTaskGranularitySpec expected = new ClientCompactionTaskGranularitySpec(Granularities.YEAR, null);\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/duty/CompactSegmentsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":726,"status":"M"},{"authorDate":"2021-06-21 08:21:59","commitOrder":4,"curCode":"  public void testCompactWithGranularitySpecConflictWithActiveCompactionTask()\n  {\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    final String conflictTaskId = \"taskIdDummy\";\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    TaskStatusPlus runningConflictCompactionTask = new TaskStatusPlus(\n        conflictTaskId,\n        \"groupId\",\n        \"compact\",\n        DateTimes.EPOCH,\n        DateTimes.EPOCH,\n        TaskState.RUNNING,\n        RunnerTaskState.RUNNING,\n        -1L,\n        TaskLocation.unknown(),\n        dataSource,\n        null\n    );\n    TaskPayloadResponse runningConflictCompactionTaskPayload = new TaskPayloadResponse(\n        conflictTaskId,\n        new ClientCompactionTaskQuery(\n            conflictTaskId,\n            dataSource,\n            new ClientCompactionIOConfig(\n                new ClientCompactionIntervalSpec(\n                    Intervals.of(\"2000/2099\"),\n                    \"testSha256OfSortedSegmentIds\"\n                ),\n                null\n            ),\n            null,\n            new ClientCompactionTaskGranularitySpec(Granularities.DAY, null),\n            null\n        )\n    );\n    Mockito.when(mockIndexingServiceClient.getActiveTasks()).thenReturn(ImmutableList.of(runningConflictCompactionTask));\n    Mockito.when(mockIndexingServiceClient.getTaskPayload(ArgumentMatchers.eq(conflictTaskId))).thenReturn(runningConflictCompactionTaskPayload);\n\n    final CompactSegments compactSegments = new CompactSegments(COORDINATOR_CONFIG, JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            new UserCompactionTaskGranularityConfig(Granularities.YEAR, null),\n            null,\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    \r\n    Mockito.verify(mockIndexingServiceClient).cancelTask(conflictTaskId);\n    \r\n    \r\n    \r\n    ArgumentCaptor<List<DataSegment>> segmentsCaptor = ArgumentCaptor.forClass(List.class);\n    ArgumentCaptor<ClientCompactionTaskGranularitySpec> granularitySpecArgumentCaptor = ArgumentCaptor.forClass(\n        ClientCompactionTaskGranularitySpec.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        segmentsCaptor.capture(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        granularitySpecArgumentCaptor.capture(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.any()\n    );\n    \r\n    \r\n    Assert.assertEquals(datasourceToSegments.get(dataSource).size(), segmentsCaptor.getValue().size());\n    ClientCompactionTaskGranularitySpec actual = granularitySpecArgumentCaptor.getValue();\n    Assert.assertNotNull(actual);\n    ClientCompactionTaskGranularitySpec expected = new ClientCompactionTaskGranularitySpec(Granularities.YEAR, null);\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2021-06-21 08:21:59","endLine":882,"groupId":"10531","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCompactWithGranularitySpecConflictWithActiveCompactionTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a1/932dd1f4c60c16e6d0bbc3f4f96f080a5a5022.src","preCode":"  public void testCompactWithGranularitySpecConflictWithActiveCompactionTask()\n  {\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    final String conflictTaskId = \"taskIdDummy\";\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    TaskStatusPlus runningConflictCompactionTask = new TaskStatusPlus(\n        conflictTaskId,\n        \"groupId\",\n        \"compact\",\n        DateTimes.EPOCH,\n        DateTimes.EPOCH,\n        TaskState.RUNNING,\n        RunnerTaskState.RUNNING,\n        -1L,\n        TaskLocation.unknown(),\n        dataSource,\n        null\n    );\n    TaskPayloadResponse runningConflictCompactionTaskPayload = new TaskPayloadResponse(\n        conflictTaskId,\n        new ClientCompactionTaskQuery(\n            conflictTaskId,\n            dataSource,\n            new ClientCompactionIOConfig(\n                new ClientCompactionIntervalSpec(\n                    Intervals.of(\"2000/2099\"),\n                    \"testSha256OfSortedSegmentIds\"\n                ),\n                null\n            ),\n            null,\n            new ClientCompactionTaskGranularitySpec(Granularities.DAY, null),\n            null\n        )\n    );\n    Mockito.when(mockIndexingServiceClient.getActiveTasks()).thenReturn(ImmutableList.of(runningConflictCompactionTask));\n    Mockito.when(mockIndexingServiceClient.getTaskPayload(ArgumentMatchers.eq(conflictTaskId))).thenReturn(runningConflictCompactionTaskPayload);\n\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            new UserCompactionTaskGranularityConfig(Granularities.YEAR, null),\n            null,\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    \r\n    Mockito.verify(mockIndexingServiceClient).cancelTask(conflictTaskId);\n    \r\n    \r\n    \r\n    ArgumentCaptor<List<DataSegment>> segmentsCaptor = ArgumentCaptor.forClass(List.class);\n    ArgumentCaptor<ClientCompactionTaskGranularitySpec> granularitySpecArgumentCaptor = ArgumentCaptor.forClass(\n        ClientCompactionTaskGranularitySpec.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        segmentsCaptor.capture(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        granularitySpecArgumentCaptor.capture(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.any()\n    );\n    \r\n    \r\n    Assert.assertEquals(datasourceToSegments.get(dataSource).size(), segmentsCaptor.getValue().size());\n    ClientCompactionTaskGranularitySpec actual = granularitySpecArgumentCaptor.getValue();\n    Assert.assertNotNull(actual);\n    ClientCompactionTaskGranularitySpec expected = new ClientCompactionTaskGranularitySpec(Granularities.YEAR, null);\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/duty/CompactSegmentsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":786,"status":"M"}],"commitId":"f0b105ec63657643c85d82686ae1dea3e588a5f5","commitMessage":"@@@Temporarily skip compaction for locked intervals (#11190)\n\n* Add overlord API /lockedIntervals. Skip compaction for locked intervals\n\n* Revert formatting changes\n\n* Add license info\n\n* Fix checkstyle\n\n* Remove invalid API invocation\n\n* Fix checkstyle\n\n* Add DatasourceIntervalsTest\n\n* Fix checkstyle\n\n* Remove LockedIntervalsResponse\n\n* Add integration tests for lockedIntervals\n\n* Add ITAutoCompactionLockContentionTest\n\n* Add config druid.coordinator.compaction.skipLockedIntervals\n\n* Add test for TaskQueue","date":"2021-06-21 08:21:59","modifiedFileCount":"19","status":"M","submitter":"Kashif Faraz"}]
