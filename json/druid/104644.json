[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  private static Map<String, Object> persist(File tmpDir, InputRow... rows)\n  {\n    final File persistDir = new File(tmpDir, UUID.randomUUID().toString());\n    final IncrementalIndexSchema schema = new IncrementalIndexSchema.Builder()\n        .withMinTimestamp(JodaUtils.MIN_INSTANT)\n        .withDimensionsSpec(ROW_PARSER)\n        .withMetrics(new LongSumAggregatorFactory(METRICS[0], METRICS[0]))\n        .build();\n    final IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(schema)\n        .setMaxRowCount(rows.length)\n        .buildOnheap();\n\n    for (InputRow row : rows) {\n      try {\n        index.add(row);\n      }\n      catch (IndexSizeExceededException e) {\n        throw Throwables.propagate(e);\n      }\n    }\n\n    try {\n      INDEX_MERGER_V9.persist(index, persistDir, new IndexSpec(), null);\n    }\n    catch (IOException e) {\n      throw Throwables.propagate(e);\n    }\n\n    return ImmutableMap.of(\n        \"type\", \"local\",\n        \"path\", persistDir.getAbsolutePath()\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":245,"groupId":"1702","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"persist","params":"(FiletmpDir@InputRow...rows)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bc/42c876db7fa2f1eebfbc4d87017233e124ed17.src","preCode":"  private static Map<String, Object> persist(File tmpDir, InputRow... rows)\n  {\n    final File persistDir = new File(tmpDir, UUID.randomUUID().toString());\n    final IncrementalIndexSchema schema = new IncrementalIndexSchema.Builder()\n        .withMinTimestamp(JodaUtils.MIN_INSTANT)\n        .withDimensionsSpec(ROW_PARSER)\n        .withMetrics(new LongSumAggregatorFactory(METRICS[0], METRICS[0]))\n        .build();\n    final IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(schema)\n        .setMaxRowCount(rows.length)\n        .buildOnheap();\n\n    for (InputRow row : rows) {\n      try {\n        index.add(row);\n      }\n      catch (IndexSizeExceededException e) {\n        throw Throwables.propagate(e);\n      }\n    }\n\n    try {\n      INDEX_MERGER_V9.persist(index, persistDir, new IndexSpec(), null);\n    }\n    catch (IOException e) {\n      throw Throwables.propagate(e);\n    }\n\n    return ImmutableMap.of(\n        \"type\", \"local\",\n        \"path\", persistDir.getAbsolutePath()\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/firehose/IngestSegmentFirehoseFactoryTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  private static IncrementalIndex buildIncrementalIndexWithRows(\n      IncrementalIndexSchema schema,\n      int maxRows,\n      Iterable<InputRow> rows\n  )\n  {\n    Preconditions.checkNotNull(schema, \"schema\");\n    final IncrementalIndex incrementalIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(schema)\n        .setMaxRowCount(maxRows)\n        .buildOnheap();\n\n    for (InputRow row : rows) {\n      try {\n        incrementalIndex.add(row);\n      }\n      catch (IndexSizeExceededException e) {\n        throw Throwables.propagate(e);\n      }\n    }\n    return incrementalIndex;\n  }\n","date":"2018-08-31 00:56:26","endLine":215,"groupId":"23162","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildIncrementalIndexWithRows","params":"(IncrementalIndexSchemaschema@intmaxRows@Iterable<InputRow>rows)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/31/b314ba42f2a688b85d1ac82e58cac7cce69ade.src","preCode":"  private static IncrementalIndex buildIncrementalIndexWithRows(\n      IncrementalIndexSchema schema,\n      int maxRows,\n      Iterable<InputRow> rows\n  )\n  {\n    Preconditions.checkNotNull(schema, \"schema\");\n    final IncrementalIndex incrementalIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(schema)\n        .setMaxRowCount(maxRows)\n        .buildOnheap();\n\n    for (InputRow row : rows) {\n      try {\n        incrementalIndex.add(row);\n      }\n      catch (IndexSizeExceededException e) {\n        throw Throwables.propagate(e);\n      }\n    }\n    return incrementalIndex;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexBuilder.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-03-15 05:28:33","codes":[{"authorDate":"2019-03-15 05:28:33","commitOrder":2,"curCode":"  private static Map<String, Object> persist(File tmpDir, InputRow... rows)\n  {\n    final File persistDir = new File(tmpDir, UUID.randomUUID().toString());\n    final IncrementalIndexSchema schema = new IncrementalIndexSchema.Builder()\n        .withMinTimestamp(JodaUtils.MIN_INSTANT)\n        .withDimensionsSpec(ROW_PARSER)\n        .withMetrics(new LongSumAggregatorFactory(METRICS[0], METRICS[0]))\n        .build();\n    final IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(schema)\n        .setMaxRowCount(rows.length)\n        .buildOnheap();\n\n    for (InputRow row : rows) {\n      try {\n        index.add(row);\n      }\n      catch (IndexSizeExceededException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    try {\n      INDEX_MERGER_V9.persist(index, persistDir, new IndexSpec(), null);\n    }\n    catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    return ImmutableMap.of(\n        \"type\", \"local\",\n        \"path\", persistDir.getAbsolutePath()\n    );\n  }\n","date":"2019-03-15 05:28:33","endLine":232,"groupId":"10102","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"persist","params":"(FiletmpDir@InputRow...rows)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e2/24b953efbdf604c8bd23fcd2d208f107b71d19.src","preCode":"  private static Map<String, Object> persist(File tmpDir, InputRow... rows)\n  {\n    final File persistDir = new File(tmpDir, UUID.randomUUID().toString());\n    final IncrementalIndexSchema schema = new IncrementalIndexSchema.Builder()\n        .withMinTimestamp(JodaUtils.MIN_INSTANT)\n        .withDimensionsSpec(ROW_PARSER)\n        .withMetrics(new LongSumAggregatorFactory(METRICS[0], METRICS[0]))\n        .build();\n    final IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(schema)\n        .setMaxRowCount(rows.length)\n        .buildOnheap();\n\n    for (InputRow row : rows) {\n      try {\n        index.add(row);\n      }\n      catch (IndexSizeExceededException e) {\n        throw Throwables.propagate(e);\n      }\n    }\n\n    try {\n      INDEX_MERGER_V9.persist(index, persistDir, new IndexSpec(), null);\n    }\n    catch (IOException e) {\n      throw Throwables.propagate(e);\n    }\n\n    return ImmutableMap.of(\n        \"type\", \"local\",\n        \"path\", persistDir.getAbsolutePath()\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/firehose/IngestSegmentFirehoseFactoryTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2019-03-15 05:28:33","commitOrder":2,"curCode":"  private static IncrementalIndex buildIncrementalIndexWithRows(\n      IncrementalIndexSchema schema,\n      int maxRows,\n      Iterable<InputRow> rows\n  )\n  {\n    Preconditions.checkNotNull(schema, \"schema\");\n    final IncrementalIndex incrementalIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(schema)\n        .setMaxRowCount(maxRows)\n        .buildOnheap();\n\n    for (InputRow row : rows) {\n      try {\n        incrementalIndex.add(row);\n      }\n      catch (IndexSizeExceededException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    return incrementalIndex;\n  }\n","date":"2019-03-15 05:28:33","endLine":215,"groupId":"23162","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildIncrementalIndexWithRows","params":"(IncrementalIndexSchemaschema@intmaxRows@Iterable<InputRow>rows)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a4/7ea001be87d351442afb505baf6d296a27da32.src","preCode":"  private static IncrementalIndex buildIncrementalIndexWithRows(\n      IncrementalIndexSchema schema,\n      int maxRows,\n      Iterable<InputRow> rows\n  )\n  {\n    Preconditions.checkNotNull(schema, \"schema\");\n    final IncrementalIndex incrementalIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(schema)\n        .setMaxRowCount(maxRows)\n        .buildOnheap();\n\n    for (InputRow row : rows) {\n      try {\n        incrementalIndex.add(row);\n      }\n      catch (IndexSizeExceededException e) {\n        throw Throwables.propagate(e);\n      }\n    }\n    return incrementalIndex;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexBuilder.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"7ada1c49f9735a37808f3ed7656d93ae88b8b925","commitMessage":"@@@Prohibit Throwables.propagate() (#7121)\n\n* Throw caught exception.\n\n* Throw caught exceptions.\n\n* Related checkstyle rule is added to prevent further bugs.\n\n* RuntimeException() is used instead of Throwables.propagate().\n\n* Missing import is added.\n\n* Throwables are propogated if possible.\n\n* Throwables are propogated if possible.\n\n* Throwables are propogated if possible.\n\n* Throwables are propogated if possible.\n\n* * Checkstyle definition is improved.\n* Throwables.propagate() usages are removed.\n\n* Checkstyle pattern is changed for only scanning \"Throwables.propagate(\" instead of checking lookbehind.\n\n* Throwable is kept before firing a Runtime Exception.\n\n* Fix unused assignments.\n","date":"2019-03-15 05:28:33","modifiedFileCount":"228","status":"M","submitter":"Furkan KAMACI"},{"authorTime":"2021-01-08 14:18:47","codes":[{"authorDate":"2021-01-08 14:18:47","commitOrder":3,"curCode":"  private static Map<String, Object> persist(File tmpDir, InputRow... rows)\n  {\n    final File persistDir = new File(tmpDir, UUID.randomUUID().toString());\n    final IncrementalIndexSchema schema = new IncrementalIndexSchema.Builder()\n        .withMinTimestamp(JodaUtils.MIN_INSTANT)\n        .withDimensionsSpec(ROW_PARSER)\n        .withMetrics(new LongSumAggregatorFactory(METRICS[0], METRICS[0]))\n        .build();\n    final IncrementalIndex index = new OnheapIncrementalIndex.Builder()\n        .setIndexSchema(schema)\n        .setMaxRowCount(rows.length)\n        .build();\n\n    for (InputRow row : rows) {\n      try {\n        index.add(row);\n      }\n      catch (IndexSizeExceededException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    try {\n      INDEX_MERGER_V9.persist(index, persistDir, new IndexSpec(), null);\n    }\n    catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    return ImmutableMap.of(\n        \"type\", \"local\",\n        \"path\", persistDir.getAbsolutePath()\n    );\n  }\n","date":"2021-01-08 14:18:47","endLine":279,"groupId":"104644","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"persist","params":"(FiletmpDir@InputRow...rows)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/40/0f7da3dbbe1050e2072b8674c47b573defe756.src","preCode":"  private static Map<String, Object> persist(File tmpDir, InputRow... rows)\n  {\n    final File persistDir = new File(tmpDir, UUID.randomUUID().toString());\n    final IncrementalIndexSchema schema = new IncrementalIndexSchema.Builder()\n        .withMinTimestamp(JodaUtils.MIN_INSTANT)\n        .withDimensionsSpec(ROW_PARSER)\n        .withMetrics(new LongSumAggregatorFactory(METRICS[0], METRICS[0]))\n        .build();\n    final IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(schema)\n        .setMaxRowCount(rows.length)\n        .buildOnheap();\n\n    for (InputRow row : rows) {\n      try {\n        index.add(row);\n      }\n      catch (IndexSizeExceededException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    try {\n      INDEX_MERGER_V9.persist(index, persistDir, new IndexSpec(), null);\n    }\n    catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    return ImmutableMap.of(\n        \"type\", \"local\",\n        \"path\", persistDir.getAbsolutePath()\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/firehose/IngestSegmentFirehoseFactoryTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"},{"authorDate":"2021-01-08 14:18:47","commitOrder":3,"curCode":"  private static IncrementalIndex buildIncrementalIndexWithRows(\n      IncrementalIndexSchema schema,\n      int maxRows,\n      Iterable<InputRow> rows\n  )\n  {\n    Preconditions.checkNotNull(schema, \"schema\");\n    final IncrementalIndex incrementalIndex = new OnheapIncrementalIndex.Builder()\n        .setIndexSchema(schema)\n        .setMaxRowCount(maxRows)\n        .build();\n\n    for (InputRow row : rows) {\n      try {\n        incrementalIndex.add(row);\n      }\n      catch (IndexSizeExceededException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    return incrementalIndex;\n  }\n","date":"2021-01-08 14:18:47","endLine":244,"groupId":"104644","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"buildIncrementalIndexWithRows","params":"(IncrementalIndexSchemaschema@intmaxRows@Iterable<InputRow>rows)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c5/d0b3af8508516b7aa67a445506ade811558064.src","preCode":"  private static IncrementalIndex buildIncrementalIndexWithRows(\n      IncrementalIndexSchema schema,\n      int maxRows,\n      Iterable<InputRow> rows\n  )\n  {\n    Preconditions.checkNotNull(schema, \"schema\");\n    final IncrementalIndex incrementalIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(schema)\n        .setMaxRowCount(maxRows)\n        .buildOnheap();\n\n    for (InputRow row : rows) {\n      try {\n        incrementalIndex.add(row);\n      }\n      catch (IndexSizeExceededException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    return incrementalIndex;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexBuilder.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"}],"commitId":"08ab82f55ca856d60dfe1088c1c0393428b0bb6d","commitMessage":"@@@IncrementalIndex Tests and Benchmarks Parametrization (#10593)\n\n* Remove redundant IncrementalIndex.Builder\n\n* Parametrize incremental index tests and benchmarks\n\n- Reveal and fix a bug in OffheapIncrementalIndex\n\n* Fix forbiddenapis error: Forbidden method invocation: java.lang.String#format(java.lang.String. java.lang.Object[]) [Uses default locale]\n\n* Fix Intellij errors: declared exception is never thrown\n\n* Add documentation and validate before closing objects on tearDown.\n\n* Add documentation to OffheapIncrementalIndexTestSpec\n\n* Doc corrections and minor changes.\n\n* Add logging for generated rows.\n\n* Refactor new tests/benchmarks.\n\n* Improve IncrementalIndexCreator documentation\n\n* Add required tests for DataGenerator\n\n* Revert \"rollupOpportunity\" to be a string","date":"2021-01-08 14:18:47","modifiedFileCount":"62","status":"M","submitter":"Liran Funaro"}]
