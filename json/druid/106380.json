[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testAlphaNumericTopNWithNullPreviousStop()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(Granularities.ALL)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(new DimensionTopNMetricSpec(null, StringComparators.ALPHANUMERIC))\n        .threshold(2)\n        .intervals(QueryRunnerTestHelper.secondOnly)\n        .aggregators(duplicateAggregators(\n            QueryRunnerTestHelper.rowsCount,\n            new CountAggregatorFactory(\"rows1\")\n        ))\n        .build();\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-04-02T00:00:00.000Z\"),\n            new TopNResultValue(\n                withDuplicateResults(\n                    Arrays.asList(\n                        ImmutableMap.of(\n                            \"market\", \"spot\",\n                            \"rows\", 9L\n                        ),\n                        ImmutableMap.of(\n                            \"market\", \"total_market\",\n                            \"rows\", 2L\n                        )\n                    ),\n                    \"rows\",\n                    \"rows1\"\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query), new HashMap<String, Object>()));\n  }\n","date":"2018-08-31 00:56:26","endLine":4128,"groupId":"19112","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAlphaNumericTopNWithNullPreviousStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d8/05065b1a763d6958ac6c554b91a76be76340a5.src","preCode":"  public void testAlphaNumericTopNWithNullPreviousStop()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(Granularities.ALL)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(new DimensionTopNMetricSpec(null, StringComparators.ALPHANUMERIC))\n        .threshold(2)\n        .intervals(QueryRunnerTestHelper.secondOnly)\n        .aggregators(duplicateAggregators(\n            QueryRunnerTestHelper.rowsCount,\n            new CountAggregatorFactory(\"rows1\")\n        ))\n        .build();\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-04-02T00:00:00.000Z\"),\n            new TopNResultValue(\n                withDuplicateResults(\n                    Arrays.asList(\n                        ImmutableMap.of(\n                            \"market\", \"spot\",\n                            \"rows\", 9L\n                        ),\n                        ImmutableMap.of(\n                            \"market\", \"total_market\",\n                            \"rows\", 2L\n                        )\n                    ),\n                    \"rows\",\n                    \"rows1\"\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query), new HashMap<String, Object>()));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4092,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testNumericDimensionTopNWithNullPreviousStop()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(Granularities.ALL)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(new DimensionTopNMetricSpec(null, StringComparators.NUMERIC))\n        .threshold(2)\n        .intervals(QueryRunnerTestHelper.secondOnly)\n        .aggregators(duplicateAggregators(\n            QueryRunnerTestHelper.rowsCount,\n            new CountAggregatorFactory(\"rows1\")\n        ))\n        .build();\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-04-02T00:00:00.000Z\"),\n            new TopNResultValue(\n                withDuplicateResults(\n                    Arrays.asList(\n                        ImmutableMap.of(\n                            \"market\", \"spot\",\n                            \"rows\", 9L\n                        ),\n                        ImmutableMap.of(\n                            \"market\", \"total_market\",\n                            \"rows\", 2L\n                        )\n                    ),\n                    \"rows\",\n                    \"rows1\"\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query), new HashMap<String, Object>()));\n  }\n","date":"2018-08-31 00:56:26","endLine":4167,"groupId":"19112","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNumericDimensionTopNWithNullPreviousStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d8/05065b1a763d6958ac6c554b91a76be76340a5.src","preCode":"  public void testNumericDimensionTopNWithNullPreviousStop()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(Granularities.ALL)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(new DimensionTopNMetricSpec(null, StringComparators.NUMERIC))\n        .threshold(2)\n        .intervals(QueryRunnerTestHelper.secondOnly)\n        .aggregators(duplicateAggregators(\n            QueryRunnerTestHelper.rowsCount,\n            new CountAggregatorFactory(\"rows1\")\n        ))\n        .build();\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-04-02T00:00:00.000Z\"),\n            new TopNResultValue(\n                withDuplicateResults(\n                    Arrays.asList(\n                        ImmutableMap.of(\n                            \"market\", \"spot\",\n                            \"rows\", 9L\n                        ),\n                        ImmutableMap.of(\n                            \"market\", \"total_market\",\n                            \"rows\", 2L\n                        )\n                    ),\n                    \"rows\",\n                    \"rows1\"\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query), new HashMap<String, Object>()));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4131,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-07-24 23:29:03","codes":[{"authorDate":"2019-07-24 23:29:03","commitOrder":2,"curCode":"  public void testAlphaNumericTopNWithNullPreviousStop()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(Granularities.ALL)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(new DimensionTopNMetricSpec(null, StringComparators.ALPHANUMERIC))\n        .threshold(2)\n        .intervals(QueryRunnerTestHelper.secondOnly)\n        .aggregators(duplicateAggregators(\n            QueryRunnerTestHelper.rowsCount,\n            new CountAggregatorFactory(\"rows1\")\n        ))\n        .build();\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-04-02T00:00:00.000Z\"),\n            new TopNResultValue(\n                withDuplicateResults(\n                    Arrays.asList(\n                        ImmutableMap.of(\n                            \"market\", \"spot\",\n                            \"rows\", 9L\n                        ),\n                        ImmutableMap.of(\n                            \"market\", \"total_market\",\n                            \"rows\", 2L\n                        )\n                    ),\n                    \"rows\",\n                    \"rows1\"\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query)));\n  }\n","date":"2019-07-24 23:29:03","endLine":4140,"groupId":"19112","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAlphaNumericTopNWithNullPreviousStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6a/06d7354d68e43b2b747fd720b5a803a0567773.src","preCode":"  public void testAlphaNumericTopNWithNullPreviousStop()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(Granularities.ALL)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(new DimensionTopNMetricSpec(null, StringComparators.ALPHANUMERIC))\n        .threshold(2)\n        .intervals(QueryRunnerTestHelper.secondOnly)\n        .aggregators(duplicateAggregators(\n            QueryRunnerTestHelper.rowsCount,\n            new CountAggregatorFactory(\"rows1\")\n        ))\n        .build();\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-04-02T00:00:00.000Z\"),\n            new TopNResultValue(\n                withDuplicateResults(\n                    Arrays.asList(\n                        ImmutableMap.of(\n                            \"market\", \"spot\",\n                            \"rows\", 9L\n                        ),\n                        ImmutableMap.of(\n                            \"market\", \"total_market\",\n                            \"rows\", 2L\n                        )\n                    ),\n                    \"rows\",\n                    \"rows1\"\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query), new HashMap<String, Object>()));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4104,"status":"M"},{"authorDate":"2019-07-24 23:29:03","commitOrder":2,"curCode":"  public void testNumericDimensionTopNWithNullPreviousStop()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(Granularities.ALL)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(new DimensionTopNMetricSpec(null, StringComparators.NUMERIC))\n        .threshold(2)\n        .intervals(QueryRunnerTestHelper.secondOnly)\n        .aggregators(duplicateAggregators(\n            QueryRunnerTestHelper.rowsCount,\n            new CountAggregatorFactory(\"rows1\")\n        ))\n        .build();\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-04-02T00:00:00.000Z\"),\n            new TopNResultValue(\n                withDuplicateResults(\n                    Arrays.asList(\n                        ImmutableMap.of(\n                            \"market\", \"spot\",\n                            \"rows\", 9L\n                        ),\n                        ImmutableMap.of(\n                            \"market\", \"total_market\",\n                            \"rows\", 2L\n                        )\n                    ),\n                    \"rows\",\n                    \"rows1\"\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query)));\n  }\n","date":"2019-07-24 23:29:03","endLine":4179,"groupId":"19112","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNumericDimensionTopNWithNullPreviousStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6a/06d7354d68e43b2b747fd720b5a803a0567773.src","preCode":"  public void testNumericDimensionTopNWithNullPreviousStop()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(Granularities.ALL)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(new DimensionTopNMetricSpec(null, StringComparators.NUMERIC))\n        .threshold(2)\n        .intervals(QueryRunnerTestHelper.secondOnly)\n        .aggregators(duplicateAggregators(\n            QueryRunnerTestHelper.rowsCount,\n            new CountAggregatorFactory(\"rows1\")\n        ))\n        .build();\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-04-02T00:00:00.000Z\"),\n            new TopNResultValue(\n                withDuplicateResults(\n                    Arrays.asList(\n                        ImmutableMap.of(\n                            \"market\", \"spot\",\n                            \"rows\", 9L\n                        ),\n                        ImmutableMap.of(\n                            \"market\", \"total_market\",\n                            \"rows\", 2L\n                        )\n                    ),\n                    \"rows\",\n                    \"rows1\"\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query), new HashMap<String, Object>()));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4143,"status":"M"}],"commitId":"799d20249fe6333ea86b020f6d09c91fa4d3f998","commitMessage":"@@@Response context refactoring (#8110)\n\n* Response context refactoring\n\n* Serialization/Deserialization of ResponseContext\n\n* Added java doc comments\n\n* Renamed vars related to ResponseContext\n\n* Renamed empty() methods to createEmpty()\n\n* Fixed ResponseContext usage\n\n* Renamed multiple ResponseContext static fields\n\n* Added PublicApi annotations\n\n* Renamed QueryResponseContext class to ResourceIOReaderWriter\n\n* Moved the protected method below public static constants\n\n* Added createEmpty method to ResponseContext with DefaultResponseContext creation\n\n* Fixed inspection error\n\n* Added comments to the ResponseContext length limit and ResponseContext\nhttp header name\n\n* Added a comment of possible future refactoring\n\n* Removed .gitignore file of indexing-service\n\n* Removed a never-used method\n\n* VisibleForTesting method reducing boilerplate\n\nCo-Authored-By: Clint Wylie <cjwylie@gmail.com>\n\n* Reduced boilerplate\n\n* Renamed the method serialize to serializeWith\n\n* Removed unused import\n\n* Fixed incorrectly refactored test method\n\n* Added comments for ResponseContext keys\n\n* Fixed incorrectly refactored test method\n\n* Fixed IntervalChunkingQueryRunnerTest mocks\n","date":"2019-07-24 23:29:03","modifiedFileCount":"142","status":"M","submitter":"Eugene Sevastianov"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testAlphaNumericTopNWithNullPreviousStop()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .granularity(Granularities.ALL)\n        .dimension(QueryRunnerTestHelper.MARKET_DIMENSION)\n        .metric(new DimensionTopNMetricSpec(null, StringComparators.ALPHANUMERIC))\n        .threshold(2)\n        .intervals(QueryRunnerTestHelper.SECOND_ONLY)\n        .aggregators(duplicateAggregators(\n            QueryRunnerTestHelper.ROWS_COUNT,\n            new CountAggregatorFactory(\"rows1\")\n        ))\n        .build();\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-04-02T00:00:00.000Z\"),\n            new TopNResultValue(\n                withDuplicateResults(\n                    Arrays.asList(\n                        ImmutableMap.of(\n                            \"market\", \"spot\",\n                            \"rows\", 9L\n                        ),\n                        ImmutableMap.of(\n                            \"market\", \"total_market\",\n                            \"rows\", 2L\n                        )\n                    ),\n                    \"rows\",\n                    \"rows1\"\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query)));\n  }\n","date":"2019-08-23 18:13:54","endLine":4138,"groupId":"106380","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAlphaNumericTopNWithNullPreviousStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c6/f894ad5ddd5fccc9520230d8961edd721a636c.src","preCode":"  public void testAlphaNumericTopNWithNullPreviousStop()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(Granularities.ALL)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(new DimensionTopNMetricSpec(null, StringComparators.ALPHANUMERIC))\n        .threshold(2)\n        .intervals(QueryRunnerTestHelper.secondOnly)\n        .aggregators(duplicateAggregators(\n            QueryRunnerTestHelper.rowsCount,\n            new CountAggregatorFactory(\"rows1\")\n        ))\n        .build();\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-04-02T00:00:00.000Z\"),\n            new TopNResultValue(\n                withDuplicateResults(\n                    Arrays.asList(\n                        ImmutableMap.of(\n                            \"market\", \"spot\",\n                            \"rows\", 9L\n                        ),\n                        ImmutableMap.of(\n                            \"market\", \"total_market\",\n                            \"rows\", 2L\n                        )\n                    ),\n                    \"rows\",\n                    \"rows1\"\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query)));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4102,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testNumericDimensionTopNWithNullPreviousStop()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .granularity(Granularities.ALL)\n        .dimension(QueryRunnerTestHelper.MARKET_DIMENSION)\n        .metric(new DimensionTopNMetricSpec(null, StringComparators.NUMERIC))\n        .threshold(2)\n        .intervals(QueryRunnerTestHelper.SECOND_ONLY)\n        .aggregators(duplicateAggregators(\n            QueryRunnerTestHelper.ROWS_COUNT,\n            new CountAggregatorFactory(\"rows1\")\n        ))\n        .build();\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-04-02T00:00:00.000Z\"),\n            new TopNResultValue(\n                withDuplicateResults(\n                    Arrays.asList(\n                        ImmutableMap.of(\n                            \"market\", \"spot\",\n                            \"rows\", 9L\n                        ),\n                        ImmutableMap.of(\n                            \"market\", \"total_market\",\n                            \"rows\", 2L\n                        )\n                    ),\n                    \"rows\",\n                    \"rows1\"\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query)));\n  }\n","date":"2019-08-23 18:13:54","endLine":4177,"groupId":"106380","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNumericDimensionTopNWithNullPreviousStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c6/f894ad5ddd5fccc9520230d8961edd721a636c.src","preCode":"  public void testNumericDimensionTopNWithNullPreviousStop()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(Granularities.ALL)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(new DimensionTopNMetricSpec(null, StringComparators.NUMERIC))\n        .threshold(2)\n        .intervals(QueryRunnerTestHelper.secondOnly)\n        .aggregators(duplicateAggregators(\n            QueryRunnerTestHelper.rowsCount,\n            new CountAggregatorFactory(\"rows1\")\n        ))\n        .build();\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-04-02T00:00:00.000Z\"),\n            new TopNResultValue(\n                withDuplicateResults(\n                    Arrays.asList(\n                        ImmutableMap.of(\n                            \"market\", \"spot\",\n                            \"rows\", 9L\n                        ),\n                        ImmutableMap.of(\n                            \"market\", \"total_market\",\n                            \"rows\", 2L\n                        )\n                    ),\n                    \"rows\",\n                    \"rows1\"\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query)));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4141,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
