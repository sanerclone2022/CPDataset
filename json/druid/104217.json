[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDoSuccessfulTerminate()\n  {\n    EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0);\n    EasyMock.expect(autoScaler.getMaxNumWorkers()).andReturn(1);\n    EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.anyObject()))\n            .andReturn(Lists.<String>newArrayList());\n    EasyMock.expect(autoScaler.terminate(EasyMock.anyObject())).andReturn(\n        new AutoScalingData(Lists.newArrayList())\n    );\n    EasyMock.replay(autoScaler);\n    RemoteTaskRunner runner = EasyMock.createMock(RemoteTaskRunner.class);\n    EasyMock.expect(runner.getPendingTasks()).andReturn(\n        Collections.singletonList(\n            new RemoteTaskRunnerWorkItem(testTask.getId(), testTask.getType(), null, null, testTask.getDataSource())\n                .withQueueInsertionTime(DateTimes.nowUtc())\n        )\n    ).times(2);\n    EasyMock.expect(runner.getWorkers()).andReturn(\n        Collections.singletonList(\n            new TestZkWorker(testTask).toImmutable()\n        )\n    ).times(2);\n    EasyMock.expect(runner.markWorkersLazy(EasyMock.anyObject(), EasyMock.anyInt()))\n            .andReturn(Collections.singletonList(new TestZkWorker(testTask).getWorker()));\n    EasyMock.expect(runner.getLazyWorkers()).andReturn(Lists.newArrayList());\n    EasyMock.replay(runner);\n\n    Provisioner provisioner = strategy.makeProvisioner(runner);\n    boolean terminatedSomething = provisioner.doTerminate();\n\n    Assert.assertTrue(terminatedSomething);\n    Assert.assertTrue(provisioner.getStats().toList().size() == 1);\n    Assert.assertTrue(\n        provisioner.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.TERMINATE\n    );\n\n    EasyMock.verify(autoScaler);\n  }\n","date":"2018-08-31 00:56:26","endLine":299,"groupId":"19861","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoSuccessfulTerminate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7d/bd5fe6f90ce7f12834323fbfa4a45b25dd8657.src","preCode":"  public void testDoSuccessfulTerminate()\n  {\n    EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0);\n    EasyMock.expect(autoScaler.getMaxNumWorkers()).andReturn(1);\n    EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.anyObject()))\n            .andReturn(Lists.<String>newArrayList());\n    EasyMock.expect(autoScaler.terminate(EasyMock.anyObject())).andReturn(\n        new AutoScalingData(Lists.newArrayList())\n    );\n    EasyMock.replay(autoScaler);\n    RemoteTaskRunner runner = EasyMock.createMock(RemoteTaskRunner.class);\n    EasyMock.expect(runner.getPendingTasks()).andReturn(\n        Collections.singletonList(\n            new RemoteTaskRunnerWorkItem(testTask.getId(), testTask.getType(), null, null, testTask.getDataSource())\n                .withQueueInsertionTime(DateTimes.nowUtc())\n        )\n    ).times(2);\n    EasyMock.expect(runner.getWorkers()).andReturn(\n        Collections.singletonList(\n            new TestZkWorker(testTask).toImmutable()\n        )\n    ).times(2);\n    EasyMock.expect(runner.markWorkersLazy(EasyMock.anyObject(), EasyMock.anyInt()))\n            .andReturn(Collections.singletonList(new TestZkWorker(testTask).getWorker()));\n    EasyMock.expect(runner.getLazyWorkers()).andReturn(Lists.newArrayList());\n    EasyMock.replay(runner);\n\n    Provisioner provisioner = strategy.makeProvisioner(runner);\n    boolean terminatedSomething = provisioner.doTerminate();\n\n    Assert.assertTrue(terminatedSomething);\n    Assert.assertTrue(provisioner.getStats().toList().size() == 1);\n    Assert.assertTrue(\n        provisioner.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.TERMINATE\n    );\n\n    EasyMock.verify(autoScaler);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/autoscaling/SimpleProvisioningStrategyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDoSuccessfulTerminate()\n  {\n    EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0);\n    EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.anyObject()))\n            .andReturn(Lists.<String>newArrayList());\n    EasyMock.expect(autoScaler.terminate(EasyMock.anyObject())).andReturn(\n        new AutoScalingData(Lists.newArrayList())\n    );\n    EasyMock.replay(autoScaler);\n    RemoteTaskRunner runner = EasyMock.createMock(RemoteTaskRunner.class);\n    EasyMock.expect(runner.getPendingTasks()).andReturn(\n        Collections.singletonList(\n            new RemoteTaskRunnerWorkItem(\n                testTask.getId(),\n                testTask.getType(),\n                null,\n                TaskLocation.unknown(),\n                testTask.getDataSource()\n            ).withQueueInsertionTime(DateTimes.nowUtc())\n        )\n    ).times(2);\n    EasyMock.expect(runner.getWorkers()).andReturn(\n        Collections.singletonList(\n            new TestZkWorker(testTask).toImmutable()\n        )\n    ).times(2);\n    EasyMock.expect(runner.markWorkersLazy(EasyMock.anyObject(), EasyMock.anyInt()))\n            .andReturn(Collections.singletonList(new TestZkWorker(testTask).getWorker()));\n    EasyMock.expect(runner.getLazyWorkers()).andReturn(Lists.newArrayList());\n    EasyMock.replay(runner);\n\n    Provisioner provisioner = strategy.makeProvisioner(runner);\n    boolean terminatedSomething = provisioner.doTerminate();\n\n    Assert.assertTrue(terminatedSomething);\n    Assert.assertTrue(provisioner.getStats().toList().size() == 1);\n    Assert.assertTrue(\n        provisioner.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.TERMINATE\n    );\n\n    EasyMock.verify(autoScaler);\n  }\n","date":"2018-08-31 00:56:26","endLine":364,"groupId":"17723","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDoSuccessfulTerminate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/14/76016a064182ea9c3f195c559bcb39b47a5b4d.src","preCode":"  public void testDoSuccessfulTerminate()\n  {\n    EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0);\n    EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.anyObject()))\n            .andReturn(Lists.<String>newArrayList());\n    EasyMock.expect(autoScaler.terminate(EasyMock.anyObject())).andReturn(\n        new AutoScalingData(Lists.newArrayList())\n    );\n    EasyMock.replay(autoScaler);\n    RemoteTaskRunner runner = EasyMock.createMock(RemoteTaskRunner.class);\n    EasyMock.expect(runner.getPendingTasks()).andReturn(\n        Collections.singletonList(\n            new RemoteTaskRunnerWorkItem(\n                testTask.getId(),\n                testTask.getType(),\n                null,\n                TaskLocation.unknown(),\n                testTask.getDataSource()\n            ).withQueueInsertionTime(DateTimes.nowUtc())\n        )\n    ).times(2);\n    EasyMock.expect(runner.getWorkers()).andReturn(\n        Collections.singletonList(\n            new TestZkWorker(testTask).toImmutable()\n        )\n    ).times(2);\n    EasyMock.expect(runner.markWorkersLazy(EasyMock.anyObject(), EasyMock.anyInt()))\n            .andReturn(Collections.singletonList(new TestZkWorker(testTask).getWorker()));\n    EasyMock.expect(runner.getLazyWorkers()).andReturn(Lists.newArrayList());\n    EasyMock.replay(runner);\n\n    Provisioner provisioner = strategy.makeProvisioner(runner);\n    boolean terminatedSomething = provisioner.doTerminate();\n\n    Assert.assertTrue(terminatedSomething);\n    Assert.assertTrue(provisioner.getStats().toList().size() == 1);\n    Assert.assertTrue(\n        provisioner.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.TERMINATE\n    );\n\n    EasyMock.verify(autoScaler);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/autoscaling/PendingTaskBasedProvisioningStrategyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-29 20:02:43","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testDoSuccessfulTerminate()\n  {\n    EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0);\n    EasyMock.expect(autoScaler.getMaxNumWorkers()).andReturn(1);\n    EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.anyObject()))\n            .andReturn(new ArrayList<String>());\n    EasyMock.expect(autoScaler.terminate(EasyMock.anyObject())).andReturn(\n        new AutoScalingData(new ArrayList<>())\n    );\n    EasyMock.replay(autoScaler);\n    RemoteTaskRunner runner = EasyMock.createMock(RemoteTaskRunner.class);\n    EasyMock.expect(runner.getPendingTasks()).andReturn(\n        Collections.singletonList(\n            new RemoteTaskRunnerWorkItem(testTask.getId(), testTask.getType(), null, null, testTask.getDataSource())\n                .withQueueInsertionTime(DateTimes.nowUtc())\n        )\n    ).times(2);\n    EasyMock.expect(runner.getWorkers()).andReturn(\n        Collections.singletonList(\n            new TestZkWorker(testTask).toImmutable()\n        )\n    ).times(2);\n    EasyMock.expect(runner.markWorkersLazy(EasyMock.anyObject(), EasyMock.anyInt()))\n            .andReturn(Collections.singletonList(new TestZkWorker(testTask).getWorker()));\n    EasyMock.expect(runner.getLazyWorkers()).andReturn(new ArrayList<>());\n    EasyMock.replay(runner);\n\n    Provisioner provisioner = strategy.makeProvisioner(runner);\n    boolean terminatedSomething = provisioner.doTerminate();\n\n    Assert.assertTrue(terminatedSomething);\n    Assert.assertTrue(provisioner.getStats().toList().size() == 1);\n    Assert.assertTrue(\n        provisioner.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.TERMINATE\n    );\n\n    EasyMock.verify(autoScaler);\n  }\n","date":"2018-10-29 20:02:43","endLine":299,"groupId":"18960","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoSuccessfulTerminate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/77/96dfcb4178ceda4731c394c5a1fe73fb4a0ff5.src","preCode":"  public void testDoSuccessfulTerminate()\n  {\n    EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0);\n    EasyMock.expect(autoScaler.getMaxNumWorkers()).andReturn(1);\n    EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.anyObject()))\n            .andReturn(Lists.<String>newArrayList());\n    EasyMock.expect(autoScaler.terminate(EasyMock.anyObject())).andReturn(\n        new AutoScalingData(Lists.newArrayList())\n    );\n    EasyMock.replay(autoScaler);\n    RemoteTaskRunner runner = EasyMock.createMock(RemoteTaskRunner.class);\n    EasyMock.expect(runner.getPendingTasks()).andReturn(\n        Collections.singletonList(\n            new RemoteTaskRunnerWorkItem(testTask.getId(), testTask.getType(), null, null, testTask.getDataSource())\n                .withQueueInsertionTime(DateTimes.nowUtc())\n        )\n    ).times(2);\n    EasyMock.expect(runner.getWorkers()).andReturn(\n        Collections.singletonList(\n            new TestZkWorker(testTask).toImmutable()\n        )\n    ).times(2);\n    EasyMock.expect(runner.markWorkersLazy(EasyMock.anyObject(), EasyMock.anyInt()))\n            .andReturn(Collections.singletonList(new TestZkWorker(testTask).getWorker()));\n    EasyMock.expect(runner.getLazyWorkers()).andReturn(Lists.newArrayList());\n    EasyMock.replay(runner);\n\n    Provisioner provisioner = strategy.makeProvisioner(runner);\n    boolean terminatedSomething = provisioner.doTerminate();\n\n    Assert.assertTrue(terminatedSomething);\n    Assert.assertTrue(provisioner.getStats().toList().size() == 1);\n    Assert.assertTrue(\n        provisioner.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.TERMINATE\n    );\n\n    EasyMock.verify(autoScaler);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/autoscaling/SimpleProvisioningStrategyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"},{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testDoSuccessfulTerminate()\n  {\n    EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0);\n    EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.anyObject()))\n            .andReturn(new ArrayList<String>());\n    EasyMock.expect(autoScaler.terminate(EasyMock.anyObject())).andReturn(\n        new AutoScalingData(new ArrayList<>())\n    );\n    EasyMock.replay(autoScaler);\n    RemoteTaskRunner runner = EasyMock.createMock(RemoteTaskRunner.class);\n    EasyMock.expect(runner.getPendingTasks()).andReturn(\n        Collections.singletonList(\n            new RemoteTaskRunnerWorkItem(\n                testTask.getId(),\n                testTask.getType(),\n                null,\n                TaskLocation.unknown(),\n                testTask.getDataSource()\n            ).withQueueInsertionTime(DateTimes.nowUtc())\n        )\n    ).times(2);\n    EasyMock.expect(runner.getWorkers()).andReturn(\n        Collections.singletonList(\n            new TestZkWorker(testTask).toImmutable()\n        )\n    ).times(2);\n    EasyMock.expect(runner.markWorkersLazy(EasyMock.anyObject(), EasyMock.anyInt()))\n            .andReturn(Collections.singletonList(new TestZkWorker(testTask).getWorker()));\n    EasyMock.expect(runner.getLazyWorkers()).andReturn(new ArrayList<>());\n    EasyMock.replay(runner);\n\n    Provisioner provisioner = strategy.makeProvisioner(runner);\n    boolean terminatedSomething = provisioner.doTerminate();\n\n    Assert.assertTrue(terminatedSomething);\n    Assert.assertTrue(provisioner.getStats().toList().size() == 1);\n    Assert.assertTrue(\n        provisioner.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.TERMINATE\n    );\n\n    EasyMock.verify(autoScaler);\n  }\n","date":"2018-10-29 20:02:43","endLine":364,"groupId":"10907","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDoSuccessfulTerminate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/b0949c96fc5606a64758c60cc12c827180fce1.src","preCode":"  public void testDoSuccessfulTerminate()\n  {\n    EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0);\n    EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.anyObject()))\n            .andReturn(Lists.<String>newArrayList());\n    EasyMock.expect(autoScaler.terminate(EasyMock.anyObject())).andReturn(\n        new AutoScalingData(Lists.newArrayList())\n    );\n    EasyMock.replay(autoScaler);\n    RemoteTaskRunner runner = EasyMock.createMock(RemoteTaskRunner.class);\n    EasyMock.expect(runner.getPendingTasks()).andReturn(\n        Collections.singletonList(\n            new RemoteTaskRunnerWorkItem(\n                testTask.getId(),\n                testTask.getType(),\n                null,\n                TaskLocation.unknown(),\n                testTask.getDataSource()\n            ).withQueueInsertionTime(DateTimes.nowUtc())\n        )\n    ).times(2);\n    EasyMock.expect(runner.getWorkers()).andReturn(\n        Collections.singletonList(\n            new TestZkWorker(testTask).toImmutable()\n        )\n    ).times(2);\n    EasyMock.expect(runner.markWorkersLazy(EasyMock.anyObject(), EasyMock.anyInt()))\n            .andReturn(Collections.singletonList(new TestZkWorker(testTask).getWorker()));\n    EasyMock.expect(runner.getLazyWorkers()).andReturn(Lists.newArrayList());\n    EasyMock.replay(runner);\n\n    Provisioner provisioner = strategy.makeProvisioner(runner);\n    boolean terminatedSomething = provisioner.doTerminate();\n\n    Assert.assertTrue(terminatedSomething);\n    Assert.assertTrue(provisioner.getStats().toList().size() == 1);\n    Assert.assertTrue(\n        provisioner.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.TERMINATE\n    );\n\n    EasyMock.verify(autoScaler);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/autoscaling/PendingTaskBasedProvisioningStrategyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"},{"authorTime":"2021-07-15 07:52:25","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":3,"curCode":"  public void testDoSuccessfulTerminate()\n  {\n    EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0);\n    EasyMock.expect(autoScaler.getMaxNumWorkers()).andReturn(1);\n    EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.anyObject()))\n            .andReturn(new ArrayList<String>());\n    EasyMock.expect(autoScaler.terminate(EasyMock.anyObject())).andReturn(\n        new AutoScalingData(new ArrayList<>())\n    );\n    EasyMock.replay(autoScaler);\n    RemoteTaskRunner runner = EasyMock.createMock(RemoteTaskRunner.class);\n    EasyMock.expect(runner.getPendingTasks()).andReturn(\n        Collections.singletonList(\n            new RemoteTaskRunnerWorkItem(testTask.getId(), testTask.getType(), null, null, testTask.getDataSource())\n                .withQueueInsertionTime(DateTimes.nowUtc())\n        )\n    ).times(2);\n    EasyMock.expect(runner.getWorkers()).andReturn(\n        Collections.singletonList(\n            new TestZkWorker(testTask).toImmutable()\n        )\n    ).times(2);\n    EasyMock.expect(runner.markWorkersLazy(EasyMock.anyObject(), EasyMock.anyInt()))\n            .andReturn(Collections.singletonList(new TestZkWorker(testTask).getWorker()));\n    EasyMock.expect(runner.getLazyWorkers()).andReturn(new ArrayList<>());\n    EasyMock.replay(runner);\n\n    Provisioner provisioner = strategy.makeProvisioner(runner);\n    boolean terminatedSomething = provisioner.doTerminate();\n\n    Assert.assertTrue(terminatedSomething);\n    Assert.assertTrue(provisioner.getStats().toList().size() == 1);\n    Assert.assertTrue(\n        provisioner.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.TERMINATE\n    );\n\n    EasyMock.verify(autoScaler);\n  }\n","date":"2018-10-29 20:02:43","endLine":299,"groupId":"104217","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoSuccessfulTerminate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/77/96dfcb4178ceda4731c394c5a1fe73fb4a0ff5.src","preCode":"  public void testDoSuccessfulTerminate()\n  {\n    EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0);\n    EasyMock.expect(autoScaler.getMaxNumWorkers()).andReturn(1);\n    EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.anyObject()))\n            .andReturn(new ArrayList<String>());\n    EasyMock.expect(autoScaler.terminate(EasyMock.anyObject())).andReturn(\n        new AutoScalingData(new ArrayList<>())\n    );\n    EasyMock.replay(autoScaler);\n    RemoteTaskRunner runner = EasyMock.createMock(RemoteTaskRunner.class);\n    EasyMock.expect(runner.getPendingTasks()).andReturn(\n        Collections.singletonList(\n            new RemoteTaskRunnerWorkItem(testTask.getId(), testTask.getType(), null, null, testTask.getDataSource())\n                .withQueueInsertionTime(DateTimes.nowUtc())\n        )\n    ).times(2);\n    EasyMock.expect(runner.getWorkers()).andReturn(\n        Collections.singletonList(\n            new TestZkWorker(testTask).toImmutable()\n        )\n    ).times(2);\n    EasyMock.expect(runner.markWorkersLazy(EasyMock.anyObject(), EasyMock.anyInt()))\n            .andReturn(Collections.singletonList(new TestZkWorker(testTask).getWorker()));\n    EasyMock.expect(runner.getLazyWorkers()).andReturn(new ArrayList<>());\n    EasyMock.replay(runner);\n\n    Provisioner provisioner = strategy.makeProvisioner(runner);\n    boolean terminatedSomething = provisioner.doTerminate();\n\n    Assert.assertTrue(terminatedSomething);\n    Assert.assertTrue(provisioner.getStats().toList().size() == 1);\n    Assert.assertTrue(\n        provisioner.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.TERMINATE\n    );\n\n    EasyMock.verify(autoScaler);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/autoscaling/SimpleProvisioningStrategyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"N"},{"authorDate":"2021-07-15 07:52:25","commitOrder":3,"curCode":"  public void testDoSuccessfulTerminate()\n  {\n    EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(1).times(2);\n    EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.anyObject()))\n            .andReturn(new ArrayList<String>());\n    EasyMock.expect(autoScaler.terminate(EasyMock.anyObject())).andReturn(\n        new AutoScalingData(new ArrayList<>())\n    );\n    EasyMock.replay(autoScaler);\n    RemoteTaskRunner runner = EasyMock.createMock(RemoteTaskRunner.class);\n    EasyMock.expect(runner.getPendingTasks()).andReturn(\n        Collections.singletonList(\n            new RemoteTaskRunnerWorkItem(\n                testTask.getId(),\n                testTask.getType(),\n                null,\n                TaskLocation.unknown(),\n                testTask.getDataSource()\n            ).withQueueInsertionTime(DateTimes.nowUtc())\n        )\n    ).times(2);\n    EasyMock.expect(runner.getWorkers()).andReturn(\n        ImmutableList.of(\n            new TestZkWorker(testTask).toImmutable(),\n            new TestZkWorker(testTask).toImmutable()\n        )\n    ).times(2);\n    EasyMock.expect(runner.markWorkersLazy(EasyMock.anyObject(), EasyMock.anyInt()))\n            .andReturn(Collections.singletonList(new TestZkWorker(testTask).getWorker()));\n    EasyMock.expect(runner.getLazyWorkers()).andReturn(new ArrayList<>());\n    EasyMock.replay(runner);\n\n    Provisioner provisioner = strategy.makeProvisioner(runner);\n    boolean terminatedSomething = provisioner.doTerminate();\n\n    Assert.assertTrue(terminatedSomething);\n    Assert.assertTrue(provisioner.getStats().toList().size() == 1);\n    Assert.assertTrue(\n        provisioner.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.TERMINATE\n    );\n\n    EasyMock.verify(autoScaler);\n  }\n","date":"2021-07-15 07:52:25","endLine":635,"groupId":"104217","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testDoSuccessfulTerminate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/34/af0cadc56aab2d867f093e37c983fe14254749.src","preCode":"  public void testDoSuccessfulTerminate()\n  {\n    EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0);\n    EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.anyObject()))\n            .andReturn(new ArrayList<String>());\n    EasyMock.expect(autoScaler.terminate(EasyMock.anyObject())).andReturn(\n        new AutoScalingData(new ArrayList<>())\n    );\n    EasyMock.replay(autoScaler);\n    RemoteTaskRunner runner = EasyMock.createMock(RemoteTaskRunner.class);\n    EasyMock.expect(runner.getPendingTasks()).andReturn(\n        Collections.singletonList(\n            new RemoteTaskRunnerWorkItem(\n                testTask.getId(),\n                testTask.getType(),\n                null,\n                TaskLocation.unknown(),\n                testTask.getDataSource()\n            ).withQueueInsertionTime(DateTimes.nowUtc())\n        )\n    ).times(2);\n    EasyMock.expect(runner.getWorkers()).andReturn(\n        Collections.singletonList(\n            new TestZkWorker(testTask).toImmutable()\n        )\n    ).times(2);\n    EasyMock.expect(runner.markWorkersLazy(EasyMock.anyObject(), EasyMock.anyInt()))\n            .andReturn(Collections.singletonList(new TestZkWorker(testTask).getWorker()));\n    EasyMock.expect(runner.getLazyWorkers()).andReturn(new ArrayList<>());\n    EasyMock.replay(runner);\n\n    Provisioner provisioner = strategy.makeProvisioner(runner);\n    boolean terminatedSomething = provisioner.doTerminate();\n\n    Assert.assertTrue(terminatedSomething);\n    Assert.assertTrue(provisioner.getStats().toList().size() == 1);\n    Assert.assertTrue(\n        provisioner.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.TERMINATE\n    );\n\n    EasyMock.verify(autoScaler);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/autoscaling/PendingTaskBasedProvisioningStrategyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"}],"commitId":"8d7d60d18edae638d645ec1d59fbbc5a500fa5d4","commitMessage":"@@@Improve Auto scaler pendingTaskBased provisioning strategy to handle when there are no currently running worker node better (#11440)\n\n* fix pendingTaskBased\n\n* fix doc\n\n* address comments\n\n* address comments\n\n* address comments\n\n* address comments\n\n* address comments\n\n* address comments\n\n* address comments","date":"2021-07-15 07:52:25","modifiedFileCount":"5","status":"M","submitter":"Maytas Monsereenusorn"}]
