[{"authorTime":"2019-02-24 12:10:31","codes":[{"authorDate":"2020-02-14 06:58:32","commitOrder":2,"curCode":"  public void setup() throws IOException\n  {\n    log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n\n    ComplexMetrics.registerSerde(\"hyperUnique\", new HyperUniquesSerde());\n\n    schemaInfo = BenchmarkSchemas.SCHEMA_MAP.get(schema);\n\n    BenchmarkDataGenerator gen = new BenchmarkDataGenerator(\n        schemaInfo.getColumnSchemas(),\n        RNG_SEED,\n        schemaInfo.getDataInterval(),\n        rowsPerSegment\n    );\n\n    incIndex = makeIncIndex();\n\n    for (int j = 0; j < rowsPerSegment; j++) {\n      InputRow row = gen.nextRow();\n      if (j % 10000 == 0) {\n        log.info(j + \" rows generated.\");\n      }\n      incIndex.add(row);\n    }\n\n    tmpDir = FileUtils.createTempDir();\n    log.info(\"Using temp dir: \" + tmpDir.getAbsolutePath());\n\n    indexFile = INDEX_MERGER_V9.persist(\n        incIndex,\n        tmpDir,\n        new IndexSpec(),\n        null\n    );\n    qIndex = INDEX_IO.loadIndex(indexFile);\n\n    Interval interval = schemaInfo.getDataInterval();\n    timeFilterNone = new BoundFilter(new BoundDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        String.valueOf(Long.MAX_VALUE),\n        String.valueOf(Long.MAX_VALUE),\n        true,\n        true,\n        null,\n        null,\n        StringComparators.ALPHANUMERIC\n    ));\n\n    long halfEnd = (interval.getEndMillis() + interval.getStartMillis()) / 2;\n    timeFilterHalf = new BoundFilter(new BoundDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        String.valueOf(interval.getStartMillis()),\n        String.valueOf(halfEnd),\n        true,\n        true,\n        null,\n        null,\n        StringComparators.ALPHANUMERIC\n    ));\n\n    timeFilterAll = new BoundFilter(new BoundDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        String.valueOf(interval.getStartMillis()),\n        String.valueOf(interval.getEndMillis()),\n        true,\n        true,\n        null,\n        null,\n        StringComparators.ALPHANUMERIC\n    ));\n  }\n","date":"2020-02-14 06:58:32","endLine":220,"groupId":"6062","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b5/2cde14809f7f1cd74c3e6aa3c53262d3919fe6.src","preCode":"  public void setup() throws IOException\n  {\n    log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n\n    ComplexMetrics.registerSerde(\"hyperUnique\", new HyperUniquesSerde());\n\n    schemaInfo = BenchmarkSchemas.SCHEMA_MAP.get(schema);\n\n    BenchmarkDataGenerator gen = new BenchmarkDataGenerator(\n        schemaInfo.getColumnSchemas(),\n        RNG_SEED,\n        schemaInfo.getDataInterval(),\n        rowsPerSegment\n    );\n\n    incIndex = makeIncIndex();\n\n    for (int j = 0; j < rowsPerSegment; j++) {\n      InputRow row = gen.nextRow();\n      if (j % 10000 == 0) {\n        log.info(j + \" rows generated.\");\n      }\n      incIndex.add(row);\n    }\n\n    tmpDir = FileUtils.createTempDir();\n    log.info(\"Using temp dir: \" + tmpDir.getAbsolutePath());\n\n    indexFile = INDEX_MERGER_V9.persist(\n        incIndex,\n        tmpDir,\n        new IndexSpec(),\n        null\n    );\n    qIndex = INDEX_IO.loadIndex(indexFile);\n\n    Interval interval = schemaInfo.getDataInterval();\n    timeFilterNone = new BoundFilter(new BoundDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        String.valueOf(Long.MAX_VALUE),\n        String.valueOf(Long.MAX_VALUE),\n        true,\n        true,\n        null,\n        null,\n        StringComparators.ALPHANUMERIC\n    ));\n\n    long halfEnd = (interval.getEndMillis() + interval.getStartMillis()) / 2;\n    timeFilterHalf = new BoundFilter(new BoundDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        String.valueOf(interval.getStartMillis()),\n        String.valueOf(halfEnd),\n        true,\n        true,\n        null,\n        null,\n        StringComparators.ALPHANUMERIC\n    ));\n\n    timeFilterAll = new BoundFilter(new BoundDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        String.valueOf(interval.getStartMillis()),\n        String.valueOf(interval.getEndMillis()),\n        true,\n        true,\n        null,\n        null,\n        StringComparators.ALPHANUMERIC\n    ));\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/FilterPartitionBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"},{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public static BoundDimFilter timeBound(final Object intervalObj)\n  {\n    final Interval interval = new Interval(intervalObj, ISOChronology.getInstanceUTC());\n    return new BoundDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        String.valueOf(interval.getStartMillis()),\n        String.valueOf(interval.getEndMillis()),\n        false,\n        true,\n        null,\n        null, \n        StringComparators.NUMERIC\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":335,"groupId":"16016","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"timeBound","params":"(finalObjectintervalObj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4e/e3b1fb8f6b6d72ca05178809edc09b6fade84f.src","preCode":"  public static BoundDimFilter timeBound(final Object intervalObj)\n  {\n    final Interval interval = new Interval(intervalObj, ISOChronology.getInstanceUTC());\n    return new BoundDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        String.valueOf(interval.getStartMillis()),\n        String.valueOf(interval.getEndMillis()),\n        false,\n        true,\n        null,\n        null, \n        StringComparators.NUMERIC\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/BaseCalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"NB"}],"commitId":"e9aebd994aa0e243446b4f76d819a503401104e3","commitMessage":"@@@Fix for building in Eclipse & VS Code. (#7481)\n\nFixes #6866\nReverse dependencies from /main/ to /test/\nAdd generated-test-sources to source path for Eclipse","date":"2020-02-14 06:58:32","modifiedFileCount":"1","status":"M","submitter":"Adam Peck"},{"authorTime":"2019-02-24 12:10:31","codes":[{"authorDate":"2020-06-10 10:31:04","commitOrder":3,"curCode":"  public void setup() throws IOException\n  {\n    log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n\n    ComplexMetrics.registerSerde(\"hyperUnique\", new HyperUniquesSerde());\n\n    schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(schema);\n\n    DataGenerator gen = new DataGenerator(\n        schemaInfo.getColumnSchemas(),\n        RNG_SEED,\n        schemaInfo.getDataInterval(),\n        rowsPerSegment\n    );\n\n    incIndex = makeIncIndex();\n\n    for (int j = 0; j < rowsPerSegment; j++) {\n      InputRow row = gen.nextRow();\n      if (j % 10000 == 0) {\n        log.info(j + \" rows generated.\");\n      }\n      incIndex.add(row);\n    }\n\n    tmpDir = FileUtils.createTempDir();\n    log.info(\"Using temp dir: \" + tmpDir.getAbsolutePath());\n\n    indexFile = INDEX_MERGER_V9.persist(\n        incIndex,\n        tmpDir,\n        new IndexSpec(),\n        null\n    );\n    qIndex = INDEX_IO.loadIndex(indexFile);\n\n    Interval interval = schemaInfo.getDataInterval();\n    timeFilterNone = new BoundFilter(new BoundDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        String.valueOf(Long.MAX_VALUE),\n        String.valueOf(Long.MAX_VALUE),\n        true,\n        true,\n        null,\n        null,\n        StringComparators.ALPHANUMERIC\n    ));\n\n    long halfEnd = (interval.getEndMillis() + interval.getStartMillis()) / 2;\n    timeFilterHalf = new BoundFilter(new BoundDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        String.valueOf(interval.getStartMillis()),\n        String.valueOf(halfEnd),\n        true,\n        true,\n        null,\n        null,\n        StringComparators.ALPHANUMERIC\n    ));\n\n    timeFilterAll = new BoundFilter(new BoundDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        String.valueOf(interval.getStartMillis()),\n        String.valueOf(interval.getEndMillis()),\n        true,\n        true,\n        null,\n        null,\n        StringComparators.ALPHANUMERIC\n    ));\n  }\n","date":"2020-06-10 10:31:04","endLine":220,"groupId":"101377","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5e/fe00e5b6aa09529f7d1980e1295d4d2002e6cc.src","preCode":"  public void setup() throws IOException\n  {\n    log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n\n    ComplexMetrics.registerSerde(\"hyperUnique\", new HyperUniquesSerde());\n\n    schemaInfo = BenchmarkSchemas.SCHEMA_MAP.get(schema);\n\n    BenchmarkDataGenerator gen = new BenchmarkDataGenerator(\n        schemaInfo.getColumnSchemas(),\n        RNG_SEED,\n        schemaInfo.getDataInterval(),\n        rowsPerSegment\n    );\n\n    incIndex = makeIncIndex();\n\n    for (int j = 0; j < rowsPerSegment; j++) {\n      InputRow row = gen.nextRow();\n      if (j % 10000 == 0) {\n        log.info(j + \" rows generated.\");\n      }\n      incIndex.add(row);\n    }\n\n    tmpDir = FileUtils.createTempDir();\n    log.info(\"Using temp dir: \" + tmpDir.getAbsolutePath());\n\n    indexFile = INDEX_MERGER_V9.persist(\n        incIndex,\n        tmpDir,\n        new IndexSpec(),\n        null\n    );\n    qIndex = INDEX_IO.loadIndex(indexFile);\n\n    Interval interval = schemaInfo.getDataInterval();\n    timeFilterNone = new BoundFilter(new BoundDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        String.valueOf(Long.MAX_VALUE),\n        String.valueOf(Long.MAX_VALUE),\n        true,\n        true,\n        null,\n        null,\n        StringComparators.ALPHANUMERIC\n    ));\n\n    long halfEnd = (interval.getEndMillis() + interval.getStartMillis()) / 2;\n    timeFilterHalf = new BoundFilter(new BoundDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        String.valueOf(interval.getStartMillis()),\n        String.valueOf(halfEnd),\n        true,\n        true,\n        null,\n        null,\n        StringComparators.ALPHANUMERIC\n    ));\n\n    timeFilterAll = new BoundFilter(new BoundDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        String.valueOf(interval.getStartMillis()),\n        String.valueOf(interval.getEndMillis()),\n        true,\n        true,\n        null,\n        null,\n        StringComparators.ALPHANUMERIC\n    ));\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/FilterPartitionBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"},{"authorDate":"2019-02-24 12:10:31","commitOrder":3,"curCode":"  public static BoundDimFilter timeBound(final Object intervalObj)\n  {\n    final Interval interval = new Interval(intervalObj, ISOChronology.getInstanceUTC());\n    return new BoundDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        String.valueOf(interval.getStartMillis()),\n        String.valueOf(interval.getEndMillis()),\n        false,\n        true,\n        null,\n        null, \n        StringComparators.NUMERIC\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":335,"groupId":"101377","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"timeBound","params":"(finalObjectintervalObj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4e/e3b1fb8f6b6d72ca05178809edc09b6fade84f.src","preCode":"  public static BoundDimFilter timeBound(final Object intervalObj)\n  {\n    final Interval interval = new Interval(intervalObj, ISOChronology.getInstanceUTC());\n    return new BoundDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        String.valueOf(interval.getStartMillis()),\n        String.valueOf(interval.getEndMillis()),\n        false,\n        true,\n        null,\n        null, \n        StringComparators.NUMERIC\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/BaseCalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"N"}],"commitId":"c5d6163c76e565f21d2d829c128c4c97e49f3eb1","commitMessage":"@@@add a GeneratorInputSource to fill up a cluster with generated data for testing (#9946)\n\n* move benchmark data generator into druid-processing.  add a GeneratorInputSource to fill up a cluster with data\n\n* newlines\n\n* make test coverage not fail maybe\n\n* remove useless test\n\n* Update pom.xml\n\n* Update GeneratorInputSourceTest.java\n\n* less passive aggressive test names","date":"2020-06-10 10:31:04","modifiedFileCount":"24","status":"M","submitter":"Clint Wylie"}]
