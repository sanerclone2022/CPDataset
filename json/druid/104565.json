[{"authorTime":"2020-09-24 06:29:36","codes":[{"authorDate":"2020-09-24 06:29:36","commitOrder":3,"curCode":"  public void testRunParallelWithDynamicPartitioningMatchCompactionState()\n  {\n    runIndexTask(null, true);\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getSegmentLoaderFactory(),\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask compactionTask = builder\n        .inputSpec(new CompactionIntervalSpec(INTERVAL_TO_INDEX, null))\n        .tuningConfig(AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING)\n        .build();\n\n    final Set<DataSegment> compactedSegments = runTask(compactionTask);\n    final CompactionState expectedState = new CompactionState(\n        new DynamicPartitionsSpec(null, Long.MAX_VALUE),\n        compactionTask.getTuningConfig().getIndexSpec().asMap(getObjectMapper())\n    );\n    for (DataSegment segment : compactedSegments) {\n      Assert.assertSame(\n          lockGranularity == LockGranularity.TIME_CHUNK ? NumberedShardSpec.class : NumberedOverwriteShardSpec.class,\n          segment.getShardSpec().getClass()\n      );\n      \r\n      Assert.assertEquals(expectedState, segment.getLastCompactionState());\n    }\n  }\n","date":"2020-09-24 06:29:36","endLine":158,"groupId":"9864","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunParallelWithDynamicPartitioningMatchCompactionState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/61/6dd24978ec156c70bba4243bf8c14b93a018c7.src","preCode":"  public void testRunParallelWithDynamicPartitioningMatchCompactionState()\n  {\n    runIndexTask(null, true);\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getSegmentLoaderFactory(),\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask compactionTask = builder\n        .inputSpec(new CompactionIntervalSpec(INTERVAL_TO_INDEX, null))\n        .tuningConfig(AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING)\n        .build();\n\n    final Set<DataSegment> compactedSegments = runTask(compactionTask);\n    final CompactionState expectedState = new CompactionState(\n        new DynamicPartitionsSpec(null, Long.MAX_VALUE),\n        compactionTask.getTuningConfig().getIndexSpec().asMap(getObjectMapper())\n    );\n    for (DataSegment segment : compactedSegments) {\n      Assert.assertSame(\n          lockGranularity == LockGranularity.TIME_CHUNK ? NumberedShardSpec.class : NumberedOverwriteShardSpec.class,\n          segment.getShardSpec().getClass()\n      );\n      \r\n      Assert.assertEquals(expectedState, segment.getLastCompactionState());\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskParallelRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"MB"},{"authorDate":"2020-09-24 06:29:36","commitOrder":3,"curCode":"  public void testRunCompactionStateNotStoreIfContextSetToFalse()\n  {\n    runIndexTask(null, true);\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getSegmentLoaderFactory(),\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask compactionTask = builder\n        .inputSpec(new CompactionIntervalSpec(INTERVAL_TO_INDEX, null))\n        .tuningConfig(AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING)\n        .context(ImmutableMap.of(Tasks.STORE_COMPACTION_STATE_KEY, false))\n        .build();\n\n    final Set<DataSegment> compactedSegments = runTask(compactionTask);\n\n    for (DataSegment segment : compactedSegments) {\n      Assert.assertSame(\n          lockGranularity == LockGranularity.TIME_CHUNK ? NumberedShardSpec.class : NumberedOverwriteShardSpec.class,\n          segment.getShardSpec().getClass()\n      );\n      \r\n      Assert.assertEquals(null, segment.getLastCompactionState());\n    }\n  }\n","date":"2020-09-24 06:29:36","endLine":248,"groupId":"4616","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunCompactionStateNotStoreIfContextSetToFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/61/6dd24978ec156c70bba4243bf8c14b93a018c7.src","preCode":"  public void testRunCompactionStateNotStoreIfContextSetToFalse()\n  {\n    runIndexTask(null, true);\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getSegmentLoaderFactory(),\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask compactionTask = builder\n        .inputSpec(new CompactionIntervalSpec(INTERVAL_TO_INDEX, null))\n        .tuningConfig(AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING)\n        .context(ImmutableMap.of(Tasks.STORE_COMPACTION_STATE_KEY, false))\n        .build();\n\n    final Set<DataSegment> compactedSegments = runTask(compactionTask);\n\n    for (DataSegment segment : compactedSegments) {\n      Assert.assertSame(\n          lockGranularity == LockGranularity.TIME_CHUNK ? NumberedShardSpec.class : NumberedOverwriteShardSpec.class,\n          segment.getShardSpec().getClass()\n      );\n      \r\n      Assert.assertEquals(null, segment.getLastCompactionState());\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskParallelRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"B"}],"commitId":"72f1b55f569719b8e0e1920f382bdf98e418924e","commitMessage":"@@@Add last_compaction_state to sys.segments table (#10413)\n\n* Add is_compacted to sys.segments table\n\n* change is_compacted to last_compaction_state\n\n* fix tests\n\n* fix tests\n\n* address comments","date":"2020-09-24 06:29:36","modifiedFileCount":"9","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2020-09-24 06:29:36","codes":[{"authorDate":"2021-02-12 19:03:20","commitOrder":4,"curCode":"  public void testRunParallelWithDynamicPartitioningMatchCompactionState() throws Exception\n  {\n    runIndexTask(null, true);\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getSegmentLoaderFactory(),\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask compactionTask = builder\n        .inputSpec(new CompactionIntervalSpec(INTERVAL_TO_INDEX, null))\n        .tuningConfig(AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING)\n        .build();\n\n    final Set<DataSegment> compactedSegments = runTask(compactionTask);\n    for (DataSegment segment : compactedSegments) {\n      Assert.assertSame(\n          lockGranularity == LockGranularity.TIME_CHUNK ? NumberedShardSpec.class : NumberedOverwriteShardSpec.class,\n          segment.getShardSpec().getClass()\n      );\n      \r\n      CompactionState expectedState = new CompactionState(\n          new DynamicPartitionsSpec(null, Long.MAX_VALUE),\n          compactionTask.getTuningConfig().getIndexSpec().asMap(getObjectMapper()),\n          getObjectMapper().readValue(\n              getObjectMapper().writeValueAsString(\n                  new UniformGranularitySpec(\n                      Granularities.HOUR,\n                      Granularities.NONE,\n                      true,\n                      ImmutableList.of(segment.getInterval())\n                  )\n              ),\n              Map.class\n          )\n      );\n      Assert.assertEquals(expectedState, segment.getLastCompactionState());\n    }\n  }\n","date":"2021-02-12 19:03:20","endLine":170,"groupId":"4382","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunParallelWithDynamicPartitioningMatchCompactionState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7f/e878121c4ec66693dcfdf352ba947d4e136e7f.src","preCode":"  public void testRunParallelWithDynamicPartitioningMatchCompactionState()\n  {\n    runIndexTask(null, true);\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getSegmentLoaderFactory(),\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask compactionTask = builder\n        .inputSpec(new CompactionIntervalSpec(INTERVAL_TO_INDEX, null))\n        .tuningConfig(AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING)\n        .build();\n\n    final Set<DataSegment> compactedSegments = runTask(compactionTask);\n    final CompactionState expectedState = new CompactionState(\n        new DynamicPartitionsSpec(null, Long.MAX_VALUE),\n        compactionTask.getTuningConfig().getIndexSpec().asMap(getObjectMapper())\n    );\n    for (DataSegment segment : compactedSegments) {\n      Assert.assertSame(\n          lockGranularity == LockGranularity.TIME_CHUNK ? NumberedShardSpec.class : NumberedOverwriteShardSpec.class,\n          segment.getShardSpec().getClass()\n      );\n      \r\n      Assert.assertEquals(expectedState, segment.getLastCompactionState());\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskParallelRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2020-09-24 06:29:36","commitOrder":4,"curCode":"  public void testRunCompactionStateNotStoreIfContextSetToFalse()\n  {\n    runIndexTask(null, true);\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getSegmentLoaderFactory(),\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask compactionTask = builder\n        .inputSpec(new CompactionIntervalSpec(INTERVAL_TO_INDEX, null))\n        .tuningConfig(AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING)\n        .context(ImmutableMap.of(Tasks.STORE_COMPACTION_STATE_KEY, false))\n        .build();\n\n    final Set<DataSegment> compactedSegments = runTask(compactionTask);\n\n    for (DataSegment segment : compactedSegments) {\n      Assert.assertSame(\n          lockGranularity == LockGranularity.TIME_CHUNK ? NumberedShardSpec.class : NumberedOverwriteShardSpec.class,\n          segment.getShardSpec().getClass()\n      );\n      \r\n      Assert.assertEquals(null, segment.getLastCompactionState());\n    }\n  }\n","date":"2020-09-24 06:29:36","endLine":248,"groupId":"4616","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunCompactionStateNotStoreIfContextSetToFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/61/6dd24978ec156c70bba4243bf8c14b93a018c7.src","preCode":"  public void testRunCompactionStateNotStoreIfContextSetToFalse()\n  {\n    runIndexTask(null, true);\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getSegmentLoaderFactory(),\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask compactionTask = builder\n        .inputSpec(new CompactionIntervalSpec(INTERVAL_TO_INDEX, null))\n        .tuningConfig(AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING)\n        .context(ImmutableMap.of(Tasks.STORE_COMPACTION_STATE_KEY, false))\n        .build();\n\n    final Set<DataSegment> compactedSegments = runTask(compactionTask);\n\n    for (DataSegment segment : compactedSegments) {\n      Assert.assertSame(\n          lockGranularity == LockGranularity.TIME_CHUNK ? NumberedShardSpec.class : NumberedOverwriteShardSpec.class,\n          segment.getShardSpec().getClass()\n      );\n      \r\n      Assert.assertEquals(null, segment.getLastCompactionState());\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskParallelRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"N"}],"commitId":"6541178c21839530a42af4b4675a9bc680bffca6","commitMessage":"@@@Support segmentGranularity for auto-compaction (#10843)\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* resolve conflict\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* fix tests\n\n* fix more tests\n\n* fix checkstyle\n\n* add unit tests\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* add unit tests\n\n* add integration tests\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix failing tests\n\n* address comments\n\n* address comments\n\n* fix tests\n\n* fix tests\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test","date":"2021-02-12 19:03:20","modifiedFileCount":"32","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2020-09-24 06:29:36","codes":[{"authorDate":"2021-02-18 17:35:10","commitOrder":5,"curCode":"  public void testRunParallelWithDynamicPartitioningMatchCompactionState() throws Exception\n  {\n    runIndexTask(null, true);\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getSegmentLoaderFactory(),\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask compactionTask = builder\n        .inputSpec(new CompactionIntervalSpec(INTERVAL_TO_INDEX, null))\n        .tuningConfig(AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING)\n        .build();\n\n    final Set<DataSegment> compactedSegments = runTask(compactionTask);\n    for (DataSegment segment : compactedSegments) {\n      Assert.assertSame(\n          lockGranularity == LockGranularity.TIME_CHUNK ? NumberedShardSpec.class : NumberedOverwriteShardSpec.class,\n          segment.getShardSpec().getClass()\n      );\n      \r\n      CompactionState expectedState = new CompactionState(\n          new DynamicPartitionsSpec(null, Long.MAX_VALUE),\n          compactionTask.getTuningConfig().getIndexSpec().asMap(getObjectMapper()),\n          getObjectMapper().readValue(\n              getObjectMapper().writeValueAsString(\n                  new UniformGranularitySpec(\n                      Granularities.HOUR,\n                      Granularities.MINUTE,\n                      true,\n                      ImmutableList.of(segment.getInterval())\n                  )\n              ),\n              Map.class\n          )\n      );\n      Assert.assertEquals(expectedState, segment.getLastCompactionState());\n    }\n  }\n","date":"2021-02-18 17:35:10","endLine":170,"groupId":"4382","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunParallelWithDynamicPartitioningMatchCompactionState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2e/23fcaef8ef9eb48ad323789547fb2114d52089.src","preCode":"  public void testRunParallelWithDynamicPartitioningMatchCompactionState() throws Exception\n  {\n    runIndexTask(null, true);\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getSegmentLoaderFactory(),\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask compactionTask = builder\n        .inputSpec(new CompactionIntervalSpec(INTERVAL_TO_INDEX, null))\n        .tuningConfig(AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING)\n        .build();\n\n    final Set<DataSegment> compactedSegments = runTask(compactionTask);\n    for (DataSegment segment : compactedSegments) {\n      Assert.assertSame(\n          lockGranularity == LockGranularity.TIME_CHUNK ? NumberedShardSpec.class : NumberedOverwriteShardSpec.class,\n          segment.getShardSpec().getClass()\n      );\n      \r\n      CompactionState expectedState = new CompactionState(\n          new DynamicPartitionsSpec(null, Long.MAX_VALUE),\n          compactionTask.getTuningConfig().getIndexSpec().asMap(getObjectMapper()),\n          getObjectMapper().readValue(\n              getObjectMapper().writeValueAsString(\n                  new UniformGranularitySpec(\n                      Granularities.HOUR,\n                      Granularities.NONE,\n                      true,\n                      ImmutableList.of(segment.getInterval())\n                  )\n              ),\n              Map.class\n          )\n      );\n      Assert.assertEquals(expectedState, segment.getLastCompactionState());\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskParallelRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2020-09-24 06:29:36","commitOrder":5,"curCode":"  public void testRunCompactionStateNotStoreIfContextSetToFalse()\n  {\n    runIndexTask(null, true);\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getSegmentLoaderFactory(),\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask compactionTask = builder\n        .inputSpec(new CompactionIntervalSpec(INTERVAL_TO_INDEX, null))\n        .tuningConfig(AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING)\n        .context(ImmutableMap.of(Tasks.STORE_COMPACTION_STATE_KEY, false))\n        .build();\n\n    final Set<DataSegment> compactedSegments = runTask(compactionTask);\n\n    for (DataSegment segment : compactedSegments) {\n      Assert.assertSame(\n          lockGranularity == LockGranularity.TIME_CHUNK ? NumberedShardSpec.class : NumberedOverwriteShardSpec.class,\n          segment.getShardSpec().getClass()\n      );\n      \r\n      Assert.assertEquals(null, segment.getLastCompactionState());\n    }\n  }\n","date":"2020-09-24 06:29:36","endLine":248,"groupId":"4616","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunCompactionStateNotStoreIfContextSetToFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/61/6dd24978ec156c70bba4243bf8c14b93a018c7.src","preCode":"  public void testRunCompactionStateNotStoreIfContextSetToFalse()\n  {\n    runIndexTask(null, true);\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getSegmentLoaderFactory(),\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask compactionTask = builder\n        .inputSpec(new CompactionIntervalSpec(INTERVAL_TO_INDEX, null))\n        .tuningConfig(AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING)\n        .context(ImmutableMap.of(Tasks.STORE_COMPACTION_STATE_KEY, false))\n        .build();\n\n    final Set<DataSegment> compactedSegments = runTask(compactionTask);\n\n    for (DataSegment segment : compactedSegments) {\n      Assert.assertSame(\n          lockGranularity == LockGranularity.TIME_CHUNK ? NumberedShardSpec.class : NumberedOverwriteShardSpec.class,\n          segment.getShardSpec().getClass()\n      );\n      \r\n      Assert.assertEquals(null, segment.getLastCompactionState());\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskParallelRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"N"}],"commitId":"eabad0fb352ee7f1f32658edb95d236fe1837662","commitMessage":"@@@Keep query granularity of compacted segments after compaction (#10856)\n\n* Keep query granularity of compacted segments after compaction\n\n* Protect against null isRollup\n\n* Fix bugspot check RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN & edit an existing comment\n\n* Make sure that NONE is also included when comparing for the finer granularity\n\n* Update integration test check for segment size due to query granularity propagation affecting size\n\n* Minor code cleanup\n\n* Added functional test to verify queryGranlarity after compaction\n\n* Minor style fix\n\n* Update unit tests","date":"2021-02-18 17:35:10","modifiedFileCount":"14","status":"M","submitter":"Agustin Gonzalez"},{"authorTime":"2021-07-21 02:44:19","codes":[{"authorDate":"2021-07-21 02:44:19","commitOrder":6,"curCode":"  public void testRunParallelWithDynamicPartitioningMatchCompactionState() throws Exception\n  {\n    runIndexTask(null, true);\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getSegmentCacheManagerFactory(),\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask compactionTask = builder\n        .inputSpec(new CompactionIntervalSpec(INTERVAL_TO_INDEX, null))\n        .tuningConfig(AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING)\n        .build();\n\n    final Set<DataSegment> compactedSegments = runTask(compactionTask);\n    for (DataSegment segment : compactedSegments) {\n      Assert.assertSame(\n          lockGranularity == LockGranularity.TIME_CHUNK ? NumberedShardSpec.class : NumberedOverwriteShardSpec.class,\n          segment.getShardSpec().getClass()\n      );\n      \r\n      CompactionState expectedState = new CompactionState(\n          new DynamicPartitionsSpec(null, Long.MAX_VALUE),\n          compactionTask.getTuningConfig().getIndexSpec().asMap(getObjectMapper()),\n          getObjectMapper().readValue(\n              getObjectMapper().writeValueAsString(\n                  new UniformGranularitySpec(\n                      Granularities.HOUR,\n                      Granularities.MINUTE,\n                      true,\n                      ImmutableList.of(segment.getInterval())\n                  )\n              ),\n              Map.class\n          )\n      );\n      Assert.assertEquals(expectedState, segment.getLastCompactionState());\n    }\n  }\n","date":"2021-07-21 02:44:19","endLine":174,"groupId":"104565","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testRunParallelWithDynamicPartitioningMatchCompactionState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/17/32b3b31d02602327f8d4943e275f86dba96f0b.src","preCode":"  public void testRunParallelWithDynamicPartitioningMatchCompactionState() throws Exception\n  {\n    runIndexTask(null, true);\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getSegmentLoaderFactory(),\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask compactionTask = builder\n        .inputSpec(new CompactionIntervalSpec(INTERVAL_TO_INDEX, null))\n        .tuningConfig(AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING)\n        .build();\n\n    final Set<DataSegment> compactedSegments = runTask(compactionTask);\n    for (DataSegment segment : compactedSegments) {\n      Assert.assertSame(\n          lockGranularity == LockGranularity.TIME_CHUNK ? NumberedShardSpec.class : NumberedOverwriteShardSpec.class,\n          segment.getShardSpec().getClass()\n      );\n      \r\n      CompactionState expectedState = new CompactionState(\n          new DynamicPartitionsSpec(null, Long.MAX_VALUE),\n          compactionTask.getTuningConfig().getIndexSpec().asMap(getObjectMapper()),\n          getObjectMapper().readValue(\n              getObjectMapper().writeValueAsString(\n                  new UniformGranularitySpec(\n                      Granularities.HOUR,\n                      Granularities.MINUTE,\n                      true,\n                      ImmutableList.of(segment.getInterval())\n                  )\n              ),\n              Map.class\n          )\n      );\n      Assert.assertEquals(expectedState, segment.getLastCompactionState());\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskParallelRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"},{"authorDate":"2021-07-21 02:44:19","commitOrder":6,"curCode":"  public void testRunCompactionStateNotStoreIfContextSetToFalse()\n  {\n    runIndexTask(null, true);\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getSegmentCacheManagerFactory(),\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask compactionTask = builder\n        .inputSpec(new CompactionIntervalSpec(INTERVAL_TO_INDEX, null))\n        .tuningConfig(AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING)\n        .context(ImmutableMap.of(Tasks.STORE_COMPACTION_STATE_KEY, false))\n        .build();\n\n    final Set<DataSegment> compactedSegments = runTask(compactionTask);\n\n    for (DataSegment segment : compactedSegments) {\n      Assert.assertSame(\n          lockGranularity == LockGranularity.TIME_CHUNK ? NumberedShardSpec.class : NumberedOverwriteShardSpec.class,\n          segment.getShardSpec().getClass()\n      );\n      \r\n      Assert.assertEquals(null, segment.getLastCompactionState());\n    }\n  }\n","date":"2021-07-21 02:44:19","endLine":322,"groupId":"104565","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testRunCompactionStateNotStoreIfContextSetToFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/17/32b3b31d02602327f8d4943e275f86dba96f0b.src","preCode":"  public void testRunCompactionStateNotStoreIfContextSetToFalse()\n  {\n    runIndexTask(null, true);\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getSegmentLoaderFactory(),\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask compactionTask = builder\n        .inputSpec(new CompactionIntervalSpec(INTERVAL_TO_INDEX, null))\n        .tuningConfig(AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING)\n        .context(ImmutableMap.of(Tasks.STORE_COMPACTION_STATE_KEY, false))\n        .build();\n\n    final Set<DataSegment> compactedSegments = runTask(compactionTask);\n\n    for (DataSegment segment : compactedSegments) {\n      Assert.assertSame(\n          lockGranularity == LockGranularity.TIME_CHUNK ? NumberedShardSpec.class : NumberedOverwriteShardSpec.class,\n          segment.getShardSpec().getClass()\n      );\n      \r\n      Assert.assertEquals(null, segment.getLastCompactionState());\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskParallelRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"}],"commitId":"94c1671eaf7b050972602fdedcb1971cdbde692d","commitMessage":"@@@Split SegmentLoader into SegmentLoader and SegmentCacheManager (#11466)\n\nThis PR splits current SegmentLoader into SegmentLoader and SegmentCacheManager.\n\nSegmentLoader - this class is responsible for building the segment object but does not expose any methods for downloading.  cache space management.  etc. Default implementation delegates the download operations to SegmentCacheManager and only contains the logic for building segments once downloaded. . This class will be used in SegmentManager to construct Segment objects.\n\nSegmentCacheManager - this class manages the segment cache on the local disk. It fetches the segment files to the local disk.  can clean up the cache.  and in the future.  support reserve and release on cache space. [See https://github.com/Make SegmentLoader extensible and customizable #11398]. This class will be used in ingestion tasks such as compaction.  re-indexing where segment files need to be downloaded locally.","date":"2021-07-21 02:44:19","modifiedFileCount":"41","status":"M","submitter":"Abhishek Agarwal"}]
