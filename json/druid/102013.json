[{"authorTime":"2020-02-01 15:51:16","codes":[{"authorDate":"2020-02-01 15:51:16","commitOrder":1,"curCode":"  public void test_isScanOrMapping_filterThenProject()\n  {\n    final Project project = mockProject(true);\n    final DruidRel<?> rel = mockDruidRel(\n        DruidQueryRel.class,\n        PartialDruidQuery.Stage.SELECT_PROJECT,\n        project,\n        mockFilter()\n    );\n    Assert.assertFalse(DruidRels.isScanOrMapping(rel, true));\n    Assert.assertFalse(DruidRels.isScanOrMapping(rel, false));\n\n    EasyMock.verify(rel, rel.getPartialDruidQuery(), project);\n  }\n","date":"2020-02-01 15:51:16","endLine":138,"groupId":"2285","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"test_isScanOrMapping_filterThenProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7e/0ed30de2f686a9a4126974465b2ad4445466bf.src","preCode":"  public void test_isScanOrMapping_filterThenProject()\n  {\n    final Project project = mockProject(true);\n    final DruidRel<?> rel = mockDruidRel(\n        DruidQueryRel.class,\n        PartialDruidQuery.Stage.SELECT_PROJECT,\n        project,\n        mockFilter()\n    );\n    Assert.assertFalse(DruidRels.isScanOrMapping(rel, true));\n    Assert.assertFalse(DruidRels.isScanOrMapping(rel, false));\n\n    EasyMock.verify(rel, rel.getPartialDruidQuery(), project);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/rel/DruidRelsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"B"},{"authorDate":"2020-02-01 15:51:16","commitOrder":1,"curCode":"  public void test_isScanOrMapping_filterThenProjectJoin()\n  {\n    final Project project = mockProject(true);\n    final DruidRel<?> rel = mockDruidRel(\n        DruidJoinQueryRel.class,\n        PartialDruidQuery.Stage.SELECT_PROJECT,\n        project,\n        mockFilter()\n    );\n    Assert.assertFalse(DruidRels.isScanOrMapping(rel, true));\n    Assert.assertFalse(DruidRels.isScanOrMapping(rel, false));\n\n    EasyMock.verify(rel, rel.getPartialDruidQuery(), project);\n  }\n","date":"2020-02-01 15:51:16","endLine":154,"groupId":"2285","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"test_isScanOrMapping_filterThenProjectJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7e/0ed30de2f686a9a4126974465b2ad4445466bf.src","preCode":"  public void test_isScanOrMapping_filterThenProjectJoin()\n  {\n    final Project project = mockProject(true);\n    final DruidRel<?> rel = mockDruidRel(\n        DruidJoinQueryRel.class,\n        PartialDruidQuery.Stage.SELECT_PROJECT,\n        project,\n        mockFilter()\n    );\n    Assert.assertFalse(DruidRels.isScanOrMapping(rel, true));\n    Assert.assertFalse(DruidRels.isScanOrMapping(rel, false));\n\n    EasyMock.verify(rel, rel.getPartialDruidQuery(), project);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/rel/DruidRelsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"B"}],"commitId":"b411443d228c14de746311e09db28b437c2746a5","commitMessage":"@@@SQL join support for lookups. (#9294)\n\n* SQL join support for lookups.\n\n1) Add LookupSchema to SQL.  so lookups show up in the catalog.\n2) Add join-related rels and rules to SQL.  allowing joins to be planned into\n   native Druid queries.\n\n* Add two missing LookupSchema calls in tests.\n\n* Fix tests.\n\n* Fix typo.\n","date":"2020-02-01 15:51:16","modifiedFileCount":"30","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-08-28 22:57:06","codes":[{"authorDate":"2020-08-28 22:57:06","commitOrder":2,"curCode":"  public void test_isScanOrMapping_filterThenProject()\n  {\n    final Project project = mockMappingProject(ImmutableList.of(1, 0), 2);\n    final DruidRel<?> rel = mockDruidRel(\n        DruidQueryRel.class,\n        PartialDruidQuery.Stage.SELECT_PROJECT,\n        null,\n        project,\n        mockFilter()\n    );\n    Assert.assertFalse(DruidRels.isScanOrMapping(rel, true));\n    Assert.assertFalse(DruidRels.isScanOrMapping(rel, false));\n\n    EasyMock.verify(rel, rel.getPartialDruidQuery(), project);\n  }\n","date":"2020-08-28 22:57:06","endLine":210,"groupId":"102013","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"test_isScanOrMapping_filterThenProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/17/b91a507c2b6a3d2d523d599154840a9394cdc7.src","preCode":"  public void test_isScanOrMapping_filterThenProject()\n  {\n    final Project project = mockProject(true);\n    final DruidRel<?> rel = mockDruidRel(\n        DruidQueryRel.class,\n        PartialDruidQuery.Stage.SELECT_PROJECT,\n        project,\n        mockFilter()\n    );\n    Assert.assertFalse(DruidRels.isScanOrMapping(rel, true));\n    Assert.assertFalse(DruidRels.isScanOrMapping(rel, false));\n\n    EasyMock.verify(rel, rel.getPartialDruidQuery(), project);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/rel/DruidRelsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"},{"authorDate":"2020-08-28 22:57:06","commitOrder":2,"curCode":"  public void test_isScanOrMapping_filterThenProjectJoin()\n  {\n    final Project project = mockMappingProject(ImmutableList.of(1, 0), 2);\n    final DruidRel<?> rel = mockDruidRel(\n        DruidJoinQueryRel.class,\n        PartialDruidQuery.Stage.SELECT_PROJECT,\n        null,\n        project,\n        mockFilter()\n    );\n    Assert.assertFalse(DruidRels.isScanOrMapping(rel, true));\n    Assert.assertFalse(DruidRels.isScanOrMapping(rel, false));\n\n    EasyMock.verify(rel, rel.getPartialDruidQuery(), project);\n  }\n","date":"2020-08-28 22:57:06","endLine":227,"groupId":"102013","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"test_isScanOrMapping_filterThenProjectJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/17/b91a507c2b6a3d2d523d599154840a9394cdc7.src","preCode":"  public void test_isScanOrMapping_filterThenProjectJoin()\n  {\n    final Project project = mockProject(true);\n    final DruidRel<?> rel = mockDruidRel(\n        DruidJoinQueryRel.class,\n        PartialDruidQuery.Stage.SELECT_PROJECT,\n        project,\n        mockFilter()\n    );\n    Assert.assertFalse(DruidRels.isScanOrMapping(rel, true));\n    Assert.assertFalse(DruidRels.isScanOrMapping(rel, false));\n\n    EasyMock.verify(rel, rel.getPartialDruidQuery(), project);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/rel/DruidRelsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"5cd7610fb61405108820de4b2173e690b8df3011","commitMessage":"@@@SQL support for union datasources. (#10324)\n\n* SQL support for union datasources.\n\nExposed via the \"UNION ALL\" operator. This means that there are now two\ndifferent implementations of UNION ALL: one at the top level of a query\nthat works by concatenating subquery results.  and one at the table level\nthat works by creating a UnionDataSource.\n\nThe SQL documentation is updated to discuss these two use cases and how\nthey behave.\n\nFuture work could unify these by building support for a native datasource\nthat represents the union of multiple subqueries. (Today.  UnionDataSource\ncan only represent the union of tables.  not subqueries.)\n\n* Fixes.\n\n* Error message for sanity check.\n\n* Additional test fixes.\n\n* Add some error messages.","date":"2020-08-28 22:57:06","modifiedFileCount":"10","status":"M","submitter":"Gian Merlino"}]
