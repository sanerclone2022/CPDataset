[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-10-25 03:44:30","commitOrder":2,"curCode":"  public void testDropBefore()\n  {\n    DateTime now = DateTimes.of(\"2012-12-31T01:00:00\");\n    PeriodDropBeforeRule rule = new PeriodDropBeforeRule(\n        new Period(\"P1D\")\n    );\n\n    Assert.assertTrue(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(3), now.minusDays(2))).build(),\n            now\n        )\n    );\n    Assert.assertTrue(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(2), now.minusDays(1))).build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(1), now)).build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        rule.appliesTo(\n            builder.interval(new Interval(now, now.plusDays(1))).build(),\n            now\n        )\n    );\n  }\n","date":"2018-10-25 03:44:30","endLine":85,"groupId":"4764","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c0/d64cb11bcbe5bda9a529198cac8c64bdfaf5f1.src","preCode":"  public void testDropBefore()\n  {\n    DateTime now = DateTimes.of(\"2012-12-31T01:00:00\");\n    PeriodDropBeforeRule rule = new PeriodDropBeforeRule(\n        new Period(\"P1D\")\n    );\n\n    Assert.assertTrue(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(3), now.minusDays(2))).build(),\n            now\n        )\n    );\n    Assert.assertTrue(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(2), now.minusDays(1))).build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(1), now)).build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        rule.appliesTo(\n            builder.interval(new Interval(now, now.plusDays(1))).build(),\n            now\n        )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/rules/PeriodDropBeforeRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testAppliesToPeriod()\n  {\n    DateTime now = DateTimes.of(\"2012-12-31T01:00:00\");\n    PeriodLoadRule rule = new PeriodLoadRule(\n        new Period(\"P1M\"),\n        ImmutableMap.of(\"\", 0)\n    );\n\n    Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusWeeks(1), now)).build(), now));\n    Assert.assertTrue(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(1), now.plusDays(1)))\n                   .build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        rule.appliesTo(\n            builder.interval(new Interval(now.plusDays(1), now.plusDays(2)))\n                       .build(),\n            now\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":83,"groupId":"23526","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAppliesToPeriod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/63/f4ca04ca85d7d6a9cf9be9d057982c7f59eb96.src","preCode":"  public void testAppliesToPeriod()\n  {\n    DateTime now = DateTimes.of(\"2012-12-31T01:00:00\");\n    PeriodLoadRule rule = new PeriodLoadRule(\n        new Period(\"P1M\"),\n        ImmutableMap.of(\"\", 0)\n    );\n\n    Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusWeeks(1), now)).build(), now));\n    Assert.assertTrue(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(1), now.plusDays(1)))\n                   .build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        rule.appliesTo(\n            builder.interval(new Interval(now.plusDays(1), now.plusDays(2)))\n                       .build(),\n            now\n        )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/rules/PeriodLoadRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"NB"}],"commitId":"601183b4c7b2a30c43c0eca41ea8a0b67ef5cd40","commitMessage":"@@@Add period drop before rule (#6415)\n\n* Add period drop before rule\n\n* add license header\n\n* support period drop before rule in coordinator console\n\n* address comments\n","date":"2018-10-25 03:44:30","modifiedFileCount":"1","status":"M","submitter":"QiuMM"},{"authorTime":"2018-11-02 00:43:34","codes":[{"authorDate":"2018-10-25 03:44:30","commitOrder":3,"curCode":"  public void testDropBefore()\n  {\n    DateTime now = DateTimes.of(\"2012-12-31T01:00:00\");\n    PeriodDropBeforeRule rule = new PeriodDropBeforeRule(\n        new Period(\"P1D\")\n    );\n\n    Assert.assertTrue(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(3), now.minusDays(2))).build(),\n            now\n        )\n    );\n    Assert.assertTrue(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(2), now.minusDays(1))).build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(1), now)).build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        rule.appliesTo(\n            builder.interval(new Interval(now, now.plusDays(1))).build(),\n            now\n        )\n    );\n  }\n","date":"2018-10-25 03:44:30","endLine":85,"groupId":"4764","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c0/d64cb11bcbe5bda9a529198cac8c64bdfaf5f1.src","preCode":"  public void testDropBefore()\n  {\n    DateTime now = DateTimes.of(\"2012-12-31T01:00:00\");\n    PeriodDropBeforeRule rule = new PeriodDropBeforeRule(\n        new Period(\"P1D\")\n    );\n\n    Assert.assertTrue(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(3), now.minusDays(2))).build(),\n            now\n        )\n    );\n    Assert.assertTrue(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(2), now.minusDays(1))).build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(1), now)).build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        rule.appliesTo(\n            builder.interval(new Interval(now, now.plusDays(1))).build(),\n            now\n        )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/rules/PeriodDropBeforeRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"},{"authorDate":"2018-11-02 00:43:34","commitOrder":3,"curCode":"  public void testAppliesToPeriod()\n  {\n    DateTime now = DateTimes.of(\"2012-12-31T01:00:00\");\n    PeriodLoadRule rule = new PeriodLoadRule(\n        new Period(\"P1M\"),\n        false,\n        ImmutableMap.of(\"\", 0)\n    );\n\n    Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusWeeks(1), now)).build(), now));\n    Assert.assertTrue(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(1), now.plusDays(1)))\n                   .build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        rule.appliesTo(\n            builder.interval(new Interval(now.plusDays(1), now.plusDays(2)))\n                       .build(),\n            now\n        )\n    );\n  }\n","date":"2018-11-02 00:43:34","endLine":85,"groupId":"23526","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAppliesToPeriod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/53/eaa2ef62350459a7a0748421608ceb1b1ac5b0.src","preCode":"  public void testAppliesToPeriod()\n  {\n    DateTime now = DateTimes.of(\"2012-12-31T01:00:00\");\n    PeriodLoadRule rule = new PeriodLoadRule(\n        new Period(\"P1M\"),\n        ImmutableMap.of(\"\", 0)\n    );\n\n    Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusWeeks(1), now)).build(), now));\n    Assert.assertTrue(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(1), now.plusDays(1)))\n                   .build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        rule.appliesTo(\n            builder.interval(new Interval(now.plusDays(1), now.plusDays(2)))\n                       .build(),\n            now\n        )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/rules/PeriodLoadRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"7b346624624d6ec6843b9591c0c8e357d3d928de","commitMessage":"@@@Period load/drop/broadcast rules should include the future by default (#6414)\n\n* Period load/drop/broadcast rules should include the future by default\n\n* address comments\n\n* adjust coordinator console and tweak docs\n\n* address comments\n\n* fix travis-ci\n","date":"2018-11-02 00:43:34","modifiedFileCount":"8","status":"M","submitter":"QiuMM"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":4,"curCode":"  public void testDropBefore()\n  {\n    DateTime now = DateTimes.of(\"2012-12-31T01:00:00\");\n    PeriodDropBeforeRule rule = new PeriodDropBeforeRule(\n        new Period(\"P1D\")\n    );\n\n    Assert.assertTrue(\n        rule.appliesTo(\n            BUILDER.interval(new Interval(now.minusDays(3), now.minusDays(2))).build(),\n            now\n        )\n    );\n    Assert.assertTrue(\n        rule.appliesTo(\n            BUILDER.interval(new Interval(now.minusDays(2), now.minusDays(1))).build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        rule.appliesTo(\n            BUILDER.interval(new Interval(now.minusDays(1), now)).build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        rule.appliesTo(\n            BUILDER.interval(new Interval(now, now.plusDays(1))).build(),\n            now\n        )\n    );\n  }\n","date":"2019-08-23 18:13:54","endLine":85,"groupId":"10423","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b4/aa17d7b45d82d5d5bc51b4d801f3b8f587c0ee.src","preCode":"  public void testDropBefore()\n  {\n    DateTime now = DateTimes.of(\"2012-12-31T01:00:00\");\n    PeriodDropBeforeRule rule = new PeriodDropBeforeRule(\n        new Period(\"P1D\")\n    );\n\n    Assert.assertTrue(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(3), now.minusDays(2))).build(),\n            now\n        )\n    );\n    Assert.assertTrue(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(2), now.minusDays(1))).build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(1), now)).build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        rule.appliesTo(\n            builder.interval(new Interval(now, now.plusDays(1))).build(),\n            now\n        )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/rules/PeriodDropBeforeRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":4,"curCode":"  public void testAppliesToPeriod()\n  {\n    DateTime now = DateTimes.of(\"2012-12-31T01:00:00\");\n    PeriodLoadRule rule = new PeriodLoadRule(\n        new Period(\"P1M\"),\n        false,\n        ImmutableMap.of(\"\", 0)\n    );\n\n    Assert.assertTrue(rule.appliesTo(BUILDER.interval(new Interval(now.minusWeeks(1), now)).build(), now));\n    Assert.assertTrue(\n        rule.appliesTo(\n            BUILDER.interval(new Interval(now.minusDays(1), now.plusDays(1)))\n                   .build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        rule.appliesTo(\n            BUILDER.interval(new Interval(now.plusDays(1), now.plusDays(2)))\n                       .build(),\n            now\n        )\n    );\n  }\n","date":"2019-08-23 18:13:54","endLine":85,"groupId":"10423","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAppliesToPeriod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/91/c7510429f125a7e92d1c758aafe285e1fae274.src","preCode":"  public void testAppliesToPeriod()\n  {\n    DateTime now = DateTimes.of(\"2012-12-31T01:00:00\");\n    PeriodLoadRule rule = new PeriodLoadRule(\n        new Period(\"P1M\"),\n        false,\n        ImmutableMap.of(\"\", 0)\n    );\n\n    Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusWeeks(1), now)).build(), now));\n    Assert.assertTrue(\n        rule.appliesTo(\n            builder.interval(new Interval(now.minusDays(1), now.plusDays(1)))\n                   .build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        rule.appliesTo(\n            builder.interval(new Interval(now.plusDays(1), now.plusDays(2)))\n                       .build(),\n            now\n        )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/rules/PeriodLoadRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
