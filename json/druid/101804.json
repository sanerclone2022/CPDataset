[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testConcat() throws Exception\n  {\n    testQuery(\n        \"SELECT CONCAT(dim1, '-', dim1, '_', dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .virtualColumns(EXPRESSION_VIRTUAL_COLUMN(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",'-',\\\"dim1\\\",'_',\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"-_\"},\n            new Object[]{\"10.1-10.1_10.1\"},\n            new Object[]{\"2-2_2\"},\n            new Object[]{\"1-1_1\"},\n            new Object[]{\"def-def_def\"},\n            new Object[]{\"abc-abc_abc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT CONCAT(dim1, CONCAT(dim2,'x'), m2, 9999, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .virtualColumns(EXPRESSION_VIRTUAL_COLUMN(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",concat(\\\"dim2\\\",'x'),\\\"m2\\\",9999,\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"ax1.09999\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"10.1x2.0999910.1\"}, \r\n            new Object[]{\"2x3.099992\"},\n            new Object[]{\"1ax4.099991\"},\n            new Object[]{\"defabcx5.09999def\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"abcx6.09999abc\"} \r\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":7340,"groupId":"9414","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/379ded006b366f1ea8ef06ae925a08ff61040e.src","preCode":"  public void testConcat() throws Exception\n  {\n    testQuery(\n        \"SELECT CONCAT(dim1, '-', dim1, '_', dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .virtualColumns(EXPRESSION_VIRTUAL_COLUMN(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",'-',\\\"dim1\\\",'_',\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"-_\"},\n            new Object[]{\"10.1-10.1_10.1\"},\n            new Object[]{\"2-2_2\"},\n            new Object[]{\"1-1_1\"},\n            new Object[]{\"def-def_def\"},\n            new Object[]{\"abc-abc_abc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT CONCAT(dim1, CONCAT(dim2,'x'), m2, 9999, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .virtualColumns(EXPRESSION_VIRTUAL_COLUMN(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",concat(\\\"dim2\\\",'x'),\\\"m2\\\",9999,\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"ax1.09999\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"10.1x2.0999910.1\"}, \r\n            new Object[]{\"2x3.099992\"},\n            new Object[]{\"1ax4.099991\"},\n            new Object[]{\"defabcx5.09999def\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"abcx6.09999abc\"} \r\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7287,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testTextcat() throws Exception\n  {\n    testQuery(\n        \"SELECT textcat(dim1, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .virtualColumns(EXPRESSION_VIRTUAL_COLUMN(\"v0\", \"concat(\\\"dim1\\\",\\\"dim1\\\")\", ValueType.STRING))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"10.110.1\"},\n            new Object[]{\"22\"},\n            new Object[]{\"11\"},\n            new Object[]{\"defdef\"},\n            new Object[]{\"abcabc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT textcat(dim1, CAST(m2 as VARCHAR)) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .virtualColumns(EXPRESSION_VIRTUAL_COLUMN(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",CAST(\\\"m2\\\", 'STRING'))\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"1.0\"},\n            new Object[]{\"10.12.0\"},\n            new Object[]{\"23.0\"},\n            new Object[]{\"14.0\"},\n            new Object[]{\"def5.0\"},\n            new Object[]{\"abc6.0\"}\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":7392,"groupId":"9348","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTextcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/379ded006b366f1ea8ef06ae925a08ff61040e.src","preCode":"  public void testTextcat() throws Exception\n  {\n    testQuery(\n        \"SELECT textcat(dim1, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .virtualColumns(EXPRESSION_VIRTUAL_COLUMN(\"v0\", \"concat(\\\"dim1\\\",\\\"dim1\\\")\", ValueType.STRING))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"10.110.1\"},\n            new Object[]{\"22\"},\n            new Object[]{\"11\"},\n            new Object[]{\"defdef\"},\n            new Object[]{\"abcabc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT textcat(dim1, CAST(m2 as VARCHAR)) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .virtualColumns(EXPRESSION_VIRTUAL_COLUMN(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",CAST(\\\"m2\\\", 'STRING'))\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"1.0\"},\n            new Object[]{\"10.12.0\"},\n            new Object[]{\"23.0\"},\n            new Object[]{\"14.0\"},\n            new Object[]{\"def5.0\"},\n            new Object[]{\"abc6.0\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7343,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-02-24 12:10:31","codes":[{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public void testConcat() throws Exception\n  {\n    testQuery(\n        \"SELECT CONCAT(dim1, '-', dim1, '_', dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expression_Virtual_Column(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",'-',\\\"dim1\\\",'_',\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"-_\"},\n            new Object[]{\"10.1-10.1_10.1\"},\n            new Object[]{\"2-2_2\"},\n            new Object[]{\"1-1_1\"},\n            new Object[]{\"def-def_def\"},\n            new Object[]{\"abc-abc_abc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT CONCAT(dim1, CONCAT(dim2,'x'), m2, 9999, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expression_Virtual_Column(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",concat(\\\"dim2\\\",'x'),\\\"m2\\\",9999,\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"ax1.09999\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"10.1x2.0999910.1\"}, \r\n            new Object[]{\"2x3.099992\"},\n            new Object[]{\"1ax4.099991\"},\n            new Object[]{\"defabcx5.09999def\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"abcx6.09999abc\"} \r\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":7312,"groupId":"18212","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testConcat() throws Exception\n  {\n    testQuery(\n        \"SELECT CONCAT(dim1, '-', dim1, '_', dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .virtualColumns(EXPRESSION_VIRTUAL_COLUMN(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",'-',\\\"dim1\\\",'_',\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"-_\"},\n            new Object[]{\"10.1-10.1_10.1\"},\n            new Object[]{\"2-2_2\"},\n            new Object[]{\"1-1_1\"},\n            new Object[]{\"def-def_def\"},\n            new Object[]{\"abc-abc_abc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT CONCAT(dim1, CONCAT(dim2,'x'), m2, 9999, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .virtualColumns(EXPRESSION_VIRTUAL_COLUMN(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",concat(\\\"dim2\\\",'x'),\\\"m2\\\",9999,\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"ax1.09999\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"10.1x2.0999910.1\"}, \r\n            new Object[]{\"2x3.099992\"},\n            new Object[]{\"1ax4.099991\"},\n            new Object[]{\"defabcx5.09999def\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"abcx6.09999abc\"} \r\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7259,"status":"M"},{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public void testTextcat() throws Exception\n  {\n    testQuery(\n        \"SELECT textcat(dim1, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expression_Virtual_Column(\"v0\", \"concat(\\\"dim1\\\",\\\"dim1\\\")\", ValueType.STRING))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"10.110.1\"},\n            new Object[]{\"22\"},\n            new Object[]{\"11\"},\n            new Object[]{\"defdef\"},\n            new Object[]{\"abcabc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT textcat(dim1, CAST(m2 as VARCHAR)) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expression_Virtual_Column(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",CAST(\\\"m2\\\", 'STRING'))\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"1.0\"},\n            new Object[]{\"10.12.0\"},\n            new Object[]{\"23.0\"},\n            new Object[]{\"14.0\"},\n            new Object[]{\"def5.0\"},\n            new Object[]{\"abc6.0\"}\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":7364,"groupId":"18213","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTextcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testTextcat() throws Exception\n  {\n    testQuery(\n        \"SELECT textcat(dim1, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .virtualColumns(EXPRESSION_VIRTUAL_COLUMN(\"v0\", \"concat(\\\"dim1\\\",\\\"dim1\\\")\", ValueType.STRING))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"10.110.1\"},\n            new Object[]{\"22\"},\n            new Object[]{\"11\"},\n            new Object[]{\"defdef\"},\n            new Object[]{\"abcabc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT textcat(dim1, CAST(m2 as VARCHAR)) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .virtualColumns(EXPRESSION_VIRTUAL_COLUMN(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",CAST(\\\"m2\\\", 'STRING'))\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"1.0\"},\n            new Object[]{\"10.12.0\"},\n            new Object[]{\"23.0\"},\n            new Object[]{\"14.0\"},\n            new Object[]{\"def5.0\"},\n            new Object[]{\"abc6.0\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7315,"status":"M"}],"commitId":"8b803cbc22b15799fd0526de8d6d0eea155ad733","commitMessage":"@@@Added checkstyle for \"Methods starting with Capital Letters\"  (#7118)\n\n* Added checkstyle for \"Methods starting with Capital Letters\" and changed the method names violating this.\n\n* Un-abbreviate the method names in the calcite tests\n\n* Fixed checkstyle errors\n\n* Changed asserts position in the code\n","date":"2019-02-24 12:10:31","modifiedFileCount":"24","status":"M","submitter":"Himanshu Pandey"},{"authorTime":"2019-03-12 02:37:58","codes":[{"authorDate":"2019-03-12 02:37:58","commitOrder":3,"curCode":"  public void testConcat() throws Exception\n  {\n    testQuery(\n        \"SELECT CONCAt(dim1, '-', dim1, '_', dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",'-',\\\"dim1\\\",'_',\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"-_\"},\n            new Object[]{\"10.1-10.1_10.1\"},\n            new Object[]{\"2-2_2\"},\n            new Object[]{\"1-1_1\"},\n            new Object[]{\"def-def_def\"},\n            new Object[]{\"abc-abc_abc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT CONCAt(dim1, CONCAt(dim2,'x'), m2, 9999, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",concat(\\\"dim2\\\",'x'),\\\"m2\\\",9999,\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"ax1.09999\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"10.1x2.0999910.1\"}, \r\n            new Object[]{\"2x3.099992\"},\n            new Object[]{\"1ax4.099991\"},\n            new Object[]{\"defabcx5.09999def\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"abcx6.09999abc\"} \r\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":7336,"groupId":"18212","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testConcat() throws Exception\n  {\n    testQuery(\n        \"SELECT CONCAT(dim1, '-', dim1, '_', dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expression_Virtual_Column(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",'-',\\\"dim1\\\",'_',\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"-_\"},\n            new Object[]{\"10.1-10.1_10.1\"},\n            new Object[]{\"2-2_2\"},\n            new Object[]{\"1-1_1\"},\n            new Object[]{\"def-def_def\"},\n            new Object[]{\"abc-abc_abc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT CONCAT(dim1, CONCAT(dim2,'x'), m2, 9999, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expression_Virtual_Column(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",concat(\\\"dim2\\\",'x'),\\\"m2\\\",9999,\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"ax1.09999\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"10.1x2.0999910.1\"}, \r\n            new Object[]{\"2x3.099992\"},\n            new Object[]{\"1ax4.099991\"},\n            new Object[]{\"defabcx5.09999def\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"abcx6.09999abc\"} \r\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7283,"status":"M"},{"authorDate":"2019-03-12 02:37:58","commitOrder":3,"curCode":"  public void testTextcat() throws Exception\n  {\n    testQuery(\n        \"SELECT textcat(dim1, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"v0\", \"concat(\\\"dim1\\\",\\\"dim1\\\")\", ValueType.STRING))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"10.110.1\"},\n            new Object[]{\"22\"},\n            new Object[]{\"11\"},\n            new Object[]{\"defdef\"},\n            new Object[]{\"abcabc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT textcat(dim1, CAST(m2 as VARCHAR)) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",CAST(\\\"m2\\\", 'STRING'))\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"1.0\"},\n            new Object[]{\"10.12.0\"},\n            new Object[]{\"23.0\"},\n            new Object[]{\"14.0\"},\n            new Object[]{\"def5.0\"},\n            new Object[]{\"abc6.0\"}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":7388,"groupId":"18213","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTextcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testTextcat() throws Exception\n  {\n    testQuery(\n        \"SELECT textcat(dim1, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expression_Virtual_Column(\"v0\", \"concat(\\\"dim1\\\",\\\"dim1\\\")\", ValueType.STRING))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"10.110.1\"},\n            new Object[]{\"22\"},\n            new Object[]{\"11\"},\n            new Object[]{\"defdef\"},\n            new Object[]{\"abcabc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT textcat(dim1, CAST(m2 as VARCHAR)) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expression_Virtual_Column(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",CAST(\\\"m2\\\", 'STRING'))\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"1.0\"},\n            new Object[]{\"10.12.0\"},\n            new Object[]{\"23.0\"},\n            new Object[]{\"14.0\"},\n            new Object[]{\"def5.0\"},\n            new Object[]{\"abc6.0\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7339,"status":"M"}],"commitId":"d7ba19d477732578fc310831ed28365b36332752","commitMessage":"@@@sql.  filters.  and virtual columns  (#6902)\n\n* refactor sql planning to re-use expression virtual columns when possible when constructing a DruidQuery.  allowing virtual columns to be defined in filter expressions.  and making resulting native druid queries more concise. also minor refactor of built-in sql aggregators to maximize code re-use\n\n* fix it\n\n* fix it in the right place\n\n* fixup for base64 stuff\n\n* fixup tests\n\n* fix merge conflict on import order\n\n* fixup\n\n* fix imports\n\n* fix tests\n\n* review comments\n\n* refactor\n\n* re-arrange\n\n* better javadoc\n\n* fixup merge\n\n* fixup tests\n\n* fix accidental changes\n","date":"2019-03-12 02:37:58","modifiedFileCount":"33","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-03-29 05:37:09","codes":[{"authorDate":"2019-03-29 05:37:09","commitOrder":4,"curCode":"  public void testConcat() throws Exception\n  {\n    testQuery(\n        \"SELECT CONCAt(dim1, '-', dim1, '_', dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",'-',\\\"dim1\\\",'_',\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"-_\"},\n            new Object[]{\"10.1-10.1_10.1\"},\n            new Object[]{\"2-2_2\"},\n            new Object[]{\"1-1_1\"},\n            new Object[]{\"def-def_def\"},\n            new Object[]{\"abc-abc_abc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT CONCAt(dim1, CONCAt(dim2,'x'), m2, 9999, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",concat(\\\"dim2\\\",'x'),\\\"m2\\\",9999,\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"ax1.09999\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"10.1x2.0999910.1\"}, \r\n            new Object[]{\"2x3.099992\"},\n            new Object[]{\"1ax4.099991\"},\n            new Object[]{\"defabcx5.09999def\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"abcx6.09999abc\"} \r\n        )\n    );\n  }\n","date":"2019-03-29 05:37:09","endLine":7336,"groupId":"7816","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/7887cc5b629c34eac2672f4aae9bc27d95fa4b.src","preCode":"  public void testConcat() throws Exception\n  {\n    testQuery(\n        \"SELECT CONCAt(dim1, '-', dim1, '_', dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",'-',\\\"dim1\\\",'_',\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"-_\"},\n            new Object[]{\"10.1-10.1_10.1\"},\n            new Object[]{\"2-2_2\"},\n            new Object[]{\"1-1_1\"},\n            new Object[]{\"def-def_def\"},\n            new Object[]{\"abc-abc_abc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT CONCAt(dim1, CONCAt(dim2,'x'), m2, 9999, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",concat(\\\"dim2\\\",'x'),\\\"m2\\\",9999,\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"ax1.09999\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"10.1x2.0999910.1\"}, \r\n            new Object[]{\"2x3.099992\"},\n            new Object[]{\"1ax4.099991\"},\n            new Object[]{\"defabcx5.09999def\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"abcx6.09999abc\"} \r\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7283,"status":"M"},{"authorDate":"2019-03-29 05:37:09","commitOrder":4,"curCode":"  public void testTextcat() throws Exception\n  {\n    testQuery(\n        \"SELECT textcat(dim1, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"v0\", \"concat(\\\"dim1\\\",\\\"dim1\\\")\", ValueType.STRING))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"10.110.1\"},\n            new Object[]{\"22\"},\n            new Object[]{\"11\"},\n            new Object[]{\"defdef\"},\n            new Object[]{\"abcabc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT textcat(dim1, CAST(m2 as VARCHAR)) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",CAST(\\\"m2\\\", 'STRING'))\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"1.0\"},\n            new Object[]{\"10.12.0\"},\n            new Object[]{\"23.0\"},\n            new Object[]{\"14.0\"},\n            new Object[]{\"def5.0\"},\n            new Object[]{\"abc6.0\"}\n        )\n    );\n  }\n","date":"2019-03-29 05:37:09","endLine":7388,"groupId":"12286","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTextcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/7887cc5b629c34eac2672f4aae9bc27d95fa4b.src","preCode":"  public void testTextcat() throws Exception\n  {\n    testQuery(\n        \"SELECT textcat(dim1, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"v0\", \"concat(\\\"dim1\\\",\\\"dim1\\\")\", ValueType.STRING))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"10.110.1\"},\n            new Object[]{\"22\"},\n            new Object[]{\"11\"},\n            new Object[]{\"defdef\"},\n            new Object[]{\"abcabc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT textcat(dim1, CAST(m2 as VARCHAR)) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",CAST(\\\"m2\\\", 'STRING'))\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"1.0\"},\n            new Object[]{\"10.12.0\"},\n            new Object[]{\"23.0\"},\n            new Object[]{\"14.0\"},\n            new Object[]{\"def5.0\"},\n            new Object[]{\"abc6.0\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7339,"status":"M"}],"commitId":"ad7862c58ac7f05cb28108543c017e2b186d1031","commitMessage":"@@@Time Ordering On Scans (#7133)\n\n* Moved Scan Builder to Druids class and started on Scan Benchmark setup\n\n* Need to form queries\n\n* It runs.\n\n* Stuff for time-ordered scan query\n\n* Move ScanResultValue timestamp comparator to a separate class for testing\n\n* Licensing stuff\n\n* Change benchmark\n\n* Remove todos\n\n* Added TimestampComparator tests\n\n* Change number of benchmark iterations\n\n* Added time ordering to the scan benchmark\n\n* Changed benchmark params\n\n* More param changes\n\n* Benchmark param change\n\n* Made Jon's changes and removed TODOs\n\n* Broke some long lines into two lines\n\n* nit\n\n* Decrease segment size for less memory usage\n\n* Wrote tests for heapsort scan result values and fixed bug where iterator\nwasn't returning elements in correct order\n\n* Wrote more tests for scan result value sort\n\n* Committing a param change to kick teamcity\n\n* Fixed codestyle and forbidden API errors\n\n* .\n\n* Improved conciseness\n\n* nit\n\n* Created an error message for when someone tries to time order a result\nset > threshold limit\n\n* Set to spaces over tabs\n\n* Fixing tests WIP\n\n* Fixed failing calcite tests\n\n* Kicking travis with change to benchmark param\n\n* added all query types to scan benchmark\n\n* Fixed benchmark queries\n\n* Renamed sort function\n\n* Added javadoc on ScanResultValueTimestampComparator\n\n* Unused import\n\n* Added more javadoc\n\n* improved doc\n\n* Removed unused import to satisfy PMD check\n\n* Small changes\n\n* Changes based on Gian's comments\n\n* Fixed failing test due to null resultFormat\n\n* Added config and get # of segments\n\n* Set up time ordering strategy decision tree\n\n* Refactor and pQueue works\n\n* Cleanup\n\n* Ordering is correct on n-way merge -> still need to batch events into\nScanResultValues\n\n* WIP\n\n* Sequence stuff is so dirty :(\n\n* Fixed bug introduced by replacing deque with list\n\n* Wrote docs\n\n* Multi-historical setup works\n\n* WIP\n\n* Change so batching only occurs on broker for time-ordered scans\n\nRestricted batching to broker for time-ordered queries and adjusted\ntests\n\nFormatting\n\nCleanup\n\n* Fixed mistakes in merge\n\n* Fixed failing tests\n\n* Reset config\n\n* Wrote tests and added Javadoc\n\n* Nit-change on javadoc\n\n* Checkstyle fix\n\n* Improved test and appeased TeamCity\n\n* Sorry.  checkstyle\n\n* Applied Jon's recommended changes\n\n* Checkstyle fix\n\n* Optimization\n\n* Fixed tests\n\n* Updated error message\n\n* Added error message for UOE\n\n* Renaming\n\n* Finish rename\n\n* Smarter limiting for pQueue method\n\n* Optimized n-way merge strategy\n\n* Rename segment limit -> segment partitions limit\n\n* Added a bit of docs\n\n* More comments\n\n* Fix checkstyle and test\n\n* Nit comment\n\n* Fixed failing tests -> allow usage of all types of segment spec\n\n* Fixed failing tests -> allow usage of all types of segment spec\n\n* Revert \"Fixed failing tests -> allow usage of all types of segment spec\"\n\nThis reverts commit ec470288c7b725f5310bcf69d1db9f85ff509c8d.\n\n* Revert \"Merge branch '6088-Time-Ordering-On-Scans-N-Way-Merge' of github.com:justinborromeo/incubator-druid into 6088-Time-Ordering-On-Scans-N-Way-Merge\"\n\nThis reverts commit 57033f36df6e3ef887e5f0399ad74bb091306de8.  reversing\nchanges made to 8f01d8dd16f40d10c60519ca0ec0d2e6b2dde941.\n\n* Check type of segment spec before using for time ordering\n\n* Fix bug in numRowsScanned\n\n* Fix bug messing up count of rows\n\n* Fix docs and flipped boolean in ScanQueryLimitRowIterator\n\n* Refactor n-way merge\n\n* Added test for n-way merge\n\n* Refixed regression\n\n* Checkstyle and doc update\n\n* Modified sequence limit to accept longs and added test for long limits\n\n* doc fix\n\n* Implemented Clint's recommendations\n","date":"2019-03-29 05:37:09","modifiedFileCount":"23","status":"M","submitter":"Justin Borromeo"},{"authorTime":"2019-03-29 05:37:09","codes":[{"authorDate":"2019-07-03 12:39:26","commitOrder":5,"curCode":"  public void testConcat() throws Exception\n  {\n    testQuery(\n        \"SELECT CONCAT(dim1, '-', dim1, '_', dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",'-',\\\"dim1\\\",'_',\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"-_\"},\n            new Object[]{\"10.1-10.1_10.1\"},\n            new Object[]{\"2-2_2\"},\n            new Object[]{\"1-1_1\"},\n            new Object[]{\"def-def_def\"},\n            new Object[]{\"abc-abc_abc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT CONCAt(dim1, CONCAt(dim2,'x'), m2, 9999, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",concat(\\\"dim2\\\",'x'),\\\"m2\\\",9999,\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"ax1.09999\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"10.1x2.0999910.1\"}, \r\n            new Object[]{\"2x3.099992\"},\n            new Object[]{\"1ax4.099991\"},\n            new Object[]{\"defabcx5.09999def\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"abcx6.09999abc\"} \r\n        )\n    );\n  }\n","date":"2019-07-03 12:39:26","endLine":7499,"groupId":"101804","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f2/8c5b299ac9d5c32d0d92c9496ecb214821b783.src","preCode":"  public void testConcat() throws Exception\n  {\n    testQuery(\n        \"SELECT CONCAt(dim1, '-', dim1, '_', dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",'-',\\\"dim1\\\",'_',\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"-_\"},\n            new Object[]{\"10.1-10.1_10.1\"},\n            new Object[]{\"2-2_2\"},\n            new Object[]{\"1-1_1\"},\n            new Object[]{\"def-def_def\"},\n            new Object[]{\"abc-abc_abc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT CONCAt(dim1, CONCAt(dim2,'x'), m2, 9999, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",concat(\\\"dim2\\\",'x'),\\\"m2\\\",9999,\\\"dim1\\\")\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"ax1.09999\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"10.1x2.0999910.1\"}, \r\n            new Object[]{\"2x3.099992\"},\n            new Object[]{\"1ax4.099991\"},\n            new Object[]{\"defabcx5.09999def\"},\n            new Object[]{NullHandling.sqlCompatible() ? null : \"abcx6.09999abc\"} \r\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7446,"status":"M"},{"authorDate":"2019-03-29 05:37:09","commitOrder":5,"curCode":"  public void testTextcat() throws Exception\n  {\n    testQuery(\n        \"SELECT textcat(dim1, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"v0\", \"concat(\\\"dim1\\\",\\\"dim1\\\")\", ValueType.STRING))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"10.110.1\"},\n            new Object[]{\"22\"},\n            new Object[]{\"11\"},\n            new Object[]{\"defdef\"},\n            new Object[]{\"abcabc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT textcat(dim1, CAST(m2 as VARCHAR)) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",CAST(\\\"m2\\\", 'STRING'))\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"1.0\"},\n            new Object[]{\"10.12.0\"},\n            new Object[]{\"23.0\"},\n            new Object[]{\"14.0\"},\n            new Object[]{\"def5.0\"},\n            new Object[]{\"abc6.0\"}\n        )\n    );\n  }\n","date":"2019-03-29 05:37:09","endLine":7388,"groupId":"101804","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testTextcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/7887cc5b629c34eac2672f4aae9bc27d95fa4b.src","preCode":"  public void testTextcat() throws Exception\n  {\n    testQuery(\n        \"SELECT textcat(dim1, dim1) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"v0\", \"concat(\\\"dim1\\\",\\\"dim1\\\")\", ValueType.STRING))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"10.110.1\"},\n            new Object[]{\"22\"},\n            new Object[]{\"11\"},\n            new Object[]{\"defdef\"},\n            new Object[]{\"abcabc\"}\n        )\n    );\n\n    testQuery(\n        \"SELECT textcat(dim1, CAST(m2 as VARCHAR)) as dimX FROM foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\n                    \"v0\",\n                    \"concat(\\\"dim1\\\",CAST(\\\"m2\\\", 'STRING'))\",\n                    ValueType.STRING\n                ))\n                .columns(\"v0\")\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"1.0\"},\n            new Object[]{\"10.12.0\"},\n            new Object[]{\"23.0\"},\n            new Object[]{\"14.0\"},\n            new Object[]{\"def5.0\"},\n            new Object[]{\"abc6.0\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7339,"status":"N"}],"commitId":"c556d44a19b6daac1bb9070ed7fe9325fd595545","commitMessage":"@@@more sql support for expression array functions (#7974)\n\n* more sql support for expression array functions\n\n* prepend/slice\n\n* doc fixes\n\n* fix imports\n\n* fix tests\n\n* add null numeric expr for proper conversions between ExprEval and Expr and back to ExprEval\n\n* re-arrange\n\n* imports :(\n\n* add append/prepend test\n","date":"2019-07-03 12:39:26","modifiedFileCount":"7","status":"M","submitter":"Clint Wylie"}]
