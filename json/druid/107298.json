[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2020-01-28 03:24:29","commitOrder":2,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ClientCompactionTaskQuery that = (ClientCompactionTaskQuery) o;\n    return Objects.equals(dataSource, that.dataSource) &&\n           Objects.equals(ioConfig, that.ioConfig) &&\n           Objects.equals(tuningConfig, that.tuningConfig) &&\n           Objects.equals(context, that.context);\n  }\n","date":"2020-01-28 03:24:29","endLine":99,"groupId":"5786","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fd/509a3583b578cb43a7ca15de94b68ef3cb5c1a.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ClientCompactionTaskQuery that = (ClientCompactionTaskQuery) o;\n    return Objects.equals(dataSource, that.dataSource) &&\n           Objects.equals(ioConfig, that.ioConfig) &&\n           Objects.equals(tuningConfig, that.tuningConfig) &&\n           Objects.equals(context, that.context);\n  }\n","realPath":"server/src/main/java/org/apache/druid/client/indexing/ClientCompactionTaskQuery.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    JavaScriptAggregatorFactory that = (JavaScriptAggregatorFactory) o;\n    return Objects.equals(name, that.name) &&\n           Objects.equals(fieldNames, that.fieldNames) &&\n           Objects.equals(fnAggregate, that.fnAggregate) &&\n           Objects.equals(fnReset, that.fnReset) &&\n           Objects.equals(fnCombine, that.fnCombine);\n  }\n","date":"2018-08-31 00:56:26","endLine":414,"groupId":"20220","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/91/ebafaa109bbcb6b95077e0b1e26786f8c33402.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    JavaScriptAggregatorFactory that = (JavaScriptAggregatorFactory) o;\n    return Objects.equals(name, that.name) &&\n           Objects.equals(fieldNames, that.fieldNames) &&\n           Objects.equals(fnAggregate, that.fnAggregate) &&\n           Objects.equals(fnReset, that.fnReset) &&\n           Objects.equals(fnCombine, that.fnCombine);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/aggregation/JavaScriptAggregatorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"NB"}],"commitId":"b9186f8f9ff2ff52aceda42bc5f24ffd47a7d17e","commitMessage":"@@@Reconcile terminology and method naming to 'used/unused segments'; Rename MetadataSegmentManager to MetadataSegmentsManager (#7306)\n\n* Reconcile terminology and method naming to 'used/unused segments'; Don't use terms 'enable/disable data source'; Rename MetadataSegmentManager to MetadataSegments; Make REST API methods which mark segments as used/unused to return server error instead of an empty response in case of error\n\n* Fix brace\n\n* Import order\n\n* Rename withKillDataSourceWhitelist to withSpecificDataSourcesToKill\n\n* Fix tests\n\n* Fix tests by adding proper methods without interval parameters to IndexerMetadataStorageCoordinator instead of hacking with Intervals.ETERNITY\n\n* More aligned names of DruidCoordinatorHelpers.  rename several CoordinatorDynamicConfig parameters\n\n* Rename ClientCompactTaskQuery to ClientCompactionTaskQuery for consistency with CompactionTask; ClientCompactQueryTuningConfig to ClientCompactionTaskQueryTuningConfig\n\n* More variable and method renames\n\n* Rename MetadataSegments to SegmentsMetadata\n\n* Javadoc update\n\n* Simplify SegmentsMetadata.getUnusedSegmentIntervals().  more javadocs\n\n* Update Javadoc of VersionedIntervalTimeline.iterateAllObjects()\n\n* Reorder imports\n\n* Rename SegmentsMetadata.tryMark... methods to mark... and make them to return boolean and the numbers of segments changed and relay exceptions to callers\n\n* Complete merge\n\n* Add CollectionUtils.newTreeSet(); Refactor DruidCoordinatorRuntimeParams creation in tests\n\n* Remove MetadataSegmentManager\n\n* Rename millisLagSinceCoordinatorBecomesLeaderBeforeCanMarkAsUnusedOvershadowedSegments to leadingTimeMillisBeforeCanMarkAsUnusedOvershadowedSegments\n\n* Fix tests.  refactor DruidCluster creation in tests into DruidClusterBuilder\n\n* Fix inspections\n\n* Fix SQLMetadataSegmentManagerEmptyTest and rename it to SqlSegmentsMetadataEmptyTest\n\n* Rename SegmentsAndMetadata to SegmentsAndCommitMetadata to reduce the similarity with SegmentsMetadata; Rename some methods\n\n* Rename DruidCoordinatorHelper to CoordinatorDuty.  refactor DruidCoordinator\n\n* Unused import\n\n* Optimize imports\n\n* Rename IndexerSQLMetadataStorageCoordinator.getDataSourceMetadata() to retrieveDataSourceMetadata()\n\n* Unused import\n\n* Update terminology in datasource-view.tsx\n\n* Fix label in datasource-view.spec.tsx.snap\n\n* Fix lint errors in datasource-view.tsx\n\n* Doc improvements\n\n* Another attempt to please TSLint\n\n* Another attempt to please TSLint\n\n* Style fixes\n\n* Fix IndexerSQLMetadataStorageCoordinator.createUsedSegmentsSqlQueryForIntervals() (wrong merge)\n\n* Try to fix docs build issue\n\n* Javadoc and spelling fixes\n\n* Rename SegmentsMetadata to SegmentsMetadataManager.  address other comments\n\n* Address more comments\n","date":"2020-01-28 03:24:29","modifiedFileCount":"127","status":"M","submitter":"Roman Leventov"},{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2020-08-19 02:03:13","commitOrder":3,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ClientCompactionTaskQuery that = (ClientCompactionTaskQuery) o;\n    return Objects.equals(id, that.id) &&\n           Objects.equals(dataSource, that.dataSource) &&\n           Objects.equals(ioConfig, that.ioConfig) &&\n           Objects.equals(tuningConfig, that.tuningConfig) &&\n           Objects.equals(context, that.context);\n  }\n","date":"2020-08-19 02:03:13","endLine":113,"groupId":"20220","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d0/dd1756f02888c75a19ff7e01901a9172d1753d.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ClientCompactionTaskQuery that = (ClientCompactionTaskQuery) o;\n    return Objects.equals(dataSource, that.dataSource) &&\n           Objects.equals(ioConfig, that.ioConfig) &&\n           Objects.equals(tuningConfig, that.tuningConfig) &&\n           Objects.equals(context, that.context);\n  }\n","realPath":"server/src/main/java/org/apache/druid/client/indexing/ClientCompactionTaskQuery.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2018-08-31 00:56:26","commitOrder":3,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    JavaScriptAggregatorFactory that = (JavaScriptAggregatorFactory) o;\n    return Objects.equals(name, that.name) &&\n           Objects.equals(fieldNames, that.fieldNames) &&\n           Objects.equals(fnAggregate, that.fnAggregate) &&\n           Objects.equals(fnReset, that.fnReset) &&\n           Objects.equals(fnCombine, that.fnCombine);\n  }\n","date":"2018-08-31 00:56:26","endLine":414,"groupId":"20220","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/91/ebafaa109bbcb6b95077e0b1e26786f8c33402.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    JavaScriptAggregatorFactory that = (JavaScriptAggregatorFactory) o;\n    return Objects.equals(name, that.name) &&\n           Objects.equals(fieldNames, that.fieldNames) &&\n           Objects.equals(fnAggregate, that.fnAggregate) &&\n           Objects.equals(fnReset, that.fnReset) &&\n           Objects.equals(fnCombine, that.fnCombine);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/aggregation/JavaScriptAggregatorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"N"}],"commitId":"9a81740281d8ee8eafafbf71ccfdb90cb87e34d6","commitMessage":"@@@Don't log the entire task spec (#10278)\n\n* Don't log the entire task spec\n\n* fix lgtm\n\n* fix serde\n\n* address comments and add tests\n\n* fix tests\n\n* remove unnecessary codes","date":"2020-08-19 02:03:13","modifiedFileCount":"24","status":"M","submitter":"Jihoon Son"},{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2021-02-12 19:03:20","commitOrder":4,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ClientCompactionTaskQuery that = (ClientCompactionTaskQuery) o;\n    return Objects.equals(id, that.id) &&\n           Objects.equals(dataSource, that.dataSource) &&\n           Objects.equals(ioConfig, that.ioConfig) &&\n           Objects.equals(tuningConfig, that.tuningConfig) &&\n           Objects.equals(granularitySpec, that.granularitySpec) &&\n           Objects.equals(context, that.context);\n  }\n","date":"2021-02-12 19:03:20","endLine":124,"groupId":"107298","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ea/4155525db34d8e8e56b70b3ffca953a334474c.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ClientCompactionTaskQuery that = (ClientCompactionTaskQuery) o;\n    return Objects.equals(id, that.id) &&\n           Objects.equals(dataSource, that.dataSource) &&\n           Objects.equals(ioConfig, that.ioConfig) &&\n           Objects.equals(tuningConfig, that.tuningConfig) &&\n           Objects.equals(context, that.context);\n  }\n","realPath":"server/src/main/java/org/apache/druid/client/indexing/ClientCompactionTaskQuery.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2018-08-31 00:56:26","commitOrder":4,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    JavaScriptAggregatorFactory that = (JavaScriptAggregatorFactory) o;\n    return Objects.equals(name, that.name) &&\n           Objects.equals(fieldNames, that.fieldNames) &&\n           Objects.equals(fnAggregate, that.fnAggregate) &&\n           Objects.equals(fnReset, that.fnReset) &&\n           Objects.equals(fnCombine, that.fnCombine);\n  }\n","date":"2018-08-31 00:56:26","endLine":414,"groupId":"107298","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/91/ebafaa109bbcb6b95077e0b1e26786f8c33402.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    JavaScriptAggregatorFactory that = (JavaScriptAggregatorFactory) o;\n    return Objects.equals(name, that.name) &&\n           Objects.equals(fieldNames, that.fieldNames) &&\n           Objects.equals(fnAggregate, that.fnAggregate) &&\n           Objects.equals(fnReset, that.fnReset) &&\n           Objects.equals(fnCombine, that.fnCombine);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/aggregation/JavaScriptAggregatorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"N"}],"commitId":"6541178c21839530a42af4b4675a9bc680bffca6","commitMessage":"@@@Support segmentGranularity for auto-compaction (#10843)\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* resolve conflict\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* fix tests\n\n* fix more tests\n\n* fix checkstyle\n\n* add unit tests\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* add unit tests\n\n* add integration tests\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix failing tests\n\n* address comments\n\n* address comments\n\n* fix tests\n\n* fix tests\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test","date":"2021-02-12 19:03:20","modifiedFileCount":"32","status":"M","submitter":"Maytas Monsereenusorn"}]
