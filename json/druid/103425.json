[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testZip() throws IOException, SegmentLoadingException\n  {\n    final File tmpDir = com.google.common.io.Files.createTempDir();\n    final File tmpFile = File.createTempFile(\"zipContents\", \".txt\", tmpDir);\n\n    final Path zipPath = new Path(\"/tmp/testZip.zip\");\n\n    final File outTmpDir = com.google.common.io.Files.createTempDir();\n\n    final URI uri = URI.create(uriBase.toString() + zipPath.toString());\n\n    try (final OutputStream stream = new FileOutputStream(tmpFile)) {\n      ByteStreams.copy(new ByteArrayInputStream(pathByteContents), stream);\n    }\n    Assert.assertTrue(tmpFile.exists());\n\n    final File outFile = new File(outTmpDir, tmpFile.getName());\n    outFile.delete();\n\n    try (final OutputStream stream = miniCluster.getFileSystem().create(zipPath)) {\n      CompressionUtils.zip(tmpDir, stream);\n    }\n    try {\n      Assert.assertFalse(outFile.exists());\n      puller.getSegmentFiles(new Path(uri), outTmpDir);\n      Assert.assertTrue(outFile.exists());\n\n      Assert.assertArrayEquals(pathByteContents, Files.readAllBytes(outFile.toPath()));\n    }\n    finally {\n      if (tmpFile.exists()) {\n        tmpFile.delete();\n      }\n      if (outFile.exists()) {\n        outFile.delete();\n      }\n      if (outTmpDir.exists()) {\n        outTmpDir.delete();\n      }\n      if (tmpDir.exists()) {\n        tmpDir.delete();\n      }\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":155,"groupId":"9972","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testZip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7d/c691fc77c345769d862841a16b3a1275e8d62e.src","preCode":"  public void testZip() throws IOException, SegmentLoadingException\n  {\n    final File tmpDir = com.google.common.io.Files.createTempDir();\n    final File tmpFile = File.createTempFile(\"zipContents\", \".txt\", tmpDir);\n\n    final Path zipPath = new Path(\"/tmp/testZip.zip\");\n\n    final File outTmpDir = com.google.common.io.Files.createTempDir();\n\n    final URI uri = URI.create(uriBase.toString() + zipPath.toString());\n\n    try (final OutputStream stream = new FileOutputStream(tmpFile)) {\n      ByteStreams.copy(new ByteArrayInputStream(pathByteContents), stream);\n    }\n    Assert.assertTrue(tmpFile.exists());\n\n    final File outFile = new File(outTmpDir, tmpFile.getName());\n    outFile.delete();\n\n    try (final OutputStream stream = miniCluster.getFileSystem().create(zipPath)) {\n      CompressionUtils.zip(tmpDir, stream);\n    }\n    try {\n      Assert.assertFalse(outFile.exists());\n      puller.getSegmentFiles(new Path(uri), outTmpDir);\n      Assert.assertTrue(outFile.exists());\n\n      Assert.assertArrayEquals(pathByteContents, Files.readAllBytes(outFile.toPath()));\n    }\n    finally {\n      if (tmpFile.exists()) {\n        tmpFile.delete();\n      }\n      if (outFile.exists()) {\n        outFile.delete();\n      }\n      if (outTmpDir.exists()) {\n        outTmpDir.delete();\n      }\n      if (tmpDir.exists()) {\n        tmpDir.delete();\n      }\n    }\n  }\n","realPath":"extensions-core/hdfs-storage/src/test/java/org/apache/druid/storage/hdfs/HdfsDataSegmentPullerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDir() throws IOException, SegmentLoadingException\n  {\n\n    final Path zipPath = new Path(perTestPath, \"test.txt\");\n\n    final File outTmpDir = com.google.common.io.Files.createTempDir();\n    final File outFile = new File(outTmpDir, \"test.txt\");\n    outFile.delete();\n\n    final URI uri = URI.create(uriBase.toString() + perTestPath.toString());\n\n    try (final OutputStream outputStream = miniCluster.getFileSystem().create(zipPath);\n         final InputStream inputStream = new ByteArrayInputStream(pathByteContents)) {\n      ByteStreams.copy(inputStream, outputStream);\n    }\n    try {\n      Assert.assertFalse(outFile.exists());\n      puller.getSegmentFiles(new Path(uri), outTmpDir);\n      Assert.assertTrue(outFile.exists());\n\n      Assert.assertArrayEquals(pathByteContents, Files.readAllBytes(outFile.toPath()));\n    }\n    finally {\n      if (outFile.exists()) {\n        outFile.delete();\n      }\n      if (outTmpDir.exists()) {\n        outTmpDir.delete();\n      }\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":221,"groupId":"9973","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDir","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7d/c691fc77c345769d862841a16b3a1275e8d62e.src","preCode":"  public void testDir() throws IOException, SegmentLoadingException\n  {\n\n    final Path zipPath = new Path(perTestPath, \"test.txt\");\n\n    final File outTmpDir = com.google.common.io.Files.createTempDir();\n    final File outFile = new File(outTmpDir, \"test.txt\");\n    outFile.delete();\n\n    final URI uri = URI.create(uriBase.toString() + perTestPath.toString());\n\n    try (final OutputStream outputStream = miniCluster.getFileSystem().create(zipPath);\n         final InputStream inputStream = new ByteArrayInputStream(pathByteContents)) {\n      ByteStreams.copy(inputStream, outputStream);\n    }\n    try {\n      Assert.assertFalse(outFile.exists());\n      puller.getSegmentFiles(new Path(uri), outTmpDir);\n      Assert.assertTrue(outFile.exists());\n\n      Assert.assertArrayEquals(pathByteContents, Files.readAllBytes(outFile.toPath()));\n    }\n    finally {\n      if (outFile.exists()) {\n        outFile.delete();\n      }\n      if (outTmpDir.exists()) {\n        outTmpDir.delete();\n      }\n    }\n  }\n","realPath":"extensions-core/hdfs-storage/src/test/java/org/apache/druid/storage/hdfs/HdfsDataSegmentPullerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-11-16 05:21:34","codes":[{"authorDate":"2018-11-16 05:21:34","commitOrder":2,"curCode":"  public void testZip() throws IOException, SegmentLoadingException\n  {\n    final File tmpDir = com.google.common.io.Files.createTempDir();\n    final File tmpFile = File.createTempFile(\"zipContents\", \".txt\", tmpDir);\n\n    final Path zipPath = new Path(\"/tmp/testZip.zip\");\n\n    final File outTmpDir = com.google.common.io.Files.createTempDir();\n\n    final URI uri = URI.create(uriBase.toString() + zipPath);\n\n    try (final OutputStream stream = new FileOutputStream(tmpFile)) {\n      ByteStreams.copy(new ByteArrayInputStream(pathByteContents), stream);\n    }\n    Assert.assertTrue(tmpFile.exists());\n\n    final File outFile = new File(outTmpDir, tmpFile.getName());\n    outFile.delete();\n\n    try (final OutputStream stream = miniCluster.getFileSystem().create(zipPath)) {\n      CompressionUtils.zip(tmpDir, stream);\n    }\n    try {\n      Assert.assertFalse(outFile.exists());\n      puller.getSegmentFiles(new Path(uri), outTmpDir);\n      Assert.assertTrue(outFile.exists());\n\n      Assert.assertArrayEquals(pathByteContents, Files.readAllBytes(outFile.toPath()));\n    }\n    finally {\n      if (tmpFile.exists()) {\n        tmpFile.delete();\n      }\n      if (outFile.exists()) {\n        outFile.delete();\n      }\n      if (outTmpDir.exists()) {\n        outTmpDir.delete();\n      }\n      if (tmpDir.exists()) {\n        tmpDir.delete();\n      }\n    }\n  }\n","date":"2018-11-16 05:21:34","endLine":155,"groupId":"9972","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testZip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/86/e8c5d4b25c262751792ec7951012b030ee8e32.src","preCode":"  public void testZip() throws IOException, SegmentLoadingException\n  {\n    final File tmpDir = com.google.common.io.Files.createTempDir();\n    final File tmpFile = File.createTempFile(\"zipContents\", \".txt\", tmpDir);\n\n    final Path zipPath = new Path(\"/tmp/testZip.zip\");\n\n    final File outTmpDir = com.google.common.io.Files.createTempDir();\n\n    final URI uri = URI.create(uriBase.toString() + zipPath.toString());\n\n    try (final OutputStream stream = new FileOutputStream(tmpFile)) {\n      ByteStreams.copy(new ByteArrayInputStream(pathByteContents), stream);\n    }\n    Assert.assertTrue(tmpFile.exists());\n\n    final File outFile = new File(outTmpDir, tmpFile.getName());\n    outFile.delete();\n\n    try (final OutputStream stream = miniCluster.getFileSystem().create(zipPath)) {\n      CompressionUtils.zip(tmpDir, stream);\n    }\n    try {\n      Assert.assertFalse(outFile.exists());\n      puller.getSegmentFiles(new Path(uri), outTmpDir);\n      Assert.assertTrue(outFile.exists());\n\n      Assert.assertArrayEquals(pathByteContents, Files.readAllBytes(outFile.toPath()));\n    }\n    finally {\n      if (tmpFile.exists()) {\n        tmpFile.delete();\n      }\n      if (outFile.exists()) {\n        outFile.delete();\n      }\n      if (outTmpDir.exists()) {\n        outTmpDir.delete();\n      }\n      if (tmpDir.exists()) {\n        tmpDir.delete();\n      }\n    }\n  }\n","realPath":"extensions-core/hdfs-storage/src/test/java/org/apache/druid/storage/hdfs/HdfsDataSegmentPullerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2018-11-16 05:21:34","commitOrder":2,"curCode":"  public void testDir() throws IOException, SegmentLoadingException\n  {\n\n    final Path zipPath = new Path(perTestPath, \"test.txt\");\n\n    final File outTmpDir = com.google.common.io.Files.createTempDir();\n    final File outFile = new File(outTmpDir, \"test.txt\");\n    outFile.delete();\n\n    final URI uri = URI.create(uriBase.toString() + perTestPath);\n\n    try (final OutputStream outputStream = miniCluster.getFileSystem().create(zipPath);\n         final InputStream inputStream = new ByteArrayInputStream(pathByteContents)) {\n      ByteStreams.copy(inputStream, outputStream);\n    }\n    try {\n      Assert.assertFalse(outFile.exists());\n      puller.getSegmentFiles(new Path(uri), outTmpDir);\n      Assert.assertTrue(outFile.exists());\n\n      Assert.assertArrayEquals(pathByteContents, Files.readAllBytes(outFile.toPath()));\n    }\n    finally {\n      if (outFile.exists()) {\n        outFile.delete();\n      }\n      if (outTmpDir.exists()) {\n        outTmpDir.delete();\n      }\n    }\n  }\n","date":"2018-11-16 05:21:34","endLine":221,"groupId":"4453","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDir","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/86/e8c5d4b25c262751792ec7951012b030ee8e32.src","preCode":"  public void testDir() throws IOException, SegmentLoadingException\n  {\n\n    final Path zipPath = new Path(perTestPath, \"test.txt\");\n\n    final File outTmpDir = com.google.common.io.Files.createTempDir();\n    final File outFile = new File(outTmpDir, \"test.txt\");\n    outFile.delete();\n\n    final URI uri = URI.create(uriBase.toString() + perTestPath.toString());\n\n    try (final OutputStream outputStream = miniCluster.getFileSystem().create(zipPath);\n         final InputStream inputStream = new ByteArrayInputStream(pathByteContents)) {\n      ByteStreams.copy(inputStream, outputStream);\n    }\n    try {\n      Assert.assertFalse(outFile.exists());\n      puller.getSegmentFiles(new Path(uri), outTmpDir);\n      Assert.assertTrue(outFile.exists());\n\n      Assert.assertArrayEquals(pathByteContents, Files.readAllBytes(outFile.toPath()));\n    }\n    finally {\n      if (outFile.exists()) {\n        outFile.delete();\n      }\n      if (outTmpDir.exists()) {\n        outTmpDir.delete();\n      }\n    }\n  }\n","realPath":"extensions-core/hdfs-storage/src/test/java/org/apache/druid/storage/hdfs/HdfsDataSegmentPullerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"}],"commitId":"8f3fe9cd028592b4b1449c2a5e6dba482bed0549","commitMessage":"@@@Prohibit String.replace() and String.replaceAll().  fix and prohibit some toString()-related redundancies (#6607)\n\n* Prohibit String.replace() and String.replaceAll().  fix and prohibit some toString()-related redundancies\n\n* Fix bug\n\n* Replace checkstyle regexp with IntelliJ inspection\n","date":"2018-11-16 05:21:34","modifiedFileCount":"97","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-11-23 11:48:49","codes":[{"authorDate":"2019-11-23 11:48:49","commitOrder":3,"curCode":"  public void testZip() throws IOException, SegmentLoadingException\n  {\n    final File tmpDir = FileUtils.createTempDir();\n    final File tmpFile = File.createTempFile(\"zipContents\", \".txt\", tmpDir);\n\n    final Path zipPath = new Path(\"/tmp/testZip.zip\");\n\n    final File outTmpDir = FileUtils.createTempDir();\n\n    final URI uri = URI.create(uriBase.toString() + zipPath);\n\n    try (final OutputStream stream = new FileOutputStream(tmpFile)) {\n      ByteStreams.copy(new ByteArrayInputStream(pathByteContents), stream);\n    }\n    Assert.assertTrue(tmpFile.exists());\n\n    final File outFile = new File(outTmpDir, tmpFile.getName());\n    outFile.delete();\n\n    try (final OutputStream stream = miniCluster.getFileSystem().create(zipPath)) {\n      CompressionUtils.zip(tmpDir, stream);\n    }\n    try {\n      Assert.assertFalse(outFile.exists());\n      puller.getSegmentFiles(new Path(uri), outTmpDir);\n      Assert.assertTrue(outFile.exists());\n\n      Assert.assertArrayEquals(pathByteContents, Files.readAllBytes(outFile.toPath()));\n    }\n    finally {\n      if (tmpFile.exists()) {\n        tmpFile.delete();\n      }\n      if (outFile.exists()) {\n        outFile.delete();\n      }\n      if (outTmpDir.exists()) {\n        outTmpDir.delete();\n      }\n      if (tmpDir.exists()) {\n        tmpDir.delete();\n      }\n    }\n  }\n","date":"2019-11-23 11:48:49","endLine":155,"groupId":"9972","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testZip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/14399767f290d740875cde03062760dc0d0149.src","preCode":"  public void testZip() throws IOException, SegmentLoadingException\n  {\n    final File tmpDir = com.google.common.io.Files.createTempDir();\n    final File tmpFile = File.createTempFile(\"zipContents\", \".txt\", tmpDir);\n\n    final Path zipPath = new Path(\"/tmp/testZip.zip\");\n\n    final File outTmpDir = com.google.common.io.Files.createTempDir();\n\n    final URI uri = URI.create(uriBase.toString() + zipPath);\n\n    try (final OutputStream stream = new FileOutputStream(tmpFile)) {\n      ByteStreams.copy(new ByteArrayInputStream(pathByteContents), stream);\n    }\n    Assert.assertTrue(tmpFile.exists());\n\n    final File outFile = new File(outTmpDir, tmpFile.getName());\n    outFile.delete();\n\n    try (final OutputStream stream = miniCluster.getFileSystem().create(zipPath)) {\n      CompressionUtils.zip(tmpDir, stream);\n    }\n    try {\n      Assert.assertFalse(outFile.exists());\n      puller.getSegmentFiles(new Path(uri), outTmpDir);\n      Assert.assertTrue(outFile.exists());\n\n      Assert.assertArrayEquals(pathByteContents, Files.readAllBytes(outFile.toPath()));\n    }\n    finally {\n      if (tmpFile.exists()) {\n        tmpFile.delete();\n      }\n      if (outFile.exists()) {\n        outFile.delete();\n      }\n      if (outTmpDir.exists()) {\n        outTmpDir.delete();\n      }\n      if (tmpDir.exists()) {\n        tmpDir.delete();\n      }\n    }\n  }\n","realPath":"extensions-core/hdfs-storage/src/test/java/org/apache/druid/storage/hdfs/HdfsDataSegmentPullerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2019-11-23 11:48:49","commitOrder":3,"curCode":"  public void testDir() throws IOException, SegmentLoadingException\n  {\n\n    final Path zipPath = new Path(perTestPath, \"test.txt\");\n\n    final File outTmpDir = FileUtils.createTempDir();\n    final File outFile = new File(outTmpDir, \"test.txt\");\n    outFile.delete();\n\n    final URI uri = URI.create(uriBase.toString() + perTestPath);\n\n    try (final OutputStream outputStream = miniCluster.getFileSystem().create(zipPath);\n         final InputStream inputStream = new ByteArrayInputStream(pathByteContents)) {\n      ByteStreams.copy(inputStream, outputStream);\n    }\n    try {\n      Assert.assertFalse(outFile.exists());\n      puller.getSegmentFiles(new Path(uri), outTmpDir);\n      Assert.assertTrue(outFile.exists());\n\n      Assert.assertArrayEquals(pathByteContents, Files.readAllBytes(outFile.toPath()));\n    }\n    finally {\n      if (outFile.exists()) {\n        outFile.delete();\n      }\n      if (outTmpDir.exists()) {\n        outTmpDir.delete();\n      }\n    }\n  }\n","date":"2019-11-23 11:48:49","endLine":221,"groupId":"4453","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDir","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/14399767f290d740875cde03062760dc0d0149.src","preCode":"  public void testDir() throws IOException, SegmentLoadingException\n  {\n\n    final Path zipPath = new Path(perTestPath, \"test.txt\");\n\n    final File outTmpDir = com.google.common.io.Files.createTempDir();\n    final File outFile = new File(outTmpDir, \"test.txt\");\n    outFile.delete();\n\n    final URI uri = URI.create(uriBase.toString() + perTestPath);\n\n    try (final OutputStream outputStream = miniCluster.getFileSystem().create(zipPath);\n         final InputStream inputStream = new ByteArrayInputStream(pathByteContents)) {\n      ByteStreams.copy(inputStream, outputStream);\n    }\n    try {\n      Assert.assertFalse(outFile.exists());\n      puller.getSegmentFiles(new Path(uri), outTmpDir);\n      Assert.assertTrue(outFile.exists());\n\n      Assert.assertArrayEquals(pathByteContents, Files.readAllBytes(outFile.toPath()));\n    }\n    finally {\n      if (outFile.exists()) {\n        outFile.delete();\n      }\n      if (outTmpDir.exists()) {\n        outTmpDir.delete();\n      }\n    }\n  }\n","realPath":"extensions-core/hdfs-storage/src/test/java/org/apache/druid/storage/hdfs/HdfsDataSegmentPullerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"}],"commitId":"e0eb85ace72322c80a7f2f0555d411f2067f83ea","commitMessage":"@@@Add FileUtils.createTempDir() and enforce its usage. (#8932)\n\n* Add FileUtils.createTempDir() and enforce its usage.\n\nThe purpose of this is to improve error messages. Previously.  the error\nmessage on a nonexistent or unwritable temp directory would be\n\"Failed to create directory within 10. 000 attempts\".\n\n* Further updates.\n\n* Another update.\n\n* Remove commons-io from benchmark.\n\n* Fix tests.\n","date":"2019-11-23 11:48:49","modifiedFileCount":"71","status":"M","submitter":"Gian Merlino"},{"authorTime":"2021-08-10 22:52:32","codes":[{"authorDate":"2021-08-10 22:52:32","commitOrder":4,"curCode":"  public void testZip() throws IOException, SegmentLoadingException\n  {\n    final File tmpDir = FileUtils.createTempDir();\n    final File tmpFile = File.createTempFile(\"zipContents\", \".txt\", tmpDir);\n\n    final Path zipPath = new Path(\"/tmp/testZip.zip\");\n\n    final File outTmpDir = FileUtils.createTempDir();\n\n    try (final OutputStream stream = new FileOutputStream(tmpFile)) {\n      ByteStreams.copy(new ByteArrayInputStream(pathByteContents), stream);\n    }\n    Assert.assertTrue(tmpFile.exists());\n\n    final File outFile = new File(outTmpDir, tmpFile.getName());\n    outFile.delete();\n\n    try (final OutputStream stream = fileSystem.create(zipPath)) {\n      CompressionUtils.zip(tmpDir, stream);\n    }\n    try {\n      Assert.assertFalse(outFile.exists());\n      puller.getSegmentFiles(fileSystem.makeQualified(zipPath), outTmpDir);\n      Assert.assertTrue(outFile.exists());\n\n      Assert.assertArrayEquals(pathByteContents, Files.readAllBytes(outFile.toPath()));\n    }\n    finally {\n      if (tmpFile.exists()) {\n        tmpFile.delete();\n      }\n      if (outFile.exists()) {\n        outFile.delete();\n      }\n      if (outTmpDir.exists()) {\n        outTmpDir.delete();\n      }\n      if (tmpDir.exists()) {\n        tmpDir.delete();\n      }\n    }\n  }\n","date":"2021-08-10 22:52:32","endLine":150,"groupId":"103425","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testZip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/86/328c9b0f2a170593567717ebc118a99dd38d2f.src","preCode":"  public void testZip() throws IOException, SegmentLoadingException\n  {\n    final File tmpDir = FileUtils.createTempDir();\n    final File tmpFile = File.createTempFile(\"zipContents\", \".txt\", tmpDir);\n\n    final Path zipPath = new Path(\"/tmp/testZip.zip\");\n\n    final File outTmpDir = FileUtils.createTempDir();\n\n    final URI uri = URI.create(uriBase.toString() + zipPath);\n\n    try (final OutputStream stream = new FileOutputStream(tmpFile)) {\n      ByteStreams.copy(new ByteArrayInputStream(pathByteContents), stream);\n    }\n    Assert.assertTrue(tmpFile.exists());\n\n    final File outFile = new File(outTmpDir, tmpFile.getName());\n    outFile.delete();\n\n    try (final OutputStream stream = miniCluster.getFileSystem().create(zipPath)) {\n      CompressionUtils.zip(tmpDir, stream);\n    }\n    try {\n      Assert.assertFalse(outFile.exists());\n      puller.getSegmentFiles(new Path(uri), outTmpDir);\n      Assert.assertTrue(outFile.exists());\n\n      Assert.assertArrayEquals(pathByteContents, Files.readAllBytes(outFile.toPath()));\n    }\n    finally {\n      if (tmpFile.exists()) {\n        tmpFile.delete();\n      }\n      if (outFile.exists()) {\n        outFile.delete();\n      }\n      if (outTmpDir.exists()) {\n        outTmpDir.delete();\n      }\n      if (tmpDir.exists()) {\n        tmpDir.delete();\n      }\n    }\n  }\n","realPath":"extensions-core/hdfs-storage/src/test/java/org/apache/druid/storage/hdfs/HdfsDataSegmentPullerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2021-08-10 22:52:32","commitOrder":4,"curCode":"  public void testDir() throws IOException, SegmentLoadingException\n  {\n\n    final Path zipPath = new Path(perTestPath, \"test.txt\");\n\n    final File outTmpDir = FileUtils.createTempDir();\n    final File outFile = new File(outTmpDir, \"test.txt\");\n    outFile.delete();\n\n    try (final OutputStream outputStream = fileSystem.create(zipPath);\n         final InputStream inputStream = new ByteArrayInputStream(pathByteContents)) {\n      ByteStreams.copy(inputStream, outputStream);\n    }\n    try {\n      Assert.assertFalse(outFile.exists());\n      puller.getSegmentFiles(fileSystem.makeQualified(perTestPath), outTmpDir);\n      Assert.assertTrue(outFile.exists());\n\n      Assert.assertArrayEquals(pathByteContents, Files.readAllBytes(outFile.toPath()));\n    }\n    finally {\n      if (outFile.exists()) {\n        outFile.delete();\n      }\n      if (outTmpDir.exists()) {\n        outTmpDir.delete();\n      }\n    }\n  }\n","date":"2021-08-10 22:52:32","endLine":212,"groupId":"103425","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testDir","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/86/328c9b0f2a170593567717ebc118a99dd38d2f.src","preCode":"  public void testDir() throws IOException, SegmentLoadingException\n  {\n\n    final Path zipPath = new Path(perTestPath, \"test.txt\");\n\n    final File outTmpDir = FileUtils.createTempDir();\n    final File outFile = new File(outTmpDir, \"test.txt\");\n    outFile.delete();\n\n    final URI uri = URI.create(uriBase.toString() + perTestPath);\n\n    try (final OutputStream outputStream = miniCluster.getFileSystem().create(zipPath);\n         final InputStream inputStream = new ByteArrayInputStream(pathByteContents)) {\n      ByteStreams.copy(inputStream, outputStream);\n    }\n    try {\n      Assert.assertFalse(outFile.exists());\n      puller.getSegmentFiles(new Path(uri), outTmpDir);\n      Assert.assertTrue(outFile.exists());\n\n      Assert.assertArrayEquals(pathByteContents, Files.readAllBytes(outFile.toPath()));\n    }\n    finally {\n      if (outFile.exists()) {\n        outFile.delete();\n      }\n      if (outTmpDir.exists()) {\n        outTmpDir.delete();\n      }\n    }\n  }\n","realPath":"extensions-core/hdfs-storage/src/test/java/org/apache/druid/storage/hdfs/HdfsDataSegmentPullerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"}],"commitId":"2004a94675df8bd6596686445d4b5364a1697ed0","commitMessage":"@@@Cleanup test dependencies in hdfs-storage extension (#11563)\n\n* Cleanup test dependencies in hdfs-storage extension\n\n* Fix working directory in LocalFileSystem in indexing-hadoop test","date":"2021-08-10 22:52:32","modifiedFileCount":"4","status":"M","submitter":"Rohan Garg"}]
