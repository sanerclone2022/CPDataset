[{"authorTime":"2019-06-05 01:59:22","codes":[{"authorDate":"2018-12-12 00:05:50","commitOrder":3,"curCode":"  public void testGroupBy()\n  {\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,\n                            new LongSumAggregatorFactory(\"idx\", \"index\"),\n                            new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n                            new DoubleSumAggregatorFactory(\"idxDouble\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\", \"alias\", \"automotive\", \"rows\", 1L, \"idx\", 135L, \"idxFloat\", 135.88510131835938f, \"idxDouble\", 135.88510131835938d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\", \"alias\", \"business\", \"rows\", 1L, \"idx\", 118L, \"idxFloat\", 118.57034, \"idxDouble\", 118.57034),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\", \"alias\", \"entertainment\", \"rows\", 1L, \"idx\", 158L, \"idxFloat\", 158.747224, \"idxDouble\", 158.747224),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\", \"alias\", \"health\", \"rows\", 1L, \"idx\", 120L, \"idxFloat\", 120.134704, \"idxDouble\", 120.134704),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\", \"alias\", \"mezzanine\", \"rows\", 3L, \"idx\", 2870L, \"idxFloat\", 2871.8866900000003f, \"idxDouble\", 2871.8866900000003d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\", \"alias\", \"news\", \"rows\", 1L, \"idx\", 121L, \"idxFloat\", 121.58358f, \"idxDouble\", 121.58358d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\", \"alias\", \"premium\", \"rows\", 3L, \"idx\", 2900L, \"idxFloat\", 2900.798647f, \"idxDouble\", 2900.798647d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\", \"alias\", \"technology\", \"rows\", 1L, \"idx\", 78L, \"idxFloat\", 78.622547f, \"idxDouble\", 78.622547d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\", \"alias\", \"travel\", \"rows\", 1L, \"idx\", 119L, \"idxFloat\", 119.922742f, \"idxDouble\", 119.922742d),\n\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\", \"alias\", \"automotive\", \"rows\", 1L, \"idx\", 147L, \"idxFloat\", 147.42593f, \"idxDouble\", 147.42593d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\", \"alias\", \"business\", \"rows\", 1L, \"idx\", 112L, \"idxFloat\", 112.987027f, \"idxDouble\", 112.987027d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\", \"alias\", \"entertainment\", \"rows\", 1L, \"idx\", 166L, \"idxFloat\", 166.016049f, \"idxDouble\", 166.016049d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\", \"alias\", \"health\", \"rows\", 1L, \"idx\", 113L, \"idxFloat\", 113.446008f, \"idxDouble\", 113.446008d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\", \"alias\", \"mezzanine\", \"rows\", 3L, \"idx\", 2447L, \"idxFloat\", 2448.830613f, \"idxDouble\", 2448.830613d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\", \"alias\", \"news\", \"rows\", 1L, \"idx\", 114L, \"idxFloat\", 114.290141f, \"idxDouble\", 114.290141d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\", \"alias\", \"premium\", \"rows\", 3L, \"idx\", 2505L, \"idxFloat\", 2506.415148f, \"idxDouble\", 2506.415148d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\", \"alias\", \"technology\", \"rows\", 1L, \"idx\", 97L, \"idxFloat\", 97.387433f, \"idxDouble\", 97.387433d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\", \"alias\", \"travel\", \"rows\", 1L, \"idx\", 126L, \"idxFloat\", 126.411364f, \"idxDouble\", 126.411364d)\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"groupBy\");\n  }\n","date":"2018-12-12 00:05:50","endLine":486,"groupId":"17656","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/64/6e2d33a4e2dcc89f87c320ca62cdd241ff9479.src","preCode":"  public void testGroupBy()\n  {\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,\n                            new LongSumAggregatorFactory(\"idx\", \"index\"),\n                            new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n                            new DoubleSumAggregatorFactory(\"idxDouble\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\", \"alias\", \"automotive\", \"rows\", 1L, \"idx\", 135L, \"idxFloat\", 135.88510131835938f, \"idxDouble\", 135.88510131835938d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\", \"alias\", \"business\", \"rows\", 1L, \"idx\", 118L, \"idxFloat\", 118.57034, \"idxDouble\", 118.57034),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\", \"alias\", \"entertainment\", \"rows\", 1L, \"idx\", 158L, \"idxFloat\", 158.747224, \"idxDouble\", 158.747224),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\", \"alias\", \"health\", \"rows\", 1L, \"idx\", 120L, \"idxFloat\", 120.134704, \"idxDouble\", 120.134704),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\", \"alias\", \"mezzanine\", \"rows\", 3L, \"idx\", 2870L, \"idxFloat\", 2871.8866900000003f, \"idxDouble\", 2871.8866900000003d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\", \"alias\", \"news\", \"rows\", 1L, \"idx\", 121L, \"idxFloat\", 121.58358f, \"idxDouble\", 121.58358d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\", \"alias\", \"premium\", \"rows\", 3L, \"idx\", 2900L, \"idxFloat\", 2900.798647f, \"idxDouble\", 2900.798647d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\", \"alias\", \"technology\", \"rows\", 1L, \"idx\", 78L, \"idxFloat\", 78.622547f, \"idxDouble\", 78.622547d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\", \"alias\", \"travel\", \"rows\", 1L, \"idx\", 119L, \"idxFloat\", 119.922742f, \"idxDouble\", 119.922742d),\n\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\", \"alias\", \"automotive\", \"rows\", 1L, \"idx\", 147L, \"idxFloat\", 147.42593f, \"idxDouble\", 147.42593d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\", \"alias\", \"business\", \"rows\", 1L, \"idx\", 112L, \"idxFloat\", 112.987027f, \"idxDouble\", 112.987027d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\", \"alias\", \"entertainment\", \"rows\", 1L, \"idx\", 166L, \"idxFloat\", 166.016049f, \"idxDouble\", 166.016049d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\", \"alias\", \"health\", \"rows\", 1L, \"idx\", 113L, \"idxFloat\", 113.446008f, \"idxDouble\", 113.446008d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\", \"alias\", \"mezzanine\", \"rows\", 3L, \"idx\", 2447L, \"idxFloat\", 2448.830613f, \"idxDouble\", 2448.830613d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\", \"alias\", \"news\", \"rows\", 1L, \"idx\", 114L, \"idxFloat\", 114.290141f, \"idxDouble\", 114.290141d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\", \"alias\", \"premium\", \"rows\", 3L, \"idx\", 2505L, \"idxFloat\", 2506.415148f, \"idxDouble\", 2506.415148d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\", \"alias\", \"technology\", \"rows\", 1L, \"idx\", 97L, \"idxFloat\", 97.387433f, \"idxDouble\", 97.387433d),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\", \"alias\", \"travel\", \"rows\", 1L, \"idx\", 126L, \"idxFloat\", 126.411364f, \"idxDouble\", 126.411364d)\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"groupBy\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":448,"status":"NB"},{"authorDate":"2019-06-05 01:59:22","commitOrder":3,"curCode":"  public void testGroupByWithSubtotalsSpecWithRenamedDimensionAndFilter()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setVirtualColumns(new ExpressionVirtualColumn(\"alias\", \"quality\", ValueType.STRING, TestExprMacroTable.INSTANCE))\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"market\", \"market\"),\n            new DefaultDimensionSpec(\"alias\", \"alias_renamed\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.rowsCount,\n                new LongSumAggregatorFactory(\"idx\", \"index\"),\n                new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n                new DoubleSumAggregatorFactory(\"idxDouble\", \"index\")\n            )\n        )\n        .setDimFilter(new SelectorDimFilter(\"alias\", \"automotive\", null))\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"alias_renamed\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        ),\n\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal\");\n  }\n","date":"2019-06-05 01:59:22","endLine":6878,"groupId":"2322","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByWithSubtotalsSpecWithRenamedDimensionAndFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/27/d0da9b9527318b7388cb9074f70b72e08d71b7.src","preCode":"  public void testGroupByWithSubtotalsSpecWithRenamedDimensionAndFilter()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setVirtualColumns(new ExpressionVirtualColumn(\"alias\", \"quality\", ValueType.STRING, TestExprMacroTable.INSTANCE))\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"market\", \"market\"),\n            new DefaultDimensionSpec(\"alias\", \"alias_renamed\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.rowsCount,\n                new LongSumAggregatorFactory(\"idx\", \"index\"),\n                new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n                new DoubleSumAggregatorFactory(\"idxDouble\", \"index\")\n            )\n        )\n        .setDimFilter(new SelectorDimFilter(\"alias\", \"automotive\", null))\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"alias_renamed\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        ),\n\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6792,"status":"B"}],"commitId":"04937807992417103fb612d9faa059281e11d582","commitMessage":"@@@discard filter when processing subtotalsSpec (#7827)\n\n","date":"2019-06-05 01:59:22","modifiedFileCount":"2","status":"M","submitter":"Himanshu"},{"authorTime":"2019-06-05 01:59:22","codes":[{"authorDate":"2019-07-13 03:54:07","commitOrder":4,"curCode":"  public void testGroupBy()\n  {\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(\n            QueryRunnerTestHelper.rowsCount,\n            new LongSumAggregatorFactory(\"idx\", \"index\"),\n            new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n            new DoubleSumAggregatorFactory(\"idxDouble\", \"index\")\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"business\",\n            \"rows\",\n            1L,\n            \"idx\",\n            118L,\n            \"idxFloat\",\n            118.57034,\n            \"idxDouble\",\n            118.57034\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"entertainment\",\n            \"rows\",\n            1L,\n            \"idx\",\n            158L,\n            \"idxFloat\",\n            158.747224,\n            \"idxDouble\",\n            158.747224\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"health\",\n            \"rows\",\n            1L,\n            \"idx\",\n            120L,\n            \"idxFloat\",\n            120.134704,\n            \"idxDouble\",\n            120.134704\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"mezzanine\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2870L,\n            \"idxFloat\",\n            2871.8866900000003f,\n            \"idxDouble\",\n            2871.8866900000003d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"news\",\n            \"rows\",\n            1L,\n            \"idx\",\n            121L,\n            \"idxFloat\",\n            121.58358f,\n            \"idxDouble\",\n            121.58358d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"premium\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2900L,\n            \"idxFloat\",\n            2900.798647f,\n            \"idxDouble\",\n            2900.798647d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"technology\",\n            \"rows\",\n            1L,\n            \"idx\",\n            78L,\n            \"idxFloat\",\n            78.622547f,\n            \"idxDouble\",\n            78.622547d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"travel\",\n            \"rows\",\n            1L,\n            \"idx\",\n            119L,\n            \"idxFloat\",\n            119.922742f,\n            \"idxDouble\",\n            119.922742d\n        ),\n\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"business\",\n            \"rows\",\n            1L,\n            \"idx\",\n            112L,\n            \"idxFloat\",\n            112.987027f,\n            \"idxDouble\",\n            112.987027d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"entertainment\",\n            \"rows\",\n            1L,\n            \"idx\",\n            166L,\n            \"idxFloat\",\n            166.016049f,\n            \"idxDouble\",\n            166.016049d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"health\",\n            \"rows\",\n            1L,\n            \"idx\",\n            113L,\n            \"idxFloat\",\n            113.446008f,\n            \"idxDouble\",\n            113.446008d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"mezzanine\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2447L,\n            \"idxFloat\",\n            2448.830613f,\n            \"idxDouble\",\n            2448.830613d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"news\",\n            \"rows\",\n            1L,\n            \"idx\",\n            114L,\n            \"idxFloat\",\n            114.290141f,\n            \"idxDouble\",\n            114.290141d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"premium\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2505L,\n            \"idxFloat\",\n            2506.415148f,\n            \"idxDouble\",\n            2506.415148d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"technology\",\n            \"rows\",\n            1L,\n            \"idx\",\n            97L,\n            \"idxFloat\",\n            97.387433f,\n            \"idxDouble\",\n            97.387433d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"travel\",\n            \"rows\",\n            1L,\n            \"idx\",\n            126L,\n            \"idxFloat\",\n            126.411364f,\n            \"idxDouble\",\n            126.411364d\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"groupBy\");\n  }\n","date":"2019-07-13 03:54:07","endLine":712,"groupId":"17656","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3e/b69c0dda419ff55b78ba723f929d5a15f00f96.src","preCode":"  public void testGroupBy()\n  {\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(\n            QueryRunnerTestHelper.rowsCount,\n            new LongSumAggregatorFactory(\"idx\", \"index\"),\n            new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n            new DoubleSumAggregatorFactory(\"idxDouble\", \"index\")\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"business\",\n            \"rows\",\n            1L,\n            \"idx\",\n            118L,\n            \"idxFloat\",\n            118.57034,\n            \"idxDouble\",\n            118.57034\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"entertainment\",\n            \"rows\",\n            1L,\n            \"idx\",\n            158L,\n            \"idxFloat\",\n            158.747224,\n            \"idxDouble\",\n            158.747224\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"health\",\n            \"rows\",\n            1L,\n            \"idx\",\n            120L,\n            \"idxFloat\",\n            120.134704,\n            \"idxDouble\",\n            120.134704\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"mezzanine\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2870L,\n            \"idxFloat\",\n            2871.8866900000003f,\n            \"idxDouble\",\n            2871.8866900000003d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"news\",\n            \"rows\",\n            1L,\n            \"idx\",\n            121L,\n            \"idxFloat\",\n            121.58358f,\n            \"idxDouble\",\n            121.58358d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"premium\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2900L,\n            \"idxFloat\",\n            2900.798647f,\n            \"idxDouble\",\n            2900.798647d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"technology\",\n            \"rows\",\n            1L,\n            \"idx\",\n            78L,\n            \"idxFloat\",\n            78.622547f,\n            \"idxDouble\",\n            78.622547d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"travel\",\n            \"rows\",\n            1L,\n            \"idx\",\n            119L,\n            \"idxFloat\",\n            119.922742f,\n            \"idxDouble\",\n            119.922742d\n        ),\n\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"business\",\n            \"rows\",\n            1L,\n            \"idx\",\n            112L,\n            \"idxFloat\",\n            112.987027f,\n            \"idxDouble\",\n            112.987027d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"entertainment\",\n            \"rows\",\n            1L,\n            \"idx\",\n            166L,\n            \"idxFloat\",\n            166.016049f,\n            \"idxDouble\",\n            166.016049d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"health\",\n            \"rows\",\n            1L,\n            \"idx\",\n            113L,\n            \"idxFloat\",\n            113.446008f,\n            \"idxDouble\",\n            113.446008d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"mezzanine\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2447L,\n            \"idxFloat\",\n            2448.830613f,\n            \"idxDouble\",\n            2448.830613d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"news\",\n            \"rows\",\n            1L,\n            \"idx\",\n            114L,\n            \"idxFloat\",\n            114.290141f,\n            \"idxDouble\",\n            114.290141d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"premium\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2505L,\n            \"idxFloat\",\n            2506.415148f,\n            \"idxDouble\",\n            2506.415148d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"technology\",\n            \"rows\",\n            1L,\n            \"idx\",\n            97L,\n            \"idxFloat\",\n            97.387433f,\n            \"idxDouble\",\n            97.387433d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"travel\",\n            \"rows\",\n            1L,\n            \"idx\",\n            126L,\n            \"idxFloat\",\n            126.411364f,\n            \"idxDouble\",\n            126.411364d\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"groupBy\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":457,"status":"M"},{"authorDate":"2019-06-05 01:59:22","commitOrder":4,"curCode":"  public void testGroupByWithSubtotalsSpecWithRenamedDimensionAndFilter()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setVirtualColumns(new ExpressionVirtualColumn(\"alias\", \"quality\", ValueType.STRING, TestExprMacroTable.INSTANCE))\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"market\", \"market\"),\n            new DefaultDimensionSpec(\"alias\", \"alias_renamed\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.rowsCount,\n                new LongSumAggregatorFactory(\"idx\", \"index\"),\n                new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n                new DoubleSumAggregatorFactory(\"idxDouble\", \"index\")\n            )\n        )\n        .setDimFilter(new SelectorDimFilter(\"alias\", \"automotive\", null))\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"alias_renamed\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        ),\n\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal\");\n  }\n","date":"2019-06-05 01:59:22","endLine":6878,"groupId":"2322","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByWithSubtotalsSpecWithRenamedDimensionAndFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/27/d0da9b9527318b7388cb9074f70b72e08d71b7.src","preCode":"  public void testGroupByWithSubtotalsSpecWithRenamedDimensionAndFilter()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setVirtualColumns(new ExpressionVirtualColumn(\"alias\", \"quality\", ValueType.STRING, TestExprMacroTable.INSTANCE))\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"market\", \"market\"),\n            new DefaultDimensionSpec(\"alias\", \"alias_renamed\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.rowsCount,\n                new LongSumAggregatorFactory(\"idx\", \"index\"),\n                new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n                new DoubleSumAggregatorFactory(\"idxDouble\", \"index\")\n            )\n        )\n        .setDimFilter(new SelectorDimFilter(\"alias\", \"automotive\", null))\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"alias_renamed\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        ),\n\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6792,"status":"N"}],"commitId":"ffa25b78321a56b210a8ad5b6c9ca61b3b737153","commitMessage":"@@@Query vectorization. (#6794)\n\n* Benchmarks: New SqlBenchmark.  add caching & vectorization to some others.\n\n- Introduce a new SqlBenchmark geared towards benchmarking a wide\n  variety of SQL queries. Rename the old SqlBenchmark to\n  SqlVsNativeBenchmark.\n- Add (optional) caching to SegmentGenerator to enable easier\n  benchmarking of larger segments.\n- Add vectorization to FilteredAggregatorBenchmark and GroupByBenchmark.\n\n* Query vectorization.\n\nThis patch includes vectorized timeseries and groupBy engines.  as well\nas some analogs of your favorite Druid classes:\n\n- VectorCursor is like Cursor. (It comes from StorageAdapter.makeVectorCursor.)\n- VectorColumnSelectorFactory is like ColumnSelectorFactory.  and it has\n  methods to create analogs of the column selectors you know and love.\n- VectorOffset and ReadableVectorOffset are like Offset and ReadableOffset.\n- VectorAggregator is like BufferAggregator.\n- VectorValueMatcher is like ValueMatcher.\n\nThere are some noticeable differences between vectorized and regular\nexecution:\n\n- Unlike regular cursors.  vector cursors do not understand time\n  granularity. They expect query engines to handle this on their own. \n  which a new VectorCursorGranularizer class helps with. This is to\n  avoid too much batch-splitting and to respect the fact that vector\n  selectors are somewhat more heavyweight than regular selectors.\n- Unlike FilteredOffset.  FilteredVectorOffset does not leverage indexes\n  for filters that might partially support them (like an OR of one\n  filter that supports indexing and another that doesn't). I'm not sure\n  that this behavior is desirable anyway (it is potentially too eager)\n  but.  at any rate.  it'd be better to harmonize it between the two\n  classes. Potentially they should both do some different thing that\n  is smarter than what either of them is doing right now.\n- When vector cursors are created by QueryableIndexCursorSequenceBuilder. \n  they use a morphing binary-then-linear search to find their start and\n  end rows.  rather than linear search.\n\nLimitations in this patch are:\n\n- Only timeseries and groupBy have vectorized engines.\n- GroupBy doesn't handle multi-value dimensions yet.\n- Vector cursors cannot handle virtual columns or descending order.\n- Only some filters have vectorized matchers: \"selector\".  \"bound\".  \"in\". \n  \"like\".  \"regex\".  \"search\".  \"and\".  \"or\".  and \"not\".\n- Only some aggregators have vectorized implementations: \"count\". \n  \"doubleSum\".  \"floatSum\".  \"longSum\".  \"hyperUnique\".  and \"filtered\".\n- Dimension specs other than \"default\" don't work yet (no extraction\n  functions or filtered dimension specs).\n\nCurrently.  the testing strategy includes adding vectorization-enabled\ntests to TimeseriesQueryRunnerTest.  GroupByQueryRunnerTest. \nGroupByTimeseriesQueryRunnerTest.  CalciteQueryTest.  and all of the\nfiltering tests that extend BaseFilterTest. In all of those classes. \nthere are some test cases that don't support vectorization. They are\nmarked by special function calls like \"cannotVectorize\" or \"skipVectorize\"\nthat tell the test harness to either expect an exception or to skip the\ntest case.\n\nTesting should be expanded in the future -- a project in and of itself.\n\nRelated to #3011.\n\n* WIP\n\n* Adjustments for unused things.\n\n* Adjust javadocs.\n\n* DimensionDictionarySelector adjustments.\n\n* Add \"clone\" to BatchIteratorAdapter.\n\n* ValueMatcher javadocs.\n\n* Fix benchmark.\n\n* Fixups post-merge.\n\n* Expect exception on testGroupByWithStringVirtualColumn for IncrementalIndex.\n\n* BloomDimFilterSqlTest: Tag two non-vectorizable tests.\n\n* Minor adjustments.\n\n* Update surefire.  bump up Xmx in Travis.\n\n* Some more adjustments.\n\n* Javadoc adjustments\n\n* AggregatorAdapters adjustments.\n\n* Additional comments.\n\n* Remove switching search.\n\n* Only missiles.\n","date":"2019-07-13 03:54:07","modifiedFileCount":"143","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-08-01 07:15:12","codes":[{"authorDate":"2019-08-01 07:15:12","commitOrder":5,"curCode":"  public void testGroupBy()\n  {\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(\n            QueryRunnerTestHelper.rowsCount,\n            new LongSumAggregatorFactory(\"idx\", \"index\"),\n            new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n            new DoubleSumAggregatorFactory(\"idxDouble\", \"index\")\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"business\",\n            \"rows\",\n            1L,\n            \"idx\",\n            118L,\n            \"idxFloat\",\n            118.57034,\n            \"idxDouble\",\n            118.57034\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"entertainment\",\n            \"rows\",\n            1L,\n            \"idx\",\n            158L,\n            \"idxFloat\",\n            158.747224,\n            \"idxDouble\",\n            158.747224\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"health\",\n            \"rows\",\n            1L,\n            \"idx\",\n            120L,\n            \"idxFloat\",\n            120.134704,\n            \"idxDouble\",\n            120.134704\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"mezzanine\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2870L,\n            \"idxFloat\",\n            2871.8866900000003f,\n            \"idxDouble\",\n            2871.8866900000003d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"news\",\n            \"rows\",\n            1L,\n            \"idx\",\n            121L,\n            \"idxFloat\",\n            121.58358f,\n            \"idxDouble\",\n            121.58358d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"premium\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2900L,\n            \"idxFloat\",\n            2900.798647f,\n            \"idxDouble\",\n            2900.798647d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"technology\",\n            \"rows\",\n            1L,\n            \"idx\",\n            78L,\n            \"idxFloat\",\n            78.622547f,\n            \"idxDouble\",\n            78.622547d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"travel\",\n            \"rows\",\n            1L,\n            \"idx\",\n            119L,\n            \"idxFloat\",\n            119.922742f,\n            \"idxDouble\",\n            119.922742d\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"business\",\n            \"rows\",\n            1L,\n            \"idx\",\n            112L,\n            \"idxFloat\",\n            112.987027f,\n            \"idxDouble\",\n            112.987027d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"entertainment\",\n            \"rows\",\n            1L,\n            \"idx\",\n            166L,\n            \"idxFloat\",\n            166.016049f,\n            \"idxDouble\",\n            166.016049d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"health\",\n            \"rows\",\n            1L,\n            \"idx\",\n            113L,\n            \"idxFloat\",\n            113.446008f,\n            \"idxDouble\",\n            113.446008d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"mezzanine\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2447L,\n            \"idxFloat\",\n            2448.830613f,\n            \"idxDouble\",\n            2448.830613d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"news\",\n            \"rows\",\n            1L,\n            \"idx\",\n            114L,\n            \"idxFloat\",\n            114.290141f,\n            \"idxDouble\",\n            114.290141d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"premium\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2505L,\n            \"idxFloat\",\n            2506.415148f,\n            \"idxDouble\",\n            2506.415148d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"technology\",\n            \"rows\",\n            1L,\n            \"idx\",\n            97L,\n            \"idxFloat\",\n            97.387433f,\n            \"idxDouble\",\n            97.387433d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"travel\",\n            \"rows\",\n            1L,\n            \"idx\",\n            126L,\n            \"idxFloat\",\n            126.411364f,\n            \"idxDouble\",\n            126.411364d\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"groupBy\");\n  }\n","date":"2019-08-01 07:15:12","endLine":731,"groupId":"16741","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d1/574885a60d20d8c6aaa2ff4f2d57758cf04e59.src","preCode":"  public void testGroupBy()\n  {\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(\n            QueryRunnerTestHelper.rowsCount,\n            new LongSumAggregatorFactory(\"idx\", \"index\"),\n            new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n            new DoubleSumAggregatorFactory(\"idxDouble\", \"index\")\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"business\",\n            \"rows\",\n            1L,\n            \"idx\",\n            118L,\n            \"idxFloat\",\n            118.57034,\n            \"idxDouble\",\n            118.57034\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"entertainment\",\n            \"rows\",\n            1L,\n            \"idx\",\n            158L,\n            \"idxFloat\",\n            158.747224,\n            \"idxDouble\",\n            158.747224\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"health\",\n            \"rows\",\n            1L,\n            \"idx\",\n            120L,\n            \"idxFloat\",\n            120.134704,\n            \"idxDouble\",\n            120.134704\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"mezzanine\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2870L,\n            \"idxFloat\",\n            2871.8866900000003f,\n            \"idxDouble\",\n            2871.8866900000003d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"news\",\n            \"rows\",\n            1L,\n            \"idx\",\n            121L,\n            \"idxFloat\",\n            121.58358f,\n            \"idxDouble\",\n            121.58358d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"premium\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2900L,\n            \"idxFloat\",\n            2900.798647f,\n            \"idxDouble\",\n            2900.798647d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"technology\",\n            \"rows\",\n            1L,\n            \"idx\",\n            78L,\n            \"idxFloat\",\n            78.622547f,\n            \"idxDouble\",\n            78.622547d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias\",\n            \"travel\",\n            \"rows\",\n            1L,\n            \"idx\",\n            119L,\n            \"idxFloat\",\n            119.922742f,\n            \"idxDouble\",\n            119.922742d\n        ),\n\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"business\",\n            \"rows\",\n            1L,\n            \"idx\",\n            112L,\n            \"idxFloat\",\n            112.987027f,\n            \"idxDouble\",\n            112.987027d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"entertainment\",\n            \"rows\",\n            1L,\n            \"idx\",\n            166L,\n            \"idxFloat\",\n            166.016049f,\n            \"idxDouble\",\n            166.016049d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"health\",\n            \"rows\",\n            1L,\n            \"idx\",\n            113L,\n            \"idxFloat\",\n            113.446008f,\n            \"idxDouble\",\n            113.446008d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"mezzanine\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2447L,\n            \"idxFloat\",\n            2448.830613f,\n            \"idxDouble\",\n            2448.830613d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"news\",\n            \"rows\",\n            1L,\n            \"idx\",\n            114L,\n            \"idxFloat\",\n            114.290141f,\n            \"idxDouble\",\n            114.290141d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"premium\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2505L,\n            \"idxFloat\",\n            2506.415148f,\n            \"idxDouble\",\n            2506.415148d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"technology\",\n            \"rows\",\n            1L,\n            \"idx\",\n            97L,\n            \"idxFloat\",\n            97.387433f,\n            \"idxDouble\",\n            97.387433d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias\",\n            \"travel\",\n            \"rows\",\n            1L,\n            \"idx\",\n            126L,\n            \"idxFloat\",\n            126.411364f,\n            \"idxDouble\",\n            126.411364d\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"groupBy\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":458,"status":"M"},{"authorDate":"2019-08-01 07:15:12","commitOrder":5,"curCode":"  public void testGroupByWithSubtotalsSpecWithRenamedDimensionAndFilter()\n  {\n    \r\n    cannotVectorize();\n\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setVirtualColumns(new ExpressionVirtualColumn(\n            \"alias\",\n            \"quality\",\n            ValueType.STRING,\n            TestExprMacroTable.INSTANCE\n        ))\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"market\", \"market\"),\n            new DefaultDimensionSpec(\"alias\", \"alias_renamed\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.rowsCount,\n                new LongSumAggregatorFactory(\"idx\", \"index\"),\n                new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n                new DoubleSumAggregatorFactory(\"idxDouble\", \"index\")\n            )\n        )\n        .setDimFilter(new SelectorDimFilter(\"alias\", \"automotive\", null))\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"alias_renamed\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal\");\n  }\n","date":"2019-08-01 07:15:12","endLine":7009,"groupId":"2322","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByWithSubtotalsSpecWithRenamedDimensionAndFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d1/574885a60d20d8c6aaa2ff4f2d57758cf04e59.src","preCode":"  public void testGroupByWithSubtotalsSpecWithRenamedDimensionAndFilter()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setVirtualColumns(new ExpressionVirtualColumn(\"alias\", \"quality\", ValueType.STRING, TestExprMacroTable.INSTANCE))\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"market\", \"market\"),\n            new DefaultDimensionSpec(\"alias\", \"alias_renamed\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.rowsCount,\n                new LongSumAggregatorFactory(\"idx\", \"index\"),\n                new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n                new DoubleSumAggregatorFactory(\"idxDouble\", \"index\")\n            )\n        )\n        .setDimFilter(new SelectorDimFilter(\"alias\", \"automotive\", null))\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"alias_renamed\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        ),\n\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6912,"status":"M"}],"commitId":"77297f4e6f2e9d617c96cd46852bb5a772961e85","commitMessage":"@@@GroupBy array-based result rows. (#8196)\n\n* GroupBy array-based result rows.\n\nFixes #8118; see that proposal for details.\n\nOther than the GroupBy changes.  the main other \"interesting\" classes are:\n\n- ResultRow: The array-based result type.\n- BaseQuery: T is no longer required to be Comparable.\n- QueryToolChest: Adds \"decorateObjectMapper\" to enable query-aware serialization\n  and deserialization of result rows (necessary due to their positional nature).\n- QueryResource: Uses the new decoration functionality.\n- DirectDruidClient: Also uses the new decoration functionality.\n- QueryMaker (in Druid SQL): Modifications to read ResultRows.\n\nThese classes weren't changed.  but got some new javadocs:\n\n- BySegmentQueryRunner\n- FinalizeResultsQueryRunner\n- Query\n\n* Adjustments for TC stuff.\n","date":"2019-08-01 07:15:12","modifiedFileCount":"111","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-08-06 22:06:28","codes":[{"authorDate":"2019-08-01 07:15:12","commitOrder":6,"curCode":"  public void testGroupBy()\n  {\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(\n            QueryRunnerTestHelper.rowsCount,\n            new LongSumAggregatorFactory(\"idx\", \"index\"),\n            new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n            new DoubleSumAggregatorFactory(\"idxDouble\", \"index\")\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"business\",\n            \"rows\",\n            1L,\n            \"idx\",\n            118L,\n            \"idxFloat\",\n            118.57034,\n            \"idxDouble\",\n            118.57034\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"entertainment\",\n            \"rows\",\n            1L,\n            \"idx\",\n            158L,\n            \"idxFloat\",\n            158.747224,\n            \"idxDouble\",\n            158.747224\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"health\",\n            \"rows\",\n            1L,\n            \"idx\",\n            120L,\n            \"idxFloat\",\n            120.134704,\n            \"idxDouble\",\n            120.134704\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"mezzanine\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2870L,\n            \"idxFloat\",\n            2871.8866900000003f,\n            \"idxDouble\",\n            2871.8866900000003d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"news\",\n            \"rows\",\n            1L,\n            \"idx\",\n            121L,\n            \"idxFloat\",\n            121.58358f,\n            \"idxDouble\",\n            121.58358d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"premium\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2900L,\n            \"idxFloat\",\n            2900.798647f,\n            \"idxDouble\",\n            2900.798647d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"technology\",\n            \"rows\",\n            1L,\n            \"idx\",\n            78L,\n            \"idxFloat\",\n            78.622547f,\n            \"idxDouble\",\n            78.622547d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"travel\",\n            \"rows\",\n            1L,\n            \"idx\",\n            119L,\n            \"idxFloat\",\n            119.922742f,\n            \"idxDouble\",\n            119.922742d\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"business\",\n            \"rows\",\n            1L,\n            \"idx\",\n            112L,\n            \"idxFloat\",\n            112.987027f,\n            \"idxDouble\",\n            112.987027d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"entertainment\",\n            \"rows\",\n            1L,\n            \"idx\",\n            166L,\n            \"idxFloat\",\n            166.016049f,\n            \"idxDouble\",\n            166.016049d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"health\",\n            \"rows\",\n            1L,\n            \"idx\",\n            113L,\n            \"idxFloat\",\n            113.446008f,\n            \"idxDouble\",\n            113.446008d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"mezzanine\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2447L,\n            \"idxFloat\",\n            2448.830613f,\n            \"idxDouble\",\n            2448.830613d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"news\",\n            \"rows\",\n            1L,\n            \"idx\",\n            114L,\n            \"idxFloat\",\n            114.290141f,\n            \"idxDouble\",\n            114.290141d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"premium\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2505L,\n            \"idxFloat\",\n            2506.415148f,\n            \"idxDouble\",\n            2506.415148d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"technology\",\n            \"rows\",\n            1L,\n            \"idx\",\n            97L,\n            \"idxFloat\",\n            97.387433f,\n            \"idxDouble\",\n            97.387433d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"travel\",\n            \"rows\",\n            1L,\n            \"idx\",\n            126L,\n            \"idxFloat\",\n            126.411364f,\n            \"idxDouble\",\n            126.411364d\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"groupBy\");\n  }\n","date":"2019-08-01 07:15:12","endLine":731,"groupId":"16741","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d1/574885a60d20d8c6aaa2ff4f2d57758cf04e59.src","preCode":"  public void testGroupBy()\n  {\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(\n            QueryRunnerTestHelper.rowsCount,\n            new LongSumAggregatorFactory(\"idx\", \"index\"),\n            new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n            new DoubleSumAggregatorFactory(\"idxDouble\", \"index\")\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"business\",\n            \"rows\",\n            1L,\n            \"idx\",\n            118L,\n            \"idxFloat\",\n            118.57034,\n            \"idxDouble\",\n            118.57034\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"entertainment\",\n            \"rows\",\n            1L,\n            \"idx\",\n            158L,\n            \"idxFloat\",\n            158.747224,\n            \"idxDouble\",\n            158.747224\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"health\",\n            \"rows\",\n            1L,\n            \"idx\",\n            120L,\n            \"idxFloat\",\n            120.134704,\n            \"idxDouble\",\n            120.134704\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"mezzanine\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2870L,\n            \"idxFloat\",\n            2871.8866900000003f,\n            \"idxDouble\",\n            2871.8866900000003d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"news\",\n            \"rows\",\n            1L,\n            \"idx\",\n            121L,\n            \"idxFloat\",\n            121.58358f,\n            \"idxDouble\",\n            121.58358d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"premium\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2900L,\n            \"idxFloat\",\n            2900.798647f,\n            \"idxDouble\",\n            2900.798647d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"technology\",\n            \"rows\",\n            1L,\n            \"idx\",\n            78L,\n            \"idxFloat\",\n            78.622547f,\n            \"idxDouble\",\n            78.622547d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"travel\",\n            \"rows\",\n            1L,\n            \"idx\",\n            119L,\n            \"idxFloat\",\n            119.922742f,\n            \"idxDouble\",\n            119.922742d\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"business\",\n            \"rows\",\n            1L,\n            \"idx\",\n            112L,\n            \"idxFloat\",\n            112.987027f,\n            \"idxDouble\",\n            112.987027d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"entertainment\",\n            \"rows\",\n            1L,\n            \"idx\",\n            166L,\n            \"idxFloat\",\n            166.016049f,\n            \"idxDouble\",\n            166.016049d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"health\",\n            \"rows\",\n            1L,\n            \"idx\",\n            113L,\n            \"idxFloat\",\n            113.446008f,\n            \"idxDouble\",\n            113.446008d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"mezzanine\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2447L,\n            \"idxFloat\",\n            2448.830613f,\n            \"idxDouble\",\n            2448.830613d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"news\",\n            \"rows\",\n            1L,\n            \"idx\",\n            114L,\n            \"idxFloat\",\n            114.290141f,\n            \"idxDouble\",\n            114.290141d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"premium\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2505L,\n            \"idxFloat\",\n            2506.415148f,\n            \"idxDouble\",\n            2506.415148d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"technology\",\n            \"rows\",\n            1L,\n            \"idx\",\n            97L,\n            \"idxFloat\",\n            97.387433f,\n            \"idxDouble\",\n            97.387433d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"travel\",\n            \"rows\",\n            1L,\n            \"idx\",\n            126L,\n            \"idxFloat\",\n            126.411364f,\n            \"idxDouble\",\n            126.411364d\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"groupBy\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":458,"status":"N"},{"authorDate":"2019-08-06 22:06:28","commitOrder":6,"curCode":"  public void testGroupByWithSubtotalsSpecWithRenamedDimensionAndFilter()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setVirtualColumns(new ExpressionVirtualColumn(\"alias\", \"quality\", ValueType.STRING, TestExprMacroTable.INSTANCE))\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"market\", \"market\"),\n            new DefaultDimensionSpec(\"alias\", \"alias_renamed\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.rowsCount,\n                new LongSumAggregatorFactory(\"idx\", \"index\"),\n                new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n                new DoubleSumAggregatorFactory(\"idxDouble\", \"index\")\n            )\n        )\n        .setDimFilter(new SelectorDimFilter(\"alias\", \"automotive\", null))\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"alias_renamed\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal\");\n  }\n","date":"2019-08-06 22:06:28","endLine":6945,"groupId":"2322","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByWithSubtotalsSpecWithRenamedDimensionAndFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b2/33fd8b0399ac13eb8f078c0fb29c722c493d75.src","preCode":"  public void testGroupByWithSubtotalsSpecWithRenamedDimensionAndFilter()\n  {\n    \r\n    cannotVectorize();\n\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setVirtualColumns(new ExpressionVirtualColumn(\n            \"alias\",\n            \"quality\",\n            ValueType.STRING,\n            TestExprMacroTable.INSTANCE\n        ))\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"market\", \"market\"),\n            new DefaultDimensionSpec(\"alias\", \"alias_renamed\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.rowsCount,\n                new LongSumAggregatorFactory(\"idx\", \"index\"),\n                new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n                new DoubleSumAggregatorFactory(\"idxDouble\", \"index\")\n            )\n        )\n        .setDimFilter(new SelectorDimFilter(\"alias\", \"automotive\", null))\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"alias_renamed\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6855,"status":"M"}],"commitId":"4507a4f8f18b265bab7be10270e0a9ee0c369483","commitMessage":"@@@fix merging of groupBy subtotal spec results (#8109)\n\n* fix merging of groupBy subtotal spec results\n\n* add post agg to subtotals spec ut\n\n* add comment\n\n* remove unnecessary agg transformation\n\n* fix build\n\n* fix test\n\n* ignore unknown columns in ordering spec\n\n* change variable names based on comment for easy read\n\n* formatting\n\n* don't ignore unknown columns in DefaultLimitSpec to not change existing behavior\n\n* handle limit spec columns correctly\n\n* uncomment inadvertantly commented lines\n\n* GroupByStrategyV2 changes\n\n* test changes wip\n\n* more fixes to handle merge buffer closing and limit spec\n\n* uncomment line commented accidentally\n","date":"2019-08-06 22:06:28","modifiedFileCount":"7","status":"M","submitter":"Himanshu"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":7,"curCode":"  public void testGroupBy()\n  {\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(\n            QueryRunnerTestHelper.ROWS_COUNT,\n            new LongSumAggregatorFactory(\"idx\", \"index\"),\n            new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n            new DoubleSumAggregatorFactory(\"idxDouble\", \"index\")\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"business\",\n            \"rows\",\n            1L,\n            \"idx\",\n            118L,\n            \"idxFloat\",\n            118.57034,\n            \"idxDouble\",\n            118.57034\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"entertainment\",\n            \"rows\",\n            1L,\n            \"idx\",\n            158L,\n            \"idxFloat\",\n            158.747224,\n            \"idxDouble\",\n            158.747224\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"health\",\n            \"rows\",\n            1L,\n            \"idx\",\n            120L,\n            \"idxFloat\",\n            120.134704,\n            \"idxDouble\",\n            120.134704\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"mezzanine\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2870L,\n            \"idxFloat\",\n            2871.8866900000003f,\n            \"idxDouble\",\n            2871.8866900000003d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"news\",\n            \"rows\",\n            1L,\n            \"idx\",\n            121L,\n            \"idxFloat\",\n            121.58358f,\n            \"idxDouble\",\n            121.58358d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"premium\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2900L,\n            \"idxFloat\",\n            2900.798647f,\n            \"idxDouble\",\n            2900.798647d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"technology\",\n            \"rows\",\n            1L,\n            \"idx\",\n            78L,\n            \"idxFloat\",\n            78.622547f,\n            \"idxDouble\",\n            78.622547d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"travel\",\n            \"rows\",\n            1L,\n            \"idx\",\n            119L,\n            \"idxFloat\",\n            119.922742f,\n            \"idxDouble\",\n            119.922742d\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"business\",\n            \"rows\",\n            1L,\n            \"idx\",\n            112L,\n            \"idxFloat\",\n            112.987027f,\n            \"idxDouble\",\n            112.987027d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"entertainment\",\n            \"rows\",\n            1L,\n            \"idx\",\n            166L,\n            \"idxFloat\",\n            166.016049f,\n            \"idxDouble\",\n            166.016049d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"health\",\n            \"rows\",\n            1L,\n            \"idx\",\n            113L,\n            \"idxFloat\",\n            113.446008f,\n            \"idxDouble\",\n            113.446008d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"mezzanine\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2447L,\n            \"idxFloat\",\n            2448.830613f,\n            \"idxDouble\",\n            2448.830613d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"news\",\n            \"rows\",\n            1L,\n            \"idx\",\n            114L,\n            \"idxFloat\",\n            114.290141f,\n            \"idxDouble\",\n            114.290141d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"premium\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2505L,\n            \"idxFloat\",\n            2506.415148f,\n            \"idxDouble\",\n            2506.415148d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"technology\",\n            \"rows\",\n            1L,\n            \"idx\",\n            97L,\n            \"idxFloat\",\n            97.387433f,\n            \"idxDouble\",\n            97.387433d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"travel\",\n            \"rows\",\n            1L,\n            \"idx\",\n            126L,\n            \"idxFloat\",\n            126.411364f,\n            \"idxDouble\",\n            126.411364d\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"groupBy\");\n  }\n","date":"2019-08-23 18:13:54","endLine":730,"groupId":"106430","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/62/70f6bf822e9df520831f224e31e00bb9d44650.src","preCode":"  public void testGroupBy()\n  {\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(\n            QueryRunnerTestHelper.rowsCount,\n            new LongSumAggregatorFactory(\"idx\", \"index\"),\n            new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n            new DoubleSumAggregatorFactory(\"idxDouble\", \"index\")\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"business\",\n            \"rows\",\n            1L,\n            \"idx\",\n            118L,\n            \"idxFloat\",\n            118.57034,\n            \"idxDouble\",\n            118.57034\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"entertainment\",\n            \"rows\",\n            1L,\n            \"idx\",\n            158L,\n            \"idxFloat\",\n            158.747224,\n            \"idxDouble\",\n            158.747224\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"health\",\n            \"rows\",\n            1L,\n            \"idx\",\n            120L,\n            \"idxFloat\",\n            120.134704,\n            \"idxDouble\",\n            120.134704\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"mezzanine\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2870L,\n            \"idxFloat\",\n            2871.8866900000003f,\n            \"idxDouble\",\n            2871.8866900000003d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"news\",\n            \"rows\",\n            1L,\n            \"idx\",\n            121L,\n            \"idxFloat\",\n            121.58358f,\n            \"idxDouble\",\n            121.58358d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"premium\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2900L,\n            \"idxFloat\",\n            2900.798647f,\n            \"idxDouble\",\n            2900.798647d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"technology\",\n            \"rows\",\n            1L,\n            \"idx\",\n            78L,\n            \"idxFloat\",\n            78.622547f,\n            \"idxDouble\",\n            78.622547d\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias\",\n            \"travel\",\n            \"rows\",\n            1L,\n            \"idx\",\n            119L,\n            \"idxFloat\",\n            119.922742f,\n            \"idxDouble\",\n            119.922742d\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"business\",\n            \"rows\",\n            1L,\n            \"idx\",\n            112L,\n            \"idxFloat\",\n            112.987027f,\n            \"idxDouble\",\n            112.987027d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"entertainment\",\n            \"rows\",\n            1L,\n            \"idx\",\n            166L,\n            \"idxFloat\",\n            166.016049f,\n            \"idxDouble\",\n            166.016049d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"health\",\n            \"rows\",\n            1L,\n            \"idx\",\n            113L,\n            \"idxFloat\",\n            113.446008f,\n            \"idxDouble\",\n            113.446008d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"mezzanine\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2447L,\n            \"idxFloat\",\n            2448.830613f,\n            \"idxDouble\",\n            2448.830613d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"news\",\n            \"rows\",\n            1L,\n            \"idx\",\n            114L,\n            \"idxFloat\",\n            114.290141f,\n            \"idxDouble\",\n            114.290141d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"premium\",\n            \"rows\",\n            3L,\n            \"idx\",\n            2505L,\n            \"idxFloat\",\n            2506.415148f,\n            \"idxDouble\",\n            2506.415148d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"technology\",\n            \"rows\",\n            1L,\n            \"idx\",\n            97L,\n            \"idxFloat\",\n            97.387433f,\n            \"idxDouble\",\n            97.387433d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias\",\n            \"travel\",\n            \"rows\",\n            1L,\n            \"idx\",\n            126L,\n            \"idxFloat\",\n            126.411364f,\n            \"idxDouble\",\n            126.411364d\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"groupBy\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":457,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":7,"curCode":"  public void testGroupByWithSubtotalsSpecWithRenamedDimensionAndFilter()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setVirtualColumns(new ExpressionVirtualColumn(\"alias\", \"quality\", ValueType.STRING, TestExprMacroTable.INSTANCE))\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"market\", \"market\"),\n            new DefaultDimensionSpec(\"alias\", \"alias_renamed\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.ROWS_COUNT,\n                new LongSumAggregatorFactory(\"idx\", \"index\"),\n                new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n                new DoubleSumAggregatorFactory(\"idxDouble\", \"index\")\n            )\n        )\n        .setDimFilter(new SelectorDimFilter(\"alias\", \"automotive\", null))\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"alias_renamed\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal\");\n  }\n","date":"2019-08-23 18:13:54","endLine":6945,"groupId":"106430","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByWithSubtotalsSpecWithRenamedDimensionAndFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/62/70f6bf822e9df520831f224e31e00bb9d44650.src","preCode":"  public void testGroupByWithSubtotalsSpecWithRenamedDimensionAndFilter()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setVirtualColumns(new ExpressionVirtualColumn(\"alias\", \"quality\", ValueType.STRING, TestExprMacroTable.INSTANCE))\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"market\", \"market\"),\n            new DefaultDimensionSpec(\"alias\", \"alias_renamed\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.rowsCount,\n                new LongSumAggregatorFactory(\"idx\", \"index\"),\n                new FloatSumAggregatorFactory(\"idxFloat\", \"indexFloat\"),\n                new DoubleSumAggregatorFactory(\"idxDouble\", \"index\")\n            )\n        )\n        .setDimFilter(new SelectorDimFilter(\"alias\", \"automotive\", null))\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"alias_renamed\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02\",\n            \"alias_renamed\",\n            \"automotive\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            135L,\n            \"idxFloat\",\n            135.88510131835938f,\n            \"idxDouble\",\n            135.88510131835938d\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            1L,\n            \"idx\",\n            147L,\n            \"idxFloat\",\n            147.42593f,\n            \"idxDouble\",\n            147.42593d\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6855,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
