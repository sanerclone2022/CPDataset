[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testMergeAggregatorsAllNull()\n  {\n    final SegmentAnalysis analysis1 = new SegmentAnalysis(\n        \"id\",\n        null,\n        Maps.newHashMap(),\n        0,\n        0,\n        null,\n        null,\n        null,\n        null\n    );\n    final SegmentAnalysis analysis2 = new SegmentAnalysis(\n        \"id\",\n        null,\n        Maps.newHashMap(),\n        0,\n        0,\n        null,\n        null,\n        null,\n        null\n    );\n\n    Assert.assertNull(mergeStrict(analysis1, analysis2).getAggregators());\n    Assert.assertNull(mergeLenient(analysis1, analysis2).getAggregators());\n  }\n","date":"2018-08-31 00:56:26","endLine":227,"groupId":"117","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeAggregatorsAllNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3d/9d8dd8379d4bb1c36a70b270b3c228af2ccb8b.src","preCode":"  public void testMergeAggregatorsAllNull()\n  {\n    final SegmentAnalysis analysis1 = new SegmentAnalysis(\n        \"id\",\n        null,\n        Maps.newHashMap(),\n        0,\n        0,\n        null,\n        null,\n        null,\n        null\n    );\n    final SegmentAnalysis analysis2 = new SegmentAnalysis(\n        \"id\",\n        null,\n        Maps.newHashMap(),\n        0,\n        0,\n        null,\n        null,\n        null,\n        null\n    );\n\n    Assert.assertNull(mergeStrict(analysis1, analysis2).getAggregators());\n    Assert.assertNull(mergeLenient(analysis1, analysis2).getAggregators());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/metadata/SegmentMetadataQueryQueryToolChestTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testMergeAggregatorsConflict()\n  {\n    final SegmentAnalysis analysis1 = new SegmentAnalysis(\n        \"id\",\n        null,\n        Maps.newHashMap(),\n        0,\n        0,\n        ImmutableMap.of(\n            \"foo\", new LongSumAggregatorFactory(\"foo\", \"foo\"),\n            \"bar\", new DoubleSumAggregatorFactory(\"bar\", \"bar\")\n        ),\n        null,\n        null,\n        null\n    );\n    final SegmentAnalysis analysis2 = new SegmentAnalysis(\n        \"id\",\n        null,\n        Maps.newHashMap(),\n        0,\n        0,\n        ImmutableMap.of(\n            \"foo\", new LongSumAggregatorFactory(\"foo\", \"foo\"),\n            \"bar\", new DoubleMaxAggregatorFactory(\"bar\", \"bar\"),\n            \"baz\", new LongMaxAggregatorFactory(\"baz\", \"baz\")\n        ),\n        null,\n        null,\n        null\n    );\n\n    final Map<String, AggregatorFactory> expectedLenient = Maps.newHashMap();\n    expectedLenient.put(\"foo\", new LongSumAggregatorFactory(\"foo\", \"foo\"));\n    expectedLenient.put(\"bar\", null);\n    expectedLenient.put(\"baz\", new LongMaxAggregatorFactory(\"baz\", \"baz\"));\n    Assert.assertNull(mergeStrict(analysis1, analysis2).getAggregators());\n    Assert.assertEquals(expectedLenient, mergeLenient(analysis1, analysis2).getAggregators());\n\n    \r\n    Assert.assertEquals(\n        expectedLenient,\n        mergeLenient(\n            mergeLenient(analysis1, analysis2),\n            mergeLenient(analysis1, analysis2)\n        ).getAggregators()\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":277,"groupId":"14058","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeAggregatorsConflict","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3d/9d8dd8379d4bb1c36a70b270b3c228af2ccb8b.src","preCode":"  public void testMergeAggregatorsConflict()\n  {\n    final SegmentAnalysis analysis1 = new SegmentAnalysis(\n        \"id\",\n        null,\n        Maps.newHashMap(),\n        0,\n        0,\n        ImmutableMap.of(\n            \"foo\", new LongSumAggregatorFactory(\"foo\", \"foo\"),\n            \"bar\", new DoubleSumAggregatorFactory(\"bar\", \"bar\")\n        ),\n        null,\n        null,\n        null\n    );\n    final SegmentAnalysis analysis2 = new SegmentAnalysis(\n        \"id\",\n        null,\n        Maps.newHashMap(),\n        0,\n        0,\n        ImmutableMap.of(\n            \"foo\", new LongSumAggregatorFactory(\"foo\", \"foo\"),\n            \"bar\", new DoubleMaxAggregatorFactory(\"bar\", \"bar\"),\n            \"baz\", new LongMaxAggregatorFactory(\"baz\", \"baz\")\n        ),\n        null,\n        null,\n        null\n    );\n\n    final Map<String, AggregatorFactory> expectedLenient = Maps.newHashMap();\n    expectedLenient.put(\"foo\", new LongSumAggregatorFactory(\"foo\", \"foo\"));\n    expectedLenient.put(\"bar\", null);\n    expectedLenient.put(\"baz\", new LongMaxAggregatorFactory(\"baz\", \"baz\"));\n    Assert.assertNull(mergeStrict(analysis1, analysis2).getAggregators());\n    Assert.assertEquals(expectedLenient, mergeLenient(analysis1, analysis2).getAggregators());\n\n    \r\n    Assert.assertEquals(\n        expectedLenient,\n        mergeLenient(\n            mergeLenient(analysis1, analysis2),\n            mergeLenient(analysis1, analysis2)\n        ).getAggregators()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/metadata/SegmentMetadataQueryQueryToolChestTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-29 20:02:43","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testMergeAggregatorsAllNull()\n  {\n    final SegmentAnalysis analysis1 = new SegmentAnalysis(\n        \"id\",\n        null,\n        new HashMap<>(),\n        0,\n        0,\n        null,\n        null,\n        null,\n        null\n    );\n    final SegmentAnalysis analysis2 = new SegmentAnalysis(\n        \"id\",\n        null,\n        new HashMap<>(),\n        0,\n        0,\n        null,\n        null,\n        null,\n        null\n    );\n\n    Assert.assertNull(mergeStrict(analysis1, analysis2).getAggregators());\n    Assert.assertNull(mergeLenient(analysis1, analysis2).getAggregators());\n  }\n","date":"2018-10-29 20:02:43","endLine":227,"groupId":"106337","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeAggregatorsAllNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c8/41af498d02a70ed36ea60e8ce1f841735ae5c8.src","preCode":"  public void testMergeAggregatorsAllNull()\n  {\n    final SegmentAnalysis analysis1 = new SegmentAnalysis(\n        \"id\",\n        null,\n        Maps.newHashMap(),\n        0,\n        0,\n        null,\n        null,\n        null,\n        null\n    );\n    final SegmentAnalysis analysis2 = new SegmentAnalysis(\n        \"id\",\n        null,\n        Maps.newHashMap(),\n        0,\n        0,\n        null,\n        null,\n        null,\n        null\n    );\n\n    Assert.assertNull(mergeStrict(analysis1, analysis2).getAggregators());\n    Assert.assertNull(mergeLenient(analysis1, analysis2).getAggregators());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/metadata/SegmentMetadataQueryQueryToolChestTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"},{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testMergeAggregatorsConflict()\n  {\n    final SegmentAnalysis analysis1 = new SegmentAnalysis(\n        \"id\",\n        null,\n        new HashMap<>(),\n        0,\n        0,\n        ImmutableMap.of(\n            \"foo\", new LongSumAggregatorFactory(\"foo\", \"foo\"),\n            \"bar\", new DoubleSumAggregatorFactory(\"bar\", \"bar\")\n        ),\n        null,\n        null,\n        null\n    );\n    final SegmentAnalysis analysis2 = new SegmentAnalysis(\n        \"id\",\n        null,\n        new HashMap<>(),\n        0,\n        0,\n        ImmutableMap.of(\n            \"foo\", new LongSumAggregatorFactory(\"foo\", \"foo\"),\n            \"bar\", new DoubleMaxAggregatorFactory(\"bar\", \"bar\"),\n            \"baz\", new LongMaxAggregatorFactory(\"baz\", \"baz\")\n        ),\n        null,\n        null,\n        null\n    );\n\n    final Map<String, AggregatorFactory> expectedLenient = new HashMap<>();\n    expectedLenient.put(\"foo\", new LongSumAggregatorFactory(\"foo\", \"foo\"));\n    expectedLenient.put(\"bar\", null);\n    expectedLenient.put(\"baz\", new LongMaxAggregatorFactory(\"baz\", \"baz\"));\n    Assert.assertNull(mergeStrict(analysis1, analysis2).getAggregators());\n    Assert.assertEquals(expectedLenient, mergeLenient(analysis1, analysis2).getAggregators());\n\n    \r\n    Assert.assertEquals(\n        expectedLenient,\n        mergeLenient(\n            mergeLenient(analysis1, analysis2),\n            mergeLenient(analysis1, analysis2)\n        ).getAggregators()\n    );\n  }\n","date":"2018-10-29 20:02:43","endLine":277,"groupId":"106337","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeAggregatorsConflict","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c8/41af498d02a70ed36ea60e8ce1f841735ae5c8.src","preCode":"  public void testMergeAggregatorsConflict()\n  {\n    final SegmentAnalysis analysis1 = new SegmentAnalysis(\n        \"id\",\n        null,\n        Maps.newHashMap(),\n        0,\n        0,\n        ImmutableMap.of(\n            \"foo\", new LongSumAggregatorFactory(\"foo\", \"foo\"),\n            \"bar\", new DoubleSumAggregatorFactory(\"bar\", \"bar\")\n        ),\n        null,\n        null,\n        null\n    );\n    final SegmentAnalysis analysis2 = new SegmentAnalysis(\n        \"id\",\n        null,\n        Maps.newHashMap(),\n        0,\n        0,\n        ImmutableMap.of(\n            \"foo\", new LongSumAggregatorFactory(\"foo\", \"foo\"),\n            \"bar\", new DoubleMaxAggregatorFactory(\"bar\", \"bar\"),\n            \"baz\", new LongMaxAggregatorFactory(\"baz\", \"baz\")\n        ),\n        null,\n        null,\n        null\n    );\n\n    final Map<String, AggregatorFactory> expectedLenient = Maps.newHashMap();\n    expectedLenient.put(\"foo\", new LongSumAggregatorFactory(\"foo\", \"foo\"));\n    expectedLenient.put(\"bar\", null);\n    expectedLenient.put(\"baz\", new LongMaxAggregatorFactory(\"baz\", \"baz\"));\n    Assert.assertNull(mergeStrict(analysis1, analysis2).getAggregators());\n    Assert.assertEquals(expectedLenient, mergeLenient(analysis1, analysis2).getAggregators());\n\n    \r\n    Assert.assertEquals(\n        expectedLenient,\n        mergeLenient(\n            mergeLenient(analysis1, analysis2),\n            mergeLenient(analysis1, analysis2)\n        ).getAggregators()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/metadata/SegmentMetadataQueryQueryToolChestTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"}]
