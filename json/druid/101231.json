[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"    public AuthorizerMapper get()\n    {\n      Map<String, Authorizer> authorizerMap = Maps.newHashMap();\n      List<String> authorizers = authConfig.getAuthorizers();\n\n      validateAuthorizers(authorizers);\n\n      \r\n      if (authorizers == null) {\n        AllowAllAuthorizer allowAllAuthorizer = new AllowAllAuthorizer();\n        authorizerMap.put(AuthConfig.ALLOW_ALL_NAME, allowAllAuthorizer);\n\n        return new AuthorizerMapper(null) {\n          @Override\n          public Authorizer getAuthorizer(String name)\n          {\n            return allowAllAuthorizer;\n          }\n\n          @Override\n          public Map<String, Authorizer> getAuthorizerMap()\n          {\n            return authorizerMap;\n          }\n        };\n      }\n\n      for (String authorizerName : authorizers) {\n        final String authorizerPropertyBase = StringUtils.format(AUTHORIZER_PROPERTIES_FORMAT_STRING, authorizerName);\n        final JsonConfigProvider<Authorizer> authorizerProvider = new JsonConfigProvider<>(\n            authorizerPropertyBase,\n            Authorizer.class\n        );\n\n        String nameProperty = StringUtils.format(\"druid.auth.authorizer.%s.name\", authorizerName);\n        Properties adjustedProps = new Properties(props);\n        if (adjustedProps.containsKey(nameProperty)) {\n          throw new IAE(\"Name property [%s] is reserved.\", nameProperty);\n        } else {\n          adjustedProps.put(nameProperty, authorizerName);\n        }\n\n        authorizerProvider.inject(adjustedProps, configurator);\n\n        Supplier<Authorizer> authorizerSupplier = authorizerProvider.get();\n        if (authorizerSupplier == null) {\n          throw new ISE(\"Could not create authorizer with name: %s\", authorizerName);\n        }\n        Authorizer authorizer = authorizerSupplier.get();\n        authorizerMap.put(authorizerName, authorizer);\n      }\n\n      return new AuthorizerMapper(authorizerMap);\n    }\n","date":"2018-08-31 00:56:26","endLine":142,"groupId":"21837","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/89/e4e2867439ff835b3a7aa469162bc4b48249a1.src","preCode":"    public AuthorizerMapper get()\n    {\n      Map<String, Authorizer> authorizerMap = Maps.newHashMap();\n      List<String> authorizers = authConfig.getAuthorizers();\n\n      validateAuthorizers(authorizers);\n\n      \r\n      if (authorizers == null) {\n        AllowAllAuthorizer allowAllAuthorizer = new AllowAllAuthorizer();\n        authorizerMap.put(AuthConfig.ALLOW_ALL_NAME, allowAllAuthorizer);\n\n        return new AuthorizerMapper(null) {\n          @Override\n          public Authorizer getAuthorizer(String name)\n          {\n            return allowAllAuthorizer;\n          }\n\n          @Override\n          public Map<String, Authorizer> getAuthorizerMap()\n          {\n            return authorizerMap;\n          }\n        };\n      }\n\n      for (String authorizerName : authorizers) {\n        final String authorizerPropertyBase = StringUtils.format(AUTHORIZER_PROPERTIES_FORMAT_STRING, authorizerName);\n        final JsonConfigProvider<Authorizer> authorizerProvider = new JsonConfigProvider<>(\n            authorizerPropertyBase,\n            Authorizer.class\n        );\n\n        String nameProperty = StringUtils.format(\"druid.auth.authorizer.%s.name\", authorizerName);\n        Properties adjustedProps = new Properties(props);\n        if (adjustedProps.containsKey(nameProperty)) {\n          throw new IAE(\"Name property [%s] is reserved.\", nameProperty);\n        } else {\n          adjustedProps.put(nameProperty, authorizerName);\n        }\n\n        authorizerProvider.inject(adjustedProps, configurator);\n\n        Supplier<Authorizer> authorizerSupplier = authorizerProvider.get();\n        if (authorizerSupplier == null) {\n          throw new ISE(\"Could not create authorizer with name: %s\", authorizerName);\n        }\n        Authorizer authorizer = authorizerSupplier.get();\n        authorizerMap.put(authorizerName, authorizer);\n      }\n\n      return new AuthorizerMapper(authorizerMap);\n    }\n","realPath":"server/src/main/java/org/apache/druid/server/initialization/AuthorizerMapperModule.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"    public AuthenticatorMapper get()\n    {\n      \r\n      Map<String, Authenticator> authenticatorMap = Maps.newLinkedHashMap();\n\n      List<String> authenticators = authConfig.getAuthenticatorChain();\n\n      validateAuthenticators(authenticators);\n\n      \r\n      if (authenticators == null) {\n        authenticatorMap.put(AuthConfig.ALLOW_ALL_NAME, new AllowAllAuthenticator());\n        return new AuthenticatorMapper(authenticatorMap);\n      }\n\n      for (String authenticatorName : authenticators) {\n        final String authenticatorPropertyBase = StringUtils.format(AUTHENTICATOR_PROPERTIES_FORMAT_STRING, authenticatorName);\n        final JsonConfigProvider<Authenticator> authenticatorProvider = new JsonConfigProvider<>(\n            authenticatorPropertyBase,\n            Authenticator.class\n        );\n\n        String nameProperty = StringUtils.format(\"druid.auth.authenticator.%s.name\", authenticatorName);\n        Properties adjustedProps = new Properties(props);\n        if (adjustedProps.containsKey(nameProperty)) {\n          throw new IAE(\"Name property [%s] is reserved.\", nameProperty);\n        } else {\n          adjustedProps.put(nameProperty, authenticatorName);\n        }\n        authenticatorProvider.inject(adjustedProps, configurator);\n\n        Supplier<Authenticator> authenticatorSupplier = authenticatorProvider.get();\n        if (authenticatorSupplier == null) {\n          throw new ISE(\"Could not create authenticator with name: %s\", authenticatorName);\n        }\n        Authenticator authenticator = authenticatorSupplier.get();\n        authenticatorMap.put(authenticatorName, authenticator);\n      }\n\n      return new AuthenticatorMapper(authenticatorMap);\n    }\n","date":"2018-08-31 00:56:26","endLine":129,"groupId":"12552","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"get","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/df/bbbecfa998111cf92d2e0e2758eec60fd93a76.src","preCode":"    public AuthenticatorMapper get()\n    {\n      \r\n      Map<String, Authenticator> authenticatorMap = Maps.newLinkedHashMap();\n\n      List<String> authenticators = authConfig.getAuthenticatorChain();\n\n      validateAuthenticators(authenticators);\n\n      \r\n      if (authenticators == null) {\n        authenticatorMap.put(AuthConfig.ALLOW_ALL_NAME, new AllowAllAuthenticator());\n        return new AuthenticatorMapper(authenticatorMap);\n      }\n\n      for (String authenticatorName : authenticators) {\n        final String authenticatorPropertyBase = StringUtils.format(AUTHENTICATOR_PROPERTIES_FORMAT_STRING, authenticatorName);\n        final JsonConfigProvider<Authenticator> authenticatorProvider = new JsonConfigProvider<>(\n            authenticatorPropertyBase,\n            Authenticator.class\n        );\n\n        String nameProperty = StringUtils.format(\"druid.auth.authenticator.%s.name\", authenticatorName);\n        Properties adjustedProps = new Properties(props);\n        if (adjustedProps.containsKey(nameProperty)) {\n          throw new IAE(\"Name property [%s] is reserved.\", nameProperty);\n        } else {\n          adjustedProps.put(nameProperty, authenticatorName);\n        }\n        authenticatorProvider.inject(adjustedProps, configurator);\n\n        Supplier<Authenticator> authenticatorSupplier = authenticatorProvider.get();\n        if (authenticatorSupplier == null) {\n          throw new ISE(\"Could not create authenticator with name: %s\", authenticatorName);\n        }\n        Authenticator authenticator = authenticatorSupplier.get();\n        authenticatorMap.put(authenticatorName, authenticator);\n      }\n\n      return new AuthenticatorMapper(authenticatorMap);\n    }\n","realPath":"server/src/main/java/org/apache/druid/server/initialization/AuthenticatorMapperModule.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"    public AuthorizerMapper get()\n    {\n      Map<String, Authorizer> authorizerMap = new HashMap<>();\n      List<String> authorizers = authConfig.getAuthorizers();\n\n      validateAuthorizers(authorizers);\n\n      \r\n      if (authorizers == null) {\n        AllowAllAuthorizer allowAllAuthorizer = new AllowAllAuthorizer();\n        authorizerMap.put(AuthConfig.ALLOW_ALL_NAME, allowAllAuthorizer);\n\n        return new AuthorizerMapper(null) {\n          @Override\n          public Authorizer getAuthorizer(String name)\n          {\n            return allowAllAuthorizer;\n          }\n\n          @Override\n          public Map<String, Authorizer> getAuthorizerMap()\n          {\n            return authorizerMap;\n          }\n        };\n      }\n\n      for (String authorizerName : authorizers) {\n        final String authorizerPropertyBase = StringUtils.format(AUTHORIZER_PROPERTIES_FORMAT_STRING, authorizerName);\n        final JsonConfigProvider<Authorizer> authorizerProvider = new JsonConfigProvider<>(\n            authorizerPropertyBase,\n            Authorizer.class\n        );\n\n        String nameProperty = StringUtils.format(\"druid.auth.authorizer.%s.name\", authorizerName);\n        Properties adjustedProps = new Properties(props);\n        if (adjustedProps.containsKey(nameProperty)) {\n          throw new IAE(\"Name property [%s] is reserved.\", nameProperty);\n        } else {\n          adjustedProps.put(nameProperty, authorizerName);\n        }\n\n        authorizerProvider.inject(adjustedProps, configurator);\n\n        Supplier<Authorizer> authorizerSupplier = authorizerProvider.get();\n        if (authorizerSupplier == null) {\n          throw new ISE(\"Could not create authorizer with name: %s\", authorizerName);\n        }\n        Authorizer authorizer = authorizerSupplier.get();\n        authorizerMap.put(authorizerName, authorizer);\n      }\n\n      return new AuthorizerMapper(authorizerMap);\n    }\n","date":"2018-10-29 20:02:43","endLine":142,"groupId":"21837","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bd/2d7cbf7ce4e70babe134e226d538b689649954.src","preCode":"    public AuthorizerMapper get()\n    {\n      Map<String, Authorizer> authorizerMap = Maps.newHashMap();\n      List<String> authorizers = authConfig.getAuthorizers();\n\n      validateAuthorizers(authorizers);\n\n      \r\n      if (authorizers == null) {\n        AllowAllAuthorizer allowAllAuthorizer = new AllowAllAuthorizer();\n        authorizerMap.put(AuthConfig.ALLOW_ALL_NAME, allowAllAuthorizer);\n\n        return new AuthorizerMapper(null) {\n          @Override\n          public Authorizer getAuthorizer(String name)\n          {\n            return allowAllAuthorizer;\n          }\n\n          @Override\n          public Map<String, Authorizer> getAuthorizerMap()\n          {\n            return authorizerMap;\n          }\n        };\n      }\n\n      for (String authorizerName : authorizers) {\n        final String authorizerPropertyBase = StringUtils.format(AUTHORIZER_PROPERTIES_FORMAT_STRING, authorizerName);\n        final JsonConfigProvider<Authorizer> authorizerProvider = new JsonConfigProvider<>(\n            authorizerPropertyBase,\n            Authorizer.class\n        );\n\n        String nameProperty = StringUtils.format(\"druid.auth.authorizer.%s.name\", authorizerName);\n        Properties adjustedProps = new Properties(props);\n        if (adjustedProps.containsKey(nameProperty)) {\n          throw new IAE(\"Name property [%s] is reserved.\", nameProperty);\n        } else {\n          adjustedProps.put(nameProperty, authorizerName);\n        }\n\n        authorizerProvider.inject(adjustedProps, configurator);\n\n        Supplier<Authorizer> authorizerSupplier = authorizerProvider.get();\n        if (authorizerSupplier == null) {\n          throw new ISE(\"Could not create authorizer with name: %s\", authorizerName);\n        }\n        Authorizer authorizer = authorizerSupplier.get();\n        authorizerMap.put(authorizerName, authorizer);\n      }\n\n      return new AuthorizerMapper(authorizerMap);\n    }\n","realPath":"server/src/main/java/org/apache/druid/server/initialization/AuthorizerMapperModule.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"    public AuthenticatorMapper get()\n    {\n      \r\n      Map<String, Authenticator> authenticatorMap = Maps.newLinkedHashMap();\n\n      List<String> authenticators = authConfig.getAuthenticatorChain();\n\n      validateAuthenticators(authenticators);\n\n      \r\n      if (authenticators == null) {\n        authenticatorMap.put(AuthConfig.ALLOW_ALL_NAME, new AllowAllAuthenticator());\n        return new AuthenticatorMapper(authenticatorMap);\n      }\n\n      for (String authenticatorName : authenticators) {\n        final String authenticatorPropertyBase = StringUtils.format(AUTHENTICATOR_PROPERTIES_FORMAT_STRING, authenticatorName);\n        final JsonConfigProvider<Authenticator> authenticatorProvider = new JsonConfigProvider<>(\n            authenticatorPropertyBase,\n            Authenticator.class\n        );\n\n        String nameProperty = StringUtils.format(\"druid.auth.authenticator.%s.name\", authenticatorName);\n        Properties adjustedProps = new Properties(props);\n        if (adjustedProps.containsKey(nameProperty)) {\n          throw new IAE(\"Name property [%s] is reserved.\", nameProperty);\n        } else {\n          adjustedProps.put(nameProperty, authenticatorName);\n        }\n        authenticatorProvider.inject(adjustedProps, configurator);\n\n        Supplier<Authenticator> authenticatorSupplier = authenticatorProvider.get();\n        if (authenticatorSupplier == null) {\n          throw new ISE(\"Could not create authenticator with name: %s\", authenticatorName);\n        }\n        Authenticator authenticator = authenticatorSupplier.get();\n        authenticatorMap.put(authenticatorName, authenticator);\n      }\n\n      return new AuthenticatorMapper(authenticatorMap);\n    }\n","date":"2018-08-31 00:56:26","endLine":129,"groupId":"12552","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"get","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/df/bbbecfa998111cf92d2e0e2758eec60fd93a76.src","preCode":"    public AuthenticatorMapper get()\n    {\n      \r\n      Map<String, Authenticator> authenticatorMap = Maps.newLinkedHashMap();\n\n      List<String> authenticators = authConfig.getAuthenticatorChain();\n\n      validateAuthenticators(authenticators);\n\n      \r\n      if (authenticators == null) {\n        authenticatorMap.put(AuthConfig.ALLOW_ALL_NAME, new AllowAllAuthenticator());\n        return new AuthenticatorMapper(authenticatorMap);\n      }\n\n      for (String authenticatorName : authenticators) {\n        final String authenticatorPropertyBase = StringUtils.format(AUTHENTICATOR_PROPERTIES_FORMAT_STRING, authenticatorName);\n        final JsonConfigProvider<Authenticator> authenticatorProvider = new JsonConfigProvider<>(\n            authenticatorPropertyBase,\n            Authenticator.class\n        );\n\n        String nameProperty = StringUtils.format(\"druid.auth.authenticator.%s.name\", authenticatorName);\n        Properties adjustedProps = new Properties(props);\n        if (adjustedProps.containsKey(nameProperty)) {\n          throw new IAE(\"Name property [%s] is reserved.\", nameProperty);\n        } else {\n          adjustedProps.put(nameProperty, authenticatorName);\n        }\n        authenticatorProvider.inject(adjustedProps, configurator);\n\n        Supplier<Authenticator> authenticatorSupplier = authenticatorProvider.get();\n        if (authenticatorSupplier == null) {\n          throw new ISE(\"Could not create authenticator with name: %s\", authenticatorName);\n        }\n        Authenticator authenticator = authenticatorSupplier.get();\n        authenticatorMap.put(authenticatorName, authenticator);\n      }\n\n      return new AuthenticatorMapper(authenticatorMap);\n    }\n","realPath":"server/src/main/java/org/apache/druid/server/initialization/AuthenticatorMapperModule.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"N"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"},{"authorTime":"2018-12-14 16:55:44","codes":[{"authorDate":"2018-12-14 16:55:44","commitOrder":3,"curCode":"    public AuthorizerMapper get()\n    {\n      Map<String, Authorizer> authorizerMap = new HashMap<>();\n      List<String> authorizers = authConfig.getAuthorizers();\n\n      validateAuthorizers(authorizers);\n\n      \r\n      if (authorizers == null) {\n        AllowAllAuthorizer allowAllAuthorizer = new AllowAllAuthorizer();\n        authorizerMap.put(AuthConfig.ALLOW_ALL_NAME, allowAllAuthorizer);\n\n        return new AuthorizerMapper(null) {\n          @Override\n          public Authorizer getAuthorizer(String name)\n          {\n            return allowAllAuthorizer;\n          }\n\n          @Override\n          public Map<String, Authorizer> getAuthorizerMap()\n          {\n            return authorizerMap;\n          }\n        };\n      }\n\n      for (String authorizerName : authorizers) {\n        final String authorizerPropertyBase = StringUtils.format(AUTHORIZER_PROPERTIES_FORMAT_STRING, authorizerName);\n        final JsonConfigProvider<Authorizer> authorizerProvider = JsonConfigProvider.of(\n            authorizerPropertyBase,\n            Authorizer.class\n        );\n\n        String nameProperty = StringUtils.format(\"druid.auth.authorizer.%s.name\", authorizerName);\n        Properties adjustedProps = new Properties(props);\n        if (adjustedProps.containsKey(nameProperty)) {\n          throw new IAE(\"Name property [%s] is reserved.\", nameProperty);\n        } else {\n          adjustedProps.put(nameProperty, authorizerName);\n        }\n\n        authorizerProvider.inject(adjustedProps, configurator);\n\n        Supplier<Authorizer> authorizerSupplier = authorizerProvider.get();\n        if (authorizerSupplier == null) {\n          throw new ISE(\"Could not create authorizer with name: %s\", authorizerName);\n        }\n        Authorizer authorizer = authorizerSupplier.get();\n        authorizerMap.put(authorizerName, authorizer);\n      }\n\n      return new AuthorizerMapper(authorizerMap);\n    }\n","date":"2018-12-14 16:55:44","endLine":142,"groupId":"101231","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/48/de9cbfc643811b9e186851dea9aef142ed6ee7.src","preCode":"    public AuthorizerMapper get()\n    {\n      Map<String, Authorizer> authorizerMap = new HashMap<>();\n      List<String> authorizers = authConfig.getAuthorizers();\n\n      validateAuthorizers(authorizers);\n\n      \r\n      if (authorizers == null) {\n        AllowAllAuthorizer allowAllAuthorizer = new AllowAllAuthorizer();\n        authorizerMap.put(AuthConfig.ALLOW_ALL_NAME, allowAllAuthorizer);\n\n        return new AuthorizerMapper(null) {\n          @Override\n          public Authorizer getAuthorizer(String name)\n          {\n            return allowAllAuthorizer;\n          }\n\n          @Override\n          public Map<String, Authorizer> getAuthorizerMap()\n          {\n            return authorizerMap;\n          }\n        };\n      }\n\n      for (String authorizerName : authorizers) {\n        final String authorizerPropertyBase = StringUtils.format(AUTHORIZER_PROPERTIES_FORMAT_STRING, authorizerName);\n        final JsonConfigProvider<Authorizer> authorizerProvider = new JsonConfigProvider<>(\n            authorizerPropertyBase,\n            Authorizer.class\n        );\n\n        String nameProperty = StringUtils.format(\"druid.auth.authorizer.%s.name\", authorizerName);\n        Properties adjustedProps = new Properties(props);\n        if (adjustedProps.containsKey(nameProperty)) {\n          throw new IAE(\"Name property [%s] is reserved.\", nameProperty);\n        } else {\n          adjustedProps.put(nameProperty, authorizerName);\n        }\n\n        authorizerProvider.inject(adjustedProps, configurator);\n\n        Supplier<Authorizer> authorizerSupplier = authorizerProvider.get();\n        if (authorizerSupplier == null) {\n          throw new ISE(\"Could not create authorizer with name: %s\", authorizerName);\n        }\n        Authorizer authorizer = authorizerSupplier.get();\n        authorizerMap.put(authorizerName, authorizer);\n      }\n\n      return new AuthorizerMapper(authorizerMap);\n    }\n","realPath":"server/src/main/java/org/apache/druid/server/initialization/AuthorizerMapperModule.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2018-12-14 16:55:44","commitOrder":3,"curCode":"    public AuthenticatorMapper get()\n    {\n      \r\n      Map<String, Authenticator> authenticatorMap = Maps.newLinkedHashMap();\n\n      List<String> authenticators = authConfig.getAuthenticatorChain();\n\n      validateAuthenticators(authenticators);\n\n      \r\n      if (authenticators == null) {\n        authenticatorMap.put(AuthConfig.ALLOW_ALL_NAME, new AllowAllAuthenticator());\n        return new AuthenticatorMapper(authenticatorMap);\n      }\n\n      for (String authenticatorName : authenticators) {\n        final String authenticatorPropertyBase = StringUtils.format(AUTHENTICATOR_PROPERTIES_FORMAT_STRING, authenticatorName);\n        final JsonConfigProvider<Authenticator> authenticatorProvider = JsonConfigProvider.of(\n            authenticatorPropertyBase,\n            Authenticator.class\n        );\n\n        String nameProperty = StringUtils.format(\"druid.auth.authenticator.%s.name\", authenticatorName);\n        Properties adjustedProps = new Properties(props);\n        if (adjustedProps.containsKey(nameProperty)) {\n          throw new IAE(\"Name property [%s] is reserved.\", nameProperty);\n        } else {\n          adjustedProps.put(nameProperty, authenticatorName);\n        }\n        authenticatorProvider.inject(adjustedProps, configurator);\n\n        Supplier<Authenticator> authenticatorSupplier = authenticatorProvider.get();\n        if (authenticatorSupplier == null) {\n          throw new ISE(\"Could not create authenticator with name: %s\", authenticatorName);\n        }\n        Authenticator authenticator = authenticatorSupplier.get();\n        authenticatorMap.put(authenticatorName, authenticator);\n      }\n\n      return new AuthenticatorMapper(authenticatorMap);\n    }\n","date":"2018-12-14 16:55:44","endLine":129,"groupId":"101231","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"get","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/139da3ec823ac82afd69b66c1c3c3fcbd29a4f.src","preCode":"    public AuthenticatorMapper get()\n    {\n      \r\n      Map<String, Authenticator> authenticatorMap = Maps.newLinkedHashMap();\n\n      List<String> authenticators = authConfig.getAuthenticatorChain();\n\n      validateAuthenticators(authenticators);\n\n      \r\n      if (authenticators == null) {\n        authenticatorMap.put(AuthConfig.ALLOW_ALL_NAME, new AllowAllAuthenticator());\n        return new AuthenticatorMapper(authenticatorMap);\n      }\n\n      for (String authenticatorName : authenticators) {\n        final String authenticatorPropertyBase = StringUtils.format(AUTHENTICATOR_PROPERTIES_FORMAT_STRING, authenticatorName);\n        final JsonConfigProvider<Authenticator> authenticatorProvider = new JsonConfigProvider<>(\n            authenticatorPropertyBase,\n            Authenticator.class\n        );\n\n        String nameProperty = StringUtils.format(\"druid.auth.authenticator.%s.name\", authenticatorName);\n        Properties adjustedProps = new Properties(props);\n        if (adjustedProps.containsKey(nameProperty)) {\n          throw new IAE(\"Name property [%s] is reserved.\", nameProperty);\n        } else {\n          adjustedProps.put(nameProperty, authenticatorName);\n        }\n        authenticatorProvider.inject(adjustedProps, configurator);\n\n        Supplier<Authenticator> authenticatorSupplier = authenticatorProvider.get();\n        if (authenticatorSupplier == null) {\n          throw new ISE(\"Could not create authenticator with name: %s\", authenticatorName);\n        }\n        Authenticator authenticator = authenticatorSupplier.get();\n        authenticatorMap.put(authenticatorName, authenticator);\n      }\n\n      return new AuthenticatorMapper(authenticatorMap);\n    }\n","realPath":"server/src/main/java/org/apache/druid/server/initialization/AuthenticatorMapperModule.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"04e7c7fbdca77343ae7dd0ff5053273e63c30ea3","commitMessage":"@@@FilteredRequestLogger: Fix start/stop.  invalid delegate behavior. (#6637)\n\n* FilteredRequestLogger: Fix start/stop.  invalid delegate behavior.\n\nFixes two bugs:\n\n1) FilteredRequestLogger did not start/stop the delegate.\n\n2) FilteredRequestLogger would ignore an invalid delegate type.  and\ninstead silently substitute the \"noop\" logger. This was due to a larger\nproblem with RequestLoggerProvider setup in general; the fix here is\nto remove \"defaultImpl\" from the RequestLoggerProvider interface.  and\ninstead have JsonConfigurator be responsible for creating the\ndefault implementations. It is stricter about things than the old system\nwas.  and is only willing to make a noop logger if it doesn't see any\nrequest logger configs. Otherwise.  it'll raise a provision error.\n\n* Remove unneeded annotations.\n","date":"2018-12-14 16:55:44","modifiedFileCount":"10","status":"M","submitter":"Gian Merlino"}]
