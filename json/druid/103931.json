[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void emit(Event event)\n  {\n    if (!started.get()) {\n      throw new ISE(\"WTF emit was called while service is not started yet\");\n    }\n    if (event instanceof ServiceMetricEvent) {\n      final TimelineMetric timelineEvent = timelineMetricConverter.druidEventToTimelineMetric((ServiceMetricEvent) event);\n      if (timelineEvent == null) {\n        return;\n      }\n      try {\n        final boolean isSuccessful = eventsQueue.offer(\n            timelineEvent,\n            config.getEmitWaitTime(),\n            TimeUnit.MILLISECONDS\n        );\n        if (!isSuccessful) {\n          if (countLostEvents.getAndIncrement() % 1000 == 0) {\n            log.error(\n                \"Lost total of [%s] events because of emitter queue is full. Please increase the capacity or/and the consumer frequency\",\n                countLostEvents.get()\n            );\n          }\n        }\n      }\n      catch (InterruptedException e) {\n        log.error(e, \"got interrupted with message [%s]\", e.getMessage());\n        Thread.currentThread().interrupt();\n      }\n    } else if (event instanceof AlertEvent) {\n      for (Emitter emitter : emitterList) {\n        emitter.emit(event);\n      }\n    } else {\n      throw new ISE(\"unknown event type [%s]\", event.getClass());\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":140,"groupId":"20866","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"emit","params":"(Eventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0b/2e2108fc4d65dbbfd4d2f42bfa115e02f4aee6.src","preCode":"  public void emit(Event event)\n  {\n    if (!started.get()) {\n      throw new ISE(\"WTF emit was called while service is not started yet\");\n    }\n    if (event instanceof ServiceMetricEvent) {\n      final TimelineMetric timelineEvent = timelineMetricConverter.druidEventToTimelineMetric((ServiceMetricEvent) event);\n      if (timelineEvent == null) {\n        return;\n      }\n      try {\n        final boolean isSuccessful = eventsQueue.offer(\n            timelineEvent,\n            config.getEmitWaitTime(),\n            TimeUnit.MILLISECONDS\n        );\n        if (!isSuccessful) {\n          if (countLostEvents.getAndIncrement() % 1000 == 0) {\n            log.error(\n                \"Lost total of [%s] events because of emitter queue is full. Please increase the capacity or/and the consumer frequency\",\n                countLostEvents.get()\n            );\n          }\n        }\n      }\n      catch (InterruptedException e) {\n        log.error(e, \"got interrupted with message [%s]\", e.getMessage());\n        Thread.currentThread().interrupt();\n      }\n    } else if (event instanceof AlertEvent) {\n      for (Emitter emitter : emitterList) {\n        emitter.emit(event);\n      }\n    } else {\n      throw new ISE(\"unknown event type [%s]\", event.getClass());\n    }\n  }\n","realPath":"extensions-contrib/ambari-metrics-emitter/src/main/java/org/apache/druid/emitter/ambari/metrics/AmbariMetricsEmitter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void emit(Event event)\n  {\n    if (!started.get()) {\n      throw new ISE(\"WTF emit was called while service is not started yet\");\n    }\n    if (event instanceof ServiceMetricEvent) {\n      final GraphiteEvent graphiteEvent = graphiteEventConverter.druidEventToGraphite((ServiceMetricEvent) event);\n      if (graphiteEvent == null) {\n        return;\n      }\n      try {\n        final boolean isSuccessful = eventsQueue.offer(\n            graphiteEvent,\n            graphiteEmitterConfig.getEmitWaitTime(),\n            TimeUnit.MILLISECONDS\n        );\n        if (!isSuccessful) {\n          if (countLostEvents.getAndIncrement() % 1000 == 0) {\n            log.error(\n                \"Lost total of [%s] events because of emitter queue is full. Please increase the capacity or/and the consumer frequency\",\n                countLostEvents.get()\n            );\n          }\n        }\n      }\n      catch (InterruptedException e) {\n        log.error(e, \"got interrupted with message [%s]\", e.getMessage());\n        Thread.currentThread().interrupt();\n      }\n    } else if (event instanceof EmittingRequestLogger.RequestLogEvent) {\n      for (Emitter emitter : requestLogEmitters) {\n        emitter.emit(event);\n      }\n    } else if (!alertEmitters.isEmpty() && event instanceof AlertEvent) {\n      for (Emitter emitter : alertEmitters) {\n        emitter.emit(event);\n      }\n    } else if (event instanceof AlertEvent) {\n      AlertEvent alertEvent = (AlertEvent) event;\n      log.error(\n          \"The following alert is dropped, description is [%s], severity is [%s]\",\n          alertEvent.getDescription(), alertEvent.getSeverity()\n      );\n    } else {\n      log.error(\"unknown event type [%s]\", event.getClass());\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":144,"groupId":"19932","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"emit","params":"(Eventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fb/a66e3fdaf86d512ddb87f36be07b812288cd5b.src","preCode":"  public void emit(Event event)\n  {\n    if (!started.get()) {\n      throw new ISE(\"WTF emit was called while service is not started yet\");\n    }\n    if (event instanceof ServiceMetricEvent) {\n      final GraphiteEvent graphiteEvent = graphiteEventConverter.druidEventToGraphite((ServiceMetricEvent) event);\n      if (graphiteEvent == null) {\n        return;\n      }\n      try {\n        final boolean isSuccessful = eventsQueue.offer(\n            graphiteEvent,\n            graphiteEmitterConfig.getEmitWaitTime(),\n            TimeUnit.MILLISECONDS\n        );\n        if (!isSuccessful) {\n          if (countLostEvents.getAndIncrement() % 1000 == 0) {\n            log.error(\n                \"Lost total of [%s] events because of emitter queue is full. Please increase the capacity or/and the consumer frequency\",\n                countLostEvents.get()\n            );\n          }\n        }\n      }\n      catch (InterruptedException e) {\n        log.error(e, \"got interrupted with message [%s]\", e.getMessage());\n        Thread.currentThread().interrupt();\n      }\n    } else if (event instanceof EmittingRequestLogger.RequestLogEvent) {\n      for (Emitter emitter : requestLogEmitters) {\n        emitter.emit(event);\n      }\n    } else if (!alertEmitters.isEmpty() && event instanceof AlertEvent) {\n      for (Emitter emitter : alertEmitters) {\n        emitter.emit(event);\n      }\n    } else if (event instanceof AlertEvent) {\n      AlertEvent alertEvent = (AlertEvent) event;\n      log.error(\n          \"The following alert is dropped, description is [%s], severity is [%s]\",\n          alertEvent.getDescription(), alertEvent.getSeverity()\n      );\n    } else {\n      log.error(\"unknown event type [%s]\", event.getClass());\n    }\n  }\n","realPath":"extensions-contrib/graphite-emitter/src/main/java/org/apache/druid/emitter/graphite/GraphiteEmitter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-11-01 05:24:37","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void emit(Event event)\n  {\n    if (!started.get()) {\n      throw new ISE(\"WTF emit was called while service is not started yet\");\n    }\n    if (event instanceof ServiceMetricEvent) {\n      final TimelineMetric timelineEvent = timelineMetricConverter.druidEventToTimelineMetric((ServiceMetricEvent) event);\n      if (timelineEvent == null) {\n        return;\n      }\n      try {\n        final boolean isSuccessful = eventsQueue.offer(\n            timelineEvent,\n            config.getEmitWaitTime(),\n            TimeUnit.MILLISECONDS\n        );\n        if (!isSuccessful) {\n          if (countLostEvents.getAndIncrement() % 1000 == 0) {\n            log.error(\n                \"Lost total of [%s] events because of emitter queue is full. Please increase the capacity or/and the consumer frequency\",\n                countLostEvents.get()\n            );\n          }\n        }\n      }\n      catch (InterruptedException e) {\n        log.error(e, \"got interrupted with message [%s]\", e.getMessage());\n        Thread.currentThread().interrupt();\n      }\n    } else if (event instanceof AlertEvent) {\n      for (Emitter emitter : emitterList) {\n        emitter.emit(event);\n      }\n    } else {\n      throw new ISE(\"unknown event type [%s]\", event.getClass());\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":140,"groupId":"20866","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"emit","params":"(Eventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0b/2e2108fc4d65dbbfd4d2f42bfa115e02f4aee6.src","preCode":"  public void emit(Event event)\n  {\n    if (!started.get()) {\n      throw new ISE(\"WTF emit was called while service is not started yet\");\n    }\n    if (event instanceof ServiceMetricEvent) {\n      final TimelineMetric timelineEvent = timelineMetricConverter.druidEventToTimelineMetric((ServiceMetricEvent) event);\n      if (timelineEvent == null) {\n        return;\n      }\n      try {\n        final boolean isSuccessful = eventsQueue.offer(\n            timelineEvent,\n            config.getEmitWaitTime(),\n            TimeUnit.MILLISECONDS\n        );\n        if (!isSuccessful) {\n          if (countLostEvents.getAndIncrement() % 1000 == 0) {\n            log.error(\n                \"Lost total of [%s] events because of emitter queue is full. Please increase the capacity or/and the consumer frequency\",\n                countLostEvents.get()\n            );\n          }\n        }\n      }\n      catch (InterruptedException e) {\n        log.error(e, \"got interrupted with message [%s]\", e.getMessage());\n        Thread.currentThread().interrupt();\n      }\n    } else if (event instanceof AlertEvent) {\n      for (Emitter emitter : emitterList) {\n        emitter.emit(event);\n      }\n    } else {\n      throw new ISE(\"unknown event type [%s]\", event.getClass());\n    }\n  }\n","realPath":"extensions-contrib/ambari-metrics-emitter/src/main/java/org/apache/druid/emitter/ambari/metrics/AmbariMetricsEmitter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"N"},{"authorDate":"2018-11-01 05:24:37","commitOrder":2,"curCode":"  public void emit(Event event)\n  {\n    if (!started.get()) {\n      throw new ISE(\"WTF emit was called while service is not started yet\");\n    }\n    if (event instanceof ServiceMetricEvent) {\n      final GraphiteEvent graphiteEvent = graphiteEventConverter.druidEventToGraphite((ServiceMetricEvent) event);\n      if (graphiteEvent == null) {\n        return;\n      }\n      try {\n        final boolean isSuccessful = eventsQueue.offer(\n            graphiteEvent,\n            graphiteEmitterConfig.getEmitWaitTime(),\n            TimeUnit.MILLISECONDS\n        );\n        if (!isSuccessful) {\n          if (countLostEvents.getAndIncrement() % 1000 == 0) {\n            log.error(\n                \"Lost total of [%s] events because of emitter queue is full. Please increase the capacity or/and the consumer frequency\",\n                countLostEvents.get()\n            );\n          }\n        }\n      }\n      catch (InterruptedException e) {\n        log.error(e, \"got interrupted with message [%s]\", e.getMessage());\n        Thread.currentThread().interrupt();\n      }\n    } else if (event instanceof RequestLogEvent) {\n      for (Emitter emitter : requestLogEmitters) {\n        emitter.emit(event);\n      }\n    } else if (!alertEmitters.isEmpty() && event instanceof AlertEvent) {\n      for (Emitter emitter : alertEmitters) {\n        emitter.emit(event);\n      }\n    } else if (event instanceof AlertEvent) {\n      AlertEvent alertEvent = (AlertEvent) event;\n      log.error(\n          \"The following alert is dropped, description is [%s], severity is [%s]\",\n          alertEvent.getDescription(), alertEvent.getSeverity()\n      );\n    } else {\n      log.error(\"unknown event type [%s]\", event.getClass());\n    }\n  }\n","date":"2018-11-01 05:24:37","endLine":144,"groupId":"16082","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"emit","params":"(Eventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e8/0a24904c936c1e1aae62d56f8eab0c27abc916.src","preCode":"  public void emit(Event event)\n  {\n    if (!started.get()) {\n      throw new ISE(\"WTF emit was called while service is not started yet\");\n    }\n    if (event instanceof ServiceMetricEvent) {\n      final GraphiteEvent graphiteEvent = graphiteEventConverter.druidEventToGraphite((ServiceMetricEvent) event);\n      if (graphiteEvent == null) {\n        return;\n      }\n      try {\n        final boolean isSuccessful = eventsQueue.offer(\n            graphiteEvent,\n            graphiteEmitterConfig.getEmitWaitTime(),\n            TimeUnit.MILLISECONDS\n        );\n        if (!isSuccessful) {\n          if (countLostEvents.getAndIncrement() % 1000 == 0) {\n            log.error(\n                \"Lost total of [%s] events because of emitter queue is full. Please increase the capacity or/and the consumer frequency\",\n                countLostEvents.get()\n            );\n          }\n        }\n      }\n      catch (InterruptedException e) {\n        log.error(e, \"got interrupted with message [%s]\", e.getMessage());\n        Thread.currentThread().interrupt();\n      }\n    } else if (event instanceof EmittingRequestLogger.RequestLogEvent) {\n      for (Emitter emitter : requestLogEmitters) {\n        emitter.emit(event);\n      }\n    } else if (!alertEmitters.isEmpty() && event instanceof AlertEvent) {\n      for (Emitter emitter : alertEmitters) {\n        emitter.emit(event);\n      }\n    } else if (event instanceof AlertEvent) {\n      AlertEvent alertEvent = (AlertEvent) event;\n      log.error(\n          \"The following alert is dropped, description is [%s], severity is [%s]\",\n          alertEvent.getDescription(), alertEvent.getSeverity()\n      );\n    } else {\n      log.error(\"unknown event type [%s]\", event.getClass());\n    }\n  }\n","realPath":"extensions-contrib/graphite-emitter/src/main/java/org/apache/druid/emitter/graphite/GraphiteEmitter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"2cdce2e2a6111acdd8fffd4ef61edc1c89f187bf","commitMessage":"@@@Add RequestLogEventBuilderFactory (#6477)\n\nThis PR allows to control the fields in `RequestLogEvent`.  emitted in `EmittingRequestLogger`. In our case.  we want to get rid of the `intervals` fields of the query objects that are a part of `DefaultRequestLogEvent`. They are enormous (thousands of segments) and not useful.\n\nRelated to #5522.  FYI @a2l007.","date":"2018-11-01 05:24:37","modifiedFileCount":"4","status":"M","submitter":"Roman Leventov"},{"authorTime":"2020-08-29 02:38:50","codes":[{"authorDate":"2020-08-29 02:38:50","commitOrder":3,"curCode":"  public void emit(Event event)\n  {\n    if (!started.get()) {\n      throw new ISE(\"Emit called unexpectedly before service start\");\n    }\n    if (event instanceof ServiceMetricEvent) {\n      final TimelineMetric timelineEvent = timelineMetricConverter.druidEventToTimelineMetric((ServiceMetricEvent) event);\n      if (timelineEvent == null) {\n        return;\n      }\n      try {\n        final boolean isSuccessful = eventsQueue.offer(\n            timelineEvent,\n            config.getEmitWaitTime(),\n            TimeUnit.MILLISECONDS\n        );\n        if (!isSuccessful) {\n          if (countLostEvents.getAndIncrement() % 1000 == 0) {\n            log.error(\n                \"Lost total of [%s] events because of emitter queue is full. Please increase the capacity or/and the consumer frequency\",\n                countLostEvents.get()\n            );\n          }\n        }\n      }\n      catch (InterruptedException e) {\n        log.error(e, \"got interrupted with message [%s]\", e.getMessage());\n        Thread.currentThread().interrupt();\n      }\n    } else if (event instanceof AlertEvent) {\n      for (Emitter emitter : emitterList) {\n        emitter.emit(event);\n      }\n    } else {\n      throw new ISE(\"unknown event type [%s]\", event.getClass());\n    }\n  }\n","date":"2020-08-29 02:38:50","endLine":143,"groupId":"103931","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"emit","params":"(Eventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6b/4bbd5e5be0be49299bd4137196ccd0bfb7bea1.src","preCode":"  public void emit(Event event)\n  {\n    if (!started.get()) {\n      throw new ISE(\"WTF emit was called while service is not started yet\");\n    }\n    if (event instanceof ServiceMetricEvent) {\n      final TimelineMetric timelineEvent = timelineMetricConverter.druidEventToTimelineMetric((ServiceMetricEvent) event);\n      if (timelineEvent == null) {\n        return;\n      }\n      try {\n        final boolean isSuccessful = eventsQueue.offer(\n            timelineEvent,\n            config.getEmitWaitTime(),\n            TimeUnit.MILLISECONDS\n        );\n        if (!isSuccessful) {\n          if (countLostEvents.getAndIncrement() % 1000 == 0) {\n            log.error(\n                \"Lost total of [%s] events because of emitter queue is full. Please increase the capacity or/and the consumer frequency\",\n                countLostEvents.get()\n            );\n          }\n        }\n      }\n      catch (InterruptedException e) {\n        log.error(e, \"got interrupted with message [%s]\", e.getMessage());\n        Thread.currentThread().interrupt();\n      }\n    } else if (event instanceof AlertEvent) {\n      for (Emitter emitter : emitterList) {\n        emitter.emit(event);\n      }\n    } else {\n      throw new ISE(\"unknown event type [%s]\", event.getClass());\n    }\n  }\n","realPath":"extensions-contrib/ambari-metrics-emitter/src/main/java/org/apache/druid/emitter/ambari/metrics/AmbariMetricsEmitter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-08-29 02:38:50","commitOrder":3,"curCode":"  public void emit(Event event)\n  {\n    if (!started.get()) {\n      throw new ISE(\"Emit called unexpectedly before service start\");\n    }\n    if (event instanceof ServiceMetricEvent) {\n      final GraphiteEvent graphiteEvent = graphiteEventConverter.druidEventToGraphite((ServiceMetricEvent) event);\n      if (graphiteEvent == null) {\n        return;\n      }\n      try {\n        final boolean isSuccessful = eventsQueue.offer(\n            graphiteEvent,\n            graphiteEmitterConfig.getEmitWaitTime(),\n            TimeUnit.MILLISECONDS\n        );\n        if (!isSuccessful) {\n          if (countLostEvents.getAndIncrement() % 1000 == 0) {\n            log.error(\n                \"Lost total of [%s] events because of emitter queue is full. Please increase the capacity or/and the consumer frequency\",\n                countLostEvents.get()\n            );\n          }\n        }\n      }\n      catch (InterruptedException e) {\n        log.error(e, \"got interrupted with message [%s]\", e.getMessage());\n        Thread.currentThread().interrupt();\n      }\n    } else if (event instanceof RequestLogEvent) {\n      for (Emitter emitter : requestLogEmitters) {\n        emitter.emit(event);\n      }\n    } else if (!alertEmitters.isEmpty() && event instanceof AlertEvent) {\n      for (Emitter emitter : alertEmitters) {\n        emitter.emit(event);\n      }\n    } else if (event instanceof AlertEvent) {\n      AlertEvent alertEvent = (AlertEvent) event;\n      log.error(\n          \"The following alert is dropped, description is [%s], severity is [%s]\",\n          alertEvent.getDescription(), alertEvent.getSeverity()\n      );\n    } else {\n      log.error(\"unknown event type [%s]\", event.getClass());\n    }\n  }\n","date":"2020-08-29 02:38:50","endLine":145,"groupId":"103931","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"emit","params":"(Eventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b3/739ab9d15f8ed68cdd6052db2d1e18071c1740.src","preCode":"  public void emit(Event event)\n  {\n    if (!started.get()) {\n      throw new ISE(\"WTF emit was called while service is not started yet\");\n    }\n    if (event instanceof ServiceMetricEvent) {\n      final GraphiteEvent graphiteEvent = graphiteEventConverter.druidEventToGraphite((ServiceMetricEvent) event);\n      if (graphiteEvent == null) {\n        return;\n      }\n      try {\n        final boolean isSuccessful = eventsQueue.offer(\n            graphiteEvent,\n            graphiteEmitterConfig.getEmitWaitTime(),\n            TimeUnit.MILLISECONDS\n        );\n        if (!isSuccessful) {\n          if (countLostEvents.getAndIncrement() % 1000 == 0) {\n            log.error(\n                \"Lost total of [%s] events because of emitter queue is full. Please increase the capacity or/and the consumer frequency\",\n                countLostEvents.get()\n            );\n          }\n        }\n      }\n      catch (InterruptedException e) {\n        log.error(e, \"got interrupted with message [%s]\", e.getMessage());\n        Thread.currentThread().interrupt();\n      }\n    } else if (event instanceof RequestLogEvent) {\n      for (Emitter emitter : requestLogEmitters) {\n        emitter.emit(event);\n      }\n    } else if (!alertEmitters.isEmpty() && event instanceof AlertEvent) {\n      for (Emitter emitter : alertEmitters) {\n        emitter.emit(event);\n      }\n    } else if (event instanceof AlertEvent) {\n      AlertEvent alertEvent = (AlertEvent) event;\n      log.error(\n          \"The following alert is dropped, description is [%s], severity is [%s]\",\n          alertEvent.getDescription(), alertEvent.getSeverity()\n      );\n    } else {\n      log.error(\"unknown event type [%s]\", event.getClass());\n    }\n  }\n","realPath":"extensions-contrib/graphite-emitter/src/main/java/org/apache/druid/emitter/graphite/GraphiteEmitter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"8ab19793043c65bd79315de6fb26683f561a8a58","commitMessage":"@@@Remove implied profanity from error messages. (#10270)\n\ni.e. WTF.  WTH.","date":"2020-08-29 02:38:50","modifiedFileCount":"76","status":"M","submitter":"Gian Merlino"}]
