[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void setUp()\n  {\n    inventoryView = EasyMock.createStrictMock(InventoryView.class);\n    server = EasyMock.createStrictMock(DruidServer.class);\n    request = EasyMock.createStrictMock(HttpServletRequest.class);\n\n    dataSegmentList = new ArrayList<>();\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-01T00:00:00.000Z/P1D\"),\n            null,\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            20\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-22T00:00:00.000Z/P1D\"),\n            null,\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            10\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource2\",\n            Intervals.of(\"2010-01-01T00:00:00.000Z/P1D\"),\n            null,\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            5\n        )\n    );\n    server = new DruidServer(\"who\", \"host\", null, 1234, ServerType.HISTORICAL, \"tier1\", 0);\n    server.addDataSegment(dataSegmentList.get(0));\n    server.addDataSegment(dataSegmentList.get(1));\n    server.addDataSegment(dataSegmentList.get(2));\n  }\n","date":"2018-08-31 00:56:26","endLine":103,"groupId":"5774","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/79/0cde544c8767ea24c42f42726f58cc093768f1.src","preCode":"  public void setUp()\n  {\n    inventoryView = EasyMock.createStrictMock(InventoryView.class);\n    server = EasyMock.createStrictMock(DruidServer.class);\n    request = EasyMock.createStrictMock(HttpServletRequest.class);\n\n    dataSegmentList = new ArrayList<>();\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-01T00:00:00.000Z/P1D\"),\n            null,\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            20\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-22T00:00:00.000Z/P1D\"),\n            null,\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            10\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource2\",\n            Intervals.of(\"2010-01-01T00:00:00.000Z/P1D\"),\n            null,\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            5\n        )\n    );\n    server = new DruidServer(\"who\", \"host\", null, 1234, ServerType.HISTORICAL, \"tier1\", 0);\n    server.addDataSegment(dataSegmentList.get(0));\n    server.addDataSegment(dataSegmentList.get(1));\n    server.addDataSegment(dataSegmentList.get(2));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/IntervalsResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void setUp()\n  {\n    request = EasyMock.createStrictMock(HttpServletRequest.class);\n    inventoryView = EasyMock.createStrictMock(CoordinatorServerView.class);\n    server = EasyMock.niceMock(DruidServer.class);\n    dataSegmentList = new ArrayList<>();\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-01/P1D\"),\n            null,\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            10\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-22/P1D\"),\n            null,\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            20\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource2\",\n            Intervals.of(\"2010-01-01/P1D\"),\n            null,\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            30\n        )\n    );\n    listDataSources = new ArrayList<>();\n    listDataSources.add(\n        new DruidDataSource(\"datasource1\", new HashMap<>()).addSegment(dataSegmentList.get(0))\n    );\n    listDataSources.add(\n        new DruidDataSource(\"datasource2\", new HashMap<>()).addSegment(dataSegmentList.get(1))\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":119,"groupId":"11929","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/da/95b0baa58c65e55834e9ea011a350624e10f60.src","preCode":"  public void setUp()\n  {\n    request = EasyMock.createStrictMock(HttpServletRequest.class);\n    inventoryView = EasyMock.createStrictMock(CoordinatorServerView.class);\n    server = EasyMock.niceMock(DruidServer.class);\n    dataSegmentList = new ArrayList<>();\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-01/P1D\"),\n            null,\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            10\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-22/P1D\"),\n            null,\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            20\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource2\",\n            Intervals.of(\"2010-01-01/P1D\"),\n            null,\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            30\n        )\n    );\n    listDataSources = new ArrayList<>();\n    listDataSources.add(\n        new DruidDataSource(\"datasource1\", new HashMap<>()).addSegment(dataSegmentList.get(0))\n    );\n    listDataSources.add(\n        new DruidDataSource(\"datasource2\", new HashMap<>()).addSegment(dataSegmentList.get(1))\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DatasourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-01-22 03:11:10","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  public void setUp()\n  {\n    inventoryView = EasyMock.createStrictMock(InventoryView.class);\n    server = EasyMock.createStrictMock(DruidServer.class);\n    request = EasyMock.createStrictMock(HttpServletRequest.class);\n\n    dataSegmentList = new ArrayList<>();\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-01T00:00:00.000Z/P1D\"),\n            \"\",\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            20\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-22T00:00:00.000Z/P1D\"),\n            \"\",\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            10\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource2\",\n            Intervals.of(\"2010-01-01T00:00:00.000Z/P1D\"),\n            \"\",\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            5\n        )\n    );\n    server = new DruidServer(\"who\", \"host\", null, 1234, ServerType.HISTORICAL, \"tier1\", 0);\n    server.addDataSegment(dataSegmentList.get(0));\n    server.addDataSegment(dataSegmentList.get(1));\n    server.addDataSegment(dataSegmentList.get(2));\n  }\n","date":"2019-01-22 03:11:10","endLine":103,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/137fa1814a7f982911a29c9206d1d27e238713.src","preCode":"  public void setUp()\n  {\n    inventoryView = EasyMock.createStrictMock(InventoryView.class);\n    server = EasyMock.createStrictMock(DruidServer.class);\n    request = EasyMock.createStrictMock(HttpServletRequest.class);\n\n    dataSegmentList = new ArrayList<>();\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-01T00:00:00.000Z/P1D\"),\n            null,\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            20\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-22T00:00:00.000Z/P1D\"),\n            null,\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            10\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource2\",\n            Intervals.of(\"2010-01-01T00:00:00.000Z/P1D\"),\n            null,\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            5\n        )\n    );\n    server = new DruidServer(\"who\", \"host\", null, 1234, ServerType.HISTORICAL, \"tier1\", 0);\n    server.addDataSegment(dataSegmentList.get(0));\n    server.addDataSegment(dataSegmentList.get(1));\n    server.addDataSegment(dataSegmentList.get(2));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/IntervalsResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  public void setUp()\n  {\n    request = EasyMock.createStrictMock(HttpServletRequest.class);\n    inventoryView = EasyMock.createStrictMock(CoordinatorServerView.class);\n    server = EasyMock.niceMock(DruidServer.class);\n    dataSegmentList = new ArrayList<>();\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-01/P1D\"),\n            \"\",\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            10\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-22/P1D\"),\n            \"\",\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            20\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource2\",\n            Intervals.of(\"2010-01-01/P1D\"),\n            \"\",\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            30\n        )\n    );\n    listDataSources = new ArrayList<>();\n    listDataSources.add(\n        new DruidDataSource(\"datasource1\", new HashMap<>()).addSegment(dataSegmentList.get(0))\n    );\n    listDataSources.add(\n        new DruidDataSource(\"datasource2\", new HashMap<>()).addSegment(dataSegmentList.get(1))\n    );\n  }\n","date":"2019-01-22 03:11:10","endLine":136,"groupId":"11316","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/11/6c20bb86e0cc9f4a9760089ab7b792270f364c.src","preCode":"  public void setUp()\n  {\n    request = EasyMock.createStrictMock(HttpServletRequest.class);\n    inventoryView = EasyMock.createStrictMock(CoordinatorServerView.class);\n    server = EasyMock.niceMock(DruidServer.class);\n    dataSegmentList = new ArrayList<>();\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-01/P1D\"),\n            null,\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            10\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-22/P1D\"),\n            null,\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            20\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource2\",\n            Intervals.of(\"2010-01-01/P1D\"),\n            null,\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            30\n        )\n    );\n    listDataSources = new ArrayList<>();\n    listDataSources.add(\n        new DruidDataSource(\"datasource1\", new HashMap<>()).addSegment(dataSegmentList.get(0))\n    );\n    listDataSources.add(\n        new DruidDataSource(\"datasource2\", new HashMap<>()).addSegment(dataSegmentList.get(1))\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"8eae26fd4e7572060d112864dd3d5f6a865b9c89","commitMessage":"@@@Introduce SegmentId class (#6370)\n\n* Introduce SegmentId class\n\n* tmp\n\n* Fix SelectQueryRunnerTest\n\n* Fix indentation\n\n* Fixes\n\n* Remove Comparators.inverse() tests\n\n* Refinements\n\n* Fix tests\n\n* Fix more tests\n\n* Remove duplicate DataSegmentTest.  fixes #6064\n\n* SegmentDescriptor doc\n\n* Fix SQLMetadataStorageUpdaterJobHandler\n\n* Fix DataSegment deserialization for ignoring id\n\n* Add comments\n\n* More comments\n\n* Address more comments\n\n* Fix compilation\n\n* Restore segment2 in SystemSchemaTest according to a comment\n\n* Fix style\n\n* fix testServerSegmentsTable\n\n* Fix compilation\n\n* Add comments about why SegmentId and SegmentIdWithShardSpec are separate classes\n\n* Fix SystemSchemaTest\n\n* Fix style\n\n* Compare SegmentDescriptor with SegmentId in Javadoc and comments rather than with DataSegment\n\n* Remove a link.  see https://youtrack.jetbrains.com/issue/IDEA-205164\n\n* Fix compilation\n","date":"2019-01-22 03:11:10","modifiedFileCount":"308","status":"M","submitter":"Roman Leventov"},{"authorTime":"2020-01-28 03:24:29","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":3,"curCode":"  public void setUp()\n  {\n    inventoryView = EasyMock.createStrictMock(InventoryView.class);\n    server = EasyMock.createStrictMock(DruidServer.class);\n    request = EasyMock.createStrictMock(HttpServletRequest.class);\n\n    dataSegmentList = new ArrayList<>();\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-01T00:00:00.000Z/P1D\"),\n            \"\",\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            20\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-22T00:00:00.000Z/P1D\"),\n            \"\",\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            10\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource2\",\n            Intervals.of(\"2010-01-01T00:00:00.000Z/P1D\"),\n            \"\",\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            5\n        )\n    );\n    server = new DruidServer(\"who\", \"host\", null, 1234, ServerType.HISTORICAL, \"tier1\", 0);\n    server.addDataSegment(dataSegmentList.get(0));\n    server.addDataSegment(dataSegmentList.get(1));\n    server.addDataSegment(dataSegmentList.get(2));\n  }\n","date":"2019-01-22 03:11:10","endLine":103,"groupId":"10561","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/137fa1814a7f982911a29c9206d1d27e238713.src","preCode":"  public void setUp()\n  {\n    inventoryView = EasyMock.createStrictMock(InventoryView.class);\n    server = EasyMock.createStrictMock(DruidServer.class);\n    request = EasyMock.createStrictMock(HttpServletRequest.class);\n\n    dataSegmentList = new ArrayList<>();\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-01T00:00:00.000Z/P1D\"),\n            \"\",\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            20\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-22T00:00:00.000Z/P1D\"),\n            \"\",\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            10\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource2\",\n            Intervals.of(\"2010-01-01T00:00:00.000Z/P1D\"),\n            \"\",\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            5\n        )\n    );\n    server = new DruidServer(\"who\", \"host\", null, 1234, ServerType.HISTORICAL, \"tier1\", 0);\n    server.addDataSegment(dataSegmentList.get(0));\n    server.addDataSegment(dataSegmentList.get(1));\n    server.addDataSegment(dataSegmentList.get(2));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/IntervalsResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2020-01-28 03:24:29","commitOrder":3,"curCode":"  public void setUp()\n  {\n    request = EasyMock.createStrictMock(HttpServletRequest.class);\n    inventoryView = EasyMock.createStrictMock(CoordinatorServerView.class);\n    server = EasyMock.niceMock(DruidServer.class);\n    dataSegmentList = new ArrayList<>();\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-01/P1D\"),\n            \"\",\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            10\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-22/P1D\"),\n            \"\",\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            20\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource2\",\n            Intervals.of(\"2010-01-01/P1D\"),\n            \"\",\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            30\n        )\n    );\n    listDataSources = new ArrayList<>();\n    listDataSources.add(\n        new DruidDataSource(\"datasource1\", new HashMap<>()).addSegment(dataSegmentList.get(0))\n    );\n    listDataSources.add(\n        new DruidDataSource(\"datasource2\", new HashMap<>()).addSegment(dataSegmentList.get(1))\n    );\n    segmentsMetadataManager = EasyMock.createMock(SegmentsMetadataManager.class);\n  }\n","date":"2020-01-28 03:24:29","endLine":142,"groupId":"10561","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/10/a7f97300c93e41c58f8dee06e5d7dc9f50b7cb.src","preCode":"  public void setUp()\n  {\n    request = EasyMock.createStrictMock(HttpServletRequest.class);\n    inventoryView = EasyMock.createStrictMock(CoordinatorServerView.class);\n    server = EasyMock.niceMock(DruidServer.class);\n    dataSegmentList = new ArrayList<>();\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-01/P1D\"),\n            \"\",\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            10\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource1\",\n            Intervals.of(\"2010-01-22/P1D\"),\n            \"\",\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            20\n        )\n    );\n    dataSegmentList.add(\n        new DataSegment(\n            \"datasource2\",\n            Intervals.of(\"2010-01-01/P1D\"),\n            \"\",\n            null,\n            null,\n            null,\n            null,\n            0x9,\n            30\n        )\n    );\n    listDataSources = new ArrayList<>();\n    listDataSources.add(\n        new DruidDataSource(\"datasource1\", new HashMap<>()).addSegment(dataSegmentList.get(0))\n    );\n    listDataSources.add(\n        new DruidDataSource(\"datasource2\", new HashMap<>()).addSegment(dataSegmentList.get(1))\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"b9186f8f9ff2ff52aceda42bc5f24ffd47a7d17e","commitMessage":"@@@Reconcile terminology and method naming to 'used/unused segments'; Rename MetadataSegmentManager to MetadataSegmentsManager (#7306)\n\n* Reconcile terminology and method naming to 'used/unused segments'; Don't use terms 'enable/disable data source'; Rename MetadataSegmentManager to MetadataSegments; Make REST API methods which mark segments as used/unused to return server error instead of an empty response in case of error\n\n* Fix brace\n\n* Import order\n\n* Rename withKillDataSourceWhitelist to withSpecificDataSourcesToKill\n\n* Fix tests\n\n* Fix tests by adding proper methods without interval parameters to IndexerMetadataStorageCoordinator instead of hacking with Intervals.ETERNITY\n\n* More aligned names of DruidCoordinatorHelpers.  rename several CoordinatorDynamicConfig parameters\n\n* Rename ClientCompactTaskQuery to ClientCompactionTaskQuery for consistency with CompactionTask; ClientCompactQueryTuningConfig to ClientCompactionTaskQueryTuningConfig\n\n* More variable and method renames\n\n* Rename MetadataSegments to SegmentsMetadata\n\n* Javadoc update\n\n* Simplify SegmentsMetadata.getUnusedSegmentIntervals().  more javadocs\n\n* Update Javadoc of VersionedIntervalTimeline.iterateAllObjects()\n\n* Reorder imports\n\n* Rename SegmentsMetadata.tryMark... methods to mark... and make them to return boolean and the numbers of segments changed and relay exceptions to callers\n\n* Complete merge\n\n* Add CollectionUtils.newTreeSet(); Refactor DruidCoordinatorRuntimeParams creation in tests\n\n* Remove MetadataSegmentManager\n\n* Rename millisLagSinceCoordinatorBecomesLeaderBeforeCanMarkAsUnusedOvershadowedSegments to leadingTimeMillisBeforeCanMarkAsUnusedOvershadowedSegments\n\n* Fix tests.  refactor DruidCluster creation in tests into DruidClusterBuilder\n\n* Fix inspections\n\n* Fix SQLMetadataSegmentManagerEmptyTest and rename it to SqlSegmentsMetadataEmptyTest\n\n* Rename SegmentsAndMetadata to SegmentsAndCommitMetadata to reduce the similarity with SegmentsMetadata; Rename some methods\n\n* Rename DruidCoordinatorHelper to CoordinatorDuty.  refactor DruidCoordinator\n\n* Unused import\n\n* Optimize imports\n\n* Rename IndexerSQLMetadataStorageCoordinator.getDataSourceMetadata() to retrieveDataSourceMetadata()\n\n* Unused import\n\n* Update terminology in datasource-view.tsx\n\n* Fix label in datasource-view.spec.tsx.snap\n\n* Fix lint errors in datasource-view.tsx\n\n* Doc improvements\n\n* Another attempt to please TSLint\n\n* Another attempt to please TSLint\n\n* Style fixes\n\n* Fix IndexerSQLMetadataStorageCoordinator.createUsedSegmentsSqlQueryForIntervals() (wrong merge)\n\n* Try to fix docs build issue\n\n* Javadoc and spelling fixes\n\n* Rename SegmentsMetadata to SegmentsMetadataManager.  address other comments\n\n* Address more comments\n","date":"2020-01-28 03:24:29","modifiedFileCount":"127","status":"M","submitter":"Roman Leventov"}]
