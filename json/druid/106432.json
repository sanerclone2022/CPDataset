[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValue1()\n  {\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(\n            new DefaultDimensionSpec(\"placementish\", \"alias\"),\n            new DefaultDimensionSpec(\"quality\", \"quality\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.allGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"\");\n  }\n","date":"2018-08-31 00:56:26","endLine":1068,"groupId":"17741","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleDimensionsOneOfWhichIsMultiValue1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/76/97506dd7d87c44ca1fada8cf624753ca12a2ea.src","preCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValue1()\n  {\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(\n            new DefaultDimensionSpec(\"placementish\", \"alias\"),\n            new DefaultDimensionSpec(\"quality\", \"quality\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.allGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":852,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValueDifferentOrder()\n  {\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"placementish\", \"alias\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.allGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"\");\n  }\n","date":"2018-08-31 00:56:26","endLine":1287,"groupId":"17741","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleDimensionsOneOfWhichIsMultiValueDifferentOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/76/97506dd7d87c44ca1fada8cf624753ca12a2ea.src","preCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValueDifferentOrder()\n  {\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"placementish\", \"alias\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.allGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1071,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-12-12 00:05:50","codes":[{"authorDate":"2018-12-12 00:05:50","commitOrder":2,"curCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValue1()\n  {\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(\n            new DefaultDimensionSpec(\"placementish\", \"alias\"),\n            new DefaultDimensionSpec(\"quality\", \"quality\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.allGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"one-multi-value-dim\");\n  }\n","date":"2018-12-12 00:05:50","endLine":1068,"groupId":"17741","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleDimensionsOneOfWhichIsMultiValue1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/64/6e2d33a4e2dcc89f87c320ca62cdd241ff9479.src","preCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValue1()\n  {\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(\n            new DefaultDimensionSpec(\"placementish\", \"alias\"),\n            new DefaultDimensionSpec(\"quality\", \"quality\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.allGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":852,"status":"M"},{"authorDate":"2018-12-12 00:05:50","commitOrder":2,"curCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValueDifferentOrder()\n  {\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"placementish\", \"alias\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.allGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"one-multi-value-dim-different-order\");\n  }\n","date":"2018-12-12 00:05:50","endLine":1287,"groupId":"17741","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleDimensionsOneOfWhichIsMultiValueDifferentOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/64/6e2d33a4e2dcc89f87c320ca62cdd241ff9479.src","preCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValueDifferentOrder()\n  {\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"placementish\", \"alias\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.allGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1071,"status":"M"}],"commitId":"86e3ae5b48bca7cbb9bf05e9e66d013f34dabf16","commitMessage":"@@@Add fail message (#6720)\n\n","date":"2018-12-12 00:05:50","modifiedFileCount":"4","status":"M","submitter":"Atul Mohan"},{"authorTime":"2019-07-13 03:54:07","codes":[{"authorDate":"2019-07-13 03:54:07","commitOrder":3,"curCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValue1()\n  {\n    \r\n    cannotVectorize();\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(\n            new DefaultDimensionSpec(\"placementish\", \"alias\"),\n            new DefaultDimensionSpec(\"quality\", \"quality\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.allGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"one-multi-value-dim\");\n  }\n","date":"2019-07-13 03:54:07","endLine":1525,"groupId":"17741","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleDimensionsOneOfWhichIsMultiValue1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3e/b69c0dda419ff55b78ba723f929d5a15f00f96.src","preCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValue1()\n  {\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(\n            new DefaultDimensionSpec(\"placementish\", \"alias\"),\n            new DefaultDimensionSpec(\"quality\", \"quality\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.allGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"one-multi-value-dim\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1307,"status":"M"},{"authorDate":"2019-07-13 03:54:07","commitOrder":3,"curCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValueDifferentOrder()\n  {\n    \r\n    cannotVectorize();\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"placementish\", \"alias\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.allGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"one-multi-value-dim-different-order\");\n  }\n","date":"2019-07-13 03:54:07","endLine":1746,"groupId":"17741","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleDimensionsOneOfWhichIsMultiValueDifferentOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3e/b69c0dda419ff55b78ba723f929d5a15f00f96.src","preCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValueDifferentOrder()\n  {\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"placementish\", \"alias\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.allGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"one-multi-value-dim-different-order\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1528,"status":"M"}],"commitId":"ffa25b78321a56b210a8ad5b6c9ca61b3b737153","commitMessage":"@@@Query vectorization. (#6794)\n\n* Benchmarks: New SqlBenchmark.  add caching & vectorization to some others.\n\n- Introduce a new SqlBenchmark geared towards benchmarking a wide\n  variety of SQL queries. Rename the old SqlBenchmark to\n  SqlVsNativeBenchmark.\n- Add (optional) caching to SegmentGenerator to enable easier\n  benchmarking of larger segments.\n- Add vectorization to FilteredAggregatorBenchmark and GroupByBenchmark.\n\n* Query vectorization.\n\nThis patch includes vectorized timeseries and groupBy engines.  as well\nas some analogs of your favorite Druid classes:\n\n- VectorCursor is like Cursor. (It comes from StorageAdapter.makeVectorCursor.)\n- VectorColumnSelectorFactory is like ColumnSelectorFactory.  and it has\n  methods to create analogs of the column selectors you know and love.\n- VectorOffset and ReadableVectorOffset are like Offset and ReadableOffset.\n- VectorAggregator is like BufferAggregator.\n- VectorValueMatcher is like ValueMatcher.\n\nThere are some noticeable differences between vectorized and regular\nexecution:\n\n- Unlike regular cursors.  vector cursors do not understand time\n  granularity. They expect query engines to handle this on their own. \n  which a new VectorCursorGranularizer class helps with. This is to\n  avoid too much batch-splitting and to respect the fact that vector\n  selectors are somewhat more heavyweight than regular selectors.\n- Unlike FilteredOffset.  FilteredVectorOffset does not leverage indexes\n  for filters that might partially support them (like an OR of one\n  filter that supports indexing and another that doesn't). I'm not sure\n  that this behavior is desirable anyway (it is potentially too eager)\n  but.  at any rate.  it'd be better to harmonize it between the two\n  classes. Potentially they should both do some different thing that\n  is smarter than what either of them is doing right now.\n- When vector cursors are created by QueryableIndexCursorSequenceBuilder. \n  they use a morphing binary-then-linear search to find their start and\n  end rows.  rather than linear search.\n\nLimitations in this patch are:\n\n- Only timeseries and groupBy have vectorized engines.\n- GroupBy doesn't handle multi-value dimensions yet.\n- Vector cursors cannot handle virtual columns or descending order.\n- Only some filters have vectorized matchers: \"selector\".  \"bound\".  \"in\". \n  \"like\".  \"regex\".  \"search\".  \"and\".  \"or\".  and \"not\".\n- Only some aggregators have vectorized implementations: \"count\". \n  \"doubleSum\".  \"floatSum\".  \"longSum\".  \"hyperUnique\".  and \"filtered\".\n- Dimension specs other than \"default\" don't work yet (no extraction\n  functions or filtered dimension specs).\n\nCurrently.  the testing strategy includes adding vectorization-enabled\ntests to TimeseriesQueryRunnerTest.  GroupByQueryRunnerTest. \nGroupByTimeseriesQueryRunnerTest.  CalciteQueryTest.  and all of the\nfiltering tests that extend BaseFilterTest. In all of those classes. \nthere are some test cases that don't support vectorization. They are\nmarked by special function calls like \"cannotVectorize\" or \"skipVectorize\"\nthat tell the test harness to either expect an exception or to skip the\ntest case.\n\nTesting should be expanded in the future -- a project in and of itself.\n\nRelated to #3011.\n\n* WIP\n\n* Adjustments for unused things.\n\n* Adjust javadocs.\n\n* DimensionDictionarySelector adjustments.\n\n* Add \"clone\" to BatchIteratorAdapter.\n\n* ValueMatcher javadocs.\n\n* Fix benchmark.\n\n* Fixups post-merge.\n\n* Expect exception on testGroupByWithStringVirtualColumn for IncrementalIndex.\n\n* BloomDimFilterSqlTest: Tag two non-vectorizable tests.\n\n* Minor adjustments.\n\n* Update surefire.  bump up Xmx in Travis.\n\n* Some more adjustments.\n\n* Javadoc adjustments\n\n* AggregatorAdapters adjustments.\n\n* Additional comments.\n\n* Remove switching search.\n\n* Only missiles.\n","date":"2019-07-13 03:54:07","modifiedFileCount":"143","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-08-01 07:15:12","codes":[{"authorDate":"2019-08-01 07:15:12","commitOrder":4,"curCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValue1()\n  {\n    \r\n    cannotVectorize();\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(\n            new DefaultDimensionSpec(\"placementish\", \"alias\"),\n            new DefaultDimensionSpec(\"quality\", \"quality\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.allGran)\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"one-multi-value-dim\");\n  }\n","date":"2019-08-01 07:15:12","endLine":1587,"groupId":"16748","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleDimensionsOneOfWhichIsMultiValue1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d1/574885a60d20d8c6aaa2ff4f2d57758cf04e59.src","preCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValue1()\n  {\n    \r\n    cannotVectorize();\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(\n            new DefaultDimensionSpec(\"placementish\", \"alias\"),\n            new DefaultDimensionSpec(\"quality\", \"quality\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.allGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"one-multi-value-dim\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1351,"status":"M"},{"authorDate":"2019-08-01 07:15:12","commitOrder":4,"curCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValueDifferentOrder()\n  {\n    \r\n    cannotVectorize();\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"placementish\", \"alias\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.allGran)\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"one-multi-value-dim-different-order\");\n  }\n","date":"2019-08-01 07:15:12","endLine":1826,"groupId":"16748","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleDimensionsOneOfWhichIsMultiValueDifferentOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d1/574885a60d20d8c6aaa2ff4f2d57758cf04e59.src","preCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValueDifferentOrder()\n  {\n    \r\n    cannotVectorize();\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"placementish\", \"alias\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.allGran)\n        .build();\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"one-multi-value-dim-different-order\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1590,"status":"M"}],"commitId":"77297f4e6f2e9d617c96cd46852bb5a772961e85","commitMessage":"@@@GroupBy array-based result rows. (#8196)\n\n* GroupBy array-based result rows.\n\nFixes #8118; see that proposal for details.\n\nOther than the GroupBy changes.  the main other \"interesting\" classes are:\n\n- ResultRow: The array-based result type.\n- BaseQuery: T is no longer required to be Comparable.\n- QueryToolChest: Adds \"decorateObjectMapper\" to enable query-aware serialization\n  and deserialization of result rows (necessary due to their positional nature).\n- QueryResource: Uses the new decoration functionality.\n- DirectDruidClient: Also uses the new decoration functionality.\n- QueryMaker (in Druid SQL): Modifications to read ResultRows.\n\nThese classes weren't changed.  but got some new javadocs:\n\n- BySegmentQueryRunner\n- FinalizeResultsQueryRunner\n- Query\n\n* Adjustments for TC stuff.\n","date":"2019-08-01 07:15:12","modifiedFileCount":"111","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":5,"curCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValue1()\n  {\n    \r\n    cannotVectorize();\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setDimensions(\n            new DefaultDimensionSpec(\"placementish\", \"alias\"),\n            new DefaultDimensionSpec(\"quality\", \"quality\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.ALL_GRAN)\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"one-multi-value-dim\");\n  }\n","date":"2019-08-23 18:13:54","endLine":1580,"groupId":"106432","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleDimensionsOneOfWhichIsMultiValue1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/62/70f6bf822e9df520831f224e31e00bb9d44650.src","preCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValue1()\n  {\n    \r\n    cannotVectorize();\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(\n            new DefaultDimensionSpec(\"placementish\", \"alias\"),\n            new DefaultDimensionSpec(\"quality\", \"quality\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.allGran)\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"one-multi-value-dim\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1344,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":5,"curCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValueDifferentOrder()\n  {\n    \r\n    cannotVectorize();\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setDimensions(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"placementish\", \"alias\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.ALL_GRAN)\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"one-multi-value-dim-different-order\");\n  }\n","date":"2019-08-23 18:13:54","endLine":1819,"groupId":"106432","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleDimensionsOneOfWhichIsMultiValueDifferentOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/62/70f6bf822e9df520831f224e31e00bb9d44650.src","preCode":"  public void testMultipleDimensionsOneOfWhichIsMultiValueDifferentOrder()\n  {\n    \r\n    cannotVectorize();\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(\n            new DefaultDimensionSpec(\"quality\", \"quality\"),\n            new DefaultDimensionSpec(\"placementish\", \"alias\")\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setGranularity(QueryRunnerTestHelper.allGran)\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"a\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"automotive\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            282L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"b\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"business\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            230L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"e\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"entertainment\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            324L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"h\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"health\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            233L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"m\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"mezzanine\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5317L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"n\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"news\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            235L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"p\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"premium\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            6L,\n            \"idx\",\n            5405L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"technology\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            175L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"preferred\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01\",\n            \"quality\",\n            \"travel\",\n            \"alias\",\n            \"t\",\n            \"rows\",\n            2L,\n            \"idx\",\n            245L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"one-multi-value-dim-different-order\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1583,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
