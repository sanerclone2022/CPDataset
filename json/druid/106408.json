[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testShouldOptimizeLexicographic()\n  {\n    \r\n    int cardinality = 1234;\n    int threshold = 4;\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(dataSource)\n        .granularity(allGran)\n        .dimension(marketDimension)\n        .metric(indexMetric)\n        .threshold(threshold)\n        .intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\")\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(Collections.singletonList(addRowsIndexConstant))\n        .build();\n\n    StorageAdapter adapter =\n        makeFakeStorageAdapter(\"2018-05-30T00:00:00Z\", \"2018-05-30T01:00:00Z\", cardinality);\n    DimensionSelector dimSelector = makeFakeDimSelector(cardinality);\n\n    BaseTopNAlgorithm.AggregatorArrayProvider arrayProviderToTest = new BaseTopNAlgorithm.AggregatorArrayProvider(\n        dimSelector,\n        query,\n        cardinality,\n        adapter\n    );\n\n    arrayProviderToTest.ignoreAfterThreshold();\n    Pair<Integer, Integer> thePair = arrayProviderToTest.computeStartEnd(cardinality);\n    Assert.assertEquals(new Integer(0), thePair.lhs);\n    Assert.assertEquals(new Integer(threshold), thePair.rhs);\n  }\n","date":"2018-08-31 00:56:26","endLine":106,"groupId":"17887","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testShouldOptimizeLexicographic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/91/a00e80b05122252aa6e6d815c8f796e8504c75.src","preCode":"  public void testShouldOptimizeLexicographic()\n  {\n    \r\n    int cardinality = 1234;\n    int threshold = 4;\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(dataSource)\n        .granularity(allGran)\n        .dimension(marketDimension)\n        .metric(indexMetric)\n        .threshold(threshold)\n        .intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\")\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(Collections.singletonList(addRowsIndexConstant))\n        .build();\n\n    StorageAdapter adapter =\n        makeFakeStorageAdapter(\"2018-05-30T00:00:00Z\", \"2018-05-30T01:00:00Z\", cardinality);\n    DimensionSelector dimSelector = makeFakeDimSelector(cardinality);\n\n    BaseTopNAlgorithm.AggregatorArrayProvider arrayProviderToTest = new BaseTopNAlgorithm.AggregatorArrayProvider(\n        dimSelector,\n        query,\n        cardinality,\n        adapter\n    );\n\n    arrayProviderToTest.ignoreAfterThreshold();\n    Pair<Integer, Integer> thePair = arrayProviderToTest.computeStartEnd(cardinality);\n    Assert.assertEquals(new Integer(0), thePair.lhs);\n    Assert.assertEquals(new Integer(threshold), thePair.rhs);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNMetricSpecOptimizationsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testAlsoShouldNotOptimizeLexicographic()\n  {\n    \r\n    int cardinality = 1234;\n    int threshold = 4;\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(dataSource)\n        .granularity(allGran)\n        .dimension(marketDimension)\n        .filters(qualityDimension, \"entertainment\")\n        .metric(indexMetric)\n        .threshold(threshold)\n        .intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\")\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(Collections.singletonList(addRowsIndexConstant))\n        .build();\n\n    StorageAdapter adapter =\n        makeFakeStorageAdapter(\"2018-05-30T00:00:00Z\", \"2018-05-30T01:00:00Z\", cardinality);\n    DimensionSelector dimSelector = makeFakeDimSelector(cardinality);\n\n    BaseTopNAlgorithm.AggregatorArrayProvider arrayProviderToTest = new BaseTopNAlgorithm.AggregatorArrayProvider(\n        dimSelector,\n        query,\n        cardinality,\n        adapter\n    );\n\n    arrayProviderToTest.ignoreAfterThreshold();\n    Pair<Integer, Integer> thePair = arrayProviderToTest.computeStartEnd(cardinality);\n    Assert.assertEquals(new Integer(0), thePair.lhs);\n    Assert.assertEquals(new Integer(cardinality), thePair.rhs);\n  }\n","date":"2018-08-31 00:56:26","endLine":241,"groupId":"17887","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAlsoShouldNotOptimizeLexicographic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/91/a00e80b05122252aa6e6d815c8f796e8504c75.src","preCode":"  public void testAlsoShouldNotOptimizeLexicographic()\n  {\n    \r\n    int cardinality = 1234;\n    int threshold = 4;\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(dataSource)\n        .granularity(allGran)\n        .dimension(marketDimension)\n        .filters(qualityDimension, \"entertainment\")\n        .metric(indexMetric)\n        .threshold(threshold)\n        .intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\")\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(Collections.singletonList(addRowsIndexConstant))\n        .build();\n\n    StorageAdapter adapter =\n        makeFakeStorageAdapter(\"2018-05-30T00:00:00Z\", \"2018-05-30T01:00:00Z\", cardinality);\n    DimensionSelector dimSelector = makeFakeDimSelector(cardinality);\n\n    BaseTopNAlgorithm.AggregatorArrayProvider arrayProviderToTest = new BaseTopNAlgorithm.AggregatorArrayProvider(\n        dimSelector,\n        query,\n        cardinality,\n        adapter\n    );\n\n    arrayProviderToTest.ignoreAfterThreshold();\n    Pair<Integer, Integer> thePair = arrayProviderToTest.computeStartEnd(cardinality);\n    Assert.assertEquals(new Integer(0), thePair.lhs);\n    Assert.assertEquals(new Integer(cardinality), thePair.rhs);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNMetricSpecOptimizationsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-07-07 00:33:12","codes":[{"authorDate":"2019-07-07 00:33:12","commitOrder":2,"curCode":"  public void testShouldOptimizeLexicographic()\n  {\n    \r\n    int cardinality = 1234;\n    int threshold = 4;\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.indexMetric)\n        .threshold(threshold)\n        .intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\")\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    QueryRunnerTestHelper.commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(Collections.singletonList(QueryRunnerTestHelper.addRowsIndexConstant))\n        .build();\n\n    StorageAdapter adapter =\n        makeFakeStorageAdapter(\"2018-05-30T00:00:00Z\", \"2018-05-30T01:00:00Z\", cardinality);\n    DimensionSelector dimSelector = makeFakeDimSelector(cardinality);\n\n    BaseTopNAlgorithm.AggregatorArrayProvider arrayProviderToTest = new BaseTopNAlgorithm.AggregatorArrayProvider(\n        dimSelector,\n        query,\n        cardinality,\n        adapter\n    );\n\n    arrayProviderToTest.ignoreAfterThreshold();\n    Pair<Integer, Integer> thePair = arrayProviderToTest.computeStartEnd(cardinality);\n    Assert.assertEquals(new Integer(0), thePair.lhs);\n    Assert.assertEquals(new Integer(threshold), thePair.rhs);\n  }\n","date":"2019-07-07 00:33:12","endLine":99,"groupId":"11992","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testShouldOptimizeLexicographic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/215914a5d58e436b3ada5f169744ce8310a1ff.src","preCode":"  public void testShouldOptimizeLexicographic()\n  {\n    \r\n    int cardinality = 1234;\n    int threshold = 4;\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(dataSource)\n        .granularity(allGran)\n        .dimension(marketDimension)\n        .metric(indexMetric)\n        .threshold(threshold)\n        .intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\")\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(Collections.singletonList(addRowsIndexConstant))\n        .build();\n\n    StorageAdapter adapter =\n        makeFakeStorageAdapter(\"2018-05-30T00:00:00Z\", \"2018-05-30T01:00:00Z\", cardinality);\n    DimensionSelector dimSelector = makeFakeDimSelector(cardinality);\n\n    BaseTopNAlgorithm.AggregatorArrayProvider arrayProviderToTest = new BaseTopNAlgorithm.AggregatorArrayProvider(\n        dimSelector,\n        query,\n        cardinality,\n        adapter\n    );\n\n    arrayProviderToTest.ignoreAfterThreshold();\n    Pair<Integer, Integer> thePair = arrayProviderToTest.computeStartEnd(cardinality);\n    Assert.assertEquals(new Integer(0), thePair.lhs);\n    Assert.assertEquals(new Integer(threshold), thePair.rhs);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNMetricSpecOptimizationsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2019-07-07 00:33:12","commitOrder":2,"curCode":"  public void testAlsoShouldNotOptimizeLexicographic()\n  {\n    \r\n    int cardinality = 1234;\n    int threshold = 4;\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .filters(QueryRunnerTestHelper.qualityDimension, \"entertainment\")\n        .metric(QueryRunnerTestHelper.indexMetric)\n        .threshold(threshold)\n        .intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\")\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    QueryRunnerTestHelper.commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(Collections.singletonList(QueryRunnerTestHelper.addRowsIndexConstant))\n        .build();\n\n    StorageAdapter adapter =\n        makeFakeStorageAdapter(\"2018-05-30T00:00:00Z\", \"2018-05-30T01:00:00Z\", cardinality);\n    DimensionSelector dimSelector = makeFakeDimSelector(cardinality);\n\n    BaseTopNAlgorithm.AggregatorArrayProvider arrayProviderToTest = new BaseTopNAlgorithm.AggregatorArrayProvider(\n        dimSelector,\n        query,\n        cardinality,\n        adapter\n    );\n\n    arrayProviderToTest.ignoreAfterThreshold();\n    Pair<Integer, Integer> thePair = arrayProviderToTest.computeStartEnd(cardinality);\n    Assert.assertEquals(new Integer(0), thePair.lhs);\n    Assert.assertEquals(new Integer(cardinality), thePair.rhs);\n  }\n","date":"2019-07-07 00:33:12","endLine":234,"groupId":"11992","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAlsoShouldNotOptimizeLexicographic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/215914a5d58e436b3ada5f169744ce8310a1ff.src","preCode":"  public void testAlsoShouldNotOptimizeLexicographic()\n  {\n    \r\n    int cardinality = 1234;\n    int threshold = 4;\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(dataSource)\n        .granularity(allGran)\n        .dimension(marketDimension)\n        .filters(qualityDimension, \"entertainment\")\n        .metric(indexMetric)\n        .threshold(threshold)\n        .intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\")\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(Collections.singletonList(addRowsIndexConstant))\n        .build();\n\n    StorageAdapter adapter =\n        makeFakeStorageAdapter(\"2018-05-30T00:00:00Z\", \"2018-05-30T01:00:00Z\", cardinality);\n    DimensionSelector dimSelector = makeFakeDimSelector(cardinality);\n\n    BaseTopNAlgorithm.AggregatorArrayProvider arrayProviderToTest = new BaseTopNAlgorithm.AggregatorArrayProvider(\n        dimSelector,\n        query,\n        cardinality,\n        adapter\n    );\n\n    arrayProviderToTest.ignoreAfterThreshold();\n    Pair<Integer, Integer> thePair = arrayProviderToTest.computeStartEnd(cardinality);\n    Assert.assertEquals(new Integer(0), thePair.lhs);\n    Assert.assertEquals(new Integer(cardinality), thePair.rhs);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNMetricSpecOptimizationsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"}],"commitId":"1166bbcb75d432817715fdd429737f86730b5591","commitMessage":"@@@Remove static imports from tests (#8036)\n\nMake static imports forbidden in tests and remove all occurrences to be\nconsistent with the non-test code.\n\nAlso.  various changes to files affected by above:\n- Reformat to adhere to druid style guide\n- Fix various IntelliJ warnings\n- Fix various SonarLint warnings (e.g..  the expected/actual args to\n  Assert.assertEquals() were flipped)","date":"2019-07-07 00:33:12","modifiedFileCount":"98","status":"M","submitter":"Chi Cao Minh"},{"authorTime":"2019-07-19 04:16:28","codes":[{"authorDate":"2019-07-19 04:16:28","commitOrder":3,"curCode":"  public void testShouldOptimizeLexicographic()\n  {\n    \r\n    int cardinality = 1234;\n    int threshold = 4;\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.indexMetric)\n        .threshold(threshold)\n        .intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\")\n        .aggregators(AGGS)\n        .postAggregators(QueryRunnerTestHelper.addRowsIndexConstant)\n        .build();\n\n    StorageAdapter adapter =\n        makeFakeStorageAdapter(\"2018-05-30T00:00:00Z\", \"2018-05-30T01:00:00Z\", cardinality);\n    DimensionSelector dimSelector = makeFakeDimSelector(cardinality);\n\n    BaseTopNAlgorithm.AggregatorArrayProvider arrayProviderToTest = new BaseTopNAlgorithm.AggregatorArrayProvider(\n        dimSelector,\n        query,\n        cardinality,\n        adapter\n    );\n\n    arrayProviderToTest.ignoreAfterThreshold();\n    Pair<Integer, Integer> thePair = arrayProviderToTest.computeStartEnd(cardinality);\n    Assert.assertEquals(new Integer(0), thePair.lhs);\n    Assert.assertEquals(new Integer(threshold), thePair.rhs);\n  }\n","date":"2019-07-19 04:16:28","endLine":100,"groupId":"11992","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testShouldOptimizeLexicographic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1c/184ff2f07414c93d94b2cc3b0a9b72453a4b3e.src","preCode":"  public void testShouldOptimizeLexicographic()\n  {\n    \r\n    int cardinality = 1234;\n    int threshold = 4;\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.indexMetric)\n        .threshold(threshold)\n        .intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\")\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    QueryRunnerTestHelper.commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(Collections.singletonList(QueryRunnerTestHelper.addRowsIndexConstant))\n        .build();\n\n    StorageAdapter adapter =\n        makeFakeStorageAdapter(\"2018-05-30T00:00:00Z\", \"2018-05-30T01:00:00Z\", cardinality);\n    DimensionSelector dimSelector = makeFakeDimSelector(cardinality);\n\n    BaseTopNAlgorithm.AggregatorArrayProvider arrayProviderToTest = new BaseTopNAlgorithm.AggregatorArrayProvider(\n        dimSelector,\n        query,\n        cardinality,\n        adapter\n    );\n\n    arrayProviderToTest.ignoreAfterThreshold();\n    Pair<Integer, Integer> thePair = arrayProviderToTest.computeStartEnd(cardinality);\n    Assert.assertEquals(new Integer(0), thePair.lhs);\n    Assert.assertEquals(new Integer(threshold), thePair.rhs);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNMetricSpecOptimizationsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2019-07-19 04:16:28","commitOrder":3,"curCode":"  public void testAlsoShouldNotOptimizeLexicographic()\n  {\n    \r\n    int cardinality = 1234;\n    int threshold = 4;\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .filters(QueryRunnerTestHelper.qualityDimension, \"entertainment\")\n        .metric(QueryRunnerTestHelper.indexMetric)\n        .threshold(threshold)\n        .intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\")\n        .aggregators(AGGS)\n        .postAggregators(QueryRunnerTestHelper.addRowsIndexConstant)\n        .build();\n\n    StorageAdapter adapter =\n        makeFakeStorageAdapter(\"2018-05-30T00:00:00Z\", \"2018-05-30T01:00:00Z\", cardinality);\n    DimensionSelector dimSelector = makeFakeDimSelector(cardinality);\n\n    BaseTopNAlgorithm.AggregatorArrayProvider arrayProviderToTest = new BaseTopNAlgorithm.AggregatorArrayProvider(\n        dimSelector,\n        query,\n        cardinality,\n        adapter\n    );\n\n    arrayProviderToTest.ignoreAfterThreshold();\n    Pair<Integer, Integer> thePair = arrayProviderToTest.computeStartEnd(cardinality);\n    Assert.assertEquals(new Integer(0), thePair.lhs);\n    Assert.assertEquals(new Integer(cardinality), thePair.rhs);\n  }\n","date":"2019-07-19 04:16:28","endLine":205,"groupId":"11992","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAlsoShouldNotOptimizeLexicographic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1c/184ff2f07414c93d94b2cc3b0a9b72453a4b3e.src","preCode":"  public void testAlsoShouldNotOptimizeLexicographic()\n  {\n    \r\n    int cardinality = 1234;\n    int threshold = 4;\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .filters(QueryRunnerTestHelper.qualityDimension, \"entertainment\")\n        .metric(QueryRunnerTestHelper.indexMetric)\n        .threshold(threshold)\n        .intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\")\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    QueryRunnerTestHelper.commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(Collections.singletonList(QueryRunnerTestHelper.addRowsIndexConstant))\n        .build();\n\n    StorageAdapter adapter =\n        makeFakeStorageAdapter(\"2018-05-30T00:00:00Z\", \"2018-05-30T01:00:00Z\", cardinality);\n    DimensionSelector dimSelector = makeFakeDimSelector(cardinality);\n\n    BaseTopNAlgorithm.AggregatorArrayProvider arrayProviderToTest = new BaseTopNAlgorithm.AggregatorArrayProvider(\n        dimSelector,\n        query,\n        cardinality,\n        adapter\n    );\n\n    arrayProviderToTest.ignoreAfterThreshold();\n    Pair<Integer, Integer> thePair = arrayProviderToTest.computeStartEnd(cardinality);\n    Assert.assertEquals(new Integer(0), thePair.lhs);\n    Assert.assertEquals(new Integer(cardinality), thePair.rhs);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNMetricSpecOptimizationsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"03e55d30ebcac9ec97edb1a638a5a99886c41374","commitMessage":"@@@add CachingClusteredClient benchmark.  refactor some stuff (#8089)\n\n* add CachingClusteredClient benchmark.  refactor some stuff\n\n* revert WeightedServerSelectorStrategy to ConnectionCountServerSelectorStrategy and remove getWeight since felt artificial.  default mergeResults in toolchest implementation for topn.  search.  select\n\n* adjust javadoc\n\n* adjustments\n\n* oops\n\n* use it\n\n* use BinaryOperator.  remove CombiningFunction.  use Comparator instead of Ordering.  other review adjustments\n\n* rename createComparator to createResultComparator.  fix typo.  firstNonNull nullable parameters\n","date":"2019-07-19 04:16:28","modifiedFileCount":"50","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":4,"curCode":"  public void testShouldOptimizeLexicographic()\n  {\n    \r\n    int cardinality = 1234;\n    int threshold = 4;\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .granularity(QueryRunnerTestHelper.ALL_GRAN)\n        .dimension(QueryRunnerTestHelper.MARKET_DIMENSION)\n        .metric(QueryRunnerTestHelper.INDEX_METRIC)\n        .threshold(threshold)\n        .intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\")\n        .aggregators(AGGS)\n        .postAggregators(QueryRunnerTestHelper.ADD_ROWS_INDEX_CONSTANT)\n        .build();\n\n    StorageAdapter adapter =\n        makeFakeStorageAdapter(\"2018-05-30T00:00:00Z\", \"2018-05-30T01:00:00Z\", cardinality);\n    DimensionSelector dimSelector = makeFakeDimSelector(cardinality);\n\n    BaseTopNAlgorithm.AggregatorArrayProvider arrayProviderToTest = new BaseTopNAlgorithm.AggregatorArrayProvider(\n        dimSelector,\n        query,\n        cardinality,\n        adapter\n    );\n\n    arrayProviderToTest.ignoreAfterThreshold();\n    Pair<Integer, Integer> thePair = arrayProviderToTest.computeStartEnd(cardinality);\n    Assert.assertEquals(new Integer(0), thePair.lhs);\n    Assert.assertEquals(new Integer(threshold), thePair.rhs);\n  }\n","date":"2019-08-23 18:13:54","endLine":100,"groupId":"106408","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testShouldOptimizeLexicographic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a3/42071d0c703c1e5383eed8a953b0bffafea3fd.src","preCode":"  public void testShouldOptimizeLexicographic()\n  {\n    \r\n    int cardinality = 1234;\n    int threshold = 4;\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.indexMetric)\n        .threshold(threshold)\n        .intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\")\n        .aggregators(AGGS)\n        .postAggregators(QueryRunnerTestHelper.addRowsIndexConstant)\n        .build();\n\n    StorageAdapter adapter =\n        makeFakeStorageAdapter(\"2018-05-30T00:00:00Z\", \"2018-05-30T01:00:00Z\", cardinality);\n    DimensionSelector dimSelector = makeFakeDimSelector(cardinality);\n\n    BaseTopNAlgorithm.AggregatorArrayProvider arrayProviderToTest = new BaseTopNAlgorithm.AggregatorArrayProvider(\n        dimSelector,\n        query,\n        cardinality,\n        adapter\n    );\n\n    arrayProviderToTest.ignoreAfterThreshold();\n    Pair<Integer, Integer> thePair = arrayProviderToTest.computeStartEnd(cardinality);\n    Assert.assertEquals(new Integer(0), thePair.lhs);\n    Assert.assertEquals(new Integer(threshold), thePair.rhs);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNMetricSpecOptimizationsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":4,"curCode":"  public void testAlsoShouldNotOptimizeLexicographic()\n  {\n    \r\n    int cardinality = 1234;\n    int threshold = 4;\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .granularity(QueryRunnerTestHelper.ALL_GRAN)\n        .dimension(QueryRunnerTestHelper.MARKET_DIMENSION)\n        .filters(QueryRunnerTestHelper.QUALITY_DIMENSION, \"entertainment\")\n        .metric(QueryRunnerTestHelper.INDEX_METRIC)\n        .threshold(threshold)\n        .intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\")\n        .aggregators(AGGS)\n        .postAggregators(QueryRunnerTestHelper.ADD_ROWS_INDEX_CONSTANT)\n        .build();\n\n    StorageAdapter adapter =\n        makeFakeStorageAdapter(\"2018-05-30T00:00:00Z\", \"2018-05-30T01:00:00Z\", cardinality);\n    DimensionSelector dimSelector = makeFakeDimSelector(cardinality);\n\n    BaseTopNAlgorithm.AggregatorArrayProvider arrayProviderToTest = new BaseTopNAlgorithm.AggregatorArrayProvider(\n        dimSelector,\n        query,\n        cardinality,\n        adapter\n    );\n\n    arrayProviderToTest.ignoreAfterThreshold();\n    Pair<Integer, Integer> thePair = arrayProviderToTest.computeStartEnd(cardinality);\n    Assert.assertEquals(new Integer(0), thePair.lhs);\n    Assert.assertEquals(new Integer(cardinality), thePair.rhs);\n  }\n","date":"2019-08-23 18:13:54","endLine":205,"groupId":"106408","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAlsoShouldNotOptimizeLexicographic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a3/42071d0c703c1e5383eed8a953b0bffafea3fd.src","preCode":"  public void testAlsoShouldNotOptimizeLexicographic()\n  {\n    \r\n    int cardinality = 1234;\n    int threshold = 4;\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .filters(QueryRunnerTestHelper.qualityDimension, \"entertainment\")\n        .metric(QueryRunnerTestHelper.indexMetric)\n        .threshold(threshold)\n        .intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\")\n        .aggregators(AGGS)\n        .postAggregators(QueryRunnerTestHelper.addRowsIndexConstant)\n        .build();\n\n    StorageAdapter adapter =\n        makeFakeStorageAdapter(\"2018-05-30T00:00:00Z\", \"2018-05-30T01:00:00Z\", cardinality);\n    DimensionSelector dimSelector = makeFakeDimSelector(cardinality);\n\n    BaseTopNAlgorithm.AggregatorArrayProvider arrayProviderToTest = new BaseTopNAlgorithm.AggregatorArrayProvider(\n        dimSelector,\n        query,\n        cardinality,\n        adapter\n    );\n\n    arrayProviderToTest.ignoreAfterThreshold();\n    Pair<Integer, Integer> thePair = arrayProviderToTest.computeStartEnd(cardinality);\n    Assert.assertEquals(new Integer(0), thePair.lhs);\n    Assert.assertEquals(new Integer(cardinality), thePair.rhs);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNMetricSpecOptimizationsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
