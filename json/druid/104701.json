[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public Optional<ByteSource> streamTaskLog(final String taskId, final long offset)\n  {\n    final ZkWorker zkWorker = findWorkerRunningTask(taskId);\n\n    if (zkWorker == null) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = makeWorkerURL(zkWorker.getWorker(), StringUtils.format(\"/task/%s/log?offset=%d\", taskId, offset));\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw Throwables.propagate(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw Throwables.propagate(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":626,"groupId":"18556","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"streamTaskLog","params":"(finalStringtaskId@finallongoffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/73/6cab6e3b7ae5c9e9bdc4b45c26d4717b988859.src","preCode":"  public Optional<ByteSource> streamTaskLog(final String taskId, final long offset)\n  {\n    final ZkWorker zkWorker = findWorkerRunningTask(taskId);\n\n    if (zkWorker == null) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = makeWorkerURL(zkWorker.getWorker(), StringUtils.format(\"/task/%s/log?offset=%d\", taskId, offset));\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw Throwables.propagate(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw Throwables.propagate(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/RemoteTaskRunner.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public Optional<ByteSource> streamTaskLog(String taskId, long offset)\n  {\n    HttpRemoteTaskRunnerWorkItem taskRunnerWorkItem = tasks.get(taskId);\n    Worker worker = null;\n    if (taskRunnerWorkItem != null && taskRunnerWorkItem.getState() != HttpRemoteTaskRunnerWorkItem.State.COMPLETE) {\n      worker = taskRunnerWorkItem.getWorker();\n    }\n\n    if (worker == null || !workers.containsKey(worker.getHost())) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = WorkerHolder.makeWorkerURL(worker, StringUtils.format(\"/druid/worker/v1/task/%s/log?offset=%d\", taskId, offset));\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw Throwables.propagate(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw Throwables.propagate(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":886,"groupId":"18556","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTaskLog","params":"(StringtaskId@longoffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ae/8cd0ddd86c2ac57c4b82064904af624e730c5e.src","preCode":"  public Optional<ByteSource> streamTaskLog(String taskId, long offset)\n  {\n    HttpRemoteTaskRunnerWorkItem taskRunnerWorkItem = tasks.get(taskId);\n    Worker worker = null;\n    if (taskRunnerWorkItem != null && taskRunnerWorkItem.getState() != HttpRemoteTaskRunnerWorkItem.State.COMPLETE) {\n      worker = taskRunnerWorkItem.getWorker();\n    }\n\n    if (worker == null || !workers.containsKey(worker.getHost())) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = WorkerHolder.makeWorkerURL(worker, StringUtils.format(\"/druid/worker/v1/task/%s/log?offset=%d\", taskId, offset));\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw Throwables.propagate(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw Throwables.propagate(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunner.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":848,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-01 03:29:51","codes":[{"authorDate":"2018-10-01 03:29:51","commitOrder":2,"curCode":"  public Optional<ByteSource> streamTaskLog(final String taskId, final long offset)\n  {\n    final ZkWorker zkWorker = findWorkerRunningTask(taskId);\n\n    if (zkWorker == null) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = TaskRunnerUtils.makeWorkerURL(\n          zkWorker.getWorker(),\n          \"/druid/worker/v1/task/%s/log?offset=%d\",\n          taskId,\n          offset\n      );\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw Throwables.propagate(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw Throwables.propagate(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","date":"2018-10-01 03:29:51","endLine":630,"groupId":"501","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"streamTaskLog","params":"(finalStringtaskId@finallongoffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/16/b75ed4c38b03c7f3692058d255cba9babf5a57.src","preCode":"  public Optional<ByteSource> streamTaskLog(final String taskId, final long offset)\n  {\n    final ZkWorker zkWorker = findWorkerRunningTask(taskId);\n\n    if (zkWorker == null) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = makeWorkerURL(zkWorker.getWorker(), StringUtils.format(\"/task/%s/log?offset=%d\", taskId, offset));\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw Throwables.propagate(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw Throwables.propagate(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/RemoteTaskRunner.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"M"},{"authorDate":"2018-10-01 03:29:51","commitOrder":2,"curCode":"  public Optional<ByteSource> streamTaskLog(String taskId, long offset)\n  {\n    HttpRemoteTaskRunnerWorkItem taskRunnerWorkItem = tasks.get(taskId);\n    Worker worker = null;\n    if (taskRunnerWorkItem != null && taskRunnerWorkItem.getState() != HttpRemoteTaskRunnerWorkItem.State.COMPLETE) {\n      worker = taskRunnerWorkItem.getWorker();\n    }\n\n    if (worker == null || !workers.containsKey(worker.getHost())) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = TaskRunnerUtils.makeWorkerURL(worker, \"/druid/worker/v1/task/%s/log?offset=%d\", taskId, offset);\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw Throwables.propagate(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw Throwables.propagate(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","date":"2018-10-01 03:29:51","endLine":885,"groupId":"501","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTaskLog","params":"(StringtaskId@longoffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/20/47d53633f623c838c817acebaab3f164055969.src","preCode":"  public Optional<ByteSource> streamTaskLog(String taskId, long offset)\n  {\n    HttpRemoteTaskRunnerWorkItem taskRunnerWorkItem = tasks.get(taskId);\n    Worker worker = null;\n    if (taskRunnerWorkItem != null && taskRunnerWorkItem.getState() != HttpRemoteTaskRunnerWorkItem.State.COMPLETE) {\n      worker = taskRunnerWorkItem.getWorker();\n    }\n\n    if (worker == null || !workers.containsKey(worker.getHost())) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = WorkerHolder.makeWorkerURL(worker, StringUtils.format(\"/druid/worker/v1/task/%s/log?offset=%d\", taskId, offset));\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw Throwables.propagate(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw Throwables.propagate(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunner.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":847,"status":"M"}],"commitId":"9fa4afdb8ec1bd1881b30076e4e2a503418e5386","commitMessage":"@@@URL encode datasources.  task ids.  authenticator names. (#5938)\n\n* URL encode datasources.  task ids.  authenticator names.\n\n* Fix URL encoding for router forwarding servlets.\n\n* Fix log-with-offset API.\n\n* Fix test.\n\n* Test adjustments.\n\n* Task client fixes.\n\n* Remove unused import.\n","date":"2018-10-01 03:29:51","modifiedFileCount":"20","status":"M","submitter":"Gian Merlino"},{"authorTime":"2018-10-19 09:16:46","codes":[{"authorDate":"2018-10-19 09:16:46","commitOrder":3,"curCode":"  public Optional<ByteSource> streamTaskLog(final String taskId, final long offset)\n  {\n    final ZkWorker zkWorker = findWorkerRunningTask(taskId);\n\n    if (zkWorker == null) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = TaskRunnerUtils.makeWorkerURL(\n          zkWorker.getWorker(),\n          \"/druid/worker/v1/task/%s/log?offset=%s\",\n          taskId,\n          Long.toString(offset)\n      );\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw Throwables.propagate(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw Throwables.propagate(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","date":"2018-10-19 09:16:46","endLine":630,"groupId":"501","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"streamTaskLog","params":"(finalStringtaskId@finallongoffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/94/80bf333b37679694c66d9456be0387c4e8e9b0.src","preCode":"  public Optional<ByteSource> streamTaskLog(final String taskId, final long offset)\n  {\n    final ZkWorker zkWorker = findWorkerRunningTask(taskId);\n\n    if (zkWorker == null) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = TaskRunnerUtils.makeWorkerURL(\n          zkWorker.getWorker(),\n          \"/druid/worker/v1/task/%s/log?offset=%d\",\n          taskId,\n          offset\n      );\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw Throwables.propagate(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw Throwables.propagate(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/RemoteTaskRunner.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"M"},{"authorDate":"2018-10-19 09:16:46","commitOrder":3,"curCode":"  public Optional<ByteSource> streamTaskLog(String taskId, long offset)\n  {\n    HttpRemoteTaskRunnerWorkItem taskRunnerWorkItem = tasks.get(taskId);\n    Worker worker = null;\n    if (taskRunnerWorkItem != null && taskRunnerWorkItem.getState() != HttpRemoteTaskRunnerWorkItem.State.COMPLETE) {\n      worker = taskRunnerWorkItem.getWorker();\n    }\n\n    if (worker == null || !workers.containsKey(worker.getHost())) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = TaskRunnerUtils.makeWorkerURL(\n          worker,\n          \"/druid/worker/v1/task/%s/log?offset=%s\",\n          taskId,\n          Long.toString(offset)\n      );\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw Throwables.propagate(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw Throwables.propagate(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","date":"2018-10-19 09:16:46","endLine":891,"groupId":"501","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTaskLog","params":"(StringtaskId@longoffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b4/ebdf60b6ff501b061011a5b761de3da107b60c.src","preCode":"  public Optional<ByteSource> streamTaskLog(String taskId, long offset)\n  {\n    HttpRemoteTaskRunnerWorkItem taskRunnerWorkItem = tasks.get(taskId);\n    Worker worker = null;\n    if (taskRunnerWorkItem != null && taskRunnerWorkItem.getState() != HttpRemoteTaskRunnerWorkItem.State.COMPLETE) {\n      worker = taskRunnerWorkItem.getWorker();\n    }\n\n    if (worker == null || !workers.containsKey(worker.getHost())) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = TaskRunnerUtils.makeWorkerURL(worker, \"/druid/worker/v1/task/%s/log?offset=%d\", taskId, offset);\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw Throwables.propagate(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw Throwables.propagate(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunner.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":848,"status":"M"}],"commitId":"b662fe84c50386be4404bb2e1a50cd592e1196b7","commitMessage":"@@@fix TaskRunnerUtils String formatting issue (#6492)\n\n* fix TaskRunnerUtils String formatting issue\n\n* additional fixes\n","date":"2018-10-19 09:16:46","modifiedFileCount":"3","status":"M","submitter":"Joshua Sun"},{"authorTime":"2019-03-15 05:28:33","codes":[{"authorDate":"2019-03-15 05:28:33","commitOrder":4,"curCode":"  public Optional<ByteSource> streamTaskLog(final String taskId, final long offset)\n  {\n    final ZkWorker zkWorker = findWorkerRunningTask(taskId);\n\n    if (zkWorker == null) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = TaskRunnerUtils.makeWorkerURL(\n          zkWorker.getWorker(),\n          \"/druid/worker/v1/task/%s/log?offset=%s\",\n          taskId,\n          Long.toString(offset)\n      );\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw new RuntimeException(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw new RuntimeException(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","date":"2019-03-15 05:28:33","endLine":631,"groupId":"501","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"streamTaskLog","params":"(finalStringtaskId@finallongoffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4d/d15e00dee0dfd5b14e9c535cd6c3d25dda1d55.src","preCode":"  public Optional<ByteSource> streamTaskLog(final String taskId, final long offset)\n  {\n    final ZkWorker zkWorker = findWorkerRunningTask(taskId);\n\n    if (zkWorker == null) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = TaskRunnerUtils.makeWorkerURL(\n          zkWorker.getWorker(),\n          \"/druid/worker/v1/task/%s/log?offset=%s\",\n          taskId,\n          Long.toString(offset)\n      );\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw Throwables.propagate(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw Throwables.propagate(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/RemoteTaskRunner.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"},{"authorDate":"2019-03-15 05:28:33","commitOrder":4,"curCode":"  public Optional<ByteSource> streamTaskLog(String taskId, long offset)\n  {\n    HttpRemoteTaskRunnerWorkItem taskRunnerWorkItem = tasks.get(taskId);\n    Worker worker = null;\n    if (taskRunnerWorkItem != null && taskRunnerWorkItem.getState() != HttpRemoteTaskRunnerWorkItem.State.COMPLETE) {\n      worker = taskRunnerWorkItem.getWorker();\n    }\n\n    if (worker == null || !workers.containsKey(worker.getHost())) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = TaskRunnerUtils.makeWorkerURL(\n          worker,\n          \"/druid/worker/v1/task/%s/log?offset=%s\",\n          taskId,\n          Long.toString(offset)\n      );\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw new RuntimeException(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw new RuntimeException(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","date":"2019-03-15 05:28:33","endLine":885,"groupId":"501","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTaskLog","params":"(StringtaskId@longoffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/53/2b2fc915486b04ccd7a3845c6735b4e41aef55.src","preCode":"  public Optional<ByteSource> streamTaskLog(String taskId, long offset)\n  {\n    HttpRemoteTaskRunnerWorkItem taskRunnerWorkItem = tasks.get(taskId);\n    Worker worker = null;\n    if (taskRunnerWorkItem != null && taskRunnerWorkItem.getState() != HttpRemoteTaskRunnerWorkItem.State.COMPLETE) {\n      worker = taskRunnerWorkItem.getWorker();\n    }\n\n    if (worker == null || !workers.containsKey(worker.getHost())) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = TaskRunnerUtils.makeWorkerURL(\n          worker,\n          \"/druid/worker/v1/task/%s/log?offset=%s\",\n          taskId,\n          Long.toString(offset)\n      );\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw Throwables.propagate(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw Throwables.propagate(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunner.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":842,"status":"M"}],"commitId":"7ada1c49f9735a37808f3ed7656d93ae88b8b925","commitMessage":"@@@Prohibit Throwables.propagate() (#7121)\n\n* Throw caught exception.\n\n* Throw caught exceptions.\n\n* Related checkstyle rule is added to prevent further bugs.\n\n* RuntimeException() is used instead of Throwables.propagate().\n\n* Missing import is added.\n\n* Throwables are propogated if possible.\n\n* Throwables are propogated if possible.\n\n* Throwables are propogated if possible.\n\n* Throwables are propogated if possible.\n\n* * Checkstyle definition is improved.\n* Throwables.propagate() usages are removed.\n\n* Checkstyle pattern is changed for only scanning \"Throwables.propagate(\" instead of checking lookbehind.\n\n* Throwable is kept before firing a Runtime Exception.\n\n* Fix unused assignments.\n","date":"2019-03-15 05:28:33","modifiedFileCount":"228","status":"M","submitter":"Furkan KAMACI"},{"authorTime":"2019-12-13 06:58:52","codes":[{"authorDate":"2019-03-15 05:28:33","commitOrder":5,"curCode":"  public Optional<ByteSource> streamTaskLog(final String taskId, final long offset)\n  {\n    final ZkWorker zkWorker = findWorkerRunningTask(taskId);\n\n    if (zkWorker == null) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = TaskRunnerUtils.makeWorkerURL(\n          zkWorker.getWorker(),\n          \"/druid/worker/v1/task/%s/log?offset=%s\",\n          taskId,\n          Long.toString(offset)\n      );\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw new RuntimeException(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw new RuntimeException(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","date":"2019-03-15 05:28:33","endLine":631,"groupId":"104701","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"streamTaskLog","params":"(finalStringtaskId@finallongoffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4d/d15e00dee0dfd5b14e9c535cd6c3d25dda1d55.src","preCode":"  public Optional<ByteSource> streamTaskLog(final String taskId, final long offset)\n  {\n    final ZkWorker zkWorker = findWorkerRunningTask(taskId);\n\n    if (zkWorker == null) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = TaskRunnerUtils.makeWorkerURL(\n          zkWorker.getWorker(),\n          \"/druid/worker/v1/task/%s/log?offset=%s\",\n          taskId,\n          Long.toString(offset)\n      );\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw new RuntimeException(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw new RuntimeException(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/RemoteTaskRunner.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"N"},{"authorDate":"2019-12-13 06:58:52","commitOrder":5,"curCode":"  public Optional<ByteSource> streamTaskLog(String taskId, long offset)\n  {\n    @SuppressWarnings(\"GuardedBy\") \r\n    HttpRemoteTaskRunnerWorkItem taskRunnerWorkItem = tasks.get(taskId);\n    Worker worker = null;\n    if (taskRunnerWorkItem != null && taskRunnerWorkItem.getState() != HttpRemoteTaskRunnerWorkItem.State.COMPLETE) {\n      worker = taskRunnerWorkItem.getWorker();\n    }\n\n    if (worker == null || !workers.containsKey(worker.getHost())) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = TaskRunnerUtils.makeWorkerURL(\n          worker,\n          \"/druid/worker/v1/task/%s/log?offset=%s\",\n          taskId,\n          Long.toString(offset)\n      );\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw new RuntimeException(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw new RuntimeException(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","date":"2019-12-13 06:58:52","endLine":932,"groupId":"104701","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTaskLog","params":"(StringtaskId@longoffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e5/549f6c032d9bdebd2152b65987e0488a0f2fb7.src","preCode":"  public Optional<ByteSource> streamTaskLog(String taskId, long offset)\n  {\n    HttpRemoteTaskRunnerWorkItem taskRunnerWorkItem = tasks.get(taskId);\n    Worker worker = null;\n    if (taskRunnerWorkItem != null && taskRunnerWorkItem.getState() != HttpRemoteTaskRunnerWorkItem.State.COMPLETE) {\n      worker = taskRunnerWorkItem.getWorker();\n    }\n\n    if (worker == null || !workers.containsKey(worker.getHost())) {\n      \r\n      return Optional.absent();\n    } else {\n      \r\n      final URL url = TaskRunnerUtils.makeWorkerURL(\n          worker,\n          \"/druid/worker/v1/task/%s/log?offset=%s\",\n          taskId,\n          Long.toString(offset)\n      );\n      return Optional.of(\n          new ByteSource()\n          {\n            @Override\n            public InputStream openStream() throws IOException\n            {\n              try {\n                return httpClient.go(\n                    new Request(HttpMethod.GET, url),\n                    new InputStreamResponseHandler()\n                ).get();\n              }\n              catch (InterruptedException e) {\n                throw new RuntimeException(e);\n              }\n              catch (ExecutionException e) {\n                \r\n                Throwables.propagateIfPossible(e.getCause(), IOException.class);\n                throw new RuntimeException(e);\n              }\n            }\n          }\n      );\n    }\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunner.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":888,"status":"M"}],"commitId":"45101183bc76639c86e4eaa59cbf401f6fe90c18","commitMessage":"@@@HRTR: make pending task execution handling to go through all tasks on not finding worker slots (#8697)\n\n* HRTR: make pending task execution handling to go through all tasks on\nnot finding worker slots\n\n* make HRTR methods package private that are meant to be used only in HttpRemoteTaskRunnerResource\n\n* mark HttpRemoteTaskRunnerWorkItem.State global variables final\n\n* hrtr: move immutableWorker NULL check outside of try-catch or finally block could have NPE\n\n* add some explanatory comments\n\n* add comment on explaining mechanics around hand off of pending tasks from submission to it getting picked up by a task execution thread\n\n* fix spelling\n","date":"2019-12-13 06:58:52","modifiedFileCount":"7","status":"M","submitter":"Himanshu"}]
