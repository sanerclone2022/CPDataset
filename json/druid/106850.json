[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSearch()\n  {\n    Druids.SearchQueryBuilder builder = testBuilder();\n    Map<String, Set<String>> expectedResults = Maps.newTreeMap(String.CASE_INSENSITIVE_ORDER);\n    SearchQuery searchQuery;\n\n    searchQuery = builder.query(\"SPOT\").build();\n    expectedResults.put(marketDimension, Sets.newHashSet(\"spot\", \"SPot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.query(\"spot\", true).build();\n    expectedResults.put(marketDimension, Sets.newHashSet(\"spot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.query(\"SPot\", true).build();\n    expectedResults.put(marketDimension, Sets.newHashSet(\"SPot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n  }\n","date":"2018-08-31 00:56:26","endLine":171,"groupId":"3310","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/00/7c15098769ab19477bf079d5181b8899e831bc.src","preCode":"  public void testSearch()\n  {\n    Druids.SearchQueryBuilder builder = testBuilder();\n    Map<String, Set<String>> expectedResults = Maps.newTreeMap(String.CASE_INSENSITIVE_ORDER);\n    SearchQuery searchQuery;\n\n    searchQuery = builder.query(\"SPOT\").build();\n    expectedResults.put(marketDimension, Sets.newHashSet(\"spot\", \"SPot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.query(\"spot\", true).build();\n    expectedResults.put(marketDimension, Sets.newHashSet(\"spot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.query(\"SPot\", true).build();\n    expectedResults.put(marketDimension, Sets.newHashSet(\"SPot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerWithCaseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testFragmentSearch()\n  {\n    Druids.SearchQueryBuilder builder = testBuilder();\n    Map<String, Set<String>> expectedResults = Maps.newTreeMap(String.CASE_INSENSITIVE_ORDER);\n    SearchQuery searchQuery;\n\n    searchQuery = builder.fragments(Arrays.asList(\"auto\", \"ve\")).build();\n    expectedResults.put(qualityDimension, Sets.newHashSet(\"automotive\", \"AutoMotive\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.fragments(Arrays.asList(\"auto\", \"ve\"), true).build();\n    expectedResults.put(qualityDimension, Sets.newHashSet(\"automotive\"));\n    checkSearchQuery(searchQuery, expectedResults);\n  }\n","date":"2018-08-31 00:56:26","endLine":234,"groupId":"12351","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFragmentSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/00/7c15098769ab19477bf079d5181b8899e831bc.src","preCode":"  public void testFragmentSearch()\n  {\n    Druids.SearchQueryBuilder builder = testBuilder();\n    Map<String, Set<String>> expectedResults = Maps.newTreeMap(String.CASE_INSENSITIVE_ORDER);\n    SearchQuery searchQuery;\n\n    searchQuery = builder.fragments(Arrays.asList(\"auto\", \"ve\")).build();\n    expectedResults.put(qualityDimension, Sets.newHashSet(\"automotive\", \"AutoMotive\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.fragments(Arrays.asList(\"auto\", \"ve\"), true).build();\n    expectedResults.put(qualityDimension, Sets.newHashSet(\"automotive\"));\n    checkSearchQuery(searchQuery, expectedResults);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerWithCaseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-29 20:02:43","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testSearch()\n  {\n    Druids.SearchQueryBuilder builder = testBuilder();\n    Map<String, Set<String>> expectedResults = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n    SearchQuery searchQuery;\n\n    searchQuery = builder.query(\"SPOT\").build();\n    expectedResults.put(marketDimension, Sets.newHashSet(\"spot\", \"SPot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.query(\"spot\", true).build();\n    expectedResults.put(marketDimension, Sets.newHashSet(\"spot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.query(\"SPot\", true).build();\n    expectedResults.put(marketDimension, Sets.newHashSet(\"SPot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n  }\n","date":"2018-10-29 20:02:43","endLine":172,"groupId":"3310","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cc/3b13a0b6fedb8f6a5c1a62e649b9ba292dd526.src","preCode":"  public void testSearch()\n  {\n    Druids.SearchQueryBuilder builder = testBuilder();\n    Map<String, Set<String>> expectedResults = Maps.newTreeMap(String.CASE_INSENSITIVE_ORDER);\n    SearchQuery searchQuery;\n\n    searchQuery = builder.query(\"SPOT\").build();\n    expectedResults.put(marketDimension, Sets.newHashSet(\"spot\", \"SPot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.query(\"spot\", true).build();\n    expectedResults.put(marketDimension, Sets.newHashSet(\"spot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.query(\"SPot\", true).build();\n    expectedResults.put(marketDimension, Sets.newHashSet(\"SPot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerWithCaseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"},{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testFragmentSearch()\n  {\n    Druids.SearchQueryBuilder builder = testBuilder();\n    Map<String, Set<String>> expectedResults = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n    SearchQuery searchQuery;\n\n    searchQuery = builder.fragments(Arrays.asList(\"auto\", \"ve\")).build();\n    expectedResults.put(qualityDimension, Sets.newHashSet(\"automotive\", \"AutoMotive\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.fragments(Arrays.asList(\"auto\", \"ve\"), true).build();\n    expectedResults.put(qualityDimension, Sets.newHashSet(\"automotive\"));\n    checkSearchQuery(searchQuery, expectedResults);\n  }\n","date":"2018-10-29 20:02:43","endLine":235,"groupId":"12351","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFragmentSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cc/3b13a0b6fedb8f6a5c1a62e649b9ba292dd526.src","preCode":"  public void testFragmentSearch()\n  {\n    Druids.SearchQueryBuilder builder = testBuilder();\n    Map<String, Set<String>> expectedResults = Maps.newTreeMap(String.CASE_INSENSITIVE_ORDER);\n    SearchQuery searchQuery;\n\n    searchQuery = builder.fragments(Arrays.asList(\"auto\", \"ve\")).build();\n    expectedResults.put(qualityDimension, Sets.newHashSet(\"automotive\", \"AutoMotive\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.fragments(Arrays.asList(\"auto\", \"ve\"), true).build();\n    expectedResults.put(qualityDimension, Sets.newHashSet(\"automotive\"));\n    checkSearchQuery(searchQuery, expectedResults);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerWithCaseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"},{"authorTime":"2019-07-07 00:33:12","codes":[{"authorDate":"2019-07-07 00:33:12","commitOrder":3,"curCode":"  public void testSearch()\n  {\n    Druids.SearchQueryBuilder builder = testBuilder();\n    Map<String, Set<String>> expectedResults = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n    SearchQuery searchQuery;\n\n    searchQuery = builder.query(\"SPOT\").build();\n    expectedResults.put(QueryRunnerTestHelper.marketDimension, Sets.newHashSet(\"spot\", \"SPot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.query(\"spot\", true).build();\n    expectedResults.put(QueryRunnerTestHelper.marketDimension, Sets.newHashSet(\"spot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.query(\"SPot\", true).build();\n    expectedResults.put(QueryRunnerTestHelper.marketDimension, Sets.newHashSet(\"SPot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n  }\n","date":"2019-07-07 00:33:12","endLine":161,"groupId":"3310","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f9/54949dbfadb9f6503f668f283ec2b0fda82730.src","preCode":"  public void testSearch()\n  {\n    Druids.SearchQueryBuilder builder = testBuilder();\n    Map<String, Set<String>> expectedResults = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n    SearchQuery searchQuery;\n\n    searchQuery = builder.query(\"SPOT\").build();\n    expectedResults.put(marketDimension, Sets.newHashSet(\"spot\", \"SPot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.query(\"spot\", true).build();\n    expectedResults.put(marketDimension, Sets.newHashSet(\"spot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.query(\"SPot\", true).build();\n    expectedResults.put(marketDimension, Sets.newHashSet(\"SPot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerWithCaseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"},{"authorDate":"2019-07-07 00:33:12","commitOrder":3,"curCode":"  public void testFragmentSearch()\n  {\n    Druids.SearchQueryBuilder builder = testBuilder();\n    Map<String, Set<String>> expectedResults = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n    SearchQuery searchQuery;\n\n    searchQuery = builder.fragments(Arrays.asList(\"auto\", \"ve\")).build();\n    expectedResults.put(QueryRunnerTestHelper.qualityDimension, Sets.newHashSet(\"automotive\", \"AutoMotive\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.fragments(Arrays.asList(\"auto\", \"ve\"), true).build();\n    expectedResults.put(QueryRunnerTestHelper.qualityDimension, Sets.newHashSet(\"automotive\"));\n    checkSearchQuery(searchQuery, expectedResults);\n  }\n","date":"2019-07-07 00:33:12","endLine":230,"groupId":"12351","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFragmentSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f9/54949dbfadb9f6503f668f283ec2b0fda82730.src","preCode":"  public void testFragmentSearch()\n  {\n    Druids.SearchQueryBuilder builder = testBuilder();\n    Map<String, Set<String>> expectedResults = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n    SearchQuery searchQuery;\n\n    searchQuery = builder.fragments(Arrays.asList(\"auto\", \"ve\")).build();\n    expectedResults.put(qualityDimension, Sets.newHashSet(\"automotive\", \"AutoMotive\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.fragments(Arrays.asList(\"auto\", \"ve\"), true).build();\n    expectedResults.put(qualityDimension, Sets.newHashSet(\"automotive\"));\n    checkSearchQuery(searchQuery, expectedResults);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerWithCaseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"}],"commitId":"1166bbcb75d432817715fdd429737f86730b5591","commitMessage":"@@@Remove static imports from tests (#8036)\n\nMake static imports forbidden in tests and remove all occurrences to be\nconsistent with the non-test code.\n\nAlso.  various changes to files affected by above:\n- Reformat to adhere to druid style guide\n- Fix various IntelliJ warnings\n- Fix various SonarLint warnings (e.g..  the expected/actual args to\n  Assert.assertEquals() were flipped)","date":"2019-07-07 00:33:12","modifiedFileCount":"98","status":"M","submitter":"Chi Cao Minh"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":4,"curCode":"  public void testSearch()\n  {\n    Druids.SearchQueryBuilder builder = testBuilder();\n    Map<String, Set<String>> expectedResults = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n    SearchQuery searchQuery;\n\n    searchQuery = builder.query(\"SPOT\").build();\n    expectedResults.put(QueryRunnerTestHelper.MARKET_DIMENSION, Sets.newHashSet(\"spot\", \"SPot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.query(\"spot\", true).build();\n    expectedResults.put(QueryRunnerTestHelper.MARKET_DIMENSION, Sets.newHashSet(\"spot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.query(\"SPot\", true).build();\n    expectedResults.put(QueryRunnerTestHelper.MARKET_DIMENSION, Sets.newHashSet(\"SPot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n  }\n","date":"2019-08-23 18:13:54","endLine":160,"groupId":"106850","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1b/bf11e401c44b8bf777b0901a0580f894c5a4fd.src","preCode":"  public void testSearch()\n  {\n    Druids.SearchQueryBuilder builder = testBuilder();\n    Map<String, Set<String>> expectedResults = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n    SearchQuery searchQuery;\n\n    searchQuery = builder.query(\"SPOT\").build();\n    expectedResults.put(QueryRunnerTestHelper.marketDimension, Sets.newHashSet(\"spot\", \"SPot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.query(\"spot\", true).build();\n    expectedResults.put(QueryRunnerTestHelper.marketDimension, Sets.newHashSet(\"spot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.query(\"SPot\", true).build();\n    expectedResults.put(QueryRunnerTestHelper.marketDimension, Sets.newHashSet(\"SPot\"));\n    checkSearchQuery(searchQuery, expectedResults);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerWithCaseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":4,"curCode":"  public void testFragmentSearch()\n  {\n    Druids.SearchQueryBuilder builder = testBuilder();\n    Map<String, Set<String>> expectedResults = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n    SearchQuery searchQuery;\n\n    searchQuery = builder.fragments(Arrays.asList(\"auto\", \"ve\")).build();\n    expectedResults.put(QueryRunnerTestHelper.QUALITY_DIMENSION, Sets.newHashSet(\"automotive\", \"AutoMotive\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.fragments(Arrays.asList(\"auto\", \"ve\"), true).build();\n    expectedResults.put(QueryRunnerTestHelper.QUALITY_DIMENSION, Sets.newHashSet(\"automotive\"));\n    checkSearchQuery(searchQuery, expectedResults);\n  }\n","date":"2019-08-23 18:13:54","endLine":229,"groupId":"106850","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFragmentSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1b/bf11e401c44b8bf777b0901a0580f894c5a4fd.src","preCode":"  public void testFragmentSearch()\n  {\n    Druids.SearchQueryBuilder builder = testBuilder();\n    Map<String, Set<String>> expectedResults = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n    SearchQuery searchQuery;\n\n    searchQuery = builder.fragments(Arrays.asList(\"auto\", \"ve\")).build();\n    expectedResults.put(QueryRunnerTestHelper.qualityDimension, Sets.newHashSet(\"automotive\", \"AutoMotive\"));\n    checkSearchQuery(searchQuery, expectedResults);\n\n    searchQuery = builder.fragments(Arrays.asList(\"auto\", \"ve\"), true).build();\n    expectedResults.put(QueryRunnerTestHelper.qualityDimension, Sets.newHashSet(\"automotive\"));\n    checkSearchQuery(searchQuery, expectedResults);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerWithCaseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
