[{"authorTime":"2019-01-08 06:43:11","codes":[{"authorDate":"2019-01-08 06:43:11","commitOrder":1,"curCode":"  public void testSegmentLoadChecksForAssignableServer()\n  {\n    Interval interval = Intervals.of(\n        \"2011-04-01/2011-04-02\"\n    );\n    Assert.assertTrue(\n        DatasourcesResource.isSegmentLoaded(\n            Collections.singletonList(\n                new ImmutableSegmentLoadInfo(\n                    createSegment(interval, \"v1\", 2),\n                    Sets.newHashSet(createHistoricalServerMetadata(\"a\"))\n                )\n            ),\n            new SegmentDescriptor(interval, \"v1\", 2)\n        )\n    );\n\n    Assert.assertFalse(\n        DatasourcesResource.isSegmentLoaded(\n            Collections.singletonList(\n                new ImmutableSegmentLoadInfo(\n                    createSegment(interval, \"v1\", 2),\n                    Sets.newHashSet(createRealtimeServerMetadata(\"a\"))\n                )\n            ),\n            new SegmentDescriptor(interval, \"v1\", 2)\n        )\n    );\n  }\n","date":"2019-01-08 06:43:11","endLine":754,"groupId":"17448","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSegmentLoadChecksForAssignableServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3d/2c78654bdd729ee6769f2b179e6d30a6879178.src","preCode":"  public void testSegmentLoadChecksForAssignableServer()\n  {\n    Interval interval = Intervals.of(\n        \"2011-04-01/2011-04-02\"\n    );\n    Assert.assertTrue(\n        DatasourcesResource.isSegmentLoaded(\n            Collections.singletonList(\n                new ImmutableSegmentLoadInfo(\n                    createSegment(interval, \"v1\", 2),\n                    Sets.newHashSet(createHistoricalServerMetadata(\"a\"))\n                )\n            ),\n            new SegmentDescriptor(interval, \"v1\", 2)\n        )\n    );\n\n    Assert.assertFalse(\n        DatasourcesResource.isSegmentLoaded(\n            Collections.singletonList(\n                new ImmutableSegmentLoadInfo(\n                    createSegment(interval, \"v1\", 2),\n                    Sets.newHashSet(createRealtimeServerMetadata(\"a\"))\n                )\n            ),\n            new SegmentDescriptor(interval, \"v1\", 2)\n        )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DatasourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":726,"status":"B"},{"authorDate":"2019-01-08 06:43:11","commitOrder":1,"curCode":"  public void testSegmentLoadChecksForPartitionNumber()\n  {\n    Interval interval = Intervals.of(\n        \"2011-04-01/2011-04-02\"\n    );\n    Assert.assertTrue(\n        DatasourcesResource.isSegmentLoaded(\n            Collections.singletonList(\n                new ImmutableSegmentLoadInfo(\n                    createSegment(interval, \"v1\", 1),\n                    Sets.newHashSet(createHistoricalServerMetadata(\"a\"))\n                )\n            ),\n            new SegmentDescriptor(interval, \"v1\", 1)\n        )\n    );\n\n    Assert.assertFalse(\n        DatasourcesResource.isSegmentLoaded(\n            Collections.singletonList(\n                new ImmutableSegmentLoadInfo(\n                    createSegment(interval, \"v1\", 1),\n                    Sets.newHashSet(createHistoricalServerMetadata(\"a\"))\n                )\n            ),\n            new SegmentDescriptor(interval, \"v1\", 2)\n        )\n    );\n\n  }\n","date":"2019-01-08 06:43:11","endLine":786,"groupId":"17448","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSegmentLoadChecksForPartitionNumber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3d/2c78654bdd729ee6769f2b179e6d30a6879178.src","preCode":"  public void testSegmentLoadChecksForPartitionNumber()\n  {\n    Interval interval = Intervals.of(\n        \"2011-04-01/2011-04-02\"\n    );\n    Assert.assertTrue(\n        DatasourcesResource.isSegmentLoaded(\n            Collections.singletonList(\n                new ImmutableSegmentLoadInfo(\n                    createSegment(interval, \"v1\", 1),\n                    Sets.newHashSet(createHistoricalServerMetadata(\"a\"))\n                )\n            ),\n            new SegmentDescriptor(interval, \"v1\", 1)\n        )\n    );\n\n    Assert.assertFalse(\n        DatasourcesResource.isSegmentLoaded(\n            Collections.singletonList(\n                new ImmutableSegmentLoadInfo(\n                    createSegment(interval, \"v1\", 1),\n                    Sets.newHashSet(createHistoricalServerMetadata(\"a\"))\n                )\n            ),\n            new SegmentDescriptor(interval, \"v1\", 2)\n        )\n    );\n\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DatasourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":757,"status":"B"}],"commitId":"8ebb7b558b617d8807e6bdc204cabbda9a4ac346","commitMessage":"@@@Handoff should ignore segments that are dropped by drop rules (#6676)\n\n* Handoff should ignore segments that are dropped by drop rules\n\n* fix travis-ci\n\n* fix tests\n\n* address comments\n\n* remove line added by accident\n\n* address comments\n\n* add javadoc and logging the full stack trace of exception\n\n* add error message\n","date":"2019-01-08 06:43:11","modifiedFileCount":"5","status":"B","submitter":"Mingming Qiu"},{"authorTime":"2019-01-22 03:11:10","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  public void testSegmentLoadChecksForAssignableServer()\n  {\n    Interval interval = Intervals.of(\n        \"2011-04-01/2011-04-02\"\n    );\n    Assert.assertTrue(\n        DataSourcesResource.isSegmentLoaded(\n            Collections.singletonList(\n                new ImmutableSegmentLoadInfo(\n                    createSegment(interval, \"v1\", 2),\n                    Sets.newHashSet(createHistoricalServerMetadata(\"a\"))\n                )\n            ),\n            new SegmentDescriptor(interval, \"v1\", 2)\n        )\n    );\n\n    Assert.assertFalse(\n        DataSourcesResource.isSegmentLoaded(\n            Collections.singletonList(\n                new ImmutableSegmentLoadInfo(\n                    createSegment(interval, \"v1\", 2),\n                    Sets.newHashSet(createRealtimeServerMetadata(\"a\"))\n                )\n            ),\n            new SegmentDescriptor(interval, \"v1\", 2)\n        )\n    );\n  }\n","date":"2019-01-22 03:11:10","endLine":741,"groupId":"1088","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSegmentLoadChecksForAssignableServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/11/6c20bb86e0cc9f4a9760089ab7b792270f364c.src","preCode":"  public void testSegmentLoadChecksForAssignableServer()\n  {\n    Interval interval = Intervals.of(\n        \"2011-04-01/2011-04-02\"\n    );\n    Assert.assertTrue(\n        DatasourcesResource.isSegmentLoaded(\n            Collections.singletonList(\n                new ImmutableSegmentLoadInfo(\n                    createSegment(interval, \"v1\", 2),\n                    Sets.newHashSet(createHistoricalServerMetadata(\"a\"))\n                )\n            ),\n            new SegmentDescriptor(interval, \"v1\", 2)\n        )\n    );\n\n    Assert.assertFalse(\n        DatasourcesResource.isSegmentLoaded(\n            Collections.singletonList(\n                new ImmutableSegmentLoadInfo(\n                    createSegment(interval, \"v1\", 2),\n                    Sets.newHashSet(createRealtimeServerMetadata(\"a\"))\n                )\n            ),\n            new SegmentDescriptor(interval, \"v1\", 2)\n        )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":713,"status":"M"},{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  public void testSegmentLoadChecksForPartitionNumber()\n  {\n    Interval interval = Intervals.of(\n        \"2011-04-01/2011-04-02\"\n    );\n    Assert.assertTrue(\n        DataSourcesResource.isSegmentLoaded(\n            Collections.singletonList(\n                new ImmutableSegmentLoadInfo(\n                    createSegment(interval, \"v1\", 1),\n                    Sets.newHashSet(createHistoricalServerMetadata(\"a\"))\n                )\n            ),\n            new SegmentDescriptor(interval, \"v1\", 1)\n        )\n    );\n\n    Assert.assertFalse(\n        DataSourcesResource.isSegmentLoaded(\n            Collections.singletonList(\n                new ImmutableSegmentLoadInfo(\n                    createSegment(interval, \"v1\", 1),\n                    Sets.newHashSet(createHistoricalServerMetadata(\"a\"))\n                )\n            ),\n            new SegmentDescriptor(interval, \"v1\", 2)\n        )\n    );\n\n  }\n","date":"2019-01-22 03:11:10","endLine":773,"groupId":"1088","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSegmentLoadChecksForPartitionNumber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/11/6c20bb86e0cc9f4a9760089ab7b792270f364c.src","preCode":"  public void testSegmentLoadChecksForPartitionNumber()\n  {\n    Interval interval = Intervals.of(\n        \"2011-04-01/2011-04-02\"\n    );\n    Assert.assertTrue(\n        DatasourcesResource.isSegmentLoaded(\n            Collections.singletonList(\n                new ImmutableSegmentLoadInfo(\n                    createSegment(interval, \"v1\", 1),\n                    Sets.newHashSet(createHistoricalServerMetadata(\"a\"))\n                )\n            ),\n            new SegmentDescriptor(interval, \"v1\", 1)\n        )\n    );\n\n    Assert.assertFalse(\n        DatasourcesResource.isSegmentLoaded(\n            Collections.singletonList(\n                new ImmutableSegmentLoadInfo(\n                    createSegment(interval, \"v1\", 1),\n                    Sets.newHashSet(createHistoricalServerMetadata(\"a\"))\n                )\n            ),\n            new SegmentDescriptor(interval, \"v1\", 2)\n        )\n    );\n\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":744,"status":"M"}],"commitId":"8eae26fd4e7572060d112864dd3d5f6a865b9c89","commitMessage":"@@@Introduce SegmentId class (#6370)\n\n* Introduce SegmentId class\n\n* tmp\n\n* Fix SelectQueryRunnerTest\n\n* Fix indentation\n\n* Fixes\n\n* Remove Comparators.inverse() tests\n\n* Refinements\n\n* Fix tests\n\n* Fix more tests\n\n* Remove duplicate DataSegmentTest.  fixes #6064\n\n* SegmentDescriptor doc\n\n* Fix SQLMetadataStorageUpdaterJobHandler\n\n* Fix DataSegment deserialization for ignoring id\n\n* Add comments\n\n* More comments\n\n* Address more comments\n\n* Fix compilation\n\n* Restore segment2 in SystemSchemaTest according to a comment\n\n* Fix style\n\n* fix testServerSegmentsTable\n\n* Fix compilation\n\n* Add comments about why SegmentId and SegmentIdWithShardSpec are separate classes\n\n* Fix SystemSchemaTest\n\n* Fix style\n\n* Compare SegmentDescriptor with SegmentId in Javadoc and comments rather than with DataSegment\n\n* Remove a link.  see https://youtrack.jetbrains.com/issue/IDEA-205164\n\n* Fix compilation\n","date":"2019-01-22 03:11:10","modifiedFileCount":"308","status":"M","submitter":"Roman Leventov"}]
