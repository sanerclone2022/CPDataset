[{"authorTime":"2020-07-02 05:02:21","codes":[{"authorDate":"2020-08-27 05:23:54","commitOrder":3,"curCode":"  public void testJoinOnGroupByOnUnionOfTables()\n  {\n    final UnionDataSource unionDataSource = new UnionDataSource(\n        ImmutableList.of(\n            new TableDataSource(FOO),\n            new TableDataSource(BAR)\n        )\n    );\n\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(unionDataSource)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .setDimFilter(new SelectorDimFilter(\"s\", \"y\", null))\n                    .build();\n\n    final GroupByQuery query =\n        (GroupByQuery) GroupByQuery.builder()\n                                   .setDataSource(\n                                       JoinDataSource.create(\n                                           unionDataSource,\n                                           new QueryDataSource(subquery),\n                                           \"j.\",\n                                           \"\\\"j.s\\\" == \\\"s\\\"\",\n                                           JoinType.INNER,\n                                           ExprMacroTable.nil()\n                                       )\n                                   )\n                                   .setGranularity(Granularities.ALL)\n                                   .setInterval(Intervals.ONLY_ETERNITY)\n                                   .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                                   .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                                   .build()\n                                   .withId(UUID.randomUUID().toString());\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(\n                subquery.withDataSource(\n                    subquery.getDataSource().getChildren().get(0)\n                )\n            ),\n            ExpectedQuery.cluster(\n                subquery.withDataSource(\n                    subquery.getDataSource().getChildren().get(1)\n                )\n            ),\n            ExpectedQuery.cluster(\n                query.withDataSource(\n                    query.getDataSource().withChildren(\n                        ImmutableList.of(\n                            unionDataSource.getChildren().get(0),\n                            InlineDataSource.fromIterable(\n                                ImmutableList.of(new Object[]{\"y\"}),\n                                RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                            )\n                        )\n                    )\n                )\n            ),\n            ExpectedQuery.cluster(\n                query.withDataSource(\n                    query.getDataSource().withChildren(\n                        ImmutableList.of(\n                            unionDataSource.getChildren().get(1),\n                            InlineDataSource.fromIterable(\n                                ImmutableList.of(new Object[]{\"y\"}),\n                                RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                            )\n                        )\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{\"y\", \"y\", 1L})\n    );\n\n    \r\n    \r\n    Assert.assertEquals(4, scheduler.getTotalRun().get());\n    Assert.assertEquals(4, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(4, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(4, scheduler.getTotalReleased().get());\n  }\n","date":"2020-08-27 05:23:54","endLine":628,"groupId":"19481","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinOnGroupByOnUnionOfTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/15/82378b00df0176962d37971e5992bcba6ec862.src","preCode":"  public void testJoinOnGroupByOnUnionOfTables()\n  {\n    final UnionDataSource unionDataSource = new UnionDataSource(\n        ImmutableList.of(\n            new TableDataSource(FOO),\n            new TableDataSource(BAR)\n        )\n    );\n\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(unionDataSource)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .setDimFilter(new SelectorDimFilter(\"s\", \"y\", null))\n                    .build();\n\n    final GroupByQuery query =\n        (GroupByQuery) GroupByQuery.builder()\n                                   .setDataSource(\n                                       JoinDataSource.create(\n                                           unionDataSource,\n                                           new QueryDataSource(subquery),\n                                           \"j.\",\n                                           \"\\\"j.s\\\" == \\\"s\\\"\",\n                                           JoinType.INNER,\n                                           ExprMacroTable.nil()\n                                       )\n                                   )\n                                   .setGranularity(Granularities.ALL)\n                                   .setInterval(Intervals.ONLY_ETERNITY)\n                                   .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                                   .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                                   .build()\n                                   .withId(UUID.randomUUID().toString());\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(\n                subquery.withDataSource(\n                    subquery.getDataSource().getChildren().get(0)\n                )\n            ),\n            ExpectedQuery.cluster(\n                subquery.withDataSource(\n                    subquery.getDataSource().getChildren().get(1)\n                )\n            ),\n            ExpectedQuery.cluster(\n                query.withDataSource(\n                    query.getDataSource().withChildren(\n                        ImmutableList.of(\n                            unionDataSource.getChildren().get(0),\n                            InlineDataSource.fromIterable(\n                                ImmutableList.of(new Object[]{\"y\"}),\n                                RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                            )\n                        )\n                    )\n                )\n            ),\n            ExpectedQuery.cluster(\n                query.withDataSource(\n                    query.getDataSource().withChildren(\n                        ImmutableList.of(\n                            unionDataSource.getChildren().get(1),\n                            InlineDataSource.fromIterable(\n                                ImmutableList.of(new Object[]{\"y\"}),\n                                RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                            )\n                        )\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{\"y\", \"y\", 1L})\n    );\n\n    \r\n    \r\n    Assert.assertEquals(4, scheduler.getTotalRun().get());\n    Assert.assertEquals(4, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(4, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(4, scheduler.getTotalReleased().get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":542,"status":"B"},{"authorDate":"2020-07-02 05:02:21","commitOrder":3,"curCode":"  public void testJoinOnTableErrorCantInlineTable()\n  {\n    final GroupByQuery query =\n        (GroupByQuery) GroupByQuery.builder()\n                                   .setDataSource(\n                                       JoinDataSource.create(\n                                           new TableDataSource(FOO),\n                                           new TableDataSource(BAR),\n                                           \"j.\",\n                                           \"\\\"j.s\\\" == \\\"s\\\"\",\n                                           JoinType.INNER,\n                                           ExprMacroTable.nil()\n                                       )\n                                   )\n                                   .setGranularity(Granularities.ALL)\n                                   .setInterval(Intervals.ONLY_ETERNITY)\n                                   .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                                   .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                                   .build()\n                                   .withId(UUID.randomUUID().toString());\n\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\"Cannot handle subquery structure for dataSource\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2020-07-02 05:02:21","endLine":607,"groupId":"20082","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinOnTableErrorCantInlineTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/e75008d93c8fc7b3635e3a9860a830f48fb950.src","preCode":"  public void testJoinOnTableErrorCantInlineTable()\n  {\n    final GroupByQuery query =\n        (GroupByQuery) GroupByQuery.builder()\n                                   .setDataSource(\n                                       JoinDataSource.create(\n                                           new TableDataSource(FOO),\n                                           new TableDataSource(BAR),\n                                           \"j.\",\n                                           \"\\\"j.s\\\" == \\\"s\\\"\",\n                                           JoinType.INNER,\n                                           ExprMacroTable.nil()\n                                       )\n                                   )\n                                   .setGranularity(Granularities.ALL)\n                                   .setInterval(Intervals.ONLY_ETERNITY)\n                                   .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                                   .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                                   .build()\n                                   .withId(UUID.randomUUID().toString());\n\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\"Cannot handle subquery structure for dataSource\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":582,"status":"NB"}],"commitId":"21703d81ac4aabb8c2dfc66cacd18a42b3c38fbd","commitMessage":"@@@Fix handling of 'join' on top of 'union' datasources. (#10318)\n\n* Fix handling of 'join' on top of 'union' datasources.\n\nThe problem is that unions are typically rewritten into a series of\nindividual queries on the underlying tables.  but this isn't done when\nthe union is wrapped in a join.\n\nThe main changes are in UnionQueryRunner:\n\n1) Replace an instanceof UnionQueryRunner check with DataSourceAnalysis.\n2) Replace a \"query.withDataSource\" call with a new function.  \"Queries.withBaseDataSource\".\n\nTogether.  these enable UnionQueryRunner to \"see through\" a join.\n\n* Tests.\n\n* Adjust heap sizes for integration tests.\n\n* Different approach.  more tests.\n\n* Tweak.\n\n* Styling.","date":"2020-08-27 05:23:54","modifiedFileCount":"13","status":"M","submitter":"Gian Merlino"},{"authorTime":"2021-03-10 05:07:34","codes":[{"authorDate":"2021-03-10 05:07:34","commitOrder":4,"curCode":"  public void testJoinOnGroupByOnUnionOfTables()\n  {\n    final UnionDataSource unionDataSource = new UnionDataSource(\n        ImmutableList.of(\n            new TableDataSource(FOO),\n            new TableDataSource(BAR)\n        )\n    );\n\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(unionDataSource)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .setDimFilter(new SelectorDimFilter(\"s\", \"y\", null))\n                    .build();\n\n    final GroupByQuery query =\n        (GroupByQuery) GroupByQuery.builder()\n                                   .setDataSource(\n                                       JoinDataSource.create(\n                                           unionDataSource,\n                                           new QueryDataSource(subquery),\n                                           \"j.\",\n                                           \"\\\"j.s\\\" == \\\"s\\\"\",\n                                           JoinType.INNER,\n                                           null,\n                                           ExprMacroTable.nil()\n                                       )\n                                   )\n                                   .setGranularity(Granularities.ALL)\n                                   .setInterval(Intervals.ONLY_ETERNITY)\n                                   .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                                   .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                                   .build()\n                                   .withId(UUID.randomUUID().toString());\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(\n                subquery.withDataSource(\n                    subquery.getDataSource().getChildren().get(0)\n                )\n            ),\n            ExpectedQuery.cluster(\n                subquery.withDataSource(\n                    subquery.getDataSource().getChildren().get(1)\n                )\n            ),\n            ExpectedQuery.cluster(\n                query.withDataSource(\n                    query.getDataSource().withChildren(\n                        ImmutableList.of(\n                            unionDataSource.getChildren().get(0),\n                            InlineDataSource.fromIterable(\n                                ImmutableList.of(new Object[]{\"y\"}),\n                                RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                            )\n                        )\n                    )\n                )\n            ),\n            ExpectedQuery.cluster(\n                query.withDataSource(\n                    query.getDataSource().withChildren(\n                        ImmutableList.of(\n                            unionDataSource.getChildren().get(1),\n                            InlineDataSource.fromIterable(\n                                ImmutableList.of(new Object[]{\"y\"}),\n                                RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                            )\n                        )\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{\"y\", \"y\", 1L})\n    );\n\n    \r\n    \r\n    Assert.assertEquals(4, scheduler.getTotalRun().get());\n    Assert.assertEquals(4, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(4, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(4, scheduler.getTotalReleased().get());\n  }\n","date":"2021-03-10 05:07:34","endLine":630,"groupId":"10675","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testJoinOnGroupByOnUnionOfTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7c/47377b9ce0f76da025b921e0a53be1ef463eda.src","preCode":"  public void testJoinOnGroupByOnUnionOfTables()\n  {\n    final UnionDataSource unionDataSource = new UnionDataSource(\n        ImmutableList.of(\n            new TableDataSource(FOO),\n            new TableDataSource(BAR)\n        )\n    );\n\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(unionDataSource)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .setDimFilter(new SelectorDimFilter(\"s\", \"y\", null))\n                    .build();\n\n    final GroupByQuery query =\n        (GroupByQuery) GroupByQuery.builder()\n                                   .setDataSource(\n                                       JoinDataSource.create(\n                                           unionDataSource,\n                                           new QueryDataSource(subquery),\n                                           \"j.\",\n                                           \"\\\"j.s\\\" == \\\"s\\\"\",\n                                           JoinType.INNER,\n                                           ExprMacroTable.nil()\n                                       )\n                                   )\n                                   .setGranularity(Granularities.ALL)\n                                   .setInterval(Intervals.ONLY_ETERNITY)\n                                   .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                                   .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                                   .build()\n                                   .withId(UUID.randomUUID().toString());\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(\n                subquery.withDataSource(\n                    subquery.getDataSource().getChildren().get(0)\n                )\n            ),\n            ExpectedQuery.cluster(\n                subquery.withDataSource(\n                    subquery.getDataSource().getChildren().get(1)\n                )\n            ),\n            ExpectedQuery.cluster(\n                query.withDataSource(\n                    query.getDataSource().withChildren(\n                        ImmutableList.of(\n                            unionDataSource.getChildren().get(0),\n                            InlineDataSource.fromIterable(\n                                ImmutableList.of(new Object[]{\"y\"}),\n                                RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                            )\n                        )\n                    )\n                )\n            ),\n            ExpectedQuery.cluster(\n                query.withDataSource(\n                    query.getDataSource().withChildren(\n                        ImmutableList.of(\n                            unionDataSource.getChildren().get(1),\n                            InlineDataSource.fromIterable(\n                                ImmutableList.of(new Object[]{\"y\"}),\n                                RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                            )\n                        )\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{\"y\", \"y\", 1L})\n    );\n\n    \r\n    \r\n    Assert.assertEquals(4, scheduler.getTotalRun().get());\n    Assert.assertEquals(4, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(4, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(4, scheduler.getTotalReleased().get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":543,"status":"M"},{"authorDate":"2021-03-10 05:07:34","commitOrder":4,"curCode":"  public void testJoinOnTableErrorCantInlineTable()\n  {\n    final GroupByQuery query =\n        (GroupByQuery) GroupByQuery.builder()\n                                   .setDataSource(\n                                       JoinDataSource.create(\n                                           new TableDataSource(FOO),\n                                           new TableDataSource(BAR),\n                                           \"j.\",\n                                           \"\\\"j.s\\\" == \\\"s\\\"\",\n                                           JoinType.INNER,\n                                           null,\n                                           ExprMacroTable.nil()\n                                       )\n                                   )\n                                   .setGranularity(Granularities.ALL)\n                                   .setInterval(Intervals.ONLY_ETERNITY)\n                                   .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                                   .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                                   .build()\n                                   .withId(UUID.randomUUID().toString());\n\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\"Cannot handle subquery structure for dataSource\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2021-03-10 05:07:34","endLine":770,"groupId":"10675","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testJoinOnTableErrorCantInlineTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7c/47377b9ce0f76da025b921e0a53be1ef463eda.src","preCode":"  public void testJoinOnTableErrorCantInlineTable()\n  {\n    final GroupByQuery query =\n        (GroupByQuery) GroupByQuery.builder()\n                                   .setDataSource(\n                                       JoinDataSource.create(\n                                           new TableDataSource(FOO),\n                                           new TableDataSource(BAR),\n                                           \"j.\",\n                                           \"\\\"j.s\\\" == \\\"s\\\"\",\n                                           JoinType.INNER,\n                                           ExprMacroTable.nil()\n                                       )\n                                   )\n                                   .setGranularity(Granularities.ALL)\n                                   .setInterval(Intervals.ONLY_ETERNITY)\n                                   .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                                   .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                                   .build()\n                                   .withId(UUID.randomUUID().toString());\n\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\"Cannot handle subquery structure for dataSource\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":744,"status":"M"}],"commitId":"c66951a59e2963369bbb447dba51ea7651a1cdb1","commitMessage":"@@@Add flag in SQL to disable left base filter optimization for joins (#10947)\n\n* Add flag to disable left base filter\n\n* code coverage\n\n* Draft\n\n* Review comments\n\n* code coverage\n\n* add docs\n\n* Add old tests","date":"2021-03-10 05:07:34","modifiedFileCount":"13","status":"M","submitter":"Abhishek Agarwal"}]
