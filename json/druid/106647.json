[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testTripleNestedGroupBy()\n  {\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(\n                                                GroupByQuery.builder()\n                                                            .setDataSource(QueryRunnerTestHelper.dataSource)\n                                                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                                                            .setGranularity(Granularities.ALL)\n                                                            .setDimensions(Lists.newArrayList(\n                                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                                new DefaultDimensionSpec(\"market\", null),\n                                                                new DefaultDimensionSpec(\"placement\", null)\n                                                            ))\n                                                            .setAggregatorSpecs(Collections.singletonList(\n                                                                QueryRunnerTestHelper.rowsCount))\n                                                            .build()\n                                            )\n                                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.firstToThird)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, TIMEOUT))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n\n    \r\n    assertEquals(0, mergeBufferPool.getMinRemainBufferNum());\n    assertEquals(3, mergeBufferPool.getPoolSize());\n  }\n","date":"2018-08-31 00:56:26","endLine":370,"groupId":"10583","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTripleNestedGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/53/7ecb3be593dd34c32b0dccf367107a002d135b.src","preCode":"  public void testTripleNestedGroupBy()\n  {\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(\n                                                GroupByQuery.builder()\n                                                            .setDataSource(QueryRunnerTestHelper.dataSource)\n                                                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                                                            .setGranularity(Granularities.ALL)\n                                                            .setDimensions(Lists.newArrayList(\n                                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                                new DefaultDimensionSpec(\"market\", null),\n                                                                new DefaultDimensionSpec(\"placement\", null)\n                                                            ))\n                                                            .setAggregatorSpecs(Collections.singletonList(\n                                                                QueryRunnerTestHelper.rowsCount))\n                                                            .build()\n                                            )\n                                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.firstToThird)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, TIMEOUT))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n\n    \r\n    assertEquals(0, mergeBufferPool.getMinRemainBufferNum());\n    assertEquals(3, mergeBufferPool.getPoolSize());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryMergeBufferTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testResourceLimitExceededOnBroker()\n  {\n    expectedException.expect(ResourceLimitExceededException.class);\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(QueryRunnerTestHelper.dataSource)\n                                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.firstToThird)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n  }\n","date":"2018-08-31 00:56:26","endLine":254,"groupId":"10583","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testResourceLimitExceededOnBroker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ca/c1ac443c67400ae804c502cc8b2cd262b17550.src","preCode":"  public void testResourceLimitExceededOnBroker()\n  {\n    expectedException.expect(ResourceLimitExceededException.class);\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(QueryRunnerTestHelper.dataSource)\n                                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.firstToThird)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerFailureTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2019-07-07 00:33:12","commitOrder":2,"curCode":"  public void testTripleNestedGroupBy()\n  {\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(\n                                                GroupByQuery.builder()\n                                                            .setDataSource(QueryRunnerTestHelper.dataSource)\n                                                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                                                            .setGranularity(Granularities.ALL)\n                                                            .setDimensions(Lists.newArrayList(\n                                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                                new DefaultDimensionSpec(\"market\", null),\n                                                                new DefaultDimensionSpec(\"placement\", null)\n                                                            ))\n                                                            .setAggregatorSpecs(Collections.singletonList(\n                                                                QueryRunnerTestHelper.rowsCount))\n                                                            .build()\n                                            )\n                                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.firstToThird)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, TIMEOUT))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n\n    \r\n    Assert.assertEquals(0, mergeBufferPool.getMinRemainBufferNum());\n    Assert.assertEquals(3, mergeBufferPool.getPoolSize());\n  }\n","date":"2019-07-07 00:33:12","endLine":353,"groupId":"10583","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTripleNestedGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ed/170d78fab1d09e212ece1195b4d57dc50f1304.src","preCode":"  public void testTripleNestedGroupBy()\n  {\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(\n                                                GroupByQuery.builder()\n                                                            .setDataSource(QueryRunnerTestHelper.dataSource)\n                                                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                                                            .setGranularity(Granularities.ALL)\n                                                            .setDimensions(Lists.newArrayList(\n                                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                                new DefaultDimensionSpec(\"market\", null),\n                                                                new DefaultDimensionSpec(\"placement\", null)\n                                                            ))\n                                                            .setAggregatorSpecs(Collections.singletonList(\n                                                                QueryRunnerTestHelper.rowsCount))\n                                                            .build()\n                                            )\n                                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.firstToThird)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, TIMEOUT))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n\n    \r\n    assertEquals(0, mergeBufferPool.getMinRemainBufferNum());\n    assertEquals(3, mergeBufferPool.getPoolSize());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryMergeBufferTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testResourceLimitExceededOnBroker()\n  {\n    expectedException.expect(ResourceLimitExceededException.class);\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(QueryRunnerTestHelper.dataSource)\n                                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.firstToThird)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n  }\n","date":"2018-08-31 00:56:26","endLine":254,"groupId":"10583","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testResourceLimitExceededOnBroker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ca/c1ac443c67400ae804c502cc8b2cd262b17550.src","preCode":"  public void testResourceLimitExceededOnBroker()\n  {\n    expectedException.expect(ResourceLimitExceededException.class);\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(QueryRunnerTestHelper.dataSource)\n                                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.firstToThird)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerFailureTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"N"}],"commitId":"1166bbcb75d432817715fdd429737f86730b5591","commitMessage":"@@@Remove static imports from tests (#8036)\n\nMake static imports forbidden in tests and remove all occurrences to be\nconsistent with the non-test code.\n\nAlso.  various changes to files affected by above:\n- Reformat to adhere to druid style guide\n- Fix various IntelliJ warnings\n- Fix various SonarLint warnings (e.g..  the expected/actual args to\n  Assert.assertEquals() were flipped)","date":"2019-07-07 00:33:12","modifiedFileCount":"98","status":"M","submitter":"Chi Cao Minh"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testTripleNestedGroupBy()\n  {\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(\n                                                GroupByQuery.builder()\n                                                            .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                                                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                                                            .setGranularity(Granularities.ALL)\n                                                            .setDimensions(Lists.newArrayList(\n                                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                                new DefaultDimensionSpec(\"market\", null),\n                                                                new DefaultDimensionSpec(\"placement\", null)\n                                                            ))\n                                                            .setAggregatorSpecs(Collections.singletonList(\n                                                                QueryRunnerTestHelper.ROWS_COUNT))\n                                                            .build()\n                                            )\n                                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, TIMEOUT))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(FACTORY, runner, query);\n\n    \r\n    Assert.assertEquals(0, MERGE_BUFFER_POOL.getMinRemainBufferNum());\n    Assert.assertEquals(3, MERGE_BUFFER_POOL.getPoolSize());\n  }\n","date":"2019-08-23 18:13:54","endLine":352,"groupId":"10583","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTripleNestedGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5a/0b51dbe2f176c6deb1f4268e5bd78b1e36e977.src","preCode":"  public void testTripleNestedGroupBy()\n  {\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(\n                                                GroupByQuery.builder()\n                                                            .setDataSource(QueryRunnerTestHelper.dataSource)\n                                                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                                                            .setGranularity(Granularities.ALL)\n                                                            .setDimensions(Lists.newArrayList(\n                                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                                new DefaultDimensionSpec(\"market\", null),\n                                                                new DefaultDimensionSpec(\"placement\", null)\n                                                            ))\n                                                            .setAggregatorSpecs(Collections.singletonList(\n                                                                QueryRunnerTestHelper.rowsCount))\n                                                            .build()\n                                            )\n                                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.firstToThird)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, TIMEOUT))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n\n    \r\n    Assert.assertEquals(0, mergeBufferPool.getMinRemainBufferNum());\n    Assert.assertEquals(3, mergeBufferPool.getPoolSize());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryMergeBufferTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testResourceLimitExceededOnBroker()\n  {\n    expectedException.expect(ResourceLimitExceededException.class);\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(FACTORY, runner, query);\n  }\n","date":"2019-08-23 18:13:54","endLine":250,"groupId":"10583","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testResourceLimitExceededOnBroker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/85/85aae4b55a04d0f9ad2b2f7c563b76517d97dd.src","preCode":"  public void testResourceLimitExceededOnBroker()\n  {\n    expectedException.expect(ResourceLimitExceededException.class);\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(QueryRunnerTestHelper.dataSource)\n                                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.firstToThird)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerFailureTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2021-04-07 15:52:19","commitOrder":4,"curCode":"  public void testTripleNestedGroupBy()\n  {\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(\n                                                GroupByQuery.builder()\n                                                            .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                                                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                                                            .setGranularity(Granularities.ALL)\n                                                            .setDimensions(Lists.newArrayList(\n                                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                                new DefaultDimensionSpec(\"market\", null),\n                                                                new DefaultDimensionSpec(\"placement\", null)\n                                                            ))\n                                                            .setAggregatorSpecs(Collections.singletonList(\n                                                                QueryRunnerTestHelper.ROWS_COUNT))\n                                                            .build()\n                                            )\n                                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, TIMEOUT))\n        .build();\n\n    Assert.assertEquals(2, GroupByStrategyV2.countRequiredMergeBufferNum(query));\n    GroupByQueryRunnerTestHelper.runQuery(FACTORY, runner, query);\n\n    \r\n    Assert.assertEquals(1, MERGE_BUFFER_POOL.getMinRemainBufferNum());\n    Assert.assertEquals(4, MERGE_BUFFER_POOL.getPoolSize());\n  }\n","date":"2021-04-07 15:52:19","endLine":344,"groupId":"106647","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testTripleNestedGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fa/ed09af603e255602367a9bdf0712c1cae045df.src","preCode":"  public void testTripleNestedGroupBy()\n  {\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(\n                                                GroupByQuery.builder()\n                                                            .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                                                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                                                            .setGranularity(Granularities.ALL)\n                                                            .setDimensions(Lists.newArrayList(\n                                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                                new DefaultDimensionSpec(\"market\", null),\n                                                                new DefaultDimensionSpec(\"placement\", null)\n                                                            ))\n                                                            .setAggregatorSpecs(Collections.singletonList(\n                                                                QueryRunnerTestHelper.ROWS_COUNT))\n                                                            .build()\n                                            )\n                                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, TIMEOUT))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(FACTORY, runner, query);\n\n    \r\n    Assert.assertEquals(0, MERGE_BUFFER_POOL.getMinRemainBufferNum());\n    Assert.assertEquals(3, MERGE_BUFFER_POOL.getPoolSize());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryMergeBufferTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":4,"curCode":"  public void testResourceLimitExceededOnBroker()\n  {\n    expectedException.expect(ResourceLimitExceededException.class);\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(FACTORY, runner, query);\n  }\n","date":"2019-08-23 18:13:54","endLine":250,"groupId":"106647","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testResourceLimitExceededOnBroker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/85/85aae4b55a04d0f9ad2b2f7c563b76517d97dd.src","preCode":"  public void testResourceLimitExceededOnBroker()\n  {\n    expectedException.expect(ResourceLimitExceededException.class);\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(FACTORY, runner, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerFailureTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"N"}],"commitId":"0df0bff44b0bbf3b6655bb0cffc384f58e69ac1f","commitMessage":"@@@Enable multiple distinct aggregators in same query (#11014)\n\n* Enable multiple distinct count\n\n* Add more tests\n\n* fix sql test\n\n* docs fix\n\n* Address nits","date":"2021-04-07 15:52:19","modifiedFileCount":"11","status":"M","submitter":"Abhishek Agarwal"}]
