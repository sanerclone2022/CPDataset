[{"authorTime":"2019-01-18 06:51:16","codes":[{"authorDate":"2019-01-18 06:51:16","commitOrder":1,"curCode":"  public void testGroupByWithFixedHistogramAgg()\n  {\n    FixedBucketsHistogramAggregatorFactory aggFactory = new FixedBucketsHistogramAggregatorFactory(\n        \"histo\",\n        \"index\",\n        10,\n        0,\n        2000,\n        FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW\n    );\n\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.marketDimension,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.fullOnInterval)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\"marketalias\", OrderByColumnSpec.Direction.DESCENDING)),\n                1\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, aggFactory)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(\n                new QuantilePostAggregator(\"quantile\", \"histo\", 0.5f)\n            )\n        )\n        .build();\n\n    List<Row> expectedResults = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\", \"upfront\",\n            \"rows\", 186L,\n            \"quantile\", 969.6969604492188f,\n            \"histo\",\n            new FixedBucketsHistogram(\n                0,\n                2000,\n                10,\n                FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,\n                new long[]{0, 0, 4, 33, 66, 35, 25, 11, 10, 2},\n                186,\n                1870.061029,\n                545.990623,\n                0,\n                0,\n                0\n            )\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"fixed-histo\");\n  }\n","date":"2019-01-18 06:51:16","endLine":216,"groupId":"14089","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByWithFixedHistogramAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4e/e5283502fc72ab649146de7dd39a7ff73cc42f.src","preCode":"  public void testGroupByWithFixedHistogramAgg()\n  {\n    FixedBucketsHistogramAggregatorFactory aggFactory = new FixedBucketsHistogramAggregatorFactory(\n        \"histo\",\n        \"index\",\n        10,\n        0,\n        2000,\n        FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW\n    );\n\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.marketDimension,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.fullOnInterval)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\"marketalias\", OrderByColumnSpec.Direction.DESCENDING)),\n                1\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, aggFactory)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(\n                new QuantilePostAggregator(\"quantile\", \"histo\", 0.5f)\n            )\n        )\n        .build();\n\n    List<Row> expectedResults = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\", \"upfront\",\n            \"rows\", 186L,\n            \"quantile\", 969.6969604492188f,\n            \"histo\",\n            new FixedBucketsHistogram(\n                0,\n                2000,\n                10,\n                FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,\n                new long[]{0, 0, 4, 33, 66, 35, 25, 11, 10, 2},\n                186,\n                1870.061029,\n                545.990623,\n                0,\n                0,\n                0\n            )\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"fixed-histo\");\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/FixedBucketsHistogramGroupByQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"B"},{"authorDate":"2019-01-18 06:51:16","commitOrder":1,"curCode":"  public void testGroupByWithSameNameComplexPostAgg()\n  {\n    FixedBucketsHistogramAggregatorFactory aggFactory = new FixedBucketsHistogramAggregatorFactory(\n        \"histo\",\n        \"index\",\n        10,\n        0,\n        2000,\n        FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW\n    );\n\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.marketDimension,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.fullOnInterval)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\"marketalias\", OrderByColumnSpec.Direction.DESCENDING)),\n                1\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, aggFactory)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(\n                new QuantilePostAggregator(\"quantile\", \"quantile\", 0.5f)\n            )\n        )\n        .build();\n\n    List<Row> expectedResults = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\", \"upfront\",\n            \"rows\", 186L,\n            \"quantile\", 969.6969604492188f\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"fixed-histo\");\n  }\n","date":"2019-01-18 06:51:16","endLine":261,"groupId":"5732","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByWithSameNameComplexPostAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4e/e5283502fc72ab649146de7dd39a7ff73cc42f.src","preCode":"  public void testGroupByWithSameNameComplexPostAgg()\n  {\n    FixedBucketsHistogramAggregatorFactory aggFactory = new FixedBucketsHistogramAggregatorFactory(\n        \"histo\",\n        \"index\",\n        10,\n        0,\n        2000,\n        FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW\n    );\n\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.marketDimension,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.fullOnInterval)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\"marketalias\", OrderByColumnSpec.Direction.DESCENDING)),\n                1\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, aggFactory)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(\n                new QuantilePostAggregator(\"quantile\", \"quantile\", 0.5f)\n            )\n        )\n        .build();\n\n    List<Row> expectedResults = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\", \"upfront\",\n            \"rows\", 186L,\n            \"quantile\", 969.6969604492188f\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"fixed-histo\");\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/FixedBucketsHistogramGroupByQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"B"}],"commitId":"68f744ec0ae573f17fc140f2e468869605e77fb6","commitMessage":"@@@Fixed buckets histogram aggregator (#6638)\n\n* Fixed buckets histogram aggregator\n\n* PR comments\n\n* More PR comments\n\n* Checkstyle\n\n* TeamCity\n\n* More TeamCity\n\n* PR comment\n\n* PR comment\n\n* Fix doc formatting\n","date":"2019-01-18 06:51:16","modifiedFileCount":"9","status":"B","submitter":"Jonathan Wei"},{"authorTime":"2019-06-22 09:00:19","codes":[{"authorDate":"2019-06-22 09:00:19","commitOrder":2,"curCode":"  public void testGroupByWithFixedHistogramAgg()\n  {\n    FixedBucketsHistogramAggregatorFactory aggFactory = new FixedBucketsHistogramAggregatorFactory(\n        \"histo\",\n        \"index\",\n        10,\n        0,\n        2000,\n        FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,\n        false\n    );\n\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.marketDimension,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.fullOnInterval)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\"marketalias\", OrderByColumnSpec.Direction.DESCENDING)),\n                1\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, aggFactory)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(\n                new QuantilePostAggregator(\"quantile\", \"histo\", 0.5f)\n            )\n        )\n        .build();\n\n    List<Row> expectedResults = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\", \"upfront\",\n            \"rows\", 186L,\n            \"quantile\", 969.6969604492188f,\n            \"histo\",\n            new FixedBucketsHistogram(\n                0,\n                2000,\n                10,\n                FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,\n                new long[]{0, 0, 4, 33, 66, 35, 25, 11, 10, 2},\n                186,\n                1870.061029,\n                545.990623,\n                0,\n                0,\n                0\n            ).toString()\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"fixed-histo\");\n  }\n","date":"2019-06-22 09:00:19","endLine":216,"groupId":"14089","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByWithFixedHistogramAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/761afd64ee21062d593576912d0a4fc30867ae.src","preCode":"  public void testGroupByWithFixedHistogramAgg()\n  {\n    FixedBucketsHistogramAggregatorFactory aggFactory = new FixedBucketsHistogramAggregatorFactory(\n        \"histo\",\n        \"index\",\n        10,\n        0,\n        2000,\n        FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW\n    );\n\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.marketDimension,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.fullOnInterval)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\"marketalias\", OrderByColumnSpec.Direction.DESCENDING)),\n                1\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, aggFactory)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(\n                new QuantilePostAggregator(\"quantile\", \"histo\", 0.5f)\n            )\n        )\n        .build();\n\n    List<Row> expectedResults = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\", \"upfront\",\n            \"rows\", 186L,\n            \"quantile\", 969.6969604492188f,\n            \"histo\",\n            new FixedBucketsHistogram(\n                0,\n                2000,\n                10,\n                FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,\n                new long[]{0, 0, 4, 33, 66, 35, 25, 11, 10, 2},\n                186,\n                1870.061029,\n                545.990623,\n                0,\n                0,\n                0\n            )\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"fixed-histo\");\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/FixedBucketsHistogramGroupByQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2019-06-22 09:00:19","commitOrder":2,"curCode":"  public void testGroupByWithSameNameComplexPostAgg()\n  {\n    FixedBucketsHistogramAggregatorFactory aggFactory = new FixedBucketsHistogramAggregatorFactory(\n        \"histo\",\n        \"index\",\n        10,\n        0,\n        2000,\n        FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,\n        false\n    );\n\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.marketDimension,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.fullOnInterval)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\"marketalias\", OrderByColumnSpec.Direction.DESCENDING)),\n                1\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, aggFactory)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(\n                new QuantilePostAggregator(\"quantile\", \"quantile\", 0.5f)\n            )\n        )\n        .build();\n\n    List<Row> expectedResults = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\", \"upfront\",\n            \"rows\", 186L,\n            \"quantile\", 969.6969604492188f\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"fixed-histo\");\n  }\n","date":"2019-06-22 09:00:19","endLine":262,"groupId":"5732","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByWithSameNameComplexPostAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/761afd64ee21062d593576912d0a4fc30867ae.src","preCode":"  public void testGroupByWithSameNameComplexPostAgg()\n  {\n    FixedBucketsHistogramAggregatorFactory aggFactory = new FixedBucketsHistogramAggregatorFactory(\n        \"histo\",\n        \"index\",\n        10,\n        0,\n        2000,\n        FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW\n    );\n\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.marketDimension,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.fullOnInterval)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\"marketalias\", OrderByColumnSpec.Direction.DESCENDING)),\n                1\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, aggFactory)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(\n                new QuantilePostAggregator(\"quantile\", \"quantile\", 0.5f)\n            )\n        )\n        .build();\n\n    List<Row> expectedResults = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\", \"upfront\",\n            \"rows\", 186L,\n            \"quantile\", 969.6969604492188f\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"fixed-histo\");\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/FixedBucketsHistogramGroupByQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"35601bb7a024213a4c8016b0d865984f84257cf4","commitMessage":"@@@Add finalizeAsBase64Binary option to FixedBucketsHistogramAggregatorFactory (#7784)\n\n* Add finalizeAsBase64Binary option to FixedBucketsHistogramAggregatorFactory\n\n* Add finalizeAsBase64Binary option to ApproximateHistogramFactory\n\n* Update approx histogram doc\n","date":"2019-06-22 09:00:19","modifiedFileCount":"13","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2019-08-01 07:15:12","codes":[{"authorDate":"2019-08-01 07:15:12","commitOrder":3,"curCode":"  public void testGroupByWithFixedHistogramAgg()\n  {\n    FixedBucketsHistogramAggregatorFactory aggFactory = new FixedBucketsHistogramAggregatorFactory(\n        \"histo\",\n        \"index\",\n        10,\n        0,\n        2000,\n        FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,\n        false\n    );\n\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.marketDimension,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.fullOnInterval)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\"marketalias\", OrderByColumnSpec.Direction.DESCENDING)),\n                1\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, aggFactory)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(\n                new QuantilePostAggregator(\"quantile\", \"histo\", 0.5f)\n            )\n        )\n        .build();\n\n    List<ResultRow> expectedResults = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            query,\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\", \"upfront\",\n            \"rows\", 186L,\n            \"quantile\", 969.6969604492188f,\n            \"histo\",\n            new FixedBucketsHistogram(\n                0,\n                2000,\n                10,\n                FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,\n                new long[]{0, 0, 4, 33, 66, 35, 25, 11, 10, 2},\n                186,\n                1870.061029,\n                545.990623,\n                0,\n                0,\n                0\n            ).toString()\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"fixed-histo\");\n  }\n","date":"2019-08-01 07:15:12","endLine":218,"groupId":"14089","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByWithFixedHistogramAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/92/9a3469fc0c84aa544aa3cac8ca54e7a6f6fb46.src","preCode":"  public void testGroupByWithFixedHistogramAgg()\n  {\n    FixedBucketsHistogramAggregatorFactory aggFactory = new FixedBucketsHistogramAggregatorFactory(\n        \"histo\",\n        \"index\",\n        10,\n        0,\n        2000,\n        FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,\n        false\n    );\n\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.marketDimension,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.fullOnInterval)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\"marketalias\", OrderByColumnSpec.Direction.DESCENDING)),\n                1\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, aggFactory)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(\n                new QuantilePostAggregator(\"quantile\", \"histo\", 0.5f)\n            )\n        )\n        .build();\n\n    List<Row> expectedResults = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\", \"upfront\",\n            \"rows\", 186L,\n            \"quantile\", 969.6969604492188f,\n            \"histo\",\n            new FixedBucketsHistogram(\n                0,\n                2000,\n                10,\n                FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,\n                new long[]{0, 0, 4, 33, 66, 35, 25, 11, 10, 2},\n                186,\n                1870.061029,\n                545.990623,\n                0,\n                0,\n                0\n            ).toString()\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"fixed-histo\");\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/FixedBucketsHistogramGroupByQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2019-08-01 07:15:12","commitOrder":3,"curCode":"  public void testGroupByWithSameNameComplexPostAgg()\n  {\n    FixedBucketsHistogramAggregatorFactory aggFactory = new FixedBucketsHistogramAggregatorFactory(\n        \"histo\",\n        \"index\",\n        10,\n        0,\n        2000,\n        FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,\n        false\n    );\n\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.marketDimension,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.fullOnInterval)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\"marketalias\", OrderByColumnSpec.Direction.DESCENDING)),\n                1\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, aggFactory)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(\n                new QuantilePostAggregator(\"quantile\", \"quantile\", 0.5f)\n            )\n        )\n        .build();\n\n    List<ResultRow> expectedResults = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            query,\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\", \"upfront\",\n            \"rows\", 186L,\n            \"quantile\", 969.6969604492188f\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"fixed-histo\");\n  }\n","date":"2019-08-01 07:15:12","endLine":265,"groupId":"5732","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByWithSameNameComplexPostAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/92/9a3469fc0c84aa544aa3cac8ca54e7a6f6fb46.src","preCode":"  public void testGroupByWithSameNameComplexPostAgg()\n  {\n    FixedBucketsHistogramAggregatorFactory aggFactory = new FixedBucketsHistogramAggregatorFactory(\n        \"histo\",\n        \"index\",\n        10,\n        0,\n        2000,\n        FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,\n        false\n    );\n\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.marketDimension,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.fullOnInterval)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\"marketalias\", OrderByColumnSpec.Direction.DESCENDING)),\n                1\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, aggFactory)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(\n                new QuantilePostAggregator(\"quantile\", \"quantile\", 0.5f)\n            )\n        )\n        .build();\n\n    List<Row> expectedResults = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\", \"upfront\",\n            \"rows\", 186L,\n            \"quantile\", 969.6969604492188f\n        )\n    );\n\n    Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"fixed-histo\");\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/FixedBucketsHistogramGroupByQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"}],"commitId":"77297f4e6f2e9d617c96cd46852bb5a772961e85","commitMessage":"@@@GroupBy array-based result rows. (#8196)\n\n* GroupBy array-based result rows.\n\nFixes #8118; see that proposal for details.\n\nOther than the GroupBy changes.  the main other \"interesting\" classes are:\n\n- ResultRow: The array-based result type.\n- BaseQuery: T is no longer required to be Comparable.\n- QueryToolChest: Adds \"decorateObjectMapper\" to enable query-aware serialization\n  and deserialization of result rows (necessary due to their positional nature).\n- QueryResource: Uses the new decoration functionality.\n- DirectDruidClient: Also uses the new decoration functionality.\n- QueryMaker (in Druid SQL): Modifications to read ResultRows.\n\nThese classes weren't changed.  but got some new javadocs:\n\n- BySegmentQueryRunner\n- FinalizeResultsQueryRunner\n- Query\n\n* Adjustments for TC stuff.\n","date":"2019-08-01 07:15:12","modifiedFileCount":"111","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":4,"curCode":"  public void testGroupByWithFixedHistogramAgg()\n  {\n    FixedBucketsHistogramAggregatorFactory aggFactory = new FixedBucketsHistogramAggregatorFactory(\n        \"histo\",\n        \"index\",\n        10,\n        0,\n        2000,\n        FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,\n        false\n    );\n\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(QueryRunnerTestHelper.ALL_GRAN).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.MARKET_DIMENSION,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\"marketalias\", OrderByColumnSpec.Direction.DESCENDING)),\n                1\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT, aggFactory)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(\n                new QuantilePostAggregator(\"quantile\", \"histo\", 0.5f)\n            )\n        )\n        .build();\n\n    List<ResultRow> expectedResults = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            query,\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\", \"upfront\",\n            \"rows\", 186L,\n            \"quantile\", 969.6969604492188f,\n            \"histo\",\n            new FixedBucketsHistogram(\n                0,\n                2000,\n                10,\n                FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,\n                new long[]{0, 0, 4, 33, 66, 35, 25, 11, 10, 2},\n                186,\n                1870.061029,\n                545.990623,\n                0,\n                0,\n                0\n            ).toString()\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"fixed-histo\");\n  }\n","date":"2019-08-23 18:13:54","endLine":218,"groupId":"103350","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByWithFixedHistogramAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/03/301f5f8a64cbd2cc42412323a8afff0eb781da.src","preCode":"  public void testGroupByWithFixedHistogramAgg()\n  {\n    FixedBucketsHistogramAggregatorFactory aggFactory = new FixedBucketsHistogramAggregatorFactory(\n        \"histo\",\n        \"index\",\n        10,\n        0,\n        2000,\n        FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,\n        false\n    );\n\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.marketDimension,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.fullOnInterval)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\"marketalias\", OrderByColumnSpec.Direction.DESCENDING)),\n                1\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, aggFactory)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(\n                new QuantilePostAggregator(\"quantile\", \"histo\", 0.5f)\n            )\n        )\n        .build();\n\n    List<ResultRow> expectedResults = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            query,\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\", \"upfront\",\n            \"rows\", 186L,\n            \"quantile\", 969.6969604492188f,\n            \"histo\",\n            new FixedBucketsHistogram(\n                0,\n                2000,\n                10,\n                FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,\n                new long[]{0, 0, 4, 33, 66, 35, 25, 11, 10, 2},\n                186,\n                1870.061029,\n                545.990623,\n                0,\n                0,\n                0\n            ).toString()\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"fixed-histo\");\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/FixedBucketsHistogramGroupByQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":4,"curCode":"  public void testGroupByWithSameNameComplexPostAgg()\n  {\n    FixedBucketsHistogramAggregatorFactory aggFactory = new FixedBucketsHistogramAggregatorFactory(\n        \"histo\",\n        \"index\",\n        10,\n        0,\n        2000,\n        FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,\n        false\n    );\n\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(QueryRunnerTestHelper.ALL_GRAN).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.MARKET_DIMENSION,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\"marketalias\", OrderByColumnSpec.Direction.DESCENDING)),\n                1\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT, aggFactory)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(\n                new QuantilePostAggregator(\"quantile\", \"quantile\", 0.5f)\n            )\n        )\n        .build();\n\n    List<ResultRow> expectedResults = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            query,\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\", \"upfront\",\n            \"rows\", 186L,\n            \"quantile\", 969.6969604492188f\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"fixed-histo\");\n  }\n","date":"2019-08-23 18:13:54","endLine":265,"groupId":"103350","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByWithSameNameComplexPostAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/03/301f5f8a64cbd2cc42412323a8afff0eb781da.src","preCode":"  public void testGroupByWithSameNameComplexPostAgg()\n  {\n    FixedBucketsHistogramAggregatorFactory aggFactory = new FixedBucketsHistogramAggregatorFactory(\n        \"histo\",\n        \"index\",\n        10,\n        0,\n        2000,\n        FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,\n        false\n    );\n\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.marketDimension,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.fullOnInterval)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\"marketalias\", OrderByColumnSpec.Direction.DESCENDING)),\n                1\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, aggFactory)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(\n                new QuantilePostAggregator(\"quantile\", \"quantile\", 0.5f)\n            )\n        )\n        .build();\n\n    List<ResultRow> expectedResults = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            query,\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\", \"upfront\",\n            \"rows\", 186L,\n            \"quantile\", 969.6969604492188f\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"fixed-histo\");\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/FixedBucketsHistogramGroupByQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
