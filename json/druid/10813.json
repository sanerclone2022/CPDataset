[{"authorTime":"2020-03-10 17:57:16","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testGoodQueryWithEmptyAcceptHeader() throws IOException\n  {\n    final String acceptHeader = \"\";\n    final String contentTypeHeader = MediaType.APPLICATION_JSON;\n    EasyMock.reset(testServletRequest);\n\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n        .andReturn(null)\n        .anyTimes();\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n        .andReturn(AUTHENTICATION_RESULT)\n        .anyTimes();\n\n    testServletRequest.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n\n    EasyMock.expect(testServletRequest.getHeader(\"Accept\")).andReturn(acceptHeader).anyTimes();\n    EasyMock.expect(testServletRequest.getContentType()).andReturn(contentTypeHeader).anyTimes();\n    EasyMock.expect(testServletRequest.getHeader(QueryResource.HEADER_IF_NONE_MATCH)).andReturn(null).anyTimes();\n    EasyMock.expect(testServletRequest.getRemoteAddr()).andReturn(\"localhost\").anyTimes();\n\n    EasyMock.replay(testServletRequest);\n    Response response = queryResource.doPost(\n        new ByteArrayInputStream(SIMPLE_TIMESERIES_QUERY.getBytes(\"UTF-8\")),\n        null ,\n        testServletRequest\n    );\n    Assert.assertEquals(HttpStatus.SC_OK, response.getStatus());\n    \r\n    Assert.assertEquals(contentTypeHeader, (response.getMetadata().get(\"Content-Type\").get(0)).toString());\n    Assert.assertNotNull(response);\n  }\n","date":"2019-08-23 18:13:54","endLine":256,"groupId":"12292","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGoodQueryWithEmptyAcceptHeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/af/7c228bf06591b20f27feca57e69d6813349662.src","preCode":"  public void testGoodQueryWithEmptyAcceptHeader() throws IOException\n  {\n    final String acceptHeader = \"\";\n    final String contentTypeHeader = MediaType.APPLICATION_JSON;\n    EasyMock.reset(testServletRequest);\n\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n        .andReturn(null)\n        .anyTimes();\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n        .andReturn(AUTHENTICATION_RESULT)\n        .anyTimes();\n\n    testServletRequest.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n\n    EasyMock.expect(testServletRequest.getHeader(\"Accept\")).andReturn(acceptHeader).anyTimes();\n    EasyMock.expect(testServletRequest.getContentType()).andReturn(contentTypeHeader).anyTimes();\n    EasyMock.expect(testServletRequest.getHeader(QueryResource.HEADER_IF_NONE_MATCH)).andReturn(null).anyTimes();\n    EasyMock.expect(testServletRequest.getRemoteAddr()).andReturn(\"localhost\").anyTimes();\n\n    EasyMock.replay(testServletRequest);\n    Response response = queryResource.doPost(\n        new ByteArrayInputStream(SIMPLE_TIMESERIES_QUERY.getBytes(\"UTF-8\")),\n        null ,\n        testServletRequest\n    );\n    Assert.assertEquals(HttpStatus.SC_OK, response.getStatus());\n    \r\n    Assert.assertEquals(contentTypeHeader, (response.getMetadata().get(\"Content-Type\").get(0)).toString());\n    Assert.assertNotNull(response);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"NB"},{"authorDate":"2020-03-10 17:57:16","commitOrder":3,"curCode":"  private void expectPermissiveHappyPathAuth()\n  {\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(AUTHENTICATION_RESULT)\n            .anyTimes();\n\n    testServletRequest.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n\n    EasyMock.replay(testServletRequest);\n  }\n","date":"2020-03-10 17:57:16","endLine":854,"groupId":"9327","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"expectPermissiveHappyPathAuth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a1/2b69025dd76b7493c0961ff10f70b4691c7411.src","preCode":"  private void expectPermissiveHappyPathAuth()\n  {\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(AUTHENTICATION_RESULT)\n            .anyTimes();\n\n    testServletRequest.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n\n    EasyMock.replay(testServletRequest);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":839,"status":"B"}],"commitId":"8b9fe6f58461f1fc3f453c14f1634f9e779aeb71","commitMessage":"@@@query laning and load shedding (#9407)\n\n* prototype\n\n* merge QueryScheduler and QueryManager\n\n* everything in its right place\n\n* adjustments\n\n* docs\n\n* fixes\n\n* doc fixes\n\n* use resilience4j instead of semaphore\n\n* more tests\n\n* simplify\n\n* checkstyle\n\n* spelling\n\n* oops heh\n\n* remove unused\n\n* simplify\n\n* concurrency tests\n\n* add SqlResource tests.  refactor error response\n\n* add json config tests\n\n* use LongAdder instead of AtomicLong\n\n* remove test only stuffs from scheduler\n\n* javadocs.  etc\n\n* style\n\n* partial review stuffs\n\n* adjust\n\n* review stuffs\n\n* more javadoc\n\n* error response documentation\n\n* spelling\n\n* preserve user specified lane for NoSchedulingStrategy\n\n* more test.  why not\n\n* doc adjustment\n\n* style\n\n* missed review for make a thing a constant\n\n* fixes and tests\n\n* fix test\n\n* Update docs/configuration/index.md\n\nCo-Authored-By: sthetland <steve.hetland@imply.io>\n\n* doc update\n\nCo-authored-by: sthetland <steve.hetland@imply.io>","date":"2020-03-10 17:57:16","modifiedFileCount":"26","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-03-10 17:57:16","codes":[{"authorDate":"2020-04-11 01:04:40","commitOrder":4,"curCode":"  public void testGoodQueryWithEmptyAcceptHeader() throws IOException\n  {\n    final String acceptHeader = \"\";\n    final String contentTypeHeader = MediaType.APPLICATION_JSON;\n    EasyMock.reset(testServletRequest);\n\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n        .andReturn(null)\n        .anyTimes();\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n        .andReturn(AUTHENTICATION_RESULT)\n        .anyTimes();\n\n    testServletRequest.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n\n    EasyMock.expect(testServletRequest.getHeader(\"Accept\")).andReturn(acceptHeader).anyTimes();\n    EasyMock.expect(testServletRequest.getContentType()).andReturn(contentTypeHeader).anyTimes();\n    EasyMock.expect(testServletRequest.getHeader(QueryResource.HEADER_IF_NONE_MATCH)).andReturn(null).anyTimes();\n    EasyMock.expect(testServletRequest.getRemoteAddr()).andReturn(\"localhost\").anyTimes();\n\n    EasyMock.replay(testServletRequest);\n    Response response = queryResource.doPost(\n        new ByteArrayInputStream(SIMPLE_TIMESERIES_QUERY.getBytes(StandardCharsets.UTF_8)),\n        null ,\n        testServletRequest\n    );\n    Assert.assertEquals(HttpStatus.SC_OK, response.getStatus());\n    \r\n    Assert.assertEquals(contentTypeHeader, (response.getMetadata().get(\"Content-Type\").get(0)).toString());\n    Assert.assertNotNull(response);\n  }\n","date":"2020-04-11 01:04:40","endLine":287,"groupId":"10813","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGoodQueryWithEmptyAcceptHeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ef/ace40474053b7c06eac921746c5f44cd950416.src","preCode":"  public void testGoodQueryWithEmptyAcceptHeader() throws IOException\n  {\n    final String acceptHeader = \"\";\n    final String contentTypeHeader = MediaType.APPLICATION_JSON;\n    EasyMock.reset(testServletRequest);\n\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n        .andReturn(null)\n        .anyTimes();\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n        .andReturn(AUTHENTICATION_RESULT)\n        .anyTimes();\n\n    testServletRequest.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n\n    EasyMock.expect(testServletRequest.getHeader(\"Accept\")).andReturn(acceptHeader).anyTimes();\n    EasyMock.expect(testServletRequest.getContentType()).andReturn(contentTypeHeader).anyTimes();\n    EasyMock.expect(testServletRequest.getHeader(QueryResource.HEADER_IF_NONE_MATCH)).andReturn(null).anyTimes();\n    EasyMock.expect(testServletRequest.getRemoteAddr()).andReturn(\"localhost\").anyTimes();\n\n    EasyMock.replay(testServletRequest);\n    Response response = queryResource.doPost(\n        new ByteArrayInputStream(SIMPLE_TIMESERIES_QUERY.getBytes(\"UTF-8\")),\n        null ,\n        testServletRequest\n    );\n    Assert.assertEquals(HttpStatus.SC_OK, response.getStatus());\n    \r\n    Assert.assertEquals(contentTypeHeader, (response.getMetadata().get(\"Content-Type\").get(0)).toString());\n    Assert.assertNotNull(response);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"M"},{"authorDate":"2020-03-10 17:57:16","commitOrder":4,"curCode":"  private void expectPermissiveHappyPathAuth()\n  {\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(AUTHENTICATION_RESULT)\n            .anyTimes();\n\n    testServletRequest.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n\n    EasyMock.replay(testServletRequest);\n  }\n","date":"2020-03-10 17:57:16","endLine":854,"groupId":"10813","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"expectPermissiveHappyPathAuth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a1/2b69025dd76b7493c0961ff10f70b4691c7411.src","preCode":"  private void expectPermissiveHappyPathAuth()\n  {\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n\n    EasyMock.expect(testServletRequest.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(AUTHENTICATION_RESULT)\n            .anyTimes();\n\n    testServletRequest.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n\n    EasyMock.replay(testServletRequest);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":839,"status":"N"}],"commitId":"1ced3b33fb1642ee71e542940e4e2a4840e7a48c","commitMessage":"@@@IntelliJ inspections cleanup (#9339)\n\n* IntelliJ inspections cleanup\n\n* Standard Charset object can be used\n* Redundant Collection.addAll() call\n* String literal concatenation missing whitespace\n* Statement with empty body\n* Redundant Collection operation\n* StringBuilder can be replaced with String\n* Type parameter hides visible type\n\n* fix warnings in test code\n\n* more test fixes\n\n* remove string concatenation inspection error\n\n* fix extra curly brace\n\n* cleanup AzureTestUtils\n\n* fix charsets for RangerAdminClient\n\n* review comments","date":"2020-04-11 01:04:40","modifiedFileCount":"33","status":"M","submitter":"Suneet Saldanha"}]
