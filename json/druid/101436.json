[{"authorTime":"2020-06-10 10:31:04","codes":[{"authorDate":"2020-09-24 04:56:38","commitOrder":4,"curCode":"  public void setup()\n  {\n    final GeneratorSchemaInfo schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(\"expression-testbench\");\n\n    final DataSegment dataSegment = DataSegment.builder()\n                                               .dataSource(\"foo\")\n                                               .interval(schemaInfo.getDataInterval())\n                                               .version(\"1\")\n                                               .shardSpec(new LinearShardSpec(0))\n                                               .size(0)\n                                               .build();\n\n    final PlannerConfig plannerConfig = new PlannerConfig();\n\n    final SegmentGenerator segmentGenerator = closer.register(new SegmentGenerator());\n    log.info(\"Starting benchmark setup using cacheDir[%s], rows[%,d].\", segmentGenerator.getCacheDir(), rowsPerSegment);\n    final QueryableIndex index = segmentGenerator.generate(dataSegment, schemaInfo, Granularities.NONE, rowsPerSegment);\n\n    final QueryRunnerFactoryConglomerate conglomerate = QueryStackTests.createQueryRunnerFactoryConglomerate(\n        closer,\n        PROCESSING_CONFIG\n    );\n\n    final SpecificSegmentsQuerySegmentWalker walker = new SpecificSegmentsQuerySegmentWalker(conglomerate).add(\n        dataSegment,\n        index\n    );\n    closer.register(walker);\n\n    final SchemaPlus rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, AuthTestUtils.TEST_AUTHORIZER_MAPPER);\n    plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        CalciteTests.createOperatorTable(),\n        CalciteTests.createExprMacroTable(),\n        plannerConfig,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    try {\n      SqlVectorizedExpressionSanityTest.sanityTestVectorizedSqlQueries(\n          plannerFactory,\n          QUERIES.get(Integer.parseInt(query))\n      );\n    }\n    catch (Throwable ignored) {\n      \r\n    }\n  }\n","date":"2020-09-24 04:56:38","endLine":275,"groupId":"14526","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/db/a8bd54558331508f949b683a8b04882d084f26.src","preCode":"  public void setup()\n  {\n    final GeneratorSchemaInfo schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(\"expression-testbench\");\n\n    final DataSegment dataSegment = DataSegment.builder()\n                                               .dataSource(\"foo\")\n                                               .interval(schemaInfo.getDataInterval())\n                                               .version(\"1\")\n                                               .shardSpec(new LinearShardSpec(0))\n                                               .size(0)\n                                               .build();\n\n    final PlannerConfig plannerConfig = new PlannerConfig();\n\n    final SegmentGenerator segmentGenerator = closer.register(new SegmentGenerator());\n    log.info(\"Starting benchmark setup using cacheDir[%s], rows[%,d].\", segmentGenerator.getCacheDir(), rowsPerSegment);\n    final QueryableIndex index = segmentGenerator.generate(dataSegment, schemaInfo, Granularities.NONE, rowsPerSegment);\n\n    final QueryRunnerFactoryConglomerate conglomerate = QueryStackTests.createQueryRunnerFactoryConglomerate(\n        closer,\n        PROCESSING_CONFIG\n    );\n\n    final SpecificSegmentsQuerySegmentWalker walker = new SpecificSegmentsQuerySegmentWalker(conglomerate).add(\n        dataSegment,\n        index\n    );\n    closer.register(walker);\n\n    final SchemaPlus rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, AuthTestUtils.TEST_AUTHORIZER_MAPPER);\n    plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        CalciteTests.createOperatorTable(),\n        CalciteTests.createExprMacroTable(),\n        plannerConfig,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    try {\n      SqlVectorizedExpressionSanityTest.sanityTestVectorizedSqlQueries(\n          plannerFactory,\n          QUERIES.get(Integer.parseInt(query))\n      );\n    }\n    catch (Throwable ignored) {\n      \r\n    }\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/query/SqlExpressionBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"B"},{"authorDate":"2020-06-10 10:31:04","commitOrder":4,"curCode":"  public void setup()\n  {\n    final GeneratorSchemaInfo schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\");\n\n    final DataSegment dataSegment = DataSegment.builder()\n                                               .dataSource(\"foo\")\n                                               .interval(schemaInfo.getDataInterval())\n                                               .version(\"1\")\n                                               .shardSpec(new LinearShardSpec(0))\n                                               .size(0)\n                                               .build();\n\n    final PlannerConfig plannerConfig = new PlannerConfig();\n\n    final SegmentGenerator segmentGenerator = closer.register(new SegmentGenerator());\n    log.info(\"Starting benchmark setup using cacheDir[%s], rows[%,d].\", segmentGenerator.getCacheDir(), rowsPerSegment);\n    final QueryableIndex index = segmentGenerator.generate(dataSegment, schemaInfo, Granularities.NONE, rowsPerSegment);\n\n    final QueryRunnerFactoryConglomerate conglomerate = QueryStackTests.createQueryRunnerFactoryConglomerate(closer);\n\n    final SpecificSegmentsQuerySegmentWalker walker = new SpecificSegmentsQuerySegmentWalker(conglomerate).add(\n        dataSegment,\n        index\n    );\n    closer.register(walker);\n\n    final SchemaPlus rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, AuthTestUtils.TEST_AUTHORIZER_MAPPER);\n    plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        CalciteTests.createOperatorTable(),\n        CalciteTests.createExprMacroTable(),\n        plannerConfig,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n  }\n","date":"2020-06-10 10:31:04","endLine":424,"groupId":"16859","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bd/63a1a20e9da8dae730404a63921fa7f6ad8fde.src","preCode":"  public void setup()\n  {\n    final GeneratorSchemaInfo schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\");\n\n    final DataSegment dataSegment = DataSegment.builder()\n                                               .dataSource(\"foo\")\n                                               .interval(schemaInfo.getDataInterval())\n                                               .version(\"1\")\n                                               .shardSpec(new LinearShardSpec(0))\n                                               .size(0)\n                                               .build();\n\n    final PlannerConfig plannerConfig = new PlannerConfig();\n\n    final SegmentGenerator segmentGenerator = closer.register(new SegmentGenerator());\n    log.info(\"Starting benchmark setup using cacheDir[%s], rows[%,d].\", segmentGenerator.getCacheDir(), rowsPerSegment);\n    final QueryableIndex index = segmentGenerator.generate(dataSegment, schemaInfo, Granularities.NONE, rowsPerSegment);\n\n    final QueryRunnerFactoryConglomerate conglomerate = QueryStackTests.createQueryRunnerFactoryConglomerate(closer);\n\n    final SpecificSegmentsQuerySegmentWalker walker = new SpecificSegmentsQuerySegmentWalker(conglomerate).add(\n        dataSegment,\n        index\n    );\n    closer.register(walker);\n\n    final SchemaPlus rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, AuthTestUtils.TEST_AUTHORIZER_MAPPER);\n    plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        CalciteTests.createOperatorTable(),\n        CalciteTests.createExprMacroTable(),\n        plannerConfig,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/query/SqlBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"NB"}],"commitId":"19c4b1664086539a3bb495eb402616cf8b6f2a77","commitMessage":"@@@vectorized expressions and expression virtual columns (#10401)\n\n* vectorized expression virtual columns\n\n* cleanup\n\n* fixes\n\n* preserve float if explicitly specified\n\n* oops\n\n* null handling fixes.  more tests\n\n* what is an expression planner?\n\n* better names\n\n* remove unused method.  add pi\n\n* move vector processor builders into static methods\n\n* reduce boilerplate\n\n* oops\n\n* more naming adjustments\n\n* changes\n\n* nullable\n\n* missing hex\n\n* more","date":"2020-09-24 04:56:38","modifiedFileCount":"56","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-09-01 05:56:37","codes":[{"authorDate":"2020-09-24 04:56:38","commitOrder":5,"curCode":"  public void setup()\n  {\n    final GeneratorSchemaInfo schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(\"expression-testbench\");\n\n    final DataSegment dataSegment = DataSegment.builder()\n                                               .dataSource(\"foo\")\n                                               .interval(schemaInfo.getDataInterval())\n                                               .version(\"1\")\n                                               .shardSpec(new LinearShardSpec(0))\n                                               .size(0)\n                                               .build();\n\n    final PlannerConfig plannerConfig = new PlannerConfig();\n\n    final SegmentGenerator segmentGenerator = closer.register(new SegmentGenerator());\n    log.info(\"Starting benchmark setup using cacheDir[%s], rows[%,d].\", segmentGenerator.getCacheDir(), rowsPerSegment);\n    final QueryableIndex index = segmentGenerator.generate(dataSegment, schemaInfo, Granularities.NONE, rowsPerSegment);\n\n    final QueryRunnerFactoryConglomerate conglomerate = QueryStackTests.createQueryRunnerFactoryConglomerate(\n        closer,\n        PROCESSING_CONFIG\n    );\n\n    final SpecificSegmentsQuerySegmentWalker walker = new SpecificSegmentsQuerySegmentWalker(conglomerate).add(\n        dataSegment,\n        index\n    );\n    closer.register(walker);\n\n    final SchemaPlus rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, AuthTestUtils.TEST_AUTHORIZER_MAPPER);\n    plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        CalciteTests.createOperatorTable(),\n        CalciteTests.createExprMacroTable(),\n        plannerConfig,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    try {\n      SqlVectorizedExpressionSanityTest.sanityTestVectorizedSqlQueries(\n          plannerFactory,\n          QUERIES.get(Integer.parseInt(query))\n      );\n    }\n    catch (Throwable ignored) {\n      \r\n    }\n  }\n","date":"2020-09-24 04:56:38","endLine":275,"groupId":"14526","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/db/a8bd54558331508f949b683a8b04882d084f26.src","preCode":"  public void setup()\n  {\n    final GeneratorSchemaInfo schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(\"expression-testbench\");\n\n    final DataSegment dataSegment = DataSegment.builder()\n                                               .dataSource(\"foo\")\n                                               .interval(schemaInfo.getDataInterval())\n                                               .version(\"1\")\n                                               .shardSpec(new LinearShardSpec(0))\n                                               .size(0)\n                                               .build();\n\n    final PlannerConfig plannerConfig = new PlannerConfig();\n\n    final SegmentGenerator segmentGenerator = closer.register(new SegmentGenerator());\n    log.info(\"Starting benchmark setup using cacheDir[%s], rows[%,d].\", segmentGenerator.getCacheDir(), rowsPerSegment);\n    final QueryableIndex index = segmentGenerator.generate(dataSegment, schemaInfo, Granularities.NONE, rowsPerSegment);\n\n    final QueryRunnerFactoryConglomerate conglomerate = QueryStackTests.createQueryRunnerFactoryConglomerate(\n        closer,\n        PROCESSING_CONFIG\n    );\n\n    final SpecificSegmentsQuerySegmentWalker walker = new SpecificSegmentsQuerySegmentWalker(conglomerate).add(\n        dataSegment,\n        index\n    );\n    closer.register(walker);\n\n    final SchemaPlus rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, AuthTestUtils.TEST_AUTHORIZER_MAPPER);\n    plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        CalciteTests.createOperatorTable(),\n        CalciteTests.createExprMacroTable(),\n        plannerConfig,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    try {\n      SqlVectorizedExpressionSanityTest.sanityTestVectorizedSqlQueries(\n          plannerFactory,\n          QUERIES.get(Integer.parseInt(query))\n      );\n    }\n    catch (Throwable ignored) {\n      \r\n    }\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/query/SqlExpressionBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"N"},{"authorDate":"2021-09-01 05:56:37","commitOrder":5,"curCode":"  public void setup()\n  {\n    final GeneratorSchemaInfo schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\");\n\n    final DataSegment dataSegment = DataSegment.builder()\n                                               .dataSource(\"foo\")\n                                               .interval(schemaInfo.getDataInterval())\n                                               .version(\"1\")\n                                               .shardSpec(new LinearShardSpec(0))\n                                               .size(0)\n                                               .build();\n\n    final PlannerConfig plannerConfig = new PlannerConfig();\n\n    final SegmentGenerator segmentGenerator = closer.register(new SegmentGenerator());\n    log.info(\"Starting benchmark setup using cacheDir[%s], rows[%,d].\", segmentGenerator.getCacheDir(), rowsPerSegment);\n    final QueryableIndex index = segmentGenerator.generate(dataSegment, schemaInfo, Granularities.NONE, rowsPerSegment);\n\n    final QueryRunnerFactoryConglomerate conglomerate = QueryStackTests.createQueryRunnerFactoryConglomerate(closer);\n\n    final SpecificSegmentsQuerySegmentWalker walker = new SpecificSegmentsQuerySegmentWalker(conglomerate).add(\n        dataSegment,\n        index\n    );\n    closer.register(walker);\n\n    final SchemaPlus rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, AuthTestUtils.TEST_AUTHORIZER_MAPPER);\n    plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        createOperatorTable(),\n        CalciteTests.createExprMacroTable(),\n        plannerConfig,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n  }\n","date":"2021-09-01 05:56:37","endLine":436,"groupId":"16859","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7d/9a55d904b175e953f65b4c08aedb923cb9cb2a.src","preCode":"  public void setup()\n  {\n    final GeneratorSchemaInfo schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\");\n\n    final DataSegment dataSegment = DataSegment.builder()\n                                               .dataSource(\"foo\")\n                                               .interval(schemaInfo.getDataInterval())\n                                               .version(\"1\")\n                                               .shardSpec(new LinearShardSpec(0))\n                                               .size(0)\n                                               .build();\n\n    final PlannerConfig plannerConfig = new PlannerConfig();\n\n    final SegmentGenerator segmentGenerator = closer.register(new SegmentGenerator());\n    log.info(\"Starting benchmark setup using cacheDir[%s], rows[%,d].\", segmentGenerator.getCacheDir(), rowsPerSegment);\n    final QueryableIndex index = segmentGenerator.generate(dataSegment, schemaInfo, Granularities.NONE, rowsPerSegment);\n\n    final QueryRunnerFactoryConglomerate conglomerate = QueryStackTests.createQueryRunnerFactoryConglomerate(closer);\n\n    final SpecificSegmentsQuerySegmentWalker walker = new SpecificSegmentsQuerySegmentWalker(conglomerate).add(\n        dataSegment,\n        index\n    );\n    closer.register(walker);\n\n    final SchemaPlus rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, AuthTestUtils.TEST_AUTHORIZER_MAPPER);\n    plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        CalciteTests.createOperatorTable(),\n        CalciteTests.createExprMacroTable(),\n        plannerConfig,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/query/SqlBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":398,"status":"M"}],"commitId":"7e90d00cc0e3e9a01d1a3a7730f5bbf6d276999b","commitMessage":"@@@Configurable maxStreamLength for doubles sketches (#11574)\n\n* Configurable maxStreamLength for doubles sketches\n\n* fix equals/hashcode and it test failure\n\n* fix test\n\n* fix it test\n\n* benchmark\n\n* doc\n\n* grouping key\n\n* fix comment\n\n* dependency check\n\n* Update docs/development/extensions-core/datasketches-quantiles.md\n\nCo-authored-by: Charles Smith <techdocsmith@gmail.com>\n\n* Update docs/querying/sql.md\n\nCo-authored-by: Charles Smith <techdocsmith@gmail.com>\n\n* Update docs/querying/sql.md\n\nCo-authored-by: Charles Smith <techdocsmith@gmail.com>\n\n* Update docs/querying/sql.md\n\nCo-authored-by: Charles Smith <techdocsmith@gmail.com>\n\n* Update docs/querying/sql.md\n\nCo-authored-by: Charles Smith <techdocsmith@gmail.com>\n\n* Update docs/querying/sql.md\n\nCo-authored-by: Charles Smith <techdocsmith@gmail.com>\n\n* Update docs/querying/sql.md\n\nCo-authored-by: Charles Smith <techdocsmith@gmail.com>\n\n* Update docs/querying/sql.md\n\nCo-authored-by: Charles Smith <techdocsmith@gmail.com>\n\nCo-authored-by: Charles Smith <techdocsmith@gmail.com>","date":"2021-09-01 05:56:37","modifiedFileCount":"14","status":"M","submitter":"Jihoon Son"},{"authorTime":"2021-09-18 00:53:25","codes":[{"authorDate":"2021-09-18 00:53:25","commitOrder":6,"curCode":"  public void setup()\n  {\n    final GeneratorSchemaInfo schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(\"expression-testbench\");\n\n    final DataSegment dataSegment = DataSegment.builder()\n                                               .dataSource(\"foo\")\n                                               .interval(schemaInfo.getDataInterval())\n                                               .version(\"1\")\n                                               .shardSpec(new LinearShardSpec(0))\n                                               .size(0)\n                                               .build();\n\n    final PlannerConfig plannerConfig = new PlannerConfig();\n\n    final SegmentGenerator segmentGenerator = closer.register(new SegmentGenerator());\n    log.info(\"Starting benchmark setup using cacheDir[%s], rows[%,d].\", segmentGenerator.getCacheDir(), rowsPerSegment);\n    final QueryableIndex index = segmentGenerator.generate(dataSegment, schemaInfo, Granularities.NONE, rowsPerSegment);\n\n    final QueryRunnerFactoryConglomerate conglomerate = QueryStackTests.createQueryRunnerFactoryConglomerate(\n        closer,\n        PROCESSING_CONFIG\n    );\n\n    final SpecificSegmentsQuerySegmentWalker walker = new SpecificSegmentsQuerySegmentWalker(conglomerate).add(\n        dataSegment,\n        index\n    );\n    closer.register(walker);\n\n    final DruidSchemaCatalog rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, AuthTestUtils.TEST_AUTHORIZER_MAPPER);\n    plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        CalciteTests.createOperatorTable(),\n        CalciteTests.createExprMacroTable(),\n        plannerConfig,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    try {\n      SqlVectorizedExpressionSanityTest.sanityTestVectorizedSqlQueries(\n          plannerFactory,\n          QUERIES.get(Integer.parseInt(query))\n      );\n    }\n    catch (Throwable ignored) {\n      \r\n    }\n  }\n","date":"2021-09-18 00:53:25","endLine":289,"groupId":"101436","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3f/99b241f7dc22df8200d667c023931ee8eda156.src","preCode":"  public void setup()\n  {\n    final GeneratorSchemaInfo schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(\"expression-testbench\");\n\n    final DataSegment dataSegment = DataSegment.builder()\n                                               .dataSource(\"foo\")\n                                               .interval(schemaInfo.getDataInterval())\n                                               .version(\"1\")\n                                               .shardSpec(new LinearShardSpec(0))\n                                               .size(0)\n                                               .build();\n\n    final PlannerConfig plannerConfig = new PlannerConfig();\n\n    final SegmentGenerator segmentGenerator = closer.register(new SegmentGenerator());\n    log.info(\"Starting benchmark setup using cacheDir[%s], rows[%,d].\", segmentGenerator.getCacheDir(), rowsPerSegment);\n    final QueryableIndex index = segmentGenerator.generate(dataSegment, schemaInfo, Granularities.NONE, rowsPerSegment);\n\n    final QueryRunnerFactoryConglomerate conglomerate = QueryStackTests.createQueryRunnerFactoryConglomerate(\n        closer,\n        PROCESSING_CONFIG\n    );\n\n    final SpecificSegmentsQuerySegmentWalker walker = new SpecificSegmentsQuerySegmentWalker(conglomerate).add(\n        dataSegment,\n        index\n    );\n    closer.register(walker);\n\n    final SchemaPlus rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, AuthTestUtils.TEST_AUTHORIZER_MAPPER);\n    plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        CalciteTests.createOperatorTable(),\n        CalciteTests.createExprMacroTable(),\n        plannerConfig,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    try {\n      SqlVectorizedExpressionSanityTest.sanityTestVectorizedSqlQueries(\n          plannerFactory,\n          QUERIES.get(Integer.parseInt(query))\n      );\n    }\n    catch (Throwable ignored) {\n      \r\n    }\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/query/SqlExpressionBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"},{"authorDate":"2021-09-18 00:53:25","commitOrder":6,"curCode":"  public void setup()\n  {\n    final GeneratorSchemaInfo schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\");\n\n    final DataSegment dataSegment = DataSegment.builder()\n                                               .dataSource(\"foo\")\n                                               .interval(schemaInfo.getDataInterval())\n                                               .version(\"1\")\n                                               .shardSpec(new LinearShardSpec(0))\n                                               .size(0)\n                                               .build();\n\n    final PlannerConfig plannerConfig = new PlannerConfig();\n\n    final SegmentGenerator segmentGenerator = closer.register(new SegmentGenerator());\n    log.info(\"Starting benchmark setup using cacheDir[%s], rows[%,d].\", segmentGenerator.getCacheDir(), rowsPerSegment);\n    final QueryableIndex index = segmentGenerator.generate(dataSegment, schemaInfo, Granularities.NONE, rowsPerSegment);\n\n    final QueryRunnerFactoryConglomerate conglomerate = QueryStackTests.createQueryRunnerFactoryConglomerate(closer);\n\n    final SpecificSegmentsQuerySegmentWalker walker = new SpecificSegmentsQuerySegmentWalker(conglomerate).add(\n        dataSegment,\n        index\n    );\n    closer.register(walker);\n\n    final DruidSchemaCatalog rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, AuthTestUtils.TEST_AUTHORIZER_MAPPER);\n    plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        createOperatorTable(),\n        CalciteTests.createExprMacroTable(),\n        plannerConfig,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n  }\n","date":"2021-09-18 00:53:25","endLine":436,"groupId":"101436","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/12/b717ec002fc6c101209da05acd0fa3e8dfb996.src","preCode":"  public void setup()\n  {\n    final GeneratorSchemaInfo schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\");\n\n    final DataSegment dataSegment = DataSegment.builder()\n                                               .dataSource(\"foo\")\n                                               .interval(schemaInfo.getDataInterval())\n                                               .version(\"1\")\n                                               .shardSpec(new LinearShardSpec(0))\n                                               .size(0)\n                                               .build();\n\n    final PlannerConfig plannerConfig = new PlannerConfig();\n\n    final SegmentGenerator segmentGenerator = closer.register(new SegmentGenerator());\n    log.info(\"Starting benchmark setup using cacheDir[%s], rows[%,d].\", segmentGenerator.getCacheDir(), rowsPerSegment);\n    final QueryableIndex index = segmentGenerator.generate(dataSegment, schemaInfo, Granularities.NONE, rowsPerSegment);\n\n    final QueryRunnerFactoryConglomerate conglomerate = QueryStackTests.createQueryRunnerFactoryConglomerate(closer);\n\n    final SpecificSegmentsQuerySegmentWalker walker = new SpecificSegmentsQuerySegmentWalker(conglomerate).add(\n        dataSegment,\n        index\n    );\n    closer.register(walker);\n\n    final SchemaPlus rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, AuthTestUtils.TEST_AUTHORIZER_MAPPER);\n    plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        createOperatorTable(),\n        CalciteTests.createExprMacroTable(),\n        plannerConfig,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/query/SqlBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":398,"status":"M"}],"commitId":"392f0ca1b52ee66aa8b3affed58eb117bb44d910","commitMessage":"@@@refactor sql authorization to get resource type from schema.  resource type to be string (#11692)\n\n* refactor sql authorization to get resource type from schema.  refactor resource type from enum to string\n\n* information schema auth filtering adjustments\n\n* refactor\n\n* minor stuff\n\n* Update SqlResourceCollectorShuttle.java","date":"2021-09-18 00:53:25","modifiedFileCount":"32","status":"M","submitter":"Clint Wylie"}]
