[{"authorTime":"2018-10-15 11:37:37","codes":[{"authorDate":"2018-10-15 11:37:37","commitOrder":1,"curCode":"  public void testOverlapDescending()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-01-03/2011-01-06\", \"3\", 3);\n    add(\"2011-01-05/2011-01-20\", \"2\", 2);\n    add(\"2011-01-01/2011-01-10\", \"1\", 1);\n\n    assertValues(\n        Arrays.asList(\n            createExpected(\"2011-01-01/2011-01-03\", \"1\", 1),\n            createExpected(\"2011-01-03/2011-01-06\", \"3\", 3),\n            createExpected(\"2011-01-06/2011-01-20\", \"2\", 2)\n        ),\n        timeline.lookup(Intervals.of(\"2011-01-01/2011-01-20\"))\n    );\n  }\n","date":"2018-10-15 11:37:37","endLine":692,"groupId":"6718","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOverlapDescending","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/1f6a605c5c6e9ed6995b5f6015449a98ea7d15.src","preCode":"  public void testOverlapDescending()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-01-03/2011-01-06\", \"3\", 3);\n    add(\"2011-01-05/2011-01-20\", \"2\", 2);\n    add(\"2011-01-01/2011-01-10\", \"1\", 1);\n\n    assertValues(\n        Arrays.asList(\n            createExpected(\"2011-01-01/2011-01-03\", \"1\", 1),\n            createExpected(\"2011-01-03/2011-01-06\", \"3\", 3),\n            createExpected(\"2011-01-06/2011-01-20\", \"2\", 2)\n        ),\n        timeline.lookup(Intervals.of(\"2011-01-01/2011-01-20\"))\n    );\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":676,"status":"B"},{"authorDate":"2018-10-15 11:37:37","commitOrder":1,"curCode":"  public void testOverlapContainedmixed()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-01-02/2011-01-10\", \"2\", 2);\n    add(\"2011-01-02/2011-01-06\", \"3\", 3);\n    add(\"2011-01-01/2011-01-20\", \"1\", 1);\n\n    assertValues(\n        Arrays.asList(\n            createExpected(\"2011-01-01/2011-01-02\", \"1\", 1),\n            createExpected(\"2011-01-02/2011-01-06\", \"3\", 3),\n            createExpected(\"2011-01-06/2011-01-10\", \"2\", 2),\n            createExpected(\"2011-01-10/2011-01-20\", \"1\", 1)\n        ),\n        timeline.lookup(Intervals.of(\"2011-01-01/2011-01-20\"))\n    );\n  }\n","date":"2018-10-15 11:37:37","endLine":783,"groupId":"6718","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverlapContainedmixed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/1f6a605c5c6e9ed6995b5f6015449a98ea7d15.src","preCode":"  public void testOverlapContainedmixed()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-01-02/2011-01-10\", \"2\", 2);\n    add(\"2011-01-02/2011-01-06\", \"3\", 3);\n    add(\"2011-01-01/2011-01-20\", \"1\", 1);\n\n    assertValues(\n        Arrays.asList(\n            createExpected(\"2011-01-01/2011-01-02\", \"1\", 1),\n            createExpected(\"2011-01-02/2011-01-06\", \"3\", 3),\n            createExpected(\"2011-01-06/2011-01-10\", \"2\", 2),\n            createExpected(\"2011-01-10/2011-01-20\", \"1\", 1)\n        ),\n        timeline.lookup(Intervals.of(\"2011-01-01/2011-01-20\"))\n    );\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":766,"status":"B"}],"commitId":"84598fba3b283cbfd6a5addd2602c7b12ba8c00c","commitMessage":"@@@combine druid-api.  druid-common.  java-util into druid-core (#6443)\n\n* combine druid-api.  druid-common.  java-util\n\n* spacing\n","date":"2018-10-15 11:37:37","modifiedFileCount":"0","status":"B","submitter":"Clint Wylie"},{"authorTime":"2019-11-07 03:07:04","codes":[{"authorDate":"2019-11-07 03:07:04","commitOrder":2,"curCode":"  public void testOverlapDescending()\n  {\n    add(\"2011-01-03/2011-01-06\", \"3\", 3);\n    add(\"2011-01-05/2011-01-20\", \"2\", 2);\n    add(\"2011-01-01/2011-01-10\", \"1\", 1);\n\n    assertValues(\n        Arrays.asList(\n            createExpected(\"2011-01-01/2011-01-03\", \"1\", 1),\n            createExpected(\"2011-01-03/2011-01-06\", \"3\", 3),\n            createExpected(\"2011-01-06/2011-01-20\", \"2\", 2)\n        ),\n        timeline.lookup(Intervals.of(\"2011-01-01/2011-01-20\"))\n    );\n  }\n","date":"2019-11-07 03:07:04","endLine":311,"groupId":"105165","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOverlapDescending","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e1/ab76c506b668abe29f0cfc4c03fbee37bdc94a.src","preCode":"  public void testOverlapDescending()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-01-03/2011-01-06\", \"3\", 3);\n    add(\"2011-01-05/2011-01-20\", \"2\", 2);\n    add(\"2011-01-01/2011-01-10\", \"1\", 1);\n\n    assertValues(\n        Arrays.asList(\n            createExpected(\"2011-01-01/2011-01-03\", \"1\", 1),\n            createExpected(\"2011-01-03/2011-01-06\", \"3\", 3),\n            createExpected(\"2011-01-06/2011-01-20\", \"2\", 2)\n        ),\n        timeline.lookup(Intervals.of(\"2011-01-01/2011-01-20\"))\n    );\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2019-11-07 03:07:04","commitOrder":2,"curCode":"  public void testOverlapContainedmixed()\n  {\n    add(\"2011-01-02/2011-01-10\", \"2\", 2);\n    add(\"2011-01-02/2011-01-06\", \"3\", 3);\n    add(\"2011-01-01/2011-01-20\", \"1\", 1);\n\n    assertValues(\n        Arrays.asList(\n            createExpected(\"2011-01-01/2011-01-02\", \"1\", 1),\n            createExpected(\"2011-01-02/2011-01-06\", \"3\", 3),\n            createExpected(\"2011-01-06/2011-01-10\", \"2\", 2),\n            createExpected(\"2011-01-10/2011-01-20\", \"1\", 1)\n        ),\n        timeline.lookup(Intervals.of(\"2011-01-01/2011-01-20\"))\n    );\n  }\n","date":"2019-11-07 03:07:04","endLine":394,"groupId":"105165","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverlapContainedmixed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e1/ab76c506b668abe29f0cfc4c03fbee37bdc94a.src","preCode":"  public void testOverlapContainedmixed()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-01-02/2011-01-10\", \"2\", 2);\n    add(\"2011-01-02/2011-01-06\", \"3\", 3);\n    add(\"2011-01-01/2011-01-20\", \"1\", 1);\n\n    assertValues(\n        Arrays.asList(\n            createExpected(\"2011-01-01/2011-01-02\", \"1\", 1),\n            createExpected(\"2011-01-02/2011-01-06\", \"3\", 3),\n            createExpected(\"2011-01-06/2011-01-10\", \"2\", 2),\n            createExpected(\"2011-01-10/2011-01-20\", \"1\", 1)\n        ),\n        timeline.lookup(Intervals.of(\"2011-01-01/2011-01-20\"))\n    );\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":379,"status":"M"}],"commitId":"5c0fc0a13ab4d259b430bf50b322f631504c4529","commitMessage":"@@@Fix ambiguity about IndexerSQLMetadataStorageCoordinator.getUsedSegmentsForInterval() returning only non-overshadowed or all used segments (#8564)\n\n* IndexerSQLMetadataStorageCoordinator.getTimelineForIntervalsWithHandle() don't fetch abutting intervals; simplify getUsedSegmentsForIntervals()\n\n* Add VersionedIntervalTimeline.findNonOvershadowedObjectsInInterval() method; Propagate the decision about whether only visible segmetns or visible and overshadowed segments should be returned from IndexerMetadataStorageCoordinator's methods to the user logic; Rename SegmentListUsedAction to RetrieveUsedSegmentsAction.  SegmetnListUnusedAction to RetrieveUnusedSegmentsAction.  and UsedSegmentLister to UsedSegmentsRetriever\n\n* Fix tests\n\n* More fixes\n\n* Add javadoc notes about returning Collection instead of Set. Add JacksonUtils.readValue() to reduce boilerplate code\n\n* Fix KinesisIndexTaskTest.  factor out common parts from KinesisIndexTaskTest and KafkaIndexTaskTest into SeekableStreamIndexTaskTestBase\n\n* More test fixes\n\n* More test fixes\n\n* Add a comment to VersionedIntervalTimelineTestBase\n\n* Fix tests\n\n* Set DataSegment.size(0) in more tests\n\n* Specify DataSegment.size(0) in more places in tests\n\n* Fix more tests\n\n* Fix DruidSchemaTest\n\n* Set DataSegment's size in more tests and benchmarks\n\n* Fix HdfsDataSegmentPusherTest\n\n* Doc changes addressing comments\n\n* Extended doc for visibility\n\n* Typo\n\n* Typo 2\n\n* Address comment\n","date":"2019-11-07 03:07:04","modifiedFileCount":"88","status":"M","submitter":"Roman Leventov"}]
