[{"authorTime":"2019-02-19 03:50:08","codes":[{"authorDate":"2019-02-19 03:50:08","commitOrder":4,"curCode":"  public void testRunWithPauseAndResume() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 2L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 6L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    Map<Integer, Long> currentOffsets = objectMapper.readValue(\n        task.getRunner().pause().getEntity().toString(),\n        new TypeReference<Map<Integer, Long>>()\n        {\n        }\n    );\n    Assert.assertEquals(Status.PAUSED, task.getRunner().getStatus());\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    try {\n      future.get(10, TimeUnit.SECONDS);\n      Assert.fail(\"Task completed when it should have been paused\");\n    }\n    catch (TimeoutException e) {\n      \r\n    }\n\n    Assert.assertEquals(currentOffsets, task.getRunner().getCurrentOffsets());\n\n    task.getRunner().resume();\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = SD(task, \"2010/P1D\", 0);\n    SegmentDescriptor desc2 = SD(task, \"2011/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 6L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"c\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"d\", \"e\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","date":"2019-02-19 03:50:08","endLine":1924,"groupId":"7808","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithPauseAndResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3d/6308cb0a96b01947db7e17b51cab010dd61129.src","preCode":"  public void testRunWithPauseAndResume() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 2L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 6L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    Map<Integer, Long> currentOffsets = objectMapper.readValue(\n        task.getRunner().pause().getEntity().toString(),\n        new TypeReference<Map<Integer, Long>>()\n        {\n        }\n    );\n    Assert.assertEquals(Status.PAUSED, task.getRunner().getStatus());\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    try {\n      future.get(10, TimeUnit.SECONDS);\n      Assert.fail(\"Task completed when it should have been paused\");\n    }\n    catch (TimeoutException e) {\n      \r\n    }\n\n    Assert.assertEquals(currentOffsets, task.getRunner().getCurrentOffsets());\n\n    task.getRunner().resume();\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = SD(task, \"2010/P1D\", 0);\n    SegmentDescriptor desc2 = SD(task, \"2011/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 6L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"c\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"d\", \"e\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1838,"status":"MB"},{"authorDate":"2019-02-19 03:50:08","commitOrder":4,"curCode":"  public void testRunTransactionModeRollback() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 0L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 13L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 2)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    \r\n    final QuerySegmentSpec firstInterval = objectMapper.readValue(\n        \"\\\"2008/2010\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues = scanData(task, firstInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(Iterables.skip(records, 2), 3)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.abortTransaction();\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    final QuerySegmentSpec rollbackedInterval = objectMapper.readValue(\n        \"\\\"2010/2012\\\"\", QuerySegmentSpec.class\n    );\n    scanResultValues = scanData(task, rollbackedInterval);\n    \r\n    Assert.assertEquals(0, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 5)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    final QuerySegmentSpec endInterval = objectMapper.readValue(\n        \"\\\"2008/2049\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues1 = scanData(task, endInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues1));\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(1, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = SD(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = SD(task, \"2009/P1D\", 0);\n    SegmentDescriptor desc3 = SD(task, \"2013/P1D\", 0);\n    SegmentDescriptor desc4 = SD(task, \"2049/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2, desc3, desc4), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 13L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", desc3));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", desc4));\n  }\n","date":"2019-02-19 03:50:08","endLine":2197,"groupId":"4900","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunTransactionModeRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3d/6308cb0a96b01947db7e17b51cab010dd61129.src","preCode":"  public void testRunTransactionModeRollback() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 0L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 13L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 2)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    \r\n    final QuerySegmentSpec firstInterval = objectMapper.readValue(\n        \"\\\"2008/2010\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues = scanData(task, firstInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(Iterables.skip(records, 2), 3)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.abortTransaction();\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    final QuerySegmentSpec rollbackedInterval = objectMapper.readValue(\n        \"\\\"2010/2012\\\"\", QuerySegmentSpec.class\n    );\n    scanResultValues = scanData(task, rollbackedInterval);\n    \r\n    Assert.assertEquals(0, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 5)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    final QuerySegmentSpec endInterval = objectMapper.readValue(\n        \"\\\"2008/2049\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues1 = scanData(task, endInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues1));\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(1, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = SD(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = SD(task, \"2009/P1D\", 0);\n    SegmentDescriptor desc3 = SD(task, \"2013/P1D\", 0);\n    SegmentDescriptor desc4 = SD(task, \"2049/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2, desc3, desc4), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 13L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", desc3));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", desc4));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2093,"status":"B"}],"commitId":"80a2ef7be46c4fc807ac2a74507b8ba8b6a44049","commitMessage":"@@@Support kafka transactional topics (#5404) (#6496)\n\n* Support kafka transactional topics\n\n* update kafka to version 2.0.0\n* Remove the skipOffsetGaps option since it's not used anymore\n* Adjust kafka consumer to use transactional semantics\n* Update tests\n\n* Remove unused import from test\n\n* Fix compilation\n\n* Invoke transaction api to fix a unit test\n\n* temporary modification of travis.yml for debugging\n\n* another attempt to get travis tasklogs\n\n* update kafka to 2.0.1 at all places\n\n* Remove druid-kafka-eight dependency from integration-tests.  remove the kafka firehose test and deprecate kafka-eight classes\n\n* Add deprecated in docs for kafka-eight and kafka-simple extensions\n\n* Remove skipOffsetGaps and code changes for transaction support\n\n* Fix indentation\n\n* remove skipOffsetGaps from kinesis\n\n* Add transaction api to KafkaRecordSupplierTest\n\n* Fix indent\n\n* Fix test\n\n* update kafka version to 2.1.0\n","date":"2019-02-19 03:50:08","modifiedFileCount":"25","status":"M","submitter":"Surekha"},{"authorTime":"2019-02-24 12:10:31","codes":[{"authorDate":"2019-02-24 12:10:31","commitOrder":5,"curCode":"  public void testRunWithPauseAndResume() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 2L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 6L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    Map<Integer, Long> currentOffsets = objectMapper.readValue(\n        task.getRunner().pause().getEntity().toString(),\n        new TypeReference<Map<Integer, Long>>()\n        {\n        }\n    );\n    Assert.assertEquals(Status.PAUSED, task.getRunner().getStatus());\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    try {\n      future.get(10, TimeUnit.SECONDS);\n      Assert.fail(\"Task completed when it should have been paused\");\n    }\n    catch (TimeoutException e) {\n      \r\n    }\n\n    Assert.assertEquals(currentOffsets, task.getRunner().getCurrentOffsets());\n\n    task.getRunner().resume();\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2010/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2011/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 6L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"c\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"d\", \"e\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","date":"2019-02-24 12:10:31","endLine":1929,"groupId":"7808","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithPauseAndResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/9bf8ad3716e1bda5912843b5946146e1e703d6.src","preCode":"  public void testRunWithPauseAndResume() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 2L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 6L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    Map<Integer, Long> currentOffsets = objectMapper.readValue(\n        task.getRunner().pause().getEntity().toString(),\n        new TypeReference<Map<Integer, Long>>()\n        {\n        }\n    );\n    Assert.assertEquals(Status.PAUSED, task.getRunner().getStatus());\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    try {\n      future.get(10, TimeUnit.SECONDS);\n      Assert.fail(\"Task completed when it should have been paused\");\n    }\n    catch (TimeoutException e) {\n      \r\n    }\n\n    Assert.assertEquals(currentOffsets, task.getRunner().getCurrentOffsets());\n\n    task.getRunner().resume();\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = SD(task, \"2010/P1D\", 0);\n    SegmentDescriptor desc2 = SD(task, \"2011/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 6L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"c\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"d\", \"e\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1843,"status":"M"},{"authorDate":"2019-02-24 12:10:31","commitOrder":5,"curCode":"  public void testRunTransactionModeRollback() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 0L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 13L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 2)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    \r\n    final QuerySegmentSpec firstInterval = objectMapper.readValue(\n        \"\\\"2008/2010\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues = scanData(task, firstInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(Iterables.skip(records, 2), 3)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.abortTransaction();\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    final QuerySegmentSpec rollbackedInterval = objectMapper.readValue(\n        \"\\\"2010/2012\\\"\", QuerySegmentSpec.class\n    );\n    scanResultValues = scanData(task, rollbackedInterval);\n    \r\n    Assert.assertEquals(0, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 5)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    final QuerySegmentSpec endInterval = objectMapper.readValue(\n        \"\\\"2008/2049\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues1 = scanData(task, endInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues1));\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(1, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2009/P1D\", 0);\n    SegmentDescriptor desc3 = sd(task, \"2013/P1D\", 0);\n    SegmentDescriptor desc4 = sd(task, \"2049/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2, desc3, desc4), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 13L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", desc3));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", desc4));\n  }\n","date":"2019-02-24 12:10:31","endLine":2202,"groupId":"4900","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunTransactionModeRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/9bf8ad3716e1bda5912843b5946146e1e703d6.src","preCode":"  public void testRunTransactionModeRollback() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 0L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 13L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 2)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    \r\n    final QuerySegmentSpec firstInterval = objectMapper.readValue(\n        \"\\\"2008/2010\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues = scanData(task, firstInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(Iterables.skip(records, 2), 3)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.abortTransaction();\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    final QuerySegmentSpec rollbackedInterval = objectMapper.readValue(\n        \"\\\"2010/2012\\\"\", QuerySegmentSpec.class\n    );\n    scanResultValues = scanData(task, rollbackedInterval);\n    \r\n    Assert.assertEquals(0, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 5)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    final QuerySegmentSpec endInterval = objectMapper.readValue(\n        \"\\\"2008/2049\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues1 = scanData(task, endInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues1));\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(1, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = SD(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = SD(task, \"2009/P1D\", 0);\n    SegmentDescriptor desc3 = SD(task, \"2013/P1D\", 0);\n    SegmentDescriptor desc4 = SD(task, \"2049/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2, desc3, desc4), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 13L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", desc3));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", desc4));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2098,"status":"M"}],"commitId":"8b803cbc22b15799fd0526de8d6d0eea155ad733","commitMessage":"@@@Added checkstyle for \"Methods starting with Capital Letters\"  (#7118)\n\n* Added checkstyle for \"Methods starting with Capital Letters\" and changed the method names violating this.\n\n* Un-abbreviate the method names in the calcite tests\n\n* Fixed checkstyle errors\n\n* Changed asserts position in the code\n","date":"2019-02-24 12:10:31","modifiedFileCount":"24","status":"M","submitter":"Himanshu Pandey"},{"authorTime":"2019-03-22 04:12:22","codes":[{"authorDate":"2019-03-22 04:12:22","commitOrder":6,"curCode":"  public void testRunWithPauseAndResume() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 2L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    Map<Integer, Long> currentOffsets = objectMapper.readValue(\n        task.getRunner().pause().getEntity().toString(),\n        new TypeReference<Map<Integer, Long>>()\n        {\n        }\n    );\n    Assert.assertEquals(Status.PAUSED, task.getRunner().getStatus());\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    try {\n      future.get(10, TimeUnit.SECONDS);\n      Assert.fail(\"Task completed when it should have been paused\");\n    }\n    catch (TimeoutException e) {\n      \r\n    }\n\n    Assert.assertEquals(currentOffsets, task.getRunner().getCurrentOffsets());\n\n    task.getRunner().resume();\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2010/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2011/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"c\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"d\", \"e\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","date":"2019-03-22 04:12:22","endLine":2061,"groupId":"7808","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithPauseAndResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/eb/ef3fc4596a43b59efefcaf094105a8ae34ab5f.src","preCode":"  public void testRunWithPauseAndResume() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 2L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 6L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    Map<Integer, Long> currentOffsets = objectMapper.readValue(\n        task.getRunner().pause().getEntity().toString(),\n        new TypeReference<Map<Integer, Long>>()\n        {\n        }\n    );\n    Assert.assertEquals(Status.PAUSED, task.getRunner().getStatus());\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    try {\n      future.get(10, TimeUnit.SECONDS);\n      Assert.fail(\"Task completed when it should have been paused\");\n    }\n    catch (TimeoutException e) {\n      \r\n    }\n\n    Assert.assertEquals(currentOffsets, task.getRunner().getCurrentOffsets());\n\n    task.getRunner().resume();\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2010/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2011/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 6L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"c\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"d\", \"e\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1975,"status":"M"},{"authorDate":"2019-03-22 04:12:22","commitOrder":6,"curCode":"  public void testRunTransactionModeRollback() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 0L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 2)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    \r\n    final QuerySegmentSpec firstInterval = objectMapper.readValue(\n        \"\\\"2008/2010\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues = scanData(task, firstInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(Iterables.skip(records, 2), 3)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.abortTransaction();\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    final QuerySegmentSpec rollbackedInterval = objectMapper.readValue(\n        \"\\\"2010/2012\\\"\", QuerySegmentSpec.class\n    );\n    scanResultValues = scanData(task, rollbackedInterval);\n    \r\n    Assert.assertEquals(0, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 5)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    final QuerySegmentSpec endInterval = objectMapper.readValue(\n        \"\\\"2008/2049\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues1 = scanData(task, endInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues1));\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(1, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2009/P1D\", 0);\n    SegmentDescriptor desc3 = sd(task, \"2013/P1D\", 0);\n    SegmentDescriptor desc4 = sd(task, \"2049/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2, desc3, desc4), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", desc3));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", desc4));\n  }\n","date":"2019-03-22 04:12:22","endLine":2334,"groupId":"4900","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunTransactionModeRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/eb/ef3fc4596a43b59efefcaf094105a8ae34ab5f.src","preCode":"  public void testRunTransactionModeRollback() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 0L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 13L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 2)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    \r\n    final QuerySegmentSpec firstInterval = objectMapper.readValue(\n        \"\\\"2008/2010\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues = scanData(task, firstInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(Iterables.skip(records, 2), 3)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.abortTransaction();\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    final QuerySegmentSpec rollbackedInterval = objectMapper.readValue(\n        \"\\\"2010/2012\\\"\", QuerySegmentSpec.class\n    );\n    scanResultValues = scanData(task, rollbackedInterval);\n    \r\n    Assert.assertEquals(0, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 5)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    final QuerySegmentSpec endInterval = objectMapper.readValue(\n        \"\\\"2008/2049\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues1 = scanData(task, endInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues1));\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(1, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2009/P1D\", 0);\n    SegmentDescriptor desc3 = sd(task, \"2013/P1D\", 0);\n    SegmentDescriptor desc4 = sd(task, \"2049/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2, desc3, desc4), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 13L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", desc3));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", desc4));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2230,"status":"M"}],"commitId":"0c5dcf5586e33607849e397209f3eb0b10661f1e","commitMessage":"@@@Fix exclusivity for start offset in kinesis indexing service & check exclusivity properly in IndexerSQLMetadataStorageCoordinator (#7291)\n\n* Fix exclusivity for start offset in kinesis indexing service\n\n* some adjustment\n\n* Fix SeekableStreamDataSourceMetadata\n\n* Add missing javadocs\n\n* Add missing comments and unit test\n\n* fix SeekableStreamStartSequenceNumbers.plus and add comments\n\n* remove extra exclusivePartitions in KafkaIOConfig and fix downgrade issue\n\n* Add javadocs\n\n* fix compilation\n\n* fix test\n\n* remove unused variable\n","date":"2019-03-22 04:12:22","modifiedFileCount":"30","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-05-23 12:13:57","codes":[{"authorDate":"2019-05-23 12:13:57","commitOrder":7,"curCode":"  public void testRunWithPauseAndResume() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 2L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    Map<Integer, Long> currentOffsets = OBJECT_MAPPER.readValue(\n        task.getRunner().pause().getEntity().toString(),\n        new TypeReference<Map<Integer, Long>>()\n        {\n        }\n    );\n    Assert.assertEquals(Status.PAUSED, task.getRunner().getStatus());\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    try {\n      future.get(10, TimeUnit.SECONDS);\n      Assert.fail(\"Task completed when it should have been paused\");\n    }\n    catch (TimeoutException e) {\n      \r\n    }\n\n    Assert.assertEquals(currentOffsets, task.getRunner().getCurrentOffsets());\n\n    task.getRunner().resume();\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2010/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2011/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"c\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"d\", \"e\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","date":"2019-05-23 12:13:57","endLine":2068,"groupId":"7808","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithPauseAndResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4c/9b39b9d6e36b60e91c1c3b62e9eb65f4b77f77.src","preCode":"  public void testRunWithPauseAndResume() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 2L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    Map<Integer, Long> currentOffsets = objectMapper.readValue(\n        task.getRunner().pause().getEntity().toString(),\n        new TypeReference<Map<Integer, Long>>()\n        {\n        }\n    );\n    Assert.assertEquals(Status.PAUSED, task.getRunner().getStatus());\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    try {\n      future.get(10, TimeUnit.SECONDS);\n      Assert.fail(\"Task completed when it should have been paused\");\n    }\n    catch (TimeoutException e) {\n      \r\n    }\n\n    Assert.assertEquals(currentOffsets, task.getRunner().getCurrentOffsets());\n\n    task.getRunner().resume();\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2010/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2011/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"c\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"d\", \"e\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1982,"status":"M"},{"authorDate":"2019-05-23 12:13:57","commitOrder":7,"curCode":"  public void testRunTransactionModeRollback() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 0L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 2)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    \r\n    final QuerySegmentSpec firstInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2008/2010\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues = scanData(task, firstInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(Iterables.skip(records, 2), 3)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.abortTransaction();\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    final QuerySegmentSpec rollbackedInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2010/2012\\\"\", QuerySegmentSpec.class\n    );\n    scanResultValues = scanData(task, rollbackedInterval);\n    \r\n    Assert.assertEquals(0, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 5)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    final QuerySegmentSpec endInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2008/2049\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues1 = scanData(task, endInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues1));\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(1, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2009/P1D\", 0);\n    SegmentDescriptor desc3 = sd(task, \"2013/P1D\", 0);\n    SegmentDescriptor desc4 = sd(task, \"2049/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2, desc3, desc4), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", desc3));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", desc4));\n  }\n","date":"2019-05-23 12:13:57","endLine":2342,"groupId":"4900","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunTransactionModeRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4c/9b39b9d6e36b60e91c1c3b62e9eb65f4b77f77.src","preCode":"  public void testRunTransactionModeRollback() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 0L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 2)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    \r\n    final QuerySegmentSpec firstInterval = objectMapper.readValue(\n        \"\\\"2008/2010\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues = scanData(task, firstInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(Iterables.skip(records, 2), 3)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.abortTransaction();\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    final QuerySegmentSpec rollbackedInterval = objectMapper.readValue(\n        \"\\\"2010/2012\\\"\", QuerySegmentSpec.class\n    );\n    scanResultValues = scanData(task, rollbackedInterval);\n    \r\n    Assert.assertEquals(0, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 5)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    final QuerySegmentSpec endInterval = objectMapper.readValue(\n        \"\\\"2008/2049\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues1 = scanData(task, endInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues1));\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(1, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2009/P1D\", 0);\n    SegmentDescriptor desc3 = sd(task, \"2013/P1D\", 0);\n    SegmentDescriptor desc4 = sd(task, \"2049/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2, desc3, desc4), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", desc3));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", desc4));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2238,"status":"M"}],"commitId":"53b6467fc83cd4a78d87b5fd1557c84b2a5b2513","commitMessage":"@@@SeekableStreamIndexTaskRunner: Lazy init of runner. (#7729)\n\nThe main motivation is that this fixes #7724.  by making it so the overlord\ndoesn't try to create a task runner and parser when all it really wants to\ndo is create a task object and serialize it.","date":"2019-05-23 12:13:57","modifiedFileCount":"4","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-07-25 08:35:46","codes":[{"authorDate":"2019-07-25 08:35:46","commitOrder":8,"curCode":"  public void testRunWithPauseAndResume() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 2L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    Map<Integer, Long> currentOffsets = OBJECT_MAPPER.readValue(\n        task.getRunner().pause().getEntity().toString(),\n        new TypeReference<Map<Integer, Long>>()\n        {\n        }\n    );\n    Assert.assertEquals(Status.PAUSED, task.getRunner().getStatus());\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    try {\n      future.get(10, TimeUnit.SECONDS);\n      Assert.fail(\"Task completed when it should have been paused\");\n    }\n    catch (TimeoutException e) {\n      \r\n    }\n\n    Assert.assertEquals(currentOffsets, task.getRunner().getCurrentOffsets());\n\n    task.getRunner().resume();\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(\"2010/P1D\", 0);\n    SegmentDescriptor desc2 = sd(\"2011/P1D\", 0);\n    final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors();\n    assertEqualsExceptVersion(ImmutableList.of(desc1, desc2), publishedDescriptors);\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"c\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(0)));\n    Assert.assertEquals(ImmutableList.of(\"d\", \"e\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(1)));\n  }\n","date":"2019-07-25 08:35:46","endLine":2062,"groupId":"7808","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithPauseAndResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/87/f522eae18ccef1c23a5fd9ae035dbbe3410dfc.src","preCode":"  public void testRunWithPauseAndResume() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 2L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    Map<Integer, Long> currentOffsets = OBJECT_MAPPER.readValue(\n        task.getRunner().pause().getEntity().toString(),\n        new TypeReference<Map<Integer, Long>>()\n        {\n        }\n    );\n    Assert.assertEquals(Status.PAUSED, task.getRunner().getStatus());\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    try {\n      future.get(10, TimeUnit.SECONDS);\n      Assert.fail(\"Task completed when it should have been paused\");\n    }\n    catch (TimeoutException e) {\n      \r\n    }\n\n    Assert.assertEquals(currentOffsets, task.getRunner().getCurrentOffsets());\n\n    task.getRunner().resume();\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2010/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2011/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"c\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"d\", \"e\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1975,"status":"M"},{"authorDate":"2019-07-25 08:35:46","commitOrder":8,"curCode":"  public void testRunTransactionModeRollback() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 0L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 2)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    \r\n    final QuerySegmentSpec firstInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2008/2010\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues = scanData(task, firstInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(Iterables.skip(records, 2), 3)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.abortTransaction();\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    final QuerySegmentSpec rollbackedInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2010/2012\\\"\", QuerySegmentSpec.class\n    );\n    scanResultValues = scanData(task, rollbackedInterval);\n    \r\n    Assert.assertEquals(0, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 5)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    final QuerySegmentSpec endInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2008/2049\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues1 = scanData(task, endInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues1));\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(1, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(\"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(\"2009/P1D\", 0);\n    SegmentDescriptor desc3 = sd(\"2013/P1D\", 0);\n    SegmentDescriptor desc4 = sd(\"2049/P1D\", 0);\n    final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors();\n    assertEqualsExceptVersion(ImmutableList.of(desc1, desc2, desc3, desc4), publishedDescriptors);\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(0)));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(1)));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(2)));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(3)));\n  }\n","date":"2019-07-25 08:35:46","endLine":2332,"groupId":"4900","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunTransactionModeRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/87/f522eae18ccef1c23a5fd9ae035dbbe3410dfc.src","preCode":"  public void testRunTransactionModeRollback() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 0L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 2)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    \r\n    final QuerySegmentSpec firstInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2008/2010\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues = scanData(task, firstInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(Iterables.skip(records, 2), 3)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.abortTransaction();\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    final QuerySegmentSpec rollbackedInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2010/2012\\\"\", QuerySegmentSpec.class\n    );\n    scanResultValues = scanData(task, rollbackedInterval);\n    \r\n    Assert.assertEquals(0, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 5)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    final QuerySegmentSpec endInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2008/2049\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues1 = scanData(task, endInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues1));\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(1, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2009/P1D\", 0);\n    SegmentDescriptor desc3 = sd(task, \"2013/P1D\", 0);\n    SegmentDescriptor desc4 = sd(task, \"2049/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2, desc3, desc4), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", desc3));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", desc4));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2227,"status":"M"}],"commitId":"db149462073d59e7563f0d3834e69d44a2bb4011","commitMessage":"@@@Add support minor compaction with segment locking (#7547)\n\n* Segment locking\n\n* Allow both timeChunk and segment lock in the same gruop\n\n* fix it test\n\n* Fix adding same chunk to atomicUpdateGroup\n\n* resolving todos\n\n* Fix segments to lock\n\n* fix segments to lock\n\n* fix kill task\n\n* resolving todos\n\n* resolving todos\n\n* fix teamcity\n\n* remove unused class\n\n* fix single map\n\n* resolving todos\n\n* fix build\n\n* fix SQLMetadataSegmentManager\n\n* fix findInputSegments\n\n* adding more tests\n\n* fixing task lock checks\n\n* add SegmentTransactionalOverwriteAction\n\n* changing publisher\n\n* fixing something\n\n* fix for perfect rollup\n\n* fix test\n\n* adjust package-lock.json\n\n* fix test\n\n* fix style\n\n* adding javadocs\n\n* remove unused classes\n\n* add more javadocs\n\n* unused import\n\n* fix test\n\n* fix test\n\n* Support forceTimeChunk context and force timeChunk lock for parallel index task if intervals are missing\n\n* fix travis\n\n* fix travis\n\n* unused import\n\n* spotbug\n\n* revert getMaxVersion\n\n* address comments\n\n* fix tc\n\n* add missing error handling\n\n* fix backward compatibility\n\n* unused import\n\n* Fix perf of versionedIntervalTimeline\n\n* fix timeline\n\n* fix tc\n\n* remove remaining todos\n\n* add comment for parallel index\n\n* fix javadoc and typos\n\n* typo\n\n* address comments\n","date":"2019-07-25 08:35:46","modifiedFileCount":"130","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-11-07 03:07:04","codes":[{"authorDate":"2019-11-07 03:07:04","commitOrder":9,"curCode":"  public void testRunWithPauseAndResume() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 2L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    Map<Integer, Long> currentOffsets = OBJECT_MAPPER.readValue(\n        task.getRunner().pause().getEntity().toString(),\n        new TypeReference<Map<Integer, Long>>()\n        {\n        }\n    );\n    Assert.assertEquals(Status.PAUSED, task.getRunner().getStatus());\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    try {\n      future.get(10, TimeUnit.SECONDS);\n      Assert.fail(\"Task completed when it should have been paused\");\n    }\n    catch (TimeoutException e) {\n      \r\n    }\n\n    Assert.assertEquals(currentOffsets, task.getRunner().getCurrentOffsets());\n\n    task.getRunner().resume();\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    assertEqualsExceptVersion(\n        ImmutableList.of(\n            sdd(\"2010/P1D\", 0, ImmutableList.of(\"c\")),\n            sdd(\"2011/P1D\", 0, ImmutableList.of(\"d\", \"e\"))\n        ),\n        publishedDescriptors()\n    );\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n  }\n","date":"2019-11-07 03:07:04","endLine":1972,"groupId":"7808","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithPauseAndResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c8/35bb95038567e2b9b3112cb98971f6d2418766.src","preCode":"  public void testRunWithPauseAndResume() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 2L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    Map<Integer, Long> currentOffsets = OBJECT_MAPPER.readValue(\n        task.getRunner().pause().getEntity().toString(),\n        new TypeReference<Map<Integer, Long>>()\n        {\n        }\n    );\n    Assert.assertEquals(Status.PAUSED, task.getRunner().getStatus());\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    try {\n      future.get(10, TimeUnit.SECONDS);\n      Assert.fail(\"Task completed when it should have been paused\");\n    }\n    catch (TimeoutException e) {\n      \r\n    }\n\n    Assert.assertEquals(currentOffsets, task.getRunner().getCurrentOffsets());\n\n    task.getRunner().resume();\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(\"2010/P1D\", 0);\n    SegmentDescriptor desc2 = sd(\"2011/P1D\", 0);\n    final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors();\n    assertEqualsExceptVersion(ImmutableList.of(desc1, desc2), publishedDescriptors);\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"c\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(0)));\n    Assert.assertEquals(ImmutableList.of(\"d\", \"e\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(1)));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1886,"status":"M"},{"authorDate":"2019-11-07 03:07:04","commitOrder":9,"curCode":"  public void testRunTransactionModeRollback() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 0L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 2)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    \r\n    final QuerySegmentSpec firstInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2008/2010\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues = scanData(task, firstInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(Iterables.skip(records, 2), 3)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.abortTransaction();\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    final QuerySegmentSpec rollbackedInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2010/2012\\\"\", QuerySegmentSpec.class\n    );\n    scanResultValues = scanData(task, rollbackedInterval);\n    \r\n    Assert.assertEquals(0, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 5)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    final QuerySegmentSpec endInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2008/2049\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues1 = scanData(task, endInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues1));\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(1, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    assertEqualsExceptVersion(\n        ImmutableList.of(\n            sdd(\"2008/P1D\", 0, ImmutableList.of(\"a\")),\n            sdd(\"2009/P1D\", 0, ImmutableList.of(\"b\")),\n            sdd(\"2013/P1D\", 0, ImmutableList.of(\"f\")),\n            sdd(\"2049/P1D\", 0, ImmutableList.of(\"f\"))\n        ),\n        publishedDescriptors()\n    );\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n  }\n","date":"2019-11-07 03:07:04","endLine":2238,"groupId":"4900","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunTransactionModeRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c8/35bb95038567e2b9b3112cb98971f6d2418766.src","preCode":"  public void testRunTransactionModeRollback() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 0L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 2)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    \r\n    final QuerySegmentSpec firstInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2008/2010\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues = scanData(task, firstInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(Iterables.skip(records, 2), 3)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.abortTransaction();\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    final QuerySegmentSpec rollbackedInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2010/2012\\\"\", QuerySegmentSpec.class\n    );\n    scanResultValues = scanData(task, rollbackedInterval);\n    \r\n    Assert.assertEquals(0, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 5)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    final QuerySegmentSpec endInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2008/2049\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues1 = scanData(task, endInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues1));\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(1, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(\"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(\"2009/P1D\", 0);\n    SegmentDescriptor desc3 = sd(\"2013/P1D\", 0);\n    SegmentDescriptor desc4 = sd(\"2049/P1D\", 0);\n    final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors();\n    assertEqualsExceptVersion(ImmutableList.of(desc1, desc2, desc3, desc4), publishedDescriptors);\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(0)));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(1)));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(2)));\n    Assert.assertEquals(ImmutableList.of(\"f\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(3)));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2136,"status":"M"}],"commitId":"5c0fc0a13ab4d259b430bf50b322f631504c4529","commitMessage":"@@@Fix ambiguity about IndexerSQLMetadataStorageCoordinator.getUsedSegmentsForInterval() returning only non-overshadowed or all used segments (#8564)\n\n* IndexerSQLMetadataStorageCoordinator.getTimelineForIntervalsWithHandle() don't fetch abutting intervals; simplify getUsedSegmentsForIntervals()\n\n* Add VersionedIntervalTimeline.findNonOvershadowedObjectsInInterval() method; Propagate the decision about whether only visible segmetns or visible and overshadowed segments should be returned from IndexerMetadataStorageCoordinator's methods to the user logic; Rename SegmentListUsedAction to RetrieveUsedSegmentsAction.  SegmetnListUnusedAction to RetrieveUnusedSegmentsAction.  and UsedSegmentLister to UsedSegmentsRetriever\n\n* Fix tests\n\n* More fixes\n\n* Add javadoc notes about returning Collection instead of Set. Add JacksonUtils.readValue() to reduce boilerplate code\n\n* Fix KinesisIndexTaskTest.  factor out common parts from KinesisIndexTaskTest and KafkaIndexTaskTest into SeekableStreamIndexTaskTestBase\n\n* More test fixes\n\n* More test fixes\n\n* Add a comment to VersionedIntervalTimelineTestBase\n\n* Fix tests\n\n* Set DataSegment.size(0) in more tests\n\n* Specify DataSegment.size(0) in more places in tests\n\n* Fix more tests\n\n* Fix DruidSchemaTest\n\n* Set DataSegment's size in more tests and benchmarks\n\n* Fix HdfsDataSegmentPusherTest\n\n* Doc changes addressing comments\n\n* Extended doc for visibility\n\n* Typo\n\n* Typo 2\n\n* Address comment\n","date":"2019-11-07 03:07:04","modifiedFileCount":"88","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-11-21 06:51:25","codes":[{"authorDate":"2019-11-21 06:51:25","commitOrder":10,"curCode":"  public void testRunWithPauseAndResume() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 2L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null,\n            INPUT_FORMAT\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    Map<Integer, Long> currentOffsets = OBJECT_MAPPER.readValue(\n        task.getRunner().pause().getEntity().toString(),\n        new TypeReference<Map<Integer, Long>>()\n        {\n        }\n    );\n    Assert.assertEquals(Status.PAUSED, task.getRunner().getStatus());\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    try {\n      future.get(10, TimeUnit.SECONDS);\n      Assert.fail(\"Task completed when it should have been paused\");\n    }\n    catch (TimeoutException e) {\n      \r\n    }\n\n    Assert.assertEquals(currentOffsets, task.getRunner().getCurrentOffsets());\n\n    task.getRunner().resume();\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    assertEqualsExceptVersion(\n        ImmutableList.of(\n            sdd(\"2010/P1D\", 0, ImmutableList.of(\"c\")),\n            sdd(\"2011/P1D\", 0, ImmutableList.of(\"d\", \"e\"))\n        ),\n        publishedDescriptors()\n    );\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L))),\n        metadataStorageCoordinator.getDataSourceMetadata(NEW_DATA_SCHEMA.getDataSource())\n    );\n  }\n","date":"2019-11-21 06:51:25","endLine":2050,"groupId":"7808","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithPauseAndResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e8/bde11469c6f5c09cd43b1c5d562e5b78e0f593.src","preCode":"  public void testRunWithPauseAndResume() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 2L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    Map<Integer, Long> currentOffsets = OBJECT_MAPPER.readValue(\n        task.getRunner().pause().getEntity().toString(),\n        new TypeReference<Map<Integer, Long>>()\n        {\n        }\n    );\n    Assert.assertEquals(Status.PAUSED, task.getRunner().getStatus());\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    try {\n      future.get(10, TimeUnit.SECONDS);\n      Assert.fail(\"Task completed when it should have been paused\");\n    }\n    catch (TimeoutException e) {\n      \r\n    }\n\n    Assert.assertEquals(currentOffsets, task.getRunner().getCurrentOffsets());\n\n    task.getRunner().resume();\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    assertEqualsExceptVersion(\n        ImmutableList.of(\n            sdd(\"2010/P1D\", 0, ImmutableList.of(\"c\")),\n            sdd(\"2011/P1D\", 0, ImmutableList.of(\"d\", \"e\"))\n        ),\n        publishedDescriptors()\n    );\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1963,"status":"M"},{"authorDate":"2019-11-21 06:51:25","commitOrder":10,"curCode":"  public void testRunTransactionModeRollback() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 0L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null,\n            INPUT_FORMAT\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 2)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    \r\n    final QuerySegmentSpec firstInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2008/2010\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues = scanData(task, firstInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(Iterables.skip(records, 2), 3)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.abortTransaction();\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    final QuerySegmentSpec rollbackedInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2010/2012\\\"\", QuerySegmentSpec.class\n    );\n    scanResultValues = scanData(task, rollbackedInterval);\n    \r\n    Assert.assertEquals(0, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 5)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    final QuerySegmentSpec endInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2008/2049\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues1 = scanData(task, endInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues1));\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(1, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    assertEqualsExceptVersion(\n        ImmutableList.of(\n            sdd(\"2008/P1D\", 0, ImmutableList.of(\"a\")),\n            sdd(\"2009/P1D\", 0, ImmutableList.of(\"b\")),\n            sdd(\"2013/P1D\", 0, ImmutableList.of(\"f\")),\n            sdd(\"2049/P1D\", 0, ImmutableList.of(\"f\"))\n        ),\n        publishedDescriptors()\n    );\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L))),\n        metadataStorageCoordinator.getDataSourceMetadata(NEW_DATA_SCHEMA.getDataSource())\n    );\n  }\n","date":"2019-11-21 06:51:25","endLine":2321,"groupId":"4900","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunTransactionModeRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e8/bde11469c6f5c09cd43b1c5d562e5b78e0f593.src","preCode":"  public void testRunTransactionModeRollback() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 0L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 2)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    \r\n    final QuerySegmentSpec firstInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2008/2010\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues = scanData(task, firstInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(Iterables.skip(records, 2), 3)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.abortTransaction();\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    final QuerySegmentSpec rollbackedInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2010/2012\\\"\", QuerySegmentSpec.class\n    );\n    scanResultValues = scanData(task, rollbackedInterval);\n    \r\n    Assert.assertEquals(0, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 5)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    final QuerySegmentSpec endInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2008/2049\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues1 = scanData(task, endInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues1));\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(1, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    assertEqualsExceptVersion(\n        ImmutableList.of(\n            sdd(\"2008/P1D\", 0, ImmutableList.of(\"a\")),\n            sdd(\"2009/P1D\", 0, ImmutableList.of(\"b\")),\n            sdd(\"2013/P1D\", 0, ImmutableList.of(\"f\")),\n            sdd(\"2049/P1D\", 0, ImmutableList.of(\"f\"))\n        ),\n        publishedDescriptors()\n    );\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2218,"status":"M"}],"commitId":"ac6d703814ccb5b258c586b63e0bc33d669e0f57","commitMessage":"@@@Support inputFormat and inputSource for sampler (#8901)\n\n* Support inputFormat and inputSource for sampler\n\n* Cleanup javadocs and names\n\n* fix style\n\n* fix timed shutoff input source reader\n\n* fix timed shutoff input source reader again\n\n* tidy up timed shutoff reader\n\n* unused imports\n\n* fix tc\n","date":"2019-11-21 06:51:25","modifiedFileCount":"66","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-01-28 03:24:29","codes":[{"authorDate":"2020-01-28 03:24:29","commitOrder":11,"curCode":"  public void testRunWithPauseAndResume() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 2L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null,\n            INPUT_FORMAT\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    Map<Integer, Long> currentOffsets = OBJECT_MAPPER.readValue(\n        task.getRunner().pause().getEntity().toString(),\n        new TypeReference<Map<Integer, Long>>()\n        {\n        }\n    );\n    Assert.assertEquals(Status.PAUSED, task.getRunner().getStatus());\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    try {\n      future.get(10, TimeUnit.SECONDS);\n      Assert.fail(\"Task completed when it should have been paused\");\n    }\n    catch (TimeoutException e) {\n      \r\n    }\n\n    Assert.assertEquals(currentOffsets, task.getRunner().getCurrentOffsets());\n\n    task.getRunner().resume();\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    assertEqualsExceptVersion(\n        ImmutableList.of(\n            sdd(\"2010/P1D\", 0, ImmutableList.of(\"c\")),\n            sdd(\"2011/P1D\", 0, ImmutableList.of(\"d\", \"e\"))\n        ),\n        publishedDescriptors()\n    );\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L))),\n        newDataSchemaMetadata()\n    );\n  }\n","date":"2020-01-28 03:24:29","endLine":2053,"groupId":"102531","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithPauseAndResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d4/468bd39e032386fe654402d0006ecea542747e.src","preCode":"  public void testRunWithPauseAndResume() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 2L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null,\n            INPUT_FORMAT\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    Map<Integer, Long> currentOffsets = OBJECT_MAPPER.readValue(\n        task.getRunner().pause().getEntity().toString(),\n        new TypeReference<Map<Integer, Long>>()\n        {\n        }\n    );\n    Assert.assertEquals(Status.PAUSED, task.getRunner().getStatus());\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 4)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    try {\n      future.get(10, TimeUnit.SECONDS);\n      Assert.fail(\"Task completed when it should have been paused\");\n    }\n    catch (TimeoutException e) {\n      \r\n    }\n\n    Assert.assertEquals(currentOffsets, task.getRunner().getCurrentOffsets());\n\n    task.getRunner().resume();\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    assertEqualsExceptVersion(\n        ImmutableList.of(\n            sdd(\"2010/P1D\", 0, ImmutableList.of(\"c\")),\n            sdd(\"2011/P1D\", 0, ImmutableList.of(\"d\", \"e\"))\n        ),\n        publishedDescriptors()\n    );\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 6L))),\n        metadataStorageCoordinator.getDataSourceMetadata(NEW_DATA_SCHEMA.getDataSource())\n    );\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1966,"status":"M"},{"authorDate":"2020-01-28 03:24:29","commitOrder":11,"curCode":"  public void testRunTransactionModeRollback() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 0L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null,\n            INPUT_FORMAT\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 2)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    \r\n    final QuerySegmentSpec firstInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2008/2010\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues = scanData(task, firstInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(Iterables.skip(records, 2), 3)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.abortTransaction();\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    final QuerySegmentSpec rollbackedInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2010/2012\\\"\", QuerySegmentSpec.class\n    );\n    scanResultValues = scanData(task, rollbackedInterval);\n    \r\n    Assert.assertEquals(0, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 5)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    final QuerySegmentSpec endInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2008/2049\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues1 = scanData(task, endInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues1));\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(1, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    assertEqualsExceptVersion(\n        ImmutableList.of(\n            sdd(\"2008/P1D\", 0, ImmutableList.of(\"a\")),\n            sdd(\"2009/P1D\", 0, ImmutableList.of(\"b\")),\n            sdd(\"2013/P1D\", 0, ImmutableList.of(\"f\")),\n            sdd(\"2049/P1D\", 0, ImmutableList.of(\"f\"))\n        ),\n        publishedDescriptors()\n    );\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L))),\n        newDataSchemaMetadata()\n    );\n  }\n","date":"2020-01-28 03:24:29","endLine":2324,"groupId":"102531","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunTransactionModeRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d4/468bd39e032386fe654402d0006ecea542747e.src","preCode":"  public void testRunTransactionModeRollback() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 0L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null,\n            INPUT_FORMAT\n        )\n    );\n\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(records, 2)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    while (countEvents(task) != 2) {\n      Thread.sleep(25);\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    \r\n    final QuerySegmentSpec firstInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2008/2010\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues = scanData(task, firstInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.limit(Iterables.skip(records, 2), 3)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.flush();\n      kafkaProducer.abortTransaction();\n    }\n\n    Assert.assertEquals(2, countEvents(task));\n    Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n\n    final QuerySegmentSpec rollbackedInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2010/2012\\\"\", QuerySegmentSpec.class\n    );\n    scanResultValues = scanData(task, rollbackedInterval);\n    \r\n    Assert.assertEquals(0, Iterables.size(scanResultValues));\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : Iterables.skip(records, 5)) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    final QuerySegmentSpec endInterval = OBJECT_MAPPER.readValue(\n        \"\\\"2008/2049\\\"\", QuerySegmentSpec.class\n    );\n    Iterable<ScanResultValue> scanResultValues1 = scanData(task, endInterval);\n    Assert.assertEquals(2, Iterables.size(scanResultValues1));\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n    Assert.assertEquals(task.getRunner().getEndOffsets(), task.getRunner().getCurrentOffsets());\n\n    \r\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(3, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(1, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    assertEqualsExceptVersion(\n        ImmutableList.of(\n            sdd(\"2008/P1D\", 0, ImmutableList.of(\"a\")),\n            sdd(\"2009/P1D\", 0, ImmutableList.of(\"b\")),\n            sdd(\"2013/P1D\", 0, ImmutableList.of(\"f\")),\n            sdd(\"2049/P1D\", 0, ImmutableList.of(\"f\"))\n        ),\n        publishedDescriptors()\n    );\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 13L))),\n        metadataStorageCoordinator.getDataSourceMetadata(NEW_DATA_SCHEMA.getDataSource())\n    );\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2221,"status":"M"}],"commitId":"b9186f8f9ff2ff52aceda42bc5f24ffd47a7d17e","commitMessage":"@@@Reconcile terminology and method naming to 'used/unused segments'; Rename MetadataSegmentManager to MetadataSegmentsManager (#7306)\n\n* Reconcile terminology and method naming to 'used/unused segments'; Don't use terms 'enable/disable data source'; Rename MetadataSegmentManager to MetadataSegments; Make REST API methods which mark segments as used/unused to return server error instead of an empty response in case of error\n\n* Fix brace\n\n* Import order\n\n* Rename withKillDataSourceWhitelist to withSpecificDataSourcesToKill\n\n* Fix tests\n\n* Fix tests by adding proper methods without interval parameters to IndexerMetadataStorageCoordinator instead of hacking with Intervals.ETERNITY\n\n* More aligned names of DruidCoordinatorHelpers.  rename several CoordinatorDynamicConfig parameters\n\n* Rename ClientCompactTaskQuery to ClientCompactionTaskQuery for consistency with CompactionTask; ClientCompactQueryTuningConfig to ClientCompactionTaskQueryTuningConfig\n\n* More variable and method renames\n\n* Rename MetadataSegments to SegmentsMetadata\n\n* Javadoc update\n\n* Simplify SegmentsMetadata.getUnusedSegmentIntervals().  more javadocs\n\n* Update Javadoc of VersionedIntervalTimeline.iterateAllObjects()\n\n* Reorder imports\n\n* Rename SegmentsMetadata.tryMark... methods to mark... and make them to return boolean and the numbers of segments changed and relay exceptions to callers\n\n* Complete merge\n\n* Add CollectionUtils.newTreeSet(); Refactor DruidCoordinatorRuntimeParams creation in tests\n\n* Remove MetadataSegmentManager\n\n* Rename millisLagSinceCoordinatorBecomesLeaderBeforeCanMarkAsUnusedOvershadowedSegments to leadingTimeMillisBeforeCanMarkAsUnusedOvershadowedSegments\n\n* Fix tests.  refactor DruidCluster creation in tests into DruidClusterBuilder\n\n* Fix inspections\n\n* Fix SQLMetadataSegmentManagerEmptyTest and rename it to SqlSegmentsMetadataEmptyTest\n\n* Rename SegmentsAndMetadata to SegmentsAndCommitMetadata to reduce the similarity with SegmentsMetadata; Rename some methods\n\n* Rename DruidCoordinatorHelper to CoordinatorDuty.  refactor DruidCoordinator\n\n* Unused import\n\n* Optimize imports\n\n* Rename IndexerSQLMetadataStorageCoordinator.getDataSourceMetadata() to retrieveDataSourceMetadata()\n\n* Unused import\n\n* Update terminology in datasource-view.tsx\n\n* Fix label in datasource-view.spec.tsx.snap\n\n* Fix lint errors in datasource-view.tsx\n\n* Doc improvements\n\n* Another attempt to please TSLint\n\n* Another attempt to please TSLint\n\n* Style fixes\n\n* Fix IndexerSQLMetadataStorageCoordinator.createUsedSegmentsSqlQueryForIntervals() (wrong merge)\n\n* Try to fix docs build issue\n\n* Javadoc and spelling fixes\n\n* Rename SegmentsMetadata to SegmentsMetadataManager.  address other comments\n\n* Address more comments\n","date":"2020-01-28 03:24:29","modifiedFileCount":"127","status":"M","submitter":"Roman Leventov"}]
