[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-12-22 03:49:24","commitOrder":2,"curCode":"  public void testMinus()\n  {\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of(\"1\", \"3L\")),\n        KM1.minus(KM3)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of()),\n        KM0.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of()),\n        KM1.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of(\"2\", \"5L\")),\n        KM2.minus(KM1)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of()),\n        KM2.minus(KM2)\n    );\n  }\n","date":"2018-12-22 03:49:24","endLine":126,"groupId":"215","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMinus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/e3b0fca65e9380cffca9f721bcd3a2ed0bb255.src","preCode":"  public void testMinus()\n  {\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of(\"1\", \"3L\")),\n        KM1.minus(KM3)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of()),\n        KM0.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of()),\n        KM1.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of(\"2\", \"5L\")),\n        KM2.minus(KM1)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of()),\n        KM2.minus(KM2)\n    );\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisDataSourceMetadataTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testMinus()\n  {\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of(1, 3L)),\n        KM1.minus(KM3)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of()),\n        KM0.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of()),\n        KM1.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of(2, 5L)),\n        KM2.minus(KM1)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of()),\n        KM2.minus(KM2)\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":124,"groupId":"2283","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMinus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/51/afdeb8ea40278c7680baa57be6d1a21a5dc57d.src","preCode":"  public void testMinus()\n  {\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of(1, 3L)),\n        KM1.minus(KM3)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of()),\n        KM0.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of()),\n        KM1.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of(2, 5L)),\n        KM2.minus(KM1)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of()),\n        KM2.minus(KM2)\n    );\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaDataSourceMetadataTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"NB"}],"commitId":"7c7997e8a1183a7bffad731ca94e8b4c381e8665","commitMessage":"@@@Add Kinesis Indexing Service to core Druid (#6431)\n\n* created seekablestream classes\n\n* created seekablestreamsupervisor class\n\n* first attempt to integrate kafa indexing service to use SeekableStream\n\n* seekablestream bug fixes\n\n* kafkarecordsupplier\n\n* integrated kafka indexing service with seekablestream\n\n* implemented resume/suspend and refactored some package names\n\n* moved kinesis indexing service into core druid extensions\n\n* merged some changes from kafka supervisor race condition\n\n* integrated kinesis-indexing-service with seekablestream\n\n* unite tests for kinesis-indexing-service\n\n* various bug fixes for kinesis-indexing-service\n\n* refactored kinesisindexingtask\n\n* finished up more kinesis unit tests\n\n* more bug fixes for kinesis-indexing-service\n\n* finsihed refactoring kinesis unit tests\n\n* removed KinesisParititons and KafkaPartitions to use SeekableStreamPartitions\n\n* kinesis-indexing-service code cleanup and docs\n\n* merge #6291\n\nmerge #6337\n\nmerge #6383\n\n* added more docs and reordered methods\n\n* fixd kinesis tests after merging master and added docs in seekablestream\n\n* fix various things from pr comment\n\n* improve recordsupplier and add unit tests\n\n* migrated to aws-java-sdk-kinesis\n\n* merge changes from master\n\n* fix pom files and forbiddenapi checks\n\n* checkpoint JavaType bug fix\n\n* fix pom and stuff\n\n* disable checkpointing in kinesis\n\n* fix kinesis sequence number null in closed shard\n\n* merge changes from master\n\n* fixes for kinesis tasks\n\n* capitalized <partitionType.  sequenceType>\n\n* removed abstract class loggers\n\n* conform to guava api restrictions\n\n* add docker for travis other modules test\n\n* address comments\n\n* improve RecordSupplier to supply records in batch\n\n* fix strict compile issue\n\n* add test scope for localstack dependency\n\n* kinesis indexing task refactoring\n\n* comments\n\n* github comments\n\n* minor fix\n\n* removed unneeded readme\n\n* fix deserialization bug\n\n* fix various bugs\n\n* KinesisRecordSupplier unable to catch up to earliest position in stream bug fix\n\n* minor changes to kinesis\n\n* implement deaggregate for kinesis\n\n* Merge remote-tracking branch 'upstream/master' into seekablestream\n\n* fix kinesis offset discrepancy with kafka\n\n* kinesis record supplier disable getPosition\n\n* pr comments\n\n* mock for kinesis tests and remove docker dependency for unit tests\n\n* PR comments\n\n* avg lag in kafkasupervisor #6587\n\n* refacotred SequenceMetadata in taskRunners\n\n* small fix\n\n* more small fix\n\n* recordsupplier resource leak\n\n* revert .travis.yml formatting\n\n* fix style\n\n* kinesis docs\n\n* doc part2\n\n* more docs\n\n* comments\n\n* comments*2\n\n* revert string replace changes\n\n* comments\n\n* teamcity\n\n* comments part 1\n\n* comments part 2\n\n* comments part 3\n\n* merge #6754\n\n* fix injection binding\n\n* comments\n\n* KinesisRegion refactor\n\n* comments part idk lol\n\n* can't think of a commit msg anymore\n\n* remove possiblyResetDataSourceMetadata() for IncrementalPublishingTaskRunner\n\n* commmmmmmmmmments\n\n* extra error handling in KinesisRecordSupplier getRecords\n\n* comments\n\n* quickfix\n\n* typo\n\n* oof\n","date":"2018-12-22 03:49:24","modifiedFileCount":"22","status":"M","submitter":"Joshua Sun"},{"authorTime":"2019-02-24 12:10:31","codes":[{"authorDate":"2019-02-24 12:10:31","commitOrder":3,"curCode":"  public void testMinus()\n  {\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of(\"1\", \"3L\")),\n        KM1.minus(KM3)\n    );\n\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of()),\n        KM0.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of()),\n        KM1.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of(\"2\", \"5L\")),\n        KM2.minus(KM1)\n    );\n\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of()),\n        KM2.minus(KM2)\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":126,"groupId":"215","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMinus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2c/5bce1744b3e69ed5f365f9f2112838c913c222.src","preCode":"  public void testMinus()\n  {\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of(\"1\", \"3L\")),\n        KM1.minus(KM3)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of()),\n        KM0.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of()),\n        KM1.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of(\"2\", \"5L\")),\n        KM2.minus(KM1)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of()),\n        KM2.minus(KM2)\n    );\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisDataSourceMetadataTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2019-02-24 12:10:31","commitOrder":3,"curCode":"  public void testMinus()\n  {\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of(1, 3L)),\n        KM1.minus(KM3)\n    );\n\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of()),\n        KM0.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of()),\n        KM1.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of(2, 5L)),\n        KM2.minus(KM1)\n    );\n\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of()),\n        KM2.minus(KM2)\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":125,"groupId":"2283","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMinus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5b/609132af24e08f15b0e4e2815535e68c795578.src","preCode":"  public void testMinus()\n  {\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of(1, 3L)),\n        KM1.minus(KM3)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of()),\n        KM0.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of()),\n        KM1.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of(2, 5L)),\n        KM2.minus(KM1)\n    );\n\n    Assert.assertEquals(\n        KM(\"foo\", ImmutableMap.of()),\n        KM2.minus(KM2)\n    );\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaDataSourceMetadataTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"8b803cbc22b15799fd0526de8d6d0eea155ad733","commitMessage":"@@@Added checkstyle for \"Methods starting with Capital Letters\"  (#7118)\n\n* Added checkstyle for \"Methods starting with Capital Letters\" and changed the method names violating this.\n\n* Un-abbreviate the method names in the calcite tests\n\n* Fixed checkstyle errors\n\n* Changed asserts position in the code\n","date":"2019-02-24 12:10:31","modifiedFileCount":"24","status":"M","submitter":"Himanshu Pandey"},{"authorTime":"2019-03-22 04:12:22","codes":[{"authorDate":"2019-03-22 04:12:22","commitOrder":4,"curCode":"  public void testMinus()\n  {\n    Assert.assertEquals(\n        simpleStartMetadata(ImmutableMap.of(\"1\", \"3L\")),\n        START1.minus(START3)\n    );\n\n    Assert.assertEquals(\n        simpleStartMetadata(ImmutableMap.of()),\n        START0.minus(START2)\n    );\n\n    Assert.assertEquals(\n        simpleStartMetadata(ImmutableMap.of()),\n        START1.minus(START2)\n    );\n\n    Assert.assertEquals(\n        simpleStartMetadata(ImmutableMap.of(\"2\", \"5L\")),\n        START2.minus(START1)\n    );\n\n    Assert.assertEquals(\n        simpleStartMetadata(ImmutableMap.of()),\n        START2.minus(START2)\n    );\n\n    Assert.assertEquals(\n        startMetadata(ImmutableMap.of(), ImmutableSet.of()),\n        START4.minus(START2)\n    );\n\n    Assert.assertEquals(\n        startMetadata(ImmutableMap.of(\"1\", \"4L\"), ImmutableSet.of(\"1\")),\n        START5.minus(START4)\n    );\n\n    Assert.assertEquals(\n        endMetadata(ImmutableMap.of(\"1\", \"4L\")),\n        END2.minus(END1)\n    );\n\n    Assert.assertEquals(\n        endMetadata(ImmutableMap.of(\"2\", \"5L\")),\n        END1.minus(END2)\n    );\n  }\n","date":"2019-03-22 04:12:22","endLine":218,"groupId":"102334","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testMinus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fb/b3d6405ff6b7c62ef8d1e6ea9a88b0b47de7a3.src","preCode":"  public void testMinus()\n  {\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of(\"1\", \"3L\")),\n        KM1.minus(KM3)\n    );\n\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of()),\n        KM0.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of()),\n        KM1.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of(\"2\", \"5L\")),\n        KM2.minus(KM1)\n    );\n\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of()),\n        KM2.minus(KM2)\n    );\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisDataSourceMetadataTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"},{"authorDate":"2019-03-22 04:12:22","commitOrder":4,"curCode":"  public void testMinus()\n  {\n    Assert.assertEquals(\n        startMetadata(ImmutableMap.of(1, 3L)),\n        START1.minus(START3)\n    );\n\n    Assert.assertEquals(\n        startMetadata(ImmutableMap.of()),\n        START0.minus(START2)\n    );\n\n    Assert.assertEquals(\n        startMetadata(ImmutableMap.of()),\n        START1.minus(START2)\n    );\n\n    Assert.assertEquals(\n        startMetadata(ImmutableMap.of(2, 5L)),\n        START2.minus(START1)\n    );\n\n    Assert.assertEquals(\n        startMetadata(ImmutableMap.of()),\n        START2.minus(START2)\n    );\n\n    Assert.assertEquals(\n        endMetadata(ImmutableMap.of(1, 4L)),\n        END2.minus(END1)\n    );\n\n    Assert.assertEquals(\n        endMetadata(ImmutableMap.of(2, 5L)),\n        END1.minus(END2)\n    );\n  }\n","date":"2019-03-22 04:12:22","endLine":162,"groupId":"102334","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testMinus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/19/336184ac08ffa365146cc57fa41e2c24ac47ed.src","preCode":"  public void testMinus()\n  {\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of(1, 3L)),\n        KM1.minus(KM3)\n    );\n\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of()),\n        KM0.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of()),\n        KM1.minus(KM2)\n    );\n\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of(2, 5L)),\n        KM2.minus(KM1)\n    );\n\n    Assert.assertEquals(\n        km(\"foo\", ImmutableMap.of()),\n        KM2.minus(KM2)\n    );\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaDataSourceMetadataTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"0c5dcf5586e33607849e397209f3eb0b10661f1e","commitMessage":"@@@Fix exclusivity for start offset in kinesis indexing service & check exclusivity properly in IndexerSQLMetadataStorageCoordinator (#7291)\n\n* Fix exclusivity for start offset in kinesis indexing service\n\n* some adjustment\n\n* Fix SeekableStreamDataSourceMetadata\n\n* Add missing javadocs\n\n* Add missing comments and unit test\n\n* fix SeekableStreamStartSequenceNumbers.plus and add comments\n\n* remove extra exclusivePartitions in KafkaIOConfig and fix downgrade issue\n\n* Add javadocs\n\n* fix compilation\n\n* fix test\n\n* remove unused variable\n","date":"2019-03-22 04:12:22","modifiedFileCount":"30","status":"M","submitter":"Jihoon Son"}]
