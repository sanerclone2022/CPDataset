[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testNoLeaderFound() throws Exception\n  {\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of());\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(\"nodetype\")).andReturn(druidNodeDiscovery);\n\n    EasyMock.replay(druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        \"nodetype\",\n        \"/simple/leader\",\n        EasyMock.createNiceMock(ServerDiscoverySelector.class)\n    );\n    druidLeaderClient.start();\n\n    expectedException.expect(IOException.class);\n    expectedException.expectMessage(\"No known server\");\n    druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/direct\");\n  }\n","date":"2018-08-31 00:56:26","endLine":158,"groupId":"19618","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoLeaderFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/60/bd5662e6d43f12bcc84e9e940a0ed782cd4ecb.src","preCode":"  public void testNoLeaderFound() throws Exception\n  {\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of());\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(\"nodetype\")).andReturn(druidNodeDiscovery);\n\n    EasyMock.replay(druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        \"nodetype\",\n        \"/simple/leader\",\n        EasyMock.createNiceMock(ServerDiscoverySelector.class)\n    );\n    druidLeaderClient.start();\n\n    expectedException.expect(IOException.class);\n    expectedException.expectMessage(\"No known server\");\n    druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/direct\");\n  }\n","realPath":"server/src/test/java/org/apache/druid/discovery/DruidLeaderClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testServerFailureAndRedirect() throws Exception\n  {\n    ServerDiscoverySelector serverDiscoverySelector = EasyMock.createMock(ServerDiscoverySelector.class);\n    EasyMock.expect(serverDiscoverySelector.pick()).andReturn(null).anyTimes();\n\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(\n        ImmutableList.of(new DiscoveryDruidNode(\n            new DruidNode(\"test\", \"dummyhost\", 64231, null, true, false),\n            \"test\",\n            ImmutableMap.of()\n        ))\n    );\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(\n        ImmutableList.of(discoveryDruidNode)\n    );\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(\"nodetype\")).andReturn(druidNodeDiscovery).anyTimes();\n\n    EasyMock.replay(serverDiscoverySelector, druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        \"nodetype\",\n        \"/simple/leader\",\n        serverDiscoverySelector\n    );\n    druidLeaderClient.start();\n\n    Request request = druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/redirect\");\n    request.setContent(\"hello\".getBytes(\"UTF-8\"));\n    Assert.assertEquals(\"hello\", druidLeaderClient.go(request).getContent());\n  }\n","date":"2018-08-31 00:56:26","endLine":222,"groupId":"2752","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testServerFailureAndRedirect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/60/bd5662e6d43f12bcc84e9e940a0ed782cd4ecb.src","preCode":"  public void testServerFailureAndRedirect() throws Exception\n  {\n    ServerDiscoverySelector serverDiscoverySelector = EasyMock.createMock(ServerDiscoverySelector.class);\n    EasyMock.expect(serverDiscoverySelector.pick()).andReturn(null).anyTimes();\n\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(\n        ImmutableList.of(new DiscoveryDruidNode(\n            new DruidNode(\"test\", \"dummyhost\", 64231, null, true, false),\n            \"test\",\n            ImmutableMap.of()\n        ))\n    );\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(\n        ImmutableList.of(discoveryDruidNode)\n    );\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(\"nodetype\")).andReturn(druidNodeDiscovery).anyTimes();\n\n    EasyMock.replay(serverDiscoverySelector, druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        \"nodetype\",\n        \"/simple/leader\",\n        serverDiscoverySelector\n    );\n    druidLeaderClient.start();\n\n    Request request = druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/redirect\");\n    request.setContent(\"hello\".getBytes(\"UTF-8\"));\n    Assert.assertEquals(\"hello\", druidLeaderClient.go(request).getContent());\n  }\n","realPath":"server/src/test/java/org/apache/druid/discovery/DruidLeaderClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-15 11:49:38","codes":[{"authorDate":"2018-10-15 11:49:38","commitOrder":2,"curCode":"  public void testNoLeaderFound() throws Exception\n  {\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of());\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(NodeType.PEON)).andReturn(druidNodeDiscovery);\n\n    EasyMock.replay(druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeType.PEON,\n        \"/simple/leader\",\n        EasyMock.createNiceMock(ServerDiscoverySelector.class)\n    );\n    druidLeaderClient.start();\n\n    expectedException.expect(IOException.class);\n    expectedException.expectMessage(\"No known server\");\n    druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/direct\");\n  }\n","date":"2018-10-15 11:49:38","endLine":159,"groupId":"19618","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoLeaderFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b9/f00c07b089197a4df147f03fdcf92f99b4a63c.src","preCode":"  public void testNoLeaderFound() throws Exception\n  {\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of());\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(\"nodetype\")).andReturn(druidNodeDiscovery);\n\n    EasyMock.replay(druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        \"nodetype\",\n        \"/simple/leader\",\n        EasyMock.createNiceMock(ServerDiscoverySelector.class)\n    );\n    druidLeaderClient.start();\n\n    expectedException.expect(IOException.class);\n    expectedException.expectMessage(\"No known server\");\n    druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/direct\");\n  }\n","realPath":"server/src/test/java/org/apache/druid/discovery/DruidLeaderClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2018-10-15 11:49:38","commitOrder":2,"curCode":"  public void testServerFailureAndRedirect() throws Exception\n  {\n    ServerDiscoverySelector serverDiscoverySelector = EasyMock.createMock(ServerDiscoverySelector.class);\n    EasyMock.expect(serverDiscoverySelector.pick()).andReturn(null).anyTimes();\n\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    DiscoveryDruidNode dummyNode = new DiscoveryDruidNode(\n        new DruidNode(\"test\", \"dummyhost\", 64231, null, true, false),\n        NodeType.PEON,\n        ImmutableMap.of()\n    );\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(dummyNode));\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode));\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(NodeType.PEON)).andReturn(druidNodeDiscovery).anyTimes();\n\n    EasyMock.replay(serverDiscoverySelector, druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeType.PEON,\n        \"/simple/leader\",\n        serverDiscoverySelector\n    );\n    druidLeaderClient.start();\n\n    Request request = druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/redirect\");\n    request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8));\n    Assert.assertEquals(\"hello\", druidLeaderClient.go(request).getContent());\n  }\n","date":"2018-10-15 11:49:38","endLine":220,"groupId":"856","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testServerFailureAndRedirect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b9/f00c07b089197a4df147f03fdcf92f99b4a63c.src","preCode":"  public void testServerFailureAndRedirect() throws Exception\n  {\n    ServerDiscoverySelector serverDiscoverySelector = EasyMock.createMock(ServerDiscoverySelector.class);\n    EasyMock.expect(serverDiscoverySelector.pick()).andReturn(null).anyTimes();\n\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(\n        ImmutableList.of(new DiscoveryDruidNode(\n            new DruidNode(\"test\", \"dummyhost\", 64231, null, true, false),\n            \"test\",\n            ImmutableMap.of()\n        ))\n    );\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(\n        ImmutableList.of(discoveryDruidNode)\n    );\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(\"nodetype\")).andReturn(druidNodeDiscovery).anyTimes();\n\n    EasyMock.replay(serverDiscoverySelector, druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        \"nodetype\",\n        \"/simple/leader\",\n        serverDiscoverySelector\n    );\n    druidLeaderClient.start();\n\n    Request request = druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/redirect\");\n    request.setContent(\"hello\".getBytes(\"UTF-8\"));\n    Assert.assertEquals(\"hello\", druidLeaderClient.go(request).getContent());\n  }\n","realPath":"server/src/test/java/org/apache/druid/discovery/DruidLeaderClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"aa121da25f019ad3345c747ce56261fbb7e77885","commitMessage":"@@@Use NodeType enum instead of Strings (#6377)\n\n* Use NodeType enum instead of Strings\n\n* Make NodeType constants uppercase\n\n* Fix CommonCacheNotifier and NodeType/ServerType comments\n\n* Reconsidering comment\n\n* Fix import\n\n* Add a comment to CommonCacheNotifier.NODE_TYPES\n","date":"2018-10-15 11:49:38","modifiedFileCount":"30","status":"M","submitter":"Roman Leventov"},{"authorTime":"2018-10-16 05:19:40","codes":[{"authorDate":"2018-10-15 11:49:38","commitOrder":3,"curCode":"  public void testNoLeaderFound() throws Exception\n  {\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of());\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(NodeType.PEON)).andReturn(druidNodeDiscovery);\n\n    EasyMock.replay(druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeType.PEON,\n        \"/simple/leader\",\n        EasyMock.createNiceMock(ServerDiscoverySelector.class)\n    );\n    druidLeaderClient.start();\n\n    expectedException.expect(IOException.class);\n    expectedException.expectMessage(\"No known server\");\n    druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/direct\");\n  }\n","date":"2018-10-15 11:49:38","endLine":159,"groupId":"19618","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoLeaderFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b9/f00c07b089197a4df147f03fdcf92f99b4a63c.src","preCode":"  public void testNoLeaderFound() throws Exception\n  {\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of());\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(NodeType.PEON)).andReturn(druidNodeDiscovery);\n\n    EasyMock.replay(druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeType.PEON,\n        \"/simple/leader\",\n        EasyMock.createNiceMock(ServerDiscoverySelector.class)\n    );\n    druidLeaderClient.start();\n\n    expectedException.expect(IOException.class);\n    expectedException.expectMessage(\"No known server\");\n    druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/direct\");\n  }\n","realPath":"server/src/test/java/org/apache/druid/discovery/DruidLeaderClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"N"},{"authorDate":"2018-10-16 05:19:40","commitOrder":3,"curCode":"  public void testServerFailureAndRedirect() throws Exception\n  {\n    ServerDiscoverySelector serverDiscoverySelector = EasyMock.createMock(ServerDiscoverySelector.class);\n    EasyMock.expect(serverDiscoverySelector.pick()).andReturn(null).anyTimes();\n\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    DiscoveryDruidNode dummyNode = new DiscoveryDruidNode(\n        new DruidNode(\"test\", \"dummyhost\", false, 64231, null, true, false),\n        NodeType.PEON,\n        ImmutableMap.of()\n    );\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(dummyNode));\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode));\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(NodeType.PEON)).andReturn(druidNodeDiscovery).anyTimes();\n\n    EasyMock.replay(serverDiscoverySelector, druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeType.PEON,\n        \"/simple/leader\",\n        serverDiscoverySelector\n    );\n    druidLeaderClient.start();\n\n    Request request = druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/redirect\");\n    request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8));\n    Assert.assertEquals(\"hello\", druidLeaderClient.go(request).getContent());\n  }\n","date":"2018-10-16 05:19:40","endLine":220,"groupId":"856","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testServerFailureAndRedirect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/40/576e211f8da3b087b0e0beecc7192f36a17807.src","preCode":"  public void testServerFailureAndRedirect() throws Exception\n  {\n    ServerDiscoverySelector serverDiscoverySelector = EasyMock.createMock(ServerDiscoverySelector.class);\n    EasyMock.expect(serverDiscoverySelector.pick()).andReturn(null).anyTimes();\n\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    DiscoveryDruidNode dummyNode = new DiscoveryDruidNode(\n        new DruidNode(\"test\", \"dummyhost\", 64231, null, true, false),\n        NodeType.PEON,\n        ImmutableMap.of()\n    );\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(dummyNode));\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode));\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(NodeType.PEON)).andReturn(druidNodeDiscovery).anyTimes();\n\n    EasyMock.replay(serverDiscoverySelector, druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeType.PEON,\n        \"/simple/leader\",\n        serverDiscoverySelector\n    );\n    druidLeaderClient.start();\n\n    Request request = druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/redirect\");\n    request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8));\n    Assert.assertEquals(\"hello\", druidLeaderClient.go(request).getContent());\n  }\n","realPath":"server/src/test/java/org/apache/druid/discovery/DruidLeaderClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"85a89e27033b046c58346bbcedc8db37aa59dbf9","commitMessage":"@@@make druid node bind address configurable (#6464)\n\n* make druid node bind address configurable\n\n* fix tests\n\n* fix travis-ci\n","date":"2018-10-16 05:19:40","modifiedFileCount":"38","status":"M","submitter":"QiuMM"},{"authorTime":"2019-12-08 23:47:58","codes":[{"authorDate":"2019-12-08 23:47:58","commitOrder":4,"curCode":"  public void testNoLeaderFound() throws Exception\n  {\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of());\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery);\n\n    EasyMock.replay(druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeRole.PEON,\n        \"/simple/leader\",\n        EasyMock.createNiceMock(ServerDiscoverySelector.class)\n    );\n    druidLeaderClient.start();\n\n    expectedException.expect(IOException.class);\n    expectedException.expectMessage(\"No known server\");\n    druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/direct\");\n  }\n","date":"2019-12-08 23:47:58","endLine":159,"groupId":"860","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoLeaderFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7c/376ea20b68087d811b759e0b32627a0ac4d31d.src","preCode":"  public void testNoLeaderFound() throws Exception\n  {\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of());\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(NodeType.PEON)).andReturn(druidNodeDiscovery);\n\n    EasyMock.replay(druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeType.PEON,\n        \"/simple/leader\",\n        EasyMock.createNiceMock(ServerDiscoverySelector.class)\n    );\n    druidLeaderClient.start();\n\n    expectedException.expect(IOException.class);\n    expectedException.expectMessage(\"No known server\");\n    druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/direct\");\n  }\n","realPath":"server/src/test/java/org/apache/druid/discovery/DruidLeaderClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2019-12-08 23:47:58","commitOrder":4,"curCode":"  public void testServerFailureAndRedirect() throws Exception\n  {\n    ServerDiscoverySelector serverDiscoverySelector = EasyMock.createMock(ServerDiscoverySelector.class);\n    EasyMock.expect(serverDiscoverySelector.pick()).andReturn(null).anyTimes();\n\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    DiscoveryDruidNode dummyNode = new DiscoveryDruidNode(\n        new DruidNode(\"test\", \"dummyhost\", false, 64231, null, true, false),\n        NodeRole.PEON,\n        ImmutableMap.of()\n    );\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(dummyNode));\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode));\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery).anyTimes();\n\n    EasyMock.replay(serverDiscoverySelector, druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeRole.PEON,\n        \"/simple/leader\",\n        serverDiscoverySelector\n    );\n    druidLeaderClient.start();\n\n    Request request = druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/redirect\");\n    request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8));\n    Assert.assertEquals(\"hello\", druidLeaderClient.go(request).getContent());\n  }\n","date":"2019-12-08 23:47:58","endLine":220,"groupId":"856","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testServerFailureAndRedirect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7c/376ea20b68087d811b759e0b32627a0ac4d31d.src","preCode":"  public void testServerFailureAndRedirect() throws Exception\n  {\n    ServerDiscoverySelector serverDiscoverySelector = EasyMock.createMock(ServerDiscoverySelector.class);\n    EasyMock.expect(serverDiscoverySelector.pick()).andReturn(null).anyTimes();\n\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    DiscoveryDruidNode dummyNode = new DiscoveryDruidNode(\n        new DruidNode(\"test\", \"dummyhost\", false, 64231, null, true, false),\n        NodeType.PEON,\n        ImmutableMap.of()\n    );\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(dummyNode));\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode));\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(NodeType.PEON)).andReturn(druidNodeDiscovery).anyTimes();\n\n    EasyMock.replay(serverDiscoverySelector, druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeType.PEON,\n        \"/simple/leader\",\n        serverDiscoverySelector\n    );\n    druidLeaderClient.start();\n\n    Request request = druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/redirect\");\n    request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8));\n    Assert.assertEquals(\"hello\", druidLeaderClient.go(request).getContent());\n  }\n","realPath":"server/src/test/java/org/apache/druid/discovery/DruidLeaderClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"1c62987783e85867856f567b04aad807a26bb2e3","commitMessage":"@@@Add SelfDiscoveryResource; rename org.apache.druid.discovery.No? (#6702)\n\n* Add SelfDiscoveryResource\n\n* Rename org.apache.druid.discovery.NodeType to NodeRole. Refactor CuratorDruidNodeDiscoveryProvider. Make SelfDiscoveryResource to listen to updates only about a single node (itself).\n\n* Extended docs\n\n* Fix brace\n\n* Remove redundant throws in Lifecycle.Handler.stop()\n\n* Import order\n\n* Remove unresolvable link\n\n* Address comments\n\n* tmp\n\n* tmp\n\n* Rollback docker changes\n\n* Remove extra .sh files\n\n* Move filter\n\n* Fix SecurityResourceFilterTest\n","date":"2019-12-08 23:47:58","modifiedFileCount":"54","status":"M","submitter":"Roman Leventov"},{"authorTime":"2020-03-10 03:13:59","codes":[{"authorDate":"2020-03-10 03:13:59","commitOrder":5,"curCode":"  public void testNoLeaderFound() throws Exception\n  {\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of());\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery);\n\n    EasyMock.replay(druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeRole.PEON,\n        \"/simple/leader\"\n    );\n    druidLeaderClient.start();\n\n    expectedException.expect(IOException.class);\n    expectedException.expectMessage(\"No known server\");\n    druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/direct\");\n  }\n","date":"2020-03-10 03:13:59","endLine":156,"groupId":"860","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testNoLeaderFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/0720db48ffe319dd6109aea61dfe2afd5dd3bd.src","preCode":"  public void testNoLeaderFound() throws Exception\n  {\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of());\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery);\n\n    EasyMock.replay(druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeRole.PEON,\n        \"/simple/leader\",\n        EasyMock.createNiceMock(ServerDiscoverySelector.class)\n    );\n    druidLeaderClient.start();\n\n    expectedException.expect(IOException.class);\n    expectedException.expectMessage(\"No known server\");\n    druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/direct\");\n  }\n","realPath":"server/src/test/java/org/apache/druid/discovery/DruidLeaderClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2020-03-10 03:13:59","commitOrder":5,"curCode":"  public void testServerFailureAndRedirect() throws Exception\n  {\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    DiscoveryDruidNode dummyNode = new DiscoveryDruidNode(\n        new DruidNode(\"test\", \"dummyhost\", false, 64231, null, true, false),\n        NodeRole.PEON,\n        ImmutableMap.of()\n    );\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(dummyNode));\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode));\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery).anyTimes();\n\n    EasyMock.replay(druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeRole.PEON,\n        \"/simple/leader\"\n    );\n    druidLeaderClient.start();\n\n    Request request = druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/redirect\");\n    request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8));\n    Assert.assertEquals(\"hello\", druidLeaderClient.go(request).getContent());\n  }\n","date":"2020-03-10 03:13:59","endLine":212,"groupId":"856","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testServerFailureAndRedirect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/0720db48ffe319dd6109aea61dfe2afd5dd3bd.src","preCode":"  public void testServerFailureAndRedirect() throws Exception\n  {\n    ServerDiscoverySelector serverDiscoverySelector = EasyMock.createMock(ServerDiscoverySelector.class);\n    EasyMock.expect(serverDiscoverySelector.pick()).andReturn(null).anyTimes();\n\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    DiscoveryDruidNode dummyNode = new DiscoveryDruidNode(\n        new DruidNode(\"test\", \"dummyhost\", false, 64231, null, true, false),\n        NodeRole.PEON,\n        ImmutableMap.of()\n    );\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(dummyNode));\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode));\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery).anyTimes();\n\n    EasyMock.replay(serverDiscoverySelector, druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeRole.PEON,\n        \"/simple/leader\",\n        serverDiscoverySelector\n    );\n    druidLeaderClient.start();\n\n    Request request = druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/redirect\");\n    request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8));\n    Assert.assertEquals(\"hello\", druidLeaderClient.go(request).getContent());\n  }\n","realPath":"server/src/test/java/org/apache/druid/discovery/DruidLeaderClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"072bbe210f162228e85391b464f114da448df24a","commitMessage":"@@@remove ServerDiscoverySelector from DruidLeaderClient (#9481)\n\n","date":"2020-03-10 03:13:59","modifiedFileCount":"5","status":"M","submitter":"Himanshu"},{"authorTime":"2020-04-15 11:42:56","codes":[{"authorDate":"2020-04-15 11:42:56","commitOrder":6,"curCode":"  public void testNoLeaderFound() throws Exception\n  {\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of());\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery);\n\n    EasyMock.replay(druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeRole.PEON,\n        \"/simple/leader\",\n        EasyMock.createNiceMock(ServerDiscoverySelector.class)\n    );\n    druidLeaderClient.start();\n\n    expectedException.expect(IOException.class);\n    expectedException.expectMessage(\"No known server\");\n    druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/direct\");\n  }\n","date":"2020-04-15 11:42:56","endLine":159,"groupId":"860","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoLeaderFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7c/376ea20b68087d811b759e0b32627a0ac4d31d.src","preCode":"  public void testNoLeaderFound() throws Exception\n  {\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of());\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery);\n\n    EasyMock.replay(druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeRole.PEON,\n        \"/simple/leader\"\n    );\n    druidLeaderClient.start();\n\n    expectedException.expect(IOException.class);\n    expectedException.expectMessage(\"No known server\");\n    druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/direct\");\n  }\n","realPath":"server/src/test/java/org/apache/druid/discovery/DruidLeaderClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2020-04-15 11:42:56","commitOrder":6,"curCode":"  public void testServerFailureAndRedirect() throws Exception\n  {\n    ServerDiscoverySelector serverDiscoverySelector = EasyMock.createMock(ServerDiscoverySelector.class);\n    EasyMock.expect(serverDiscoverySelector.pick()).andReturn(null).anyTimes();\n\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    DiscoveryDruidNode dummyNode = new DiscoveryDruidNode(\n        new DruidNode(\"test\", \"dummyhost\", false, 64231, null, true, false),\n        NodeRole.PEON,\n        ImmutableMap.of()\n    );\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(dummyNode));\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode));\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery).anyTimes();\n\n    EasyMock.replay(serverDiscoverySelector, druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeRole.PEON,\n        \"/simple/leader\",\n        serverDiscoverySelector\n    );\n    druidLeaderClient.start();\n\n    Request request = druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/redirect\");\n    request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8));\n    Assert.assertEquals(\"hello\", druidLeaderClient.go(request).getContent());\n  }\n","date":"2020-04-15 11:42:56","endLine":220,"groupId":"856","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testServerFailureAndRedirect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7c/376ea20b68087d811b759e0b32627a0ac4d31d.src","preCode":"  public void testServerFailureAndRedirect() throws Exception\n  {\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    DiscoveryDruidNode dummyNode = new DiscoveryDruidNode(\n        new DruidNode(\"test\", \"dummyhost\", false, 64231, null, true, false),\n        NodeRole.PEON,\n        ImmutableMap.of()\n    );\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(dummyNode));\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode));\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery).anyTimes();\n\n    EasyMock.replay(druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeRole.PEON,\n        \"/simple/leader\"\n    );\n    druidLeaderClient.start();\n\n    Request request = druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/redirect\");\n    request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8));\n    Assert.assertEquals(\"hello\", druidLeaderClient.go(request).getContent());\n  }\n","realPath":"server/src/test/java/org/apache/druid/discovery/DruidLeaderClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"b8f7128b2d8f340d40ddabff7fea3282e82fa606","commitMessage":"@@@Revert \"remove ServerDiscoverySelector from DruidLeaderClient (#9481)\" (#9702)\n\n* Revert \"remove ServerDiscoverySelector from DruidLeaderClient (#9481)\"\n\nThis reverts commit 072bbe210f162228e85391b464f114da448df24a.\n\n* fix build","date":"2020-04-15 11:42:56","modifiedFileCount":"6","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-10-29 01:55:11","codes":[{"authorDate":"2020-10-29 01:55:11","commitOrder":7,"curCode":"  public void testNoLeaderFound() throws Exception\n  {\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of());\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery);\n\n    EasyMock.replay(druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeRole.PEON,\n        \"/simple/leader\"\n    );\n    druidLeaderClient.start();\n\n    expectedException.expect(IOException.class);\n    expectedException.expectMessage(\"No known server\");\n    druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/direct\");\n  }\n","date":"2020-10-29 01:55:11","endLine":156,"groupId":"1028","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"testNoLeaderFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/0720db48ffe319dd6109aea61dfe2afd5dd3bd.src","preCode":"  public void testNoLeaderFound() throws Exception\n  {\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of());\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery);\n\n    EasyMock.replay(druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeRole.PEON,\n        \"/simple/leader\",\n        EasyMock.createNiceMock(ServerDiscoverySelector.class)\n    );\n    druidLeaderClient.start();\n\n    expectedException.expect(IOException.class);\n    expectedException.expectMessage(\"No known server\");\n    druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/direct\");\n  }\n","realPath":"server/src/test/java/org/apache/druid/discovery/DruidLeaderClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2020-10-29 01:55:11","commitOrder":7,"curCode":"  public void testServerFailureAndRedirect() throws Exception\n  {\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    DiscoveryDruidNode dummyNode = new DiscoveryDruidNode(\n        new DruidNode(\"test\", \"dummyhost\", false, 64231, null, true, false),\n        NodeRole.PEON,\n        ImmutableMap.of()\n    );\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(dummyNode));\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode));\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery).anyTimes();\n\n    EasyMock.replay(druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeRole.PEON,\n        \"/simple/leader\"\n    );\n    druidLeaderClient.start();\n\n    Request request = druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/redirect\");\n    request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8));\n    Assert.assertEquals(\"hello\", druidLeaderClient.go(request).getContent());\n  }\n","date":"2020-10-29 01:55:11","endLine":212,"groupId":"1028","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"testServerFailureAndRedirect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/0720db48ffe319dd6109aea61dfe2afd5dd3bd.src","preCode":"  public void testServerFailureAndRedirect() throws Exception\n  {\n    ServerDiscoverySelector serverDiscoverySelector = EasyMock.createMock(ServerDiscoverySelector.class);\n    EasyMock.expect(serverDiscoverySelector.pick()).andReturn(null).anyTimes();\n\n    DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock(DruidNodeDiscovery.class);\n    DiscoveryDruidNode dummyNode = new DiscoveryDruidNode(\n        new DruidNode(\"test\", \"dummyhost\", false, 64231, null, true, false),\n        NodeRole.PEON,\n        ImmutableMap.of()\n    );\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(dummyNode));\n    EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode));\n\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery).anyTimes();\n\n    EasyMock.replay(serverDiscoverySelector, druidNodeDiscovery, druidNodeDiscoveryProvider);\n\n    DruidLeaderClient druidLeaderClient = new DruidLeaderClient(\n        httpClient,\n        druidNodeDiscoveryProvider,\n        NodeRole.PEON,\n        \"/simple/leader\",\n        serverDiscoverySelector\n    );\n    druidLeaderClient.start();\n\n    Request request = druidLeaderClient.makeRequest(HttpMethod.POST, \"/simple/redirect\");\n    request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8));\n    Assert.assertEquals(\"hello\", druidLeaderClient.go(request).getContent());\n  }\n","realPath":"server/src/test/java/org/apache/druid/discovery/DruidLeaderClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"4de4d4d11178638f022f1e9c5ad9dec751529d71","commitMessage":"@@@remove ServerDiscoverySelector from DruidLeaderClient (#10537)\n\n","date":"2020-10-29 01:55:11","modifiedFileCount":"6","status":"M","submitter":"Himanshu"}]
