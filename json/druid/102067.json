[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public MetaResultSet getTables(\n      final ConnectionHandle ch,\n      final String catalog,\n      final Pat schemaPattern,\n      final Pat tableNamePattern,\n      final List<String> typeList\n  )\n  {\n    final List<String> whereBuilder = new ArrayList<>();\n    if (catalog != null) {\n      whereBuilder.add(\"TABLES.TABLE_CATALOG = \" + Calcites.escapeStringLiteral(catalog));\n    }\n\n    if (schemaPattern.s != null) {\n      whereBuilder.add(\"TABLES.TABLE_SCHEMA LIKE \" + Calcites.escapeStringLiteral(schemaPattern.s));\n    }\n\n    if (tableNamePattern.s != null) {\n      whereBuilder.add(\"TABLES.TABLE_NAME LIKE \" + Calcites.escapeStringLiteral(tableNamePattern.s));\n    }\n\n    if (typeList != null) {\n      final List<String> escapedTypes = new ArrayList<>();\n      for (String type : typeList) {\n        escapedTypes.add(Calcites.escapeStringLiteral(type));\n      }\n      whereBuilder.add(\"TABLES.TABLE_TYPE IN (\" + Joiner.on(\", \").join(escapedTypes) + \")\");\n    }\n\n    final String where = whereBuilder.isEmpty() ? \"\" : \"WHERE \" + Joiner.on(\" AND \").join(whereBuilder);\n    final String sql = \"SELECT\\n\"\n                       + \"  TABLE_CATALOG AS TABLE_CAT,\\n\"\n                       + \"  TABLE_SCHEMA AS TABLE_SCHEM,\\n\"\n                       + \"  TABLE_NAME AS TABLE_NAME,\\n\"\n                       + \"  TABLE_TYPE AS TABLE_TYPE,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS REMARKS,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS TYPE_CAT,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS TYPE_SCHEM,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS TYPE_NAME,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS SELF_REFERENCING_COL_NAME,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS REF_GENERATION\\n\"\n                       + \"FROM\\n\"\n                       + \"  INFORMATION_SCHEMA.TABLES\\n\"\n                       + where + \"\\n\"\n                       + \"ORDER BY\\n\"\n                       + \"  TABLE_TYPE, TABLE_CAT, TABLE_SCHEM, TABLE_NAME\\n\";\n\n    return sqlResultSet(ch, sql);\n  }\n","date":"2018-08-31 00:56:26","endLine":432,"groupId":"1872","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getTables","params":"(finalConnectionHandlech@finalStringcatalog@finalPatschemaPattern@finalPattableNamePattern@finalList<String>typeList)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/87/2e615a198e5b4ca125f30dbf4047a922e6c345.src","preCode":"  public MetaResultSet getTables(\n      final ConnectionHandle ch,\n      final String catalog,\n      final Pat schemaPattern,\n      final Pat tableNamePattern,\n      final List<String> typeList\n  )\n  {\n    final List<String> whereBuilder = new ArrayList<>();\n    if (catalog != null) {\n      whereBuilder.add(\"TABLES.TABLE_CATALOG = \" + Calcites.escapeStringLiteral(catalog));\n    }\n\n    if (schemaPattern.s != null) {\n      whereBuilder.add(\"TABLES.TABLE_SCHEMA LIKE \" + Calcites.escapeStringLiteral(schemaPattern.s));\n    }\n\n    if (tableNamePattern.s != null) {\n      whereBuilder.add(\"TABLES.TABLE_NAME LIKE \" + Calcites.escapeStringLiteral(tableNamePattern.s));\n    }\n\n    if (typeList != null) {\n      final List<String> escapedTypes = new ArrayList<>();\n      for (String type : typeList) {\n        escapedTypes.add(Calcites.escapeStringLiteral(type));\n      }\n      whereBuilder.add(\"TABLES.TABLE_TYPE IN (\" + Joiner.on(\", \").join(escapedTypes) + \")\");\n    }\n\n    final String where = whereBuilder.isEmpty() ? \"\" : \"WHERE \" + Joiner.on(\" AND \").join(whereBuilder);\n    final String sql = \"SELECT\\n\"\n                       + \"  TABLE_CATALOG AS TABLE_CAT,\\n\"\n                       + \"  TABLE_SCHEMA AS TABLE_SCHEM,\\n\"\n                       + \"  TABLE_NAME AS TABLE_NAME,\\n\"\n                       + \"  TABLE_TYPE AS TABLE_TYPE,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS REMARKS,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS TYPE_CAT,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS TYPE_SCHEM,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS TYPE_NAME,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS SELF_REFERENCING_COL_NAME,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS REF_GENERATION\\n\"\n                       + \"FROM\\n\"\n                       + \"  INFORMATION_SCHEMA.TABLES\\n\"\n                       + where + \"\\n\"\n                       + \"ORDER BY\\n\"\n                       + \"  TABLE_TYPE, TABLE_CAT, TABLE_SCHEM, TABLE_NAME\\n\";\n\n    return sqlResultSet(ch, sql);\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/avatica/DruidMeta.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public MetaResultSet getColumns(\n      final ConnectionHandle ch,\n      final String catalog,\n      final Pat schemaPattern,\n      final Pat tableNamePattern,\n      final Pat columnNamePattern\n  )\n  {\n    final List<String> whereBuilder = new ArrayList<>();\n    if (catalog != null) {\n      whereBuilder.add(\"COLUMNS.TABLE_CATALOG = \" + Calcites.escapeStringLiteral(catalog));\n    }\n\n    if (schemaPattern.s != null) {\n      whereBuilder.add(\"COLUMNS.TABLE_SCHEMA LIKE \" + Calcites.escapeStringLiteral(schemaPattern.s));\n    }\n\n    if (tableNamePattern.s != null) {\n      whereBuilder.add(\"COLUMNS.TABLE_NAME LIKE \" + Calcites.escapeStringLiteral(tableNamePattern.s));\n    }\n\n    if (columnNamePattern.s != null) {\n      whereBuilder.add(\"COLUMNS.COLUMN_NAME LIKE \" + Calcites.escapeStringLiteral(columnNamePattern.s));\n    }\n\n    final String where = whereBuilder.isEmpty() ? \"\" : \"WHERE \" + Joiner.on(\" AND \").join(whereBuilder);\n    final String sql = \"SELECT\\n\"\n                       + \"  TABLE_CATALOG AS TABLE_CAT,\\n\"\n                       + \"  TABLE_SCHEMA AS TABLE_SCHEM,\\n\"\n                       + \"  TABLE_NAME AS TABLE_NAME,\\n\"\n                       + \"  COLUMN_NAME AS COLUMN_NAME,\\n\"\n                       + \"  CAST(JDBC_TYPE AS INTEGER) AS DATA_TYPE,\\n\"\n                       + \"  DATA_TYPE AS TYPE_NAME,\\n\"\n                       + \"  -1 AS COLUMN_SIZE,\\n\"\n                       + \"  -1 AS BUFFER_LENGTH,\\n\"\n                       + \"  -1 AS DECIMAL_DIGITS,\\n\"\n                       + \"  -1 AS NUM_PREC_RADIX,\\n\"\n                       + \"  CASE IS_NULLABLE WHEN 'YES' THEN 1 ELSE 0 END AS NULLABLE,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS REMARKS,\\n\"\n                       + \"  COLUMN_DEFAULT AS COLUMN_DEF,\\n\"\n                       + \"  -1 AS SQL_DATA_TYPE,\\n\"\n                       + \"  -1 AS SQL_DATETIME_SUB,\\n\"\n                       + \"  -1 AS CHAR_OCTET_LENGTH,\\n\"\n                       + \"  CAST(ORDINAL_POSITION AS INTEGER) AS ORDINAL_POSITION,\\n\"\n                       + \"  IS_NULLABLE AS IS_NULLABLE,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS SCOPE_CATALOG,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS SCOPE_SCHEMA,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS SCOPE_TABLE,\\n\"\n                       + \"  -1 AS SOURCE_DATA_TYPE,\\n\"\n                       + \"  'NO' AS IS_AUTOINCREMENT,\\n\"\n                       + \"  'NO' AS IS_GENERATEDCOLUMN\\n\"\n                       + \"FROM\\n\"\n                       + \"  INFORMATION_SCHEMA.COLUMNS\\n\"\n                       + where + \"\\n\"\n                       + \"ORDER BY\\n\"\n                       + \"  TABLE_CAT, TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION\\n\";\n\n    return sqlResultSet(ch, sql);\n  }\n","date":"2018-08-31 00:56:26","endLine":493,"groupId":"21227","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getColumns","params":"(finalConnectionHandlech@finalStringcatalog@finalPatschemaPattern@finalPattableNamePattern@finalPatcolumnNamePattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/87/2e615a198e5b4ca125f30dbf4047a922e6c345.src","preCode":"  public MetaResultSet getColumns(\n      final ConnectionHandle ch,\n      final String catalog,\n      final Pat schemaPattern,\n      final Pat tableNamePattern,\n      final Pat columnNamePattern\n  )\n  {\n    final List<String> whereBuilder = new ArrayList<>();\n    if (catalog != null) {\n      whereBuilder.add(\"COLUMNS.TABLE_CATALOG = \" + Calcites.escapeStringLiteral(catalog));\n    }\n\n    if (schemaPattern.s != null) {\n      whereBuilder.add(\"COLUMNS.TABLE_SCHEMA LIKE \" + Calcites.escapeStringLiteral(schemaPattern.s));\n    }\n\n    if (tableNamePattern.s != null) {\n      whereBuilder.add(\"COLUMNS.TABLE_NAME LIKE \" + Calcites.escapeStringLiteral(tableNamePattern.s));\n    }\n\n    if (columnNamePattern.s != null) {\n      whereBuilder.add(\"COLUMNS.COLUMN_NAME LIKE \" + Calcites.escapeStringLiteral(columnNamePattern.s));\n    }\n\n    final String where = whereBuilder.isEmpty() ? \"\" : \"WHERE \" + Joiner.on(\" AND \").join(whereBuilder);\n    final String sql = \"SELECT\\n\"\n                       + \"  TABLE_CATALOG AS TABLE_CAT,\\n\"\n                       + \"  TABLE_SCHEMA AS TABLE_SCHEM,\\n\"\n                       + \"  TABLE_NAME AS TABLE_NAME,\\n\"\n                       + \"  COLUMN_NAME AS COLUMN_NAME,\\n\"\n                       + \"  CAST(JDBC_TYPE AS INTEGER) AS DATA_TYPE,\\n\"\n                       + \"  DATA_TYPE AS TYPE_NAME,\\n\"\n                       + \"  -1 AS COLUMN_SIZE,\\n\"\n                       + \"  -1 AS BUFFER_LENGTH,\\n\"\n                       + \"  -1 AS DECIMAL_DIGITS,\\n\"\n                       + \"  -1 AS NUM_PREC_RADIX,\\n\"\n                       + \"  CASE IS_NULLABLE WHEN 'YES' THEN 1 ELSE 0 END AS NULLABLE,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS REMARKS,\\n\"\n                       + \"  COLUMN_DEFAULT AS COLUMN_DEF,\\n\"\n                       + \"  -1 AS SQL_DATA_TYPE,\\n\"\n                       + \"  -1 AS SQL_DATETIME_SUB,\\n\"\n                       + \"  -1 AS CHAR_OCTET_LENGTH,\\n\"\n                       + \"  CAST(ORDINAL_POSITION AS INTEGER) AS ORDINAL_POSITION,\\n\"\n                       + \"  IS_NULLABLE AS IS_NULLABLE,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS SCOPE_CATALOG,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS SCOPE_SCHEMA,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS SCOPE_TABLE,\\n\"\n                       + \"  -1 AS SOURCE_DATA_TYPE,\\n\"\n                       + \"  'NO' AS IS_AUTOINCREMENT,\\n\"\n                       + \"  'NO' AS IS_GENERATEDCOLUMN\\n\"\n                       + \"FROM\\n\"\n                       + \"  INFORMATION_SCHEMA.COLUMNS\\n\"\n                       + where + \"\\n\"\n                       + \"ORDER BY\\n\"\n                       + \"  TABLE_CAT, TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION\\n\";\n\n    return sqlResultSet(ch, sql);\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/avatica/DruidMeta.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":435,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-06-18 11:01:31","codes":[{"authorDate":"2020-06-18 11:01:31","commitOrder":2,"curCode":"  public MetaResultSet getTables(\n      final ConnectionHandle ch,\n      final String catalog,\n      final Pat schemaPattern,\n      final Pat tableNamePattern,\n      final List<String> typeList\n  )\n  {\n    final List<String> whereBuilder = new ArrayList<>();\n    if (catalog != null) {\n      whereBuilder.add(\"TABLES.TABLE_CATALOG = \" + Calcites.escapeStringLiteral(catalog));\n    }\n\n    if (schemaPattern.s != null) {\n      whereBuilder.add(\"TABLES.TABLE_SCHEMA LIKE \" + withEscapeClause(schemaPattern.s));\n    }\n\n    if (tableNamePattern.s != null) {\n      whereBuilder.add(\"TABLES.TABLE_NAME LIKE \" + withEscapeClause(tableNamePattern.s));\n    }\n\n    if (typeList != null) {\n      final List<String> escapedTypes = new ArrayList<>();\n      for (String type : typeList) {\n        escapedTypes.add(Calcites.escapeStringLiteral(type));\n      }\n      whereBuilder.add(\"TABLES.TABLE_TYPE IN (\" + Joiner.on(\", \").join(escapedTypes) + \")\");\n    }\n\n    final String where = whereBuilder.isEmpty() ? \"\" : \"WHERE \" + Joiner.on(\" AND \").join(whereBuilder);\n    final String sql = \"SELECT\\n\"\n                       + \"  TABLE_CATALOG AS TABLE_CAT,\\n\"\n                       + \"  TABLE_SCHEMA AS TABLE_SCHEM,\\n\"\n                       + \"  TABLE_NAME AS TABLE_NAME,\\n\"\n                       + \"  TABLE_TYPE AS TABLE_TYPE,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS REMARKS,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS TYPE_CAT,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS TYPE_SCHEM,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS TYPE_NAME,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS SELF_REFERENCING_COL_NAME,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS REF_GENERATION\\n\"\n                       + \"FROM\\n\"\n                       + \"  INFORMATION_SCHEMA.TABLES\\n\"\n                       + where + \"\\n\"\n                       + \"ORDER BY\\n\"\n                       + \"  TABLE_TYPE, TABLE_CAT, TABLE_SCHEM, TABLE_NAME\\n\";\n\n    return sqlResultSet(ch, sql);\n  }\n","date":"2020-06-18 11:01:31","endLine":432,"groupId":"102067","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getTables","params":"(finalConnectionHandlech@finalStringcatalog@finalPatschemaPattern@finalPattableNamePattern@finalList<String>typeList)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/73/8bed4dba7d0fdff378be0a8160f09244ae6f19.src","preCode":"  public MetaResultSet getTables(\n      final ConnectionHandle ch,\n      final String catalog,\n      final Pat schemaPattern,\n      final Pat tableNamePattern,\n      final List<String> typeList\n  )\n  {\n    final List<String> whereBuilder = new ArrayList<>();\n    if (catalog != null) {\n      whereBuilder.add(\"TABLES.TABLE_CATALOG = \" + Calcites.escapeStringLiteral(catalog));\n    }\n\n    if (schemaPattern.s != null) {\n      whereBuilder.add(\"TABLES.TABLE_SCHEMA LIKE \" + Calcites.escapeStringLiteral(schemaPattern.s));\n    }\n\n    if (tableNamePattern.s != null) {\n      whereBuilder.add(\"TABLES.TABLE_NAME LIKE \" + Calcites.escapeStringLiteral(tableNamePattern.s));\n    }\n\n    if (typeList != null) {\n      final List<String> escapedTypes = new ArrayList<>();\n      for (String type : typeList) {\n        escapedTypes.add(Calcites.escapeStringLiteral(type));\n      }\n      whereBuilder.add(\"TABLES.TABLE_TYPE IN (\" + Joiner.on(\", \").join(escapedTypes) + \")\");\n    }\n\n    final String where = whereBuilder.isEmpty() ? \"\" : \"WHERE \" + Joiner.on(\" AND \").join(whereBuilder);\n    final String sql = \"SELECT\\n\"\n                       + \"  TABLE_CATALOG AS TABLE_CAT,\\n\"\n                       + \"  TABLE_SCHEMA AS TABLE_SCHEM,\\n\"\n                       + \"  TABLE_NAME AS TABLE_NAME,\\n\"\n                       + \"  TABLE_TYPE AS TABLE_TYPE,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS REMARKS,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS TYPE_CAT,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS TYPE_SCHEM,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS TYPE_NAME,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS SELF_REFERENCING_COL_NAME,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS REF_GENERATION\\n\"\n                       + \"FROM\\n\"\n                       + \"  INFORMATION_SCHEMA.TABLES\\n\"\n                       + where + \"\\n\"\n                       + \"ORDER BY\\n\"\n                       + \"  TABLE_TYPE, TABLE_CAT, TABLE_SCHEM, TABLE_NAME\\n\";\n\n    return sqlResultSet(ch, sql);\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/avatica/DruidMeta.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"},{"authorDate":"2020-06-18 11:01:31","commitOrder":2,"curCode":"  public MetaResultSet getColumns(\n      final ConnectionHandle ch,\n      final String catalog,\n      final Pat schemaPattern,\n      final Pat tableNamePattern,\n      final Pat columnNamePattern\n  )\n  {\n    final List<String> whereBuilder = new ArrayList<>();\n    if (catalog != null) {\n      whereBuilder.add(\"COLUMNS.TABLE_CATALOG = \" + Calcites.escapeStringLiteral(catalog));\n    }\n\n    if (schemaPattern.s != null) {\n      whereBuilder.add(\"COLUMNS.TABLE_SCHEMA LIKE \" + withEscapeClause(schemaPattern.s));\n    }\n\n    if (tableNamePattern.s != null) {\n      whereBuilder.add(\"COLUMNS.TABLE_NAME LIKE \" + withEscapeClause(tableNamePattern.s));\n    }\n\n    if (columnNamePattern.s != null) {\n      whereBuilder.add(\"COLUMNS.COLUMN_NAME LIKE \"\n                       + withEscapeClause(columnNamePattern.s));\n    }\n\n    final String where = whereBuilder.isEmpty() ? \"\" : \"WHERE \" + Joiner.on(\" AND \").join(whereBuilder);\n    final String sql = \"SELECT\\n\"\n                       + \"  TABLE_CATALOG AS TABLE_CAT,\\n\"\n                       + \"  TABLE_SCHEMA AS TABLE_SCHEM,\\n\"\n                       + \"  TABLE_NAME AS TABLE_NAME,\\n\"\n                       + \"  COLUMN_NAME AS COLUMN_NAME,\\n\"\n                       + \"  CAST(JDBC_TYPE AS INTEGER) AS DATA_TYPE,\\n\"\n                       + \"  DATA_TYPE AS TYPE_NAME,\\n\"\n                       + \"  -1 AS COLUMN_SIZE,\\n\"\n                       + \"  -1 AS BUFFER_LENGTH,\\n\"\n                       + \"  -1 AS DECIMAL_DIGITS,\\n\"\n                       + \"  -1 AS NUM_PREC_RADIX,\\n\"\n                       + \"  CASE IS_NULLABLE WHEN 'YES' THEN 1 ELSE 0 END AS NULLABLE,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS REMARKS,\\n\"\n                       + \"  COLUMN_DEFAULT AS COLUMN_DEF,\\n\"\n                       + \"  -1 AS SQL_DATA_TYPE,\\n\"\n                       + \"  -1 AS SQL_DATETIME_SUB,\\n\"\n                       + \"  -1 AS CHAR_OCTET_LENGTH,\\n\"\n                       + \"  CAST(ORDINAL_POSITION AS INTEGER) AS ORDINAL_POSITION,\\n\"\n                       + \"  IS_NULLABLE AS IS_NULLABLE,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS SCOPE_CATALOG,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS SCOPE_SCHEMA,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS SCOPE_TABLE,\\n\"\n                       + \"  -1 AS SOURCE_DATA_TYPE,\\n\"\n                       + \"  'NO' AS IS_AUTOINCREMENT,\\n\"\n                       + \"  'NO' AS IS_GENERATEDCOLUMN\\n\"\n                       + \"FROM\\n\"\n                       + \"  INFORMATION_SCHEMA.COLUMNS\\n\"\n                       + where + \"\\n\"\n                       + \"ORDER BY\\n\"\n                       + \"  TABLE_CAT, TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION\\n\";\n\n    return sqlResultSet(ch, sql);\n  }\n","date":"2020-06-18 11:01:31","endLine":494,"groupId":"102067","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getColumns","params":"(finalConnectionHandlech@finalStringcatalog@finalPatschemaPattern@finalPattableNamePattern@finalPatcolumnNamePattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/73/8bed4dba7d0fdff378be0a8160f09244ae6f19.src","preCode":"  public MetaResultSet getColumns(\n      final ConnectionHandle ch,\n      final String catalog,\n      final Pat schemaPattern,\n      final Pat tableNamePattern,\n      final Pat columnNamePattern\n  )\n  {\n    final List<String> whereBuilder = new ArrayList<>();\n    if (catalog != null) {\n      whereBuilder.add(\"COLUMNS.TABLE_CATALOG = \" + Calcites.escapeStringLiteral(catalog));\n    }\n\n    if (schemaPattern.s != null) {\n      whereBuilder.add(\"COLUMNS.TABLE_SCHEMA LIKE \" + Calcites.escapeStringLiteral(schemaPattern.s));\n    }\n\n    if (tableNamePattern.s != null) {\n      whereBuilder.add(\"COLUMNS.TABLE_NAME LIKE \" + Calcites.escapeStringLiteral(tableNamePattern.s));\n    }\n\n    if (columnNamePattern.s != null) {\n      whereBuilder.add(\"COLUMNS.COLUMN_NAME LIKE \" + Calcites.escapeStringLiteral(columnNamePattern.s));\n    }\n\n    final String where = whereBuilder.isEmpty() ? \"\" : \"WHERE \" + Joiner.on(\" AND \").join(whereBuilder);\n    final String sql = \"SELECT\\n\"\n                       + \"  TABLE_CATALOG AS TABLE_CAT,\\n\"\n                       + \"  TABLE_SCHEMA AS TABLE_SCHEM,\\n\"\n                       + \"  TABLE_NAME AS TABLE_NAME,\\n\"\n                       + \"  COLUMN_NAME AS COLUMN_NAME,\\n\"\n                       + \"  CAST(JDBC_TYPE AS INTEGER) AS DATA_TYPE,\\n\"\n                       + \"  DATA_TYPE AS TYPE_NAME,\\n\"\n                       + \"  -1 AS COLUMN_SIZE,\\n\"\n                       + \"  -1 AS BUFFER_LENGTH,\\n\"\n                       + \"  -1 AS DECIMAL_DIGITS,\\n\"\n                       + \"  -1 AS NUM_PREC_RADIX,\\n\"\n                       + \"  CASE IS_NULLABLE WHEN 'YES' THEN 1 ELSE 0 END AS NULLABLE,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS REMARKS,\\n\"\n                       + \"  COLUMN_DEFAULT AS COLUMN_DEF,\\n\"\n                       + \"  -1 AS SQL_DATA_TYPE,\\n\"\n                       + \"  -1 AS SQL_DATETIME_SUB,\\n\"\n                       + \"  -1 AS CHAR_OCTET_LENGTH,\\n\"\n                       + \"  CAST(ORDINAL_POSITION AS INTEGER) AS ORDINAL_POSITION,\\n\"\n                       + \"  IS_NULLABLE AS IS_NULLABLE,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS SCOPE_CATALOG,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS SCOPE_SCHEMA,\\n\"\n                       + \"  CAST(NULL AS VARCHAR) AS SCOPE_TABLE,\\n\"\n                       + \"  -1 AS SOURCE_DATA_TYPE,\\n\"\n                       + \"  'NO' AS IS_AUTOINCREMENT,\\n\"\n                       + \"  'NO' AS IS_GENERATEDCOLUMN\\n\"\n                       + \"FROM\\n\"\n                       + \"  INFORMATION_SCHEMA.COLUMNS\\n\"\n                       + where + \"\\n\"\n                       + \"ORDER BY\\n\"\n                       + \"  TABLE_CAT, TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION\\n\";\n\n    return sqlResultSet(ch, sql);\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/avatica/DruidMeta.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":435,"status":"M"}],"commitId":"3527458f85f2cfcdffbfa4278a0c439cc3c100c4","commitMessage":"@@@Druid Avatica - Handle escaping of search characters correctly (#10040)\n\nFix Avatica based metadata queries by appending ESCAPE '\\' clause to the LIKE expressions","date":"2020-06-18 11:01:31","modifiedFileCount":"4","status":"M","submitter":"Samarth Jain"}]
