[{"authorTime":"2020-03-10 17:57:16","codes":[{"authorDate":"2020-03-10 17:57:16","commitOrder":1,"curCode":"  public void testHiLoHi() throws ExecutionException, InterruptedException\n  {\n    TopNQuery interactive = makeInteractiveQuery();\n    ListenableFuture<?> future = executorService.submit(() -> {\n      try {\n        Query<?> scheduled = scheduler.laneQuery(QueryPlus.wrap(interactive), ImmutableSet.of());\n\n        Assert.assertNotNull(scheduled);\n\n        Sequence<Integer> underlyingSequence = makeSequence(10);\n        underlyingSequence = Sequences.wrap(underlyingSequence, new SequenceWrapper()\n        {\n          @Override\n          public void before()\n          {\n            Assert.assertEquals(4, scheduler.getTotalAvailableCapacity());\n            Assert.assertEquals(2, scheduler.getLaneAvailableCapacity(HiLoQueryLaningStrategy.LOW));\n          }\n        });\n        Sequence<Integer> results = scheduler.run(scheduled, underlyingSequence);\n        int rowCount = consumeAndCloseSequence(results);\n\n        Assert.assertEquals(10, rowCount);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n    });\n    future.get();\n    Assert.assertEquals(5, scheduler.getTotalAvailableCapacity());\n  }\n","date":"2020-03-10 17:57:16","endLine":183,"groupId":"7725","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHiLoHi","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/07/82be0a1936485da2dc0a2cd9f991160d874998.src","preCode":"  public void testHiLoHi() throws ExecutionException, InterruptedException\n  {\n    TopNQuery interactive = makeInteractiveQuery();\n    ListenableFuture<?> future = executorService.submit(() -> {\n      try {\n        Query<?> scheduled = scheduler.laneQuery(QueryPlus.wrap(interactive), ImmutableSet.of());\n\n        Assert.assertNotNull(scheduled);\n\n        Sequence<Integer> underlyingSequence = makeSequence(10);\n        underlyingSequence = Sequences.wrap(underlyingSequence, new SequenceWrapper()\n        {\n          @Override\n          public void before()\n          {\n            Assert.assertEquals(4, scheduler.getTotalAvailableCapacity());\n            Assert.assertEquals(2, scheduler.getLaneAvailableCapacity(HiLoQueryLaningStrategy.LOW));\n          }\n        });\n        Sequence<Integer> results = scheduler.run(scheduled, underlyingSequence);\n        int rowCount = consumeAndCloseSequence(results);\n\n        Assert.assertEquals(10, rowCount);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n    });\n    future.get();\n    Assert.assertEquals(5, scheduler.getTotalAvailableCapacity());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QuerySchedulerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"B"},{"authorDate":"2020-03-10 17:57:16","commitOrder":1,"curCode":"  public void testHiLoReleaseLaneWhenSequenceExplodes() throws Exception\n  {\n    expected.expectMessage(\"exploded\");\n    expected.expect(ExecutionException.class);\n    TopNQuery interactive = makeInteractiveQuery();\n    ListenableFuture<?> future = executorService.submit(() -> {\n      try {\n        Query<?> scheduled = scheduler.laneQuery(QueryPlus.wrap(interactive), ImmutableSet.of());\n\n        Assert.assertNotNull(scheduled);\n\n        Sequence<Integer> underlyingSequence = makeExplodingSequence(10);\n        underlyingSequence = Sequences.wrap(underlyingSequence, new SequenceWrapper()\n        {\n          @Override\n          public void before()\n          {\n            Assert.assertEquals(4, scheduler.getTotalAvailableCapacity());\n          }\n        });\n        Sequence<Integer> results = scheduler.run(scheduled, underlyingSequence);\n\n        consumeAndCloseSequence(results);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n    });\n    future.get();\n  }\n","date":"2020-03-10 17:57:16","endLine":249,"groupId":"7725","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testHiLoReleaseLaneWhenSequenceExplodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/07/82be0a1936485da2dc0a2cd9f991160d874998.src","preCode":"  public void testHiLoReleaseLaneWhenSequenceExplodes() throws Exception\n  {\n    expected.expectMessage(\"exploded\");\n    expected.expect(ExecutionException.class);\n    TopNQuery interactive = makeInteractiveQuery();\n    ListenableFuture<?> future = executorService.submit(() -> {\n      try {\n        Query<?> scheduled = scheduler.laneQuery(QueryPlus.wrap(interactive), ImmutableSet.of());\n\n        Assert.assertNotNull(scheduled);\n\n        Sequence<Integer> underlyingSequence = makeExplodingSequence(10);\n        underlyingSequence = Sequences.wrap(underlyingSequence, new SequenceWrapper()\n        {\n          @Override\n          public void before()\n          {\n            Assert.assertEquals(4, scheduler.getTotalAvailableCapacity());\n          }\n        });\n        Sequence<Integer> results = scheduler.run(scheduled, underlyingSequence);\n\n        consumeAndCloseSequence(results);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n    });\n    future.get();\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QuerySchedulerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"B"}],"commitId":"8b9fe6f58461f1fc3f453c14f1634f9e779aeb71","commitMessage":"@@@query laning and load shedding (#9407)\n\n* prototype\n\n* merge QueryScheduler and QueryManager\n\n* everything in its right place\n\n* adjustments\n\n* docs\n\n* fixes\n\n* doc fixes\n\n* use resilience4j instead of semaphore\n\n* more tests\n\n* simplify\n\n* checkstyle\n\n* spelling\n\n* oops heh\n\n* remove unused\n\n* simplify\n\n* concurrency tests\n\n* add SqlResource tests.  refactor error response\n\n* add json config tests\n\n* use LongAdder instead of AtomicLong\n\n* remove test only stuffs from scheduler\n\n* javadocs.  etc\n\n* style\n\n* partial review stuffs\n\n* adjust\n\n* review stuffs\n\n* more javadoc\n\n* error response documentation\n\n* spelling\n\n* preserve user specified lane for NoSchedulingStrategy\n\n* more test.  why not\n\n* doc adjustment\n\n* style\n\n* missed review for make a thing a constant\n\n* fixes and tests\n\n* fix test\n\n* Update docs/configuration/index.md\n\nCo-Authored-By: sthetland <steve.hetland@imply.io>\n\n* doc update\n\nCo-authored-by: sthetland <steve.hetland@imply.io>","date":"2020-03-10 17:57:16","modifiedFileCount":"26","status":"B","submitter":"Clint Wylie"},{"authorTime":"2020-03-13 16:41:54","codes":[{"authorDate":"2020-03-13 16:41:54","commitOrder":2,"curCode":"  public void testHiLoHi() throws ExecutionException, InterruptedException\n  {\n    TopNQuery interactive = makeInteractiveQuery();\n    ListenableFuture<?> future = executorService.submit(() -> {\n      try {\n        Query<?> scheduled = scheduler.prioritizeAndLaneQuery(QueryPlus.wrap(interactive), ImmutableSet.of());\n\n        Assert.assertNotNull(scheduled);\n\n        Sequence<Integer> underlyingSequence = makeSequence(10);\n        underlyingSequence = Sequences.wrap(underlyingSequence, new SequenceWrapper()\n        {\n          @Override\n          public void before()\n          {\n            Assert.assertEquals(4, scheduler.getTotalAvailableCapacity());\n            Assert.assertEquals(2, scheduler.getLaneAvailableCapacity(HiLoQueryLaningStrategy.LOW));\n          }\n        });\n        Sequence<Integer> results = scheduler.run(scheduled, underlyingSequence);\n        int rowCount = consumeAndCloseSequence(results);\n\n        Assert.assertEquals(10, rowCount);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n    });\n    future.get();\n    Assert.assertEquals(5, scheduler.getTotalAvailableCapacity());\n  }\n","date":"2020-03-13 16:41:54","endLine":186,"groupId":"7725","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testHiLoHi","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/65/d7cfde39bbdb1609704871658322e9a31933f9.src","preCode":"  public void testHiLoHi() throws ExecutionException, InterruptedException\n  {\n    TopNQuery interactive = makeInteractiveQuery();\n    ListenableFuture<?> future = executorService.submit(() -> {\n      try {\n        Query<?> scheduled = scheduler.laneQuery(QueryPlus.wrap(interactive), ImmutableSet.of());\n\n        Assert.assertNotNull(scheduled);\n\n        Sequence<Integer> underlyingSequence = makeSequence(10);\n        underlyingSequence = Sequences.wrap(underlyingSequence, new SequenceWrapper()\n        {\n          @Override\n          public void before()\n          {\n            Assert.assertEquals(4, scheduler.getTotalAvailableCapacity());\n            Assert.assertEquals(2, scheduler.getLaneAvailableCapacity(HiLoQueryLaningStrategy.LOW));\n          }\n        });\n        Sequence<Integer> results = scheduler.run(scheduled, underlyingSequence);\n        int rowCount = consumeAndCloseSequence(results);\n\n        Assert.assertEquals(10, rowCount);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n    });\n    future.get();\n    Assert.assertEquals(5, scheduler.getTotalAvailableCapacity());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QuerySchedulerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2020-03-13 16:41:54","commitOrder":2,"curCode":"  public void testHiLoReleaseLaneWhenSequenceExplodes() throws Exception\n  {\n    expected.expectMessage(\"exploded\");\n    expected.expect(ExecutionException.class);\n    TopNQuery interactive = makeInteractiveQuery();\n    ListenableFuture<?> future = executorService.submit(() -> {\n      try {\n        Query<?> scheduled = scheduler.prioritizeAndLaneQuery(QueryPlus.wrap(interactive), ImmutableSet.of());\n\n        Assert.assertNotNull(scheduled);\n\n        Sequence<Integer> underlyingSequence = makeExplodingSequence(10);\n        underlyingSequence = Sequences.wrap(underlyingSequence, new SequenceWrapper()\n        {\n          @Override\n          public void before()\n          {\n            Assert.assertEquals(4, scheduler.getTotalAvailableCapacity());\n          }\n        });\n        Sequence<Integer> results = scheduler.run(scheduled, underlyingSequence);\n\n        consumeAndCloseSequence(results);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n    });\n    future.get();\n  }\n","date":"2020-03-13 16:41:54","endLine":252,"groupId":"7725","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testHiLoReleaseLaneWhenSequenceExplodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/65/d7cfde39bbdb1609704871658322e9a31933f9.src","preCode":"  public void testHiLoReleaseLaneWhenSequenceExplodes() throws Exception\n  {\n    expected.expectMessage(\"exploded\");\n    expected.expect(ExecutionException.class);\n    TopNQuery interactive = makeInteractiveQuery();\n    ListenableFuture<?> future = executorService.submit(() -> {\n      try {\n        Query<?> scheduled = scheduler.laneQuery(QueryPlus.wrap(interactive), ImmutableSet.of());\n\n        Assert.assertNotNull(scheduled);\n\n        Sequence<Integer> underlyingSequence = makeExplodingSequence(10);\n        underlyingSequence = Sequences.wrap(underlyingSequence, new SequenceWrapper()\n        {\n          @Override\n          public void before()\n          {\n            Assert.assertEquals(4, scheduler.getTotalAvailableCapacity());\n          }\n        });\n        Sequence<Integer> results = scheduler.run(scheduled, underlyingSequence);\n\n        consumeAndCloseSequence(results);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n    });\n    future.get();\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QuerySchedulerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"}],"commitId":"6afd55c8f4b49802d873ca181727231670abd566","commitMessage":"@@@threshold based automatic query prioritization (#9493)\n\n* threshold based automatic query prioritization\n\n* fixes\n\n* spelling and fixes\n\n* fix docs\n\n* spelling\n\n* checkstyle\n\n* adjustments\n\n* doc fix","date":"2020-03-13 16:41:54","modifiedFileCount":"13","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-03-13 16:41:54","codes":[{"authorDate":"2020-03-14 11:06:55","commitOrder":3,"curCode":"  public void testHiLoHi() throws ExecutionException, InterruptedException\n  {\n    TopNQuery interactive = makeInteractiveQuery();\n    ListenableFuture<?> future = executorService.submit(() -> {\n      try {\n        Query<?> scheduled = scheduler.prioritizeAndLaneQuery(QueryPlus.wrap(interactive), ImmutableSet.of());\n\n        Assert.assertNotNull(scheduled);\n\n        Sequence<Integer> underlyingSequence = makeSequence(10);\n        underlyingSequence = Sequences.wrap(underlyingSequence, new SequenceWrapper()\n        {\n          @Override\n          public void before()\n          {\n            Assert.assertEquals(4, scheduler.getTotalAvailableCapacity());\n            Assert.assertEquals(2, scheduler.getLaneAvailableCapacity(HiLoQueryLaningStrategy.LOW));\n          }\n        });\n        Sequence<Integer> results = scheduler.run(scheduled, underlyingSequence);\n        int rowCount = consumeAndCloseSequence(results);\n\n        Assert.assertEquals(10, rowCount);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n    });\n    future.get();\n    Assert.assertEquals(5, scheduler.getTotalAvailableCapacity());\n    Assert.assertEquals(QueryScheduler.UNAVAILABLE, scheduler.getLaneAvailableCapacity(\"non-existent\"));\n  }\n","date":"2020-03-14 11:06:55","endLine":187,"groupId":"7725","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testHiLoHi","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0e/3066bea37df025865708348340c896ae1d4b79.src","preCode":"  public void testHiLoHi() throws ExecutionException, InterruptedException\n  {\n    TopNQuery interactive = makeInteractiveQuery();\n    ListenableFuture<?> future = executorService.submit(() -> {\n      try {\n        Query<?> scheduled = scheduler.prioritizeAndLaneQuery(QueryPlus.wrap(interactive), ImmutableSet.of());\n\n        Assert.assertNotNull(scheduled);\n\n        Sequence<Integer> underlyingSequence = makeSequence(10);\n        underlyingSequence = Sequences.wrap(underlyingSequence, new SequenceWrapper()\n        {\n          @Override\n          public void before()\n          {\n            Assert.assertEquals(4, scheduler.getTotalAvailableCapacity());\n            Assert.assertEquals(2, scheduler.getLaneAvailableCapacity(HiLoQueryLaningStrategy.LOW));\n          }\n        });\n        Sequence<Integer> results = scheduler.run(scheduled, underlyingSequence);\n        int rowCount = consumeAndCloseSequence(results);\n\n        Assert.assertEquals(10, rowCount);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n    });\n    future.get();\n    Assert.assertEquals(5, scheduler.getTotalAvailableCapacity());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QuerySchedulerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2020-03-13 16:41:54","commitOrder":3,"curCode":"  public void testHiLoReleaseLaneWhenSequenceExplodes() throws Exception\n  {\n    expected.expectMessage(\"exploded\");\n    expected.expect(ExecutionException.class);\n    TopNQuery interactive = makeInteractiveQuery();\n    ListenableFuture<?> future = executorService.submit(() -> {\n      try {\n        Query<?> scheduled = scheduler.prioritizeAndLaneQuery(QueryPlus.wrap(interactive), ImmutableSet.of());\n\n        Assert.assertNotNull(scheduled);\n\n        Sequence<Integer> underlyingSequence = makeExplodingSequence(10);\n        underlyingSequence = Sequences.wrap(underlyingSequence, new SequenceWrapper()\n        {\n          @Override\n          public void before()\n          {\n            Assert.assertEquals(4, scheduler.getTotalAvailableCapacity());\n          }\n        });\n        Sequence<Integer> results = scheduler.run(scheduled, underlyingSequence);\n\n        consumeAndCloseSequence(results);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n    });\n    future.get();\n  }\n","date":"2020-03-13 16:41:54","endLine":252,"groupId":"7725","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testHiLoReleaseLaneWhenSequenceExplodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/65/d7cfde39bbdb1609704871658322e9a31933f9.src","preCode":"  public void testHiLoReleaseLaneWhenSequenceExplodes() throws Exception\n  {\n    expected.expectMessage(\"exploded\");\n    expected.expect(ExecutionException.class);\n    TopNQuery interactive = makeInteractiveQuery();\n    ListenableFuture<?> future = executorService.submit(() -> {\n      try {\n        Query<?> scheduled = scheduler.prioritizeAndLaneQuery(QueryPlus.wrap(interactive), ImmutableSet.of());\n\n        Assert.assertNotNull(scheduled);\n\n        Sequence<Integer> underlyingSequence = makeExplodingSequence(10);\n        underlyingSequence = Sequences.wrap(underlyingSequence, new SequenceWrapper()\n        {\n          @Override\n          public void before()\n          {\n            Assert.assertEquals(4, scheduler.getTotalAvailableCapacity());\n          }\n        });\n        Sequence<Integer> results = scheduler.run(scheduled, underlyingSequence);\n\n        consumeAndCloseSequence(results);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n    });\n    future.get();\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QuerySchedulerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"N"}],"commitId":"69af760a19bfaa9de8dcc1c38d70d03be22d2ecd","commitMessage":"@@@add manual laning strategy.  integration test (#9492)\n\n* add manual laning strategy.  integration test.  json config test\n\n* share percent conversion method\n\n* wrong assert\n\n* review stuffs\n\n* doc adjustments\n\n* more tests\n\n* test adjustment\n\n* adjust docs\n\n* Update index.md","date":"2020-03-14 11:06:55","modifiedFileCount":"10","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-03-13 16:41:54","codes":[{"authorDate":"2020-03-19 09:05:59","commitOrder":4,"curCode":"  public void testHiLoHi() throws ExecutionException, InterruptedException\n  {\n    TopNQuery interactive = makeInteractiveQuery();\n    ListenableFuture<?> future = executorService.submit(() -> {\n      try {\n        Query<?> scheduled = scheduler.prioritizeAndLaneQuery(QueryPlus.wrap(interactive), ImmutableSet.of());\n\n        Assert.assertNotNull(scheduled);\n\n        Sequence<Integer> underlyingSequence = makeSequence(10);\n        underlyingSequence = Sequences.wrap(underlyingSequence, new SequenceWrapper()\n        {\n          @Override\n          public void before()\n          {\n            Assert.assertEquals(4, scheduler.getTotalAvailableCapacity());\n            Assert.assertEquals(2, scheduler.getLaneAvailableCapacity(HiLoQueryLaningStrategy.LOW));\n          }\n        });\n        Sequence<Integer> results = scheduler.run(scheduled, underlyingSequence);\n        int rowCount = consumeAndCloseSequence(results);\n\n        Assert.assertEquals(10, rowCount);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n    });\n    future.get();\n    Assert.assertEquals(TEST_HI_CAPACITY, scheduler.getTotalAvailableCapacity());\n    Assert.assertEquals(QueryScheduler.UNAVAILABLE, scheduler.getLaneAvailableCapacity(\"non-existent\"));\n  }\n","date":"2020-03-19 09:05:59","endLine":143,"groupId":"10300","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testHiLoHi","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/3ef3b55981f7baa88d87ef56dfc20eb9696140.src","preCode":"  public void testHiLoHi() throws ExecutionException, InterruptedException\n  {\n    TopNQuery interactive = makeInteractiveQuery();\n    ListenableFuture<?> future = executorService.submit(() -> {\n      try {\n        Query<?> scheduled = scheduler.prioritizeAndLaneQuery(QueryPlus.wrap(interactive), ImmutableSet.of());\n\n        Assert.assertNotNull(scheduled);\n\n        Sequence<Integer> underlyingSequence = makeSequence(10);\n        underlyingSequence = Sequences.wrap(underlyingSequence, new SequenceWrapper()\n        {\n          @Override\n          public void before()\n          {\n            Assert.assertEquals(4, scheduler.getTotalAvailableCapacity());\n            Assert.assertEquals(2, scheduler.getLaneAvailableCapacity(HiLoQueryLaningStrategy.LOW));\n          }\n        });\n        Sequence<Integer> results = scheduler.run(scheduled, underlyingSequence);\n        int rowCount = consumeAndCloseSequence(results);\n\n        Assert.assertEquals(10, rowCount);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n    });\n    future.get();\n    Assert.assertEquals(5, scheduler.getTotalAvailableCapacity());\n    Assert.assertEquals(QueryScheduler.UNAVAILABLE, scheduler.getLaneAvailableCapacity(\"non-existent\"));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QuerySchedulerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2020-03-13 16:41:54","commitOrder":4,"curCode":"  public void testHiLoReleaseLaneWhenSequenceExplodes() throws Exception\n  {\n    expected.expectMessage(\"exploded\");\n    expected.expect(ExecutionException.class);\n    TopNQuery interactive = makeInteractiveQuery();\n    ListenableFuture<?> future = executorService.submit(() -> {\n      try {\n        Query<?> scheduled = scheduler.prioritizeAndLaneQuery(QueryPlus.wrap(interactive), ImmutableSet.of());\n\n        Assert.assertNotNull(scheduled);\n\n        Sequence<Integer> underlyingSequence = makeExplodingSequence(10);\n        underlyingSequence = Sequences.wrap(underlyingSequence, new SequenceWrapper()\n        {\n          @Override\n          public void before()\n          {\n            Assert.assertEquals(4, scheduler.getTotalAvailableCapacity());\n          }\n        });\n        Sequence<Integer> results = scheduler.run(scheduled, underlyingSequence);\n\n        consumeAndCloseSequence(results);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n    });\n    future.get();\n  }\n","date":"2020-03-13 16:41:54","endLine":252,"groupId":"10300","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testHiLoReleaseLaneWhenSequenceExplodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/65/d7cfde39bbdb1609704871658322e9a31933f9.src","preCode":"  public void testHiLoReleaseLaneWhenSequenceExplodes() throws Exception\n  {\n    expected.expectMessage(\"exploded\");\n    expected.expect(ExecutionException.class);\n    TopNQuery interactive = makeInteractiveQuery();\n    ListenableFuture<?> future = executorService.submit(() -> {\n      try {\n        Query<?> scheduled = scheduler.prioritizeAndLaneQuery(QueryPlus.wrap(interactive), ImmutableSet.of());\n\n        Assert.assertNotNull(scheduled);\n\n        Sequence<Integer> underlyingSequence = makeExplodingSequence(10);\n        underlyingSequence = Sequences.wrap(underlyingSequence, new SequenceWrapper()\n        {\n          @Override\n          public void before()\n          {\n            Assert.assertEquals(4, scheduler.getTotalAvailableCapacity());\n          }\n        });\n        Sequence<Integer> results = scheduler.run(scheduled, underlyingSequence);\n\n        consumeAndCloseSequence(results);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n    });\n    future.get();\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QuerySchedulerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"N"}],"commitId":"68013fbc64ac28e0033d7eca3099806609ba96f4","commitMessage":"@@@fix issue where total limit was being applied even when not configured (#9534)\n\n* fix issue where total limit was being applied even when not configured\n\n* fix inspection\n\n* add reserved lane name check to manual laning strategy","date":"2020-03-19 09:05:59","modifiedFileCount":"4","status":"M","submitter":"Clint Wylie"}]
