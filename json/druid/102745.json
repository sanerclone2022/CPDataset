[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2019-06-11 00:40:09","commitOrder":2,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    StandardDeviationPostAggregator that = (StandardDeviationPostAggregator) o;\n\n    if (!Objects.equals(name, that.name)) {\n      return false;\n    }\n    if (!Objects.equals(fieldName, that.fieldName)) {\n      return false;\n    }\n    if (!Objects.equals(estimator, that.estimator)) {\n      return false;\n    }\n    if (!Objects.equals(isVariancePop, that.isVariancePop)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2019-06-11 00:40:09","endLine":152,"groupId":"15585","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ce/f9bca5813977f76650c78167b37da6efd86efe.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    StandardDeviationPostAggregator that = (StandardDeviationPostAggregator) o;\n\n    if (!Objects.equals(name, that.name)) {\n      return false;\n    }\n    if (!Objects.equals(fieldName, that.fieldName)) {\n      return false;\n    }\n    if (!Objects.equals(estimator, that.estimator)) {\n      return false;\n    }\n    if (!Objects.equals(isVariancePop, that.isVariancePop)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/StandardDeviationPostAggregator.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    FinalizingFieldAccessPostAggregator that = (FinalizingFieldAccessPostAggregator) o;\n\n    if (fieldName != null ? !fieldName.equals(that.fieldName) : that.fieldName != null) {\n      return false;\n    }\n    if (name != null ? !name.equals(that.name) : that.name != null) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2018-08-31 00:56:26","endLine":168,"groupId":"14106","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3c/b5c3137099d24b32ea5101c4604b6970405674.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    FinalizingFieldAccessPostAggregator that = (FinalizingFieldAccessPostAggregator) o;\n\n    if (fieldName != null ? !fieldName.equals(that.fieldName) : that.fieldName != null) {\n      return false;\n    }\n    if (name != null ? !name.equals(that.name) : that.name != null) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/aggregation/post/FinalizingFieldAccessPostAggregator.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"NB"}],"commitId":"ce591d14574cf0cb81d83ddf405a446aeee7648f","commitMessage":"@@@Support var_pop.  var_samp.  stddev_pop and stddev_samp etc in sql (#7801)\n\n* support var_pop.  stddev_pop etc in sql\n\n* fix sql compatible\n\n* rebase on master\n\n* update doc\n","date":"2019-06-11 00:40:09","modifiedFileCount":"4","status":"M","submitter":"Xue Yu"},{"authorTime":"2020-08-27 01:53:44","codes":[{"authorDate":"2019-06-11 00:40:09","commitOrder":3,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    StandardDeviationPostAggregator that = (StandardDeviationPostAggregator) o;\n\n    if (!Objects.equals(name, that.name)) {\n      return false;\n    }\n    if (!Objects.equals(fieldName, that.fieldName)) {\n      return false;\n    }\n    if (!Objects.equals(estimator, that.estimator)) {\n      return false;\n    }\n    if (!Objects.equals(isVariancePop, that.isVariancePop)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2019-06-11 00:40:09","endLine":152,"groupId":"102745","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ce/f9bca5813977f76650c78167b37da6efd86efe.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    StandardDeviationPostAggregator that = (StandardDeviationPostAggregator) o;\n\n    if (!Objects.equals(name, that.name)) {\n      return false;\n    }\n    if (!Objects.equals(fieldName, that.fieldName)) {\n      return false;\n    }\n    if (!Objects.equals(estimator, that.estimator)) {\n      return false;\n    }\n    if (!Objects.equals(isVariancePop, that.isVariancePop)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/StandardDeviationPostAggregator.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"N"},{"authorDate":"2020-08-27 01:53:44","commitOrder":3,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    FinalizingFieldAccessPostAggregator that = (FinalizingFieldAccessPostAggregator) o;\n\n    if (!Objects.equals(fieldName, that.fieldName)) {\n      return false;\n    }\n    if (!Objects.equals(name, that.name)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2020-08-27 01:53:44","endLine":183,"groupId":"102745","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4a/cf45d9f6484444ae824fa69930f5857594c501.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    FinalizingFieldAccessPostAggregator that = (FinalizingFieldAccessPostAggregator) o;\n\n    if (fieldName != null ? !fieldName.equals(that.fieldName) : that.fieldName != null) {\n      return false;\n    }\n    if (name != null ? !name.equals(that.name) : that.name != null) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/aggregation/post/FinalizingFieldAccessPostAggregator.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"ab606610089f7bb9b4b1b68ac488764f394723fd","commitMessage":"@@@refactor internal type system (#9638)\n\n* better type tracking: add typed postaggs.  finalized types for agg factories\n\n* more javadoc\n\n* adjustments\n\n* transition to getTypeName to be used exclusively for complex types\n\n* remove unused fn\n\n* adjust\n\n* more better\n\n* rename getTypeName to getComplexTypeName\n\n* setup expression post agg for type inference existing\n\n* more javadocs\n\n* fixup\n\n* oops\n\n* more test\n\n* more test\n\n* more comments/javadoc\n\n* nulls\n\n* explicitly handle only numeric and complex aggregators for incremental index\n\n* checkstyle\n\n* more tests\n\n* adjust\n\n* more tests to showcase difference in behavior\n\n* timeseries longsum array","date":"2020-08-27 01:53:44","modifiedFileCount":"176","status":"M","submitter":"Clint Wylie"}]
