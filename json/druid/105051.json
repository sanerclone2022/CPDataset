[{"authorTime":"2018-10-15 11:37:37","codes":[{"authorDate":"2018-10-15 11:37:37","commitOrder":1,"curCode":"  public void testGunzipBug() throws IOException\n  {\n    final ByteArrayOutputStream tripleGzByteStream = new ByteArrayOutputStream(gzBytes.length * 3);\n    tripleGzByteStream.write(gzBytes);\n    tripleGzByteStream.write(gzBytes);\n    tripleGzByteStream.write(gzBytes);\n    try (final InputStream inputStream = new GZIPInputStream(\n        new ZeroRemainingInputStream(\n            new ByteArrayInputStream(\n                tripleGzByteStream.toByteArray()\n            )\n        )\n    )) {\n      try (final ByteArrayOutputStream outputStream = new ByteArrayOutputStream(expected.length * 3)) {\n        Assert.assertEquals(\n            \"Read terminated too soon (bug 7036144)\",\n            expected.length * 3,\n            ByteStreams.copy(inputStream, outputStream)\n        );\n        final byte[] found = outputStream.toByteArray();\n        Assert.assertEquals(expected.length * 3, found.length);\n        Assert.assertArrayEquals(expected, Arrays.copyOfRange(found, expected.length * 0, expected.length * 1));\n        Assert.assertArrayEquals(expected, Arrays.copyOfRange(found, expected.length * 1, expected.length * 2));\n        Assert.assertArrayEquals(expected, Arrays.copyOfRange(found, expected.length * 2, expected.length * 3));\n      }\n    }\n  }\n","date":"2018-10-15 11:37:37","endLine":462,"groupId":"14299","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGunzipBug","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f3/fd03a310c796881474cb88dbb10969d8ecbbaa.src","preCode":"  public void testGunzipBug() throws IOException\n  {\n    final ByteArrayOutputStream tripleGzByteStream = new ByteArrayOutputStream(gzBytes.length * 3);\n    tripleGzByteStream.write(gzBytes);\n    tripleGzByteStream.write(gzBytes);\n    tripleGzByteStream.write(gzBytes);\n    try (final InputStream inputStream = new GZIPInputStream(\n        new ZeroRemainingInputStream(\n            new ByteArrayInputStream(\n                tripleGzByteStream.toByteArray()\n            )\n        )\n    )) {\n      try (final ByteArrayOutputStream outputStream = new ByteArrayOutputStream(expected.length * 3)) {\n        Assert.assertEquals(\n            \"Read terminated too soon (bug 7036144)\",\n            expected.length * 3,\n            ByteStreams.copy(inputStream, outputStream)\n        );\n        final byte[] found = outputStream.toByteArray();\n        Assert.assertEquals(expected.length * 3, found.length);\n        Assert.assertArrayEquals(expected, Arrays.copyOfRange(found, expected.length * 0, expected.length * 1));\n        Assert.assertArrayEquals(expected, Arrays.copyOfRange(found, expected.length * 1, expected.length * 2));\n        Assert.assertArrayEquals(expected, Arrays.copyOfRange(found, expected.length * 2, expected.length * 3));\n      }\n    }\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/CompressionUtilsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":436,"status":"B"},{"authorDate":"2018-10-15 11:37:37","commitOrder":1,"curCode":"  public void testGunzipBugStreamWorkarround() throws IOException\n  {\n\n    final ByteArrayOutputStream tripleGzByteStream = new ByteArrayOutputStream(gzBytes.length * 3);\n    tripleGzByteStream.write(gzBytes);\n    tripleGzByteStream.write(gzBytes);\n    tripleGzByteStream.write(gzBytes);\n\n    try (ByteArrayOutputStream bos = new ByteArrayOutputStream(expected.length * 3)) {\n      Assert.assertEquals(\n          expected.length * 3,\n          CompressionUtils.gunzip(\n              new ZeroRemainingInputStream(\n                  new ByteArrayInputStream(tripleGzByteStream.toByteArray())\n              ), bos\n          )\n      );\n      final byte[] found = bos.toByteArray();\n      Assert.assertEquals(expected.length * 3, found.length);\n      Assert.assertArrayEquals(expected, Arrays.copyOfRange(found, expected.length * 0, expected.length * 1));\n      Assert.assertArrayEquals(expected, Arrays.copyOfRange(found, expected.length * 1, expected.length * 2));\n      Assert.assertArrayEquals(expected, Arrays.copyOfRange(found, expected.length * 2, expected.length * 3));\n    }\n  }\n","date":"2018-10-15 11:37:37","endLine":528,"groupId":"14299","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGunzipBugStreamWorkarround","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f3/fd03a310c796881474cb88dbb10969d8ecbbaa.src","preCode":"  public void testGunzipBugStreamWorkarround() throws IOException\n  {\n\n    final ByteArrayOutputStream tripleGzByteStream = new ByteArrayOutputStream(gzBytes.length * 3);\n    tripleGzByteStream.write(gzBytes);\n    tripleGzByteStream.write(gzBytes);\n    tripleGzByteStream.write(gzBytes);\n\n    try (ByteArrayOutputStream bos = new ByteArrayOutputStream(expected.length * 3)) {\n      Assert.assertEquals(\n          expected.length * 3,\n          CompressionUtils.gunzip(\n              new ZeroRemainingInputStream(\n                  new ByteArrayInputStream(tripleGzByteStream.toByteArray())\n              ), bos\n          )\n      );\n      final byte[] found = bos.toByteArray();\n      Assert.assertEquals(expected.length * 3, found.length);\n      Assert.assertArrayEquals(expected, Arrays.copyOfRange(found, expected.length * 0, expected.length * 1));\n      Assert.assertArrayEquals(expected, Arrays.copyOfRange(found, expected.length * 1, expected.length * 2));\n      Assert.assertArrayEquals(expected, Arrays.copyOfRange(found, expected.length * 2, expected.length * 3));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/CompressionUtilsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":505,"status":"B"}],"commitId":"84598fba3b283cbfd6a5addd2602c7b12ba8c00c","commitMessage":"@@@combine druid-api.  druid-common.  java-util into druid-core (#6443)\n\n* combine druid-api.  druid-common.  java-util\n\n* spacing\n","date":"2018-10-15 11:37:37","modifiedFileCount":"0","status":"B","submitter":"Clint Wylie"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":2,"curCode":"  public void testGunzipBug() throws IOException\n  {\n    final ByteArrayOutputStream tripleGzByteStream = new ByteArrayOutputStream(GZ_BYTES.length * 3);\n    tripleGzByteStream.write(GZ_BYTES);\n    tripleGzByteStream.write(GZ_BYTES);\n    tripleGzByteStream.write(GZ_BYTES);\n    try (final InputStream inputStream = new GZIPInputStream(\n        new ZeroRemainingInputStream(\n            new ByteArrayInputStream(\n                tripleGzByteStream.toByteArray()\n            )\n        )\n    )) {\n      try (final ByteArrayOutputStream outputStream = new ByteArrayOutputStream(EXPECTED.length * 3)) {\n        Assert.assertEquals(\n            \"Read terminated too soon (bug 7036144)\",\n            EXPECTED.length * 3,\n            ByteStreams.copy(inputStream, outputStream)\n        );\n        final byte[] found = outputStream.toByteArray();\n        Assert.assertEquals(EXPECTED.length * 3, found.length);\n        Assert.assertArrayEquals(EXPECTED, Arrays.copyOfRange(found, EXPECTED.length * 0, EXPECTED.length * 1));\n        Assert.assertArrayEquals(EXPECTED, Arrays.copyOfRange(found, EXPECTED.length * 1, EXPECTED.length * 2));\n        Assert.assertArrayEquals(EXPECTED, Arrays.copyOfRange(found, EXPECTED.length * 2, EXPECTED.length * 3));\n      }\n    }\n  }\n","date":"2019-08-23 18:13:54","endLine":462,"groupId":"105051","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGunzipBug","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/63/fa47c7781828f883e631fe5c098bc4649cd03d.src","preCode":"  public void testGunzipBug() throws IOException\n  {\n    final ByteArrayOutputStream tripleGzByteStream = new ByteArrayOutputStream(gzBytes.length * 3);\n    tripleGzByteStream.write(gzBytes);\n    tripleGzByteStream.write(gzBytes);\n    tripleGzByteStream.write(gzBytes);\n    try (final InputStream inputStream = new GZIPInputStream(\n        new ZeroRemainingInputStream(\n            new ByteArrayInputStream(\n                tripleGzByteStream.toByteArray()\n            )\n        )\n    )) {\n      try (final ByteArrayOutputStream outputStream = new ByteArrayOutputStream(expected.length * 3)) {\n        Assert.assertEquals(\n            \"Read terminated too soon (bug 7036144)\",\n            expected.length * 3,\n            ByteStreams.copy(inputStream, outputStream)\n        );\n        final byte[] found = outputStream.toByteArray();\n        Assert.assertEquals(expected.length * 3, found.length);\n        Assert.assertArrayEquals(expected, Arrays.copyOfRange(found, expected.length * 0, expected.length * 1));\n        Assert.assertArrayEquals(expected, Arrays.copyOfRange(found, expected.length * 1, expected.length * 2));\n        Assert.assertArrayEquals(expected, Arrays.copyOfRange(found, expected.length * 2, expected.length * 3));\n      }\n    }\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/CompressionUtilsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":436,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":2,"curCode":"  public void testGunzipBugStreamWorkarround() throws IOException\n  {\n\n    final ByteArrayOutputStream tripleGzByteStream = new ByteArrayOutputStream(GZ_BYTES.length * 3);\n    tripleGzByteStream.write(GZ_BYTES);\n    tripleGzByteStream.write(GZ_BYTES);\n    tripleGzByteStream.write(GZ_BYTES);\n\n    try (ByteArrayOutputStream bos = new ByteArrayOutputStream(EXPECTED.length * 3)) {\n      Assert.assertEquals(\n          EXPECTED.length * 3,\n          CompressionUtils.gunzip(\n              new ZeroRemainingInputStream(\n                  new ByteArrayInputStream(tripleGzByteStream.toByteArray())\n              ), bos\n          )\n      );\n      final byte[] found = bos.toByteArray();\n      Assert.assertEquals(EXPECTED.length * 3, found.length);\n      Assert.assertArrayEquals(EXPECTED, Arrays.copyOfRange(found, EXPECTED.length * 0, EXPECTED.length * 1));\n      Assert.assertArrayEquals(EXPECTED, Arrays.copyOfRange(found, EXPECTED.length * 1, EXPECTED.length * 2));\n      Assert.assertArrayEquals(EXPECTED, Arrays.copyOfRange(found, EXPECTED.length * 2, EXPECTED.length * 3));\n    }\n  }\n","date":"2019-08-23 18:13:54","endLine":528,"groupId":"105051","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGunzipBugStreamWorkarround","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/63/fa47c7781828f883e631fe5c098bc4649cd03d.src","preCode":"  public void testGunzipBugStreamWorkarround() throws IOException\n  {\n\n    final ByteArrayOutputStream tripleGzByteStream = new ByteArrayOutputStream(gzBytes.length * 3);\n    tripleGzByteStream.write(gzBytes);\n    tripleGzByteStream.write(gzBytes);\n    tripleGzByteStream.write(gzBytes);\n\n    try (ByteArrayOutputStream bos = new ByteArrayOutputStream(expected.length * 3)) {\n      Assert.assertEquals(\n          expected.length * 3,\n          CompressionUtils.gunzip(\n              new ZeroRemainingInputStream(\n                  new ByteArrayInputStream(tripleGzByteStream.toByteArray())\n              ), bos\n          )\n      );\n      final byte[] found = bos.toByteArray();\n      Assert.assertEquals(expected.length * 3, found.length);\n      Assert.assertArrayEquals(expected, Arrays.copyOfRange(found, expected.length * 0, expected.length * 1));\n      Assert.assertArrayEquals(expected, Arrays.copyOfRange(found, expected.length * 1, expected.length * 2));\n      Assert.assertArrayEquals(expected, Arrays.copyOfRange(found, expected.length * 2, expected.length * 3));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/CompressionUtilsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":505,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
