[{"authorTime":"2020-06-13 12:39:37","codes":[{"authorDate":"2020-08-27 04:19:18","commitOrder":8,"curCode":"  public void testRunWithDynamicPartitioning() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getObjectMapper(),\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        new NoopChatHandlerProvider(),\n        rowIngestionMetersFactory,\n        indexingServiceClient,\n        coordinatorClient,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY,\n        appenderatorsManager\n    );\n\n    final CompactionTask compactionTask = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    final Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    final List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(DEFAULT_COMPACTION_STATE, segments.get(i).getLastCompactionState());\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    List<String> rowsFromSegment = getCSVFormatRowsFromSegments(segments);\n    Assert.assertEquals(TEST_ROWS, rowsFromSegment);\n  }\n","date":"2020-08-27 04:19:18","endLine":265,"groupId":"1002","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithDynamicPartitioning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/dc/e22de059cfea4791c21c15a4d902f571b35cf0.src","preCode":"  public void testRunWithDynamicPartitioning() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getObjectMapper(),\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        new NoopChatHandlerProvider(),\n        rowIngestionMetersFactory,\n        indexingServiceClient,\n        coordinatorClient,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY,\n        appenderatorsManager\n    );\n\n    final CompactionTask compactionTask = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    final Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    final List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(DEFAULT_COMPACTION_STATE, segments.get(i).getLastCompactionState());\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    List<String> rowsFromSegment = getCSVFormatRowsFromSegments(segments);\n    Assert.assertEquals(TEST_ROWS, rowsFromSegment);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"B"},{"authorDate":"2020-06-13 12:39:37","commitOrder":8,"curCode":"  public void testRunCompactionTwice() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getObjectMapper(),\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        new NoopChatHandlerProvider(),\n        rowIngestionMetersFactory,\n        indexingServiceClient,\n        coordinatorClient,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY,\n        appenderatorsManager\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(DEFAULT_COMPACTION_STATE, segments.get(i).getLastCompactionState());\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    final CompactionTask compactionTask2 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    resultPair = runTask(compactionTask2);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(DEFAULT_COMPACTION_STATE, segments.get(i).getLastCompactionState());\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(\n                PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,\n                0,\n                2,\n                (short) 2,\n                (short) 1\n            ),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","date":"2020-06-13 12:39:37","endLine":340,"groupId":"1002","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunCompactionTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e0/8361450fb94d4f141a24bcbea293dff29dc429.src","preCode":"  public void testRunCompactionTwice() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getObjectMapper(),\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        new NoopChatHandlerProvider(),\n        rowIngestionMetersFactory,\n        indexingServiceClient,\n        coordinatorClient,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY,\n        appenderatorsManager\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(DEFAULT_COMPACTION_STATE, segments.get(i).getLastCompactionState());\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    final CompactionTask compactionTask2 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    resultPair = runTask(compactionTask2);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(DEFAULT_COMPACTION_STATE, segments.get(i).getLastCompactionState());\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(\n                PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,\n                0,\n                2,\n                (short) 2,\n                (short) 1\n            ),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"NB"}],"commitId":"b9ff3483ac353c4c7098d5caa1802befa5943ef0","commitMessage":"@@@Add support for all partitioing schemes for auto compaction  (#10307)\n\n* Add support for all partitioing schemes for auto compaction\n\n* annotate last compaction state for multi phase parallel indexing\n\n* fix build and tests\n\n* test\n\n* better home","date":"2020-08-27 04:19:18","modifiedFileCount":"37","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-08-27 08:08:12","codes":[{"authorDate":"2020-08-27 08:08:12","commitOrder":9,"curCode":"  public void testRunWithDynamicPartitioning() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    final Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    final List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(DEFAULT_COMPACTION_STATE, segments.get(i).getLastCompactionState());\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    List<String> rowsFromSegment = getCSVFormatRowsFromSegments(segments);\n    Assert.assertEquals(TEST_ROWS, rowsFromSegment);\n  }\n","date":"2020-08-27 08:08:12","endLine":252,"groupId":"1002","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithDynamicPartitioning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/71/9fba10bbe182731bd0191d5b5847ed7c900e40.src","preCode":"  public void testRunWithDynamicPartitioning() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getObjectMapper(),\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        new NoopChatHandlerProvider(),\n        rowIngestionMetersFactory,\n        indexingServiceClient,\n        coordinatorClient,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY,\n        appenderatorsManager\n    );\n\n    final CompactionTask compactionTask = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    final Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    final List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(DEFAULT_COMPACTION_STATE, segments.get(i).getLastCompactionState());\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    List<String> rowsFromSegment = getCSVFormatRowsFromSegments(segments);\n    Assert.assertEquals(TEST_ROWS, rowsFromSegment);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"},{"authorDate":"2020-08-27 08:08:12","commitOrder":9,"curCode":"  public void testRunCompactionTwice() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(DEFAULT_COMPACTION_STATE, segments.get(i).getLastCompactionState());\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    final CompactionTask compactionTask2 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    resultPair = runTask(compactionTask2);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(DEFAULT_COMPACTION_STATE, segments.get(i).getLastCompactionState());\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(\n                PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,\n                0,\n                2,\n                (short) 2,\n                (short) 1\n            ),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","date":"2020-08-27 08:08:12","endLine":402,"groupId":"1002","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunCompactionTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/71/9fba10bbe182731bd0191d5b5847ed7c900e40.src","preCode":"  public void testRunCompactionTwice() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        getObjectMapper(),\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        new NoopChatHandlerProvider(),\n        rowIngestionMetersFactory,\n        indexingServiceClient,\n        coordinatorClient,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY,\n        appenderatorsManager\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(DEFAULT_COMPACTION_STATE, segments.get(i).getLastCompactionState());\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    final CompactionTask compactionTask2 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    resultPair = runTask(compactionTask2);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(DEFAULT_COMPACTION_STATE, segments.get(i).getLastCompactionState());\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(\n                PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,\n                0,\n                2,\n                (short) 2,\n                (short) 1\n            ),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"}],"commitId":"f82fd22fa7de175200b7127c34c2eb2900bf7317","commitMessage":"@@@Move tools for indexing to TaskToolbox instead of injecting them in constructor (#10308)\n\n* Move tools for indexing to TaskToolbox instead of injecting them in constructor\n\n* oops.  other changes\n\n* fix test\n\n* unnecessary new file\n\n* fix test\n\n* fix build","date":"2020-08-27 08:08:12","modifiedFileCount":"67","status":"M","submitter":"Jihoon Son"},{"authorTime":"2021-02-12 19:03:20","codes":[{"authorDate":"2021-02-12 19:03:20","commitOrder":10,"curCode":"  public void testRunWithDynamicPartitioning() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    final Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    final List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.NONE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    List<String> rowsFromSegment = getCSVFormatRowsFromSegments(segments);\n    Assert.assertEquals(TEST_ROWS, rowsFromSegment);\n  }\n","date":"2021-02-12 19:03:20","endLine":266,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithDynamicPartitioning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bd/1f8193417da8de9a1df24dcc6cc87448fa70ad.src","preCode":"  public void testRunWithDynamicPartitioning() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    final Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    final List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(DEFAULT_COMPACTION_STATE, segments.get(i).getLastCompactionState());\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    List<String> rowsFromSegment = getCSVFormatRowsFromSegments(segments);\n    Assert.assertEquals(TEST_ROWS, rowsFromSegment);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"},{"authorDate":"2021-02-12 19:03:20","commitOrder":10,"curCode":"  public void testRunCompactionTwice() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.NONE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    final CompactionTask compactionTask2 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    resultPair = runTask(compactionTask2);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.NONE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(\n                PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,\n                0,\n                2,\n                (short) 2,\n                (short) 1\n            ),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","date":"2021-02-12 19:03:20","endLine":436,"groupId":"1002","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunCompactionTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bd/1f8193417da8de9a1df24dcc6cc87448fa70ad.src","preCode":"  public void testRunCompactionTwice() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(DEFAULT_COMPACTION_STATE, segments.get(i).getLastCompactionState());\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    final CompactionTask compactionTask2 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    resultPair = runTask(compactionTask2);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(DEFAULT_COMPACTION_STATE, segments.get(i).getLastCompactionState());\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(\n                PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,\n                0,\n                2,\n                (short) 2,\n                (short) 1\n            ),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"}],"commitId":"6541178c21839530a42af4b4675a9bc680bffca6","commitMessage":"@@@Support segmentGranularity for auto-compaction (#10843)\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* resolve conflict\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* fix tests\n\n* fix more tests\n\n* fix checkstyle\n\n* add unit tests\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* add unit tests\n\n* add integration tests\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix failing tests\n\n* address comments\n\n* address comments\n\n* fix tests\n\n* fix tests\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test","date":"2021-02-12 19:03:20","modifiedFileCount":"32","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-02-18 17:35:10","codes":[{"authorDate":"2021-02-18 17:35:10","commitOrder":11,"curCode":"  public void testRunWithDynamicPartitioning() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    final Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    final List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    List<String> rowsFromSegment = getCSVFormatRowsFromSegments(segments);\n    Assert.assertEquals(TEST_ROWS, rowsFromSegment);\n  }\n","date":"2021-02-18 17:35:10","endLine":266,"groupId":"1002","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithDynamicPartitioning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0e/287721c4408ce0efb2b96ff33fd4aa78db4f90.src","preCode":"  public void testRunWithDynamicPartitioning() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    final Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    final List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.NONE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    List<String> rowsFromSegment = getCSVFormatRowsFromSegments(segments);\n    Assert.assertEquals(TEST_ROWS, rowsFromSegment);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"},{"authorDate":"2021-02-18 17:35:10","commitOrder":11,"curCode":"  public void testRunCompactionTwice() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    final CompactionTask compactionTask2 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    resultPair = runTask(compactionTask2);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(\n                PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,\n                0,\n                2,\n                (short) 2,\n                (short) 1\n            ),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","date":"2021-02-18 17:35:10","endLine":436,"groupId":"1002","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunCompactionTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0e/287721c4408ce0efb2b96ff33fd4aa78db4f90.src","preCode":"  public void testRunCompactionTwice() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.NONE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    final CompactionTask compactionTask2 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    resultPair = runTask(compactionTask2);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.NONE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(\n                PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,\n                0,\n                2,\n                (short) 2,\n                (short) 1\n            ),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"}],"commitId":"eabad0fb352ee7f1f32658edb95d236fe1837662","commitMessage":"@@@Keep query granularity of compacted segments after compaction (#10856)\n\n* Keep query granularity of compacted segments after compaction\n\n* Protect against null isRollup\n\n* Fix bugspot check RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN & edit an existing comment\n\n* Make sure that NONE is also included when comparing for the finer granularity\n\n* Update integration test check for segment size due to query granularity propagation affecting size\n\n* Minor code cleanup\n\n* Added functional test to verify queryGranlarity after compaction\n\n* Minor style fix\n\n* Update unit tests","date":"2021-02-18 17:35:10","modifiedFileCount":"14","status":"M","submitter":"Agustin Gonzalez"},{"authorTime":"2021-07-21 02:44:19","codes":[{"authorDate":"2021-07-21 02:44:19","commitOrder":12,"curCode":"  public void testRunWithDynamicPartitioning() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentCacheManagerFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    final Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    final List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    List<String> rowsFromSegment = getCSVFormatRowsFromSegments(segments);\n    Assert.assertEquals(TEST_ROWS, rowsFromSegment);\n  }\n","date":"2021-07-21 02:44:19","endLine":269,"groupId":"104537","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithDynamicPartitioning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b6/098ea9854c6e2a2db0c789a1b7ff67c3239486.src","preCode":"  public void testRunWithDynamicPartitioning() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    final Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    final List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    List<String> rowsFromSegment = getCSVFormatRowsFromSegments(segments);\n    Assert.assertEquals(TEST_ROWS, rowsFromSegment);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"},{"authorDate":"2021-07-21 02:44:19","commitOrder":12,"curCode":"  public void testRunCompactionTwice() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentCacheManagerFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    final CompactionTask compactionTask2 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    resultPair = runTask(compactionTask2);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(\n                PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,\n                0,\n                2,\n                (short) 2,\n                (short) 1\n            ),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","date":"2021-07-21 02:44:19","endLine":440,"groupId":"104537","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunCompactionTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b6/098ea9854c6e2a2db0c789a1b7ff67c3239486.src","preCode":"  public void testRunCompactionTwice() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    final CompactionTask compactionTask2 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    resultPair = runTask(compactionTask2);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(\n                PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,\n                0,\n                2,\n                (short) 2,\n                (short) 1\n            ),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"M"}],"commitId":"94c1671eaf7b050972602fdedcb1971cdbde692d","commitMessage":"@@@Split SegmentLoader into SegmentLoader and SegmentCacheManager (#11466)\n\nThis PR splits current SegmentLoader into SegmentLoader and SegmentCacheManager.\n\nSegmentLoader - this class is responsible for building the segment object but does not expose any methods for downloading.  cache space management.  etc. Default implementation delegates the download operations to SegmentCacheManager and only contains the logic for building segments once downloaded. . This class will be used in SegmentManager to construct Segment objects.\n\nSegmentCacheManager - this class manages the segment cache on the local disk. It fetches the segment files to the local disk.  can clean up the cache.  and in the future.  support reserve and release on cache space. [See https://github.com/Make SegmentLoader extensible and customizable #11398]. This class will be used in ingestion tasks such as compaction.  re-indexing where segment files need to be downloaded locally.","date":"2021-07-21 02:44:19","modifiedFileCount":"41","status":"M","submitter":"Abhishek Agarwal"}]
