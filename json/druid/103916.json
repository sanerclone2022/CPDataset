[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TimeseriesQueryEngine engine = new TimeseriesQueryEngine();\n\n    IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()\n                                  .dataSource(QueryRunnerTestHelper.dataSource)\n                                  .granularity(QueryRunnerTestHelper.allGran)\n                                  .intervals(QueryRunnerTestHelper.fullOnInterval)\n                                  .aggregators(\n                                      Lists.newArrayList(\n                                          QueryRunnerTestHelper.rowsCount,\n                                          new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                                      )\n                                  )\n                                  .build();\n\n    final Iterable<Result<TimeseriesResultValue>> results =\n        engine.process(query, new IncrementalIndexStorageAdapter(index)).toList();\n\n    List<Result<TimeseriesResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TimeseriesResultValue(\n                ImmutableMap.of(\"UV\", 3, \"rows\", 3L)\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","date":"2018-08-31 00:56:26","endLine":112,"groupId":"10833","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopNWithDistinctCountAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7d/8fb98db953858eab849ff476f96b15bdb6947a.src","preCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TimeseriesQueryEngine engine = new TimeseriesQueryEngine();\n\n    IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()\n                                  .dataSource(QueryRunnerTestHelper.dataSource)\n                                  .granularity(QueryRunnerTestHelper.allGran)\n                                  .intervals(QueryRunnerTestHelper.fullOnInterval)\n                                  .aggregators(\n                                      Lists.newArrayList(\n                                          QueryRunnerTestHelper.rowsCount,\n                                          new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                                      )\n                                  )\n                                  .build();\n\n    final Iterable<Result<TimeseriesResultValue>> results =\n        engine.process(query, new IncrementalIndexStorageAdapter(index)).toList();\n\n    List<Result<TimeseriesResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TimeseriesResultValue(\n                ImmutableMap.of(\"UV\", 3, \"rows\", 3L)\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","realPath":"extensions-contrib/distinctcount/src/test/java/org/apache/druid/query/aggregation/distinctcount/DistinctCountTimeseriesQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TopNQueryEngine engine = new TopNQueryEngine(pool);\n\n    IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource)\n                          .granularity(QueryRunnerTestHelper.allGran)\n                          .intervals(QueryRunnerTestHelper.fullOnInterval)\n                          .dimension(client_type)\n                          .metric(\"UV\")\n                          .threshold(10)\n                          .aggregators(\n                              Lists.newArrayList(\n                                  QueryRunnerTestHelper.rowsCount,\n                                  new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                              )\n                          )\n                          .build();\n\n    final Iterable<Result<TopNResultValue>> results =\n        engine.query(query, new IncrementalIndexStorageAdapter(index), null).toList();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        client_type, \"iphone\",\n                        \"UV\", 2L,\n                        \"rows\", 2L\n                    ),\n                    ImmutableMap.of(\n                        client_type, \"android\",\n                        \"UV\", 1L,\n                        \"rows\", 1L\n                    )\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","date":"2018-08-31 00:56:26","endLine":155,"groupId":"17084","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTopNWithDistinctCountAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e9/e4dea3ec8fb1fe809de91e316901fe134f8fb3.src","preCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TopNQueryEngine engine = new TopNQueryEngine(pool);\n\n    IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource)\n                          .granularity(QueryRunnerTestHelper.allGran)\n                          .intervals(QueryRunnerTestHelper.fullOnInterval)\n                          .dimension(client_type)\n                          .metric(\"UV\")\n                          .threshold(10)\n                          .aggregators(\n                              Lists.newArrayList(\n                                  QueryRunnerTestHelper.rowsCount,\n                                  new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                              )\n                          )\n                          .build();\n\n    final Iterable<Result<TopNResultValue>> results =\n        engine.query(query, new IncrementalIndexStorageAdapter(index), null).toList();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        client_type, \"iphone\",\n                        \"UV\", 2L,\n                        \"rows\", 2L\n                    ),\n                    ImmutableMap.of(\n                        client_type, \"android\",\n                        \"UV\", 1L,\n                        \"rows\", 1L\n                    )\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","realPath":"extensions-contrib/distinctcount/src/test/java/org/apache/druid/query/aggregation/distinctcount/DistinctCountTopNQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-01-22 03:11:10","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TimeseriesQueryEngine engine = new TimeseriesQueryEngine();\n\n    IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()\n                                  .dataSource(QueryRunnerTestHelper.dataSource)\n                                  .granularity(QueryRunnerTestHelper.allGran)\n                                  .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n                                  .aggregators(\n                                      Lists.newArrayList(\n                                          QueryRunnerTestHelper.rowsCount,\n                                          new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                                      )\n                                  )\n                                  .build();\n\n    final Iterable<Result<TimeseriesResultValue>> results =\n        engine.process(query, new IncrementalIndexStorageAdapter(index)).toList();\n\n    List<Result<TimeseriesResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TimeseriesResultValue(\n                ImmutableMap.of(\"UV\", 3, \"rows\", 3L)\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","date":"2019-01-22 03:11:10","endLine":112,"groupId":"10833","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopNWithDistinctCountAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/12/7fa9be4938b0b09fab5e509cb1fab5988c16b5.src","preCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TimeseriesQueryEngine engine = new TimeseriesQueryEngine();\n\n    IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()\n                                  .dataSource(QueryRunnerTestHelper.dataSource)\n                                  .granularity(QueryRunnerTestHelper.allGran)\n                                  .intervals(QueryRunnerTestHelper.fullOnInterval)\n                                  .aggregators(\n                                      Lists.newArrayList(\n                                          QueryRunnerTestHelper.rowsCount,\n                                          new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                                      )\n                                  )\n                                  .build();\n\n    final Iterable<Result<TimeseriesResultValue>> results =\n        engine.process(query, new IncrementalIndexStorageAdapter(index)).toList();\n\n    List<Result<TimeseriesResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TimeseriesResultValue(\n                ImmutableMap.of(\"UV\", 3, \"rows\", 3L)\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","realPath":"extensions-contrib/distinctcount/src/test/java/org/apache/druid/query/aggregation/distinctcount/DistinctCountTimeseriesQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TopNQueryEngine engine = new TopNQueryEngine(pool);\n\n    IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource)\n                          .granularity(QueryRunnerTestHelper.allGran)\n                          .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n                          .dimension(client_type)\n                          .metric(\"UV\")\n                          .threshold(10)\n                          .aggregators(\n                              Lists.newArrayList(\n                                  QueryRunnerTestHelper.rowsCount,\n                                  new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                              )\n                          )\n                          .build();\n\n    final Iterable<Result<TopNResultValue>> results =\n        engine.query(query, new IncrementalIndexStorageAdapter(index), null).toList();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        client_type, \"iphone\",\n                        \"UV\", 2L,\n                        \"rows\", 2L\n                    ),\n                    ImmutableMap.of(\n                        client_type, \"android\",\n                        \"UV\", 1L,\n                        \"rows\", 1L\n                    )\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","date":"2019-01-22 03:11:10","endLine":155,"groupId":"17084","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTopNWithDistinctCountAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f7/b12ce21c090b62db722d753cbfae0fd5175e5e.src","preCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TopNQueryEngine engine = new TopNQueryEngine(pool);\n\n    IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource)\n                          .granularity(QueryRunnerTestHelper.allGran)\n                          .intervals(QueryRunnerTestHelper.fullOnInterval)\n                          .dimension(client_type)\n                          .metric(\"UV\")\n                          .threshold(10)\n                          .aggregators(\n                              Lists.newArrayList(\n                                  QueryRunnerTestHelper.rowsCount,\n                                  new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                              )\n                          )\n                          .build();\n\n    final Iterable<Result<TopNResultValue>> results =\n        engine.query(query, new IncrementalIndexStorageAdapter(index), null).toList();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        client_type, \"iphone\",\n                        \"UV\", 2L,\n                        \"rows\", 2L\n                    ),\n                    ImmutableMap.of(\n                        client_type, \"android\",\n                        \"UV\", 1L,\n                        \"rows\", 1L\n                    )\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","realPath":"extensions-contrib/distinctcount/src/test/java/org/apache/druid/query/aggregation/distinctcount/DistinctCountTopNQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"8eae26fd4e7572060d112864dd3d5f6a865b9c89","commitMessage":"@@@Introduce SegmentId class (#6370)\n\n* Introduce SegmentId class\n\n* tmp\n\n* Fix SelectQueryRunnerTest\n\n* Fix indentation\n\n* Fixes\n\n* Remove Comparators.inverse() tests\n\n* Refinements\n\n* Fix tests\n\n* Fix more tests\n\n* Remove duplicate DataSegmentTest.  fixes #6064\n\n* SegmentDescriptor doc\n\n* Fix SQLMetadataStorageUpdaterJobHandler\n\n* Fix DataSegment deserialization for ignoring id\n\n* Add comments\n\n* More comments\n\n* Address more comments\n\n* Fix compilation\n\n* Restore segment2 in SystemSchemaTest according to a comment\n\n* Fix style\n\n* fix testServerSegmentsTable\n\n* Fix compilation\n\n* Add comments about why SegmentId and SegmentIdWithShardSpec are separate classes\n\n* Fix SystemSchemaTest\n\n* Fix style\n\n* Compare SegmentDescriptor with SegmentId in Javadoc and comments rather than with DataSegment\n\n* Remove a link.  see https://youtrack.jetbrains.com/issue/IDEA-205164\n\n* Fix compilation\n","date":"2019-01-22 03:11:10","modifiedFileCount":"308","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-07-19 04:16:28","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":3,"curCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TimeseriesQueryEngine engine = new TimeseriesQueryEngine();\n\n    IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()\n                                  .dataSource(QueryRunnerTestHelper.dataSource)\n                                  .granularity(QueryRunnerTestHelper.allGran)\n                                  .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n                                  .aggregators(\n                                      Lists.newArrayList(\n                                          QueryRunnerTestHelper.rowsCount,\n                                          new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                                      )\n                                  )\n                                  .build();\n\n    final Iterable<Result<TimeseriesResultValue>> results =\n        engine.process(query, new IncrementalIndexStorageAdapter(index)).toList();\n\n    List<Result<TimeseriesResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TimeseriesResultValue(\n                ImmutableMap.of(\"UV\", 3, \"rows\", 3L)\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","date":"2019-01-22 03:11:10","endLine":112,"groupId":"10833","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopNWithDistinctCountAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/12/7fa9be4938b0b09fab5e509cb1fab5988c16b5.src","preCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TimeseriesQueryEngine engine = new TimeseriesQueryEngine();\n\n    IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()\n                                  .dataSource(QueryRunnerTestHelper.dataSource)\n                                  .granularity(QueryRunnerTestHelper.allGran)\n                                  .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n                                  .aggregators(\n                                      Lists.newArrayList(\n                                          QueryRunnerTestHelper.rowsCount,\n                                          new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                                      )\n                                  )\n                                  .build();\n\n    final Iterable<Result<TimeseriesResultValue>> results =\n        engine.process(query, new IncrementalIndexStorageAdapter(index)).toList();\n\n    List<Result<TimeseriesResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TimeseriesResultValue(\n                ImmutableMap.of(\"UV\", 3, \"rows\", 3L)\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","realPath":"extensions-contrib/distinctcount/src/test/java/org/apache/druid/query/aggregation/distinctcount/DistinctCountTimeseriesQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"},{"authorDate":"2019-07-19 04:16:28","commitOrder":3,"curCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TopNQueryEngine engine = new TopNQueryEngine(pool);\n\n    IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource)\n                          .granularity(QueryRunnerTestHelper.allGran)\n                          .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n                          .dimension(client_type)\n                          .metric(\"UV\")\n                          .threshold(10)\n                          .aggregators(\n                              QueryRunnerTestHelper.rowsCount,\n                              new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                          )\n                          .build();\n\n    final Iterable<Result<TopNResultValue>> results =\n        engine.query(query, new IncrementalIndexStorageAdapter(index), null).toList();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        client_type, \"iphone\",\n                        \"UV\", 2L,\n                        \"rows\", 2L\n                    ),\n                    ImmutableMap.of(\n                        client_type, \"android\",\n                        \"UV\", 1L,\n                        \"rows\", 1L\n                    )\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","date":"2019-07-19 04:16:28","endLine":153,"groupId":"19674","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTopNWithDistinctCountAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9d/3d32689f41f818b9ac22d8343727e0459bc047.src","preCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TopNQueryEngine engine = new TopNQueryEngine(pool);\n\n    IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource)\n                          .granularity(QueryRunnerTestHelper.allGran)\n                          .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n                          .dimension(client_type)\n                          .metric(\"UV\")\n                          .threshold(10)\n                          .aggregators(\n                              Lists.newArrayList(\n                                  QueryRunnerTestHelper.rowsCount,\n                                  new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                              )\n                          )\n                          .build();\n\n    final Iterable<Result<TopNResultValue>> results =\n        engine.query(query, new IncrementalIndexStorageAdapter(index), null).toList();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        client_type, \"iphone\",\n                        \"UV\", 2L,\n                        \"rows\", 2L\n                    ),\n                    ImmutableMap.of(\n                        client_type, \"android\",\n                        \"UV\", 1L,\n                        \"rows\", 1L\n                    )\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","realPath":"extensions-contrib/distinctcount/src/test/java/org/apache/druid/query/aggregation/distinctcount/DistinctCountTopNQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"03e55d30ebcac9ec97edb1a638a5a99886c41374","commitMessage":"@@@add CachingClusteredClient benchmark.  refactor some stuff (#8089)\n\n* add CachingClusteredClient benchmark.  refactor some stuff\n\n* revert WeightedServerSelectorStrategy to ConnectionCountServerSelectorStrategy and remove getWeight since felt artificial.  default mergeResults in toolchest implementation for topn.  search.  select\n\n* adjust javadoc\n\n* adjustments\n\n* oops\n\n* use it\n\n* use BinaryOperator.  remove CombiningFunction.  use Comparator instead of Ordering.  other review adjustments\n\n* rename createComparator to createResultComparator.  fix typo.  firstNonNull nullable parameters\n","date":"2019-07-19 04:16:28","modifiedFileCount":"50","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":4,"curCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TimeseriesQueryEngine engine = new TimeseriesQueryEngine();\n\n    IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()\n                                  .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                                  .granularity(QueryRunnerTestHelper.ALL_GRAN)\n                                  .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n                                  .aggregators(\n                                      Lists.newArrayList(\n                                          QueryRunnerTestHelper.ROWS_COUNT,\n                                          new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                                      )\n                                  )\n                                  .build();\n\n    final Iterable<Result<TimeseriesResultValue>> results =\n        engine.process(query, new IncrementalIndexStorageAdapter(index)).toList();\n\n    List<Result<TimeseriesResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TimeseriesResultValue(\n                ImmutableMap.of(\"UV\", 3, \"rows\", 3L)\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","date":"2019-08-23 18:13:54","endLine":112,"groupId":"10833","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopNWithDistinctCountAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bb/911e818b9af1520634cababa90282f8147016e.src","preCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TimeseriesQueryEngine engine = new TimeseriesQueryEngine();\n\n    IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()\n                                  .dataSource(QueryRunnerTestHelper.dataSource)\n                                  .granularity(QueryRunnerTestHelper.allGran)\n                                  .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n                                  .aggregators(\n                                      Lists.newArrayList(\n                                          QueryRunnerTestHelper.rowsCount,\n                                          new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                                      )\n                                  )\n                                  .build();\n\n    final Iterable<Result<TimeseriesResultValue>> results =\n        engine.process(query, new IncrementalIndexStorageAdapter(index)).toList();\n\n    List<Result<TimeseriesResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TimeseriesResultValue(\n                ImmutableMap.of(\"UV\", 3, \"rows\", 3L)\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","realPath":"extensions-contrib/distinctcount/src/test/java/org/apache/druid/query/aggregation/distinctcount/DistinctCountTimeseriesQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":4,"curCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TopNQueryEngine engine = new TopNQueryEngine(pool);\n\n    IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                          .granularity(QueryRunnerTestHelper.ALL_GRAN)\n                          .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n                          .dimension(client_type)\n                          .metric(\"UV\")\n                          .threshold(10)\n                          .aggregators(\n                              QueryRunnerTestHelper.ROWS_COUNT,\n                              new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                          )\n                          .build();\n\n    final Iterable<Result<TopNResultValue>> results =\n        engine.query(query, new IncrementalIndexStorageAdapter(index), null).toList();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        client_type, \"iphone\",\n                        \"UV\", 2L,\n                        \"rows\", 2L\n                    ),\n                    ImmutableMap.of(\n                        client_type, \"android\",\n                        \"UV\", 1L,\n                        \"rows\", 1L\n                    )\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","date":"2019-08-23 18:13:54","endLine":153,"groupId":"19674","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTopNWithDistinctCountAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/40/280bcf2f3010a4fd56f5aa3a78beaa215d6936.src","preCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TopNQueryEngine engine = new TopNQueryEngine(pool);\n\n    IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource)\n                          .granularity(QueryRunnerTestHelper.allGran)\n                          .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n                          .dimension(client_type)\n                          .metric(\"UV\")\n                          .threshold(10)\n                          .aggregators(\n                              QueryRunnerTestHelper.rowsCount,\n                              new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                          )\n                          .build();\n\n    final Iterable<Result<TopNResultValue>> results =\n        engine.query(query, new IncrementalIndexStorageAdapter(index), null).toList();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        client_type, \"iphone\",\n                        \"UV\", 2L,\n                        \"rows\", 2L\n                    ),\n                    ImmutableMap.of(\n                        client_type, \"android\",\n                        \"UV\", 1L,\n                        \"rows\", 1L\n                    )\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","realPath":"extensions-contrib/distinctcount/src/test/java/org/apache/druid/query/aggregation/distinctcount/DistinctCountTopNQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"},{"authorTime":"2021-01-08 14:18:47","codes":[{"authorDate":"2021-01-08 14:18:47","commitOrder":5,"curCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TimeseriesQueryEngine engine = new TimeseriesQueryEngine();\n\n    IncrementalIndex index = new OnheapIncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .build();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()\n                                  .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                                  .granularity(QueryRunnerTestHelper.ALL_GRAN)\n                                  .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n                                  .aggregators(\n                                      Lists.newArrayList(\n                                          QueryRunnerTestHelper.ROWS_COUNT,\n                                          new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                                      )\n                                  )\n                                  .build();\n\n    final Iterable<Result<TimeseriesResultValue>> results =\n        engine.process(query, new IncrementalIndexStorageAdapter(index)).toList();\n\n    List<Result<TimeseriesResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TimeseriesResultValue(\n                ImmutableMap.of(\"UV\", 3, \"rows\", 3L)\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","date":"2021-01-08 14:18:47","endLine":114,"groupId":"103916","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testTopNWithDistinctCountAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f5/53bfcd1d6384551a1879a1f4511904e9d509c2.src","preCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TimeseriesQueryEngine engine = new TimeseriesQueryEngine();\n\n    IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()\n                                  .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                                  .granularity(QueryRunnerTestHelper.ALL_GRAN)\n                                  .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n                                  .aggregators(\n                                      Lists.newArrayList(\n                                          QueryRunnerTestHelper.ROWS_COUNT,\n                                          new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                                      )\n                                  )\n                                  .build();\n\n    final Iterable<Result<TimeseriesResultValue>> results =\n        engine.process(query, new IncrementalIndexStorageAdapter(index)).toList();\n\n    List<Result<TimeseriesResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TimeseriesResultValue(\n                ImmutableMap.of(\"UV\", 3, \"rows\", 3L)\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","realPath":"extensions-contrib/distinctcount/src/test/java/org/apache/druid/query/aggregation/distinctcount/DistinctCountTimeseriesQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2021-01-08 14:18:47","commitOrder":5,"curCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TopNQueryEngine engine = new TopNQueryEngine(pool);\n\n    IncrementalIndex index = new OnheapIncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .build();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                          .granularity(QueryRunnerTestHelper.ALL_GRAN)\n                          .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n                          .dimension(client_type)\n                          .metric(\"UV\")\n                          .threshold(10)\n                          .aggregators(\n                              QueryRunnerTestHelper.ROWS_COUNT,\n                              new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                          )\n                          .build();\n\n    final Iterable<Result<TopNResultValue>> results =\n        engine.query(query, new IncrementalIndexStorageAdapter(index), null).toList();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        client_type, \"iphone\",\n                        \"UV\", 2L,\n                        \"rows\", 2L\n                    ),\n                    ImmutableMap.of(\n                        client_type, \"android\",\n                        \"UV\", 1L,\n                        \"rows\", 1L\n                    )\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","date":"2021-01-08 14:18:47","endLine":155,"groupId":"103916","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testTopNWithDistinctCountAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ef/1344c72bd0f3d61289daa6ebe0a10d9c7ffb4c.src","preCode":"  public void testTopNWithDistinctCountAgg() throws Exception\n  {\n    TopNQueryEngine engine = new TopNQueryEngine(pool);\n\n    IncrementalIndex index = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withQueryGranularity(Granularities.SECOND)\n                .withMetrics(new CountAggregatorFactory(\"cnt\"))\n                .build()\n        )\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    String visitor_id = \"visitor_id\";\n    String client_type = \"client_type\";\n    DateTime time = DateTimes.of(\"2016-03-04T00:00:00.000Z\");\n    long timestamp = time.getMillis();\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"1\", client_type, \"iphone\")\n        )\n    );\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Lists.newArrayList(visitor_id, client_type),\n            ImmutableMap.of(visitor_id, \"2\", client_type, \"android\")\n        )\n    );\n\n    TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                          .granularity(QueryRunnerTestHelper.ALL_GRAN)\n                          .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n                          .dimension(client_type)\n                          .metric(\"UV\")\n                          .threshold(10)\n                          .aggregators(\n                              QueryRunnerTestHelper.ROWS_COUNT,\n                              new DistinctCountAggregatorFactory(\"UV\", visitor_id, null)\n                          )\n                          .build();\n\n    final Iterable<Result<TopNResultValue>> results =\n        engine.query(query, new IncrementalIndexStorageAdapter(index), null).toList();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            time,\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        client_type, \"iphone\",\n                        \"UV\", 2L,\n                        \"rows\", 2L\n                    ),\n                    ImmutableMap.of(\n                        client_type, \"android\",\n                        \"UV\", 1L,\n                        \"rows\", 1L\n                    )\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, results);\n  }\n","realPath":"extensions-contrib/distinctcount/src/test/java/org/apache/druid/query/aggregation/distinctcount/DistinctCountTopNQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"08ab82f55ca856d60dfe1088c1c0393428b0bb6d","commitMessage":"@@@IncrementalIndex Tests and Benchmarks Parametrization (#10593)\n\n* Remove redundant IncrementalIndex.Builder\n\n* Parametrize incremental index tests and benchmarks\n\n- Reveal and fix a bug in OffheapIncrementalIndex\n\n* Fix forbiddenapis error: Forbidden method invocation: java.lang.String#format(java.lang.String. java.lang.Object[]) [Uses default locale]\n\n* Fix Intellij errors: declared exception is never thrown\n\n* Add documentation and validate before closing objects on tearDown.\n\n* Add documentation to OffheapIncrementalIndexTestSpec\n\n* Doc corrections and minor changes.\n\n* Add logging for generated rows.\n\n* Refactor new tests/benchmarks.\n\n* Improve IncrementalIndexCreator documentation\n\n* Add required tests for DataGenerator\n\n* Revert \"rollupOpportunity\" to be a string","date":"2021-01-08 14:18:47","modifiedFileCount":"62","status":"M","submitter":"Liran Funaro"}]
