[{"authorTime":"2021-03-05 02:39:21","codes":[{"authorDate":"2021-03-05 02:39:21","commitOrder":1,"curCode":"  public void testCorrelatedSubqueryWithCorrelatedQueryFilter(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n\n    testQuery(\n        \"select country, ANY_VALUE(\\n\"\n        + \"        select max(\\\"users\\\") from (\\n\"\n        + \"            select floor(__time to day), count(user) \\\"users\\\" from visits f where f.country = visits.country and f.city = 'A' group by 1\\n\"\n        + \"        )\\n\"\n        + \"     ) as \\\"dailyVisits\\\"\\n\"\n        + \"from visits \\n\"\n        + \" where city = 'B'\"\n        + \" group by 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(\"visits\"),\n                                new QueryDataSource(\n                                    GroupByQuery.builder()\n                                                .setDataSource(\n                                                    GroupByQuery.builder()\n                                                                .setDataSource(\"visits\")\n                                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                                .setVirtualColumns(new ExpressionVirtualColumn(\n                                                                    \"v0\",\n                                                                    \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                                    ValueType.LONG,\n                                                                    TestExprMacroTable.INSTANCE\n                                                                ))\n                                                                .setDimensions(\n                                                                    new DefaultDimensionSpec(\n                                                                        \"v0\",\n                                                                        \"d0\",\n                                                                        ValueType.LONG\n                                                                    ),\n                                                                    new DefaultDimensionSpec(\n                                                                        \"country\",\n                                                                        \"d1\"\n                                                                    )\n                                                                )\n                                                                .setAggregatorSpecs(new FilteredAggregatorFactory(\n                                                                    new CountAggregatorFactory(\"a0\"),\n                                                                    not(selector(\"user\", null, null))\n                                                                ))\n                                                                .setDimFilter(and(\n                                                                    selector(\"city\", \"A\", null),\n                                                                    not(selector(\"country\", null, null))\n                                                                ))\n                                                                .setContext(queryContext)\n                                                                .setGranularity(new AllGranularity())\n                                                                .build()\n                                                )\n                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                .setDimensions(new DefaultDimensionSpec(\"d1\", \"_d0\"))\n                                                .setAggregatorSpecs(\n                                                    new LongMaxAggregatorFactory(\"_a0\", \"a0\")\n                                                )\n                                                .setGranularity(new AllGranularity())\n                                                .setContext(queryContext)\n                                                .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"country\"),\n                                    DruidExpression.fromColumn(\"j0._d0\")\n                                ),\n                                JoinType.LEFT,\n                                selector(\"city\", \"B\", null)\n                            )\n                        )\n                        .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                        .setDimensions(new DefaultDimensionSpec(\"country\", \"d0\"))\n                        .setAggregatorSpecs(new LongAnyAggregatorFactory(\"a0\", \"j0._a0\"))\n                        .setGranularity(new AllGranularity())\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"canada\", 2L}\n        )\n    );\n  }\n","date":"2021-03-05 02:39:21","endLine":370,"groupId":"16987","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCorrelatedSubqueryWithCorrelatedQueryFilter","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/d343db2bed462e1a2ea1bd077642149b0e569a.src","preCode":"  public void testCorrelatedSubqueryWithCorrelatedQueryFilter(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n\n    testQuery(\n        \"select country, ANY_VALUE(\\n\"\n        + \"        select max(\\\"users\\\") from (\\n\"\n        + \"            select floor(__time to day), count(user) \\\"users\\\" from visits f where f.country = visits.country and f.city = 'A' group by 1\\n\"\n        + \"        )\\n\"\n        + \"     ) as \\\"dailyVisits\\\"\\n\"\n        + \"from visits \\n\"\n        + \" where city = 'B'\"\n        + \" group by 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(\"visits\"),\n                                new QueryDataSource(\n                                    GroupByQuery.builder()\n                                                .setDataSource(\n                                                    GroupByQuery.builder()\n                                                                .setDataSource(\"visits\")\n                                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                                .setVirtualColumns(new ExpressionVirtualColumn(\n                                                                    \"v0\",\n                                                                    \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                                    ValueType.LONG,\n                                                                    TestExprMacroTable.INSTANCE\n                                                                ))\n                                                                .setDimensions(\n                                                                    new DefaultDimensionSpec(\n                                                                        \"v0\",\n                                                                        \"d0\",\n                                                                        ValueType.LONG\n                                                                    ),\n                                                                    new DefaultDimensionSpec(\n                                                                        \"country\",\n                                                                        \"d1\"\n                                                                    )\n                                                                )\n                                                                .setAggregatorSpecs(new FilteredAggregatorFactory(\n                                                                    new CountAggregatorFactory(\"a0\"),\n                                                                    not(selector(\"user\", null, null))\n                                                                ))\n                                                                .setDimFilter(and(\n                                                                    selector(\"city\", \"A\", null),\n                                                                    not(selector(\"country\", null, null))\n                                                                ))\n                                                                .setContext(queryContext)\n                                                                .setGranularity(new AllGranularity())\n                                                                .build()\n                                                )\n                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                .setDimensions(new DefaultDimensionSpec(\"d1\", \"_d0\"))\n                                                .setAggregatorSpecs(\n                                                    new LongMaxAggregatorFactory(\"_a0\", \"a0\")\n                                                )\n                                                .setGranularity(new AllGranularity())\n                                                .setContext(queryContext)\n                                                .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"country\"),\n                                    DruidExpression.fromColumn(\"j0._d0\")\n                                ),\n                                JoinType.LEFT,\n                                selector(\"city\", \"B\", null)\n                            )\n                        )\n                        .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                        .setDimensions(new DefaultDimensionSpec(\"country\", \"d0\"))\n                        .setAggregatorSpecs(new LongAnyAggregatorFactory(\"a0\", \"j0._a0\"))\n                        .setGranularity(new AllGranularity())\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"canada\", 2L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteCorrelatedQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"B"},{"authorDate":"2021-03-05 02:39:21","commitOrder":1,"curCode":"  public void testCorrelatedSubqueryWithCorrelatedQueryFilter_Scan(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n\n    testQuery(\n        \"select country, ANY_VALUE(\\n\"\n        + \"        select max(\\\"users\\\") from (\\n\"\n        + \"            select floor(__time to day), count(user) \\\"users\\\" from visits f where f.country = visits.country and f.city = 'A' group by 1\\n\"\n        + \"        )\\n\"\n        + \"     ) as \\\"dailyVisits\\\"\\n\"\n        + \"from visits \\n\"\n        + \" where city = 'B'\"\n        + \" group by 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(\"visits\"),\n                                new QueryDataSource(\n                                    GroupByQuery.builder()\n                                                .setDataSource(\n                                                    GroupByQuery.builder()\n                                                                .setDataSource(\"visits\")\n                                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                                .setVirtualColumns(new ExpressionVirtualColumn(\n                                                                    \"v0\",\n                                                                    \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                                    ValueType.LONG,\n                                                                    TestExprMacroTable.INSTANCE\n                                                                ))\n                                                                .setDimensions(\n                                                                    new DefaultDimensionSpec(\n                                                                        \"v0\",\n                                                                        \"d0\",\n                                                                        ValueType.LONG\n                                                                    ),\n                                                                    new DefaultDimensionSpec(\n                                                                        \"country\",\n                                                                        \"d1\"\n                                                                    )\n                                                                )\n                                                                .setAggregatorSpecs(new FilteredAggregatorFactory(\n                                                                    new CountAggregatorFactory(\"a0\"),\n                                                                    not(selector(\"user\", null, null))\n                                                                ))\n                                                                .setDimFilter(and(\n                                                                    selector(\"city\", \"A\", null),\n                                                                    not(selector(\"country\", null, null))\n                                                                ))\n                                                                .setContext(queryContext)\n                                                                .setGranularity(new AllGranularity())\n                                                                .build()\n                                                )\n                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                .setDimensions(new DefaultDimensionSpec(\"d1\", \"_d0\"))\n                                                .setAggregatorSpecs(\n                                                    new LongMaxAggregatorFactory(\"_a0\", \"a0\")\n                                                )\n                                                .setGranularity(new AllGranularity())\n                                                .setContext(queryContext)\n                                                .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"country\"),\n                                    DruidExpression.fromColumn(\"j0._d0\")\n                                ),\n                                JoinType.LEFT,\n                                selector(\"city\", \"B\", null)\n                            )\n                        )\n                        .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                        .setDimensions(new DefaultDimensionSpec(\"country\", \"d0\"))\n                        .setAggregatorSpecs(new LongAnyAggregatorFactory(\"a0\", \"j0._a0\"))\n                        .setGranularity(new AllGranularity())\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"canada\", 2L}\n        )\n    );\n  }\n","date":"2021-03-05 02:39:21","endLine":457,"groupId":"16987","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorrelatedSubqueryWithCorrelatedQueryFilter_Scan","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/d343db2bed462e1a2ea1bd077642149b0e569a.src","preCode":"  public void testCorrelatedSubqueryWithCorrelatedQueryFilter_Scan(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n\n    testQuery(\n        \"select country, ANY_VALUE(\\n\"\n        + \"        select max(\\\"users\\\") from (\\n\"\n        + \"            select floor(__time to day), count(user) \\\"users\\\" from visits f where f.country = visits.country and f.city = 'A' group by 1\\n\"\n        + \"        )\\n\"\n        + \"     ) as \\\"dailyVisits\\\"\\n\"\n        + \"from visits \\n\"\n        + \" where city = 'B'\"\n        + \" group by 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(\"visits\"),\n                                new QueryDataSource(\n                                    GroupByQuery.builder()\n                                                .setDataSource(\n                                                    GroupByQuery.builder()\n                                                                .setDataSource(\"visits\")\n                                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                                .setVirtualColumns(new ExpressionVirtualColumn(\n                                                                    \"v0\",\n                                                                    \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                                    ValueType.LONG,\n                                                                    TestExprMacroTable.INSTANCE\n                                                                ))\n                                                                .setDimensions(\n                                                                    new DefaultDimensionSpec(\n                                                                        \"v0\",\n                                                                        \"d0\",\n                                                                        ValueType.LONG\n                                                                    ),\n                                                                    new DefaultDimensionSpec(\n                                                                        \"country\",\n                                                                        \"d1\"\n                                                                    )\n                                                                )\n                                                                .setAggregatorSpecs(new FilteredAggregatorFactory(\n                                                                    new CountAggregatorFactory(\"a0\"),\n                                                                    not(selector(\"user\", null, null))\n                                                                ))\n                                                                .setDimFilter(and(\n                                                                    selector(\"city\", \"A\", null),\n                                                                    not(selector(\"country\", null, null))\n                                                                ))\n                                                                .setContext(queryContext)\n                                                                .setGranularity(new AllGranularity())\n                                                                .build()\n                                                )\n                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                .setDimensions(new DefaultDimensionSpec(\"d1\", \"_d0\"))\n                                                .setAggregatorSpecs(\n                                                    new LongMaxAggregatorFactory(\"_a0\", \"a0\")\n                                                )\n                                                .setGranularity(new AllGranularity())\n                                                .setContext(queryContext)\n                                                .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"country\"),\n                                    DruidExpression.fromColumn(\"j0._d0\")\n                                ),\n                                JoinType.LEFT,\n                                selector(\"city\", \"B\", null)\n                            )\n                        )\n                        .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                        .setDimensions(new DefaultDimensionSpec(\"country\", \"d0\"))\n                        .setAggregatorSpecs(new LongAnyAggregatorFactory(\"a0\", \"j0._a0\"))\n                        .setGranularity(new AllGranularity())\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"canada\", 2L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteCorrelatedQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":374,"status":"B"}],"commitId":"1a15987432fab044fc83a99af8ab497d887aeda1","commitMessage":"@@@Supporting filters in the left base table for join datasources (#10697)\n\n* where filter left first draft\n\n* Revert changes in calcite test\n\n* Refactor a bit\n\n* Fixing the Tests\n\n* Changes\n\n* Adding tests\n\n* Add tests for correlated queries\n\n* Add comment\n\n* Fix typos","date":"2021-03-05 02:39:21","modifiedFileCount":"26","status":"B","submitter":"Abhishek Agarwal"},{"authorTime":"2021-03-10 05:07:34","codes":[{"authorDate":"2021-03-10 05:07:34","commitOrder":2,"curCode":"  public void testCorrelatedSubqueryWithCorrelatedQueryFilter(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n    queryContext = withLeftDirectAccessEnabled(queryContext);\n\n    testQuery(\n        \"select country, ANY_VALUE(\\n\"\n        + \"        select max(\\\"users\\\") from (\\n\"\n        + \"            select floor(__time to day), count(user) \\\"users\\\" from visits f where f.country = visits.country and f.city = 'A' group by 1\\n\"\n        + \"        )\\n\"\n        + \"     ) as \\\"dailyVisits\\\"\\n\"\n        + \"from visits \\n\"\n        + \" where city = 'B'\"\n        + \" group by 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(\"visits\"),\n                                new QueryDataSource(\n                                    GroupByQuery.builder()\n                                                .setDataSource(\n                                                    GroupByQuery.builder()\n                                                                .setDataSource(\"visits\")\n                                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                                .setVirtualColumns(new ExpressionVirtualColumn(\n                                                                    \"v0\",\n                                                                    \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                                    ValueType.LONG,\n                                                                    TestExprMacroTable.INSTANCE\n                                                                ))\n                                                                .setDimensions(\n                                                                    new DefaultDimensionSpec(\n                                                                        \"v0\",\n                                                                        \"d0\",\n                                                                        ValueType.LONG\n                                                                    ),\n                                                                    new DefaultDimensionSpec(\n                                                                        \"country\",\n                                                                        \"d1\"\n                                                                    )\n                                                                )\n                                                                .setAggregatorSpecs(new FilteredAggregatorFactory(\n                                                                    new CountAggregatorFactory(\"a0\"),\n                                                                    not(selector(\"user\", null, null))\n                                                                ))\n                                                                .setDimFilter(and(\n                                                                    selector(\"city\", \"A\", null),\n                                                                    not(selector(\"country\", null, null))\n                                                                ))\n                                                                .setContext(queryContext)\n                                                                .setGranularity(new AllGranularity())\n                                                                .build()\n                                                )\n                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                .setDimensions(new DefaultDimensionSpec(\"d1\", \"_d0\"))\n                                                .setAggregatorSpecs(\n                                                    new LongMaxAggregatorFactory(\"_a0\", \"a0\")\n                                                )\n                                                .setGranularity(new AllGranularity())\n                                                .setContext(queryContext)\n                                                .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"country\"),\n                                    DruidExpression.fromColumn(\"j0._d0\")\n                                ),\n                                JoinType.LEFT,\n                                selector(\"city\", \"B\", null)\n                            )\n                        )\n                        .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                        .setDimensions(new DefaultDimensionSpec(\"country\", \"d0\"))\n                        .setAggregatorSpecs(new LongAnyAggregatorFactory(\"a0\", \"j0._a0\"))\n                        .setGranularity(new AllGranularity())\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"canada\", 2L}\n        )\n    );\n  }\n","date":"2021-03-10 05:07:34","endLine":458,"groupId":"16987","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCorrelatedSubqueryWithCorrelatedQueryFilter","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3a/125d50eb878da9990f7394edc5e32fbf69a281.src","preCode":"  public void testCorrelatedSubqueryWithCorrelatedQueryFilter(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n\n    testQuery(\n        \"select country, ANY_VALUE(\\n\"\n        + \"        select max(\\\"users\\\") from (\\n\"\n        + \"            select floor(__time to day), count(user) \\\"users\\\" from visits f where f.country = visits.country and f.city = 'A' group by 1\\n\"\n        + \"        )\\n\"\n        + \"     ) as \\\"dailyVisits\\\"\\n\"\n        + \"from visits \\n\"\n        + \" where city = 'B'\"\n        + \" group by 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(\"visits\"),\n                                new QueryDataSource(\n                                    GroupByQuery.builder()\n                                                .setDataSource(\n                                                    GroupByQuery.builder()\n                                                                .setDataSource(\"visits\")\n                                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                                .setVirtualColumns(new ExpressionVirtualColumn(\n                                                                    \"v0\",\n                                                                    \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                                    ValueType.LONG,\n                                                                    TestExprMacroTable.INSTANCE\n                                                                ))\n                                                                .setDimensions(\n                                                                    new DefaultDimensionSpec(\n                                                                        \"v0\",\n                                                                        \"d0\",\n                                                                        ValueType.LONG\n                                                                    ),\n                                                                    new DefaultDimensionSpec(\n                                                                        \"country\",\n                                                                        \"d1\"\n                                                                    )\n                                                                )\n                                                                .setAggregatorSpecs(new FilteredAggregatorFactory(\n                                                                    new CountAggregatorFactory(\"a0\"),\n                                                                    not(selector(\"user\", null, null))\n                                                                ))\n                                                                .setDimFilter(and(\n                                                                    selector(\"city\", \"A\", null),\n                                                                    not(selector(\"country\", null, null))\n                                                                ))\n                                                                .setContext(queryContext)\n                                                                .setGranularity(new AllGranularity())\n                                                                .build()\n                                                )\n                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                .setDimensions(new DefaultDimensionSpec(\"d1\", \"_d0\"))\n                                                .setAggregatorSpecs(\n                                                    new LongMaxAggregatorFactory(\"_a0\", \"a0\")\n                                                )\n                                                .setGranularity(new AllGranularity())\n                                                .setContext(queryContext)\n                                                .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"country\"),\n                                    DruidExpression.fromColumn(\"j0._d0\")\n                                ),\n                                JoinType.LEFT,\n                                selector(\"city\", \"B\", null)\n                            )\n                        )\n                        .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                        .setDimensions(new DefaultDimensionSpec(\"country\", \"d0\"))\n                        .setAggregatorSpecs(new LongAnyAggregatorFactory(\"a0\", \"j0._a0\"))\n                        .setGranularity(new AllGranularity())\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"canada\", 2L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteCorrelatedQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":374,"status":"M"},{"authorDate":"2021-03-10 05:07:34","commitOrder":2,"curCode":"  public void testCorrelatedSubqueryWithCorrelatedQueryFilter_Scan(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n    queryContext = withLeftDirectAccessEnabled(queryContext);\n    testQuery(\n        \"select country, ANY_VALUE(\\n\"\n        + \"        select max(\\\"users\\\") from (\\n\"\n        + \"            select floor(__time to day), count(user) \\\"users\\\" from visits f where f.country = visits.country and f.city = 'A' group by 1\\n\"\n        + \"        )\\n\"\n        + \"     ) as \\\"dailyVisits\\\"\\n\"\n        + \"from visits \\n\"\n        + \" where city = 'B'\"\n        + \" group by 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(\"visits\"),\n                                new QueryDataSource(\n                                    GroupByQuery.builder()\n                                                .setDataSource(\n                                                    GroupByQuery.builder()\n                                                                .setDataSource(\"visits\")\n                                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                                .setVirtualColumns(new ExpressionVirtualColumn(\n                                                                    \"v0\",\n                                                                    \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                                    ValueType.LONG,\n                                                                    TestExprMacroTable.INSTANCE\n                                                                ))\n                                                                .setDimensions(\n                                                                    new DefaultDimensionSpec(\n                                                                        \"v0\",\n                                                                        \"d0\",\n                                                                        ValueType.LONG\n                                                                    ),\n                                                                    new DefaultDimensionSpec(\n                                                                        \"country\",\n                                                                        \"d1\"\n                                                                    )\n                                                                )\n                                                                .setAggregatorSpecs(new FilteredAggregatorFactory(\n                                                                    new CountAggregatorFactory(\"a0\"),\n                                                                    not(selector(\"user\", null, null))\n                                                                ))\n                                                                .setDimFilter(and(\n                                                                    selector(\"city\", \"A\", null),\n                                                                    not(selector(\"country\", null, null))\n                                                                ))\n                                                                .setContext(queryContext)\n                                                                .setGranularity(new AllGranularity())\n                                                                .build()\n                                                )\n                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                .setDimensions(new DefaultDimensionSpec(\"d1\", \"_d0\"))\n                                                .setAggregatorSpecs(\n                                                    new LongMaxAggregatorFactory(\"_a0\", \"a0\")\n                                                )\n                                                .setGranularity(new AllGranularity())\n                                                .setContext(queryContext)\n                                                .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"country\"),\n                                    DruidExpression.fromColumn(\"j0._d0\")\n                                ),\n                                JoinType.LEFT,\n                                selector(\"city\", \"B\", null)\n                            )\n                        )\n                        .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                        .setDimensions(new DefaultDimensionSpec(\"country\", \"d0\"))\n                        .setAggregatorSpecs(new LongAnyAggregatorFactory(\"a0\", \"j0._a0\"))\n                        .setGranularity(new AllGranularity())\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"canada\", 2L}\n        )\n    );\n  }\n","date":"2021-03-10 05:07:34","endLine":545,"groupId":"16987","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorrelatedSubqueryWithCorrelatedQueryFilter_Scan","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3a/125d50eb878da9990f7394edc5e32fbf69a281.src","preCode":"  public void testCorrelatedSubqueryWithCorrelatedQueryFilter_Scan(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n\n    testQuery(\n        \"select country, ANY_VALUE(\\n\"\n        + \"        select max(\\\"users\\\") from (\\n\"\n        + \"            select floor(__time to day), count(user) \\\"users\\\" from visits f where f.country = visits.country and f.city = 'A' group by 1\\n\"\n        + \"        )\\n\"\n        + \"     ) as \\\"dailyVisits\\\"\\n\"\n        + \"from visits \\n\"\n        + \" where city = 'B'\"\n        + \" group by 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(\"visits\"),\n                                new QueryDataSource(\n                                    GroupByQuery.builder()\n                                                .setDataSource(\n                                                    GroupByQuery.builder()\n                                                                .setDataSource(\"visits\")\n                                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                                .setVirtualColumns(new ExpressionVirtualColumn(\n                                                                    \"v0\",\n                                                                    \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                                    ValueType.LONG,\n                                                                    TestExprMacroTable.INSTANCE\n                                                                ))\n                                                                .setDimensions(\n                                                                    new DefaultDimensionSpec(\n                                                                        \"v0\",\n                                                                        \"d0\",\n                                                                        ValueType.LONG\n                                                                    ),\n                                                                    new DefaultDimensionSpec(\n                                                                        \"country\",\n                                                                        \"d1\"\n                                                                    )\n                                                                )\n                                                                .setAggregatorSpecs(new FilteredAggregatorFactory(\n                                                                    new CountAggregatorFactory(\"a0\"),\n                                                                    not(selector(\"user\", null, null))\n                                                                ))\n                                                                .setDimFilter(and(\n                                                                    selector(\"city\", \"A\", null),\n                                                                    not(selector(\"country\", null, null))\n                                                                ))\n                                                                .setContext(queryContext)\n                                                                .setGranularity(new AllGranularity())\n                                                                .build()\n                                                )\n                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                .setDimensions(new DefaultDimensionSpec(\"d1\", \"_d0\"))\n                                                .setAggregatorSpecs(\n                                                    new LongMaxAggregatorFactory(\"_a0\", \"a0\")\n                                                )\n                                                .setGranularity(new AllGranularity())\n                                                .setContext(queryContext)\n                                                .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"country\"),\n                                    DruidExpression.fromColumn(\"j0._d0\")\n                                ),\n                                JoinType.LEFT,\n                                selector(\"city\", \"B\", null)\n                            )\n                        )\n                        .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                        .setDimensions(new DefaultDimensionSpec(\"country\", \"d0\"))\n                        .setAggregatorSpecs(new LongAnyAggregatorFactory(\"a0\", \"j0._a0\"))\n                        .setGranularity(new AllGranularity())\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"canada\", 2L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteCorrelatedQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":462,"status":"M"}],"commitId":"c66951a59e2963369bbb447dba51ea7651a1cdb1","commitMessage":"@@@Add flag in SQL to disable left base filter optimization for joins (#10947)\n\n* Add flag to disable left base filter\n\n* code coverage\n\n* Draft\n\n* Review comments\n\n* code coverage\n\n* add docs\n\n* Add old tests","date":"2021-03-10 05:07:34","modifiedFileCount":"13","status":"M","submitter":"Abhishek Agarwal"},{"authorTime":"2021-04-07 15:52:19","codes":[{"authorDate":"2021-04-07 15:52:19","commitOrder":3,"curCode":"  public void testCorrelatedSubqueryWithCorrelatedQueryFilter(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n    queryContext = withLeftDirectAccessEnabled(queryContext);\n\n    testQuery(\n        \"select country, ANY_VALUE(\\n\"\n        + \"        select max(\\\"users\\\") from (\\n\"\n        + \"            select floor(__time to day), count(user) \\\"users\\\" from visits f where f.country = visits.country and f.city = 'A' group by 1\\n\"\n        + \"        )\\n\"\n        + \"     ) as \\\"dailyVisits\\\"\\n\"\n        + \"from visits \\n\"\n        + \" where city = 'B'\"\n        + \" group by 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(CalciteTests.USERVISITDATASOURCE),\n                                new QueryDataSource(\n                                    GroupByQuery.builder()\n                                                .setDataSource(\n                                                    GroupByQuery.builder()\n                                                                .setDataSource(CalciteTests.USERVISITDATASOURCE)\n                                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                                .setVirtualColumns(new ExpressionVirtualColumn(\n                                                                    \"v0\",\n                                                                    \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                                    ValueType.LONG,\n                                                                    TestExprMacroTable.INSTANCE\n                                                                ))\n                                                                .setDimensions(\n                                                                    new DefaultDimensionSpec(\n                                                                        \"v0\",\n                                                                        \"d0\",\n                                                                        ValueType.LONG\n                                                                    ),\n                                                                    new DefaultDimensionSpec(\n                                                                        \"country\",\n                                                                        \"d1\"\n                                                                    )\n                                                                )\n                                                                .setAggregatorSpecs(new FilteredAggregatorFactory(\n                                                                    new CountAggregatorFactory(\"a0\"),\n                                                                    not(selector(\"user\", null, null))\n                                                                ))\n                                                                .setDimFilter(and(\n                                                                    selector(\"city\", \"A\", null),\n                                                                    not(selector(\"country\", null, null))\n                                                                ))\n                                                                .setContext(queryContext)\n                                                                .setGranularity(new AllGranularity())\n                                                                .build()\n                                                )\n                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                .setDimensions(new DefaultDimensionSpec(\"d1\", \"_d0\"))\n                                                .setAggregatorSpecs(\n                                                    new LongMaxAggregatorFactory(\"_a0\", \"a0\")\n                                                )\n                                                .setGranularity(new AllGranularity())\n                                                .setContext(queryContext)\n                                                .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"country\"),\n                                    DruidExpression.fromColumn(\"j0._d0\")\n                                ),\n                                JoinType.LEFT,\n                                selector(\"city\", \"B\", null)\n                            )\n                        )\n                        .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                        .setDimensions(new DefaultDimensionSpec(\"country\", \"d0\"))\n                        .setAggregatorSpecs(new LongAnyAggregatorFactory(\"a0\", \"j0._a0\"))\n                        .setGranularity(new AllGranularity())\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"canada\", 2L}\n        )\n    );\n  }\n","date":"2021-04-07 15:52:19","endLine":417,"groupId":"16987","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCorrelatedSubqueryWithCorrelatedQueryFilter","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/46/c39915ff955d77152dae030887c3a10f4a9be0.src","preCode":"  public void testCorrelatedSubqueryWithCorrelatedQueryFilter(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n    queryContext = withLeftDirectAccessEnabled(queryContext);\n\n    testQuery(\n        \"select country, ANY_VALUE(\\n\"\n        + \"        select max(\\\"users\\\") from (\\n\"\n        + \"            select floor(__time to day), count(user) \\\"users\\\" from visits f where f.country = visits.country and f.city = 'A' group by 1\\n\"\n        + \"        )\\n\"\n        + \"     ) as \\\"dailyVisits\\\"\\n\"\n        + \"from visits \\n\"\n        + \" where city = 'B'\"\n        + \" group by 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(\"visits\"),\n                                new QueryDataSource(\n                                    GroupByQuery.builder()\n                                                .setDataSource(\n                                                    GroupByQuery.builder()\n                                                                .setDataSource(\"visits\")\n                                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                                .setVirtualColumns(new ExpressionVirtualColumn(\n                                                                    \"v0\",\n                                                                    \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                                    ValueType.LONG,\n                                                                    TestExprMacroTable.INSTANCE\n                                                                ))\n                                                                .setDimensions(\n                                                                    new DefaultDimensionSpec(\n                                                                        \"v0\",\n                                                                        \"d0\",\n                                                                        ValueType.LONG\n                                                                    ),\n                                                                    new DefaultDimensionSpec(\n                                                                        \"country\",\n                                                                        \"d1\"\n                                                                    )\n                                                                )\n                                                                .setAggregatorSpecs(new FilteredAggregatorFactory(\n                                                                    new CountAggregatorFactory(\"a0\"),\n                                                                    not(selector(\"user\", null, null))\n                                                                ))\n                                                                .setDimFilter(and(\n                                                                    selector(\"city\", \"A\", null),\n                                                                    not(selector(\"country\", null, null))\n                                                                ))\n                                                                .setContext(queryContext)\n                                                                .setGranularity(new AllGranularity())\n                                                                .build()\n                                                )\n                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                .setDimensions(new DefaultDimensionSpec(\"d1\", \"_d0\"))\n                                                .setAggregatorSpecs(\n                                                    new LongMaxAggregatorFactory(\"_a0\", \"a0\")\n                                                )\n                                                .setGranularity(new AllGranularity())\n                                                .setContext(queryContext)\n                                                .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"country\"),\n                                    DruidExpression.fromColumn(\"j0._d0\")\n                                ),\n                                JoinType.LEFT,\n                                selector(\"city\", \"B\", null)\n                            )\n                        )\n                        .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                        .setDimensions(new DefaultDimensionSpec(\"country\", \"d0\"))\n                        .setAggregatorSpecs(new LongAnyAggregatorFactory(\"a0\", \"j0._a0\"))\n                        .setGranularity(new AllGranularity())\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"canada\", 2L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteCorrelatedQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"},{"authorDate":"2021-04-07 15:52:19","commitOrder":3,"curCode":"  public void testCorrelatedSubqueryWithCorrelatedQueryFilter_Scan(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n    queryContext = withLeftDirectAccessEnabled(queryContext);\n    testQuery(\n        \"select country, ANY_VALUE(\\n\"\n        + \"        select max(\\\"users\\\") from (\\n\"\n        + \"            select floor(__time to day), count(user) \\\"users\\\" from visits f where f.country = visits.country and f.city = 'A' group by 1\\n\"\n        + \"        )\\n\"\n        + \"     ) as \\\"dailyVisits\\\"\\n\"\n        + \"from visits \\n\"\n        + \" where city = 'B'\"\n        + \" group by 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(CalciteTests.USERVISITDATASOURCE),\n                                new QueryDataSource(\n                                    GroupByQuery.builder()\n                                                .setDataSource(\n                                                    GroupByQuery.builder()\n                                                                .setDataSource(CalciteTests.USERVISITDATASOURCE)\n                                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                                .setVirtualColumns(new ExpressionVirtualColumn(\n                                                                    \"v0\",\n                                                                    \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                                    ValueType.LONG,\n                                                                    TestExprMacroTable.INSTANCE\n                                                                ))\n                                                                .setDimensions(\n                                                                    new DefaultDimensionSpec(\n                                                                        \"v0\",\n                                                                        \"d0\",\n                                                                        ValueType.LONG\n                                                                    ),\n                                                                    new DefaultDimensionSpec(\n                                                                        \"country\",\n                                                                        \"d1\"\n                                                                    )\n                                                                )\n                                                                .setAggregatorSpecs(new FilteredAggregatorFactory(\n                                                                    new CountAggregatorFactory(\"a0\"),\n                                                                    not(selector(\"user\", null, null))\n                                                                ))\n                                                                .setDimFilter(and(\n                                                                    selector(\"city\", \"A\", null),\n                                                                    not(selector(\"country\", null, null))\n                                                                ))\n                                                                .setContext(queryContext)\n                                                                .setGranularity(new AllGranularity())\n                                                                .build()\n                                                )\n                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                .setDimensions(new DefaultDimensionSpec(\"d1\", \"_d0\"))\n                                                .setAggregatorSpecs(\n                                                    new LongMaxAggregatorFactory(\"_a0\", \"a0\")\n                                                )\n                                                .setGranularity(new AllGranularity())\n                                                .setContext(queryContext)\n                                                .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"country\"),\n                                    DruidExpression.fromColumn(\"j0._d0\")\n                                ),\n                                JoinType.LEFT,\n                                selector(\"city\", \"B\", null)\n                            )\n                        )\n                        .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                        .setDimensions(new DefaultDimensionSpec(\"country\", \"d0\"))\n                        .setAggregatorSpecs(new LongAnyAggregatorFactory(\"a0\", \"j0._a0\"))\n                        .setGranularity(new AllGranularity())\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"canada\", 2L}\n        )\n    );\n  }\n","date":"2021-04-07 15:52:19","endLine":504,"groupId":"16987","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorrelatedSubqueryWithCorrelatedQueryFilter_Scan","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/46/c39915ff955d77152dae030887c3a10f4a9be0.src","preCode":"  public void testCorrelatedSubqueryWithCorrelatedQueryFilter_Scan(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n    queryContext = withLeftDirectAccessEnabled(queryContext);\n    testQuery(\n        \"select country, ANY_VALUE(\\n\"\n        + \"        select max(\\\"users\\\") from (\\n\"\n        + \"            select floor(__time to day), count(user) \\\"users\\\" from visits f where f.country = visits.country and f.city = 'A' group by 1\\n\"\n        + \"        )\\n\"\n        + \"     ) as \\\"dailyVisits\\\"\\n\"\n        + \"from visits \\n\"\n        + \" where city = 'B'\"\n        + \" group by 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(\"visits\"),\n                                new QueryDataSource(\n                                    GroupByQuery.builder()\n                                                .setDataSource(\n                                                    GroupByQuery.builder()\n                                                                .setDataSource(\"visits\")\n                                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                                .setVirtualColumns(new ExpressionVirtualColumn(\n                                                                    \"v0\",\n                                                                    \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                                    ValueType.LONG,\n                                                                    TestExprMacroTable.INSTANCE\n                                                                ))\n                                                                .setDimensions(\n                                                                    new DefaultDimensionSpec(\n                                                                        \"v0\",\n                                                                        \"d0\",\n                                                                        ValueType.LONG\n                                                                    ),\n                                                                    new DefaultDimensionSpec(\n                                                                        \"country\",\n                                                                        \"d1\"\n                                                                    )\n                                                                )\n                                                                .setAggregatorSpecs(new FilteredAggregatorFactory(\n                                                                    new CountAggregatorFactory(\"a0\"),\n                                                                    not(selector(\"user\", null, null))\n                                                                ))\n                                                                .setDimFilter(and(\n                                                                    selector(\"city\", \"A\", null),\n                                                                    not(selector(\"country\", null, null))\n                                                                ))\n                                                                .setContext(queryContext)\n                                                                .setGranularity(new AllGranularity())\n                                                                .build()\n                                                )\n                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                .setDimensions(new DefaultDimensionSpec(\"d1\", \"_d0\"))\n                                                .setAggregatorSpecs(\n                                                    new LongMaxAggregatorFactory(\"_a0\", \"a0\")\n                                                )\n                                                .setGranularity(new AllGranularity())\n                                                .setContext(queryContext)\n                                                .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"country\"),\n                                    DruidExpression.fromColumn(\"j0._d0\")\n                                ),\n                                JoinType.LEFT,\n                                selector(\"city\", \"B\", null)\n                            )\n                        )\n                        .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                        .setDimensions(new DefaultDimensionSpec(\"country\", \"d0\"))\n                        .setAggregatorSpecs(new LongAnyAggregatorFactory(\"a0\", \"j0._a0\"))\n                        .setGranularity(new AllGranularity())\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"canada\", 2L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteCorrelatedQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"}],"commitId":"0df0bff44b0bbf3b6655bb0cffc384f58e69ac1f","commitMessage":"@@@Enable multiple distinct aggregators in same query (#11014)\n\n* Enable multiple distinct count\n\n* Add more tests\n\n* fix sql test\n\n* docs fix\n\n* Address nits","date":"2021-04-07 15:52:19","modifiedFileCount":"11","status":"M","submitter":"Abhishek Agarwal"},{"authorTime":"2021-07-12 01:22:47","codes":[{"authorDate":"2021-07-12 01:22:47","commitOrder":4,"curCode":"  public void testCorrelatedSubqueryWithCorrelatedQueryFilter(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n    queryContext = withLeftDirectAccessEnabled(queryContext);\n\n    testQuery(\n        \"select country, ANY_VALUE(\\n\"\n        + \"        select max(\\\"users\\\") from (\\n\"\n        + \"            select floor(__time to day), count(user) \\\"users\\\" from visits f where f.country = visits.country and f.city = 'A' group by 1\\n\"\n        + \"        )\\n\"\n        + \"     ) as \\\"dailyVisits\\\"\\n\"\n        + \"from visits \\n\"\n        + \" where city = 'B'\"\n        + \" group by 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(CalciteTests.USERVISITDATASOURCE),\n                                new QueryDataSource(\n                                    GroupByQuery.builder()\n                                                .setDataSource(\n                                                    GroupByQuery.builder()\n                                                                .setDataSource(CalciteTests.USERVISITDATASOURCE)\n                                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                                .setVirtualColumns(new ExpressionVirtualColumn(\n                                                                    \"v0\",\n                                                                    \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                                    ValueType.LONG,\n                                                                    TestExprMacroTable.INSTANCE\n                                                                ))\n                                                                .setDimensions(\n                                                                    new DefaultDimensionSpec(\n                                                                        \"v0\",\n                                                                        \"d0\",\n                                                                        ValueType.LONG\n                                                                    ),\n                                                                    new DefaultDimensionSpec(\n                                                                        \"country\",\n                                                                        \"d1\"\n                                                                    )\n                                                                )\n                                                                .setAggregatorSpecs(new FilteredAggregatorFactory(\n                                                                    new CountAggregatorFactory(\"a0\"),\n                                                                    not(selector(\"user\", null, null))\n                                                                ))\n                                                                .setDimFilter(and(\n                                                                    selector(\"city\", \"A\", null),\n                                                                    not(selector(\"country\", null, null))\n                                                                ))\n                                                                .setContext(\n                                                                    withTimestampResultContext(\n                                                                        queryContext,\n                                                                        \"d0\",\n                                                                        Granularities.DAY\n                                                                    )\n                                                                )\n                                                                .setGranularity(new AllGranularity())\n                                                                .build()\n                                                )\n                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                .setDimensions(new DefaultDimensionSpec(\"d1\", \"_d0\"))\n                                                .setAggregatorSpecs(\n                                                    new LongMaxAggregatorFactory(\"_a0\", \"a0\")\n                                                )\n                                                .setGranularity(new AllGranularity())\n                                                .setContext(queryContext)\n                                                .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"country\"),\n                                    DruidExpression.fromColumn(\"j0._d0\")\n                                ),\n                                JoinType.LEFT,\n                                selector(\"city\", \"B\", null)\n                            )\n                        )\n                        .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                        .setDimensions(new DefaultDimensionSpec(\"country\", \"d0\"))\n                        .setAggregatorSpecs(new LongAnyAggregatorFactory(\"a0\", \"j0._a0\"))\n                        .setGranularity(new AllGranularity())\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"canada\", 2L}\n        )\n    );\n  }\n","date":"2021-07-12 01:22:47","endLine":444,"groupId":"102046","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testCorrelatedSubqueryWithCorrelatedQueryFilter","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6d/4bf1bc4594c9400fa8b60246d87dc9e7990377.src","preCode":"  public void testCorrelatedSubqueryWithCorrelatedQueryFilter(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n    queryContext = withLeftDirectAccessEnabled(queryContext);\n\n    testQuery(\n        \"select country, ANY_VALUE(\\n\"\n        + \"        select max(\\\"users\\\") from (\\n\"\n        + \"            select floor(__time to day), count(user) \\\"users\\\" from visits f where f.country = visits.country and f.city = 'A' group by 1\\n\"\n        + \"        )\\n\"\n        + \"     ) as \\\"dailyVisits\\\"\\n\"\n        + \"from visits \\n\"\n        + \" where city = 'B'\"\n        + \" group by 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(CalciteTests.USERVISITDATASOURCE),\n                                new QueryDataSource(\n                                    GroupByQuery.builder()\n                                                .setDataSource(\n                                                    GroupByQuery.builder()\n                                                                .setDataSource(CalciteTests.USERVISITDATASOURCE)\n                                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                                .setVirtualColumns(new ExpressionVirtualColumn(\n                                                                    \"v0\",\n                                                                    \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                                    ValueType.LONG,\n                                                                    TestExprMacroTable.INSTANCE\n                                                                ))\n                                                                .setDimensions(\n                                                                    new DefaultDimensionSpec(\n                                                                        \"v0\",\n                                                                        \"d0\",\n                                                                        ValueType.LONG\n                                                                    ),\n                                                                    new DefaultDimensionSpec(\n                                                                        \"country\",\n                                                                        \"d1\"\n                                                                    )\n                                                                )\n                                                                .setAggregatorSpecs(new FilteredAggregatorFactory(\n                                                                    new CountAggregatorFactory(\"a0\"),\n                                                                    not(selector(\"user\", null, null))\n                                                                ))\n                                                                .setDimFilter(and(\n                                                                    selector(\"city\", \"A\", null),\n                                                                    not(selector(\"country\", null, null))\n                                                                ))\n                                                                .setContext(queryContext)\n                                                                .setGranularity(new AllGranularity())\n                                                                .build()\n                                                )\n                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                .setDimensions(new DefaultDimensionSpec(\"d1\", \"_d0\"))\n                                                .setAggregatorSpecs(\n                                                    new LongMaxAggregatorFactory(\"_a0\", \"a0\")\n                                                )\n                                                .setGranularity(new AllGranularity())\n                                                .setContext(queryContext)\n                                                .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"country\"),\n                                    DruidExpression.fromColumn(\"j0._d0\")\n                                ),\n                                JoinType.LEFT,\n                                selector(\"city\", \"B\", null)\n                            )\n                        )\n                        .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                        .setDimensions(new DefaultDimensionSpec(\"country\", \"d0\"))\n                        .setAggregatorSpecs(new LongAnyAggregatorFactory(\"a0\", \"j0._a0\"))\n                        .setGranularity(new AllGranularity())\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"canada\", 2L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteCorrelatedQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"},{"authorDate":"2021-07-12 01:22:47","commitOrder":4,"curCode":"  public void testCorrelatedSubqueryWithCorrelatedQueryFilter_Scan(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n    queryContext = withLeftDirectAccessEnabled(queryContext);\n    testQuery(\n        \"select country, ANY_VALUE(\\n\"\n        + \"        select max(\\\"users\\\") from (\\n\"\n        + \"            select floor(__time to day), count(user) \\\"users\\\" from visits f where f.country = visits.country and f.city = 'A' group by 1\\n\"\n        + \"        )\\n\"\n        + \"     ) as \\\"dailyVisits\\\"\\n\"\n        + \"from visits \\n\"\n        + \" where city = 'B'\"\n        + \" group by 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(CalciteTests.USERVISITDATASOURCE),\n                                new QueryDataSource(\n                                    GroupByQuery.builder()\n                                                .setDataSource(\n                                                    GroupByQuery.builder()\n                                                                .setDataSource(CalciteTests.USERVISITDATASOURCE)\n                                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                                .setVirtualColumns(new ExpressionVirtualColumn(\n                                                                    \"v0\",\n                                                                    \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                                    ValueType.LONG,\n                                                                    TestExprMacroTable.INSTANCE\n                                                                ))\n                                                                .setDimensions(\n                                                                    new DefaultDimensionSpec(\n                                                                        \"v0\",\n                                                                        \"d0\",\n                                                                        ValueType.LONG\n                                                                    ),\n                                                                    new DefaultDimensionSpec(\n                                                                        \"country\",\n                                                                        \"d1\"\n                                                                    )\n                                                                )\n                                                                .setAggregatorSpecs(new FilteredAggregatorFactory(\n                                                                    new CountAggregatorFactory(\"a0\"),\n                                                                    not(selector(\"user\", null, null))\n                                                                ))\n                                                                .setDimFilter(and(\n                                                                    selector(\"city\", \"A\", null),\n                                                                    not(selector(\"country\", null, null))\n                                                                ))\n                                                                .setContext(\n                                                                    withTimestampResultContext(\n                                                                        queryContext,\n                                                                        \"d0\",\n                                                                        Granularities.DAY\n                                                                    )\n                                                                )\n                                                                .setGranularity(new AllGranularity())\n                                                                .build()\n                                                )\n                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                .setDimensions(new DefaultDimensionSpec(\"d1\", \"_d0\"))\n                                                .setAggregatorSpecs(\n                                                    new LongMaxAggregatorFactory(\"_a0\", \"a0\")\n                                                )\n                                                .setGranularity(new AllGranularity())\n                                                .setContext(queryContext)\n                                                .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"country\"),\n                                    DruidExpression.fromColumn(\"j0._d0\")\n                                ),\n                                JoinType.LEFT,\n                                selector(\"city\", \"B\", null)\n                            )\n                        )\n                        .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                        .setDimensions(new DefaultDimensionSpec(\"country\", \"d0\"))\n                        .setAggregatorSpecs(new LongAnyAggregatorFactory(\"a0\", \"j0._a0\"))\n                        .setGranularity(new AllGranularity())\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"canada\", 2L}\n        )\n    );\n  }\n","date":"2021-07-12 01:22:47","endLine":537,"groupId":"102046","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testCorrelatedSubqueryWithCorrelatedQueryFilter_Scan","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6d/4bf1bc4594c9400fa8b60246d87dc9e7990377.src","preCode":"  public void testCorrelatedSubqueryWithCorrelatedQueryFilter_Scan(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n    queryContext = withLeftDirectAccessEnabled(queryContext);\n    testQuery(\n        \"select country, ANY_VALUE(\\n\"\n        + \"        select max(\\\"users\\\") from (\\n\"\n        + \"            select floor(__time to day), count(user) \\\"users\\\" from visits f where f.country = visits.country and f.city = 'A' group by 1\\n\"\n        + \"        )\\n\"\n        + \"     ) as \\\"dailyVisits\\\"\\n\"\n        + \"from visits \\n\"\n        + \" where city = 'B'\"\n        + \" group by 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(CalciteTests.USERVISITDATASOURCE),\n                                new QueryDataSource(\n                                    GroupByQuery.builder()\n                                                .setDataSource(\n                                                    GroupByQuery.builder()\n                                                                .setDataSource(CalciteTests.USERVISITDATASOURCE)\n                                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                                .setVirtualColumns(new ExpressionVirtualColumn(\n                                                                    \"v0\",\n                                                                    \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                                    ValueType.LONG,\n                                                                    TestExprMacroTable.INSTANCE\n                                                                ))\n                                                                .setDimensions(\n                                                                    new DefaultDimensionSpec(\n                                                                        \"v0\",\n                                                                        \"d0\",\n                                                                        ValueType.LONG\n                                                                    ),\n                                                                    new DefaultDimensionSpec(\n                                                                        \"country\",\n                                                                        \"d1\"\n                                                                    )\n                                                                )\n                                                                .setAggregatorSpecs(new FilteredAggregatorFactory(\n                                                                    new CountAggregatorFactory(\"a0\"),\n                                                                    not(selector(\"user\", null, null))\n                                                                ))\n                                                                .setDimFilter(and(\n                                                                    selector(\"city\", \"A\", null),\n                                                                    not(selector(\"country\", null, null))\n                                                                ))\n                                                                .setContext(queryContext)\n                                                                .setGranularity(new AllGranularity())\n                                                                .build()\n                                                )\n                                                .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                                                .setDimensions(new DefaultDimensionSpec(\"d1\", \"_d0\"))\n                                                .setAggregatorSpecs(\n                                                    new LongMaxAggregatorFactory(\"_a0\", \"a0\")\n                                                )\n                                                .setGranularity(new AllGranularity())\n                                                .setContext(queryContext)\n                                                .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"country\"),\n                                    DruidExpression.fromColumn(\"j0._d0\")\n                                ),\n                                JoinType.LEFT,\n                                selector(\"city\", \"B\", null)\n                            )\n                        )\n                        .setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY))\n                        .setDimensions(new DefaultDimensionSpec(\"country\", \"d0\"))\n                        .setAggregatorSpecs(new LongAnyAggregatorFactory(\"a0\", \"j0._a0\"))\n                        .setGranularity(new AllGranularity())\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"canada\", 2L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteCorrelatedQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":448,"status":"M"}],"commitId":"e39ff44481703499394feac82d467e6999d05d47","commitMessage":"@@@improve groupBy query granularity translation with 2x query performance improve when issued from sql layer (#11379)\n\n* improve groupBy query granularity translation when issued from sql layer\n\n* fix style\n\n* use virtual column to determine timestampResult granularity\n\n* dont' apply postaggregators on compute nodes\n\n* relocate constants\n\n* fix order by correctness issue\n\n* fix ut\n\n* use more easier understanding code in DefaultLimitSpec\n\n* address comment\n\n* rollback use virtual column to determine timestampResult granularity\n\n* fix style\n\n* fix style\n\n* address the comment\n\n* add more detail document to explain the tradeoff\n\n* address the comment\n\n* address the comment","date":"2021-07-12 01:22:47","modifiedFileCount":"7","status":"M","submitter":"kaijianding"}]
