[{"authorTime":"2020-09-15 09:18:56","codes":[{"authorDate":"2020-09-15 09:18:56","commitOrder":1,"curCode":"  public void testBivariateMathFunctions()\n  {\n    assertOutputType(\"div(y,y_)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"div(y,z_)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"div(z,z_)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"max(y,y_)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"max(y,z_)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"max(z,z_)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"hypot(y,y_)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"hypot(y,z_)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"hypot(z,z_)\", inputTypes, ExprType.DOUBLE);\n  }\n","date":"2020-09-15 09:18:56","endLine":172,"groupId":"22293","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBivariateMathFunctions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7b/977d3b9ac2c44da0a5624edc5f1e6071f47f89.src","preCode":"  public void testBivariateMathFunctions()\n  {\n    assertOutputType(\"div(y,y_)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"div(y,z_)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"div(z,z_)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"max(y,y_)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"max(y,z_)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"max(z,z_)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"hypot(y,y_)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"hypot(y,z_)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"hypot(z,z_)\", inputTypes, ExprType.DOUBLE);\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/OutputTypeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"B"},{"authorDate":"2020-09-15 09:18:56","commitOrder":1,"curCode":"  public void testArrayFunctions()\n  {\n    assertOutputType(\"array(1, 2, 3)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array(1, 2, 3.0)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_length(a)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_length(b)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_length(c)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"string_to_array(x, ',')\", inputTypes, ExprType.STRING_ARRAY);\n\n    assertOutputType(\"array_to_string(a, ',')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_to_string(b, ',')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_to_string(c, ',')\", inputTypes, ExprType.STRING);\n\n    assertOutputType(\"array_offset(a, 1)\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_offset(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_offset(c, 1)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"array_ordinal(a, 1)\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_ordinal(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_ordinal(c, 1)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"array_offset_of(a, 'a')\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_offset_of(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_offset_of(c, 1.0)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_ordinal_of(a, 'a')\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_ordinal_of(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_ordinal_of(c, 1.0)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_append(x, x_)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_append(a, x_)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_append(y, y_)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_append(b, y_)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_append(z, z_)\", inputTypes, ExprType.DOUBLE_ARRAY);\n    assertOutputType(\"array_append(c, z_)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_concat(x, a)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_concat(a, a)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_concat(y, b)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_concat(b, b)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_concat(z, c)\", inputTypes, ExprType.DOUBLE_ARRAY);\n    assertOutputType(\"array_concat(c, c)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_contains(a, 'a')\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_contains(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_contains(c, 2.0)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_overlap(a, a)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_overlap(b, b)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_overlap(c, c)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_slice(a, 1, 2)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_slice(b, 1, 2)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_slice(c, 1, 2)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_prepend(x, a)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_prepend(x, x_)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_prepend(y, b)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_prepend(y, y_)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_prepend(z, c)\", inputTypes, ExprType.DOUBLE_ARRAY);\n    assertOutputType(\"array_prepend(z, z_)\", inputTypes, ExprType.DOUBLE_ARRAY);\n  }\n","date":"2020-09-15 09:18:56","endLine":312,"groupId":"22293","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testArrayFunctions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7b/977d3b9ac2c44da0a5624edc5f1e6071f47f89.src","preCode":"  public void testArrayFunctions()\n  {\n    assertOutputType(\"array(1, 2, 3)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array(1, 2, 3.0)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_length(a)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_length(b)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_length(c)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"string_to_array(x, ',')\", inputTypes, ExprType.STRING_ARRAY);\n\n    assertOutputType(\"array_to_string(a, ',')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_to_string(b, ',')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_to_string(c, ',')\", inputTypes, ExprType.STRING);\n\n    assertOutputType(\"array_offset(a, 1)\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_offset(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_offset(c, 1)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"array_ordinal(a, 1)\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_ordinal(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_ordinal(c, 1)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"array_offset_of(a, 'a')\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_offset_of(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_offset_of(c, 1.0)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_ordinal_of(a, 'a')\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_ordinal_of(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_ordinal_of(c, 1.0)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_append(x, x_)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_append(a, x_)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_append(y, y_)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_append(b, y_)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_append(z, z_)\", inputTypes, ExprType.DOUBLE_ARRAY);\n    assertOutputType(\"array_append(c, z_)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_concat(x, a)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_concat(a, a)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_concat(y, b)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_concat(b, b)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_concat(z, c)\", inputTypes, ExprType.DOUBLE_ARRAY);\n    assertOutputType(\"array_concat(c, c)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_contains(a, 'a')\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_contains(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_contains(c, 2.0)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_overlap(a, a)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_overlap(b, b)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_overlap(c, c)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_slice(a, 1, 2)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_slice(b, 1, 2)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_slice(c, 1, 2)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_prepend(x, a)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_prepend(x, x_)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_prepend(y, b)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_prepend(y, y_)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_prepend(z, c)\", inputTypes, ExprType.DOUBLE_ARRAY);\n    assertOutputType(\"array_prepend(z, z_)\", inputTypes, ExprType.DOUBLE_ARRAY);\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/OutputTypeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"B"}],"commitId":"184b202411ffe6d04037e6b670985a58c3bf53e5","commitMessage":"@@@add computed Expr output types (#10370)\n\n* push down ValueType to ExprType conversion.  tidy up\n\n* determine expr output type for given input types\n\n* revert unintended name change\n\n* add nullable\n\n* tidy up\n\n* fixup\n\n* more better\n\n* fix signatures\n\n* naming things is hard\n\n* fix inspection\n\n* javadoc\n\n* make default implementation of Expr.getOutputType that returns null\n\n* rename method\n\n* more test\n\n* add output for contains expr macro.  split operation and function auto conversion","date":"2020-09-15 09:18:56","modifiedFileCount":"39","status":"B","submitter":"Clint Wylie"},{"authorTime":"2020-09-15 09:18:56","codes":[{"authorDate":"2020-09-27 14:30:14","commitOrder":2,"curCode":"  public void testBivariateMathFunctions()\n  {\n    assertOutputType(\"div(y,y_)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"div(y,z_)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"div(z,z_)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"max(y,y_)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"max(y,z_)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"max(z,z_)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"hypot(y,y_)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"hypot(y,z_)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"hypot(z,z_)\", inputTypes, ExprType.DOUBLE);\n  }\n","date":"2020-09-27 14:30:14","endLine":172,"groupId":"22293","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBivariateMathFunctions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c2/8fdb85d9e7216cba075ec6977380aa0175a6d8.src","preCode":"  public void testBivariateMathFunctions()\n  {\n    assertOutputType(\"div(y,y_)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"div(y,z_)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"div(z,z_)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"max(y,y_)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"max(y,z_)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"max(z,z_)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"hypot(y,y_)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"hypot(y,z_)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"hypot(z,z_)\", inputTypes, ExprType.DOUBLE);\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/OutputTypeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2020-09-15 09:18:56","commitOrder":2,"curCode":"  public void testArrayFunctions()\n  {\n    assertOutputType(\"array(1, 2, 3)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array(1, 2, 3.0)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_length(a)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_length(b)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_length(c)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"string_to_array(x, ',')\", inputTypes, ExprType.STRING_ARRAY);\n\n    assertOutputType(\"array_to_string(a, ',')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_to_string(b, ',')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_to_string(c, ',')\", inputTypes, ExprType.STRING);\n\n    assertOutputType(\"array_offset(a, 1)\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_offset(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_offset(c, 1)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"array_ordinal(a, 1)\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_ordinal(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_ordinal(c, 1)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"array_offset_of(a, 'a')\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_offset_of(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_offset_of(c, 1.0)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_ordinal_of(a, 'a')\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_ordinal_of(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_ordinal_of(c, 1.0)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_append(x, x_)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_append(a, x_)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_append(y, y_)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_append(b, y_)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_append(z, z_)\", inputTypes, ExprType.DOUBLE_ARRAY);\n    assertOutputType(\"array_append(c, z_)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_concat(x, a)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_concat(a, a)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_concat(y, b)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_concat(b, b)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_concat(z, c)\", inputTypes, ExprType.DOUBLE_ARRAY);\n    assertOutputType(\"array_concat(c, c)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_contains(a, 'a')\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_contains(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_contains(c, 2.0)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_overlap(a, a)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_overlap(b, b)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_overlap(c, c)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_slice(a, 1, 2)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_slice(b, 1, 2)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_slice(c, 1, 2)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_prepend(x, a)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_prepend(x, x_)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_prepend(y, b)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_prepend(y, y_)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_prepend(z, c)\", inputTypes, ExprType.DOUBLE_ARRAY);\n    assertOutputType(\"array_prepend(z, z_)\", inputTypes, ExprType.DOUBLE_ARRAY);\n  }\n","date":"2020-09-15 09:18:56","endLine":312,"groupId":"22293","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testArrayFunctions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7b/977d3b9ac2c44da0a5624edc5f1e6071f47f89.src","preCode":"  public void testArrayFunctions()\n  {\n    assertOutputType(\"array(1, 2, 3)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array(1, 2, 3.0)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_length(a)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_length(b)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_length(c)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"string_to_array(x, ',')\", inputTypes, ExprType.STRING_ARRAY);\n\n    assertOutputType(\"array_to_string(a, ',')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_to_string(b, ',')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_to_string(c, ',')\", inputTypes, ExprType.STRING);\n\n    assertOutputType(\"array_offset(a, 1)\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_offset(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_offset(c, 1)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"array_ordinal(a, 1)\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_ordinal(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_ordinal(c, 1)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"array_offset_of(a, 'a')\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_offset_of(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_offset_of(c, 1.0)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_ordinal_of(a, 'a')\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_ordinal_of(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_ordinal_of(c, 1.0)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_append(x, x_)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_append(a, x_)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_append(y, y_)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_append(b, y_)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_append(z, z_)\", inputTypes, ExprType.DOUBLE_ARRAY);\n    assertOutputType(\"array_append(c, z_)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_concat(x, a)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_concat(a, a)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_concat(y, b)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_concat(b, b)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_concat(z, c)\", inputTypes, ExprType.DOUBLE_ARRAY);\n    assertOutputType(\"array_concat(c, c)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_contains(a, 'a')\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_contains(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_contains(c, 2.0)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_overlap(a, a)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_overlap(b, b)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_overlap(c, c)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_slice(a, 1, 2)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_slice(b, 1, 2)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_slice(c, 1, 2)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_prepend(x, a)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_prepend(x, x_)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_prepend(y, b)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_prepend(y, y_)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_prepend(z, c)\", inputTypes, ExprType.DOUBLE_ARRAY);\n    assertOutputType(\"array_prepend(z, z_)\", inputTypes, ExprType.DOUBLE_ARRAY);\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/OutputTypeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"N"}],"commitId":"3d700a5e31eaea131f1152e90b6c78a572edd7fc","commitMessage":"@@@vectorize remaining math expressions (#10429)\n\n* vectorize remaining math expressions\n\n* fixes\n\n* remove cannotVectorize() where no longer true\n\n* disable vectorized groupby for numeric columns with nulls\n\n* fixes","date":"2020-09-27 14:30:14","modifiedFileCount":"11","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-10-27 10:55:24","codes":[{"authorDate":"2020-10-27 10:55:24","commitOrder":3,"curCode":"  public void testBivariateMathFunctions()\n  {\n    assertOutputType(\"div(y,y_)\", inspector, ExprType.LONG);\n    assertOutputType(\"div(y,z_)\", inspector, ExprType.LONG);\n    assertOutputType(\"div(z,z_)\", inspector, ExprType.LONG);\n\n    assertOutputType(\"max(y,y_)\", inspector, ExprType.LONG);\n    assertOutputType(\"max(y,z_)\", inspector, ExprType.DOUBLE);\n    assertOutputType(\"max(z,z_)\", inspector, ExprType.DOUBLE);\n\n    assertOutputType(\"hypot(y,y_)\", inspector, ExprType.DOUBLE);\n    assertOutputType(\"hypot(y,z_)\", inspector, ExprType.DOUBLE);\n    assertOutputType(\"hypot(z,z_)\", inspector, ExprType.DOUBLE);\n  }\n","date":"2020-10-27 10:55:24","endLine":172,"groupId":"104932","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testBivariateMathFunctions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0c/8ea1b71fab3c26f20af7cff75ee27cd0398819.src","preCode":"  public void testBivariateMathFunctions()\n  {\n    assertOutputType(\"div(y,y_)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"div(y,z_)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"div(z,z_)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"max(y,y_)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"max(y,z_)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"max(z,z_)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"hypot(y,y_)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"hypot(y,z_)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"hypot(z,z_)\", inputTypes, ExprType.DOUBLE);\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/OutputTypeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2020-10-27 10:55:24","commitOrder":3,"curCode":"  public void testArrayFunctions()\n  {\n    assertOutputType(\"array(1, 2, 3)\", inspector, ExprType.LONG_ARRAY);\n    assertOutputType(\"array(1, 2, 3.0)\", inspector, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_length(a)\", inspector, ExprType.LONG);\n    assertOutputType(\"array_length(b)\", inspector, ExprType.LONG);\n    assertOutputType(\"array_length(c)\", inspector, ExprType.LONG);\n\n    assertOutputType(\"string_to_array(x, ',')\", inspector, ExprType.STRING_ARRAY);\n\n    assertOutputType(\"array_to_string(a, ',')\", inspector, ExprType.STRING);\n    assertOutputType(\"array_to_string(b, ',')\", inspector, ExprType.STRING);\n    assertOutputType(\"array_to_string(c, ',')\", inspector, ExprType.STRING);\n\n    assertOutputType(\"array_offset(a, 1)\", inspector, ExprType.STRING);\n    assertOutputType(\"array_offset(b, 1)\", inspector, ExprType.LONG);\n    assertOutputType(\"array_offset(c, 1)\", inspector, ExprType.DOUBLE);\n\n    assertOutputType(\"array_ordinal(a, 1)\", inspector, ExprType.STRING);\n    assertOutputType(\"array_ordinal(b, 1)\", inspector, ExprType.LONG);\n    assertOutputType(\"array_ordinal(c, 1)\", inspector, ExprType.DOUBLE);\n\n    assertOutputType(\"array_offset_of(a, 'a')\", inspector, ExprType.LONG);\n    assertOutputType(\"array_offset_of(b, 1)\", inspector, ExprType.LONG);\n    assertOutputType(\"array_offset_of(c, 1.0)\", inspector, ExprType.LONG);\n\n    assertOutputType(\"array_ordinal_of(a, 'a')\", inspector, ExprType.LONG);\n    assertOutputType(\"array_ordinal_of(b, 1)\", inspector, ExprType.LONG);\n    assertOutputType(\"array_ordinal_of(c, 1.0)\", inspector, ExprType.LONG);\n\n    assertOutputType(\"array_append(x, x_)\", inspector, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_append(a, x_)\", inspector, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_append(y, y_)\", inspector, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_append(b, y_)\", inspector, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_append(z, z_)\", inspector, ExprType.DOUBLE_ARRAY);\n    assertOutputType(\"array_append(c, z_)\", inspector, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_concat(x, a)\", inspector, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_concat(a, a)\", inspector, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_concat(y, b)\", inspector, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_concat(b, b)\", inspector, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_concat(z, c)\", inspector, ExprType.DOUBLE_ARRAY);\n    assertOutputType(\"array_concat(c, c)\", inspector, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_contains(a, 'a')\", inspector, ExprType.LONG);\n    assertOutputType(\"array_contains(b, 1)\", inspector, ExprType.LONG);\n    assertOutputType(\"array_contains(c, 2.0)\", inspector, ExprType.LONG);\n\n    assertOutputType(\"array_overlap(a, a)\", inspector, ExprType.LONG);\n    assertOutputType(\"array_overlap(b, b)\", inspector, ExprType.LONG);\n    assertOutputType(\"array_overlap(c, c)\", inspector, ExprType.LONG);\n\n    assertOutputType(\"array_slice(a, 1, 2)\", inspector, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_slice(b, 1, 2)\", inspector, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_slice(c, 1, 2)\", inspector, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_prepend(x, a)\", inspector, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_prepend(x, x_)\", inspector, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_prepend(y, b)\", inspector, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_prepend(y, y_)\", inspector, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_prepend(z, c)\", inspector, ExprType.DOUBLE_ARRAY);\n    assertOutputType(\"array_prepend(z, z_)\", inspector, ExprType.DOUBLE_ARRAY);\n  }\n","date":"2020-10-27 10:55:24","endLine":340,"groupId":"104932","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testArrayFunctions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0c/8ea1b71fab3c26f20af7cff75ee27cd0398819.src","preCode":"  public void testArrayFunctions()\n  {\n    assertOutputType(\"array(1, 2, 3)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array(1, 2, 3.0)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_length(a)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_length(b)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_length(c)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"string_to_array(x, ',')\", inputTypes, ExprType.STRING_ARRAY);\n\n    assertOutputType(\"array_to_string(a, ',')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_to_string(b, ',')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_to_string(c, ',')\", inputTypes, ExprType.STRING);\n\n    assertOutputType(\"array_offset(a, 1)\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_offset(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_offset(c, 1)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"array_ordinal(a, 1)\", inputTypes, ExprType.STRING);\n    assertOutputType(\"array_ordinal(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_ordinal(c, 1)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"array_offset_of(a, 'a')\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_offset_of(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_offset_of(c, 1.0)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_ordinal_of(a, 'a')\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_ordinal_of(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_ordinal_of(c, 1.0)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_append(x, x_)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_append(a, x_)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_append(y, y_)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_append(b, y_)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_append(z, z_)\", inputTypes, ExprType.DOUBLE_ARRAY);\n    assertOutputType(\"array_append(c, z_)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_concat(x, a)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_concat(a, a)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_concat(y, b)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_concat(b, b)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_concat(z, c)\", inputTypes, ExprType.DOUBLE_ARRAY);\n    assertOutputType(\"array_concat(c, c)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_contains(a, 'a')\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_contains(b, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_contains(c, 2.0)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_overlap(a, a)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_overlap(b, b)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"array_overlap(c, c)\", inputTypes, ExprType.LONG);\n\n    assertOutputType(\"array_slice(a, 1, 2)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_slice(b, 1, 2)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_slice(c, 1, 2)\", inputTypes, ExprType.DOUBLE_ARRAY);\n\n    assertOutputType(\"array_prepend(x, a)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_prepend(x, x_)\", inputTypes, ExprType.STRING_ARRAY);\n    assertOutputType(\"array_prepend(y, b)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_prepend(y, y_)\", inputTypes, ExprType.LONG_ARRAY);\n    assertOutputType(\"array_prepend(z, c)\", inputTypes, ExprType.DOUBLE_ARRAY);\n    assertOutputType(\"array_prepend(z, z_)\", inputTypes, ExprType.DOUBLE_ARRAY);\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/OutputTypeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"M"}],"commitId":"d0821de8540686eb64a9b3e22fe4a637b58920ef","commitMessage":"@@@support for vectorizing expressions with non-existent inputs.  more consistent type handling for non-vectorized expressions (#10499)\n\n* support for vectorizing expressions with non-existent inputs.  more consistent type handling for non-vectorized expressions\n\n* inspector\n\n* changes\n\n* more test\n\n* clean","date":"2020-10-27 10:55:24","modifiedFileCount":"56","status":"M","submitter":"Clint Wylie"}]
