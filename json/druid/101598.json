[{"authorTime":"2019-12-04 10:36:28","codes":[{"authorDate":"2019-12-04 10:36:28","commitOrder":1,"curCode":"  public void testGroupByLimitWrapping() throws Exception\n  {\n    List<Object[]> expected;\n    if (NullHandling.replaceWithDefault()) {\n      expected = ImmutableList.of(\n          new Object[]{\"def\", \"abc\", 1L},\n          new Object[]{\"abc\", \"\", 1L}\n      );\n    } else {\n      expected = ImmutableList.of(\n          new Object[]{\"def\", \"abc\", 1L},\n          new Object[]{\"abc\", null, 1L}\n      );\n    }\n    testQuery(\n        \"SELECT dim1, dim2, COUNT(*) FROM druid.foo GROUP BY dim1, dim2 ORDER BY dim1 DESC\",\n        OUTER_LIMIT_CONTEXT,\n        ImmutableList.of(\n            new GroupByQuery.Builder()\n                .setDataSource(CalciteTests.DATASOURCE1)\n                .setInterval(querySegmentSpec(Filtration.eternity()))\n                .setGranularity(Granularities.ALL)\n                .setDimensions(\n                    new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING),\n                    new DefaultDimensionSpec(\"dim2\", \"d1\", ValueType.STRING)\n                )\n                .setLimitSpec(\n                    new DefaultLimitSpec(\n                        ImmutableList.of(\n                            new OrderByColumnSpec(\"d0\", Direction.DESCENDING, StringComparators.LEXICOGRAPHIC)),\n                        2\n                    )\n                )\n                .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                .setContext(OUTER_LIMIT_CONTEXT)\n                .build()\n        ),\n        expected\n    );\n  }\n","date":"2019-12-04 10:36:28","endLine":914,"groupId":"19622","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByLimitWrapping","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0f/9ffb764e7230f72623d10eb2343216d39919ab.src","preCode":"  public void testGroupByLimitWrapping() throws Exception\n  {\n    List<Object[]> expected;\n    if (NullHandling.replaceWithDefault()) {\n      expected = ImmutableList.of(\n          new Object[]{\"def\", \"abc\", 1L},\n          new Object[]{\"abc\", \"\", 1L}\n      );\n    } else {\n      expected = ImmutableList.of(\n          new Object[]{\"def\", \"abc\", 1L},\n          new Object[]{\"abc\", null, 1L}\n      );\n    }\n    testQuery(\n        \"SELECT dim1, dim2, COUNT(*) FROM druid.foo GROUP BY dim1, dim2 ORDER BY dim1 DESC\",\n        OUTER_LIMIT_CONTEXT,\n        ImmutableList.of(\n            new GroupByQuery.Builder()\n                .setDataSource(CalciteTests.DATASOURCE1)\n                .setInterval(querySegmentSpec(Filtration.eternity()))\n                .setGranularity(Granularities.ALL)\n                .setDimensions(\n                    new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING),\n                    new DefaultDimensionSpec(\"dim2\", \"d1\", ValueType.STRING)\n                )\n                .setLimitSpec(\n                    new DefaultLimitSpec(\n                        ImmutableList.of(\n                            new OrderByColumnSpec(\"d0\", Direction.DESCENDING, StringComparators.LEXICOGRAPHIC)),\n                        2\n                    )\n                )\n                .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                .setContext(OUTER_LIMIT_CONTEXT)\n                .build()\n        ),\n        expected\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":875,"status":"B"},{"authorDate":"2019-12-04 10:36:28","commitOrder":1,"curCode":"  public void testGroupByLimitWrappingOrderByAgg() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, dim2, COUNT(*) FROM druid.foo GROUP BY 1, 2 ORDER BY 3 DESC\",\n        OUTER_LIMIT_CONTEXT,\n        ImmutableList.of(\n            new GroupByQuery.Builder()\n                .setDataSource(CalciteTests.DATASOURCE1)\n                .setInterval(querySegmentSpec(Filtration.eternity()))\n                .setGranularity(Granularities.ALL)\n                .setDimensions(\n                    new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING),\n                    new DefaultDimensionSpec(\"dim2\", \"d1\", ValueType.STRING)\n                )\n                .setLimitSpec(\n                    new DefaultLimitSpec(\n                        ImmutableList.of(\n                            new OrderByColumnSpec(\"a0\", Direction.DESCENDING, StringComparators.NUMERIC)\n                        ),\n                        2\n                    )\n                )\n                .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                .setContext(OUTER_LIMIT_CONTEXT)\n                .build()\n        ),\n        ImmutableList.of(new Object[]{\"\", \"a\", 1L}, new Object[]{\"def\", \"abc\", 1L})\n    );\n  }\n","date":"2019-12-04 10:36:28","endLine":945,"groupId":"19622","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByLimitWrappingOrderByAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0f/9ffb764e7230f72623d10eb2343216d39919ab.src","preCode":"  public void testGroupByLimitWrappingOrderByAgg() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, dim2, COUNT(*) FROM druid.foo GROUP BY 1, 2 ORDER BY 3 DESC\",\n        OUTER_LIMIT_CONTEXT,\n        ImmutableList.of(\n            new GroupByQuery.Builder()\n                .setDataSource(CalciteTests.DATASOURCE1)\n                .setInterval(querySegmentSpec(Filtration.eternity()))\n                .setGranularity(Granularities.ALL)\n                .setDimensions(\n                    new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING),\n                    new DefaultDimensionSpec(\"dim2\", \"d1\", ValueType.STRING)\n                )\n                .setLimitSpec(\n                    new DefaultLimitSpec(\n                        ImmutableList.of(\n                            new OrderByColumnSpec(\"a0\", Direction.DESCENDING, StringComparators.NUMERIC)\n                        ),\n                        2\n                    )\n                )\n                .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                .setContext(OUTER_LIMIT_CONTEXT)\n                .build()\n        ),\n        ImmutableList.of(new Object[]{\"\", \"a\", 1L}, new Object[]{\"def\", \"abc\", 1L})\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":917,"status":"B"}],"commitId":"d0a6fe7f120b29f92efdf17d6eb909568e93a3b4","commitMessage":"@@@fix bug with sqlOuterLimit.  use sqlOuterLimit in web console (#8919)\n\n* fix bug with sqlOuterLimit.  use sqlOuterLimit instead of wrapping sql query for web console\n\n* fixes.  refactors.  tests\n\n* meh\n\n* better name\n\n* fix comment location\n\n* fix copy and paste\n","date":"2019-12-04 10:36:28","modifiedFileCount":"5","status":"B","submitter":"Clint Wylie"},{"authorTime":"2020-08-06 06:39:58","codes":[{"authorDate":"2019-12-04 10:36:28","commitOrder":2,"curCode":"  public void testGroupByLimitWrapping() throws Exception\n  {\n    List<Object[]> expected;\n    if (NullHandling.replaceWithDefault()) {\n      expected = ImmutableList.of(\n          new Object[]{\"def\", \"abc\", 1L},\n          new Object[]{\"abc\", \"\", 1L}\n      );\n    } else {\n      expected = ImmutableList.of(\n          new Object[]{\"def\", \"abc\", 1L},\n          new Object[]{\"abc\", null, 1L}\n      );\n    }\n    testQuery(\n        \"SELECT dim1, dim2, COUNT(*) FROM druid.foo GROUP BY dim1, dim2 ORDER BY dim1 DESC\",\n        OUTER_LIMIT_CONTEXT,\n        ImmutableList.of(\n            new GroupByQuery.Builder()\n                .setDataSource(CalciteTests.DATASOURCE1)\n                .setInterval(querySegmentSpec(Filtration.eternity()))\n                .setGranularity(Granularities.ALL)\n                .setDimensions(\n                    new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING),\n                    new DefaultDimensionSpec(\"dim2\", \"d1\", ValueType.STRING)\n                )\n                .setLimitSpec(\n                    new DefaultLimitSpec(\n                        ImmutableList.of(\n                            new OrderByColumnSpec(\"d0\", Direction.DESCENDING, StringComparators.LEXICOGRAPHIC)),\n                        2\n                    )\n                )\n                .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                .setContext(OUTER_LIMIT_CONTEXT)\n                .build()\n        ),\n        expected\n    );\n  }\n","date":"2019-12-04 10:36:28","endLine":914,"groupId":"19622","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByLimitWrapping","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0f/9ffb764e7230f72623d10eb2343216d39919ab.src","preCode":"  public void testGroupByLimitWrapping() throws Exception\n  {\n    List<Object[]> expected;\n    if (NullHandling.replaceWithDefault()) {\n      expected = ImmutableList.of(\n          new Object[]{\"def\", \"abc\", 1L},\n          new Object[]{\"abc\", \"\", 1L}\n      );\n    } else {\n      expected = ImmutableList.of(\n          new Object[]{\"def\", \"abc\", 1L},\n          new Object[]{\"abc\", null, 1L}\n      );\n    }\n    testQuery(\n        \"SELECT dim1, dim2, COUNT(*) FROM druid.foo GROUP BY dim1, dim2 ORDER BY dim1 DESC\",\n        OUTER_LIMIT_CONTEXT,\n        ImmutableList.of(\n            new GroupByQuery.Builder()\n                .setDataSource(CalciteTests.DATASOURCE1)\n                .setInterval(querySegmentSpec(Filtration.eternity()))\n                .setGranularity(Granularities.ALL)\n                .setDimensions(\n                    new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING),\n                    new DefaultDimensionSpec(\"dim2\", \"d1\", ValueType.STRING)\n                )\n                .setLimitSpec(\n                    new DefaultLimitSpec(\n                        ImmutableList.of(\n                            new OrderByColumnSpec(\"d0\", Direction.DESCENDING, StringComparators.LEXICOGRAPHIC)),\n                        2\n                    )\n                )\n                .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                .setContext(OUTER_LIMIT_CONTEXT)\n                .build()\n        ),\n        expected\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":875,"status":"N"},{"authorDate":"2020-08-06 06:39:58","commitOrder":2,"curCode":"  public void testGroupByLimitWrappingOrderByAgg() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, dim2, COUNT(*) FROM druid.foo GROUP BY 1, 2 ORDER BY 3 DESC\",\n        OUTER_LIMIT_CONTEXT,\n        ImmutableList.of(\n            new GroupByQuery.Builder()\n                .setDataSource(CalciteTests.DATASOURCE1)\n                .setInterval(querySegmentSpec(Filtration.eternity()))\n                .setGranularity(Granularities.ALL)\n                .setDimensions(\n                    new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING),\n                    new DefaultDimensionSpec(\"dim2\", \"d1\", ValueType.STRING)\n                )\n                .setLimitSpec(\n                    new DefaultLimitSpec(\n                        ImmutableList.of(\n                            new OrderByColumnSpec(\"a0\", Direction.DESCENDING, StringComparators.NUMERIC)\n                        ),\n                        2\n                    )\n                )\n                .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                .setContext(OUTER_LIMIT_CONTEXT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", \"a\", 1L},\n            new Object[]{\"1\", \"a\", 1L}\n        )\n    );\n  }\n","date":"2020-08-06 06:39:58","endLine":1574,"groupId":"19622","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByLimitWrappingOrderByAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/86/585d2ebddeb1662bd4b6e963a5f25c7a23b0e1.src","preCode":"  public void testGroupByLimitWrappingOrderByAgg() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, dim2, COUNT(*) FROM druid.foo GROUP BY 1, 2 ORDER BY 3 DESC\",\n        OUTER_LIMIT_CONTEXT,\n        ImmutableList.of(\n            new GroupByQuery.Builder()\n                .setDataSource(CalciteTests.DATASOURCE1)\n                .setInterval(querySegmentSpec(Filtration.eternity()))\n                .setGranularity(Granularities.ALL)\n                .setDimensions(\n                    new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING),\n                    new DefaultDimensionSpec(\"dim2\", \"d1\", ValueType.STRING)\n                )\n                .setLimitSpec(\n                    new DefaultLimitSpec(\n                        ImmutableList.of(\n                            new OrderByColumnSpec(\"a0\", Direction.DESCENDING, StringComparators.NUMERIC)\n                        ),\n                        2\n                    )\n                )\n                .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                .setContext(OUTER_LIMIT_CONTEXT)\n                .build()\n        ),\n        ImmutableList.of(new Object[]{\"\", \"a\", 1L}, new Object[]{\"def\", \"abc\", 1L})\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1543,"status":"M"}],"commitId":"b6aaf59e8cdc4b2965ec9f54d8b824a51baaa594","commitMessage":"@@@Add \"offset\" parameter to GroupBy query. (#10235)\n\n* Add \"offset\" parameter to GroupBy query.\n\nIt works by doing the query as normal and then throwing away the first\n\"offset\" number of rows on the broker.\n\n* Stabilize GroupBy sorts.\n\n* Fix inspections.\n\n* Fix suppression.\n\n* Fixups.\n\n* Move TopNSequence to druid-core.\n\n* Addl comments.\n\n* NumberedElement equals verification.\n\n* Changes from review.","date":"2020-08-06 06:39:58","modifiedFileCount":"12","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-08-22 05:11:54","codes":[{"authorDate":"2020-08-22 05:11:54","commitOrder":3,"curCode":"  public void testGroupByLimitWrapping() throws Exception\n  {\n    List<Object[]> expected;\n    if (NullHandling.replaceWithDefault()) {\n      expected = ImmutableList.of(\n          new Object[]{\"def\", \"abc\", 1L},\n          new Object[]{\"abc\", \"\", 1L}\n      );\n    } else {\n      expected = ImmutableList.of(\n          new Object[]{\"def\", \"abc\", 1L},\n          new Object[]{\"abc\", null, 1L}\n      );\n    }\n    testQuery(\n        \"SELECT dim1, dim2, COUNT(*) FROM druid.foo GROUP BY dim1, dim2 ORDER BY dim1 DESC\",\n        OUTER_LIMIT_CONTEXT,\n        ImmutableList.of(\n            new GroupByQuery.Builder()\n                .setDataSource(CalciteTests.DATASOURCE1)\n                .setInterval(querySegmentSpec(Filtration.eternity()))\n                .setGranularity(Granularities.ALL)\n                .setDimensions(\n                    new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING),\n                    new DefaultDimensionSpec(\"dim2\", \"d1\", ValueType.STRING)\n                )\n                .setLimitSpec(\n                    DefaultLimitSpec\n                        .builder()\n                        .orderBy(new OrderByColumnSpec(\"d0\", Direction.DESCENDING, StringComparators.LEXICOGRAPHIC))\n                        .limit(2)\n                        .build()\n                )\n                .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                .setContext(OUTER_LIMIT_CONTEXT)\n                .build()\n        ),\n        expected\n    );\n  }\n","date":"2020-08-22 05:11:54","endLine":1642,"groupId":"101598","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByLimitWrapping","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/05/ea116bfede6e23d9f83cf78e54979557d181b2.src","preCode":"  public void testGroupByLimitWrapping() throws Exception\n  {\n    List<Object[]> expected;\n    if (NullHandling.replaceWithDefault()) {\n      expected = ImmutableList.of(\n          new Object[]{\"def\", \"abc\", 1L},\n          new Object[]{\"abc\", \"\", 1L}\n      );\n    } else {\n      expected = ImmutableList.of(\n          new Object[]{\"def\", \"abc\", 1L},\n          new Object[]{\"abc\", null, 1L}\n      );\n    }\n    testQuery(\n        \"SELECT dim1, dim2, COUNT(*) FROM druid.foo GROUP BY dim1, dim2 ORDER BY dim1 DESC\",\n        OUTER_LIMIT_CONTEXT,\n        ImmutableList.of(\n            new GroupByQuery.Builder()\n                .setDataSource(CalciteTests.DATASOURCE1)\n                .setInterval(querySegmentSpec(Filtration.eternity()))\n                .setGranularity(Granularities.ALL)\n                .setDimensions(\n                    new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING),\n                    new DefaultDimensionSpec(\"dim2\", \"d1\", ValueType.STRING)\n                )\n                .setLimitSpec(\n                    new DefaultLimitSpec(\n                        ImmutableList.of(\n                            new OrderByColumnSpec(\"d0\", Direction.DESCENDING, StringComparators.LEXICOGRAPHIC)),\n                        2\n                    )\n                )\n                .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                .setContext(OUTER_LIMIT_CONTEXT)\n                .build()\n        ),\n        expected\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1603,"status":"M"},{"authorDate":"2020-08-22 05:11:54","commitOrder":3,"curCode":"  public void testGroupByLimitWrappingOrderByAgg() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, dim2, COUNT(*) FROM druid.foo GROUP BY 1, 2 ORDER BY 3 DESC\",\n        OUTER_LIMIT_CONTEXT,\n        ImmutableList.of(\n            new GroupByQuery.Builder()\n                .setDataSource(CalciteTests.DATASOURCE1)\n                .setInterval(querySegmentSpec(Filtration.eternity()))\n                .setGranularity(Granularities.ALL)\n                .setDimensions(\n                    new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING),\n                    new DefaultDimensionSpec(\"dim2\", \"d1\", ValueType.STRING)\n                )\n                .setLimitSpec(\n                    DefaultLimitSpec\n                        .builder()\n                        .orderBy(new OrderByColumnSpec(\"a0\", Direction.DESCENDING, StringComparators.NUMERIC))\n                        .limit(2)\n                        .build()\n                )\n                .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                .setContext(OUTER_LIMIT_CONTEXT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", \"a\", 1L},\n            new Object[]{\"1\", \"a\", 1L}\n        )\n    );\n  }\n","date":"2020-08-22 05:11:54","endLine":1707,"groupId":"101598","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByLimitWrappingOrderByAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/05/ea116bfede6e23d9f83cf78e54979557d181b2.src","preCode":"  public void testGroupByLimitWrappingOrderByAgg() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, dim2, COUNT(*) FROM druid.foo GROUP BY 1, 2 ORDER BY 3 DESC\",\n        OUTER_LIMIT_CONTEXT,\n        ImmutableList.of(\n            new GroupByQuery.Builder()\n                .setDataSource(CalciteTests.DATASOURCE1)\n                .setInterval(querySegmentSpec(Filtration.eternity()))\n                .setGranularity(Granularities.ALL)\n                .setDimensions(\n                    new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING),\n                    new DefaultDimensionSpec(\"dim2\", \"d1\", ValueType.STRING)\n                )\n                .setLimitSpec(\n                    new DefaultLimitSpec(\n                        ImmutableList.of(\n                            new OrderByColumnSpec(\"a0\", Direction.DESCENDING, StringComparators.NUMERIC)\n                        ),\n                        2\n                    )\n                )\n                .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                .setContext(OUTER_LIMIT_CONTEXT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", \"a\", 1L},\n            new Object[]{\"1\", \"a\", 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1677,"status":"M"}],"commitId":"0910d22f487ab2ac603708d51a16da0d8bf942dc","commitMessage":"@@@Add SQL \"OFFSET\" clause. (#10279)\n\n* Add SQL \"OFFSET\" clause.\n\nUnder the hood.  this uses the new offset features from #10233 (Scan)\nand #10235 (GroupBy). Since Timeseries and TopN queries do not currently\nhave an offset feature.  SQL planning will switch from one of those to\nScan or GroupBy if users add an OFFSET.\n\nIncludes a refactoring to harmonize offset and limit planning using an\nOffsetLimit wrapper class. This is useful because it ensures that the\nvarious places that need to deal with offset and limit collapsing all\nbehave the same way.  using its \"andThen\" method.\n\n* Fix test and add another test.","date":"2020-08-22 05:11:54","modifiedFileCount":"6","status":"M","submitter":"Gian Merlino"}]
