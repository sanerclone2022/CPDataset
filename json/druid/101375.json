[{"authorTime":"2020-02-14 06:58:32","codes":[{"authorDate":"2020-02-14 06:58:32","commitOrder":1,"curCode":"  public void setup()\n  {\n    ComplexMetrics.registerSerde(\"hyperUnique\", new HyperUniquesSerde());\n\n    rows = new ArrayList<InputRow>();\n    schemaInfo = BenchmarkSchemas.SCHEMA_MAP.get(schema);\n\n    BenchmarkDataGenerator gen = new BenchmarkDataGenerator(\n        schemaInfo.getColumnSchemas(),\n        RNG_SEED,\n        schemaInfo.getDataInterval(),\n        rowsPerSegment\n    );\n\n    for (int i = 0; i < rowsPerSegment; i++) {\n      InputRow row = gen.nextRow();\n      if (i % 10000 == 0) {\n        log.info(i + \" rows generated.\");\n      }\n      rows.add(row);\n    }\n  }\n","date":"2020-02-14 06:58:32","endLine":97,"groupId":"1794","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/19/862f27c9483cdd745dedc8355b6c3646407ac1.src","preCode":"  public void setup()\n  {\n    ComplexMetrics.registerSerde(\"hyperUnique\", new HyperUniquesSerde());\n\n    rows = new ArrayList<InputRow>();\n    schemaInfo = BenchmarkSchemas.SCHEMA_MAP.get(schema);\n\n    BenchmarkDataGenerator gen = new BenchmarkDataGenerator(\n        schemaInfo.getColumnSchemas(),\n        RNG_SEED,\n        schemaInfo.getDataInterval(),\n        rowsPerSegment\n    );\n\n    for (int i = 0; i < rowsPerSegment; i++) {\n      InputRow row = gen.nextRow();\n      if (i % 10000 == 0) {\n        log.info(i + \" rows generated.\");\n      }\n      rows.add(row);\n    }\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/indexing/IndexIngestionBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"},{"authorDate":"2020-02-14 06:58:32","commitOrder":1,"curCode":"  public void setup()\n  {\n    log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n\n    ComplexMetrics.registerSerde(\"hyperUnique\", new HyperUniquesSerde());\n\n    rows = new ArrayList<InputRow>();\n    schemaInfo = BenchmarkSchemas.SCHEMA_MAP.get(schema);\n\n    int valuesPerTimestamp = 1;\n    switch (rollupOpportunity) {\n      case \"moderate\":\n        valuesPerTimestamp = 1000;\n        break;\n      case \"high\":\n        valuesPerTimestamp = 10000;\n        break;\n\n    }\n\n    BenchmarkDataGenerator gen = new BenchmarkDataGenerator(\n        schemaInfo.getColumnSchemas(),\n        RNG_SEED,\n        schemaInfo.getDataInterval().getStartMillis(),\n        valuesPerTimestamp,\n        1000.0\n    );\n\n    for (int i = 0; i < rowsPerSegment; i++) {\n      InputRow row = gen.nextRow();\n      if (i % 10000 == 0) {\n        log.info(i + \" rows generated.\");\n      }\n      rows.add(row);\n    }\n  }\n","date":"2020-02-14 06:58:32","endLine":133,"groupId":"10831","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d8/26fe8fdc738f0fa88e68bfcaaf17017757542f.src","preCode":"  public void setup()\n  {\n    log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n\n    ComplexMetrics.registerSerde(\"hyperUnique\", new HyperUniquesSerde());\n\n    rows = new ArrayList<InputRow>();\n    schemaInfo = BenchmarkSchemas.SCHEMA_MAP.get(schema);\n\n    int valuesPerTimestamp = 1;\n    switch (rollupOpportunity) {\n      case \"moderate\":\n        valuesPerTimestamp = 1000;\n        break;\n      case \"high\":\n        valuesPerTimestamp = 10000;\n        break;\n\n    }\n\n    BenchmarkDataGenerator gen = new BenchmarkDataGenerator(\n        schemaInfo.getColumnSchemas(),\n        RNG_SEED,\n        schemaInfo.getDataInterval().getStartMillis(),\n        valuesPerTimestamp,\n        1000.0\n    );\n\n    for (int i = 0; i < rowsPerSegment; i++) {\n      InputRow row = gen.nextRow();\n      if (i % 10000 == 0) {\n        log.info(i + \" rows generated.\");\n      }\n      rows.add(row);\n    }\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/indexing/IndexPersistBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"}],"commitId":"e9aebd994aa0e243446b4f76d819a503401104e3","commitMessage":"@@@Fix for building in Eclipse & VS Code. (#7481)\n\nFixes #6866\nReverse dependencies from /main/ to /test/\nAdd generated-test-sources to source path for Eclipse","date":"2020-02-14 06:58:32","modifiedFileCount":"1","status":"B","submitter":"Adam Peck"},{"authorTime":"2020-06-10 10:31:04","codes":[{"authorDate":"2020-06-10 10:31:04","commitOrder":2,"curCode":"  public void setup()\n  {\n    ComplexMetrics.registerSerde(\"hyperUnique\", new HyperUniquesSerde());\n\n    rows = new ArrayList<InputRow>();\n    schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(schema);\n\n    DataGenerator gen = new DataGenerator(\n        schemaInfo.getColumnSchemas(),\n        RNG_SEED,\n        schemaInfo.getDataInterval(),\n        rowsPerSegment\n    );\n\n    for (int i = 0; i < rowsPerSegment; i++) {\n      InputRow row = gen.nextRow();\n      if (i % 10000 == 0) {\n        log.info(i + \" rows generated.\");\n      }\n      rows.add(row);\n    }\n  }\n","date":"2020-06-10 10:31:04","endLine":97,"groupId":"1794","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/02/c6efd89569e4bf4ae46100968f14c6dd78fcf1.src","preCode":"  public void setup()\n  {\n    ComplexMetrics.registerSerde(\"hyperUnique\", new HyperUniquesSerde());\n\n    rows = new ArrayList<InputRow>();\n    schemaInfo = BenchmarkSchemas.SCHEMA_MAP.get(schema);\n\n    BenchmarkDataGenerator gen = new BenchmarkDataGenerator(\n        schemaInfo.getColumnSchemas(),\n        RNG_SEED,\n        schemaInfo.getDataInterval(),\n        rowsPerSegment\n    );\n\n    for (int i = 0; i < rowsPerSegment; i++) {\n      InputRow row = gen.nextRow();\n      if (i % 10000 == 0) {\n        log.info(i + \" rows generated.\");\n      }\n      rows.add(row);\n    }\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/indexing/IndexIngestionBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2020-06-10 10:31:04","commitOrder":2,"curCode":"  public void setup()\n  {\n    log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n\n    ComplexMetrics.registerSerde(\"hyperUnique\", new HyperUniquesSerde());\n\n    rows = new ArrayList<InputRow>();\n    schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(schema);\n\n    int valuesPerTimestamp = 1;\n    switch (rollupOpportunity) {\n      case \"moderate\":\n        valuesPerTimestamp = 1000;\n        break;\n      case \"high\":\n        valuesPerTimestamp = 10000;\n        break;\n\n    }\n\n    DataGenerator gen = new DataGenerator(\n        schemaInfo.getColumnSchemas(),\n        RNG_SEED,\n        schemaInfo.getDataInterval().getStartMillis(),\n        valuesPerTimestamp,\n        1000.0\n    );\n\n    for (int i = 0; i < rowsPerSegment; i++) {\n      InputRow row = gen.nextRow();\n      if (i % 10000 == 0) {\n        log.info(i + \" rows generated.\");\n      }\n      rows.add(row);\n    }\n  }\n","date":"2020-06-10 10:31:04","endLine":133,"groupId":"10831","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5b/1a0ca6d6f41bd0f7b650c58fca7b33a3ff569a.src","preCode":"  public void setup()\n  {\n    log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n\n    ComplexMetrics.registerSerde(\"hyperUnique\", new HyperUniquesSerde());\n\n    rows = new ArrayList<InputRow>();\n    schemaInfo = BenchmarkSchemas.SCHEMA_MAP.get(schema);\n\n    int valuesPerTimestamp = 1;\n    switch (rollupOpportunity) {\n      case \"moderate\":\n        valuesPerTimestamp = 1000;\n        break;\n      case \"high\":\n        valuesPerTimestamp = 10000;\n        break;\n\n    }\n\n    BenchmarkDataGenerator gen = new BenchmarkDataGenerator(\n        schemaInfo.getColumnSchemas(),\n        RNG_SEED,\n        schemaInfo.getDataInterval().getStartMillis(),\n        valuesPerTimestamp,\n        1000.0\n    );\n\n    for (int i = 0; i < rowsPerSegment; i++) {\n      InputRow row = gen.nextRow();\n      if (i % 10000 == 0) {\n        log.info(i + \" rows generated.\");\n      }\n      rows.add(row);\n    }\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/indexing/IndexPersistBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"c5d6163c76e565f21d2d829c128c4c97e49f3eb1","commitMessage":"@@@add a GeneratorInputSource to fill up a cluster with generated data for testing (#9946)\n\n* move benchmark data generator into druid-processing.  add a GeneratorInputSource to fill up a cluster with data\n\n* newlines\n\n* make test coverage not fail maybe\n\n* remove useless test\n\n* Update pom.xml\n\n* Update GeneratorInputSourceTest.java\n\n* less passive aggressive test names","date":"2020-06-10 10:31:04","modifiedFileCount":"24","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-01-08 14:18:47","codes":[{"authorDate":"2021-01-08 14:18:47","commitOrder":3,"curCode":"  public void setup() throws JsonProcessingException\n  {\n    ComplexMetrics.registerSerde(\"hyperUnique\", new HyperUniquesSerde());\n\n    schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(schema);\n\n    \r\n    \r\n    appendableIndexSpec = IncrementalIndexCreator.parseIndexType(indexType);\n\n    DataGenerator gen = new DataGenerator(\n        schemaInfo.getColumnSchemas(),\n        RNG_SEED,\n        schemaInfo.getDataInterval().getStartMillis(),\n        IndexPersistBenchmark.getValuesPerTimestamp(rollupOpportunity),\n        1000.0\n    );\n\n    rows = gen.toList(rowsPerSegment);\n  }\n","date":"2021-01-08 14:18:47","endLine":106,"groupId":"101375","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/33/819ef4ad51702c9200c9332673586189f4e096.src","preCode":"  public void setup()\n  {\n    ComplexMetrics.registerSerde(\"hyperUnique\", new HyperUniquesSerde());\n\n    rows = new ArrayList<InputRow>();\n    schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(schema);\n\n    DataGenerator gen = new DataGenerator(\n        schemaInfo.getColumnSchemas(),\n        RNG_SEED,\n        schemaInfo.getDataInterval(),\n        rowsPerSegment\n    );\n\n    for (int i = 0; i < rowsPerSegment; i++) {\n      InputRow row = gen.nextRow();\n      if (i % 10000 == 0) {\n        log.info(i + \" rows generated.\");\n      }\n      rows.add(row);\n    }\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/indexing/IndexIngestionBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2021-01-08 14:18:47","commitOrder":3,"curCode":"  public void setup() throws JsonProcessingException\n  {\n    log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n\n    ComplexMetrics.registerSerde(\"hyperUnique\", new HyperUniquesSerde());\n\n    schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(schema);\n\n    \r\n    \r\n    appendableIndexSpec = IncrementalIndexCreator.parseIndexType(indexType);\n\n    DataGenerator gen = new DataGenerator(\n        schemaInfo.getColumnSchemas(),\n        RNG_SEED,\n        schemaInfo.getDataInterval().getStartMillis(),\n        getValuesPerTimestamp(rollupOpportunity),\n        1000.0\n    );\n\n    rows = gen.toList(rowsPerSegment);\n  }\n","date":"2021-01-08 14:18:47","endLine":127,"groupId":"101375","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/36/79adaac7bde13020253bdcfa48331cf3dfa7ae.src","preCode":"  public void setup()\n  {\n    log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n\n    ComplexMetrics.registerSerde(\"hyperUnique\", new HyperUniquesSerde());\n\n    rows = new ArrayList<InputRow>();\n    schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(schema);\n\n    int valuesPerTimestamp = 1;\n    switch (rollupOpportunity) {\n      case \"moderate\":\n        valuesPerTimestamp = 1000;\n        break;\n      case \"high\":\n        valuesPerTimestamp = 10000;\n        break;\n\n    }\n\n    DataGenerator gen = new DataGenerator(\n        schemaInfo.getColumnSchemas(),\n        RNG_SEED,\n        schemaInfo.getDataInterval().getStartMillis(),\n        valuesPerTimestamp,\n        1000.0\n    );\n\n    for (int i = 0; i < rowsPerSegment; i++) {\n      InputRow row = gen.nextRow();\n      if (i % 10000 == 0) {\n        log.info(i + \" rows generated.\");\n      }\n      rows.add(row);\n    }\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/indexing/IndexPersistBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"08ab82f55ca856d60dfe1088c1c0393428b0bb6d","commitMessage":"@@@IncrementalIndex Tests and Benchmarks Parametrization (#10593)\n\n* Remove redundant IncrementalIndex.Builder\n\n* Parametrize incremental index tests and benchmarks\n\n- Reveal and fix a bug in OffheapIncrementalIndex\n\n* Fix forbiddenapis error: Forbidden method invocation: java.lang.String#format(java.lang.String. java.lang.Object[]) [Uses default locale]\n\n* Fix Intellij errors: declared exception is never thrown\n\n* Add documentation and validate before closing objects on tearDown.\n\n* Add documentation to OffheapIncrementalIndexTestSpec\n\n* Doc corrections and minor changes.\n\n* Add logging for generated rows.\n\n* Refactor new tests/benchmarks.\n\n* Improve IncrementalIndexCreator documentation\n\n* Add required tests for DataGenerator\n\n* Revert \"rollupOpportunity\" to be a string","date":"2021-01-08 14:18:47","modifiedFileCount":"62","status":"M","submitter":"Liran Funaro"}]
