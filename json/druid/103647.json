[{"authorTime":"2020-02-06 07:33:42","codes":[{"authorDate":"2020-07-21 04:43:13","commitOrder":12,"curCode":"  protected void doTestQuery(String dataSource, String queryFilePath, int timesToRun)\n  {\n    try {\n      String queryResponseTemplate;\n      try {\n        InputStream is = AbstractITBatchIndexTest.class.getResourceAsStream(queryFilePath);\n        queryResponseTemplate = IOUtils.toString(is, StandardCharsets.UTF_8);\n      }\n      catch (IOException e) {\n        throw new ISE(e, \"could not read query file: %s\", queryFilePath);\n      }\n\n      queryResponseTemplate = StringUtils.replace(\n          queryResponseTemplate,\n          \"%%DATASOURCE%%\",\n          dataSource + config.getExtraDatasourceNameSuffix()\n      );\n      queryHelper.testQueriesFromString(queryResponseTemplate, timesToRun);\n\n    }\n    catch (Exception e) {\n      LOG.error(e, \"Error while testing\");\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2020-07-21 04:43:13","endLine":160,"groupId":"8441","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestQuery","params":"(StringdataSource@StringqueryFilePath@inttimesToRun)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9a/36015aed1f5e8ad986b3fc02b8f89244d473cb.src","preCode":"  protected void doTestQuery(String dataSource, String queryFilePath, int timesToRun)\n  {\n    try {\n      String queryResponseTemplate;\n      try {\n        InputStream is = AbstractITBatchIndexTest.class.getResourceAsStream(queryFilePath);\n        queryResponseTemplate = IOUtils.toString(is, StandardCharsets.UTF_8);\n      }\n      catch (IOException e) {\n        throw new ISE(e, \"could not read query file: %s\", queryFilePath);\n      }\n\n      queryResponseTemplate = StringUtils.replace(\n          queryResponseTemplate,\n          \"%%DATASOURCE%%\",\n          dataSource + config.getExtraDatasourceNameSuffix()\n      );\n      queryHelper.testQueriesFromString(queryResponseTemplate, timesToRun);\n\n    }\n    catch (Exception e) {\n      LOG.error(e, \"Error while testing\");\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractITBatchIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"B"},{"authorDate":"2020-02-06 07:33:42","commitOrder":12,"curCode":"  void doReindexTest(\n      String baseDataSource,\n      String reindexDataSource,\n      Function<String, String> taskSpecTransform,\n      String reindexTaskFilePath,\n      String queryFilePath\n  ) throws IOException\n  {\n    final String fullBaseDatasourceName = baseDataSource + config.getExtraDatasourceNameSuffix();\n    final String fullReindexDatasourceName = reindexDataSource + config.getExtraDatasourceNameSuffix();\n\n    String taskSpec = StringUtils.replace(\n        getResourceAsString(reindexTaskFilePath),\n        \"%%DATASOURCE%%\",\n        fullBaseDatasourceName\n    );\n\n    taskSpec = StringUtils.replace(\n        taskSpec,\n        \"%%REINDEX_DATASOURCE%%\",\n        fullReindexDatasourceName\n    );\n\n    taskSpec = taskSpecTransform.apply(taskSpec);\n\n    submitTaskAndWait(taskSpec, fullReindexDatasourceName, false, true);\n    try {\n      String queryResponseTemplate;\n      try {\n        InputStream is = AbstractITBatchIndexTest.class.getResourceAsStream(queryFilePath);\n        queryResponseTemplate = IOUtils.toString(is, StandardCharsets.UTF_8);\n      }\n      catch (IOException e) {\n        throw new ISE(e, \"could not read query file: %s\", queryFilePath);\n      }\n\n      queryResponseTemplate = StringUtils.replace(\n          queryResponseTemplate,\n          \"%%DATASOURCE%%\",\n          fullReindexDatasourceName\n      );\n\n      queryHelper.testQueriesFromString(queryResponseTemplate, 2);\n      \r\n      final List<String> dimensions = clientInfoResourceTestClient.getDimensions(\n          fullReindexDatasourceName,\n          \"2013-08-31T00:00:00.000Z/2013-09-10T00:00:00.000Z\"\n      );\n      Assert.assertFalse(dimensions.contains(\"robot\"), \"dimensions : \" + dimensions);\n    }\n    catch (Exception e) {\n      LOG.error(e, \"Error while testing\");\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2020-02-06 07:33:42","endLine":184,"groupId":"5692","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doReindexTest","params":"(StringbaseDataSource@StringreindexDataSource@Function<String@String>taskSpecTransform@StringreindexTaskFilePath@StringqueryFilePath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e8/cf277a07501dfd2e2fa9367302219749d32780.src","preCode":"  void doReindexTest(\n      String baseDataSource,\n      String reindexDataSource,\n      Function<String, String> taskSpecTransform,\n      String reindexTaskFilePath,\n      String queryFilePath\n  ) throws IOException\n  {\n    final String fullBaseDatasourceName = baseDataSource + config.getExtraDatasourceNameSuffix();\n    final String fullReindexDatasourceName = reindexDataSource + config.getExtraDatasourceNameSuffix();\n\n    String taskSpec = StringUtils.replace(\n        getResourceAsString(reindexTaskFilePath),\n        \"%%DATASOURCE%%\",\n        fullBaseDatasourceName\n    );\n\n    taskSpec = StringUtils.replace(\n        taskSpec,\n        \"%%REINDEX_DATASOURCE%%\",\n        fullReindexDatasourceName\n    );\n\n    taskSpec = taskSpecTransform.apply(taskSpec);\n\n    submitTaskAndWait(taskSpec, fullReindexDatasourceName, false, true);\n    try {\n      String queryResponseTemplate;\n      try {\n        InputStream is = AbstractITBatchIndexTest.class.getResourceAsStream(queryFilePath);\n        queryResponseTemplate = IOUtils.toString(is, StandardCharsets.UTF_8);\n      }\n      catch (IOException e) {\n        throw new ISE(e, \"could not read query file: %s\", queryFilePath);\n      }\n\n      queryResponseTemplate = StringUtils.replace(\n          queryResponseTemplate,\n          \"%%DATASOURCE%%\",\n          fullReindexDatasourceName\n      );\n\n      queryHelper.testQueriesFromString(queryResponseTemplate, 2);\n      \r\n      final List<String> dimensions = clientInfoResourceTestClient.getDimensions(\n          fullReindexDatasourceName,\n          \"2013-08-31T00:00:00.000Z/2013-09-10T00:00:00.000Z\"\n      );\n      Assert.assertFalse(dimensions.contains(\"robot\"), \"dimensions : \" + dimensions);\n    }\n    catch (Exception e) {\n      LOG.error(e, \"Error while testing\");\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractITBatchIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"NB"}],"commitId":"0cabc53bd56b49ef32e63ff536d0d193c9144baf","commitMessage":"@@@Add integration tests for Appends (#10186)\n\n* append test\n\n* add append IT\n\n* fix checkstyle\n\n* fix checkstyle\n\n* Remove parallel\n\n* fix checkstyle\n\n* fix\n\n* fix\n\n* address comments\n\n* fix\n\n* fix\n\n* fix\n\n* fix\n\n* fix\n\n* fix\n\n* fix\n\n* fix\n\n* fix\n\n* fix\n\n* fix","date":"2020-07-21 04:43:13","modifiedFileCount":"6","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2020-11-10 09:34:27","codes":[{"authorDate":"2020-11-10 09:34:27","commitOrder":13,"curCode":"  protected void doTestQuery(String dataSource, String queryFilePath)\n  {\n    try {\n      String queryResponseTemplate;\n      try {\n        InputStream is = AbstractITBatchIndexTest.class.getResourceAsStream(queryFilePath);\n        queryResponseTemplate = IOUtils.toString(is, StandardCharsets.UTF_8);\n      }\n      catch (IOException e) {\n        throw new ISE(e, \"could not read query file: %s\", queryFilePath);\n      }\n\n      queryResponseTemplate = StringUtils.replace(\n          queryResponseTemplate,\n          \"%%DATASOURCE%%\",\n          dataSource + config.getExtraDatasourceNameSuffix()\n      );\n      queryHelper.testQueriesFromString(queryResponseTemplate);\n\n    }\n    catch (Exception e) {\n      LOG.error(e, \"Error while testing\");\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2020-11-10 09:34:27","endLine":161,"groupId":"8441","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestQuery","params":"(StringdataSource@StringqueryFilePath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/08/73417ad498b2aafc3b07bdd4b2d041d96bb10c.src","preCode":"  protected void doTestQuery(String dataSource, String queryFilePath, int timesToRun)\n  {\n    try {\n      String queryResponseTemplate;\n      try {\n        InputStream is = AbstractITBatchIndexTest.class.getResourceAsStream(queryFilePath);\n        queryResponseTemplate = IOUtils.toString(is, StandardCharsets.UTF_8);\n      }\n      catch (IOException e) {\n        throw new ISE(e, \"could not read query file: %s\", queryFilePath);\n      }\n\n      queryResponseTemplate = StringUtils.replace(\n          queryResponseTemplate,\n          \"%%DATASOURCE%%\",\n          dataSource + config.getExtraDatasourceNameSuffix()\n      );\n      queryHelper.testQueriesFromString(queryResponseTemplate, timesToRun);\n\n    }\n    catch (Exception e) {\n      LOG.error(e, \"Error while testing\");\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractITBatchIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2020-11-10 09:34:27","commitOrder":13,"curCode":"  void doReindexTest(\n      String baseDataSource,\n      String reindexDataSource,\n      Function<String, String> taskSpecTransform,\n      String reindexTaskFilePath,\n      String queryFilePath\n  ) throws IOException\n  {\n    final String fullBaseDatasourceName = baseDataSource + config.getExtraDatasourceNameSuffix();\n    final String fullReindexDatasourceName = reindexDataSource + config.getExtraDatasourceNameSuffix();\n\n    String taskSpec = StringUtils.replace(\n        getResourceAsString(reindexTaskFilePath),\n        \"%%DATASOURCE%%\",\n        fullBaseDatasourceName\n    );\n\n    taskSpec = StringUtils.replace(\n        taskSpec,\n        \"%%REINDEX_DATASOURCE%%\",\n        fullReindexDatasourceName\n    );\n\n    taskSpec = taskSpecTransform.apply(taskSpec);\n\n    submitTaskAndWait(taskSpec, fullReindexDatasourceName, false, true);\n    try {\n      String queryResponseTemplate;\n      try {\n        InputStream is = AbstractITBatchIndexTest.class.getResourceAsStream(queryFilePath);\n        queryResponseTemplate = IOUtils.toString(is, StandardCharsets.UTF_8);\n      }\n      catch (IOException e) {\n        throw new ISE(e, \"could not read query file: %s\", queryFilePath);\n      }\n\n      queryResponseTemplate = StringUtils.replace(\n          queryResponseTemplate,\n          \"%%DATASOURCE%%\",\n          fullReindexDatasourceName\n      );\n\n      queryHelper.testQueriesFromString(queryResponseTemplate);\n      \r\n      final List<String> dimensions = clientInfoResourceTestClient.getDimensions(\n          fullReindexDatasourceName,\n          \"2013-08-31T00:00:00.000Z/2013-09-10T00:00:00.000Z\"\n      );\n      Assert.assertFalse(dimensions.contains(\"robot\"), \"dimensions : \" + dimensions);\n    }\n    catch (Exception e) {\n      LOG.error(e, \"Error while testing\");\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2020-11-10 09:34:27","endLine":227,"groupId":"5692","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doReindexTest","params":"(StringbaseDataSource@StringreindexDataSource@Function<String@String>taskSpecTransform@StringreindexTaskFilePath@StringqueryFilePath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/08/73417ad498b2aafc3b07bdd4b2d041d96bb10c.src","preCode":"  void doReindexTest(\n      String baseDataSource,\n      String reindexDataSource,\n      Function<String, String> taskSpecTransform,\n      String reindexTaskFilePath,\n      String queryFilePath\n  ) throws IOException\n  {\n    final String fullBaseDatasourceName = baseDataSource + config.getExtraDatasourceNameSuffix();\n    final String fullReindexDatasourceName = reindexDataSource + config.getExtraDatasourceNameSuffix();\n\n    String taskSpec = StringUtils.replace(\n        getResourceAsString(reindexTaskFilePath),\n        \"%%DATASOURCE%%\",\n        fullBaseDatasourceName\n    );\n\n    taskSpec = StringUtils.replace(\n        taskSpec,\n        \"%%REINDEX_DATASOURCE%%\",\n        fullReindexDatasourceName\n    );\n\n    taskSpec = taskSpecTransform.apply(taskSpec);\n\n    submitTaskAndWait(taskSpec, fullReindexDatasourceName, false, true);\n    try {\n      String queryResponseTemplate;\n      try {\n        InputStream is = AbstractITBatchIndexTest.class.getResourceAsStream(queryFilePath);\n        queryResponseTemplate = IOUtils.toString(is, StandardCharsets.UTF_8);\n      }\n      catch (IOException e) {\n        throw new ISE(e, \"could not read query file: %s\", queryFilePath);\n      }\n\n      queryResponseTemplate = StringUtils.replace(\n          queryResponseTemplate,\n          \"%%DATASOURCE%%\",\n          fullReindexDatasourceName\n      );\n\n      queryHelper.testQueriesFromString(queryResponseTemplate, 2);\n      \r\n      final List<String> dimensions = clientInfoResourceTestClient.getDimensions(\n          fullReindexDatasourceName,\n          \"2013-08-31T00:00:00.000Z/2013-09-10T00:00:00.000Z\"\n      );\n      Assert.assertFalse(dimensions.contains(\"robot\"), \"dimensions : \" + dimensions);\n    }\n    catch (Exception e) {\n      LOG.error(e, \"Error while testing\");\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractITBatchIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"cd231d851145041f0638705403c48010deb400e3","commitMessage":"@@@Run integration test queries once (#10564)\n\n* Run integration test queries once\n\n* missed a few","date":"2020-11-10 09:34:27","modifiedFileCount":"13","status":"M","submitter":"Suneet Saldanha"},{"authorTime":"2021-04-09 12:03:00","codes":[{"authorDate":"2020-11-10 09:34:27","commitOrder":14,"curCode":"  protected void doTestQuery(String dataSource, String queryFilePath)\n  {\n    try {\n      String queryResponseTemplate;\n      try {\n        InputStream is = AbstractITBatchIndexTest.class.getResourceAsStream(queryFilePath);\n        queryResponseTemplate = IOUtils.toString(is, StandardCharsets.UTF_8);\n      }\n      catch (IOException e) {\n        throw new ISE(e, \"could not read query file: %s\", queryFilePath);\n      }\n\n      queryResponseTemplate = StringUtils.replace(\n          queryResponseTemplate,\n          \"%%DATASOURCE%%\",\n          dataSource + config.getExtraDatasourceNameSuffix()\n      );\n      queryHelper.testQueriesFromString(queryResponseTemplate);\n\n    }\n    catch (Exception e) {\n      LOG.error(e, \"Error while testing\");\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2020-11-10 09:34:27","endLine":161,"groupId":"103647","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestQuery","params":"(StringdataSource@StringqueryFilePath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/08/73417ad498b2aafc3b07bdd4b2d041d96bb10c.src","preCode":"  protected void doTestQuery(String dataSource, String queryFilePath)\n  {\n    try {\n      String queryResponseTemplate;\n      try {\n        InputStream is = AbstractITBatchIndexTest.class.getResourceAsStream(queryFilePath);\n        queryResponseTemplate = IOUtils.toString(is, StandardCharsets.UTF_8);\n      }\n      catch (IOException e) {\n        throw new ISE(e, \"could not read query file: %s\", queryFilePath);\n      }\n\n      queryResponseTemplate = StringUtils.replace(\n          queryResponseTemplate,\n          \"%%DATASOURCE%%\",\n          dataSource + config.getExtraDatasourceNameSuffix()\n      );\n      queryHelper.testQueriesFromString(queryResponseTemplate);\n\n    }\n    catch (Exception e) {\n      LOG.error(e, \"Error while testing\");\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractITBatchIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"N"},{"authorDate":"2021-04-09 12:03:00","commitOrder":14,"curCode":"  void doReindexTest(\n      String baseDataSource,\n      String reindexDataSource,\n      Function<String, String> taskSpecTransform,\n      String reindexTaskFilePath,\n      String queryFilePath,\n      Pair<Boolean, Boolean> segmentAvailabilityConfirmationPair\n  ) throws IOException\n  {\n    final String fullBaseDatasourceName = baseDataSource + config.getExtraDatasourceNameSuffix();\n    final String fullReindexDatasourceName = reindexDataSource + config.getExtraDatasourceNameSuffix();\n\n    String taskSpec = StringUtils.replace(\n        getResourceAsString(reindexTaskFilePath),\n        \"%%DATASOURCE%%\",\n        fullBaseDatasourceName\n    );\n\n    taskSpec = StringUtils.replace(\n        taskSpec,\n        \"%%REINDEX_DATASOURCE%%\",\n        fullReindexDatasourceName\n    );\n\n    taskSpec = taskSpecTransform.apply(taskSpec);\n\n    submitTaskAndWait(\n        taskSpec,\n        fullReindexDatasourceName,\n        false,\n        true,\n        segmentAvailabilityConfirmationPair\n    );\n    try {\n      String queryResponseTemplate;\n      try {\n        InputStream is = AbstractITBatchIndexTest.class.getResourceAsStream(queryFilePath);\n        queryResponseTemplate = IOUtils.toString(is, StandardCharsets.UTF_8);\n      }\n      catch (IOException e) {\n        throw new ISE(e, \"could not read query file: %s\", queryFilePath);\n      }\n\n      queryResponseTemplate = StringUtils.replace(\n          queryResponseTemplate,\n          \"%%DATASOURCE%%\",\n          fullReindexDatasourceName\n      );\n\n      queryHelper.testQueriesFromString(queryResponseTemplate);\n      \r\n      final List<String> dimensions = clientInfoResourceTestClient.getDimensions(\n          fullReindexDatasourceName,\n          \"2013-08-31T00:00:00.000Z/2013-09-10T00:00:00.000Z\"\n      );\n      Assert.assertFalse(dimensions.contains(\"robot\"), \"dimensions : \" + dimensions);\n    }\n    catch (Exception e) {\n      LOG.error(e, \"Error while testing\");\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2021-04-09 12:03:00","endLine":263,"groupId":"103647","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doReindexTest","params":"(StringbaseDataSource@StringreindexDataSource@Function<String@String>taskSpecTransform@StringreindexTaskFilePath@StringqueryFilePath@Pair<Boolean@Boolean>segmentAvailabilityConfirmationPair)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ac/ab50df3d3562275dd8deecb59608b5f7b6194d.src","preCode":"  void doReindexTest(\n      String baseDataSource,\n      String reindexDataSource,\n      Function<String, String> taskSpecTransform,\n      String reindexTaskFilePath,\n      String queryFilePath\n  ) throws IOException\n  {\n    final String fullBaseDatasourceName = baseDataSource + config.getExtraDatasourceNameSuffix();\n    final String fullReindexDatasourceName = reindexDataSource + config.getExtraDatasourceNameSuffix();\n\n    String taskSpec = StringUtils.replace(\n        getResourceAsString(reindexTaskFilePath),\n        \"%%DATASOURCE%%\",\n        fullBaseDatasourceName\n    );\n\n    taskSpec = StringUtils.replace(\n        taskSpec,\n        \"%%REINDEX_DATASOURCE%%\",\n        fullReindexDatasourceName\n    );\n\n    taskSpec = taskSpecTransform.apply(taskSpec);\n\n    submitTaskAndWait(taskSpec, fullReindexDatasourceName, false, true);\n    try {\n      String queryResponseTemplate;\n      try {\n        InputStream is = AbstractITBatchIndexTest.class.getResourceAsStream(queryFilePath);\n        queryResponseTemplate = IOUtils.toString(is, StandardCharsets.UTF_8);\n      }\n      catch (IOException e) {\n        throw new ISE(e, \"could not read query file: %s\", queryFilePath);\n      }\n\n      queryResponseTemplate = StringUtils.replace(\n          queryResponseTemplate,\n          \"%%DATASOURCE%%\",\n          fullReindexDatasourceName\n      );\n\n      queryHelper.testQueriesFromString(queryResponseTemplate);\n      \r\n      final List<String> dimensions = clientInfoResourceTestClient.getDimensions(\n          fullReindexDatasourceName,\n          \"2013-08-31T00:00:00.000Z/2013-09-10T00:00:00.000Z\"\n      );\n      Assert.assertFalse(dimensions.contains(\"robot\"), \"dimensions : \" + dimensions);\n    }\n    catch (Exception e) {\n      LOG.error(e, \"Error while testing\");\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractITBatchIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"}],"commitId":"8264203cee688607091232897749e959e7706010","commitMessage":"@@@Allow client to configure batch ingestion task to wait to complete until segments are confirmed to be available by other (#10676)\n\n* Add ability to wait for segment availability for batch jobs\n\n* IT updates\n\n* fix queries in legacy hadoop IT\n\n* Fix broken indexing integration tests\n\n* address an lgtm flag\n\n* spell checker still flagging for hadoop doc. adding under that file header too\n\n* fix compaction IT\n\n* Updates to wait for availability method\n\n* improve unit testing for patch\n\n* fix bad indentation\n\n* refactor waitForSegmentAvailability\n\n* Fixes based off of review comments\n\n* cleanup to get compile after merging with master\n\n* fix failing test after previous logic update\n\n* add back code that must have gotten deleted during conflict resolution\n\n* update some logging code\n\n* fixes to get compilation working after merge with master\n\n* reset interrupt flag in catch block after code review pointed it out\n\n* small changes following self-review\n\n* fixup some issues brought on by merge with master\n\n* small changes after review\n\n* cleanup a little bit after merge with master\n\n* Fix potential resource leak in AbstractBatchIndexTask\n\n* syntax fix\n\n* Add a Compcation TuningConfig type\n\n* add docs stipulating the lack of support by Compaction tasks for the new config\n\n* Fixup compilation errors after merge with master\n\n* Remove erreneous newline","date":"2021-04-09 12:03:00","modifiedFileCount":"106","status":"M","submitter":"Lucas Capistrant"}]
