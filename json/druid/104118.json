[{"authorTime":"2019-06-01 08:16:01","codes":[{"authorDate":"2019-06-01 08:16:01","commitOrder":1,"curCode":"  public void testDiscoveringInitialTasksFailRecoveryFail() throws Exception\n  {\n    expect(spec.isSuspended()).andReturn(false).anyTimes();\n    expect(recordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID)).anyTimes();\n    expect(taskStorage.getActiveTasks()).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).times(3);\n    expect(taskStorage.getActiveTasks()).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n    expect(taskQueue.add(anyObject())).andReturn(true).anyTimes();\n\n    replayAll();\n\n    SeekableStreamSupervisor supervisor = new TestSeekableStreamSupervisor();\n    supervisor.start();\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.DISCOVERING_INITIAL_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    List<SupervisorStateManager.ExceptionEvent> exceptionEvents = supervisor.stateManager.getExceptionEvents();\n    Assert.assertEquals(1, exceptionEvents.size());\n    Assert.assertFalse(((SeekableStreamExceptionEvent) exceptionEvents.get(0)).isStreamException());\n    Assert.assertEquals(IllegalStateException.class.getName(), exceptionEvents.get(0).getExceptionClass());\n    Assert.assertEquals(EXCEPTION_MSG, exceptionEvents.get(0).getMessage());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.DISCOVERING_INITIAL_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(2, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    verifyAll();\n  }\n","date":"2019-06-01 08:16:01","endLine":391,"groupId":"18619","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiscoveringInitialTasksFailRecoveryFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/10/58eb01e073d33c89742689aac409cfc5652abf.src","preCode":"  public void testDiscoveringInitialTasksFailRecoveryFail() throws Exception\n  {\n    expect(spec.isSuspended()).andReturn(false).anyTimes();\n    expect(recordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID)).anyTimes();\n    expect(taskStorage.getActiveTasks()).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).times(3);\n    expect(taskStorage.getActiveTasks()).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n    expect(taskQueue.add(anyObject())).andReturn(true).anyTimes();\n\n    replayAll();\n\n    SeekableStreamSupervisor supervisor = new TestSeekableStreamSupervisor();\n    supervisor.start();\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.DISCOVERING_INITIAL_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    List<SupervisorStateManager.ExceptionEvent> exceptionEvents = supervisor.stateManager.getExceptionEvents();\n    Assert.assertEquals(1, exceptionEvents.size());\n    Assert.assertFalse(((SeekableStreamExceptionEvent) exceptionEvents.get(0)).isStreamException());\n    Assert.assertEquals(IllegalStateException.class.getName(), exceptionEvents.get(0).getExceptionClass());\n    Assert.assertEquals(EXCEPTION_MSG, exceptionEvents.get(0).getMessage());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.DISCOVERING_INITIAL_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(2, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    verifyAll();\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorStateTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"B"},{"authorDate":"2019-06-01 08:16:01","commitOrder":1,"curCode":"  public void testCreatingTasksFailRecoveryFail() throws Exception\n  {\n    expect(spec.isSuspended()).andReturn(false).anyTimes();\n    expect(recordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID)).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    expect(taskQueue.add(anyObject())).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n    expect(taskQueue.add(anyObject())).andReturn(true).times(3);\n    expect(taskQueue.add(anyObject())).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n\n    replayAll();\n\n    SeekableStreamSupervisor supervisor = new TestSeekableStreamSupervisor();\n    supervisor.start();\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.CREATING_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    List<SupervisorStateManager.ExceptionEvent> exceptionEvents = supervisor.stateManager.getExceptionEvents();\n    Assert.assertEquals(1, exceptionEvents.size());\n    Assert.assertFalse(((SeekableStreamExceptionEvent) exceptionEvents.get(0)).isStreamException());\n    Assert.assertEquals(IllegalStateException.class.getName(), exceptionEvents.get(0).getExceptionClass());\n    Assert.assertEquals(EXCEPTION_MSG, exceptionEvents.get(0).getMessage());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.CREATING_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(2, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    verifyAll();\n  }\n","date":"2019-06-01 08:16:01","endLine":468,"groupId":"18619","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatingTasksFailRecoveryFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/10/58eb01e073d33c89742689aac409cfc5652abf.src","preCode":"  public void testCreatingTasksFailRecoveryFail() throws Exception\n  {\n    expect(spec.isSuspended()).andReturn(false).anyTimes();\n    expect(recordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID)).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    expect(taskQueue.add(anyObject())).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n    expect(taskQueue.add(anyObject())).andReturn(true).times(3);\n    expect(taskQueue.add(anyObject())).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n\n    replayAll();\n\n    SeekableStreamSupervisor supervisor = new TestSeekableStreamSupervisor();\n    supervisor.start();\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.CREATING_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    List<SupervisorStateManager.ExceptionEvent> exceptionEvents = supervisor.stateManager.getExceptionEvents();\n    Assert.assertEquals(1, exceptionEvents.size());\n    Assert.assertFalse(((SeekableStreamExceptionEvent) exceptionEvents.get(0)).isStreamException());\n    Assert.assertEquals(IllegalStateException.class.getName(), exceptionEvents.get(0).getExceptionClass());\n    Assert.assertEquals(EXCEPTION_MSG, exceptionEvents.get(0).getMessage());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.CREATING_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(2, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    verifyAll();\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorStateTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":394,"status":"B"}],"commitId":"8032c4add8f78d0c15044d0847201c618e27dc25","commitMessage":"@@@Add errors and state to stream supervisor status API endpoint (#7428)\n\n* Add state and error tracking for seekable stream supervisors\n\n* Fixed nits in docs\n\n* Made inner class static and updated spec test with jackson inject\n\n* Review changes\n\n* Remove redundant config param in supervisor\n\n* Style\n\n* Applied some of Jon's recommendations\n\n* Add transience field\n\n* write test\n\n* implement code review changes except for reconsidering logic of markRunFinishedAndEvaluateHealth()\n\n* remove transience reporting and fix SeekableStreamSupervisorStateManager impl\n\n* move call to stateManager.markRunFinished() from RunNotice to runInternal() for tests\n\n* remove stateHistory because it wasn't adding much value.  some fixes.  and add more tests\n\n* fix tests\n\n* code review changes and add HTTP health check status\n\n* fix test failure\n\n* refactor to split into a generic SupervisorStateManager and a specific SeekableStreamSupervisorStateManager\n\n* fixup after merge\n\n* code review changes - add additional docs\n\n* cleanup KafkaIndexTaskTest\n\n* add additional documentation for Kinesis indexing\n\n* remove unused throws class\n","date":"2019-06-01 08:16:01","modifiedFileCount":"32","status":"B","submitter":"Justin Borromeo"},{"authorTime":"2019-07-07 00:33:12","codes":[{"authorDate":"2019-07-07 00:33:12","commitOrder":2,"curCode":"  public void testDiscoveringInitialTasksFailRecoveryFail() throws Exception\n  {\n    EasyMock.expect(spec.isSuspended()).andReturn(false).anyTimes();\n    EasyMock.expect(recordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID)).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).times(3);\n    EasyMock.expect(taskStorage.getActiveTasks()).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject())).andReturn(true).anyTimes();\n\n    replayAll();\n\n    SeekableStreamSupervisor supervisor = new TestSeekableStreamSupervisor();\n    supervisor.start();\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.DISCOVERING_INITIAL_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    List<SupervisorStateManager.ExceptionEvent> exceptionEvents = supervisor.stateManager.getExceptionEvents();\n    Assert.assertEquals(1, exceptionEvents.size());\n    Assert.assertFalse(((SeekableStreamExceptionEvent) exceptionEvents.get(0)).isStreamException());\n    Assert.assertEquals(IllegalStateException.class.getName(), exceptionEvents.get(0).getExceptionClass());\n    Assert.assertEquals(EXCEPTION_MSG, exceptionEvents.get(0).getMessage());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.DISCOVERING_INITIAL_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(2, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    verifyAll();\n  }\n","date":"2019-07-07 00:33:12","endLine":397,"groupId":"18619","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiscoveringInitialTasksFailRecoveryFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ae/55fffc637e022c69a38ff1b558c20d278e3764.src","preCode":"  public void testDiscoveringInitialTasksFailRecoveryFail() throws Exception\n  {\n    expect(spec.isSuspended()).andReturn(false).anyTimes();\n    expect(recordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID)).anyTimes();\n    expect(taskStorage.getActiveTasks()).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).times(3);\n    expect(taskStorage.getActiveTasks()).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n    expect(taskQueue.add(anyObject())).andReturn(true).anyTimes();\n\n    replayAll();\n\n    SeekableStreamSupervisor supervisor = new TestSeekableStreamSupervisor();\n    supervisor.start();\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.DISCOVERING_INITIAL_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    List<SupervisorStateManager.ExceptionEvent> exceptionEvents = supervisor.stateManager.getExceptionEvents();\n    Assert.assertEquals(1, exceptionEvents.size());\n    Assert.assertFalse(((SeekableStreamExceptionEvent) exceptionEvents.get(0)).isStreamException());\n    Assert.assertEquals(IllegalStateException.class.getName(), exceptionEvents.get(0).getExceptionClass());\n    Assert.assertEquals(EXCEPTION_MSG, exceptionEvents.get(0).getMessage());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.DISCOVERING_INITIAL_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(2, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    verifyAll();\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorStateTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"M"},{"authorDate":"2019-07-07 00:33:12","commitOrder":2,"curCode":"  public void testCreatingTasksFailRecoveryFail() throws Exception\n  {\n    EasyMock.expect(spec.isSuspended()).andReturn(false).anyTimes();\n    EasyMock.expect(recordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID)).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject())).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject())).andReturn(true).times(3);\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject())).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n\n    replayAll();\n\n    SeekableStreamSupervisor supervisor = new TestSeekableStreamSupervisor();\n    supervisor.start();\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.CREATING_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    List<SupervisorStateManager.ExceptionEvent> exceptionEvents = supervisor.stateManager.getExceptionEvents();\n    Assert.assertEquals(1, exceptionEvents.size());\n    Assert.assertFalse(((SeekableStreamExceptionEvent) exceptionEvents.get(0)).isStreamException());\n    Assert.assertEquals(IllegalStateException.class.getName(), exceptionEvents.get(0).getExceptionClass());\n    Assert.assertEquals(EXCEPTION_MSG, exceptionEvents.get(0).getMessage());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.CREATING_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(2, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    verifyAll();\n  }\n","date":"2019-07-07 00:33:12","endLine":474,"groupId":"18619","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatingTasksFailRecoveryFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ae/55fffc637e022c69a38ff1b558c20d278e3764.src","preCode":"  public void testCreatingTasksFailRecoveryFail() throws Exception\n  {\n    expect(spec.isSuspended()).andReturn(false).anyTimes();\n    expect(recordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID)).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    expect(taskQueue.add(anyObject())).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n    expect(taskQueue.add(anyObject())).andReturn(true).times(3);\n    expect(taskQueue.add(anyObject())).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n\n    replayAll();\n\n    SeekableStreamSupervisor supervisor = new TestSeekableStreamSupervisor();\n    supervisor.start();\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.CREATING_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    List<SupervisorStateManager.ExceptionEvent> exceptionEvents = supervisor.stateManager.getExceptionEvents();\n    Assert.assertEquals(1, exceptionEvents.size());\n    Assert.assertFalse(((SeekableStreamExceptionEvent) exceptionEvents.get(0)).isStreamException());\n    Assert.assertEquals(IllegalStateException.class.getName(), exceptionEvents.get(0).getExceptionClass());\n    Assert.assertEquals(EXCEPTION_MSG, exceptionEvents.get(0).getMessage());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.CREATING_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(2, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    verifyAll();\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorStateTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"}],"commitId":"1166bbcb75d432817715fdd429737f86730b5591","commitMessage":"@@@Remove static imports from tests (#8036)\n\nMake static imports forbidden in tests and remove all occurrences to be\nconsistent with the non-test code.\n\nAlso.  various changes to files affected by above:\n- Reformat to adhere to druid style guide\n- Fix various IntelliJ warnings\n- Fix various SonarLint warnings (e.g..  the expected/actual args to\n  Assert.assertEquals() were flipped)","date":"2019-07-07 00:33:12","modifiedFileCount":"98","status":"M","submitter":"Chi Cao Minh"},{"authorTime":"2019-09-27 07:15:24","codes":[{"authorDate":"2019-09-27 07:15:24","commitOrder":3,"curCode":"  public void testDiscoveringInitialTasksFailRecoveryFail() throws Exception\n  {\n    EasyMock.expect(spec.isSuspended()).andReturn(false).anyTimes();\n    EasyMock.expect(recordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID)).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).times(3);\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject())).andReturn(true).anyTimes();\n\n    replayAll();\n\n    SeekableStreamSupervisor supervisor = new TestSeekableStreamSupervisor();\n    supervisor.start();\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.DISCOVERING_INITIAL_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    List<SupervisorStateManager.ExceptionEvent> exceptionEvents = supervisor.stateManager.getExceptionEvents();\n    Assert.assertEquals(1, exceptionEvents.size());\n    Assert.assertFalse(((SeekableStreamExceptionEvent) exceptionEvents.get(0)).isStreamException());\n    Assert.assertEquals(IllegalStateException.class.getName(), exceptionEvents.get(0).getExceptionClass());\n    Assert.assertEquals(EXCEPTION_MSG, exceptionEvents.get(0).getMessage());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.DISCOVERING_INITIAL_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(2, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    verifyAll();\n  }\n","date":"2019-09-27 07:15:24","endLine":397,"groupId":"104118","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiscoveringInitialTasksFailRecoveryFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/32/4932a2df8bbcd8be0f16b8c82016c86b6dd0ef.src","preCode":"  public void testDiscoveringInitialTasksFailRecoveryFail() throws Exception\n  {\n    EasyMock.expect(spec.isSuspended()).andReturn(false).anyTimes();\n    EasyMock.expect(recordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID)).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).times(3);\n    EasyMock.expect(taskStorage.getActiveTasks()).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject())).andReturn(true).anyTimes();\n\n    replayAll();\n\n    SeekableStreamSupervisor supervisor = new TestSeekableStreamSupervisor();\n    supervisor.start();\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.DISCOVERING_INITIAL_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    List<SupervisorStateManager.ExceptionEvent> exceptionEvents = supervisor.stateManager.getExceptionEvents();\n    Assert.assertEquals(1, exceptionEvents.size());\n    Assert.assertFalse(((SeekableStreamExceptionEvent) exceptionEvents.get(0)).isStreamException());\n    Assert.assertEquals(IllegalStateException.class.getName(), exceptionEvents.get(0).getExceptionClass());\n    Assert.assertEquals(EXCEPTION_MSG, exceptionEvents.get(0).getMessage());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.DISCOVERING_INITIAL_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(2, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    verifyAll();\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorStateTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"M"},{"authorDate":"2019-09-27 07:15:24","commitOrder":3,"curCode":"  public void testCreatingTasksFailRecoveryFail() throws Exception\n  {\n    EasyMock.expect(spec.isSuspended()).andReturn(false).anyTimes();\n    EasyMock.expect(recordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID)).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes();\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject())).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject())).andReturn(true).times(3);\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject())).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n\n    replayAll();\n\n    SeekableStreamSupervisor supervisor = new TestSeekableStreamSupervisor();\n    supervisor.start();\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.CREATING_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    List<SupervisorStateManager.ExceptionEvent> exceptionEvents = supervisor.stateManager.getExceptionEvents();\n    Assert.assertEquals(1, exceptionEvents.size());\n    Assert.assertFalse(((SeekableStreamExceptionEvent) exceptionEvents.get(0)).isStreamException());\n    Assert.assertEquals(IllegalStateException.class.getName(), exceptionEvents.get(0).getExceptionClass());\n    Assert.assertEquals(EXCEPTION_MSG, exceptionEvents.get(0).getMessage());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.CREATING_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(2, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    verifyAll();\n  }\n","date":"2019-09-27 07:15:24","endLine":474,"groupId":"104118","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatingTasksFailRecoveryFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/32/4932a2df8bbcd8be0f16b8c82016c86b6dd0ef.src","preCode":"  public void testCreatingTasksFailRecoveryFail() throws Exception\n  {\n    EasyMock.expect(spec.isSuspended()).andReturn(false).anyTimes();\n    EasyMock.expect(recordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID)).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject())).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject())).andReturn(true).times(3);\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject())).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3);\n\n    replayAll();\n\n    SeekableStreamSupervisor supervisor = new TestSeekableStreamSupervisor();\n    supervisor.start();\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.CREATING_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    List<SupervisorStateManager.ExceptionEvent> exceptionEvents = supervisor.stateManager.getExceptionEvents();\n    Assert.assertEquals(1, exceptionEvents.size());\n    Assert.assertFalse(((SeekableStreamExceptionEvent) exceptionEvents.get(0)).isStreamException());\n    Assert.assertEquals(IllegalStateException.class.getName(), exceptionEvents.get(0).getExceptionClass());\n    Assert.assertEquals(EXCEPTION_MSG, exceptionEvents.get(0).getMessage());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(SeekableStreamState.CREATING_TASKS, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(2, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState().getBasicState());\n    Assert.assertEquals(3, supervisor.stateManager.getExceptionEvents().size());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertTrue(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.RUNNING, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    supervisor.runInternal();\n    Assert.assertFalse(supervisor.stateManager.isHealthy());\n    Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR, supervisor.stateManager.getSupervisorState());\n    Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun());\n\n    verifyAll();\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorStateTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"}],"commitId":"7f2b6577ef19f18523e8353336ad496e8dc4a270","commitMessage":"@@@get active task by datasource when supervisor discover tasks (#8450)\n\n* get active task by datasource when supervisor discover tasks\n\n* fix ut\n\n* fix ut\n\n* fix ut\n\n* remove unnecessary condition check\n\n* fix ut\n\n* remove stream in hot loop\n","date":"2019-09-27 07:15:24","modifiedFileCount":"7","status":"M","submitter":"elloooooo"}]
