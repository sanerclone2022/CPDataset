[{"authorTime":"2018-10-15 11:37:37","codes":[{"authorDate":"2018-10-15 11:37:37","commitOrder":1,"curCode":"  public <OutType> Yielder<OutType> toYielder(\n      final OutType initValue,\n      final YieldingAccumulator<OutType, T> accumulator\n  )\n  {\n    try {\n      wrapper.before();\n      return wrapper.wrap(new Supplier<Yielder<OutType>>()\n      {\n        @Override\n        public Yielder<OutType> get()\n        {\n          return new WrappingYielder<>(baseSequence.toYielder(initValue, accumulator), wrapper);\n        }\n      });\n    }\n    catch (Throwable t) {\n      \r\n      try {\n        wrapper.after(false, t);\n      }\n      catch (Exception e) {\n        t.addSuppressed(e);\n      }\n      throw Throwables.propagate(t);\n    }\n  }\n","date":"2018-10-15 11:37:37","endLine":101,"groupId":"12584","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toYielder","params":"(finalOutTypeinitValue@finalYieldingAccumulator<OutType@T>accumulator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/e43bfa67859395f687f033f8670a5b141f989d.src","preCode":"  public <OutType> Yielder<OutType> toYielder(\n      final OutType initValue,\n      final YieldingAccumulator<OutType, T> accumulator\n  )\n  {\n    try {\n      wrapper.before();\n      return wrapper.wrap(new Supplier<Yielder<OutType>>()\n      {\n        @Override\n        public Yielder<OutType> get()\n        {\n          return new WrappingYielder<>(baseSequence.toYielder(initValue, accumulator), wrapper);\n        }\n      });\n    }\n    catch (Throwable t) {\n      \r\n      try {\n        wrapper.after(false, t);\n      }\n      catch (Exception e) {\n        t.addSuppressed(e);\n      }\n      throw Throwables.propagate(t);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/druid/java/util/common/guava/WrappingSequence.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2018-10-15 11:37:37","commitOrder":1,"curCode":"  public Yielder<OutType> next(final OutType initValue)\n  {\n    try {\n      return wrapper.wrap(new Supplier<Yielder<OutType>>()\n      {\n        @Override\n        public Yielder<OutType> get()\n        {\n          return new WrappingYielder<>(baseYielder.next(initValue), wrapper);\n        }\n      });\n    }\n    catch (Throwable t) {\n      \r\n      try {\n        wrapper.after(false, t);\n      }\n      catch (Exception e) {\n        t.addSuppressed(e);\n      }\n      throw Throwables.propagate(t);\n    }\n  }\n","date":"2018-10-15 11:37:37","endLine":67,"groupId":"11636","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"next","params":"(finalOutTypeinitValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ed/442db7ca972ba4b03e1360a0ff5ff2dd8b048e.src","preCode":"  public Yielder<OutType> next(final OutType initValue)\n  {\n    try {\n      return wrapper.wrap(new Supplier<Yielder<OutType>>()\n      {\n        @Override\n        public Yielder<OutType> get()\n        {\n          return new WrappingYielder<>(baseYielder.next(initValue), wrapper);\n        }\n      });\n    }\n    catch (Throwable t) {\n      \r\n      try {\n        wrapper.after(false, t);\n      }\n      catch (Exception e) {\n        t.addSuppressed(e);\n      }\n      throw Throwables.propagate(t);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/druid/java/util/common/guava/WrappingYielder.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"}],"commitId":"84598fba3b283cbfd6a5addd2602c7b12ba8c00c","commitMessage":"@@@combine druid-api.  druid-common.  java-util into druid-core (#6443)\n\n* combine druid-api.  druid-common.  java-util\n\n* spacing\n","date":"2018-10-15 11:37:37","modifiedFileCount":"0","status":"B","submitter":"Clint Wylie"},{"authorTime":"2019-03-15 05:28:33","codes":[{"authorDate":"2019-03-15 05:28:33","commitOrder":2,"curCode":"  public <OutType> Yielder<OutType> toYielder(\n      final OutType initValue,\n      final YieldingAccumulator<OutType, T> accumulator\n  )\n  {\n    try {\n      wrapper.before();\n      return wrapper.wrap(new Supplier<Yielder<OutType>>()\n      {\n        @Override\n        public Yielder<OutType> get()\n        {\n          return new WrappingYielder<>(baseSequence.toYielder(initValue, accumulator), wrapper);\n        }\n      });\n    }\n    catch (Throwable t) {\n      \r\n      try {\n        wrapper.after(false, t);\n      }\n      catch (Exception e) {\n        t.addSuppressed(e);\n      }\n      Throwables.propagateIfPossible(t);\n      throw new RuntimeException(t);\n    }\n  }\n","date":"2019-03-15 05:28:33","endLine":103,"groupId":"12584","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"toYielder","params":"(finalOutTypeinitValue@finalYieldingAccumulator<OutType@T>accumulator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/889fc5997eb41462101744f95ac1ef8c3d36d6.src","preCode":"  public <OutType> Yielder<OutType> toYielder(\n      final OutType initValue,\n      final YieldingAccumulator<OutType, T> accumulator\n  )\n  {\n    try {\n      wrapper.before();\n      return wrapper.wrap(new Supplier<Yielder<OutType>>()\n      {\n        @Override\n        public Yielder<OutType> get()\n        {\n          return new WrappingYielder<>(baseSequence.toYielder(initValue, accumulator), wrapper);\n        }\n      });\n    }\n    catch (Throwable t) {\n      \r\n      try {\n        wrapper.after(false, t);\n      }\n      catch (Exception e) {\n        t.addSuppressed(e);\n      }\n      throw Throwables.propagate(t);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/druid/java/util/common/guava/WrappingSequence.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2019-03-15 05:28:33","commitOrder":2,"curCode":"  public Yielder<OutType> next(final OutType initValue)\n  {\n    try {\n      return wrapper.wrap(new Supplier<Yielder<OutType>>()\n      {\n        @Override\n        public Yielder<OutType> get()\n        {\n          return new WrappingYielder<>(baseYielder.next(initValue), wrapper);\n        }\n      });\n    }\n    catch (Throwable t) {\n      \r\n      try {\n        wrapper.after(false, t);\n      }\n      catch (Exception e) {\n        t.addSuppressed(e);\n      }\n      throw new RuntimeException(t);\n    }\n  }\n","date":"2019-03-15 05:28:33","endLine":67,"groupId":"11636","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"next","params":"(finalOutTypeinitValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e2/d637398c84811c97a030ef02491b114e407aa4.src","preCode":"  public Yielder<OutType> next(final OutType initValue)\n  {\n    try {\n      return wrapper.wrap(new Supplier<Yielder<OutType>>()\n      {\n        @Override\n        public Yielder<OutType> get()\n        {\n          return new WrappingYielder<>(baseYielder.next(initValue), wrapper);\n        }\n      });\n    }\n    catch (Throwable t) {\n      \r\n      try {\n        wrapper.after(false, t);\n      }\n      catch (Exception e) {\n        t.addSuppressed(e);\n      }\n      throw Throwables.propagate(t);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/druid/java/util/common/guava/WrappingYielder.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"7ada1c49f9735a37808f3ed7656d93ae88b8b925","commitMessage":"@@@Prohibit Throwables.propagate() (#7121)\n\n* Throw caught exception.\n\n* Throw caught exceptions.\n\n* Related checkstyle rule is added to prevent further bugs.\n\n* RuntimeException() is used instead of Throwables.propagate().\n\n* Missing import is added.\n\n* Throwables are propogated if possible.\n\n* Throwables are propogated if possible.\n\n* Throwables are propogated if possible.\n\n* Throwables are propogated if possible.\n\n* * Checkstyle definition is improved.\n* Throwables.propagate() usages are removed.\n\n* Checkstyle pattern is changed for only scanning \"Throwables.propagate(\" instead of checking lookbehind.\n\n* Throwable is kept before firing a Runtime Exception.\n\n* Fix unused assignments.\n","date":"2019-03-15 05:28:33","modifiedFileCount":"228","status":"M","submitter":"Furkan KAMACI"},{"authorTime":"2019-12-07 05:42:53","codes":[{"authorDate":"2019-03-15 05:28:33","commitOrder":3,"curCode":"  public <OutType> Yielder<OutType> toYielder(\n      final OutType initValue,\n      final YieldingAccumulator<OutType, T> accumulator\n  )\n  {\n    try {\n      wrapper.before();\n      return wrapper.wrap(new Supplier<Yielder<OutType>>()\n      {\n        @Override\n        public Yielder<OutType> get()\n        {\n          return new WrappingYielder<>(baseSequence.toYielder(initValue, accumulator), wrapper);\n        }\n      });\n    }\n    catch (Throwable t) {\n      \r\n      try {\n        wrapper.after(false, t);\n      }\n      catch (Exception e) {\n        t.addSuppressed(e);\n      }\n      Throwables.propagateIfPossible(t);\n      throw new RuntimeException(t);\n    }\n  }\n","date":"2019-03-15 05:28:33","endLine":103,"groupId":"105529","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"toYielder","params":"(finalOutTypeinitValue@finalYieldingAccumulator<OutType@T>accumulator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/889fc5997eb41462101744f95ac1ef8c3d36d6.src","preCode":"  public <OutType> Yielder<OutType> toYielder(\n      final OutType initValue,\n      final YieldingAccumulator<OutType, T> accumulator\n  )\n  {\n    try {\n      wrapper.before();\n      return wrapper.wrap(new Supplier<Yielder<OutType>>()\n      {\n        @Override\n        public Yielder<OutType> get()\n        {\n          return new WrappingYielder<>(baseSequence.toYielder(initValue, accumulator), wrapper);\n        }\n      });\n    }\n    catch (Throwable t) {\n      \r\n      try {\n        wrapper.after(false, t);\n      }\n      catch (Exception e) {\n        t.addSuppressed(e);\n      }\n      Throwables.propagateIfPossible(t);\n      throw new RuntimeException(t);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/druid/java/util/common/guava/WrappingSequence.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"},{"authorDate":"2019-12-07 05:42:53","commitOrder":3,"curCode":"  public Yielder<OutType> next(final OutType initValue)\n  {\n    try {\n      return wrapper.wrap(new Supplier<Yielder<OutType>>()\n      {\n        @Override\n        public Yielder<OutType> get()\n        {\n          return new WrappingYielder<>(baseYielder.next(initValue), wrapper);\n        }\n      });\n    }\n    catch (Throwable t) {\n      \r\n      try {\n        wrapper.after(false, t);\n      }\n      catch (Exception e) {\n        t.addSuppressed(e);\n      }\n      Throwables.propagateIfPossible(t);\n      throw new RuntimeException(t);\n    }\n  }\n","date":"2019-12-07 05:42:53","endLine":68,"groupId":"105529","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"next","params":"(finalOutTypeinitValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bb/80fb237287b63caebfa9ba9195c77017c66a62.src","preCode":"  public Yielder<OutType> next(final OutType initValue)\n  {\n    try {\n      return wrapper.wrap(new Supplier<Yielder<OutType>>()\n      {\n        @Override\n        public Yielder<OutType> get()\n        {\n          return new WrappingYielder<>(baseYielder.next(initValue), wrapper);\n        }\n      });\n    }\n    catch (Throwable t) {\n      \r\n      try {\n        wrapper.after(false, t);\n      }\n      catch (Exception e) {\n        t.addSuppressed(e);\n      }\n      throw new RuntimeException(t);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/druid/java/util/common/guava/WrappingYielder.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"06cd30460ef51f9e316e86d4b417882efc9b861c","commitMessage":"@@@add query metrics for broker parallel merges.  off by default (#8981)\n\n* add a bunch of metrics for broker parallel merges.  off by default.  and tests\n\n* fix tests\n\n* review stuffs\n\n* propogateIfPossible\n","date":"2019-12-07 05:42:53","modifiedFileCount":"12","status":"M","submitter":"Clint Wylie"}]
