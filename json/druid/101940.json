[{"authorTime":"2020-02-20 05:09:20","codes":[{"authorDate":"2020-02-20 05:09:20","commitOrder":1,"curCode":"  public void testTimestampString() throws Exception\n  {\n    \r\n    testQuery(\n        PLANNER_CONFIG_DEFAULT,\n        QUERY_CONTEXT_DONT_SKIP_EMPTY_BUCKETS,\n        ImmutableList.of(\n            new SqlParameter(SqlType.INTEGER, 10),\n            new SqlParameter(\n                SqlType.TIMESTAMP,\n                \"2999-01-01 00:00:00\"\n            )\n        ),\n        \"SELECT exp(count(*)) + ?, sum(m2)  FROM druid.foo WHERE  __time >= ?\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(Druids.newTimeseriesQueryBuilder()\n                               .dataSource(CalciteTests.DATASOURCE1)\n                               .intervals(querySegmentSpec(Intervals.of(\n                                   \"2999-01-01T00:00:00.000Z/146140482-04-24T15:36:27.903Z\")))\n                               .granularity(Granularities.ALL)\n                               .aggregators(aggregators(\n                                   new CountAggregatorFactory(\"a0\"),\n                                   new DoubleSumAggregatorFactory(\"a1\", \"m2\")\n                               ))\n                               .postAggregators(\n                                   expressionPostAgg(\"p0\", \"(exp(\\\"a0\\\") + 10)\")\n                               )\n                               .context(QUERY_CONTEXT_DONT_SKIP_EMPTY_BUCKETS)\n                               .build()),\n        ImmutableList.of(\n            new Object[]{11.0, NullHandling.defaultDoubleValue()}\n        )\n    );\n  }\n","date":"2020-02-20 05:09:20","endLine":427,"groupId":"14288","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimestampString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/98/263cb2dea42a4594bc3fb6d2c4a1b42a059bb6.src","preCode":"  public void testTimestampString() throws Exception\n  {\n    \r\n    testQuery(\n        PLANNER_CONFIG_DEFAULT,\n        QUERY_CONTEXT_DONT_SKIP_EMPTY_BUCKETS,\n        ImmutableList.of(\n            new SqlParameter(SqlType.INTEGER, 10),\n            new SqlParameter(\n                SqlType.TIMESTAMP,\n                \"2999-01-01 00:00:00\"\n            )\n        ),\n        \"SELECT exp(count(*)) + ?, sum(m2)  FROM druid.foo WHERE  __time >= ?\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(Druids.newTimeseriesQueryBuilder()\n                               .dataSource(CalciteTests.DATASOURCE1)\n                               .intervals(querySegmentSpec(Intervals.of(\n                                   \"2999-01-01T00:00:00.000Z/146140482-04-24T15:36:27.903Z\")))\n                               .granularity(Granularities.ALL)\n                               .aggregators(aggregators(\n                                   new CountAggregatorFactory(\"a0\"),\n                                   new DoubleSumAggregatorFactory(\"a1\", \"m2\")\n                               ))\n                               .postAggregators(\n                                   expressionPostAgg(\"p0\", \"(exp(\\\"a0\\\") + 10)\")\n                               )\n                               .context(QUERY_CONTEXT_DONT_SKIP_EMPTY_BUCKETS)\n                               .build()),\n        ImmutableList.of(\n            new Object[]{11.0, NullHandling.defaultDoubleValue()}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteParameterQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":394,"status":"B"},{"authorDate":"2020-02-20 05:09:20","commitOrder":1,"curCode":"  public void testDate() throws Exception\n  {\n    \r\n\n    testQuery(\n        PLANNER_CONFIG_DEFAULT,\n        QUERY_CONTEXT_DONT_SKIP_EMPTY_BUCKETS,\n        ImmutableList.of(\n            new SqlParameter(SqlType.INTEGER, 10),\n            new SqlParameter(\n                SqlType.DATE,\n                \"2999-01-01\"\n            )\n        ),\n        \"SELECT exp(count(*)) + ?, sum(m2)  FROM druid.foo WHERE  __time >= ?\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(Druids.newTimeseriesQueryBuilder()\n                               .dataSource(CalciteTests.DATASOURCE1)\n                               .intervals(querySegmentSpec(Intervals.of(\n                                   \"2999-01-01T00:00:00.000Z/146140482-04-24T15:36:27.903Z\")))\n                               .granularity(Granularities.ALL)\n                               .aggregators(aggregators(\n                                   new CountAggregatorFactory(\"a0\"),\n                                   new DoubleSumAggregatorFactory(\"a1\", \"m2\")\n                               ))\n                               .postAggregators(\n                                   expressionPostAgg(\"p0\", \"(exp(\\\"a0\\\") + 10)\")\n                               )\n                               .context(QUERY_CONTEXT_DONT_SKIP_EMPTY_BUCKETS)\n                               .build()),\n        ImmutableList.of(\n            new Object[]{11.0, NullHandling.defaultDoubleValue()}\n        )\n    );\n  }\n","date":"2020-02-20 05:09:20","endLine":464,"groupId":"14288","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/98/263cb2dea42a4594bc3fb6d2c4a1b42a059bb6.src","preCode":"  public void testDate() throws Exception\n  {\n    \r\n\n    testQuery(\n        PLANNER_CONFIG_DEFAULT,\n        QUERY_CONTEXT_DONT_SKIP_EMPTY_BUCKETS,\n        ImmutableList.of(\n            new SqlParameter(SqlType.INTEGER, 10),\n            new SqlParameter(\n                SqlType.DATE,\n                \"2999-01-01\"\n            )\n        ),\n        \"SELECT exp(count(*)) + ?, sum(m2)  FROM druid.foo WHERE  __time >= ?\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(Druids.newTimeseriesQueryBuilder()\n                               .dataSource(CalciteTests.DATASOURCE1)\n                               .intervals(querySegmentSpec(Intervals.of(\n                                   \"2999-01-01T00:00:00.000Z/146140482-04-24T15:36:27.903Z\")))\n                               .granularity(Granularities.ALL)\n                               .aggregators(aggregators(\n                                   new CountAggregatorFactory(\"a0\"),\n                                   new DoubleSumAggregatorFactory(\"a1\", \"m2\")\n                               ))\n                               .postAggregators(\n                                   expressionPostAgg(\"p0\", \"(exp(\\\"a0\\\") + 10)\")\n                               )\n                               .context(QUERY_CONTEXT_DONT_SKIP_EMPTY_BUCKETS)\n                               .build()),\n        ImmutableList.of(\n            new Object[]{11.0, NullHandling.defaultDoubleValue()}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteParameterQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":430,"status":"B"}],"commitId":"b408a6d774e43e574bf8092584fae76d582cfd8f","commitMessage":"@@@sql support for dynamic parameters (#6974)\n\n* sql support for dynamic parameters\n\n* fixup\n\n* javadocs\n\n* fixup from merge\n\n* formatting\n\n* fixes\n\n* fix it\n\n* doc fix\n\n* remove druid fallback self-join parameterized test\n\n* unused imports\n\n* ignore test for now\n\n* fix imports\n\n* fixup\n\n* fix merge\n\n* merge fixup\n\n* fix test that cannot vectorize\n\n* fixup and more better\n\n* dependency thingo\n\n* fix docs\n\n* tweaks\n\n* fix docs\n\n* spelling\n\n* unused imports after merge\n\n* review stuffs\n\n* add comment\n\n* add ignore text\n\n* review stuffs\n","date":"2020-02-20 05:09:20","modifiedFileCount":"32","status":"B","submitter":"Clint Wylie"},{"authorTime":"2021-05-11 01:13:37","codes":[{"authorDate":"2021-05-11 01:13:37","commitOrder":2,"curCode":"  public void testTimestampString() throws Exception\n  {\n    \r\n    testQuery(\n        PLANNER_CONFIG_DEFAULT,\n        QUERY_CONTEXT_DEFAULT,\n        ImmutableList.of(\n            new SqlParameter(SqlType.INTEGER, 10),\n            new SqlParameter(\n                SqlType.TIMESTAMP,\n                \"2999-01-01 00:00:00\"\n            )\n        ),\n        \"SELECT exp(count(*)) + ?, sum(m2)  FROM druid.foo WHERE  __time >= ?\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(Druids.newTimeseriesQueryBuilder()\n                               .dataSource(CalciteTests.DATASOURCE1)\n                               .intervals(querySegmentSpec(Intervals.of(\n                                   \"2999-01-01T00:00:00.000Z/146140482-04-24T15:36:27.903Z\")))\n                               .granularity(Granularities.ALL)\n                               .aggregators(aggregators(\n                                   new CountAggregatorFactory(\"a0\"),\n                                   new DoubleSumAggregatorFactory(\"a1\", \"m2\")\n                               ))\n                               .postAggregators(\n                                   expressionPostAgg(\"p0\", \"(exp(\\\"a0\\\") + 10)\")\n                               )\n                               .context(QUERY_CONTEXT_DEFAULT)\n                               .build()),\n        ImmutableList.of(\n            new Object[]{11.0, NullHandling.defaultDoubleValue()}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":442,"groupId":"101940","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimestampString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e1/0b6fe7ea47cc5bb91578f9dae23d81a3c4f630.src","preCode":"  public void testTimestampString() throws Exception\n  {\n    \r\n    testQuery(\n        PLANNER_CONFIG_DEFAULT,\n        QUERY_CONTEXT_DONT_SKIP_EMPTY_BUCKETS,\n        ImmutableList.of(\n            new SqlParameter(SqlType.INTEGER, 10),\n            new SqlParameter(\n                SqlType.TIMESTAMP,\n                \"2999-01-01 00:00:00\"\n            )\n        ),\n        \"SELECT exp(count(*)) + ?, sum(m2)  FROM druid.foo WHERE  __time >= ?\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(Druids.newTimeseriesQueryBuilder()\n                               .dataSource(CalciteTests.DATASOURCE1)\n                               .intervals(querySegmentSpec(Intervals.of(\n                                   \"2999-01-01T00:00:00.000Z/146140482-04-24T15:36:27.903Z\")))\n                               .granularity(Granularities.ALL)\n                               .aggregators(aggregators(\n                                   new CountAggregatorFactory(\"a0\"),\n                                   new DoubleSumAggregatorFactory(\"a1\", \"m2\")\n                               ))\n                               .postAggregators(\n                                   expressionPostAgg(\"p0\", \"(exp(\\\"a0\\\") + 10)\")\n                               )\n                               .context(QUERY_CONTEXT_DONT_SKIP_EMPTY_BUCKETS)\n                               .build()),\n        ImmutableList.of(\n            new Object[]{11.0, NullHandling.defaultDoubleValue()}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteParameterQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":409,"status":"M"},{"authorDate":"2021-05-11 01:13:37","commitOrder":2,"curCode":"  public void testDate() throws Exception\n  {\n    \r\n\n    testQuery(\n        PLANNER_CONFIG_DEFAULT,\n        QUERY_CONTEXT_DEFAULT,\n        ImmutableList.of(\n            new SqlParameter(SqlType.INTEGER, 10),\n            new SqlParameter(\n                SqlType.DATE,\n                \"2999-01-01\"\n            )\n        ),\n        \"SELECT exp(count(*)) + ?, sum(m2)  FROM druid.foo WHERE  __time >= ?\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(Druids.newTimeseriesQueryBuilder()\n                               .dataSource(CalciteTests.DATASOURCE1)\n                               .intervals(querySegmentSpec(Intervals.of(\n                                   \"2999-01-01T00:00:00.000Z/146140482-04-24T15:36:27.903Z\")))\n                               .granularity(Granularities.ALL)\n                               .aggregators(aggregators(\n                                   new CountAggregatorFactory(\"a0\"),\n                                   new DoubleSumAggregatorFactory(\"a1\", \"m2\")\n                               ))\n                               .postAggregators(\n                                   expressionPostAgg(\"p0\", \"(exp(\\\"a0\\\") + 10)\")\n                               )\n                               .context(QUERY_CONTEXT_DEFAULT)\n                               .build()),\n        ImmutableList.of(\n            new Object[]{11.0, NullHandling.defaultDoubleValue()}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":479,"groupId":"101940","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e1/0b6fe7ea47cc5bb91578f9dae23d81a3c4f630.src","preCode":"  public void testDate() throws Exception\n  {\n    \r\n\n    testQuery(\n        PLANNER_CONFIG_DEFAULT,\n        QUERY_CONTEXT_DONT_SKIP_EMPTY_BUCKETS,\n        ImmutableList.of(\n            new SqlParameter(SqlType.INTEGER, 10),\n            new SqlParameter(\n                SqlType.DATE,\n                \"2999-01-01\"\n            )\n        ),\n        \"SELECT exp(count(*)) + ?, sum(m2)  FROM druid.foo WHERE  __time >= ?\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(Druids.newTimeseriesQueryBuilder()\n                               .dataSource(CalciteTests.DATASOURCE1)\n                               .intervals(querySegmentSpec(Intervals.of(\n                                   \"2999-01-01T00:00:00.000Z/146140482-04-24T15:36:27.903Z\")))\n                               .granularity(Granularities.ALL)\n                               .aggregators(aggregators(\n                                   new CountAggregatorFactory(\"a0\"),\n                                   new DoubleSumAggregatorFactory(\"a1\", \"m2\")\n                               ))\n                               .postAggregators(\n                                   expressionPostAgg(\"p0\", \"(exp(\\\"a0\\\") + 10)\")\n                               )\n                               .context(QUERY_CONTEXT_DONT_SKIP_EMPTY_BUCKETS)\n                               .build()),\n        ImmutableList.of(\n            new Object[]{11.0, NullHandling.defaultDoubleValue()}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteParameterQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"M"}],"commitId":"691d7a1d548909951468005348a603380f4d6d74","commitMessage":"@@@SQL timeseries no longer skip empty buckets with all granularity (#11188)\n\n* SQL timeseries no longer skip empty buckets with all granularity\n\n* add comment.  fix tests\n\n* the ol switcheroo\n\n* revert unintended change\n\n* docs and more tests\n\n* style\n\n* make checkstyle happy\n\n* docs fixes and more tests\n\n* add docs.  tests for array_agg\n\n* fixes\n\n* oops\n\n* doc stuffs\n\n* fix compile.  match doc style","date":"2021-05-11 01:13:37","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"}]
