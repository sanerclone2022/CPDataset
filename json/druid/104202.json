[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSecuredGetWaitingTask()\n  {\n    expectAuthorizationTokenCheck();\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(null)).andStubReturn(\n        ImmutableList.of(\n            new TaskInfo(\n                \"id_1\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_1\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_1\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_2\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_2\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_2\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_3\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_3\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_3\", \"deny\")\n            ),\n            new TaskInfo(\n                \"id_4\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_4\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_4\", \"deny\")\n            )\n        )\n    );\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_1\", null),\n            new MockTaskRunnerWorkItem(\"id_4\", null)\n        )\n    );\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    List<TaskStatusPlus> responseObjects = (List<TaskStatusPlus>) overlordResource.getWaitingTasks(req)\n                                                                                  .getEntity();\n    Assert.assertEquals(1, responseObjects.size());\n    Assert.assertEquals(\"id_2\", responseObjects.get(0).getId());\n  }\n","date":"2018-08-31 00:56:26","endLine":223,"groupId":"7110","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSecuredGetWaitingTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/85/302bda5feacbba536fcf95d27b4400d59ed525.src","preCode":"  public void testSecuredGetWaitingTask()\n  {\n    expectAuthorizationTokenCheck();\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(null)).andStubReturn(\n        ImmutableList.of(\n            new TaskInfo(\n                \"id_1\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_1\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_1\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_2\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_2\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_2\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_3\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_3\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_3\", \"deny\")\n            ),\n            new TaskInfo(\n                \"id_4\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_4\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_4\", \"deny\")\n            )\n        )\n    );\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_1\", null),\n            new MockTaskRunnerWorkItem(\"id_4\", null)\n        )\n    );\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    List<TaskStatusPlus> responseObjects = (List<TaskStatusPlus>) overlordResource.getWaitingTasks(req)\n                                                                                  .getEntity();\n    Assert.assertEquals(1, responseObjects.size());\n    Assert.assertEquals(\"id_2\", responseObjects.get(0).getId());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/http/OverlordResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testGetTasks()\n  {\n    expectAuthorizationTokenCheck();\n    \r\n    EasyMock.expect(taskStorageQueryAdapter.getRecentlyCompletedTaskInfo(null, null, null)).andStubReturn(\n        ImmutableList.of(\n            new TaskInfo(\n                \"id_5\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_5\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_5\", \"deny\")\n            ),\n            new TaskInfo(\n                \"id_6\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_6\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_6\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_7\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_7\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_7\", \"allow\")\n            )\n        )\n    );\n    \r\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(null)).andStubReturn(\n        ImmutableList.of(\n            new TaskInfo(\n                \"id_1\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_1\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_1\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_2\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_2\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_2\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_3\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_3\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_3\", \"deny\")\n            ),\n            new TaskInfo(\n                \"id_4\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_4\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_4\", \"deny\")\n            )\n        )\n    );\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_1\", null),\n            new MockTaskRunnerWorkItem(\"id_4\", null)\n        )\n    ).atLeastOnce();\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getPendingTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_4\", null)\n        )\n    );\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getRunningTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_1\", null)\n        )\n    );\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n    List<TaskStatusPlus> responseObjects = (List<TaskStatusPlus>) overlordResource\n        .getTasks(null, null, null, null, null, req)\n        .getEntity();\n    Assert.assertEquals(4, responseObjects.size());\n  }\n","date":"2018-08-31 00:56:26","endLine":399,"groupId":"7110","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/85/302bda5feacbba536fcf95d27b4400d59ed525.src","preCode":"  public void testGetTasks()\n  {\n    expectAuthorizationTokenCheck();\n    \r\n    EasyMock.expect(taskStorageQueryAdapter.getRecentlyCompletedTaskInfo(null, null, null)).andStubReturn(\n        ImmutableList.of(\n            new TaskInfo(\n                \"id_5\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_5\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_5\", \"deny\")\n            ),\n            new TaskInfo(\n                \"id_6\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_6\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_6\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_7\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_7\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_7\", \"allow\")\n            )\n        )\n    );\n    \r\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(null)).andStubReturn(\n        ImmutableList.of(\n            new TaskInfo(\n                \"id_1\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_1\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_1\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_2\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_2\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_2\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_3\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_3\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_3\", \"deny\")\n            ),\n            new TaskInfo(\n                \"id_4\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_4\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_4\", \"deny\")\n            )\n        )\n    );\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_1\", null),\n            new MockTaskRunnerWorkItem(\"id_4\", null)\n        )\n    ).atLeastOnce();\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getPendingTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_4\", null)\n        )\n    );\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getRunningTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_1\", null)\n        )\n    );\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n    List<TaskStatusPlus> responseObjects = (List<TaskStatusPlus>) overlordResource\n        .getTasks(null, null, null, null, null, req)\n        .getEntity();\n    Assert.assertEquals(4, responseObjects.size());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/http/OverlordResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-11-21 05:42:44","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testSecuredGetWaitingTask()\n  {\n    expectAuthorizationTokenCheck();\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(null)).andStubReturn(\n        ImmutableList.of(\n            new TaskInfo(\n                \"id_1\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_1\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_1\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_2\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_2\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_2\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_3\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_3\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_3\", \"deny\")\n            ),\n            new TaskInfo(\n                \"id_4\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_4\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_4\", \"deny\")\n            )\n        )\n    );\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_1\", null),\n            new MockTaskRunnerWorkItem(\"id_4\", null)\n        )\n    );\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    List<TaskStatusPlus> responseObjects = (List<TaskStatusPlus>) overlordResource.getWaitingTasks(req)\n                                                                                  .getEntity();\n    Assert.assertEquals(1, responseObjects.size());\n    Assert.assertEquals(\"id_2\", responseObjects.get(0).getId());\n  }\n","date":"2018-08-31 00:56:26","endLine":223,"groupId":"7110","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSecuredGetWaitingTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/85/302bda5feacbba536fcf95d27b4400d59ed525.src","preCode":"  public void testSecuredGetWaitingTask()\n  {\n    expectAuthorizationTokenCheck();\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(null)).andStubReturn(\n        ImmutableList.of(\n            new TaskInfo(\n                \"id_1\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_1\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_1\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_2\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_2\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_2\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_3\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_3\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_3\", \"deny\")\n            ),\n            new TaskInfo(\n                \"id_4\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_4\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_4\", \"deny\")\n            )\n        )\n    );\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_1\", null),\n            new MockTaskRunnerWorkItem(\"id_4\", null)\n        )\n    );\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    List<TaskStatusPlus> responseObjects = (List<TaskStatusPlus>) overlordResource.getWaitingTasks(req)\n                                                                                  .getEntity();\n    Assert.assertEquals(1, responseObjects.size());\n    Assert.assertEquals(\"id_2\", responseObjects.get(0).getId());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/http/OverlordResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"N"},{"authorDate":"2018-11-21 05:42:44","commitOrder":2,"curCode":"  public void testGetTasks()\n  {\n    expectAuthorizationTokenCheck();\n    \r\n    EasyMock.expect(taskStorageQueryAdapter.getCompletedTaskInfoByCreatedTimeDuration(null, null, null)).andStubReturn(\n        ImmutableList.of(\n            new TaskInfo(\n                \"id_5\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_5\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_5\", \"deny\")\n            ),\n            new TaskInfo(\n                \"id_6\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_6\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_6\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_7\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_7\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_7\", \"allow\")\n            )\n        )\n    );\n    \r\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(null)).andStubReturn(\n        ImmutableList.of(\n            new TaskInfo(\n                \"id_1\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_1\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_1\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_2\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_2\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_2\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_3\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_3\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_3\", \"deny\")\n            ),\n            new TaskInfo(\n                \"id_4\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_4\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_4\", \"deny\")\n            )\n        )\n    );\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_1\", null),\n            new MockTaskRunnerWorkItem(\"id_4\", null)\n        )\n    ).atLeastOnce();\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getPendingTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_4\", null)\n        )\n    );\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getRunningTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_1\", null)\n        )\n    );\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n    List<TaskStatusPlus> responseObjects = (List<TaskStatusPlus>) overlordResource\n        .getTasks(null, null, null, null, null, req)\n        .getEntity();\n    Assert.assertEquals(4, responseObjects.size());\n  }\n","date":"2018-11-21 05:42:44","endLine":399,"groupId":"7110","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e3/885f7559677f6c0b056db3870de9f884ba7922.src","preCode":"  public void testGetTasks()\n  {\n    expectAuthorizationTokenCheck();\n    \r\n    EasyMock.expect(taskStorageQueryAdapter.getRecentlyCompletedTaskInfo(null, null, null)).andStubReturn(\n        ImmutableList.of(\n            new TaskInfo(\n                \"id_5\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_5\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_5\", \"deny\")\n            ),\n            new TaskInfo(\n                \"id_6\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_6\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_6\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_7\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_7\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_7\", \"allow\")\n            )\n        )\n    );\n    \r\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(null)).andStubReturn(\n        ImmutableList.of(\n            new TaskInfo(\n                \"id_1\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_1\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_1\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_2\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_2\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_2\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_3\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_3\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_3\", \"deny\")\n            ),\n            new TaskInfo(\n                \"id_4\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_4\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_4\", \"deny\")\n            )\n        )\n    );\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_1\", null),\n            new MockTaskRunnerWorkItem(\"id_4\", null)\n        )\n    ).atLeastOnce();\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getPendingTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_4\", null)\n        )\n    );\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getRunningTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_1\", null)\n        )\n    );\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n    List<TaskStatusPlus> responseObjects = (List<TaskStatusPlus>) overlordResource\n        .getTasks(null, null, null, null, null, req)\n        .getEntity();\n    Assert.assertEquals(4, responseObjects.size());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/http/OverlordResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"M"}],"commitId":"81c9a6177cc6958942eaa9ea294fe96c4a3708f4","commitMessage":"@@@Added support for filtering by unused parameter for HeapMemoryTaskStorage (#6510)\n\n* 1. added support for unused DateTime start parameter in getRecentlyFinishedTaskInfoSince method:\n HeapMemoryTaskStorage.getRecentlyFinishedTaskInfoSince return the finished tasks by comparing TaskStuff.createdDate with the start time\n2. added filtering by status complete to TaskStuff list stream in HeapMemoryTaskStorage.getNRecentlyFinishedTaskInfo method.\n3. changed names of methods and parameters to present that public API method OverlordResource.getTasks return the list of completed tasks.  which createdDate.  not date of completion.  belongs to the interval parameter.\n\n* 1. added support for unused DateTime start parameter in getRecentlyFinishedTaskInfoSince method:\n HeapMemoryTaskStorage.getRecentlyFinishedTaskInfoSince return the finished tasks by comparing TaskStuff.createdDate with the start time\n2. added filtering by status complete to TaskStuff list stream in HeapMemoryTaskStorage.getNRecentlyFinishedTaskInfo method.\n3. changed names of methods and parameters to present that public API method OverlordResource.getTasks return the list of completed tasks.  which createdDate.  not date of completion.  belongs to the interval parameter.\n\n* Fixed OverlordResourceTest to Support changed methods names\n\n* Changed methods and parameters names to make them more obvious to understand.\n\n* Changed String.replace() for the StringUtils.replace()(#6607)\n\n* Fixed checkstyle error\n","date":"2018-11-21 05:42:44","modifiedFileCount":"6","status":"M","submitter":"Marat"},{"authorTime":"2019-05-24 07:47:23","codes":[{"authorDate":"2019-05-24 07:47:23","commitOrder":3,"curCode":"  public void testSecuredGetWaitingTask()\n  {\n    expectAuthorizationTokenCheck();\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(null)).andStubReturn(\n        ImmutableList.of(\n            new TaskInfo(\n                \"id_1\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_1\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_1\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_2\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_2\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_2\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_3\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_3\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_3\", \"deny\")\n            ),\n            new TaskInfo(\n                \"id_4\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_4\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_4\", \"deny\")\n            )\n        )\n    );\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_1\", null),\n            new MockTaskRunnerWorkItem(\"id_4\", null)\n        )\n    );\n\n    EasyMock.replay(\n        taskRunner,\n        taskMaster,\n        taskStorageQueryAdapter,\n        indexerMetadataStorageAdapter,\n        req,\n        workerTaskRunnerQueryAdapter\n    );\n\n    List<TaskStatusPlus> responseObjects = (List<TaskStatusPlus>) overlordResource.getWaitingTasks(req)\n                                                                                  .getEntity();\n    Assert.assertEquals(1, responseObjects.size());\n    Assert.assertEquals(\"id_2\", responseObjects.get(0).getId());\n  }\n","date":"2019-05-24 07:47:23","endLine":250,"groupId":"104202","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSecuredGetWaitingTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3a/58c0cf62785d8da71419c5f5a56e9f222a996b.src","preCode":"  public void testSecuredGetWaitingTask()\n  {\n    expectAuthorizationTokenCheck();\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(null)).andStubReturn(\n        ImmutableList.of(\n            new TaskInfo(\n                \"id_1\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_1\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_1\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_2\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_2\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_2\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_3\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_3\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_3\", \"deny\")\n            ),\n            new TaskInfo(\n                \"id_4\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_4\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_4\", \"deny\")\n            )\n        )\n    );\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_1\", null),\n            new MockTaskRunnerWorkItem(\"id_4\", null)\n        )\n    );\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    List<TaskStatusPlus> responseObjects = (List<TaskStatusPlus>) overlordResource.getWaitingTasks(req)\n                                                                                  .getEntity();\n    Assert.assertEquals(1, responseObjects.size());\n    Assert.assertEquals(\"id_2\", responseObjects.get(0).getId());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/http/OverlordResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2019-05-24 07:47:23","commitOrder":3,"curCode":"  public void testGetTasks()\n  {\n    expectAuthorizationTokenCheck();\n    \r\n    EasyMock.expect(taskStorageQueryAdapter.getCompletedTaskInfoByCreatedTimeDuration(null, null, null)).andStubReturn(\n        ImmutableList.of(\n            new TaskInfo(\n                \"id_5\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_5\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_5\", \"deny\")\n            ),\n            new TaskInfo(\n                \"id_6\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_6\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_6\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_7\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_7\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_7\", \"allow\")\n            )\n        )\n    );\n    \r\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(null)).andStubReturn(\n        ImmutableList.of(\n            new TaskInfo(\n                \"id_1\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_1\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_1\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_2\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_2\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_2\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_3\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_3\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_3\", \"deny\")\n            ),\n            new TaskInfo(\n                \"id_4\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_4\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_4\", \"deny\")\n            )\n        )\n    );\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_1\", null),\n            new MockTaskRunnerWorkItem(\"id_4\", null)\n        )\n    ).atLeastOnce();\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getPendingTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_4\", null)\n        )\n    );\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getRunningTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_1\", null)\n        )\n    );\n\n    EasyMock.replay(\n        taskRunner,\n        taskMaster,\n        taskStorageQueryAdapter,\n        indexerMetadataStorageAdapter,\n        req,\n        workerTaskRunnerQueryAdapter\n    );\n    List<TaskStatusPlus> responseObjects = (List<TaskStatusPlus>) overlordResource\n        .getTasks(null, null, null, null, null, req)\n        .getEntity();\n    Assert.assertEquals(4, responseObjects.size());\n  }\n","date":"2019-05-24 07:47:23","endLine":448,"groupId":"104202","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3a/58c0cf62785d8da71419c5f5a56e9f222a996b.src","preCode":"  public void testGetTasks()\n  {\n    expectAuthorizationTokenCheck();\n    \r\n    EasyMock.expect(taskStorageQueryAdapter.getCompletedTaskInfoByCreatedTimeDuration(null, null, null)).andStubReturn(\n        ImmutableList.of(\n            new TaskInfo(\n                \"id_5\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_5\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_5\", \"deny\")\n            ),\n            new TaskInfo(\n                \"id_6\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_6\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_6\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_7\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_7\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_7\", \"allow\")\n            )\n        )\n    );\n    \r\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(null)).andStubReturn(\n        ImmutableList.of(\n            new TaskInfo(\n                \"id_1\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_1\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_1\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_2\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_2\"),\n                \"allow\",\n                getTaskWithIdAndDatasource(\"id_2\", \"allow\")\n            ),\n            new TaskInfo(\n                \"id_3\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_3\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_3\", \"deny\")\n            ),\n            new TaskInfo(\n                \"id_4\",\n                DateTime.now(ISOChronology.getInstanceUTC()),\n                TaskStatus.success(\"id_4\"),\n                \"deny\",\n                getTaskWithIdAndDatasource(\"id_4\", \"deny\")\n            )\n        )\n    );\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_1\", null),\n            new MockTaskRunnerWorkItem(\"id_4\", null)\n        )\n    ).atLeastOnce();\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getPendingTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_4\", null)\n        )\n    );\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getRunningTasks()).andReturn(\n        ImmutableList.of(\n            new MockTaskRunnerWorkItem(\"id_1\", null)\n        )\n    );\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n    List<TaskStatusPlus> responseObjects = (List<TaskStatusPlus>) overlordResource\n        .getTasks(null, null, null, null, null, req)\n        .getEntity();\n    Assert.assertEquals(4, responseObjects.size());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/http/OverlordResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"}],"commitId":"cbdac49ab393c68f8f17d6cdcc604897d8843f37","commitMessage":"@@@Web console - add enable/disable actions for middle manager workers (#7642)\n\n* Overlord console - add enable/disable button for remote workers.\n\n* Overlord console - add proxy for remote workers API.\n\n* WorkerResourceTest - revert newline change.\n\n* Remote worker proxy tests - remove empty line.\n\n* Refactor remote worker proxy for readability and security\n\n* Rename method in remote task runner tests for readability\n\n* Remove enable/disable button for remote workers from old web console\n\n* Add enable/disable actions for middle manager worker in new web console\n\n* Fix variable type\n\n* Add worker task runner query adapter\n\n* Fix web console tests: segments-view.  servers-view\n\n* Fix overlord resource tests\n","date":"2019-05-24 07:47:23","modifiedFileCount":"4","status":"M","submitter":"Bartosz ?ugowski"}]
