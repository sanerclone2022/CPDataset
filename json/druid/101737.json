[{"authorTime":"2020-06-04 05:31:37","codes":[{"authorDate":"2020-06-04 05:31:37","commitOrder":1,"curCode":"  public void testRegexpExtractFilterViaNotNullCheck() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT COUNT(*)\\n\"\n        + \"FROM foo\\n\"\n        + \"WHERE REGEXP_EXTRACT(dim1, '^1') IS NOT NULL OR REGEXP_EXTRACT('Z' || dim1, '^Z2') IS NOT NULL\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"regexp_extract(concat('Z',\\\"dim1\\\"),'^Z2')\", ValueType.STRING)\n                  )\n                  .filters(\n                      or(\n                          not(selector(\"dim1\", null, new RegexDimExtractionFn(\"^1\", 0, true, null))),\n                          not(selector(\"v0\", null, null))\n                      )\n                  )\n                  .aggregators(new CountAggregatorFactory(\"a0\"))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{3L}\n        )\n    );\n  }\n","date":"2020-06-04 05:31:37","endLine":7367,"groupId":"9210","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegexpExtractFilterViaNotNullCheck","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/21/3952bc27f6acd587416a60b2a22e38a599e98a.src","preCode":"  public void testRegexpExtractFilterViaNotNullCheck() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT COUNT(*)\\n\"\n        + \"FROM foo\\n\"\n        + \"WHERE REGEXP_EXTRACT(dim1, '^1') IS NOT NULL OR REGEXP_EXTRACT('Z' || dim1, '^Z2') IS NOT NULL\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"regexp_extract(concat('Z',\\\"dim1\\\"),'^Z2')\", ValueType.STRING)\n                  )\n                  .filters(\n                      or(\n                          not(selector(\"dim1\", null, new RegexDimExtractionFn(\"^1\", 0, true, null))),\n                          not(selector(\"v0\", null, null))\n                      )\n                  )\n                  .aggregators(new CountAggregatorFactory(\"a0\"))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7336,"status":"B"},{"authorDate":"2020-06-04 05:31:37","commitOrder":1,"curCode":"  public void testRegexpLikeFilter() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT COUNT(*)\\n\"\n        + \"FROM foo\\n\"\n        + \"WHERE REGEXP_LIKE(dim1, '^1') OR REGEXP_LIKE('Z' || dim1, '^Z2')\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"concat('Z',\\\"dim1\\\")\", ValueType.STRING)\n                  )\n                  .filters(\n                      or(\n                          new RegexDimFilter(\"dim1\", \"^1\", null),\n                          new RegexDimFilter(\"v0\", \"^Z2\", null)\n                      )\n                  )\n                  .aggregators(new CountAggregatorFactory(\"a0\"))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{3L}\n        )\n    );\n  }\n","date":"2020-06-04 05:31:37","endLine":7401,"groupId":"21742","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRegexpLikeFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/21/3952bc27f6acd587416a60b2a22e38a599e98a.src","preCode":"  public void testRegexpLikeFilter() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT COUNT(*)\\n\"\n        + \"FROM foo\\n\"\n        + \"WHERE REGEXP_LIKE(dim1, '^1') OR REGEXP_LIKE('Z' || dim1, '^Z2')\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"concat('Z',\\\"dim1\\\")\", ValueType.STRING)\n                  )\n                  .filters(\n                      or(\n                          new RegexDimFilter(\"dim1\", \"^1\", null),\n                          new RegexDimFilter(\"v0\", \"^Z2\", null)\n                      )\n                  )\n                  .aggregators(new CountAggregatorFactory(\"a0\"))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7370,"status":"B"}],"commitId":"3dfd7c30c00238d35dc9e3d25bfd136e0b5f7240","commitMessage":"@@@Add REGEXP_LIKE.  fix bugs in REGEXP_EXTRACT. (#9893)\n\n* Add REGEXP_LIKE.  fix empty-pattern bug in REGEXP_EXTRACT.\n\n- Add REGEXP_LIKE function that returns a boolean.  and is useful in\n  WHERE clauses.\n- Fix REGEXP_EXTRACT return type (should be nullable; causes incorrect\n  filter elision).\n- Fix REGEXP_EXTRACT behavior for empty patterns: should always match\n  (previously.  they threw errors).\n- Improve error behavior when REGEXP_EXTRACT and REGEXP_LIKE are passed\n  non-literal patterns.\n- Improve documentation of REGEXP_EXTRACT.\n\n* Changes based on PR review.\n\n* Fix arg check.\n\n* Important fixes!\n\n* Add speller.\n\n* wip\n\n* Additional tests.\n\n* Fix up tests.\n\n* Add validation error tests.\n\n* Additional tests.\n\n* Remove useless call.","date":"2020-06-04 05:31:37","modifiedFileCount":"54","status":"B","submitter":"Gian Merlino"},{"authorTime":"2021-04-09 10:23:39","codes":[{"authorDate":"2020-06-04 05:31:37","commitOrder":2,"curCode":"  public void testRegexpExtractFilterViaNotNullCheck() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT COUNT(*)\\n\"\n        + \"FROM foo\\n\"\n        + \"WHERE REGEXP_EXTRACT(dim1, '^1') IS NOT NULL OR REGEXP_EXTRACT('Z' || dim1, '^Z2') IS NOT NULL\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"regexp_extract(concat('Z',\\\"dim1\\\"),'^Z2')\", ValueType.STRING)\n                  )\n                  .filters(\n                      or(\n                          not(selector(\"dim1\", null, new RegexDimExtractionFn(\"^1\", 0, true, null))),\n                          not(selector(\"v0\", null, null))\n                      )\n                  )\n                  .aggregators(new CountAggregatorFactory(\"a0\"))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{3L}\n        )\n    );\n  }\n","date":"2020-06-04 05:31:37","endLine":7367,"groupId":"9210","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegexpExtractFilterViaNotNullCheck","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/21/3952bc27f6acd587416a60b2a22e38a599e98a.src","preCode":"  public void testRegexpExtractFilterViaNotNullCheck() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT COUNT(*)\\n\"\n        + \"FROM foo\\n\"\n        + \"WHERE REGEXP_EXTRACT(dim1, '^1') IS NOT NULL OR REGEXP_EXTRACT('Z' || dim1, '^Z2') IS NOT NULL\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"regexp_extract(concat('Z',\\\"dim1\\\"),'^Z2')\", ValueType.STRING)\n                  )\n                  .filters(\n                      or(\n                          not(selector(\"dim1\", null, new RegexDimExtractionFn(\"^1\", 0, true, null))),\n                          not(selector(\"v0\", null, null))\n                      )\n                  )\n                  .aggregators(new CountAggregatorFactory(\"a0\"))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7336,"status":"N"},{"authorDate":"2021-04-09 10:23:39","commitOrder":2,"curCode":"  public void testRegexpLikeFilter() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*)\\n\"\n        + \"FROM foo\\n\"\n        + \"WHERE REGEXP_LIKE(dim1, '^1') OR REGEXP_LIKE('Z' || dim1, '^Z2')\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"concat('Z',\\\"dim1\\\")\", ValueType.STRING)\n                  )\n                  .filters(\n                      or(\n                          new RegexDimFilter(\"dim1\", \"^1\", null),\n                          new RegexDimFilter(\"v0\", \"^Z2\", null)\n                      )\n                  )\n                  .aggregators(new CountAggregatorFactory(\"a0\"))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{3L}\n        )\n    );\n  }\n","date":"2021-04-09 10:23:39","endLine":9227,"groupId":"21742","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRegexpLikeFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/86/ef6dcc13827a87db5c66315734d6c160be02d1.src","preCode":"  public void testRegexpLikeFilter() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT COUNT(*)\\n\"\n        + \"FROM foo\\n\"\n        + \"WHERE REGEXP_LIKE(dim1, '^1') OR REGEXP_LIKE('Z' || dim1, '^Z2')\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"concat('Z',\\\"dim1\\\")\", ValueType.STRING)\n                  )\n                  .filters(\n                      or(\n                          new RegexDimFilter(\"dim1\", \"^1\", null),\n                          new RegexDimFilter(\"v0\", \"^Z2\", null)\n                      )\n                  )\n                  .aggregators(new CountAggregatorFactory(\"a0\"))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":9199,"status":"M"}],"commitId":"338886fd5f1bc32cd6c5cadbc408838723099e75","commitMessage":"@@@vector group by support for string expressions (#11010)\n\n* vector group by support for string expressions\n\n* fix test\n\n* comments.  javadoc","date":"2021-04-09 10:23:39","modifiedFileCount":"15","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-05-11 01:13:37","codes":[{"authorDate":"2021-05-11 01:13:37","commitOrder":3,"curCode":"  public void testRegexpExtractFilterViaNotNullCheck() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT COUNT(*)\\n\"\n        + \"FROM foo\\n\"\n        + \"WHERE REGEXP_EXTRACT(dim1, '^1') IS NOT NULL OR REGEXP_EXTRACT('Z' || dim1, '^Z2') IS NOT NULL\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"regexp_extract(concat('Z',\\\"dim1\\\"),'^Z2')\", ValueType.STRING)\n                  )\n                  .filters(\n                      or(\n                          not(selector(\"dim1\", null, new RegexDimExtractionFn(\"^1\", 0, true, null))),\n                          not(selector(\"v0\", null, null))\n                      )\n                  )\n                  .aggregators(new CountAggregatorFactory(\"a0\"))\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{3L}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":9323,"groupId":"101737","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegexpExtractFilterViaNotNullCheck","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testRegexpExtractFilterViaNotNullCheck() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT COUNT(*)\\n\"\n        + \"FROM foo\\n\"\n        + \"WHERE REGEXP_EXTRACT(dim1, '^1') IS NOT NULL OR REGEXP_EXTRACT('Z' || dim1, '^Z2') IS NOT NULL\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"regexp_extract(concat('Z',\\\"dim1\\\"),'^Z2')\", ValueType.STRING)\n                  )\n                  .filters(\n                      or(\n                          not(selector(\"dim1\", null, new RegexDimExtractionFn(\"^1\", 0, true, null))),\n                          not(selector(\"v0\", null, null))\n                      )\n                  )\n                  .aggregators(new CountAggregatorFactory(\"a0\"))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":9292,"status":"M"},{"authorDate":"2021-05-11 01:13:37","commitOrder":3,"curCode":"  public void testRegexpLikeFilter() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*)\\n\"\n        + \"FROM foo\\n\"\n        + \"WHERE REGEXP_LIKE(dim1, '^1') OR REGEXP_LIKE('Z' || dim1, '^Z2')\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"concat('Z',\\\"dim1\\\")\", ValueType.STRING)\n                  )\n                  .filters(\n                      or(\n                          new RegexDimFilter(\"dim1\", \"^1\", null),\n                          new RegexDimFilter(\"v0\", \"^Z2\", null)\n                      )\n                  )\n                  .aggregators(new CountAggregatorFactory(\"a0\"))\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{3L}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":9354,"groupId":"101737","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRegexpLikeFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testRegexpLikeFilter() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*)\\n\"\n        + \"FROM foo\\n\"\n        + \"WHERE REGEXP_LIKE(dim1, '^1') OR REGEXP_LIKE('Z' || dim1, '^Z2')\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"concat('Z',\\\"dim1\\\")\", ValueType.STRING)\n                  )\n                  .filters(\n                      or(\n                          new RegexDimFilter(\"dim1\", \"^1\", null),\n                          new RegexDimFilter(\"v0\", \"^Z2\", null)\n                      )\n                  )\n                  .aggregators(new CountAggregatorFactory(\"a0\"))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":9326,"status":"M"}],"commitId":"691d7a1d548909951468005348a603380f4d6d74","commitMessage":"@@@SQL timeseries no longer skip empty buckets with all granularity (#11188)\n\n* SQL timeseries no longer skip empty buckets with all granularity\n\n* add comment.  fix tests\n\n* the ol switcheroo\n\n* revert unintended change\n\n* docs and more tests\n\n* style\n\n* make checkstyle happy\n\n* docs fixes and more tests\n\n* add docs.  tests for array_agg\n\n* fixes\n\n* oops\n\n* doc stuffs\n\n* fix compile.  match doc style","date":"2021-05-11 01:13:37","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"}]
