[{"authorTime":"2020-02-22 07:43:02","codes":[{"authorDate":"2020-02-22 07:43:02","commitOrder":1,"curCode":"  private void validateConstantExpression(String expression, Object expected)\n  {\n    Expr parsed = Parser.parse(expression, ExprMacroTable.nil());\n    Assert.assertEquals(\n        expression,\n        expected,\n        parsed.eval(Parser.withMap(ImmutableMap.of())).value()\n    );\n\n    final Expr parsedNoFlatten = Parser.parse(expression, ExprMacroTable.nil(), false);\n    Expr parsedRoundTrip = Parser.parse(parsedNoFlatten.stringify(), ExprMacroTable.nil());\n    Assert.assertEquals(\n        expression,\n        expected,\n        parsedRoundTrip.eval(Parser.withMap(ImmutableMap.of())).value()\n    );\n    Assert.assertEquals(parsed.stringify(), parsedRoundTrip.stringify());\n  }\n","date":"2020-02-22 07:43:02","endLine":638,"groupId":"13440","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"validateConstantExpression","params":"(Stringexpression@Objectexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/ef6736ed5a7509e50cc5299b959ba68565327d.src","preCode":"  private void validateConstantExpression(String expression, Object expected)\n  {\n    Expr parsed = Parser.parse(expression, ExprMacroTable.nil());\n    Assert.assertEquals(\n        expression,\n        expected,\n        parsed.eval(Parser.withMap(ImmutableMap.of())).value()\n    );\n\n    final Expr parsedNoFlatten = Parser.parse(expression, ExprMacroTable.nil(), false);\n    Expr parsedRoundTrip = Parser.parse(parsedNoFlatten.stringify(), ExprMacroTable.nil());\n    Assert.assertEquals(\n        expression,\n        expected,\n        parsedRoundTrip.eval(Parser.withMap(ImmutableMap.of())).value()\n    );\n    Assert.assertEquals(parsed.stringify(), parsedRoundTrip.stringify());\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/ParserTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":621,"status":"B"},{"authorDate":"2020-02-22 07:43:02","commitOrder":1,"curCode":"  private void validateConstantExpression(String expression, Object[] expected)\n  {\n    Expr parsed = Parser.parse(expression, ExprMacroTable.nil());\n    Object evaluated = parsed.eval(Parser.withMap(ImmutableMap.of())).value();\n    Assert.assertArrayEquals(\n        expression,\n        expected,\n        (Object[]) evaluated\n    );\n\n    Assert.assertEquals(expected.getClass(), evaluated.getClass());\n    final Expr parsedNoFlatten = Parser.parse(expression, ExprMacroTable.nil(), false);\n    Expr roundTrip = Parser.parse(parsedNoFlatten.stringify(), ExprMacroTable.nil());\n    Assert.assertArrayEquals(\n        expression,\n        expected,\n        (Object[]) roundTrip.eval(Parser.withMap(ImmutableMap.of())).value()\n    );\n    Assert.assertEquals(parsed.stringify(), roundTrip.stringify());\n  }\n","date":"2020-02-22 07:43:02","endLine":659,"groupId":"13441","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"validateConstantExpression","params":"(Stringexpression@Object[]expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/ef6736ed5a7509e50cc5299b959ba68565327d.src","preCode":"  private void validateConstantExpression(String expression, Object[] expected)\n  {\n    Expr parsed = Parser.parse(expression, ExprMacroTable.nil());\n    Object evaluated = parsed.eval(Parser.withMap(ImmutableMap.of())).value();\n    Assert.assertArrayEquals(\n        expression,\n        expected,\n        (Object[]) evaluated\n    );\n\n    Assert.assertEquals(expected.getClass(), evaluated.getClass());\n    final Expr parsedNoFlatten = Parser.parse(expression, ExprMacroTable.nil(), false);\n    Expr roundTrip = Parser.parse(parsedNoFlatten.stringify(), ExprMacroTable.nil());\n    Assert.assertArrayEquals(\n        expression,\n        expected,\n        (Object[]) roundTrip.eval(Parser.withMap(ImmutableMap.of())).value()\n    );\n    Assert.assertEquals(parsed.stringify(), roundTrip.stringify());\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/ParserTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":640,"status":"B"}],"commitId":"6d8dd5ec10042a827aca20429b3ea19dd39b5827","commitMessage":"@@@string -> expression -> string -> expression (#9367)\n\n* add Expr.stringify which produces parseable expression strings.  parser support for null values in arrays.  and parser support for empty numeric arrays\n\n* oops.  macros are expressions too\n\n* style\n\n* spotbugs\n\n* qualified type arrays\n\n* review stuffs\n\n* simplify grammar\n\n* more permissive array parsing\n\n* reuse expr joiner\n\n* fix it\n","date":"2020-02-22 07:43:02","modifiedFileCount":"28","status":"B","submitter":"Clint Wylie"},{"authorTime":"2021-05-04 13:17:10","codes":[{"authorDate":"2021-05-04 13:17:10","commitOrder":2,"curCode":"  private void validateConstantExpression(String expression, Object expected)\n  {\n    Expr parsed = Parser.parse(expression, ExprMacroTable.nil());\n    Assert.assertEquals(\n        expression,\n        expected,\n        parsed.eval(InputBindings.withMap(ImmutableMap.of())).value()\n    );\n\n    final Expr parsedNoFlatten = Parser.parse(expression, ExprMacroTable.nil(), false);\n    Expr parsedRoundTrip = Parser.parse(parsedNoFlatten.stringify(), ExprMacroTable.nil());\n    Assert.assertEquals(\n        expression,\n        expected,\n        parsedRoundTrip.eval(InputBindings.withMap(ImmutableMap.of())).value()\n    );\n    Assert.assertEquals(parsed.stringify(), parsedRoundTrip.stringify());\n  }\n","date":"2021-05-04 13:17:10","endLine":755,"groupId":"114950","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"validateConstantExpression","params":"(Stringexpression@Objectexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/12/dcfee0b8946bbf66e680dc4556b3321ef24ffa.src","preCode":"  private void validateConstantExpression(String expression, Object expected)\n  {\n    Expr parsed = Parser.parse(expression, ExprMacroTable.nil());\n    Assert.assertEquals(\n        expression,\n        expected,\n        parsed.eval(Parser.withMap(ImmutableMap.of())).value()\n    );\n\n    final Expr parsedNoFlatten = Parser.parse(expression, ExprMacroTable.nil(), false);\n    Expr parsedRoundTrip = Parser.parse(parsedNoFlatten.stringify(), ExprMacroTable.nil());\n    Assert.assertEquals(\n        expression,\n        expected,\n        parsedRoundTrip.eval(Parser.withMap(ImmutableMap.of())).value()\n    );\n    Assert.assertEquals(parsed.stringify(), parsedRoundTrip.stringify());\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/ParserTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":738,"status":"M"},{"authorDate":"2021-05-04 13:17:10","commitOrder":2,"curCode":"  private void validateConstantExpression(String expression, Object[] expected)\n  {\n    Expr parsed = Parser.parse(expression, ExprMacroTable.nil());\n    Object evaluated = parsed.eval(InputBindings.withMap(ImmutableMap.of())).value();\n    Assert.assertArrayEquals(\n        expression,\n        expected,\n        (Object[]) evaluated\n    );\n\n    Assert.assertEquals(expected.getClass(), evaluated.getClass());\n    final Expr parsedNoFlatten = Parser.parse(expression, ExprMacroTable.nil(), false);\n    Expr roundTrip = Parser.parse(parsedNoFlatten.stringify(), ExprMacroTable.nil());\n    Assert.assertArrayEquals(\n        expression,\n        expected,\n        (Object[]) roundTrip.eval(InputBindings.withMap(ImmutableMap.of())).value()\n    );\n    Assert.assertEquals(parsed.stringify(), roundTrip.stringify());\n  }\n","date":"2021-05-04 13:17:10","endLine":776,"groupId":"114950","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"validateConstantExpression","params":"(Stringexpression@Object[]expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/12/dcfee0b8946bbf66e680dc4556b3321ef24ffa.src","preCode":"  private void validateConstantExpression(String expression, Object[] expected)\n  {\n    Expr parsed = Parser.parse(expression, ExprMacroTable.nil());\n    Object evaluated = parsed.eval(Parser.withMap(ImmutableMap.of())).value();\n    Assert.assertArrayEquals(\n        expression,\n        expected,\n        (Object[]) evaluated\n    );\n\n    Assert.assertEquals(expected.getClass(), evaluated.getClass());\n    final Expr parsedNoFlatten = Parser.parse(expression, ExprMacroTable.nil(), false);\n    Expr roundTrip = Parser.parse(parsedNoFlatten.stringify(), ExprMacroTable.nil());\n    Assert.assertArrayEquals(\n        expression,\n        expected,\n        (Object[]) roundTrip.eval(Parser.withMap(ImmutableMap.of())).value()\n    );\n    Assert.assertEquals(parsed.stringify(), roundTrip.stringify());\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/ParserTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":757,"status":"M"}],"commitId":"554f1ffeee94fab1ca0fa641a51f584766e504f2","commitMessage":"@@@ARRAY_AGG sql aggregator function (#11157)\n\n* ARRAY_AGG sql aggregator function\n\n* add javadoc\n\n* spelling\n\n* review stuff.  return null instead of empty when nil input\n\n* review stuff\n\n* Update sql.md\n\n* use type inference for finalize.  refactor some things","date":"2021-05-04 13:17:10","modifiedFileCount":"24","status":"M","submitter":"Clint Wylie"}]
