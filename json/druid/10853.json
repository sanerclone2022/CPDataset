[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  protected void announceSegmentForServer(\n      DruidServer druidServer,\n      DataSegment segment,\n      ZkPathsConfig zkPathsConfig,\n      ObjectMapper jsonMapper\n  )\n  {\n    final String segmentAnnouncementPath = ZKPaths.makePath(ZKPaths.makePath(\n        zkPathsConfig.getLiveSegmentsPath(),\n        druidServer.getHost()\n    ), segment.getIdentifier());\n\n    try {\n      curator.create()\n             .compressed()\n             .withMode(CreateMode.EPHEMERAL)\n             .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(ImmutableSet.of(segment)));\n    }\n    catch (KeeperException.NodeExistsException e) {\n      try {\n        curator.setData()\n               .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(ImmutableSet.of(segment)));\n      }\n      catch (Exception e1) {\n        Throwables.propagate(e1);\n      }\n    }\n    catch (Exception e) {\n      Throwables.propagate(e);\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":132,"groupId":"19659","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"announceSegmentForServer","params":"(DruidServerdruidServer@DataSegmentsegment@ZkPathsConfigzkPathsConfig@ObjectMapperjsonMapper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/37/75f57768e9f0d1e0ff7ae4d562ded7e97e91ec.src","preCode":"  protected void announceSegmentForServer(\n      DruidServer druidServer,\n      DataSegment segment,\n      ZkPathsConfig zkPathsConfig,\n      ObjectMapper jsonMapper\n  )\n  {\n    final String segmentAnnouncementPath = ZKPaths.makePath(ZKPaths.makePath(\n        zkPathsConfig.getLiveSegmentsPath(),\n        druidServer.getHost()\n    ), segment.getIdentifier());\n\n    try {\n      curator.create()\n             .compressed()\n             .withMode(CreateMode.EPHEMERAL)\n             .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(ImmutableSet.of(segment)));\n    }\n    catch (KeeperException.NodeExistsException e) {\n      try {\n        curator.setData()\n               .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(ImmutableSet.of(segment)));\n      }\n      catch (Exception e1) {\n        Throwables.propagate(e1);\n      }\n    }\n    catch (Exception e) {\n      Throwables.propagate(e);\n    }\n  }\n","realPath":"server/src/test/java/org/apache/druid/curator/CuratorTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  protected String announceBatchSegmentsForServer(\n      DruidServer druidServer,\n      ImmutableSet<DataSegment> segments,\n      ZkPathsConfig zkPathsConfig,\n      ObjectMapper jsonMapper\n  )\n  {\n    final String segmentAnnouncementPath = ZKPaths.makePath(ZKPaths.makePath(\n        zkPathsConfig.getLiveSegmentsPath(),\n        druidServer.getHost()),\n        UUIDUtils.generateUuid(\n          druidServer.getHost(),\n          druidServer.getType().toString(),\n          druidServer.getTier(),\n          DateTimes.nowUtc().toString()\n        ) + String.valueOf(batchCtr++)\n    );\n\n\n    try {\n      curator.create()\n             .compressed()\n             .withMode(CreateMode.EPHEMERAL)\n             .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(segments));\n    }\n    catch (KeeperException.NodeExistsException e) {\n      try {\n        curator.setData()\n               .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(segments));\n      }\n      catch (Exception e1) {\n        Throwables.propagate(e1);\n      }\n    }\n    catch (Exception e) {\n      Throwables.propagate(e);\n    }\n\n    return segmentAnnouncementPath;\n  }\n","date":"2018-08-31 00:56:26","endLine":173,"groupId":"1901","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"announceBatchSegmentsForServer","params":"(DruidServerdruidServer@ImmutableSet<DataSegment>segments@ZkPathsConfigzkPathsConfig@ObjectMapperjsonMapper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/37/75f57768e9f0d1e0ff7ae4d562ded7e97e91ec.src","preCode":"  protected String announceBatchSegmentsForServer(\n      DruidServer druidServer,\n      ImmutableSet<DataSegment> segments,\n      ZkPathsConfig zkPathsConfig,\n      ObjectMapper jsonMapper\n  )\n  {\n    final String segmentAnnouncementPath = ZKPaths.makePath(ZKPaths.makePath(\n        zkPathsConfig.getLiveSegmentsPath(),\n        druidServer.getHost()),\n        UUIDUtils.generateUuid(\n          druidServer.getHost(),\n          druidServer.getType().toString(),\n          druidServer.getTier(),\n          DateTimes.nowUtc().toString()\n        ) + String.valueOf(batchCtr++)\n    );\n\n\n    try {\n      curator.create()\n             .compressed()\n             .withMode(CreateMode.EPHEMERAL)\n             .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(segments));\n    }\n    catch (KeeperException.NodeExistsException e) {\n      try {\n        curator.setData()\n               .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(segments));\n      }\n      catch (Exception e1) {\n        Throwables.propagate(e1);\n      }\n    }\n    catch (Exception e) {\n      Throwables.propagate(e);\n    }\n\n    return segmentAnnouncementPath;\n  }\n","realPath":"server/src/test/java/org/apache/druid/curator/CuratorTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-11-16 05:21:34","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  protected void announceSegmentForServer(\n      DruidServer druidServer,\n      DataSegment segment,\n      ZkPathsConfig zkPathsConfig,\n      ObjectMapper jsonMapper\n  )\n  {\n    final String segmentAnnouncementPath = ZKPaths.makePath(ZKPaths.makePath(\n        zkPathsConfig.getLiveSegmentsPath(),\n        druidServer.getHost()\n    ), segment.getIdentifier());\n\n    try {\n      curator.create()\n             .compressed()\n             .withMode(CreateMode.EPHEMERAL)\n             .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(ImmutableSet.of(segment)));\n    }\n    catch (KeeperException.NodeExistsException e) {\n      try {\n        curator.setData()\n               .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(ImmutableSet.of(segment)));\n      }\n      catch (Exception e1) {\n        Throwables.propagate(e1);\n      }\n    }\n    catch (Exception e) {\n      Throwables.propagate(e);\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":132,"groupId":"19659","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"announceSegmentForServer","params":"(DruidServerdruidServer@DataSegmentsegment@ZkPathsConfigzkPathsConfig@ObjectMapperjsonMapper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/37/75f57768e9f0d1e0ff7ae4d562ded7e97e91ec.src","preCode":"  protected void announceSegmentForServer(\n      DruidServer druidServer,\n      DataSegment segment,\n      ZkPathsConfig zkPathsConfig,\n      ObjectMapper jsonMapper\n  )\n  {\n    final String segmentAnnouncementPath = ZKPaths.makePath(ZKPaths.makePath(\n        zkPathsConfig.getLiveSegmentsPath(),\n        druidServer.getHost()\n    ), segment.getIdentifier());\n\n    try {\n      curator.create()\n             .compressed()\n             .withMode(CreateMode.EPHEMERAL)\n             .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(ImmutableSet.of(segment)));\n    }\n    catch (KeeperException.NodeExistsException e) {\n      try {\n        curator.setData()\n               .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(ImmutableSet.of(segment)));\n      }\n      catch (Exception e1) {\n        Throwables.propagate(e1);\n      }\n    }\n    catch (Exception e) {\n      Throwables.propagate(e);\n    }\n  }\n","realPath":"server/src/test/java/org/apache/druid/curator/CuratorTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"N"},{"authorDate":"2018-11-16 05:21:34","commitOrder":2,"curCode":"  protected String announceBatchSegmentsForServer(\n      DruidServer druidServer,\n      ImmutableSet<DataSegment> segments,\n      ZkPathsConfig zkPathsConfig,\n      ObjectMapper jsonMapper\n  )\n  {\n    final String segmentAnnouncementPath = ZKPaths.makePath(ZKPaths.makePath(\n        zkPathsConfig.getLiveSegmentsPath(),\n        druidServer.getHost()),\n        UUIDUtils.generateUuid(\n          druidServer.getHost(),\n          druidServer.getType().toString(),\n          druidServer.getTier(),\n          DateTimes.nowUtc().toString()\n        ) + (batchCtr++)\n    );\n\n\n    try {\n      curator.create()\n             .compressed()\n             .withMode(CreateMode.EPHEMERAL)\n             .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(segments));\n    }\n    catch (KeeperException.NodeExistsException e) {\n      try {\n        curator.setData()\n               .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(segments));\n      }\n      catch (Exception e1) {\n        Throwables.propagate(e1);\n      }\n    }\n    catch (Exception e) {\n      Throwables.propagate(e);\n    }\n\n    return segmentAnnouncementPath;\n  }\n","date":"2018-11-16 05:21:34","endLine":173,"groupId":"1901","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"announceBatchSegmentsForServer","params":"(DruidServerdruidServer@ImmutableSet<DataSegment>segments@ZkPathsConfigzkPathsConfig@ObjectMapperjsonMapper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/40/a039a09b7233f43c8f9abbcc16e9cd8575cde7.src","preCode":"  protected String announceBatchSegmentsForServer(\n      DruidServer druidServer,\n      ImmutableSet<DataSegment> segments,\n      ZkPathsConfig zkPathsConfig,\n      ObjectMapper jsonMapper\n  )\n  {\n    final String segmentAnnouncementPath = ZKPaths.makePath(ZKPaths.makePath(\n        zkPathsConfig.getLiveSegmentsPath(),\n        druidServer.getHost()),\n        UUIDUtils.generateUuid(\n          druidServer.getHost(),\n          druidServer.getType().toString(),\n          druidServer.getTier(),\n          DateTimes.nowUtc().toString()\n        ) + String.valueOf(batchCtr++)\n    );\n\n\n    try {\n      curator.create()\n             .compressed()\n             .withMode(CreateMode.EPHEMERAL)\n             .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(segments));\n    }\n    catch (KeeperException.NodeExistsException e) {\n      try {\n        curator.setData()\n               .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(segments));\n      }\n      catch (Exception e1) {\n        Throwables.propagate(e1);\n      }\n    }\n    catch (Exception e) {\n      Throwables.propagate(e);\n    }\n\n    return segmentAnnouncementPath;\n  }\n","realPath":"server/src/test/java/org/apache/druid/curator/CuratorTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"8f3fe9cd028592b4b1449c2a5e6dba482bed0549","commitMessage":"@@@Prohibit String.replace() and String.replaceAll().  fix and prohibit some toString()-related redundancies (#6607)\n\n* Prohibit String.replace() and String.replaceAll().  fix and prohibit some toString()-related redundancies\n\n* Fix bug\n\n* Replace checkstyle regexp with IntelliJ inspection\n","date":"2018-11-16 05:21:34","modifiedFileCount":"97","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-01-22 03:11:10","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":3,"curCode":"  protected void announceSegmentForServer(\n      DruidServer druidServer,\n      DataSegment segment,\n      ZkPathsConfig zkPathsConfig,\n      ObjectMapper jsonMapper\n  )\n  {\n    final String segmentAnnouncementPath =\n        ZKPaths.makePath(zkPathsConfig.getLiveSegmentsPath(), druidServer.getHost(), segment.getId().toString());\n\n    try {\n      curator.create()\n             .compressed()\n             .withMode(CreateMode.EPHEMERAL)\n             .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(ImmutableSet.of(segment)));\n    }\n    catch (KeeperException.NodeExistsException e) {\n      try {\n        curator.setData()\n               .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(ImmutableSet.of(segment)));\n      }\n      catch (Exception e1) {\n        Throwables.propagate(e1);\n      }\n    }\n    catch (Exception e) {\n      Throwables.propagate(e);\n    }\n  }\n","date":"2019-01-22 03:11:10","endLine":130,"groupId":"19659","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"announceSegmentForServer","params":"(DruidServerdruidServer@DataSegmentsegment@ZkPathsConfigzkPathsConfig@ObjectMapperjsonMapper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7a/0785126ca9d51b056832b14d4be7af954a37b1.src","preCode":"  protected void announceSegmentForServer(\n      DruidServer druidServer,\n      DataSegment segment,\n      ZkPathsConfig zkPathsConfig,\n      ObjectMapper jsonMapper\n  )\n  {\n    final String segmentAnnouncementPath = ZKPaths.makePath(ZKPaths.makePath(\n        zkPathsConfig.getLiveSegmentsPath(),\n        druidServer.getHost()\n    ), segment.getIdentifier());\n\n    try {\n      curator.create()\n             .compressed()\n             .withMode(CreateMode.EPHEMERAL)\n             .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(ImmutableSet.of(segment)));\n    }\n    catch (KeeperException.NodeExistsException e) {\n      try {\n        curator.setData()\n               .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(ImmutableSet.of(segment)));\n      }\n      catch (Exception e1) {\n        Throwables.propagate(e1);\n      }\n    }\n    catch (Exception e) {\n      Throwables.propagate(e);\n    }\n  }\n","realPath":"server/src/test/java/org/apache/druid/curator/CuratorTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2019-01-22 03:11:10","commitOrder":3,"curCode":"  protected String announceBatchSegmentsForServer(\n      DruidServer druidServer,\n      ImmutableSet<DataSegment> segments,\n      ZkPathsConfig zkPathsConfig,\n      ObjectMapper jsonMapper\n  )\n  {\n    final String segmentAnnouncementPath = ZKPaths.makePath(\n        zkPathsConfig.getLiveSegmentsPath(),\n        druidServer.getHost(),\n        UUIDUtils.generateUuid(\n          druidServer.getHost(),\n          druidServer.getType().toString(),\n          druidServer.getTier(),\n          DateTimes.nowUtc().toString()\n        ) + (batchCtr++)\n    );\n\n\n    try {\n      curator.create()\n             .compressed()\n             .withMode(CreateMode.EPHEMERAL)\n             .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(segments));\n    }\n    catch (KeeperException.NodeExistsException e) {\n      try {\n        curator.setData()\n               .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(segments));\n      }\n      catch (Exception e1) {\n        Throwables.propagate(e1);\n      }\n    }\n    catch (Exception e) {\n      Throwables.propagate(e);\n    }\n\n    return segmentAnnouncementPath;\n  }\n","date":"2019-01-22 03:11:10","endLine":171,"groupId":"1901","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"announceBatchSegmentsForServer","params":"(DruidServerdruidServer@ImmutableSet<DataSegment>segments@ZkPathsConfigzkPathsConfig@ObjectMapperjsonMapper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7a/0785126ca9d51b056832b14d4be7af954a37b1.src","preCode":"  protected String announceBatchSegmentsForServer(\n      DruidServer druidServer,\n      ImmutableSet<DataSegment> segments,\n      ZkPathsConfig zkPathsConfig,\n      ObjectMapper jsonMapper\n  )\n  {\n    final String segmentAnnouncementPath = ZKPaths.makePath(ZKPaths.makePath(\n        zkPathsConfig.getLiveSegmentsPath(),\n        druidServer.getHost()),\n        UUIDUtils.generateUuid(\n          druidServer.getHost(),\n          druidServer.getType().toString(),\n          druidServer.getTier(),\n          DateTimes.nowUtc().toString()\n        ) + (batchCtr++)\n    );\n\n\n    try {\n      curator.create()\n             .compressed()\n             .withMode(CreateMode.EPHEMERAL)\n             .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(segments));\n    }\n    catch (KeeperException.NodeExistsException e) {\n      try {\n        curator.setData()\n               .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(segments));\n      }\n      catch (Exception e1) {\n        Throwables.propagate(e1);\n      }\n    }\n    catch (Exception e) {\n      Throwables.propagate(e);\n    }\n\n    return segmentAnnouncementPath;\n  }\n","realPath":"server/src/test/java/org/apache/druid/curator/CuratorTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"8eae26fd4e7572060d112864dd3d5f6a865b9c89","commitMessage":"@@@Introduce SegmentId class (#6370)\n\n* Introduce SegmentId class\n\n* tmp\n\n* Fix SelectQueryRunnerTest\n\n* Fix indentation\n\n* Fixes\n\n* Remove Comparators.inverse() tests\n\n* Refinements\n\n* Fix tests\n\n* Fix more tests\n\n* Remove duplicate DataSegmentTest.  fixes #6064\n\n* SegmentDescriptor doc\n\n* Fix SQLMetadataStorageUpdaterJobHandler\n\n* Fix DataSegment deserialization for ignoring id\n\n* Add comments\n\n* More comments\n\n* Address more comments\n\n* Fix compilation\n\n* Restore segment2 in SystemSchemaTest according to a comment\n\n* Fix style\n\n* fix testServerSegmentsTable\n\n* Fix compilation\n\n* Add comments about why SegmentId and SegmentIdWithShardSpec are separate classes\n\n* Fix SystemSchemaTest\n\n* Fix style\n\n* Compare SegmentDescriptor with SegmentId in Javadoc and comments rather than with DataSegment\n\n* Remove a link.  see https://youtrack.jetbrains.com/issue/IDEA-205164\n\n* Fix compilation\n","date":"2019-01-22 03:11:10","modifiedFileCount":"308","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-03-15 05:28:33","codes":[{"authorDate":"2019-03-15 05:28:33","commitOrder":4,"curCode":"  protected void announceSegmentForServer(\n      DruidServer druidServer,\n      DataSegment segment,\n      ZkPathsConfig zkPathsConfig,\n      ObjectMapper jsonMapper\n  )\n  {\n    final String segmentAnnouncementPath =\n        ZKPaths.makePath(zkPathsConfig.getLiveSegmentsPath(), druidServer.getHost(), segment.getId().toString());\n\n    try {\n      curator.create()\n             .compressed()\n             .withMode(CreateMode.EPHEMERAL)\n             .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(ImmutableSet.of(segment)));\n    }\n    catch (KeeperException.NodeExistsException e) {\n      try {\n        curator.setData()\n               .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(ImmutableSet.of(segment)));\n      }\n      catch (Exception e1) {\n        throw new RuntimeException(e1);\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2019-03-15 05:28:33","endLine":129,"groupId":"10853","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"announceSegmentForServer","params":"(DruidServerdruidServer@DataSegmentsegment@ZkPathsConfigzkPathsConfig@ObjectMapperjsonMapper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5e/b813eb76a0ef605605f1c7ec51cf85758da46a.src","preCode":"  protected void announceSegmentForServer(\n      DruidServer druidServer,\n      DataSegment segment,\n      ZkPathsConfig zkPathsConfig,\n      ObjectMapper jsonMapper\n  )\n  {\n    final String segmentAnnouncementPath =\n        ZKPaths.makePath(zkPathsConfig.getLiveSegmentsPath(), druidServer.getHost(), segment.getId().toString());\n\n    try {\n      curator.create()\n             .compressed()\n             .withMode(CreateMode.EPHEMERAL)\n             .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(ImmutableSet.of(segment)));\n    }\n    catch (KeeperException.NodeExistsException e) {\n      try {\n        curator.setData()\n               .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(ImmutableSet.of(segment)));\n      }\n      catch (Exception e1) {\n        Throwables.propagate(e1);\n      }\n    }\n    catch (Exception e) {\n      Throwables.propagate(e);\n    }\n  }\n","realPath":"server/src/test/java/org/apache/druid/curator/CuratorTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2019-03-15 05:28:33","commitOrder":4,"curCode":"  protected String announceBatchSegmentsForServer(\n      DruidServer druidServer,\n      ImmutableSet<DataSegment> segments,\n      ZkPathsConfig zkPathsConfig,\n      ObjectMapper jsonMapper\n  )\n  {\n    final String segmentAnnouncementPath = ZKPaths.makePath(\n        zkPathsConfig.getLiveSegmentsPath(),\n        druidServer.getHost(),\n        UUIDUtils.generateUuid(\n          druidServer.getHost(),\n          druidServer.getType().toString(),\n          druidServer.getTier(),\n          DateTimes.nowUtc().toString()\n        ) + (batchCtr++)\n    );\n\n\n    try {\n      curator.create()\n             .compressed()\n             .withMode(CreateMode.EPHEMERAL)\n             .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(segments));\n    }\n    catch (KeeperException.NodeExistsException e) {\n      try {\n        curator.setData()\n               .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(segments));\n      }\n      catch (Exception e1) {\n        throw new RuntimeException(e1);\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return segmentAnnouncementPath;\n  }\n","date":"2019-03-15 05:28:33","endLine":170,"groupId":"10853","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"announceBatchSegmentsForServer","params":"(DruidServerdruidServer@ImmutableSet<DataSegment>segments@ZkPathsConfigzkPathsConfig@ObjectMapperjsonMapper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5e/b813eb76a0ef605605f1c7ec51cf85758da46a.src","preCode":"  protected String announceBatchSegmentsForServer(\n      DruidServer druidServer,\n      ImmutableSet<DataSegment> segments,\n      ZkPathsConfig zkPathsConfig,\n      ObjectMapper jsonMapper\n  )\n  {\n    final String segmentAnnouncementPath = ZKPaths.makePath(\n        zkPathsConfig.getLiveSegmentsPath(),\n        druidServer.getHost(),\n        UUIDUtils.generateUuid(\n          druidServer.getHost(),\n          druidServer.getType().toString(),\n          druidServer.getTier(),\n          DateTimes.nowUtc().toString()\n        ) + (batchCtr++)\n    );\n\n\n    try {\n      curator.create()\n             .compressed()\n             .withMode(CreateMode.EPHEMERAL)\n             .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(segments));\n    }\n    catch (KeeperException.NodeExistsException e) {\n      try {\n        curator.setData()\n               .forPath(segmentAnnouncementPath, jsonMapper.writeValueAsBytes(segments));\n      }\n      catch (Exception e1) {\n        Throwables.propagate(e1);\n      }\n    }\n    catch (Exception e) {\n      Throwables.propagate(e);\n    }\n\n    return segmentAnnouncementPath;\n  }\n","realPath":"server/src/test/java/org/apache/druid/curator/CuratorTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"7ada1c49f9735a37808f3ed7656d93ae88b8b925","commitMessage":"@@@Prohibit Throwables.propagate() (#7121)\n\n* Throw caught exception.\n\n* Throw caught exceptions.\n\n* Related checkstyle rule is added to prevent further bugs.\n\n* RuntimeException() is used instead of Throwables.propagate().\n\n* Missing import is added.\n\n* Throwables are propogated if possible.\n\n* Throwables are propogated if possible.\n\n* Throwables are propogated if possible.\n\n* Throwables are propogated if possible.\n\n* * Checkstyle definition is improved.\n* Throwables.propagate() usages are removed.\n\n* Checkstyle pattern is changed for only scanning \"Throwables.propagate(\" instead of checking lookbehind.\n\n* Throwable is kept before firing a Runtime Exception.\n\n* Fix unused assignments.\n","date":"2019-03-15 05:28:33","modifiedFileCount":"228","status":"M","submitter":"Furkan KAMACI"}]
