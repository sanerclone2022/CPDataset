[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSimple()\n  {\n    final DimFilterHavingSpec havingSpec = new DimFilterHavingSpec(new SelectorDimFilter(\"foo\", \"bar\", null), null);\n    havingSpec.setRowSignature(null);\n\n    Assert.assertTrue(havingSpec.eval(new MapBasedRow(0, ImmutableMap.of(\"foo\", \"bar\"))));\n    Assert.assertFalse(havingSpec.eval(new MapBasedRow(0, ImmutableMap.of(\"foo\", \"baz\"))));\n  }\n","date":"2018-08-31 00:56:26","endLine":56,"groupId":"11221","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8e/8ee5a13bfb862b0cd91044ad86c9586e452a8f.src","preCode":"  public void testSimple()\n  {\n    final DimFilterHavingSpec havingSpec = new DimFilterHavingSpec(new SelectorDimFilter(\"foo\", \"bar\", null), null);\n    havingSpec.setRowSignature(null);\n\n    Assert.assertTrue(havingSpec.eval(new MapBasedRow(0, ImmutableMap.of(\"foo\", \"bar\"))));\n    Assert.assertFalse(havingSpec.eval(new MapBasedRow(0, ImmutableMap.of(\"foo\", \"baz\"))));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/having/DimFilterHavingSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testRowSignature()\n  {\n    final DimFilterHavingSpec havingSpec = new DimFilterHavingSpec(new SelectorDimFilter(\"foo\", \"1\", null), null);\n    havingSpec.setRowSignature(ImmutableMap.of(\"foo\", ValueType.LONG));\n\n    Assert.assertTrue(havingSpec.eval(new MapBasedRow(0, ImmutableMap.of(\"foo\", 1L))));\n    Assert.assertFalse(havingSpec.eval(new MapBasedRow(0, ImmutableMap.of(\"foo\", 2L))));\n  }\n","date":"2018-08-31 00:56:26","endLine":66,"groupId":"10354","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRowSignature","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8e/8ee5a13bfb862b0cd91044ad86c9586e452a8f.src","preCode":"  public void testRowSignature()\n  {\n    final DimFilterHavingSpec havingSpec = new DimFilterHavingSpec(new SelectorDimFilter(\"foo\", \"1\", null), null);\n    havingSpec.setRowSignature(ImmutableMap.of(\"foo\", ValueType.LONG));\n\n    Assert.assertTrue(havingSpec.eval(new MapBasedRow(0, ImmutableMap.of(\"foo\", 1L))));\n    Assert.assertFalse(havingSpec.eval(new MapBasedRow(0, ImmutableMap.of(\"foo\", 2L))));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/having/DimFilterHavingSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-08-01 07:15:12","codes":[{"authorDate":"2019-08-01 07:15:12","commitOrder":2,"curCode":"  public void testSimple()\n  {\n    final DimFilterHavingSpec havingSpec = new DimFilterHavingSpec(new SelectorDimFilter(\"foo\", \"bar\", null), null);\n    havingSpec.setQuery(\n        GroupByQuery.builder()\n                    .setDataSource(\"dummy\")\n                    .setInterval(\"1000/3000\")\n                    .setDimensions(DefaultDimensionSpec.of(\"foo\"))\n                    .setGranularity(Granularities.ALL)\n                    .build()\n    );\n\n    Assert.assertTrue(havingSpec.eval(ResultRow.of(\"bar\")));\n    Assert.assertFalse(havingSpec.eval(ResultRow.of(\"baz\")));\n  }\n","date":"2019-08-01 07:15:12","endLine":65,"groupId":"106617","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f0/d82d67185c660a7a546dcbbd3a130f0e9a588a.src","preCode":"  public void testSimple()\n  {\n    final DimFilterHavingSpec havingSpec = new DimFilterHavingSpec(new SelectorDimFilter(\"foo\", \"bar\", null), null);\n    havingSpec.setRowSignature(null);\n\n    Assert.assertTrue(havingSpec.eval(new MapBasedRow(0, ImmutableMap.of(\"foo\", \"bar\"))));\n    Assert.assertFalse(havingSpec.eval(new MapBasedRow(0, ImmutableMap.of(\"foo\", \"baz\"))));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/having/DimFilterHavingSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2019-08-01 07:15:12","commitOrder":2,"curCode":"  public void testRowSignature()\n  {\n    final DimFilterHavingSpec havingSpec = new DimFilterHavingSpec(new SelectorDimFilter(\"foo\", \"1\", null), null);\n    havingSpec.setQuery(\n        GroupByQuery.builder()\n                    .setDataSource(\"dummy\")\n                    .setInterval(\"1000/3000\")\n                    .setGranularity(Granularities.ALL)\n                    .setDimensions(new DefaultDimensionSpec(\"foo\", \"foo\", ValueType.LONG))\n                    .build()\n    );\n\n    Assert.assertTrue(havingSpec.eval(ResultRow.of(1L)));\n    Assert.assertFalse(havingSpec.eval(ResultRow.of(2L)));\n  }\n","date":"2019-08-01 07:15:12","endLine":82,"groupId":"106617","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testRowSignature","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f0/d82d67185c660a7a546dcbbd3a130f0e9a588a.src","preCode":"  public void testRowSignature()\n  {\n    final DimFilterHavingSpec havingSpec = new DimFilterHavingSpec(new SelectorDimFilter(\"foo\", \"1\", null), null);\n    havingSpec.setRowSignature(ImmutableMap.of(\"foo\", ValueType.LONG));\n\n    Assert.assertTrue(havingSpec.eval(new MapBasedRow(0, ImmutableMap.of(\"foo\", 1L))));\n    Assert.assertFalse(havingSpec.eval(new MapBasedRow(0, ImmutableMap.of(\"foo\", 2L))));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/having/DimFilterHavingSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"77297f4e6f2e9d617c96cd46852bb5a772961e85","commitMessage":"@@@GroupBy array-based result rows. (#8196)\n\n* GroupBy array-based result rows.\n\nFixes #8118; see that proposal for details.\n\nOther than the GroupBy changes.  the main other \"interesting\" classes are:\n\n- ResultRow: The array-based result type.\n- BaseQuery: T is no longer required to be Comparable.\n- QueryToolChest: Adds \"decorateObjectMapper\" to enable query-aware serialization\n  and deserialization of result rows (necessary due to their positional nature).\n- QueryResource: Uses the new decoration functionality.\n- DirectDruidClient: Also uses the new decoration functionality.\n- QueryMaker (in Druid SQL): Modifications to read ResultRows.\n\nThese classes weren't changed.  but got some new javadocs:\n\n- BySegmentQueryRunner\n- FinalizeResultsQueryRunner\n- Query\n\n* Adjustments for TC stuff.\n","date":"2019-08-01 07:15:12","modifiedFileCount":"111","status":"M","submitter":"Gian Merlino"}]
