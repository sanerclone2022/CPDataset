[{"authorTime":"2019-02-03 14:34:53","codes":[{"authorDate":"2019-02-03 14:34:53","commitOrder":1,"curCode":"  public void testApproxCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1, 21, 'HLL_8'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"a3:v\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"a4:v\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new HllSketchBuildAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.NOT(BaseCalciteQueryTest.SELECTOR(\"dim2\", \"\", null))\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a3\",\n                          \"a3:v\",\n                          null,\n                          null\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a4\",\n                          \"a4:v\",\n                          null,\n                          null\n                      ),\n                      new HllSketchMergeAggregatorFactory(\"a5\", \"hllsketch_dim1\", 21, \"HLL_8\"),\n                      new HllSketchMergeAggregatorFactory(\"a6\", \"hllsketch_dim1\", null, null)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2019-02-03 14:34:53","endLine":299,"groupId":"9739","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testApproxCountDistinctHllSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/46/eb02c01c8e897a404808c56cbb32fa8d7abd30.src","preCode":"  public void testApproxCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1, 21, 'HLL_8'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"a3:v\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"a4:v\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new HllSketchBuildAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.NOT(BaseCalciteQueryTest.SELECTOR(\"dim2\", \"\", null))\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a3\",\n                          \"a3:v\",\n                          null,\n                          null\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a4\",\n                          \"a4:v\",\n                          null,\n                          null\n                      ),\n                      new HllSketchMergeAggregatorFactory(\"a5\", \"hllsketch_dim1\", 21, \"HLL_8\"),\n                      new HllSketchMergeAggregatorFactory(\"a6\", \"hllsketch_dim1\", null, null)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"B"},{"authorDate":"2019-02-03 14:34:53","commitOrder":1,"curCode":"  public void testApproxCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1, 32768),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"a3:v\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"a4:v\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new SketchMergeAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new SketchMergeAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.NOT(BaseCalciteQueryTest.SELECTOR(\"dim2\", \"\", null))\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a3\",\n                          \"a3:v\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a4\",\n                          \"a4:v\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\"a5\", \"thetasketch_dim1\", 32768, null, null, null),\n                      new SketchMergeAggregatorFactory(\"a6\", \"thetasketch_dim1\", null, null, null, null)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2019-02-03 14:34:53","endLine":307,"groupId":"9739","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testApproxCountDistinctThetaSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e8/44864f6f750da57ab6ef9610947da8fd8fab13.src","preCode":"  public void testApproxCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1, 32768),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"a3:v\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"a4:v\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new SketchMergeAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new SketchMergeAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.NOT(BaseCalciteQueryTest.SELECTOR(\"dim2\", \"\", null))\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a3\",\n                          \"a3:v\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a4\",\n                          \"a4:v\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\"a5\", \"thetasketch_dim1\", 32768, null, null, null),\n                      new SketchMergeAggregatorFactory(\"a6\", \"thetasketch_dim1\", null, null, null, null)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"B"}],"commitId":"953b96d0a436b2bd979c2aa6eecc3f636387633c","commitMessage":"@@@Add more sketch aggregator support in Druid SQL (#6951)\n\n* Add more sketch aggregator support in Druid SQL\n\n* Add docs\n\n* Tweak module serde register\n\n* Fix tests\n\n* Checkstyle\n\n* Test fix\n\n* PR comment\n\n* PR comment\n\n* PR comments\n","date":"2019-02-03 14:34:53","modifiedFileCount":"16","status":"B","submitter":"Jonathan Wei"},{"authorTime":"2019-02-24 12:10:31","codes":[{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public void testApproxCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1, 21, 'HLL_8'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"a3:v\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"a4:v\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new HllSketchBuildAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a3\",\n                          \"a3:v\",\n                          null,\n                          null\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a4\",\n                          \"a4:v\",\n                          null,\n                          null\n                      ),\n                      new HllSketchMergeAggregatorFactory(\"a5\", \"hllsketch_dim1\", 21, \"HLL_8\"),\n                      new HllSketchMergeAggregatorFactory(\"a6\", \"hllsketch_dim1\", null, null)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":299,"groupId":"9739","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testApproxCountDistinctHllSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/da/70643ae4025430fcf383633ac42f4dc0a75358.src","preCode":"  public void testApproxCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1, 21, 'HLL_8'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"a3:v\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"a4:v\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new HllSketchBuildAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.NOT(BaseCalciteQueryTest.SELECTOR(\"dim2\", \"\", null))\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a3\",\n                          \"a3:v\",\n                          null,\n                          null\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a4\",\n                          \"a4:v\",\n                          null,\n                          null\n                      ),\n                      new HllSketchMergeAggregatorFactory(\"a5\", \"hllsketch_dim1\", 21, \"HLL_8\"),\n                      new HllSketchMergeAggregatorFactory(\"a6\", \"hllsketch_dim1\", null, null)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"},{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public void testApproxCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1, 32768),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"a3:v\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"a4:v\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new SketchMergeAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new SketchMergeAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a3\",\n                          \"a3:v\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a4\",\n                          \"a4:v\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\"a5\", \"thetasketch_dim1\", 32768, null, null, null),\n                      new SketchMergeAggregatorFactory(\"a6\", \"thetasketch_dim1\", null, null, null, null)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":307,"groupId":"9739","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testApproxCountDistinctThetaSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/93/9e396950a6b7b21a4eb0cb499bbaa4499143ed.src","preCode":"  public void testApproxCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1, 32768),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"a3:v\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"a4:v\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new SketchMergeAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new SketchMergeAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.NOT(BaseCalciteQueryTest.SELECTOR(\"dim2\", \"\", null))\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a3\",\n                          \"a3:v\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a4\",\n                          \"a4:v\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\"a5\", \"thetasketch_dim1\", 32768, null, null, null),\n                      new SketchMergeAggregatorFactory(\"a6\", \"thetasketch_dim1\", null, null, null, null)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"8b803cbc22b15799fd0526de8d6d0eea155ad733","commitMessage":"@@@Added checkstyle for \"Methods starting with Capital Letters\"  (#7118)\n\n* Added checkstyle for \"Methods starting with Capital Letters\" and changed the method names violating this.\n\n* Un-abbreviate the method names in the calcite tests\n\n* Fixed checkstyle errors\n\n* Changed asserts position in the code\n","date":"2019-02-24 12:10:31","modifiedFileCount":"24","status":"M","submitter":"Himanshu Pandey"},{"authorTime":"2019-03-12 02:37:58","codes":[{"authorDate":"2019-03-12 02:37:58","commitOrder":3,"curCode":"  public void testApproxCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1, 21, 'HLL_8'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"v0\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"v1\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new HllSketchBuildAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a3\",\n                          \"v0\",\n                          null,\n                          null\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a4\",\n                          \"v1\",\n                          null,\n                          null\n                      ),\n                      new HllSketchMergeAggregatorFactory(\"a5\", \"hllsketch_dim1\", 21, \"HLL_8\"),\n                      new HllSketchMergeAggregatorFactory(\"a6\", \"hllsketch_dim1\", null, null)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":299,"groupId":"7117","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testApproxCountDistinctHllSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/70/cccbad6268ca588ea82ed23b5afc72a417de95.src","preCode":"  public void testApproxCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1, 21, 'HLL_8'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"a3:v\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"a4:v\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new HllSketchBuildAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a3\",\n                          \"a3:v\",\n                          null,\n                          null\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a4\",\n                          \"a4:v\",\n                          null,\n                          null\n                      ),\n                      new HllSketchMergeAggregatorFactory(\"a5\", \"hllsketch_dim1\", 21, \"HLL_8\"),\n                      new HllSketchMergeAggregatorFactory(\"a6\", \"hllsketch_dim1\", null, null)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"},{"authorDate":"2019-03-12 02:37:58","commitOrder":3,"curCode":"  public void testApproxCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1, 32768),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"v0\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"v1\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new SketchMergeAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new SketchMergeAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a3\",\n                          \"v0\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a4\",\n                          \"v1\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\"a5\", \"thetasketch_dim1\", 32768, null, null, null),\n                      new SketchMergeAggregatorFactory(\"a6\", \"thetasketch_dim1\", null, null, null, null)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":307,"groupId":"7117","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testApproxCountDistinctThetaSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/af/418f3e3a70c78bd635fd3cfc9ff3e3bfd1cec8.src","preCode":"  public void testApproxCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1, 32768),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"a3:v\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"a4:v\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new SketchMergeAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new SketchMergeAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a3\",\n                          \"a3:v\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a4\",\n                          \"a4:v\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\"a5\", \"thetasketch_dim1\", 32768, null, null, null),\n                      new SketchMergeAggregatorFactory(\"a6\", \"thetasketch_dim1\", null, null, null, null)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"d7ba19d477732578fc310831ed28365b36332752","commitMessage":"@@@sql.  filters.  and virtual columns  (#6902)\n\n* refactor sql planning to re-use expression virtual columns when possible when constructing a DruidQuery.  allowing virtual columns to be defined in filter expressions.  and making resulting native druid queries more concise. also minor refactor of built-in sql aggregators to maximize code re-use\n\n* fix it\n\n* fix it in the right place\n\n* fixup for base64 stuff\n\n* fixup tests\n\n* fix merge conflict on import order\n\n* fixup\n\n* fix imports\n\n* fix tests\n\n* review comments\n\n* refactor\n\n* re-arrange\n\n* better javadoc\n\n* fixup merge\n\n* fixup tests\n\n* fix accidental changes\n","date":"2019-03-12 02:37:58","modifiedFileCount":"33","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-03-12 02:37:58","codes":[{"authorDate":"2019-07-06 06:37:58","commitOrder":4,"curCode":"  public void testApproxCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1, 21, 'HLL_8'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"v0\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"v1\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          ROUND\n                      ),\n                      new FilteredAggregatorFactory(\n                          new HllSketchBuildAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              ROUND\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a3\",\n                          \"v0\",\n                          null,\n                          null,\n                          ROUND\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a4\",\n                          \"v1\",\n                          null,\n                          null,\n                          ROUND\n                      ),\n                      new HllSketchMergeAggregatorFactory(\"a5\", \"hllsketch_dim1\", 21, \"HLL_8\", ROUND),\n                      new HllSketchMergeAggregatorFactory(\"a6\", \"hllsketch_dim1\", null, null, ROUND)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2019-07-06 06:37:58","endLine":305,"groupId":"7117","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testApproxCountDistinctHllSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6a/2f9801d7b07d922521930235758b694f7f2cb6.src","preCode":"  public void testApproxCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1, 21, 'HLL_8'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"v0\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"v1\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new HllSketchBuildAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a3\",\n                          \"v0\",\n                          null,\n                          null\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a4\",\n                          \"v1\",\n                          null,\n                          null\n                      ),\n                      new HllSketchMergeAggregatorFactory(\"a5\", \"hllsketch_dim1\", 21, \"HLL_8\"),\n                      new HllSketchMergeAggregatorFactory(\"a6\", \"hllsketch_dim1\", null, null)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2019-03-12 02:37:58","commitOrder":4,"curCode":"  public void testApproxCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1, 32768),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"v0\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"v1\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new SketchMergeAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new SketchMergeAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a3\",\n                          \"v0\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a4\",\n                          \"v1\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\"a5\", \"thetasketch_dim1\", 32768, null, null, null),\n                      new SketchMergeAggregatorFactory(\"a6\", \"thetasketch_dim1\", null, null, null, null)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":307,"groupId":"7117","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testApproxCountDistinctThetaSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/af/418f3e3a70c78bd635fd3cfc9ff3e3bfd1cec8.src","preCode":"  public void testApproxCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1, 32768),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"v0\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"v1\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new SketchMergeAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new SketchMergeAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a3\",\n                          \"v0\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a4\",\n                          \"v1\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\"a5\", \"thetasketch_dim1\", 32768, null, null, null),\n                      new SketchMergeAggregatorFactory(\"a6\", \"thetasketch_dim1\", null, null, null, null)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"N"}],"commitId":"0ded0ce4149ddea354ee4f5a98eef235abbd0e83","commitMessage":"@@@Add round support for DS-HLL (#8023)\n\n* Add round support for DS-HLL\n\nSince the Cardinality aggregator has a \"round\" option to round off estimated\nvalues generated from the HyperLogLog algorithm.  add the same \"round\" option to\nthe DataSketches HLL Sketch module aggregators to be consistent.\n\n* Fix checkstyle errors\n\n* Change HllSketchSqlAggregator to do rounding\n\n* Fix test for standard-compliant null handling mode\n","date":"2019-07-06 06:37:58","modifiedFileCount":"6","status":"M","submitter":"Chi Cao Minh"},{"authorTime":"2020-02-20 05:09:20","codes":[{"authorDate":"2020-02-20 05:09:20","commitOrder":5,"curCode":"  public void testApproxCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1, 21, 'HLL_8'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"v0\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"v1\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          ROUND\n                      ),\n                      new FilteredAggregatorFactory(\n                          new HllSketchBuildAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              ROUND\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a3\",\n                          \"v0\",\n                          null,\n                          null,\n                          ROUND\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a4\",\n                          \"v1\",\n                          null,\n                          null,\n                          ROUND\n                      ),\n                      new HllSketchMergeAggregatorFactory(\"a5\", \"hllsketch_dim1\", 21, \"HLL_8\", ROUND),\n                      new HllSketchMergeAggregatorFactory(\"a6\", \"hllsketch_dim1\", null, null, ROUND)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2020-02-20 05:09:20","endLine":325,"groupId":"7117","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testApproxCountDistinctHllSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cd/18115bca7002b75298b5301f1d5244afb04c03.src","preCode":"  public void testApproxCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1, 21, 'HLL_8'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"v0\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"v1\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          ROUND\n                      ),\n                      new FilteredAggregatorFactory(\n                          new HllSketchBuildAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              ROUND\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a3\",\n                          \"v0\",\n                          null,\n                          null,\n                          ROUND\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a4\",\n                          \"v1\",\n                          null,\n                          null,\n                          ROUND\n                      ),\n                      new HllSketchMergeAggregatorFactory(\"a5\", \"hllsketch_dim1\", 21, \"HLL_8\", ROUND),\n                      new HllSketchMergeAggregatorFactory(\"a6\", \"hllsketch_dim1\", null, null, ROUND)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"},{"authorDate":"2020-02-20 05:09:20","commitOrder":5,"curCode":"  public void testApproxCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1, 32768),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"v0\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"v1\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new SketchMergeAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new SketchMergeAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a3\",\n                          \"v0\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a4\",\n                          \"v1\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\"a5\", \"thetasketch_dim1\", 32768, null, null, null),\n                      new SketchMergeAggregatorFactory(\"a6\", \"thetasketch_dim1\", null, null, null, null)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2020-02-20 05:09:20","endLine":326,"groupId":"7117","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testApproxCountDistinctThetaSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ec/87c57dcff6fc0a181ec7dde31eec53fb4e26c3.src","preCode":"  public void testApproxCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1, 32768),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"v0\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"v1\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new SketchMergeAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new SketchMergeAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a3\",\n                          \"v0\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a4\",\n                          \"v1\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\"a5\", \"thetasketch_dim1\", 32768, null, null, null),\n                      new SketchMergeAggregatorFactory(\"a6\", \"thetasketch_dim1\", null, null, null, null)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"}],"commitId":"b408a6d774e43e574bf8092584fae76d582cfd8f","commitMessage":"@@@sql support for dynamic parameters (#6974)\n\n* sql support for dynamic parameters\n\n* fixup\n\n* javadocs\n\n* fixup from merge\n\n* formatting\n\n* fixes\n\n* fix it\n\n* doc fix\n\n* remove druid fallback self-join parameterized test\n\n* unused imports\n\n* ignore test for now\n\n* fix imports\n\n* fixup\n\n* fix merge\n\n* merge fixup\n\n* fix test that cannot vectorize\n\n* fixup and more better\n\n* dependency thingo\n\n* fix docs\n\n* tweaks\n\n* fix docs\n\n* spelling\n\n* unused imports after merge\n\n* review stuffs\n\n* add comment\n\n* add ignore text\n\n* review stuffs\n","date":"2020-02-20 05:09:20","modifiedFileCount":"32","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-04-17 09:45:46","codes":[{"authorDate":"2021-04-17 09:45:46","commitOrder":6,"curCode":"  public void testApproxCountDistinctHllSketch() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1, 21, 'HLL_8'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        queryContext,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"v0\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"v1\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          ROUND\n                      ),\n                      new FilteredAggregatorFactory(\n                          new HllSketchBuildAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              ROUND\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a3\",\n                          \"v0\",\n                          null,\n                          null,\n                          ROUND\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a4\",\n                          \"v1\",\n                          null,\n                          null,\n                          ROUND\n                      ),\n                      new HllSketchMergeAggregatorFactory(\"a5\", \"hllsketch_dim1\", 21, \"HLL_8\", ROUND),\n                      new HllSketchMergeAggregatorFactory(\"a6\", \"hllsketch_dim1\", null, null, ROUND)\n                  )\n              )\n              .context(queryContext)\n              .build()\n              .withOverriddenContext(ImmutableMap.of(\"skipEmptyBuckets\", true)),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2021-04-17 09:45:46","endLine":355,"groupId":"7117","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testApproxCountDistinctHllSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/faed1cbede6e20499ff30cba7b05c230a450f7.src","preCode":"  public void testApproxCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1, 21, 'HLL_8'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"v0\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"v1\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          ROUND\n                      ),\n                      new FilteredAggregatorFactory(\n                          new HllSketchBuildAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              ROUND\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a3\",\n                          \"v0\",\n                          null,\n                          null,\n                          ROUND\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a4\",\n                          \"v1\",\n                          null,\n                          null,\n                          ROUND\n                      ),\n                      new HllSketchMergeAggregatorFactory(\"a5\", \"hllsketch_dim1\", 21, \"HLL_8\", ROUND),\n                      new HllSketchMergeAggregatorFactory(\"a6\", \"hllsketch_dim1\", null, null, ROUND)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"},{"authorDate":"2021-04-17 09:45:46","commitOrder":6,"curCode":"  public void testApproxCountDistinctThetaSketch() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2),\\n\"\n                       \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2) FILTER(WHERE dim2 <> ''),\\n\"\n                       \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1)),\\n\"\n                       \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1) || 'x'),\\n\"\n                       \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1, 32768),\\n\"\n                       \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1)\\n\"\n                       \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        queryContext,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"v0\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"v1\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new SketchMergeAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new SketchMergeAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a3\",\n                          \"v0\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a4\",\n                          \"v1\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\"a5\", \"thetasketch_dim1\", 32768, null, null, null),\n                      new SketchMergeAggregatorFactory(\"a6\", \"thetasketch_dim1\", null, null, null, null)\n                  )\n              )\n              .context(queryContext)\n              .build()\n              .withOverriddenContext(ImmutableMap.of(\"skipEmptyBuckets\", true)),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2021-04-17 09:45:46","endLine":363,"groupId":"7117","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testApproxCountDistinctThetaSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0a/ac2b088cc582ff3f2c6a9904cd769d63d61d78.src","preCode":"  public void testApproxCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1, 32768),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"v0\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"v1\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new SketchMergeAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new SketchMergeAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a3\",\n                          \"v0\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a4\",\n                          \"v1\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\"a5\", \"thetasketch_dim1\", 32768, null, null, null),\n                      new SketchMergeAggregatorFactory(\"a6\", \"thetasketch_dim1\", null, null, null, null)\n                  )\n              )\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"}],"commitId":"f2b54de205eff996e76bd3d634360cc59c6b3577","commitMessage":"@@@Vectorized versions of HllSketch aggregators. (#11115)\n\n* Vectorized versions of HllSketch aggregators.\n\nThe patch uses the same?\"helper\" approach as #10767 and #10304.  and\nextends the tests to run in both vectorized and non-vectorized modes.\n\nAlso includes some minor changes to the theta sketch vector aggregator:\n\n- Cosmetic changes to make the hll and theta implementations look\n  more similar.\n- Extends the theta SQL tests to run in vectorized mode.\n\n* Updates post-code-review.\n\n* Fix javadoc.","date":"2021-04-17 09:45:46","modifiedFileCount":"8","status":"M","submitter":"Gian Merlino"},{"authorTime":"2021-05-11 01:13:37","codes":[{"authorDate":"2021-05-11 01:13:37","commitOrder":7,"curCode":"  public void testApproxCountDistinctHllSketch() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{6L, 2L, 2L, 1L, 2L, 5L, 5L}\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{6L, 2L, 2L, 1L, 1L, 5L, 5L}\n      );\n    }\n\n    testQuery(\n        \"SELECT\\n\"\n        + \"  SUM(cnt),\\n\"\n        + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2),\\n\" \r\n        + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n        + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1)),\\n\" \r\n        + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n        + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1, 21, 'HLL_8'),\\n\" \r\n        + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1)\\n\" \r\n        + \"FROM druid.foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      new ExpressionVirtualColumn(\n                          \"v0\",\n                          \"substring(\\\"dim2\\\", 0, 1)\",\n                          ValueType.STRING,\n                          TestExprMacroTable.INSTANCE\n                      ),\n                      new ExpressionVirtualColumn(\n                          \"v1\",\n                          \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                          ValueType.STRING,\n                          TestExprMacroTable.INSTANCE\n                      )\n                  )\n                  .aggregators(\n                      ImmutableList.of(\n                          new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                          new HllSketchBuildAggregatorFactory(\n                              \"a1\",\n                              \"dim2\",\n                              null,\n                              null,\n                              ROUND\n                          ),\n                          new FilteredAggregatorFactory(\n                              new HllSketchBuildAggregatorFactory(\n                                  \"a2\",\n                                  \"dim2\",\n                                  null,\n                                  null,\n                                  ROUND\n                              ),\n                              BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                          ),\n                          new HllSketchBuildAggregatorFactory(\n                              \"a3\",\n                              \"v0\",\n                              null,\n                              null,\n                              ROUND\n                          ),\n                          new HllSketchBuildAggregatorFactory(\n                              \"a4\",\n                              \"v1\",\n                              null,\n                              null,\n                              ROUND\n                          ),\n                          new HllSketchMergeAggregatorFactory(\"a5\", \"hllsketch_dim1\", 21, \"HLL_8\", ROUND),\n                          new HllSketchMergeAggregatorFactory(\"a6\", \"hllsketch_dim1\", null, null, ROUND)\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        expectedResults\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":229,"groupId":"103448","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"testApproxCountDistinctHllSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2c/71fa429ebbefc4d1862dabffe0d7c86b6a345d.src","preCode":"  public void testApproxCountDistinctHllSketch() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(dim2) FILTER(WHERE dim2 <> ''),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1)),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1) || 'x'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1, 21, 'HLL_8'),\\n\" \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1)\\n\" \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        queryContext,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"v0\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"v1\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          ROUND\n                      ),\n                      new FilteredAggregatorFactory(\n                          new HllSketchBuildAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              ROUND\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a3\",\n                          \"v0\",\n                          null,\n                          null,\n                          ROUND\n                      ),\n                      new HllSketchBuildAggregatorFactory(\n                          \"a4\",\n                          \"v1\",\n                          null,\n                          null,\n                          ROUND\n                      ),\n                      new HllSketchMergeAggregatorFactory(\"a5\", \"hllsketch_dim1\", 21, \"HLL_8\", ROUND),\n                      new HllSketchMergeAggregatorFactory(\"a6\", \"hllsketch_dim1\", null, null, ROUND)\n                  )\n              )\n              .context(queryContext)\n              .build()\n              .withOverriddenContext(ImmutableMap.of(\"skipEmptyBuckets\", true)),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2021-05-11 01:13:37","commitOrder":7,"curCode":"  public void testApproxCountDistinctThetaSketch() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    testQuery(\n        \"SELECT\\n\"\n        + \"  SUM(cnt),\\n\"\n        + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2),\\n\"\n        \r\n        + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2) FILTER(WHERE dim2 <> ''),\\n\"\n        \r\n        + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1)),\\n\"\n        \r\n        + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1) || 'x'),\\n\"\n        \r\n        + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1, 32768),\\n\"\n        \r\n        + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1)\\n\"\n        \r\n        + \"FROM druid.foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      new ExpressionVirtualColumn(\n                          \"v0\",\n                          \"substring(\\\"dim2\\\", 0, 1)\",\n                          ValueType.STRING,\n                          TestExprMacroTable.INSTANCE\n                      ),\n                      new ExpressionVirtualColumn(\n                          \"v1\",\n                          \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                          ValueType.STRING,\n                          TestExprMacroTable.INSTANCE\n                      )\n                  )\n                  .aggregators(\n                      ImmutableList.of(\n                          new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                          new SketchMergeAggregatorFactory(\n                              \"a1\",\n                              \"dim2\",\n                              null,\n                              null,\n                              null,\n                              null\n                          ),\n                          new FilteredAggregatorFactory(\n                              new SketchMergeAggregatorFactory(\n                                  \"a2\",\n                                  \"dim2\",\n                                  null,\n                                  null,\n                                  null,\n                                  null\n                              ),\n                              BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                          ),\n                          new SketchMergeAggregatorFactory(\n                              \"a3\",\n                              \"v0\",\n                              null,\n                              null,\n                              null,\n                              null\n                          ),\n                          new SketchMergeAggregatorFactory(\n                              \"a4\",\n                              \"v1\",\n                              null,\n                              null,\n                              null,\n                              null\n                          ),\n                          new SketchMergeAggregatorFactory(\"a5\", \"thetasketch_dim1\", 32768, null, null, null),\n                          new SketchMergeAggregatorFactory(\"a6\", \"thetasketch_dim1\", null, null, null, null)\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        expectedResults\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":253,"groupId":"103448","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"testApproxCountDistinctThetaSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/96/3a69c80110d5b466540b1d329bf4d12f694975.src","preCode":"  public void testApproxCountDistinctThetaSketch() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"  SUM(cnt),\\n\"\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2),\\n\"\n                       \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(dim2) FILTER(WHERE dim2 <> ''),\\n\"\n                       \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1)),\\n\"\n                       \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1) || 'x'),\\n\"\n                       \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1, 32768),\\n\"\n                       \r\n                       + \"  APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1)\\n\"\n                       \r\n                       + \"FROM druid.foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        queryContext,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults;\n\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              2L,\n              5L,\n              5L\n          }\n      );\n    } else {\n      expectedResults = ImmutableList.of(\n          new Object[]{\n              6L,\n              2L,\n              2L,\n              1L,\n              1L,\n              5L,\n              5L\n          }\n      );\n    }\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .virtualColumns(\n                  new ExpressionVirtualColumn(\n                      \"v0\",\n                      \"substring(\\\"dim2\\\", 0, 1)\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  ),\n                  new ExpressionVirtualColumn(\n                      \"v1\",\n                      \"concat(substring(\\\"dim2\\\", 0, 1),'x')\",\n                      ValueType.STRING,\n                      TestExprMacroTable.INSTANCE\n                  )\n              )\n              .aggregators(\n                  ImmutableList.of(\n                      new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                      new SketchMergeAggregatorFactory(\n                          \"a1\",\n                          \"dim2\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new FilteredAggregatorFactory(\n                          new SketchMergeAggregatorFactory(\n                              \"a2\",\n                              \"dim2\",\n                              null,\n                              null,\n                              null,\n                              null\n                          ),\n                          BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\", \"\", null))\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a3\",\n                          \"v0\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\n                          \"a4\",\n                          \"v1\",\n                          null,\n                          null,\n                          null,\n                          null\n                      ),\n                      new SketchMergeAggregatorFactory(\"a5\", \"thetasketch_dim1\", 32768, null, null, null),\n                      new SketchMergeAggregatorFactory(\"a6\", \"thetasketch_dim1\", null, null, null, null)\n                  )\n              )\n              .context(queryContext)\n              .build()\n              .withOverriddenContext(ImmutableMap.of(\"skipEmptyBuckets\", true)),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"691d7a1d548909951468005348a603380f4d6d74","commitMessage":"@@@SQL timeseries no longer skip empty buckets with all granularity (#11188)\n\n* SQL timeseries no longer skip empty buckets with all granularity\n\n* add comment.  fix tests\n\n* the ol switcheroo\n\n* revert unintended change\n\n* docs and more tests\n\n* style\n\n* make checkstyle happy\n\n* docs fixes and more tests\n\n* add docs.  tests for array_agg\n\n* fixes\n\n* oops\n\n* doc stuffs\n\n* fix compile.  match doc style","date":"2021-05-11 01:13:37","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"}]
