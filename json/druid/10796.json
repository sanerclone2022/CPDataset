[{"authorTime":"2020-03-10 17:57:16","codes":[{"authorDate":"2020-03-10 17:57:16","commitOrder":2,"curCode":"  private static final QuerySegmentWalker TEST_SEGMENT_WALKER = new QuerySegmentWalker()\n  {\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n    {\n      return (queryPlus, responseContext) -> Sequences.empty();\n    }\n\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n    {\n      return getQueryRunnerForIntervals(null, null);\n    }\n  };\n","date":"2020-03-10 17:57:16","endLine":108,"groupId":"5479","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"TEST_SEGMENT_WALKER","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a1/2b69025dd76b7493c0961ff10f70b4691c7411.src","preCode":"  private static final QuerySegmentWalker TEST_SEGMENT_WALKER = new QuerySegmentWalker()\n  {\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n    {\n      return (queryPlus, responseContext) -> Sequences.empty();\n    }\n\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n    {\n      return getQueryRunnerForIntervals(null, null);\n    }\n  };\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"MB"},{"authorDate":"2020-03-10 17:57:16","commitOrder":2,"curCode":"  private void createScheduledQueryResource(\n      QueryScheduler scheduler,\n      Collection<CountDownLatch> beforeScheduler,\n      Collection<CountDownLatch> inScheduler\n  )\n  {\n\n    QuerySegmentWalker texasRanger = new QuerySegmentWalker()\n    {\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n      {\n        return (queryPlus, responseContext) -> {\n          beforeScheduler.forEach(CountDownLatch::countDown);\n\n          return scheduler.run(\n              scheduler.laneQuery(queryPlus, ImmutableSet.of()),\n              new LazySequence<T>(() -> {\n                inScheduler.forEach(CountDownLatch::countDown);\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n                \r\n                return Sequences.empty();\n              })\n          );\n        };\n      }\n\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n      {\n        return getQueryRunnerForIntervals(null, null);\n      }\n    };\n\n    queryResource = new QueryResource(\n        new QueryLifecycleFactory(\n            WAREHOUSE,\n            texasRanger,\n            new DefaultGenericQueryMetricsFactory(),\n            new NoopServiceEmitter(),\n            testRequestLogger,\n            new AuthConfig(),\n            AuthTestUtils.TEST_AUTHORIZER_MAPPER\n        ),\n        JSON_MAPPER,\n        JSON_MAPPER,\n        scheduler,\n        new AuthConfig(),\n        null,\n        new DefaultGenericQueryMetricsFactory()\n    );\n  }\n","date":"2020-03-10 17:57:16","endLine":819,"groupId":"5479","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createScheduledQueryResource","params":"(QuerySchedulerscheduler@Collection<CountDownLatch>beforeScheduler@Collection<CountDownLatch>inScheduler)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a1/2b69025dd76b7493c0961ff10f70b4691c7411.src","preCode":"  private void createScheduledQueryResource(\n      QueryScheduler scheduler,\n      Collection<CountDownLatch> beforeScheduler,\n      Collection<CountDownLatch> inScheduler\n  )\n  {\n\n    QuerySegmentWalker texasRanger = new QuerySegmentWalker()\n    {\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n      {\n        return (queryPlus, responseContext) -> {\n          beforeScheduler.forEach(CountDownLatch::countDown);\n\n          return scheduler.run(\n              scheduler.laneQuery(queryPlus, ImmutableSet.of()),\n              new LazySequence<T>(() -> {\n                inScheduler.forEach(CountDownLatch::countDown);\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n                \r\n                return Sequences.empty();\n              })\n          );\n        };\n      }\n\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n      {\n        return getQueryRunnerForIntervals(null, null);\n      }\n    };\n\n    queryResource = new QueryResource(\n        new QueryLifecycleFactory(\n            WAREHOUSE,\n            texasRanger,\n            new DefaultGenericQueryMetricsFactory(),\n            new NoopServiceEmitter(),\n            testRequestLogger,\n            new AuthConfig(),\n            AuthTestUtils.TEST_AUTHORIZER_MAPPER\n        ),\n        JSON_MAPPER,\n        JSON_MAPPER,\n        scheduler,\n        new AuthConfig(),\n        null,\n        new DefaultGenericQueryMetricsFactory()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":763,"status":"B"}],"commitId":"8b9fe6f58461f1fc3f453c14f1634f9e779aeb71","commitMessage":"@@@query laning and load shedding (#9407)\n\n* prototype\n\n* merge QueryScheduler and QueryManager\n\n* everything in its right place\n\n* adjustments\n\n* docs\n\n* fixes\n\n* doc fixes\n\n* use resilience4j instead of semaphore\n\n* more tests\n\n* simplify\n\n* checkstyle\n\n* spelling\n\n* oops heh\n\n* remove unused\n\n* simplify\n\n* concurrency tests\n\n* add SqlResource tests.  refactor error response\n\n* add json config tests\n\n* use LongAdder instead of AtomicLong\n\n* remove test only stuffs from scheduler\n\n* javadocs.  etc\n\n* style\n\n* partial review stuffs\n\n* adjust\n\n* review stuffs\n\n* more javadoc\n\n* error response documentation\n\n* spelling\n\n* preserve user specified lane for NoSchedulingStrategy\n\n* more test.  why not\n\n* doc adjustment\n\n* style\n\n* missed review for make a thing a constant\n\n* fixes and tests\n\n* fix test\n\n* Update docs/configuration/index.md\n\nCo-Authored-By: sthetland <steve.hetland@imply.io>\n\n* doc update\n\nCo-authored-by: sthetland <steve.hetland@imply.io>","date":"2020-03-10 17:57:16","modifiedFileCount":"26","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-03-13 16:41:54","codes":[{"authorDate":"2020-03-10 17:57:16","commitOrder":3,"curCode":"  private static final QuerySegmentWalker TEST_SEGMENT_WALKER = new QuerySegmentWalker()\n  {\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n    {\n      return (queryPlus, responseContext) -> Sequences.empty();\n    }\n\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n    {\n      return getQueryRunnerForIntervals(null, null);\n    }\n  };\n","date":"2020-03-10 17:57:16","endLine":108,"groupId":"5479","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"TEST_SEGMENT_WALKER","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a1/2b69025dd76b7493c0961ff10f70b4691c7411.src","preCode":"  private static final QuerySegmentWalker TEST_SEGMENT_WALKER = new QuerySegmentWalker()\n  {\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n    {\n      return (queryPlus, responseContext) -> Sequences.empty();\n    }\n\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n    {\n      return getQueryRunnerForIntervals(null, null);\n    }\n  };\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"N"},{"authorDate":"2020-03-13 16:41:54","commitOrder":3,"curCode":"  private void createScheduledQueryResource(\n      QueryScheduler scheduler,\n      Collection<CountDownLatch> beforeScheduler,\n      Collection<CountDownLatch> inScheduler\n  )\n  {\n\n    QuerySegmentWalker texasRanger = new QuerySegmentWalker()\n    {\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n      {\n        return (queryPlus, responseContext) -> {\n          beforeScheduler.forEach(CountDownLatch::countDown);\n\n          return scheduler.run(\n              scheduler.prioritizeAndLaneQuery(queryPlus, ImmutableSet.of()),\n              new LazySequence<T>(() -> {\n                inScheduler.forEach(CountDownLatch::countDown);\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n                \r\n                return Sequences.empty();\n              })\n          );\n        };\n      }\n\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n      {\n        return getQueryRunnerForIntervals(null, null);\n      }\n    };\n\n    queryResource = new QueryResource(\n        new QueryLifecycleFactory(\n            WAREHOUSE,\n            texasRanger,\n            new DefaultGenericQueryMetricsFactory(),\n            new NoopServiceEmitter(),\n            testRequestLogger,\n            new AuthConfig(),\n            AuthTestUtils.TEST_AUTHORIZER_MAPPER\n        ),\n        JSON_MAPPER,\n        JSON_MAPPER,\n        scheduler,\n        new AuthConfig(),\n        null,\n        new DefaultGenericQueryMetricsFactory()\n    );\n  }\n","date":"2020-03-13 16:41:54","endLine":903,"groupId":"5479","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createScheduledQueryResource","params":"(QuerySchedulerscheduler@Collection<CountDownLatch>beforeScheduler@Collection<CountDownLatch>inScheduler)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a0/604e1e4179de4f6d04efb68c902cc6b896eac3.src","preCode":"  private void createScheduledQueryResource(\n      QueryScheduler scheduler,\n      Collection<CountDownLatch> beforeScheduler,\n      Collection<CountDownLatch> inScheduler\n  )\n  {\n\n    QuerySegmentWalker texasRanger = new QuerySegmentWalker()\n    {\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n      {\n        return (queryPlus, responseContext) -> {\n          beforeScheduler.forEach(CountDownLatch::countDown);\n\n          return scheduler.run(\n              scheduler.laneQuery(queryPlus, ImmutableSet.of()),\n              new LazySequence<T>(() -> {\n                inScheduler.forEach(CountDownLatch::countDown);\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n                \r\n                return Sequences.empty();\n              })\n          );\n        };\n      }\n\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n      {\n        return getQueryRunnerForIntervals(null, null);\n      }\n    };\n\n    queryResource = new QueryResource(\n        new QueryLifecycleFactory(\n            WAREHOUSE,\n            texasRanger,\n            new DefaultGenericQueryMetricsFactory(),\n            new NoopServiceEmitter(),\n            testRequestLogger,\n            new AuthConfig(),\n            AuthTestUtils.TEST_AUTHORIZER_MAPPER\n        ),\n        JSON_MAPPER,\n        JSON_MAPPER,\n        scheduler,\n        new AuthConfig(),\n        null,\n        new DefaultGenericQueryMetricsFactory()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":847,"status":"M"}],"commitId":"6afd55c8f4b49802d873ca181727231670abd566","commitMessage":"@@@threshold based automatic query prioritization (#9493)\n\n* threshold based automatic query prioritization\n\n* fixes\n\n* spelling and fixes\n\n* fix docs\n\n* spelling\n\n* checkstyle\n\n* adjustments\n\n* doc fix","date":"2020-03-13 16:41:54","modifiedFileCount":"13","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-07-09 04:28:11","codes":[{"authorDate":"2020-03-10 17:57:16","commitOrder":4,"curCode":"  private static final QuerySegmentWalker TEST_SEGMENT_WALKER = new QuerySegmentWalker()\n  {\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n    {\n      return (queryPlus, responseContext) -> Sequences.empty();\n    }\n\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n    {\n      return getQueryRunnerForIntervals(null, null);\n    }\n  };\n","date":"2020-03-10 17:57:16","endLine":108,"groupId":"5479","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"TEST_SEGMENT_WALKER","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a1/2b69025dd76b7493c0961ff10f70b4691c7411.src","preCode":"  private static final QuerySegmentWalker TEST_SEGMENT_WALKER = new QuerySegmentWalker()\n  {\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n    {\n      return (queryPlus, responseContext) -> Sequences.empty();\n    }\n\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n    {\n      return getQueryRunnerForIntervals(null, null);\n    }\n  };\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"N"},{"authorDate":"2020-07-09 04:28:11","commitOrder":4,"curCode":"  private void createScheduledQueryResource(\n      QueryScheduler scheduler,\n      Collection<CountDownLatch> beforeScheduler,\n      Collection<CountDownLatch> inScheduler\n  )\n  {\n\n    QuerySegmentWalker texasRanger = new QuerySegmentWalker()\n    {\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n      {\n        return (queryPlus, responseContext) -> {\n          beforeScheduler.forEach(CountDownLatch::countDown);\n\n          return scheduler.run(\n              scheduler.prioritizeAndLaneQuery(queryPlus, ImmutableSet.of()),\n              new LazySequence<T>(() -> {\n                inScheduler.forEach(CountDownLatch::countDown);\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n                \r\n                return Sequences.empty();\n              })\n          );\n        };\n      }\n\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n      {\n        return getQueryRunnerForIntervals(null, null);\n      }\n    };\n\n    queryResource = new QueryResource(\n        new QueryLifecycleFactory(\n            WAREHOUSE,\n            texasRanger,\n            new DefaultGenericQueryMetricsFactory(),\n            new NoopServiceEmitter(),\n            testRequestLogger,\n            new AuthConfig(),\n            AuthTestUtils.TEST_AUTHORIZER_MAPPER\n        ),\n        JSON_MAPPER,\n        JSON_MAPPER,\n        scheduler,\n        new AuthConfig(),\n        null,\n        ResponseContextConfig.newConfig(true),\n        DRUID_NODE\n    );\n  }\n","date":"2020-07-09 04:28:11","endLine":980,"groupId":"5479","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createScheduledQueryResource","params":"(QuerySchedulerscheduler@Collection<CountDownLatch>beforeScheduler@Collection<CountDownLatch>inScheduler)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b9/f57d55fd01807be72e472719d5b907c48f4a79.src","preCode":"  private void createScheduledQueryResource(\n      QueryScheduler scheduler,\n      Collection<CountDownLatch> beforeScheduler,\n      Collection<CountDownLatch> inScheduler\n  )\n  {\n\n    QuerySegmentWalker texasRanger = new QuerySegmentWalker()\n    {\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n      {\n        return (queryPlus, responseContext) -> {\n          beforeScheduler.forEach(CountDownLatch::countDown);\n\n          return scheduler.run(\n              scheduler.prioritizeAndLaneQuery(queryPlus, ImmutableSet.of()),\n              new LazySequence<T>(() -> {\n                inScheduler.forEach(CountDownLatch::countDown);\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n                \r\n                return Sequences.empty();\n              })\n          );\n        };\n      }\n\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n      {\n        return getQueryRunnerForIntervals(null, null);\n      }\n    };\n\n    queryResource = new QueryResource(\n        new QueryLifecycleFactory(\n            WAREHOUSE,\n            texasRanger,\n            new DefaultGenericQueryMetricsFactory(),\n            new NoopServiceEmitter(),\n            testRequestLogger,\n            new AuthConfig(),\n            AuthTestUtils.TEST_AUTHORIZER_MAPPER\n        ),\n        JSON_MAPPER,\n        JSON_MAPPER,\n        scheduler,\n        new AuthConfig(),\n        null,\n        new DefaultGenericQueryMetricsFactory()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":923,"status":"M"}],"commitId":"53a25505719f05b7041c35b2cb783dcb1466c7cd","commitMessage":"@@@Follow-up for RetryQueryRunner fix (#10144)\n\n* address comments; use guice instead of query context\n\n* typo\n\n* QueryResource tests\n\n* address comments\n\n* catch queryException\n\n* fix spell check","date":"2020-07-09 04:28:11","modifiedFileCount":"12","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-07-30 06:19:18","codes":[{"authorDate":"2020-03-10 17:57:16","commitOrder":5,"curCode":"  private static final QuerySegmentWalker TEST_SEGMENT_WALKER = new QuerySegmentWalker()\n  {\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n    {\n      return (queryPlus, responseContext) -> Sequences.empty();\n    }\n\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n    {\n      return getQueryRunnerForIntervals(null, null);\n    }\n  };\n","date":"2020-03-10 17:57:16","endLine":108,"groupId":"5479","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"TEST_SEGMENT_WALKER","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a1/2b69025dd76b7493c0961ff10f70b4691c7411.src","preCode":"  private static final QuerySegmentWalker TEST_SEGMENT_WALKER = new QuerySegmentWalker()\n  {\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n    {\n      return (queryPlus, responseContext) -> Sequences.empty();\n    }\n\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n    {\n      return getQueryRunnerForIntervals(null, null);\n    }\n  };\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"N"},{"authorDate":"2020-07-30 06:19:18","commitOrder":5,"curCode":"  private void createScheduledQueryResource(\n      QueryScheduler scheduler,\n      Collection<CountDownLatch> beforeScheduler,\n      Collection<CountDownLatch> inScheduler\n  )\n  {\n\n    QuerySegmentWalker texasRanger = new QuerySegmentWalker()\n    {\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n      {\n        return (queryPlus, responseContext) -> {\n          beforeScheduler.forEach(CountDownLatch::countDown);\n\n          return scheduler.run(\n              scheduler.prioritizeAndLaneQuery(queryPlus, ImmutableSet.of()),\n              new LazySequence<T>(() -> {\n                inScheduler.forEach(CountDownLatch::countDown);\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n                \r\n                return Sequences.empty();\n              })\n          );\n        };\n      }\n\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n      {\n        return getQueryRunnerForIntervals(null, null);\n      }\n    };\n\n    queryResource = new QueryResource(\n        new QueryLifecycleFactory(\n            WAREHOUSE,\n            texasRanger,\n            new DefaultGenericQueryMetricsFactory(),\n            new NoopServiceEmitter(),\n            testRequestLogger,\n            new AuthConfig(),\n            AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n            Suppliers.ofInstance(new DefaultQueryConfig(ImmutableMap.of()))\n        ),\n        JSON_MAPPER,\n        JSON_MAPPER,\n        scheduler,\n        new AuthConfig(),\n        null,\n        ResponseContextConfig.newConfig(true),\n        DRUID_NODE\n    );\n  }\n","date":"2020-07-30 06:19:18","endLine":1092,"groupId":"5479","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createScheduledQueryResource","params":"(QuerySchedulerscheduler@Collection<CountDownLatch>beforeScheduler@Collection<CountDownLatch>inScheduler)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0a/24b0edb8ad444d54c2c16cb8338d7c47b2992e.src","preCode":"  private void createScheduledQueryResource(\n      QueryScheduler scheduler,\n      Collection<CountDownLatch> beforeScheduler,\n      Collection<CountDownLatch> inScheduler\n  )\n  {\n\n    QuerySegmentWalker texasRanger = new QuerySegmentWalker()\n    {\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n      {\n        return (queryPlus, responseContext) -> {\n          beforeScheduler.forEach(CountDownLatch::countDown);\n\n          return scheduler.run(\n              scheduler.prioritizeAndLaneQuery(queryPlus, ImmutableSet.of()),\n              new LazySequence<T>(() -> {\n                inScheduler.forEach(CountDownLatch::countDown);\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n                \r\n                return Sequences.empty();\n              })\n          );\n        };\n      }\n\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n      {\n        return getQueryRunnerForIntervals(null, null);\n      }\n    };\n\n    queryResource = new QueryResource(\n        new QueryLifecycleFactory(\n            WAREHOUSE,\n            texasRanger,\n            new DefaultGenericQueryMetricsFactory(),\n            new NoopServiceEmitter(),\n            testRequestLogger,\n            new AuthConfig(),\n            AuthTestUtils.TEST_AUTHORIZER_MAPPER\n        ),\n        JSON_MAPPER,\n        JSON_MAPPER,\n        scheduler,\n        new AuthConfig(),\n        null,\n        ResponseContextConfig.newConfig(true),\n        DRUID_NODE\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1034,"status":"M"}],"commitId":"574b062f1f6f1cf0637d99d4ea540a95971c7489","commitMessage":"@@@Cluster wide default query context setting (#10208)\n\n* Cluster wide default query context setting\n\n* Cluster wide default query context setting\n\n* Cluster wide default query context setting\n\n* add docs\n\n* fix docs\n\n* update props\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* update docs\n\n* address comments\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix NPE","date":"2020-07-30 06:19:18","modifiedFileCount":"21","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-05-04 13:43:47","codes":[{"authorDate":"2020-03-10 17:57:16","commitOrder":6,"curCode":"  private static final QuerySegmentWalker TEST_SEGMENT_WALKER = new QuerySegmentWalker()\n  {\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n    {\n      return (queryPlus, responseContext) -> Sequences.empty();\n    }\n\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n    {\n      return getQueryRunnerForIntervals(null, null);\n    }\n  };\n","date":"2020-03-10 17:57:16","endLine":108,"groupId":"10796","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"TEST_SEGMENT_WALKER","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a1/2b69025dd76b7493c0961ff10f70b4691c7411.src","preCode":"  private static final QuerySegmentWalker TEST_SEGMENT_WALKER = new QuerySegmentWalker()\n  {\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n    {\n      return (queryPlus, responseContext) -> Sequences.empty();\n    }\n\n    @Override\n    public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n    {\n      return getQueryRunnerForIntervals(null, null);\n    }\n  };\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"N"},{"authorDate":"2021-05-04 13:43:47","commitOrder":6,"curCode":"  private void createScheduledQueryResource(\n      QueryScheduler scheduler,\n      Collection<CountDownLatch> beforeScheduler,\n      Collection<CountDownLatch> inScheduler\n  )\n  {\n\n    QuerySegmentWalker texasRanger = new QuerySegmentWalker()\n    {\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n      {\n        return (queryPlus, responseContext) -> {\n          beforeScheduler.forEach(CountDownLatch::countDown);\n\n          return scheduler.run(\n              scheduler.prioritizeAndLaneQuery(queryPlus, ImmutableSet.of()),\n              new LazySequence<T>(() -> {\n                inScheduler.forEach(CountDownLatch::countDown);\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n                \r\n                return Sequences.empty();\n              })\n          );\n        };\n      }\n\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n      {\n        return getQueryRunnerForIntervals(null, null);\n      }\n    };\n\n    queryResource = new QueryResource(\n        new QueryLifecycleFactory(\n            WAREHOUSE,\n            texasRanger,\n            new DefaultGenericQueryMetricsFactory(),\n            new NoopServiceEmitter(),\n            testRequestLogger,\n            new AuthConfig(),\n            AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n            Suppliers.ofInstance(new DefaultQueryConfig(ImmutableMap.of()))\n        ),\n        jsonMapper,\n        smileMapper,\n        scheduler,\n        new AuthConfig(),\n        null,\n        ResponseContextConfig.newConfig(true),\n        DRUID_NODE\n    );\n  }\n","date":"2021-05-04 13:43:47","endLine":1275,"groupId":"10796","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"createScheduledQueryResource","params":"(QuerySchedulerscheduler@Collection<CountDownLatch>beforeScheduler@Collection<CountDownLatch>inScheduler)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/02/6af18220878b5785dada0eb6b6e8aaf0d07db2.src","preCode":"  private void createScheduledQueryResource(\n      QueryScheduler scheduler,\n      Collection<CountDownLatch> beforeScheduler,\n      Collection<CountDownLatch> inScheduler\n  )\n  {\n\n    QuerySegmentWalker texasRanger = new QuerySegmentWalker()\n    {\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<Interval> intervals)\n      {\n        return (queryPlus, responseContext) -> {\n          beforeScheduler.forEach(CountDownLatch::countDown);\n\n          return scheduler.run(\n              scheduler.prioritizeAndLaneQuery(queryPlus, ImmutableSet.of()),\n              new LazySequence<T>(() -> {\n                inScheduler.forEach(CountDownLatch::countDown);\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n                \r\n                return Sequences.empty();\n              })\n          );\n        };\n      }\n\n      @Override\n      public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n      {\n        return getQueryRunnerForIntervals(null, null);\n      }\n    };\n\n    queryResource = new QueryResource(\n        new QueryLifecycleFactory(\n            WAREHOUSE,\n            texasRanger,\n            new DefaultGenericQueryMetricsFactory(),\n            new NoopServiceEmitter(),\n            testRequestLogger,\n            new AuthConfig(),\n            AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n            Suppliers.ofInstance(new DefaultQueryConfig(ImmutableMap.of()))\n        ),\n        JSON_MAPPER,\n        JSON_MAPPER,\n        scheduler,\n        new AuthConfig(),\n        null,\n        ResponseContextConfig.newConfig(true),\n        DRUID_NODE\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1217,"status":"M"}],"commitId":"204901a602bfb151d473adef8586bc13a065d4d0","commitMessage":"@@@Fix Smile encoding for HTTP response (#10980)\n\n* fix Smile encoding bug\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>\n\n* Add unit tests\n\n* Add IT for smile encoding\n\n* Fix cases\n\n* Update javadoc\n\nCo-authored-by: Jihoon Son <jihoonson@apache.org>\n\n* resolve comments\n\nCo-authored-by: Jihoon Son <jihoonson@apache.org>","date":"2021-05-04 13:43:47","modifiedFileCount":"9","status":"M","submitter":"frank chen"}]
