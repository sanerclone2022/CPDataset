[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDeletePendingSegments()\n  {\n    final List<TaskInfo<Task, TaskStatus>> taskInfos = ImmutableList.of(\n        new TaskInfo<>(\n            \"id1\",\n            DateTimes.of(\"2017-12-01\"),\n            TaskStatus.running(\"id1\"),\n            \"dataSource\",\n            NoopTask.create(\"id1\", 0)\n        ),\n        new TaskInfo<>(\n            \"id1\",\n            DateTimes.of(\"2017-12-02\"),\n            TaskStatus.running(\"id2\"),\n            \"dataSource\",\n            NoopTask.create(\"id2\", 0)\n        )\n    );\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(\"dataSource\")).andReturn(taskInfos);\n\n    final Interval deleteInterval = Intervals.of(\"2017-01-01/2017-12-01\");\n    EasyMock\n        .expect(\n            indexerMetadataStorageCoordinator.deletePendingSegments(EasyMock.anyString(), EasyMock.eq(deleteInterval))\n        )\n        .andReturn(10);\n    EasyMock.replay(taskStorageQueryAdapter, indexerMetadataStorageCoordinator);\n\n    Assert.assertEquals(10, indexerMetadataStorageAdapter.deletePendingSegments(\"dataSource\", deleteInterval));\n  }\n","date":"2018-08-31 00:56:26","endLine":90,"groupId":"1658","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeletePendingSegments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8c/b45ade0f09a48494d0407a7bffea74c237e0a8.src","preCode":"  public void testDeletePendingSegments()\n  {\n    final List<TaskInfo<Task, TaskStatus>> taskInfos = ImmutableList.of(\n        new TaskInfo<>(\n            \"id1\",\n            DateTimes.of(\"2017-12-01\"),\n            TaskStatus.running(\"id1\"),\n            \"dataSource\",\n            NoopTask.create(\"id1\", 0)\n        ),\n        new TaskInfo<>(\n            \"id1\",\n            DateTimes.of(\"2017-12-02\"),\n            TaskStatus.running(\"id2\"),\n            \"dataSource\",\n            NoopTask.create(\"id2\", 0)\n        )\n    );\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(\"dataSource\")).andReturn(taskInfos);\n\n    final Interval deleteInterval = Intervals.of(\"2017-01-01/2017-12-01\");\n    EasyMock\n        .expect(\n            indexerMetadataStorageCoordinator.deletePendingSegments(EasyMock.anyString(), EasyMock.eq(deleteInterval))\n        )\n        .andReturn(10);\n    EasyMock.replay(taskStorageQueryAdapter, indexerMetadataStorageCoordinator);\n\n    Assert.assertEquals(10, indexerMetadataStorageAdapter.deletePendingSegments(\"dataSource\", deleteInterval));\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/IndexerMetadataStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDeletePendingSegmentsOfRunningTasks()\n  {\n    final ImmutableList<TaskInfo<Task, TaskStatus>> taskInfos = ImmutableList.of(\n        new TaskInfo<>(\n            \"id1\",\n            DateTimes.of(\"2017-11-01\"),\n            TaskStatus.running(\"id1\"),\n            \"dataSource\",\n            NoopTask.create(\"id1\", 0)\n        ),\n        new TaskInfo<>(\n            \"id1\",\n            DateTimes.of(\"2017-12-02\"),\n            TaskStatus.running(\"id2\"),\n            \"dataSource\",\n            NoopTask.create(\"id2\", 0)\n        )\n    );\n\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(\"dataSource\")).andReturn(taskInfos);\n\n    final Interval deleteInterval = Intervals.of(\"2017-01-01/2017-12-01\");\n    EasyMock\n        .expect(\n            indexerMetadataStorageCoordinator.deletePendingSegments(EasyMock.anyString(), EasyMock.eq(deleteInterval))\n        )\n        .andReturn(10);\n    EasyMock.replay(taskStorageQueryAdapter, indexerMetadataStorageCoordinator);\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectMessage(\"Cannot delete pendingSegments because there is at least one active task created\");\n    indexerMetadataStorageAdapter.deletePendingSegments(\"dataSource\", deleteInterval);\n  }\n","date":"2018-08-31 00:56:26","endLine":125,"groupId":"1658","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeletePendingSegmentsOfRunningTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8c/b45ade0f09a48494d0407a7bffea74c237e0a8.src","preCode":"  public void testDeletePendingSegmentsOfRunningTasks()\n  {\n    final ImmutableList<TaskInfo<Task, TaskStatus>> taskInfos = ImmutableList.of(\n        new TaskInfo<>(\n            \"id1\",\n            DateTimes.of(\"2017-11-01\"),\n            TaskStatus.running(\"id1\"),\n            \"dataSource\",\n            NoopTask.create(\"id1\", 0)\n        ),\n        new TaskInfo<>(\n            \"id1\",\n            DateTimes.of(\"2017-12-02\"),\n            TaskStatus.running(\"id2\"),\n            \"dataSource\",\n            NoopTask.create(\"id2\", 0)\n        )\n    );\n\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(\"dataSource\")).andReturn(taskInfos);\n\n    final Interval deleteInterval = Intervals.of(\"2017-01-01/2017-12-01\");\n    EasyMock\n        .expect(\n            indexerMetadataStorageCoordinator.deletePendingSegments(EasyMock.anyString(), EasyMock.eq(deleteInterval))\n        )\n        .andReturn(10);\n    EasyMock.replay(taskStorageQueryAdapter, indexerMetadataStorageCoordinator);\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectMessage(\"Cannot delete pendingSegments because there is at least one active task created\");\n    indexerMetadataStorageAdapter.deletePendingSegments(\"dataSource\", deleteInterval);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/IndexerMetadataStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-01-28 03:24:29","codes":[{"authorDate":"2020-01-28 03:24:29","commitOrder":2,"curCode":"  public void testDeletePendingSegments()\n  {\n    final List<TaskInfo<Task, TaskStatus>> taskInfos = ImmutableList.of(\n        new TaskInfo<>(\n            \"id1\",\n            DateTimes.of(\"2017-12-01\"),\n            TaskStatus.running(\"id1\"),\n            \"dataSource\",\n            NoopTask.create(\"id1\", 0)\n        ),\n        new TaskInfo<>(\n            \"id1\",\n            DateTimes.of(\"2017-12-02\"),\n            TaskStatus.running(\"id2\"),\n            \"dataSource\",\n            NoopTask.create(\"id2\", 0)\n        )\n    );\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(\"dataSource\")).andReturn(taskInfos);\n\n    final Interval deleteInterval = Intervals.of(\"2017-01-01/2017-12-01\");\n    EasyMock\n        .expect(\n            indexerMetadataStorageCoordinator.deletePendingSegmentsCreatedInInterval(\n                EasyMock.anyString(),\n                EasyMock.eq(deleteInterval)\n            )\n        )\n        .andReturn(10);\n    EasyMock.replay(taskStorageQueryAdapter, indexerMetadataStorageCoordinator);\n\n    Assert.assertEquals(10, indexerMetadataStorageAdapter.deletePendingSegments(\"dataSource\", deleteInterval));\n  }\n","date":"2020-01-28 03:24:29","endLine":93,"groupId":"104160","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testDeletePendingSegments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4a/9c066416c8d747ff8720d04e170d7b51b99e66.src","preCode":"  public void testDeletePendingSegments()\n  {\n    final List<TaskInfo<Task, TaskStatus>> taskInfos = ImmutableList.of(\n        new TaskInfo<>(\n            \"id1\",\n            DateTimes.of(\"2017-12-01\"),\n            TaskStatus.running(\"id1\"),\n            \"dataSource\",\n            NoopTask.create(\"id1\", 0)\n        ),\n        new TaskInfo<>(\n            \"id1\",\n            DateTimes.of(\"2017-12-02\"),\n            TaskStatus.running(\"id2\"),\n            \"dataSource\",\n            NoopTask.create(\"id2\", 0)\n        )\n    );\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(\"dataSource\")).andReturn(taskInfos);\n\n    final Interval deleteInterval = Intervals.of(\"2017-01-01/2017-12-01\");\n    EasyMock\n        .expect(\n            indexerMetadataStorageCoordinator.deletePendingSegments(EasyMock.anyString(), EasyMock.eq(deleteInterval))\n        )\n        .andReturn(10);\n    EasyMock.replay(taskStorageQueryAdapter, indexerMetadataStorageCoordinator);\n\n    Assert.assertEquals(10, indexerMetadataStorageAdapter.deletePendingSegments(\"dataSource\", deleteInterval));\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/IndexerMetadataStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2020-01-28 03:24:29","commitOrder":2,"curCode":"  public void testDeletePendingSegmentsOfRunningTasks()\n  {\n    final ImmutableList<TaskInfo<Task, TaskStatus>> taskInfos = ImmutableList.of(\n        new TaskInfo<>(\n            \"id1\",\n            DateTimes.of(\"2017-11-01\"),\n            TaskStatus.running(\"id1\"),\n            \"dataSource\",\n            NoopTask.create(\"id1\", 0)\n        ),\n        new TaskInfo<>(\n            \"id1\",\n            DateTimes.of(\"2017-12-02\"),\n            TaskStatus.running(\"id2\"),\n            \"dataSource\",\n            NoopTask.create(\"id2\", 0)\n        )\n    );\n\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(\"dataSource\")).andReturn(taskInfos);\n\n    final Interval deleteInterval = Intervals.of(\"2017-01-01/2017-12-01\");\n    EasyMock\n        .expect(\n            indexerMetadataStorageCoordinator.deletePendingSegmentsCreatedInInterval(\n                EasyMock.anyString(),\n                EasyMock.eq(deleteInterval)\n            )\n        )\n        .andReturn(10);\n    EasyMock.replay(taskStorageQueryAdapter, indexerMetadataStorageCoordinator);\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectMessage(\"Cannot delete pendingSegments because there is at least one active task created\");\n    indexerMetadataStorageAdapter.deletePendingSegments(\"dataSource\", deleteInterval);\n  }\n","date":"2020-01-28 03:24:29","endLine":131,"groupId":"104160","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testDeletePendingSegmentsOfRunningTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4a/9c066416c8d747ff8720d04e170d7b51b99e66.src","preCode":"  public void testDeletePendingSegmentsOfRunningTasks()\n  {\n    final ImmutableList<TaskInfo<Task, TaskStatus>> taskInfos = ImmutableList.of(\n        new TaskInfo<>(\n            \"id1\",\n            DateTimes.of(\"2017-11-01\"),\n            TaskStatus.running(\"id1\"),\n            \"dataSource\",\n            NoopTask.create(\"id1\", 0)\n        ),\n        new TaskInfo<>(\n            \"id1\",\n            DateTimes.of(\"2017-12-02\"),\n            TaskStatus.running(\"id2\"),\n            \"dataSource\",\n            NoopTask.create(\"id2\", 0)\n        )\n    );\n\n    EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(\"dataSource\")).andReturn(taskInfos);\n\n    final Interval deleteInterval = Intervals.of(\"2017-01-01/2017-12-01\");\n    EasyMock\n        .expect(\n            indexerMetadataStorageCoordinator.deletePendingSegments(EasyMock.anyString(), EasyMock.eq(deleteInterval))\n        )\n        .andReturn(10);\n    EasyMock.replay(taskStorageQueryAdapter, indexerMetadataStorageCoordinator);\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectMessage(\"Cannot delete pendingSegments because there is at least one active task created\");\n    indexerMetadataStorageAdapter.deletePendingSegments(\"dataSource\", deleteInterval);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/IndexerMetadataStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"b9186f8f9ff2ff52aceda42bc5f24ffd47a7d17e","commitMessage":"@@@Reconcile terminology and method naming to 'used/unused segments'; Rename MetadataSegmentManager to MetadataSegmentsManager (#7306)\n\n* Reconcile terminology and method naming to 'used/unused segments'; Don't use terms 'enable/disable data source'; Rename MetadataSegmentManager to MetadataSegments; Make REST API methods which mark segments as used/unused to return server error instead of an empty response in case of error\n\n* Fix brace\n\n* Import order\n\n* Rename withKillDataSourceWhitelist to withSpecificDataSourcesToKill\n\n* Fix tests\n\n* Fix tests by adding proper methods without interval parameters to IndexerMetadataStorageCoordinator instead of hacking with Intervals.ETERNITY\n\n* More aligned names of DruidCoordinatorHelpers.  rename several CoordinatorDynamicConfig parameters\n\n* Rename ClientCompactTaskQuery to ClientCompactionTaskQuery for consistency with CompactionTask; ClientCompactQueryTuningConfig to ClientCompactionTaskQueryTuningConfig\n\n* More variable and method renames\n\n* Rename MetadataSegments to SegmentsMetadata\n\n* Javadoc update\n\n* Simplify SegmentsMetadata.getUnusedSegmentIntervals().  more javadocs\n\n* Update Javadoc of VersionedIntervalTimeline.iterateAllObjects()\n\n* Reorder imports\n\n* Rename SegmentsMetadata.tryMark... methods to mark... and make them to return boolean and the numbers of segments changed and relay exceptions to callers\n\n* Complete merge\n\n* Add CollectionUtils.newTreeSet(); Refactor DruidCoordinatorRuntimeParams creation in tests\n\n* Remove MetadataSegmentManager\n\n* Rename millisLagSinceCoordinatorBecomesLeaderBeforeCanMarkAsUnusedOvershadowedSegments to leadingTimeMillisBeforeCanMarkAsUnusedOvershadowedSegments\n\n* Fix tests.  refactor DruidCluster creation in tests into DruidClusterBuilder\n\n* Fix inspections\n\n* Fix SQLMetadataSegmentManagerEmptyTest and rename it to SqlSegmentsMetadataEmptyTest\n\n* Rename SegmentsAndMetadata to SegmentsAndCommitMetadata to reduce the similarity with SegmentsMetadata; Rename some methods\n\n* Rename DruidCoordinatorHelper to CoordinatorDuty.  refactor DruidCoordinator\n\n* Unused import\n\n* Optimize imports\n\n* Rename IndexerSQLMetadataStorageCoordinator.getDataSourceMetadata() to retrieveDataSourceMetadata()\n\n* Unused import\n\n* Update terminology in datasource-view.tsx\n\n* Fix label in datasource-view.spec.tsx.snap\n\n* Fix lint errors in datasource-view.tsx\n\n* Doc improvements\n\n* Another attempt to please TSLint\n\n* Another attempt to please TSLint\n\n* Style fixes\n\n* Fix IndexerSQLMetadataStorageCoordinator.createUsedSegmentsSqlQueryForIntervals() (wrong merge)\n\n* Try to fix docs build issue\n\n* Javadoc and spelling fixes\n\n* Rename SegmentsMetadata to SegmentsMetadataManager.  address other comments\n\n* Address more comments\n","date":"2020-01-28 03:24:29","modifiedFileCount":"127","status":"M","submitter":"Roman Leventov"}]
