[{"authorTime":"2020-09-15 00:57:54","codes":[{"authorDate":"2020-06-04 05:31:37","commitOrder":2,"curCode":"  public void testNullPatternOnNull()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[regexp_extract] pattern must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"regexp_extract(a, null)\", Parser.withSuppliers(ImmutableMap.of(\"a\", () -> null)));\n    Assert.assertNull(result.value());\n  }\n","date":"2020-06-04 05:31:37","endLine":133,"groupId":"14071","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullPatternOnNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/811d788b4ff9217e2af2b6e72d9ff821a49ba6.src","preCode":"  public void testNullPatternOnNull()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[regexp_extract] pattern must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"regexp_extract(a, null)\", Parser.withSuppliers(ImmutableMap.of(\"a\", () -> null)));\n    Assert.assertNull(result.value());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/expression/RegexpExtractExprMacroTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"NB"},{"authorDate":"2020-09-15 00:57:54","commitOrder":2,"curCode":"  public void testNullSearchOnNull()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[contains_string] substring must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"contains_string(a, null)\", Parser.withSuppliers(ImmutableMap.of(\"a\", () -> null)));\n    Assert.assertEquals(\n        ExprEval.of(true, ExprType.LONG).value(),\n        result.value()\n    );\n  }\n","date":"2020-09-15 00:57:54","endLine":131,"groupId":"14071","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNullSearchOnNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bf/bff7d0ab564c7f3ddd40af251d9658a42a9549.src","preCode":"  public void testNullSearchOnNull()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[contains_string] substring must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"contains_string(a, null)\", Parser.withSuppliers(ImmutableMap.of(\"a\", () -> null)));\n    Assert.assertEquals(\n        ExprEval.of(true, ExprType.LONG).value(),\n        result.value()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/expression/ContainsExprMacroTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"B"}],"commitId":"f5e2645bbb92254dfd2de8696d85acc2be71e68d","commitMessage":"@@@Support SearchQueryDimFilter in sql via new methods (#10350)\n\n* Support SearchQueryDimFilter in sql via new methods\n\n* Contains is a reserved word\n\n* revert unnecessary change\n\n* Fix toDruidExpression method\n\n* rename methods\n\n* java docs\n\n* Add native functions\n\n* revert change in dockerfile\n\n* remove changes from dockerfile\n\n* More tests\n\n* travis fix\n\n* Handle null values better","date":"2020-09-15 00:57:54","modifiedFileCount":"4","status":"M","submitter":"Abhishek Agarwal"},{"authorTime":"2021-05-04 13:17:10","codes":[{"authorDate":"2021-05-04 13:17:10","commitOrder":3,"curCode":"  public void testNullPatternOnNull()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[regexp_extract] pattern must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"regexp_extract(a, null)\", InputBindings.withSuppliers(ImmutableMap.of(\"a\", () -> null)));\n    Assert.assertNull(result.value());\n  }\n","date":"2021-05-04 13:17:10","endLine":133,"groupId":"106236","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testNullPatternOnNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8d/7a322efc05b06fb5c0c2c1e33a5cde785eb7fe.src","preCode":"  public void testNullPatternOnNull()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[regexp_extract] pattern must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"regexp_extract(a, null)\", Parser.withSuppliers(ImmutableMap.of(\"a\", () -> null)));\n    Assert.assertNull(result.value());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/expression/RegexpExtractExprMacroTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2021-05-04 13:17:10","commitOrder":3,"curCode":"  public void testNullSearchOnNull()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[contains_string] substring must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"contains_string(a, null)\", InputBindings.withSuppliers(ImmutableMap.of(\"a\", () -> null)));\n    Assert.assertEquals(\n        ExprEval.ofBoolean(true, ExprType.LONG).value(),\n        result.value()\n    );\n  }\n","date":"2021-05-04 13:17:10","endLine":131,"groupId":"106236","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testNullSearchOnNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/de/cd899a727b41ec3cf361d3b1524ad4625b8317.src","preCode":"  public void testNullSearchOnNull()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[contains_string] substring must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"contains_string(a, null)\", Parser.withSuppliers(ImmutableMap.of(\"a\", () -> null)));\n    Assert.assertEquals(\n        ExprEval.of(true, ExprType.LONG).value(),\n        result.value()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/expression/ContainsExprMacroTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"554f1ffeee94fab1ca0fa641a51f584766e504f2","commitMessage":"@@@ARRAY_AGG sql aggregator function (#11157)\n\n* ARRAY_AGG sql aggregator function\n\n* add javadoc\n\n* spelling\n\n* review stuff.  return null instead of empty when nil input\n\n* review stuff\n\n* Update sql.md\n\n* use type inference for finalize.  refactor some things","date":"2021-05-04 13:17:10","modifiedFileCount":"24","status":"M","submitter":"Clint Wylie"}]
