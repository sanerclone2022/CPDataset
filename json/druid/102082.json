[{"authorTime":"2019-10-19 05:59:44","codes":[{"authorDate":"2019-10-19 05:59:44","commitOrder":1,"curCode":"  private static DruidExpression inputRefToDruidExpression(\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    \r\n    final RexInputRef ref = (RexInputRef) rexNode;\n    final String columnName = rowSignature.getRowOrder().get(ref.getIndex());\n    if (columnName == null) {\n      throw new ISE(\"WTF?! Expression referred to nonexistent index[%d]\", ref.getIndex());\n    }\n\n    return DruidExpression.fromColumn(columnName);\n  }\n","date":"2019-10-19 05:59:44","endLine":227,"groupId":"2785","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"inputRefToDruidExpression","params":"(finalRowSignaturerowSignature@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/47/64cf414686b27c1d2d2a56f1c72e2a6fef4920.src","preCode":"  private static DruidExpression inputRefToDruidExpression(\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    \r\n    final RexInputRef ref = (RexInputRef) rexNode;\n    final String columnName = rowSignature.getRowOrder().get(ref.getIndex());\n    if (columnName == null) {\n      throw new ISE(\"WTF?! Expression referred to nonexistent index[%d]\", ref.getIndex());\n    }\n\n    return DruidExpression.fromColumn(columnName);\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/expression/Expressions.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"B"},{"authorDate":"2019-10-19 05:59:44","commitOrder":1,"curCode":"  public static PostAggregator toPostAggregator(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode,\n      final PostAggregatorVisitor postAggregatorVisitor\n  )\n  {\n    final SqlKind kind = rexNode.getKind();\n    if (kind == SqlKind.INPUT_REF) {\n      \r\n      final RexInputRef ref = (RexInputRef) rexNode;\n      final String columnName = rowSignature.getRowOrder().get(ref.getIndex());\n      if (columnName == null) {\n        throw new ISE(\"WTF?! PostAgg referred to nonexistent index[%d]\", ref.getIndex());\n      }\n\n      return new FieldAccessPostAggregator(\n          postAggregatorVisitor.getOutputNamePrefix() + postAggregatorVisitor.getAndIncrementCounter(),\n          columnName\n      );\n    } else if (rexNode instanceof RexCall) {\n      final SqlOperator operator = ((RexCall) rexNode).getOperator();\n      final SqlOperatorConversion conversion = plannerContext.getOperatorTable()\n                                                             .lookupOperatorConversion(operator);\n\n      if (conversion == null) {\n        return null;\n      } else {\n        return conversion.toPostAggregator(\n            plannerContext,\n            rowSignature,\n            rexNode,\n            postAggregatorVisitor\n        );\n      }\n    } else if (kind == SqlKind.LITERAL) {\n      return null;\n    } else {\n      throw new IAE(\"Unknown rexnode kind: \" + kind);\n    }\n  }\n","date":"2019-10-19 05:59:44","endLine":220,"groupId":"2785","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toPostAggregator","params":"(finalPlannerContextplannerContext@finalRowSignaturerowSignature@finalRexNoderexNode@finalPostAggregatorVisitorpostAggregatorVisitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/dd/7ecf5e063daaac2a1654c4581dbce29db6b110.src","preCode":"  public static PostAggregator toPostAggregator(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode,\n      final PostAggregatorVisitor postAggregatorVisitor\n  )\n  {\n    final SqlKind kind = rexNode.getKind();\n    if (kind == SqlKind.INPUT_REF) {\n      \r\n      final RexInputRef ref = (RexInputRef) rexNode;\n      final String columnName = rowSignature.getRowOrder().get(ref.getIndex());\n      if (columnName == null) {\n        throw new ISE(\"WTF?! PostAgg referred to nonexistent index[%d]\", ref.getIndex());\n      }\n\n      return new FieldAccessPostAggregator(\n          postAggregatorVisitor.getOutputNamePrefix() + postAggregatorVisitor.getAndIncrementCounter(),\n          columnName\n      );\n    } else if (rexNode instanceof RexCall) {\n      final SqlOperator operator = ((RexCall) rexNode).getOperator();\n      final SqlOperatorConversion conversion = plannerContext.getOperatorTable()\n                                                             .lookupOperatorConversion(operator);\n\n      if (conversion == null) {\n        return null;\n      } else {\n        return conversion.toPostAggregator(\n            plannerContext,\n            rowSignature,\n            rexNode,\n            postAggregatorVisitor\n        );\n      }\n    } else if (kind == SqlKind.LITERAL) {\n      return null;\n    } else {\n      throw new IAE(\"Unknown rexnode kind: \" + kind);\n    }\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/expression/OperatorConversions.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"B"}],"commitId":"d88075237af1aca8ed22316b41860d14e4f0b6e4","commitMessage":"@@@Add initial SQL support for non-expression sketch postaggs (#8487)\n\n* Add initial SQL support for non-expression sketch postaggs\n\n* Checkstyle.  spotbugs\n\n* checkstyle\n\n* imports\n\n* Update SQL docs\n\n* Checkstyle\n\n* Fix theta sketch operator docs\n\n* PR comments\n\n* Checkstyle fixes\n\n* Add missing entries for HLL sketch module\n\n* PR comments.  add round param to HLL estimate operator.  fix optional HLL param\n","date":"2019-10-19 05:59:44","modifiedFileCount":"16","status":"B","submitter":"Jonathan Wei"},{"authorTime":"2020-03-13 02:06:44","codes":[{"authorDate":"2020-03-13 02:06:44","commitOrder":2,"curCode":"  private static DruidExpression inputRefToDruidExpression(\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    \r\n    final RexInputRef ref = (RexInputRef) rexNode;\n    final String columnName = rowSignature.getColumnName(ref.getIndex());\n    if (columnName == null) {\n      throw new ISE(\"WTF?! Expression referred to nonexistent index[%d]\", ref.getIndex());\n    }\n\n    return DruidExpression.fromColumn(columnName);\n  }\n","date":"2020-03-13 02:06:44","endLine":228,"groupId":"2785","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"inputRefToDruidExpression","params":"(finalRowSignaturerowSignature@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b0/c7c59421e798246c494938d743b8dcd8aa387c.src","preCode":"  private static DruidExpression inputRefToDruidExpression(\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    \r\n    final RexInputRef ref = (RexInputRef) rexNode;\n    final String columnName = rowSignature.getRowOrder().get(ref.getIndex());\n    if (columnName == null) {\n      throw new ISE(\"WTF?! Expression referred to nonexistent index[%d]\", ref.getIndex());\n    }\n\n    return DruidExpression.fromColumn(columnName);\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/expression/Expressions.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"},{"authorDate":"2020-03-13 02:06:44","commitOrder":2,"curCode":"  public static PostAggregator toPostAggregator(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode,\n      final PostAggregatorVisitor postAggregatorVisitor\n  )\n  {\n    final SqlKind kind = rexNode.getKind();\n    if (kind == SqlKind.INPUT_REF) {\n      \r\n      final RexInputRef ref = (RexInputRef) rexNode;\n      final String columnName = rowSignature.getColumnName(ref.getIndex());\n      if (columnName == null) {\n        throw new ISE(\"WTF?! PostAgg referred to nonexistent index[%d]\", ref.getIndex());\n      }\n\n      return new FieldAccessPostAggregator(\n          postAggregatorVisitor.getOutputNamePrefix() + postAggregatorVisitor.getAndIncrementCounter(),\n          columnName\n      );\n    } else if (rexNode instanceof RexCall) {\n      final SqlOperator operator = ((RexCall) rexNode).getOperator();\n      final SqlOperatorConversion conversion = plannerContext.getOperatorTable()\n                                                             .lookupOperatorConversion(operator);\n\n      if (conversion == null) {\n        return null;\n      } else {\n        return conversion.toPostAggregator(\n            plannerContext,\n            rowSignature,\n            rexNode,\n            postAggregatorVisitor\n        );\n      }\n    } else if (kind == SqlKind.LITERAL) {\n      return null;\n    } else {\n      throw new IAE(\"Unknown rexnode kind: \" + kind);\n    }\n  }\n","date":"2020-03-13 02:06:44","endLine":223,"groupId":"2785","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toPostAggregator","params":"(finalPlannerContextplannerContext@finalRowSignaturerowSignature@finalRexNoderexNode@finalPostAggregatorVisitorpostAggregatorVisitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6b/4a4539bee58fffb2663cc7c36d56dc6652e98e.src","preCode":"  public static PostAggregator toPostAggregator(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode,\n      final PostAggregatorVisitor postAggregatorVisitor\n  )\n  {\n    final SqlKind kind = rexNode.getKind();\n    if (kind == SqlKind.INPUT_REF) {\n      \r\n      final RexInputRef ref = (RexInputRef) rexNode;\n      final String columnName = rowSignature.getRowOrder().get(ref.getIndex());\n      if (columnName == null) {\n        throw new ISE(\"WTF?! PostAgg referred to nonexistent index[%d]\", ref.getIndex());\n      }\n\n      return new FieldAccessPostAggregator(\n          postAggregatorVisitor.getOutputNamePrefix() + postAggregatorVisitor.getAndIncrementCounter(),\n          columnName\n      );\n    } else if (rexNode instanceof RexCall) {\n      final SqlOperator operator = ((RexCall) rexNode).getOperator();\n      final SqlOperatorConversion conversion = plannerContext.getOperatorTable()\n                                                             .lookupOperatorConversion(operator);\n\n      if (conversion == null) {\n        return null;\n      } else {\n        return conversion.toPostAggregator(\n            plannerContext,\n            rowSignature,\n            rexNode,\n            postAggregatorVisitor\n        );\n      }\n    } else if (kind == SqlKind.LITERAL) {\n      return null;\n    } else {\n      throw new IAE(\"Unknown rexnode kind: \" + kind);\n    }\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/expression/OperatorConversions.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"}],"commitId":"ff59d2e78bd3949e46858bc2f9882db9a7d2a186","commitMessage":"@@@Move RowSignature from druid-sql to druid-processing and make use of it. (#9508)\n\n* Move RowSignature from druid-sql to druid-processing and make use of it.\n\n1) Moved (most of) RowSignature from sql to processing. Left behind the SQL-specific\n   stuff in a RowSignatures utility class. It also picked up some new convenience\n   methods along the way.\n2) There were a lot of places in the code where Map<String.  ValueType> was used to\n   associate columns with type info. These are now all replaced with RowSignature.\n3) QueryToolChest's resultArrayFields method is replaced with resultArraySignature. \n   and it now provides type info.\n\n* Fix up extensions.\n\n* Various fixes","date":"2020-03-13 02:06:44","modifiedFileCount":"166","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-08-29 02:38:50","codes":[{"authorDate":"2020-08-29 02:38:50","commitOrder":3,"curCode":"  private static DruidExpression inputRefToDruidExpression(\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    \r\n    final RexInputRef ref = (RexInputRef) rexNode;\n    final String columnName = rowSignature.getColumnName(ref.getIndex());\n    if (columnName == null) {\n      throw new ISE(\"Expression referred to nonexistent index[%d]\", ref.getIndex());\n    }\n\n    return DruidExpression.fromColumn(columnName);\n  }\n","date":"2020-08-29 02:38:50","endLine":228,"groupId":"102082","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"inputRefToDruidExpression","params":"(finalRowSignaturerowSignature@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e4/5647435b6a1d40a5e4d58a405ac37a105cd33d.src","preCode":"  private static DruidExpression inputRefToDruidExpression(\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    \r\n    final RexInputRef ref = (RexInputRef) rexNode;\n    final String columnName = rowSignature.getColumnName(ref.getIndex());\n    if (columnName == null) {\n      throw new ISE(\"WTF?! Expression referred to nonexistent index[%d]\", ref.getIndex());\n    }\n\n    return DruidExpression.fromColumn(columnName);\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/expression/Expressions.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"},{"authorDate":"2020-08-29 02:38:50","commitOrder":3,"curCode":"  public static PostAggregator toPostAggregator(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode,\n      final PostAggregatorVisitor postAggregatorVisitor\n  )\n  {\n    final SqlKind kind = rexNode.getKind();\n    if (kind == SqlKind.INPUT_REF) {\n      \r\n      final RexInputRef ref = (RexInputRef) rexNode;\n      final String columnName = rowSignature.getColumnName(ref.getIndex());\n      if (columnName == null) {\n        throw new ISE(\"PostAggregator referred to nonexistent index[%d]\", ref.getIndex());\n      }\n\n      return new FieldAccessPostAggregator(\n          postAggregatorVisitor.getOutputNamePrefix() + postAggregatorVisitor.getAndIncrementCounter(),\n          columnName\n      );\n    } else if (rexNode instanceof RexCall) {\n      final SqlOperator operator = ((RexCall) rexNode).getOperator();\n      final SqlOperatorConversion conversion = plannerContext.getOperatorTable()\n                                                             .lookupOperatorConversion(operator);\n\n      if (conversion == null) {\n        return null;\n      } else {\n        return conversion.toPostAggregator(\n            plannerContext,\n            rowSignature,\n            rexNode,\n            postAggregatorVisitor\n        );\n      }\n    } else if (kind == SqlKind.LITERAL) {\n      return null;\n    } else {\n      throw new IAE(\"Unknown rexnode kind: \" + kind);\n    }\n  }\n","date":"2020-08-29 02:38:50","endLine":225,"groupId":"102082","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"toPostAggregator","params":"(finalPlannerContextplannerContext@finalRowSignaturerowSignature@finalRexNoderexNode@finalPostAggregatorVisitorpostAggregatorVisitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1f/716e7578c095b22863c3d74450e1a40d8c6071.src","preCode":"  public static PostAggregator toPostAggregator(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode,\n      final PostAggregatorVisitor postAggregatorVisitor\n  )\n  {\n    final SqlKind kind = rexNode.getKind();\n    if (kind == SqlKind.INPUT_REF) {\n      \r\n      final RexInputRef ref = (RexInputRef) rexNode;\n      final String columnName = rowSignature.getColumnName(ref.getIndex());\n      if (columnName == null) {\n        throw new ISE(\"WTF?! PostAgg referred to nonexistent index[%d]\", ref.getIndex());\n      }\n\n      return new FieldAccessPostAggregator(\n          postAggregatorVisitor.getOutputNamePrefix() + postAggregatorVisitor.getAndIncrementCounter(),\n          columnName\n      );\n    } else if (rexNode instanceof RexCall) {\n      final SqlOperator operator = ((RexCall) rexNode).getOperator();\n      final SqlOperatorConversion conversion = plannerContext.getOperatorTable()\n                                                             .lookupOperatorConversion(operator);\n\n      if (conversion == null) {\n        return null;\n      } else {\n        return conversion.toPostAggregator(\n            plannerContext,\n            rowSignature,\n            rexNode,\n            postAggregatorVisitor\n        );\n      }\n    } else if (kind == SqlKind.LITERAL) {\n      return null;\n    } else {\n      throw new IAE(\"Unknown rexnode kind: \" + kind);\n    }\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/expression/OperatorConversions.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"8ab19793043c65bd79315de6fb26683f561a8a58","commitMessage":"@@@Remove implied profanity from error messages. (#10270)\n\ni.e. WTF.  WTH.","date":"2020-08-29 02:38:50","modifiedFileCount":"76","status":"M","submitter":"Gian Merlino"}]
