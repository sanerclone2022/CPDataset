[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testNullConfig()\n  {\n    propertyValues.clear();\n\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(simpleZkConfigModule)\n    );\n    JsonConfigurator configurator = injector.getBinding(JsonConfigurator.class).getProvider().get();\n\n    JsonConfigProvider<ZkPathsConfig> zkPathsConfig = JsonConfigProvider.of(zkServiceConfigString, ZkPathsConfig.class);\n    zkPathsConfig.inject(propertyValues, configurator);\n\n    JsonConfigProvider<IndexerZkConfig> indexerZkConfig = JsonConfigProvider.of(\n        indexerPropertyString,\n        IndexerZkConfig.class\n    );\n    indexerZkConfig.inject(propertyValues, configurator);\n\n    Assert.assertEquals(\"/druid/indexer/tasks\", indexerZkConfig.get().get().getTasksPath());\n  }\n","date":"2018-08-31 00:56:26","endLine":160,"groupId":"6269","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e3/3ed787f04e73e4064830d259a09d80cde7191e.src","preCode":"  public void testNullConfig()\n  {\n    propertyValues.clear();\n\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(simpleZkConfigModule)\n    );\n    JsonConfigurator configurator = injector.getBinding(JsonConfigurator.class).getProvider().get();\n\n    JsonConfigProvider<ZkPathsConfig> zkPathsConfig = JsonConfigProvider.of(zkServiceConfigString, ZkPathsConfig.class);\n    zkPathsConfig.inject(propertyValues, configurator);\n\n    JsonConfigProvider<IndexerZkConfig> indexerZkConfig = JsonConfigProvider.of(\n        indexerPropertyString,\n        IndexerZkConfig.class\n    );\n    indexerZkConfig.inject(propertyValues, configurator);\n\n    Assert.assertEquals(\"/druid/indexer/tasks\", indexerZkConfig.get().get().getTasksPath());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/server/initialization/IndexerZkConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSimpleConfig() throws IllegalAccessException, NoSuchMethodException, InvocationTargetException\n  {\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(simpleZkConfigModule)\n    );\n    JsonConfigurator configurator = injector.getBinding(JsonConfigurator.class).getProvider().get();\n\n    JsonConfigProvider<ZkPathsConfig> zkPathsConfig = JsonConfigProvider.of(zkServiceConfigString, ZkPathsConfig.class);\n    zkPathsConfig.inject(propertyValues, configurator);\n\n    JsonConfigProvider<IndexerZkConfig> indexerZkConfig = JsonConfigProvider.of(\n        indexerPropertyString,\n        IndexerZkConfig.class\n    );\n    indexerZkConfig.inject(propertyValues, configurator);\n\n\n    IndexerZkConfig zkConfig = indexerZkConfig.get().get();\n    ZkPathsConfig zkPathsConfig1 = zkPathsConfig.get().get();\n\n    validateEntries(zkConfig);\n    validateEntries(zkPathsConfig1);\n    Assert.assertEquals(clobberableProperties.size(), assertions);\n  }\n","date":"2018-08-31 00:56:26","endLine":187,"groupId":"6269","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e3/3ed787f04e73e4064830d259a09d80cde7191e.src","preCode":"  public void testSimpleConfig() throws IllegalAccessException, NoSuchMethodException, InvocationTargetException\n  {\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(simpleZkConfigModule)\n    );\n    JsonConfigurator configurator = injector.getBinding(JsonConfigurator.class).getProvider().get();\n\n    JsonConfigProvider<ZkPathsConfig> zkPathsConfig = JsonConfigProvider.of(zkServiceConfigString, ZkPathsConfig.class);\n    zkPathsConfig.inject(propertyValues, configurator);\n\n    JsonConfigProvider<IndexerZkConfig> indexerZkConfig = JsonConfigProvider.of(\n        indexerPropertyString,\n        IndexerZkConfig.class\n    );\n    indexerZkConfig.inject(propertyValues, configurator);\n\n\n    IndexerZkConfig zkConfig = indexerZkConfig.get().get();\n    ZkPathsConfig zkPathsConfig1 = zkPathsConfig.get().get();\n\n    validateEntries(zkConfig);\n    validateEntries(zkPathsConfig1);\n    Assert.assertEquals(clobberableProperties.size(), assertions);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/server/initialization/IndexerZkConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":2,"curCode":"  public void testNullConfig()\n  {\n    propertyValues.clear();\n\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(SIMPLE_ZK_CONFIG_MODULE)\n    );\n    JsonConfigurator configurator = injector.getBinding(JsonConfigurator.class).getProvider().get();\n\n    JsonConfigProvider<ZkPathsConfig> zkPathsConfig = JsonConfigProvider.of(ZK_SERVICE_CONFIG_STRING, ZkPathsConfig.class);\n    zkPathsConfig.inject(propertyValues, configurator);\n\n    JsonConfigProvider<IndexerZkConfig> indexerZkConfig = JsonConfigProvider.of(\n        INDEXER_PROPERTY_STRING,\n        IndexerZkConfig.class\n    );\n    indexerZkConfig.inject(propertyValues, configurator);\n\n    Assert.assertEquals(\"/druid/indexer/tasks\", indexerZkConfig.get().get().getTasksPath());\n  }\n","date":"2019-08-23 18:13:54","endLine":157,"groupId":"104109","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testNullConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e2/f4a837e039ca3641bcedb5cd5371bafeb6f7b1.src","preCode":"  public void testNullConfig()\n  {\n    propertyValues.clear();\n\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(simpleZkConfigModule)\n    );\n    JsonConfigurator configurator = injector.getBinding(JsonConfigurator.class).getProvider().get();\n\n    JsonConfigProvider<ZkPathsConfig> zkPathsConfig = JsonConfigProvider.of(zkServiceConfigString, ZkPathsConfig.class);\n    zkPathsConfig.inject(propertyValues, configurator);\n\n    JsonConfigProvider<IndexerZkConfig> indexerZkConfig = JsonConfigProvider.of(\n        indexerPropertyString,\n        IndexerZkConfig.class\n    );\n    indexerZkConfig.inject(propertyValues, configurator);\n\n    Assert.assertEquals(\"/druid/indexer/tasks\", indexerZkConfig.get().get().getTasksPath());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/server/initialization/IndexerZkConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":2,"curCode":"  public void testSimpleConfig() throws IllegalAccessException, NoSuchMethodException, InvocationTargetException\n  {\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(SIMPLE_ZK_CONFIG_MODULE)\n    );\n    JsonConfigurator configurator = injector.getBinding(JsonConfigurator.class).getProvider().get();\n\n    JsonConfigProvider<ZkPathsConfig> zkPathsConfig = JsonConfigProvider.of(ZK_SERVICE_CONFIG_STRING, ZkPathsConfig.class);\n    zkPathsConfig.inject(propertyValues, configurator);\n\n    JsonConfigProvider<IndexerZkConfig> indexerZkConfig = JsonConfigProvider.of(\n        INDEXER_PROPERTY_STRING,\n        IndexerZkConfig.class\n    );\n    indexerZkConfig.inject(propertyValues, configurator);\n\n\n    IndexerZkConfig zkConfig = indexerZkConfig.get().get();\n    ZkPathsConfig zkPathsConfig1 = zkPathsConfig.get().get();\n\n    validateEntries(zkConfig);\n    validateEntries(zkPathsConfig1);\n    Assert.assertEquals(CLOBBERABLE_PROPERTIES.size(), assertions);\n  }\n","date":"2019-08-23 18:13:54","endLine":184,"groupId":"104109","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testSimpleConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e2/f4a837e039ca3641bcedb5cd5371bafeb6f7b1.src","preCode":"  public void testSimpleConfig() throws IllegalAccessException, NoSuchMethodException, InvocationTargetException\n  {\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(simpleZkConfigModule)\n    );\n    JsonConfigurator configurator = injector.getBinding(JsonConfigurator.class).getProvider().get();\n\n    JsonConfigProvider<ZkPathsConfig> zkPathsConfig = JsonConfigProvider.of(zkServiceConfigString, ZkPathsConfig.class);\n    zkPathsConfig.inject(propertyValues, configurator);\n\n    JsonConfigProvider<IndexerZkConfig> indexerZkConfig = JsonConfigProvider.of(\n        indexerPropertyString,\n        IndexerZkConfig.class\n    );\n    indexerZkConfig.inject(propertyValues, configurator);\n\n\n    IndexerZkConfig zkConfig = indexerZkConfig.get().get();\n    ZkPathsConfig zkPathsConfig1 = zkPathsConfig.get().get();\n\n    validateEntries(zkConfig);\n    validateEntries(zkPathsConfig1);\n    Assert.assertEquals(clobberableProperties.size(), assertions);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/server/initialization/IndexerZkConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
