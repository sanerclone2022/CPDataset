[{"authorTime":"2020-04-22 09:44:26","codes":[{"authorDate":"2020-04-22 09:44:26","commitOrder":1,"curCode":"  public void testGroupByOnScanMultiValue()\n  {\n    ScanQuery subquery = new Druids.ScanQueryBuilder().dataSource(MULTI)\n                                                      .columns(\"s\", \"n\")\n                                                      .intervals(\n                                                          new MultipleIntervalSegmentSpec(\n                                                              ImmutableList.of(Intervals.ETERNITY)\n                                                          )\n                                                      )\n                                                      .legacy(false)\n                                                      .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                                      .build();\n    final GroupByQuery query =\n        GroupByQuery.builder()\n                    .setDataSource(new QueryDataSource(subquery))\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Intervals.ONLY_ETERNITY)\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .setAggregatorSpecs(new LongSumAggregatorFactory(\"sum_n\", \"n\"))\n                    .build();\n\n    testQuery(\n        query,\n        \r\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(\n                            new Object[]{ImmutableList.of(\"a\", \"b\"), 1},\n                            new Object[]{ImmutableList.of(\"a\", \"c\"), 2},\n                            new Object[]{ImmutableList.of(\"b\"), 3},\n                            new Object[]{ImmutableList.of(\"c\"), 4}\n                        ),\n                        RowSignature.builder().add(\"s\", null).add(\"n\", null).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(\n            new Object[]{\"a\", 3L},\n            new Object[]{\"b\", 4L},\n            new Object[]{\"c\", 6L}\n        )\n    );\n\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(2, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","date":"2020-04-22 09:44:26","endLine":473,"groupId":"21157","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByOnScanMultiValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f2/24b5f580e434de181ae5a2ce1b73abcc99a373.src","preCode":"  public void testGroupByOnScanMultiValue()\n  {\n    ScanQuery subquery = new Druids.ScanQueryBuilder().dataSource(MULTI)\n                                                      .columns(\"s\", \"n\")\n                                                      .intervals(\n                                                          new MultipleIntervalSegmentSpec(\n                                                              ImmutableList.of(Intervals.ETERNITY)\n                                                          )\n                                                      )\n                                                      .legacy(false)\n                                                      .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                                      .build();\n    final GroupByQuery query =\n        GroupByQuery.builder()\n                    .setDataSource(new QueryDataSource(subquery))\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Intervals.ONLY_ETERNITY)\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .setAggregatorSpecs(new LongSumAggregatorFactory(\"sum_n\", \"n\"))\n                    .build();\n\n    testQuery(\n        query,\n        \r\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(\n                            new Object[]{ImmutableList.of(\"a\", \"b\"), 1},\n                            new Object[]{ImmutableList.of(\"a\", \"c\"), 2},\n                            new Object[]{ImmutableList.of(\"b\"), 3},\n                            new Object[]{ImmutableList.of(\"c\"), 4}\n                        ),\n                        RowSignature.builder().add(\"s\", null).add(\"n\", null).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(\n            new Object[]{\"a\", 3L},\n            new Object[]{\"b\", 4L},\n            new Object[]{\"c\", 6L}\n        )\n    );\n\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(2, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":422,"status":"B"},{"authorDate":"2020-04-22 09:44:26","commitOrder":1,"curCode":"  public void testTopNScanMultiValue()\n  {\n    ScanQuery subquery = new Druids.ScanQueryBuilder().dataSource(MULTI)\n                                                      .columns(\"s\", \"n\")\n                                                      .intervals(\n                                                          new MultipleIntervalSegmentSpec(\n                                                              ImmutableList.of(Intervals.ETERNITY)\n                                                          )\n                                                      )\n                                                      .legacy(false)\n                                                      .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                                      .build();\n    final TopNQuery query =\n        new TopNQueryBuilder().dataSource(new QueryDataSource(subquery))\n                              .granularity(Granularities.ALL)\n                              .intervals(Intervals.ONLY_ETERNITY)\n                              .dimension(DefaultDimensionSpec.of(\"s\"))\n                              .metric(\"sum_n\")\n                              .threshold(100)\n                              .aggregators(new LongSumAggregatorFactory(\"sum_n\", \"n\"))\n                              .build();\n\n    testQuery(\n        query,\n        \r\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(\n                            new Object[]{ImmutableList.of(\"a\", \"b\"), 1},\n                            new Object[]{ImmutableList.of(\"a\", \"c\"), 2},\n                            new Object[]{ImmutableList.of(\"b\"), 3},\n                            new Object[]{ImmutableList.of(\"c\"), 4}\n                        ),\n                        RowSignature.builder().add(\"s\", null).add(\"n\", null).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(\n            new Object[]{Intervals.ETERNITY.getStartMillis(), \"c\", 6L},\n            new Object[]{Intervals.ETERNITY.getStartMillis(), \"b\", 4L},\n            new Object[]{Intervals.ETERNITY.getStartMillis(), \"a\", 3L}\n        )\n    );\n\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(2, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","date":"2020-04-22 09:44:26","endLine":528,"groupId":"1710","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTopNScanMultiValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f2/24b5f580e434de181ae5a2ce1b73abcc99a373.src","preCode":"  public void testTopNScanMultiValue()\n  {\n    ScanQuery subquery = new Druids.ScanQueryBuilder().dataSource(MULTI)\n                                                      .columns(\"s\", \"n\")\n                                                      .intervals(\n                                                          new MultipleIntervalSegmentSpec(\n                                                              ImmutableList.of(Intervals.ETERNITY)\n                                                          )\n                                                      )\n                                                      .legacy(false)\n                                                      .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                                      .build();\n    final TopNQuery query =\n        new TopNQueryBuilder().dataSource(new QueryDataSource(subquery))\n                              .granularity(Granularities.ALL)\n                              .intervals(Intervals.ONLY_ETERNITY)\n                              .dimension(DefaultDimensionSpec.of(\"s\"))\n                              .metric(\"sum_n\")\n                              .threshold(100)\n                              .aggregators(new LongSumAggregatorFactory(\"sum_n\", \"n\"))\n                              .build();\n\n    testQuery(\n        query,\n        \r\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(\n                            new Object[]{ImmutableList.of(\"a\", \"b\"), 1},\n                            new Object[]{ImmutableList.of(\"a\", \"c\"), 2},\n                            new Object[]{ImmutableList.of(\"b\"), 3},\n                            new Object[]{ImmutableList.of(\"c\"), 4}\n                        ),\n                        RowSignature.builder().add(\"s\", null).add(\"n\", null).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(\n            new Object[]{Intervals.ETERNITY.getStartMillis(), \"c\", 6L},\n            new Object[]{Intervals.ETERNITY.getStartMillis(), \"b\", 4L},\n            new Object[]{Intervals.ETERNITY.getStartMillis(), \"a\", 3L}\n        )\n    );\n\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(2, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":476,"status":"B"}],"commitId":"68cc0b2e1cc0a844351b2d529447e2e03dc5cd16","commitMessage":"@@@fixes for inline subqueries when multi-value dimension is present (#9698)\n\n* fixes for inline subqueries when multi-value dimension is present\n\n* fix test\n\n* allow missing capabilities for vectorized group by queries to be treated as single dims since it means that column doesnt exist\n\n* add comment","date":"2020-04-22 09:44:26","modifiedFileCount":"4","status":"B","submitter":"Clint Wylie"},{"authorTime":"2020-07-01 10:14:22","codes":[{"authorDate":"2020-07-01 10:14:22","commitOrder":2,"curCode":"  public void testGroupByOnScanMultiValue()\n  {\n    ScanQuery subquery = new Druids.ScanQueryBuilder().dataSource(MULTI)\n                                                      .columns(\"s\", \"n\")\n                                                      .intervals(\n                                                          new MultipleIntervalSegmentSpec(\n                                                              ImmutableList.of(Intervals.ETERNITY)\n                                                          )\n                                                      )\n                                                      .legacy(false)\n                                                      .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                                      .build();\n    final GroupByQuery query =\n        GroupByQuery.builder()\n                    .setDataSource(new QueryDataSource(subquery))\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Intervals.ONLY_ETERNITY)\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .setAggregatorSpecs(new LongSumAggregatorFactory(\"sum_n\", \"n\"))\n                    .build();\n\n    testQuery(\n        query,\n        \r\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(\n                            new Object[]{ImmutableList.of(\"a\", \"b\"), 1},\n                            new Object[]{ImmutableList.of(\"a\", \"c\"), 2},\n                            new Object[]{ImmutableList.of(\"b\"), 3},\n                            new Object[]{ImmutableList.of(\"c\"), 4}\n                        ),\n                        RowSignature.builder().add(\"s\", null).add(\"n\", null).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(\n            new Object[]{\"a\", 3L},\n            new Object[]{\"b\", 4L},\n            new Object[]{\"c\", 6L}\n        )\n    );\n\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(1, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","date":"2020-07-01 10:14:22","endLine":512,"groupId":"21157","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByOnScanMultiValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/48/46e6375021d3e38305ff4af817324259957b1f.src","preCode":"  public void testGroupByOnScanMultiValue()\n  {\n    ScanQuery subquery = new Druids.ScanQueryBuilder().dataSource(MULTI)\n                                                      .columns(\"s\", \"n\")\n                                                      .intervals(\n                                                          new MultipleIntervalSegmentSpec(\n                                                              ImmutableList.of(Intervals.ETERNITY)\n                                                          )\n                                                      )\n                                                      .legacy(false)\n                                                      .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                                      .build();\n    final GroupByQuery query =\n        GroupByQuery.builder()\n                    .setDataSource(new QueryDataSource(subquery))\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Intervals.ONLY_ETERNITY)\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .setAggregatorSpecs(new LongSumAggregatorFactory(\"sum_n\", \"n\"))\n                    .build();\n\n    testQuery(\n        query,\n        \r\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(\n                            new Object[]{ImmutableList.of(\"a\", \"b\"), 1},\n                            new Object[]{ImmutableList.of(\"a\", \"c\"), 2},\n                            new Object[]{ImmutableList.of(\"b\"), 3},\n                            new Object[]{ImmutableList.of(\"c\"), 4}\n                        ),\n                        RowSignature.builder().add(\"s\", null).add(\"n\", null).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(\n            new Object[]{\"a\", 3L},\n            new Object[]{\"b\", 4L},\n            new Object[]{\"c\", 6L}\n        )\n    );\n\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(2, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"M"},{"authorDate":"2020-07-01 10:14:22","commitOrder":2,"curCode":"  public void testTopNScanMultiValue()\n  {\n    ScanQuery subquery = new Druids.ScanQueryBuilder().dataSource(MULTI)\n                                                      .columns(\"s\", \"n\")\n                                                      .intervals(\n                                                          new MultipleIntervalSegmentSpec(\n                                                              ImmutableList.of(Intervals.ETERNITY)\n                                                          )\n                                                      )\n                                                      .legacy(false)\n                                                      .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                                      .build();\n    final TopNQuery query =\n        new TopNQueryBuilder().dataSource(new QueryDataSource(subquery))\n                              .granularity(Granularities.ALL)\n                              .intervals(Intervals.ONLY_ETERNITY)\n                              .dimension(DefaultDimensionSpec.of(\"s\"))\n                              .metric(\"sum_n\")\n                              .threshold(100)\n                              .aggregators(new LongSumAggregatorFactory(\"sum_n\", \"n\"))\n                              .build();\n\n    testQuery(\n        query,\n        \r\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(\n                            new Object[]{ImmutableList.of(\"a\", \"b\"), 1},\n                            new Object[]{ImmutableList.of(\"a\", \"c\"), 2},\n                            new Object[]{ImmutableList.of(\"b\"), 3},\n                            new Object[]{ImmutableList.of(\"c\"), 4}\n                        ),\n                        RowSignature.builder().add(\"s\", null).add(\"n\", null).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(\n            new Object[]{Intervals.ETERNITY.getStartMillis(), \"c\", 6L},\n            new Object[]{Intervals.ETERNITY.getStartMillis(), \"b\", 4L},\n            new Object[]{Intervals.ETERNITY.getStartMillis(), \"a\", 3L}\n        )\n    );\n\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(1, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","date":"2020-07-01 10:14:22","endLine":567,"groupId":"1710","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTopNScanMultiValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/48/46e6375021d3e38305ff4af817324259957b1f.src","preCode":"  public void testTopNScanMultiValue()\n  {\n    ScanQuery subquery = new Druids.ScanQueryBuilder().dataSource(MULTI)\n                                                      .columns(\"s\", \"n\")\n                                                      .intervals(\n                                                          new MultipleIntervalSegmentSpec(\n                                                              ImmutableList.of(Intervals.ETERNITY)\n                                                          )\n                                                      )\n                                                      .legacy(false)\n                                                      .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                                      .build();\n    final TopNQuery query =\n        new TopNQueryBuilder().dataSource(new QueryDataSource(subquery))\n                              .granularity(Granularities.ALL)\n                              .intervals(Intervals.ONLY_ETERNITY)\n                              .dimension(DefaultDimensionSpec.of(\"s\"))\n                              .metric(\"sum_n\")\n                              .threshold(100)\n                              .aggregators(new LongSumAggregatorFactory(\"sum_n\", \"n\"))\n                              .build();\n\n    testQuery(\n        query,\n        \r\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(\n                            new Object[]{ImmutableList.of(\"a\", \"b\"), 1},\n                            new Object[]{ImmutableList.of(\"a\", \"c\"), 2},\n                            new Object[]{ImmutableList.of(\"b\"), 3},\n                            new Object[]{ImmutableList.of(\"c\"), 4}\n                        ),\n                        RowSignature.builder().add(\"s\", null).add(\"n\", null).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(\n            new Object[]{Intervals.ETERNITY.getStartMillis(), \"c\", 6L},\n            new Object[]{Intervals.ETERNITY.getStartMillis(), \"b\", 4L},\n            new Object[]{Intervals.ETERNITY.getStartMillis(), \"a\", 3L}\n        )\n    );\n\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(2, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":515,"status":"M"}],"commitId":"5faa897a342096b2ac88587ad62e6e15022b01dd","commitMessage":"@@@Join filter pre-analysis simplifications and sanity checks. (#10104)\n\n* Join filter pre-analysis simplifications and sanity checks.\n\n- At pre-analysis time.  only compute pre-analysis for the innermost\n  root query.  since this is the one that will run on the join that involves\n  the base datasource. Previously.  pre-analyses were computed for multiple\n  levels of the query.  some of which were unnecessary.\n- Remove JoinFilterPreAnalysisGroup and join query level gathering code. \n  since they existed to support precomputation of multiple pre-analyses.\n- Embed JoinFilterPreAnalysisKey into JoinFilterPreAnalysis and use it to\n  sanity check?at processing time that the correct pre-analysis was done.\n\nTangentially related changes:\n\n- Remove prioritizeAndLaneQuery functionality from LocalQuerySegmentWalker.\n  The computed priority and lanes were not being used.\n- Add \"getBaseQuery\" method to DataSourceAnalysis to support identification\n  of the proper subquery for filter pre-analysis.\n\n* Fix compilation errors.\n\n* Adjust tests.","date":"2020-07-01 10:14:22","modifiedFileCount":"20","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-07-02 05:02:21","codes":[{"authorDate":"2020-07-02 05:02:21","commitOrder":3,"curCode":"  public void testGroupByOnScanMultiValue()\n  {\n    ScanQuery subquery = new Druids.ScanQueryBuilder().dataSource(MULTI)\n                                                      .columns(\"s\", \"n\")\n                                                      .intervals(\n                                                          new MultipleIntervalSegmentSpec(\n                                                              ImmutableList.of(Intervals.ETERNITY)\n                                                          )\n                                                      )\n                                                      .legacy(false)\n                                                      .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                                      .build();\n    final GroupByQuery query =\n        (GroupByQuery) GroupByQuery.builder()\n                                   .setDataSource(new QueryDataSource(subquery))\n                                   .setGranularity(Granularities.ALL)\n                                   .setInterval(Intervals.ONLY_ETERNITY)\n                                   .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                                   .setAggregatorSpecs(new LongSumAggregatorFactory(\"sum_n\", \"n\"))\n                                   .build()\n                                   .withId(UUID.randomUUID().toString());\n\n    testQuery(\n        query,\n        \r\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(\n                            new Object[]{ImmutableList.of(\"a\", \"b\"), 1},\n                            new Object[]{ImmutableList.of(\"a\", \"c\"), 2},\n                            new Object[]{ImmutableList.of(\"b\"), 3},\n                            new Object[]{ImmutableList.of(\"c\"), 4}\n                        ),\n                        RowSignature.builder().add(\"s\", null).add(\"n\", null).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(\n            new Object[]{\"a\", 3L},\n            new Object[]{\"b\", 4L},\n            new Object[]{\"c\", 6L}\n        )\n    );\n\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(1, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","date":"2020-07-02 05:02:21","endLine":523,"groupId":"10676","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByOnScanMultiValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/e75008d93c8fc7b3635e3a9860a830f48fb950.src","preCode":"  public void testGroupByOnScanMultiValue()\n  {\n    ScanQuery subquery = new Druids.ScanQueryBuilder().dataSource(MULTI)\n                                                      .columns(\"s\", \"n\")\n                                                      .intervals(\n                                                          new MultipleIntervalSegmentSpec(\n                                                              ImmutableList.of(Intervals.ETERNITY)\n                                                          )\n                                                      )\n                                                      .legacy(false)\n                                                      .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                                      .build();\n    final GroupByQuery query =\n        GroupByQuery.builder()\n                    .setDataSource(new QueryDataSource(subquery))\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Intervals.ONLY_ETERNITY)\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .setAggregatorSpecs(new LongSumAggregatorFactory(\"sum_n\", \"n\"))\n                    .build();\n\n    testQuery(\n        query,\n        \r\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(\n                            new Object[]{ImmutableList.of(\"a\", \"b\"), 1},\n                            new Object[]{ImmutableList.of(\"a\", \"c\"), 2},\n                            new Object[]{ImmutableList.of(\"b\"), 3},\n                            new Object[]{ImmutableList.of(\"c\"), 4}\n                        ),\n                        RowSignature.builder().add(\"s\", null).add(\"n\", null).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(\n            new Object[]{\"a\", 3L},\n            new Object[]{\"b\", 4L},\n            new Object[]{\"c\", 6L}\n        )\n    );\n\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(1, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":471,"status":"M"},{"authorDate":"2020-07-02 05:02:21","commitOrder":3,"curCode":"  public void testTopNScanMultiValue()\n  {\n    ScanQuery subquery = new Druids.ScanQueryBuilder().dataSource(MULTI)\n                                                      .columns(\"s\", \"n\")\n                                                      .intervals(\n                                                          new MultipleIntervalSegmentSpec(\n                                                              ImmutableList.of(Intervals.ETERNITY)\n                                                          )\n                                                      )\n                                                      .legacy(false)\n                                                      .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                                      .build();\n    final TopNQuery query =\n        (TopNQuery) new TopNQueryBuilder().dataSource(new QueryDataSource(subquery))\n                                          .granularity(Granularities.ALL)\n                                          .intervals(Intervals.ONLY_ETERNITY)\n                                          .dimension(DefaultDimensionSpec.of(\"s\"))\n                                          .metric(\"sum_n\")\n                                          .threshold(100)\n                                          .aggregators(new LongSumAggregatorFactory(\"sum_n\", \"n\"))\n                                          .build()\n                                          .withId(UUID.randomUUID().toString());\n\n    testQuery(\n        query,\n        \r\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(\n                            new Object[]{ImmutableList.of(\"a\", \"b\"), 1},\n                            new Object[]{ImmutableList.of(\"a\", \"c\"), 2},\n                            new Object[]{ImmutableList.of(\"b\"), 3},\n                            new Object[]{ImmutableList.of(\"c\"), 4}\n                        ),\n                        RowSignature.builder().add(\"s\", null).add(\"n\", null).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(\n            new Object[]{Intervals.ETERNITY.getStartMillis(), \"c\", 6L},\n            new Object[]{Intervals.ETERNITY.getStartMillis(), \"b\", 4L},\n            new Object[]{Intervals.ETERNITY.getStartMillis(), \"a\", 3L}\n        )\n    );\n\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(1, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","date":"2020-07-02 05:02:21","endLine":579,"groupId":"10676","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTopNScanMultiValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/e75008d93c8fc7b3635e3a9860a830f48fb950.src","preCode":"  public void testTopNScanMultiValue()\n  {\n    ScanQuery subquery = new Druids.ScanQueryBuilder().dataSource(MULTI)\n                                                      .columns(\"s\", \"n\")\n                                                      .intervals(\n                                                          new MultipleIntervalSegmentSpec(\n                                                              ImmutableList.of(Intervals.ETERNITY)\n                                                          )\n                                                      )\n                                                      .legacy(false)\n                                                      .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                                      .build();\n    final TopNQuery query =\n        new TopNQueryBuilder().dataSource(new QueryDataSource(subquery))\n                              .granularity(Granularities.ALL)\n                              .intervals(Intervals.ONLY_ETERNITY)\n                              .dimension(DefaultDimensionSpec.of(\"s\"))\n                              .metric(\"sum_n\")\n                              .threshold(100)\n                              .aggregators(new LongSumAggregatorFactory(\"sum_n\", \"n\"))\n                              .build();\n\n    testQuery(\n        query,\n        \r\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(\n                            new Object[]{ImmutableList.of(\"a\", \"b\"), 1},\n                            new Object[]{ImmutableList.of(\"a\", \"c\"), 2},\n                            new Object[]{ImmutableList.of(\"b\"), 3},\n                            new Object[]{ImmutableList.of(\"c\"), 4}\n                        ),\n                        RowSignature.builder().add(\"s\", null).add(\"n\", null).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(\n            new Object[]{Intervals.ETERNITY.getStartMillis(), \"c\", 6L},\n            new Object[]{Intervals.ETERNITY.getStartMillis(), \"b\", 4L},\n            new Object[]{Intervals.ETERNITY.getStartMillis(), \"a\", 3L}\n        )\n    );\n\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(1, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":526,"status":"M"}],"commitId":"657f8ee80fa86779cf26a01072814b1530277aa7","commitMessage":"@@@Fix RetryQueryRunner to actually do the job (#10082)\n\n* Fix RetryQueryRunner to actually do the job\n\n* more javadoc\n\n* fix test and checkstyle\n\n* don't combine for testing\n\n* address comments\n\n* fix unit tests\n\n* always initialize response context in cachingClusteredClient\n\n* fix subquery\n\n* address comments\n\n* fix test\n\n* query id for builders\n\n* make queryId optional in the builders and ClusterQueryResult\n\n* fix test\n\n* suppress tests and unused methods\n\n* exclude groupBy builder\n\n* fix jacoco exclusion\n\n* add tests for builders\n\n* address comments\n\n* don't truncate","date":"2020-07-02 05:02:21","modifiedFileCount":"33","status":"M","submitter":"Jihoon Son"}]
