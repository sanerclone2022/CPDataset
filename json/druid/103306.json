[{"authorTime":"2020-08-07 09:34:21","codes":[{"authorDate":"2018-10-22 22:57:21","commitOrder":4,"curCode":"  public byte[] getCacheKey()\n  {\n    return new CacheKeyBuilder(DimFilterUtils.BLOOM_DIM_FILTER_CACHE_ID)\n        .appendString(dimension)\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(extractionFn == null ? new byte[0] : extractionFn.getCacheKey())\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(hash.asBytes())\n        .build();\n  }\n","date":"2018-10-22 22:57:21","endLine":72,"groupId":"20516","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getCacheKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/38/3488cc41ac70015f9623d21481c7f11e2169d0.src","preCode":"  public byte[] getCacheKey()\n  {\n    return new CacheKeyBuilder(DimFilterUtils.BLOOM_DIM_FILTER_CACHE_ID)\n        .appendString(dimension)\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(extractionFn == null ? new byte[0] : extractionFn.getCacheKey())\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(hash.asBytes())\n        .build();\n  }\n","realPath":"extensions-core/druid-bloom-filter/src/main/java/org/apache/druid/query/filter/BloomDimFilter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"NB"},{"authorDate":"2020-08-07 09:34:21","commitOrder":4,"curCode":"  private byte[] computeCacheKey()\n  {\n    final List<String> sortedValues = new ArrayList<>(values);\n    sortedValues.sort(Comparator.nullsFirst(Ordering.natural()));\n    final Hasher hasher = Hashing.sha256().newHasher();\n    for (String v : sortedValues) {\n      if (v == null) {\n        hasher.putInt(0);\n      } else {\n        hasher.putString(v, StandardCharsets.UTF_8);\n      }\n    }\n    return new CacheKeyBuilder(DimFilterUtils.IN_CACHE_ID)\n        .appendString(dimension)\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(extractionFn == null ? new byte[0] : extractionFn.getCacheKey())\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(hasher.hash().asBytes())\n        .build();\n  }\n","date":"2020-08-07 09:34:21","endLine":407,"groupId":"1264","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"computeCacheKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8e/13cf1cf50cba8c389d6dd272cce3423ddc7b37.src","preCode":"  private byte[] computeCacheKey()\n  {\n    final List<String> sortedValues = new ArrayList<>(values);\n    sortedValues.sort(Comparator.nullsFirst(Ordering.natural()));\n    final Hasher hasher = Hashing.sha256().newHasher();\n    for (String v : sortedValues) {\n      if (v == null) {\n        hasher.putInt(0);\n      } else {\n        hasher.putString(v, StandardCharsets.UTF_8);\n      }\n    }\n    return new CacheKeyBuilder(DimFilterUtils.IN_CACHE_ID)\n        .appendString(dimension)\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(extractionFn == null ? new byte[0] : extractionFn.getCacheKey())\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(hasher.hash().asBytes())\n        .build();\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":388,"status":"B"}],"commitId":"170031744e8a2ed5fc4c06062df014bcfcfe2e1f","commitMessage":"@@@Combine InDimFilter.  InFilter. (#10119)\n\n* Combine InDimFilter.  InFilter.\n\nThere are two motivations:\n\n1. Ensure that when HashJoinSegmentStorageAdapter compares its Filter\n   to the original one.  and it is an \"in\" type.  the comparison is by\n   reference and does not need to check deep equality. This is useful\n   when the \"in\" filter is very large.\n2. Simplify things. (There isn't a great reason for the DimFilter and\n   Filter logic to be separate.  and combining them reduces some\n   duplication.)\n\n* Fix test.","date":"2020-08-07 09:34:21","modifiedFileCount":"4","status":"M","submitter":"Gian Merlino"},{"authorTime":"2021-04-29 05:13:42","codes":[{"authorDate":"2018-10-22 22:57:21","commitOrder":5,"curCode":"  public byte[] getCacheKey()\n  {\n    return new CacheKeyBuilder(DimFilterUtils.BLOOM_DIM_FILTER_CACHE_ID)\n        .appendString(dimension)\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(extractionFn == null ? new byte[0] : extractionFn.getCacheKey())\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(hash.asBytes())\n        .build();\n  }\n","date":"2018-10-22 22:57:21","endLine":72,"groupId":"20516","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getCacheKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/38/3488cc41ac70015f9623d21481c7f11e2169d0.src","preCode":"  public byte[] getCacheKey()\n  {\n    return new CacheKeyBuilder(DimFilterUtils.BLOOM_DIM_FILTER_CACHE_ID)\n        .appendString(dimension)\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(extractionFn == null ? new byte[0] : extractionFn.getCacheKey())\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(hash.asBytes())\n        .build();\n  }\n","realPath":"extensions-core/druid-bloom-filter/src/main/java/org/apache/druid/query/filter/BloomDimFilter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2021-04-29 05:13:42","commitOrder":5,"curCode":"  private byte[] computeCacheKey()\n  {\n    final Collection<String> sortedValues;\n\n    if (values instanceof SortedSet && isNaturalOrder(((SortedSet<String>) values).comparator())) {\n      \r\n      sortedValues = values;\n    } else {\n      final List<String> sortedValuesList = new ArrayList<>(values);\n      sortedValuesList.sort(Comparators.naturalNullsFirst());\n      sortedValues = sortedValuesList;\n    }\n\n    final Hasher hasher = Hashing.sha256().newHasher();\n    for (String v : sortedValues) {\n      if (v == null) {\n        hasher.putInt(0);\n      } else {\n        hasher.putString(v, StandardCharsets.UTF_8);\n      }\n    }\n    return new CacheKeyBuilder(DimFilterUtils.IN_CACHE_ID)\n        .appendString(dimension)\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(extractionFn == null ? new byte[0] : extractionFn.getCacheKey())\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(hasher.hash().asBytes())\n        .build();\n  }\n","date":"2021-04-29 05:13:42","endLine":450,"groupId":"1264","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"computeCacheKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/7e25573574be3058dab58157eb07f280e524c5.src","preCode":"  private byte[] computeCacheKey()\n  {\n    final List<String> sortedValues = new ArrayList<>(values);\n    sortedValues.sort(Comparator.nullsFirst(Ordering.natural()));\n    final Hasher hasher = Hashing.sha256().newHasher();\n    for (String v : sortedValues) {\n      if (v == null) {\n        hasher.putInt(0);\n      } else {\n        hasher.putString(v, StandardCharsets.UTF_8);\n      }\n    }\n    return new CacheKeyBuilder(DimFilterUtils.IN_CACHE_ID)\n        .appendString(dimension)\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(extractionFn == null ? new byte[0] : extractionFn.getCacheKey())\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(hasher.hash().asBytes())\n        .build();\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":422,"status":"M"}],"commitId":"ad028de53842cb7709cd1db04976aa689fc5ad6d","commitMessage":"@@@InDimFilter: Fix NPE involving certain Set types. (#11169)\n\n* InDimFilter: Fix NPE involving certain Set types.\n\nNormally.  InDimFilters that come from JSON have HashSets for \"values\".\nHowever.  programmatically-generated filters (like the ones from #11068)\nmay use other set types. Some set types.  like TreeSets with natural\nordering.  will throw NPE on \"contains(null)\".  which causes the\nInDimFilter's ValueMatcher to throw NPE if it encounters a null value.\n\nThis patch adds code to detect if the values set can support\ncontains(null).  and if not.  wrap that in a null-checking lambda.\n\nAlso included:\n\n- Remove unneeded NullHandling.needsEmptyToNull method.\n- Update IndexedTableJoinable to generate a TreeSet that does not\n  require lambda-wrapping. (This particular TreeSet is how I noticed\n  the bug in the first place.)\n\n* Test fixes.\n\n* Improve test coverage","date":"2021-04-29 05:13:42","modifiedFileCount":"5","status":"M","submitter":"Gian Merlino"},{"authorTime":"2021-04-29 08:28:29","codes":[{"authorDate":"2018-10-22 22:57:21","commitOrder":6,"curCode":"  public byte[] getCacheKey()\n  {\n    return new CacheKeyBuilder(DimFilterUtils.BLOOM_DIM_FILTER_CACHE_ID)\n        .appendString(dimension)\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(extractionFn == null ? new byte[0] : extractionFn.getCacheKey())\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(hash.asBytes())\n        .build();\n  }\n","date":"2018-10-22 22:57:21","endLine":72,"groupId":"103306","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getCacheKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/38/3488cc41ac70015f9623d21481c7f11e2169d0.src","preCode":"  public byte[] getCacheKey()\n  {\n    return new CacheKeyBuilder(DimFilterUtils.BLOOM_DIM_FILTER_CACHE_ID)\n        .appendString(dimension)\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(extractionFn == null ? new byte[0] : extractionFn.getCacheKey())\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(hash.asBytes())\n        .build();\n  }\n","realPath":"extensions-core/druid-bloom-filter/src/main/java/org/apache/druid/query/filter/BloomDimFilter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2021-04-29 08:28:29","commitOrder":6,"curCode":"  private byte[] computeCacheKey()\n  {\n    final Collection<String> sortedValues;\n\n    if (values instanceof SortedSet && isNaturalOrder(((SortedSet<String>) values).comparator())) {\n      \r\n      sortedValues = values;\n    } else {\n      final List<String> sortedValuesList = new ArrayList<>(values);\n      sortedValuesList.sort(Comparators.naturalNullsFirst());\n      sortedValues = sortedValuesList;\n    }\n\n    \r\n    final Hasher hasher = Hashing.sha256().newHasher();\n    for (String v : sortedValues) {\n      if (v == null) {\n        \r\n        hasher.putInt(-1);\n      } else {\n        hasher.putInt(v.length());\n        hasher.putString(v, StandardCharsets.UTF_8);\n      }\n    }\n\n    return new CacheKeyBuilder(DimFilterUtils.IN_CACHE_ID)\n        .appendString(dimension)\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(extractionFn == null ? new byte[0] : extractionFn.getCacheKey())\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(hasher.hash().asBytes())\n        .build();\n  }\n","date":"2021-04-29 08:28:29","endLine":454,"groupId":"103306","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"computeCacheKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/ba7f8593575a4efcaffc517e99e6b1934653c3.src","preCode":"  private byte[] computeCacheKey()\n  {\n    final Collection<String> sortedValues;\n\n    if (values instanceof SortedSet && isNaturalOrder(((SortedSet<String>) values).comparator())) {\n      \r\n      sortedValues = values;\n    } else {\n      final List<String> sortedValuesList = new ArrayList<>(values);\n      sortedValuesList.sort(Comparators.naturalNullsFirst());\n      sortedValues = sortedValuesList;\n    }\n\n    final Hasher hasher = Hashing.sha256().newHasher();\n    for (String v : sortedValues) {\n      if (v == null) {\n        hasher.putInt(0);\n      } else {\n        hasher.putString(v, StandardCharsets.UTF_8);\n      }\n    }\n    return new CacheKeyBuilder(DimFilterUtils.IN_CACHE_ID)\n        .appendString(dimension)\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(extractionFn == null ? new byte[0] : extractionFn.getCacheKey())\n        .appendByte(DimFilterUtils.STRING_SEPARATOR)\n        .appendByteArray(hasher.hash().asBytes())\n        .build();\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":422,"status":"M"}],"commitId":"7d808e357c214300391c4c7bb81d544bad82f225","commitMessage":"@@@InDimFilter: Fix cache key computation to avoid collisions. (#11168)\n\nThe prior code did not include separation between values.  and encoded\nnull ambiguously. This patch fixes both of those issues by encoding\nstrings as length + value instead of just value.\n\nI think cache key computation was OK prior to #9800. Prior to that\npatch.  the cache key was computed using CacheKeyBuilder.appendStrings. \nwhich encodes strings as UTF-8 and inserts a separator byte (0xff)\nbetween them that cannot appear in a UTF-8 stream.","date":"2021-04-29 08:28:29","modifiedFileCount":"2","status":"M","submitter":"Gian Merlino"}]
