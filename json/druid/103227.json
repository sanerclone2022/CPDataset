[{"authorTime":"2020-02-25 09:34:39","codes":[{"authorDate":"2020-02-25 09:34:39","commitOrder":3,"curCode":"  public void testWithPrefixesSplit() throws IOException\n  {\n    EasyMock.reset(STORAGE);\n    EasyMock.reset(INPUT_DATA_CONFIG);\n    addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    addExpectedPrefixObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.expect(INPUT_DATA_CONFIG.getMaxListingLength()).andReturn(MAX_LISTING_LENGTH);\n    EasyMock.replay(STORAGE);\n    EasyMock.replay(INPUT_DATA_CONFIG);\n\n    GoogleCloudStorageInputSource inputSource =\n        new GoogleCloudStorageInputSource(STORAGE, INPUT_DATA_CONFIG, null, PREFIXES, null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(1L) \r\n    );\n\n    Assert.assertEquals(EXPECTED_OBJECTS, splits.map(InputSplit::get).collect(Collectors.toList()));\n  }\n","date":"2020-02-25 09:34:39","endLine":177,"groupId":"7398","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithPrefixesSplit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/25/fdcca804d2033d0c776d354682ebb780f1f77c.src","preCode":"  public void testWithPrefixesSplit() throws IOException\n  {\n    EasyMock.reset(STORAGE);\n    EasyMock.reset(INPUT_DATA_CONFIG);\n    addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    addExpectedPrefixObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.expect(INPUT_DATA_CONFIG.getMaxListingLength()).andReturn(MAX_LISTING_LENGTH);\n    EasyMock.replay(STORAGE);\n    EasyMock.replay(INPUT_DATA_CONFIG);\n\n    GoogleCloudStorageInputSource inputSource =\n        new GoogleCloudStorageInputSource(STORAGE, INPUT_DATA_CONFIG, null, PREFIXES, null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(1L) \r\n    );\n\n    Assert.assertEquals(EXPECTED_OBJECTS, splits.map(InputSplit::get).collect(Collectors.toList()));\n  }\n","realPath":"extensions-core/google-extensions/src/test/java/org/apache/druid/data/input/google/GoogleCloudStorageInputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"MB"},{"authorDate":"2020-02-25 09:34:39","commitOrder":3,"curCode":"  public void testCreateSplitsWithSplitHintSpecRespectingHint() throws IOException\n  {\n    EasyMock.reset(STORAGE);\n    EasyMock.reset(INPUT_DATA_CONFIG);\n    addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    addExpectedPrefixObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.expect(INPUT_DATA_CONFIG.getMaxListingLength()).andReturn(MAX_LISTING_LENGTH);\n    EasyMock.replay(STORAGE);\n    EasyMock.replay(INPUT_DATA_CONFIG);\n\n    GoogleCloudStorageInputSource inputSource =\n        new GoogleCloudStorageInputSource(STORAGE, INPUT_DATA_CONFIG, null, PREFIXES, null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(CONTENT.length * 3L)\n    );\n\n    Assert.assertEquals(\n        ImmutableList.of(EXPECTED_URIS.stream().map(CloudObjectLocation::new).collect(Collectors.toList())),\n        splits.map(InputSplit::get).collect(Collectors.toList())\n    );\n  }\n","date":"2020-02-25 09:34:39","endLine":202,"groupId":"7398","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateSplitsWithSplitHintSpecRespectingHint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/25/fdcca804d2033d0c776d354682ebb780f1f77c.src","preCode":"  public void testCreateSplitsWithSplitHintSpecRespectingHint() throws IOException\n  {\n    EasyMock.reset(STORAGE);\n    EasyMock.reset(INPUT_DATA_CONFIG);\n    addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    addExpectedPrefixObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.expect(INPUT_DATA_CONFIG.getMaxListingLength()).andReturn(MAX_LISTING_LENGTH);\n    EasyMock.replay(STORAGE);\n    EasyMock.replay(INPUT_DATA_CONFIG);\n\n    GoogleCloudStorageInputSource inputSource =\n        new GoogleCloudStorageInputSource(STORAGE, INPUT_DATA_CONFIG, null, PREFIXES, null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(CONTENT.length * 3L)\n    );\n\n    Assert.assertEquals(\n        ImmutableList.of(EXPECTED_URIS.stream().map(CloudObjectLocation::new).collect(Collectors.toList())),\n        splits.map(InputSplit::get).collect(Collectors.toList())\n    );\n  }\n","realPath":"extensions-core/google-extensions/src/test/java/org/apache/druid/data/input/google/GoogleCloudStorageInputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"B"}],"commitId":"3bc7ae782c9e5989da88999fa91ddfb6fa559a31","commitMessage":"@@@Create splits of multiple files for parallel indexing (#9360)\n\n* Create splits of multiple files for parallel indexing\n\n* fix wrong import and npe in test\n\n* use the single file split in tests\n\n* rename\n\n* import order\n\n* Remove specific local input source\n\n* Update docs/ingestion/native-batch.md\n\nCo-Authored-By: sthetland <steve.hetland@imply.io>\n\n* Update docs/ingestion/native-batch.md\n\nCo-Authored-By: sthetland <steve.hetland@imply.io>\n\n* doc and error msg\n\n* fix build\n\n* fix a test and address comments\n\nCo-authored-by: sthetland <steve.hetland@imply.io>\n","date":"2020-02-25 09:34:39","modifiedFileCount":"31","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-05-09 12:53:39","codes":[{"authorDate":"2020-05-09 12:53:39","commitOrder":4,"curCode":"  public void testWithPrefixesSplit() throws IOException\n  {\n    EasyMock.reset(STORAGE);\n    EasyMock.reset(INPUT_DATA_CONFIG);\n    addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    addExpectedPrefixObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.expect(INPUT_DATA_CONFIG.getMaxListingLength()).andReturn(MAX_LISTING_LENGTH);\n    EasyMock.replay(STORAGE);\n    EasyMock.replay(INPUT_DATA_CONFIG);\n\n    GoogleCloudStorageInputSource inputSource =\n        new GoogleCloudStorageInputSource(STORAGE, INPUT_DATA_CONFIG, null, PREFIXES, null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null, null),\n        new MaxSizeSplitHintSpec(1L) \r\n    );\n\n    Assert.assertEquals(EXPECTED_OBJECTS, splits.map(InputSplit::get).collect(Collectors.toList()));\n  }\n","date":"2020-05-09 12:53:39","endLine":177,"groupId":"7398","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithPrefixesSplit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/38/88398fa9ea572c3b2a41c1ab0cc2e54eeeabbd.src","preCode":"  public void testWithPrefixesSplit() throws IOException\n  {\n    EasyMock.reset(STORAGE);\n    EasyMock.reset(INPUT_DATA_CONFIG);\n    addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    addExpectedPrefixObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.expect(INPUT_DATA_CONFIG.getMaxListingLength()).andReturn(MAX_LISTING_LENGTH);\n    EasyMock.replay(STORAGE);\n    EasyMock.replay(INPUT_DATA_CONFIG);\n\n    GoogleCloudStorageInputSource inputSource =\n        new GoogleCloudStorageInputSource(STORAGE, INPUT_DATA_CONFIG, null, PREFIXES, null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(1L) \r\n    );\n\n    Assert.assertEquals(EXPECTED_OBJECTS, splits.map(InputSplit::get).collect(Collectors.toList()));\n  }\n","realPath":"extensions-core/google-extensions/src/test/java/org/apache/druid/data/input/google/GoogleCloudStorageInputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2020-05-09 12:53:39","commitOrder":4,"curCode":"  public void testCreateSplitsWithSplitHintSpecRespectingHint() throws IOException\n  {\n    EasyMock.reset(STORAGE);\n    EasyMock.reset(INPUT_DATA_CONFIG);\n    addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    addExpectedPrefixObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.expect(INPUT_DATA_CONFIG.getMaxListingLength()).andReturn(MAX_LISTING_LENGTH);\n    EasyMock.replay(STORAGE);\n    EasyMock.replay(INPUT_DATA_CONFIG);\n\n    GoogleCloudStorageInputSource inputSource =\n        new GoogleCloudStorageInputSource(STORAGE, INPUT_DATA_CONFIG, null, PREFIXES, null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null, null),\n        new MaxSizeSplitHintSpec(CONTENT.length * 3L)\n    );\n\n    Assert.assertEquals(\n        ImmutableList.of(EXPECTED_URIS.stream().map(CloudObjectLocation::new).collect(Collectors.toList())),\n        splits.map(InputSplit::get).collect(Collectors.toList())\n    );\n  }\n","date":"2020-05-09 12:53:39","endLine":202,"groupId":"7398","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateSplitsWithSplitHintSpecRespectingHint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/38/88398fa9ea572c3b2a41c1ab0cc2e54eeeabbd.src","preCode":"  public void testCreateSplitsWithSplitHintSpecRespectingHint() throws IOException\n  {\n    EasyMock.reset(STORAGE);\n    EasyMock.reset(INPUT_DATA_CONFIG);\n    addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    addExpectedPrefixObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.expect(INPUT_DATA_CONFIG.getMaxListingLength()).andReturn(MAX_LISTING_LENGTH);\n    EasyMock.replay(STORAGE);\n    EasyMock.replay(INPUT_DATA_CONFIG);\n\n    GoogleCloudStorageInputSource inputSource =\n        new GoogleCloudStorageInputSource(STORAGE, INPUT_DATA_CONFIG, null, PREFIXES, null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(CONTENT.length * 3L)\n    );\n\n    Assert.assertEquals(\n        ImmutableList.of(EXPECTED_URIS.stream().map(CloudObjectLocation::new).collect(Collectors.toList())),\n        splits.map(InputSplit::get).collect(Collectors.toList())\n    );\n  }\n","realPath":"extensions-core/google-extensions/src/test/java/org/apache/druid/data/input/google/GoogleCloudStorageInputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"}],"commitId":"28be107a1c18ef1fd9fd268c8b04e232efb63695","commitMessage":"@@@add flag to flattenSpec to keep null columns (#9814)\n\n* add flag to flattenSpec to keep null columns\n\n* remove changes to inputFormat interface\n\n* add comment\n\n* change comment message\n\n* update web console e2e test\n\n* move keepNullColmns to JSONParseSpec\n\n* fix merge conflicts\n\n* fix tests\n\n* set keepNullColumns to false by default\n\n* fix lgtm\n\n* change Boolean to boolean.  add keepNullColumns to hash.  add tests for keepKeepNullColumns false + true with no nuulul columns\n\n* Add equals verifier tests","date":"2020-05-09 12:53:39","modifiedFileCount":"41","status":"M","submitter":"mcbrewster"},{"authorTime":"2020-08-22 00:43:58","codes":[{"authorDate":"2020-08-22 00:43:58","commitOrder":5,"curCode":"  public void testWithPrefixesSplit() throws IOException\n  {\n    EasyMock.reset(STORAGE);\n    EasyMock.reset(INPUT_DATA_CONFIG);\n    addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    addExpectedPrefixObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.expect(INPUT_DATA_CONFIG.getMaxListingLength()).andReturn(MAX_LISTING_LENGTH);\n    EasyMock.replay(STORAGE);\n    EasyMock.replay(INPUT_DATA_CONFIG);\n\n    GoogleCloudStorageInputSource inputSource =\n        new GoogleCloudStorageInputSource(STORAGE, INPUT_DATA_CONFIG, null, PREFIXES, null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null, null),\n        new MaxSizeSplitHintSpec(null, 1)\n    );\n\n    Assert.assertEquals(EXPECTED_OBJECTS, splits.map(InputSplit::get).collect(Collectors.toList()));\n  }\n","date":"2020-08-22 00:43:58","endLine":178,"groupId":"103227","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithPrefixesSplit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e6/8a9a44a3868aaa6e95f48d1aaeb4f3a50ab62a.src","preCode":"  public void testWithPrefixesSplit() throws IOException\n  {\n    EasyMock.reset(STORAGE);\n    EasyMock.reset(INPUT_DATA_CONFIG);\n    addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    addExpectedPrefixObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.expect(INPUT_DATA_CONFIG.getMaxListingLength()).andReturn(MAX_LISTING_LENGTH);\n    EasyMock.replay(STORAGE);\n    EasyMock.replay(INPUT_DATA_CONFIG);\n\n    GoogleCloudStorageInputSource inputSource =\n        new GoogleCloudStorageInputSource(STORAGE, INPUT_DATA_CONFIG, null, PREFIXES, null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null, null),\n        new MaxSizeSplitHintSpec(1L) \r\n    );\n\n    Assert.assertEquals(EXPECTED_OBJECTS, splits.map(InputSplit::get).collect(Collectors.toList()));\n  }\n","realPath":"extensions-core/google-extensions/src/test/java/org/apache/druid/data/input/google/GoogleCloudStorageInputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2020-08-22 00:43:58","commitOrder":5,"curCode":"  public void testCreateSplitsWithSplitHintSpecRespectingHint() throws IOException\n  {\n    EasyMock.reset(STORAGE);\n    EasyMock.reset(INPUT_DATA_CONFIG);\n    addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    addExpectedPrefixObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.expect(INPUT_DATA_CONFIG.getMaxListingLength()).andReturn(MAX_LISTING_LENGTH);\n    EasyMock.replay(STORAGE);\n    EasyMock.replay(INPUT_DATA_CONFIG);\n\n    GoogleCloudStorageInputSource inputSource =\n        new GoogleCloudStorageInputSource(STORAGE, INPUT_DATA_CONFIG, null, PREFIXES, null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null, null),\n        new MaxSizeSplitHintSpec(new HumanReadableBytes(CONTENT.length * 3L), null)\n    );\n\n    Assert.assertEquals(\n        ImmutableList.of(EXPECTED_URIS.stream().map(CloudObjectLocation::new).collect(Collectors.toList())),\n        splits.map(InputSplit::get).collect(Collectors.toList())\n    );\n  }\n","date":"2020-08-22 00:43:58","endLine":203,"groupId":"103227","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateSplitsWithSplitHintSpecRespectingHint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e6/8a9a44a3868aaa6e95f48d1aaeb4f3a50ab62a.src","preCode":"  public void testCreateSplitsWithSplitHintSpecRespectingHint() throws IOException\n  {\n    EasyMock.reset(STORAGE);\n    EasyMock.reset(INPUT_DATA_CONFIG);\n    addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    addExpectedPrefixObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.expect(INPUT_DATA_CONFIG.getMaxListingLength()).andReturn(MAX_LISTING_LENGTH);\n    EasyMock.replay(STORAGE);\n    EasyMock.replay(INPUT_DATA_CONFIG);\n\n    GoogleCloudStorageInputSource inputSource =\n        new GoogleCloudStorageInputSource(STORAGE, INPUT_DATA_CONFIG, null, PREFIXES, null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null, null),\n        new MaxSizeSplitHintSpec(CONTENT.length * 3L)\n    );\n\n    Assert.assertEquals(\n        ImmutableList.of(EXPECTED_URIS.stream().map(CloudObjectLocation::new).collect(Collectors.toList())),\n        splits.map(InputSplit::get).collect(Collectors.toList())\n    );\n  }\n","realPath":"extensions-core/google-extensions/src/test/java/org/apache/druid/data/input/google/GoogleCloudStorageInputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"b5b3e6ecce6f5346c4a1ed440b27656dd3b130a5","commitMessage":"@@@Add maxNumFiles to splitHintSpec (#10243)\n\n* Add maxNumFiles to splitHintSpec\n\n* missing link\n\n* fix build failure; use maxNumFiles for integration tests\n\n* spelling\n\n* lower default\n\n* Update docs/ingestion/native-batch.md\n\nCo-authored-by: Abhishek Agarwal <1477457+abhishekagarwal87@users.noreply.github.com>\n\n* address comments; change default maxSplitSize\n\n* spelling\n\n* typos and doc\n\n* same change for segments splitHintSpec\n\n* fix build\n\n* fix build\n\nCo-authored-by: Abhishek Agarwal <1477457+abhishekagarwal87@users.noreply.github.com>","date":"2020-08-22 00:43:58","modifiedFileCount":"19","status":"M","submitter":"Jihoon Son"}]
