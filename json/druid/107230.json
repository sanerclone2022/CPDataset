[{"authorTime":"2019-07-13 03:54:07","codes":[{"authorDate":"2019-07-13 03:54:07","commitOrder":1,"curCode":"  public MultiValueDimensionVectorSelector makeMultiValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    return multiValueDimensionSelectorCache.computeIfAbsent(\n        dimensionSpec,\n        spec -> {\n          final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n          if (holder == null\n              || !holder.getCapabilities().isDictionaryEncoded()\n              || holder.getCapabilities().getType() != ValueType.STRING\n              || !holder.getCapabilities().hasMultipleValues()) {\n            throw new ISE(\n                \"Column[%s] is not a multi-value string column, do not ask for a multi-value selector\",\n                spec.getDimension()\n            );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n              getCachedColumn(spec.getDimension());\n\n          final MultiValueDimensionVectorSelector selector = dictionaryEncodedColumn.makeMultiValueDimensionVectorSelector(\n              offset\n          );\n\n          return spec.decorate(selector);\n        }\n    );\n  }\n","date":"2019-07-13 03:54:07","endLine":106,"groupId":"18043","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"makeMultiValueDimensionSelector","params":"(finalDimensionSpecdimensionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/83/110499862fd122c47eab9475ff06d5c95f1162.src","preCode":"  public MultiValueDimensionVectorSelector makeMultiValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    return multiValueDimensionSelectorCache.computeIfAbsent(\n        dimensionSpec,\n        spec -> {\n          final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n          if (holder == null\n              || !holder.getCapabilities().isDictionaryEncoded()\n              || holder.getCapabilities().getType() != ValueType.STRING\n              || !holder.getCapabilities().hasMultipleValues()) {\n            throw new ISE(\n                \"Column[%s] is not a multi-value string column, do not ask for a multi-value selector\",\n                spec.getDimension()\n            );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n              getCachedColumn(spec.getDimension());\n\n          final MultiValueDimensionVectorSelector selector = dictionaryEncodedColumn.makeMultiValueDimensionVectorSelector(\n              offset\n          );\n\n          return spec.decorate(selector);\n        }\n    );\n  }\n","realPath":"processing/src/main/java/org/apache/druid/segment/vector/QueryableIndexVectorColumnSelectorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2019-07-13 03:54:07","commitOrder":1,"curCode":"  public SingleValueDimensionVectorSelector makeSingleValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    return singleValueDimensionSelectorCache.computeIfAbsent(\n        dimensionSpec,\n        spec -> {\n          final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n          if (holder == null\n              || !holder.getCapabilities().isDictionaryEncoded()\n              || holder.getCapabilities().getType() != ValueType.STRING) {\n            \r\n            return NilVectorSelector.create(offset);\n          }\n\n          if (holder.getCapabilities().hasMultipleValues()) {\n            \r\n            throw new ISE(\"Column[%s] is multi-value, do not ask for a single-value selector\", spec.getDimension());\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n              getCachedColumn(spec.getDimension());\n\n          final SingleValueDimensionVectorSelector selector =\n              dictionaryEncodedColumn.makeSingleValueDimensionVectorSelector(offset);\n\n          return spec.decorate(selector);\n        }\n    );\n  }\n","date":"2019-07-13 03:54:07","endLine":141,"groupId":"18044","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"makeSingleValueDimensionSelector","params":"(finalDimensionSpecdimensionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/83/110499862fd122c47eab9475ff06d5c95f1162.src","preCode":"  public SingleValueDimensionVectorSelector makeSingleValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    return singleValueDimensionSelectorCache.computeIfAbsent(\n        dimensionSpec,\n        spec -> {\n          final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n          if (holder == null\n              || !holder.getCapabilities().isDictionaryEncoded()\n              || holder.getCapabilities().getType() != ValueType.STRING) {\n            \r\n            return NilVectorSelector.create(offset);\n          }\n\n          if (holder.getCapabilities().hasMultipleValues()) {\n            \r\n            throw new ISE(\"Column[%s] is multi-value, do not ask for a single-value selector\", spec.getDimension());\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n              getCachedColumn(spec.getDimension());\n\n          final SingleValueDimensionVectorSelector selector =\n              dictionaryEncodedColumn.makeSingleValueDimensionVectorSelector(offset);\n\n          return spec.decorate(selector);\n        }\n    );\n  }\n","realPath":"processing/src/main/java/org/apache/druid/segment/vector/QueryableIndexVectorColumnSelectorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"}],"commitId":"ffa25b78321a56b210a8ad5b6c9ca61b3b737153","commitMessage":"@@@Query vectorization. (#6794)\n\n* Benchmarks: New SqlBenchmark.  add caching & vectorization to some others.\n\n- Introduce a new SqlBenchmark geared towards benchmarking a wide\n  variety of SQL queries. Rename the old SqlBenchmark to\n  SqlVsNativeBenchmark.\n- Add (optional) caching to SegmentGenerator to enable easier\n  benchmarking of larger segments.\n- Add vectorization to FilteredAggregatorBenchmark and GroupByBenchmark.\n\n* Query vectorization.\n\nThis patch includes vectorized timeseries and groupBy engines.  as well\nas some analogs of your favorite Druid classes:\n\n- VectorCursor is like Cursor. (It comes from StorageAdapter.makeVectorCursor.)\n- VectorColumnSelectorFactory is like ColumnSelectorFactory.  and it has\n  methods to create analogs of the column selectors you know and love.\n- VectorOffset and ReadableVectorOffset are like Offset and ReadableOffset.\n- VectorAggregator is like BufferAggregator.\n- VectorValueMatcher is like ValueMatcher.\n\nThere are some noticeable differences between vectorized and regular\nexecution:\n\n- Unlike regular cursors.  vector cursors do not understand time\n  granularity. They expect query engines to handle this on their own. \n  which a new VectorCursorGranularizer class helps with. This is to\n  avoid too much batch-splitting and to respect the fact that vector\n  selectors are somewhat more heavyweight than regular selectors.\n- Unlike FilteredOffset.  FilteredVectorOffset does not leverage indexes\n  for filters that might partially support them (like an OR of one\n  filter that supports indexing and another that doesn't). I'm not sure\n  that this behavior is desirable anyway (it is potentially too eager)\n  but.  at any rate.  it'd be better to harmonize it between the two\n  classes. Potentially they should both do some different thing that\n  is smarter than what either of them is doing right now.\n- When vector cursors are created by QueryableIndexCursorSequenceBuilder. \n  they use a morphing binary-then-linear search to find their start and\n  end rows.  rather than linear search.\n\nLimitations in this patch are:\n\n- Only timeseries and groupBy have vectorized engines.\n- GroupBy doesn't handle multi-value dimensions yet.\n- Vector cursors cannot handle virtual columns or descending order.\n- Only some filters have vectorized matchers: \"selector\".  \"bound\".  \"in\". \n  \"like\".  \"regex\".  \"search\".  \"and\".  \"or\".  and \"not\".\n- Only some aggregators have vectorized implementations: \"count\". \n  \"doubleSum\".  \"floatSum\".  \"longSum\".  \"hyperUnique\".  and \"filtered\".\n- Dimension specs other than \"default\" don't work yet (no extraction\n  functions or filtered dimension specs).\n\nCurrently.  the testing strategy includes adding vectorization-enabled\ntests to TimeseriesQueryRunnerTest.  GroupByQueryRunnerTest. \nGroupByTimeseriesQueryRunnerTest.  CalciteQueryTest.  and all of the\nfiltering tests that extend BaseFilterTest. In all of those classes. \nthere are some test cases that don't support vectorization. They are\nmarked by special function calls like \"cannotVectorize\" or \"skipVectorize\"\nthat tell the test harness to either expect an exception or to skip the\ntest case.\n\nTesting should be expanded in the future -- a project in and of itself.\n\nRelated to #3011.\n\n* WIP\n\n* Adjustments for unused things.\n\n* Adjust javadocs.\n\n* DimensionDictionarySelector adjustments.\n\n* Add \"clone\" to BatchIteratorAdapter.\n\n* ValueMatcher javadocs.\n\n* Fix benchmark.\n\n* Fixups post-merge.\n\n* Expect exception on testGroupByWithStringVirtualColumn for IncrementalIndex.\n\n* BloomDimFilterSqlTest: Tag two non-vectorizable tests.\n\n* Minor adjustments.\n\n* Update surefire.  bump up Xmx in Travis.\n\n* Some more adjustments.\n\n* Javadoc adjustments\n\n* AggregatorAdapters adjustments.\n\n* Additional comments.\n\n* Remove switching search.\n\n* Only missiles.\n","date":"2019-07-13 03:54:07","modifiedFileCount":"143","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-04-30 02:03:13","codes":[{"authorDate":"2020-04-30 02:03:13","commitOrder":2,"curCode":"  public MultiValueDimensionVectorSelector makeMultiValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    return multiValueDimensionSelectorCache.computeIfAbsent(\n        dimensionSpec,\n        spec -> {\n          final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n          if (holder == null\n              || !holder.getCapabilities().isDictionaryEncoded()\n              || holder.getCapabilities().getType() != ValueType.STRING\n              || !holder.getCapabilities().hasMultipleValues()) {\n            throw new ISE(\n                \"Column[%s] is not a multi-value string column, do not ask for a multi-value selector\",\n                spec.getDimension()\n            );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n              getCachedColumn(spec.getDimension());\n\n          \r\n          assert dictionaryEncodedColumn != null;\n          final MultiValueDimensionVectorSelector selector = dictionaryEncodedColumn.makeMultiValueDimensionVectorSelector(\n              offset\n          );\n\n          return spec.decorate(selector);\n        }\n    );\n  }\n","date":"2020-04-30 02:03:13","endLine":108,"groupId":"18043","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"makeMultiValueDimensionSelector","params":"(finalDimensionSpecdimensionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d8/165895511dfffa4ee355a9721f4a4888e337cd.src","preCode":"  public MultiValueDimensionVectorSelector makeMultiValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    return multiValueDimensionSelectorCache.computeIfAbsent(\n        dimensionSpec,\n        spec -> {\n          final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n          if (holder == null\n              || !holder.getCapabilities().isDictionaryEncoded()\n              || holder.getCapabilities().getType() != ValueType.STRING\n              || !holder.getCapabilities().hasMultipleValues()) {\n            throw new ISE(\n                \"Column[%s] is not a multi-value string column, do not ask for a multi-value selector\",\n                spec.getDimension()\n            );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n              getCachedColumn(spec.getDimension());\n\n          final MultiValueDimensionVectorSelector selector = dictionaryEncodedColumn.makeMultiValueDimensionVectorSelector(\n              offset\n          );\n\n          return spec.decorate(selector);\n        }\n    );\n  }\n","realPath":"processing/src/main/java/org/apache/druid/segment/vector/QueryableIndexVectorColumnSelectorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2020-04-30 02:03:13","commitOrder":2,"curCode":"  public SingleValueDimensionVectorSelector makeSingleValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    return singleValueDimensionSelectorCache.computeIfAbsent(\n        dimensionSpec,\n        spec -> {\n          final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n          if (holder == null\n              || !holder.getCapabilities().isDictionaryEncoded()\n              || holder.getCapabilities().getType() != ValueType.STRING) {\n            \r\n            return NilVectorSelector.create(offset);\n          }\n\n          if (holder.getCapabilities().hasMultipleValues()) {\n            \r\n            throw new ISE(\"Column[%s] is multi-value, do not ask for a single-value selector\", spec.getDimension());\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n              getCachedColumn(spec.getDimension());\n\n          \r\n          assert dictionaryEncodedColumn != null;\n          final SingleValueDimensionVectorSelector selector =\n              dictionaryEncodedColumn.makeSingleValueDimensionVectorSelector(offset);\n\n          return spec.decorate(selector);\n        }\n    );\n  }\n","date":"2020-04-30 02:03:13","endLine":145,"groupId":"18044","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"makeSingleValueDimensionSelector","params":"(finalDimensionSpecdimensionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d8/165895511dfffa4ee355a9721f4a4888e337cd.src","preCode":"  public SingleValueDimensionVectorSelector makeSingleValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    return singleValueDimensionSelectorCache.computeIfAbsent(\n        dimensionSpec,\n        spec -> {\n          final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n          if (holder == null\n              || !holder.getCapabilities().isDictionaryEncoded()\n              || holder.getCapabilities().getType() != ValueType.STRING) {\n            \r\n            return NilVectorSelector.create(offset);\n          }\n\n          if (holder.getCapabilities().hasMultipleValues()) {\n            \r\n            throw new ISE(\"Column[%s] is multi-value, do not ask for a single-value selector\", spec.getDimension());\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n              getCachedColumn(spec.getDimension());\n\n          final SingleValueDimensionVectorSelector selector =\n              dictionaryEncodedColumn.makeSingleValueDimensionVectorSelector(offset);\n\n          return spec.decorate(selector);\n        }\n    );\n  }\n","realPath":"processing/src/main/java/org/apache/druid/segment/vector/QueryableIndexVectorColumnSelectorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"7510e6e722fa3829d809e7151b870ebcf947194c","commitMessage":"@@@Fix potential NPEs in joins (#9760)\n\n* Fix potential NPEs in joins\n\nintelliJ reported issues with potential NPEs. This was first hit in testing\nwith a filter being pushed down to the left hand table when joining against\nan indexed table.\n\n* More null check cleanup\n\n* Optimize filter value rewrite for IndexedTable\n\n* Add unit tests for LookupJoinable\n\n* Add tests for IndexedTableJoinable\n\n* Add non null assert for dimension selector\n\n* Supress null warning in LookupJoinMatcher\n\n* remove some null checks on hot path","date":"2020-04-30 02:03:13","modifiedFileCount":"17","status":"M","submitter":"Suneet Saldanha"},{"authorTime":"2020-06-05 14:52:37","codes":[{"authorDate":"2020-06-05 14:52:37","commitOrder":3,"curCode":"  public MultiValueDimensionVectorSelector makeMultiValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    return multiValueDimensionSelectorCache.computeIfAbsent(\n        dimensionSpec,\n        spec -> {\n          final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n          if (holder == null\n              || !holder.getCapabilities().isDictionaryEncoded()\n              || holder.getCapabilities().getType() != ValueType.STRING\n              || !holder.getCapabilities().hasMultipleValues().isMaybeTrue()) {\n            throw new ISE(\n                \"Column[%s] is not a multi-value string column, do not ask for a multi-value selector\",\n                spec.getDimension()\n            );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n              getCachedColumn(spec.getDimension());\n\n          \r\n          assert dictionaryEncodedColumn != null;\n          final MultiValueDimensionVectorSelector selector = dictionaryEncodedColumn.makeMultiValueDimensionVectorSelector(\n              offset\n          );\n\n          return spec.decorate(selector);\n        }\n    );\n  }\n","date":"2020-06-05 14:52:37","endLine":108,"groupId":"18043","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"makeMultiValueDimensionSelector","params":"(finalDimensionSpecdimensionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/26/9ac38429bb99c0a99ef2bed28f8588829122b3.src","preCode":"  public MultiValueDimensionVectorSelector makeMultiValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    return multiValueDimensionSelectorCache.computeIfAbsent(\n        dimensionSpec,\n        spec -> {\n          final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n          if (holder == null\n              || !holder.getCapabilities().isDictionaryEncoded()\n              || holder.getCapabilities().getType() != ValueType.STRING\n              || !holder.getCapabilities().hasMultipleValues()) {\n            throw new ISE(\n                \"Column[%s] is not a multi-value string column, do not ask for a multi-value selector\",\n                spec.getDimension()\n            );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n              getCachedColumn(spec.getDimension());\n\n          \r\n          assert dictionaryEncodedColumn != null;\n          final MultiValueDimensionVectorSelector selector = dictionaryEncodedColumn.makeMultiValueDimensionVectorSelector(\n              offset\n          );\n\n          return spec.decorate(selector);\n        }\n    );\n  }\n","realPath":"processing/src/main/java/org/apache/druid/segment/vector/QueryableIndexVectorColumnSelectorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2020-06-05 14:52:37","commitOrder":3,"curCode":"  public SingleValueDimensionVectorSelector makeSingleValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    return singleValueDimensionSelectorCache.computeIfAbsent(\n        dimensionSpec,\n        spec -> {\n          final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n          if (holder == null\n              || !holder.getCapabilities().isDictionaryEncoded()\n              || holder.getCapabilities().getType() != ValueType.STRING) {\n            \r\n            return NilVectorSelector.create(offset);\n          }\n\n          if (holder.getCapabilities().hasMultipleValues().isMaybeTrue()) {\n            \r\n            throw new ISE(\"Column[%s] is multi-value, do not ask for a single-value selector\", spec.getDimension());\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n              getCachedColumn(spec.getDimension());\n\n          \r\n          assert dictionaryEncodedColumn != null;\n          final SingleValueDimensionVectorSelector selector =\n              dictionaryEncodedColumn.makeSingleValueDimensionVectorSelector(offset);\n\n          return spec.decorate(selector);\n        }\n    );\n  }\n","date":"2020-06-05 14:52:37","endLine":145,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"makeSingleValueDimensionSelector","params":"(finalDimensionSpecdimensionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/26/9ac38429bb99c0a99ef2bed28f8588829122b3.src","preCode":"  public SingleValueDimensionVectorSelector makeSingleValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    return singleValueDimensionSelectorCache.computeIfAbsent(\n        dimensionSpec,\n        spec -> {\n          final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n          if (holder == null\n              || !holder.getCapabilities().isDictionaryEncoded()\n              || holder.getCapabilities().getType() != ValueType.STRING) {\n            \r\n            return NilVectorSelector.create(offset);\n          }\n\n          if (holder.getCapabilities().hasMultipleValues()) {\n            \r\n            throw new ISE(\"Column[%s] is multi-value, do not ask for a single-value selector\", spec.getDimension());\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n              getCachedColumn(spec.getDimension());\n\n          \r\n          assert dictionaryEncodedColumn != null;\n          final SingleValueDimensionVectorSelector selector =\n              dictionaryEncodedColumn.makeSingleValueDimensionVectorSelector(offset);\n\n          return spec.decorate(selector);\n        }\n    );\n  }\n","realPath":"processing/src/main/java/org/apache/druid/segment/vector/QueryableIndexVectorColumnSelectorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"77dd5b06ae8fd7c81474cb03c0fc399cdf21646a","commitMessage":"@@@ColumnCapabilities.hasMultipleValues refactor (#9731)\n\n* transition ColumnCapabilities.hasMultipleValues to Capable enum.  remove ColumnCapabilities.isComplete\n\n* remove artifical.  always multi-value capabilities from IncrementalIndexStorageAdapter and fix up fallout from that.  fix ColumnCapabilities merge in index merger\n\n* fix typo\n\n* remove unused method\n\n* review stuffs.  revert IncrementalIndexStorageAdapater capabilities change.  plumb lame workaround to SegmentAnalyzer\n\n* more comment\n\n* use volatile booleans\n\n* fix line length\n\n* correctly handle missing columns for vector processors\n\n* return ColumnCapabilities.Capable for BitmapIndexSelector.hasMultipleValues.  fix vector processor selection for complex\n\n* false on non-existent","date":"2020-06-05 14:52:37","modifiedFileCount":"41","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-08-12 02:07:17","codes":[{"authorDate":"2020-08-12 02:07:17","commitOrder":4,"curCode":"  public MultiValueDimensionVectorSelector makeMultiValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    return multiValueDimensionSelectorCache.computeIfAbsent(\n        dimensionSpec,\n        spec -> {\n          final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n          if (holder == null\n              || holder.getCapabilities().isDictionaryEncoded().isFalse()\n              || holder.getCapabilities().getType() != ValueType.STRING\n              || holder.getCapabilities().hasMultipleValues().isFalse()) {\n            throw new ISE(\n                \"Column[%s] is not a multi-value string column, do not ask for a multi-value selector\",\n                spec.getDimension()\n            );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n              getCachedColumn(spec.getDimension());\n\n          \r\n          assert dictionaryEncodedColumn != null;\n          final MultiValueDimensionVectorSelector selector = dictionaryEncodedColumn.makeMultiValueDimensionVectorSelector(\n              offset\n          );\n\n          return spec.decorate(selector);\n        }\n    );\n  }\n","date":"2020-08-12 02:07:17","endLine":108,"groupId":"12441","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"makeMultiValueDimensionSelector","params":"(finalDimensionSpecdimensionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/48/c56c9ef6df7583e60bbfa3fcf7f02d52c093eb.src","preCode":"  public MultiValueDimensionVectorSelector makeMultiValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    return multiValueDimensionSelectorCache.computeIfAbsent(\n        dimensionSpec,\n        spec -> {\n          final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n          if (holder == null\n              || !holder.getCapabilities().isDictionaryEncoded()\n              || holder.getCapabilities().getType() != ValueType.STRING\n              || !holder.getCapabilities().hasMultipleValues().isMaybeTrue()) {\n            throw new ISE(\n                \"Column[%s] is not a multi-value string column, do not ask for a multi-value selector\",\n                spec.getDimension()\n            );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n              getCachedColumn(spec.getDimension());\n\n          \r\n          assert dictionaryEncodedColumn != null;\n          final MultiValueDimensionVectorSelector selector = dictionaryEncodedColumn.makeMultiValueDimensionVectorSelector(\n              offset\n          );\n\n          return spec.decorate(selector);\n        }\n    );\n  }\n","realPath":"processing/src/main/java/org/apache/druid/segment/vector/QueryableIndexVectorColumnSelectorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2020-08-12 02:07:17","commitOrder":4,"curCode":"  public SingleValueDimensionVectorSelector makeSingleValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    return singleValueDimensionSelectorCache.computeIfAbsent(\n        dimensionSpec,\n        spec -> {\n          final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n          if (holder == null\n              || !holder.getCapabilities().isDictionaryEncoded().isTrue()\n              || holder.getCapabilities().getType() != ValueType.STRING) {\n            \r\n            return NilVectorSelector.create(offset);\n          }\n\n          if (holder.getCapabilities().hasMultipleValues().isMaybeTrue()) {\n            \r\n            throw new ISE(\"Column[%s] is multi-value, do not ask for a single-value selector\", spec.getDimension());\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n              getCachedColumn(spec.getDimension());\n\n          \r\n          assert dictionaryEncodedColumn != null;\n          final SingleValueDimensionVectorSelector selector =\n              dictionaryEncodedColumn.makeSingleValueDimensionVectorSelector(offset);\n\n          return spec.decorate(selector);\n        }\n    );\n  }\n","date":"2020-08-12 02:07:17","endLine":145,"groupId":"12441","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"makeSingleValueDimensionSelector","params":"(finalDimensionSpecdimensionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/48/c56c9ef6df7583e60bbfa3fcf7f02d52c093eb.src","preCode":"  public SingleValueDimensionVectorSelector makeSingleValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    return singleValueDimensionSelectorCache.computeIfAbsent(\n        dimensionSpec,\n        spec -> {\n          final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n          if (holder == null\n              || !holder.getCapabilities().isDictionaryEncoded()\n              || holder.getCapabilities().getType() != ValueType.STRING) {\n            \r\n            return NilVectorSelector.create(offset);\n          }\n\n          if (holder.getCapabilities().hasMultipleValues().isMaybeTrue()) {\n            \r\n            throw new ISE(\"Column[%s] is multi-value, do not ask for a single-value selector\", spec.getDimension());\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n              getCachedColumn(spec.getDimension());\n\n          \r\n          assert dictionaryEncodedColumn != null;\n          final SingleValueDimensionVectorSelector selector =\n              dictionaryEncodedColumn.makeSingleValueDimensionVectorSelector(offset);\n\n          return spec.decorate(selector);\n        }\n    );\n  }\n","realPath":"processing/src/main/java/org/apache/druid/segment/vector/QueryableIndexVectorColumnSelectorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"c72f96a4babdf5055912bb0fb5eb2236cfe0ef23","commitMessage":"@@@fix bug with expressions on sparse string realtime columns without explicit null valued rows (#10248)\n\n* fix bug with realtime expressions on sparse string columns\n\n* fix test\n\n* add comment back\n\n* push capabilities for dimensions to dimension indexers since they know things\n\n* style\n\n* style\n\n* fixes\n\n* getting a bit carried away\n\n* missed one\n\n* fix it\n\n* benchmark build fix\n\n* review stuffs\n\n* javadoc and comments\n\n* add comment\n\n* more strict check\n\n* fix missed usaged of impl instead of interface","date":"2020-08-12 02:07:17","modifiedFileCount":"30","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-09-15 10:29:35","codes":[{"authorDate":"2020-09-15 10:29:35","commitOrder":5,"curCode":"  public MultiValueDimensionVectorSelector makeMultiValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n    Function<DimensionSpec, MultiValueDimensionVectorSelector> mappingFunction = spec -> {\n      if (virtualColumns.exists(spec.getDimension())) {\n        MultiValueDimensionVectorSelector dimensionSelector = virtualColumns.makeMultiValueDimensionVectorSelector(\n            dimensionSpec,\n            index,\n            offset\n        );\n        if (dimensionSelector == null) {\n          return virtualColumns.makeMultiValueDimensionVectorSelector(dimensionSpec, this);\n        } else {\n          return dimensionSelector;\n        }\n      }\n\n      final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n      if (holder == null\n          || holder.getCapabilities().isDictionaryEncoded().isFalse()\n          || holder.getCapabilities().getType() != ValueType.STRING\n          || holder.getCapabilities().hasMultipleValues().isFalse()) {\n        throw new ISE(\n            \"Column[%s] is not a multi-value string column, do not ask for a multi-value selector\",\n            spec.getDimension()\n        );\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n          getCachedColumn(spec.getDimension());\n\n      \r\n      assert dictionaryEncodedColumn != null;\n      final MultiValueDimensionVectorSelector selector = dictionaryEncodedColumn.makeMultiValueDimensionVectorSelector(\n          offset\n      );\n\n      return spec.decorate(selector);\n    };\n\n    \r\n    \r\n    MultiValueDimensionVectorSelector selector = multiValueDimensionSelectorCache.get(dimensionSpec);\n    if (selector == null) {\n      selector = mappingFunction.apply(dimensionSpec);\n      multiValueDimensionSelectorCache.put(dimensionSpec, selector);\n    }\n\n    return selector;\n  }\n","date":"2020-09-15 10:29:35","endLine":132,"groupId":"107230","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"makeMultiValueDimensionSelector","params":"(finalDimensionSpecdimensionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a9/2f0fad91e9c874c567bc64983ae34540c0938c.src","preCode":"  public MultiValueDimensionVectorSelector makeMultiValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    return multiValueDimensionSelectorCache.computeIfAbsent(\n        dimensionSpec,\n        spec -> {\n          final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n          if (holder == null\n              || holder.getCapabilities().isDictionaryEncoded().isFalse()\n              || holder.getCapabilities().getType() != ValueType.STRING\n              || holder.getCapabilities().hasMultipleValues().isFalse()) {\n            throw new ISE(\n                \"Column[%s] is not a multi-value string column, do not ask for a multi-value selector\",\n                spec.getDimension()\n            );\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n              getCachedColumn(spec.getDimension());\n\n          \r\n          assert dictionaryEncodedColumn != null;\n          final MultiValueDimensionVectorSelector selector = dictionaryEncodedColumn.makeMultiValueDimensionVectorSelector(\n              offset\n          );\n\n          return spec.decorate(selector);\n        }\n    );\n  }\n","realPath":"processing/src/main/java/org/apache/druid/segment/vector/QueryableIndexVectorColumnSelectorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2020-09-15 10:29:35","commitOrder":5,"curCode":"  public SingleValueDimensionVectorSelector makeSingleValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    Function<DimensionSpec, SingleValueDimensionVectorSelector> mappingFunction = spec -> {\n      if (virtualColumns.exists(spec.getDimension())) {\n        SingleValueDimensionVectorSelector dimensionSelector = virtualColumns.makeSingleValueDimensionVectorSelector(\n            dimensionSpec,\n            index,\n            offset\n        );\n        if (dimensionSelector == null) {\n          return virtualColumns.makeSingleValueDimensionVectorSelector(dimensionSpec, this);\n        } else {\n          return dimensionSelector;\n        }\n      }\n\n      final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n      if (holder == null\n          || !holder.getCapabilities().isDictionaryEncoded().isTrue()\n          || holder.getCapabilities().getType() != ValueType.STRING) {\n        \r\n        return NilVectorSelector.create(offset);\n      }\n\n      if (holder.getCapabilities().hasMultipleValues().isMaybeTrue()) {\n        \r\n        throw new ISE(\"Column[%s] is multi-value, do not ask for a single-value selector\", spec.getDimension());\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n          getCachedColumn(spec.getDimension());\n\n      \r\n      assert dictionaryEncodedColumn != null;\n      final SingleValueDimensionVectorSelector selector =\n          dictionaryEncodedColumn.makeSingleValueDimensionVectorSelector(offset);\n\n      return spec.decorate(selector);\n    };\n\n    \r\n    \r\n    SingleValueDimensionVectorSelector selector = singleValueDimensionSelectorCache.get(dimensionSpec);\n    if (selector == null) {\n      selector = mappingFunction.apply(dimensionSpec);\n      singleValueDimensionSelectorCache.put(dimensionSpec, selector);\n    }\n\n    return selector;\n  }\n","date":"2020-09-15 10:29:35","endLine":189,"groupId":"107230","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"makeSingleValueDimensionSelector","params":"(finalDimensionSpecdimensionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a9/2f0fad91e9c874c567bc64983ae34540c0938c.src","preCode":"  public SingleValueDimensionVectorSelector makeSingleValueDimensionSelector(final DimensionSpec dimensionSpec)\n  {\n    if (!dimensionSpec.canVectorize()) {\n      throw new ISE(\"DimensionSpec[%s] cannot be vectorized\", dimensionSpec);\n    }\n\n    return singleValueDimensionSelectorCache.computeIfAbsent(\n        dimensionSpec,\n        spec -> {\n          final ColumnHolder holder = index.getColumnHolder(spec.getDimension());\n          if (holder == null\n              || !holder.getCapabilities().isDictionaryEncoded().isTrue()\n              || holder.getCapabilities().getType() != ValueType.STRING) {\n            \r\n            return NilVectorSelector.create(offset);\n          }\n\n          if (holder.getCapabilities().hasMultipleValues().isMaybeTrue()) {\n            \r\n            throw new ISE(\"Column[%s] is multi-value, do not ask for a single-value selector\", spec.getDimension());\n          }\n\n          @SuppressWarnings(\"unchecked\")\n          final DictionaryEncodedColumn<String> dictionaryEncodedColumn = (DictionaryEncodedColumn<String>)\n              getCachedColumn(spec.getDimension());\n\n          \r\n          assert dictionaryEncodedColumn != null;\n          final SingleValueDimensionVectorSelector selector =\n              dictionaryEncodedColumn.makeSingleValueDimensionVectorSelector(offset);\n\n          return spec.decorate(selector);\n        }\n    );\n  }\n","realPath":"processing/src/main/java/org/apache/druid/segment/vector/QueryableIndexVectorColumnSelectorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"}],"commitId":"e012d5c41bbc5a056e3c99bf6073ac19ba523c7d","commitMessage":"@@@allow vectorized query engines to utilize vectorized virtual columns (#10388)\n\n* allow vectorized query engines to utilize vectorized virtual column implementations\n\n* javadoc.  refactor.  checkstyle\n\n* intellij inspection and more javadoc\n\n* better\n\n* review stuffs\n\n* fix incorrect refactor.  thanks tests\n\n* minor adjustments","date":"2020-09-15 10:29:35","modifiedFileCount":"7","status":"M","submitter":"Clint Wylie"}]
