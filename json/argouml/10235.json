[{"authorTime":"2009-08-11 05:33:05","codes":[{"authorDate":"2009-08-11 05:33:00","commitOrder":2,"curCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAAssociation(modelElement)) {\n            figNode =\n                createNaryAssociationNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClass(modelElement)) {\n            figNode = new FigClass(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInterface(modelElement)) {\n            figNode = new FigInterface(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAModel(modelElement)) {\n            figNode = new FigModel(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASubsystem(modelElement)) {\n            figNode = new FigSubsystem(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAPackage(modelElement)) {\n            figNode = new FigPackage(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAEnumeration(modelElement)) {\n            figNode = new FigEnumeration(modelElement, bounds, settings);\n        } else if (Model.getFacade().isADataType(modelElement)) {\n            figNode = new FigDataType(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAStereotype(modelElement)) {\n            figNode = new FigStereotypeDeclaration(modelElement, bounds, \n                    settings);\n        } else if (Model.getFacade().isAException(modelElement)) {\n            figNode = new FigException(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASignal(modelElement)) {\n            figNode = new FigSignal(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAActor(modelElement)) {\n            figNode = new FigActor(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAUseCase(modelElement)) {\n            figNode = new FigUseCase(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAObject(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANodeInstance(modelElement)) {\n            figNode = new FigNodeInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponentInstance(modelElement)) {\n            figNode = new FigComponentInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANode(modelElement)) {\n            figNode = new FigMNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponent(modelElement)) {\n            figNode = new FigComponent(modelElement, bounds, settings);\n        }\n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","date":"2009-08-11 05:33:00","endLine":714,"groupId":"14258","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createDiagramElement","params":"(finalObjectmodelElement@finalRectanglebounds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-argouml-10-0.7/blobInfo/CC_OUT/blobs/04/89fee64d875053cf5670869b0474741c93f57d.src","preCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAAssociation(modelElement)) {\n            figNode =\n                createNaryAssociationNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClass(modelElement)) {\n            figNode = new FigClass(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInterface(modelElement)) {\n            figNode = new FigInterface(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAModel(modelElement)) {\n            figNode = new FigModel(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASubsystem(modelElement)) {\n            figNode = new FigSubsystem(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAPackage(modelElement)) {\n            figNode = new FigPackage(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAEnumeration(modelElement)) {\n            figNode = new FigEnumeration(modelElement, bounds, settings);\n        } else if (Model.getFacade().isADataType(modelElement)) {\n            figNode = new FigDataType(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAStereotype(modelElement)) {\n            figNode = new FigStereotypeDeclaration(modelElement, bounds, \n                    settings);\n        } else if (Model.getFacade().isAException(modelElement)) {\n            figNode = new FigException(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASignal(modelElement)) {\n            figNode = new FigSignal(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAActor(modelElement)) {\n            figNode = new FigActor(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAUseCase(modelElement)) {\n            figNode = new FigUseCase(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAObject(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANodeInstance(modelElement)) {\n            figNode = new FigNodeInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponentInstance(modelElement)) {\n            figNode = new FigComponentInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANode(modelElement)) {\n            figNode = new FigMNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponent(modelElement)) {\n            figNode = new FigComponent(modelElement, bounds, settings);\n        }\n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","realPath":"src/argouml-app/src/org/argouml/uml/diagram/static_structure/ui/UMLClassDiagram.java","repoName":"argouml","snippetEndLine":0,"snippetStartLine":0,"startLine":658,"status":"NB"},{"authorDate":"2009-08-11 05:33:05","commitOrder":2,"curCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClassifierRole(modelElement)) {\n            if (!getGraphModel().getNodes().contains(modelElement)) {\n                figNode = makeNewFigCR(modelElement, bounds.getLocation());  \n            }\n        } else if (Model.getFacade().isAClassifier(modelElement)) {\n            figNode = makeNewFigCR(\n                    makeNewCR(modelElement),\n                    bounds.getLocation());\n        }\n        \n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","date":"2009-08-11 05:33:05","endLine":305,"groupId":"9173","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createDiagramElement","params":"(finalObjectmodelElement@finalRectanglebounds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-argouml-10-0.7/blobInfo/CC_OUT/blobs/ad/2f83f988ced807e584d0bbe4cf361e99f6ef51.src","preCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClassifierRole(modelElement)) {\n            if (!getGraphModel().getNodes().contains(modelElement)) {\n                figNode = makeNewFigCR(modelElement, bounds.getLocation());  \n            }\n        } else if (Model.getFacade().isAClassifier(modelElement)) {\n            figNode = makeNewFigCR(\n                    makeNewCR(modelElement),\n                    bounds.getLocation());\n        }\n        \n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","realPath":"src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/UMLSequenceDiagram.java","repoName":"argouml","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"B"}],"commitId":"07757c138dda265a7aee3d1e4526be332fba2dc3","commitMessage":"@@@Give diagrams the responsibility of creating DiagramElements (Figs) so that reverse engineering does not need to know of FigClass FigInterface or any other concrete Figs\n\ngit-svn-id: http://argouml.tigris.org/svn/argouml/trunk@17256 a161b567-7d1e-0410-9ef9-912c70fedb3f\n","date":"2009-08-11 05:33:05","modifiedFileCount":"1","status":"M","submitter":"Bob Tarling"},{"authorTime":"2009-08-11 05:33:05","codes":[{"authorDate":"2009-10-22 02:52:53","commitOrder":3,"curCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAAssociation(modelElement)) {\n            figNode =\n                createNaryAssociationNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAStereotype(modelElement)) {\n            \r\n            figNode = new FigStereotypeDeclaration(modelElement, bounds, \n                    settings);\n        } else if (Model.getFacade().isAClass(modelElement)) {\n            figNode = new FigClass(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInterface(modelElement)) {\n            figNode = new FigInterface(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAModel(modelElement)) {\n            figNode = new FigModel(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASubsystem(modelElement)) {\n            figNode = new FigSubsystem(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAPackage(modelElement)) {\n            figNode = new FigPackage(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAEnumeration(modelElement)) {\n            figNode = new FigEnumeration(modelElement, bounds, settings);\n        } else if (Model.getFacade().isADataType(modelElement)) {\n            figNode = new FigDataType(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAException(modelElement)) {\n            figNode = new FigException(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASignal(modelElement)) {\n            figNode = new FigSignal(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAActor(modelElement)) {\n            figNode = new FigActor(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAUseCase(modelElement)) {\n            figNode = new FigUseCase(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAObject(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANodeInstance(modelElement)) {\n            figNode = new FigNodeInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponentInstance(modelElement)) {\n            figNode = new FigComponentInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANode(modelElement)) {\n            figNode = new FigMNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponent(modelElement)) {\n            figNode = new FigComponent(modelElement, bounds, settings);\n        }\n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","date":"2009-10-22 02:52:53","endLine":711,"groupId":"14258","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createDiagramElement","params":"(finalObjectmodelElement@finalRectanglebounds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-argouml-10-0.7/blobInfo/CC_OUT/blobs/73/fe2ce0fbcaa01a6162de4dcdd6c157cf81a7aa.src","preCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAAssociation(modelElement)) {\n            figNode =\n                createNaryAssociationNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClass(modelElement)) {\n            figNode = new FigClass(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInterface(modelElement)) {\n            figNode = new FigInterface(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAModel(modelElement)) {\n            figNode = new FigModel(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASubsystem(modelElement)) {\n            figNode = new FigSubsystem(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAPackage(modelElement)) {\n            figNode = new FigPackage(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAEnumeration(modelElement)) {\n            figNode = new FigEnumeration(modelElement, bounds, settings);\n        } else if (Model.getFacade().isADataType(modelElement)) {\n            figNode = new FigDataType(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAStereotype(modelElement)) {\n            figNode = new FigStereotypeDeclaration(modelElement, bounds, \n                    settings);\n        } else if (Model.getFacade().isAException(modelElement)) {\n            figNode = new FigException(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASignal(modelElement)) {\n            figNode = new FigSignal(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAActor(modelElement)) {\n            figNode = new FigActor(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAUseCase(modelElement)) {\n            figNode = new FigUseCase(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAObject(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANodeInstance(modelElement)) {\n            figNode = new FigNodeInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponentInstance(modelElement)) {\n            figNode = new FigComponentInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANode(modelElement)) {\n            figNode = new FigMNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponent(modelElement)) {\n            figNode = new FigComponent(modelElement, bounds, settings);\n        }\n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","realPath":"src/argouml-app/src/org/argouml/uml/diagram/static_structure/ui/UMLClassDiagram.java","repoName":"argouml","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"M"},{"authorDate":"2009-08-11 05:33:05","commitOrder":3,"curCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClassifierRole(modelElement)) {\n            if (!getGraphModel().getNodes().contains(modelElement)) {\n                figNode = makeNewFigCR(modelElement, bounds.getLocation());  \n            }\n        } else if (Model.getFacade().isAClassifier(modelElement)) {\n            figNode = makeNewFigCR(\n                    makeNewCR(modelElement),\n                    bounds.getLocation());\n        }\n        \n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","date":"2009-08-11 05:33:05","endLine":305,"groupId":"9173","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createDiagramElement","params":"(finalObjectmodelElement@finalRectanglebounds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-argouml-10-0.7/blobInfo/CC_OUT/blobs/ad/2f83f988ced807e584d0bbe4cf361e99f6ef51.src","preCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClassifierRole(modelElement)) {\n            if (!getGraphModel().getNodes().contains(modelElement)) {\n                figNode = makeNewFigCR(modelElement, bounds.getLocation());  \n            }\n        } else if (Model.getFacade().isAClassifier(modelElement)) {\n            figNode = makeNewFigCR(\n                    makeNewCR(modelElement),\n                    bounds.getLocation());\n        }\n        \n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","realPath":"src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/UMLSequenceDiagram.java","repoName":"argouml","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"N"}],"commitId":"c09cde130fae654b80f9302c8871b3e4d4ef4fc4","commitMessage":"@@@UML2: fix for selection of the wrong fig for stereotypes\n\ngit-svn-id: http://argouml.tigris.org/svn/argouml/trunk@17417 a161b567-7d1e-0410-9ef9-912c70fedb3f\n","date":"2009-10-22 02:52:53","modifiedFileCount":"1","status":"M","submitter":"Thomas Neustupny"},{"authorTime":"2009-12-10 08:59:15","codes":[{"authorDate":"2009-10-22 02:52:53","commitOrder":4,"curCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAAssociation(modelElement)) {\n            figNode =\n                createNaryAssociationNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAStereotype(modelElement)) {\n            \r\n            figNode = new FigStereotypeDeclaration(modelElement, bounds, \n                    settings);\n        } else if (Model.getFacade().isAClass(modelElement)) {\n            figNode = new FigClass(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInterface(modelElement)) {\n            figNode = new FigInterface(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAModel(modelElement)) {\n            figNode = new FigModel(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASubsystem(modelElement)) {\n            figNode = new FigSubsystem(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAPackage(modelElement)) {\n            figNode = new FigPackage(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAEnumeration(modelElement)) {\n            figNode = new FigEnumeration(modelElement, bounds, settings);\n        } else if (Model.getFacade().isADataType(modelElement)) {\n            figNode = new FigDataType(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAException(modelElement)) {\n            figNode = new FigException(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASignal(modelElement)) {\n            figNode = new FigSignal(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAActor(modelElement)) {\n            figNode = new FigActor(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAUseCase(modelElement)) {\n            figNode = new FigUseCase(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAObject(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANodeInstance(modelElement)) {\n            figNode = new FigNodeInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponentInstance(modelElement)) {\n            figNode = new FigComponentInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANode(modelElement)) {\n            figNode = new FigMNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponent(modelElement)) {\n            figNode = new FigComponent(modelElement, bounds, settings);\n        }\n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","date":"2009-10-22 02:52:53","endLine":711,"groupId":"14258","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createDiagramElement","params":"(finalObjectmodelElement@finalRectanglebounds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-argouml-10-0.7/blobInfo/CC_OUT/blobs/73/fe2ce0fbcaa01a6162de4dcdd6c157cf81a7aa.src","preCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAAssociation(modelElement)) {\n            figNode =\n                createNaryAssociationNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAStereotype(modelElement)) {\n            \r\n            figNode = new FigStereotypeDeclaration(modelElement, bounds, \n                    settings);\n        } else if (Model.getFacade().isAClass(modelElement)) {\n            figNode = new FigClass(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInterface(modelElement)) {\n            figNode = new FigInterface(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAModel(modelElement)) {\n            figNode = new FigModel(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASubsystem(modelElement)) {\n            figNode = new FigSubsystem(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAPackage(modelElement)) {\n            figNode = new FigPackage(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAEnumeration(modelElement)) {\n            figNode = new FigEnumeration(modelElement, bounds, settings);\n        } else if (Model.getFacade().isADataType(modelElement)) {\n            figNode = new FigDataType(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAException(modelElement)) {\n            figNode = new FigException(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASignal(modelElement)) {\n            figNode = new FigSignal(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAActor(modelElement)) {\n            figNode = new FigActor(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAUseCase(modelElement)) {\n            figNode = new FigUseCase(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAObject(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANodeInstance(modelElement)) {\n            figNode = new FigNodeInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponentInstance(modelElement)) {\n            figNode = new FigComponentInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANode(modelElement)) {\n            figNode = new FigMNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponent(modelElement)) {\n            figNode = new FigComponent(modelElement, bounds, settings);\n        }\n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","realPath":"src/argouml-app/src/org/argouml/uml/diagram/static_structure/ui/UMLClassDiagram.java","repoName":"argouml","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"N"},{"authorDate":"2009-12-10 08:59:15","commitOrder":4,"curCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClassifierRole(modelElement)) {\n            if (!getGraphModel().getNodes().contains(modelElement)) {\n                figNode = makeNewFigCR(modelElement, null);  \n            }\n        } else if (Model.getFacade().isAClassifier(modelElement)) {\n            figNode = makeNewFigCR(\n                    makeNewCR(modelElement),\n                    bounds.getLocation());\n        }\n        \n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","date":"2009-12-10 08:59:15","endLine":305,"groupId":"5996","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createDiagramElement","params":"(finalObjectmodelElement@finalRectanglebounds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-argouml-10-0.7/blobInfo/CC_OUT/blobs/a8/c1f9aa93908b096f9989fde6ed0c2459a5e9cc.src","preCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClassifierRole(modelElement)) {\n            if (!getGraphModel().getNodes().contains(modelElement)) {\n                figNode = makeNewFigCR(modelElement, bounds.getLocation());  \n            }\n        } else if (Model.getFacade().isAClassifier(modelElement)) {\n            figNode = makeNewFigCR(\n                    makeNewCR(modelElement),\n                    bounds.getLocation());\n        }\n        \n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","realPath":"src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/UMLSequenceDiagram.java","repoName":"argouml","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"}],"commitId":"7969050c7deb757abb0885c3651f0676cad6f9bd","commitMessage":"@@@The bounds will be null at this point\n\ngit-svn-id: http://argouml.tigris.org/svn/argouml/trunk@17616 a161b567-7d1e-0410-9ef9-912c70fedb3f\n","date":"2009-12-10 08:59:15","modifiedFileCount":"1","status":"M","submitter":"Bob Tarling"},{"authorTime":"2009-12-10 08:59:15","codes":[{"authorDate":"2010-09-11 00:10:34","commitOrder":5,"curCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        FigEdge figEdge = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n\n        if (Model.getFacade().isAAssociationClass(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociationClass(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isAAssociationEnd(modelElement)) {\n            figEdge = new FigAssociationEnd(modelElement, settings);\n            Model.getFacade().getAssociation(modelElement);\n            FigNode associationFN =\n                (FigNode) getLayer().presentationFor(\n                        Model.getFacade().getAssociation(modelElement));\n            FigNode classifierFN =\n                (FigNode) getLayer().presentationFor(Model.getFacade().getType(modelElement));\n\n            figEdge.setSourcePortFig(associationFN);\n            figEdge.setSourceFigNode(associationFN);\n            figEdge.setDestPortFig(classifierFN);\n            figEdge.setDestFigNode(classifierFN);\n        } else if (Model.getFacade().isAAssociation(modelElement)\n                && !Model.getFacade().isANaryAssociation(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociation(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isALink(modelElement)) {\n            figEdge = new FigLink(modelElement, settings);\n            Collection linkEndsColn = Model.getFacade().getConnections(modelElement);\n\n            Object[] linkEnds = linkEndsColn.toArray();\n            Object fromInst = Model.getFacade().getInstance(linkEnds[0]);\n            Object toInst = Model.getFacade().getInstance(linkEnds[1]);\n\n            FigNode fromFN = (FigNode) getLayer().presentationFor(fromInst);\n            FigNode toFN = (FigNode) getLayer().presentationFor(toInst);\n            figEdge.setSourcePortFig(fromFN);\n            figEdge.setSourceFigNode(fromFN);\n            figEdge.setDestPortFig(toFN);\n            figEdge.setDestFigNode(toFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (Model.getFacade().isAGeneralization(modelElement)) {\n            figEdge = new FigGeneralization(modelElement, settings);\n\n            Object supplier =\n                (Model.getFacade().getSpecific(modelElement));\n            Object client =\n                (Model.getFacade().getGeneral(modelElement));\n           \n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n            \n            figEdge.setSourceFigNode(supFN);\n            figEdge.setSourcePortFig(supFN);\n            figEdge.setDestFigNode(cliFN);\n            figEdge.setDestPortFig(cliFN);\n        } else if (Model.getFacade().isADependency(modelElement)) {\n            \n            if (Model.getFacade().isAPackageImport(modelElement)) {\n                figEdge = new FigPermission(modelElement, settings);\n            } else if (Model.getFacade().isAUsage(modelElement)) {\n                figEdge = new FigUsage(modelElement, settings);\n            } else if (Model.getFacade().isAAbstraction(modelElement)) {\n                figEdge = new FigAbstraction(modelElement, settings);\n            } else {\n    \n                String name = \"\";\n                for (Object stereotype : Model.getFacade().getStereotypes(modelElement)) {\n                    name = Model.getFacade().getName(stereotype);\n                    if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                        break;\n                    }\n                }\n                if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    figEdge = new FigAbstraction(modelElement, settings);\n                } else {\n                    figEdge = new FigDependency(modelElement, settings);\n                }\n            }\n            Object supplier =\n                ((Model.getFacade().getSuppliers(modelElement).toArray())[0]);\n            Object client =\n                ((Model.getFacade().getClients(modelElement).toArray())[0]);\n            figEdge = new FigDependency(modelElement, settings);\n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n\n            figEdge.setSourcePortFig(cliFN);\n            figEdge.setSourceFigNode(cliFN);\n            figEdge.setDestPortFig(supFN);\n            figEdge.setDestFigNode(supFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (modelElement instanceof CommentEdge) {\n            figEdge = new FigEdgeNote(modelElement, settings);\n        }\n        \n        if (figEdge != null) {\n            figEdge.computeRoute();\n            return (DiagramElement) figEdge;\n        }\n        \n        if (Model.getFacade().isAAssociation(modelElement)) {\n            figNode =\n                createNaryAssociationNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAStereotype(modelElement)) {\n            \r\n            figNode = new FigStereotypeDeclaration(modelElement, bounds, \n                    settings);\n        } else if (Model.getFacade().isAClass(modelElement)) {\n            figNode = new FigClass(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInterface(modelElement)) {\n            figNode = new FigInterface(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAModel(modelElement)) {\n            figNode = new FigModel(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASubsystem(modelElement)) {\n            figNode = new FigSubsystem(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAPackage(modelElement)) {\n            figNode = new FigPackage(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAEnumeration(modelElement)) {\n            figNode = new FigEnumeration(modelElement, bounds, settings);\n        } else if (Model.getFacade().isADataType(modelElement)) {\n            figNode = new FigDataType(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAException(modelElement)) {\n            figNode = new FigException(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASignal(modelElement)) {\n            figNode = new FigSignal(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAActor(modelElement)) {\n            figNode = new FigActor(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAUseCase(modelElement)) {\n            figNode = new FigUseCase(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAObject(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANodeInstance(modelElement)) {\n            figNode = new FigNodeInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponentInstance(modelElement)) {\n            figNode = new FigComponentInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANode(modelElement)) {\n            figNode = new FigMNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponent(modelElement)) {\n            figNode = new FigComponent(modelElement, bounds, settings);\n        }\n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","date":"2010-09-11 00:10:34","endLine":875,"groupId":"14258","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createDiagramElement","params":"(finalObjectmodelElement@finalRectanglebounds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-argouml-10-0.7/blobInfo/CC_OUT/blobs/18/89227447fbdc0f86b985c768a8709b3b4a58a6.src","preCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAAssociation(modelElement)) {\n            figNode =\n                createNaryAssociationNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAStereotype(modelElement)) {\n            \r\n            figNode = new FigStereotypeDeclaration(modelElement, bounds, \n                    settings);\n        } else if (Model.getFacade().isAClass(modelElement)) {\n            figNode = new FigClass(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInterface(modelElement)) {\n            figNode = new FigInterface(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAModel(modelElement)) {\n            figNode = new FigModel(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASubsystem(modelElement)) {\n            figNode = new FigSubsystem(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAPackage(modelElement)) {\n            figNode = new FigPackage(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAEnumeration(modelElement)) {\n            figNode = new FigEnumeration(modelElement, bounds, settings);\n        } else if (Model.getFacade().isADataType(modelElement)) {\n            figNode = new FigDataType(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAException(modelElement)) {\n            figNode = new FigException(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASignal(modelElement)) {\n            figNode = new FigSignal(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAActor(modelElement)) {\n            figNode = new FigActor(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAUseCase(modelElement)) {\n            figNode = new FigUseCase(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAObject(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANodeInstance(modelElement)) {\n            figNode = new FigNodeInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponentInstance(modelElement)) {\n            figNode = new FigComponentInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANode(modelElement)) {\n            figNode = new FigMNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponent(modelElement)) {\n            figNode = new FigComponent(modelElement, bounds, settings);\n        }\n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","realPath":"src/argouml-app/src/org/argouml/uml/diagram/static_structure/ui/UMLClassDiagram.java","repoName":"argouml","snippetEndLine":0,"snippetStartLine":0,"startLine":690,"status":"M"},{"authorDate":"2009-12-10 08:59:15","commitOrder":5,"curCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClassifierRole(modelElement)) {\n            if (!getGraphModel().getNodes().contains(modelElement)) {\n                figNode = makeNewFigCR(modelElement, null);  \n            }\n        } else if (Model.getFacade().isAClassifier(modelElement)) {\n            figNode = makeNewFigCR(\n                    makeNewCR(modelElement),\n                    bounds.getLocation());\n        }\n        \n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","date":"2009-12-10 08:59:15","endLine":305,"groupId":"5996","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createDiagramElement","params":"(finalObjectmodelElement@finalRectanglebounds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-argouml-10-0.7/blobInfo/CC_OUT/blobs/a8/c1f9aa93908b096f9989fde6ed0c2459a5e9cc.src","preCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClassifierRole(modelElement)) {\n            if (!getGraphModel().getNodes().contains(modelElement)) {\n                figNode = makeNewFigCR(modelElement, null);  \n            }\n        } else if (Model.getFacade().isAClassifier(modelElement)) {\n            figNode = makeNewFigCR(\n                    makeNewCR(modelElement),\n                    bounds.getLocation());\n        }\n        \n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","realPath":"src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/UMLSequenceDiagram.java","repoName":"argouml","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"N"}],"commitId":"e9c586c43ad0072c7c54a68235c180288d40720f","commitMessage":"@@@Allow edges to be drag/dropped onto a class diagram (other diagram types can now be implemented also)\n\ngit-svn-id: http://argouml.tigris.org/svn/argouml/trunk@18729 a161b567-7d1e-0410-9ef9-912c70fedb3f\n","date":"2010-09-11 00:10:34","modifiedFileCount":"17","status":"M","submitter":"Bob Tarling"},{"authorTime":"2009-12-10 08:59:15","codes":[{"authorDate":"2011-02-20 22:46:50","commitOrder":6,"curCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        FigEdge figEdge = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n\n        if (Model.getFacade().isAAssociationClass(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociationClass(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isAAssociationEnd(modelElement)) {\n            figEdge = new FigAssociationEnd(modelElement, settings);\n            Model.getFacade().getAssociation(modelElement);\n            FigNode associationFN =\n                (FigNode) getLayer().presentationFor(\n                        Model.getFacade().getAssociation(modelElement));\n            FigNode classifierFN =\n                (FigNode) getLayer().presentationFor(Model.getFacade().getType(modelElement));\n\n            figEdge.setSourcePortFig(associationFN);\n            figEdge.setSourceFigNode(associationFN);\n            figEdge.setDestPortFig(classifierFN);\n            figEdge.setDestFigNode(classifierFN);\n        } else if (Model.getFacade().isAAssociation(modelElement)\n                && !Model.getFacade().isANaryAssociation(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociation(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isALink(modelElement)) {\n            figEdge = new FigLink(modelElement, settings);\n            Collection linkEndsColn = Model.getFacade().getConnections(modelElement);\n\n            Object[] linkEnds = linkEndsColn.toArray();\n            Object fromInst = Model.getFacade().getInstance(linkEnds[0]);\n            Object toInst = Model.getFacade().getInstance(linkEnds[1]);\n\n            FigNode fromFN = (FigNode) getLayer().presentationFor(fromInst);\n            FigNode toFN = (FigNode) getLayer().presentationFor(toInst);\n            figEdge.setSourcePortFig(fromFN);\n            figEdge.setSourceFigNode(fromFN);\n            figEdge.setDestPortFig(toFN);\n            figEdge.setDestFigNode(toFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (Model.getFacade().isAGeneralization(modelElement)) {\n            figEdge = new FigGeneralization(modelElement, settings);\n\n            Object supplier =\n                (Model.getFacade().getSpecific(modelElement));\n            Object client =\n                (Model.getFacade().getGeneral(modelElement));\n           \n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n            \n            figEdge.setSourceFigNode(supFN);\n            figEdge.setSourcePortFig(supFN);\n            figEdge.setDestFigNode(cliFN);\n            figEdge.setDestPortFig(cliFN);\n        } else if (Model.getFacade().isADependency(modelElement)) {\n            \n            if (Model.getFacade().isAPackageImport(modelElement)) {\n                figEdge = new FigPermission(modelElement, settings);\n            } else if (Model.getFacade().isAUsage(modelElement)) {\n                figEdge = new FigUsage(modelElement, settings);\n            } else if (Model.getFacade().isAAbstraction(modelElement)) {\n                figEdge = new FigAbstraction(modelElement, settings);\n            } else {\n    \n                String name = \"\";\n                for (Object stereotype : Model.getFacade().getStereotypes(modelElement)) {\n                    name = Model.getFacade().getName(stereotype);\n                    if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                        break;\n                    }\n                }\n                if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    figEdge = new FigAbstraction(modelElement, settings);\n                } else {\n                    figEdge = new FigDependency(modelElement, settings);\n                }\n            }\n            Object supplier =\n                ((Model.getFacade().getSuppliers(modelElement).toArray())[0]);\n            Object client =\n                ((Model.getFacade().getClients(modelElement).toArray())[0]);\n            figEdge = new FigDependency(modelElement, settings);\n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n\n            figEdge.setSourcePortFig(cliFN);\n            figEdge.setSourceFigNode(cliFN);\n            figEdge.setDestPortFig(supFN);\n            figEdge.setDestFigNode(supFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (modelElement instanceof CommentEdge) {\n            CommentEdge ce = (CommentEdge) modelElement;\n            Object source = ce.getSource();\n            Object dest = ce.getDestination();\n            FigNode sourceFN = (FigNode) getLayer().presentationFor(source);\n            FigNode destFN = (FigNode) getLayer().presentationFor(dest);\n            figEdge = new FigEdgeNote(modelElement, settings);\n            figEdge.setSourcePortFig(sourceFN);\n            figEdge.setSourceFigNode(sourceFN);\n            figEdge.setDestPortFig(destFN);\n            figEdge.setDestFigNode(destFN);\n            figEdge.getFig().setLayer(getLayer());\n        }\n        \n        if (figEdge != null) {\n            figEdge.computeRoute();\n            return (DiagramElement) figEdge;\n        }\n        \n        if (Model.getFacade().isAAssociation(modelElement)) {\n            figNode =\n                createNaryAssociationNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAStereotype(modelElement)) {\n            \r\n            figNode = new FigStereotypeDeclaration(modelElement, bounds, \n                    settings);\n        } else if (Model.getFacade().isAClass(modelElement)) {\n            figNode = new FigClass(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInterface(modelElement)) {\n            figNode = new FigInterface(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAModel(modelElement)) {\n            figNode = new FigModel(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASubsystem(modelElement)) {\n            figNode = new FigSubsystem(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAPackage(modelElement)) {\n            figNode = new FigPackage(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAEnumeration(modelElement)) {\n            figNode = new FigEnumeration(modelElement, bounds, settings);\n        } else if (Model.getFacade().isADataType(modelElement)) {\n            figNode = new FigDataType(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAException(modelElement)) {\n            figNode = new FigException(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASignal(modelElement)) {\n            figNode = new FigSignal(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAActor(modelElement)) {\n            figNode = new FigActor(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAUseCase(modelElement)) {\n            figNode = new FigUseCase(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAObject(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANodeInstance(modelElement)) {\n            figNode = new FigNodeInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponentInstance(modelElement)) {\n            figNode = new FigComponentInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANode(modelElement)) {\n            figNode = new FigMNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponent(modelElement)) {\n            figNode = new FigComponent(modelElement, bounds, settings);\n        }\n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","date":"2011-02-20 22:46:50","endLine":887,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createDiagramElement","params":"(finalObjectmodelElement@finalRectanglebounds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-argouml-10-0.7/blobInfo/CC_OUT/blobs/7b/254ba5120a7d939787b8f14de50d0f4fc18816.src","preCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        FigEdge figEdge = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n\n        if (Model.getFacade().isAAssociationClass(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociationClass(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isAAssociationEnd(modelElement)) {\n            figEdge = new FigAssociationEnd(modelElement, settings);\n            Model.getFacade().getAssociation(modelElement);\n            FigNode associationFN =\n                (FigNode) getLayer().presentationFor(\n                        Model.getFacade().getAssociation(modelElement));\n            FigNode classifierFN =\n                (FigNode) getLayer().presentationFor(Model.getFacade().getType(modelElement));\n\n            figEdge.setSourcePortFig(associationFN);\n            figEdge.setSourceFigNode(associationFN);\n            figEdge.setDestPortFig(classifierFN);\n            figEdge.setDestFigNode(classifierFN);\n        } else if (Model.getFacade().isAAssociation(modelElement)\n                && !Model.getFacade().isANaryAssociation(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociation(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isALink(modelElement)) {\n            figEdge = new FigLink(modelElement, settings);\n            Collection linkEndsColn = Model.getFacade().getConnections(modelElement);\n\n            Object[] linkEnds = linkEndsColn.toArray();\n            Object fromInst = Model.getFacade().getInstance(linkEnds[0]);\n            Object toInst = Model.getFacade().getInstance(linkEnds[1]);\n\n            FigNode fromFN = (FigNode) getLayer().presentationFor(fromInst);\n            FigNode toFN = (FigNode) getLayer().presentationFor(toInst);\n            figEdge.setSourcePortFig(fromFN);\n            figEdge.setSourceFigNode(fromFN);\n            figEdge.setDestPortFig(toFN);\n            figEdge.setDestFigNode(toFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (Model.getFacade().isAGeneralization(modelElement)) {\n            figEdge = new FigGeneralization(modelElement, settings);\n\n            Object supplier =\n                (Model.getFacade().getSpecific(modelElement));\n            Object client =\n                (Model.getFacade().getGeneral(modelElement));\n           \n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n            \n            figEdge.setSourceFigNode(supFN);\n            figEdge.setSourcePortFig(supFN);\n            figEdge.setDestFigNode(cliFN);\n            figEdge.setDestPortFig(cliFN);\n        } else if (Model.getFacade().isADependency(modelElement)) {\n            \n            if (Model.getFacade().isAPackageImport(modelElement)) {\n                figEdge = new FigPermission(modelElement, settings);\n            } else if (Model.getFacade().isAUsage(modelElement)) {\n                figEdge = new FigUsage(modelElement, settings);\n            } else if (Model.getFacade().isAAbstraction(modelElement)) {\n                figEdge = new FigAbstraction(modelElement, settings);\n            } else {\n    \n                String name = \"\";\n                for (Object stereotype : Model.getFacade().getStereotypes(modelElement)) {\n                    name = Model.getFacade().getName(stereotype);\n                    if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                        break;\n                    }\n                }\n                if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    figEdge = new FigAbstraction(modelElement, settings);\n                } else {\n                    figEdge = new FigDependency(modelElement, settings);\n                }\n            }\n            Object supplier =\n                ((Model.getFacade().getSuppliers(modelElement).toArray())[0]);\n            Object client =\n                ((Model.getFacade().getClients(modelElement).toArray())[0]);\n            figEdge = new FigDependency(modelElement, settings);\n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n\n            figEdge.setSourcePortFig(cliFN);\n            figEdge.setSourceFigNode(cliFN);\n            figEdge.setDestPortFig(supFN);\n            figEdge.setDestFigNode(supFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (modelElement instanceof CommentEdge) {\n            figEdge = new FigEdgeNote(modelElement, settings);\n        }\n        \n        if (figEdge != null) {\n            figEdge.computeRoute();\n            return (DiagramElement) figEdge;\n        }\n        \n        if (Model.getFacade().isAAssociation(modelElement)) {\n            figNode =\n                createNaryAssociationNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAStereotype(modelElement)) {\n            \r\n            figNode = new FigStereotypeDeclaration(modelElement, bounds, \n                    settings);\n        } else if (Model.getFacade().isAClass(modelElement)) {\n            figNode = new FigClass(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInterface(modelElement)) {\n            figNode = new FigInterface(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAModel(modelElement)) {\n            figNode = new FigModel(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASubsystem(modelElement)) {\n            figNode = new FigSubsystem(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAPackage(modelElement)) {\n            figNode = new FigPackage(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAEnumeration(modelElement)) {\n            figNode = new FigEnumeration(modelElement, bounds, settings);\n        } else if (Model.getFacade().isADataType(modelElement)) {\n            figNode = new FigDataType(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAException(modelElement)) {\n            figNode = new FigException(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASignal(modelElement)) {\n            figNode = new FigSignal(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAActor(modelElement)) {\n            figNode = new FigActor(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAUseCase(modelElement)) {\n            figNode = new FigUseCase(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAObject(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANodeInstance(modelElement)) {\n            figNode = new FigNodeInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponentInstance(modelElement)) {\n            figNode = new FigComponentInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANode(modelElement)) {\n            figNode = new FigMNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponent(modelElement)) {\n            figNode = new FigComponent(modelElement, bounds, settings);\n        }\n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","realPath":"src/argouml-app/src/org/argouml/uml/diagram/static_structure/ui/UMLClassDiagram.java","repoName":"argouml","snippetEndLine":0,"snippetStartLine":0,"startLine":692,"status":"M"},{"authorDate":"2009-12-10 08:59:15","commitOrder":6,"curCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClassifierRole(modelElement)) {\n            if (!getGraphModel().getNodes().contains(modelElement)) {\n                figNode = makeNewFigCR(modelElement, null);  \n            }\n        } else if (Model.getFacade().isAClassifier(modelElement)) {\n            figNode = makeNewFigCR(\n                    makeNewCR(modelElement),\n                    bounds.getLocation());\n        }\n        \n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","date":"2009-12-10 08:59:15","endLine":305,"groupId":"5996","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createDiagramElement","params":"(finalObjectmodelElement@finalRectanglebounds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-argouml-10-0.7/blobInfo/CC_OUT/blobs/a8/c1f9aa93908b096f9989fde6ed0c2459a5e9cc.src","preCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClassifierRole(modelElement)) {\n            if (!getGraphModel().getNodes().contains(modelElement)) {\n                figNode = makeNewFigCR(modelElement, null);  \n            }\n        } else if (Model.getFacade().isAClassifier(modelElement)) {\n            figNode = makeNewFigCR(\n                    makeNewCR(modelElement),\n                    bounds.getLocation());\n        }\n        \n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","realPath":"src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/UMLSequenceDiagram.java","repoName":"argouml","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"N"}],"commitId":"cc4cacc6bcb2d62b4c779d6634d4c83b65130699","commitMessage":"@@@Issue 6183: Allow a CommentEdge to be added to a class diagram\n\ngit-svn-id: http://argouml.tigris.org/svn/argouml/trunk@19043 a161b567-7d1e-0410-9ef9-912c70fedb3f\n","date":"2011-02-20 22:46:50","modifiedFileCount":"1","status":"M","submitter":"Bob Tarling"},{"authorTime":"2009-12-10 08:59:15","codes":[{"authorDate":"2011-03-27 00:24:08","commitOrder":7,"curCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        FigEdge figEdge = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n\n        if (Model.getFacade().isAAssociationClass(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociationClass(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isAAssociationEnd(modelElement)) {\n            figEdge = new FigAssociationEnd(modelElement, settings);\n            Model.getFacade().getAssociation(modelElement);\n            FigNode associationFN =\n                (FigNode) getLayer().presentationFor(\n                        Model.getFacade().getAssociation(modelElement));\n            FigNode classifierFN =\n                (FigNode) getLayer().presentationFor(Model.getFacade().getType(modelElement));\n\n            figEdge.setSourcePortFig(associationFN);\n            figEdge.setSourceFigNode(associationFN);\n            figEdge.setDestPortFig(classifierFN);\n            figEdge.setDestFigNode(classifierFN);\n        } else if (Model.getFacade().isAAssociation(modelElement)\n                && !Model.getFacade().isANaryAssociation(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociation(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isALink(modelElement)) {\n            figEdge = new FigLink(modelElement, settings);\n            Collection linkEndsColn = Model.getFacade().getConnections(modelElement);\n\n            Object[] linkEnds = linkEndsColn.toArray();\n            Object fromInst = Model.getFacade().getInstance(linkEnds[0]);\n            Object toInst = Model.getFacade().getInstance(linkEnds[1]);\n\n            FigNode fromFN = (FigNode) getLayer().presentationFor(fromInst);\n            FigNode toFN = (FigNode) getLayer().presentationFor(toInst);\n            figEdge.setSourcePortFig(fromFN);\n            figEdge.setSourceFigNode(fromFN);\n            figEdge.setDestPortFig(toFN);\n            figEdge.setDestFigNode(toFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (Model.getFacade().isAGeneralization(modelElement)) {\n            figEdge = new FigGeneralization(modelElement, settings);\n\n            Object supplier =\n                (Model.getFacade().getSpecific(modelElement));\n            Object client =\n                (Model.getFacade().getGeneral(modelElement));\n           \n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n            \n            figEdge.setSourceFigNode(supFN);\n            figEdge.setSourcePortFig(supFN);\n            figEdge.setDestFigNode(cliFN);\n            figEdge.setDestPortFig(cliFN);\n        } else if (Model.getFacade().isADependency(modelElement)) {\n            \n            if (Model.getFacade().isAPackageImport(modelElement)) {\n                figEdge = new FigPermission(modelElement, settings);\n            } else if (Model.getFacade().isAUsage(modelElement)) {\n                figEdge = new FigUsage(modelElement, settings);\n            } else if (Model.getFacade().isAAbstraction(modelElement)) {\n                figEdge = new FigAbstraction(modelElement, settings);\n            } else {\n    \n                String name = \"\";\n                for (Object stereotype : Model.getFacade().getStereotypes(modelElement)) {\n                    name = Model.getFacade().getName(stereotype);\n                    if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                        break;\n                    }\n                }\n                if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    figEdge = new FigAbstraction(modelElement, settings);\n                } else {\n                    figEdge = new FigDependency(modelElement, settings);\n                }\n            }\n            Object supplier =\n                ((Model.getFacade().getSuppliers(modelElement).toArray())[0]);\n            Object client =\n                ((Model.getFacade().getClients(modelElement).toArray())[0]);\n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n\n            figEdge.setSourcePortFig(cliFN);\n            figEdge.setSourceFigNode(cliFN);\n            figEdge.setDestPortFig(supFN);\n            figEdge.setDestFigNode(supFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (modelElement instanceof CommentEdge) {\n            CommentEdge ce = (CommentEdge) modelElement;\n            Object source = ce.getSource();\n            Object dest = ce.getDestination();\n            FigNode sourceFN = (FigNode) getLayer().presentationFor(source);\n            FigNode destFN = (FigNode) getLayer().presentationFor(dest);\n            figEdge = new FigEdgeNote(modelElement, settings);\n            figEdge.setSourcePortFig(sourceFN);\n            figEdge.setSourceFigNode(sourceFN);\n            figEdge.setDestPortFig(destFN);\n            figEdge.setDestFigNode(destFN);\n            figEdge.getFig().setLayer(getLayer());\n        }\n        \n        if (figEdge != null) {\n            figEdge.computeRoute();\n            return (DiagramElement) figEdge;\n        }\n        \n        if (Model.getFacade().isAAssociation(modelElement)) {\n            figNode =\n                createNaryAssociationNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAStereotype(modelElement)) {\n            \r\n            figNode = new FigStereotypeDeclaration(modelElement, bounds, \n                    settings);\n        } else if (Model.getFacade().isAClass(modelElement)) {\n            figNode = new FigClass(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInterface(modelElement)) {\n            figNode = new FigInterface(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAModel(modelElement)) {\n            figNode = new FigModel(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASubsystem(modelElement)) {\n            figNode = new FigSubsystem(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAPackage(modelElement)) {\n            figNode = new FigPackage(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAEnumeration(modelElement)) {\n            figNode = new FigEnumeration(modelElement, bounds, settings);\n        } else if (Model.getFacade().isADataType(modelElement)) {\n            figNode = new FigDataType(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAException(modelElement)) {\n            figNode = new FigException(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASignal(modelElement)) {\n            figNode = new FigSignal(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAActor(modelElement)) {\n            figNode = new FigActor(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAUseCase(modelElement)) {\n            figNode = new FigUseCase(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAObject(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANodeInstance(modelElement)) {\n            figNode = new FigNodeInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponentInstance(modelElement)) {\n            figNode = new FigComponentInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANode(modelElement)) {\n            figNode = new FigMNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponent(modelElement)) {\n            figNode = new FigComponent(modelElement, bounds, settings);\n        }\n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","date":"2011-03-27 00:24:08","endLine":886,"groupId":"14258","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createDiagramElement","params":"(finalObjectmodelElement@finalRectanglebounds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-argouml-10-0.7/blobInfo/CC_OUT/blobs/5d/2d37d624a1ee78892704a6dcd567ddb61043d1.src","preCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        FigEdge figEdge = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n\n        if (Model.getFacade().isAAssociationClass(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociationClass(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isAAssociationEnd(modelElement)) {\n            figEdge = new FigAssociationEnd(modelElement, settings);\n            Model.getFacade().getAssociation(modelElement);\n            FigNode associationFN =\n                (FigNode) getLayer().presentationFor(\n                        Model.getFacade().getAssociation(modelElement));\n            FigNode classifierFN =\n                (FigNode) getLayer().presentationFor(Model.getFacade().getType(modelElement));\n\n            figEdge.setSourcePortFig(associationFN);\n            figEdge.setSourceFigNode(associationFN);\n            figEdge.setDestPortFig(classifierFN);\n            figEdge.setDestFigNode(classifierFN);\n        } else if (Model.getFacade().isAAssociation(modelElement)\n                && !Model.getFacade().isANaryAssociation(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociation(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isALink(modelElement)) {\n            figEdge = new FigLink(modelElement, settings);\n            Collection linkEndsColn = Model.getFacade().getConnections(modelElement);\n\n            Object[] linkEnds = linkEndsColn.toArray();\n            Object fromInst = Model.getFacade().getInstance(linkEnds[0]);\n            Object toInst = Model.getFacade().getInstance(linkEnds[1]);\n\n            FigNode fromFN = (FigNode) getLayer().presentationFor(fromInst);\n            FigNode toFN = (FigNode) getLayer().presentationFor(toInst);\n            figEdge.setSourcePortFig(fromFN);\n            figEdge.setSourceFigNode(fromFN);\n            figEdge.setDestPortFig(toFN);\n            figEdge.setDestFigNode(toFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (Model.getFacade().isAGeneralization(modelElement)) {\n            figEdge = new FigGeneralization(modelElement, settings);\n\n            Object supplier =\n                (Model.getFacade().getSpecific(modelElement));\n            Object client =\n                (Model.getFacade().getGeneral(modelElement));\n           \n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n            \n            figEdge.setSourceFigNode(supFN);\n            figEdge.setSourcePortFig(supFN);\n            figEdge.setDestFigNode(cliFN);\n            figEdge.setDestPortFig(cliFN);\n        } else if (Model.getFacade().isADependency(modelElement)) {\n            \n            if (Model.getFacade().isAPackageImport(modelElement)) {\n                figEdge = new FigPermission(modelElement, settings);\n            } else if (Model.getFacade().isAUsage(modelElement)) {\n                figEdge = new FigUsage(modelElement, settings);\n            } else if (Model.getFacade().isAAbstraction(modelElement)) {\n                figEdge = new FigAbstraction(modelElement, settings);\n            } else {\n    \n                String name = \"\";\n                for (Object stereotype : Model.getFacade().getStereotypes(modelElement)) {\n                    name = Model.getFacade().getName(stereotype);\n                    if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                        break;\n                    }\n                }\n                if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    figEdge = new FigAbstraction(modelElement, settings);\n                } else {\n                    figEdge = new FigDependency(modelElement, settings);\n                }\n            }\n            Object supplier =\n                ((Model.getFacade().getSuppliers(modelElement).toArray())[0]);\n            Object client =\n                ((Model.getFacade().getClients(modelElement).toArray())[0]);\n            figEdge = new FigDependency(modelElement, settings);\n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n\n            figEdge.setSourcePortFig(cliFN);\n            figEdge.setSourceFigNode(cliFN);\n            figEdge.setDestPortFig(supFN);\n            figEdge.setDestFigNode(supFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (modelElement instanceof CommentEdge) {\n            CommentEdge ce = (CommentEdge) modelElement;\n            Object source = ce.getSource();\n            Object dest = ce.getDestination();\n            FigNode sourceFN = (FigNode) getLayer().presentationFor(source);\n            FigNode destFN = (FigNode) getLayer().presentationFor(dest);\n            figEdge = new FigEdgeNote(modelElement, settings);\n            figEdge.setSourcePortFig(sourceFN);\n            figEdge.setSourceFigNode(sourceFN);\n            figEdge.setDestPortFig(destFN);\n            figEdge.setDestFigNode(destFN);\n            figEdge.getFig().setLayer(getLayer());\n        }\n        \n        if (figEdge != null) {\n            figEdge.computeRoute();\n            return (DiagramElement) figEdge;\n        }\n        \n        if (Model.getFacade().isAAssociation(modelElement)) {\n            figNode =\n                createNaryAssociationNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAStereotype(modelElement)) {\n            \r\n            figNode = new FigStereotypeDeclaration(modelElement, bounds, \n                    settings);\n        } else if (Model.getFacade().isAClass(modelElement)) {\n            figNode = new FigClass(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInterface(modelElement)) {\n            figNode = new FigInterface(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAModel(modelElement)) {\n            figNode = new FigModel(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASubsystem(modelElement)) {\n            figNode = new FigSubsystem(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAPackage(modelElement)) {\n            figNode = new FigPackage(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAEnumeration(modelElement)) {\n            figNode = new FigEnumeration(modelElement, bounds, settings);\n        } else if (Model.getFacade().isADataType(modelElement)) {\n            figNode = new FigDataType(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAException(modelElement)) {\n            figNode = new FigException(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASignal(modelElement)) {\n            figNode = new FigSignal(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAActor(modelElement)) {\n            figNode = new FigActor(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAUseCase(modelElement)) {\n            figNode = new FigUseCase(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAObject(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANodeInstance(modelElement)) {\n            figNode = new FigNodeInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponentInstance(modelElement)) {\n            figNode = new FigComponentInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANode(modelElement)) {\n            figNode = new FigMNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponent(modelElement)) {\n            figNode = new FigComponent(modelElement, bounds, settings);\n        }\n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","realPath":"src/argouml-app/src/org/argouml/uml/diagram/static_structure/ui/UMLClassDiagram.java","repoName":"argouml","snippetEndLine":0,"snippetStartLine":0,"startLine":692,"status":"M"},{"authorDate":"2009-12-10 08:59:15","commitOrder":7,"curCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClassifierRole(modelElement)) {\n            if (!getGraphModel().getNodes().contains(modelElement)) {\n                figNode = makeNewFigCR(modelElement, null);  \n            }\n        } else if (Model.getFacade().isAClassifier(modelElement)) {\n            figNode = makeNewFigCR(\n                    makeNewCR(modelElement),\n                    bounds.getLocation());\n        }\n        \n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","date":"2009-12-10 08:59:15","endLine":305,"groupId":"5996","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createDiagramElement","params":"(finalObjectmodelElement@finalRectanglebounds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-argouml-10-0.7/blobInfo/CC_OUT/blobs/a8/c1f9aa93908b096f9989fde6ed0c2459a5e9cc.src","preCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClassifierRole(modelElement)) {\n            if (!getGraphModel().getNodes().contains(modelElement)) {\n                figNode = makeNewFigCR(modelElement, null);  \n            }\n        } else if (Model.getFacade().isAClassifier(modelElement)) {\n            figNode = makeNewFigCR(\n                    makeNewCR(modelElement),\n                    bounds.getLocation());\n        }\n        \n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","realPath":"src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/UMLSequenceDiagram.java","repoName":"argouml","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"N"}],"commitId":"3bc7f3c048d52eccf64fec9ed42dd4951f4ce6e9","commitMessage":"@@@Remove spurious creation of FigDependaency (looks like cut and paste error)\n\ngit-svn-id: http://argouml.tigris.org/svn/argouml/trunk@19144 a161b567-7d1e-0410-9ef9-912c70fedb3f\n","date":"2011-03-27 00:24:08","modifiedFileCount":"1","status":"M","submitter":"Bob Tarling"},{"authorTime":"2009-12-10 08:59:15","codes":[{"authorDate":"2011-05-17 17:29:56","commitOrder":8,"curCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        FigEdge figEdge = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n\n        if (Model.getFacade().isAAssociationClass(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociationClass(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isAAssociationEnd(modelElement)) {\n            figEdge = new FigAssociationEnd(modelElement, settings);\n            Model.getFacade().getAssociation(modelElement);\n            FigNode associationFN =\n                (FigNode) getLayer().presentationFor(\n                        Model.getFacade().getAssociation(modelElement));\n            FigNode classifierFN =\n                (FigNode) getLayer().presentationFor(Model.getFacade().getType(modelElement));\n\n            figEdge.setSourcePortFig(associationFN);\n            figEdge.setSourceFigNode(associationFN);\n            figEdge.setDestPortFig(classifierFN);\n            figEdge.setDestFigNode(classifierFN);\n        } else if (Model.getFacade().isAAssociation(modelElement)\n                && !Model.getFacade().isANaryAssociation(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociation(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isALink(modelElement)) {\n            figEdge = new FigLink(modelElement, settings);\n            Collection linkEndsColn = Model.getFacade().getConnections(modelElement);\n\n            Object[] linkEnds = linkEndsColn.toArray();\n            Object fromInst = Model.getFacade().getInstance(linkEnds[0]);\n            Object toInst = Model.getFacade().getInstance(linkEnds[1]);\n\n            FigNode fromFN = (FigNode) getLayer().presentationFor(fromInst);\n            FigNode toFN = (FigNode) getLayer().presentationFor(toInst);\n            figEdge.setSourcePortFig(fromFN);\n            figEdge.setSourceFigNode(fromFN);\n            figEdge.setDestPortFig(toFN);\n            figEdge.setDestFigNode(toFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (Model.getFacade().isAGeneralization(modelElement)) {\n            figEdge = new FigGeneralization(modelElement, settings);\n\n            Object supplier =\n                (Model.getFacade().getSpecific(modelElement));\n            Object client =\n                (Model.getFacade().getGeneral(modelElement));\n           \n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n            \n            figEdge.setSourceFigNode(supFN);\n            figEdge.setSourcePortFig(supFN);\n            figEdge.setDestFigNode(cliFN);\n            figEdge.setDestPortFig(cliFN);\n        } else if (Model.getFacade().isADependency(modelElement)) {\n            \n            if (Model.getFacade().isAPackageImport(modelElement)) {\n                figEdge = new FigPermission(modelElement, settings);\n            } else if (Model.getFacade().isAUsage(modelElement)) {\n                figEdge = new FigUsage(modelElement, settings);\n            } else if (Model.getFacade().isAAbstraction(modelElement)) {\n                figEdge = new FigAbstraction(modelElement, settings);\n            } else {\n    \n                String name = \"\";\n                for (Object stereotype : Model.getFacade().getStereotypes(modelElement)) {\n                    name = Model.getFacade().getName(stereotype);\n                    if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                        break;\n                    }\n                }\n                if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    figEdge = new FigAbstraction(modelElement, settings);\n                } else {\n                    figEdge = new FigDependency(modelElement, settings);\n                }\n            }\n            Object supplier =\n                ((Model.getFacade().getSuppliers(modelElement).toArray())[0]);\n            Object client =\n                ((Model.getFacade().getClients(modelElement).toArray())[0]);\n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n\n            figEdge.setSourcePortFig(cliFN);\n            figEdge.setSourceFigNode(cliFN);\n            figEdge.setDestPortFig(supFN);\n            figEdge.setDestFigNode(supFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (modelElement instanceof CommentEdge) {\n            CommentEdge ce = (CommentEdge) modelElement;\n            Object source = ce.getSource();\n            Object dest = ce.getDestination();\n            FigNode sourceFN = (FigNode) getLayer().presentationFor(source);\n            FigNode destFN = (FigNode) getLayer().presentationFor(dest);\n            figEdge = new FigEdgeNote(modelElement, settings);\n            figEdge.setSourcePortFig(sourceFN);\n            figEdge.setSourceFigNode(sourceFN);\n            figEdge.setDestPortFig(destFN);\n            figEdge.setDestFigNode(destFN);\n            figEdge.getFig().setLayer(getLayer());\n        }\n        \n        if (figEdge != null) {\n            figEdge.computeRoute();\n            return (DiagramElement) figEdge;\n        }\n        \n        if (Model.getFacade().isAAssociation(modelElement)) {\n            figNode =\n                createNaryAssociationNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAStereotype(modelElement)) {\n            \r\n            figNode = new FigStereotypeDeclaration(modelElement, bounds, \n                    settings);\n        } else if (Model.getFacade().isAClass(modelElement)) {\n            figNode = new FigClass(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInterface(modelElement)) {\n            figNode = new FigInterface(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAModel(modelElement)) {\n            figNode = new FigModel(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASubsystem(modelElement)) {\n            figNode = new FigSubsystem(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAPackage(modelElement)) {\n            figNode = new FigPackage(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAEnumeration(modelElement)) {\n            figNode = new FigEnumeration(modelElement, bounds, settings);\n        } else if (Model.getFacade().isADataType(modelElement)) {\n            figNode = new FigDataType(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAException(modelElement)) {\n            figNode = new FigException(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASignal(modelElement)) {\n            figNode = new FigSignal(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAActor(modelElement)) {\n            figNode = new FigActor(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAUseCase(modelElement)) {\n            figNode = new FigUseCase(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAObject(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInstanceSpecification(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANodeInstance(modelElement)) {\n            figNode = new FigNodeInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponentInstance(modelElement)) {\n            figNode = new FigComponentInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANode(modelElement)) {\n            figNode = new FigMNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponent(modelElement)) {\n            figNode = new FigComponent(modelElement, bounds, settings);\n        }\n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","date":"2011-05-17 17:29:56","endLine":905,"groupId":"14258","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createDiagramElement","params":"(finalObjectmodelElement@finalRectanglebounds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-argouml-10-0.7/blobInfo/CC_OUT/blobs/89/cf57853150564e4812faf7c656fcf707ce08d3.src","preCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        FigEdge figEdge = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n\n        if (Model.getFacade().isAAssociationClass(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociationClass(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isAAssociationEnd(modelElement)) {\n            figEdge = new FigAssociationEnd(modelElement, settings);\n            Model.getFacade().getAssociation(modelElement);\n            FigNode associationFN =\n                (FigNode) getLayer().presentationFor(\n                        Model.getFacade().getAssociation(modelElement));\n            FigNode classifierFN =\n                (FigNode) getLayer().presentationFor(Model.getFacade().getType(modelElement));\n\n            figEdge.setSourcePortFig(associationFN);\n            figEdge.setSourceFigNode(associationFN);\n            figEdge.setDestPortFig(classifierFN);\n            figEdge.setDestFigNode(classifierFN);\n        } else if (Model.getFacade().isAAssociation(modelElement)\n                && !Model.getFacade().isANaryAssociation(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociation(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isALink(modelElement)) {\n            figEdge = new FigLink(modelElement, settings);\n            Collection linkEndsColn = Model.getFacade().getConnections(modelElement);\n\n            Object[] linkEnds = linkEndsColn.toArray();\n            Object fromInst = Model.getFacade().getInstance(linkEnds[0]);\n            Object toInst = Model.getFacade().getInstance(linkEnds[1]);\n\n            FigNode fromFN = (FigNode) getLayer().presentationFor(fromInst);\n            FigNode toFN = (FigNode) getLayer().presentationFor(toInst);\n            figEdge.setSourcePortFig(fromFN);\n            figEdge.setSourceFigNode(fromFN);\n            figEdge.setDestPortFig(toFN);\n            figEdge.setDestFigNode(toFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (Model.getFacade().isAGeneralization(modelElement)) {\n            figEdge = new FigGeneralization(modelElement, settings);\n\n            Object supplier =\n                (Model.getFacade().getSpecific(modelElement));\n            Object client =\n                (Model.getFacade().getGeneral(modelElement));\n           \n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n            \n            figEdge.setSourceFigNode(supFN);\n            figEdge.setSourcePortFig(supFN);\n            figEdge.setDestFigNode(cliFN);\n            figEdge.setDestPortFig(cliFN);\n        } else if (Model.getFacade().isADependency(modelElement)) {\n            \n            if (Model.getFacade().isAPackageImport(modelElement)) {\n                figEdge = new FigPermission(modelElement, settings);\n            } else if (Model.getFacade().isAUsage(modelElement)) {\n                figEdge = new FigUsage(modelElement, settings);\n            } else if (Model.getFacade().isAAbstraction(modelElement)) {\n                figEdge = new FigAbstraction(modelElement, settings);\n            } else {\n    \n                String name = \"\";\n                for (Object stereotype : Model.getFacade().getStereotypes(modelElement)) {\n                    name = Model.getFacade().getName(stereotype);\n                    if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                        break;\n                    }\n                }\n                if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    figEdge = new FigAbstraction(modelElement, settings);\n                } else {\n                    figEdge = new FigDependency(modelElement, settings);\n                }\n            }\n            Object supplier =\n                ((Model.getFacade().getSuppliers(modelElement).toArray())[0]);\n            Object client =\n                ((Model.getFacade().getClients(modelElement).toArray())[0]);\n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n\n            figEdge.setSourcePortFig(cliFN);\n            figEdge.setSourceFigNode(cliFN);\n            figEdge.setDestPortFig(supFN);\n            figEdge.setDestFigNode(supFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (modelElement instanceof CommentEdge) {\n            CommentEdge ce = (CommentEdge) modelElement;\n            Object source = ce.getSource();\n            Object dest = ce.getDestination();\n            FigNode sourceFN = (FigNode) getLayer().presentationFor(source);\n            FigNode destFN = (FigNode) getLayer().presentationFor(dest);\n            figEdge = new FigEdgeNote(modelElement, settings);\n            figEdge.setSourcePortFig(sourceFN);\n            figEdge.setSourceFigNode(sourceFN);\n            figEdge.setDestPortFig(destFN);\n            figEdge.setDestFigNode(destFN);\n            figEdge.getFig().setLayer(getLayer());\n        }\n        \n        if (figEdge != null) {\n            figEdge.computeRoute();\n            return (DiagramElement) figEdge;\n        }\n        \n        if (Model.getFacade().isAAssociation(modelElement)) {\n            figNode =\n                createNaryAssociationNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAStereotype(modelElement)) {\n            \r\n            figNode = new FigStereotypeDeclaration(modelElement, bounds, \n                    settings);\n        } else if (Model.getFacade().isAClass(modelElement)) {\n            figNode = new FigClass(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInterface(modelElement)) {\n            figNode = new FigInterface(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAModel(modelElement)) {\n            figNode = new FigModel(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASubsystem(modelElement)) {\n            figNode = new FigSubsystem(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAPackage(modelElement)) {\n            figNode = new FigPackage(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAEnumeration(modelElement)) {\n            figNode = new FigEnumeration(modelElement, bounds, settings);\n        } else if (Model.getFacade().isADataType(modelElement)) {\n            figNode = new FigDataType(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAException(modelElement)) {\n            figNode = new FigException(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASignal(modelElement)) {\n            figNode = new FigSignal(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAActor(modelElement)) {\n            figNode = new FigActor(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAUseCase(modelElement)) {\n            figNode = new FigUseCase(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAObject(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANodeInstance(modelElement)) {\n            figNode = new FigNodeInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponentInstance(modelElement)) {\n            figNode = new FigComponentInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANode(modelElement)) {\n            figNode = new FigMNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponent(modelElement)) {\n            figNode = new FigComponent(modelElement, bounds, settings);\n        }\n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","realPath":"src/argouml-app/src/org/argouml/uml/diagram/static_structure/ui/UMLClassDiagram.java","repoName":"argouml","snippetEndLine":0,"snippetStartLine":0,"startLine":709,"status":"M"},{"authorDate":"2009-12-10 08:59:15","commitOrder":8,"curCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClassifierRole(modelElement)) {\n            if (!getGraphModel().getNodes().contains(modelElement)) {\n                figNode = makeNewFigCR(modelElement, null);  \n            }\n        } else if (Model.getFacade().isAClassifier(modelElement)) {\n            figNode = makeNewFigCR(\n                    makeNewCR(modelElement),\n                    bounds.getLocation());\n        }\n        \n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","date":"2009-12-10 08:59:15","endLine":305,"groupId":"5996","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createDiagramElement","params":"(finalObjectmodelElement@finalRectanglebounds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-argouml-10-0.7/blobInfo/CC_OUT/blobs/a8/c1f9aa93908b096f9989fde6ed0c2459a5e9cc.src","preCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClassifierRole(modelElement)) {\n            if (!getGraphModel().getNodes().contains(modelElement)) {\n                figNode = makeNewFigCR(modelElement, null);  \n            }\n        } else if (Model.getFacade().isAClassifier(modelElement)) {\n            figNode = makeNewFigCR(\n                    makeNewCR(modelElement),\n                    bounds.getLocation());\n        }\n        \n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","realPath":"src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/UMLSequenceDiagram.java","repoName":"argouml","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"N"}],"commitId":"9e35c00bd5d2fbba27b2df35743835290329b609","commitMessage":"@@@Allow FigObject to display a InstanceSpecification\n\ngit-svn-id: http://argouml.tigris.org/svn/argouml/trunk@19449 a161b567-7d1e-0410-9ef9-912c70fedb3f\n","date":"2011-05-17 17:29:56","modifiedFileCount":"3","status":"M","submitter":"Bob Tarling"},{"authorTime":"2009-12-10 08:59:15","codes":[{"authorDate":"2012-01-10 01:40:02","commitOrder":9,"curCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        FigEdge figEdge = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n\n        if (Model.getFacade().isAAssociationClass(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociationClass(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isAAssociationEnd(modelElement)) {\n            figEdge = new FigAssociationEnd(modelElement, settings);\n            Model.getFacade().getAssociation(modelElement);\n            FigNode associationFN =\n                (FigNode) getLayer().presentationFor(\n                        Model.getFacade().getAssociation(modelElement));\n            FigNode classifierFN =\n                (FigNode) getLayer().presentationFor(Model.getFacade().getType(modelElement));\n\n            figEdge.setSourcePortFig(associationFN);\n            figEdge.setSourceFigNode(associationFN);\n            figEdge.setDestPortFig(classifierFN);\n            figEdge.setDestFigNode(classifierFN);\n        } else if (Model.getFacade().isAAssociation(modelElement)\n                && !Model.getFacade().isANaryAssociation(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociation(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isALink(modelElement)) {\n            figEdge = new FigLink(modelElement, settings);\n            Collection linkEndsColn = Model.getFacade().getConnections(modelElement);\n\n            Object[] linkEnds = linkEndsColn.toArray();\n            Object fromInst = Model.getFacade().getInstance(linkEnds[0]);\n            Object toInst = Model.getFacade().getInstance(linkEnds[1]);\n\n            FigNode fromFN = (FigNode) getLayer().presentationFor(fromInst);\n            FigNode toFN = (FigNode) getLayer().presentationFor(toInst);\n            figEdge.setSourcePortFig(fromFN);\n            figEdge.setSourceFigNode(fromFN);\n            figEdge.setDestPortFig(toFN);\n            figEdge.setDestFigNode(toFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (Model.getFacade().isAGeneralization(modelElement)) {\n            figEdge = new FigGeneralization(modelElement, settings);\n\n            Object supplier =\n                (Model.getFacade().getSpecific(modelElement));\n            Object client =\n                (Model.getFacade().getGeneral(modelElement));\n           \n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n            \n            figEdge.setSourceFigNode(supFN);\n            figEdge.setSourcePortFig(supFN);\n            figEdge.setDestFigNode(cliFN);\n            figEdge.setDestPortFig(cliFN);\n        } else if (Model.getFacade().isADependency(modelElement)) {\n            \n            if (Model.getFacade().isAPackageImport(modelElement)) {\n                figEdge = new FigPermission(modelElement, settings);\n            } else if (Model.getFacade().isAUsage(modelElement)) {\n                figEdge = new FigUsage(modelElement, settings);\n            } else if (Model.getFacade().isAAbstraction(modelElement)) {\n                figEdge = new FigAbstraction(modelElement, settings);\n            } else {\n    \n                String name = \"\";\n                for (Object stereotype : Model.getFacade().getStereotypes(modelElement)) {\n                    name = Model.getFacade().getName(stereotype);\n                    if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                        break;\n                    }\n                }\n                if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    figEdge = new FigAbstraction(modelElement, settings);\n                } else {\n                    figEdge = new FigDependency(modelElement, settings);\n                }\n            }\n            Object supplier =\n                ((Model.getFacade().getSuppliers(modelElement).toArray())[0]);\n            Object client =\n                ((Model.getFacade().getClients(modelElement).toArray())[0]);\n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n\n            figEdge.setSourcePortFig(cliFN);\n            figEdge.setSourceFigNode(cliFN);\n            figEdge.setDestPortFig(supFN);\n            figEdge.setDestFigNode(supFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (modelElement instanceof CommentEdge) {\n            CommentEdge ce = (CommentEdge) modelElement;\n            Fig source = getLayer().presentationFor(ce.getSource());\n            Fig dest = getLayer().presentationFor(ce.getDestination());\n            if (source instanceof FigAssociationClass) {\n                source = ((FigAssociationClass) source).getAssociationClass();\n            }\n            if (dest instanceof FigAssociationClass) {\n                dest = ((FigAssociationClass) dest).getAssociationClass();\n            }\n            FigNode sourceFN = (FigNode) source;\n            FigNode destFN = (FigNode) dest;\n            figEdge = new FigEdgeNote(modelElement, settings);\n            figEdge.setSourcePortFig(sourceFN);\n            figEdge.setSourceFigNode(sourceFN);\n            figEdge.setDestPortFig(destFN);\n            figEdge.setDestFigNode(destFN);\n            figEdge.getFig().setLayer(getLayer());\n        }\n        \n        if (figEdge != null) {\n            figEdge.computeRoute();\n            return (DiagramElement) figEdge;\n        }\n        \n        if (Model.getFacade().isAAssociation(modelElement)) {\n            figNode =\n                createNaryAssociationNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAStereotype(modelElement)) {\n            \r\n            figNode = new FigStereotypeDeclaration(modelElement, bounds, \n                    settings);\n        } else if (Model.getFacade().isAClass(modelElement)) {\n            figNode = new FigClass(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInterface(modelElement)) {\n            figNode = new FigInterface(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAModel(modelElement)) {\n            figNode = new FigModel(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASubsystem(modelElement)) {\n            figNode = new FigSubsystem(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAPackage(modelElement)) {\n            figNode = new FigPackage(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAEnumeration(modelElement)) {\n            figNode = new FigEnumeration(modelElement, bounds, settings);\n        } else if (Model.getFacade().isADataType(modelElement)) {\n            figNode = new FigDataType(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAException(modelElement)) {\n            figNode = new FigException(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASignal(modelElement)) {\n            figNode = new FigSignal(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAActor(modelElement)) {\n            figNode = new FigActor(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAUseCase(modelElement)) {\n            figNode = new FigUseCase(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAObject(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInstanceSpecification(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANodeInstance(modelElement)) {\n            figNode = new FigNodeInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponentInstance(modelElement)) {\n            figNode = new FigComponentInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANode(modelElement)) {\n            figNode = new FigMNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponent(modelElement)) {\n            figNode = new FigComponent(modelElement, bounds, settings);\n        }\n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","date":"2012-01-10 01:40:02","endLine":937,"groupId":"14258","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"createDiagramElement","params":"(finalObjectmodelElement@finalRectanglebounds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-argouml-10-0.7/blobInfo/CC_OUT/blobs/30/0cbc5df064574f2fbbac08e51a66e1ca16c2c5.src","preCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        FigEdge figEdge = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n\n        if (Model.getFacade().isAAssociationClass(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociationClass(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isAAssociationEnd(modelElement)) {\n            figEdge = new FigAssociationEnd(modelElement, settings);\n            Model.getFacade().getAssociation(modelElement);\n            FigNode associationFN =\n                (FigNode) getLayer().presentationFor(\n                        Model.getFacade().getAssociation(modelElement));\n            FigNode classifierFN =\n                (FigNode) getLayer().presentationFor(Model.getFacade().getType(modelElement));\n\n            figEdge.setSourcePortFig(associationFN);\n            figEdge.setSourceFigNode(associationFN);\n            figEdge.setDestPortFig(classifierFN);\n            figEdge.setDestFigNode(classifierFN);\n        } else if (Model.getFacade().isAAssociation(modelElement)\n                && !Model.getFacade().isANaryAssociation(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociation(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isALink(modelElement)) {\n            figEdge = new FigLink(modelElement, settings);\n            Collection linkEndsColn = Model.getFacade().getConnections(modelElement);\n\n            Object[] linkEnds = linkEndsColn.toArray();\n            Object fromInst = Model.getFacade().getInstance(linkEnds[0]);\n            Object toInst = Model.getFacade().getInstance(linkEnds[1]);\n\n            FigNode fromFN = (FigNode) getLayer().presentationFor(fromInst);\n            FigNode toFN = (FigNode) getLayer().presentationFor(toInst);\n            figEdge.setSourcePortFig(fromFN);\n            figEdge.setSourceFigNode(fromFN);\n            figEdge.setDestPortFig(toFN);\n            figEdge.setDestFigNode(toFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (Model.getFacade().isAGeneralization(modelElement)) {\n            figEdge = new FigGeneralization(modelElement, settings);\n\n            Object supplier =\n                (Model.getFacade().getSpecific(modelElement));\n            Object client =\n                (Model.getFacade().getGeneral(modelElement));\n           \n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n            \n            figEdge.setSourceFigNode(supFN);\n            figEdge.setSourcePortFig(supFN);\n            figEdge.setDestFigNode(cliFN);\n            figEdge.setDestPortFig(cliFN);\n        } else if (Model.getFacade().isADependency(modelElement)) {\n            \n            if (Model.getFacade().isAPackageImport(modelElement)) {\n                figEdge = new FigPermission(modelElement, settings);\n            } else if (Model.getFacade().isAUsage(modelElement)) {\n                figEdge = new FigUsage(modelElement, settings);\n            } else if (Model.getFacade().isAAbstraction(modelElement)) {\n                figEdge = new FigAbstraction(modelElement, settings);\n            } else {\n    \n                String name = \"\";\n                for (Object stereotype : Model.getFacade().getStereotypes(modelElement)) {\n                    name = Model.getFacade().getName(stereotype);\n                    if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                        break;\n                    }\n                }\n                if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    figEdge = new FigAbstraction(modelElement, settings);\n                } else {\n                    figEdge = new FigDependency(modelElement, settings);\n                }\n            }\n            Object supplier =\n                ((Model.getFacade().getSuppliers(modelElement).toArray())[0]);\n            Object client =\n                ((Model.getFacade().getClients(modelElement).toArray())[0]);\n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n\n            figEdge.setSourcePortFig(cliFN);\n            figEdge.setSourceFigNode(cliFN);\n            figEdge.setDestPortFig(supFN);\n            figEdge.setDestFigNode(supFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (modelElement instanceof CommentEdge) {\n            CommentEdge ce = (CommentEdge) modelElement;\n            Object source = ce.getSource();\n            Object dest = ce.getDestination();\n            FigNode sourceFN = (FigNode) getLayer().presentationFor(source);\n            FigNode destFN = (FigNode) getLayer().presentationFor(dest);\n            figEdge = new FigEdgeNote(modelElement, settings);\n            figEdge.setSourcePortFig(sourceFN);\n            figEdge.setSourceFigNode(sourceFN);\n            figEdge.setDestPortFig(destFN);\n            figEdge.setDestFigNode(destFN);\n            figEdge.getFig().setLayer(getLayer());\n        }\n        \n        if (figEdge != null) {\n            figEdge.computeRoute();\n            return (DiagramElement) figEdge;\n        }\n        \n        if (Model.getFacade().isAAssociation(modelElement)) {\n            figNode =\n                createNaryAssociationNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAStereotype(modelElement)) {\n            \r\n            figNode = new FigStereotypeDeclaration(modelElement, bounds, \n                    settings);\n        } else if (Model.getFacade().isAClass(modelElement)) {\n            figNode = new FigClass(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInterface(modelElement)) {\n            figNode = new FigInterface(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAModel(modelElement)) {\n            figNode = new FigModel(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASubsystem(modelElement)) {\n            figNode = new FigSubsystem(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAPackage(modelElement)) {\n            figNode = new FigPackage(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAEnumeration(modelElement)) {\n            figNode = new FigEnumeration(modelElement, bounds, settings);\n        } else if (Model.getFacade().isADataType(modelElement)) {\n            figNode = new FigDataType(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAException(modelElement)) {\n            figNode = new FigException(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASignal(modelElement)) {\n            figNode = new FigSignal(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAActor(modelElement)) {\n            figNode = new FigActor(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAUseCase(modelElement)) {\n            figNode = new FigUseCase(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAObject(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInstanceSpecification(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANodeInstance(modelElement)) {\n            figNode = new FigNodeInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponentInstance(modelElement)) {\n            figNode = new FigComponentInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANode(modelElement)) {\n            figNode = new FigMNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponent(modelElement)) {\n            figNode = new FigComponent(modelElement, bounds, settings);\n        }\n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","realPath":"src/argouml-app/src/org/argouml/uml/diagram/static_structure/ui/UMLClassDiagram.java","repoName":"argouml","snippetEndLine":0,"snippetStartLine":0,"startLine":735,"status":"M"},{"authorDate":"2009-12-10 08:59:15","commitOrder":9,"curCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClassifierRole(modelElement)) {\n            if (!getGraphModel().getNodes().contains(modelElement)) {\n                figNode = makeNewFigCR(modelElement, null);  \n            }\n        } else if (Model.getFacade().isAClassifier(modelElement)) {\n            figNode = makeNewFigCR(\n                    makeNewCR(modelElement),\n                    bounds.getLocation());\n        }\n        \n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","date":"2009-12-10 08:59:15","endLine":305,"groupId":"5996","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"createDiagramElement","params":"(finalObjectmodelElement@finalRectanglebounds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-argouml-10-0.7/blobInfo/CC_OUT/blobs/a8/c1f9aa93908b096f9989fde6ed0c2459a5e9cc.src","preCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClassifierRole(modelElement)) {\n            if (!getGraphModel().getNodes().contains(modelElement)) {\n                figNode = makeNewFigCR(modelElement, null);  \n            }\n        } else if (Model.getFacade().isAClassifier(modelElement)) {\n            figNode = makeNewFigCR(\n                    makeNewCR(modelElement),\n                    bounds.getLocation());\n        }\n        \n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","realPath":"src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/UMLSequenceDiagram.java","repoName":"argouml","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"N"}],"commitId":"ec9440eba03b6bfe767fd6743003f3ebf10f9806","commitMessage":"@@@Fix for issue 6397: Can not add comment to associationclass\n\ngit-svn-id: http://argouml.tigris.org/svn/argouml/trunk@19866 a161b567-7d1e-0410-9ef9-912c70fedb3f\n","date":"2012-01-10 01:40:02","modifiedFileCount":"1","status":"M","submitter":"Michiel van der Wulp"},{"authorTime":"2012-12-30 21:06:01","codes":[{"authorDate":"2012-12-30 21:06:01","commitOrder":10,"curCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n\n        FigNodeModelElement figNode = null;\n        FigEdge figEdge = null;\n\n        DiagramSettings settings = getDiagramSettings();\n\n        if (Model.getFacade().isAAssociationClass(modelElement)) {\n            Object[] associationEnds =\n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociationClass(\n                    new DiagramEdgeSettings(\n                            modelElement,\n                            associationEnds[0],\n                            associationEnds[1]),\n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isAAssociationEnd(modelElement)) {\n            figEdge = new FigAssociationEnd(modelElement, settings);\n            Model.getFacade().getAssociation(modelElement);\n            FigNode associationFN =\n                (FigNode) getLayer().presentationFor(\n                        Model.getFacade().getAssociation(modelElement));\n            FigNode classifierFN =\n                (FigNode) getLayer().presentationFor(Model.getFacade().getType(modelElement));\n\n            figEdge.setSourcePortFig(associationFN);\n            figEdge.setSourceFigNode(associationFN);\n            figEdge.setDestPortFig(classifierFN);\n            figEdge.setDestFigNode(classifierFN);\n        } else if (Model.getFacade().isAAssociation(modelElement)\n                && !Model.getFacade().isANaryAssociation(modelElement)) {\n            Object[] associationEnds =\n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociation(\n                    new DiagramEdgeSettings(\n                            modelElement,\n                            associationEnds[0],\n                            associationEnds[1]),\n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isALink(modelElement)) {\n            figEdge = new FigLink(modelElement, settings);\n            Collection linkEndsColn = Model.getFacade().getConnections(modelElement);\n\n            Object[] linkEnds = linkEndsColn.toArray();\n            Object fromInst = Model.getFacade().getInstance(linkEnds[0]);\n            Object toInst = Model.getFacade().getInstance(linkEnds[1]);\n\n            FigNode fromFN = (FigNode) getLayer().presentationFor(fromInst);\n            FigNode toFN = (FigNode) getLayer().presentationFor(toInst);\n            figEdge.setSourcePortFig(fromFN);\n            figEdge.setSourceFigNode(fromFN);\n            figEdge.setDestPortFig(toFN);\n            figEdge.setDestFigNode(toFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (Model.getFacade().isAGeneralization(modelElement)) {\n            figEdge = new FigGeneralization(modelElement, settings);\n\n            Object supplier =\n                (Model.getFacade().getSpecific(modelElement));\n            Object client =\n                (Model.getFacade().getGeneral(modelElement));\n\n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n\n            figEdge.setSourceFigNode(supFN);\n            figEdge.setSourcePortFig(supFN);\n            figEdge.setDestFigNode(cliFN);\n            figEdge.setDestPortFig(cliFN);\n        } else if (Model.getFacade().isADependency(modelElement)) {\n\n            if (Model.getFacade().isAPackageImport(modelElement)) {\n                figEdge = new FigPermission(modelElement, settings);\n            } else if (Model.getFacade().isAUsage(modelElement)) {\n                figEdge = new FigUsage(modelElement, settings);\n            } else if (Model.getFacade().isAAbstraction(modelElement)) {\n                figEdge = new FigAbstraction(modelElement, settings);\n            } else {\n\n                String name = \"\";\n                for (Object stereotype : Model.getFacade().getStereotypes(modelElement)) {\n                    name = Model.getFacade().getName(stereotype);\n                    if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                        break;\n                    }\n                }\n                if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    figEdge = new FigAbstraction(modelElement, settings);\n                } else {\n                    figEdge = new FigDependency(modelElement, settings);\n                }\n            }\n            Object supplier =\n                ((Model.getFacade().getSuppliers(modelElement).toArray())[0]);\n            Object client =\n                ((Model.getFacade().getClients(modelElement).toArray())[0]);\n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n\n            figEdge.setSourcePortFig(cliFN);\n            figEdge.setSourceFigNode(cliFN);\n            figEdge.setDestPortFig(supFN);\n            figEdge.setDestFigNode(supFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (modelElement instanceof CommentEdge) {\n            CommentEdge ce = (CommentEdge) modelElement;\n            Fig source = getLayer().presentationFor(ce.getSource());\n            Fig dest = getLayer().presentationFor(ce.getDestination());\n            if (source instanceof FigAssociationClass) {\n                source = ((FigAssociationClass) source).getAssociationClass();\n            }\n            if (dest instanceof FigAssociationClass) {\n                dest = ((FigAssociationClass) dest).getAssociationClass();\n            }\n            FigNode sourceFN = (FigNode) source;\n            FigNode destFN = (FigNode) dest;\n            figEdge = new FigEdgeNote(modelElement, settings);\n            figEdge.setSourcePortFig(sourceFN);\n            figEdge.setSourceFigNode(sourceFN);\n            figEdge.setDestPortFig(destFN);\n            figEdge.setDestFigNode(destFN);\n            figEdge.getFig().setLayer(getLayer());\n        }\n\n        if (figEdge != null) {\n            figEdge.computeRoute();\n            return (DiagramElement) figEdge;\n        }\n\n        if (Model.getFacade().isAAssociation(modelElement)) {\n            figNode =\n                createNaryAssociationNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAStereotype(modelElement)) {\n            \r\n            figNode = new FigStereotypeDeclaration(modelElement, bounds,\n                    settings);\n        } else if (Model.getFacade().isAClass(modelElement)) {\n            figNode = new FigClass(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInterface(modelElement)) {\n            figNode = new FigInterface(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAModel(modelElement)) {\n            figNode = new FigModel(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASubsystem(modelElement)) {\n            figNode = new FigSubsystem(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAPackage(modelElement)) {\n            figNode = new FigPackage(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAEnumeration(modelElement)) {\n            figNode = new FigEnumeration(modelElement, bounds, settings);\n        } else if (Model.getFacade().isADataType(modelElement)) {\n            figNode = new FigDataType(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAException(modelElement)) {\n            figNode = new FigException(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASignal(modelElement)) {\n            figNode = new FigSignal(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAActor(modelElement)) {\n            figNode = new FigActor(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAUseCase(modelElement)) {\n            figNode = new FigUseCase(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAObject(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInstanceSpecification(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANodeInstance(modelElement)) {\n            figNode = new FigNodeInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponentInstance(modelElement)) {\n            figNode = new FigComponentInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANode(modelElement)) {\n            figNode = new FigMNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponent(modelElement)) {\n            figNode = new FigComponent(modelElement, bounds, settings);\n        }\n        if (figNode != null) {\n            LOG.log(Level.FINE,\n                    \"Model element {0} converted to {1}\",\n                    new Object[]{modelElement, figNode});\n        } else {\n            LOG.log(Level.FINE, \"Dropped object NOT added {0}\", figNode);\n        }\n        return figNode;\n    }\n","date":"2012-12-30 21:06:01","endLine":942,"groupId":"10235","id":17,"instanceNumber":1,"isCurCommit":1,"methodName":"createDiagramElement","params":"(finalObjectmodelElement@finalRectanglebounds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-argouml-10-0.7/blobInfo/CC_OUT/blobs/5f/dea452cc68e5ca02a7aaccad3a44597cc4d015.src","preCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        FigEdge figEdge = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n\n        if (Model.getFacade().isAAssociationClass(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociationClass(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isAAssociationEnd(modelElement)) {\n            figEdge = new FigAssociationEnd(modelElement, settings);\n            Model.getFacade().getAssociation(modelElement);\n            FigNode associationFN =\n                (FigNode) getLayer().presentationFor(\n                        Model.getFacade().getAssociation(modelElement));\n            FigNode classifierFN =\n                (FigNode) getLayer().presentationFor(Model.getFacade().getType(modelElement));\n\n            figEdge.setSourcePortFig(associationFN);\n            figEdge.setSourceFigNode(associationFN);\n            figEdge.setDestPortFig(classifierFN);\n            figEdge.setDestFigNode(classifierFN);\n        } else if (Model.getFacade().isAAssociation(modelElement)\n                && !Model.getFacade().isANaryAssociation(modelElement)) {\n            Object[] associationEnds = \n                Model.getFacade().getConnections(modelElement).toArray();\n            figEdge = new FigAssociation(\n                    new DiagramEdgeSettings(\n                            modelElement, \n                            associationEnds[0], \n                            associationEnds[1]), \n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(associationEnds[1]);\n            figEdge.setSourceFigNode(sourceFig);\n            figEdge.setSourcePortFig(sourceFig);\n            figEdge.setDestFigNode(destFig);\n            figEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isALink(modelElement)) {\n            figEdge = new FigLink(modelElement, settings);\n            Collection linkEndsColn = Model.getFacade().getConnections(modelElement);\n\n            Object[] linkEnds = linkEndsColn.toArray();\n            Object fromInst = Model.getFacade().getInstance(linkEnds[0]);\n            Object toInst = Model.getFacade().getInstance(linkEnds[1]);\n\n            FigNode fromFN = (FigNode) getLayer().presentationFor(fromInst);\n            FigNode toFN = (FigNode) getLayer().presentationFor(toInst);\n            figEdge.setSourcePortFig(fromFN);\n            figEdge.setSourceFigNode(fromFN);\n            figEdge.setDestPortFig(toFN);\n            figEdge.setDestFigNode(toFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (Model.getFacade().isAGeneralization(modelElement)) {\n            figEdge = new FigGeneralization(modelElement, settings);\n\n            Object supplier =\n                (Model.getFacade().getSpecific(modelElement));\n            Object client =\n                (Model.getFacade().getGeneral(modelElement));\n           \n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n            \n            figEdge.setSourceFigNode(supFN);\n            figEdge.setSourcePortFig(supFN);\n            figEdge.setDestFigNode(cliFN);\n            figEdge.setDestPortFig(cliFN);\n        } else if (Model.getFacade().isADependency(modelElement)) {\n            \n            if (Model.getFacade().isAPackageImport(modelElement)) {\n                figEdge = new FigPermission(modelElement, settings);\n            } else if (Model.getFacade().isAUsage(modelElement)) {\n                figEdge = new FigUsage(modelElement, settings);\n            } else if (Model.getFacade().isAAbstraction(modelElement)) {\n                figEdge = new FigAbstraction(modelElement, settings);\n            } else {\n    \n                String name = \"\";\n                for (Object stereotype : Model.getFacade().getStereotypes(modelElement)) {\n                    name = Model.getFacade().getName(stereotype);\n                    if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                        break;\n                    }\n                }\n                if (CoreFactory.REALIZE_STEREOTYPE.equals(name)) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    figEdge = new FigAbstraction(modelElement, settings);\n                } else {\n                    figEdge = new FigDependency(modelElement, settings);\n                }\n            }\n            Object supplier =\n                ((Model.getFacade().getSuppliers(modelElement).toArray())[0]);\n            Object client =\n                ((Model.getFacade().getClients(modelElement).toArray())[0]);\n            FigNode supFN = (FigNode) getLayer().presentationFor(supplier);\n            FigNode cliFN = (FigNode) getLayer().presentationFor(client);\n\n            figEdge.setSourcePortFig(cliFN);\n            figEdge.setSourceFigNode(cliFN);\n            figEdge.setDestPortFig(supFN);\n            figEdge.setDestFigNode(supFN);\n            figEdge.getFig().setLayer(getLayer());\n        } else if (modelElement instanceof CommentEdge) {\n            CommentEdge ce = (CommentEdge) modelElement;\n            Fig source = getLayer().presentationFor(ce.getSource());\n            Fig dest = getLayer().presentationFor(ce.getDestination());\n            if (source instanceof FigAssociationClass) {\n                source = ((FigAssociationClass) source).getAssociationClass();\n            }\n            if (dest instanceof FigAssociationClass) {\n                dest = ((FigAssociationClass) dest).getAssociationClass();\n            }\n            FigNode sourceFN = (FigNode) source;\n            FigNode destFN = (FigNode) dest;\n            figEdge = new FigEdgeNote(modelElement, settings);\n            figEdge.setSourcePortFig(sourceFN);\n            figEdge.setSourceFigNode(sourceFN);\n            figEdge.setDestPortFig(destFN);\n            figEdge.setDestFigNode(destFN);\n            figEdge.getFig().setLayer(getLayer());\n        }\n        \n        if (figEdge != null) {\n            figEdge.computeRoute();\n            return (DiagramElement) figEdge;\n        }\n        \n        if (Model.getFacade().isAAssociation(modelElement)) {\n            figNode =\n                createNaryAssociationNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAStereotype(modelElement)) {\n            \r\n            figNode = new FigStereotypeDeclaration(modelElement, bounds, \n                    settings);\n        } else if (Model.getFacade().isAClass(modelElement)) {\n            figNode = new FigClass(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInterface(modelElement)) {\n            figNode = new FigInterface(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAModel(modelElement)) {\n            figNode = new FigModel(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASubsystem(modelElement)) {\n            figNode = new FigSubsystem(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAPackage(modelElement)) {\n            figNode = new FigPackage(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAEnumeration(modelElement)) {\n            figNode = new FigEnumeration(modelElement, bounds, settings);\n        } else if (Model.getFacade().isADataType(modelElement)) {\n            figNode = new FigDataType(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAException(modelElement)) {\n            figNode = new FigException(modelElement, bounds, settings);\n        } else if (Model.getFacade().isASignal(modelElement)) {\n            figNode = new FigSignal(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAActor(modelElement)) {\n            figNode = new FigActor(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAUseCase(modelElement)) {\n            figNode = new FigUseCase(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAObject(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAInstanceSpecification(modelElement)) {\n            figNode = new FigObject(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANodeInstance(modelElement)) {\n            figNode = new FigNodeInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponentInstance(modelElement)) {\n            figNode = new FigComponentInstance(modelElement, bounds, settings);\n        } else if (Model.getFacade().isANode(modelElement)) {\n            figNode = new FigMNode(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAComponent(modelElement)) {\n            figNode = new FigComponent(modelElement, bounds, settings);\n        }\n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","realPath":"src/argouml-app/src/org/argouml/uml/diagram/static_structure/ui/UMLClassDiagram.java","repoName":"argouml","snippetEndLine":0,"snippetStartLine":0,"startLine":739,"status":"M"},{"authorDate":"2012-12-30 21:06:01","commitOrder":10,"curCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n\n        FigNodeModelElement figNode = null;\n\n        DiagramSettings settings = getDiagramSettings();\n\n        if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClassifierRole(modelElement)) {\n            if (!getGraphModel().getNodes().contains(modelElement)) {\n                figNode = makeNewFigCR(modelElement, null);\n            }\n        } else if (Model.getFacade().isAClassifier(modelElement)) {\n            figNode = makeNewFigCR(\n                    makeNewCR(modelElement),\n                    bounds.getLocation());\n        }\n\n        if (figNode != null) {\n            LOG.log(Level.FINE,\n                    \"Model element {0} converted to {1}\",\n                    new Object[]{modelElement, figNode});\n        } else {\n            LOG.log(Level.FINE, \"Dropped object NOT added {0}\", modelElement);\n        }\n        return figNode;\n    }\n","date":"2012-12-30 21:06:01","endLine":332,"groupId":"10235","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"createDiagramElement","params":"(finalObjectmodelElement@finalRectanglebounds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-argouml-10-0.7/blobInfo/CC_OUT/blobs/ba/1ea24f22772035339147462e74b3b4ae3d5722.src","preCode":"    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        FigNodeModelElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAComment(modelElement)) {\n            figNode = new FigComment(modelElement, bounds, settings);\n        } else if (Model.getFacade().isAClassifierRole(modelElement)) {\n            if (!getGraphModel().getNodes().contains(modelElement)) {\n                figNode = makeNewFigCR(modelElement, null);  \n            }\n        } else if (Model.getFacade().isAClassifier(modelElement)) {\n            figNode = makeNewFigCR(\n                    makeNewCR(modelElement),\n                    bounds.getLocation());\n        }\n        \n        if (figNode != null) {\n            LOG.debug(\"Model element \" + modelElement + \" converted to \" \n                    + figNode);\n        } else {\n            LOG.debug(\"Dropped object NOT added \" + figNode);\n        }\n        return figNode;\n    }\n","realPath":"src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/UMLSequenceDiagram.java","repoName":"argouml","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"}],"commitId":"70c1407473d4b4ec0859f8a7b612537b4e515fed","commitMessage":"@@@Replaced log4j with java.logging.\n\nAlso some style fixes.\n\nContributed-by: Rusi Popov (with style fixes by Linus Tolke).\nChange-Id: I7d1463d107340ac7b7ef5fc101eef93cf9605dae\n\ngit-svn-id: http://argouml.tigris.org/svn/argouml/trunk@19907 a161b567-7d1e-0410-9ef9-912c70fedb3f\n","date":"2012-12-30 21:06:01","modifiedFileCount":"413","status":"M","submitter":"ArgoUML Nightly Build monitored by Linus Tolke"}]
