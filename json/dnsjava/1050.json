[{"authorTime":"2019-10-27 23:04:41","codes":[{"authorDate":"2019-10-27 23:04:41","commitOrder":1,"curCode":"  void toArray() {\n    int[] exp = new int[] {1, 2, 3, 4};\n    int[] ret = Address.toArray(\"1.2.3.4\", Address.IPv4);\n    assertArrayEquals(exp, ret);\n\n    exp = new int[] {0, 0, 0, 0};\n    ret = Address.toArray(\"0.0.0.0\", Address.IPv4);\n    assertArrayEquals(exp, ret);\n\n    exp = new int[] {255, 255, 255, 255};\n    ret = Address.toArray(\"255.255.255.255\", Address.IPv4);\n    assertArrayEquals(exp, ret);\n  }\n","date":"2019-10-27 23:56:59","endLine":272,"groupId":"1856","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/43/fdc7bd993c5ddb9d9bebdfdd36bfc0f0544e6d.src","preCode":"  void toArray() {\n    int[] exp = new int[] {1, 2, 3, 4};\n    int[] ret = Address.toArray(\"1.2.3.4\", Address.IPv4);\n    assertArrayEquals(exp, ret);\n\n    exp = new int[] {0, 0, 0, 0};\n    ret = Address.toArray(\"0.0.0.0\", Address.IPv4);\n    assertArrayEquals(exp, ret);\n\n    exp = new int[] {255, 255, 255, 255};\n    ret = Address.toArray(\"255.255.255.255\", Address.IPv4);\n    assertArrayEquals(exp, ret);\n  }\n","realPath":"src/test/java/org/xbill/DNS/AddressTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"B"},{"authorDate":"2019-10-27 23:04:41","commitOrder":1,"curCode":"  void fromAddress_ipv6() throws UnknownHostException, TextParseException {\n    Name exp =\n        Name.fromString(\n            \"4.3.3.7.0.7.3.0.E.2.A.8.9.1.3.1.3.D.8.0.3.A.5.8.8.B.D.0.1.0.0.2.ip6.arpa.\");\n    String addr = \"2001:0db8:85a3:08d3:1319:8a2e:0370:7334\";\n    byte[] dat =\n        new byte[] {\n          (byte) 32, (byte) 1, (byte) 13, (byte) 184, (byte) 133, (byte) 163, (byte) 8, (byte) 211,\n          (byte) 19, (byte) 25, (byte) 138, (byte) 46, (byte) 3, (byte) 112, (byte) 115, (byte) 52\n        };\n    int[] idat = new int[] {32, 1, 13, 184, 133, 163, 8, 211, 19, 25, 138, 46, 3, 112, 115, 52};\n\n    assertEquals(exp, ReverseMap.fromAddress(addr, Address.IPv6));\n    assertEquals(exp, ReverseMap.fromAddress(InetAddress.getByName(addr)));\n    assertEquals(exp, ReverseMap.fromAddress(dat));\n    assertEquals(exp, ReverseMap.fromAddress(idat));\n  }\n","date":"2019-10-27 23:56:59","endLine":75,"groupId":"1856","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fromAddress_ipv6","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/09/d3213ee63f23d76d55be4082dd70361d36f407.src","preCode":"  void fromAddress_ipv6() throws UnknownHostException, TextParseException {\n    Name exp =\n        Name.fromString(\n            \"4.3.3.7.0.7.3.0.E.2.A.8.9.1.3.1.3.D.8.0.3.A.5.8.8.B.D.0.1.0.0.2.ip6.arpa.\");\n    String addr = \"2001:0db8:85a3:08d3:1319:8a2e:0370:7334\";\n    byte[] dat =\n        new byte[] {\n          (byte) 32, (byte) 1, (byte) 13, (byte) 184, (byte) 133, (byte) 163, (byte) 8, (byte) 211,\n          (byte) 19, (byte) 25, (byte) 138, (byte) 46, (byte) 3, (byte) 112, (byte) 115, (byte) 52\n        };\n    int[] idat = new int[] {32, 1, 13, 184, 133, 163, 8, 211, 19, 25, 138, 46, 3, 112, 115, 52};\n\n    assertEquals(exp, ReverseMap.fromAddress(addr, Address.IPv6));\n    assertEquals(exp, ReverseMap.fromAddress(InetAddress.getByName(addr)));\n    assertEquals(exp, ReverseMap.fromAddress(dat));\n    assertEquals(exp, ReverseMap.fromAddress(idat));\n  }\n","realPath":"src/test/java/org/xbill/DNS/ReverseMapTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"}],"commitId":"4276ad715c2cff76a244b67c02f0035faa1b6220","commitMessage":"@@@Remove test_ prefix from test methods\n","date":"2019-10-27 23:56:59","modifiedFileCount":"58","status":"B","submitter":"Ingo Bauersachs"},{"authorTime":"2020-05-16 03:05:26","codes":[{"authorDate":"2019-10-27 23:04:41","commitOrder":2,"curCode":"  void toArray() {\n    int[] exp = new int[] {1, 2, 3, 4};\n    int[] ret = Address.toArray(\"1.2.3.4\", Address.IPv4);\n    assertArrayEquals(exp, ret);\n\n    exp = new int[] {0, 0, 0, 0};\n    ret = Address.toArray(\"0.0.0.0\", Address.IPv4);\n    assertArrayEquals(exp, ret);\n\n    exp = new int[] {255, 255, 255, 255};\n    ret = Address.toArray(\"255.255.255.255\", Address.IPv4);\n    assertArrayEquals(exp, ret);\n  }\n","date":"2019-10-27 23:56:59","endLine":272,"groupId":"1050","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/43/fdc7bd993c5ddb9d9bebdfdd36bfc0f0544e6d.src","preCode":"  void toArray() {\n    int[] exp = new int[] {1, 2, 3, 4};\n    int[] ret = Address.toArray(\"1.2.3.4\", Address.IPv4);\n    assertArrayEquals(exp, ret);\n\n    exp = new int[] {0, 0, 0, 0};\n    ret = Address.toArray(\"0.0.0.0\", Address.IPv4);\n    assertArrayEquals(exp, ret);\n\n    exp = new int[] {255, 255, 255, 255};\n    ret = Address.toArray(\"255.255.255.255\", Address.IPv4);\n    assertArrayEquals(exp, ret);\n  }\n","realPath":"src/test/java/org/xbill/DNS/AddressTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"N"},{"authorDate":"2020-05-16 03:05:26","commitOrder":2,"curCode":"  void fromAddress_ipv6() throws UnknownHostException {\n    byte[] dat =\n        new byte[] {\n          (byte) 32, (byte) 1, (byte) 13, (byte) 184, (byte) 133, (byte) 163, (byte) 8, (byte) 211,\n          (byte) 19, (byte) 25, (byte) 138, (byte) 46, (byte) 3, (byte) 112, (byte) 115, (byte) 52\n        };\n    int[] idat = new int[] {32, 1, 13, 184, 133, 163, 8, 211, 19, 25, 138, 46, 3, 112, 115, 52};\n\n    assertEquals(ipv6arpa, ReverseMap.fromAddress(ipv6addr, Address.IPv6));\n    assertEquals(ipv6arpa, ReverseMap.fromAddress(InetAddress.getByName(ipv6addr)));\n    assertEquals(ipv6arpa, ReverseMap.fromAddress(dat));\n    assertEquals(ipv6arpa, ReverseMap.fromAddress(idat));\n  }\n","date":"2020-05-16 03:05:26","endLine":76,"groupId":"1050","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fromAddress_ipv6","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/2a/67e8fae027f6ad349a1cf3bf81abc977fd1a3f.src","preCode":"  void fromAddress_ipv6() throws UnknownHostException, TextParseException {\n    Name exp =\n        Name.fromString(\n            \"4.3.3.7.0.7.3.0.E.2.A.8.9.1.3.1.3.D.8.0.3.A.5.8.8.B.D.0.1.0.0.2.ip6.arpa.\");\n    String addr = \"2001:0db8:85a3:08d3:1319:8a2e:0370:7334\";\n    byte[] dat =\n        new byte[] {\n          (byte) 32, (byte) 1, (byte) 13, (byte) 184, (byte) 133, (byte) 163, (byte) 8, (byte) 211,\n          (byte) 19, (byte) 25, (byte) 138, (byte) 46, (byte) 3, (byte) 112, (byte) 115, (byte) 52\n        };\n    int[] idat = new int[] {32, 1, 13, 184, 133, 163, 8, 211, 19, 25, 138, 46, 3, 112, 115, 52};\n\n    assertEquals(exp, ReverseMap.fromAddress(addr, Address.IPv6));\n    assertEquals(exp, ReverseMap.fromAddress(InetAddress.getByName(addr)));\n    assertEquals(exp, ReverseMap.fromAddress(dat));\n    assertEquals(exp, ReverseMap.fromAddress(idat));\n  }\n","realPath":"src/test/java/org/xbill/DNS/ReverseMapTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"d82fdae93900d9c89c743241cf0cbd91173cfd1f","commitMessage":"@@@Add reverse map parsing into IP address\n\nCloses #103\n","date":"2020-05-16 03:05:26","modifiedFileCount":"2","status":"M","submitter":"Ingo Bauersachs"}]
