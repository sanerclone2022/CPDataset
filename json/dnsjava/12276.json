[{"authorTime":"2020-01-19 04:12:34","codes":[{"authorDate":"2019-09-03 05:25:53","commitOrder":3,"curCode":"  Record(Name name, int type, int dclass, long ttl) {\n    if (!name.isAbsolute()) {\n      throw new RelativeNameException(name);\n    }\n    Type.check(type);\n    DClass.check(dclass);\n    TTL.check(ttl);\n    this.name = name;\n    this.type = type;\n    this.dclass = dclass;\n    this.ttl = ttl;\n  }\n","date":"2019-09-03 05:25:53","endLine":45,"groupId":"90","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"Record","params":"(Namename@inttype@intdclass@longttl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/f8/5a851ed25e9b32508b787abc54a96868af89cd.src","preCode":"  Record(Name name, int type, int dclass, long ttl) {\n    if (!name.isAbsolute()) {\n      throw new RelativeNameException(name);\n    }\n    Type.check(type);\n    DClass.check(dclass);\n    TTL.check(ttl);\n    this.name = name;\n    this.type = type;\n    this.dclass = dclass;\n    this.ttl = ttl;\n  }\n","realPath":"src/main/java/org/xbill/DNS/Record.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"NB"},{"authorDate":"2020-01-19 04:12:34","commitOrder":3,"curCode":"  public static Record newRecord(\n      Name name, int type, int dclass, long ttl, int length, byte[] data) {\n    if (!name.isAbsolute()) {\n      throw new RelativeNameException(name);\n    }\n    Type.check(type);\n    DClass.check(dclass);\n    TTL.check(ttl);\n\n    DNSInput in;\n    if (data != null) {\n      in = new DNSInput(data);\n    } else {\n      in = null;\n    }\n    try {\n      return newRecord(name, type, dclass, ttl, length, in);\n    } catch (IOException e) {\n      return null;\n    }\n  }\n","date":"2020-01-19 04:12:34","endLine":120,"groupId":"337","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"newRecord","params":"(Namename@inttype@intdclass@longttl@intlength@byte[]data)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/8b/28d4deff4166dd454e773664e81b9572a61b81.src","preCode":"  public static Record newRecord(\n      Name name, int type, int dclass, long ttl, int length, byte[] data) {\n    if (!name.isAbsolute()) {\n      throw new RelativeNameException(name);\n    }\n    Type.check(type);\n    DClass.check(dclass);\n    TTL.check(ttl);\n\n    DNSInput in;\n    if (data != null) {\n      in = new DNSInput(data);\n    } else {\n      in = null;\n    }\n    try {\n      return newRecord(name, type, dclass, ttl, length, in);\n    } catch (IOException e) {\n      return null;\n    }\n  }\n","realPath":"src/main/java/org/xbill/DNS/Record.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"}],"commitId":"8fc771a6a9ca1fad9ffed2ebfb775e369953f9d2","commitMessage":"@@@Remove Serializable and serialVersionUID from Record\n\nRecords alreads have two RFC defined serialization formats.  there\nis no need for an unmaintained.  proprietary third option.\n","date":"2020-01-19 04:12:34","modifiedFileCount":"67","status":"M","submitter":"Ingo Bauersachs"},{"authorTime":"2020-01-19 04:12:34","codes":[{"authorDate":"2020-03-26 20:23:43","commitOrder":4,"curCode":"  protected Record(Name name, int type, int dclass, long ttl) {\n    if (!name.isAbsolute()) {\n      throw new RelativeNameException(name);\n    }\n    Type.check(type);\n    DClass.check(dclass);\n    TTL.check(ttl);\n    this.name = name;\n    this.type = type;\n    this.dclass = dclass;\n    this.ttl = ttl;\n  }\n","date":"2020-03-26 20:23:43","endLine":42,"groupId":"12276","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"Record","params":"(Namename@inttype@intdclass@longttl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/5f/9f15dcc9ead8d2bd03b53658d9232df7bd6ee6.src","preCode":"  Record(Name name, int type, int dclass, long ttl) {\n    if (!name.isAbsolute()) {\n      throw new RelativeNameException(name);\n    }\n    Type.check(type);\n    DClass.check(dclass);\n    TTL.check(ttl);\n    this.name = name;\n    this.type = type;\n    this.dclass = dclass;\n    this.ttl = ttl;\n  }\n","realPath":"src/main/java/org/xbill/DNS/Record.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"M"},{"authorDate":"2020-01-19 04:12:34","commitOrder":4,"curCode":"  public static Record newRecord(\n      Name name, int type, int dclass, long ttl, int length, byte[] data) {\n    if (!name.isAbsolute()) {\n      throw new RelativeNameException(name);\n    }\n    Type.check(type);\n    DClass.check(dclass);\n    TTL.check(ttl);\n\n    DNSInput in;\n    if (data != null) {\n      in = new DNSInput(data);\n    } else {\n      in = null;\n    }\n    try {\n      return newRecord(name, type, dclass, ttl, length, in);\n    } catch (IOException e) {\n      return null;\n    }\n  }\n","date":"2020-01-19 04:12:34","endLine":120,"groupId":"12276","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"newRecord","params":"(Namename@inttype@intdclass@longttl@intlength@byte[]data)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/8b/28d4deff4166dd454e773664e81b9572a61b81.src","preCode":"  public static Record newRecord(\n      Name name, int type, int dclass, long ttl, int length, byte[] data) {\n    if (!name.isAbsolute()) {\n      throw new RelativeNameException(name);\n    }\n    Type.check(type);\n    DClass.check(dclass);\n    TTL.check(ttl);\n\n    DNSInput in;\n    if (data != null) {\n      in = new DNSInput(data);\n    } else {\n      in = null;\n    }\n    try {\n      return newRecord(name, type, dclass, ttl, length, in);\n    } catch (IOException e) {\n      return null;\n    }\n  }\n","realPath":"src/main/java/org/xbill/DNS/Record.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"N"}],"commitId":"146a359ca61aff947afab1ed9e56057320d770c5","commitMessage":"@@@\"Record\" class access fixes (#98)\n\n* set methods that need to be overridden by subclasses to \"protected\".  so that\nthe subclasses may reside in different packages\n\n* applied code formatter","date":"2020-03-26 20:23:43","modifiedFileCount":"49","status":"M","submitter":"demonti"}]
