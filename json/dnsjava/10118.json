[{"authorTime":"2020-08-18 04:57:15","codes":[{"authorDate":"2020-08-18 04:57:15","commitOrder":1,"curCode":"  void createParams() throws UnknownHostException {\n    List<Integer> mandatoryList = Arrays.asList(HTTPSRecord.ALPN, HTTPSRecord.IPV4HINT);\n    HTTPSRecord.ParameterMandatory mandatory = new HTTPSRecord.ParameterMandatory(mandatoryList);\n    assertEquals(HTTPSRecord.MANDATORY, mandatory.getKey());\n    assertEquals(mandatoryList, mandatory.getValues());\n\n    List<String> alpnList = Arrays.asList(\"h2\", \"h3\");\n    HTTPSRecord.ParameterAlpn alpn = new HTTPSRecord.ParameterAlpn(alpnList);\n    assertEquals(HTTPSRecord.ALPN, alpn.getKey());\n    assertEquals(alpnList, alpn.getValues());\n\n    HTTPSRecord.ParameterPort port = new HTTPSRecord.ParameterPort(8443);\n    assertEquals(HTTPSRecord.PORT, port.getKey());\n    assertEquals(8443, port.getPort());\n\n    List<Inet4Address> ipv4List = Arrays.asList((Inet4Address) InetAddress.getByName(\"1.2.3.4\"));\n    HTTPSRecord.ParameterIpv4Hint ipv4hint = new HTTPSRecord.ParameterIpv4Hint(ipv4List);\n    assertEquals(HTTPSRecord.IPV4HINT, ipv4hint.getKey());\n    assertEquals(ipv4List, ipv4hint.getAddresses());\n\n    byte[] data = {'a', 'b', 'c'};\n    HTTPSRecord.ParameterEchConfig echconfig = new HTTPSRecord.ParameterEchConfig(data);\n    assertEquals(HTTPSRecord.ECHCONFIG, echconfig.getKey());\n    assertEquals(data, echconfig.getData());\n\n    List<Inet6Address> ipv6List = Arrays.asList((Inet6Address) InetAddress.getByName(\"2001::1\"));\n    HTTPSRecord.ParameterIpv6Hint ipv6hint = new HTTPSRecord.ParameterIpv6Hint(ipv6List);\n    assertEquals(HTTPSRecord.IPV6HINT, ipv6hint.getKey());\n    assertEquals(ipv6List, ipv6hint.getAddresses());\n\n    byte[] value = {0, 1, 2, 3};\n    HTTPSRecord.ParameterUnknown unknown = new HTTPSRecord.ParameterUnknown(33, value);\n    assertEquals(33, unknown.getKey());\n    assertEquals(value, unknown.getValue());\n  }\n","date":"2020-08-18 04:57:15","endLine":54,"groupId":"320","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/dc/48b2ae42aa4e1d22c0e8cc63de607ca10e5177.src","preCode":"  void createParams() throws UnknownHostException {\n    List<Integer> mandatoryList = Arrays.asList(HTTPSRecord.ALPN, HTTPSRecord.IPV4HINT);\n    HTTPSRecord.ParameterMandatory mandatory = new HTTPSRecord.ParameterMandatory(mandatoryList);\n    assertEquals(HTTPSRecord.MANDATORY, mandatory.getKey());\n    assertEquals(mandatoryList, mandatory.getValues());\n\n    List<String> alpnList = Arrays.asList(\"h2\", \"h3\");\n    HTTPSRecord.ParameterAlpn alpn = new HTTPSRecord.ParameterAlpn(alpnList);\n    assertEquals(HTTPSRecord.ALPN, alpn.getKey());\n    assertEquals(alpnList, alpn.getValues());\n\n    HTTPSRecord.ParameterPort port = new HTTPSRecord.ParameterPort(8443);\n    assertEquals(HTTPSRecord.PORT, port.getKey());\n    assertEquals(8443, port.getPort());\n\n    List<Inet4Address> ipv4List = Arrays.asList((Inet4Address) InetAddress.getByName(\"1.2.3.4\"));\n    HTTPSRecord.ParameterIpv4Hint ipv4hint = new HTTPSRecord.ParameterIpv4Hint(ipv4List);\n    assertEquals(HTTPSRecord.IPV4HINT, ipv4hint.getKey());\n    assertEquals(ipv4List, ipv4hint.getAddresses());\n\n    byte[] data = {'a', 'b', 'c'};\n    HTTPSRecord.ParameterEchConfig echconfig = new HTTPSRecord.ParameterEchConfig(data);\n    assertEquals(HTTPSRecord.ECHCONFIG, echconfig.getKey());\n    assertEquals(data, echconfig.getData());\n\n    List<Inet6Address> ipv6List = Arrays.asList((Inet6Address) InetAddress.getByName(\"2001::1\"));\n    HTTPSRecord.ParameterIpv6Hint ipv6hint = new HTTPSRecord.ParameterIpv6Hint(ipv6List);\n    assertEquals(HTTPSRecord.IPV6HINT, ipv6hint.getKey());\n    assertEquals(ipv6List, ipv6hint.getAddresses());\n\n    byte[] value = {0, 1, 2, 3};\n    HTTPSRecord.ParameterUnknown unknown = new HTTPSRecord.ParameterUnknown(33, value);\n    assertEquals(33, unknown.getKey());\n    assertEquals(value, unknown.getValue());\n  }\n","realPath":"src/test/java/org/xbill/DNS/HTTPSRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":20,"status":"B"},{"authorDate":"2020-08-18 04:57:15","commitOrder":1,"curCode":"  void createParams() throws UnknownHostException {\n    List<Integer> mandatoryList = Arrays.asList(SVCBRecord.ALPN, SVCBRecord.IPV4HINT);\n    SVCBRecord.ParameterMandatory mandatory = new SVCBBase.ParameterMandatory(mandatoryList);\n    assertEquals(SVCBRecord.MANDATORY, mandatory.getKey());\n    assertEquals(mandatoryList, mandatory.getValues());\n\n    List<String> alpnList = Arrays.asList(\"h2\", \"h3\");\n    SVCBRecord.ParameterAlpn alpn = new SVCBRecord.ParameterAlpn(alpnList);\n    assertEquals(SVCBRecord.ALPN, alpn.getKey());\n    assertEquals(alpnList, alpn.getValues());\n\n    SVCBRecord.ParameterPort port = new SVCBBase.ParameterPort(8443);\n    assertEquals(SVCBRecord.PORT, port.getKey());\n    assertEquals(8443, port.getPort());\n\n    List<Inet4Address> ipv4List = Arrays.asList((Inet4Address) InetAddress.getByName(\"1.2.3.4\"));\n    SVCBRecord.ParameterIpv4Hint ipv4hint = new SVCBRecord.ParameterIpv4Hint(ipv4List);\n    assertEquals(SVCBRecord.IPV4HINT, ipv4hint.getKey());\n    assertEquals(ipv4List, ipv4hint.getAddresses());\n\n    byte[] data = {'a', 'b', 'c'};\n    SVCBRecord.ParameterEchConfig echconfig = new SVCBRecord.ParameterEchConfig(data);\n    assertEquals(SVCBRecord.ECHCONFIG, echconfig.getKey());\n    assertEquals(data, echconfig.getData());\n\n    List<Inet6Address> ipv6List = Arrays.asList((Inet6Address) InetAddress.getByName(\"2001::1\"));\n    SVCBRecord.ParameterIpv6Hint ipv6hint = new SVCBRecord.ParameterIpv6Hint(ipv6List);\n    assertEquals(SVCBRecord.IPV6HINT, ipv6hint.getKey());\n    assertEquals(ipv6List, ipv6hint.getAddresses());\n\n    byte[] value = {0, 1, 2, 3};\n    SVCBRecord.ParameterUnknown unknown = new SVCBRecord.ParameterUnknown(33, value);\n    assertEquals(33, unknown.getKey());\n    assertEquals(value, unknown.getValue());\n  }\n","date":"2020-08-18 04:57:15","endLine":54,"groupId":"1151","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/b2/da083342fdf77ff5e460baacb3d4c5702b7bdc.src","preCode":"  void createParams() throws UnknownHostException {\n    List<Integer> mandatoryList = Arrays.asList(SVCBRecord.ALPN, SVCBRecord.IPV4HINT);\n    SVCBRecord.ParameterMandatory mandatory = new SVCBBase.ParameterMandatory(mandatoryList);\n    assertEquals(SVCBRecord.MANDATORY, mandatory.getKey());\n    assertEquals(mandatoryList, mandatory.getValues());\n\n    List<String> alpnList = Arrays.asList(\"h2\", \"h3\");\n    SVCBRecord.ParameterAlpn alpn = new SVCBRecord.ParameterAlpn(alpnList);\n    assertEquals(SVCBRecord.ALPN, alpn.getKey());\n    assertEquals(alpnList, alpn.getValues());\n\n    SVCBRecord.ParameterPort port = new SVCBBase.ParameterPort(8443);\n    assertEquals(SVCBRecord.PORT, port.getKey());\n    assertEquals(8443, port.getPort());\n\n    List<Inet4Address> ipv4List = Arrays.asList((Inet4Address) InetAddress.getByName(\"1.2.3.4\"));\n    SVCBRecord.ParameterIpv4Hint ipv4hint = new SVCBRecord.ParameterIpv4Hint(ipv4List);\n    assertEquals(SVCBRecord.IPV4HINT, ipv4hint.getKey());\n    assertEquals(ipv4List, ipv4hint.getAddresses());\n\n    byte[] data = {'a', 'b', 'c'};\n    SVCBRecord.ParameterEchConfig echconfig = new SVCBRecord.ParameterEchConfig(data);\n    assertEquals(SVCBRecord.ECHCONFIG, echconfig.getKey());\n    assertEquals(data, echconfig.getData());\n\n    List<Inet6Address> ipv6List = Arrays.asList((Inet6Address) InetAddress.getByName(\"2001::1\"));\n    SVCBRecord.ParameterIpv6Hint ipv6hint = new SVCBRecord.ParameterIpv6Hint(ipv6List);\n    assertEquals(SVCBRecord.IPV6HINT, ipv6hint.getKey());\n    assertEquals(ipv6List, ipv6hint.getAddresses());\n\n    byte[] value = {0, 1, 2, 3};\n    SVCBRecord.ParameterUnknown unknown = new SVCBRecord.ParameterUnknown(33, value);\n    assertEquals(33, unknown.getKey());\n    assertEquals(value, unknown.getValue());\n  }\n","realPath":"src/test/java/org/xbill/DNS/SVCBRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":20,"status":"B"}],"commitId":"6f379668871fe788c8dfe991aa16a8c54b6857e3","commitMessage":"@@@Add support for SVCB and HTTPS records (#116)\n\n* Initial class structure\n\n* Work in progress for implementation.  basic tests passing\n\n* Add mandatory key type and proper implementation for ipv4hint.  echconfig.  and ipv6hint\n\n* Add support for unknown key types\n\n* More tests and error handling cases\n\n* Improve naming and code cleanup\n\n* Minor fixes based on code review comments\n\n* Accessors and initializers for parameter class.  more tests and validation code\n\n* Add better wire format checking and unit tests for this\n\n* Minor fixes and checking for duplicate SvcParam keys in constructor\n\n* Add license header comment and comments for the records classes\n\n* Addressed code review feedback\nRan formatter\nUsed final for private field when possible\nAdded more useful constructors and accessors for Parameter subclasses.  such as ones that take in and return List<Inet4Address> instead of List<byte[]>\n\n* Specify UTF_8 when converting to and from bytes for ParameterAlpn\n\n* Use US_ASCII charset instead for ParameterAlpn\n\nCo-authored-by: Adam Stoler <astoler@bos-mp8o2.kendall.corp.akamai.com>","date":"2020-08-18 04:57:15","modifiedFileCount":"1","status":"B","submitter":"adam-stoler"},{"authorTime":"2020-08-23 01:29:04","codes":[{"authorDate":"2020-08-23 01:29:04","commitOrder":2,"curCode":"  void createParams() throws UnknownHostException, TextParseException {\n    List<Integer> mandatoryList = Arrays.asList(HTTPSRecord.ALPN, HTTPSRecord.IPV4HINT);\n    HTTPSRecord.ParameterMandatory mandatory = new HTTPSRecord.ParameterMandatory(mandatoryList);\n    assertEquals(HTTPSRecord.MANDATORY, mandatory.getKey());\n    assertEquals(mandatoryList, mandatory.getValues());\n\n    List<String> alpnList = Arrays.asList(\"h2\", \"h3\");\n    HTTPSRecord.ParameterAlpn alpn = new HTTPSRecord.ParameterAlpn(alpnList);\n    assertEquals(HTTPSRecord.ALPN, alpn.getKey());\n    assertEquals(alpnList, alpn.getValues());\n\n    HTTPSRecord.ParameterPort port = new HTTPSRecord.ParameterPort(8443);\n    assertEquals(HTTPSRecord.PORT, port.getKey());\n    assertEquals(8443, port.getPort());\n\n    List<Inet4Address> ipv4List = Arrays.asList((Inet4Address) InetAddress.getByName(\"1.2.3.4\"));\n    HTTPSRecord.ParameterIpv4Hint ipv4hint = new HTTPSRecord.ParameterIpv4Hint(ipv4List);\n    assertEquals(HTTPSRecord.IPV4HINT, ipv4hint.getKey());\n    assertEquals(ipv4List, ipv4hint.getAddresses());\n\n    byte[] data = {'a', 'b', 'c'};\n    HTTPSRecord.ParameterEchConfig echconfig = new HTTPSRecord.ParameterEchConfig(data);\n    assertEquals(HTTPSRecord.ECHCONFIG, echconfig.getKey());\n    assertEquals(data, echconfig.getData());\n\n    List<Inet6Address> ipv6List = Arrays.asList((Inet6Address) InetAddress.getByName(\"2001::1\"));\n    HTTPSRecord.ParameterIpv6Hint ipv6hint = new HTTPSRecord.ParameterIpv6Hint(ipv6List);\n    assertEquals(HTTPSRecord.IPV6HINT, ipv6hint.getKey());\n    assertEquals(ipv6List, ipv6hint.getAddresses());\n\n    byte[] value = {0, 1, 2, 3};\n    HTTPSRecord.ParameterUnknown unknown = new HTTPSRecord.ParameterUnknown(33, value);\n    assertEquals(33, unknown.getKey());\n    assertEquals(value, unknown.getValue());\n  }\n","date":"2020-08-23 01:29:04","endLine":54,"groupId":"320","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/f3/216ee6933d048df9a9b296b5da5c757c7f94bd.src","preCode":"  void createParams() throws UnknownHostException {\n    List<Integer> mandatoryList = Arrays.asList(HTTPSRecord.ALPN, HTTPSRecord.IPV4HINT);\n    HTTPSRecord.ParameterMandatory mandatory = new HTTPSRecord.ParameterMandatory(mandatoryList);\n    assertEquals(HTTPSRecord.MANDATORY, mandatory.getKey());\n    assertEquals(mandatoryList, mandatory.getValues());\n\n    List<String> alpnList = Arrays.asList(\"h2\", \"h3\");\n    HTTPSRecord.ParameterAlpn alpn = new HTTPSRecord.ParameterAlpn(alpnList);\n    assertEquals(HTTPSRecord.ALPN, alpn.getKey());\n    assertEquals(alpnList, alpn.getValues());\n\n    HTTPSRecord.ParameterPort port = new HTTPSRecord.ParameterPort(8443);\n    assertEquals(HTTPSRecord.PORT, port.getKey());\n    assertEquals(8443, port.getPort());\n\n    List<Inet4Address> ipv4List = Arrays.asList((Inet4Address) InetAddress.getByName(\"1.2.3.4\"));\n    HTTPSRecord.ParameterIpv4Hint ipv4hint = new HTTPSRecord.ParameterIpv4Hint(ipv4List);\n    assertEquals(HTTPSRecord.IPV4HINT, ipv4hint.getKey());\n    assertEquals(ipv4List, ipv4hint.getAddresses());\n\n    byte[] data = {'a', 'b', 'c'};\n    HTTPSRecord.ParameterEchConfig echconfig = new HTTPSRecord.ParameterEchConfig(data);\n    assertEquals(HTTPSRecord.ECHCONFIG, echconfig.getKey());\n    assertEquals(data, echconfig.getData());\n\n    List<Inet6Address> ipv6List = Arrays.asList((Inet6Address) InetAddress.getByName(\"2001::1\"));\n    HTTPSRecord.ParameterIpv6Hint ipv6hint = new HTTPSRecord.ParameterIpv6Hint(ipv6List);\n    assertEquals(HTTPSRecord.IPV6HINT, ipv6hint.getKey());\n    assertEquals(ipv6List, ipv6hint.getAddresses());\n\n    byte[] value = {0, 1, 2, 3};\n    HTTPSRecord.ParameterUnknown unknown = new HTTPSRecord.ParameterUnknown(33, value);\n    assertEquals(33, unknown.getKey());\n    assertEquals(value, unknown.getValue());\n  }\n","realPath":"src/test/java/org/xbill/DNS/HTTPSRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":20,"status":"M"},{"authorDate":"2020-08-23 01:29:04","commitOrder":2,"curCode":"  void createParams() throws UnknownHostException, TextParseException {\n    List<Integer> mandatoryList = Arrays.asList(SVCBRecord.ALPN, SVCBRecord.IPV4HINT);\n    SVCBRecord.ParameterMandatory mandatory = new SVCBBase.ParameterMandatory(mandatoryList);\n    assertEquals(SVCBRecord.MANDATORY, mandatory.getKey());\n    assertEquals(mandatoryList, mandatory.getValues());\n\n    List<String> alpnList = Arrays.asList(\"h2\", \"h3\");\n    SVCBRecord.ParameterAlpn alpn = new SVCBRecord.ParameterAlpn(alpnList);\n    assertEquals(SVCBRecord.ALPN, alpn.getKey());\n    assertEquals(alpnList, alpn.getValues());\n\n    SVCBRecord.ParameterPort port = new SVCBBase.ParameterPort(8443);\n    assertEquals(SVCBRecord.PORT, port.getKey());\n    assertEquals(8443, port.getPort());\n\n    List<Inet4Address> ipv4List = Arrays.asList((Inet4Address) InetAddress.getByName(\"1.2.3.4\"));\n    SVCBRecord.ParameterIpv4Hint ipv4hint = new SVCBRecord.ParameterIpv4Hint(ipv4List);\n    assertEquals(SVCBRecord.IPV4HINT, ipv4hint.getKey());\n    assertEquals(ipv4List, ipv4hint.getAddresses());\n\n    byte[] data = {'a', 'b', 'c'};\n    SVCBRecord.ParameterEchConfig echconfig = new SVCBRecord.ParameterEchConfig(data);\n    assertEquals(SVCBRecord.ECHCONFIG, echconfig.getKey());\n    assertEquals(data, echconfig.getData());\n\n    List<Inet6Address> ipv6List = Arrays.asList((Inet6Address) InetAddress.getByName(\"2001::1\"));\n    SVCBRecord.ParameterIpv6Hint ipv6hint = new SVCBRecord.ParameterIpv6Hint(ipv6List);\n    assertEquals(SVCBRecord.IPV6HINT, ipv6hint.getKey());\n    assertEquals(ipv6List, ipv6hint.getAddresses());\n\n    byte[] value = {0, 1, 2, 3};\n    SVCBRecord.ParameterUnknown unknown = new SVCBRecord.ParameterUnknown(33, value);\n    assertEquals(33, unknown.getKey());\n    assertEquals(value, unknown.getValue());\n  }\n","date":"2020-08-23 01:29:04","endLine":54,"groupId":"1151","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/50/eb37d9ea19369ff9093a15558ea9fd31f82772.src","preCode":"  void createParams() throws UnknownHostException {\n    List<Integer> mandatoryList = Arrays.asList(SVCBRecord.ALPN, SVCBRecord.IPV4HINT);\n    SVCBRecord.ParameterMandatory mandatory = new SVCBBase.ParameterMandatory(mandatoryList);\n    assertEquals(SVCBRecord.MANDATORY, mandatory.getKey());\n    assertEquals(mandatoryList, mandatory.getValues());\n\n    List<String> alpnList = Arrays.asList(\"h2\", \"h3\");\n    SVCBRecord.ParameterAlpn alpn = new SVCBRecord.ParameterAlpn(alpnList);\n    assertEquals(SVCBRecord.ALPN, alpn.getKey());\n    assertEquals(alpnList, alpn.getValues());\n\n    SVCBRecord.ParameterPort port = new SVCBBase.ParameterPort(8443);\n    assertEquals(SVCBRecord.PORT, port.getKey());\n    assertEquals(8443, port.getPort());\n\n    List<Inet4Address> ipv4List = Arrays.asList((Inet4Address) InetAddress.getByName(\"1.2.3.4\"));\n    SVCBRecord.ParameterIpv4Hint ipv4hint = new SVCBRecord.ParameterIpv4Hint(ipv4List);\n    assertEquals(SVCBRecord.IPV4HINT, ipv4hint.getKey());\n    assertEquals(ipv4List, ipv4hint.getAddresses());\n\n    byte[] data = {'a', 'b', 'c'};\n    SVCBRecord.ParameterEchConfig echconfig = new SVCBRecord.ParameterEchConfig(data);\n    assertEquals(SVCBRecord.ECHCONFIG, echconfig.getKey());\n    assertEquals(data, echconfig.getData());\n\n    List<Inet6Address> ipv6List = Arrays.asList((Inet6Address) InetAddress.getByName(\"2001::1\"));\n    SVCBRecord.ParameterIpv6Hint ipv6hint = new SVCBRecord.ParameterIpv6Hint(ipv6List);\n    assertEquals(SVCBRecord.IPV6HINT, ipv6hint.getKey());\n    assertEquals(ipv6List, ipv6hint.getAddresses());\n\n    byte[] value = {0, 1, 2, 3};\n    SVCBRecord.ParameterUnknown unknown = new SVCBRecord.ParameterUnknown(33, value);\n    assertEquals(33, unknown.getKey());\n    assertEquals(value, unknown.getValue());\n  }\n","realPath":"src/test/java/org/xbill/DNS/SVCBRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":20,"status":"M"}],"commitId":"2c4a51d4f1887394a0589b8e2782124043efe07e","commitMessage":"@@@Svcb https.fixes (#119)\n\n* Support escaped byte sequences in alpn values\n\n* Add a couple more unit tests\n\n* Updates from running formatter\n\nCo-authored-by: Adam Stoler <astoler@bos-mp8o2.kendall.corp.akamai.com>","date":"2020-08-23 01:29:04","modifiedFileCount":"3","status":"M","submitter":"adam-stoler"},{"authorTime":"2021-02-02 06:32:23","codes":[{"authorDate":"2021-02-02 06:32:23","commitOrder":3,"curCode":"  void createParams() throws UnknownHostException, TextParseException {\n    List<Integer> mandatoryList = Arrays.asList(HTTPSRecord.ALPN, HTTPSRecord.IPV4HINT);\n    HTTPSRecord.ParameterMandatory mandatory = new HTTPSRecord.ParameterMandatory(mandatoryList);\n    assertEquals(HTTPSRecord.MANDATORY, mandatory.getKey());\n    assertEquals(mandatoryList, mandatory.getValues());\n\n    List<String> alpnList = Arrays.asList(\"h2\", \"h3\");\n    HTTPSRecord.ParameterAlpn alpn = new HTTPSRecord.ParameterAlpn(alpnList);\n    assertEquals(HTTPSRecord.ALPN, alpn.getKey());\n    assertEquals(alpnList, alpn.getValues());\n\n    HTTPSRecord.ParameterPort port = new HTTPSRecord.ParameterPort(8443);\n    assertEquals(HTTPSRecord.PORT, port.getKey());\n    assertEquals(8443, port.getPort());\n\n    List<Inet4Address> ipv4List =\n        Collections.singletonList((Inet4Address) InetAddress.getByName(\"1.2.3.4\"));\n    HTTPSRecord.ParameterIpv4Hint ipv4hint = new HTTPSRecord.ParameterIpv4Hint(ipv4List);\n    assertEquals(HTTPSRecord.IPV4HINT, ipv4hint.getKey());\n    assertEquals(ipv4List, ipv4hint.getAddresses());\n\n    byte[] data = {'a', 'b', 'c'};\n    HTTPSRecord.ParameterEchConfig echconfig = new HTTPSRecord.ParameterEchConfig(data);\n    assertEquals(HTTPSRecord.ECHCONFIG, echconfig.getKey());\n    assertEquals(data, echconfig.getData());\n\n    List<Inet6Address> ipv6List =\n        Collections.singletonList((Inet6Address) InetAddress.getByName(\"2001:db8::1\"));\n    HTTPSRecord.ParameterIpv6Hint ipv6hint = new HTTPSRecord.ParameterIpv6Hint(ipv6List);\n    assertEquals(HTTPSRecord.IPV6HINT, ipv6hint.getKey());\n    assertEquals(ipv6List, ipv6hint.getAddresses());\n\n    byte[] value = {0, 1, 2, 3};\n    HTTPSRecord.ParameterUnknown unknown = new HTTPSRecord.ParameterUnknown(33, value);\n    assertEquals(33, unknown.getKey());\n    assertEquals(value, unknown.getValue());\n  }\n","date":"2021-02-02 06:32:23","endLine":57,"groupId":"320","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/5b/dda5770f0a54d5048d5456ad5444b7244bde9e.src","preCode":"  void createParams() throws UnknownHostException, TextParseException {\n    List<Integer> mandatoryList = Arrays.asList(HTTPSRecord.ALPN, HTTPSRecord.IPV4HINT);\n    HTTPSRecord.ParameterMandatory mandatory = new HTTPSRecord.ParameterMandatory(mandatoryList);\n    assertEquals(HTTPSRecord.MANDATORY, mandatory.getKey());\n    assertEquals(mandatoryList, mandatory.getValues());\n\n    List<String> alpnList = Arrays.asList(\"h2\", \"h3\");\n    HTTPSRecord.ParameterAlpn alpn = new HTTPSRecord.ParameterAlpn(alpnList);\n    assertEquals(HTTPSRecord.ALPN, alpn.getKey());\n    assertEquals(alpnList, alpn.getValues());\n\n    HTTPSRecord.ParameterPort port = new HTTPSRecord.ParameterPort(8443);\n    assertEquals(HTTPSRecord.PORT, port.getKey());\n    assertEquals(8443, port.getPort());\n\n    List<Inet4Address> ipv4List = Arrays.asList((Inet4Address) InetAddress.getByName(\"1.2.3.4\"));\n    HTTPSRecord.ParameterIpv4Hint ipv4hint = new HTTPSRecord.ParameterIpv4Hint(ipv4List);\n    assertEquals(HTTPSRecord.IPV4HINT, ipv4hint.getKey());\n    assertEquals(ipv4List, ipv4hint.getAddresses());\n\n    byte[] data = {'a', 'b', 'c'};\n    HTTPSRecord.ParameterEchConfig echconfig = new HTTPSRecord.ParameterEchConfig(data);\n    assertEquals(HTTPSRecord.ECHCONFIG, echconfig.getKey());\n    assertEquals(data, echconfig.getData());\n\n    List<Inet6Address> ipv6List = Arrays.asList((Inet6Address) InetAddress.getByName(\"2001::1\"));\n    HTTPSRecord.ParameterIpv6Hint ipv6hint = new HTTPSRecord.ParameterIpv6Hint(ipv6List);\n    assertEquals(HTTPSRecord.IPV6HINT, ipv6hint.getKey());\n    assertEquals(ipv6List, ipv6hint.getAddresses());\n\n    byte[] value = {0, 1, 2, 3};\n    HTTPSRecord.ParameterUnknown unknown = new HTTPSRecord.ParameterUnknown(33, value);\n    assertEquals(33, unknown.getKey());\n    assertEquals(value, unknown.getValue());\n  }\n","realPath":"src/test/java/org/xbill/DNS/HTTPSRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":21,"status":"M"},{"authorDate":"2021-02-02 06:32:23","commitOrder":3,"curCode":"  void createParams() throws UnknownHostException, TextParseException {\n    List<Integer> mandatoryList = Arrays.asList(SVCBRecord.ALPN, SVCBRecord.IPV4HINT);\n    SVCBRecord.ParameterMandatory mandatory = new SVCBBase.ParameterMandatory(mandatoryList);\n    assertEquals(SVCBRecord.MANDATORY, mandatory.getKey());\n    assertEquals(mandatoryList, mandatory.getValues());\n\n    List<String> alpnList = Arrays.asList(\"h2\", \"h3\");\n    SVCBRecord.ParameterAlpn alpn = new SVCBRecord.ParameterAlpn(alpnList);\n    assertEquals(SVCBRecord.ALPN, alpn.getKey());\n    assertEquals(alpnList, alpn.getValues());\n\n    SVCBRecord.ParameterPort port = new SVCBBase.ParameterPort(8443);\n    assertEquals(SVCBRecord.PORT, port.getKey());\n    assertEquals(8443, port.getPort());\n\n    List<Inet4Address> ipv4List =\n        Collections.singletonList((Inet4Address) InetAddress.getByName(\"1.2.3.4\"));\n    SVCBRecord.ParameterIpv4Hint ipv4hint = new SVCBRecord.ParameterIpv4Hint(ipv4List);\n    assertEquals(SVCBRecord.IPV4HINT, ipv4hint.getKey());\n    assertEquals(ipv4List, ipv4hint.getAddresses());\n\n    byte[] data = {'a', 'b', 'c'};\n    SVCBRecord.ParameterEchConfig echconfig = new SVCBRecord.ParameterEchConfig(data);\n    assertEquals(SVCBRecord.ECHCONFIG, echconfig.getKey());\n    assertEquals(data, echconfig.getData());\n\n    List<Inet6Address> ipv6List =\n        Collections.singletonList((Inet6Address) InetAddress.getByName(\"2001:db8::1\"));\n    SVCBRecord.ParameterIpv6Hint ipv6hint = new SVCBRecord.ParameterIpv6Hint(ipv6List);\n    assertEquals(SVCBRecord.IPV6HINT, ipv6hint.getKey());\n    assertEquals(ipv6List, ipv6hint.getAddresses());\n\n    byte[] value = {0, 1, 2, 3};\n    SVCBRecord.ParameterUnknown unknown = new SVCBRecord.ParameterUnknown(33, value);\n    assertEquals(33, unknown.getKey());\n    assertEquals(value, unknown.getValue());\n  }\n","date":"2021-02-02 06:32:23","endLine":58,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/b1/edf55da9ff1075894de29f9d9833062082e67e.src","preCode":"  void createParams() throws UnknownHostException, TextParseException {\n    List<Integer> mandatoryList = Arrays.asList(SVCBRecord.ALPN, SVCBRecord.IPV4HINT);\n    SVCBRecord.ParameterMandatory mandatory = new SVCBBase.ParameterMandatory(mandatoryList);\n    assertEquals(SVCBRecord.MANDATORY, mandatory.getKey());\n    assertEquals(mandatoryList, mandatory.getValues());\n\n    List<String> alpnList = Arrays.asList(\"h2\", \"h3\");\n    SVCBRecord.ParameterAlpn alpn = new SVCBRecord.ParameterAlpn(alpnList);\n    assertEquals(SVCBRecord.ALPN, alpn.getKey());\n    assertEquals(alpnList, alpn.getValues());\n\n    SVCBRecord.ParameterPort port = new SVCBBase.ParameterPort(8443);\n    assertEquals(SVCBRecord.PORT, port.getKey());\n    assertEquals(8443, port.getPort());\n\n    List<Inet4Address> ipv4List = Arrays.asList((Inet4Address) InetAddress.getByName(\"1.2.3.4\"));\n    SVCBRecord.ParameterIpv4Hint ipv4hint = new SVCBRecord.ParameterIpv4Hint(ipv4List);\n    assertEquals(SVCBRecord.IPV4HINT, ipv4hint.getKey());\n    assertEquals(ipv4List, ipv4hint.getAddresses());\n\n    byte[] data = {'a', 'b', 'c'};\n    SVCBRecord.ParameterEchConfig echconfig = new SVCBRecord.ParameterEchConfig(data);\n    assertEquals(SVCBRecord.ECHCONFIG, echconfig.getKey());\n    assertEquals(data, echconfig.getData());\n\n    List<Inet6Address> ipv6List = Arrays.asList((Inet6Address) InetAddress.getByName(\"2001::1\"));\n    SVCBRecord.ParameterIpv6Hint ipv6hint = new SVCBRecord.ParameterIpv6Hint(ipv6List);\n    assertEquals(SVCBRecord.IPV6HINT, ipv6hint.getKey());\n    assertEquals(ipv6List, ipv6hint.getAddresses());\n\n    byte[] value = {0, 1, 2, 3};\n    SVCBRecord.ParameterUnknown unknown = new SVCBRecord.ParameterUnknown(33, value);\n    assertEquals(33, unknown.getKey());\n    assertEquals(value, unknown.getValue());\n  }\n","realPath":"src/test/java/org/xbill/DNS/SVCBRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":22,"status":"M"}],"commitId":"346acf3e25d3473e5c75264ce082e83ebf0bd7b8","commitMessage":"@@@Cleanup of example IPv6 addresses and redundant parentheses\n","date":"2021-02-02 06:32:23","modifiedFileCount":"2","status":"M","submitter":"Ingo Bauersachs"},{"authorTime":"2021-07-08 05:02:06","codes":[{"authorDate":"2021-07-08 05:02:06","commitOrder":4,"curCode":"  void createParams() throws UnknownHostException, TextParseException {\n    List<Integer> mandatoryList = Arrays.asList(HTTPSRecord.ALPN, HTTPSRecord.IPV4HINT);\n    HTTPSRecord.ParameterMandatory mandatory = new HTTPSRecord.ParameterMandatory(mandatoryList);\n    assertEquals(HTTPSRecord.MANDATORY, mandatory.getKey());\n    assertEquals(mandatoryList, mandatory.getValues());\n\n    List<String> alpnList = Arrays.asList(\"h2\", \"h3\");\n    HTTPSRecord.ParameterAlpn alpn = new HTTPSRecord.ParameterAlpn(alpnList);\n    assertEquals(HTTPSRecord.ALPN, alpn.getKey());\n    assertEquals(alpnList, alpn.getValues());\n\n    HTTPSRecord.ParameterPort port = new HTTPSRecord.ParameterPort(8443);\n    assertEquals(HTTPSRecord.PORT, port.getKey());\n    assertEquals(8443, port.getPort());\n\n    List<Inet4Address> ipv4List =\n        Collections.singletonList((Inet4Address) InetAddress.getByName(\"1.2.3.4\"));\n    HTTPSRecord.ParameterIpv4Hint ipv4hint = new HTTPSRecord.ParameterIpv4Hint(ipv4List);\n    assertEquals(HTTPSRecord.IPV4HINT, ipv4hint.getKey());\n    assertEquals(ipv4List, ipv4hint.getAddresses());\n\n    byte[] data = {'a', 'b', 'c'};\n    SVCBBase.ParameterEch ech = new SVCBBase.ParameterEch(data);\n    assertEquals(HTTPSRecord.ECH, ech.getKey());\n    assertEquals(data, ech.getData());\n\n    HTTPSRecord.ParameterEchConfig echconfig = new HTTPSRecord.ParameterEchConfig(data);\n    assertEquals(HTTPSRecord.ECHCONFIG, echconfig.getKey());\n    assertEquals(data, echconfig.getData());\n\n    List<Inet6Address> ipv6List =\n        Collections.singletonList((Inet6Address) InetAddress.getByName(\"2001:db8::1\"));\n    HTTPSRecord.ParameterIpv6Hint ipv6hint = new HTTPSRecord.ParameterIpv6Hint(ipv6List);\n    assertEquals(HTTPSRecord.IPV6HINT, ipv6hint.getKey());\n    assertEquals(ipv6List, ipv6hint.getAddresses());\n\n    byte[] value = {0, 1, 2, 3};\n    HTTPSRecord.ParameterUnknown unknown = new HTTPSRecord.ParameterUnknown(33, value);\n    assertEquals(33, unknown.getKey());\n    assertEquals(value, unknown.getValue());\n  }\n","date":"2021-07-08 05:02:06","endLine":61,"groupId":"10118","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/a8/ee3a8f1e1cb8e52fb33c13db33f5c51bd694c1.src","preCode":"  void createParams() throws UnknownHostException, TextParseException {\n    List<Integer> mandatoryList = Arrays.asList(HTTPSRecord.ALPN, HTTPSRecord.IPV4HINT);\n    HTTPSRecord.ParameterMandatory mandatory = new HTTPSRecord.ParameterMandatory(mandatoryList);\n    assertEquals(HTTPSRecord.MANDATORY, mandatory.getKey());\n    assertEquals(mandatoryList, mandatory.getValues());\n\n    List<String> alpnList = Arrays.asList(\"h2\", \"h3\");\n    HTTPSRecord.ParameterAlpn alpn = new HTTPSRecord.ParameterAlpn(alpnList);\n    assertEquals(HTTPSRecord.ALPN, alpn.getKey());\n    assertEquals(alpnList, alpn.getValues());\n\n    HTTPSRecord.ParameterPort port = new HTTPSRecord.ParameterPort(8443);\n    assertEquals(HTTPSRecord.PORT, port.getKey());\n    assertEquals(8443, port.getPort());\n\n    List<Inet4Address> ipv4List =\n        Collections.singletonList((Inet4Address) InetAddress.getByName(\"1.2.3.4\"));\n    HTTPSRecord.ParameterIpv4Hint ipv4hint = new HTTPSRecord.ParameterIpv4Hint(ipv4List);\n    assertEquals(HTTPSRecord.IPV4HINT, ipv4hint.getKey());\n    assertEquals(ipv4List, ipv4hint.getAddresses());\n\n    byte[] data = {'a', 'b', 'c'};\n    HTTPSRecord.ParameterEchConfig echconfig = new HTTPSRecord.ParameterEchConfig(data);\n    assertEquals(HTTPSRecord.ECHCONFIG, echconfig.getKey());\n    assertEquals(data, echconfig.getData());\n\n    List<Inet6Address> ipv6List =\n        Collections.singletonList((Inet6Address) InetAddress.getByName(\"2001:db8::1\"));\n    HTTPSRecord.ParameterIpv6Hint ipv6hint = new HTTPSRecord.ParameterIpv6Hint(ipv6List);\n    assertEquals(HTTPSRecord.IPV6HINT, ipv6hint.getKey());\n    assertEquals(ipv6List, ipv6hint.getAddresses());\n\n    byte[] value = {0, 1, 2, 3};\n    HTTPSRecord.ParameterUnknown unknown = new HTTPSRecord.ParameterUnknown(33, value);\n    assertEquals(33, unknown.getKey());\n    assertEquals(value, unknown.getValue());\n  }\n","realPath":"src/test/java/org/xbill/DNS/HTTPSRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":21,"status":"M"},{"authorDate":"2021-07-08 05:02:06","commitOrder":4,"curCode":"  void createParams() throws UnknownHostException, TextParseException {\n    List<Integer> mandatoryList = Arrays.asList(SVCBRecord.ALPN, SVCBRecord.IPV4HINT);\n    SVCBRecord.ParameterMandatory mandatory = new SVCBBase.ParameterMandatory(mandatoryList);\n    assertEquals(SVCBRecord.MANDATORY, mandatory.getKey());\n    assertEquals(mandatoryList, mandatory.getValues());\n\n    List<String> alpnList = Arrays.asList(\"h2\", \"h3\");\n    SVCBRecord.ParameterAlpn alpn = new SVCBRecord.ParameterAlpn(alpnList);\n    assertEquals(SVCBRecord.ALPN, alpn.getKey());\n    assertEquals(alpnList, alpn.getValues());\n\n    SVCBRecord.ParameterPort port = new SVCBBase.ParameterPort(8443);\n    assertEquals(SVCBRecord.PORT, port.getKey());\n    assertEquals(8443, port.getPort());\n\n    List<Inet4Address> ipv4List =\n        Collections.singletonList((Inet4Address) InetAddress.getByName(\"1.2.3.4\"));\n    SVCBRecord.ParameterIpv4Hint ipv4hint = new SVCBRecord.ParameterIpv4Hint(ipv4List);\n    assertEquals(SVCBRecord.IPV4HINT, ipv4hint.getKey());\n    assertEquals(ipv4List, ipv4hint.getAddresses());\n\n    byte[] data = {'a', 'b', 'c'};\n    SVCBBase.ParameterEch ech = new SVCBBase.ParameterEch(data);\n    assertEquals(SVCBRecord.ECH, ech.getKey());\n    assertEquals(data, ech.getData());\n\n    SVCBRecord.ParameterEchConfig echconfig = new SVCBRecord.ParameterEchConfig(data);\n    assertEquals(SVCBRecord.ECHCONFIG, echconfig.getKey());\n    assertEquals(data, echconfig.getData());\n\n    List<Inet6Address> ipv6List =\n        Collections.singletonList((Inet6Address) InetAddress.getByName(\"2001:db8::1\"));\n    SVCBRecord.ParameterIpv6Hint ipv6hint = new SVCBRecord.ParameterIpv6Hint(ipv6List);\n    assertEquals(SVCBRecord.IPV6HINT, ipv6hint.getKey());\n    assertEquals(ipv6List, ipv6hint.getAddresses());\n\n    byte[] value = {0, 1, 2, 3};\n    SVCBRecord.ParameterUnknown unknown = new SVCBRecord.ParameterUnknown(33, value);\n    assertEquals(33, unknown.getKey());\n    assertEquals(value, unknown.getValue());\n  }\n","date":"2021-07-08 05:02:06","endLine":62,"groupId":"10118","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/fa/6d8ec043af272bbd6145dfc829982dd09cfe4a.src","preCode":"  void createParams() throws UnknownHostException, TextParseException {\n    List<Integer> mandatoryList = Arrays.asList(SVCBRecord.ALPN, SVCBRecord.IPV4HINT);\n    SVCBRecord.ParameterMandatory mandatory = new SVCBBase.ParameterMandatory(mandatoryList);\n    assertEquals(SVCBRecord.MANDATORY, mandatory.getKey());\n    assertEquals(mandatoryList, mandatory.getValues());\n\n    List<String> alpnList = Arrays.asList(\"h2\", \"h3\");\n    SVCBRecord.ParameterAlpn alpn = new SVCBRecord.ParameterAlpn(alpnList);\n    assertEquals(SVCBRecord.ALPN, alpn.getKey());\n    assertEquals(alpnList, alpn.getValues());\n\n    SVCBRecord.ParameterPort port = new SVCBBase.ParameterPort(8443);\n    assertEquals(SVCBRecord.PORT, port.getKey());\n    assertEquals(8443, port.getPort());\n\n    List<Inet4Address> ipv4List =\n        Collections.singletonList((Inet4Address) InetAddress.getByName(\"1.2.3.4\"));\n    SVCBRecord.ParameterIpv4Hint ipv4hint = new SVCBRecord.ParameterIpv4Hint(ipv4List);\n    assertEquals(SVCBRecord.IPV4HINT, ipv4hint.getKey());\n    assertEquals(ipv4List, ipv4hint.getAddresses());\n\n    byte[] data = {'a', 'b', 'c'};\n    SVCBRecord.ParameterEchConfig echconfig = new SVCBRecord.ParameterEchConfig(data);\n    assertEquals(SVCBRecord.ECHCONFIG, echconfig.getKey());\n    assertEquals(data, echconfig.getData());\n\n    List<Inet6Address> ipv6List =\n        Collections.singletonList((Inet6Address) InetAddress.getByName(\"2001:db8::1\"));\n    SVCBRecord.ParameterIpv6Hint ipv6hint = new SVCBRecord.ParameterIpv6Hint(ipv6List);\n    assertEquals(SVCBRecord.IPV6HINT, ipv6hint.getKey());\n    assertEquals(ipv6List, ipv6hint.getAddresses());\n\n    byte[] value = {0, 1, 2, 3};\n    SVCBRecord.ParameterUnknown unknown = new SVCBRecord.ParameterUnknown(33, value);\n    assertEquals(33, unknown.getKey());\n    assertEquals(value, unknown.getValue());\n  }\n","realPath":"src/test/java/org/xbill/DNS/SVCBRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":22,"status":"M"}],"commitId":"259ea0d6816e0b54151bb20888ad9540a15734f9","commitMessage":"@@@Rename echconfig to ech in SVCB/HTTPS records (#202)\n\n* Rename echconfig to ech\n\n* Add test for obsolete echconfig name being rejected\n\n* Add duplicate ECHCONFIG value and ParameterEchConfig class for backwards compatibility\n\n* Make ParameterEchConfig a deprecated duplicate class instead of inheriting for full compatibility\n\n* Updates for javadoc\n\n* Add backwards compatibility support for parsing echconfig name as an alias of ech\n\nCo-authored-by: Adam Stoler <astoler@bos-mp8o2.fios-router.home>","date":"2021-07-08 05:02:06","modifiedFileCount":"6","status":"M","submitter":"adam-stoler"}]
