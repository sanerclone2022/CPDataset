[{"authorTime":"2019-10-27 23:04:41","codes":[{"authorDate":"2019-10-27 23:04:41","commitOrder":1,"curCode":"  void ctor_6arg() {\n    A6Record ar = new A6Record(m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, null);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.A6, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_prefix_bits, ar.getPrefixBits());\n    assertEquals(m_addr, ar.getSuffix());\n    assertNull(ar.getPrefix());\n\n    \r\n    ar = new A6Record(m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, m_an2);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.A6, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_prefix_bits, ar.getPrefixBits());\n    assertEquals(m_addr, ar.getSuffix());\n    assertEquals(m_an2, ar.getPrefix());\n\n    \r\n    assertThrows(\n        RelativeNameException.class,\n        () -> new A6Record(m_rn, DClass.IN, m_ttl, m_prefix_bits, m_addr, null));\n\n    \r\n    assertThrows(\n        RelativeNameException.class,\n        () -> new A6Record(m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, m_rn));\n\n    \r\n    assertThrows(\n        RelativeNameException.class,\n        () -> new A6Record(m_rn, DClass.IN, m_ttl, 0x100, m_addr, null));\n\n    \r\n    try {\n      new A6Record(\n          m_an, DClass.IN, m_ttl, m_prefix_bits, InetAddress.getByName(\"192.168.0.1\"), null);\n      fail(\"IllegalArgumentException not thrown\");\n    } catch (IllegalArgumentException e) {\n    } catch (UnknownHostException e) {\n      fail(e.getMessage());\n    }\n  }\n","date":"2019-10-27 23:56:59","endLine":135,"groupId":"1447","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"ctor_6arg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/04/c9ade709e8e1556adcfb55608ebd470134f822.src","preCode":"  void ctor_6arg() {\n    A6Record ar = new A6Record(m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, null);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.A6, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_prefix_bits, ar.getPrefixBits());\n    assertEquals(m_addr, ar.getSuffix());\n    assertNull(ar.getPrefix());\n\n    \r\n    ar = new A6Record(m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, m_an2);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.A6, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_prefix_bits, ar.getPrefixBits());\n    assertEquals(m_addr, ar.getSuffix());\n    assertEquals(m_an2, ar.getPrefix());\n\n    \r\n    assertThrows(\n        RelativeNameException.class,\n        () -> new A6Record(m_rn, DClass.IN, m_ttl, m_prefix_bits, m_addr, null));\n\n    \r\n    assertThrows(\n        RelativeNameException.class,\n        () -> new A6Record(m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, m_rn));\n\n    \r\n    assertThrows(\n        RelativeNameException.class,\n        () -> new A6Record(m_rn, DClass.IN, m_ttl, 0x100, m_addr, null));\n\n    \r\n    try {\n      new A6Record(\n          m_an, DClass.IN, m_ttl, m_prefix_bits, InetAddress.getByName(\"192.168.0.1\"), null);\n      fail(\"IllegalArgumentException not thrown\");\n    } catch (IllegalArgumentException e) {\n    } catch (UnknownHostException e) {\n      fail(e.getMessage());\n    }\n  }\n","realPath":"src/test/java/org/xbill/DNS/A6RecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"},{"authorDate":"2019-10-27 23:04:41","commitOrder":1,"curCode":"  void ctor_4arg() {\n    AAAARecord ar = new AAAARecord(m_an, DClass.IN, m_ttl, m_addr);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.AAAA, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_addr, ar.getAddress());\n\n    \r\n    assertThrows(RelativeNameException.class, () -> new AAAARecord(m_rn, DClass.IN, m_ttl, m_addr));\n\n    \r\n    try {\n      new AAAARecord(m_an, DClass.IN, m_ttl, InetAddress.getByName(\"192.168.0.1\"));\n      fail(\"IllegalArgumentException not thrown\");\n    } catch (IllegalArgumentException e) {\n    } catch (UnknownHostException e) {\n      fail(e.getMessage());\n    }\n  }\n","date":"2019-10-27 23:56:59","endLine":105,"groupId":"355","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"ctor_4arg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/08/6fd06522ff1cc2cf9e05e811ec07b19901e625.src","preCode":"  void ctor_4arg() {\n    AAAARecord ar = new AAAARecord(m_an, DClass.IN, m_ttl, m_addr);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.AAAA, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_addr, ar.getAddress());\n\n    \r\n    assertThrows(RelativeNameException.class, () -> new AAAARecord(m_rn, DClass.IN, m_ttl, m_addr));\n\n    \r\n    try {\n      new AAAARecord(m_an, DClass.IN, m_ttl, InetAddress.getByName(\"192.168.0.1\"));\n      fail(\"IllegalArgumentException not thrown\");\n    } catch (IllegalArgumentException e) {\n    } catch (UnknownHostException e) {\n      fail(e.getMessage());\n    }\n  }\n","realPath":"src/test/java/org/xbill/DNS/AAAARecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"4276ad715c2cff76a244b67c02f0035faa1b6220","commitMessage":"@@@Remove test_ prefix from test methods\n","date":"2019-10-27 23:56:59","modifiedFileCount":"58","status":"B","submitter":"Ingo Bauersachs"},{"authorTime":"2020-08-29 04:40:32","codes":[{"authorDate":"2019-10-27 23:04:41","commitOrder":2,"curCode":"  void ctor_6arg() {\n    A6Record ar = new A6Record(m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, null);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.A6, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_prefix_bits, ar.getPrefixBits());\n    assertEquals(m_addr, ar.getSuffix());\n    assertNull(ar.getPrefix());\n\n    \r\n    ar = new A6Record(m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, m_an2);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.A6, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_prefix_bits, ar.getPrefixBits());\n    assertEquals(m_addr, ar.getSuffix());\n    assertEquals(m_an2, ar.getPrefix());\n\n    \r\n    assertThrows(\n        RelativeNameException.class,\n        () -> new A6Record(m_rn, DClass.IN, m_ttl, m_prefix_bits, m_addr, null));\n\n    \r\n    assertThrows(\n        RelativeNameException.class,\n        () -> new A6Record(m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, m_rn));\n\n    \r\n    assertThrows(\n        RelativeNameException.class,\n        () -> new A6Record(m_rn, DClass.IN, m_ttl, 0x100, m_addr, null));\n\n    \r\n    try {\n      new A6Record(\n          m_an, DClass.IN, m_ttl, m_prefix_bits, InetAddress.getByName(\"192.168.0.1\"), null);\n      fail(\"IllegalArgumentException not thrown\");\n    } catch (IllegalArgumentException e) {\n    } catch (UnknownHostException e) {\n      fail(e.getMessage());\n    }\n  }\n","date":"2019-10-27 23:56:59","endLine":135,"groupId":"1447","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"ctor_6arg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/04/c9ade709e8e1556adcfb55608ebd470134f822.src","preCode":"  void ctor_6arg() {\n    A6Record ar = new A6Record(m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, null);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.A6, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_prefix_bits, ar.getPrefixBits());\n    assertEquals(m_addr, ar.getSuffix());\n    assertNull(ar.getPrefix());\n\n    \r\n    ar = new A6Record(m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, m_an2);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.A6, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_prefix_bits, ar.getPrefixBits());\n    assertEquals(m_addr, ar.getSuffix());\n    assertEquals(m_an2, ar.getPrefix());\n\n    \r\n    assertThrows(\n        RelativeNameException.class,\n        () -> new A6Record(m_rn, DClass.IN, m_ttl, m_prefix_bits, m_addr, null));\n\n    \r\n    assertThrows(\n        RelativeNameException.class,\n        () -> new A6Record(m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, m_rn));\n\n    \r\n    assertThrows(\n        RelativeNameException.class,\n        () -> new A6Record(m_rn, DClass.IN, m_ttl, 0x100, m_addr, null));\n\n    \r\n    try {\n      new A6Record(\n          m_an, DClass.IN, m_ttl, m_prefix_bits, InetAddress.getByName(\"192.168.0.1\"), null);\n      fail(\"IllegalArgumentException not thrown\");\n    } catch (IllegalArgumentException e) {\n    } catch (UnknownHostException e) {\n      fail(e.getMessage());\n    }\n  }\n","realPath":"src/test/java/org/xbill/DNS/A6RecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"N"},{"authorDate":"2020-08-29 04:40:32","commitOrder":2,"curCode":"  void ctor_4arg() {\n    AAAARecord ar = new AAAARecord(m_an, DClass.IN, m_ttl, m_addr);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.AAAA, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_addr, ar.getAddress());\n\n    \r\n    assertThrows(RelativeNameException.class, () -> new AAAARecord(m_rn, DClass.IN, m_ttl, m_addr));\n  }\n","date":"2020-08-29 04:40:32","endLine":87,"groupId":"355","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"ctor_4arg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/54/f70825255e6f3bc3b7afbce3f9c9319540c909.src","preCode":"  void ctor_4arg() {\n    AAAARecord ar = new AAAARecord(m_an, DClass.IN, m_ttl, m_addr);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.AAAA, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_addr, ar.getAddress());\n\n    \r\n    assertThrows(RelativeNameException.class, () -> new AAAARecord(m_rn, DClass.IN, m_ttl, m_addr));\n\n    \r\n    try {\n      new AAAARecord(m_an, DClass.IN, m_ttl, InetAddress.getByName(\"192.168.0.1\"));\n      fail(\"IllegalArgumentException not thrown\");\n    } catch (IllegalArgumentException e) {\n    } catch (UnknownHostException e) {\n      fail(e.getMessage());\n    }\n  }\n","realPath":"src/test/java/org/xbill/DNS/AAAARecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"791b5d69d3d9acb1e83ab6b5775484978bdf5f52","commitMessage":"@@@Support IPv4 mapped IPv6 address in AAAA record (#120)\n\n","date":"2020-08-29 04:40:32","modifiedFileCount":"2","status":"M","submitter":"SPWei"},{"authorTime":"2020-08-29 04:40:32","codes":[{"authorDate":"2021-08-16 05:58:27","commitOrder":3,"curCode":"  void ctor_6arg() {\n    A6Record ar = new A6Record(m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, null);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.A6, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_prefix_bits, ar.getPrefixBits());\n    assertEquals(m_addr, ar.getSuffix());\n    assertNull(ar.getPrefix());\n\n    \r\n    ar = new A6Record(m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, m_an2);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.A6, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_prefix_bits, ar.getPrefixBits());\n    assertEquals(m_addr, ar.getSuffix());\n    assertEquals(m_an2, ar.getPrefix());\n\n    \r\n    assertThrows(\n        RelativeNameException.class,\n        () -> new A6Record(m_rn, DClass.IN, m_ttl, m_prefix_bits, m_addr, null));\n\n    \r\n    assertThrows(\n        RelativeNameException.class,\n        () -> new A6Record(m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, m_rn));\n\n    \r\n    assertThrows(\n        RelativeNameException.class,\n        () -> new A6Record(m_rn, DClass.IN, m_ttl, 0x100, m_addr, null));\n\n    \r\n    assertThrows(\n        IllegalArgumentException.class,\n        () ->\n            new A6Record(\n                m_an, DClass.IN, m_ttl, m_prefix_bits, InetAddress.getByName(\"192.168.0.1\"), null));\n  }\n","date":"2021-08-16 06:00:47","endLine":124,"groupId":"1062","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"ctor_6arg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/2f/14a42cc4048525d61cfd73538ead2dbb39d628.src","preCode":"  void ctor_6arg() {\n    A6Record ar = new A6Record(m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, null);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.A6, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_prefix_bits, ar.getPrefixBits());\n    assertEquals(m_addr, ar.getSuffix());\n    assertNull(ar.getPrefix());\n\n    \r\n    ar = new A6Record(m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, m_an2);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.A6, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_prefix_bits, ar.getPrefixBits());\n    assertEquals(m_addr, ar.getSuffix());\n    assertEquals(m_an2, ar.getPrefix());\n\n    \r\n    assertThrows(\n        RelativeNameException.class,\n        () -> new A6Record(m_rn, DClass.IN, m_ttl, m_prefix_bits, m_addr, null));\n\n    \r\n    assertThrows(\n        RelativeNameException.class,\n        () -> new A6Record(m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, m_rn));\n\n    \r\n    assertThrows(\n        RelativeNameException.class,\n        () -> new A6Record(m_rn, DClass.IN, m_ttl, 0x100, m_addr, null));\n\n    \r\n    try {\n      new A6Record(\n          m_an, DClass.IN, m_ttl, m_prefix_bits, InetAddress.getByName(\"192.168.0.1\"), null);\n      fail(\"IllegalArgumentException not thrown\");\n    } catch (IllegalArgumentException e) {\n    } catch (UnknownHostException e) {\n      fail(e.getMessage());\n    }\n  }\n","realPath":"src/test/java/org/xbill/DNS/A6RecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2020-08-29 04:40:32","commitOrder":3,"curCode":"  void ctor_4arg() {\n    AAAARecord ar = new AAAARecord(m_an, DClass.IN, m_ttl, m_addr);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.AAAA, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_addr, ar.getAddress());\n\n    \r\n    assertThrows(RelativeNameException.class, () -> new AAAARecord(m_rn, DClass.IN, m_ttl, m_addr));\n  }\n","date":"2020-08-29 04:40:32","endLine":87,"groupId":"1062","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"ctor_4arg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/54/f70825255e6f3bc3b7afbce3f9c9319540c909.src","preCode":"  void ctor_4arg() {\n    AAAARecord ar = new AAAARecord(m_an, DClass.IN, m_ttl, m_addr);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.AAAA, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_addr, ar.getAddress());\n\n    \r\n    assertThrows(RelativeNameException.class, () -> new AAAARecord(m_rn, DClass.IN, m_ttl, m_addr));\n  }\n","realPath":"src/test/java/org/xbill/DNS/AAAARecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"77d50ef15c1f8db70e9fb177810796d3a0cb5b9f","commitMessage":"@@@Cleanup tests as reported by Sonar\n","date":"2021-08-16 06:00:47","modifiedFileCount":"18","status":"M","submitter":"Ingo Bauersachs"}]
