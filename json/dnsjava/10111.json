[{"authorTime":"2020-08-22 20:07:59","codes":[{"authorDate":"2020-08-22 20:07:59","commitOrder":1,"curCode":"  void testNdots1() throws IOException {\n    try {\n      System.setProperty(CONFIGPROVIDER_SKIP_INIT, \"true\");\n      Resolver mockResolver = Mockito.mock(Resolver.class);\n      Name queryName = Name.fromConstantString(\"example.com\");\n      when(mockResolver.send(any(Message.class)))\n          .thenAnswer(\n              (Answer<Message>)\n                  invocation -> {\n                    Message query = invocation.getArgument(0);\n                    Message answer = new Message(query.getHeader().getID());\n                    answer.addRecord(query.getQuestion(), Section.QUESTION);\n                    answer.addRecord(\n                        new ARecord(\n                            query.getQuestion().getName(),\n                            DClass.IN,\n                            60,\n                            InetAddress.getByName(\"127.0.0.1\")),\n                        Section.ANSWER);\n                    return answer;\n                  });\n      Lookup l = new Lookup(queryName, Type.A);\n      l.setCache(null);\n      l.setResolver(mockResolver);\n      l.setSearchPath(\"namespace.svc.cluster.local\", \"svc.cluster.local\", \"cluster.local\");\n      Record[] results = l.run();\n      verify(mockResolver, times(1)).send(any(Message.class));\n      assertEquals(1, results.length);\n    } finally {\n      System.clearProperty(CONFIGPROVIDER_SKIP_INIT);\n    }\n  }\n","date":"2020-08-22 20:07:59","endLine":50,"groupId":"775","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNdots1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/e1/332d605f910e75e74971f69a44455bcb7532b3.src","preCode":"  void testNdots1() throws IOException {\n    try {\n      System.setProperty(CONFIGPROVIDER_SKIP_INIT, \"true\");\n      Resolver mockResolver = Mockito.mock(Resolver.class);\n      Name queryName = Name.fromConstantString(\"example.com\");\n      when(mockResolver.send(any(Message.class)))\n          .thenAnswer(\n              (Answer<Message>)\n                  invocation -> {\n                    Message query = invocation.getArgument(0);\n                    Message answer = new Message(query.getHeader().getID());\n                    answer.addRecord(query.getQuestion(), Section.QUESTION);\n                    answer.addRecord(\n                        new ARecord(\n                            query.getQuestion().getName(),\n                            DClass.IN,\n                            60,\n                            InetAddress.getByName(\"127.0.0.1\")),\n                        Section.ANSWER);\n                    return answer;\n                  });\n      Lookup l = new Lookup(queryName, Type.A);\n      l.setCache(null);\n      l.setResolver(mockResolver);\n      l.setSearchPath(\"namespace.svc.cluster.local\", \"svc.cluster.local\", \"cluster.local\");\n      Record[] results = l.run();\n      verify(mockResolver, times(1)).send(any(Message.class));\n      assertEquals(1, results.length);\n    } finally {\n      System.clearProperty(CONFIGPROVIDER_SKIP_INIT);\n    }\n  }\n","realPath":"src/test/java/org/xbill/DNS/LookupTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":19,"status":"B"},{"authorDate":"2020-08-22 20:07:59","commitOrder":1,"curCode":"  void testNdotsFallbackToAbsolute() throws IOException {\n    try {\n      System.setProperty(CONFIGPROVIDER_SKIP_INIT, \"true\");\n      Resolver mockResolver = Mockito.mock(Resolver.class);\n      Name queryName = Name.fromConstantString(\"example.com\");\n      when(mockResolver.send(any(Message.class)))\n          .thenAnswer(\n              (Answer<Message>)\n                  invocation -> {\n                    Message query = invocation.getArgument(0);\n                    Message answer = new Message(query.getHeader().getID());\n                    answer.addRecord(query.getQuestion(), Section.QUESTION);\n                    if (query.getQuestion().getName().labels() == 3) {\n                      answer.addRecord(\n                          new ARecord(\n                              query.getQuestion().getName(),\n                              DClass.IN,\n                              60,\n                              InetAddress.getByName(\"127.0.0.1\")),\n                          Section.ANSWER);\n                    } else {\n                      answer.getHeader().setRcode(Rcode.NXDOMAIN);\n                    }\n                    return answer;\n                  });\n      Lookup l = new Lookup(queryName, Type.A);\n      l.setCache(null);\n      l.setResolver(mockResolver);\n      l.setNdots(5);\n      l.setSearchPath(\"namespace.svc.cluster.local\", \"svc.cluster.local\", \"cluster.local\");\n      Record[] results = l.run();\n      verify(mockResolver, times(4)).send(any(Message.class));\n      assertEquals(1, results.length);\n    } finally {\n      System.clearProperty(CONFIGPROVIDER_SKIP_INIT);\n    }\n  }\n","date":"2020-08-22 20:07:59","endLine":89,"groupId":"775","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNdotsFallbackToAbsolute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/e1/332d605f910e75e74971f69a44455bcb7532b3.src","preCode":"  void testNdotsFallbackToAbsolute() throws IOException {\n    try {\n      System.setProperty(CONFIGPROVIDER_SKIP_INIT, \"true\");\n      Resolver mockResolver = Mockito.mock(Resolver.class);\n      Name queryName = Name.fromConstantString(\"example.com\");\n      when(mockResolver.send(any(Message.class)))\n          .thenAnswer(\n              (Answer<Message>)\n                  invocation -> {\n                    Message query = invocation.getArgument(0);\n                    Message answer = new Message(query.getHeader().getID());\n                    answer.addRecord(query.getQuestion(), Section.QUESTION);\n                    if (query.getQuestion().getName().labels() == 3) {\n                      answer.addRecord(\n                          new ARecord(\n                              query.getQuestion().getName(),\n                              DClass.IN,\n                              60,\n                              InetAddress.getByName(\"127.0.0.1\")),\n                          Section.ANSWER);\n                    } else {\n                      answer.getHeader().setRcode(Rcode.NXDOMAIN);\n                    }\n                    return answer;\n                  });\n      Lookup l = new Lookup(queryName, Type.A);\n      l.setCache(null);\n      l.setResolver(mockResolver);\n      l.setNdots(5);\n      l.setSearchPath(\"namespace.svc.cluster.local\", \"svc.cluster.local\", \"cluster.local\");\n      Record[] results = l.run();\n      verify(mockResolver, times(4)).send(any(Message.class));\n      assertEquals(1, results.length);\n    } finally {\n      System.clearProperty(CONFIGPROVIDER_SKIP_INIT);\n    }\n  }\n","realPath":"src/test/java/org/xbill/DNS/LookupTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"}],"commitId":"e5799f3e5757c1eac10ccb9809f33df00e5e7dae","commitMessage":"@@@Merge branch '3.2.x'\n","date":"2020-08-22 20:07:59","modifiedFileCount":"1","status":"B","submitter":"Ingo Bauersachs"},{"authorTime":"2021-02-03 17:52:16","codes":[{"authorDate":"2021-02-03 17:52:16","commitOrder":2,"curCode":"  void testNdots1() throws Exception {\n    Resolver mockResolver = Mockito.mock(Resolver.class);\n    wireUpMockResolver(mockResolver, this::simpleAnswer);\n    Lookup l = makeLookupWithResolver(mockResolver, \"example.com\");\n    l.setSearchPath(\"namespace.svc.cluster.local\", \"svc.cluster.local\", \"cluster.local\");\n    Record[] results = l.run();\n    verify(mockResolver).send(any(Message.class));\n    assertEquals(1, results.length);\n  }\n","date":"2021-02-07 01:03:49","endLine":275,"groupId":"10111","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNdots1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/80/029a1d89e395bb1447c68d757af24d2d672c61.src","preCode":"  void testNdots1() throws IOException {\n    try {\n      System.setProperty(CONFIGPROVIDER_SKIP_INIT, \"true\");\n      Resolver mockResolver = Mockito.mock(Resolver.class);\n      Name queryName = Name.fromConstantString(\"example.com\");\n      when(mockResolver.send(any(Message.class)))\n          .thenAnswer(\n              (Answer<Message>)\n                  invocation -> {\n                    Message query = invocation.getArgument(0);\n                    Message answer = new Message(query.getHeader().getID());\n                    answer.addRecord(query.getQuestion(), Section.QUESTION);\n                    answer.addRecord(\n                        new ARecord(\n                            query.getQuestion().getName(),\n                            DClass.IN,\n                            60,\n                            InetAddress.getByName(\"127.0.0.1\")),\n                        Section.ANSWER);\n                    return answer;\n                  });\n      Lookup l = new Lookup(queryName, Type.A);\n      l.setCache(null);\n      l.setResolver(mockResolver);\n      l.setSearchPath(\"namespace.svc.cluster.local\", \"svc.cluster.local\", \"cluster.local\");\n      Record[] results = l.run();\n      verify(mockResolver, times(1)).send(any(Message.class));\n      assertEquals(1, results.length);\n    } finally {\n      System.clearProperty(CONFIGPROVIDER_SKIP_INIT);\n    }\n  }\n","realPath":"src/test/java/org/xbill/DNS/LookupTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"},{"authorDate":"2021-02-03 17:52:16","commitOrder":2,"curCode":"  void testNdotsFallbackToAbsolute() throws Exception {\n    Resolver mockResolver = Mockito.mock(Resolver.class);\n    wireUpMockResolver(mockResolver, this::goodAnswerWhenThreeLabels);\n    Lookup l = makeLookupWithResolver(mockResolver, \"example.com\");\n    l.setSearchPath(\"namespace.svc.cluster.local\", \"svc.cluster.local\", \"cluster.local\");\n    l.setNdots(5);\n    Record[] results = l.run();\n    verify(mockResolver, times(4)).send(any(Message.class));\n    assertEquals(1, results.length);\n  }\n","date":"2021-02-07 01:03:49","endLine":287,"groupId":"10111","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNdotsFallbackToAbsolute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/80/029a1d89e395bb1447c68d757af24d2d672c61.src","preCode":"  void testNdotsFallbackToAbsolute() throws IOException {\n    try {\n      System.setProperty(CONFIGPROVIDER_SKIP_INIT, \"true\");\n      Resolver mockResolver = Mockito.mock(Resolver.class);\n      Name queryName = Name.fromConstantString(\"example.com\");\n      when(mockResolver.send(any(Message.class)))\n          .thenAnswer(\n              (Answer<Message>)\n                  invocation -> {\n                    Message query = invocation.getArgument(0);\n                    Message answer = new Message(query.getHeader().getID());\n                    answer.addRecord(query.getQuestion(), Section.QUESTION);\n                    if (query.getQuestion().getName().labels() == 3) {\n                      answer.addRecord(\n                          new ARecord(\n                              query.getQuestion().getName(),\n                              DClass.IN,\n                              60,\n                              InetAddress.getByName(\"127.0.0.1\")),\n                          Section.ANSWER);\n                    } else {\n                      answer.getHeader().setRcode(Rcode.NXDOMAIN);\n                    }\n                    return answer;\n                  });\n      Lookup l = new Lookup(queryName, Type.A);\n      l.setCache(null);\n      l.setResolver(mockResolver);\n      l.setNdots(5);\n      l.setSearchPath(\"namespace.svc.cluster.local\", \"svc.cluster.local\", \"cluster.local\");\n      Record[] results = l.run();\n      verify(mockResolver, times(4)).send(any(Message.class));\n      assertEquals(1, results.length);\n    } finally {\n      System.clearProperty(CONFIGPROVIDER_SKIP_INIT);\n    }\n  }\n","realPath":"src/test/java/org/xbill/DNS/LookupTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"}],"commitId":"4e2d8a00c28fca073afbc725db451bd8ce19804e","commitMessage":"@@@Increase test coverage in LookupTest\n","date":"2021-02-07 01:03:49","modifiedFileCount":"2","status":"M","submitter":"Noa Resare"}]
