[{"authorTime":"2019-10-27 23:04:41","codes":[{"authorDate":"2019-10-27 23:04:41","commitOrder":1,"curCode":"  void ctor_4arg() {\n    ARecord ar = new ARecord(m_an, DClass.IN, m_ttl, m_addr);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.A, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_addr, ar.getAddress());\n\n    \r\n    assertThrows(RelativeNameException.class, () -> new ARecord(m_rn, DClass.IN, m_ttl, m_addr));\n\n    \r\n    try {\n      new ARecord(\n          m_an, DClass.IN, m_ttl, InetAddress.getByName(\"2001:0db8:85a3:08d3:1319:8a2e:0370:7334\"));\n      fail(\"IllegalArgumentException not thrown\");\n    } catch (IllegalArgumentException e) {\n    } catch (UnknownHostException e) {\n      fail(e.getMessage());\n    }\n  }\n","date":"2019-10-27 23:56:59","endLine":106,"groupId":"124","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"ctor_4arg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/a6/e4e231b326a53a5e284b866e1140719d086f11.src","preCode":"  void ctor_4arg() {\n    ARecord ar = new ARecord(m_an, DClass.IN, m_ttl, m_addr);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.A, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_addr, ar.getAddress());\n\n    \r\n    assertThrows(RelativeNameException.class, () -> new ARecord(m_rn, DClass.IN, m_ttl, m_addr));\n\n    \r\n    try {\n      new ARecord(\n          m_an, DClass.IN, m_ttl, InetAddress.getByName(\"2001:0db8:85a3:08d3:1319:8a2e:0370:7334\"));\n      fail(\"IllegalArgumentException not thrown\");\n    } catch (IllegalArgumentException e) {\n    } catch (UnknownHostException e) {\n      fail(e.getMessage());\n    }\n  }\n","realPath":"src/test/java/org/xbill/DNS/ARecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"},{"authorDate":"2019-10-27 23:04:41","commitOrder":1,"curCode":"    void ctor_4arg_basic() {\n      APLRecord ar = new APLRecord(m_an, DClass.IN, m_ttl, m_elements);\n      assertEquals(m_an, ar.getName());\n      assertEquals(Type.APL, ar.getType());\n      assertEquals(DClass.IN, ar.getDClass());\n      assertEquals(m_ttl, ar.getTTL());\n      assertEquals(m_elements, ar.getElements());\n    }\n","date":"2019-10-27 23:56:59","endLine":150,"groupId":"1447","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"ctor_4arg_basic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/cc/ddc41dd0319b7dd07f16c4cad1d641aa4983bb.src","preCode":"    void ctor_4arg_basic() {\n      APLRecord ar = new APLRecord(m_an, DClass.IN, m_ttl, m_elements);\n      assertEquals(m_an, ar.getName());\n      assertEquals(Type.APL, ar.getType());\n      assertEquals(DClass.IN, ar.getDClass());\n      assertEquals(m_ttl, ar.getTTL());\n      assertEquals(m_elements, ar.getElements());\n    }\n","realPath":"src/test/java/org/xbill/DNS/APLRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"B"}],"commitId":"4276ad715c2cff76a244b67c02f0035faa1b6220","commitMessage":"@@@Remove test_ prefix from test methods\n","date":"2019-10-27 23:56:59","modifiedFileCount":"58","status":"B","submitter":"Ingo Bauersachs"},{"authorTime":"2019-10-27 23:04:41","codes":[{"authorDate":"2021-08-16 05:58:27","commitOrder":2,"curCode":"  void ctor_4arg() {\n    ARecord ar = new ARecord(m_an, DClass.IN, m_ttl, m_addr);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.A, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_addr, ar.getAddress());\n\n    \r\n    assertThrows(RelativeNameException.class, () -> new ARecord(m_rn, DClass.IN, m_ttl, m_addr));\n\n    \r\n    assertThrows(\n        IllegalArgumentException.class,\n        () ->\n            new ARecord(\n                m_an,\n                DClass.IN,\n                m_ttl,\n                InetAddress.getByName(\"2001:0db8:85a3:08d3:1319:8a2e:0370:7334\")));\n  }\n","date":"2021-08-16 06:00:47","endLine":98,"groupId":"1067","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"ctor_4arg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/b3/30a7b6445451682ae8256fcf7bfe6792ac8e24.src","preCode":"  void ctor_4arg() {\n    ARecord ar = new ARecord(m_an, DClass.IN, m_ttl, m_addr);\n    assertEquals(m_an, ar.getName());\n    assertEquals(Type.A, ar.getType());\n    assertEquals(DClass.IN, ar.getDClass());\n    assertEquals(m_ttl, ar.getTTL());\n    assertEquals(m_addr, ar.getAddress());\n\n    \r\n    assertThrows(RelativeNameException.class, () -> new ARecord(m_rn, DClass.IN, m_ttl, m_addr));\n\n    \r\n    try {\n      new ARecord(\n          m_an, DClass.IN, m_ttl, InetAddress.getByName(\"2001:0db8:85a3:08d3:1319:8a2e:0370:7334\"));\n      fail(\"IllegalArgumentException not thrown\");\n    } catch (IllegalArgumentException e) {\n    } catch (UnknownHostException e) {\n      fail(e.getMessage());\n    }\n  }\n","realPath":"src/test/java/org/xbill/DNS/ARecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2019-10-27 23:04:41","commitOrder":2,"curCode":"    void ctor_4arg_basic() {\n      APLRecord ar = new APLRecord(m_an, DClass.IN, m_ttl, m_elements);\n      assertEquals(m_an, ar.getName());\n      assertEquals(Type.APL, ar.getType());\n      assertEquals(DClass.IN, ar.getDClass());\n      assertEquals(m_ttl, ar.getTTL());\n      assertEquals(m_elements, ar.getElements());\n    }\n","date":"2019-10-27 23:56:59","endLine":150,"groupId":"1067","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"ctor_4arg_basic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/cc/ddc41dd0319b7dd07f16c4cad1d641aa4983bb.src","preCode":"    void ctor_4arg_basic() {\n      APLRecord ar = new APLRecord(m_an, DClass.IN, m_ttl, m_elements);\n      assertEquals(m_an, ar.getName());\n      assertEquals(Type.APL, ar.getType());\n      assertEquals(DClass.IN, ar.getDClass());\n      assertEquals(m_ttl, ar.getTTL());\n      assertEquals(m_elements, ar.getElements());\n    }\n","realPath":"src/test/java/org/xbill/DNS/APLRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"N"}],"commitId":"77d50ef15c1f8db70e9fb177810796d3a0cb5b9f","commitMessage":"@@@Cleanup tests as reported by Sonar\n","date":"2021-08-16 06:00:47","modifiedFileCount":"18","status":"M","submitter":"Ingo Bauersachs"}]
