[{"authorTime":"2021-06-10 01:11:15","codes":[{"authorDate":"2021-06-10 01:11:15","commitOrder":1,"curCode":"  void testLookupFromHosts() throws TextParseException, URISyntaxException, UnknownHostException {\n    Lookup lookup = new Lookup(\"host.docker.internal\", Type.A);\n    wireUpMockResolver(\n        mockResolver,\n        q -> {\n          throw new RuntimeException(\"The resolver should not be invoked\");\n        });\n    lookup.setResolver(mockResolver);\n    lookup.setHostsFileParser(\n        new HostsFileParser(Paths.get(LookupTest.class.getResource(\"/hosts_windows\").toURI())));\n    Record[] run = lookup.run();\n    assertNotNull(run);\n    assertEquals(1, run.length);\n    assertEquals(\n        InetAddress.getByAddress(\n            \"host.docker.internal\", new byte[] {(byte) 192, (byte) 168, 10, 96}),\n        ((ARecord) run[0]).getAddress());\n  }\n","date":"2021-06-10 01:11:15","endLine":363,"groupId":"1381","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLookupFromHosts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/7a/dedf50ffd4f0588e3d9755238196c074580711.src","preCode":"  void testLookupFromHosts() throws TextParseException, URISyntaxException, UnknownHostException {\n    Lookup lookup = new Lookup(\"host.docker.internal\", Type.A);\n    wireUpMockResolver(\n        mockResolver,\n        q -> {\n          throw new RuntimeException(\"The resolver should not be invoked\");\n        });\n    lookup.setResolver(mockResolver);\n    lookup.setHostsFileParser(\n        new HostsFileParser(Paths.get(LookupTest.class.getResource(\"/hosts_windows\").toURI())));\n    Record[] run = lookup.run();\n    assertNotNull(run);\n    assertEquals(1, run.length);\n    assertEquals(\n        InetAddress.getByAddress(\n            \"host.docker.internal\", new byte[] {(byte) 192, (byte) 168, 10, 96}),\n        ((ARecord) run[0]).getAddress());\n  }\n","realPath":"src/test/java/org/xbill/DNS/LookupTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"B"},{"authorDate":"2021-06-10 01:11:15","commitOrder":1,"curCode":"  void testLookupFromHostsWithSearchDomain()\n      throws TextParseException, URISyntaxException, UnknownHostException {\n    Lookup lookup = new Lookup(\"host\", Type.A);\n    lookup.setSearchPath(\"docker.internal\");\n    wireUpMockResolver(\n        mockResolver,\n        q -> {\n          throw new RuntimeException(\"The resolver should not be invoked\");\n        });\n    lookup.setResolver(mockResolver);\n    lookup.setHostsFileParser(\n        new HostsFileParser(Paths.get(LookupTest.class.getResource(\"/hosts_windows\").toURI())));\n    Record[] run = lookup.run();\n    assertNotNull(run);\n    assertEquals(1, run.length);\n    assertEquals(\n        InetAddress.getByAddress(\n            \"host.docker.internal\", new byte[] {(byte) 192, (byte) 168, 10, 96}),\n        ((ARecord) run[0]).getAddress());\n  }\n","date":"2021-06-10 01:11:15","endLine":385,"groupId":"1381","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLookupFromHostsWithSearchDomain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/7a/dedf50ffd4f0588e3d9755238196c074580711.src","preCode":"  void testLookupFromHostsWithSearchDomain()\n      throws TextParseException, URISyntaxException, UnknownHostException {\n    Lookup lookup = new Lookup(\"host\", Type.A);\n    lookup.setSearchPath(\"docker.internal\");\n    wireUpMockResolver(\n        mockResolver,\n        q -> {\n          throw new RuntimeException(\"The resolver should not be invoked\");\n        });\n    lookup.setResolver(mockResolver);\n    lookup.setHostsFileParser(\n        new HostsFileParser(Paths.get(LookupTest.class.getResource(\"/hosts_windows\").toURI())));\n    Record[] run = lookup.run();\n    assertNotNull(run);\n    assertEquals(1, run.length);\n    assertEquals(\n        InetAddress.getByAddress(\n            \"host.docker.internal\", new byte[] {(byte) 192, (byte) 168, 10, 96}),\n        ((ARecord) run[0]).getAddress());\n  }\n","realPath":"src/test/java/org/xbill/DNS/LookupTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"B"}],"commitId":"b78a29ae9163d36df32768336a656e20fa2d1802","commitMessage":"@@@Enable parsing the local hosts database in lookups (#195)\n\n","date":"2021-06-10 01:11:15","modifiedFileCount":"4","status":"B","submitter":"Ingo Bauersachs"},{"authorTime":"2021-08-04 06:04:50","codes":[{"authorDate":"2021-08-04 06:04:50","commitOrder":2,"curCode":"  void testLookupFromHosts() throws TextParseException, URISyntaxException, UnknownHostException {\n    Lookup lookup = new Lookup(\"host.docker.internal\", Type.A);\n    wireUpMockResolver(\n        mockResolver,\n        q -> {\n          throw new RuntimeException(\"The resolver should not be invoked\");\n        });\n    lookup.setResolver(mockResolver);\n    lookup.setHostsFileParser(\n        new HostsFileParser(Paths.get(LookupTest.class.getResource(\"/hosts_example\").toURI())));\n    Record[] run = lookup.run();\n    assertNotNull(run);\n    assertEquals(1, run.length);\n    assertEquals(\n        InetAddress.getByAddress(\n            \"host.docker.internal\", new byte[] {(byte) 192, (byte) 168, 10, 96}),\n        ((ARecord) run[0]).getAddress());\n  }\n","date":"2021-08-04 06:08:37","endLine":363,"groupId":"10112","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testLookupFromHosts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/a5/132c81936e72a80e00375066d68c410a68a8a8.src","preCode":"  void testLookupFromHosts() throws TextParseException, URISyntaxException, UnknownHostException {\n    Lookup lookup = new Lookup(\"host.docker.internal\", Type.A);\n    wireUpMockResolver(\n        mockResolver,\n        q -> {\n          throw new RuntimeException(\"The resolver should not be invoked\");\n        });\n    lookup.setResolver(mockResolver);\n    lookup.setHostsFileParser(\n        new HostsFileParser(Paths.get(LookupTest.class.getResource(\"/hosts_windows\").toURI())));\n    Record[] run = lookup.run();\n    assertNotNull(run);\n    assertEquals(1, run.length);\n    assertEquals(\n        InetAddress.getByAddress(\n            \"host.docker.internal\", new byte[] {(byte) 192, (byte) 168, 10, 96}),\n        ((ARecord) run[0]).getAddress());\n  }\n","realPath":"src/test/java/org/xbill/DNS/LookupTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"M"},{"authorDate":"2021-08-04 06:04:50","commitOrder":2,"curCode":"  void testLookupFromHostsWithSearchDomain()\n      throws TextParseException, URISyntaxException, UnknownHostException {\n    Lookup lookup = new Lookup(\"host\", Type.A);\n    lookup.setSearchPath(\"docker.internal\");\n    wireUpMockResolver(\n        mockResolver,\n        q -> {\n          throw new RuntimeException(\"The resolver should not be invoked\");\n        });\n    lookup.setResolver(mockResolver);\n    lookup.setHostsFileParser(\n        new HostsFileParser(Paths.get(LookupTest.class.getResource(\"/hosts_example\").toURI())));\n    Record[] run = lookup.run();\n    assertNotNull(run);\n    assertEquals(1, run.length);\n    assertEquals(\n        InetAddress.getByAddress(\n            \"host.docker.internal\", new byte[] {(byte) 192, (byte) 168, 10, 96}),\n        ((ARecord) run[0]).getAddress());\n  }\n","date":"2021-08-04 06:08:37","endLine":385,"groupId":"10112","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testLookupFromHostsWithSearchDomain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/a5/132c81936e72a80e00375066d68c410a68a8a8.src","preCode":"  void testLookupFromHostsWithSearchDomain()\n      throws TextParseException, URISyntaxException, UnknownHostException {\n    Lookup lookup = new Lookup(\"host\", Type.A);\n    lookup.setSearchPath(\"docker.internal\");\n    wireUpMockResolver(\n        mockResolver,\n        q -> {\n          throw new RuntimeException(\"The resolver should not be invoked\");\n        });\n    lookup.setResolver(mockResolver);\n    lookup.setHostsFileParser(\n        new HostsFileParser(Paths.get(LookupTest.class.getResource(\"/hosts_windows\").toURI())));\n    Record[] run = lookup.run();\n    assertNotNull(run);\n    assertEquals(1, run.length);\n    assertEquals(\n        InetAddress.getByAddress(\n            \"host.docker.internal\", new byte[] {(byte) 192, (byte) 168, 10, 96}),\n        ((ARecord) run[0]).getAddress());\n  }\n","realPath":"src/test/java/org/xbill/DNS/LookupTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"M"}],"commitId":"53a4fb920cfa2600036a22b339d51fa7bd2ef8d2","commitMessage":"@@@Relicense dnsjava to BSD-3-Close\n\nSome of the unit test files were originally contributed under\nBSD-3-Clause and wrongfully marked as BSD-2-Clause in\n0a493aa0f31c6779ba70eaf5ce9819352665147d. Align everything to\nBSD-3-clause as adding an additional clause is easier than removing\none. It also enables going ahead with #172.\n\nSigned-off-by: Ingo Bauersachs <ingo@jitsi.org>\nSigned-off-by: Brian Wellington <bwelling@xbill.org>\nSigned-off-by: Noa Resare <noa@resare.com>\n","date":"2021-08-04 06:08:37","modifiedFileCount":"276","status":"M","submitter":"Ingo Bauersachs"}]
