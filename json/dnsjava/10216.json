[{"authorTime":"2019-10-27 23:04:41","codes":[{"authorDate":"2019-10-27 23:04:41","commitOrder":1,"curCode":"  void rrFromWire() throws IOException {\n    DNSInput i = new DNSInput(new byte[] {1, 2, 3, 4, 5});\n    i.jump(3);\n\n    EmptyRecord er = new EmptyRecord();\n    er.rrFromWire(i);\n    assertEquals(3, i.current());\n    assertNull(er.getName());\n    assertEquals(0, er.getType());\n    assertEquals(0, er.getDClass());\n    assertEquals(0, er.getTTL());\n  }\n","date":"2019-10-27 23:56:59","endLine":73,"groupId":"562","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"rrFromWire","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/88/7c557e0b069820412a6277913618448d91e2f0.src","preCode":"  void rrFromWire() throws IOException {\n    DNSInput i = new DNSInput(new byte[] {1, 2, 3, 4, 5});\n    i.jump(3);\n\n    EmptyRecord er = new EmptyRecord();\n    er.rrFromWire(i);\n    assertEquals(3, i.current());\n    assertNull(er.getName());\n    assertEquals(0, er.getType());\n    assertEquals(0, er.getDClass());\n    assertEquals(0, er.getTTL());\n  }\n","realPath":"src/test/java/org/xbill/DNS/EmptyRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"},{"authorDate":"2019-10-27 23:04:41","commitOrder":1,"curCode":"  void rdataFromString() throws IOException {\n    Tokenizer t = new Tokenizer(\"these are the tokens\");\n    EmptyRecord er = new EmptyRecord();\n    er.rdataFromString(t, null);\n    assertNull(er.getName());\n    assertEquals(0, er.getType());\n    assertEquals(0, er.getDClass());\n    assertEquals(0, er.getTTL());\n\n    assertEquals(\"these\", t.getString());\n  }\n","date":"2019-10-27 23:56:59","endLine":86,"groupId":"562","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"rdataFromString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/88/7c557e0b069820412a6277913618448d91e2f0.src","preCode":"  void rdataFromString() throws IOException {\n    Tokenizer t = new Tokenizer(\"these are the tokens\");\n    EmptyRecord er = new EmptyRecord();\n    er.rdataFromString(t, null);\n    assertNull(er.getName());\n    assertEquals(0, er.getType());\n    assertEquals(0, er.getDClass());\n    assertEquals(0, er.getTTL());\n\n    assertEquals(\"these\", t.getString());\n  }\n","realPath":"src/test/java/org/xbill/DNS/EmptyRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"}],"commitId":"4276ad715c2cff76a244b67c02f0035faa1b6220","commitMessage":"@@@Remove test_ prefix from test methods\n","date":"2019-10-27 23:56:59","modifiedFileCount":"58","status":"B","submitter":"Ingo Bauersachs"},{"authorTime":"2019-10-27 23:04:41","codes":[{"authorDate":"2019-10-27 23:07:54","commitOrder":2,"curCode":"  void rrFromWire() {\n    DNSInput i = new DNSInput(new byte[] {1, 2, 3, 4, 5});\n    i.jump(3);\n\n    EmptyRecord er = new EmptyRecord();\n    er.rrFromWire(i);\n    assertEquals(3, i.current());\n    assertNull(er.getName());\n    assertEquals(0, er.getType());\n    assertEquals(0, er.getDClass());\n    assertEquals(0, er.getTTL());\n  }\n","date":"2019-10-27 23:57:00","endLine":73,"groupId":"10216","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"rrFromWire","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/bb/b7d3373a29915a05d46692c585a66fa9ebc283.src","preCode":"  void rrFromWire() throws IOException {\n    DNSInput i = new DNSInput(new byte[] {1, 2, 3, 4, 5});\n    i.jump(3);\n\n    EmptyRecord er = new EmptyRecord();\n    er.rrFromWire(i);\n    assertEquals(3, i.current());\n    assertNull(er.getName());\n    assertEquals(0, er.getType());\n    assertEquals(0, er.getDClass());\n    assertEquals(0, er.getTTL());\n  }\n","realPath":"src/test/java/org/xbill/DNS/EmptyRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2019-10-27 23:04:41","commitOrder":2,"curCode":"  void rdataFromString() throws IOException {\n    Tokenizer t = new Tokenizer(\"these are the tokens\");\n    EmptyRecord er = new EmptyRecord();\n    er.rdataFromString(t, null);\n    assertNull(er.getName());\n    assertEquals(0, er.getType());\n    assertEquals(0, er.getDClass());\n    assertEquals(0, er.getTTL());\n\n    assertEquals(\"these\", t.getString());\n  }\n","date":"2019-10-27 23:56:59","endLine":86,"groupId":"10216","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"rdataFromString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/88/7c557e0b069820412a6277913618448d91e2f0.src","preCode":"  void rdataFromString() throws IOException {\n    Tokenizer t = new Tokenizer(\"these are the tokens\");\n    EmptyRecord er = new EmptyRecord();\n    er.rdataFromString(t, null);\n    assertNull(er.getName());\n    assertEquals(0, er.getType());\n    assertEquals(0, er.getDClass());\n    assertEquals(0, er.getTTL());\n\n    assertEquals(\"these\", t.getString());\n  }\n","realPath":"src/test/java/org/xbill/DNS/EmptyRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"}],"commitId":"b7f39297e4244cac9ef40ec7fc850c17c21eca00","commitMessage":"@@@Remove unnecessary exception declarations\n","date":"2019-10-27 23:57:00","modifiedFileCount":"13","status":"M","submitter":"Ingo Bauersachs"}]
