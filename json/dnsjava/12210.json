[{"authorTime":"2019-10-27 23:04:41","codes":[{"authorDate":"2019-10-27 23:04:41","commitOrder":1,"curCode":"    void validIPv4() throws IOException {\n      byte[] raw =\n          new byte[] {\n            0,\n            1,\n            8,\n            (byte) 0x84,\n            m_addr4_bytes[0],\n            m_addr4_bytes[1],\n            m_addr4_bytes[2],\n            m_addr4_bytes[3]\n          };\n\n      DNSInput di = new DNSInput(raw);\n      APLRecord ar = new APLRecord();\n      ar.rrFromWire(di);\n\n      ArrayList<Element> exp = new ArrayList<>();\n      exp.add(new Element(true, m_addr4, 8));\n      assertEquals(exp, ar.getElements());\n    }\n","date":"2019-10-27 23:56:59","endLine":201,"groupId":"1469","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"validIPv4","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/cc/ddc41dd0319b7dd07f16c4cad1d641aa4983bb.src","preCode":"    void validIPv4() throws IOException {\n      byte[] raw =\n          new byte[] {\n            0,\n            1,\n            8,\n            (byte) 0x84,\n            m_addr4_bytes[0],\n            m_addr4_bytes[1],\n            m_addr4_bytes[2],\n            m_addr4_bytes[3]\n          };\n\n      DNSInput di = new DNSInput(raw);\n      APLRecord ar = new APLRecord();\n      ar.rrFromWire(di);\n\n      ArrayList<Element> exp = new ArrayList<>();\n      exp.add(new Element(true, m_addr4, 8));\n      assertEquals(exp, ar.getElements());\n    }\n","realPath":"src/test/java/org/xbill/DNS/APLRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"B"},{"authorDate":"2019-10-27 23:04:41","commitOrder":1,"curCode":"    void invalid_IPv4_prefix() throws IOException {\n      byte[] raw =\n          new byte[] {\n            0,\n            1,\n            33,\n            (byte) 0x84,\n            m_addr4_bytes[0],\n            m_addr4_bytes[1],\n            m_addr4_bytes[2],\n            m_addr4_bytes[3]\n          };\n\n      DNSInput di = new DNSInput(raw);\n      APLRecord ar = new APLRecord();\n      assertThrows(WireParseException.class, () -> ar.rrFromWire(di));\n    }\n","date":"2019-10-27 23:56:59","endLine":236,"groupId":"1469","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"invalid_IPv4_prefix","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/cc/ddc41dd0319b7dd07f16c4cad1d641aa4983bb.src","preCode":"    void invalid_IPv4_prefix() throws IOException {\n      byte[] raw =\n          new byte[] {\n            0,\n            1,\n            33,\n            (byte) 0x84,\n            m_addr4_bytes[0],\n            m_addr4_bytes[1],\n            m_addr4_bytes[2],\n            m_addr4_bytes[3]\n          };\n\n      DNSInput di = new DNSInput(raw);\n      APLRecord ar = new APLRecord();\n      assertThrows(WireParseException.class, () -> ar.rrFromWire(di));\n    }\n","realPath":"src/test/java/org/xbill/DNS/APLRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"B"}],"commitId":"4276ad715c2cff76a244b67c02f0035faa1b6220","commitMessage":"@@@Remove test_ prefix from test methods\n","date":"2019-10-27 23:56:59","modifiedFileCount":"58","status":"B","submitter":"Ingo Bauersachs"},{"authorTime":"2019-10-27 23:07:54","codes":[{"authorDate":"2019-10-27 23:04:41","commitOrder":2,"curCode":"    void validIPv4() throws IOException {\n      byte[] raw =\n          new byte[] {\n            0,\n            1,\n            8,\n            (byte) 0x84,\n            m_addr4_bytes[0],\n            m_addr4_bytes[1],\n            m_addr4_bytes[2],\n            m_addr4_bytes[3]\n          };\n\n      DNSInput di = new DNSInput(raw);\n      APLRecord ar = new APLRecord();\n      ar.rrFromWire(di);\n\n      ArrayList<Element> exp = new ArrayList<>();\n      exp.add(new Element(true, m_addr4, 8));\n      assertEquals(exp, ar.getElements());\n    }\n","date":"2019-10-27 23:56:59","endLine":201,"groupId":"12210","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"validIPv4","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/cc/ddc41dd0319b7dd07f16c4cad1d641aa4983bb.src","preCode":"    void validIPv4() throws IOException {\n      byte[] raw =\n          new byte[] {\n            0,\n            1,\n            8,\n            (byte) 0x84,\n            m_addr4_bytes[0],\n            m_addr4_bytes[1],\n            m_addr4_bytes[2],\n            m_addr4_bytes[3]\n          };\n\n      DNSInput di = new DNSInput(raw);\n      APLRecord ar = new APLRecord();\n      ar.rrFromWire(di);\n\n      ArrayList<Element> exp = new ArrayList<>();\n      exp.add(new Element(true, m_addr4, 8));\n      assertEquals(exp, ar.getElements());\n    }\n","realPath":"src/test/java/org/xbill/DNS/APLRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"N"},{"authorDate":"2019-10-27 23:07:54","commitOrder":2,"curCode":"    void invalid_IPv4_prefix() {\n      byte[] raw =\n          new byte[] {\n            0,\n            1,\n            33,\n            (byte) 0x84,\n            m_addr4_bytes[0],\n            m_addr4_bytes[1],\n            m_addr4_bytes[2],\n            m_addr4_bytes[3]\n          };\n\n      DNSInput di = new DNSInput(raw);\n      APLRecord ar = new APLRecord();\n      assertThrows(WireParseException.class, () -> ar.rrFromWire(di));\n    }\n","date":"2019-10-27 23:57:00","endLine":236,"groupId":"12210","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"invalid_IPv4_prefix","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/f6/952a67b1a20232503d6fd8781d8b849a6b9e1b.src","preCode":"    void invalid_IPv4_prefix() throws IOException {\n      byte[] raw =\n          new byte[] {\n            0,\n            1,\n            33,\n            (byte) 0x84,\n            m_addr4_bytes[0],\n            m_addr4_bytes[1],\n            m_addr4_bytes[2],\n            m_addr4_bytes[3]\n          };\n\n      DNSInput di = new DNSInput(raw);\n      APLRecord ar = new APLRecord();\n      assertThrows(WireParseException.class, () -> ar.rrFromWire(di));\n    }\n","realPath":"src/test/java/org/xbill/DNS/APLRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"}],"commitId":"b7f39297e4244cac9ef40ec7fc850c17c21eca00","commitMessage":"@@@Remove unnecessary exception declarations\n","date":"2019-10-27 23:57:00","modifiedFileCount":"13","status":"M","submitter":"Ingo Bauersachs"}]
