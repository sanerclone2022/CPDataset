[{"authorTime":"2019-10-27 23:04:41","codes":[{"authorDate":"2019-10-27 23:04:41","commitOrder":1,"curCode":"  void getCNAME() throws TextParseException {\n    RRset<CNAMERecord> rrs = new RRset<>();\n    CNAMERecord cr =\n        new CNAMERecord(\n            Name.fromString(\"The.Name.\"), DClass.IN, 0xABCD, Name.fromString(\"The.Alias.\"));\n    rrs.addRR(cr);\n    SetResponse sr = new SetResponse(SetResponse.CNAME, rrs);\n    assertEquals(cr, sr.getCNAME());\n  }\n","date":"2019-10-27 23:56:59","endLine":238,"groupId":"992","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getCNAME","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/dc/3bbf52a9cbe644a55cf32304fe92c5237b6896.src","preCode":"  void getCNAME() throws TextParseException {\n    RRset<CNAMERecord> rrs = new RRset<>();\n    CNAMERecord cr =\n        new CNAMERecord(\n            Name.fromString(\"The.Name.\"), DClass.IN, 0xABCD, Name.fromString(\"The.Alias.\"));\n    rrs.addRR(cr);\n    SetResponse sr = new SetResponse(SetResponse.CNAME, rrs);\n    assertEquals(cr, sr.getCNAME());\n  }\n","realPath":"src/test/java/org/xbill/DNS/SetResponseTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"B"},{"authorDate":"2019-10-27 23:04:41","commitOrder":1,"curCode":"  void getDNAME() throws TextParseException {\n    RRset<DNAMERecord> rrs = new RRset<>();\n    DNAMERecord dr =\n        new DNAMERecord(\n            Name.fromString(\"The.Name.\"), DClass.IN, 0xABCD, Name.fromString(\"The.Alias.\"));\n    rrs.addRR(dr);\n    SetResponse sr = new SetResponse(SetResponse.DNAME, rrs);\n    assertEquals(dr, sr.getDNAME());\n  }\n","date":"2019-10-27 23:56:59","endLine":249,"groupId":"993","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getDNAME","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/dc/3bbf52a9cbe644a55cf32304fe92c5237b6896.src","preCode":"  void getDNAME() throws TextParseException {\n    RRset<DNAMERecord> rrs = new RRset<>();\n    DNAMERecord dr =\n        new DNAMERecord(\n            Name.fromString(\"The.Name.\"), DClass.IN, 0xABCD, Name.fromString(\"The.Alias.\"));\n    rrs.addRR(dr);\n    SetResponse sr = new SetResponse(SetResponse.DNAME, rrs);\n    assertEquals(dr, sr.getDNAME());\n  }\n","realPath":"src/test/java/org/xbill/DNS/SetResponseTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"B"}],"commitId":"4276ad715c2cff76a244b67c02f0035faa1b6220","commitMessage":"@@@Remove test_ prefix from test methods\n","date":"2019-10-27 23:56:59","modifiedFileCount":"58","status":"B","submitter":"Ingo Bauersachs"},{"authorTime":"2019-12-25 01:01:58","codes":[{"authorDate":"2019-12-25 01:01:58","commitOrder":2,"curCode":"  void getCNAME() throws TextParseException {\n    RRset rrs = new RRset();\n    CNAMERecord cr =\n        new CNAMERecord(\n            Name.fromString(\"The.Name.\"), DClass.IN, 0xABCD, Name.fromString(\"The.Alias.\"));\n    rrs.addRR(cr);\n    SetResponse sr = new SetResponse(SetResponse.CNAME, rrs);\n    assertEquals(cr, sr.getCNAME());\n  }\n","date":"2019-12-25 01:01:58","endLine":238,"groupId":"1087","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getCNAME","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/1b/b4f9022f12a9d2ed3b22d90949563c3b96ed30.src","preCode":"  void getCNAME() throws TextParseException {\n    RRset<CNAMERecord> rrs = new RRset<>();\n    CNAMERecord cr =\n        new CNAMERecord(\n            Name.fromString(\"The.Name.\"), DClass.IN, 0xABCD, Name.fromString(\"The.Alias.\"));\n    rrs.addRR(cr);\n    SetResponse sr = new SetResponse(SetResponse.CNAME, rrs);\n    assertEquals(cr, sr.getCNAME());\n  }\n","realPath":"src/test/java/org/xbill/DNS/SetResponseTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"},{"authorDate":"2019-12-25 01:01:58","commitOrder":2,"curCode":"  void getDNAME() throws TextParseException {\n    RRset rrs = new RRset();\n    DNAMERecord dr =\n        new DNAMERecord(\n            Name.fromString(\"The.Name.\"), DClass.IN, 0xABCD, Name.fromString(\"The.Alias.\"));\n    rrs.addRR(dr);\n    SetResponse sr = new SetResponse(SetResponse.DNAME, rrs);\n    assertEquals(dr, sr.getDNAME());\n  }\n","date":"2019-12-25 01:01:58","endLine":249,"groupId":"1087","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getDNAME","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/1b/b4f9022f12a9d2ed3b22d90949563c3b96ed30.src","preCode":"  void getDNAME() throws TextParseException {\n    RRset<DNAMERecord> rrs = new RRset<>();\n    DNAMERecord dr =\n        new DNAMERecord(\n            Name.fromString(\"The.Name.\"), DClass.IN, 0xABCD, Name.fromString(\"The.Alias.\"));\n    rrs.addRR(dr);\n    SetResponse sr = new SetResponse(SetResponse.DNAME, rrs);\n    assertEquals(dr, sr.getDNAME());\n  }\n","realPath":"src/test/java/org/xbill/DNS/SetResponseTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"}],"commitId":"5a65f38f2086c1e6f9ac82ced48b24f11801ad13","commitMessage":"@@@Merge pull request #89 from dnsjava/api-compat\n\nAdd some methods back/undo generics for backwards API compatibility","date":"2019-12-25 01:01:58","modifiedFileCount":"30","status":"M","submitter":"Ingo Bauersachs"}]
