[{"authorTime":"2020-08-18 04:57:15","codes":[{"authorDate":"2020-08-18 04:57:15","commitOrder":1,"curCode":"  void createRecord() throws IOException {\n    Name label = Name.fromString(\"test.com.\");\n    int svcPriority = 5;\n    Name svcDomain = Name.fromString(\"svc.test.com.\");\n    HTTPSRecord.ParameterMandatory mandatory = new HTTPSRecord.ParameterMandatory();\n    mandatory.fromString(\"alpn\");\n    HTTPSRecord.ParameterAlpn alpn = new HTTPSRecord.ParameterAlpn();\n    alpn.fromString(\"h1,h2\");\n    HTTPSRecord.ParameterIpv4Hint ipv4 = new HTTPSRecord.ParameterIpv4Hint();\n    ipv4.fromString(\"1.2.3.4,5.6.7.8\");\n    List<HTTPSRecord.ParameterBase> params = Arrays.asList(mandatory, ipv4, alpn);\n    HTTPSRecord record = new HTTPSRecord(label, DClass.IN, 300, svcPriority, svcDomain, params);\n\n    assertEquals(Type.HTTPS, record.getType());\n    assertEquals(label, record.getName());\n    assertEquals(svcPriority, record.getSvcPriority());\n    assertEquals(svcDomain, record.getTargetName());\n    assertEquals(\n        Arrays.asList(HTTPSRecord.MANDATORY, HTTPSRecord.ALPN, HTTPSRecord.IPV4HINT).toString(),\n        record.getSvcParamKeys().toString());\n    assertEquals(\"alpn\", record.getSvcParamValue(HTTPSRecord.MANDATORY).toString());\n    assertEquals(\"h1,h2\", record.getSvcParamValue(HTTPSRecord.ALPN).toString());\n    assertEquals(\"h1,h2\", record.getSvcParamValue(HTTPSRecord.ALPN).toString());\n    assertNull(record.getSvcParamValue(1234));\n    Options.unset(\"BINDTTL\");\n    Options.unset(\"noPrintIN\");\n    assertEquals(\n        \"test.com.\\t\\t300\\tIN\\tHTTPS\\t5 svc.test.com. mandatory=alpn alpn=h1,h2 ipv4hint=1.2.3.4,5.6.7.8\",\n        record.toString());\n  }\n","date":"2020-08-18 04:57:15","endLine":86,"groupId":"322","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createRecord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/dc/48b2ae42aa4e1d22c0e8cc63de607ca10e5177.src","preCode":"  void createRecord() throws IOException {\n    Name label = Name.fromString(\"test.com.\");\n    int svcPriority = 5;\n    Name svcDomain = Name.fromString(\"svc.test.com.\");\n    HTTPSRecord.ParameterMandatory mandatory = new HTTPSRecord.ParameterMandatory();\n    mandatory.fromString(\"alpn\");\n    HTTPSRecord.ParameterAlpn alpn = new HTTPSRecord.ParameterAlpn();\n    alpn.fromString(\"h1,h2\");\n    HTTPSRecord.ParameterIpv4Hint ipv4 = new HTTPSRecord.ParameterIpv4Hint();\n    ipv4.fromString(\"1.2.3.4,5.6.7.8\");\n    List<HTTPSRecord.ParameterBase> params = Arrays.asList(mandatory, ipv4, alpn);\n    HTTPSRecord record = new HTTPSRecord(label, DClass.IN, 300, svcPriority, svcDomain, params);\n\n    assertEquals(Type.HTTPS, record.getType());\n    assertEquals(label, record.getName());\n    assertEquals(svcPriority, record.getSvcPriority());\n    assertEquals(svcDomain, record.getTargetName());\n    assertEquals(\n        Arrays.asList(HTTPSRecord.MANDATORY, HTTPSRecord.ALPN, HTTPSRecord.IPV4HINT).toString(),\n        record.getSvcParamKeys().toString());\n    assertEquals(\"alpn\", record.getSvcParamValue(HTTPSRecord.MANDATORY).toString());\n    assertEquals(\"h1,h2\", record.getSvcParamValue(HTTPSRecord.ALPN).toString());\n    assertEquals(\"h1,h2\", record.getSvcParamValue(HTTPSRecord.ALPN).toString());\n    assertNull(record.getSvcParamValue(1234));\n    Options.unset(\"BINDTTL\");\n    Options.unset(\"noPrintIN\");\n    assertEquals(\n        \"test.com.\\t\\t300\\tIN\\tHTTPS\\t5 svc.test.com. mandatory=alpn alpn=h1,h2 ipv4hint=1.2.3.4,5.6.7.8\",\n        record.toString());\n  }\n","realPath":"src/test/java/org/xbill/DNS/HTTPSRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"},{"authorDate":"2020-08-18 04:57:15","commitOrder":1,"curCode":"  void createRecordDuplicateParam() throws IOException {\n    Name label = Name.fromString(\"test.com.\");\n    Name svcDomain = Name.fromString(\"svc.test.com.\");\n    SVCBRecord.ParameterAlpn alpn = new SVCBRecord.ParameterAlpn();\n    alpn.fromString(\"h1,h2\");\n    SVCBRecord.ParameterIpv4Hint ipv4 = new SVCBRecord.ParameterIpv4Hint();\n    ipv4.fromString(\"1.2.3.4,5.6.7.8\");\n    List<SVCBRecord.ParameterBase> params = Arrays.asList(alpn, ipv4, alpn);\n    assertThrows(\n        IllegalArgumentException.class,\n        () -> {\n          new SVCBRecord(label, DClass.IN, 300, 5, svcDomain, params);\n        });\n  }\n","date":"2020-08-18 04:57:15","endLine":102,"groupId":"1359","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createRecordDuplicateParam","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/b2/da083342fdf77ff5e460baacb3d4c5702b7bdc.src","preCode":"  void createRecordDuplicateParam() throws IOException {\n    Name label = Name.fromString(\"test.com.\");\n    Name svcDomain = Name.fromString(\"svc.test.com.\");\n    SVCBRecord.ParameterAlpn alpn = new SVCBRecord.ParameterAlpn();\n    alpn.fromString(\"h1,h2\");\n    SVCBRecord.ParameterIpv4Hint ipv4 = new SVCBRecord.ParameterIpv4Hint();\n    ipv4.fromString(\"1.2.3.4,5.6.7.8\");\n    List<SVCBRecord.ParameterBase> params = Arrays.asList(alpn, ipv4, alpn);\n    assertThrows(\n        IllegalArgumentException.class,\n        () -> {\n          new SVCBRecord(label, DClass.IN, 300, 5, svcDomain, params);\n        });\n  }\n","realPath":"src/test/java/org/xbill/DNS/SVCBRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"}],"commitId":"6f379668871fe788c8dfe991aa16a8c54b6857e3","commitMessage":"@@@Add support for SVCB and HTTPS records (#116)\n\n* Initial class structure\n\n* Work in progress for implementation.  basic tests passing\n\n* Add mandatory key type and proper implementation for ipv4hint.  echconfig.  and ipv6hint\n\n* Add support for unknown key types\n\n* More tests and error handling cases\n\n* Improve naming and code cleanup\n\n* Minor fixes based on code review comments\n\n* Accessors and initializers for parameter class.  more tests and validation code\n\n* Add better wire format checking and unit tests for this\n\n* Minor fixes and checking for duplicate SvcParam keys in constructor\n\n* Add license header comment and comments for the records classes\n\n* Addressed code review feedback\nRan formatter\nUsed final for private field when possible\nAdded more useful constructors and accessors for Parameter subclasses.  such as ones that take in and return List<Inet4Address> instead of List<byte[]>\n\n* Specify UTF_8 when converting to and from bytes for ParameterAlpn\n\n* Use US_ASCII charset instead for ParameterAlpn\n\nCo-authored-by: Adam Stoler <astoler@bos-mp8o2.kendall.corp.akamai.com>","date":"2020-08-18 04:57:15","modifiedFileCount":"1","status":"B","submitter":"adam-stoler"},{"authorTime":"2021-02-02 06:32:23","codes":[{"authorDate":"2020-08-18 04:57:15","commitOrder":2,"curCode":"  void createRecord() throws IOException {\n    Name label = Name.fromString(\"test.com.\");\n    int svcPriority = 5;\n    Name svcDomain = Name.fromString(\"svc.test.com.\");\n    HTTPSRecord.ParameterMandatory mandatory = new HTTPSRecord.ParameterMandatory();\n    mandatory.fromString(\"alpn\");\n    HTTPSRecord.ParameterAlpn alpn = new HTTPSRecord.ParameterAlpn();\n    alpn.fromString(\"h1,h2\");\n    HTTPSRecord.ParameterIpv4Hint ipv4 = new HTTPSRecord.ParameterIpv4Hint();\n    ipv4.fromString(\"1.2.3.4,5.6.7.8\");\n    List<HTTPSRecord.ParameterBase> params = Arrays.asList(mandatory, ipv4, alpn);\n    HTTPSRecord record = new HTTPSRecord(label, DClass.IN, 300, svcPriority, svcDomain, params);\n\n    assertEquals(Type.HTTPS, record.getType());\n    assertEquals(label, record.getName());\n    assertEquals(svcPriority, record.getSvcPriority());\n    assertEquals(svcDomain, record.getTargetName());\n    assertEquals(\n        Arrays.asList(HTTPSRecord.MANDATORY, HTTPSRecord.ALPN, HTTPSRecord.IPV4HINT).toString(),\n        record.getSvcParamKeys().toString());\n    assertEquals(\"alpn\", record.getSvcParamValue(HTTPSRecord.MANDATORY).toString());\n    assertEquals(\"h1,h2\", record.getSvcParamValue(HTTPSRecord.ALPN).toString());\n    assertEquals(\"h1,h2\", record.getSvcParamValue(HTTPSRecord.ALPN).toString());\n    assertNull(record.getSvcParamValue(1234));\n    Options.unset(\"BINDTTL\");\n    Options.unset(\"noPrintIN\");\n    assertEquals(\n        \"test.com.\\t\\t300\\tIN\\tHTTPS\\t5 svc.test.com. mandatory=alpn alpn=h1,h2 ipv4hint=1.2.3.4,5.6.7.8\",\n        record.toString());\n  }\n","date":"2020-08-18 04:57:15","endLine":86,"groupId":"10169","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createRecord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/dc/48b2ae42aa4e1d22c0e8cc63de607ca10e5177.src","preCode":"  void createRecord() throws IOException {\n    Name label = Name.fromString(\"test.com.\");\n    int svcPriority = 5;\n    Name svcDomain = Name.fromString(\"svc.test.com.\");\n    HTTPSRecord.ParameterMandatory mandatory = new HTTPSRecord.ParameterMandatory();\n    mandatory.fromString(\"alpn\");\n    HTTPSRecord.ParameterAlpn alpn = new HTTPSRecord.ParameterAlpn();\n    alpn.fromString(\"h1,h2\");\n    HTTPSRecord.ParameterIpv4Hint ipv4 = new HTTPSRecord.ParameterIpv4Hint();\n    ipv4.fromString(\"1.2.3.4,5.6.7.8\");\n    List<HTTPSRecord.ParameterBase> params = Arrays.asList(mandatory, ipv4, alpn);\n    HTTPSRecord record = new HTTPSRecord(label, DClass.IN, 300, svcPriority, svcDomain, params);\n\n    assertEquals(Type.HTTPS, record.getType());\n    assertEquals(label, record.getName());\n    assertEquals(svcPriority, record.getSvcPriority());\n    assertEquals(svcDomain, record.getTargetName());\n    assertEquals(\n        Arrays.asList(HTTPSRecord.MANDATORY, HTTPSRecord.ALPN, HTTPSRecord.IPV4HINT).toString(),\n        record.getSvcParamKeys().toString());\n    assertEquals(\"alpn\", record.getSvcParamValue(HTTPSRecord.MANDATORY).toString());\n    assertEquals(\"h1,h2\", record.getSvcParamValue(HTTPSRecord.ALPN).toString());\n    assertEquals(\"h1,h2\", record.getSvcParamValue(HTTPSRecord.ALPN).toString());\n    assertNull(record.getSvcParamValue(1234));\n    Options.unset(\"BINDTTL\");\n    Options.unset(\"noPrintIN\");\n    assertEquals(\n        \"test.com.\\t\\t300\\tIN\\tHTTPS\\t5 svc.test.com. mandatory=alpn alpn=h1,h2 ipv4hint=1.2.3.4,5.6.7.8\",\n        record.toString());\n  }\n","realPath":"src/test/java/org/xbill/DNS/HTTPSRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"},{"authorDate":"2021-02-02 06:32:23","commitOrder":2,"curCode":"  void createRecordDuplicateParam() throws IOException {\n    Name label = Name.fromString(\"test.com.\");\n    Name svcDomain = Name.fromString(\"svc.test.com.\");\n    SVCBRecord.ParameterAlpn alpn = new SVCBRecord.ParameterAlpn();\n    alpn.fromString(\"h1,h2\");\n    SVCBRecord.ParameterIpv4Hint ipv4 = new SVCBRecord.ParameterIpv4Hint();\n    ipv4.fromString(\"1.2.3.4,5.6.7.8\");\n    List<SVCBRecord.ParameterBase> params = Arrays.asList(alpn, ipv4, alpn);\n    assertThrows(\n        IllegalArgumentException.class,\n        () -> new SVCBRecord(label, DClass.IN, 300, 5, svcDomain, params));\n  }\n","date":"2021-02-02 06:32:23","endLine":104,"groupId":"10169","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createRecordDuplicateParam","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/b1/edf55da9ff1075894de29f9d9833062082e67e.src","preCode":"  void createRecordDuplicateParam() throws IOException {\n    Name label = Name.fromString(\"test.com.\");\n    Name svcDomain = Name.fromString(\"svc.test.com.\");\n    SVCBRecord.ParameterAlpn alpn = new SVCBRecord.ParameterAlpn();\n    alpn.fromString(\"h1,h2\");\n    SVCBRecord.ParameterIpv4Hint ipv4 = new SVCBRecord.ParameterIpv4Hint();\n    ipv4.fromString(\"1.2.3.4,5.6.7.8\");\n    List<SVCBRecord.ParameterBase> params = Arrays.asList(alpn, ipv4, alpn);\n    assertThrows(\n        IllegalArgumentException.class,\n        () -> {\n          new SVCBRecord(label, DClass.IN, 300, 5, svcDomain, params);\n        });\n  }\n","realPath":"src/test/java/org/xbill/DNS/SVCBRecordTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"346acf3e25d3473e5c75264ce082e83ebf0bd7b8","commitMessage":"@@@Cleanup of example IPv6 addresses and redundant parentheses\n","date":"2021-02-02 06:32:23","modifiedFileCount":"2","status":"M","submitter":"Ingo Bauersachs"}]
