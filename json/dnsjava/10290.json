[{"authorTime":"2019-05-26 00:58:59","codes":[{"authorDate":"2019-05-26 00:58:59","commitOrder":1,"curCode":"public byte []\ngetBase64(boolean required) throws IOException {\n\tString s = remainingStrings();\n\tif (s == null) {\n\t\tif (required)\n\t\t\tthrow exception(\"expected base64 encoded string\");\n\t\telse\n\t\t\treturn null;\n\t}\n\tbyte [] array = base64.fromString(s);\n\tif (array == null)\n\t\tthrow exception(\"invalid base64 encoding\");\n\treturn array;\n}\n","date":"2019-05-26 00:58:59","endLine":619,"groupId":"1467","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getBase64","params":"(booleanrequired)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/93/28eb88525ddc4961608141780b6d378ac19120.src","preCode":"public byte []\ngetBase64(boolean required) throws IOException {\n\tString s = remainingStrings();\n\tif (s == null) {\n\t\tif (required)\n\t\t\tthrow exception(\"expected base64 encoded string\");\n\t\telse\n\t\t\treturn null;\n\t}\n\tbyte [] array = base64.fromString(s);\n\tif (array == null)\n\t\tthrow exception(\"invalid base64 encoding\");\n\treturn array;\n}\n","realPath":"src/main/java/org/xbill/DNS/Tokenizer.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"B"},{"authorDate":"2019-05-26 00:58:59","commitOrder":1,"curCode":"public byte []\ngetHex(boolean required) throws IOException {\n\tString s = remainingStrings();\n\tif (s == null) {\n\t\tif (required)\n\t\t\tthrow exception(\"expected hex encoded string\");\n\t\telse\n\t\t\treturn null;\n\t}\n\tbyte [] array = base16.fromString(s);\n\tif (array == null)\n\t\tthrow exception(\"invalid hex encoding\");\n\treturn array;\n}\n","date":"2019-05-26 00:58:59","endLine":657,"groupId":"1787","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getHex","params":"(booleanrequired)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/93/28eb88525ddc4961608141780b6d378ac19120.src","preCode":"public byte []\ngetHex(boolean required) throws IOException {\n\tString s = remainingStrings();\n\tif (s == null) {\n\t\tif (required)\n\t\t\tthrow exception(\"expected hex encoded string\");\n\t\telse\n\t\t\treturn null;\n\t}\n\tbyte [] array = base16.fromString(s);\n\tif (array == null)\n\t\tthrow exception(\"invalid hex encoding\");\n\treturn array;\n}\n","realPath":"src/main/java/org/xbill/DNS/Tokenizer.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":644,"status":"B"}],"commitId":"e93079c869d0c71fed597cffb092e9802b69fcf8","commitMessage":"@@@Use standard directory layout\n","date":"2019-05-26 00:58:59","modifiedFileCount":"0","status":"B","submitter":"Ingo Bauersachs"},{"authorTime":"2019-09-03 05:25:53","codes":[{"authorDate":"2019-09-03 05:25:53","commitOrder":2,"curCode":"  public byte[] getBase64(boolean required) throws IOException {\n    String s = remainingStrings();\n    if (s == null) {\n      if (required) {\n        throw exception(\"expected base64 encoded string\");\n      } else {\n        return null;\n      }\n    }\n    byte[] array = base64.fromString(s);\n    if (array == null) {\n      throw exception(\"invalid base64 encoding\");\n    }\n    return array;\n  }\n","date":"2019-09-03 05:25:53","endLine":608,"groupId":"10290","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getBase64","params":"(booleanrequired)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/7c/73425882649b53b0449e509f4f8ce133b5f7b3.src","preCode":"public byte []\ngetBase64(boolean required) throws IOException {\n\tString s = remainingStrings();\n\tif (s == null) {\n\t\tif (required)\n\t\t\tthrow exception(\"expected base64 encoded string\");\n\t\telse\n\t\t\treturn null;\n\t}\n\tbyte [] array = base64.fromString(s);\n\tif (array == null)\n\t\tthrow exception(\"invalid base64 encoding\");\n\treturn array;\n}\n","realPath":"src/main/java/org/xbill/DNS/Tokenizer.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":594,"status":"M"},{"authorDate":"2019-09-03 05:25:53","commitOrder":2,"curCode":"  public byte[] getHex(boolean required) throws IOException {\n    String s = remainingStrings();\n    if (s == null) {\n      if (required) {\n        throw exception(\"expected hex encoded string\");\n      } else {\n        return null;\n      }\n    }\n    byte[] array = base16.fromString(s);\n    if (array == null) {\n      throw exception(\"invalid hex encoding\");\n    }\n    return array;\n  }\n","date":"2019-09-03 05:25:53","endLine":648,"groupId":"10290","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getHex","params":"(booleanrequired)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/7c/73425882649b53b0449e509f4f8ce133b5f7b3.src","preCode":"public byte []\ngetHex(boolean required) throws IOException {\n\tString s = remainingStrings();\n\tif (s == null) {\n\t\tif (required)\n\t\t\tthrow exception(\"expected hex encoded string\");\n\t\telse\n\t\t\treturn null;\n\t}\n\tbyte [] array = base16.fromString(s);\n\tif (array == null)\n\t\tthrow exception(\"invalid hex encoding\");\n\treturn array;\n}\n","realPath":"src/main/java/org/xbill/DNS/Tokenizer.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":634,"status":"M"}],"commitId":"92e613b5950bab3f87525b7dd21975ef830af10b","commitMessage":"@@@Format code\n\nCloses #32\n","date":"2019-09-03 05:25:53","modifiedFileCount":"228","status":"M","submitter":"Ingo Bauersachs"}]
