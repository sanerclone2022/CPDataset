[{"authorTime":"2019-10-27 23:53:12","codes":[{"authorDate":"2019-10-27 23:53:12","commitOrder":1,"curCode":"  void getByName_invalid() throws IOException {\n    Message m = new Message();\n    m.getHeader().setRcode(Rcode.NXDOMAIN);\n    Resolver mockResolver = Mockito.mock(Resolver.class);\n    when(mockResolver.send(ArgumentMatchers.any(Message.class))).thenReturn(m);\n    Lookup.setDefaultResolver(mockResolver);\n    assertThrows(UnknownHostException.class, () -> Address.getByName(\"example.invalid\"));\n    \r\n    Lookup.refreshDefault();\n\n    assertThrows(UnknownHostException.class, () -> Address.getByName(\"\"));\n  }\n","date":"2019-10-27 23:57:00","endLine":351,"groupId":"430","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getByName_invalid","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/f8/94fcf4950b7f8270678579116aa7f30a33f224.src","preCode":"  void getByName_invalid() throws IOException {\n    Message m = new Message();\n    m.getHeader().setRcode(Rcode.NXDOMAIN);\n    Resolver mockResolver = Mockito.mock(Resolver.class);\n    when(mockResolver.send(ArgumentMatchers.any(Message.class))).thenReturn(m);\n    Lookup.setDefaultResolver(mockResolver);\n    assertThrows(UnknownHostException.class, () -> Address.getByName(\"example.invalid\"));\n    \r\n    Lookup.refreshDefault();\n\n    assertThrows(UnknownHostException.class, () -> Address.getByName(\"\"));\n  }\n","realPath":"src/test/java/org/xbill/DNS/AddressTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"B"},{"authorDate":"2019-10-27 23:53:12","commitOrder":1,"curCode":"  void getAllByName_invalid() throws IOException {\n    Message m = new Message();\n    m.getHeader().setRcode(Rcode.NXDOMAIN);\n    Resolver mockResolver = Mockito.mock(Resolver.class);\n    when(mockResolver.send(ArgumentMatchers.any(Message.class))).thenReturn(m);\n    Lookup.setDefaultResolver(mockResolver);\n    assertThrows(UnknownHostException.class, () -> Address.getAllByName(\"example.invalid\"));\n\n    \r\n    Lookup.refreshDefault();\n\n    assertThrows(UnknownHostException.class, () -> Address.getAllByName(\"\"));\n  }\n","date":"2019-10-27 23:57:00","endLine":412,"groupId":"430","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getAllByName_invalid","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/f8/94fcf4950b7f8270678579116aa7f30a33f224.src","preCode":"  void getAllByName_invalid() throws IOException {\n    Message m = new Message();\n    m.getHeader().setRcode(Rcode.NXDOMAIN);\n    Resolver mockResolver = Mockito.mock(Resolver.class);\n    when(mockResolver.send(ArgumentMatchers.any(Message.class))).thenReturn(m);\n    Lookup.setDefaultResolver(mockResolver);\n    assertThrows(UnknownHostException.class, () -> Address.getAllByName(\"example.invalid\"));\n\n    \r\n    Lookup.refreshDefault();\n\n    assertThrows(UnknownHostException.class, () -> Address.getAllByName(\"\"));\n  }\n","realPath":"src/test/java/org/xbill/DNS/AddressTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"B"}],"commitId":"dc897e67f81cdf940a5de135c9a17446998b33d3","commitMessage":"@@@Use mocks for address lookups to avoid network access\n\nCloses #77\n","date":"2019-10-27 23:57:00","modifiedFileCount":"1","status":"B","submitter":"Ingo Bauersachs"},{"authorTime":"2019-11-30 20:22:44","codes":[{"authorDate":"2019-11-30 20:22:44","commitOrder":2,"curCode":"  void getByName_invalid() throws IOException {\n    Message m = new Message();\n    m.getHeader().setRcode(Rcode.NXDOMAIN);\n    Resolver mockResolver = Mockito.mock(Resolver.class);\n    when(mockResolver.send(ArgumentMatchers.any(Message.class)))\n        .thenAnswer(\n            (Answer<Message>)\n                invocation -> {\n                  Message query = invocation.getArgument(0);\n                  Message answer = m.clone();\n                  answer.addRecord(query.getQuestion(), Section.QUESTION);\n                  return answer;\n                });\n    Lookup.setDefaultResolver(mockResolver);\n    assertThrows(UnknownHostException.class, () -> Address.getByName(\"example.invalid\"));\n    \r\n    Lookup.refreshDefault();\n\n    assertThrows(UnknownHostException.class, () -> Address.getByName(\"\"));\n  }\n","date":"2019-11-30 20:22:44","endLine":368,"groupId":"1052","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getByName_invalid","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/8e/7e912224fa9d769150b8eb0578828ad1d3a07a.src","preCode":"  void getByName_invalid() throws IOException {\n    Message m = new Message();\n    m.getHeader().setRcode(Rcode.NXDOMAIN);\n    Resolver mockResolver = Mockito.mock(Resolver.class);\n    when(mockResolver.send(ArgumentMatchers.any(Message.class))).thenReturn(m);\n    Lookup.setDefaultResolver(mockResolver);\n    assertThrows(UnknownHostException.class, () -> Address.getByName(\"example.invalid\"));\n    \r\n    Lookup.refreshDefault();\n\n    assertThrows(UnknownHostException.class, () -> Address.getByName(\"\"));\n  }\n","realPath":"src/test/java/org/xbill/DNS/AddressTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"},{"authorDate":"2019-11-30 20:22:44","commitOrder":2,"curCode":"  void getAllByName_invalid() throws IOException {\n    Message m = new Message();\n    m.getHeader().setRcode(Rcode.NXDOMAIN);\n    Resolver mockResolver = Mockito.mock(Resolver.class);\n    when(mockResolver.send(ArgumentMatchers.any(Message.class)))\n        .thenAnswer(\n            (Answer<Message>)\n                invocation -> {\n                  Message query = invocation.getArgument(0);\n                  Message answer = m.clone();\n                  answer.addRecord(query.getQuestion(), Section.QUESTION);\n                  return answer;\n                });\n    Lookup.setDefaultResolver(mockResolver);\n    assertThrows(UnknownHostException.class, () -> Address.getAllByName(\"example.invalid\"));\n\n    \r\n    Lookup.refreshDefault();\n\n    assertThrows(UnknownHostException.class, () -> Address.getAllByName(\"\"));\n  }\n","date":"2019-11-30 20:22:44","endLine":437,"groupId":"1052","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getAllByName_invalid","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/8e/7e912224fa9d769150b8eb0578828ad1d3a07a.src","preCode":"  void getAllByName_invalid() throws IOException {\n    Message m = new Message();\n    m.getHeader().setRcode(Rcode.NXDOMAIN);\n    Resolver mockResolver = Mockito.mock(Resolver.class);\n    when(mockResolver.send(ArgumentMatchers.any(Message.class))).thenReturn(m);\n    Lookup.setDefaultResolver(mockResolver);\n    assertThrows(UnknownHostException.class, () -> Address.getAllByName(\"example.invalid\"));\n\n    \r\n    Lookup.refreshDefault();\n\n    assertThrows(UnknownHostException.class, () -> Address.getAllByName(\"\"));\n  }\n","realPath":"src/test/java/org/xbill/DNS/AddressTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"M"}],"commitId":"87531546faefbe7b1443ffcbd0378237c0e29e87","commitMessage":"@@@Merge pull request #82 from dnsjava/resolver-spi\n\nRefactor nameserver lookup to an SPI interface","date":"2019-11-30 20:22:44","modifiedFileCount":"8","status":"M","submitter":"Ingo Bauersachs"}]
