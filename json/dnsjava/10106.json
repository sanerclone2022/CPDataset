[{"authorTime":"2021-02-03 17:52:16","codes":[{"authorDate":"2021-02-03 17:52:16","commitOrder":1,"curCode":"  void testRun_firstSearchPathAppendedHitsCNAME() throws Exception {\n    wireUpMockResolver(mockResolver, this::maybeCnameAnswer);\n\n    Lookup lookup = makeLookupWithResolver(mockResolver, \"hostX\");\n    lookup.setSearchPath(\"first.example.com\", \"second.example.com\");\n    Record[] results = lookup.run();\n\n    ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);\n    verify(mockResolver, times(2)).send(messageCaptor.capture());\n\n    List<Message> queries = messageCaptor.getAllValues();\n\n    assertEquals(\n        Record.newRecord(\n            Name.fromConstantString(\"hostX.first.example.com.\"), Type.A, DClass.IN, 0L),\n        queries.get(0).getQuestion());\n    assertEquals(\n        Record.newRecord(Name.fromConstantString(\"target.example.com.\"), Type.A, DClass.IN, 0L),\n        queries.get(1).getQuestion());\n\n    assertEquals(1, results.length);\n  }\n","date":"2021-02-07 01:03:49","endLine":131,"groupId":"1368","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRun_firstSearchPathAppendedHitsCNAME","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/80/029a1d89e395bb1447c68d757af24d2d672c61.src","preCode":"  void testRun_firstSearchPathAppendedHitsCNAME() throws Exception {\n    wireUpMockResolver(mockResolver, this::maybeCnameAnswer);\n\n    Lookup lookup = makeLookupWithResolver(mockResolver, \"hostX\");\n    lookup.setSearchPath(\"first.example.com\", \"second.example.com\");\n    Record[] results = lookup.run();\n\n    ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);\n    verify(mockResolver, times(2)).send(messageCaptor.capture());\n\n    List<Message> queries = messageCaptor.getAllValues();\n\n    assertEquals(\n        Record.newRecord(\n            Name.fromConstantString(\"hostX.first.example.com.\"), Type.A, DClass.IN, 0L),\n        queries.get(0).getQuestion());\n    assertEquals(\n        Record.newRecord(Name.fromConstantString(\"target.example.com.\"), Type.A, DClass.IN, 0L),\n        queries.get(1).getQuestion());\n\n    assertEquals(1, results.length);\n  }\n","realPath":"src/test/java/org/xbill/DNS/LookupTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"B"},{"authorDate":"2021-02-03 17:52:16","commitOrder":1,"curCode":"  void testRun_reuseLookup() throws Exception {\n    wireUpMockResolver(mockResolver, this::simpleAnswer);\n\n    Lookup lookup = makeLookupWithResolver(mockResolver, \"host\");\n    lookup.setSearchPath(\"first.example.com\", \"second.example.com\");\n    Record[] results = lookup.run();\n\n    ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);\n    verify(mockResolver, times(1)).send(messageCaptor.capture());\n\n    List<Message> queries = messageCaptor.getAllValues();\n\n    assertEquals(\n        Record.newRecord(Name.fromConstantString(\"host.first.example.com.\"), Type.A, DClass.IN, 0L),\n        queries.get(0).getQuestion());\n\n    assertEquals(1, results.length);\n\n    results = lookup.run();\n    assertEquals(1, results.length);\n  }\n","date":"2021-02-07 01:03:49","endLine":192,"groupId":"1368","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRun_reuseLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/80/029a1d89e395bb1447c68d757af24d2d672c61.src","preCode":"  void testRun_reuseLookup() throws Exception {\n    wireUpMockResolver(mockResolver, this::simpleAnswer);\n\n    Lookup lookup = makeLookupWithResolver(mockResolver, \"host\");\n    lookup.setSearchPath(\"first.example.com\", \"second.example.com\");\n    Record[] results = lookup.run();\n\n    ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);\n    verify(mockResolver, times(1)).send(messageCaptor.capture());\n\n    List<Message> queries = messageCaptor.getAllValues();\n\n    assertEquals(\n        Record.newRecord(Name.fromConstantString(\"host.first.example.com.\"), Type.A, DClass.IN, 0L),\n        queries.get(0).getQuestion());\n\n    assertEquals(1, results.length);\n\n    results = lookup.run();\n    assertEquals(1, results.length);\n  }\n","realPath":"src/test/java/org/xbill/DNS/LookupTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"B"}],"commitId":"4e2d8a00c28fca073afbc725db451bd8ce19804e","commitMessage":"@@@Increase test coverage in LookupTest\n","date":"2021-02-07 01:03:49","modifiedFileCount":"2","status":"B","submitter":"Noa Resare"},{"authorTime":"2021-02-03 17:52:16","codes":[{"authorDate":"2021-02-16 06:05:32","commitOrder":2,"curCode":"  void testRun_firstSearchPathAppendedHitsCNAME() throws Exception {\n    wireUpMockResolver(mockResolver, this::maybeCnameAnswer);\n\n    Lookup lookup = makeLookupWithResolver(mockResolver, \"hostX\");\n    lookup.setSearchPath(\"first.example.com\", \"second.example.com\");\n    Record[] results = lookup.run();\n\n    ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);\n    verify(mockResolver, times(2)).send(messageCaptor.capture());\n\n    List<Message> queries = messageCaptor.getAllValues();\n\n    assertEquals(\n        Record.newRecord(\n            Name.fromConstantString(\"hostX.first.example.com.\"), Type.A, DClass.IN, 0L),\n        queries.get(0).getQuestion());\n    assertEquals(\n        Record.newRecord(Name.fromConstantString(\"target.example.com.\"), Type.A, DClass.IN, 0L),\n        queries.get(1).getQuestion());\n\n    assertEquals(1, results.length);\n    assertEquals(Name.fromConstantString(\"target.example.com.\"), results[0].getName());\n    assertEquals(\n        singletonList(Name.fromConstantString(\"hostX.first.example.com.\")),\n        asList(lookup.getAliases()));\n  }\n","date":"2021-02-23 05:58:23","endLine":140,"groupId":"10106","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRun_firstSearchPathAppendedHitsCNAME","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/40/4b24179c4d4474d7e023ca2306aa47cf51b6ec.src","preCode":"  void testRun_firstSearchPathAppendedHitsCNAME() throws Exception {\n    wireUpMockResolver(mockResolver, this::maybeCnameAnswer);\n\n    Lookup lookup = makeLookupWithResolver(mockResolver, \"hostX\");\n    lookup.setSearchPath(\"first.example.com\", \"second.example.com\");\n    Record[] results = lookup.run();\n\n    ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);\n    verify(mockResolver, times(2)).send(messageCaptor.capture());\n\n    List<Message> queries = messageCaptor.getAllValues();\n\n    assertEquals(\n        Record.newRecord(\n            Name.fromConstantString(\"hostX.first.example.com.\"), Type.A, DClass.IN, 0L),\n        queries.get(0).getQuestion());\n    assertEquals(\n        Record.newRecord(Name.fromConstantString(\"target.example.com.\"), Type.A, DClass.IN, 0L),\n        queries.get(1).getQuestion());\n\n    assertEquals(1, results.length);\n  }\n","realPath":"src/test/java/org/xbill/DNS/LookupTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2021-02-03 17:52:16","commitOrder":2,"curCode":"  void testRun_reuseLookup() throws Exception {\n    wireUpMockResolver(mockResolver, this::simpleAnswer);\n\n    Lookup lookup = makeLookupWithResolver(mockResolver, \"host\");\n    lookup.setSearchPath(\"first.example.com\", \"second.example.com\");\n    Record[] results = lookup.run();\n\n    ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);\n    verify(mockResolver, times(1)).send(messageCaptor.capture());\n\n    List<Message> queries = messageCaptor.getAllValues();\n\n    assertEquals(\n        Record.newRecord(Name.fromConstantString(\"host.first.example.com.\"), Type.A, DClass.IN, 0L),\n        queries.get(0).getQuestion());\n\n    assertEquals(1, results.length);\n\n    results = lookup.run();\n    assertEquals(1, results.length);\n  }\n","date":"2021-02-07 01:03:49","endLine":192,"groupId":"10106","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRun_reuseLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dnsjava-10-0.7/blobInfo/CC_OUT/blobs/80/029a1d89e395bb1447c68d757af24d2d672c61.src","preCode":"  void testRun_reuseLookup() throws Exception {\n    wireUpMockResolver(mockResolver, this::simpleAnswer);\n\n    Lookup lookup = makeLookupWithResolver(mockResolver, \"host\");\n    lookup.setSearchPath(\"first.example.com\", \"second.example.com\");\n    Record[] results = lookup.run();\n\n    ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);\n    verify(mockResolver, times(1)).send(messageCaptor.capture());\n\n    List<Message> queries = messageCaptor.getAllValues();\n\n    assertEquals(\n        Record.newRecord(Name.fromConstantString(\"host.first.example.com.\"), Type.A, DClass.IN, 0L),\n        queries.get(0).getQuestion());\n\n    assertEquals(1, results.length);\n\n    results = lookup.run();\n    assertEquals(1, results.length);\n  }\n","realPath":"src/test/java/org/xbill/DNS/LookupTest.java","repoName":"dnsjava","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"N"}],"commitId":"0f5aa49a0d593720ddb5322c5ab9b5b12450a81f","commitMessage":"@@@Introduce LookupSession an asynchonous lookup interface\n\nBuilding on the work introducing Resolver.sendAsync() this\nchange brings an asynchronous Lookup interface\nLookupSession.lookupAsync() together with immutable value\nobjects.  an exception hierarchy and tests.\n","date":"2021-02-23 05:58:23","modifiedFileCount":"1","status":"M","submitter":"Noa Resare"}]
