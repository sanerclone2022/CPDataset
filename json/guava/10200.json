[{"authorTime":"2017-10-03 23:11:03","codes":[{"authorDate":"2017-10-03 23:11:03","commitOrder":1,"curCode":"  public void forGraph_depthFirstPostOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(DIAMOND_GRAPH);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPostOrder('a');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"db\");\n    assertThat(graph.requestedNodes).containsExactly('a', 'b', 'd');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"db\");\n    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b', 'd', 'd');\n  }\n","date":"2017-10-03 23:47:27","endLine":272,"groupId":"6267","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"forGraph_depthFirstPostOrder_iterableIsLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/c2/e03c21b86e3a38d97b52a37d6fa4234f591538.src","preCode":"  public void forGraph_depthFirstPostOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(DIAMOND_GRAPH);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPostOrder('a');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"db\");\n    assertThat(graph.requestedNodes).containsExactly('a', 'b', 'd');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"db\");\n    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b', 'd', 'd');\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"B"},{"authorDate":"2017-10-03 23:11:03","commitOrder":1,"curCode":"  public void forGraph_depthFirstPostOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(DIAMOND_GRAPH);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPostOrder('a');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"db\");\n    assertThat(graph.requestedNodes).containsExactly('a', 'b', 'd');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"db\");\n    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b', 'd', 'd');\n  }\n","date":"2017-10-03 23:47:27","endLine":272,"groupId":"6267","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"forGraph_depthFirstPostOrder_iterableIsLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/c2/e03c21b86e3a38d97b52a37d6fa4234f591538.src","preCode":"  public void forGraph_depthFirstPostOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(DIAMOND_GRAPH);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPostOrder('a');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"db\");\n    assertThat(graph.requestedNodes).containsExactly('a', 'b', 'd');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"db\");\n    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b', 'd', 'd');\n  }\n","realPath":"guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"B"}],"commitId":"ca438f5a1f69d37e39f506cbdbc09fdb1e569838","commitMessage":"@@@Implement Traverser.forGraph().depthFirst*().\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=170856993\n","date":"2017-10-03 23:47:27","modifiedFileCount":"4","status":"B","submitter":"jnyman"},{"authorTime":"2017-10-17 17:55:09","codes":[{"authorDate":"2017-10-17 17:55:09","commitOrder":2,"curCode":"  public void forGraph_depthFirstPostOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(DIAMOND_GRAPH);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPostOrder('a');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"db\");\n    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'd');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"db\");\n    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b', 'd', 'd');\n  }\n","date":"2017-10-17 22:15:10","endLine":408,"groupId":"10200","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"forGraph_depthFirstPostOrder_iterableIsLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/e0/402b675470112b228b5df01c518638f2123a55.src","preCode":"  public void forGraph_depthFirstPostOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(DIAMOND_GRAPH);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPostOrder('a');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"db\");\n    assertThat(graph.requestedNodes).containsExactly('a', 'b', 'd');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"db\");\n    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b', 'd', 'd');\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":398,"status":"M"},{"authorDate":"2017-10-17 17:55:09","commitOrder":2,"curCode":"  public void forGraph_depthFirstPostOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(DIAMOND_GRAPH);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPostOrder('a');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"db\");\n    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'd');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"db\");\n    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b', 'd', 'd');\n  }\n","date":"2017-10-17 22:15:10","endLine":408,"groupId":"10200","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"forGraph_depthFirstPostOrder_iterableIsLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/e0/402b675470112b228b5df01c518638f2123a55.src","preCode":"  public void forGraph_depthFirstPostOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(DIAMOND_GRAPH);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPostOrder('a');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"db\");\n    assertThat(graph.requestedNodes).containsExactly('a', 'b', 'd');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"db\");\n    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b', 'd', 'd');\n  }\n","realPath":"guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":398,"status":"M"}],"commitId":"50b0e455510e599e418c18ccd65a4b53f9dc3b50","commitMessage":"@@@Traverser: Throw IAE if startNode is not part of the graph and add tests for empty graph case and disjoint trees (forest) case.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=172443426\n","date":"2017-10-17 22:15:10","modifiedFileCount":"4","status":"M","submitter":"jnyman"}]
