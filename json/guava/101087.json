[{"authorTime":"2016-08-06 03:45:40","codes":[{"authorDate":"2017-04-21 05:33:38","commitOrder":3,"curCode":"  public void testPatternSplitLookBehind() {\n    if (!Platform.usingJdkPatternCompiler()) {\n      return;\n    }\n    String toSplit = \":foo::barbaz:\";\n    String regexPattern = \"(?<=:)\";\n    Iterable<String> split = Splitter.onPattern(regexPattern).split(toSplit);\n    assertThat(split).containsExactly(\":\", \"foo:\", \":\", \"barbaz:\").inOrder();\n    \r\n  }\n","date":"2017-04-21 10:27:51","endLine":375,"groupId":"9583","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPatternSplitLookBehind","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/71/c3230c7e6aa8db374ff59250c9117e4f2cbfd1.src","preCode":"  public void testPatternSplitLookBehind() {\n    if (!Platform.usingJdkPatternCompiler()) {\n      return;\n    }\n    String toSplit = \":foo::barbaz:\";\n    String regexPattern = \"(?<=:)\";\n    Iterable<String> split = Splitter.onPattern(regexPattern).split(toSplit);\n    assertThat(split).containsExactly(\":\", \"foo:\", \":\", \"barbaz:\").inOrder();\n    \r\n  }\n","realPath":"android/guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"B"},{"authorDate":"2016-08-06 03:45:40","commitOrder":3,"curCode":"  public void testPatternSplitLookBehind() {\n    if (!Platform.usingJdkPatternCompiler()) {\n      return;\n    }\n    String toSplit = \":foo::barbaz:\";\n    String regexPattern = \"(?<=:)\";\n    Iterable<String> split = Splitter.onPattern(regexPattern).split(toSplit);\n    assertThat(split).containsExactly(\":\", \"foo:\", \":\", \"barbaz:\").inOrder();\n    \r\n  }\n","date":"2016-08-06 03:56:59","endLine":375,"groupId":"9583","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPatternSplitLookBehind","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/26/dad19e3cdb7021247ca71d0ef146b4e13b4165.src","preCode":"  public void testPatternSplitLookBehind() {\n    if (!Platform.usingJdkPatternCompiler()) {\n      return;\n    }\n    String toSplit = \":foo::barbaz:\";\n    String regexPattern = \"(?<=:)\";\n    Iterable<String> split = Splitter.onPattern(regexPattern).split(toSplit);\n    assertThat(split).containsExactly(\":\", \"foo:\", \":\", \"barbaz:\").inOrder();\n    \r\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"NB"}],"commitId":"9b94fb3965c6869b0ac47420958a4bbae0b2d54c","commitMessage":"@@@Begin exporting sources of Guava for Android.\n\npom.xml files to come.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=153757913\n","date":"2017-04-21 10:27:51","modifiedFileCount":"0","status":"M","submitter":"zhenghua"},{"authorTime":"2018-07-12 23:08:25","codes":[{"authorDate":"2018-07-12 23:08:25","commitOrder":4,"curCode":"  public void testPatternSplitLookBehind() {\n    if (!CommonPattern.isPcreLike()) {\n      return;\n    }\n    String toSplit = \":foo::barbaz:\";\n    String regexPattern = \"(?<=:)\";\n    Iterable<String> split = Splitter.onPattern(regexPattern).split(toSplit);\n    assertThat(split).containsExactly(\":\", \"foo:\", \":\", \"barbaz:\").inOrder();\n    \r\n  }\n","date":"2018-07-13 23:29:33","endLine":365,"groupId":"101087","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPatternSplitLookBehind","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/b1/b19fcce4cdda25203f97f668ac21b2e3607a2b.src","preCode":"  public void testPatternSplitLookBehind() {\n    if (!Platform.usingJdkPatternCompiler()) {\n      return;\n    }\n    String toSplit = \":foo::barbaz:\";\n    String regexPattern = \"(?<=:)\";\n    Iterable<String> split = Splitter.onPattern(regexPattern).split(toSplit);\n    assertThat(split).containsExactly(\":\", \"foo:\", \":\", \"barbaz:\").inOrder();\n    \r\n  }\n","realPath":"android/guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"M"},{"authorDate":"2018-07-12 23:08:25","commitOrder":4,"curCode":"  public void testPatternSplitLookBehind() {\n    if (!CommonPattern.isPcreLike()) {\n      return;\n    }\n    String toSplit = \":foo::barbaz:\";\n    String regexPattern = \"(?<=:)\";\n    Iterable<String> split = Splitter.onPattern(regexPattern).split(toSplit);\n    assertThat(split).containsExactly(\":\", \"foo:\", \":\", \"barbaz:\").inOrder();\n    \r\n  }\n","date":"2018-07-13 23:29:33","endLine":365,"groupId":"101087","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPatternSplitLookBehind","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/b1/b19fcce4cdda25203f97f668ac21b2e3607a2b.src","preCode":"  public void testPatternSplitLookBehind() {\n    if (!Platform.usingJdkPatternCompiler()) {\n      return;\n    }\n    String toSplit = \":foo::barbaz:\";\n    String regexPattern = \"(?<=:)\";\n    Iterable<String> split = Splitter.onPattern(regexPattern).split(toSplit);\n    assertThat(split).containsExactly(\":\", \"foo:\", \":\", \"barbaz:\").inOrder();\n    \r\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"M"}],"commitId":"08adcecc14943e90cb5c0fe05748c5ba9fa9e065","commitMessage":"@@@Internally.  use PatternCompiler from Doubles.tryParse.\n\n(Redo of CL 202132002.  which was partially rolled back in CL 202139691.)\n\nThis time including tests to cover the RE2J approach.\nTo avoid the errors of last time.  I had to remove the possessive quantifiers under RE2J and replace \\p{XDigit} with [0-9a-fA-F] (which is equivalent; see the Pattern Javadoc).\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=204301262\n","date":"2018-07-13 23:29:33","modifiedFileCount":"11","status":"M","submitter":"cpovirk"}]
