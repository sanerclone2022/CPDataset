[{"authorTime":"2016-09-01 12:04:06","codes":[{"authorDate":"2016-09-01 12:04:06","commitOrder":2,"curCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(Graphs.equivalent(transpose, expectedTranspose)).isTrue();\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","date":"2016-09-01 22:30:43","endLine":286,"groupId":"5565","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedValueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/de/ebce61f575d7158dba0c00c44978949473092f.src","preCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(Graphs.equivalent(transpose, expectedTranspose)).isTrue();\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"B"},{"authorDate":"2016-09-01 12:04:06","commitOrder":2,"curCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(Graphs.equivalent(inducedSubgraph(directedGraph, nodeSubset), expectedSubgraph))\n        .isTrue();\n  }\n","date":"2016-09-01 22:30:43","endLine":366,"groupId":"1877","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"inducedSubgraph_valueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/de/ebce61f575d7158dba0c00c44978949473092f.src","preCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(Graphs.equivalent(inducedSubgraph(directedGraph, nodeSubset), expectedSubgraph))\n        .isTrue();\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"MB"}],"commitId":"cfe05dfda3ba79aa1bd3acce6b4e766eb7b9bc00","commitMessage":"@@@Changes to common.graph. Sorry for the churn.  but after this things should be settled down for a while (and we'll be launching v20 soon!). Changes include:\n\n-Revert the interface names back. \"BasicGraph\" is now \"Graph\" (BasicGraph was probably a a poor choice).  and \"Graph\" is now \"ValueGraph\". The \"node only\" Graph interface is at the top of the interface hierarchy.  and ValueGraph extends it.\n-To facilitate the above.  the various graph interfaces do *not* specify equality.  and the default implementations use reference (identity) equality.\n-Add static methods Graphs.equivalent(...) for users that want value-based equality.\n-Rename Endpoints to EndpointPair. Rename nodeA()/nodeB() to nodeU()/nodeV() and expose isOrdered().\n\nMinor changes:\n\n-Undid the small refactor from [] since the original structure makes it easier for the Immutable classes to have the right hierarchy (i.e. ImmutableValueGraph extends ImmutableGraph.  ImmutableNetwork.asGraph() is an ImmutableGraph).\n-Added an \"isEquivalentTo\" method to NetworkSubject (formerly GraphSubject) in labs. Eventually we should get around to having a single truth import for both Graphs and Networks.\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=131906631\n","date":"2016-09-01 22:30:43","modifiedFileCount":"34","status":"M","submitter":"jasexton"},{"authorTime":"2016-09-01 12:04:06","codes":[{"authorDate":"2016-09-02 00:58:09","commitOrder":3,"curCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(Graphs.equivalent(transpose, expectedTranspose)).isTrue();\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    EndpointPair<Integer> pair12 = EndpointPair.ordered(N1, N2);\n    assertThat(transpose.edgeValues().get(pair12)).isNull();\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValues().get(pair12)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","date":"2016-09-02 01:46:22","endLine":287,"groupId":"5565","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedValueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/60/8ff8cc431e2586318579ca8d1375eb9c8a6e1f.src","preCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(Graphs.equivalent(transpose, expectedTranspose)).isTrue();\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"},{"authorDate":"2016-09-01 12:04:06","commitOrder":3,"curCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(Graphs.equivalent(inducedSubgraph(directedGraph, nodeSubset), expectedSubgraph))\n        .isTrue();\n  }\n","date":"2016-09-01 22:30:43","endLine":366,"groupId":"1877","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"inducedSubgraph_valueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/de/ebce61f575d7158dba0c00c44978949473092f.src","preCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(Graphs.equivalent(inducedSubgraph(directedGraph, nodeSubset), expectedSubgraph))\n        .isTrue();\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"N"}],"commitId":"58f40144cd50246dfebd00d36e372527ba912d0b","commitMessage":"@@@Add ValueGraph.edgeValues(). Remove ValueGraph.edgeValueOrDefault(node.  node).\n\nThere's a few nice things we get out of this. An easy way to address all the values in a ValueGraph as a single collection (edgeValues().values()). An easy way to get an edge value if you're dealing with \"EndpointPair\"s. And if you're on Java 8+.  Map has getOrDefault() plus some other nifty methods.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=131959724\n","date":"2016-09-02 01:46:22","modifiedFileCount":"9","status":"M","submitter":"jasexton"},{"authorTime":"2016-09-01 12:04:06","codes":[{"authorDate":"2016-09-27 07:19:41","commitOrder":4,"curCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N3, E13);\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N3, N1, E13);\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(Graphs.equivalent(transpose, expectedTranspose)).isTrue();\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","date":"2016-09-27 21:46:03","endLine":276,"groupId":"967","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedValueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/cd/c09c74891f88d894103ac980af2fb9ef412160.src","preCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(Graphs.equivalent(transpose, expectedTranspose)).isTrue();\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    EndpointPair<Integer> pair12 = EndpointPair.ordered(N1, N2);\n    assertThat(transpose.edgeValues().get(pair12)).isNull();\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValues().get(pair12)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"},{"authorDate":"2016-09-01 12:04:06","commitOrder":4,"curCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(Graphs.equivalent(inducedSubgraph(directedGraph, nodeSubset), expectedSubgraph))\n        .isTrue();\n  }\n","date":"2016-09-01 22:30:43","endLine":366,"groupId":"1877","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"inducedSubgraph_valueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/de/ebce61f575d7158dba0c00c44978949473092f.src","preCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(Graphs.equivalent(inducedSubgraph(directedGraph, nodeSubset), expectedSubgraph))\n        .isTrue();\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"N"}],"commitId":"f02ea7e285d73bb13fe02a4a05802b4710fa3d44","commitMessage":"@@@Add edgeValueOrDefault() method to ValueGraph interface.  and remove Map-returning edgeValues() for now. This CL effectively rolls back []\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=134341213\n","date":"2016-09-27 21:46:03","modifiedFileCount":"6","status":"M","submitter":"jasexton"},{"authorTime":"2016-09-01 12:04:06","codes":[{"authorDate":"2017-01-18 11:33:36","commitOrder":5,"curCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N3, E13);\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N3, N1, E13);\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(Graphs.equivalent(transpose, expectedTranspose)).isTrue();\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n  }\n","date":"2017-01-19 23:46:22","endLine":276,"groupId":"967","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedValueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/1a/57a9dc65bca5b73ab4621291895c95f39bb438.src","preCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N3, E13);\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N3, N1, E13);\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(Graphs.equivalent(transpose, expectedTranspose)).isTrue();\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"},{"authorDate":"2016-09-01 12:04:06","commitOrder":5,"curCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(Graphs.equivalent(inducedSubgraph(directedGraph, nodeSubset), expectedSubgraph))\n        .isTrue();\n  }\n","date":"2016-09-01 22:30:43","endLine":366,"groupId":"1877","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"inducedSubgraph_valueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/de/ebce61f575d7158dba0c00c44978949473092f.src","preCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(Graphs.equivalent(inducedSubgraph(directedGraph, nodeSubset), expectedSubgraph))\n        .isTrue();\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"N"}],"commitId":"6c02e370ae4256ea1ed027c41cc20639ca09a1a5","commitMessage":"@@@Make it so ValueGraph no longer extends Graph. Instead.  provide a ValueGraph.asGraph() method. In a followup change.  this will allow us to handle equals()/hashCode() \"normally\" and delete the Graphs.equivalent() methods.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=144787090\n","date":"2017-01-19 23:46:22","modifiedFileCount":"14","status":"M","submitter":"jasexton"},{"authorTime":"2017-01-18 12:02:14","codes":[{"authorDate":"2017-01-18 12:02:14","commitOrder":6,"curCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N3, E13);\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N3, N1, E13);\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n  }\n","date":"2017-01-19 23:53:15","endLine":276,"groupId":"967","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedValueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/67/32ab9da9f2d6b1cfd8978db3453c4ca301cca9.src","preCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N3, E13);\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N3, N1, E13);\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(Graphs.equivalent(transpose, expectedTranspose)).isTrue();\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"},{"authorDate":"2017-01-18 12:02:14","commitOrder":6,"curCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(inducedSubgraph(directedGraph, nodeSubset)).isEqualTo(expectedSubgraph);\n  }\n","date":"2017-01-19 23:53:15","endLine":356,"groupId":"1877","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"inducedSubgraph_valueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/67/32ab9da9f2d6b1cfd8978db3453c4ca301cca9.src","preCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(Graphs.equivalent(inducedSubgraph(directedGraph, nodeSubset), expectedSubgraph))\n        .isTrue();\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"M"}],"commitId":"d0dc9ce896df6299de427063fa69bd348937ef1f","commitMessage":"@@@Now that ValueGraph no longer extends Graph.  change all the common.graph interfaces to handle equals()/hashCode() \"normally\". Deprecate Graphs.equivalent().\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=144788407\n","date":"2017-01-19 23:53:15","modifiedFileCount":"14","status":"M","submitter":"jasexton"},{"authorTime":"2017-01-18 12:02:14","codes":[{"authorDate":"2017-01-20 04:48:06","commitOrder":7,"curCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N3, E13);\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N3, N1, E13);\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n  }\n","date":"2017-01-20 23:49:40","endLine":276,"groupId":"967","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedValueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/22/b765b41ab5679ddf1701e941496b96cc4c4e7b.src","preCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N3, E13);\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N3, N1, E13);\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"},{"authorDate":"2017-01-18 12:02:14","commitOrder":7,"curCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(inducedSubgraph(directedGraph, nodeSubset)).isEqualTo(expectedSubgraph);\n  }\n","date":"2017-01-19 23:53:15","endLine":356,"groupId":"1877","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"inducedSubgraph_valueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/67/32ab9da9f2d6b1cfd8978db3453c4ca301cca9.src","preCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(inducedSubgraph(directedGraph, nodeSubset)).isEqualTo(expectedSubgraph);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"N"}],"commitId":"26adf8f40095d21904711b9edf94ac258754bce7","commitMessage":"@@@Shuffling from internal-only change.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=144996795\n","date":"2017-01-20 23:49:40","modifiedFileCount":"1","status":"M","submitter":"jasexton"},{"authorTime":"2017-01-18 12:02:14","codes":[{"authorDate":"2017-07-08 04:05:13","commitOrder":8,"curCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N3, E13);\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N3, N1, E13);\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n\n    assertThat(transpose.edgeValueOrNull(N1, N2)).isNull();\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValueOrNull(N1, N2)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n  }\n","date":"2017-07-10 22:17:22","endLine":276,"groupId":"967","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedValueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/b8/033f225a8f9af9b587aa26fdb3e813ca8c1866.src","preCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N3, E13);\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N3, N1, E13);\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"},{"authorDate":"2017-01-18 12:02:14","commitOrder":8,"curCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(inducedSubgraph(directedGraph, nodeSubset)).isEqualTo(expectedSubgraph);\n  }\n","date":"2017-01-19 23:53:15","endLine":356,"groupId":"1877","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"inducedSubgraph_valueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/67/32ab9da9f2d6b1cfd8978db3453c4ca301cca9.src","preCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(inducedSubgraph(directedGraph, nodeSubset)).isEqualTo(expectedSubgraph);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"N"}],"commitId":"0f6096df9105ecbbb2d32017eae8fd63562ab298","commitMessage":"@@@ValueGraph.edgeValue*: change from\n* V edgeValue().  V edgeValueOrDefault()\nto\n* Optional<V> edgeValue().  V edgeValueOrNull()\n\nFixed Graphs.inducedSubgraph() implementations so that it appropriately specifies the # of nodes in the induced subgraph as being the size of the supplied node Iterable.\n\nFixed MoreGraphs.inducedSubgraph() implementations so that the filtered nodes are being returned as Lists rather than Iterators.  so that calculating their size doesn't exhaust the Iterator.\n\nFixed the graph *Builder from() methods so that they are all uniformly enforcing types (this was causing MOE problems in conjunction with the expectedNodes() call.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=161235517\n","date":"2017-07-10 22:17:22","modifiedFileCount":"21","status":"M","submitter":"jrtom"},{"authorTime":"2017-01-18 12:02:14","codes":[{"authorDate":"2017-07-13 07:46:12","commitOrder":9,"curCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N3, E13);\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N3, N1, E13);\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n  }\n","date":"2017-07-14 03:02:58","endLine":276,"groupId":"967","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedValueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/43/95c4a3e921e72a8c29fafb3ab17c727ba9036e.src","preCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N3, E13);\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N3, N1, E13);\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n\n    assertThat(transpose.edgeValueOrNull(N1, N2)).isNull();\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValueOrNull(N1, N2)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"},{"authorDate":"2017-01-18 12:02:14","commitOrder":9,"curCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(inducedSubgraph(directedGraph, nodeSubset)).isEqualTo(expectedSubgraph);\n  }\n","date":"2017-01-19 23:53:15","endLine":356,"groupId":"1877","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"inducedSubgraph_valueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/67/32ab9da9f2d6b1cfd8978db3453c4ca301cca9.src","preCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(inducedSubgraph(directedGraph, nodeSubset)).isEqualTo(expectedSubgraph);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"N"}],"commitId":"66b3e26aadf5ec82808a0965b2a894addb0970e9","commitMessage":"@@@ValueGraph.java: restore edgeValueOrNull() to edgeValueOrDefault().\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=161738013\n","date":"2017-07-14 03:02:58","modifiedFileCount":"14","status":"M","submitter":"jrtom"},{"authorTime":"2017-01-18 12:02:14","codes":[{"authorDate":"2017-07-14 04:35:55","commitOrder":10,"curCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N3, E13);\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N3, N1, E13);\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();\n    for (Integer node : directedGraph.nodes()) {\n      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));\n      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));\n    }\n\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n  }\n","date":"2017-07-14 06:31:44","endLine":286,"groupId":"967","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedValueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/41/78d088922bfec1663790ca0d2092cbd2ae9231.src","preCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N3, E13);\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N3, N1, E13);\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"M"},{"authorDate":"2017-01-18 12:02:14","commitOrder":10,"curCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(inducedSubgraph(directedGraph, nodeSubset)).isEqualTo(expectedSubgraph);\n  }\n","date":"2017-01-19 23:53:15","endLine":356,"groupId":"1877","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"inducedSubgraph_valueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/67/32ab9da9f2d6b1cfd8978db3453c4ca301cca9.src","preCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(inducedSubgraph(directedGraph, nodeSubset)).isEqualTo(expectedSubgraph);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"N"}],"commitId":"4a6ce819542d5fe440bd5d13956bb4e46084325c","commitMessage":"@@@common.graph: create (package-protected) ForwardingValueGraph and ForwardingNetwork classes.  and use those (and ForwardingGraph) to simplify the implementation of the Transposed* inner classes in Graphs.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=161856111\n","date":"2017-07-14 06:31:44","modifiedFileCount":"6","status":"M","submitter":"jrtom"},{"authorTime":"2017-01-18 12:02:14","codes":[{"authorDate":"2019-05-01 23:30:59","commitOrder":11,"curCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N3, E13);\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N3, N1, E13);\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameInstanceAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();\n    for (Integer node : directedGraph.nodes()) {\n      assertThat(directedGraph.inDegree(node)).isSameInstanceAs(transpose.outDegree(node));\n      assertThat(directedGraph.outDegree(node)).isSameInstanceAs(transpose.inDegree(node));\n    }\n\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n  }\n","date":"2019-05-06 02:02:35","endLine":286,"groupId":"10609","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedValueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/b2/2567620eddea3eb8053d1e9e7a9146726fe9e7.src","preCode":"  public void transpose_directedValueGraph() {\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N3, E13);\n    directedGraph.putEdgeValue(N3, N1, E31);\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N1, N1, E11);\n    directedGraph.putEdgeValue(N3, N4, E34);\n\n    MutableValueGraph<Integer, String> expectedTranspose =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdgeValue(N3, N1, E13);\n    expectedTranspose.putEdgeValue(N1, N3, E31);\n    expectedTranspose.putEdgeValue(N2, N1, E12);\n    expectedTranspose.putEdgeValue(N1, N1, E11);\n    expectedTranspose.putEdgeValue(N4, N3, E34);\n\n    ValueGraph<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();\n    for (Integer node : directedGraph.nodes()) {\n      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));\n      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));\n    }\n\n    directedGraph.putEdgeValue(N2, N1, E21);\n    \r\n    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);\n    AbstractGraphTest.validateGraph(transpose.asGraph());\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"M"},{"authorDate":"2017-01-18 12:02:14","commitOrder":11,"curCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(inducedSubgraph(directedGraph, nodeSubset)).isEqualTo(expectedSubgraph);\n  }\n","date":"2017-01-19 23:53:15","endLine":356,"groupId":"10609","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"inducedSubgraph_valueGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/67/32ab9da9f2d6b1cfd8978db3453c4ca301cca9.src","preCode":"  public void inducedSubgraph_valueGraph() {\n    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);\n\n    MutableValueGraph<Integer, String> directedGraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdgeValue(N1, N2, E12);\n    directedGraph.putEdgeValue(N2, N1, E21);\n    directedGraph.putEdgeValue(N1, N3, E13); \r\n    directedGraph.putEdgeValue(N4, N4, E44);\n    directedGraph.putEdgeValue(5, 6, \"5-6\"); \r\n\n    MutableValueGraph<Integer, String> expectedSubgraph =\n        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedSubgraph.putEdgeValue(N1, N2, E12);\n    expectedSubgraph.putEdgeValue(N2, N1, E21);\n    expectedSubgraph.putEdgeValue(N4, N4, E44);\n\n    assertThat(inducedSubgraph(directedGraph, nodeSubset)).isEqualTo(expectedSubgraph);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"N"}],"commitId":"c8542f65ca36545089b7a9fa8aebaad8a7da8762","commitMessage":"@@@Migrate from is(Not)SameAs to is(Not)SameInstanceAs.\n\nThey behave identically.  and the old names are being removed.\n\nOpen-source note: The new methods are available in Truth as of version 0.44.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=246135538\n","date":"2019-05-06 02:02:35","modifiedFileCount":"40","status":"M","submitter":"cpovirk"}]
