[{"authorTime":"2017-09-23 00:35:33","codes":[{"authorDate":"2017-09-23 00:35:33","commitOrder":1,"curCode":"  private static SuccessorsFunction<Character> createGraph(boolean directed, String... edges) {\n    ImmutableMultimap.Builder<Character, Character> graphMapBuilder = ImmutableMultimap.builder();\n    for (String edge : edges) {\n      checkArgument(\n          edge.length() == 2, \"Expecting each edge to consist of 2 characters but got %s\", edge);\n      char node1 = edge.charAt(0);\n      char node2 = edge.charAt(1);\n      graphMapBuilder.put(node1, node2);\n      if (!directed) {\n        graphMapBuilder.put(node2, node1);\n      }\n    }\n    final ImmutableMultimap<Character, Character> graphMap = graphMapBuilder.build();\n\n    return new SuccessorsFunction<Character>() {\n      @Override\n      public Iterable<? extends Character> successors(Character node) {\n        return Ordering.natural().immutableSortedCopy(graphMap.get(node));\n      }\n    };\n  }\n","date":"2017-09-23 01:34:31","endLine":193,"groupId":"8542","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createGraph","params":"(booleandirected@String...edges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/3a/07996ee714f965643f27d058fff4de305a6edf.src","preCode":"  private static SuccessorsFunction<Character> createGraph(boolean directed, String... edges) {\n    ImmutableMultimap.Builder<Character, Character> graphMapBuilder = ImmutableMultimap.builder();\n    for (String edge : edges) {\n      checkArgument(\n          edge.length() == 2, \"Expecting each edge to consist of 2 characters but got %s\", edge);\n      char node1 = edge.charAt(0);\n      char node2 = edge.charAt(1);\n      graphMapBuilder.put(node1, node2);\n      if (!directed) {\n        graphMapBuilder.put(node2, node1);\n      }\n    }\n    final ImmutableMultimap<Character, Character> graphMap = graphMapBuilder.build();\n\n    return new SuccessorsFunction<Character>() {\n      @Override\n      public Iterable<? extends Character> successors(Character node) {\n        return Ordering.natural().immutableSortedCopy(graphMap.get(node));\n      }\n    };\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"B"},{"authorDate":"2017-09-23 00:35:33","commitOrder":1,"curCode":"  private static SuccessorsFunction<Character> createGraph(boolean directed, String... edges) {\n    ImmutableMultimap.Builder<Character, Character> graphMapBuilder = ImmutableMultimap.builder();\n    for (String edge : edges) {\n      checkArgument(\n          edge.length() == 2, \"Expecting each edge to consist of 2 characters but got %s\", edge);\n      char node1 = edge.charAt(0);\n      char node2 = edge.charAt(1);\n      graphMapBuilder.put(node1, node2);\n      if (!directed) {\n        graphMapBuilder.put(node2, node1);\n      }\n    }\n    final ImmutableMultimap<Character, Character> graphMap = graphMapBuilder.build();\n\n    return new SuccessorsFunction<Character>() {\n      @Override\n      public Iterable<? extends Character> successors(Character node) {\n        return Ordering.natural().immutableSortedCopy(graphMap.get(node));\n      }\n    };\n  }\n","date":"2017-09-23 01:34:31","endLine":193,"groupId":"8542","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createGraph","params":"(booleandirected@String...edges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/3a/07996ee714f965643f27d058fff4de305a6edf.src","preCode":"  private static SuccessorsFunction<Character> createGraph(boolean directed, String... edges) {\n    ImmutableMultimap.Builder<Character, Character> graphMapBuilder = ImmutableMultimap.builder();\n    for (String edge : edges) {\n      checkArgument(\n          edge.length() == 2, \"Expecting each edge to consist of 2 characters but got %s\", edge);\n      char node1 = edge.charAt(0);\n      char node2 = edge.charAt(1);\n      graphMapBuilder.put(node1, node2);\n      if (!directed) {\n        graphMapBuilder.put(node2, node1);\n      }\n    }\n    final ImmutableMultimap<Character, Character> graphMap = graphMapBuilder.build();\n\n    return new SuccessorsFunction<Character>() {\n      @Override\n      public Iterable<? extends Character> successors(Character node) {\n        return Ordering.natural().immutableSortedCopy(graphMap.get(node));\n      }\n    };\n  }\n","realPath":"guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"B"}],"commitId":"8b4267b28dc8e2be748f03f07005ac45ab9b3223","commitMessage":"@@@Implement Traverser.forGraph().breadhFirst().\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=169699092\n","date":"2017-09-23 01:34:31","modifiedFileCount":"2","status":"B","submitter":"jnyman"},{"authorTime":"2017-10-17 17:55:09","codes":[{"authorDate":"2017-10-17 17:55:09","commitOrder":2,"curCode":"  private static SuccessorsFunction<Character> createGraph(boolean directed, String... edges) {\n    ImmutableMultimap.Builder<Character, Character> graphMapBuilder = ImmutableMultimap.builder();\n    for (String edge : edges) {\n      checkArgument(\n          edge.length() == 2, \"Expecting each edge to consist of 2 characters but got %s\", edge);\n      char node1 = edge.charAt(0);\n      char node2 = edge.charAt(1);\n      graphMapBuilder.put(node1, node2);\n      if (!directed) {\n        graphMapBuilder.put(node2, node1);\n      }\n    }\n    final ImmutableMultimap<Character, Character> graphMap = graphMapBuilder.build();\n\n    return new SuccessorsFunction<Character>() {\n      @Override\n      public Iterable<? extends Character> successors(Character node) {\n        checkArgument(\n            graphMap.containsKey(node) || graphMap.containsValue(node),\n            \"Node %s is not an element of this graph\",\n            node);\n        return Ordering.natural().immutableSortedCopy(graphMap.get(node));\n      }\n    };\n  }\n","date":"2017-10-17 22:15:10","endLine":679,"groupId":"10281","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createGraph","params":"(booleandirected@String...edges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/e0/402b675470112b228b5df01c518638f2123a55.src","preCode":"  private static SuccessorsFunction<Character> createGraph(boolean directed, String... edges) {\n    ImmutableMultimap.Builder<Character, Character> graphMapBuilder = ImmutableMultimap.builder();\n    for (String edge : edges) {\n      checkArgument(\n          edge.length() == 2, \"Expecting each edge to consist of 2 characters but got %s\", edge);\n      char node1 = edge.charAt(0);\n      char node2 = edge.charAt(1);\n      graphMapBuilder.put(node1, node2);\n      if (!directed) {\n        graphMapBuilder.put(node2, node1);\n      }\n    }\n    final ImmutableMultimap<Character, Character> graphMap = graphMapBuilder.build();\n\n    return new SuccessorsFunction<Character>() {\n      @Override\n      public Iterable<? extends Character> successors(Character node) {\n        return Ordering.natural().immutableSortedCopy(graphMap.get(node));\n      }\n    };\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":655,"status":"M"},{"authorDate":"2017-10-17 17:55:09","commitOrder":2,"curCode":"  private static SuccessorsFunction<Character> createGraph(boolean directed, String... edges) {\n    ImmutableMultimap.Builder<Character, Character> graphMapBuilder = ImmutableMultimap.builder();\n    for (String edge : edges) {\n      checkArgument(\n          edge.length() == 2, \"Expecting each edge to consist of 2 characters but got %s\", edge);\n      char node1 = edge.charAt(0);\n      char node2 = edge.charAt(1);\n      graphMapBuilder.put(node1, node2);\n      if (!directed) {\n        graphMapBuilder.put(node2, node1);\n      }\n    }\n    final ImmutableMultimap<Character, Character> graphMap = graphMapBuilder.build();\n\n    return new SuccessorsFunction<Character>() {\n      @Override\n      public Iterable<? extends Character> successors(Character node) {\n        checkArgument(\n            graphMap.containsKey(node) || graphMap.containsValue(node),\n            \"Node %s is not an element of this graph\",\n            node);\n        return Ordering.natural().immutableSortedCopy(graphMap.get(node));\n      }\n    };\n  }\n","date":"2017-10-17 22:15:10","endLine":679,"groupId":"10281","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createGraph","params":"(booleandirected@String...edges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/e0/402b675470112b228b5df01c518638f2123a55.src","preCode":"  private static SuccessorsFunction<Character> createGraph(boolean directed, String... edges) {\n    ImmutableMultimap.Builder<Character, Character> graphMapBuilder = ImmutableMultimap.builder();\n    for (String edge : edges) {\n      checkArgument(\n          edge.length() == 2, \"Expecting each edge to consist of 2 characters but got %s\", edge);\n      char node1 = edge.charAt(0);\n      char node2 = edge.charAt(1);\n      graphMapBuilder.put(node1, node2);\n      if (!directed) {\n        graphMapBuilder.put(node2, node1);\n      }\n    }\n    final ImmutableMultimap<Character, Character> graphMap = graphMapBuilder.build();\n\n    return new SuccessorsFunction<Character>() {\n      @Override\n      public Iterable<? extends Character> successors(Character node) {\n        return Ordering.natural().immutableSortedCopy(graphMap.get(node));\n      }\n    };\n  }\n","realPath":"guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":655,"status":"M"}],"commitId":"50b0e455510e599e418c18ccd65a4b53f9dc3b50","commitMessage":"@@@Traverser: Throw IAE if startNode is not part of the graph and add tests for empty graph case and disjoint trees (forest) case.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=172443426\n","date":"2017-10-17 22:15:10","modifiedFileCount":"4","status":"M","submitter":"jnyman"}]
