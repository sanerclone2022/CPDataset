[{"authorTime":"2019-11-29 19:59:21","codes":[{"authorDate":"2019-11-29 19:59:21","commitOrder":1,"curCode":"  public void predecessors_selfLoop() {\n    assume().that(allowsSelfLoops()).isTrue();\n\n    putEdge(N1, N1);\n    assertThat(graph.predecessors(N1)).containsExactly(N1);\n    putEdge(N4, N1);\n    assertThat(graph.predecessors(N1)).containsExactly(N1, N4);\n  }\n","date":"2019-12-02 22:22:31","endLine":180,"groupId":"5695","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"predecessors_selfLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/67/1ed08c4898543e050845f64e24252f57b48e12.src","preCode":"  public void predecessors_selfLoop() {\n    assume().that(allowsSelfLoops()).isTrue();\n\n    putEdge(N1, N1);\n    assertThat(graph.predecessors(N1)).containsExactly(N1);\n    putEdge(N4, N1);\n    assertThat(graph.predecessors(N1)).containsExactly(N1, N4);\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/AbstractStandardDirectedGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"B"},{"authorDate":"2019-11-29 19:59:21","commitOrder":1,"curCode":"  public void predecessors_selfLoop() {\n    assume().that(allowsSelfLoops()).isTrue();\n\n    putEdge(N1, N1);\n    assertThat(graph.predecessors(N1)).containsExactly(N1);\n    putEdge(N4, N1);\n    assertThat(graph.predecessors(N1)).containsExactly(N1, N4);\n  }\n","date":"2019-12-02 22:22:31","endLine":180,"groupId":"5695","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"predecessors_selfLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/67/1ed08c4898543e050845f64e24252f57b48e12.src","preCode":"  public void predecessors_selfLoop() {\n    assume().that(allowsSelfLoops()).isTrue();\n\n    putEdge(N1, N1);\n    assertThat(graph.predecessors(N1)).containsExactly(N1);\n    putEdge(N4, N1);\n    assertThat(graph.predecessors(N1)).containsExactly(N1, N4);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/AbstractStandardDirectedGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"B"}],"commitId":"b50d343580e0139429adc61e1af4a92c50ba3927","commitMessage":"@@@Make the AbstractGraphTest tree more sane with only leaf nodes non-abstract and merge the tests for with and without self-loops.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=283037760\n","date":"2019-12-02 22:22:31","modifiedFileCount":"6","status":"B","submitter":"jnyman"},{"authorTime":"2020-03-10 18:40:08","codes":[{"authorDate":"2020-03-10 18:40:08","commitOrder":2,"curCode":"  public void predecessors_selfLoop() {\n    assume().that(graph.allowsSelfLoops()).isTrue();\n\n    putEdge(N1, N1);\n    assertThat(graph.predecessors(N1)).containsExactly(N1);\n    putEdge(N4, N1);\n    assertThat(graph.predecessors(N1)).containsExactly(N1, N4);\n  }\n","date":"2020-03-11 01:54:18","endLine":188,"groupId":"10314","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"predecessors_selfLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/c5/0a7da673a5e6c3bbbef20c94734c5574498f3c.src","preCode":"  public void predecessors_selfLoop() {\n    assume().that(allowsSelfLoops()).isTrue();\n\n    putEdge(N1, N1);\n    assertThat(graph.predecessors(N1)).containsExactly(N1);\n    putEdge(N4, N1);\n    assertThat(graph.predecessors(N1)).containsExactly(N1, N4);\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/AbstractStandardDirectedGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2020-03-10 18:40:08","commitOrder":2,"curCode":"  public void predecessors_selfLoop() {\n    assume().that(graph.allowsSelfLoops()).isTrue();\n\n    putEdge(N1, N1);\n    assertThat(graph.predecessors(N1)).containsExactly(N1);\n    putEdge(N4, N1);\n    assertThat(graph.predecessors(N1)).containsExactly(N1, N4);\n  }\n","date":"2020-03-11 01:54:18","endLine":188,"groupId":"10314","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"predecessors_selfLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/c5/0a7da673a5e6c3bbbef20c94734c5574498f3c.src","preCode":"  public void predecessors_selfLoop() {\n    assume().that(allowsSelfLoops()).isTrue();\n\n    putEdge(N1, N1);\n    assertThat(graph.predecessors(N1)).containsExactly(N1);\n    putEdge(N4, N1);\n    assertThat(graph.predecessors(N1)).containsExactly(N1, N4);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/AbstractStandardDirectedGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"824322afb283e0e2a42ea37acb5e493393684da3","commitMessage":"@@@Simplify AbstractGraphTest by replacing allowsSelfLoops() and incidentEdgeOrder() by graph accessors.\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=300054861\n","date":"2020-03-11 01:54:18","modifiedFileCount":"14","status":"M","submitter":"jnyman"}]
