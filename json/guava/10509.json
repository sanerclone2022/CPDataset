[{"authorTime":"2017-01-21 03:46:38","codes":[{"authorDate":"2017-04-21 05:33:38","commitOrder":10,"curCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdge(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdge(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n      }\n    }\n  }\n","date":"2017-04-21 10:27:51","endLine":61,"groupId":"1404","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"validateGraphState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/ba/61792cdcaf021a72d8336fc1ab0ad347ea0a42.src","preCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdge(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdge(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n      }\n    }\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/ValueGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"B"},{"authorDate":"2017-01-21 03:46:38","commitOrder":10,"curCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdge(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdge(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n      }\n    }\n  }\n","date":"2017-01-21 04:11:29","endLine":61,"groupId":"1404","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"validateGraphState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/ba/61792cdcaf021a72d8336fc1ab0ad347ea0a42.src","preCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdge(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdge(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n      }\n    }\n  }\n","realPath":"guava-tests/test/com/google/common/graph/ValueGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"NB"}],"commitId":"9b94fb3965c6869b0ac47420958a4bbae0b2d54c","commitMessage":"@@@Begin exporting sources of Guava for Android.\n\npom.xml files to come.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=153757913\n","date":"2017-04-21 10:27:51","modifiedFileCount":"0","status":"M","submitter":"zhenghua"},{"authorTime":"2017-05-23 00:56:43","codes":[{"authorDate":"2017-05-23 00:56:43","commitOrder":11,"curCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n    }\n  }\n","date":"2017-05-23 01:39:27","endLine":56,"groupId":"1404","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"validateGraphState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/21/693c208d3f4f05277b940db60750f2b90d5d3b.src","preCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdge(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdge(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n      }\n    }\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/ValueGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2017-05-23 00:56:43","commitOrder":11,"curCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n    }\n  }\n","date":"2017-05-23 01:39:27","endLine":56,"groupId":"1404","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"validateGraphState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/21/693c208d3f4f05277b940db60750f2b90d5d3b.src","preCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdge(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdge(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n      }\n    }\n  }\n","realPath":"guava-tests/test/com/google/common/graph/ValueGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"bc996973fe6ce1ecb67803aa1ff5bdf5df59d182","commitMessage":"@@@common.graph classes: mark types and methods as @GoogleInternal that are not yet ready for release in Guava 22.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=156749408\n","date":"2017-05-23 01:39:27","modifiedFileCount":"24","status":"M","submitter":"jrtom"},{"authorTime":"2017-06-29 06:00:12","codes":[{"authorDate":"2017-06-29 06:00:12","commitOrder":12,"curCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n      }\n    }\n  }\n","date":"2017-06-29 11:36:54","endLine":61,"groupId":"1404","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"validateGraphState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/4f/d4a23a204add7db10d1d74bd32307723ca5417.src","preCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n    }\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/ValueGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2017-06-29 06:00:12","commitOrder":12,"curCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n      }\n    }\n  }\n","date":"2017-06-29 11:36:54","endLine":61,"groupId":"1404","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"validateGraphState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/4f/d4a23a204add7db10d1d74bd32307723ca5417.src","preCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n    }\n  }\n","realPath":"guava-tests/test/com/google/common/graph/ValueGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"49e145257d6dfb36ca1dd17a144d81c635504b9e","commitMessage":"@@@hasEdge(): rename to hasEdgeConnecting().  remove @GoogleInternal annotation.  and add to Network as well.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=160455853\n","date":"2017-06-29 11:36:54","modifiedFileCount":"22","status":"M","submitter":"jrtom"},{"authorTime":"2017-07-08 04:05:13","codes":[{"authorDate":"2017-07-08 04:05:13","commitOrder":13,"curCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));\n        assertThat(graph.edgeValueOrNull(node, otherNode) != null).isEqualTo(hasEdge);\n      }\n    }\n  }\n","date":"2017-07-10 22:17:22","endLine":60,"groupId":"1404","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"validateGraphState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/fb/835394e11f6fd8eb8c2ec62b7f62cc99621b42.src","preCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n      }\n    }\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/ValueGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2017-07-08 04:05:13","commitOrder":13,"curCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));\n        assertThat(graph.edgeValueOrNull(node, otherNode) != null).isEqualTo(hasEdge);\n      }\n    }\n  }\n","date":"2017-07-10 22:17:22","endLine":62,"groupId":"1404","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"validateGraphState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/32/59c37c50e9b4b4b53342995fcb16f2283132be.src","preCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n      }\n    }\n  }\n","realPath":"guava-tests/test/com/google/common/graph/ValueGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"0f6096df9105ecbbb2d32017eae8fd63562ab298","commitMessage":"@@@ValueGraph.edgeValue*: change from\n* V edgeValue().  V edgeValueOrDefault()\nto\n* Optional<V> edgeValue().  V edgeValueOrNull()\n\nFixed Graphs.inducedSubgraph() implementations so that it appropriately specifies the # of nodes in the induced subgraph as being the size of the supplied node Iterable.\n\nFixed MoreGraphs.inducedSubgraph() implementations so that the filtered nodes are being returned as Lists rather than Iterators.  so that calculating their size doesn't exhaust the Iterator.\n\nFixed the graph *Builder from() methods so that they are all uniformly enforcing types (this was causing MOE problems in conjunction with the expectedNodes() call.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=161235517\n","date":"2017-07-10 22:17:22","modifiedFileCount":"21","status":"M","submitter":"jrtom"},{"authorTime":"2017-07-13 07:46:12","codes":[{"authorDate":"2017-07-13 07:46:12","commitOrder":14,"curCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n      }\n    }\n  }\n","date":"2017-07-14 03:02:58","endLine":60,"groupId":"1404","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"validateGraphState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/ee/d8c492993c6dfcf6fd700cae70abdd0c9bffa3.src","preCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));\n        assertThat(graph.edgeValueOrNull(node, otherNode) != null).isEqualTo(hasEdge);\n      }\n    }\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/ValueGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2017-07-13 07:46:12","commitOrder":14,"curCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n      }\n    }\n  }\n","date":"2017-07-14 03:02:58","endLine":62,"groupId":"1404","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"validateGraphState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/4c/1fdef91377d57f1b4df410333813408d14d668.src","preCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));\n        assertThat(graph.edgeValueOrNull(node, otherNode) != null).isEqualTo(hasEdge);\n      }\n    }\n  }\n","realPath":"guava-tests/test/com/google/common/graph/ValueGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"66b3e26aadf5ec82808a0965b2a894addb0970e9","commitMessage":"@@@ValueGraph.java: restore edgeValueOrNull() to edgeValueOrDefault().\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=161738013\n","date":"2017-07-14 03:02:58","modifiedFileCount":"14","status":"M","submitter":"jrtom"},{"authorTime":"2017-10-11 22:17:00","codes":[{"authorDate":"2017-10-11 22:17:00","commitOrder":15,"curCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n        assertThat(!graph.edgeValueOrDefault(node, otherNode, DEFAULT).equals(DEFAULT))\n            .isEqualTo(hasEdge);\n      }\n    }\n  }\n","date":"2017-10-11 22:50:41","endLine":64,"groupId":"1404","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"validateGraphState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/91/c5d2a5b92fe5307ef2a02e25085a0e0af96a5c.src","preCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n      }\n    }\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/ValueGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2017-10-11 22:17:00","commitOrder":15,"curCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n        assertThat(!graph.edgeValueOrDefault(node, otherNode, DEFAULT).equals(DEFAULT))\n            .isEqualTo(hasEdge);\n      }\n    }\n  }\n","date":"2017-10-11 22:50:41","endLine":64,"groupId":"1404","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"validateGraphState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/fa/b769e2221947ea8c4f6de4df4382b71c6fea67.src","preCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n      }\n    }\n  }\n","realPath":"guava-tests/test/com/google/common/graph/ValueGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"361eba8e4078a4c80f9be0c9194a7e3c0473aa6d","commitMessage":"@@@ValueGraphTest.java: add a few checks to make sure that we're properly exercising both null and non-null default values.\n\nThis addresses the most recent suggestion in GitHub issue #2924.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=171818169\n","date":"2017-10-11 22:50:41","modifiedFileCount":"2","status":"M","submitter":"jrtom"},{"authorTime":"2020-01-09 01:39:26","codes":[{"authorDate":"2020-01-09 01:39:26","commitOrder":16,"curCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.incidentEdgeOrder()).isEqualTo(asGraph.incidentEdgeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n        assertThat(!graph.edgeValueOrDefault(node, otherNode, DEFAULT).equals(DEFAULT))\n            .isEqualTo(hasEdge);\n      }\n    }\n  }\n","date":"2020-01-10 04:24:43","endLine":74,"groupId":"10509","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"validateGraphState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/69/1217f1bfa9ac67671ee60b4b5be7e5dc9876d2.src","preCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n        assertThat(!graph.edgeValueOrDefault(node, otherNode, DEFAULT).equals(DEFAULT))\n            .isEqualTo(hasEdge);\n      }\n    }\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/ValueGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2020-01-09 01:39:26","commitOrder":16,"curCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.incidentEdgeOrder()).isEqualTo(asGraph.incidentEdgeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n        assertThat(!graph.edgeValueOrDefault(node, otherNode, DEFAULT).equals(DEFAULT))\n            .isEqualTo(hasEdge);\n      }\n    }\n  }\n","date":"2020-01-10 04:24:43","endLine":76,"groupId":"10509","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"validateGraphState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/ab/237e8633bf8e22464f88eb1ce2e5457a3ad51b.src","preCode":"  public void validateGraphState() {\n    assertStronglyEquivalent(graph, Graphs.copyOf(graph));\n    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));\n\n    Graph<Integer> asGraph = graph.asGraph();\n    AbstractGraphTest.validateGraph(asGraph);\n    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n    assertThat(graph.edges()).isEqualTo(asGraph.edges());\n    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n\n    for (Integer node : graph.nodes()) {\n      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n\n      for (Integer otherNode : graph.nodes()) {\n        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);\n        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));\n        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n        assertThat(!graph.edgeValueOrDefault(node, otherNode, DEFAULT).equals(DEFAULT))\n            .isEqualTo(hasEdge);\n      }\n    }\n  }\n","realPath":"guava-tests/test/com/google/common/graph/ValueGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"cde576ec0005403d0664e25d1df55e3fc0a498b9","commitMessage":"@@@Add incidentEdgeOrder() to the [Value]Graph interface\n\nRELNOTES=`graph`: Add `incidentEdgeOrder()` to the `[Value]Graph` interfaces\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=288714914\n","date":"2020-01-10 04:24:43","modifiedFileCount":"42","status":"M","submitter":"jnyman"}]
