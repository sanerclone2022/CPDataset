[{"authorTime":"2017-01-20 04:48:06","codes":[{"authorDate":"2017-04-21 05:33:38","commitOrder":6,"curCode":"  public void transpose_directedGraph() {\n    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdge(N1, N3);\n    directedGraph.putEdge(N3, N1);\n    directedGraph.putEdge(N1, N2);\n    directedGraph.putEdge(N1, N1);\n    directedGraph.putEdge(N3, N4);\n\n    MutableGraph<Integer> expectedTranspose = GraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdge(N3, N1);\n    expectedTranspose.putEdge(N1, N3);\n    expectedTranspose.putEdge(N2, N1);\n    expectedTranspose.putEdge(N1, N1);\n    expectedTranspose.putEdge(N4, N3);\n\n    Graph<Integer> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    assertThat(transpose.successors(N1)).doesNotContain(N2);\n    directedGraph.putEdge(N2, N1);\n    \r\n    assertThat(transpose.successors(N1)).contains(N2);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","date":"2017-04-21 10:27:51","endLine":238,"groupId":"82","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/2f/77b63db7d1e8a0d9ab3c407cbbaa5f35c02657.src","preCode":"  public void transpose_directedGraph() {\n    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdge(N1, N3);\n    directedGraph.putEdge(N3, N1);\n    directedGraph.putEdge(N1, N2);\n    directedGraph.putEdge(N1, N1);\n    directedGraph.putEdge(N3, N4);\n\n    MutableGraph<Integer> expectedTranspose = GraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdge(N3, N1);\n    expectedTranspose.putEdge(N1, N3);\n    expectedTranspose.putEdge(N2, N1);\n    expectedTranspose.putEdge(N1, N1);\n    expectedTranspose.putEdge(N4, N3);\n\n    Graph<Integer> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    assertThat(transpose.successors(N1)).doesNotContain(N2);\n    directedGraph.putEdge(N2, N1);\n    \r\n    assertThat(transpose.successors(N1)).contains(N2);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"B"},{"authorDate":"2017-01-20 04:48:06","commitOrder":6,"curCode":"  public void transpose_directedGraph() {\n    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdge(N1, N3);\n    directedGraph.putEdge(N3, N1);\n    directedGraph.putEdge(N1, N2);\n    directedGraph.putEdge(N1, N1);\n    directedGraph.putEdge(N3, N4);\n\n    MutableGraph<Integer> expectedTranspose = GraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdge(N3, N1);\n    expectedTranspose.putEdge(N1, N3);\n    expectedTranspose.putEdge(N2, N1);\n    expectedTranspose.putEdge(N1, N1);\n    expectedTranspose.putEdge(N4, N3);\n\n    Graph<Integer> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    assertThat(transpose.successors(N1)).doesNotContain(N2);\n    directedGraph.putEdge(N2, N1);\n    \r\n    assertThat(transpose.successors(N1)).contains(N2);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","date":"2017-01-20 23:49:40","endLine":238,"groupId":"82","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"transpose_directedGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/22/b765b41ab5679ddf1701e941496b96cc4c4e7b.src","preCode":"  public void transpose_directedGraph() {\n    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdge(N1, N3);\n    directedGraph.putEdge(N3, N1);\n    directedGraph.putEdge(N1, N2);\n    directedGraph.putEdge(N1, N1);\n    directedGraph.putEdge(N3, N4);\n\n    MutableGraph<Integer> expectedTranspose = GraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdge(N3, N1);\n    expectedTranspose.putEdge(N1, N3);\n    expectedTranspose.putEdge(N2, N1);\n    expectedTranspose.putEdge(N1, N1);\n    expectedTranspose.putEdge(N4, N3);\n\n    Graph<Integer> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    assertThat(transpose.successors(N1)).doesNotContain(N2);\n    directedGraph.putEdge(N2, N1);\n    \r\n    assertThat(transpose.successors(N1)).contains(N2);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"NB"}],"commitId":"9b94fb3965c6869b0ac47420958a4bbae0b2d54c","commitMessage":"@@@Begin exporting sources of Guava for Android.\n\npom.xml files to come.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=153757913\n","date":"2017-04-21 10:27:51","modifiedFileCount":"0","status":"M","submitter":"zhenghua"},{"authorTime":"2017-07-14 04:35:55","codes":[{"authorDate":"2017-07-14 04:35:55","commitOrder":7,"curCode":"  public void transpose_directedGraph() {\n    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdge(N1, N3);\n    directedGraph.putEdge(N3, N1);\n    directedGraph.putEdge(N1, N2);\n    directedGraph.putEdge(N1, N1);\n    directedGraph.putEdge(N3, N4);\n\n    MutableGraph<Integer> expectedTranspose = GraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdge(N3, N1);\n    expectedTranspose.putEdge(N1, N3);\n    expectedTranspose.putEdge(N2, N1);\n    expectedTranspose.putEdge(N1, N1);\n    expectedTranspose.putEdge(N4, N3);\n\n    Graph<Integer> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    for (Integer node : directedGraph.nodes()) {\n      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));\n      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));\n    }\n\n    assertThat(transpose.successors(N1)).doesNotContain(N2);\n    directedGraph.putEdge(N2, N1);\n    \r\n    assertThat(transpose.successors(N1)).contains(N2);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","date":"2017-07-14 06:31:44","endLine":243,"groupId":"82","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/ce/892add81361fe885f2777cf499b79330f0f3da.src","preCode":"  public void transpose_directedGraph() {\n    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdge(N1, N3);\n    directedGraph.putEdge(N3, N1);\n    directedGraph.putEdge(N1, N2);\n    directedGraph.putEdge(N1, N1);\n    directedGraph.putEdge(N3, N4);\n\n    MutableGraph<Integer> expectedTranspose = GraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdge(N3, N1);\n    expectedTranspose.putEdge(N1, N3);\n    expectedTranspose.putEdge(N2, N1);\n    expectedTranspose.putEdge(N1, N1);\n    expectedTranspose.putEdge(N4, N3);\n\n    Graph<Integer> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    assertThat(transpose.successors(N1)).doesNotContain(N2);\n    directedGraph.putEdge(N2, N1);\n    \r\n    assertThat(transpose.successors(N1)).contains(N2);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"},{"authorDate":"2017-07-14 04:35:55","commitOrder":7,"curCode":"  public void transpose_directedGraph() {\n    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdge(N1, N3);\n    directedGraph.putEdge(N3, N1);\n    directedGraph.putEdge(N1, N2);\n    directedGraph.putEdge(N1, N1);\n    directedGraph.putEdge(N3, N4);\n\n    MutableGraph<Integer> expectedTranspose = GraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdge(N3, N1);\n    expectedTranspose.putEdge(N1, N3);\n    expectedTranspose.putEdge(N2, N1);\n    expectedTranspose.putEdge(N1, N1);\n    expectedTranspose.putEdge(N4, N3);\n\n    Graph<Integer> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    for (Integer node : directedGraph.nodes()) {\n      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));\n      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));\n    }\n\n    assertThat(transpose.successors(N1)).doesNotContain(N2);\n    directedGraph.putEdge(N2, N1);\n    \r\n    assertThat(transpose.successors(N1)).contains(N2);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","date":"2017-07-14 06:31:44","endLine":243,"groupId":"82","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"transpose_directedGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/41/78d088922bfec1663790ca0d2092cbd2ae9231.src","preCode":"  public void transpose_directedGraph() {\n    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdge(N1, N3);\n    directedGraph.putEdge(N3, N1);\n    directedGraph.putEdge(N1, N2);\n    directedGraph.putEdge(N1, N1);\n    directedGraph.putEdge(N3, N4);\n\n    MutableGraph<Integer> expectedTranspose = GraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdge(N3, N1);\n    expectedTranspose.putEdge(N1, N3);\n    expectedTranspose.putEdge(N2, N1);\n    expectedTranspose.putEdge(N1, N1);\n    expectedTranspose.putEdge(N4, N3);\n\n    Graph<Integer> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    assertThat(transpose.successors(N1)).doesNotContain(N2);\n    directedGraph.putEdge(N2, N1);\n    \r\n    assertThat(transpose.successors(N1)).contains(N2);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"4a6ce819542d5fe440bd5d13956bb4e46084325c","commitMessage":"@@@common.graph: create (package-protected) ForwardingValueGraph and ForwardingNetwork classes.  and use those (and ForwardingGraph) to simplify the implementation of the Transposed* inner classes in Graphs.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=161856111\n","date":"2017-07-14 06:31:44","modifiedFileCount":"6","status":"M","submitter":"jrtom"},{"authorTime":"2019-05-01 23:30:59","codes":[{"authorDate":"2019-05-01 23:30:59","commitOrder":8,"curCode":"  public void transpose_directedGraph() {\n    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdge(N1, N3);\n    directedGraph.putEdge(N3, N1);\n    directedGraph.putEdge(N1, N2);\n    directedGraph.putEdge(N1, N1);\n    directedGraph.putEdge(N3, N4);\n\n    MutableGraph<Integer> expectedTranspose = GraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdge(N3, N1);\n    expectedTranspose.putEdge(N1, N3);\n    expectedTranspose.putEdge(N2, N1);\n    expectedTranspose.putEdge(N1, N1);\n    expectedTranspose.putEdge(N4, N3);\n\n    Graph<Integer> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameInstanceAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    for (Integer node : directedGraph.nodes()) {\n      assertThat(directedGraph.inDegree(node)).isSameInstanceAs(transpose.outDegree(node));\n      assertThat(directedGraph.outDegree(node)).isSameInstanceAs(transpose.inDegree(node));\n    }\n\n    assertThat(transpose.successors(N1)).doesNotContain(N2);\n    directedGraph.putEdge(N2, N1);\n    \r\n    assertThat(transpose.successors(N1)).contains(N2);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","date":"2019-05-06 02:02:35","endLine":243,"groupId":"10586","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/c1/76e1fc2171cd48b4f097d8d13c83a632cee431.src","preCode":"  public void transpose_directedGraph() {\n    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdge(N1, N3);\n    directedGraph.putEdge(N3, N1);\n    directedGraph.putEdge(N1, N2);\n    directedGraph.putEdge(N1, N1);\n    directedGraph.putEdge(N3, N4);\n\n    MutableGraph<Integer> expectedTranspose = GraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdge(N3, N1);\n    expectedTranspose.putEdge(N1, N3);\n    expectedTranspose.putEdge(N2, N1);\n    expectedTranspose.putEdge(N1, N1);\n    expectedTranspose.putEdge(N4, N3);\n\n    Graph<Integer> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    for (Integer node : directedGraph.nodes()) {\n      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));\n      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));\n    }\n\n    assertThat(transpose.successors(N1)).doesNotContain(N2);\n    directedGraph.putEdge(N2, N1);\n    \r\n    assertThat(transpose.successors(N1)).contains(N2);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"},{"authorDate":"2019-05-01 23:30:59","commitOrder":8,"curCode":"  public void transpose_directedGraph() {\n    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdge(N1, N3);\n    directedGraph.putEdge(N3, N1);\n    directedGraph.putEdge(N1, N2);\n    directedGraph.putEdge(N1, N1);\n    directedGraph.putEdge(N3, N4);\n\n    MutableGraph<Integer> expectedTranspose = GraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdge(N3, N1);\n    expectedTranspose.putEdge(N1, N3);\n    expectedTranspose.putEdge(N2, N1);\n    expectedTranspose.putEdge(N1, N1);\n    expectedTranspose.putEdge(N4, N3);\n\n    Graph<Integer> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameInstanceAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    for (Integer node : directedGraph.nodes()) {\n      assertThat(directedGraph.inDegree(node)).isSameInstanceAs(transpose.outDegree(node));\n      assertThat(directedGraph.outDegree(node)).isSameInstanceAs(transpose.inDegree(node));\n    }\n\n    assertThat(transpose.successors(N1)).doesNotContain(N2);\n    directedGraph.putEdge(N2, N1);\n    \r\n    assertThat(transpose.successors(N1)).contains(N2);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","date":"2019-05-06 02:02:35","endLine":243,"groupId":"10586","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"transpose_directedGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/b2/2567620eddea3eb8053d1e9e7a9146726fe9e7.src","preCode":"  public void transpose_directedGraph() {\n    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.putEdge(N1, N3);\n    directedGraph.putEdge(N3, N1);\n    directedGraph.putEdge(N1, N2);\n    directedGraph.putEdge(N1, N1);\n    directedGraph.putEdge(N3, N4);\n\n    MutableGraph<Integer> expectedTranspose = GraphBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.putEdge(N3, N1);\n    expectedTranspose.putEdge(N1, N3);\n    expectedTranspose.putEdge(N2, N1);\n    expectedTranspose.putEdge(N1, N1);\n    expectedTranspose.putEdge(N4, N3);\n\n    Graph<Integer> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractGraphTest.validateGraph(transpose);\n\n    for (Integer node : directedGraph.nodes()) {\n      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));\n      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));\n    }\n\n    assertThat(transpose.successors(N1)).doesNotContain(N2);\n    directedGraph.putEdge(N2, N1);\n    \r\n    assertThat(transpose.successors(N1)).contains(N2);\n    AbstractGraphTest.validateGraph(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"c8542f65ca36545089b7a9fa8aebaad8a7da8762","commitMessage":"@@@Migrate from is(Not)SameAs to is(Not)SameInstanceAs.\n\nThey behave identically.  and the old names are being removed.\n\nOpen-source note: The new methods are available in Truth as of version 0.44.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=246135538\n","date":"2019-05-06 02:02:35","modifiedFileCount":"40","status":"M","submitter":"cpovirk"}]
