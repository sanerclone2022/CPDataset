[{"authorTime":"2017-10-11 00:12:16","codes":[{"authorDate":"2017-10-11 00:12:16","commitOrder":1,"curCode":"  public void forTree_depthFirstPreOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPreOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'd', 'a');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd', 'a', 'a');\n  }\n","date":"2017-10-11 00:29:37","endLine":491,"groupId":"7895","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"forTree_depthFirstPreOrder_iterableIsLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/83/2d5e7c3357bd3c70cd04699b624dacab3f1878.src","preCode":"  public void forTree_depthFirstPreOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPreOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'd', 'a');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd', 'a', 'a');\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":481,"status":"B"},{"authorDate":"2017-10-11 00:12:16","commitOrder":1,"curCode":"  public void forTree_depthFirstPreOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPreOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'd', 'a');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd', 'a', 'a');\n  }\n","date":"2017-10-11 00:29:37","endLine":491,"groupId":"7895","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"forTree_depthFirstPreOrder_iterableIsLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/83/2d5e7c3357bd3c70cd04699b624dacab3f1878.src","preCode":"  public void forTree_depthFirstPreOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPreOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'd', 'a');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd', 'a', 'a');\n  }\n","realPath":"guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":481,"status":"B"}],"commitId":"9a96b6a9195cbad137bce618104eea5c4217c0a7","commitMessage":"@@@Implement Traverser.forTree().depthFirst*().\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=171687201\n","date":"2017-10-11 00:29:37","modifiedFileCount":"4","status":"B","submitter":"jnyman"},{"authorTime":"2017-10-17 17:55:09","codes":[{"authorDate":"2017-10-17 17:55:09","commitOrder":2,"curCode":"  public void forTree_depthFirstPreOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPreOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'a');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd', 'a', 'a');\n  }\n","date":"2017-10-17 22:15:10","endLine":583,"groupId":"7895","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"forTree_depthFirstPreOrder_iterableIsLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/e0/402b675470112b228b5df01c518638f2123a55.src","preCode":"  public void forTree_depthFirstPreOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPreOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'd', 'a');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd', 'a', 'a');\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"M"},{"authorDate":"2017-10-17 17:55:09","commitOrder":2,"curCode":"  public void forTree_depthFirstPreOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPreOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'a');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd', 'a', 'a');\n  }\n","date":"2017-10-17 22:15:10","endLine":583,"groupId":"7895","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"forTree_depthFirstPreOrder_iterableIsLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/e0/402b675470112b228b5df01c518638f2123a55.src","preCode":"  public void forTree_depthFirstPreOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPreOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'd', 'a');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd', 'a', 'a');\n  }\n","realPath":"guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"M"}],"commitId":"50b0e455510e599e418c18ccd65a4b53f9dc3b50","commitMessage":"@@@Traverser: Throw IAE if startNode is not part of the graph and add tests for empty graph case and disjoint trees (forest) case.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=172443426\n","date":"2017-10-17 22:15:10","modifiedFileCount":"4","status":"M","submitter":"jnyman"},{"authorTime":"2020-07-11 06:32:35","codes":[{"authorDate":"2020-07-11 06:32:35","commitOrder":3,"curCode":"  public void forTree_depthFirstPreOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPreOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd');\n  }\n","date":"2020-07-13 23:39:57","endLine":1030,"groupId":"10234","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"forTree_depthFirstPreOrder_iterableIsLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/49/7c43bf33b7383701d9878cab36c5fd1bbb46b3.src","preCode":"  public void forTree_depthFirstPreOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPreOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'a');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd', 'a', 'a');\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":1020,"status":"M"},{"authorDate":"2020-07-11 06:32:35","commitOrder":3,"curCode":"  public void forTree_depthFirstPreOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPreOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd');\n  }\n","date":"2020-07-13 23:39:57","endLine":1030,"groupId":"10234","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"forTree_depthFirstPreOrder_iterableIsLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/49/7c43bf33b7383701d9878cab36c5fd1bbb46b3.src","preCode":"  public void forTree_depthFirstPreOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPreOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'a');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd', 'a', 'a');\n  }\n","realPath":"guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":1020,"status":"M"}],"commitId":"b5210ca95c4303bd91fdb9cb1d063f5680183f0b","commitMessage":"@@@Speed up Traverser and cut about 30 lines of code.\n\nWhen stacked against the unsubmitted Walker.  before the change:\n   breadthFirst was roughly on par;\n   preOrder/postOrder were about 70% slower (1359 vs. 2358);\n\nAfter adopting the Walker impl.  the tree traversal preorder/postorder are improved close to Walker impl.\n\nThere is still about 10% slowness (2405 vs. 2268) remaining.  which I suspect is due to Iterator being slower than Spliterator.  because with Spliterator.  we can tryAdvance() once for each element.  while with Iterator.  we have to call both hasNext() and next().\n\nThe graph traversal adoption is similar.  with about 15% remaining slowness compared to Walker (1583 vs. 1338).  which is likely result of Spliterator.tryAdvance() vs. Iterator.hasNext() + next().\n\nDid not adopt the Walker's breadth-first impl for the following reasons:\n\n1. Adopting the Walker's breadth-first impl contributed about 10% slowdown compared to the current impl. I think this is likely due to the eager foreach loop of the successors in the current breadth-first iterator. In the full traversal benchmark.  it's likely faster than consuming the successor iterator lazily.\n\nOn the other hand.  the breadth-first iterator is inconsistent with the depth-first iterators that consume the successor iterators lazily.\n\nFor follow-up: It might be better to go complete lazy for breadth-first.  even at the cost of 10% slowdown in the full-traversal benchmark. Plus we can reuse code and delete the two existing BreadthFirstIterator classes.\n\nI'm going to add the benchmark class in the the labs directory to compare between Iteration and Traverser.\n\nRELNOTES=Optimize Traverser\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=320688457\n","date":"2020-07-13 23:39:57","modifiedFileCount":"4","status":"M","submitter":"benyu"}]
