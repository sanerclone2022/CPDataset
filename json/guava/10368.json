[{"authorTime":"2016-08-19 23:16:45","codes":[{"authorDate":"2017-04-21 05:33:38","commitOrder":2,"curCode":"  private static void testNetworkMutation(NetworkBuilder<? super Integer, Object> networkBuilder) {\n    Random gen = new Random(42); \r\n\n    for (int trial = 0; trial < NUM_TRIALS; ++trial) {\n      MutableNetwork<Integer, Object> network =\n          networkBuilder.allowsParallelEdges(true).allowsSelfLoops(true).build();\n\n      assertThat(network.nodes()).isEmpty();\n      assertThat(network.edges()).isEmpty();\n      AbstractNetworkTest.validateNetwork(network);\n\n      while (network.nodes().size() < NUM_NODES) {\n        network.addNode(gen.nextInt(NODE_POOL_SIZE));\n      }\n      ArrayList<Integer> nodeList = new ArrayList<Integer>(network.nodes());\n      for (int i = 0; i < NUM_EDGES; ++i) {\n        \r\n        assertThat(\n                network.addEdge(\n                    getRandomElement(nodeList, gen), getRandomElement(nodeList, gen), new Object()))\n            .isTrue();\n      }\n      ArrayList<Object> edgeList = new ArrayList<Object>(network.edges());\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES);\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(edgeList, gen);\n      int numEdgesToRemove = gen.nextInt(NUM_EDGES);\n      for (int i = 0; i < numEdgesToRemove; ++i) {\n        Object edge = edgeList.get(i);\n        assertThat(network.removeEdge(edge)).isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES - numEdgesToRemove);\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(nodeList, gen);\n      int numNodesToRemove = gen.nextInt(NUM_NODES);\n      for (int i = 0; i < numNodesToRemove; ++i) {\n        assertThat(network.removeNode(nodeList.get(i))).isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES - numNodesToRemove);\n      \r\n      AbstractNetworkTest.validateNetwork(network);\n\n      for (int i = numNodesToRemove; i < NUM_NODES; ++i) {\n        assertThat(network.removeNode(nodeList.get(i))).isTrue();\n      }\n\n      assertThat(network.nodes()).isEmpty();\n      assertThat(network.edges()).isEmpty(); \r\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(nodeList, gen);\n      for (Integer node : nodeList) {\n        assertThat(network.addNode(node)).isTrue();\n      }\n      Collections.shuffle(edgeList, gen);\n      for (Object edge : edgeList) {\n        assertThat(\n                network.addEdge(\n                    getRandomElement(nodeList, gen), getRandomElement(nodeList, gen), edge))\n            .isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES);\n      AbstractNetworkTest.validateNetwork(network);\n    }\n  }\n","date":"2017-04-21 10:27:51","endLine":122,"groupId":"2968","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNetworkMutation","params":"(NetworkBuilder<?superInteger@Object>networkBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/33/77c7ca0f10014318904556578423c2f8ce0eaf.src","preCode":"  private static void testNetworkMutation(NetworkBuilder<? super Integer, Object> networkBuilder) {\n    Random gen = new Random(42); \r\n\n    for (int trial = 0; trial < NUM_TRIALS; ++trial) {\n      MutableNetwork<Integer, Object> network =\n          networkBuilder.allowsParallelEdges(true).allowsSelfLoops(true).build();\n\n      assertThat(network.nodes()).isEmpty();\n      assertThat(network.edges()).isEmpty();\n      AbstractNetworkTest.validateNetwork(network);\n\n      while (network.nodes().size() < NUM_NODES) {\n        network.addNode(gen.nextInt(NODE_POOL_SIZE));\n      }\n      ArrayList<Integer> nodeList = new ArrayList<Integer>(network.nodes());\n      for (int i = 0; i < NUM_EDGES; ++i) {\n        \r\n        assertThat(\n                network.addEdge(\n                    getRandomElement(nodeList, gen), getRandomElement(nodeList, gen), new Object()))\n            .isTrue();\n      }\n      ArrayList<Object> edgeList = new ArrayList<Object>(network.edges());\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES);\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(edgeList, gen);\n      int numEdgesToRemove = gen.nextInt(NUM_EDGES);\n      for (int i = 0; i < numEdgesToRemove; ++i) {\n        Object edge = edgeList.get(i);\n        assertThat(network.removeEdge(edge)).isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES - numEdgesToRemove);\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(nodeList, gen);\n      int numNodesToRemove = gen.nextInt(NUM_NODES);\n      for (int i = 0; i < numNodesToRemove; ++i) {\n        assertThat(network.removeNode(nodeList.get(i))).isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES - numNodesToRemove);\n      \r\n      AbstractNetworkTest.validateNetwork(network);\n\n      for (int i = numNodesToRemove; i < NUM_NODES; ++i) {\n        assertThat(network.removeNode(nodeList.get(i))).isTrue();\n      }\n\n      assertThat(network.nodes()).isEmpty();\n      assertThat(network.edges()).isEmpty(); \r\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(nodeList, gen);\n      for (Integer node : nodeList) {\n        assertThat(network.addNode(node)).isTrue();\n      }\n      Collections.shuffle(edgeList, gen);\n      for (Object edge : edgeList) {\n        assertThat(\n                network.addEdge(\n                    getRandomElement(nodeList, gen), getRandomElement(nodeList, gen), edge))\n            .isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES);\n      AbstractNetworkTest.validateNetwork(network);\n    }\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/NetworkMutationTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"},{"authorDate":"2016-08-19 23:16:45","commitOrder":2,"curCode":"  private static void testNetworkMutation(NetworkBuilder<? super Integer, Object> networkBuilder) {\n    Random gen = new Random(42); \r\n\n    for (int trial = 0; trial < NUM_TRIALS; ++trial) {\n      MutableNetwork<Integer, Object> network =\n          networkBuilder.allowsParallelEdges(true).allowsSelfLoops(true).build();\n\n      assertThat(network.nodes()).isEmpty();\n      assertThat(network.edges()).isEmpty();\n      AbstractNetworkTest.validateNetwork(network);\n\n      while (network.nodes().size() < NUM_NODES) {\n        network.addNode(gen.nextInt(NODE_POOL_SIZE));\n      }\n      ArrayList<Integer> nodeList = new ArrayList<Integer>(network.nodes());\n      for (int i = 0; i < NUM_EDGES; ++i) {\n        \r\n        assertThat(network.addEdge(\n            getRandomElement(nodeList, gen),\n            getRandomElement(nodeList, gen),\n            new Object())).isTrue();\n      }\n      ArrayList<Object> edgeList = new ArrayList<Object>(network.edges());\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES);\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(edgeList, gen);\n      int numEdgesToRemove = gen.nextInt(NUM_EDGES);\n      for (int i = 0; i < numEdgesToRemove; ++i) {\n        Object edge = edgeList.get(i);\n        assertThat(network.removeEdge(edge)).isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES - numEdgesToRemove);\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(nodeList, gen);\n      int numNodesToRemove = gen.nextInt(NUM_NODES);\n      for (int i = 0; i < numNodesToRemove; ++i) {\n        assertThat(network.removeNode(nodeList.get(i))).isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES - numNodesToRemove);\n      \r\n      AbstractNetworkTest.validateNetwork(network);\n\n      for (int i = numNodesToRemove; i < NUM_NODES; ++i) {\n        assertThat(network.removeNode(nodeList.get(i))).isTrue();\n      }\n\n      assertThat(network.nodes()).isEmpty();\n      assertThat(network.edges()).isEmpty(); \r\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(nodeList, gen);\n      for (Integer node : nodeList) {\n        assertThat(network.addNode(node)).isTrue();\n      }\n      Collections.shuffle(edgeList, gen);\n      for (Object edge : edgeList) {\n        assertThat(network.addEdge(\n            getRandomElement(nodeList, gen),\n            getRandomElement(nodeList, gen),\n            edge)).isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES);\n      AbstractNetworkTest.validateNetwork(network);\n    }\n  }\n","date":"2016-08-23 04:02:38","endLine":124,"groupId":"2968","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNetworkMutation","params":"(NetworkBuilder<?superInteger@Object>networkBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/75/cc76e0e5d9e4f89d7297d2d20bd3be003f7894.src","preCode":"  private static void testNetworkMutation(NetworkBuilder<? super Integer, Object> networkBuilder) {\n    Random gen = new Random(42); \r\n\n    for (int trial = 0; trial < NUM_TRIALS; ++trial) {\n      MutableNetwork<Integer, Object> network =\n          networkBuilder.allowsParallelEdges(true).allowsSelfLoops(true).build();\n\n      assertThat(network.nodes()).isEmpty();\n      assertThat(network.edges()).isEmpty();\n      AbstractNetworkTest.validateNetwork(network);\n\n      while (network.nodes().size() < NUM_NODES) {\n        network.addNode(gen.nextInt(NODE_POOL_SIZE));\n      }\n      ArrayList<Integer> nodeList = new ArrayList<Integer>(network.nodes());\n      for (int i = 0; i < NUM_EDGES; ++i) {\n        \r\n        assertThat(network.addEdge(\n            getRandomElement(nodeList, gen),\n            getRandomElement(nodeList, gen),\n            new Object())).isTrue();\n      }\n      ArrayList<Object> edgeList = new ArrayList<Object>(network.edges());\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES);\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(edgeList, gen);\n      int numEdgesToRemove = gen.nextInt(NUM_EDGES);\n      for (int i = 0; i < numEdgesToRemove; ++i) {\n        Object edge = edgeList.get(i);\n        assertThat(network.removeEdge(edge)).isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES - numEdgesToRemove);\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(nodeList, gen);\n      int numNodesToRemove = gen.nextInt(NUM_NODES);\n      for (int i = 0; i < numNodesToRemove; ++i) {\n        assertThat(network.removeNode(nodeList.get(i))).isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES - numNodesToRemove);\n      \r\n      AbstractNetworkTest.validateNetwork(network);\n\n      for (int i = numNodesToRemove; i < NUM_NODES; ++i) {\n        assertThat(network.removeNode(nodeList.get(i))).isTrue();\n      }\n\n      assertThat(network.nodes()).isEmpty();\n      assertThat(network.edges()).isEmpty(); \r\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(nodeList, gen);\n      for (Integer node : nodeList) {\n        assertThat(network.addNode(node)).isTrue();\n      }\n      Collections.shuffle(edgeList, gen);\n      for (Object edge : edgeList) {\n        assertThat(network.addEdge(\n            getRandomElement(nodeList, gen),\n            getRandomElement(nodeList, gen),\n            edge)).isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES);\n      AbstractNetworkTest.validateNetwork(network);\n    }\n  }\n","realPath":"guava-tests/test/com/google/common/graph/NetworkMutationTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"NB"}],"commitId":"9b94fb3965c6869b0ac47420958a4bbae0b2d54c","commitMessage":"@@@Begin exporting sources of Guava for Android.\n\npom.xml files to come.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=153757913\n","date":"2017-04-21 10:27:51","modifiedFileCount":"0","status":"M","submitter":"zhenghua"},{"authorTime":"2017-07-26 22:37:38","codes":[{"authorDate":"2017-07-26 22:37:38","commitOrder":3,"curCode":"  private static void testNetworkMutation(NetworkBuilder<? super Integer, Object> networkBuilder) {\n    Random gen = new Random(42); \r\n\n    for (int trial = 0; trial < NUM_TRIALS; ++trial) {\n      MutableNetwork<Integer, Object> network =\n          networkBuilder.allowsParallelEdges(true).allowsSelfLoops(true).build();\n\n      assertThat(network.nodes()).isEmpty();\n      assertThat(network.edges()).isEmpty();\n      AbstractNetworkTest.validateNetwork(network);\n\n      while (network.nodes().size() < NUM_NODES) {\n        network.addNode(gen.nextInt(NODE_POOL_SIZE));\n      }\n      ArrayList<Integer> nodeList = new ArrayList<>(network.nodes());\n      for (int i = 0; i < NUM_EDGES; ++i) {\n        \r\n        assertThat(\n                network.addEdge(\n                    getRandomElement(nodeList, gen), getRandomElement(nodeList, gen), new Object()))\n            .isTrue();\n      }\n      ArrayList<Object> edgeList = new ArrayList<>(network.edges());\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES);\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(edgeList, gen);\n      int numEdgesToRemove = gen.nextInt(NUM_EDGES);\n      for (int i = 0; i < numEdgesToRemove; ++i) {\n        Object edge = edgeList.get(i);\n        assertThat(network.removeEdge(edge)).isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES - numEdgesToRemove);\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(nodeList, gen);\n      int numNodesToRemove = gen.nextInt(NUM_NODES);\n      for (int i = 0; i < numNodesToRemove; ++i) {\n        assertThat(network.removeNode(nodeList.get(i))).isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES - numNodesToRemove);\n      \r\n      AbstractNetworkTest.validateNetwork(network);\n\n      for (int i = numNodesToRemove; i < NUM_NODES; ++i) {\n        assertThat(network.removeNode(nodeList.get(i))).isTrue();\n      }\n\n      assertThat(network.nodes()).isEmpty();\n      assertThat(network.edges()).isEmpty(); \r\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(nodeList, gen);\n      for (Integer node : nodeList) {\n        assertThat(network.addNode(node)).isTrue();\n      }\n      Collections.shuffle(edgeList, gen);\n      for (Object edge : edgeList) {\n        assertThat(\n                network.addEdge(\n                    getRandomElement(nodeList, gen), getRandomElement(nodeList, gen), edge))\n            .isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES);\n      AbstractNetworkTest.validateNetwork(network);\n    }\n  }\n","date":"2017-07-26 22:45:36","endLine":122,"groupId":"10368","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testNetworkMutation","params":"(NetworkBuilder<?superInteger@Object>networkBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/fd/232dcdad17be622a6d7d5a4cf2e5b61fb978f0.src","preCode":"  private static void testNetworkMutation(NetworkBuilder<? super Integer, Object> networkBuilder) {\n    Random gen = new Random(42); \r\n\n    for (int trial = 0; trial < NUM_TRIALS; ++trial) {\n      MutableNetwork<Integer, Object> network =\n          networkBuilder.allowsParallelEdges(true).allowsSelfLoops(true).build();\n\n      assertThat(network.nodes()).isEmpty();\n      assertThat(network.edges()).isEmpty();\n      AbstractNetworkTest.validateNetwork(network);\n\n      while (network.nodes().size() < NUM_NODES) {\n        network.addNode(gen.nextInt(NODE_POOL_SIZE));\n      }\n      ArrayList<Integer> nodeList = new ArrayList<Integer>(network.nodes());\n      for (int i = 0; i < NUM_EDGES; ++i) {\n        \r\n        assertThat(\n                network.addEdge(\n                    getRandomElement(nodeList, gen), getRandomElement(nodeList, gen), new Object()))\n            .isTrue();\n      }\n      ArrayList<Object> edgeList = new ArrayList<Object>(network.edges());\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES);\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(edgeList, gen);\n      int numEdgesToRemove = gen.nextInt(NUM_EDGES);\n      for (int i = 0; i < numEdgesToRemove; ++i) {\n        Object edge = edgeList.get(i);\n        assertThat(network.removeEdge(edge)).isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES - numEdgesToRemove);\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(nodeList, gen);\n      int numNodesToRemove = gen.nextInt(NUM_NODES);\n      for (int i = 0; i < numNodesToRemove; ++i) {\n        assertThat(network.removeNode(nodeList.get(i))).isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES - numNodesToRemove);\n      \r\n      AbstractNetworkTest.validateNetwork(network);\n\n      for (int i = numNodesToRemove; i < NUM_NODES; ++i) {\n        assertThat(network.removeNode(nodeList.get(i))).isTrue();\n      }\n\n      assertThat(network.nodes()).isEmpty();\n      assertThat(network.edges()).isEmpty(); \r\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(nodeList, gen);\n      for (Integer node : nodeList) {\n        assertThat(network.addNode(node)).isTrue();\n      }\n      Collections.shuffle(edgeList, gen);\n      for (Object edge : edgeList) {\n        assertThat(\n                network.addEdge(\n                    getRandomElement(nodeList, gen), getRandomElement(nodeList, gen), edge))\n            .isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES);\n      AbstractNetworkTest.validateNetwork(network);\n    }\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/NetworkMutationTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2017-07-26 22:37:38","commitOrder":3,"curCode":"  private static void testNetworkMutation(NetworkBuilder<? super Integer, Object> networkBuilder) {\n    Random gen = new Random(42); \r\n\n    for (int trial = 0; trial < NUM_TRIALS; ++trial) {\n      MutableNetwork<Integer, Object> network =\n          networkBuilder.allowsParallelEdges(true).allowsSelfLoops(true).build();\n\n      assertThat(network.nodes()).isEmpty();\n      assertThat(network.edges()).isEmpty();\n      AbstractNetworkTest.validateNetwork(network);\n\n      while (network.nodes().size() < NUM_NODES) {\n        network.addNode(gen.nextInt(NODE_POOL_SIZE));\n      }\n      ArrayList<Integer> nodeList = new ArrayList<>(network.nodes());\n      for (int i = 0; i < NUM_EDGES; ++i) {\n        \r\n        assertThat(\n                network.addEdge(\n                    getRandomElement(nodeList, gen), getRandomElement(nodeList, gen), new Object()))\n            .isTrue();\n      }\n      ArrayList<Object> edgeList = new ArrayList<>(network.edges());\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES);\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(edgeList, gen);\n      int numEdgesToRemove = gen.nextInt(NUM_EDGES);\n      for (int i = 0; i < numEdgesToRemove; ++i) {\n        Object edge = edgeList.get(i);\n        assertThat(network.removeEdge(edge)).isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES - numEdgesToRemove);\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(nodeList, gen);\n      int numNodesToRemove = gen.nextInt(NUM_NODES);\n      for (int i = 0; i < numNodesToRemove; ++i) {\n        assertThat(network.removeNode(nodeList.get(i))).isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES - numNodesToRemove);\n      \r\n      AbstractNetworkTest.validateNetwork(network);\n\n      for (int i = numNodesToRemove; i < NUM_NODES; ++i) {\n        assertThat(network.removeNode(nodeList.get(i))).isTrue();\n      }\n\n      assertThat(network.nodes()).isEmpty();\n      assertThat(network.edges()).isEmpty(); \r\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(nodeList, gen);\n      for (Integer node : nodeList) {\n        assertThat(network.addNode(node)).isTrue();\n      }\n      Collections.shuffle(edgeList, gen);\n      for (Object edge : edgeList) {\n        assertThat(\n                network.addEdge(\n                    getRandomElement(nodeList, gen), getRandomElement(nodeList, gen), edge))\n            .isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES);\n      AbstractNetworkTest.validateNetwork(network);\n    }\n  }\n","date":"2017-07-26 22:45:36","endLine":122,"groupId":"10368","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testNetworkMutation","params":"(NetworkBuilder<?superInteger@Object>networkBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/fd/232dcdad17be622a6d7d5a4cf2e5b61fb978f0.src","preCode":"  private static void testNetworkMutation(NetworkBuilder<? super Integer, Object> networkBuilder) {\n    Random gen = new Random(42); \r\n\n    for (int trial = 0; trial < NUM_TRIALS; ++trial) {\n      MutableNetwork<Integer, Object> network =\n          networkBuilder.allowsParallelEdges(true).allowsSelfLoops(true).build();\n\n      assertThat(network.nodes()).isEmpty();\n      assertThat(network.edges()).isEmpty();\n      AbstractNetworkTest.validateNetwork(network);\n\n      while (network.nodes().size() < NUM_NODES) {\n        network.addNode(gen.nextInt(NODE_POOL_SIZE));\n      }\n      ArrayList<Integer> nodeList = new ArrayList<Integer>(network.nodes());\n      for (int i = 0; i < NUM_EDGES; ++i) {\n        \r\n        assertThat(\n                network.addEdge(\n                    getRandomElement(nodeList, gen), getRandomElement(nodeList, gen), new Object()))\n            .isTrue();\n      }\n      ArrayList<Object> edgeList = new ArrayList<Object>(network.edges());\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES);\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(edgeList, gen);\n      int numEdgesToRemove = gen.nextInt(NUM_EDGES);\n      for (int i = 0; i < numEdgesToRemove; ++i) {\n        Object edge = edgeList.get(i);\n        assertThat(network.removeEdge(edge)).isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES - numEdgesToRemove);\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(nodeList, gen);\n      int numNodesToRemove = gen.nextInt(NUM_NODES);\n      for (int i = 0; i < numNodesToRemove; ++i) {\n        assertThat(network.removeNode(nodeList.get(i))).isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES - numNodesToRemove);\n      \r\n      AbstractNetworkTest.validateNetwork(network);\n\n      for (int i = numNodesToRemove; i < NUM_NODES; ++i) {\n        assertThat(network.removeNode(nodeList.get(i))).isTrue();\n      }\n\n      assertThat(network.nodes()).isEmpty();\n      assertThat(network.edges()).isEmpty(); \r\n      AbstractNetworkTest.validateNetwork(network);\n\n      Collections.shuffle(nodeList, gen);\n      for (Integer node : nodeList) {\n        assertThat(network.addNode(node)).isTrue();\n      }\n      Collections.shuffle(edgeList, gen);\n      for (Object edge : edgeList) {\n        assertThat(\n                network.addEdge(\n                    getRandomElement(nodeList, gen), getRandomElement(nodeList, gen), edge))\n            .isTrue();\n      }\n\n      assertThat(network.nodes()).hasSize(NUM_NODES);\n      assertThat(network.edges()).hasSize(NUM_EDGES);\n      AbstractNetworkTest.validateNetwork(network);\n    }\n  }\n","realPath":"guava-tests/test/com/google/common/graph/NetworkMutationTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"934e3840945d3b866f80c28135a0369cb32d7163","commitMessage":"@@@Use diamond operator.\n\nFixes #2875\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=163205176\n","date":"2017-07-26 22:45:36","modifiedFileCount":"175","status":"M","submitter":"cpovirk"}]
