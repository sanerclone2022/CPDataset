[{"authorTime":"2017-10-10 16:48:59","codes":[{"authorDate":"2017-10-10 16:48:59","commitOrder":1,"curCode":"  public void forTree_breadthFirst_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).breadthFirst('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'd');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd');\n  }\n","date":"2017-10-10 21:51:52","endLine":451,"groupId":"7895","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"forTree_breadthFirst_iterableIsLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/09/d208546b1424f6b342971d7ea51ce75e3ba434.src","preCode":"  public void forTree_breadthFirst_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).breadthFirst('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'd');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd');\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"B"},{"authorDate":"2017-10-10 16:48:59","commitOrder":1,"curCode":"  public void forTree_breadthFirst_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).breadthFirst('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'd');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd');\n  }\n","date":"2017-10-10 21:51:52","endLine":451,"groupId":"7895","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"forTree_breadthFirst_iterableIsLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/09/d208546b1424f6b342971d7ea51ce75e3ba434.src","preCode":"  public void forTree_breadthFirst_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).breadthFirst('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'd');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd');\n  }\n","realPath":"guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"B"}],"commitId":"fa3239443902d9c06d2ac64f05fa19ef7f8a60c9","commitMessage":"@@@Implement Traverser.forTree().breadthFirst().\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=171648476\n","date":"2017-10-10 21:51:52","modifiedFileCount":"4","status":"B","submitter":"jnyman"},{"authorTime":"2017-10-17 17:55:09","codes":[{"authorDate":"2017-10-17 17:55:09","commitOrder":2,"curCode":"  public void forTree_breadthFirst_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).breadthFirst('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd');\n  }\n","date":"2017-10-17 22:15:10","endLine":527,"groupId":"10231","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"forTree_breadthFirst_iterableIsLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/e0/402b675470112b228b5df01c518638f2123a55.src","preCode":"  public void forTree_breadthFirst_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).breadthFirst('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'd');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd');\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":517,"status":"M"},{"authorDate":"2017-10-17 17:55:09","commitOrder":2,"curCode":"  public void forTree_breadthFirst_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).breadthFirst('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd');\n  }\n","date":"2017-10-17 22:15:10","endLine":527,"groupId":"10231","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"forTree_breadthFirst_iterableIsLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/e0/402b675470112b228b5df01c518638f2123a55.src","preCode":"  public void forTree_breadthFirst_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).breadthFirst('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'd');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"hd\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd');\n  }\n","realPath":"guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":517,"status":"M"}],"commitId":"50b0e455510e599e418c18ccd65a4b53f9dc3b50","commitMessage":"@@@Traverser: Throw IAE if startNode is not part of the graph and add tests for empty graph case and disjoint trees (forest) case.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=172443426\n","date":"2017-10-17 22:15:10","modifiedFileCount":"4","status":"M","submitter":"jnyman"}]
