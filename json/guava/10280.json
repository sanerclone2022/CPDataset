[{"authorTime":"2017-10-11 00:12:16","codes":[{"authorDate":"2017-10-11 00:12:16","commitOrder":1,"curCode":"  public void forTree_depthFirstPostOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPostOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'd', 'a', 'b');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd', 'a', 'a', 'b', 'b');\n  }\n","date":"2017-10-11 00:29:37","endLine":531,"groupId":"8540","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"forTree_depthFirstPostOrder_iterableIsLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/83/2d5e7c3357bd3c70cd04699b624dacab3f1878.src","preCode":"  public void forTree_depthFirstPostOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPostOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'd', 'a', 'b');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd', 'a', 'a', 'b', 'b');\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":521,"status":"B"},{"authorDate":"2017-10-11 00:12:16","commitOrder":1,"curCode":"  public void forTree_depthFirstPostOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPostOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'd', 'a', 'b');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd', 'a', 'a', 'b', 'b');\n  }\n","date":"2017-10-11 00:29:37","endLine":531,"groupId":"8540","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"forTree_depthFirstPostOrder_iterableIsLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/83/2d5e7c3357bd3c70cd04699b624dacab3f1878.src","preCode":"  public void forTree_depthFirstPostOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPostOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'd', 'a', 'b');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd', 'a', 'a', 'b', 'b');\n  }\n","realPath":"guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":521,"status":"B"}],"commitId":"9a96b6a9195cbad137bce618104eea5c4217c0a7","commitMessage":"@@@Implement Traverser.forTree().depthFirst*().\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=171687201\n","date":"2017-10-11 00:29:37","modifiedFileCount":"4","status":"B","submitter":"jnyman"},{"authorTime":"2017-10-17 17:55:09","codes":[{"authorDate":"2017-10-17 17:55:09","commitOrder":2,"curCode":"  public void forTree_depthFirstPostOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPostOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'a', 'b');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd', 'a', 'a', 'b', 'b');\n  }\n","date":"2017-10-17 22:15:10","endLine":639,"groupId":"10280","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"forTree_depthFirstPostOrder_iterableIsLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/e0/402b675470112b228b5df01c518638f2123a55.src","preCode":"  public void forTree_depthFirstPostOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPostOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'd', 'a', 'b');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd', 'a', 'a', 'b', 'b');\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":629,"status":"M"},{"authorDate":"2017-10-17 17:55:09","commitOrder":2,"curCode":"  public void forTree_depthFirstPostOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPostOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'a', 'b');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd', 'a', 'a', 'b', 'b');\n  }\n","date":"2017-10-17 22:15:10","endLine":639,"groupId":"10280","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"forTree_depthFirstPostOrder_iterableIsLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/e0/402b675470112b228b5df01c518638f2123a55.src","preCode":"  public void forTree_depthFirstPostOrder_iterableIsLazy() {\n    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPostOrder('h');\n\n    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'd', 'a', 'b');\n\n    \r\n    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd', 'a', 'a', 'b', 'b');\n  }\n","realPath":"guava-tests/test/com/google/common/graph/TraverserTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":629,"status":"M"}],"commitId":"50b0e455510e599e418c18ccd65a4b53f9dc3b50","commitMessage":"@@@Traverser: Throw IAE if startNode is not part of the graph and add tests for empty graph case and disjoint trees (forest) case.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=172443426\n","date":"2017-10-17 22:15:10","modifiedFileCount":"4","status":"M","submitter":"jnyman"}]
