[{"authorTime":"2016-09-03 08:36:50","codes":[{"authorDate":"2017-04-21 05:33:38","commitOrder":4,"curCode":"  public void removeNode_queryAfterRemoval() {\n    addNode(N1);\n    @SuppressWarnings(\"unused\")\n    Set<Integer> unused = graph.adjacentNodes(N1); \r\n    assertThat(graph.removeNode(N1)).isTrue();\n    try {\n      graph.adjacentNodes(N1);\n      fail(ERROR_NODE_NOT_IN_GRAPH);\n    } catch (IllegalArgumentException e) {\n      assertNodeNotInGraphErrorMessage(e);\n    }\n  }\n","date":"2017-04-21 10:27:51","endLine":383,"groupId":"2147","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"removeNode_queryAfterRemoval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/78/375146993591b9e1bacfe12ba731f36107d8dd.src","preCode":"  public void removeNode_queryAfterRemoval() {\n    addNode(N1);\n    @SuppressWarnings(\"unused\")\n    Set<Integer> unused = graph.adjacentNodes(N1); \r\n    assertThat(graph.removeNode(N1)).isTrue();\n    try {\n      graph.adjacentNodes(N1);\n      fail(ERROR_NODE_NOT_IN_GRAPH);\n    } catch (IllegalArgumentException e) {\n      assertNodeNotInGraphErrorMessage(e);\n    }\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/AbstractGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":372,"status":"B"},{"authorDate":"2016-09-03 08:36:50","commitOrder":4,"curCode":"  public void removeNode_queryAfterRemoval() {\n    addNode(N1);\n    @SuppressWarnings(\"unused\")\n    Set<Integer> unused = graph.adjacentNodes(N1); \r\n    assertThat(graph.removeNode(N1)).isTrue();\n    try {\n      graph.adjacentNodes(N1);\n      fail(ERROR_NODE_NOT_IN_GRAPH);\n    } catch (IllegalArgumentException e) {\n      assertNodeNotInGraphErrorMessage(e);\n    }\n  }\n","date":"2016-09-03 20:24:16","endLine":391,"groupId":"2147","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"removeNode_queryAfterRemoval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/71/aad05c2836bd513460f6191b771f7e1fa3e5bc.src","preCode":"  public void removeNode_queryAfterRemoval() {\n    addNode(N1);\n    @SuppressWarnings(\"unused\")\n    Set<Integer> unused = graph.adjacentNodes(N1); \r\n    assertThat(graph.removeNode(N1)).isTrue();\n    try {\n      graph.adjacentNodes(N1);\n      fail(ERROR_NODE_NOT_IN_GRAPH);\n    } catch (IllegalArgumentException e) {\n      assertNodeNotInGraphErrorMessage(e);\n    }\n  }\n","realPath":"guava-tests/test/com/google/common/graph/AbstractGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"NB"}],"commitId":"9b94fb3965c6869b0ac47420958a4bbae0b2d54c","commitMessage":"@@@Begin exporting sources of Guava for Android.\n\npom.xml files to come.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=153757913\n","date":"2017-04-21 10:27:51","modifiedFileCount":"0","status":"M","submitter":"zhenghua"},{"authorTime":"2019-11-29 19:38:18","codes":[{"authorDate":"2019-11-29 19:38:18","commitOrder":5,"curCode":"  public void removeNode_queryAfterRemoval() {\n    assume().that(graphIsMutable()).isTrue();\n\n    addNode(N1);\n    @SuppressWarnings(\"unused\")\n    Set<Integer> unused = graph.adjacentNodes(N1); \r\n    assertThat(graphAsMutableGraph.removeNode(N1)).isTrue();\n    try {\n      graph.adjacentNodes(N1);\n      fail(ERROR_NODE_NOT_IN_GRAPH);\n    } catch (IllegalArgumentException e) {\n      assertNodeNotInGraphErrorMessage(e);\n    }\n  }\n","date":"2019-12-02 22:22:31","endLine":432,"groupId":"10504","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"removeNode_queryAfterRemoval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/46/2f4288a6a0d433f14fa7dad4160d3e38537450.src","preCode":"  public void removeNode_queryAfterRemoval() {\n    addNode(N1);\n    @SuppressWarnings(\"unused\")\n    Set<Integer> unused = graph.adjacentNodes(N1); \r\n    assertThat(graph.removeNode(N1)).isTrue();\n    try {\n      graph.adjacentNodes(N1);\n      fail(ERROR_NODE_NOT_IN_GRAPH);\n    } catch (IllegalArgumentException e) {\n      assertNodeNotInGraphErrorMessage(e);\n    }\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/AbstractGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"M"},{"authorDate":"2019-11-29 19:38:18","commitOrder":5,"curCode":"  public void removeNode_queryAfterRemoval() {\n    assume().that(graphIsMutable()).isTrue();\n\n    addNode(N1);\n    @SuppressWarnings(\"unused\")\n    Set<Integer> unused = graph.adjacentNodes(N1); \r\n    assertThat(graphAsMutableGraph.removeNode(N1)).isTrue();\n    try {\n      graph.adjacentNodes(N1);\n      fail(ERROR_NODE_NOT_IN_GRAPH);\n    } catch (IllegalArgumentException e) {\n      assertNodeNotInGraphErrorMessage(e);\n    }\n  }\n","date":"2019-12-02 22:22:31","endLine":432,"groupId":"10504","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"removeNode_queryAfterRemoval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/46/2f4288a6a0d433f14fa7dad4160d3e38537450.src","preCode":"  public void removeNode_queryAfterRemoval() {\n    addNode(N1);\n    @SuppressWarnings(\"unused\")\n    Set<Integer> unused = graph.adjacentNodes(N1); \r\n    assertThat(graph.removeNode(N1)).isTrue();\n    try {\n      graph.adjacentNodes(N1);\n      fail(ERROR_NODE_NOT_IN_GRAPH);\n    } catch (IllegalArgumentException e) {\n      assertNodeNotInGraphErrorMessage(e);\n    }\n  }\n","realPath":"guava-tests/test/com/google/common/graph/AbstractGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"M"}],"commitId":"1c757483665f0ba8fed31a2af7e31643a4590256","commitMessage":"@@@Refactor AbstractGraphTest to allow for tests with ImmutableGraph.\n\nReason: ImmutableGraph implementations are undertested compared to MutableGraph implementations. The current tests didn't catch a bug I deliberately introduced in [] Also.  it would be nice to be able to share the incident edge order tests.\n\nNote about design: I started out by making an AbstractGraphTest subclass for mutable graphs. However.  that would lead to a duplication of all 7 subclasses and most of their tests. The issue is that directed/undirected and mutable/immutable are orthogonal and we also want to test allowSelfLoops=true/false and incidentEdgeOrder=unordered/stable. The proposed solution is somewhat unconventional.  but at least allows us to share much more code between the tests.\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=283035873\n","date":"2019-12-02 22:22:31","modifiedFileCount":"16","status":"M","submitter":"jnyman"}]
