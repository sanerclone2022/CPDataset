[{"authorTime":"2017-04-21 05:33:38","codes":[{"authorDate":"2017-04-21 05:33:38","commitOrder":1,"curCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(',')\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n        .split(jacksons);\n    assertThat(family)\n        .containsExactly(\"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\")\n        .inOrder();\n  }\n","date":"2017-04-21 10:27:51","endLine":297,"groupId":"5318","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/71/c3230c7e6aa8db374ff59250c9117e4f2cbfd1.src","preCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(',')\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n        .split(jacksons);\n    assertThat(family)\n        .containsExactly(\"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\")\n        .inOrder();\n  }\n","realPath":"android/guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"B"},{"authorDate":"2017-04-21 05:33:38","commitOrder":1,"curCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n        .split(jacksons);\n    assertThat(family)\n        .containsExactly(\"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\")\n        .inOrder();\n  }\n","date":"2017-04-21 10:27:51","endLine":472,"groupId":"5318","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPatternSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/71/c3230c7e6aa8db374ff59250c9117e4f2cbfd1.src","preCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n        .split(jacksons);\n    assertThat(family)\n        .containsExactly(\"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\")\n        .inOrder();\n  }\n","realPath":"android/guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":463,"status":"B"}],"commitId":"9b94fb3965c6869b0ac47420958a4bbae0b2d54c","commitMessage":"@@@Begin exporting sources of Guava for Android.\n\npom.xml files to come.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=153757913\n","date":"2017-04-21 10:27:51","modifiedFileCount":"0","status":"B","submitter":"zhenghua"},{"authorTime":"2017-04-21 05:33:38","codes":[{"authorDate":"2017-09-21 23:12:29","commitOrder":2,"curCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(\",\")\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n        .split(jacksons);\n    assertThat(family)\n        .containsExactly(\"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\")\n        .inOrder();\n  }\n","date":"2017-09-21 23:20:56","endLine":297,"groupId":"101077","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/12/2e69382cda869794456f4eeecd2142d6d0c2e8.src","preCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(',')\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n        .split(jacksons);\n    assertThat(family)\n        .containsExactly(\"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\")\n        .inOrder();\n  }\n","realPath":"android/guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"},{"authorDate":"2017-04-21 05:33:38","commitOrder":2,"curCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n        .split(jacksons);\n    assertThat(family)\n        .containsExactly(\"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\")\n        .inOrder();\n  }\n","date":"2017-04-21 10:27:51","endLine":472,"groupId":"101077","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPatternSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/71/c3230c7e6aa8db374ff59250c9117e4f2cbfd1.src","preCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n        .split(jacksons);\n    assertThat(family)\n        .containsExactly(\"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\")\n        .inOrder();\n  }\n","realPath":"android/guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":463,"status":"N"}],"commitId":"ac573800bccecbb72f509d9024acccf48ccb6f4f","commitMessage":"@@@Revert parts of CL 33393713 that changed Splitter.on(\". \") tests to redundant Splitter.on('. ') tests.\nUse COMMA_SPLITTER in more remaining Splitter.on('. ') tests.\n\nFixes https://github.com/google/guava/pull/2946\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=169545037\n","date":"2017-09-21 23:20:56","modifiedFileCount":"3","status":"M","submitter":"lesiak"}]
