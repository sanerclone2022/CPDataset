[{"authorTime":"2016-08-20 23:28:31","codes":[{"authorDate":"2016-08-22 23:10:48","commitOrder":3,"curCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isEqualTo(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","date":"2016-08-23 04:02:45","endLine":358,"groupId":"1933","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/cc/8e8d3d43a3f0d2f8fec6b20920c4663042fe98.src","preCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isEqualTo(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"B"},{"authorDate":"2016-08-20 23:28:31","commitOrder":3,"curCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","date":"2016-08-23 04:02:40","endLine":555,"groupId":"6772","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildUndirectedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/8e/c30f62730d3e0b5f22b03fef6f6b822ca30c07.src","preCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"NB"}],"commitId":"ccccbf25427fbc2141ff9b502c6cbe467ac2a967","commitMessage":"@@@Add Graphs.transpose() static utility methods for viewing the transpose of a graph. See: https://en.wikipedia.org/wiki/Transpose_graph\n\nAdd Graphs.asBasicGraph(). One downside to having BasicGraph *under* Graph in the type hierarchy (still overall a good idea though :P) is that people are likely to write methods that accept \"BasicGraph<N>\".  even though they COULD accept \"Graph<N.  ?>\". A little bit of javadoc is not going to stop that from happening.  so might as well make it less painful to handle. Also.  if someone e.g. wants to make a MutableBasicGraph copy of a Graph.  there was really no way to do that before. They can now do:\n\nGraphs.copyOf(Graphs.asBasicGraph(myGraph));\n\nNote that we cannot simply change the MutableBasicGraph version of copyOf() to accept a Graph<N.  ?>.  because then it would have the same type erasure as the MutableGraph version of copyOf() but a different return type. ImmutableBasicGraph.copyOf() has the same issue.  because ImmutableBasicGraph extends ImmutableGraph which has it's own copyOf().\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=130939830\n","date":"2016-08-23 04:02:45","modifiedFileCount":"2","status":"M","submitter":"jasexton"},{"authorTime":"2016-08-20 23:28:31","codes":[{"authorDate":"2016-09-01 12:04:06","commitOrder":4,"curCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(Graphs.equivalent(transpose, expectedTranspose)).isTrue();\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","date":"2016-09-01 22:30:43","endLine":322,"groupId":"1933","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/de/ebce61f575d7158dba0c00c44978949473092f.src","preCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isEqualTo(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2016-08-20 23:28:31","commitOrder":4,"curCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","date":"2016-08-23 04:02:40","endLine":555,"groupId":"6772","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildUndirectedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/8e/c30f62730d3e0b5f22b03fef6f6b822ca30c07.src","preCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"N"}],"commitId":"cfe05dfda3ba79aa1bd3acce6b4e766eb7b9bc00","commitMessage":"@@@Changes to common.graph. Sorry for the churn.  but after this things should be settled down for a while (and we'll be launching v20 soon!). Changes include:\n\n-Revert the interface names back. \"BasicGraph\" is now \"Graph\" (BasicGraph was probably a a poor choice).  and \"Graph\" is now \"ValueGraph\". The \"node only\" Graph interface is at the top of the interface hierarchy.  and ValueGraph extends it.\n-To facilitate the above.  the various graph interfaces do *not* specify equality.  and the default implementations use reference (identity) equality.\n-Add static methods Graphs.equivalent(...) for users that want value-based equality.\n-Rename Endpoints to EndpointPair. Rename nodeA()/nodeB() to nodeU()/nodeV() and expose isOrdered().\n\nMinor changes:\n\n-Undid the small refactor from [] since the original structure makes it easier for the Immutable classes to have the right hierarchy (i.e. ImmutableValueGraph extends ImmutableGraph.  ImmutableNetwork.asGraph() is an ImmutableGraph).\n-Added an \"isEquivalentTo\" method to NetworkSubject (formerly GraphSubject) in labs. Eventually we should get around to having a single truth import for both Graphs and Networks.\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=131906631\n","date":"2016-09-01 22:30:43","modifiedFileCount":"34","status":"M","submitter":"jasexton"},{"authorTime":"2016-08-20 23:28:31","codes":[{"authorDate":"2016-09-27 07:19:41","commitOrder":5,"curCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(Graphs.equivalent(transpose, expectedTranspose)).isTrue();\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","date":"2016-09-27 21:46:03","endLine":316,"groupId":"968","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/cd/c09c74891f88d894103ac980af2fb9ef412160.src","preCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsSelfLoops(true).build();\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(Graphs.equivalent(transpose, expectedTranspose)).isTrue();\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"},{"authorDate":"2016-08-20 23:28:31","commitOrder":5,"curCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","date":"2016-08-23 04:02:40","endLine":555,"groupId":"6772","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"buildUndirectedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/8e/c30f62730d3e0b5f22b03fef6f6b822ca30c07.src","preCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"N"}],"commitId":"f02ea7e285d73bb13fe02a4a05802b4710fa3d44","commitMessage":"@@@Add edgeValueOrDefault() method to ValueGraph interface.  and remove Map-returning edgeValues() for now. This CL effectively rolls back []\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=134341213\n","date":"2016-09-27 21:46:03","modifiedFileCount":"6","status":"M","submitter":"jasexton"},{"authorTime":"2016-08-20 23:28:31","codes":[{"authorDate":"2017-01-18 12:02:14","commitOrder":6,"curCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","date":"2017-01-19 23:53:15","endLine":316,"groupId":"968","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/67/32ab9da9f2d6b1cfd8978db3453c4ca301cca9.src","preCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(Graphs.equivalent(transpose, expectedTranspose)).isTrue();\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"},{"authorDate":"2016-08-20 23:28:31","commitOrder":6,"curCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","date":"2016-08-23 04:02:40","endLine":555,"groupId":"6772","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"buildUndirectedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/8e/c30f62730d3e0b5f22b03fef6f6b822ca30c07.src","preCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"N"}],"commitId":"d0dc9ce896df6299de427063fa69bd348937ef1f","commitMessage":"@@@Now that ValueGraph no longer extends Graph.  change all the common.graph interfaces to handle equals()/hashCode() \"normally\". Deprecate Graphs.equivalent().\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=144788407\n","date":"2017-01-19 23:53:15","modifiedFileCount":"14","status":"M","submitter":"jasexton"},{"authorTime":"2016-08-20 23:28:31","codes":[{"authorDate":"2017-01-20 04:48:06","commitOrder":7,"curCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","date":"2017-01-20 23:49:40","endLine":316,"groupId":"8835","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/22/b765b41ab5679ddf1701e941496b96cc4c4e7b.src","preCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = Graphs.transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"},{"authorDate":"2016-08-20 23:28:31","commitOrder":7,"curCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","date":"2016-08-23 04:02:40","endLine":555,"groupId":"6772","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"buildUndirectedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/8e/c30f62730d3e0b5f22b03fef6f6b822ca30c07.src","preCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"N"}],"commitId":"26adf8f40095d21904711b9edf94ac258754bce7","commitMessage":"@@@Shuffling from internal-only change.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=144996795\n","date":"2017-01-20 23:49:40","modifiedFileCount":"1","status":"M","submitter":"jasexton"},{"authorTime":"2016-08-20 23:28:31","codes":[{"authorDate":"2017-01-21 05:50:31","commitOrder":8,"curCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    assertThat(transpose.edgeConnecting(N1, N2)).isAbsent();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    assertThat(transpose.edgeConnecting(N1, N2)).hasValue(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","date":"2017-01-24 00:11:44","endLine":318,"groupId":"8835","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/2f/77b63db7d1e8a0d9ab3c407cbbaa5f35c02657.src","preCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"},{"authorDate":"2016-08-20 23:28:31","commitOrder":8,"curCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","date":"2016-08-23 04:02:40","endLine":555,"groupId":"6772","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"buildUndirectedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/8e/c30f62730d3e0b5f22b03fef6f6b822ca30c07.src","preCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"N"}],"commitId":"3def13f60ae4a72e59a8426aab6e3568613fe9e4","commitMessage":"@@@Add the method Network.edgeConnecting().\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=145123448\n","date":"2017-01-24 00:11:44","modifiedFileCount":"6","status":"M","submitter":"jasexton"},{"authorTime":"2016-08-20 23:28:31","codes":[{"authorDate":"2017-05-23 00:56:43","commitOrder":9,"curCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","date":"2017-05-23 01:39:27","endLine":316,"groupId":"8835","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/22/b765b41ab5679ddf1701e941496b96cc4c4e7b.src","preCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    assertThat(transpose.edgeConnecting(N1, N2)).isAbsent();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    assertThat(transpose.edgeConnecting(N1, N2)).hasValue(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"},{"authorDate":"2016-08-20 23:28:31","commitOrder":9,"curCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","date":"2016-08-23 04:02:40","endLine":555,"groupId":"6772","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"buildUndirectedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/8e/c30f62730d3e0b5f22b03fef6f6b822ca30c07.src","preCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"N"}],"commitId":"bc996973fe6ce1ecb67803aa1ff5bdf5df59d182","commitMessage":"@@@common.graph classes: mark types and methods as @GoogleInternal that are not yet ready for release in Guava 22.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=156749408\n","date":"2017-05-23 01:39:27","modifiedFileCount":"24","status":"M","submitter":"jrtom"},{"authorTime":"2016-08-20 23:28:31","codes":[{"authorDate":"2017-06-22 05:57:06","commitOrder":10,"curCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    assertThat(transpose.edgeConnecting(N1, N2).isPresent()).isFalse();\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isNull();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    assertThat(transpose.edgeConnecting(N1, N2).get()).isEqualTo(E21);\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isEqualTo(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","date":"2017-06-23 00:09:26","endLine":320,"groupId":"8835","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/43/95c4a3e921e72a8c29fafb3ab17c727ba9036e.src","preCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"},{"authorDate":"2016-08-20 23:28:31","commitOrder":10,"curCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","date":"2016-08-23 04:02:40","endLine":555,"groupId":"6772","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"buildUndirectedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/8e/c30f62730d3e0b5f22b03fef6f6b822ca30c07.src","preCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"N"}],"commitId":"240a807d3d1cbcad99481ede9530af0cdfadf47c","commitMessage":"@@@Network.java: fork edgeConnecting() for java7/Android:\n* current/.../Network.java now provides\n  java.util.Optional<E> edgeConnecting(N.  N)\n  E edgeConnectingOrNull(N.  N)\n* java7/.../Network.java now provides\n  E edgeConnectingOrNull(N.  N)\n\nNeither current/ nor java7/ use common.base.Optional in external APIs any more.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=159748595\n","date":"2017-06-23 00:09:26","modifiedFileCount":"10","status":"M","submitter":"jrtom"},{"authorTime":"2016-08-20 23:28:31","codes":[{"authorDate":"2017-07-14 04:35:55","commitOrder":11,"curCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    assertThat(transpose.edgeConnecting(N1, N2).isPresent()).isFalse();\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isNull();\n\n    for (Integer node : directedGraph.nodes()) {\n      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));\n      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));\n    }\n\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    assertThat(transpose.edgeConnecting(N1, N2).get()).isEqualTo(E21);\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isEqualTo(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","date":"2017-07-14 06:31:44","endLine":336,"groupId":"8835","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/41/78d088922bfec1663790ca0d2092cbd2ae9231.src","preCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    assertThat(transpose.edgeConnecting(N1, N2).isPresent()).isFalse();\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isNull();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    assertThat(transpose.edgeConnecting(N1, N2).get()).isEqualTo(E21);\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isEqualTo(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2016-08-20 23:28:31","commitOrder":11,"curCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","date":"2016-08-23 04:02:40","endLine":555,"groupId":"6772","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"buildUndirectedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/8e/c30f62730d3e0b5f22b03fef6f6b822ca30c07.src","preCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"N"}],"commitId":"4a6ce819542d5fe440bd5d13956bb4e46084325c","commitMessage":"@@@common.graph: create (package-protected) ForwardingValueGraph and ForwardingNetwork classes.  and use those (and ForwardingGraph) to simplify the implementation of the Transposed* inner classes in Graphs.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=161856111\n","date":"2017-07-14 06:31:44","modifiedFileCount":"6","status":"M","submitter":"jrtom"},{"authorTime":"2016-08-20 23:28:31","codes":[{"authorDate":"2019-05-01 23:30:59","commitOrder":12,"curCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameInstanceAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    assertThat(transpose.edgeConnecting(N1, N2).isPresent()).isFalse();\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isNull();\n\n    for (Integer node : directedGraph.nodes()) {\n      assertThat(directedGraph.inDegree(node)).isSameInstanceAs(transpose.outDegree(node));\n      assertThat(directedGraph.outDegree(node)).isSameInstanceAs(transpose.inDegree(node));\n    }\n\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    assertThat(transpose.edgeConnecting(N1, N2).get()).isEqualTo(E21);\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isEqualTo(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","date":"2019-05-06 02:02:35","endLine":336,"groupId":"10632","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"transpose_directedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/b2/2567620eddea3eb8053d1e9e7a9146726fe9e7.src","preCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    assertThat(transpose.edgeConnecting(N1, N2).isPresent()).isFalse();\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isNull();\n\n    for (Integer node : directedGraph.nodes()) {\n      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));\n      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));\n    }\n\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    assertThat(transpose.edgeConnecting(N1, N2).get()).isEqualTo(E21);\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isEqualTo(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2016-08-20 23:28:31","commitOrder":12,"curCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","date":"2016-08-23 04:02:40","endLine":555,"groupId":"10632","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"buildUndirectedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/8e/c30f62730d3e0b5f22b03fef6f6b822ca30c07.src","preCode":"  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n    MutableNetwork<Integer, String> undirectedGraph =\n        NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    undirectedGraph.addEdge(N1, N1, E11);\n    undirectedGraph.addEdge(N1, N2, E12);\n    undirectedGraph.addEdge(N1, N1, E11_A);\n    undirectedGraph.addEdge(N1, N2, E12_A);\n    undirectedGraph.addEdge(N2, N1, E21);\n\n    return undirectedGraph;\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"N"}],"commitId":"c8542f65ca36545089b7a9fa8aebaad8a7da8762","commitMessage":"@@@Migrate from is(Not)SameAs to is(Not)SameInstanceAs.\n\nThey behave identically.  and the old names are being removed.\n\nOpen-source note: The new methods are available in Truth as of version 0.44.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=246135538\n","date":"2019-05-06 02:02:35","modifiedFileCount":"40","status":"M","submitter":"cpovirk"}]
