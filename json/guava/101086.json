[{"authorTime":"2011-07-14 06:10:18","codes":[{"authorDate":"2011-07-14 06:10:18","commitOrder":1,"curCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(\",\")\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    assertContentsInOrder(family,\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","date":"2011-07-14 06:10:18","endLine":273,"groupId":"2671","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/fe/ee01823d05a9e2e0e21666660a83c1aee54963.src","preCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(\",\")\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    assertContentsInOrder(family,\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"B"},{"authorDate":"2011-07-14 06:10:18","commitOrder":1,"curCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    assertContentsInOrder(family,\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","date":"2011-07-14 06:10:18","endLine":410,"groupId":"7632","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPatternSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/fe/ee01823d05a9e2e0e21666660a83c1aee54963.src","preCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    assertContentsInOrder(family,\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"B"}],"commitId":"fe758695c2cf3abd61e1e22dc902bb764adba7ca","commitMessage":"@@@\nSync folders for tests and test-libraries to separate \"projects\" in the open-source.\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=2563\n\n\ngit-svn-id: https://guava-libraries.googlecode.com/svn/trunk@528 8138a162-5c33-11de-8abc-d1c337b90d21\n","date":"2011-07-14 06:10:18","modifiedFileCount":"0","status":"B","submitter":"guava.mirrorbot@gmail.com"},{"authorTime":"2011-08-12 20:51:04","codes":[{"authorDate":"2011-08-12 20:51:04","commitOrder":2,"curCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(\",\")\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    ASSERT.that(family).hasContentsInOrder(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","date":"2011-08-12 20:51:04","endLine":273,"groupId":"2671","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/53/71acfe9ebbbb6b19ce90c8ae4a57e90c087be1.src","preCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(\",\")\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    assertContentsInOrder(family,\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"},{"authorDate":"2011-08-12 20:51:04","commitOrder":2,"curCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    ASSERT.that(family).hasContentsInOrder(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","date":"2011-08-12 20:51:04","endLine":410,"groupId":"7632","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPatternSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/53/71acfe9ebbbb6b19ce90c8ae4a57e90c087be1.src","preCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    assertContentsInOrder(family,\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"M"}],"commitId":"0ae2d4fe60720233283579aea8c325bde5d60a6f","commitMessage":"@@@massive manual sync\n\n\ngit-svn-id: https://guava-libraries.googlecode.com/svn/trunk@640 8138a162-5c33-11de-8abc-d1c337b90d21\n","date":"2011-08-12 20:51:04","modifiedFileCount":"16","status":"M","submitter":"fry@google.com"},{"authorTime":"2011-08-12 20:51:04","codes":[{"authorDate":"2012-08-30 04:40:35","commitOrder":3,"curCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(',')\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    ASSERT.that(family).hasContentsInOrder(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","date":"2012-08-30 04:40:35","endLine":282,"groupId":"2671","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/5a/6c9b129059acd52536b455bb0026987acda726.src","preCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(\",\")\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    ASSERT.that(family).hasContentsInOrder(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2011-08-12 20:51:04","commitOrder":3,"curCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    ASSERT.that(family).hasContentsInOrder(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","date":"2011-08-12 20:51:04","endLine":410,"groupId":"7632","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPatternSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/53/71acfe9ebbbb6b19ce90c8ae4a57e90c087be1.src","preCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    ASSERT.that(family).hasContentsInOrder(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"N"}],"commitId":"8f48177132547cee2943c93837d76b898154d722","commitMessage":"@@@Change Splitter#on(String) to Splitter#on(char) for single character strings\n- Results in a 10-25% performance improvement see bug for details\n\nCL generated by running the following:\n\n#!/usr/bin/perl -pi\ns. Splitter\\.on\\(\\\"\\\\(.)\\\"\\). Splitter.on('\\\\$1'). g;\ns. Splitter\\.on\\(\\\"(.)\\\"\\). Splitter.on('$1'). g;\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=33393713\n","date":"2012-08-30 04:40:35","modifiedFileCount":"2","status":"M","submitter":"Chris Povirk"},{"authorTime":"2012-11-30 01:35:31","codes":[{"authorDate":"2012-11-30 01:35:31","commitOrder":4,"curCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(',')\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    ASSERT.that(family).iteratesOverSequence(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","date":"2012-11-30 01:35:31","endLine":282,"groupId":"2671","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/57/e44b03c8ed80dfbb2d8c31f568798fcee2c4f8.src","preCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(',')\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    ASSERT.that(family).hasContentsInOrder(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2012-11-30 01:35:31","commitOrder":4,"curCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    ASSERT.that(family).iteratesOverSequence(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","date":"2012-11-30 01:35:31","endLine":435,"groupId":"7632","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPatternSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/57/e44b03c8ed80dfbb2d8c31f568798fcee2c4f8.src","preCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    ASSERT.that(family).hasContentsInOrder(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"M"}],"commitId":"406d0d589b20a5fea174d5163e4671df18bc04ec","commitMessage":"@@@Swap out truth 0.7 (and older source version) and swap in 0.10 with gwt support\nLots of import changes poached from:\nreplace_string \"import org.junit.contrib.truth\" \"import org.truth0\"\nreplace_string \"import static org.junit.contrib.truth\" \"import static org.truth0\"\nmanual search/replace containsAnyOrder() -> has().allOf()\nmanual search/replace containsInOrder() -> has().allOf().inOrder()\nsometimes s/r contains*Order() -> has().item or has().allFrom(){.inOrder()} as appropriate\nother manual fixes\n\nTested:\nglobal presubmit\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=39392184\n","date":"2012-11-30 01:35:31","modifiedFileCount":"90","status":"M","submitter":"Kurt Kluever"},{"authorTime":"2014-04-17 05:10:57","codes":[{"authorDate":"2014-04-17 05:10:57","commitOrder":5,"curCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(',')\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    ASSERT.that(family).iteratesAs(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","date":"2014-04-17 06:51:49","endLine":296,"groupId":"2671","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/79/4d79c46b5c0b083bd9087bbc087a5ab80b225b.src","preCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(',')\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    ASSERT.that(family).iteratesOverSequence(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"},{"authorDate":"2014-04-17 05:10:57","commitOrder":5,"curCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    ASSERT.that(family).iteratesAs(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","date":"2014-04-17 06:51:49","endLine":449,"groupId":"7632","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testPatternSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/79/4d79c46b5c0b083bd9087bbc087a5ab80b225b.src","preCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    ASSERT.that(family).iteratesOverSequence(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"M"}],"commitId":"01572c00d3f0ced8f7ad899182ee74b1a397a313","commitMessage":"@@@Replace usages of deprecated IterableSubject.iteratesOverSequence(...) with iteratesAs(...)\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=65045496\n","date":"2014-04-17 06:51:49","modifiedFileCount":"10","status":"M","submitter":"Colin Decker"},{"authorTime":"2014-07-28 20:40:24","codes":[{"authorDate":"2014-07-28 20:40:24","commitOrder":6,"curCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(',')\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    assertThat(family).iteratesAs(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","date":"2014-07-28 20:40:24","endLine":296,"groupId":"7632","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/98/33eae11dc96b06a40f1d700b5c3308cf49a0c6.src","preCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(',')\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    ASSERT.that(family).iteratesAs(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"},{"authorDate":"2014-07-28 20:40:24","commitOrder":6,"curCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    assertThat(family).iteratesAs(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","date":"2014-07-28 20:40:24","endLine":449,"groupId":"7632","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testPatternSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/98/33eae11dc96b06a40f1d700b5c3308cf49a0c6.src","preCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    ASSERT.that(family).iteratesAs(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"M"}],"commitId":"91cdb2b7ed631bd3cb4e93783b087d52ab8ce82c","commitMessage":"@@@Update to new Truth package.\nUse assertThat() instead of ASSERT.that()\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=71286559\n","date":"2014-07-28 20:40:24","modifiedFileCount":"135","status":"M","submitter":"Christian Edward Gruber"},{"authorTime":"2014-11-22 03:08:20","codes":[{"authorDate":"2014-11-22 03:08:20","commitOrder":7,"curCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(',')\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    assertThat(family)\n        .containsExactly(\"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\")\n        .inOrder();\n  }\n","date":"2014-12-02 02:11:19","endLine":301,"groupId":"7632","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/ac/4ba73eb5f5ec7e9a7c499f688e872e5291b8be.src","preCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(',')\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    assertThat(family).iteratesAs(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"M"},{"authorDate":"2014-11-22 03:08:20","commitOrder":7,"curCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    assertThat(family)\n        .containsExactly(\"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\")\n        .inOrder();\n  }\n","date":"2014-12-02 02:11:19","endLine":456,"groupId":"7632","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testPatternSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/ac/4ba73eb5f5ec7e9a7c499f688e872e5291b8be.src","preCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    assertThat(family).iteratesAs(\n        \"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\");\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":447,"status":"M"}],"commitId":"a2508dae5397713c4a8bd464d0014233c742f733","commitMessage":"@@@Migrate from Truth's deprecated iteratesAs(...) to containsExactly(...).inOrder().\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=80490101\n","date":"2014-12-02 02:11:19","modifiedFileCount":"2","status":"M","submitter":"kak"},{"authorTime":"2016-01-22 03:54:37","codes":[{"authorDate":"2016-01-22 03:54:37","commitOrder":8,"curCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(',')\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n        .split(jacksons);\n    assertThat(family)\n        .containsExactly(\"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\")\n        .inOrder();\n  }\n","date":"2016-01-22 04:10:51","endLine":299,"groupId":"5318","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/1f/37a89ba18ecb5c846596f4596566774fc287e2.src","preCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(',')\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    assertThat(family)\n        .containsExactly(\"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\")\n        .inOrder();\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"},{"authorDate":"2016-01-22 03:54:37","commitOrder":8,"curCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n        .split(jacksons);\n    assertThat(family)\n        .containsExactly(\"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\")\n        .inOrder();\n  }\n","date":"2016-01-22 04:10:51","endLine":456,"groupId":"5318","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testPatternSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/1f/37a89ba18ecb5c846596f4596566774fc287e2.src","preCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.WHITESPACE))\n        .split(jacksons);\n    assertThat(family)\n        .containsExactly(\"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\")\n        .inOrder();\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":447,"status":"M"}],"commitId":"4760f6ca0d68b3a374bf8754967c0cb50b54977d","commitMessage":"@@@This change replaces usages of static final fields on CharMatcher.  e.g. CharMatcher.WHITESPACE.  with the equivalent static factory method.  e.g. CharMatcher.whitespace().\n\nThe change is being made so that we can remove the static final fields.  primarily because they must be eagerly initialized.  causing many implementation classes (which may be unnecessary) to be loaded. This is a significant performance problem on Android. Using methods allows implementation classes to only be loaded when actually needed.  as well as matching our long-standing preference for factory methods over public fields.\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=112708491\n","date":"2016-01-22 04:10:51","modifiedFileCount":"5","status":"M","submitter":"cgdecker"},{"authorTime":"2016-01-22 03:54:37","codes":[{"authorDate":"2017-09-21 23:12:29","commitOrder":9,"curCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(\",\")\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n        .split(jacksons);\n    assertThat(family)\n        .containsExactly(\"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\")\n        .inOrder();\n  }\n","date":"2017-09-21 23:20:56","endLine":297,"groupId":"101086","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/12/2e69382cda869794456f4eeecd2142d6d0c2e8.src","preCode":"  public void testStringSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(',')\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n        .split(jacksons);\n    assertThat(family)\n        .containsExactly(\"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\")\n        .inOrder();\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"},{"authorDate":"2016-01-22 03:54:37","commitOrder":9,"curCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n        .split(jacksons);\n    assertThat(family)\n        .containsExactly(\"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\")\n        .inOrder();\n  }\n","date":"2016-01-22 04:10:51","endLine":456,"groupId":"101086","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testPatternSplitWithTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/1f/37a89ba18ecb5c846596f4596566774fc287e2.src","preCode":"  public void testPatternSplitWithTrim() {\n    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n        + \"ofar(Jemaine), aff(Tito)\";\n    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n        .split(jacksons);\n    assertThat(family)\n        .containsExactly(\"(Marlon)\", \"(Michael)\", \"(Jackie)\", \"(Jemaine)\", \"(Tito)\")\n        .inOrder();\n  }\n","realPath":"guava-tests/test/com/google/common/base/SplitterTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":447,"status":"N"}],"commitId":"ac573800bccecbb72f509d9024acccf48ccb6f4f","commitMessage":"@@@Revert parts of CL 33393713 that changed Splitter.on(\". \") tests to redundant Splitter.on('. ') tests.\nUse COMMA_SPLITTER in more remaining Splitter.on('. ') tests.\n\nFixes https://github.com/google/guava/pull/2946\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=169545037\n","date":"2017-09-21 23:20:56","modifiedFileCount":"3","status":"M","submitter":"lesiak"}]
