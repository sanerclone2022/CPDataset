[{"authorTime":"2017-01-21 05:50:31","codes":[{"authorDate":"2017-04-21 05:33:38","commitOrder":7,"curCode":"  private static MutableNetwork<Integer, String> buildDirectedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N1, E11_A);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N2, N1, E21);\n\n    return directedGraph;\n  }\n","date":"2017-04-21 10:27:51","endLine":641,"groupId":"6772","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildDirectedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/2f/77b63db7d1e8a0d9ab3c407cbbaa5f35c02657.src","preCode":"  private static MutableNetwork<Integer, String> buildDirectedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N1, E11_A);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N2, N1, E21);\n\n    return directedGraph;\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"B"},{"authorDate":"2017-01-21 05:50:31","commitOrder":7,"curCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    assertThat(transpose.edgeConnecting(N1, N2)).isAbsent();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    assertThat(transpose.edgeConnecting(N1, N2)).hasValue(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","date":"2017-01-24 00:11:44","endLine":318,"groupId":"8835","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"transpose_directedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/2f/77b63db7d1e8a0d9ab3c407cbbaa5f35c02657.src","preCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    assertThat(transpose.edgeConnecting(N1, N2)).isAbsent();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    assertThat(transpose.edgeConnecting(N1, N2)).hasValue(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"NB"}],"commitId":"9b94fb3965c6869b0ac47420958a4bbae0b2d54c","commitMessage":"@@@Begin exporting sources of Guava for Android.\n\npom.xml files to come.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=153757913\n","date":"2017-04-21 10:27:51","modifiedFileCount":"0","status":"M","submitter":"zhenghua"},{"authorTime":"2017-05-23 00:56:43","codes":[{"authorDate":"2017-04-21 05:33:38","commitOrder":8,"curCode":"  private static MutableNetwork<Integer, String> buildDirectedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N1, E11_A);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N2, N1, E21);\n\n    return directedGraph;\n  }\n","date":"2017-04-21 10:27:51","endLine":641,"groupId":"6772","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"buildDirectedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/2f/77b63db7d1e8a0d9ab3c407cbbaa5f35c02657.src","preCode":"  private static MutableNetwork<Integer, String> buildDirectedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N1, E11_A);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N2, N1, E21);\n\n    return directedGraph;\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"N"},{"authorDate":"2017-05-23 00:56:43","commitOrder":8,"curCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","date":"2017-05-23 01:39:27","endLine":316,"groupId":"8835","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"transpose_directedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/22/b765b41ab5679ddf1701e941496b96cc4c4e7b.src","preCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    assertThat(transpose.edgeConnecting(N1, N2)).isAbsent();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    assertThat(transpose.edgeConnecting(N1, N2)).hasValue(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"}],"commitId":"bc996973fe6ce1ecb67803aa1ff5bdf5df59d182","commitMessage":"@@@common.graph classes: mark types and methods as @GoogleInternal that are not yet ready for release in Guava 22.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=156749408\n","date":"2017-05-23 01:39:27","modifiedFileCount":"24","status":"M","submitter":"jrtom"},{"authorTime":"2017-06-22 05:57:06","codes":[{"authorDate":"2017-04-21 05:33:38","commitOrder":9,"curCode":"  private static MutableNetwork<Integer, String> buildDirectedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N1, E11_A);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N2, N1, E21);\n\n    return directedGraph;\n  }\n","date":"2017-04-21 10:27:51","endLine":641,"groupId":"6772","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"buildDirectedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/2f/77b63db7d1e8a0d9ab3c407cbbaa5f35c02657.src","preCode":"  private static MutableNetwork<Integer, String> buildDirectedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N1, E11_A);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N2, N1, E21);\n\n    return directedGraph;\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"N"},{"authorDate":"2017-06-22 05:57:06","commitOrder":9,"curCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    assertThat(transpose.edgeConnecting(N1, N2).isPresent()).isFalse();\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isNull();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    assertThat(transpose.edgeConnecting(N1, N2).get()).isEqualTo(E21);\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isEqualTo(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","date":"2017-06-23 00:09:26","endLine":320,"groupId":"8835","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"transpose_directedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/43/95c4a3e921e72a8c29fafb3ab17c727ba9036e.src","preCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"}],"commitId":"240a807d3d1cbcad99481ede9530af0cdfadf47c","commitMessage":"@@@Network.java: fork edgeConnecting() for java7/Android:\n* current/.../Network.java now provides\n  java.util.Optional<E> edgeConnecting(N.  N)\n  E edgeConnectingOrNull(N.  N)\n* java7/.../Network.java now provides\n  E edgeConnectingOrNull(N.  N)\n\nNeither current/ nor java7/ use common.base.Optional in external APIs any more.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=159748595\n","date":"2017-06-23 00:09:26","modifiedFileCount":"10","status":"M","submitter":"jrtom"},{"authorTime":"2017-07-14 04:35:55","codes":[{"authorDate":"2017-04-21 05:33:38","commitOrder":10,"curCode":"  private static MutableNetwork<Integer, String> buildDirectedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N1, E11_A);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N2, N1, E21);\n\n    return directedGraph;\n  }\n","date":"2017-04-21 10:27:51","endLine":641,"groupId":"6772","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"buildDirectedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/2f/77b63db7d1e8a0d9ab3c407cbbaa5f35c02657.src","preCode":"  private static MutableNetwork<Integer, String> buildDirectedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N1, E11_A);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N2, N1, E21);\n\n    return directedGraph;\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"N"},{"authorDate":"2017-07-14 04:35:55","commitOrder":10,"curCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    assertThat(transpose.edgeConnecting(N1, N2).isPresent()).isFalse();\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isNull();\n\n    for (Integer node : directedGraph.nodes()) {\n      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));\n      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));\n    }\n\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    assertThat(transpose.edgeConnecting(N1, N2).get()).isEqualTo(E21);\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isEqualTo(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","date":"2017-07-14 06:31:44","endLine":336,"groupId":"8835","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"transpose_directedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/41/78d088922bfec1663790ca0d2092cbd2ae9231.src","preCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    assertThat(transpose.edgeConnecting(N1, N2).isPresent()).isFalse();\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isNull();\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    assertThat(transpose.edgeConnecting(N1, N2).get()).isEqualTo(E21);\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isEqualTo(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"}],"commitId":"4a6ce819542d5fe440bd5d13956bb4e46084325c","commitMessage":"@@@common.graph: create (package-protected) ForwardingValueGraph and ForwardingNetwork classes.  and use those (and ForwardingGraph) to simplify the implementation of the Transposed* inner classes in Graphs.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=161856111\n","date":"2017-07-14 06:31:44","modifiedFileCount":"6","status":"M","submitter":"jrtom"},{"authorTime":"2019-05-01 23:30:59","codes":[{"authorDate":"2017-04-21 05:33:38","commitOrder":11,"curCode":"  private static MutableNetwork<Integer, String> buildDirectedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N1, E11_A);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N2, N1, E21);\n\n    return directedGraph;\n  }\n","date":"2017-04-21 10:27:51","endLine":641,"groupId":"10625","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"buildDirectedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/2f/77b63db7d1e8a0d9ab3c407cbbaa5f35c02657.src","preCode":"  private static MutableNetwork<Integer, String> buildDirectedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N1, E11_A);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N2, N1, E21);\n\n    return directedGraph;\n  }\n","realPath":"android/guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"N"},{"authorDate":"2019-05-01 23:30:59","commitOrder":11,"curCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameInstanceAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    assertThat(transpose.edgeConnecting(N1, N2).isPresent()).isFalse();\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isNull();\n\n    for (Integer node : directedGraph.nodes()) {\n      assertThat(directedGraph.inDegree(node)).isSameInstanceAs(transpose.outDegree(node));\n      assertThat(directedGraph.outDegree(node)).isSameInstanceAs(transpose.inDegree(node));\n    }\n\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    assertThat(transpose.edgeConnecting(N1, N2).get()).isEqualTo(E21);\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isEqualTo(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","date":"2019-05-06 02:02:35","endLine":336,"groupId":"10625","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"transpose_directedNetwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/b2/2567620eddea3eb8053d1e9e7a9146726fe9e7.src","preCode":"  public void transpose_directedNetwork() {\n    MutableNetwork<Integer, String> directedGraph =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    directedGraph.addEdge(N1, N3, E13);\n    directedGraph.addEdge(N3, N1, E31);\n    directedGraph.addEdge(N1, N2, E12);\n    directedGraph.addEdge(N1, N2, E12_A);\n    directedGraph.addEdge(N1, N1, E11);\n    directedGraph.addEdge(N3, N4, E34);\n\n    MutableNetwork<Integer, String> expectedTranspose =\n        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();\n    expectedTranspose.addEdge(N3, N1, E13);\n    expectedTranspose.addEdge(N1, N3, E31);\n    expectedTranspose.addEdge(N2, N1, E12);\n    expectedTranspose.addEdge(N2, N1, E12_A);\n    expectedTranspose.addEdge(N1, N1, E11);\n    expectedTranspose.addEdge(N4, N3, E34);\n\n    Network<Integer, String> transpose = transpose(directedGraph);\n    assertThat(transpose).isEqualTo(expectedTranspose);\n    assertThat(transpose(transpose)).isSameAs(directedGraph);\n    AbstractNetworkTest.validateNetwork(transpose);\n\n    assertThat(transpose.edgesConnecting(N1, N2)).isEmpty();\n    assertThat(transpose.edgeConnecting(N1, N2).isPresent()).isFalse();\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isNull();\n\n    for (Integer node : directedGraph.nodes()) {\n      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));\n      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));\n    }\n\n    directedGraph.addEdge(N2, N1, E21);\n    \r\n    assertThat(transpose.edgesConnecting(N1, N2)).containsExactly(E21);\n    assertThat(transpose.edgeConnecting(N1, N2).get()).isEqualTo(E21);\n    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isEqualTo(E21);\n    AbstractNetworkTest.validateNetwork(transpose);\n  }\n","realPath":"guava-tests/test/com/google/common/graph/GraphsTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"}],"commitId":"c8542f65ca36545089b7a9fa8aebaad8a7da8762","commitMessage":"@@@Migrate from is(Not)SameAs to is(Not)SameInstanceAs.\n\nThey behave identically.  and the old names are being removed.\n\nOpen-source note: The new methods are available in Truth as of version 0.44.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=246135538\n","date":"2019-05-06 02:02:35","modifiedFileCount":"40","status":"M","submitter":"cpovirk"}]
