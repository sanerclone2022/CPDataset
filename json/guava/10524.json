[{"authorTime":"2016-08-13 15:31:27","codes":[{"authorDate":"2016-08-13 15:31:27","commitOrder":1,"curCode":"  public void removeEdge_directed() {\n    graph = ValueGraphBuilder.directed().build();\n    graph.putEdgeValue(1, 2, \"valueA\");\n    graph.putEdgeValue(2, 1, \"valueB\");\n    graph.putEdgeValue(2, 3, \"valueC\");\n\n    assertThat(graph.removeEdge(1, 2)).isEqualTo(\"valueA\");\n    assertThat(graph.removeEdge(1, 2)).isNull();\n    assertThat(graph.removeEdge(2, 1)).isEqualTo(\"valueB\");\n    assertThat(graph.removeEdge(2, 1)).isNull();\n    assertThat(graph.removeEdge(2, 3)).isEqualTo(\"valueC\");\n    assertThat(graph.removeEdge(2, 3)).isNull();\n    assertThat(graph).isEqualTo(ImmutableValueGraph.copyOf(graph));\n  }\n","date":"2016-08-16 00:43:47","endLine":106,"groupId":"4405","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"removeEdge_directed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/71/2eb7bf2d0b0e91e98c291b746411435939e3dd.src","preCode":"  public void removeEdge_directed() {\n    graph = ValueGraphBuilder.directed().build();\n    graph.putEdgeValue(1, 2, \"valueA\");\n    graph.putEdgeValue(2, 1, \"valueB\");\n    graph.putEdgeValue(2, 3, \"valueC\");\n\n    assertThat(graph.removeEdge(1, 2)).isEqualTo(\"valueA\");\n    assertThat(graph.removeEdge(1, 2)).isNull();\n    assertThat(graph.removeEdge(2, 1)).isEqualTo(\"valueB\");\n    assertThat(graph.removeEdge(2, 1)).isNull();\n    assertThat(graph.removeEdge(2, 3)).isEqualTo(\"valueC\");\n    assertThat(graph.removeEdge(2, 3)).isNull();\n    assertThat(graph).isEqualTo(ImmutableValueGraph.copyOf(graph));\n  }\n","realPath":"guava-tests/test/com/google/common/graph/ValueGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"},{"authorDate":"2016-08-13 15:31:27","commitOrder":1,"curCode":"  public void removeEdge_undirected() {\n    graph = ValueGraphBuilder.undirected().build();\n    graph.putEdgeValue(1, 2, \"valueA\");\n    graph.putEdgeValue(2, 1, \"valueB\");\n    graph.putEdgeValue(2, 3, \"valueC\");\n\n    assertThat(graph.removeEdge(1, 2)).isEqualTo(\"valueB\");\n    assertThat(graph.removeEdge(1, 2)).isNull();\n    assertThat(graph.removeEdge(2, 1)).isNull();\n    assertThat(graph.removeEdge(2, 3)).isEqualTo(\"valueC\");\n    assertThat(graph.removeEdge(2, 3)).isNull();\n    assertThat(graph).isEqualTo(ImmutableValueGraph.copyOf(graph));\n  }\n","date":"2016-08-16 00:43:47","endLine":121,"groupId":"4405","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"removeEdge_undirected","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/71/2eb7bf2d0b0e91e98c291b746411435939e3dd.src","preCode":"  public void removeEdge_undirected() {\n    graph = ValueGraphBuilder.undirected().build();\n    graph.putEdgeValue(1, 2, \"valueA\");\n    graph.putEdgeValue(2, 1, \"valueB\");\n    graph.putEdgeValue(2, 3, \"valueC\");\n\n    assertThat(graph.removeEdge(1, 2)).isEqualTo(\"valueB\");\n    assertThat(graph.removeEdge(1, 2)).isNull();\n    assertThat(graph.removeEdge(2, 1)).isNull();\n    assertThat(graph.removeEdge(2, 3)).isEqualTo(\"valueC\");\n    assertThat(graph.removeEdge(2, 3)).isNull();\n    assertThat(graph).isEqualTo(ImmutableValueGraph.copyOf(graph));\n  }\n","realPath":"guava-tests/test/com/google/common/graph/ValueGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"}],"commitId":"57ec8ce480d75c69f90f72e4faaf13dda25a7f67","commitMessage":"@@@ValueGraph implementation.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=130174881\n","date":"2016-08-16 00:43:47","modifiedFileCount":"12","status":"B","submitter":"jasexton"},{"authorTime":"2016-08-16 06:07:41","codes":[{"authorDate":"2016-08-16 06:07:41","commitOrder":2,"curCode":"  public void removeEdge_directed() {\n    graph = ValueGraphBuilder.directed().build();\n    graph.putEdgeValue(1, 2, \"valueA\");\n    graph.putEdgeValue(2, 1, \"valueB\");\n    graph.putEdgeValue(2, 3, \"valueC\");\n\n    assertThat(graph.removeEdge(1, 2)).isEqualTo(\"valueA\");\n    assertThat(graph.removeEdge(1, 2)).isNull();\n    assertThat(graph.removeEdge(2, 1)).isEqualTo(\"valueB\");\n    assertThat(graph.removeEdge(2, 1)).isNull();\n    assertThat(graph.removeEdge(2, 3)).isEqualTo(\"valueC\");\n    assertThat(graph.removeEdge(2, 3)).isNull();\n  }\n","date":"2016-08-16 06:16:52","endLine":123,"groupId":"10524","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"removeEdge_directed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/e6/35ee34bb1e50c3c65ae9d7c412d57b8338d832.src","preCode":"  public void removeEdge_directed() {\n    graph = ValueGraphBuilder.directed().build();\n    graph.putEdgeValue(1, 2, \"valueA\");\n    graph.putEdgeValue(2, 1, \"valueB\");\n    graph.putEdgeValue(2, 3, \"valueC\");\n\n    assertThat(graph.removeEdge(1, 2)).isEqualTo(\"valueA\");\n    assertThat(graph.removeEdge(1, 2)).isNull();\n    assertThat(graph.removeEdge(2, 1)).isEqualTo(\"valueB\");\n    assertThat(graph.removeEdge(2, 1)).isNull();\n    assertThat(graph.removeEdge(2, 3)).isEqualTo(\"valueC\");\n    assertThat(graph.removeEdge(2, 3)).isNull();\n    assertThat(graph).isEqualTo(ImmutableValueGraph.copyOf(graph));\n  }\n","realPath":"guava-tests/test/com/google/common/graph/ValueGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2016-08-16 06:07:41","commitOrder":2,"curCode":"  public void removeEdge_undirected() {\n    graph = ValueGraphBuilder.undirected().build();\n    graph.putEdgeValue(1, 2, \"valueA\");\n    graph.putEdgeValue(2, 1, \"valueB\");\n    graph.putEdgeValue(2, 3, \"valueC\");\n\n    assertThat(graph.removeEdge(1, 2)).isEqualTo(\"valueB\");\n    assertThat(graph.removeEdge(1, 2)).isNull();\n    assertThat(graph.removeEdge(2, 1)).isNull();\n    assertThat(graph.removeEdge(2, 3)).isEqualTo(\"valueC\");\n    assertThat(graph.removeEdge(2, 3)).isNull();\n  }\n","date":"2016-08-16 06:16:52","endLine":137,"groupId":"10524","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"removeEdge_undirected","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-guava-10-0.7/blobInfo/CC_OUT/blobs/e6/35ee34bb1e50c3c65ae9d7c412d57b8338d832.src","preCode":"  public void removeEdge_undirected() {\n    graph = ValueGraphBuilder.undirected().build();\n    graph.putEdgeValue(1, 2, \"valueA\");\n    graph.putEdgeValue(2, 1, \"valueB\");\n    graph.putEdgeValue(2, 3, \"valueC\");\n\n    assertThat(graph.removeEdge(1, 2)).isEqualTo(\"valueB\");\n    assertThat(graph.removeEdge(1, 2)).isNull();\n    assertThat(graph.removeEdge(2, 1)).isNull();\n    assertThat(graph.removeEdge(2, 3)).isEqualTo(\"valueC\");\n    assertThat(graph.removeEdge(2, 3)).isNull();\n    assertThat(graph).isEqualTo(ImmutableValueGraph.copyOf(graph));\n  }\n","realPath":"guava-tests/test/com/google/common/graph/ValueGraphTest.java","repoName":"guava","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"6e62ae569837d8d2fc9d51c3ac6eddf0468f9143","commitMessage":"@@@Define equality for Graphs so that a Graph never equals a ValueGraph. This allows ValueGraphs to have the expected behavior when you query valueGraphA.equals(valueGraphB) (i.e. values are taken into account as well).\n\nSince ValueGraph now defines its own equals/hashcode.  add AbstractValueGraph to facilitate clients getting this behavior.\n\nAdd ValueGraph versions of copyOf() and inducedSubgraph().\n\nAdd a package-private ForwardingGraph class for the non-value graph classes (ConfigurableMutableGraph.  ImmutableGraph) to use.\n\nRename AbstractConfigurable* classes to Configurable* (and make non-abstract).\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=130329432\n","date":"2016-08-16 06:16:52","modifiedFileCount":"15","status":"M","submitter":"jasexton"}]
