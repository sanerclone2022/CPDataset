[{"authorTime":"2011-11-25 13:53:27","codes":[{"authorDate":"2011-11-25 13:53:27","commitOrder":1,"curCode":"  public void shouldInsertNewAuthor() throws Exception {\n    DataSource ds = createBlogDataSource();\n    Connection connection = ds.getConnection();\n    Executor executor = createExecutor(new JdbcTransaction(connection));\n    try {\n      Author author = new Author(99, \"someone\", \"******\", \"someone@apache.org\", null, Section.NEWS);\n      MappedStatement insertStatement = ExecutorTestHelper.prepareInsertAuthorMappedStatement(config);\n      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);\n      int rows = executor.update(insertStatement, author);\n      List<Author> authors = executor.query(selectStatement, 99, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);\n      executor.flushStatements();\n      executor.rollback(true);\n      assertEquals(1, authors.size());\n      assertEquals(author.toString(), authors.get(0).toString());\n      assertTrue(1 == rows || BatchExecutor.BATCH_UPDATE_RETURN_VALUE == rows);\n    } finally {\n      executor.rollback(true);\n      executor.close(false);\n    }\n  }\n","date":"2011-11-25 13:53:27","endLine":83,"groupId":"278","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldInsertNewAuthor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/63/63e2e00399b44f5e2e2432dbd786aba6e9ddc3.src","preCode":"  public void shouldInsertNewAuthor() throws Exception {\n    DataSource ds = createBlogDataSource();\n    Connection connection = ds.getConnection();\n    Executor executor = createExecutor(new JdbcTransaction(connection));\n    try {\n      Author author = new Author(99, \"someone\", \"******\", \"someone@apache.org\", null, Section.NEWS);\n      MappedStatement insertStatement = ExecutorTestHelper.prepareInsertAuthorMappedStatement(config);\n      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);\n      int rows = executor.update(insertStatement, author);\n      List<Author> authors = executor.query(selectStatement, 99, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);\n      executor.flushStatements();\n      executor.rollback(true);\n      assertEquals(1, authors.size());\n      assertEquals(author.toString(), authors.get(0).toString());\n      assertTrue(1 == rows || BatchExecutor.BATCH_UPDATE_RETURN_VALUE == rows);\n    } finally {\n      executor.rollback(true);\n      executor.close(false);\n    }\n  }\n","realPath":"src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"},{"authorDate":"2011-11-25 13:53:27","commitOrder":1,"curCode":"  public void shouldUpdateAuthor() throws Exception {\n    DataSource ds = createBlogDataSource();\n    Connection connection = ds.getConnection();\n    Executor executor = createExecutor(new JdbcTransaction(connection));\n    try {\n      Author author = new Author(101, \"someone\", \"******\", \"someone@apache.org\", null, Section.NEWS);\n      MappedStatement updateStatement = ExecutorTestHelper.prepareUpdateAuthorMappedStatement(config);\n      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);\n      int rows = executor.update(updateStatement, author);\n      List<Author> authors = executor.query(selectStatement, 101, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);\n      executor.flushStatements();\n      executor.rollback(true);\n      assertEquals(1, authors.size());\n      assertEquals(author.toString(), authors.get(0).toString());\n      assertTrue(1 == rows || BatchExecutor.BATCH_UPDATE_RETURN_VALUE == rows);\n    } finally {\n      executor.rollback(true);\n      executor.close(false);\n    }\n  }\n","date":"2011-11-25 13:53:27","endLine":199,"groupId":"278","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUpdateAuthor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/63/63e2e00399b44f5e2e2432dbd786aba6e9ddc3.src","preCode":"  public void shouldUpdateAuthor() throws Exception {\n    DataSource ds = createBlogDataSource();\n    Connection connection = ds.getConnection();\n    Executor executor = createExecutor(new JdbcTransaction(connection));\n    try {\n      Author author = new Author(101, \"someone\", \"******\", \"someone@apache.org\", null, Section.NEWS);\n      MappedStatement updateStatement = ExecutorTestHelper.prepareUpdateAuthorMappedStatement(config);\n      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);\n      int rows = executor.update(updateStatement, author);\n      List<Author> authors = executor.query(selectStatement, 101, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);\n      executor.flushStatements();\n      executor.rollback(true);\n      assertEquals(1, authors.size());\n      assertEquals(author.toString(), authors.get(0).toString());\n      assertTrue(1 == rows || BatchExecutor.BATCH_UPDATE_RETURN_VALUE == rows);\n    } finally {\n      executor.rollback(true);\n      executor.close(false);\n    }\n  }\n","realPath":"src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"B"}],"commitId":"29ce8784eb0b9537bd0cfa476cd1826c8e9b910a","commitMessage":"@@@http://code.google.com/p/mybatis/issues/detail?id=382  (feature). Moves connection retrieval to Transaction. Transaction delays connection retrieval till getConnection() is called.\nUpdated also Spring so MyBatis lazy loads get connections from Spring TX Manager\n\n","date":"2011-11-25 13:53:27","modifiedFileCount":"20","status":"B","submitter":"Eduardo Macarron"},{"authorTime":"2014-03-03 01:03:15","codes":[{"authorDate":"2014-03-03 01:03:15","commitOrder":2,"curCode":"  public void shouldInsertNewAuthor() throws Exception {\n    \n    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));\n    try {\n      Author author = new Author(99, \"someone\", \"******\", \"someone@apache.org\", null, Section.NEWS);\n      MappedStatement insertStatement = ExecutorTestHelper.prepareInsertAuthorMappedStatement(config);\n      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);\n      int rows = executor.update(insertStatement, author);\n      List<Author> authors = executor.query(selectStatement, 99, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);\n      executor.flushStatements();\n      executor.rollback(true);\n      assertEquals(1, authors.size());\n      assertEquals(author.toString(), authors.get(0).toString());\n      assertTrue(1 == rows || BatchExecutor.BATCH_UPDATE_RETURN_VALUE == rows);\n    } finally {\n      executor.rollback(true);\n      executor.close(false);\n    }\n  }\n","date":"2014-03-03 01:03:15","endLine":107,"groupId":"278","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldInsertNewAuthor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/db/e98cc172941afb6d87887362a9aa816ff27181.src","preCode":"  public void shouldInsertNewAuthor() throws Exception {\n    DataSource ds = createBlogDataSource();\n    Connection connection = ds.getConnection();\n    Executor executor = createExecutor(new JdbcTransaction(connection));\n    try {\n      Author author = new Author(99, \"someone\", \"******\", \"someone@apache.org\", null, Section.NEWS);\n      MappedStatement insertStatement = ExecutorTestHelper.prepareInsertAuthorMappedStatement(config);\n      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);\n      int rows = executor.update(insertStatement, author);\n      List<Author> authors = executor.query(selectStatement, 99, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);\n      executor.flushStatements();\n      executor.rollback(true);\n      assertEquals(1, authors.size());\n      assertEquals(author.toString(), authors.get(0).toString());\n      assertTrue(1 == rows || BatchExecutor.BATCH_UPDATE_RETURN_VALUE == rows);\n    } finally {\n      executor.rollback(true);\n      executor.close(false);\n    }\n  }\n","realPath":"src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2014-03-03 01:03:15","commitOrder":2,"curCode":"  public void shouldUpdateAuthor() throws Exception {\n    \n    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));\n    try {\n      Author author = new Author(101, \"someone\", \"******\", \"someone@apache.org\", null, Section.NEWS);\n      MappedStatement updateStatement = ExecutorTestHelper.prepareUpdateAuthorMappedStatement(config);\n      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);\n      int rows = executor.update(updateStatement, author);\n      List<Author> authors = executor.query(selectStatement, 101, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);\n      executor.flushStatements();\n      executor.rollback(true);\n      assertEquals(1, authors.size());\n      assertEquals(author.toString(), authors.get(0).toString());\n      assertTrue(1 == rows || BatchExecutor.BATCH_UPDATE_RETURN_VALUE == rows);\n    } finally {\n      executor.rollback(true);\n      executor.close(false);\n    }\n  }\n","date":"2014-03-03 01:03:15","endLine":218,"groupId":"278","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUpdateAuthor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/db/e98cc172941afb6d87887362a9aa816ff27181.src","preCode":"  public void shouldUpdateAuthor() throws Exception {\n    DataSource ds = createBlogDataSource();\n    Connection connection = ds.getConnection();\n    Executor executor = createExecutor(new JdbcTransaction(connection));\n    try {\n      Author author = new Author(101, \"someone\", \"******\", \"someone@apache.org\", null, Section.NEWS);\n      MappedStatement updateStatement = ExecutorTestHelper.prepareUpdateAuthorMappedStatement(config);\n      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);\n      int rows = executor.update(updateStatement, author);\n      List<Author> authors = executor.query(selectStatement, 101, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);\n      executor.flushStatements();\n      executor.rollback(true);\n      assertEquals(1, authors.size());\n      assertEquals(author.toString(), authors.get(0).toString());\n      assertTrue(1 == rows || BatchExecutor.BATCH_UPDATE_RETURN_VALUE == rows);\n    } finally {\n      executor.rollback(true);\n      executor.close(false);\n    }\n  }\n","realPath":"src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"4db88a95e8d673f6f500a2c8936245cf084a2c3a","commitMessage":"@@@Speeding up tests","date":"2014-03-03 01:03:15","modifiedFileCount":"1","status":"M","submitter":"Eduardo Macarron"},{"authorTime":"2019-01-23 20:49:49","codes":[{"authorDate":"2019-01-23 20:49:49","commitOrder":3,"curCode":"  void shouldInsertNewAuthor() throws Exception {\n\n    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));\n    try {\n      Author author = new Author(99, \"someone\", \"******\", \"someone@apache.org\", null, Section.NEWS);\n      MappedStatement insertStatement = ExecutorTestHelper.prepareInsertAuthorMappedStatement(config);\n      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);\n      int rows = executor.update(insertStatement, author);\n      List<Author> authors = executor.query(selectStatement, 99, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);\n      executor.flushStatements();\n      executor.rollback(true);\n      assertEquals(1, authors.size());\n      assertEquals(author.toString(), authors.get(0).toString());\n      assertTrue(1 == rows || BatchExecutor.BATCH_UPDATE_RETURN_VALUE == rows);\n    } finally {\n      executor.rollback(true);\n      executor.close(false);\n    }\n  }\n","date":"2019-01-23 20:49:49","endLine":109,"groupId":"10741","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldInsertNewAuthor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/0a/d4226963d47c942c402ee08a0e8b871a60697d.src","preCode":"  public void shouldInsertNewAuthor() throws Exception {\n\n    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));\n    try {\n      Author author = new Author(99, \"someone\", \"******\", \"someone@apache.org\", null, Section.NEWS);\n      MappedStatement insertStatement = ExecutorTestHelper.prepareInsertAuthorMappedStatement(config);\n      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);\n      int rows = executor.update(insertStatement, author);\n      List<Author> authors = executor.query(selectStatement, 99, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);\n      executor.flushStatements();\n      executor.rollback(true);\n      assertEquals(1, authors.size());\n      assertEquals(author.toString(), authors.get(0).toString());\n      assertTrue(1 == rows || BatchExecutor.BATCH_UPDATE_RETURN_VALUE == rows);\n    } finally {\n      executor.rollback(true);\n      executor.close(false);\n    }\n  }\n","realPath":"src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2019-01-23 20:49:49","commitOrder":3,"curCode":"  void shouldUpdateAuthor() throws Exception {\n\n    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));\n    try {\n      Author author = new Author(101, \"someone\", \"******\", \"someone@apache.org\", null, Section.NEWS);\n      MappedStatement updateStatement = ExecutorTestHelper.prepareUpdateAuthorMappedStatement(config);\n      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);\n      int rows = executor.update(updateStatement, author);\n      List<Author> authors = executor.query(selectStatement, 101, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);\n      executor.flushStatements();\n      executor.rollback(true);\n      assertEquals(1, authors.size());\n      assertEquals(author.toString(), authors.get(0).toString());\n      assertTrue(1 == rows || BatchExecutor.BATCH_UPDATE_RETURN_VALUE == rows);\n    } finally {\n      executor.rollback(true);\n      executor.close(false);\n    }\n  }\n","date":"2019-01-23 20:49:49","endLine":220,"groupId":"10741","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUpdateAuthor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/0a/d4226963d47c942c402ee08a0e8b871a60697d.src","preCode":"  public void shouldUpdateAuthor() throws Exception {\n\n    Executor executor = createExecutor(new JdbcTransaction(ds, null, false));\n    try {\n      Author author = new Author(101, \"someone\", \"******\", \"someone@apache.org\", null, Section.NEWS);\n      MappedStatement updateStatement = ExecutorTestHelper.prepareUpdateAuthorMappedStatement(config);\n      MappedStatement selectStatement = ExecutorTestHelper.prepareSelectOneAuthorMappedStatement(config);\n      int rows = executor.update(updateStatement, author);\n      List<Author> authors = executor.query(selectStatement, 101, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);\n      executor.flushStatements();\n      executor.rollback(true);\n      assertEquals(1, authors.size());\n      assertEquals(author.toString(), authors.get(0).toString());\n      assertTrue(1 == rows || BatchExecutor.BATCH_UPDATE_RETURN_VALUE == rows);\n    } finally {\n      executor.rollback(true);\n      executor.close(false);\n    }\n  }\n","realPath":"src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"}],"commitId":"674b9c0e82a181d21ed0240291e79f73f36e2e53","commitMessage":"@@@Merge pull request #1460 from kazuki43zoo/polishing-tests\n\nPolishing tests","date":"2019-01-23 20:49:49","modifiedFileCount":"291","status":"M","submitter":"Kazuki Shimizu"}]
