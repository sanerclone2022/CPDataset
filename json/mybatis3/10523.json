[{"authorTime":"2013-01-25 03:01:12","codes":[{"authorDate":"2013-01-25 03:01:12","commitOrder":4,"curCode":"  public void shouldGetOneCarWithOneEngineAndBrakes() {\n    SqlSession sqlSession = sqlSessionFactory.openSession();\n    try {\n      Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Car> cars = mapper.getCars2();      \n      Assert.assertEquals(1, cars.size());\n      Assert.assertNotNull(cars.get(0).getEngine());\n      Assert.assertNotNull(cars.get(0).getBrakes());      \n    } finally {\n      sqlSession.close();\n    }\n  }\n","date":"2013-01-25 03:01:12","endLine":83,"groupId":"47","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetOneCarWithOneEngineAndBrakes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/ed/9addfee55f8afbc7bbc4a1cf059a1eda396b0c.src","preCode":"  public void shouldGetOneCarWithOneEngineAndBrakes() {\n    SqlSession sqlSession = sqlSessionFactory.openSession();\n    try {\n      Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Car> cars = mapper.getCars2();      \n      Assert.assertEquals(1, cars.size());\n      Assert.assertNotNull(cars.get(0).getEngine());\n      Assert.assertNotNull(cars.get(0).getBrakes());      \n    } finally {\n      sqlSession.close();\n    }\n  }\n","realPath":"src/test/java/org/apache/ibatis/submitted/associationtest/AssociationTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"},{"authorDate":"2013-01-25 03:01:12","commitOrder":4,"curCode":"  public void shouldGetAllCarsNonUnique() {\n    \r\n    \r\n    SqlSession sqlSession = sqlSessionFactory.openSession();\n    try {\n      Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Car> cars = mapper.getCars2();\n      Assert.assertEquals(1, cars.size());\n    } finally {\n      sqlSession.close();\n    }\n  }\n","date":"2013-01-25 03:01:12","endLine":97,"groupId":"47","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetAllCarsNonUnique","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/ed/9addfee55f8afbc7bbc4a1cf059a1eda396b0c.src","preCode":"  public void shouldGetAllCarsNonUnique() {\n    \r\n    \r\n    SqlSession sqlSession = sqlSessionFactory.openSession();\n    try {\n      Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Car> cars = mapper.getCars2();\n      Assert.assertEquals(1, cars.size());\n    } finally {\n      sqlSession.close();\n    }\n  }\n","realPath":"src/test/java/org/apache/ibatis/submitted/associationtest/AssociationTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"MB"}],"commitId":"352f58f21042b62452947ca7fa782d77007e463d","commitMessage":"@@@Wrong fix for http://code.google.com/p/mybatis/issues/detail?id=433  and a test that shows why it does not work\n","date":"2013-01-25 03:01:12","modifiedFileCount":"4","status":"M","submitter":"Eduardo Macarron"},{"authorTime":"2018-05-03 14:04:04","codes":[{"authorDate":"2018-05-03 14:04:04","commitOrder":5,"curCode":"  public void shouldGetOneCarWithOneEngineAndBrakes() {\n    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {\n      Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Car> cars = mapper.getCars2();      \n      Assert.assertEquals(1, cars.size());\n      Assert.assertNotNull(cars.get(0).getEngine());\n      Assert.assertNotNull(cars.get(0).getBrakes());      \n    }\n  }\n","date":"2018-05-03 14:04:04","endLine":78,"groupId":"47","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetOneCarWithOneEngineAndBrakes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/61/2cac54f421cbe01e21297dd4b6dc66c2fa8ebf.src","preCode":"  public void shouldGetOneCarWithOneEngineAndBrakes() {\n    SqlSession sqlSession = sqlSessionFactory.openSession();\n    try {\n      Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Car> cars = mapper.getCars2();      \n      Assert.assertEquals(1, cars.size());\n      Assert.assertNotNull(cars.get(0).getEngine());\n      Assert.assertNotNull(cars.get(0).getBrakes());      \n    } finally {\n      sqlSession.close();\n    }\n  }\n","realPath":"src/test/java/org/apache/ibatis/submitted/associationtest/AssociationTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2018-05-03 14:04:04","commitOrder":5,"curCode":"  public void shouldGetAllCarsNonUnique() {\n    \r\n    \r\n    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {\n      Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Car> cars = mapper.getCars2();\n      Assert.assertEquals(1, cars.size());\n    }\n  }\n","date":"2018-05-03 14:04:04","endLine":89,"groupId":"47","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetAllCarsNonUnique","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/61/2cac54f421cbe01e21297dd4b6dc66c2fa8ebf.src","preCode":"  public void shouldGetAllCarsNonUnique() {\n    \r\n    \r\n    SqlSession sqlSession = sqlSessionFactory.openSession();\n    try {\n      Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Car> cars = mapper.getCars2();\n      Assert.assertEquals(1, cars.size());\n    } finally {\n      sqlSession.close();\n    }\n  }\n","realPath":"src/test/java/org/apache/ibatis/submitted/associationtest/AssociationTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"999a4424588dd4dcaeea9834fcd5d93231f098bc","commitMessage":"@@@Merge pull request #1268 from kazuki43zoo/use-auto-close-sqlsession-on-test\n\nReplace to auto-close instead of explicit close on test that using SqlSession","date":"2018-05-03 14:04:04","modifiedFileCount":"122","status":"M","submitter":"Kazuki Shimizu"},{"authorTime":"2019-01-07 09:04:39","codes":[{"authorDate":"2019-01-07 09:04:39","commitOrder":6,"curCode":"  public void shouldGetOneCarWithOneEngineAndBrakes() {\n    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {\n      Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Car> cars = mapper.getCars2();      \n      Assertions.assertEquals(1, cars.size());\n      Assertions.assertNotNull(cars.get(0).getEngine());\n      Assertions.assertNotNull(cars.get(0).getBrakes());      \n    }\n  }\n","date":"2019-01-07 09:04:39","endLine":70,"groupId":"47","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetOneCarWithOneEngineAndBrakes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/40/693fcb44673cf3add8cf4fcdf63599fe46bb21.src","preCode":"  public void shouldGetOneCarWithOneEngineAndBrakes() {\n    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {\n      Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Car> cars = mapper.getCars2();      \n      Assert.assertEquals(1, cars.size());\n      Assert.assertNotNull(cars.get(0).getEngine());\n      Assert.assertNotNull(cars.get(0).getBrakes());      \n    }\n  }\n","realPath":"src/test/java/org/apache/ibatis/submitted/associationtest/AssociationTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2019-01-07 09:04:39","commitOrder":6,"curCode":"  public void shouldGetAllCarsNonUnique() {\n    \r\n    \r\n    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {\n      Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Car> cars = mapper.getCars2();\n      Assertions.assertEquals(1, cars.size());\n    }\n  }\n","date":"2019-01-07 09:04:39","endLine":81,"groupId":"47","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetAllCarsNonUnique","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/40/693fcb44673cf3add8cf4fcdf63599fe46bb21.src","preCode":"  public void shouldGetAllCarsNonUnique() {\n    \r\n    \r\n    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {\n      Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Car> cars = mapper.getCars2();\n      Assert.assertEquals(1, cars.size());\n    }\n  }\n","realPath":"src/test/java/org/apache/ibatis/submitted/associationtest/AssociationTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"aad2e5b4507eb42263122ccc202a34ddd082eac5","commitMessage":"@@@Merge pull request #1428 from hazendaz/tests\n\n[tests] Upgrade test harness to junit 5 - Fixes #1425","date":"2019-01-07 09:04:39","modifiedFileCount":"293","status":"M","submitter":"Jeremy Landis"},{"authorTime":"2019-01-23 20:49:49","codes":[{"authorDate":"2019-01-23 20:49:49","commitOrder":7,"curCode":"  void shouldGetOneCarWithOneEngineAndBrakes() {\n    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {\n      Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Car> cars = mapper.getCars2();\n      Assertions.assertEquals(1, cars.size());\n      Assertions.assertNotNull(cars.get(0).getEngine());\n      Assertions.assertNotNull(cars.get(0).getBrakes());\n    }\n  }\n","date":"2019-01-23 20:49:49","endLine":70,"groupId":"10523","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetOneCarWithOneEngineAndBrakes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/b9/75319cef254502a60399ead4b6c0c1378d1db3.src","preCode":"  public void shouldGetOneCarWithOneEngineAndBrakes() {\n    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {\n      Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Car> cars = mapper.getCars2();\n      Assertions.assertEquals(1, cars.size());\n      Assertions.assertNotNull(cars.get(0).getEngine());\n      Assertions.assertNotNull(cars.get(0).getBrakes());\n    }\n  }\n","realPath":"src/test/java/org/apache/ibatis/submitted/associationtest/AssociationTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2019-01-23 20:49:49","commitOrder":7,"curCode":"  void shouldGetAllCarsNonUnique() {\n    \r\n    \r\n    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {\n      Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Car> cars = mapper.getCars2();\n      Assertions.assertEquals(1, cars.size());\n    }\n  }\n","date":"2019-01-23 20:49:49","endLine":81,"groupId":"10523","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetAllCarsNonUnique","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/b9/75319cef254502a60399ead4b6c0c1378d1db3.src","preCode":"  public void shouldGetAllCarsNonUnique() {\n    \r\n    \r\n    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {\n      Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Car> cars = mapper.getCars2();\n      Assertions.assertEquals(1, cars.size());\n    }\n  }\n","realPath":"src/test/java/org/apache/ibatis/submitted/associationtest/AssociationTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"674b9c0e82a181d21ed0240291e79f73f36e2e53","commitMessage":"@@@Merge pull request #1460 from kazuki43zoo/polishing-tests\n\nPolishing tests","date":"2019-01-23 20:49:49","modifiedFileCount":"291","status":"M","submitter":"Kazuki Shimizu"}]
