[{"authorTime":"2012-06-06 05:17:13","codes":[{"authorDate":"2012-06-10 15:05:50","commitOrder":9,"curCode":"    private ParameterMapping buildParameterMapping(String content) {\n      Map<String, String> propertiesMap = parseParameterMapping(content);\n      String property = propertiesMap.get(\"property\");\n      String jdbcType = propertiesMap.get(\"jdbcType\");\n      Class<?> propertyType;\n      if (typeHandlerRegistry.hasTypeHandler(parameterType)) {\n        propertyType = parameterType;\n      } else if (JdbcType.CURSOR.name().equals(jdbcType)) {\n        propertyType = java.sql.ResultSet.class;\n      } else if (property != null) {\n        MetaClass metaClass = MetaClass.forClass(parameterType);\n        if (metaClass.hasGetter(property)) {\n          propertyType = metaClass.getGetterType(property);\n        } else {\n          propertyType = Object.class;\n        }\n      } else {\n        propertyType = Object.class;\n      }\n      ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);\n      if (jdbcType != null) {\n        builder.jdbcType(resolveJdbcType(jdbcType));\n      }\n      Class<?> javaType = null;\n      String typeHandlerAlias = null;\n      for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {\n        String name = entry.getKey();\n        String value = entry.getValue();\n        if (\"javaType\".equals(name)) {\n          javaType = resolveClass(value);\n          builder.javaType(javaType);\n        } else if (\"jdbcType\".equals(name)) {\n          builder.jdbcType(resolveJdbcType(value));\n        } else if (\"mode\".equals(name)) {\n          builder.mode(resolveParameterMode(value));\n        } else if (\"numericScale\".equals(name)) {\n          builder.numericScale(Integer.valueOf(value));\n        } else if (\"resultMap\".equals(name)) {\n          builder.resultMapId(value);\n        } else if (\"typeHandler\".equals(name)) {\n          typeHandlerAlias = value;\n        } else if (\"jdbcTypeName\".equals(name)) {\n          builder.jdbcTypeName(value);\n        } else if (\"property\".equals(name)) {\n          \r\n        } else if (\"expression\".equals(name)) {\n          builder.expression(value);\n        } else {\n          throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping @{\" + content + \"}.  Valid properties are \" + parameterProperties);\n        }\n      }\n      if (typeHandlerAlias != null) {\n        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));\n      }\n      return builder.build();\n    }\n","date":"2012-06-10 15:05:50","endLine":126,"groupId":"896","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildParameterMapping","params":"(Stringcontent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/e9/507908d42a9fa6a40a869abd37b116767ffb20.src","preCode":"    private ParameterMapping buildParameterMapping(String content) {\n      Map<String, String> propertiesMap = parseParameterMapping(content);\n      String property = propertiesMap.get(\"property\");\n      String jdbcType = propertiesMap.get(\"jdbcType\");\n      Class<?> propertyType;\n      if (typeHandlerRegistry.hasTypeHandler(parameterType)) {\n        propertyType = parameterType;\n      } else if (JdbcType.CURSOR.name().equals(jdbcType)) {\n        propertyType = java.sql.ResultSet.class;\n      } else if (property != null) {\n        MetaClass metaClass = MetaClass.forClass(parameterType);\n        if (metaClass.hasGetter(property)) {\n          propertyType = metaClass.getGetterType(property);\n        } else {\n          propertyType = Object.class;\n        }\n      } else {\n        propertyType = Object.class;\n      }\n      ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);\n      if (jdbcType != null) {\n        builder.jdbcType(resolveJdbcType(jdbcType));\n      }\n      Class<?> javaType = null;\n      String typeHandlerAlias = null;\n      for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {\n        String name = entry.getKey();\n        String value = entry.getValue();\n        if (\"javaType\".equals(name)) {\n          javaType = resolveClass(value);\n          builder.javaType(javaType);\n        } else if (\"jdbcType\".equals(name)) {\n          builder.jdbcType(resolveJdbcType(value));\n        } else if (\"mode\".equals(name)) {\n          builder.mode(resolveParameterMode(value));\n        } else if (\"numericScale\".equals(name)) {\n          builder.numericScale(Integer.valueOf(value));\n        } else if (\"resultMap\".equals(name)) {\n          builder.resultMapId(value);\n        } else if (\"typeHandler\".equals(name)) {\n          typeHandlerAlias = value;\n        } else if (\"jdbcTypeName\".equals(name)) {\n          builder.jdbcTypeName(value);\n        } else if (\"property\".equals(name)) {\n          \r\n        } else if (\"expression\".equals(name)) {\n          builder.expression(value);\n        } else {\n          throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping @{\" + content + \"}.  Valid properties are \" + parameterProperties);\n        }\n      }\n      if (typeHandlerAlias != null) {\n        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));\n      }\n      return builder.build();\n    }\n","realPath":"src/test/java/org/apache/ibatis/submitted/language/VelocitySqlSourceBuilder.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"},{"authorDate":"2012-06-06 05:17:13","commitOrder":9,"curCode":"    private ParameterMapping buildParameterMapping(String content) {\n      Map<String, String> propertiesMap = parseParameterMapping(content);\n      String property = propertiesMap.get(\"property\");\n      Class<?> propertyType;\n      if (metaParameters.hasGetter(property)) { \r\n        propertyType = metaParameters.getGetterType(property);\n      } else if (typeHandlerRegistry.hasTypeHandler(parameterType)) {\n        propertyType = parameterType;\n      } else if (JdbcType.CURSOR.name().equals(propertiesMap.get(\"jdbcType\"))) {\n        propertyType = java.sql.ResultSet.class;\n      } else if (property != null) {\n        MetaClass metaClass = MetaClass.forClass(parameterType);\n        if (metaClass.hasGetter(property)) {\n          propertyType = metaClass.getGetterType(property);\n        } else {\n          propertyType = Object.class;\n        }\n      } else {\n        propertyType = Object.class;\n      }\n      ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);\n      Class<?> javaType = propertyType;\n      String typeHandlerAlias = null;\n      for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {\n        String name = entry.getKey();\n        String value = entry.getValue();\n        if (\"javaType\".equals(name)) {\n          javaType = resolveClass(value);\n          builder.javaType(javaType);\n        } else if (\"jdbcType\".equals(name)) {\n          builder.jdbcType(resolveJdbcType(value));\n        } else if (\"mode\".equals(name)) {\n          builder.mode(resolveParameterMode(value));\n        } else if (\"numericScale\".equals(name)) {\n          builder.numericScale(Integer.valueOf(value));\n        } else if (\"resultMap\".equals(name)) {\n          builder.resultMapId(value);\n        } else if (\"typeHandler\".equals(name)) {\n          typeHandlerAlias = value;\n        } else if (\"jdbcTypeName\".equals(name)) {\n          builder.jdbcTypeName(value);\n        } else if (\"property\".equals(name)) {\n          \r\n        } else if (\"expression\".equals(name)) {\n          throw new BuilderException(\"Expression based parameters are not supported yet\");\n        } else {\n          throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping #{\" + content + \"}.  Valid properties are \" + parameterProperties);\n        }\n      }\n      if (typeHandlerAlias != null) {\n        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));\n      }\n      return builder.build();\n    }\n","date":"2012-06-06 05:17:13","endLine":120,"groupId":"896","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildParameterMapping","params":"(Stringcontent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/a3/b5801f9af460db3d85a2b1e99be25e97cc4671.src","preCode":"    private ParameterMapping buildParameterMapping(String content) {\n      Map<String, String> propertiesMap = parseParameterMapping(content);\n      String property = propertiesMap.get(\"property\");\n      Class<?> propertyType;\n      if (metaParameters.hasGetter(property)) { \r\n        propertyType = metaParameters.getGetterType(property);\n      } else if (typeHandlerRegistry.hasTypeHandler(parameterType)) {\n        propertyType = parameterType;\n      } else if (JdbcType.CURSOR.name().equals(propertiesMap.get(\"jdbcType\"))) {\n        propertyType = java.sql.ResultSet.class;\n      } else if (property != null) {\n        MetaClass metaClass = MetaClass.forClass(parameterType);\n        if (metaClass.hasGetter(property)) {\n          propertyType = metaClass.getGetterType(property);\n        } else {\n          propertyType = Object.class;\n        }\n      } else {\n        propertyType = Object.class;\n      }\n      ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);\n      Class<?> javaType = propertyType;\n      String typeHandlerAlias = null;\n      for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {\n        String name = entry.getKey();\n        String value = entry.getValue();\n        if (\"javaType\".equals(name)) {\n          javaType = resolveClass(value);\n          builder.javaType(javaType);\n        } else if (\"jdbcType\".equals(name)) {\n          builder.jdbcType(resolveJdbcType(value));\n        } else if (\"mode\".equals(name)) {\n          builder.mode(resolveParameterMode(value));\n        } else if (\"numericScale\".equals(name)) {\n          builder.numericScale(Integer.valueOf(value));\n        } else if (\"resultMap\".equals(name)) {\n          builder.resultMapId(value);\n        } else if (\"typeHandler\".equals(name)) {\n          typeHandlerAlias = value;\n        } else if (\"jdbcTypeName\".equals(name)) {\n          builder.jdbcTypeName(value);\n        } else if (\"property\".equals(name)) {\n          \r\n        } else if (\"expression\".equals(name)) {\n          throw new BuilderException(\"Expression based parameters are not supported yet\");\n        } else {\n          throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping #{\" + content + \"}.  Valid properties are \" + parameterProperties);\n        }\n      }\n      if (typeHandlerAlias != null) {\n        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));\n      }\n      return builder.build();\n    }\n","realPath":"src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"NB"}],"commitId":"cdcf550a0acc23b3fba3e462deb7cb77e1987795","commitMessage":"@@@test renamed VelocityTest -> LanguageTest\n","date":"2012-06-10 15:05:50","modifiedFileCount":"0","status":"M","submitter":"Eduardo Macarron"},{"authorTime":"2015-04-25 15:30:10","codes":[{"authorDate":"2015-04-25 15:30:10","commitOrder":10,"curCode":"    private ParameterMapping buildParameterMapping(String content) {\n      Map<String, String> propertiesMap = parseParameterMapping(content);\n      String property = propertiesMap.get(\"property\");\n      String jdbcType = propertiesMap.get(\"jdbcType\");\n      Class<?> propertyType;\n      if (typeHandlerRegistry.hasTypeHandler(parameterType)) {\n        propertyType = parameterType;\n      } else if (JdbcType.CURSOR.name().equals(jdbcType)) {\n        propertyType = java.sql.ResultSet.class;\n      } else if (property != null) {\n        MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());\n        if (metaClass.hasGetter(property)) {\n          propertyType = metaClass.getGetterType(property);\n        } else {\n          propertyType = Object.class;\n        }\n      } else {\n        propertyType = Object.class;\n      }\n      ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);\n      if (jdbcType != null) {\n        builder.jdbcType(resolveJdbcType(jdbcType));\n      }\n      Class<?> javaType = null;\n      String typeHandlerAlias = null;\n      for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {\n        String name = entry.getKey();\n        String value = entry.getValue();\n        if (\"javaType\".equals(name)) {\n          javaType = resolveClass(value);\n          builder.javaType(javaType);\n        } else if (\"jdbcType\".equals(name)) {\n          builder.jdbcType(resolveJdbcType(value));\n        } else if (\"mode\".equals(name)) {\n          builder.mode(resolveParameterMode(value));\n        } else if (\"numericScale\".equals(name)) {\n          builder.numericScale(Integer.valueOf(value));\n        } else if (\"resultMap\".equals(name)) {\n          builder.resultMapId(value);\n        } else if (\"typeHandler\".equals(name)) {\n          typeHandlerAlias = value;\n        } else if (\"jdbcTypeName\".equals(name)) {\n          builder.jdbcTypeName(value);\n        } else if (\"property\".equals(name)) {\n          \r\n        } else if (\"expression\".equals(name)) {\n          builder.expression(value);\n        } else {\n          throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping @{\" + content + \"}.  Valid properties are \" + parameterProperties);\n        }\n      }\n      if (typeHandlerAlias != null) {\n        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));\n      }\n      return builder.build();\n    }\n","date":"2015-04-25 15:30:10","endLine":126,"groupId":"896","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"buildParameterMapping","params":"(Stringcontent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/a1/9aad1458e4c667aacdf09f6f76b117154d0110.src","preCode":"    private ParameterMapping buildParameterMapping(String content) {\n      Map<String, String> propertiesMap = parseParameterMapping(content);\n      String property = propertiesMap.get(\"property\");\n      String jdbcType = propertiesMap.get(\"jdbcType\");\n      Class<?> propertyType;\n      if (typeHandlerRegistry.hasTypeHandler(parameterType)) {\n        propertyType = parameterType;\n      } else if (JdbcType.CURSOR.name().equals(jdbcType)) {\n        propertyType = java.sql.ResultSet.class;\n      } else if (property != null) {\n        MetaClass metaClass = MetaClass.forClass(parameterType);\n        if (metaClass.hasGetter(property)) {\n          propertyType = metaClass.getGetterType(property);\n        } else {\n          propertyType = Object.class;\n        }\n      } else {\n        propertyType = Object.class;\n      }\n      ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);\n      if (jdbcType != null) {\n        builder.jdbcType(resolveJdbcType(jdbcType));\n      }\n      Class<?> javaType = null;\n      String typeHandlerAlias = null;\n      for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {\n        String name = entry.getKey();\n        String value = entry.getValue();\n        if (\"javaType\".equals(name)) {\n          javaType = resolveClass(value);\n          builder.javaType(javaType);\n        } else if (\"jdbcType\".equals(name)) {\n          builder.jdbcType(resolveJdbcType(value));\n        } else if (\"mode\".equals(name)) {\n          builder.mode(resolveParameterMode(value));\n        } else if (\"numericScale\".equals(name)) {\n          builder.numericScale(Integer.valueOf(value));\n        } else if (\"resultMap\".equals(name)) {\n          builder.resultMapId(value);\n        } else if (\"typeHandler\".equals(name)) {\n          typeHandlerAlias = value;\n        } else if (\"jdbcTypeName\".equals(name)) {\n          builder.jdbcTypeName(value);\n        } else if (\"property\".equals(name)) {\n          \r\n        } else if (\"expression\".equals(name)) {\n          builder.expression(value);\n        } else {\n          throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping @{\" + content + \"}.  Valid properties are \" + parameterProperties);\n        }\n      }\n      if (typeHandlerAlias != null) {\n        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));\n      }\n      return builder.build();\n    }\n","realPath":"src/test/java/org/apache/ibatis/submitted/language/VelocitySqlSourceBuilder.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2015-04-25 15:30:10","commitOrder":10,"curCode":"    private ParameterMapping buildParameterMapping(String content) {\n      Map<String, String> propertiesMap = parseParameterMapping(content);\n      String property = propertiesMap.get(\"property\");\n      Class<?> propertyType;\n      if (metaParameters.hasGetter(property)) { \r\n        propertyType = metaParameters.getGetterType(property);\n      } else if (typeHandlerRegistry.hasTypeHandler(parameterType)) {\n        propertyType = parameterType;\n      } else if (JdbcType.CURSOR.name().equals(propertiesMap.get(\"jdbcType\"))) {\n        propertyType = java.sql.ResultSet.class;\n      } else if (property != null) {\n        MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());\n        if (metaClass.hasGetter(property)) {\n          propertyType = metaClass.getGetterType(property);\n        } else {\n          propertyType = Object.class;\n        }\n      } else {\n        propertyType = Object.class;\n      }\n      ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);\n      Class<?> javaType = propertyType;\n      String typeHandlerAlias = null;\n      for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {\n        String name = entry.getKey();\n        String value = entry.getValue();\n        if (\"javaType\".equals(name)) {\n          javaType = resolveClass(value);\n          builder.javaType(javaType);\n        } else if (\"jdbcType\".equals(name)) {\n          builder.jdbcType(resolveJdbcType(value));\n        } else if (\"mode\".equals(name)) {\n          builder.mode(resolveParameterMode(value));\n        } else if (\"numericScale\".equals(name)) {\n          builder.numericScale(Integer.valueOf(value));\n        } else if (\"resultMap\".equals(name)) {\n          builder.resultMapId(value);\n        } else if (\"typeHandler\".equals(name)) {\n          typeHandlerAlias = value;\n        } else if (\"jdbcTypeName\".equals(name)) {\n          builder.jdbcTypeName(value);\n        } else if (\"property\".equals(name)) {\n          \r\n        } else if (\"expression\".equals(name)) {\n          throw new BuilderException(\"Expression based parameters are not supported yet\");\n        } else {\n          throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping #{\" + content + \"}.  Valid properties are \" + parameterProperties);\n        }\n      }\n      if (typeHandlerAlias != null) {\n        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));\n      }\n      return builder.build();\n    }\n","date":"2015-04-25 15:30:10","endLine":124,"groupId":"896","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildParameterMapping","params":"(Stringcontent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/d5/346d2a4cd5091a579d4264b48c17b3413d42be.src","preCode":"    private ParameterMapping buildParameterMapping(String content) {\n      Map<String, String> propertiesMap = parseParameterMapping(content);\n      String property = propertiesMap.get(\"property\");\n      Class<?> propertyType;\n      if (metaParameters.hasGetter(property)) { \r\n        propertyType = metaParameters.getGetterType(property);\n      } else if (typeHandlerRegistry.hasTypeHandler(parameterType)) {\n        propertyType = parameterType;\n      } else if (JdbcType.CURSOR.name().equals(propertiesMap.get(\"jdbcType\"))) {\n        propertyType = java.sql.ResultSet.class;\n      } else if (property != null) {\n        MetaClass metaClass = MetaClass.forClass(parameterType);\n        if (metaClass.hasGetter(property)) {\n          propertyType = metaClass.getGetterType(property);\n        } else {\n          propertyType = Object.class;\n        }\n      } else {\n        propertyType = Object.class;\n      }\n      ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);\n      Class<?> javaType = propertyType;\n      String typeHandlerAlias = null;\n      for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {\n        String name = entry.getKey();\n        String value = entry.getValue();\n        if (\"javaType\".equals(name)) {\n          javaType = resolveClass(value);\n          builder.javaType(javaType);\n        } else if (\"jdbcType\".equals(name)) {\n          builder.jdbcType(resolveJdbcType(value));\n        } else if (\"mode\".equals(name)) {\n          builder.mode(resolveParameterMode(value));\n        } else if (\"numericScale\".equals(name)) {\n          builder.numericScale(Integer.valueOf(value));\n        } else if (\"resultMap\".equals(name)) {\n          builder.resultMapId(value);\n        } else if (\"typeHandler\".equals(name)) {\n          typeHandlerAlias = value;\n        } else if (\"jdbcTypeName\".equals(name)) {\n          builder.jdbcTypeName(value);\n        } else if (\"property\".equals(name)) {\n          \r\n        } else if (\"expression\".equals(name)) {\n          throw new BuilderException(\"Expression based parameters are not supported yet\");\n        } else {\n          throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping #{\" + content + \"}.  Valid properties are \" + parameterProperties);\n        }\n      }\n      if (typeHandlerAlias != null) {\n        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));\n      }\n      return builder.build();\n    }\n","realPath":"src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"fbf105117132a4c0ea9c16e8494e1b44f9cbcf39","commitMessage":"@@@fixes #372\n","date":"2015-04-25 15:30:10","modifiedFileCount":"17","status":"M","submitter":"Eduardo Macarron"},{"authorTime":"2017-06-11 22:27:32","codes":[{"authorDate":"2015-04-25 15:30:10","commitOrder":11,"curCode":"    private ParameterMapping buildParameterMapping(String content) {\n      Map<String, String> propertiesMap = parseParameterMapping(content);\n      String property = propertiesMap.get(\"property\");\n      String jdbcType = propertiesMap.get(\"jdbcType\");\n      Class<?> propertyType;\n      if (typeHandlerRegistry.hasTypeHandler(parameterType)) {\n        propertyType = parameterType;\n      } else if (JdbcType.CURSOR.name().equals(jdbcType)) {\n        propertyType = java.sql.ResultSet.class;\n      } else if (property != null) {\n        MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());\n        if (metaClass.hasGetter(property)) {\n          propertyType = metaClass.getGetterType(property);\n        } else {\n          propertyType = Object.class;\n        }\n      } else {\n        propertyType = Object.class;\n      }\n      ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);\n      if (jdbcType != null) {\n        builder.jdbcType(resolveJdbcType(jdbcType));\n      }\n      Class<?> javaType = null;\n      String typeHandlerAlias = null;\n      for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {\n        String name = entry.getKey();\n        String value = entry.getValue();\n        if (\"javaType\".equals(name)) {\n          javaType = resolveClass(value);\n          builder.javaType(javaType);\n        } else if (\"jdbcType\".equals(name)) {\n          builder.jdbcType(resolveJdbcType(value));\n        } else if (\"mode\".equals(name)) {\n          builder.mode(resolveParameterMode(value));\n        } else if (\"numericScale\".equals(name)) {\n          builder.numericScale(Integer.valueOf(value));\n        } else if (\"resultMap\".equals(name)) {\n          builder.resultMapId(value);\n        } else if (\"typeHandler\".equals(name)) {\n          typeHandlerAlias = value;\n        } else if (\"jdbcTypeName\".equals(name)) {\n          builder.jdbcTypeName(value);\n        } else if (\"property\".equals(name)) {\n          \r\n        } else if (\"expression\".equals(name)) {\n          builder.expression(value);\n        } else {\n          throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping @{\" + content + \"}.  Valid properties are \" + parameterProperties);\n        }\n      }\n      if (typeHandlerAlias != null) {\n        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));\n      }\n      return builder.build();\n    }\n","date":"2015-04-25 15:30:10","endLine":126,"groupId":"896","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"buildParameterMapping","params":"(Stringcontent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/a1/9aad1458e4c667aacdf09f6f76b117154d0110.src","preCode":"    private ParameterMapping buildParameterMapping(String content) {\n      Map<String, String> propertiesMap = parseParameterMapping(content);\n      String property = propertiesMap.get(\"property\");\n      String jdbcType = propertiesMap.get(\"jdbcType\");\n      Class<?> propertyType;\n      if (typeHandlerRegistry.hasTypeHandler(parameterType)) {\n        propertyType = parameterType;\n      } else if (JdbcType.CURSOR.name().equals(jdbcType)) {\n        propertyType = java.sql.ResultSet.class;\n      } else if (property != null) {\n        MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());\n        if (metaClass.hasGetter(property)) {\n          propertyType = metaClass.getGetterType(property);\n        } else {\n          propertyType = Object.class;\n        }\n      } else {\n        propertyType = Object.class;\n      }\n      ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);\n      if (jdbcType != null) {\n        builder.jdbcType(resolveJdbcType(jdbcType));\n      }\n      Class<?> javaType = null;\n      String typeHandlerAlias = null;\n      for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {\n        String name = entry.getKey();\n        String value = entry.getValue();\n        if (\"javaType\".equals(name)) {\n          javaType = resolveClass(value);\n          builder.javaType(javaType);\n        } else if (\"jdbcType\".equals(name)) {\n          builder.jdbcType(resolveJdbcType(value));\n        } else if (\"mode\".equals(name)) {\n          builder.mode(resolveParameterMode(value));\n        } else if (\"numericScale\".equals(name)) {\n          builder.numericScale(Integer.valueOf(value));\n        } else if (\"resultMap\".equals(name)) {\n          builder.resultMapId(value);\n        } else if (\"typeHandler\".equals(name)) {\n          typeHandlerAlias = value;\n        } else if (\"jdbcTypeName\".equals(name)) {\n          builder.jdbcTypeName(value);\n        } else if (\"property\".equals(name)) {\n          \r\n        } else if (\"expression\".equals(name)) {\n          builder.expression(value);\n        } else {\n          throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping @{\" + content + \"}.  Valid properties are \" + parameterProperties);\n        }\n      }\n      if (typeHandlerAlias != null) {\n        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));\n      }\n      return builder.build();\n    }\n","realPath":"src/test/java/org/apache/ibatis/submitted/language/VelocitySqlSourceBuilder.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2017-06-11 22:27:32","commitOrder":11,"curCode":"    private ParameterMapping buildParameterMapping(String content) {\n      Map<String, String> propertiesMap = parseParameterMapping(content);\n      String property = propertiesMap.get(\"property\");\n      Class<?> propertyType;\n      if (metaParameters.hasGetter(property)) { \r\n        propertyType = metaParameters.getGetterType(property);\n      } else if (typeHandlerRegistry.hasTypeHandler(parameterType)) {\n        propertyType = parameterType;\n      } else if (JdbcType.CURSOR.name().equals(propertiesMap.get(\"jdbcType\"))) {\n        propertyType = java.sql.ResultSet.class;\n      } else if (property == null || Map.class.isAssignableFrom(parameterType)) {\n        propertyType = Object.class;\n      } else {\n        MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());\n        if (metaClass.hasGetter(property)) {\n          propertyType = metaClass.getGetterType(property);\n        } else {\n          propertyType = Object.class;\n        }\n      }\n      ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);\n      Class<?> javaType = propertyType;\n      String typeHandlerAlias = null;\n      for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {\n        String name = entry.getKey();\n        String value = entry.getValue();\n        if (\"javaType\".equals(name)) {\n          javaType = resolveClass(value);\n          builder.javaType(javaType);\n        } else if (\"jdbcType\".equals(name)) {\n          builder.jdbcType(resolveJdbcType(value));\n        } else if (\"mode\".equals(name)) {\n          builder.mode(resolveParameterMode(value));\n        } else if (\"numericScale\".equals(name)) {\n          builder.numericScale(Integer.valueOf(value));\n        } else if (\"resultMap\".equals(name)) {\n          builder.resultMapId(value);\n        } else if (\"typeHandler\".equals(name)) {\n          typeHandlerAlias = value;\n        } else if (\"jdbcTypeName\".equals(name)) {\n          builder.jdbcTypeName(value);\n        } else if (\"property\".equals(name)) {\n          \r\n        } else if (\"expression\".equals(name)) {\n          throw new BuilderException(\"Expression based parameters are not supported yet\");\n        } else {\n          throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping #{\" + content + \"}.  Valid properties are \" + parameterProperties);\n        }\n      }\n      if (typeHandlerAlias != null) {\n        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));\n      }\n      return builder.build();\n    }\n","date":"2017-06-11 22:27:32","endLine":124,"groupId":"711","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"buildParameterMapping","params":"(Stringcontent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/36/f0320c5dd3b2f02a3af88a88d679f58924e793.src","preCode":"    private ParameterMapping buildParameterMapping(String content) {\n      Map<String, String> propertiesMap = parseParameterMapping(content);\n      String property = propertiesMap.get(\"property\");\n      Class<?> propertyType;\n      if (metaParameters.hasGetter(property)) { \r\n        propertyType = metaParameters.getGetterType(property);\n      } else if (typeHandlerRegistry.hasTypeHandler(parameterType)) {\n        propertyType = parameterType;\n      } else if (JdbcType.CURSOR.name().equals(propertiesMap.get(\"jdbcType\"))) {\n        propertyType = java.sql.ResultSet.class;\n      } else if (property != null) {\n        MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());\n        if (metaClass.hasGetter(property)) {\n          propertyType = metaClass.getGetterType(property);\n        } else {\n          propertyType = Object.class;\n        }\n      } else {\n        propertyType = Object.class;\n      }\n      ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);\n      Class<?> javaType = propertyType;\n      String typeHandlerAlias = null;\n      for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {\n        String name = entry.getKey();\n        String value = entry.getValue();\n        if (\"javaType\".equals(name)) {\n          javaType = resolveClass(value);\n          builder.javaType(javaType);\n        } else if (\"jdbcType\".equals(name)) {\n          builder.jdbcType(resolveJdbcType(value));\n        } else if (\"mode\".equals(name)) {\n          builder.mode(resolveParameterMode(value));\n        } else if (\"numericScale\".equals(name)) {\n          builder.numericScale(Integer.valueOf(value));\n        } else if (\"resultMap\".equals(name)) {\n          builder.resultMapId(value);\n        } else if (\"typeHandler\".equals(name)) {\n          typeHandlerAlias = value;\n        } else if (\"jdbcTypeName\".equals(name)) {\n          builder.jdbcTypeName(value);\n        } else if (\"property\".equals(name)) {\n          \r\n        } else if (\"expression\".equals(name)) {\n          throw new BuilderException(\"Expression based parameters are not supported yet\");\n        } else {\n          throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping #{\" + content + \"}.  Valid properties are \" + parameterProperties);\n        }\n      }\n      if (typeHandlerAlias != null) {\n        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));\n      }\n      return builder.build();\n    }\n","realPath":"src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"3aae5f312c23173e001eb725b1d525decd471353","commitMessage":"@@@Merge pull request #1031 from kazuki43zoo/gh-1030\n\nAllow long type on size parameter when use multiple '@Param'","date":"2017-06-11 22:27:32","modifiedFileCount":"1","status":"M","submitter":"Kazuki Shimizu"},{"authorTime":"2019-02-03 22:45:10","codes":[{"authorDate":"2015-04-25 15:30:10","commitOrder":12,"curCode":"    private ParameterMapping buildParameterMapping(String content) {\n      Map<String, String> propertiesMap = parseParameterMapping(content);\n      String property = propertiesMap.get(\"property\");\n      String jdbcType = propertiesMap.get(\"jdbcType\");\n      Class<?> propertyType;\n      if (typeHandlerRegistry.hasTypeHandler(parameterType)) {\n        propertyType = parameterType;\n      } else if (JdbcType.CURSOR.name().equals(jdbcType)) {\n        propertyType = java.sql.ResultSet.class;\n      } else if (property != null) {\n        MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());\n        if (metaClass.hasGetter(property)) {\n          propertyType = metaClass.getGetterType(property);\n        } else {\n          propertyType = Object.class;\n        }\n      } else {\n        propertyType = Object.class;\n      }\n      ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);\n      if (jdbcType != null) {\n        builder.jdbcType(resolveJdbcType(jdbcType));\n      }\n      Class<?> javaType = null;\n      String typeHandlerAlias = null;\n      for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {\n        String name = entry.getKey();\n        String value = entry.getValue();\n        if (\"javaType\".equals(name)) {\n          javaType = resolveClass(value);\n          builder.javaType(javaType);\n        } else if (\"jdbcType\".equals(name)) {\n          builder.jdbcType(resolveJdbcType(value));\n        } else if (\"mode\".equals(name)) {\n          builder.mode(resolveParameterMode(value));\n        } else if (\"numericScale\".equals(name)) {\n          builder.numericScale(Integer.valueOf(value));\n        } else if (\"resultMap\".equals(name)) {\n          builder.resultMapId(value);\n        } else if (\"typeHandler\".equals(name)) {\n          typeHandlerAlias = value;\n        } else if (\"jdbcTypeName\".equals(name)) {\n          builder.jdbcTypeName(value);\n        } else if (\"property\".equals(name)) {\n          \r\n        } else if (\"expression\".equals(name)) {\n          builder.expression(value);\n        } else {\n          throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping @{\" + content + \"}.  Valid properties are \" + parameterProperties);\n        }\n      }\n      if (typeHandlerAlias != null) {\n        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));\n      }\n      return builder.build();\n    }\n","date":"2015-04-25 15:30:10","endLine":126,"groupId":"10173","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"buildParameterMapping","params":"(Stringcontent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/a1/9aad1458e4c667aacdf09f6f76b117154d0110.src","preCode":"    private ParameterMapping buildParameterMapping(String content) {\n      Map<String, String> propertiesMap = parseParameterMapping(content);\n      String property = propertiesMap.get(\"property\");\n      String jdbcType = propertiesMap.get(\"jdbcType\");\n      Class<?> propertyType;\n      if (typeHandlerRegistry.hasTypeHandler(parameterType)) {\n        propertyType = parameterType;\n      } else if (JdbcType.CURSOR.name().equals(jdbcType)) {\n        propertyType = java.sql.ResultSet.class;\n      } else if (property != null) {\n        MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());\n        if (metaClass.hasGetter(property)) {\n          propertyType = metaClass.getGetterType(property);\n        } else {\n          propertyType = Object.class;\n        }\n      } else {\n        propertyType = Object.class;\n      }\n      ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);\n      if (jdbcType != null) {\n        builder.jdbcType(resolveJdbcType(jdbcType));\n      }\n      Class<?> javaType = null;\n      String typeHandlerAlias = null;\n      for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {\n        String name = entry.getKey();\n        String value = entry.getValue();\n        if (\"javaType\".equals(name)) {\n          javaType = resolveClass(value);\n          builder.javaType(javaType);\n        } else if (\"jdbcType\".equals(name)) {\n          builder.jdbcType(resolveJdbcType(value));\n        } else if (\"mode\".equals(name)) {\n          builder.mode(resolveParameterMode(value));\n        } else if (\"numericScale\".equals(name)) {\n          builder.numericScale(Integer.valueOf(value));\n        } else if (\"resultMap\".equals(name)) {\n          builder.resultMapId(value);\n        } else if (\"typeHandler\".equals(name)) {\n          typeHandlerAlias = value;\n        } else if (\"jdbcTypeName\".equals(name)) {\n          builder.jdbcTypeName(value);\n        } else if (\"property\".equals(name)) {\n          \r\n        } else if (\"expression\".equals(name)) {\n          builder.expression(value);\n        } else {\n          throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping @{\" + content + \"}.  Valid properties are \" + parameterProperties);\n        }\n      }\n      if (typeHandlerAlias != null) {\n        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));\n      }\n      return builder.build();\n    }\n","realPath":"src/test/java/org/apache/ibatis/submitted/language/VelocitySqlSourceBuilder.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2019-02-03 22:45:10","commitOrder":12,"curCode":"    private ParameterMapping buildParameterMapping(String content) {\n      Map<String, String> propertiesMap = parseParameterMapping(content);\n      String property = propertiesMap.get(\"property\");\n      Class<?> propertyType;\n      if (metaParameters.hasGetter(property)) { \r\n        propertyType = metaParameters.getGetterType(property);\n      } else if (typeHandlerRegistry.hasTypeHandler(parameterType)) {\n        propertyType = parameterType;\n      } else if (JdbcType.CURSOR.name().equals(propertiesMap.get(\"jdbcType\"))) {\n        propertyType = java.sql.ResultSet.class;\n      } else if (property == null || Map.class.isAssignableFrom(parameterType)) {\n        propertyType = Object.class;\n      } else {\n        MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());\n        if (metaClass.hasGetter(property)) {\n          propertyType = metaClass.getGetterType(property);\n        } else {\n          propertyType = Object.class;\n        }\n      }\n      ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);\n      Class<?> javaType = propertyType;\n      String typeHandlerAlias = null;\n      for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {\n        String name = entry.getKey();\n        String value = entry.getValue();\n        if (\"javaType\".equals(name)) {\n          javaType = resolveClass(value);\n          builder.javaType(javaType);\n        } else if (\"jdbcType\".equals(name)) {\n          builder.jdbcType(resolveJdbcType(value));\n        } else if (\"mode\".equals(name)) {\n          builder.mode(resolveParameterMode(value));\n        } else if (\"numericScale\".equals(name)) {\n          builder.numericScale(Integer.valueOf(value));\n        } else if (\"resultMap\".equals(name)) {\n          builder.resultMapId(value);\n        } else if (\"typeHandler\".equals(name)) {\n          typeHandlerAlias = value;\n        } else if (\"jdbcTypeName\".equals(name)) {\n          builder.jdbcTypeName(value);\n        } else if (\"property\".equals(name)) {\n          \r\n        } else if (\"expression\".equals(name)) {\n          throw new BuilderException(\"Expression based parameters are not supported yet\");\n        } else {\n          throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping #{\" + content + \"}.  Valid properties are \" + PARAMETER_PROPERTIES);\n        }\n      }\n      if (typeHandlerAlias != null) {\n        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));\n      }\n      return builder.build();\n    }\n","date":"2019-02-03 22:45:10","endLine":124,"groupId":"10173","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"buildParameterMapping","params":"(Stringcontent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/a8/4c3cae93010ecb8a0b6a3d92641e325c06be2b.src","preCode":"    private ParameterMapping buildParameterMapping(String content) {\n      Map<String, String> propertiesMap = parseParameterMapping(content);\n      String property = propertiesMap.get(\"property\");\n      Class<?> propertyType;\n      if (metaParameters.hasGetter(property)) { \r\n        propertyType = metaParameters.getGetterType(property);\n      } else if (typeHandlerRegistry.hasTypeHandler(parameterType)) {\n        propertyType = parameterType;\n      } else if (JdbcType.CURSOR.name().equals(propertiesMap.get(\"jdbcType\"))) {\n        propertyType = java.sql.ResultSet.class;\n      } else if (property == null || Map.class.isAssignableFrom(parameterType)) {\n        propertyType = Object.class;\n      } else {\n        MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());\n        if (metaClass.hasGetter(property)) {\n          propertyType = metaClass.getGetterType(property);\n        } else {\n          propertyType = Object.class;\n        }\n      }\n      ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);\n      Class<?> javaType = propertyType;\n      String typeHandlerAlias = null;\n      for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {\n        String name = entry.getKey();\n        String value = entry.getValue();\n        if (\"javaType\".equals(name)) {\n          javaType = resolveClass(value);\n          builder.javaType(javaType);\n        } else if (\"jdbcType\".equals(name)) {\n          builder.jdbcType(resolveJdbcType(value));\n        } else if (\"mode\".equals(name)) {\n          builder.mode(resolveParameterMode(value));\n        } else if (\"numericScale\".equals(name)) {\n          builder.numericScale(Integer.valueOf(value));\n        } else if (\"resultMap\".equals(name)) {\n          builder.resultMapId(value);\n        } else if (\"typeHandler\".equals(name)) {\n          typeHandlerAlias = value;\n        } else if (\"jdbcTypeName\".equals(name)) {\n          builder.jdbcTypeName(value);\n        } else if (\"property\".equals(name)) {\n          \r\n        } else if (\"expression\".equals(name)) {\n          throw new BuilderException(\"Expression based parameters are not supported yet\");\n        } else {\n          throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping #{\" + content + \"}.  Valid properties are \" + parameterProperties);\n        }\n      }\n      if (typeHandlerAlias != null) {\n        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));\n      }\n      return builder.build();\n    }\n","realPath":"src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"0099c79a653d577e7c4a56096b90e49cc4b0411f","commitMessage":"@@@Merge pull request #1474 from kazuki43zoo/polish-variable-name\n\n[Sonar] Fix variable name","date":"2019-02-03 22:45:10","modifiedFileCount":"3","status":"M","submitter":"Kazuki Shimizu"}]
