[{"authorTime":"2013-04-16 03:09:39","codes":[{"authorDate":"2013-04-16 03:09:39","commitOrder":1,"curCode":"    public Object invoke(Object enhanced, Method method, Method methodProxy, Object[] args) throws Throwable {\n      final String methodName = method.getName();\n      try {\n        synchronized (lazyLoader) {\n          if (WRITE_REPLACE_METHOD.equals(methodName)) {\n            Object original = null;\n            if (constructorArgTypes.isEmpty()) {\n              original = objectFactory.create(type);\n            } else {\n              original = objectFactory.create(type, constructorArgTypes, constructorArgs);\n            }\n            PropertyCopier.copyBeanProperties(type, enhanced, original);\n            if (lazyLoader.size() > 0) {\n              return new JavassistSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);\n            } else {\n              return original;\n            }\n          } else {\n            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {\n              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {\n                lazyLoader.loadAll();\n              } else if (PropertyNamer.isProperty(methodName)) {\n                final String property = PropertyNamer.methodToProperty(methodName);\n                if (lazyLoader.hasLoader(property)) {\n                  lazyLoader.load(property);\n                }\n              }\n            }\n          }\n        }\n        return methodProxy.invoke(enhanced, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n","date":"2013-04-16 03:09:39","endLine":156,"groupId":"1461","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"invoke","params":"(Objectenhanced@Methodmethod@MethodmethodProxy@Object[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/da/9017fafaac10a653767191033c97257380e006.src","preCode":"    public Object invoke(Object enhanced, Method method, Method methodProxy, Object[] args) throws Throwable {\n      final String methodName = method.getName();\n      try {\n        synchronized (lazyLoader) {\n          if (WRITE_REPLACE_METHOD.equals(methodName)) {\n            Object original = null;\n            if (constructorArgTypes.isEmpty()) {\n              original = objectFactory.create(type);\n            } else {\n              original = objectFactory.create(type, constructorArgTypes, constructorArgs);\n            }\n            PropertyCopier.copyBeanProperties(type, enhanced, original);\n            if (lazyLoader.size() > 0) {\n              return new JavassistSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);\n            } else {\n              return original;\n            }\n          } else {\n            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {\n              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {\n                lazyLoader.loadAll();\n              } else if (PropertyNamer.isProperty(methodName)) {\n                final String property = PropertyNamer.methodToProperty(methodName);\n                if (lazyLoader.hasLoader(property)) {\n                  lazyLoader.load(property);\n                }\n              }\n            }\n          }\n        }\n        return methodProxy.invoke(enhanced, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n","realPath":"src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"},{"authorDate":"2013-04-16 03:09:39","commitOrder":1,"curCode":"    public Object intercept(Object enhanced, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n      final String methodName = method.getName();\n      try {\n        synchronized (lazyLoader) {\n          if (WRITE_REPLACE_METHOD.equals(methodName)) {\n            Object original = null;\n            if (constructorArgTypes.isEmpty()) {\n              original = objectFactory.create(type);\n            } else {\n              original = objectFactory.create(type, constructorArgTypes, constructorArgs);\n            }\n            PropertyCopier.copyBeanProperties(type, enhanced, original);\n            if (lazyLoader.size() > 0) {\n              return new CglibSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);\n            } else {\n              return original;\n            }\n          } else {\n            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {\n              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {\n                lazyLoader.loadAll();\n              } else if (PropertyNamer.isProperty(methodName)) {\n                final String property = PropertyNamer.methodToProperty(methodName);\n                if (lazyLoader.hasLoader(property)) {\n                  lazyLoader.load(property);\n                }\n              }\n            }\n          }\n        }\n        return methodProxy.invokeSuper(enhanced, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n","date":"2013-04-16 03:09:39","endLine":156,"groupId":"1461","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"intercept","params":"(Objectenhanced@Methodmethod@Object[]args@MethodProxymethodProxy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/dd/e40ef8b28c1d028355d2185db5993e02123f85.src","preCode":"    public Object intercept(Object enhanced, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n      final String methodName = method.getName();\n      try {\n        synchronized (lazyLoader) {\n          if (WRITE_REPLACE_METHOD.equals(methodName)) {\n            Object original = null;\n            if (constructorArgTypes.isEmpty()) {\n              original = objectFactory.create(type);\n            } else {\n              original = objectFactory.create(type, constructorArgTypes, constructorArgs);\n            }\n            PropertyCopier.copyBeanProperties(type, enhanced, original);\n            if (lazyLoader.size() > 0) {\n              return new CglibSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);\n            } else {\n              return original;\n            }\n          } else {\n            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {\n              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {\n                lazyLoader.loadAll();\n              } else if (PropertyNamer.isProperty(methodName)) {\n                final String property = PropertyNamer.methodToProperty(methodName);\n                if (lazyLoader.hasLoader(property)) {\n                  lazyLoader.load(property);\n                }\n              }\n            }\n          }\n        }\n        return methodProxy.invokeSuper(enhanced, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n","realPath":"src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"}],"commitId":"90550c611571a1533adcd8748f92124bc44b9a46","commitMessage":"@@@Merge branch 'master' of https://github.com/FrantaM/mybatis-3\n","date":"2013-04-16 03:09:39","modifiedFileCount":"7","status":"B","submitter":"Eduardo Macarron"},{"authorTime":"2016-04-23 11:54:15","codes":[{"authorDate":"2016-04-23 11:54:15","commitOrder":2,"curCode":"    public Object invoke(Object enhanced, Method method, Method methodProxy, Object[] args) throws Throwable {\n      final String methodName = method.getName();\n      try {\n        synchronized (lazyLoader) {\n          if (WRITE_REPLACE_METHOD.equals(methodName)) {\n            Object original;\n            if (constructorArgTypes.isEmpty()) {\n              original = objectFactory.create(type);\n            } else {\n              original = objectFactory.create(type, constructorArgTypes, constructorArgs);\n            }\n            PropertyCopier.copyBeanProperties(type, enhanced, original);\n            if (lazyLoader.size() > 0) {\n              return new JavassistSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);\n            } else {\n              return original;\n            }\n          } else {\n            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {\n              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {\n                lazyLoader.loadAll();\n              } else if (PropertyNamer.isProperty(methodName)) {\n                final String property = PropertyNamer.methodToProperty(methodName);\n                if (lazyLoader.hasLoader(property)) {\n                  lazyLoader.load(property);\n                }\n              }\n            }\n          }\n        }\n        return methodProxy.invoke(enhanced, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n","date":"2016-04-23 11:54:15","endLine":165,"groupId":"1461","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"invoke","params":"(Objectenhanced@Methodmethod@MethodmethodProxy@Object[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/4f/3a2be5c5b355159a89991595c64bd8387e949b.src","preCode":"    public Object invoke(Object enhanced, Method method, Method methodProxy, Object[] args) throws Throwable {\n      final String methodName = method.getName();\n      try {\n        synchronized (lazyLoader) {\n          if (WRITE_REPLACE_METHOD.equals(methodName)) {\n            Object original = null;\n            if (constructorArgTypes.isEmpty()) {\n              original = objectFactory.create(type);\n            } else {\n              original = objectFactory.create(type, constructorArgTypes, constructorArgs);\n            }\n            PropertyCopier.copyBeanProperties(type, enhanced, original);\n            if (lazyLoader.size() > 0) {\n              return new JavassistSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);\n            } else {\n              return original;\n            }\n          } else {\n            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {\n              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {\n                lazyLoader.loadAll();\n              } else if (PropertyNamer.isProperty(methodName)) {\n                final String property = PropertyNamer.methodToProperty(methodName);\n                if (lazyLoader.hasLoader(property)) {\n                  lazyLoader.load(property);\n                }\n              }\n            }\n          }\n        }\n        return methodProxy.invoke(enhanced, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n","realPath":"src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2016-04-23 11:54:15","commitOrder":2,"curCode":"    public Object intercept(Object enhanced, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n      final String methodName = method.getName();\n      try {\n        synchronized (lazyLoader) {\n          if (WRITE_REPLACE_METHOD.equals(methodName)) {\n            Object original;\n            if (constructorArgTypes.isEmpty()) {\n              original = objectFactory.create(type);\n            } else {\n              original = objectFactory.create(type, constructorArgTypes, constructorArgs);\n            }\n            PropertyCopier.copyBeanProperties(type, enhanced, original);\n            if (lazyLoader.size() > 0) {\n              return new CglibSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);\n            } else {\n              return original;\n            }\n          } else {\n            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {\n              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {\n                lazyLoader.loadAll();\n              } else if (PropertyNamer.isProperty(methodName)) {\n                final String property = PropertyNamer.methodToProperty(methodName);\n                if (lazyLoader.hasLoader(property)) {\n                  lazyLoader.load(property);\n                }\n              }\n            }\n          }\n        }\n        return methodProxy.invokeSuper(enhanced, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n","date":"2016-04-23 11:54:15","endLine":163,"groupId":"1461","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"intercept","params":"(Objectenhanced@Methodmethod@Object[]args@MethodProxymethodProxy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/69/a9c8855b23a461f68ddacfcfdbfc3b6dc5a79b.src","preCode":"    public Object intercept(Object enhanced, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n      final String methodName = method.getName();\n      try {\n        synchronized (lazyLoader) {\n          if (WRITE_REPLACE_METHOD.equals(methodName)) {\n            Object original = null;\n            if (constructorArgTypes.isEmpty()) {\n              original = objectFactory.create(type);\n            } else {\n              original = objectFactory.create(type, constructorArgTypes, constructorArgs);\n            }\n            PropertyCopier.copyBeanProperties(type, enhanced, original);\n            if (lazyLoader.size() > 0) {\n              return new CglibSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);\n            } else {\n              return original;\n            }\n          } else {\n            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {\n              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {\n                lazyLoader.loadAll();\n              } else if (PropertyNamer.isProperty(methodName)) {\n                final String property = PropertyNamer.methodToProperty(methodName);\n                if (lazyLoader.hasLoader(property)) {\n                  lazyLoader.load(property);\n                }\n              }\n            }\n          }\n        }\n        return methodProxy.invokeSuper(enhanced, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n","realPath":"src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"004f8e2dd350e7543f386d6609936ea7fe1089bf","commitMessage":"@@@Merge pull request #653 from kazuki43zoo/polishing\n\nPolishing some code","date":"2016-04-23 11:54:15","modifiedFileCount":"14","status":"M","submitter":"Eduardo Macarron"},{"authorTime":"2016-11-09 01:56:06","codes":[{"authorDate":"2016-11-09 01:56:06","commitOrder":3,"curCode":"    public Object invoke(Object enhanced, Method method, Method methodProxy, Object[] args) throws Throwable {\n      final String methodName = method.getName();\n      try {\n        synchronized (lazyLoader) {\n          if (WRITE_REPLACE_METHOD.equals(methodName)) {\n            Object original;\n            if (constructorArgTypes.isEmpty()) {\n              original = objectFactory.create(type);\n            } else {\n              original = objectFactory.create(type, constructorArgTypes, constructorArgs);\n            }\n            PropertyCopier.copyBeanProperties(type, enhanced, original);\n            if (lazyLoader.size() > 0) {\n              return new JavassistSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);\n            } else {\n              return original;\n            }\n          } else {\n            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {\n              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {\n                lazyLoader.loadAll();\n              } else if (PropertyNamer.isGetter(methodName)) {\n                final String property = PropertyNamer.methodToProperty(methodName);\n                if (lazyLoader.hasLoader(property)) {\n                  lazyLoader.load(property);\n                }\n              }\n            }\n          }\n        }\n        return methodProxy.invoke(enhanced, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n","date":"2016-11-09 01:56:06","endLine":165,"groupId":"1461","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"invoke","params":"(Objectenhanced@Methodmethod@MethodmethodProxy@Object[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/30/d3bedf4fef6aa8f7eadab9fc4e1e05dc3c28ba.src","preCode":"    public Object invoke(Object enhanced, Method method, Method methodProxy, Object[] args) throws Throwable {\n      final String methodName = method.getName();\n      try {\n        synchronized (lazyLoader) {\n          if (WRITE_REPLACE_METHOD.equals(methodName)) {\n            Object original;\n            if (constructorArgTypes.isEmpty()) {\n              original = objectFactory.create(type);\n            } else {\n              original = objectFactory.create(type, constructorArgTypes, constructorArgs);\n            }\n            PropertyCopier.copyBeanProperties(type, enhanced, original);\n            if (lazyLoader.size() > 0) {\n              return new JavassistSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);\n            } else {\n              return original;\n            }\n          } else {\n            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {\n              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {\n                lazyLoader.loadAll();\n              } else if (PropertyNamer.isProperty(methodName)) {\n                final String property = PropertyNamer.methodToProperty(methodName);\n                if (lazyLoader.hasLoader(property)) {\n                  lazyLoader.load(property);\n                }\n              }\n            }\n          }\n        }\n        return methodProxy.invoke(enhanced, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n","realPath":"src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2016-11-09 01:56:06","commitOrder":3,"curCode":"    public Object intercept(Object enhanced, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n      final String methodName = method.getName();\n      try {\n        synchronized (lazyLoader) {\n          if (WRITE_REPLACE_METHOD.equals(methodName)) {\n            Object original;\n            if (constructorArgTypes.isEmpty()) {\n              original = objectFactory.create(type);\n            } else {\n              original = objectFactory.create(type, constructorArgTypes, constructorArgs);\n            }\n            PropertyCopier.copyBeanProperties(type, enhanced, original);\n            if (lazyLoader.size() > 0) {\n              return new CglibSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);\n            } else {\n              return original;\n            }\n          } else {\n            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {\n              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {\n                lazyLoader.loadAll();\n              } else if (PropertyNamer.isGetter(methodName)) {\n                final String property = PropertyNamer.methodToProperty(methodName);\n                if (lazyLoader.hasLoader(property)) {\n                  lazyLoader.load(property);\n                }\n              }\n            }\n          }\n        }\n        return methodProxy.invokeSuper(enhanced, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n","date":"2016-11-09 01:56:06","endLine":163,"groupId":"1461","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"intercept","params":"(Objectenhanced@Methodmethod@Object[]args@MethodProxymethodProxy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/db/deab998fa71b2813182f5379a9f9fc52d3ad96.src","preCode":"    public Object intercept(Object enhanced, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n      final String methodName = method.getName();\n      try {\n        synchronized (lazyLoader) {\n          if (WRITE_REPLACE_METHOD.equals(methodName)) {\n            Object original;\n            if (constructorArgTypes.isEmpty()) {\n              original = objectFactory.create(type);\n            } else {\n              original = objectFactory.create(type, constructorArgTypes, constructorArgs);\n            }\n            PropertyCopier.copyBeanProperties(type, enhanced, original);\n            if (lazyLoader.size() > 0) {\n              return new CglibSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);\n            } else {\n              return original;\n            }\n          } else {\n            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {\n              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {\n                lazyLoader.loadAll();\n              } else if (PropertyNamer.isProperty(methodName)) {\n                final String property = PropertyNamer.methodToProperty(methodName);\n                if (lazyLoader.hasLoader(property)) {\n                  lazyLoader.load(property);\n                }\n              }\n            }\n          }\n        }\n        return methodProxy.invokeSuper(enhanced, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n","realPath":"src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"8428077689f249fb6e7679822e16f3d10661c4c4","commitMessage":"@@@fixes #749 Invoking the setter of a property should not trigger its lazy loading.\n","date":"2016-11-09 01:56:06","modifiedFileCount":"3","status":"M","submitter":"Iwao AVE!"},{"authorTime":"2017-04-22 22:07:40","codes":[{"authorDate":"2017-04-22 22:07:40","commitOrder":4,"curCode":"    public Object invoke(Object enhanced, Method method, Method methodProxy, Object[] args) throws Throwable {\n      final String methodName = method.getName();\n      try {\n        synchronized (lazyLoader) {\n          if (WRITE_REPLACE_METHOD.equals(methodName)) {\n            Object original;\n            if (constructorArgTypes.isEmpty()) {\n              original = objectFactory.create(type);\n            } else {\n              original = objectFactory.create(type, constructorArgTypes, constructorArgs);\n            }\n            PropertyCopier.copyBeanProperties(type, enhanced, original);\n            if (lazyLoader.size() > 0) {\n              return new JavassistSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);\n            } else {\n              return original;\n            }\n          } else {\n            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {\n              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {\n                lazyLoader.loadAll();\n              } else if (PropertyNamer.isSetter(methodName)) {\n                final String property = PropertyNamer.methodToProperty(methodName);\n                lazyLoader.remove(property);\n              } else if (PropertyNamer.isGetter(methodName)) {\n                final String property = PropertyNamer.methodToProperty(methodName);\n                if (lazyLoader.hasLoader(property)) {\n                  lazyLoader.load(property);\n                }\n              }\n            }\n          }\n        }\n        return methodProxy.invoke(enhanced, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n","date":"2017-04-22 22:08:55","endLine":168,"groupId":"10862","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"invoke","params":"(Objectenhanced@Methodmethod@MethodmethodProxy@Object[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/da/81929e527cd7a42471dc77f3e2801b39d0d956.src","preCode":"    public Object invoke(Object enhanced, Method method, Method methodProxy, Object[] args) throws Throwable {\n      final String methodName = method.getName();\n      try {\n        synchronized (lazyLoader) {\n          if (WRITE_REPLACE_METHOD.equals(methodName)) {\n            Object original;\n            if (constructorArgTypes.isEmpty()) {\n              original = objectFactory.create(type);\n            } else {\n              original = objectFactory.create(type, constructorArgTypes, constructorArgs);\n            }\n            PropertyCopier.copyBeanProperties(type, enhanced, original);\n            if (lazyLoader.size() > 0) {\n              return new JavassistSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);\n            } else {\n              return original;\n            }\n          } else {\n            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {\n              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {\n                lazyLoader.loadAll();\n              } else if (PropertyNamer.isGetter(methodName)) {\n                final String property = PropertyNamer.methodToProperty(methodName);\n                if (lazyLoader.hasLoader(property)) {\n                  lazyLoader.load(property);\n                }\n              }\n            }\n          }\n        }\n        return methodProxy.invoke(enhanced, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n","realPath":"src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2017-04-22 22:07:40","commitOrder":4,"curCode":"    public Object intercept(Object enhanced, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n      final String methodName = method.getName();\n      try {\n        synchronized (lazyLoader) {\n          if (WRITE_REPLACE_METHOD.equals(methodName)) {\n            Object original;\n            if (constructorArgTypes.isEmpty()) {\n              original = objectFactory.create(type);\n            } else {\n              original = objectFactory.create(type, constructorArgTypes, constructorArgs);\n            }\n            PropertyCopier.copyBeanProperties(type, enhanced, original);\n            if (lazyLoader.size() > 0) {\n              return new CglibSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);\n            } else {\n              return original;\n            }\n          } else {\n            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {\n              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {\n                lazyLoader.loadAll();\n              } else if (PropertyNamer.isSetter(methodName)) {\n                final String property = PropertyNamer.methodToProperty(methodName);\n                lazyLoader.remove(property);\n              } else if (PropertyNamer.isGetter(methodName)) {\n                final String property = PropertyNamer.methodToProperty(methodName);\n                if (lazyLoader.hasLoader(property)) {\n                  lazyLoader.load(property);\n                }\n              }\n            }\n          }\n        }\n        return methodProxy.invokeSuper(enhanced, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n","date":"2017-04-22 22:08:55","endLine":166,"groupId":"10862","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"intercept","params":"(Objectenhanced@Methodmethod@Object[]args@MethodProxymethodProxy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/96/2544d4f0427e8d50ffcc17d3159a33d6f6d18d.src","preCode":"    public Object intercept(Object enhanced, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n      final String methodName = method.getName();\n      try {\n        synchronized (lazyLoader) {\n          if (WRITE_REPLACE_METHOD.equals(methodName)) {\n            Object original;\n            if (constructorArgTypes.isEmpty()) {\n              original = objectFactory.create(type);\n            } else {\n              original = objectFactory.create(type, constructorArgTypes, constructorArgs);\n            }\n            PropertyCopier.copyBeanProperties(type, enhanced, original);\n            if (lazyLoader.size() > 0) {\n              return new CglibSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);\n            } else {\n              return original;\n            }\n          } else {\n            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {\n              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {\n                lazyLoader.loadAll();\n              } else if (PropertyNamer.isGetter(methodName)) {\n                final String property = PropertyNamer.methodToProperty(methodName);\n                if (lazyLoader.hasLoader(property)) {\n                  lazyLoader.load(property);\n                }\n              }\n            }\n          }\n        }\n        return methodProxy.invokeSuper(enhanced, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n","realPath":"src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"de936f548c74314e142dbef03ff20b56303ca75f","commitMessage":"@@@fixes #988 Invalidate lazy loading of a property if its setter is called.\n","date":"2017-04-22 22:08:55","modifiedFileCount":"5","status":"M","submitter":"Iwao AVE!"}]
