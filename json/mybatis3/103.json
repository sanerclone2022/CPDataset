[{"authorTime":"2017-02-28 21:37:29","codes":[{"authorDate":"2017-02-28 21:37:29","commitOrder":1,"curCode":"  public void testHashCode() throws Exception {\n    Object arr;\n    arr = new long[] { 1 };\n    assertEquals(Arrays.hashCode((long[]) arr), ArrayUtil.hashCode(arr));\n    arr = new int[] { 1 };\n    assertEquals(Arrays.hashCode((int[]) arr), ArrayUtil.hashCode(arr));\n    arr = new short[] { 1 };\n    assertEquals(Arrays.hashCode((short[]) arr), ArrayUtil.hashCode(arr));\n    arr = new char[] { 1 };\n    assertEquals(Arrays.hashCode((char[]) arr), ArrayUtil.hashCode(arr));\n    arr = new byte[] { 1 };\n    assertEquals(Arrays.hashCode((byte[]) arr), ArrayUtil.hashCode(arr));\n    arr = new boolean[] { true };\n    assertEquals(Arrays.hashCode((boolean[]) arr), ArrayUtil.hashCode(arr));\n    arr = new float[] { 1f };\n    assertEquals(Arrays.hashCode((float[]) arr), ArrayUtil.hashCode(arr));\n    arr = new double[] { 1d };\n    assertEquals(Arrays.hashCode((double[]) arr), ArrayUtil.hashCode(arr));\n    arr = new Object[] { \"str\" };\n    assertEquals(Arrays.hashCode((Object[]) arr), ArrayUtil.hashCode(arr));\n\n    assertEquals(0, ArrayUtil.hashCode(null));\n    assertEquals(\"str\".hashCode(), ArrayUtil.hashCode(\"str\"));\n    assertEquals(Integer.valueOf(1).hashCode(), ArrayUtil.hashCode(1));\n  }\n","date":"2017-02-28 21:42:06","endLine":52,"groupId":"87","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHashCode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/4d/5189cd071e4d04a3a29c0f575600252dccd6cc.src","preCode":"  public void testHashCode() throws Exception {\n    Object arr;\n    arr = new long[] { 1 };\n    assertEquals(Arrays.hashCode((long[]) arr), ArrayUtil.hashCode(arr));\n    arr = new int[] { 1 };\n    assertEquals(Arrays.hashCode((int[]) arr), ArrayUtil.hashCode(arr));\n    arr = new short[] { 1 };\n    assertEquals(Arrays.hashCode((short[]) arr), ArrayUtil.hashCode(arr));\n    arr = new char[] { 1 };\n    assertEquals(Arrays.hashCode((char[]) arr), ArrayUtil.hashCode(arr));\n    arr = new byte[] { 1 };\n    assertEquals(Arrays.hashCode((byte[]) arr), ArrayUtil.hashCode(arr));\n    arr = new boolean[] { true };\n    assertEquals(Arrays.hashCode((boolean[]) arr), ArrayUtil.hashCode(arr));\n    arr = new float[] { 1f };\n    assertEquals(Arrays.hashCode((float[]) arr), ArrayUtil.hashCode(arr));\n    arr = new double[] { 1d };\n    assertEquals(Arrays.hashCode((double[]) arr), ArrayUtil.hashCode(arr));\n    arr = new Object[] { \"str\" };\n    assertEquals(Arrays.hashCode((Object[]) arr), ArrayUtil.hashCode(arr));\n\n    assertEquals(0, ArrayUtil.hashCode(null));\n    assertEquals(\"str\".hashCode(), ArrayUtil.hashCode(\"str\"));\n    assertEquals(Integer.valueOf(1).hashCode(), ArrayUtil.hashCode(1));\n  }\n","realPath":"src/test/java/org/apache/ibatis/reflection/ArrayUtilTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":28,"status":"B"},{"authorDate":"2017-02-28 21:37:29","commitOrder":1,"curCode":"  public void testToString() throws Exception {\n    Object arr;\n    arr = new long[] { 1 };\n    assertEquals(Arrays.toString((long[]) arr), ArrayUtil.toString(arr));\n    arr = new int[] { 1 };\n    assertEquals(Arrays.toString((int[]) arr), ArrayUtil.toString(arr));\n    arr = new short[] { 1 };\n    assertEquals(Arrays.toString((short[]) arr), ArrayUtil.toString(arr));\n    arr = new char[] { 1 };\n    assertEquals(Arrays.toString((char[]) arr), ArrayUtil.toString(arr));\n    arr = new byte[] { 1 };\n    assertEquals(Arrays.toString((byte[]) arr), ArrayUtil.toString(arr));\n    arr = new boolean[] { true };\n    assertEquals(Arrays.toString((boolean[]) arr), ArrayUtil.toString(arr));\n    arr = new float[] { 1f };\n    assertEquals(Arrays.toString((float[]) arr), ArrayUtil.toString(arr));\n    arr = new double[] { 1d };\n    assertEquals(Arrays.toString((double[]) arr), ArrayUtil.toString(arr));\n    arr = new Object[] { \"str\" };\n    assertEquals(Arrays.toString((Object[]) arr), ArrayUtil.toString(arr));\n\n    assertEquals(Integer.valueOf(1).toString(), ArrayUtil.toString(1));\n    assertEquals(\"null\", ArrayUtil.toString(null));\n  }\n","date":"2017-02-28 21:42:06","endLine":108,"groupId":"87","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testToString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/4d/5189cd071e4d04a3a29c0f575600252dccd6cc.src","preCode":"  public void testToString() throws Exception {\n    Object arr;\n    arr = new long[] { 1 };\n    assertEquals(Arrays.toString((long[]) arr), ArrayUtil.toString(arr));\n    arr = new int[] { 1 };\n    assertEquals(Arrays.toString((int[]) arr), ArrayUtil.toString(arr));\n    arr = new short[] { 1 };\n    assertEquals(Arrays.toString((short[]) arr), ArrayUtil.toString(arr));\n    arr = new char[] { 1 };\n    assertEquals(Arrays.toString((char[]) arr), ArrayUtil.toString(arr));\n    arr = new byte[] { 1 };\n    assertEquals(Arrays.toString((byte[]) arr), ArrayUtil.toString(arr));\n    arr = new boolean[] { true };\n    assertEquals(Arrays.toString((boolean[]) arr), ArrayUtil.toString(arr));\n    arr = new float[] { 1f };\n    assertEquals(Arrays.toString((float[]) arr), ArrayUtil.toString(arr));\n    arr = new double[] { 1d };\n    assertEquals(Arrays.toString((double[]) arr), ArrayUtil.toString(arr));\n    arr = new Object[] { \"str\" };\n    assertEquals(Arrays.toString((Object[]) arr), ArrayUtil.toString(arr));\n\n    assertEquals(Integer.valueOf(1).toString(), ArrayUtil.toString(1));\n    assertEquals(\"null\", ArrayUtil.toString(null));\n  }\n","realPath":"src/test/java/org/apache/ibatis/reflection/ArrayUtilTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"}],"commitId":"80de1316f9ed2faaa24ff2723592bc842f579bcf","commitMessage":"@@@fixes #927 Avoid wrapper object being created for each element when adding an array to CacheKey.\n","date":"2017-02-28 21:42:06","modifiedFileCount":"1","status":"B","submitter":"Iwao AVE!"},{"authorTime":"2019-01-23 20:49:49","codes":[{"authorDate":"2019-01-23 20:49:49","commitOrder":2,"curCode":"  void testHashCode() {\n    Object arr;\n    arr = new long[] { 1 };\n    assertEquals(Arrays.hashCode((long[]) arr), ArrayUtil.hashCode(arr));\n    arr = new int[] { 1 };\n    assertEquals(Arrays.hashCode((int[]) arr), ArrayUtil.hashCode(arr));\n    arr = new short[] { 1 };\n    assertEquals(Arrays.hashCode((short[]) arr), ArrayUtil.hashCode(arr));\n    arr = new char[] { 1 };\n    assertEquals(Arrays.hashCode((char[]) arr), ArrayUtil.hashCode(arr));\n    arr = new byte[] { 1 };\n    assertEquals(Arrays.hashCode((byte[]) arr), ArrayUtil.hashCode(arr));\n    arr = new boolean[] { true };\n    assertEquals(Arrays.hashCode((boolean[]) arr), ArrayUtil.hashCode(arr));\n    arr = new float[] { 1f };\n    assertEquals(Arrays.hashCode((float[]) arr), ArrayUtil.hashCode(arr));\n    arr = new double[] { 1d };\n    assertEquals(Arrays.hashCode((double[]) arr), ArrayUtil.hashCode(arr));\n    arr = new Object[] { \"str\" };\n    assertEquals(Arrays.hashCode((Object[]) arr), ArrayUtil.hashCode(arr));\n\n    assertEquals(0, ArrayUtil.hashCode(null));\n    assertEquals(\"str\".hashCode(), ArrayUtil.hashCode(\"str\"));\n    assertEquals(Integer.valueOf(1).hashCode(), ArrayUtil.hashCode(1));\n  }\n","date":"2019-01-23 20:49:49","endLine":51,"groupId":"103","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testHashCode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/dd/3f1a2ffab58027e3631fd6145c32d578161617.src","preCode":"  public void testHashCode() throws Exception {\n    Object arr;\n    arr = new long[] { 1 };\n    assertEquals(Arrays.hashCode((long[]) arr), ArrayUtil.hashCode(arr));\n    arr = new int[] { 1 };\n    assertEquals(Arrays.hashCode((int[]) arr), ArrayUtil.hashCode(arr));\n    arr = new short[] { 1 };\n    assertEquals(Arrays.hashCode((short[]) arr), ArrayUtil.hashCode(arr));\n    arr = new char[] { 1 };\n    assertEquals(Arrays.hashCode((char[]) arr), ArrayUtil.hashCode(arr));\n    arr = new byte[] { 1 };\n    assertEquals(Arrays.hashCode((byte[]) arr), ArrayUtil.hashCode(arr));\n    arr = new boolean[] { true };\n    assertEquals(Arrays.hashCode((boolean[]) arr), ArrayUtil.hashCode(arr));\n    arr = new float[] { 1f };\n    assertEquals(Arrays.hashCode((float[]) arr), ArrayUtil.hashCode(arr));\n    arr = new double[] { 1d };\n    assertEquals(Arrays.hashCode((double[]) arr), ArrayUtil.hashCode(arr));\n    arr = new Object[] { \"str\" };\n    assertEquals(Arrays.hashCode((Object[]) arr), ArrayUtil.hashCode(arr));\n\n    assertEquals(0, ArrayUtil.hashCode(null));\n    assertEquals(\"str\".hashCode(), ArrayUtil.hashCode(\"str\"));\n    assertEquals(Integer.valueOf(1).hashCode(), ArrayUtil.hashCode(1));\n  }\n","realPath":"src/test/java/org/apache/ibatis/reflection/ArrayUtilTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":27,"status":"M"},{"authorDate":"2019-01-23 20:49:49","commitOrder":2,"curCode":"  void testToString() {\n    Object arr;\n    arr = new long[] { 1 };\n    assertEquals(Arrays.toString((long[]) arr), ArrayUtil.toString(arr));\n    arr = new int[] { 1 };\n    assertEquals(Arrays.toString((int[]) arr), ArrayUtil.toString(arr));\n    arr = new short[] { 1 };\n    assertEquals(Arrays.toString((short[]) arr), ArrayUtil.toString(arr));\n    arr = new char[] { 1 };\n    assertEquals(Arrays.toString((char[]) arr), ArrayUtil.toString(arr));\n    arr = new byte[] { 1 };\n    assertEquals(Arrays.toString((byte[]) arr), ArrayUtil.toString(arr));\n    arr = new boolean[] { true };\n    assertEquals(Arrays.toString((boolean[]) arr), ArrayUtil.toString(arr));\n    arr = new float[] { 1f };\n    assertEquals(Arrays.toString((float[]) arr), ArrayUtil.toString(arr));\n    arr = new double[] { 1d };\n    assertEquals(Arrays.toString((double[]) arr), ArrayUtil.toString(arr));\n    arr = new Object[] { \"str\" };\n    assertEquals(Arrays.toString((Object[]) arr), ArrayUtil.toString(arr));\n\n    assertEquals(Integer.valueOf(1).toString(), ArrayUtil.toString(1));\n    assertEquals(\"null\", ArrayUtil.toString(null));\n  }\n","date":"2019-01-23 20:49:49","endLine":107,"groupId":"103","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testToString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/dd/3f1a2ffab58027e3631fd6145c32d578161617.src","preCode":"  public void testToString() throws Exception {\n    Object arr;\n    arr = new long[] { 1 };\n    assertEquals(Arrays.toString((long[]) arr), ArrayUtil.toString(arr));\n    arr = new int[] { 1 };\n    assertEquals(Arrays.toString((int[]) arr), ArrayUtil.toString(arr));\n    arr = new short[] { 1 };\n    assertEquals(Arrays.toString((short[]) arr), ArrayUtil.toString(arr));\n    arr = new char[] { 1 };\n    assertEquals(Arrays.toString((char[]) arr), ArrayUtil.toString(arr));\n    arr = new byte[] { 1 };\n    assertEquals(Arrays.toString((byte[]) arr), ArrayUtil.toString(arr));\n    arr = new boolean[] { true };\n    assertEquals(Arrays.toString((boolean[]) arr), ArrayUtil.toString(arr));\n    arr = new float[] { 1f };\n    assertEquals(Arrays.toString((float[]) arr), ArrayUtil.toString(arr));\n    arr = new double[] { 1d };\n    assertEquals(Arrays.toString((double[]) arr), ArrayUtil.toString(arr));\n    arr = new Object[] { \"str\" };\n    assertEquals(Arrays.toString((Object[]) arr), ArrayUtil.toString(arr));\n\n    assertEquals(Integer.valueOf(1).toString(), ArrayUtil.toString(1));\n    assertEquals(\"null\", ArrayUtil.toString(null));\n  }\n","realPath":"src/test/java/org/apache/ibatis/reflection/ArrayUtilTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"674b9c0e82a181d21ed0240291e79f73f36e2e53","commitMessage":"@@@Merge pull request #1460 from kazuki43zoo/polishing-tests\n\nPolishing tests","date":"2019-01-23 20:49:49","modifiedFileCount":"291","status":"M","submitter":"Kazuki Shimizu"}]
