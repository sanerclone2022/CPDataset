[{"authorTime":"2011-12-09 08:03:24","codes":[{"authorDate":"2011-12-09 08:03:24","commitOrder":1,"curCode":"  public void shouldTestCacheKeysEqual() {\n    Date date = new Date();\n    CacheKey key1 = new CacheKey(new Object[]{1, \"hello\", null, new Date(date.getTime())});\n    CacheKey key2 = new CacheKey(new Object[]{1, \"hello\", null, new Date(date.getTime())});\n    assertTrue(key1.equals(key2));\n    assertTrue(key2.equals(key1));\n    assertTrue(key1.hashCode() == key2.hashCode());\n    assertTrue(key1.toString().equals(key2.toString()));\n  }\n","date":"2011-12-09 08:03:24","endLine":34,"groupId":"1574","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldTestCacheKeysEqual","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/05/099eb35d97ae1b87db873ee0497e2105b90a0d.src","preCode":"  public void shouldTestCacheKeysEqual() {\n    Date date = new Date();\n    CacheKey key1 = new CacheKey(new Object[]{1, \"hello\", null, new Date(date.getTime())});\n    CacheKey key2 = new CacheKey(new Object[]{1, \"hello\", null, new Date(date.getTime())});\n    assertTrue(key1.equals(key2));\n    assertTrue(key2.equals(key1));\n    assertTrue(key1.hashCode() == key2.hashCode());\n    assertTrue(key1.toString().equals(key2.toString()));\n  }\n","realPath":"src/test/java/org/apache/ibatis/cache/CacheKeyTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":26,"status":"B"},{"authorDate":"2011-12-09 08:03:24","commitOrder":1,"curCode":"  public void shouldTestCacheKeysNotEqualDueToDateDifference() throws Exception {\n    CacheKey key1 = new CacheKey(new Object[]{1, \"hello\", null, new Date()});\n    Thread.sleep(1000);\n    CacheKey key2 = new CacheKey(new Object[]{1, \"hello\", null, new Date()});\n    assertFalse(key1.equals(key2));\n    assertFalse(key2.equals(key1));\n    assertFalse(key1.hashCode() == key2.hashCode());\n    assertFalse(key1.toString().equals(key2.toString()));\n  }\n","date":"2011-12-09 08:03:24","endLine":45,"groupId":"1576","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldTestCacheKeysNotEqualDueToDateDifference","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/05/099eb35d97ae1b87db873ee0497e2105b90a0d.src","preCode":"  public void shouldTestCacheKeysNotEqualDueToDateDifference() throws Exception {\n    CacheKey key1 = new CacheKey(new Object[]{1, \"hello\", null, new Date()});\n    Thread.sleep(1000);\n    CacheKey key2 = new CacheKey(new Object[]{1, \"hello\", null, new Date()});\n    assertFalse(key1.equals(key2));\n    assertFalse(key2.equals(key1));\n    assertFalse(key1.hashCode() == key2.hashCode());\n    assertFalse(key1.toString().equals(key2.toString()));\n  }\n","realPath":"src/test/java/org/apache/ibatis/cache/CacheKeyTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"}],"commitId":"e8cc000886bd21814f8ac91fc3dfc5c2104afa98","commitMessage":"@@@added lincese headers\n","date":"2011-12-09 08:03:24","modifiedFileCount":"769","status":"B","submitter":"Simone Tripodi"},{"authorTime":"2019-01-23 20:49:49","codes":[{"authorDate":"2019-01-23 20:49:49","commitOrder":2,"curCode":"  void shouldTestCacheKeysEqual() {\n    Date date = new Date();\n    CacheKey key1 = new CacheKey(new Object[] { 1, \"hello\", null, new Date(date.getTime()) });\n    CacheKey key2 = new CacheKey(new Object[] { 1, \"hello\", null, new Date(date.getTime()) });\n    assertTrue(key1.equals(key2));\n    assertTrue(key2.equals(key1));\n    assertTrue(key1.hashCode() == key2.hashCode());\n    assertTrue(key1.toString().equals(key2.toString()));\n  }\n","date":"2019-01-23 20:49:49","endLine":41,"groupId":"1574","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldTestCacheKeysEqual","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/26/3705d1247ec2bf5104aaf46a49cbf1de12eb38.src","preCode":"  public void shouldTestCacheKeysEqual() {\n    Date date = new Date();\n    CacheKey key1 = new CacheKey(new Object[] { 1, \"hello\", null, new Date(date.getTime()) });\n    CacheKey key2 = new CacheKey(new Object[] { 1, \"hello\", null, new Date(date.getTime()) });\n    assertTrue(key1.equals(key2));\n    assertTrue(key2.equals(key1));\n    assertTrue(key1.hashCode() == key2.hashCode());\n    assertTrue(key1.toString().equals(key2.toString()));\n  }\n","realPath":"src/test/java/org/apache/ibatis/cache/CacheKeyTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"},{"authorDate":"2019-01-23 20:49:49","commitOrder":2,"curCode":"  void shouldTestCacheKeysNotEqualDueToDateDifference() throws Exception {\n    CacheKey key1 = new CacheKey(new Object[] { 1, \"hello\", null, new Date() });\n    Thread.sleep(1000);\n    CacheKey key2 = new CacheKey(new Object[] { 1, \"hello\", null, new Date() });\n    assertFalse(key1.equals(key2));\n    assertFalse(key2.equals(key1));\n    assertFalse(key1.hashCode() == key2.hashCode());\n    assertFalse(key1.toString().equals(key2.toString()));\n  }\n","date":"2019-01-23 20:49:49","endLine":52,"groupId":"1576","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldTestCacheKeysNotEqualDueToDateDifference","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/26/3705d1247ec2bf5104aaf46a49cbf1de12eb38.src","preCode":"  public void shouldTestCacheKeysNotEqualDueToDateDifference() throws Exception {\n    CacheKey key1 = new CacheKey(new Object[] { 1, \"hello\", null, new Date() });\n    Thread.sleep(1000);\n    CacheKey key2 = new CacheKey(new Object[] { 1, \"hello\", null, new Date() });\n    assertFalse(key1.equals(key2));\n    assertFalse(key2.equals(key1));\n    assertFalse(key1.hashCode() == key2.hashCode());\n    assertFalse(key1.toString().equals(key2.toString()));\n  }\n","realPath":"src/test/java/org/apache/ibatis/cache/CacheKeyTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"674b9c0e82a181d21ed0240291e79f73f36e2e53","commitMessage":"@@@Merge pull request #1460 from kazuki43zoo/polishing-tests\n\nPolishing tests","date":"2019-01-23 20:49:49","modifiedFileCount":"291","status":"M","submitter":"Kazuki Shimizu"},{"authorTime":"2019-06-27 07:56:01","codes":[{"authorDate":"2019-06-27 07:56:01","commitOrder":3,"curCode":"  void shouldTestCacheKeysEqual() {\n    Date date = new Date();\n    CacheKey key1 = new CacheKey(new Object[] { 1, \"hello\", null, new Date(date.getTime()) });\n    CacheKey key2 = new CacheKey(new Object[] { 1, \"hello\", null, new Date(date.getTime()) });\n    assertEquals(key1, key2);\n    assertEquals(key2, key1);\n    assertEquals(key1.hashCode(), key2.hashCode());\n    assertEquals(key1.toString(), key2.toString());\n  }\n","date":"2019-06-27 07:56:01","endLine":41,"groupId":"10717","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldTestCacheKeysEqual","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/70/68e70e0a9c7e2f6131a4450864bf4c3d93fa0e.src","preCode":"  void shouldTestCacheKeysEqual() {\n    Date date = new Date();\n    CacheKey key1 = new CacheKey(new Object[] { 1, \"hello\", null, new Date(date.getTime()) });\n    CacheKey key2 = new CacheKey(new Object[] { 1, \"hello\", null, new Date(date.getTime()) });\n    assertTrue(key1.equals(key2));\n    assertTrue(key2.equals(key1));\n    assertTrue(key1.hashCode() == key2.hashCode());\n    assertTrue(key1.toString().equals(key2.toString()));\n  }\n","realPath":"src/test/java/org/apache/ibatis/cache/CacheKeyTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"},{"authorDate":"2019-06-27 07:56:01","commitOrder":3,"curCode":"  void shouldTestCacheKeysNotEqualDueToDateDifference() throws Exception {\n    CacheKey key1 = new CacheKey(new Object[] { 1, \"hello\", null, new Date() });\n    Thread.sleep(1000);\n    CacheKey key2 = new CacheKey(new Object[] { 1, \"hello\", null, new Date() });\n    assertNotEquals(key1, key2);\n    assertNotEquals(key2, key1);\n    assertNotEquals(key1.hashCode(), key2.hashCode());\n    assertNotEquals(key1.toString(), key2.toString());\n  }\n","date":"2019-06-27 07:56:01","endLine":52,"groupId":"10717","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldTestCacheKeysNotEqualDueToDateDifference","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/70/68e70e0a9c7e2f6131a4450864bf4c3d93fa0e.src","preCode":"  void shouldTestCacheKeysNotEqualDueToDateDifference() throws Exception {\n    CacheKey key1 = new CacheKey(new Object[] { 1, \"hello\", null, new Date() });\n    Thread.sleep(1000);\n    CacheKey key2 = new CacheKey(new Object[] { 1, \"hello\", null, new Date() });\n    assertFalse(key1.equals(key2));\n    assertFalse(key2.equals(key1));\n    assertFalse(key1.hashCode() == key2.hashCode());\n    assertFalse(key1.toString().equals(key2.toString()));\n  }\n","realPath":"src/test/java/org/apache/ibatis/cache/CacheKeyTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"b9742dd4ab8588c9340e3072f45422b932f9f89e","commitMessage":"@@@Merge pull request #1583 from slievrly/junit\n\nsimplify junit","date":"2019-06-27 07:56:01","modifiedFileCount":"4","status":"M","submitter":"Jeremy Landis"}]
