[{"authorTime":"2015-11-08 17:45:27","codes":[{"authorDate":"2015-11-08 17:45:27","commitOrder":1,"curCode":"    public void testForArg() {\n        PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);\n        {\n            Person person = personMapper.findOneUsingConstructor(1);\n            assertThat(person.getId(), is(1));\n            assertThat(person.getFirstName(), is(\"John\"));\n            assertThat(person.getLastName(), is(\"Smith\"));\n            assertThat(person.getPersonType(), is(Person.PersonType.PERSON)); \r\n        }\n        {\n            Person employee = personMapper.findOneUsingConstructor(2);\n            assertThat(employee.getId(), is(2));\n            assertThat(employee.getFirstName(), is(\"Mike\"));\n            assertThat(employee.getLastName(), is(\"Jordan\"));\n            assertThat(employee.getPersonType(), is(Person.PersonType.EMPLOYEE)); \r\n        }\n    }\n","date":"2015-11-08 17:45:27","endLine":105,"groupId":"2229","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testForArg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/8c/377a551e9fa4b7337d129f76703b92bbb2e42a.src","preCode":"    public void testForArg() {\n        PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);\n        {\n            Person person = personMapper.findOneUsingConstructor(1);\n            assertThat(person.getId(), is(1));\n            assertThat(person.getFirstName(), is(\"John\"));\n            assertThat(person.getLastName(), is(\"Smith\"));\n            assertThat(person.getPersonType(), is(Person.PersonType.PERSON)); \r\n        }\n        {\n            Person employee = personMapper.findOneUsingConstructor(2);\n            assertThat(employee.getId(), is(2));\n            assertThat(employee.getFirstName(), is(\"Mike\"));\n            assertThat(employee.getLastName(), is(\"Jordan\"));\n            assertThat(employee.getPersonType(), is(Person.PersonType.EMPLOYEE)); \r\n        }\n    }\n","realPath":"src/test/java/org/apache/ibatis/submitted/enumtypehandler_on_annotation/EnumTypeHandlerUsingAnnotationTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"},{"authorDate":"2015-11-08 17:45:27","commitOrder":1,"curCode":"    public void testForTypeDiscriminator() {\n        PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);\n        {\n            Person person = personMapper.findOneUsingTypeDiscriminator(1);\n            assertTrue(person.getClass() == Person.class); \r\n            assertThat(person.getId(), is(1));\n            assertThat(person.getFirstName(), is(\"John\"));\n            assertThat(person.getLastName(), is(\"Smith\"));\n            assertThat(person.getPersonType(), is(Person.PersonType.PERSON));\n        }\n        {\n            Person employee = personMapper.findOneUsingTypeDiscriminator(2);\n            assertTrue(employee.getClass() == Employee.class); \r\n            assertThat(employee.getId(), is(2));\n            assertThat(employee.getFirstName(), is(\"Mike\"));\n            assertThat(employee.getLastName(), is(\"Jordan\"));\n            assertThat(employee.getPersonType(), is(Person.PersonType.EMPLOYEE));\n        }\n    }\n","date":"2015-11-08 17:45:27","endLine":145,"groupId":"2233","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testForTypeDiscriminator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/8c/377a551e9fa4b7337d129f76703b92bbb2e42a.src","preCode":"    public void testForTypeDiscriminator() {\n        PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);\n        {\n            Person person = personMapper.findOneUsingTypeDiscriminator(1);\n            assertTrue(person.getClass() == Person.class); \r\n            assertThat(person.getId(), is(1));\n            assertThat(person.getFirstName(), is(\"John\"));\n            assertThat(person.getLastName(), is(\"Smith\"));\n            assertThat(person.getPersonType(), is(Person.PersonType.PERSON));\n        }\n        {\n            Person employee = personMapper.findOneUsingTypeDiscriminator(2);\n            assertTrue(employee.getClass() == Employee.class); \r\n            assertThat(employee.getId(), is(2));\n            assertThat(employee.getFirstName(), is(\"Mike\"));\n            assertThat(employee.getLastName(), is(\"Jordan\"));\n            assertThat(employee.getPersonType(), is(Person.PersonType.EMPLOYEE));\n        }\n    }\n","realPath":"src/test/java/org/apache/ibatis/submitted/enumtypehandler_on_annotation/EnumTypeHandlerUsingAnnotationTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"B"}],"commitId":"6d33f25c81605affdd0cef86c9ae6f17103511b4","commitMessage":"@@@Merge pull request #518 from kazuki43zoo/issues/444_allow-EnumTypeHandler-on-annotation-config\n\nAllow TypeHandler for Enum on annotation configuration #444","date":"2015-11-08 17:45:27","modifiedFileCount":"4","status":"B","submitter":"Eduardo Macarron"},{"authorTime":"2017-04-17 08:43:56","codes":[{"authorDate":"2017-04-17 08:43:56","commitOrder":2,"curCode":"    public void testForArg() {\n        PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);\n        {\n            Person person = personMapper.findOneUsingConstructor(1);\n            assertThat(person.getId()).isEqualTo(1);\n            assertThat(person.getFirstName()).isEqualTo(\"John\");\n            assertThat(person.getLastName()).isEqualTo(\"Smith\");\n            assertThat(person.getPersonType()).isEqualTo(Person.PersonType.PERSON); \r\n        }\n        {\n            Person employee = personMapper.findOneUsingConstructor(2);\n            assertThat(employee.getId()).isEqualTo(2);\n            assertThat(employee.getFirstName()).isEqualTo(\"Mike\");\n            assertThat(employee.getLastName()).isEqualTo(\"Jordan\");\n            assertThat(employee.getPersonType()).isEqualTo(Person.PersonType.EMPLOYEE); \r\n        }\n    }\n","date":"2017-04-17 08:43:56","endLine":105,"groupId":"521","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testForArg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/44/4d06d15a34095cdf65b5383a17690efc650579.src","preCode":"    public void testForArg() {\n        PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);\n        {\n            Person person = personMapper.findOneUsingConstructor(1);\n            assertThat(person.getId(), is(1));\n            assertThat(person.getFirstName(), is(\"John\"));\n            assertThat(person.getLastName(), is(\"Smith\"));\n            assertThat(person.getPersonType(), is(Person.PersonType.PERSON)); \r\n        }\n        {\n            Person employee = personMapper.findOneUsingConstructor(2);\n            assertThat(employee.getId(), is(2));\n            assertThat(employee.getFirstName(), is(\"Mike\"));\n            assertThat(employee.getLastName(), is(\"Jordan\"));\n            assertThat(employee.getPersonType(), is(Person.PersonType.EMPLOYEE)); \r\n        }\n    }\n","realPath":"src/test/java/org/apache/ibatis/submitted/enumtypehandler_on_annotation/EnumTypeHandlerUsingAnnotationTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2017-04-17 08:43:56","commitOrder":2,"curCode":"    public void testForTypeDiscriminator() {\n        PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);\n        {\n            Person person = personMapper.findOneUsingTypeDiscriminator(1);\n            assertThat(person.getClass()).isEqualTo(Person.class); \r\n            assertThat(person.getId()).isEqualTo(1);\n            assertThat(person.getFirstName()).isEqualTo(\"John\");\n            assertThat(person.getLastName()).isEqualTo(\"Smith\");\n            assertThat(person.getPersonType()).isEqualTo(Person.PersonType.PERSON);\n        }\n        {\n            Person employee = personMapper.findOneUsingTypeDiscriminator(2);\n            assertThat(employee.getClass()).isEqualTo(Employee.class); \r\n            assertThat(employee.getId()).isEqualTo(2);\n            assertThat(employee.getFirstName()).isEqualTo(\"Mike\");\n            assertThat(employee.getLastName()).isEqualTo(\"Jordan\");\n            assertThat(employee.getPersonType()).isEqualTo(Person.PersonType.EMPLOYEE);\n        }\n    }\n","date":"2017-04-17 08:43:56","endLine":145,"groupId":"522","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testForTypeDiscriminator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/44/4d06d15a34095cdf65b5383a17690efc650579.src","preCode":"    public void testForTypeDiscriminator() {\n        PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);\n        {\n            Person person = personMapper.findOneUsingTypeDiscriminator(1);\n            assertTrue(person.getClass() == Person.class); \r\n            assertThat(person.getId(), is(1));\n            assertThat(person.getFirstName(), is(\"John\"));\n            assertThat(person.getLastName(), is(\"Smith\"));\n            assertThat(person.getPersonType(), is(Person.PersonType.PERSON));\n        }\n        {\n            Person employee = personMapper.findOneUsingTypeDiscriminator(2);\n            assertTrue(employee.getClass() == Employee.class); \r\n            assertThat(employee.getId(), is(2));\n            assertThat(employee.getFirstName(), is(\"Mike\"));\n            assertThat(employee.getLastName(), is(\"Jordan\"));\n            assertThat(employee.getPersonType(), is(Person.PersonType.EMPLOYEE));\n        }\n    }\n","realPath":"src/test/java/org/apache/ibatis/submitted/enumtypehandler_on_annotation/EnumTypeHandlerUsingAnnotationTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"32bf5f811e72399b0f0880106b53907b832ac00a","commitMessage":"@@@Merge pull request #977 from hazendaz/master\n\n[ci] Use assertj/fluent exceptions for cleaner unit testing","date":"2017-04-17 08:43:56","modifiedFileCount":"34","status":"M","submitter":"Jeremy Landis"},{"authorTime":"2019-01-23 20:49:49","codes":[{"authorDate":"2019-01-23 20:49:49","commitOrder":3,"curCode":"    void testForArg() {\n        PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);\n        {\n            Person person = personMapper.findOneUsingConstructor(1);\n            assertThat(person.getId()).isEqualTo(1);\n            assertThat(person.getFirstName()).isEqualTo(\"John\");\n            assertThat(person.getLastName()).isEqualTo(\"Smith\");\n            assertThat(person.getPersonType()).isEqualTo(Person.PersonType.PERSON); \r\n        }\n        {\n            Person employee = personMapper.findOneUsingConstructor(2);\n            assertThat(employee.getId()).isEqualTo(2);\n            assertThat(employee.getFirstName()).isEqualTo(\"Mike\");\n            assertThat(employee.getLastName()).isEqualTo(\"Jordan\");\n            assertThat(employee.getPersonType()).isEqualTo(Person.PersonType.EMPLOYEE); \r\n        }\n    }\n","date":"2019-01-23 20:49:49","endLine":86,"groupId":"10459","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testForArg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/7c/5c47a7a95a5b7b956395477f19a9455c3ab293.src","preCode":"    public void testForArg() {\n        PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);\n        {\n            Person person = personMapper.findOneUsingConstructor(1);\n            assertThat(person.getId()).isEqualTo(1);\n            assertThat(person.getFirstName()).isEqualTo(\"John\");\n            assertThat(person.getLastName()).isEqualTo(\"Smith\");\n            assertThat(person.getPersonType()).isEqualTo(Person.PersonType.PERSON); \r\n        }\n        {\n            Person employee = personMapper.findOneUsingConstructor(2);\n            assertThat(employee.getId()).isEqualTo(2);\n            assertThat(employee.getFirstName()).isEqualTo(\"Mike\");\n            assertThat(employee.getLastName()).isEqualTo(\"Jordan\");\n            assertThat(employee.getPersonType()).isEqualTo(Person.PersonType.EMPLOYEE); \r\n        }\n    }\n","realPath":"src/test/java/org/apache/ibatis/submitted/enumtypehandler_on_annotation/EnumTypeHandlerUsingAnnotationTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2019-01-23 20:49:49","commitOrder":3,"curCode":"    void testForTypeDiscriminator() {\n        PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);\n        {\n            Person person = personMapper.findOneUsingTypeDiscriminator(1);\n            assertThat(person.getClass()).isEqualTo(Person.class); \r\n            assertThat(person.getId()).isEqualTo(1);\n            assertThat(person.getFirstName()).isEqualTo(\"John\");\n            assertThat(person.getLastName()).isEqualTo(\"Smith\");\n            assertThat(person.getPersonType()).isEqualTo(Person.PersonType.PERSON);\n        }\n        {\n            Person employee = personMapper.findOneUsingTypeDiscriminator(2);\n            assertThat(employee.getClass()).isEqualTo(Employee.class); \r\n            assertThat(employee.getId()).isEqualTo(2);\n            assertThat(employee.getFirstName()).isEqualTo(\"Mike\");\n            assertThat(employee.getLastName()).isEqualTo(\"Jordan\");\n            assertThat(employee.getPersonType()).isEqualTo(Person.PersonType.EMPLOYEE);\n        }\n    }\n","date":"2019-01-23 20:49:49","endLine":126,"groupId":"10459","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testForTypeDiscriminator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mybatis3-10-0.7/blobInfo/CC_OUT/blobs/7c/5c47a7a95a5b7b956395477f19a9455c3ab293.src","preCode":"    public void testForTypeDiscriminator() {\n        PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);\n        {\n            Person person = personMapper.findOneUsingTypeDiscriminator(1);\n            assertThat(person.getClass()).isEqualTo(Person.class); \r\n            assertThat(person.getId()).isEqualTo(1);\n            assertThat(person.getFirstName()).isEqualTo(\"John\");\n            assertThat(person.getLastName()).isEqualTo(\"Smith\");\n            assertThat(person.getPersonType()).isEqualTo(Person.PersonType.PERSON);\n        }\n        {\n            Person employee = personMapper.findOneUsingTypeDiscriminator(2);\n            assertThat(employee.getClass()).isEqualTo(Employee.class); \r\n            assertThat(employee.getId()).isEqualTo(2);\n            assertThat(employee.getFirstName()).isEqualTo(\"Mike\");\n            assertThat(employee.getLastName()).isEqualTo(\"Jordan\");\n            assertThat(employee.getPersonType()).isEqualTo(Person.PersonType.EMPLOYEE);\n        }\n    }\n","realPath":"src/test/java/org/apache/ibatis/submitted/enumtypehandler_on_annotation/EnumTypeHandlerUsingAnnotationTest.java","repoName":"mybatis3","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"674b9c0e82a181d21ed0240291e79f73f36e2e53","commitMessage":"@@@Merge pull request #1460 from kazuki43zoo/polishing-tests\n\nPolishing tests","date":"2019-01-23 20:49:49","modifiedFileCount":"291","status":"M","submitter":"Kazuki Shimizu"}]
