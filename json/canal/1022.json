[{"authorTime":"2019-08-22 23:03:22","codes":[{"authorDate":"2019-08-22 23:03:22","commitOrder":1,"curCode":"    public void testRollback() {\n        int bufferSize = 16;\n        MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.setBufferSize(bufferSize);\n        eventStore.start();\n\n        for (int i = 0; i < bufferSize / 2; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L + i));\n            sleep(100L);\n            Assert.assertTrue(result);\n        }\n\n        sleep(50L);\n        Position first = eventStore.getFirstPosition();\n        Position lastest = eventStore.getLatestPosition();\n        Assert.assertEquals(first, CanalEventUtils.createPosition(buildEvent(\"1\", 1L, 1L)));\n        Assert.assertEquals(lastest, CanalEventUtils.createPosition(buildEvent(\"1\", 1L, 1L + bufferSize / 2 - 1)));\n\n        System.out.println(\"start get\");\n        Events<Event> entrys1 = eventStore.tryGet(first, bufferSize);\n        System.out.println(\"first get size : \" + entrys1.getEvents().size());\n\n        eventStore.rollback();\n\n        entrys1 = eventStore.tryGet(first, bufferSize);\n        System.out.println(\"after rollback get size : \" + entrys1.getEvents().size());\n        Assert.assertTrue(entrys1.getEvents().size() == bufferSize / 2);\n\n        \r\n        for (int i = bufferSize / 2; i < bufferSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L + i));\n            sleep(100L);\n            Assert.assertTrue(result);\n        }\n\n        Events<Event> entrys2 = eventStore.tryGet(entrys1.getPositionRange().getEnd(), bufferSize);\n        System.out.println(\"second get size : \" + entrys2.getEvents().size());\n\n        eventStore.rollback();\n\n        entrys2 = eventStore.tryGet(entrys1.getPositionRange().getEnd(), bufferSize);\n        System.out.println(\"after rollback get size : \" + entrys2.getEvents().size());\n        Assert.assertTrue(entrys2.getEvents().size() == bufferSize);\n\n        first = eventStore.getFirstPosition();\n        lastest = eventStore.getLatestPosition();\n        List<Event> entrys = new ArrayList<Event>(entrys2.getEvents());\n        Assert.assertTrue(entrys.size() == bufferSize);\n        Assert.assertEquals(first, entrys2.getPositionRange().getStart());\n        Assert.assertEquals(lastest, entrys2.getPositionRange().getEnd());\n\n        Assert.assertEquals(first, CanalEventUtils.createPosition(entrys.get(0)));\n        Assert.assertEquals(lastest, CanalEventUtils.createPosition(entrys.get(bufferSize - 1)));\n        eventStore.stop();\n    }\n","date":"2019-08-22 23:03:22","endLine":78,"groupId":"489","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/10/86cfc2aed96149d38331833c2ec57e9de5ed28.src","preCode":"    public void testRollback() {\n        int bufferSize = 16;\n        MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.setBufferSize(bufferSize);\n        eventStore.start();\n\n        for (int i = 0; i < bufferSize / 2; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L + i));\n            sleep(100L);\n            Assert.assertTrue(result);\n        }\n\n        sleep(50L);\n        Position first = eventStore.getFirstPosition();\n        Position lastest = eventStore.getLatestPosition();\n        Assert.assertEquals(first, CanalEventUtils.createPosition(buildEvent(\"1\", 1L, 1L)));\n        Assert.assertEquals(lastest, CanalEventUtils.createPosition(buildEvent(\"1\", 1L, 1L + bufferSize / 2 - 1)));\n\n        System.out.println(\"start get\");\n        Events<Event> entrys1 = eventStore.tryGet(first, bufferSize);\n        System.out.println(\"first get size : \" + entrys1.getEvents().size());\n\n        eventStore.rollback();\n\n        entrys1 = eventStore.tryGet(first, bufferSize);\n        System.out.println(\"after rollback get size : \" + entrys1.getEvents().size());\n        Assert.assertTrue(entrys1.getEvents().size() == bufferSize / 2);\n\n        \r\n        for (int i = bufferSize / 2; i < bufferSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L + i));\n            sleep(100L);\n            Assert.assertTrue(result);\n        }\n\n        Events<Event> entrys2 = eventStore.tryGet(entrys1.getPositionRange().getEnd(), bufferSize);\n        System.out.println(\"second get size : \" + entrys2.getEvents().size());\n\n        eventStore.rollback();\n\n        entrys2 = eventStore.tryGet(entrys1.getPositionRange().getEnd(), bufferSize);\n        System.out.println(\"after rollback get size : \" + entrys2.getEvents().size());\n        Assert.assertTrue(entrys2.getEvents().size() == bufferSize);\n\n        first = eventStore.getFirstPosition();\n        lastest = eventStore.getLatestPosition();\n        List<Event> entrys = new ArrayList<Event>(entrys2.getEvents());\n        Assert.assertTrue(entrys.size() == bufferSize);\n        Assert.assertEquals(first, entrys2.getPositionRange().getStart());\n        Assert.assertEquals(lastest, entrys2.getPositionRange().getEnd());\n\n        Assert.assertEquals(first, CanalEventUtils.createPosition(entrys.get(0)));\n        Assert.assertEquals(lastest, CanalEventUtils.createPosition(entrys.get(bufferSize - 1)));\n        eventStore.stop();\n    }\n","realPath":"store/src/test/java/com/alibaba/otter/canal/store/memory/buffer/MemoryEventStoreRollbackAndAckTest.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":24,"status":"B"},{"authorDate":"2019-08-22 23:03:22","commitOrder":1,"curCode":"    public void testRollback() {\n        int bufferSize = 16;\n        MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.setBufferSize(bufferSize);\n        eventStore.setBatchMode(BatchMode.MEMSIZE);\n        eventStore.start();\n\n        for (int i = 0; i < bufferSize / 2; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L + i));\n            sleep(100L);\n            Assert.assertTrue(result);\n        }\n\n        sleep(50L);\n        Position first = eventStore.getFirstPosition();\n        Position lastest = eventStore.getLatestPosition();\n        Assert.assertEquals(first, CanalEventUtils.createPosition(buildEvent(\"1\", 1L, 1L)));\n        Assert.assertEquals(lastest, CanalEventUtils.createPosition(buildEvent(\"1\", 1L, 1L + bufferSize / 2 - 1)));\n\n        System.out.println(\"start get\");\n        Events<Event> entrys1 = eventStore.tryGet(first, bufferSize);\n        System.out.println(\"first get size : \" + entrys1.getEvents().size());\n\n        eventStore.rollback();\n\n        entrys1 = eventStore.tryGet(first, bufferSize);\n        System.out.println(\"after rollback get size : \" + entrys1.getEvents().size());\n        Assert.assertTrue(entrys1.getEvents().size() == bufferSize / 2);\n\n        \r\n        for (int i = bufferSize / 2; i < bufferSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L + i));\n            sleep(100L);\n            Assert.assertTrue(result);\n        }\n\n        Events<Event> entrys2 = eventStore.tryGet(entrys1.getPositionRange().getEnd(), bufferSize);\n        System.out.println(\"second get size : \" + entrys2.getEvents().size());\n\n        eventStore.rollback();\n\n        entrys2 = eventStore.tryGet(entrys1.getPositionRange().getEnd(), bufferSize);\n        System.out.println(\"after rollback get size : \" + entrys2.getEvents().size());\n        Assert.assertTrue(entrys2.getEvents().size() == bufferSize);\n\n        first = eventStore.getFirstPosition();\n        lastest = eventStore.getLatestPosition();\n        List<Event> entrys = new ArrayList<Event>(entrys2.getEvents());\n        Assert.assertTrue(entrys.size() == bufferSize);\n        Assert.assertEquals(first, entrys2.getPositionRange().getStart());\n        Assert.assertEquals(lastest, entrys2.getPositionRange().getEnd());\n\n        Assert.assertEquals(first, CanalEventUtils.createPosition(entrys.get(0)));\n        Assert.assertEquals(lastest, CanalEventUtils.createPosition(entrys.get(bufferSize - 1)));\n        eventStore.stop();\n    }\n","date":"2019-08-22 23:03:22","endLine":256,"groupId":"489","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/d6/4c22bbae698bd1bce298287c89bc7ae223d829.src","preCode":"    public void testRollback() {\n        int bufferSize = 16;\n        MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.setBufferSize(bufferSize);\n        eventStore.setBatchMode(BatchMode.MEMSIZE);\n        eventStore.start();\n\n        for (int i = 0; i < bufferSize / 2; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L + i));\n            sleep(100L);\n            Assert.assertTrue(result);\n        }\n\n        sleep(50L);\n        Position first = eventStore.getFirstPosition();\n        Position lastest = eventStore.getLatestPosition();\n        Assert.assertEquals(first, CanalEventUtils.createPosition(buildEvent(\"1\", 1L, 1L)));\n        Assert.assertEquals(lastest, CanalEventUtils.createPosition(buildEvent(\"1\", 1L, 1L + bufferSize / 2 - 1)));\n\n        System.out.println(\"start get\");\n        Events<Event> entrys1 = eventStore.tryGet(first, bufferSize);\n        System.out.println(\"first get size : \" + entrys1.getEvents().size());\n\n        eventStore.rollback();\n\n        entrys1 = eventStore.tryGet(first, bufferSize);\n        System.out.println(\"after rollback get size : \" + entrys1.getEvents().size());\n        Assert.assertTrue(entrys1.getEvents().size() == bufferSize / 2);\n\n        \r\n        for (int i = bufferSize / 2; i < bufferSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L + i));\n            sleep(100L);\n            Assert.assertTrue(result);\n        }\n\n        Events<Event> entrys2 = eventStore.tryGet(entrys1.getPositionRange().getEnd(), bufferSize);\n        System.out.println(\"second get size : \" + entrys2.getEvents().size());\n\n        eventStore.rollback();\n\n        entrys2 = eventStore.tryGet(entrys1.getPositionRange().getEnd(), bufferSize);\n        System.out.println(\"after rollback get size : \" + entrys2.getEvents().size());\n        Assert.assertTrue(entrys2.getEvents().size() == bufferSize);\n\n        first = eventStore.getFirstPosition();\n        lastest = eventStore.getLatestPosition();\n        List<Event> entrys = new ArrayList<Event>(entrys2.getEvents());\n        Assert.assertTrue(entrys.size() == bufferSize);\n        Assert.assertEquals(first, entrys2.getPositionRange().getStart());\n        Assert.assertEquals(lastest, entrys2.getPositionRange().getEnd());\n\n        Assert.assertEquals(first, CanalEventUtils.createPosition(entrys.get(0)));\n        Assert.assertEquals(lastest, CanalEventUtils.createPosition(entrys.get(bufferSize - 1)));\n        eventStore.stop();\n    }\n","realPath":"store/src/test/java/com/alibaba/otter/canal/store/memory/buffer/MemoryEventStoreMemBatchTest.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"B"}],"commitId":"bd974e3da82dd0be95ed1f7fb55828463aba2835","commitMessage":"@@@upgrade fastjson 1.2.58\n","date":"2019-08-22 23:03:22","modifiedFileCount":"2","status":"B","submitter":"agapple"},{"authorTime":"2020-09-17 10:48:15","codes":[{"authorDate":"2020-09-17 10:48:15","commitOrder":2,"curCode":"    public void testRollback() {\n        int bufferSize = 16;\n        MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.setBufferSize(bufferSize);\n        eventStore.start();\n\n        for (int i = 0; i < bufferSize / 2; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L + i));\n            sleep(100L);\n            Assert.assertTrue(result);\n        }\n\n        sleep(50L);\n        Position first = eventStore.getFirstPosition();\n        Position lastest = eventStore.getLatestPosition();\n        Assert.assertEquals(first, CanalEventUtils.createPosition(buildEvent(\"1\", 1L, 1L)));\n        Assert.assertEquals(lastest, CanalEventUtils.createPosition(buildEvent(\"1\", 1L, 1L + bufferSize / 2 - 1)));\n\n        System.out.println(\"start get\");\n        Events<Event> entrys1 = eventStore.tryGet(first, bufferSize);\n        System.out.println(\"first get size : \" + entrys1.getEvents().size());\n\n        eventStore.rollback();\n\n        entrys1 = eventStore.tryGet(first, bufferSize);\n        System.out.println(\"after rollback get size : \" + entrys1.getEvents().size());\n        Assert.assertTrue(entrys1.getEvents().size() == bufferSize / 2);\n\n        \r\n        for (int i = bufferSize / 2; i < bufferSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L + i));\n            sleep(100L);\n            Assert.assertTrue(result);\n        }\n\n        Events<Event> entrys2 = eventStore.tryGet(entrys1.getPositionRange().getEnd(), bufferSize);\n        System.out.println(\"second get size : \" + entrys2.getEvents().size());\n\n        eventStore.rollback();\n\n        entrys2 = eventStore.tryGet(entrys1.getPositionRange().getEnd(), bufferSize);\n        System.out.println(\"after rollback get size : \" + entrys2.getEvents().size());\n        Assert.assertTrue(entrys2.getEvents().size() == bufferSize);\n\n        first = eventStore.getFirstPosition();\n        lastest = eventStore.getLatestPosition();\n        List<Event> entrys = new ArrayList<>(entrys2.getEvents());\n        Assert.assertTrue(entrys.size() == bufferSize);\n        Assert.assertEquals(first, entrys2.getPositionRange().getStart());\n        Assert.assertEquals(lastest, entrys2.getPositionRange().getEnd());\n\n        Assert.assertEquals(first, CanalEventUtils.createPosition(entrys.get(0)));\n        Assert.assertEquals(lastest, CanalEventUtils.createPosition(entrys.get(bufferSize - 1)));\n        eventStore.stop();\n    }\n","date":"2020-09-17 17:46:20","endLine":78,"groupId":"1022","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/c0/ae29237b577158d767249dedaffc1d2ccd0cf9.src","preCode":"    public void testRollback() {\n        int bufferSize = 16;\n        MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.setBufferSize(bufferSize);\n        eventStore.start();\n\n        for (int i = 0; i < bufferSize / 2; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L + i));\n            sleep(100L);\n            Assert.assertTrue(result);\n        }\n\n        sleep(50L);\n        Position first = eventStore.getFirstPosition();\n        Position lastest = eventStore.getLatestPosition();\n        Assert.assertEquals(first, CanalEventUtils.createPosition(buildEvent(\"1\", 1L, 1L)));\n        Assert.assertEquals(lastest, CanalEventUtils.createPosition(buildEvent(\"1\", 1L, 1L + bufferSize / 2 - 1)));\n\n        System.out.println(\"start get\");\n        Events<Event> entrys1 = eventStore.tryGet(first, bufferSize);\n        System.out.println(\"first get size : \" + entrys1.getEvents().size());\n\n        eventStore.rollback();\n\n        entrys1 = eventStore.tryGet(first, bufferSize);\n        System.out.println(\"after rollback get size : \" + entrys1.getEvents().size());\n        Assert.assertTrue(entrys1.getEvents().size() == bufferSize / 2);\n\n        \r\n        for (int i = bufferSize / 2; i < bufferSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L + i));\n            sleep(100L);\n            Assert.assertTrue(result);\n        }\n\n        Events<Event> entrys2 = eventStore.tryGet(entrys1.getPositionRange().getEnd(), bufferSize);\n        System.out.println(\"second get size : \" + entrys2.getEvents().size());\n\n        eventStore.rollback();\n\n        entrys2 = eventStore.tryGet(entrys1.getPositionRange().getEnd(), bufferSize);\n        System.out.println(\"after rollback get size : \" + entrys2.getEvents().size());\n        Assert.assertTrue(entrys2.getEvents().size() == bufferSize);\n\n        first = eventStore.getFirstPosition();\n        lastest = eventStore.getLatestPosition();\n        List<Event> entrys = new ArrayList<Event>(entrys2.getEvents());\n        Assert.assertTrue(entrys.size() == bufferSize);\n        Assert.assertEquals(first, entrys2.getPositionRange().getStart());\n        Assert.assertEquals(lastest, entrys2.getPositionRange().getEnd());\n\n        Assert.assertEquals(first, CanalEventUtils.createPosition(entrys.get(0)));\n        Assert.assertEquals(lastest, CanalEventUtils.createPosition(entrys.get(bufferSize - 1)));\n        eventStore.stop();\n    }\n","realPath":"store/src/test/java/com/alibaba/otter/canal/store/memory/buffer/MemoryEventStoreRollbackAndAckTest.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":24,"status":"M"},{"authorDate":"2020-09-17 10:48:15","commitOrder":2,"curCode":"    public void testRollback() {\n        int bufferSize = 16;\n        MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.setBufferSize(bufferSize);\n        eventStore.setBatchMode(BatchMode.MEMSIZE);\n        eventStore.start();\n\n        for (int i = 0; i < bufferSize / 2; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L + i));\n            sleep(100L);\n            Assert.assertTrue(result);\n        }\n\n        sleep(50L);\n        Position first = eventStore.getFirstPosition();\n        Position lastest = eventStore.getLatestPosition();\n        Assert.assertEquals(first, CanalEventUtils.createPosition(buildEvent(\"1\", 1L, 1L)));\n        Assert.assertEquals(lastest, CanalEventUtils.createPosition(buildEvent(\"1\", 1L, 1L + bufferSize / 2 - 1)));\n\n        System.out.println(\"start get\");\n        Events<Event> entrys1 = eventStore.tryGet(first, bufferSize);\n        System.out.println(\"first get size : \" + entrys1.getEvents().size());\n\n        eventStore.rollback();\n\n        entrys1 = eventStore.tryGet(first, bufferSize);\n        System.out.println(\"after rollback get size : \" + entrys1.getEvents().size());\n        Assert.assertTrue(entrys1.getEvents().size() == bufferSize / 2);\n\n        \r\n        for (int i = bufferSize / 2; i < bufferSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L + i));\n            sleep(100L);\n            Assert.assertTrue(result);\n        }\n\n        Events<Event> entrys2 = eventStore.tryGet(entrys1.getPositionRange().getEnd(), bufferSize);\n        System.out.println(\"second get size : \" + entrys2.getEvents().size());\n\n        eventStore.rollback();\n\n        entrys2 = eventStore.tryGet(entrys1.getPositionRange().getEnd(), bufferSize);\n        System.out.println(\"after rollback get size : \" + entrys2.getEvents().size());\n        Assert.assertTrue(entrys2.getEvents().size() == bufferSize);\n\n        first = eventStore.getFirstPosition();\n        lastest = eventStore.getLatestPosition();\n        List<Event> entrys = new ArrayList<>(entrys2.getEvents());\n        Assert.assertTrue(entrys.size() == bufferSize);\n        Assert.assertEquals(first, entrys2.getPositionRange().getStart());\n        Assert.assertEquals(lastest, entrys2.getPositionRange().getEnd());\n\n        Assert.assertEquals(first, CanalEventUtils.createPosition(entrys.get(0)));\n        Assert.assertEquals(lastest, CanalEventUtils.createPosition(entrys.get(bufferSize - 1)));\n        eventStore.stop();\n    }\n","date":"2020-09-17 17:46:20","endLine":253,"groupId":"1022","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/4f/cab3c3c6c3bb7af56733ed0d7935ffabc79f60.src","preCode":"    public void testRollback() {\n        int bufferSize = 16;\n        MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.setBufferSize(bufferSize);\n        eventStore.setBatchMode(BatchMode.MEMSIZE);\n        eventStore.start();\n\n        for (int i = 0; i < bufferSize / 2; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L + i));\n            sleep(100L);\n            Assert.assertTrue(result);\n        }\n\n        sleep(50L);\n        Position first = eventStore.getFirstPosition();\n        Position lastest = eventStore.getLatestPosition();\n        Assert.assertEquals(first, CanalEventUtils.createPosition(buildEvent(\"1\", 1L, 1L)));\n        Assert.assertEquals(lastest, CanalEventUtils.createPosition(buildEvent(\"1\", 1L, 1L + bufferSize / 2 - 1)));\n\n        System.out.println(\"start get\");\n        Events<Event> entrys1 = eventStore.tryGet(first, bufferSize);\n        System.out.println(\"first get size : \" + entrys1.getEvents().size());\n\n        eventStore.rollback();\n\n        entrys1 = eventStore.tryGet(first, bufferSize);\n        System.out.println(\"after rollback get size : \" + entrys1.getEvents().size());\n        Assert.assertTrue(entrys1.getEvents().size() == bufferSize / 2);\n\n        \r\n        for (int i = bufferSize / 2; i < bufferSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L + i));\n            sleep(100L);\n            Assert.assertTrue(result);\n        }\n\n        Events<Event> entrys2 = eventStore.tryGet(entrys1.getPositionRange().getEnd(), bufferSize);\n        System.out.println(\"second get size : \" + entrys2.getEvents().size());\n\n        eventStore.rollback();\n\n        entrys2 = eventStore.tryGet(entrys1.getPositionRange().getEnd(), bufferSize);\n        System.out.println(\"after rollback get size : \" + entrys2.getEvents().size());\n        Assert.assertTrue(entrys2.getEvents().size() == bufferSize);\n\n        first = eventStore.getFirstPosition();\n        lastest = eventStore.getLatestPosition();\n        List<Event> entrys = new ArrayList<Event>(entrys2.getEvents());\n        Assert.assertTrue(entrys.size() == bufferSize);\n        Assert.assertEquals(first, entrys2.getPositionRange().getStart());\n        Assert.assertEquals(lastest, entrys2.getPositionRange().getEnd());\n\n        Assert.assertEquals(first, CanalEventUtils.createPosition(entrys.get(0)));\n        Assert.assertEquals(lastest, CanalEventUtils.createPosition(entrys.get(bufferSize - 1)));\n        eventStore.stop();\n    }\n","realPath":"store/src/test/java/com/alibaba/otter/canal/store/memory/buffer/MemoryEventStoreMemBatchTest.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"}],"commitId":"e7658879bce801da20c3ebd571ceb0a9fff8f6c8","commitMessage":"@@@= cold cleanup\n\n  * using lambda if possible (we are already building in Java8)\n  * using diamond when new generic instance\n  * remove used improt\n","date":"2020-09-17 17:46:20","modifiedFileCount":"133","status":"M","submitter":"zavakid"}]
