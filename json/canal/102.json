[{"authorTime":"2019-03-21 19:27:39","codes":[{"authorDate":"2019-08-21 13:52:34","commitOrder":2,"curCode":"    private void process() {\n        while (!running) {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n            }\n        }\n\n        while (running) {\n            try {\n                connector.connect();\n                connector.subscribe();\n                while (running) {\n                    try {\n                        List<FlatMessage> messages = connector.getFlatList(100L, TimeUnit.MILLISECONDS); \r\n                        if (messages == null) {\n                            continue;\n                        }\n                        for (FlatMessage message : messages) {\n                            long batchId = message.getId();\n                            int size = message.getData().size();\n                            if (batchId == -1 || size == 0) {\n                                \r\n                                \r\n                                \r\n                                \r\n                            } else {\n                                \r\n                                \r\n                                logger.info(message.toString());\n                            }\n                        }\n\n                        connector.ack(); \r\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n\n        connector.unsubscribe();\n        connector.disconnect();\n    }\n","date":"2019-08-21 13:52:34","endLine":145,"groupId":"118","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"process","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/43/ae251228512610bb95103b34526e885c5b2ba8.src","preCode":"    private void process() {\n        while (!running) {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n            }\n        }\n\n        while (running) {\n            try {\n                connector.connect();\n                connector.subscribe();\n                while (running) {\n                    try {\n                        List<FlatMessage> messages = connector.getFlatList(100L, TimeUnit.MILLISECONDS); \r\n                        if (messages == null) {\n                            continue;\n                        }\n                        for (FlatMessage message : messages) {\n                            long batchId = message.getId();\n                            int size = message.getData().size();\n                            if (batchId == -1 || size == 0) {\n                                \r\n                                \r\n                                \r\n                                \r\n                            } else {\n                                \r\n                                \r\n                                logger.info(message.toString());\n                            }\n                        }\n\n                        connector.ack(); \r\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n\n        connector.unsubscribe();\n        connector.disconnect();\n    }\n","realPath":"example/src/main/java/com/alibaba/otter/canal/example/kafka/CanalKafkaClientFlatMessageExample.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"},{"authorDate":"2019-03-21 19:27:39","commitOrder":2,"curCode":"    private void process() {\n        while (!running) {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n            }\n        }\n\n        while (running) {\n            try {\n                connector.connect();\n                connector.subscribe();\n                while (running) {\n                    try {\n                        List<Message> messages = connector.getListWithoutAck(100L, TimeUnit.MILLISECONDS); \r\n                        if (messages == null) {\n                            continue;\n                        }\n                        for (Message message : messages) {\n                            long batchId = message.getId();\n                            int size = message.getEntries().size();\n                            if (batchId == -1 || size == 0) {\n                                \r\n                                \r\n                                \r\n                                \r\n                            } else {\n                                \r\n                                \r\n                                logger.info(message.toString());\n                            }\n                        }\n\n                        connector.ack(); \r\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n\n        connector.unsubscribe();\n        connector.disconnect();\n    }\n","date":"2019-03-21 19:27:39","endLine":144,"groupId":"715","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"process","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/83/757aec40f868be45d6be6ad63ae23ae2cb0b07.src","preCode":"    private void process() {\n        while (!running) {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n            }\n        }\n\n        while (running) {\n            try {\n                connector.connect();\n                connector.subscribe();\n                while (running) {\n                    try {\n                        List<Message> messages = connector.getListWithoutAck(100L, TimeUnit.MILLISECONDS); \r\n                        if (messages == null) {\n                            continue;\n                        }\n                        for (Message message : messages) {\n                            long batchId = message.getId();\n                            int size = message.getEntries().size();\n                            if (batchId == -1 || size == 0) {\n                                \r\n                                \r\n                                \r\n                                \r\n                            } else {\n                                \r\n                                \r\n                                logger.info(message.toString());\n                            }\n                        }\n\n                        connector.ack(); \r\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n\n        connector.unsubscribe();\n        connector.disconnect();\n    }\n","realPath":"example/src/main/java/com/alibaba/otter/canal/example/kafka/CanalKafkaClientExample.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"NB"}],"commitId":"78af6b1130e1bf3220c73443c08a304298ee155f","commitMessage":"@@@fixed issue #2067 .  add example\n","date":"2019-08-21 13:52:34","modifiedFileCount":"0","status":"M","submitter":"agapple"},{"authorTime":"2019-03-21 19:27:39","codes":[{"authorDate":"2020-08-20 21:18:12","commitOrder":3,"curCode":"    private void process() {\n        while (!running) {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n            }\n        }\n\n        while (running) {\n            try {\n                connector.connect();\n                connector.subscribe();\n                while (running) {\n                    try {\n                        List<FlatMessage> messages = connector.getFlatList(100L, TimeUnit.MILLISECONDS); \r\n                        if (messages == null) {\n                            continue;\n                        }\n                        for (FlatMessage message : messages) {\n                            long batchId = message.getId();\n                            int size = message.getData() == null ? 0 : message.getData().size();\n                            if (batchId == -1 || size == 0) {\n                                \r\n                                \r\n                                \r\n                                \r\n                            } else {\n                                \r\n                                \r\n                                logger.info(message.toString());\n                            }\n                        }\n\n                        connector.ack(); \r\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n\n        connector.unsubscribe();\n        connector.disconnect();\n    }\n","date":"2020-08-20 21:18:12","endLine":145,"groupId":"118","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"process","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/5d/5fd2d1943bb15ae28d805687a2c3da1d4709ea.src","preCode":"    private void process() {\n        while (!running) {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n            }\n        }\n\n        while (running) {\n            try {\n                connector.connect();\n                connector.subscribe();\n                while (running) {\n                    try {\n                        List<FlatMessage> messages = connector.getFlatList(100L, TimeUnit.MILLISECONDS); \r\n                        if (messages == null) {\n                            continue;\n                        }\n                        for (FlatMessage message : messages) {\n                            long batchId = message.getId();\n                            int size = message.getData().size();\n                            if (batchId == -1 || size == 0) {\n                                \r\n                                \r\n                                \r\n                                \r\n                            } else {\n                                \r\n                                \r\n                                logger.info(message.toString());\n                            }\n                        }\n\n                        connector.ack(); \r\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n\n        connector.unsubscribe();\n        connector.disconnect();\n    }\n","realPath":"example/src/main/java/com/alibaba/otter/canal/example/kafka/CanalKafkaClientFlatMessageExample.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2019-03-21 19:27:39","commitOrder":3,"curCode":"    private void process() {\n        while (!running) {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n            }\n        }\n\n        while (running) {\n            try {\n                connector.connect();\n                connector.subscribe();\n                while (running) {\n                    try {\n                        List<Message> messages = connector.getListWithoutAck(100L, TimeUnit.MILLISECONDS); \r\n                        if (messages == null) {\n                            continue;\n                        }\n                        for (Message message : messages) {\n                            long batchId = message.getId();\n                            int size = message.getEntries().size();\n                            if (batchId == -1 || size == 0) {\n                                \r\n                                \r\n                                \r\n                                \r\n                            } else {\n                                \r\n                                \r\n                                logger.info(message.toString());\n                            }\n                        }\n\n                        connector.ack(); \r\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n\n        connector.unsubscribe();\n        connector.disconnect();\n    }\n","date":"2019-03-21 19:27:39","endLine":144,"groupId":"715","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"process","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/83/757aec40f868be45d6be6ad63ae23ae2cb0b07.src","preCode":"    private void process() {\n        while (!running) {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n            }\n        }\n\n        while (running) {\n            try {\n                connector.connect();\n                connector.subscribe();\n                while (running) {\n                    try {\n                        List<Message> messages = connector.getListWithoutAck(100L, TimeUnit.MILLISECONDS); \r\n                        if (messages == null) {\n                            continue;\n                        }\n                        for (Message message : messages) {\n                            long batchId = message.getId();\n                            int size = message.getEntries().size();\n                            if (batchId == -1 || size == 0) {\n                                \r\n                                \r\n                                \r\n                                \r\n                            } else {\n                                \r\n                                \r\n                                logger.info(message.toString());\n                            }\n                        }\n\n                        connector.ack(); \r\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n\n        connector.unsubscribe();\n        connector.disconnect();\n    }\n","realPath":"example/src/main/java/com/alibaba/otter/canal/example/kafka/CanalKafkaClientExample.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"N"}],"commitId":"cdd077b75820b542a69b08ee3bf9c652f481c9f0","commitMessage":"@@@FIX NPE When ddl event (#2801)\n\n","date":"2020-08-20 21:18:12","modifiedFileCount":"1","status":"M","submitter":"caoyixiong"},{"authorTime":"2019-03-21 19:27:39","codes":[{"authorDate":"2020-08-22 13:07:24","commitOrder":4,"curCode":"    private void process() {\n        while (!running) {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n            }\n        }\n\n        while (running) {\n            try {\n                connector.connect();\n                connector.subscribe();\n                while (running) {\n                    try {\n                        List<FlatMessage> messages = connector.getFlatList(100L, TimeUnit.MILLISECONDS); \r\n                        if (messages == null) {\n                            continue;\n                        }\n                        for (FlatMessage message : messages) {\n                            long batchId = message.getId();\n                            if (batchId == -1 || message.getData() == null) {\n                                \r\n                                \r\n                                \r\n                                \r\n                            } else {\n                                \r\n                                \r\n                                logger.info(message.toString());\n                            }\n                        }\n\n                        connector.ack(); \r\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n\n        connector.unsubscribe();\n        connector.disconnect();\n    }\n","date":"2020-08-22 13:07:24","endLine":144,"groupId":"102","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"process","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/60/b798ac977373e31e6f8f4f188b8062201f87c6.src","preCode":"    private void process() {\n        while (!running) {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n            }\n        }\n\n        while (running) {\n            try {\n                connector.connect();\n                connector.subscribe();\n                while (running) {\n                    try {\n                        List<FlatMessage> messages = connector.getFlatList(100L, TimeUnit.MILLISECONDS); \r\n                        if (messages == null) {\n                            continue;\n                        }\n                        for (FlatMessage message : messages) {\n                            long batchId = message.getId();\n                            int size = message.getData() == null ? 0 : message.getData().size();\n                            if (batchId == -1 || size == 0) {\n                                \r\n                                \r\n                                \r\n                                \r\n                            } else {\n                                \r\n                                \r\n                                logger.info(message.toString());\n                            }\n                        }\n\n                        connector.ack(); \r\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n\n        connector.unsubscribe();\n        connector.disconnect();\n    }\n","realPath":"example/src/main/java/com/alibaba/otter/canal/example/kafka/CanalKafkaClientFlatMessageExample.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2019-03-21 19:27:39","commitOrder":4,"curCode":"    private void process() {\n        while (!running) {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n            }\n        }\n\n        while (running) {\n            try {\n                connector.connect();\n                connector.subscribe();\n                while (running) {\n                    try {\n                        List<Message> messages = connector.getListWithoutAck(100L, TimeUnit.MILLISECONDS); \r\n                        if (messages == null) {\n                            continue;\n                        }\n                        for (Message message : messages) {\n                            long batchId = message.getId();\n                            int size = message.getEntries().size();\n                            if (batchId == -1 || size == 0) {\n                                \r\n                                \r\n                                \r\n                                \r\n                            } else {\n                                \r\n                                \r\n                                logger.info(message.toString());\n                            }\n                        }\n\n                        connector.ack(); \r\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n\n        connector.unsubscribe();\n        connector.disconnect();\n    }\n","date":"2019-03-21 19:27:39","endLine":144,"groupId":"102","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"process","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/83/757aec40f868be45d6be6ad63ae23ae2cb0b07.src","preCode":"    private void process() {\n        while (!running) {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n            }\n        }\n\n        while (running) {\n            try {\n                connector.connect();\n                connector.subscribe();\n                while (running) {\n                    try {\n                        List<Message> messages = connector.getListWithoutAck(100L, TimeUnit.MILLISECONDS); \r\n                        if (messages == null) {\n                            continue;\n                        }\n                        for (Message message : messages) {\n                            long batchId = message.getId();\n                            int size = message.getEntries().size();\n                            if (batchId == -1 || size == 0) {\n                                \r\n                                \r\n                                \r\n                                \r\n                            } else {\n                                \r\n                                \r\n                                logger.info(message.toString());\n                            }\n                        }\n\n                        connector.ack(); \r\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n\n        connector.unsubscribe();\n        connector.disconnect();\n    }\n","realPath":"example/src/main/java/com/alibaba/otter/canal/example/kafka/CanalKafkaClientExample.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"N"}],"commitId":"b79af4605468519481111233569612abc19b65a7","commitMessage":"@@@merge code and fixed issue #2755 #2756 #2735 #2714 #2711 #2710 #2616 #2602 #2585 #2565 #2935 #2434 #2623 #2418 #2387\n","date":"2020-08-22 13:07:24","modifiedFileCount":"52","status":"M","submitter":"agapple"}]
