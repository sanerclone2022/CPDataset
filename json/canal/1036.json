[{"authorTime":"2018-05-10 19:34:24","codes":[{"authorDate":"2019-04-09 19:11:48","commitOrder":4,"curCode":"    public void testAuth() {\n\n\n        try {\n            SocketChannel channel = SocketChannel.open();\n            channel.connect(new InetSocketAddress(\"127.0.0.1\", 1088));\n            Packet p = Packet.parseFrom(readNextPacket(channel));\n\n            if (p.getVersion() != 1) {\n                throw new Exception(\"unsupported version at this client.\");\n            }\n\n            if (p.getType() != PacketType.HANDSHAKE) {\n                throw new Exception(\"expect handshake but found other type.\");\n            }\n            \r\n            Handshake handshake = Handshake.parseFrom(p.getBody());\n            System.out.println(handshake.getSupportedCompressions());\n            \r\n            ClientAuth ca = ClientAuth.newBuilder()\n                .setUsername(\"\")\n                .setNetReadTimeout(10000)\n                .setNetWriteTimeout(10000)\n                .build();\n            writeWithHeader(channel,\n                Packet.newBuilder()\n                    .setType(PacketType.CLIENTAUTHENTICATION)\n                    .setBody(ca.toByteString())\n                    .build()\n                    .toByteArray());\n            \r\n            p = Packet.parseFrom(readNextPacket(channel));\n            if (p.getType() != PacketType.ACK) {\n                throw new Exception(\"unexpected packet type when ack is expected\");\n            }\n\n            Ack ack = Ack.parseFrom(p.getBody());\n            if (ack.getErrorCode() > 0) {\n                throw new Exception(\"something goes wrong when doing authentication: \" + ack.getErrorMessage());\n            }\n\n            writeWithHeader(channel,\n                Packet.newBuilder()\n                    .setType(PacketType.SUBSCRIPTION)\n                    .setBody(Sub.newBuilder().setDestination(DESTINATION).setClientId(\"1\").build().toByteString())\n                    .build()\n                    .toByteArray());\n            \r\n            p = Packet.parseFrom(readNextPacket(channel));\n            ack = Ack.parseFrom(p.getBody());\n            if (ack.getErrorCode() > 0) {\n                throw new Exception(\"failed to subscribe with reason: \" + ack.getErrorMessage());\n            }\n\n            for (int i = 0; i < 10; i++) {\n                writeWithHeader(channel,\n                    Packet.newBuilder()\n                        .setType(PacketType.GET)\n                        .setBody(Get.newBuilder()\n                            .setDestination(DESTINATION)\n                            .setClientId(\"1\")\n                            .setFetchSize(10)\n                            .build()\n                            .toByteString())\n                        .build()\n                        .toByteArray());\n                p = Packet.parseFrom(readNextPacket(channel));\n\n                long batchId = -1L;\n                switch (p.getType()) {\n                    case MESSAGES: {\n                        Messages messages = Messages.parseFrom(p.getBody());\n                        batchId = messages.getBatchId();\n                        break;\n                    }\n                    case ACK: {\n                        ack = Ack.parseFrom(p.getBody());\n                        if (ack.getErrorCode() > 0) {\n                            throw new Exception(\"failed to subscribe with reason: \" + ack.getErrorMessage());\n                        }\n                        break;\n                    }\n                    default: {\n                        throw new Exception(\"unexpected packet type: \" + p.getType());\n                    }\n                }\n\n                System.out.println(\"!!!!!!!!!!!!!!!!! \" + batchId);\n                Thread.sleep(1000L);\n                writeWithHeader(channel,\n                    Packet.newBuilder()\n                        .setType(PacketType.CLIENTACK)\n                        .setBody(ClientAck.newBuilder()\n                            .setDestination(DESTINATION)\n                            .setClientId(\"1\")\n                            .setBatchId(batchId)\n                            .build()\n                            .toByteString())\n                        .build()\n                        .toByteArray());\n            }\n\n            writeWithHeader(channel,\n                Packet.newBuilder()\n                    .setType(PacketType.CLIENTROLLBACK)\n                    .setBody(ClientRollback.newBuilder()\n                        .setDestination(DESTINATION)\n                        .setClientId(\"1\")\n                        .build()\n                        .toByteString())\n                    .build()\n                    .toByteArray());\n\n            writeWithHeader(channel,\n                Packet.newBuilder()\n                    .setType(PacketType.UNSUBSCRIPTION)\n                    .setBody(Unsub.newBuilder().setDestination(DESTINATION).setClientId(\"1\").build().toByteString())\n                    .build()\n                    .toByteArray());\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n","date":"2019-04-09 19:11:48","endLine":192,"groupId":"544","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAuth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/3c/5b22672c217be015c8bdc34498f863ed1d989d.src","preCode":"    public void testAuth() {\n\n\n        try {\n            SocketChannel channel = SocketChannel.open();\n            channel.connect(new InetSocketAddress(\"127.0.0.1\", 1088));\n            Packet p = Packet.parseFrom(readNextPacket(channel));\n\n            if (p.getVersion() != 1) {\n                throw new Exception(\"unsupported version at this client.\");\n            }\n\n            if (p.getType() != PacketType.HANDSHAKE) {\n                throw new Exception(\"expect handshake but found other type.\");\n            }\n            \r\n            Handshake handshake = Handshake.parseFrom(p.getBody());\n            System.out.println(handshake.getSupportedCompressions());\n            \r\n            ClientAuth ca = ClientAuth.newBuilder()\n                .setUsername(\"\")\n                .setNetReadTimeout(10000)\n                .setNetWriteTimeout(10000)\n                .build();\n            writeWithHeader(channel,\n                Packet.newBuilder()\n                    .setType(PacketType.CLIENTAUTHENTICATION)\n                    .setBody(ca.toByteString())\n                    .build()\n                    .toByteArray());\n            \r\n            p = Packet.parseFrom(readNextPacket(channel));\n            if (p.getType() != PacketType.ACK) {\n                throw new Exception(\"unexpected packet type when ack is expected\");\n            }\n\n            Ack ack = Ack.parseFrom(p.getBody());\n            if (ack.getErrorCode() > 0) {\n                throw new Exception(\"something goes wrong when doing authentication: \" + ack.getErrorMessage());\n            }\n\n            writeWithHeader(channel,\n                Packet.newBuilder()\n                    .setType(PacketType.SUBSCRIPTION)\n                    .setBody(Sub.newBuilder().setDestination(DESTINATION).setClientId(\"1\").build().toByteString())\n                    .build()\n                    .toByteArray());\n            \r\n            p = Packet.parseFrom(readNextPacket(channel));\n            ack = Ack.parseFrom(p.getBody());\n            if (ack.getErrorCode() > 0) {\n                throw new Exception(\"failed to subscribe with reason: \" + ack.getErrorMessage());\n            }\n\n            for (int i = 0; i < 10; i++) {\n                writeWithHeader(channel,\n                    Packet.newBuilder()\n                        .setType(PacketType.GET)\n                        .setBody(Get.newBuilder()\n                            .setDestination(DESTINATION)\n                            .setClientId(\"1\")\n                            .setFetchSize(10)\n                            .build()\n                            .toByteString())\n                        .build()\n                        .toByteArray());\n                p = Packet.parseFrom(readNextPacket(channel));\n\n                long batchId = -1L;\n                switch (p.getType()) {\n                    case MESSAGES: {\n                        Messages messages = Messages.parseFrom(p.getBody());\n                        batchId = messages.getBatchId();\n                        break;\n                    }\n                    case ACK: {\n                        ack = Ack.parseFrom(p.getBody());\n                        if (ack.getErrorCode() > 0) {\n                            throw new Exception(\"failed to subscribe with reason: \" + ack.getErrorMessage());\n                        }\n                        break;\n                    }\n                    default: {\n                        throw new Exception(\"unexpected packet type: \" + p.getType());\n                    }\n                }\n\n                System.out.println(\"!!!!!!!!!!!!!!!!! \" + batchId);\n                Thread.sleep(1000L);\n                writeWithHeader(channel,\n                    Packet.newBuilder()\n                        .setType(PacketType.CLIENTACK)\n                        .setBody(ClientAck.newBuilder()\n                            .setDestination(DESTINATION)\n                            .setClientId(\"1\")\n                            .setBatchId(batchId)\n                            .build()\n                            .toByteString())\n                        .build()\n                        .toByteArray());\n            }\n\n            writeWithHeader(channel,\n                Packet.newBuilder()\n                    .setType(PacketType.CLIENTROLLBACK)\n                    .setBody(ClientRollback.newBuilder()\n                        .setDestination(DESTINATION)\n                        .setClientId(\"1\")\n                        .build()\n                        .toByteString())\n                    .build()\n                    .toByteArray());\n\n            writeWithHeader(channel,\n                Packet.newBuilder()\n                    .setType(PacketType.UNSUBSCRIPTION)\n                    .setBody(Unsub.newBuilder().setDestination(DESTINATION).setClientId(\"1\").build().toByteString())\n                    .build()\n                    .toByteArray());\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n","realPath":"server/src/test/java/com/alibaba/otter/canal/server/CanalServerTest.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"},{"authorDate":"2018-05-10 19:34:24","commitOrder":4,"curCode":"    public void unsubscribe() throws CanalClientException {\n        waitClientRunning();\n        if (!running) {\n            return;\n        }\n        try {\n            writeWithHeader(Packet.newBuilder()\n                .setType(PacketType.UNSUBSCRIPTION)\n                .setBody(Unsub.newBuilder()\n                    .setDestination(clientIdentity.getDestination())\n                    .setClientId(String.valueOf(clientIdentity.getClientId()))\n                    .build()\n                    .toByteString())\n                .build()\n                .toByteArray());\n            \r\n            Packet p = Packet.parseFrom(readNextPacket());\n            Ack ack = Ack.parseFrom(p.getBody());\n            if (ack.getErrorCode() > 0) {\n                throw new CanalClientException(\"failed to unSubscribe with reason: \" + ack.getErrorMessage());\n            }\n        } catch (IOException e) {\n            throw new CanalClientException(e);\n        }\n    }\n","date":"2018-05-10 19:34:24","endLine":267,"groupId":"796","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/a6/eabed132699ff953a4b9f2127db8096e08da8b.src","preCode":"    public void unsubscribe() throws CanalClientException {\n        waitClientRunning();\n        if (!running) {\n            return;\n        }\n        try {\n            writeWithHeader(Packet.newBuilder()\n                .setType(PacketType.UNSUBSCRIPTION)\n                .setBody(Unsub.newBuilder()\n                    .setDestination(clientIdentity.getDestination())\n                    .setClientId(String.valueOf(clientIdentity.getClientId()))\n                    .build()\n                    .toByteString())\n                .build()\n                .toByteArray());\n            \r\n            Packet p = Packet.parseFrom(readNextPacket());\n            Ack ack = Ack.parseFrom(p.getBody());\n            if (ack.getErrorCode() > 0) {\n                throw new CanalClientException(\"failed to unSubscribe with reason: \" + ack.getErrorMessage());\n            }\n        } catch (IOException e) {\n            throw new CanalClientException(e);\n        }\n    }\n","realPath":"client/src/main/java/com/alibaba/otter/canal/client/impl/SimpleCanalConnector.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"NB"}],"commitId":"8cb85753bbca4dd60022165e45bae98fcaebc4d4","commitMessage":"@@@open the switch to get codecov test coverage (#1671)\n\n* add codecov for test coverage\n","date":"2019-04-09 19:11:48","modifiedFileCount":"54","status":"M","submitter":"Xin Wang"},{"authorTime":"2018-05-10 19:34:24","codes":[{"authorDate":"2019-08-26 18:16:33","commitOrder":5,"curCode":"    public void testAuth() {\n\n        try {\n            SocketChannel channel = SocketChannel.open();\n            channel.connect(new InetSocketAddress(\"127.0.0.1\", 1088));\n            Packet p = Packet.parseFrom(readNextPacket(channel));\n\n            if (p.getVersion() != 1) {\n                throw new Exception(\"unsupported version at this client.\");\n            }\n\n            if (p.getType() != PacketType.HANDSHAKE) {\n                throw new Exception(\"expect handshake but found other type.\");\n            }\n            \r\n            Handshake handshake = Handshake.parseFrom(p.getBody());\n            System.out.println(handshake.getSupportedCompressions());\n            \r\n            ClientAuth ca = ClientAuth.newBuilder()\n                .setUsername(\"\")\n                .setNetReadTimeout(10000)\n                .setNetWriteTimeout(10000)\n                .build();\n            writeWithHeader(channel,\n                Packet.newBuilder()\n                    .setType(PacketType.CLIENTAUTHENTICATION)\n                    .setVersion(NettyUtils.VERSION)\n                    .setBody(ca.toByteString())\n                    .build()\n                    .toByteArray());\n            \r\n            p = Packet.parseFrom(readNextPacket(channel));\n            if (p.getType() != PacketType.ACK) {\n                throw new Exception(\"unexpected packet type when ack is expected\");\n            }\n\n            Ack ack = Ack.parseFrom(p.getBody());\n            if (ack.getErrorCode() > 0) {\n                throw new Exception(\"something goes wrong when doing authentication: \" + ack.getErrorMessage());\n            }\n\n            writeWithHeader(channel, Packet.newBuilder()\n                .setType(PacketType.SUBSCRIPTION)\n                .setVersion(NettyUtils.VERSION)\n                .setBody(Sub.newBuilder().setDestination(DESTINATION).setClientId(\"1\").build().toByteString())\n                .build()\n                .toByteArray());\n            \r\n            p = Packet.parseFrom(readNextPacket(channel));\n            ack = Ack.parseFrom(p.getBody());\n            if (ack.getErrorCode() > 0) {\n                throw new Exception(\"failed to subscribe with reason: \" + ack.getErrorMessage());\n            }\n\n            for (int i = 0; i < 10; i++) {\n                writeWithHeader(channel,\n                    Packet.newBuilder()\n                        .setType(PacketType.GET)\n                        .setVersion(NettyUtils.VERSION)\n                        .setBody(Get.newBuilder()\n                            .setDestination(DESTINATION)\n                            .setClientId(\"1\")\n                            .setFetchSize(10)\n                            .build()\n                            .toByteString())\n                        .build()\n                        .toByteArray());\n                p = Packet.parseFrom(readNextPacket(channel));\n\n                long batchId = -1L;\n                switch (p.getType()) {\n                    case MESSAGES: {\n                        Messages messages = Messages.parseFrom(p.getBody());\n                        batchId = messages.getBatchId();\n                        break;\n                    }\n                    case ACK: {\n                        ack = Ack.parseFrom(p.getBody());\n                        if (ack.getErrorCode() > 0) {\n                            throw new Exception(\"failed to subscribe with reason: \" + ack.getErrorMessage());\n                        }\n                        break;\n                    }\n                    default: {\n                        throw new Exception(\"unexpected packet type: \" + p.getType());\n                    }\n                }\n\n                System.out.println(\"!!!!!!!!!!!!!!!!! \" + batchId);\n                Thread.sleep(1000L);\n                writeWithHeader(channel,\n                    Packet.newBuilder()\n                        .setType(PacketType.CLIENTACK)\n                        .setVersion(NettyUtils.VERSION)\n                        .setBody(ClientAck.newBuilder()\n                            .setDestination(DESTINATION)\n                            .setClientId(\"1\")\n                            .setBatchId(batchId)\n                            .build()\n                            .toByteString())\n                        .build()\n                        .toByteArray());\n            }\n\n            writeWithHeader(channel,\n                Packet.newBuilder()\n                    .setType(PacketType.CLIENTROLLBACK)\n                    .setVersion(NettyUtils.VERSION)\n                    .setBody(ClientRollback.newBuilder()\n                        .setDestination(DESTINATION)\n                        .setClientId(\"1\")\n                        .build()\n                        .toByteString())\n                    .build()\n                    .toByteArray());\n\n            writeWithHeader(channel,\n                Packet.newBuilder()\n                    .setType(PacketType.UNSUBSCRIPTION)\n                    .setVersion(NettyUtils.VERSION)\n                    .setBody(Unsub.newBuilder().setDestination(DESTINATION).setClientId(\"1\").build().toByteString())\n                    .build()\n                    .toByteArray());\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n","date":"2019-08-26 18:16:33","endLine":198,"groupId":"1036","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAuth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/7b/d6e72def36593880e3f4b91dc064b016880db2.src","preCode":"    public void testAuth() {\n\n\n        try {\n            SocketChannel channel = SocketChannel.open();\n            channel.connect(new InetSocketAddress(\"127.0.0.1\", 1088));\n            Packet p = Packet.parseFrom(readNextPacket(channel));\n\n            if (p.getVersion() != 1) {\n                throw new Exception(\"unsupported version at this client.\");\n            }\n\n            if (p.getType() != PacketType.HANDSHAKE) {\n                throw new Exception(\"expect handshake but found other type.\");\n            }\n            \r\n            Handshake handshake = Handshake.parseFrom(p.getBody());\n            System.out.println(handshake.getSupportedCompressions());\n            \r\n            ClientAuth ca = ClientAuth.newBuilder()\n                .setUsername(\"\")\n                .setNetReadTimeout(10000)\n                .setNetWriteTimeout(10000)\n                .build();\n            writeWithHeader(channel,\n                Packet.newBuilder()\n                    .setType(PacketType.CLIENTAUTHENTICATION)\n                    .setBody(ca.toByteString())\n                    .build()\n                    .toByteArray());\n            \r\n            p = Packet.parseFrom(readNextPacket(channel));\n            if (p.getType() != PacketType.ACK) {\n                throw new Exception(\"unexpected packet type when ack is expected\");\n            }\n\n            Ack ack = Ack.parseFrom(p.getBody());\n            if (ack.getErrorCode() > 0) {\n                throw new Exception(\"something goes wrong when doing authentication: \" + ack.getErrorMessage());\n            }\n\n            writeWithHeader(channel,\n                Packet.newBuilder()\n                    .setType(PacketType.SUBSCRIPTION)\n                    .setBody(Sub.newBuilder().setDestination(DESTINATION).setClientId(\"1\").build().toByteString())\n                    .build()\n                    .toByteArray());\n            \r\n            p = Packet.parseFrom(readNextPacket(channel));\n            ack = Ack.parseFrom(p.getBody());\n            if (ack.getErrorCode() > 0) {\n                throw new Exception(\"failed to subscribe with reason: \" + ack.getErrorMessage());\n            }\n\n            for (int i = 0; i < 10; i++) {\n                writeWithHeader(channel,\n                    Packet.newBuilder()\n                        .setType(PacketType.GET)\n                        .setBody(Get.newBuilder()\n                            .setDestination(DESTINATION)\n                            .setClientId(\"1\")\n                            .setFetchSize(10)\n                            .build()\n                            .toByteString())\n                        .build()\n                        .toByteArray());\n                p = Packet.parseFrom(readNextPacket(channel));\n\n                long batchId = -1L;\n                switch (p.getType()) {\n                    case MESSAGES: {\n                        Messages messages = Messages.parseFrom(p.getBody());\n                        batchId = messages.getBatchId();\n                        break;\n                    }\n                    case ACK: {\n                        ack = Ack.parseFrom(p.getBody());\n                        if (ack.getErrorCode() > 0) {\n                            throw new Exception(\"failed to subscribe with reason: \" + ack.getErrorMessage());\n                        }\n                        break;\n                    }\n                    default: {\n                        throw new Exception(\"unexpected packet type: \" + p.getType());\n                    }\n                }\n\n                System.out.println(\"!!!!!!!!!!!!!!!!! \" + batchId);\n                Thread.sleep(1000L);\n                writeWithHeader(channel,\n                    Packet.newBuilder()\n                        .setType(PacketType.CLIENTACK)\n                        .setBody(ClientAck.newBuilder()\n                            .setDestination(DESTINATION)\n                            .setClientId(\"1\")\n                            .setBatchId(batchId)\n                            .build()\n                            .toByteString())\n                        .build()\n                        .toByteArray());\n            }\n\n            writeWithHeader(channel,\n                Packet.newBuilder()\n                    .setType(PacketType.CLIENTROLLBACK)\n                    .setBody(ClientRollback.newBuilder()\n                        .setDestination(DESTINATION)\n                        .setClientId(\"1\")\n                        .build()\n                        .toByteString())\n                    .build()\n                    .toByteArray());\n\n            writeWithHeader(channel,\n                Packet.newBuilder()\n                    .setType(PacketType.UNSUBSCRIPTION)\n                    .setBody(Unsub.newBuilder().setDestination(DESTINATION).setClientId(\"1\").build().toByteString())\n                    .build()\n                    .toByteArray());\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n","realPath":"server/src/test/java/com/alibaba/otter/canal/server/CanalServerTest.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2018-05-10 19:34:24","commitOrder":5,"curCode":"    public void unsubscribe() throws CanalClientException {\n        waitClientRunning();\n        if (!running) {\n            return;\n        }\n        try {\n            writeWithHeader(Packet.newBuilder()\n                .setType(PacketType.UNSUBSCRIPTION)\n                .setBody(Unsub.newBuilder()\n                    .setDestination(clientIdentity.getDestination())\n                    .setClientId(String.valueOf(clientIdentity.getClientId()))\n                    .build()\n                    .toByteString())\n                .build()\n                .toByteArray());\n            \r\n            Packet p = Packet.parseFrom(readNextPacket());\n            Ack ack = Ack.parseFrom(p.getBody());\n            if (ack.getErrorCode() > 0) {\n                throw new CanalClientException(\"failed to unSubscribe with reason: \" + ack.getErrorMessage());\n            }\n        } catch (IOException e) {\n            throw new CanalClientException(e);\n        }\n    }\n","date":"2018-05-10 19:34:24","endLine":267,"groupId":"1036","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/a6/eabed132699ff953a4b9f2127db8096e08da8b.src","preCode":"    public void unsubscribe() throws CanalClientException {\n        waitClientRunning();\n        if (!running) {\n            return;\n        }\n        try {\n            writeWithHeader(Packet.newBuilder()\n                .setType(PacketType.UNSUBSCRIPTION)\n                .setBody(Unsub.newBuilder()\n                    .setDestination(clientIdentity.getDestination())\n                    .setClientId(String.valueOf(clientIdentity.getClientId()))\n                    .build()\n                    .toByteString())\n                .build()\n                .toByteArray());\n            \r\n            Packet p = Packet.parseFrom(readNextPacket());\n            Ack ack = Ack.parseFrom(p.getBody());\n            if (ack.getErrorCode() > 0) {\n                throw new CanalClientException(\"failed to unSubscribe with reason: \" + ack.getErrorMessage());\n            }\n        } catch (IOException e) {\n            throw new CanalClientException(e);\n        }\n    }\n","realPath":"client/src/main/java/com/alibaba/otter/canal/client/impl/SimpleCanalConnector.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"N"}],"commitId":"3d4dbc9a8c53de730e5b0433c39ea1d69e2dd480","commitMessage":"@@@fixed issue #2099 .  support user/passwd acl and canal admin operator\n","date":"2019-08-26 18:16:33","modifiedFileCount":"24","status":"M","submitter":"agapple"}]
