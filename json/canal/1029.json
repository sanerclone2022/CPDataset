[{"authorTime":"2020-02-28 11:00:08","codes":[{"authorDate":"2018-07-19 13:35:38","commitOrder":2,"curCode":"    private byte[] buildData(Message message) throws IOException {\n        List<ByteString> rowEntries = message.getRawEntries();\n        \r\n        int messageSize = 0;\n        messageSize += com.google.protobuf.CodedOutputStream.computeInt64Size(1, message.getId());\n\n        int dataSize = 0;\n        for (int i = 0; i < rowEntries.size(); i++) {\n            dataSize += com.google.protobuf.CodedOutputStream.computeBytesSizeNoTag(rowEntries.get(i));\n        }\n        messageSize += dataSize;\n        messageSize += 1 * rowEntries.size();\n        \r\n        int size = 0;\n        size += com.google.protobuf.CodedOutputStream.computeEnumSize(3, PacketType.MESSAGES.getNumber());\n        size += com.google.protobuf.CodedOutputStream.computeTagSize(5)\n                + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(messageSize) + messageSize;\n        \r\n        byte[] body = new byte[size];\n        CodedOutputStream output = CodedOutputStream.newInstance(body);\n        output.writeEnum(3, PacketType.MESSAGES.getNumber());\n\n        output.writeTag(5, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n        output.writeRawVarint32(messageSize);\n        \r\n        output.writeInt64(1, message.getId());\n        for (int i = 0; i < rowEntries.size(); i++) {\n            output.writeBytes(2, rowEntries.get(i));\n        }\n        output.checkNoSpaceLeft();\n\n        return body;\n    }\n","date":"2018-07-19 13:35:38","endLine":91,"groupId":"1240","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildData","params":"(Messagemessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/cb/078ddffbfe3bc78639e1d23b778c67fb78fc12.src","preCode":"    private byte[] buildData(Message message) throws IOException {\n        List<ByteString> rowEntries = message.getRawEntries();\n        \r\n        int messageSize = 0;\n        messageSize += com.google.protobuf.CodedOutputStream.computeInt64Size(1, message.getId());\n\n        int dataSize = 0;\n        for (int i = 0; i < rowEntries.size(); i++) {\n            dataSize += com.google.protobuf.CodedOutputStream.computeBytesSizeNoTag(rowEntries.get(i));\n        }\n        messageSize += dataSize;\n        messageSize += 1 * rowEntries.size();\n        \r\n        int size = 0;\n        size += com.google.protobuf.CodedOutputStream.computeEnumSize(3, PacketType.MESSAGES.getNumber());\n        size += com.google.protobuf.CodedOutputStream.computeTagSize(5)\n                + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(messageSize) + messageSize;\n        \r\n        byte[] body = new byte[size];\n        CodedOutputStream output = CodedOutputStream.newInstance(body);\n        output.writeEnum(3, PacketType.MESSAGES.getNumber());\n\n        output.writeTag(5, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n        output.writeRawVarint32(messageSize);\n        \r\n        output.writeInt64(1, message.getId());\n        for (int i = 0; i < rowEntries.size(); i++) {\n            output.writeBytes(2, rowEntries.get(i));\n        }\n        output.checkNoSpaceLeft();\n\n        return body;\n    }\n","realPath":"server/src/test/java/com/alibaba/otter/canal/server/ProtocolTest.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"NB"},{"authorDate":"2020-02-28 11:00:08","commitOrder":2,"curCode":"    public static byte[] serializer(Message data, boolean filterTransactionEntry) {\n        try {\n            if (data != null) {\n                if (data.getId() != -1) {\n                    if (data.isRaw() && !CollectionUtils.isEmpty(data.getRawEntries())) {\n                        \r\n                        List<ByteString> rowEntries = data.getRawEntries();\n                        \r\n                        int messageSize = 0;\n                        messageSize += CodedOutputStream.computeInt64Size(1, data.getId());\n\n                        int dataSize = 0;\n                        for (int i = 0; i < rowEntries.size(); i++) {\n                            dataSize += CodedOutputStream.computeBytesSizeNoTag(rowEntries.get(i));\n                        }\n                        messageSize += dataSize;\n                        messageSize += 1 * rowEntries.size();\n                        \r\n                        int size = 0;\n                        size += CodedOutputStream.computeEnumSize(3, PacketType.MESSAGES.getNumber());\n                        size += CodedOutputStream.computeTagSize(5)\n                                + CodedOutputStream.computeRawVarint32Size(messageSize) + messageSize;\n                        \r\n                        byte[] body = new byte[size];\n                        CodedOutputStream output = CodedOutputStream.newInstance(body);\n                        output.writeEnum(3, PacketType.MESSAGES.getNumber());\n\n                        output.writeTag(5, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n                        output.writeRawVarint32(messageSize);\n                        \r\n                        output.writeInt64(1, data.getId());\n                        for (int i = 0; i < rowEntries.size(); i++) {\n                            output.writeBytes(2, rowEntries.get(i));\n                        }\n                        output.checkNoSpaceLeft();\n                        return body;\n                    } else if (!CollectionUtils.isEmpty(data.getEntries())) {\n                        \r\n                        CanalPacket.Messages.Builder messageBuilder = CanalPacket.Messages.newBuilder();\n                        for (CanalEntry.Entry entry : data.getEntries()) {\n                            if (filterTransactionEntry\n                                && (entry.getEntryType() == CanalEntry.EntryType.TRANSACTIONBEGIN\n                                    || entry.getEntryType() == CanalEntry.EntryType.TRANSACTIONEND)) {\n                                continue;\n                            }\n\n                            messageBuilder.addMessages(entry.toByteString());\n                        }\n\n                        CanalPacket.Packet.Builder packetBuilder = CanalPacket.Packet.newBuilder();\n                        packetBuilder.setType(PacketType.MESSAGES);\n                        packetBuilder.setVersion(1);\n                        packetBuilder.setBody(messageBuilder.build().toByteString());\n                        return packetBuilder.build().toByteArray();\n                    }\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error when serializing message to byte[] \");\n        }\n        return null;\n    }\n","date":"2020-02-28 11:00:08","endLine":86,"groupId":"1240","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"serializer","params":"(Messagedata@booleanfilterTransactionEntry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/c0/becb2ce4663ef7e25b6987190d7a8864cae506.src","preCode":"    public static byte[] serializer(Message data, boolean filterTransactionEntry) {\n        try {\n            if (data != null) {\n                if (data.getId() != -1) {\n                    if (data.isRaw() && !CollectionUtils.isEmpty(data.getRawEntries())) {\n                        \r\n                        List<ByteString> rowEntries = data.getRawEntries();\n                        \r\n                        int messageSize = 0;\n                        messageSize += CodedOutputStream.computeInt64Size(1, data.getId());\n\n                        int dataSize = 0;\n                        for (int i = 0; i < rowEntries.size(); i++) {\n                            dataSize += CodedOutputStream.computeBytesSizeNoTag(rowEntries.get(i));\n                        }\n                        messageSize += dataSize;\n                        messageSize += 1 * rowEntries.size();\n                        \r\n                        int size = 0;\n                        size += CodedOutputStream.computeEnumSize(3, PacketType.MESSAGES.getNumber());\n                        size += CodedOutputStream.computeTagSize(5)\n                                + CodedOutputStream.computeRawVarint32Size(messageSize) + messageSize;\n                        \r\n                        byte[] body = new byte[size];\n                        CodedOutputStream output = CodedOutputStream.newInstance(body);\n                        output.writeEnum(3, PacketType.MESSAGES.getNumber());\n\n                        output.writeTag(5, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n                        output.writeRawVarint32(messageSize);\n                        \r\n                        output.writeInt64(1, data.getId());\n                        for (int i = 0; i < rowEntries.size(); i++) {\n                            output.writeBytes(2, rowEntries.get(i));\n                        }\n                        output.checkNoSpaceLeft();\n                        return body;\n                    } else if (!CollectionUtils.isEmpty(data.getEntries())) {\n                        \r\n                        CanalPacket.Messages.Builder messageBuilder = CanalPacket.Messages.newBuilder();\n                        for (CanalEntry.Entry entry : data.getEntries()) {\n                            if (filterTransactionEntry\n                                && (entry.getEntryType() == CanalEntry.EntryType.TRANSACTIONBEGIN\n                                    || entry.getEntryType() == CanalEntry.EntryType.TRANSACTIONEND)) {\n                                continue;\n                            }\n\n                            messageBuilder.addMessages(entry.toByteString());\n                        }\n\n                        CanalPacket.Packet.Builder packetBuilder = CanalPacket.Packet.newBuilder();\n                        packetBuilder.setType(PacketType.MESSAGES);\n                        packetBuilder.setVersion(1);\n                        packetBuilder.setBody(messageBuilder.build().toByteString());\n                        return packetBuilder.build().toByteArray();\n                    }\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error when serializing message to byte[] \");\n        }\n        return null;\n    }\n","realPath":"connector/core/src/main/java/com/alibaba/otter/canal/connector/core/util/CanalMessageSerializerUtil.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":25,"status":"B"}],"commitId":"265a8e8594f68882c24e8d72319a4b66966527f0","commitMessage":"@@@???mq connector (#2562)\n\n* add connector module.  add kafka producer connector module for server\n\n* add rocketMQ producer connector module for server\n\n* add rabbitMQ producer connector module for server\n\n* optimize code.  add annotation\n\n* add canal message consumer connector for canal-adapter module\n","date":"2020-02-28 11:00:08","modifiedFileCount":"8","status":"M","submitter":"rewerma"},{"authorTime":"2020-09-17 22:49:35","codes":[{"authorDate":"2020-09-17 22:49:35","commitOrder":3,"curCode":"    private byte[] buildData(Message message) throws IOException {\n        List<ByteString> rowEntries = message.getRawEntries();\n        \r\n        int messageSize = 0;\n        messageSize += com.google.protobuf.CodedOutputStream.computeInt64Size(1, message.getId());\n\n        int dataSize = 0;\n        for (ByteString rowEntry : rowEntries) {\n            dataSize += CodedOutputStream.computeBytesSizeNoTag(rowEntry);\n        }\n        messageSize += dataSize;\n        messageSize += 1 * rowEntries.size();\n        \r\n        int size = 0;\n        size += com.google.protobuf.CodedOutputStream.computeEnumSize(3, PacketType.MESSAGES.getNumber());\n        size += com.google.protobuf.CodedOutputStream.computeTagSize(5)\n                + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(messageSize) + messageSize;\n        \r\n        byte[] body = new byte[size];\n        CodedOutputStream output = CodedOutputStream.newInstance(body);\n        output.writeEnum(3, PacketType.MESSAGES.getNumber());\n\n        output.writeTag(5, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n        output.writeRawVarint32(messageSize);\n        \r\n        output.writeInt64(1, message.getId());\n        for (ByteString rowEntry : rowEntries) {\n            output.writeBytes(2, rowEntry);\n        }\n        output.checkNoSpaceLeft();\n\n        return body;\n    }\n","date":"2020-09-17 23:22:25","endLine":91,"groupId":"1029","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"buildData","params":"(Messagemessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/da/479e20f236a60f52a531da5c22f752d5eb8665.src","preCode":"    private byte[] buildData(Message message) throws IOException {\n        List<ByteString> rowEntries = message.getRawEntries();\n        \r\n        int messageSize = 0;\n        messageSize += com.google.protobuf.CodedOutputStream.computeInt64Size(1, message.getId());\n\n        int dataSize = 0;\n        for (int i = 0; i < rowEntries.size(); i++) {\n            dataSize += com.google.protobuf.CodedOutputStream.computeBytesSizeNoTag(rowEntries.get(i));\n        }\n        messageSize += dataSize;\n        messageSize += 1 * rowEntries.size();\n        \r\n        int size = 0;\n        size += com.google.protobuf.CodedOutputStream.computeEnumSize(3, PacketType.MESSAGES.getNumber());\n        size += com.google.protobuf.CodedOutputStream.computeTagSize(5)\n                + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(messageSize) + messageSize;\n        \r\n        byte[] body = new byte[size];\n        CodedOutputStream output = CodedOutputStream.newInstance(body);\n        output.writeEnum(3, PacketType.MESSAGES.getNumber());\n\n        output.writeTag(5, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n        output.writeRawVarint32(messageSize);\n        \r\n        output.writeInt64(1, message.getId());\n        for (int i = 0; i < rowEntries.size(); i++) {\n            output.writeBytes(2, rowEntries.get(i));\n        }\n        output.checkNoSpaceLeft();\n\n        return body;\n    }\n","realPath":"server/src/test/java/com/alibaba/otter/canal/server/ProtocolTest.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2020-09-17 22:49:35","commitOrder":3,"curCode":"    public static byte[] serializer(Message data, boolean filterTransactionEntry) {\n        try {\n            if (data != null) {\n                if (data.getId() != -1) {\n                    if (data.isRaw() && !CollectionUtils.isEmpty(data.getRawEntries())) {\n                        \r\n                        List<ByteString> rowEntries = data.getRawEntries();\n                        \r\n                        int messageSize = 0;\n                        messageSize += CodedOutputStream.computeInt64Size(1, data.getId());\n\n                        int dataSize = 0;\n                        for (ByteString rowEntry : rowEntries) {\n                            dataSize += CodedOutputStream.computeBytesSizeNoTag(rowEntry);\n                        }\n                        messageSize += dataSize;\n                        messageSize += 1 * rowEntries.size();\n                        \r\n                        int size = 0;\n                        size += CodedOutputStream.computeEnumSize(3, PacketType.MESSAGES.getNumber());\n                        size += CodedOutputStream.computeTagSize(5)\n                                + CodedOutputStream.computeRawVarint32Size(messageSize) + messageSize;\n                        \r\n                        byte[] body = new byte[size];\n                        CodedOutputStream output = CodedOutputStream.newInstance(body);\n                        output.writeEnum(3, PacketType.MESSAGES.getNumber());\n\n                        output.writeTag(5, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n                        output.writeRawVarint32(messageSize);\n                        \r\n                        output.writeInt64(1, data.getId());\n                        for (ByteString rowEntry : rowEntries) {\n                            output.writeBytes(2, rowEntry);\n                        }\n                        output.checkNoSpaceLeft();\n                        return body;\n                    } else if (!CollectionUtils.isEmpty(data.getEntries())) {\n                        \r\n                        CanalPacket.Messages.Builder messageBuilder = CanalPacket.Messages.newBuilder();\n                        for (CanalEntry.Entry entry : data.getEntries()) {\n                            if (filterTransactionEntry\n                                && (entry.getEntryType() == CanalEntry.EntryType.TRANSACTIONBEGIN || entry.getEntryType() == CanalEntry.EntryType.TRANSACTIONEND)) {\n                                continue;\n                            }\n\n                            messageBuilder.addMessages(entry.toByteString());\n                        }\n\n                        CanalPacket.Packet.Builder packetBuilder = CanalPacket.Packet.newBuilder();\n                        packetBuilder.setType(PacketType.MESSAGES);\n                        packetBuilder.setVersion(1);\n                        packetBuilder.setBody(messageBuilder.build().toByteString());\n                        return packetBuilder.build().toByteArray();\n                    }\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error when serializing message to byte[] \");\n        }\n        return null;\n    }\n","date":"2020-09-17 23:22:25","endLine":85,"groupId":"1029","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"serializer","params":"(Messagedata@booleanfilterTransactionEntry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/5f/ac0e672204a6c4fcb6464ec9b6439ddc912e47.src","preCode":"    public static byte[] serializer(Message data, boolean filterTransactionEntry) {\n        try {\n            if (data != null) {\n                if (data.getId() != -1) {\n                    if (data.isRaw() && !CollectionUtils.isEmpty(data.getRawEntries())) {\n                        \r\n                        List<ByteString> rowEntries = data.getRawEntries();\n                        \r\n                        int messageSize = 0;\n                        messageSize += CodedOutputStream.computeInt64Size(1, data.getId());\n\n                        int dataSize = 0;\n                        for (int i = 0; i < rowEntries.size(); i++) {\n                            dataSize += CodedOutputStream.computeBytesSizeNoTag(rowEntries.get(i));\n                        }\n                        messageSize += dataSize;\n                        messageSize += 1 * rowEntries.size();\n                        \r\n                        int size = 0;\n                        size += CodedOutputStream.computeEnumSize(3, PacketType.MESSAGES.getNumber());\n                        size += CodedOutputStream.computeTagSize(5)\n                                + CodedOutputStream.computeRawVarint32Size(messageSize) + messageSize;\n                        \r\n                        byte[] body = new byte[size];\n                        CodedOutputStream output = CodedOutputStream.newInstance(body);\n                        output.writeEnum(3, PacketType.MESSAGES.getNumber());\n\n                        output.writeTag(5, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n                        output.writeRawVarint32(messageSize);\n                        \r\n                        output.writeInt64(1, data.getId());\n                        for (int i = 0; i < rowEntries.size(); i++) {\n                            output.writeBytes(2, rowEntries.get(i));\n                        }\n                        output.checkNoSpaceLeft();\n                        return body;\n                    } else if (!CollectionUtils.isEmpty(data.getEntries())) {\n                        \r\n                        CanalPacket.Messages.Builder messageBuilder = CanalPacket.Messages.newBuilder();\n                        for (CanalEntry.Entry entry : data.getEntries()) {\n                            if (filterTransactionEntry\n                                && (entry.getEntryType() == CanalEntry.EntryType.TRANSACTIONBEGIN || entry.getEntryType() == CanalEntry.EntryType.TRANSACTIONEND)) {\n                                continue;\n                            }\n\n                            messageBuilder.addMessages(entry.toByteString());\n                        }\n\n                        CanalPacket.Packet.Builder packetBuilder = CanalPacket.Packet.newBuilder();\n                        packetBuilder.setType(PacketType.MESSAGES);\n                        packetBuilder.setVersion(1);\n                        packetBuilder.setBody(messageBuilder.build().toByteString());\n                        return packetBuilder.build().toByteArray();\n                    }\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error when serializing message to byte[] \");\n        }\n        return null;\n    }\n","realPath":"connector/core/src/main/java/com/alibaba/otter/canal/connector/core/util/CanalMessageSerializerUtil.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":25,"status":"M"}],"commitId":"df24596092971cf2578244b69c61129d8ce2b336","commitMessage":"@@@= code cleanup\n\n  - for loop replaceable with enhanced 'for' loop\n  - using diamond in generic type\n  - collapse try catch exception\n  - using try-with-resource\n  - using  List#sort instead of Collections#sort\n  - replaced lambda with method reference\n  - using native compare method to compare numbers\n  - using switch instead of if for in ESSyncUtil\n","date":"2020-09-17 23:22:25","modifiedFileCount":"33","status":"M","submitter":"zavakid"}]
