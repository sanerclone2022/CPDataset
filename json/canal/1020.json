[{"authorTime":"2019-08-22 23:03:22","codes":[{"authorDate":"2019-08-22 23:03:22","commitOrder":1,"curCode":"    public void testBlockPutOneGet() {\n        final MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.start();\n\n        final int batchSize = 10;\n        for (int i = 0; i < batchSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L));\n            Assert.assertTrue(result);\n        }\n\n        final Position position = eventStore.getFirstPosition();\n        try {\n            Events<Event> entrys = eventStore.get(position, batchSize);\n            Assert.assertTrue(entrys.getEvents().size() == batchSize);\n            Assert.assertEquals(position, entrys.getPositionRange().getStart());\n            Assert.assertEquals(position, entrys.getPositionRange().getEnd());\n        } catch (CanalStoreException e) {\n        } catch (InterruptedException e) {\n        }\n\n        ExecutorService executor = Executors.newFixedThreadPool(1);\n        executor.submit(new Runnable() {\n\n            public void run() {\n                boolean result = false;\n                try {\n                    eventStore.get(position, batchSize);\n                } catch (CanalStoreException e) {\n                } catch (InterruptedException e) {\n                    System.out.println(\"interrupt occured.\");\n                    result = true;\n                }\n                Assert.assertTrue(result);\n            }\n        });\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        executor.shutdownNow();\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        eventStore.stop();\n    }\n","date":"2019-08-22 23:03:22","endLine":176,"groupId":"94","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBlockPutOneGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/5c/8b9424df14e1b457eacf4df30af0d9b3e49949.src","preCode":"    public void testBlockPutOneGet() {\n        final MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.start();\n\n        final int batchSize = 10;\n        for (int i = 0; i < batchSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L));\n            Assert.assertTrue(result);\n        }\n\n        final Position position = eventStore.getFirstPosition();\n        try {\n            Events<Event> entrys = eventStore.get(position, batchSize);\n            Assert.assertTrue(entrys.getEvents().size() == batchSize);\n            Assert.assertEquals(position, entrys.getPositionRange().getStart());\n            Assert.assertEquals(position, entrys.getPositionRange().getEnd());\n        } catch (CanalStoreException e) {\n        } catch (InterruptedException e) {\n        }\n\n        ExecutorService executor = Executors.newFixedThreadPool(1);\n        executor.submit(new Runnable() {\n\n            public void run() {\n                boolean result = false;\n                try {\n                    eventStore.get(position, batchSize);\n                } catch (CanalStoreException e) {\n                } catch (InterruptedException e) {\n                    System.out.println(\"interrupt occured.\");\n                    result = true;\n                }\n                Assert.assertTrue(result);\n            }\n        });\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        executor.shutdownNow();\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        eventStore.stop();\n    }\n","realPath":"store/src/test/java/com/alibaba/otter/canal/store/memory/buffer/MemoryEventStorePutAndGetTest.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"B"},{"authorDate":"2019-08-22 23:03:22","commitOrder":1,"curCode":"    public void testBlockPutOneGet() {\n        final MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.setBufferSize(16);\n        eventStore.setBatchMode(BatchMode.MEMSIZE);\n        eventStore.start();\n\n        final int batchSize = 10;\n        for (int i = 0; i < batchSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L));\n            Assert.assertTrue(result);\n        }\n\n        final Position position = eventStore.getFirstPosition();\n        try {\n            Events<Event> entrys = eventStore.get(position, batchSize);\n            Assert.assertTrue(entrys.getEvents().size() == batchSize);\n            Assert.assertEquals(position, entrys.getPositionRange().getStart());\n            Assert.assertEquals(position, entrys.getPositionRange().getEnd());\n        } catch (CanalStoreException e) {\n        } catch (InterruptedException e) {\n        }\n\n        ExecutorService executor = Executors.newFixedThreadPool(1);\n        executor.submit(new Runnable() {\n\n            public void run() {\n                boolean result = false;\n                try {\n                    eventStore.get(position, batchSize);\n                } catch (CanalStoreException e) {\n                } catch (InterruptedException e) {\n                    System.out.println(\"interrupt occured.\");\n                    result = true;\n                }\n                Assert.assertTrue(result);\n            }\n        });\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        executor.shutdownNow();\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        eventStore.stop();\n    }\n","date":"2019-08-22 23:03:22","endLine":198,"groupId":"94","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlockPutOneGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/d6/4c22bbae698bd1bce298287c89bc7ae223d829.src","preCode":"    public void testBlockPutOneGet() {\n        final MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.setBufferSize(16);\n        eventStore.setBatchMode(BatchMode.MEMSIZE);\n        eventStore.start();\n\n        final int batchSize = 10;\n        for (int i = 0; i < batchSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L));\n            Assert.assertTrue(result);\n        }\n\n        final Position position = eventStore.getFirstPosition();\n        try {\n            Events<Event> entrys = eventStore.get(position, batchSize);\n            Assert.assertTrue(entrys.getEvents().size() == batchSize);\n            Assert.assertEquals(position, entrys.getPositionRange().getStart());\n            Assert.assertEquals(position, entrys.getPositionRange().getEnd());\n        } catch (CanalStoreException e) {\n        } catch (InterruptedException e) {\n        }\n\n        ExecutorService executor = Executors.newFixedThreadPool(1);\n        executor.submit(new Runnable() {\n\n            public void run() {\n                boolean result = false;\n                try {\n                    eventStore.get(position, batchSize);\n                } catch (CanalStoreException e) {\n                } catch (InterruptedException e) {\n                    System.out.println(\"interrupt occured.\");\n                    result = true;\n                }\n                Assert.assertTrue(result);\n            }\n        });\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        executor.shutdownNow();\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        eventStore.stop();\n    }\n","realPath":"store/src/test/java/com/alibaba/otter/canal/store/memory/buffer/MemoryEventStoreMemBatchTest.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"B"}],"commitId":"bd974e3da82dd0be95ed1f7fb55828463aba2835","commitMessage":"@@@upgrade fastjson 1.2.58\n","date":"2019-08-22 23:03:22","modifiedFileCount":"2","status":"B","submitter":"agapple"},{"authorTime":"2020-09-17 10:48:15","codes":[{"authorDate":"2020-09-17 10:48:15","commitOrder":2,"curCode":"    public void testBlockPutOneGet() {\n        final MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.start();\n\n        final int batchSize = 10;\n        for (int i = 0; i < batchSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L));\n            Assert.assertTrue(result);\n        }\n\n        final Position position = eventStore.getFirstPosition();\n        try {\n            Events<Event> entrys = eventStore.get(position, batchSize);\n            Assert.assertTrue(entrys.getEvents().size() == batchSize);\n            Assert.assertEquals(position, entrys.getPositionRange().getStart());\n            Assert.assertEquals(position, entrys.getPositionRange().getEnd());\n        } catch (CanalStoreException e) {\n        } catch (InterruptedException e) {\n        }\n\n        ExecutorService executor = Executors.newFixedThreadPool(1);\n        executor.submit(() -> {\n            boolean result = false;\n            try {\n                eventStore.get(position, batchSize);\n            } catch (CanalStoreException e) {\n            } catch (InterruptedException e) {\n                System.out.println(\"interrupt occured.\");\n                result = true;\n            }\n            Assert.assertTrue(result);\n        });\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        executor.shutdownNow();\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        eventStore.stop();\n    }\n","date":"2020-09-17 17:46:20","endLine":173,"groupId":"843","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBlockPutOneGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/47/3d4582b2798fda5bd9dc354df3dd13d968e928.src","preCode":"    public void testBlockPutOneGet() {\n        final MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.start();\n\n        final int batchSize = 10;\n        for (int i = 0; i < batchSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L));\n            Assert.assertTrue(result);\n        }\n\n        final Position position = eventStore.getFirstPosition();\n        try {\n            Events<Event> entrys = eventStore.get(position, batchSize);\n            Assert.assertTrue(entrys.getEvents().size() == batchSize);\n            Assert.assertEquals(position, entrys.getPositionRange().getStart());\n            Assert.assertEquals(position, entrys.getPositionRange().getEnd());\n        } catch (CanalStoreException e) {\n        } catch (InterruptedException e) {\n        }\n\n        ExecutorService executor = Executors.newFixedThreadPool(1);\n        executor.submit(new Runnable() {\n\n            public void run() {\n                boolean result = false;\n                try {\n                    eventStore.get(position, batchSize);\n                } catch (CanalStoreException e) {\n                } catch (InterruptedException e) {\n                    System.out.println(\"interrupt occured.\");\n                    result = true;\n                }\n                Assert.assertTrue(result);\n            }\n        });\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        executor.shutdownNow();\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        eventStore.stop();\n    }\n","realPath":"store/src/test/java/com/alibaba/otter/canal/store/memory/buffer/MemoryEventStorePutAndGetTest.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2020-09-17 10:48:15","commitOrder":2,"curCode":"    public void testBlockPutOneGet() {\n        final MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.setBufferSize(16);\n        eventStore.setBatchMode(BatchMode.MEMSIZE);\n        eventStore.start();\n\n        final int batchSize = 10;\n        for (int i = 0; i < batchSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L));\n            Assert.assertTrue(result);\n        }\n\n        final Position position = eventStore.getFirstPosition();\n        try {\n            Events<Event> entrys = eventStore.get(position, batchSize);\n            Assert.assertTrue(entrys.getEvents().size() == batchSize);\n            Assert.assertEquals(position, entrys.getPositionRange().getStart());\n            Assert.assertEquals(position, entrys.getPositionRange().getEnd());\n        } catch (CanalStoreException e) {\n        } catch (InterruptedException e) {\n        }\n\n        ExecutorService executor = Executors.newFixedThreadPool(1);\n        executor.submit(() -> {\n            boolean result = false;\n            try {\n                eventStore.get(position, batchSize);\n            } catch (CanalStoreException e) {\n            } catch (InterruptedException e) {\n                System.out.println(\"interrupt occured.\");\n                result = true;\n            }\n            Assert.assertTrue(result);\n        });\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        executor.shutdownNow();\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        eventStore.stop();\n    }\n","date":"2020-09-17 17:46:20","endLine":195,"groupId":"843","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlockPutOneGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/4f/cab3c3c6c3bb7af56733ed0d7935ffabc79f60.src","preCode":"    public void testBlockPutOneGet() {\n        final MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.setBufferSize(16);\n        eventStore.setBatchMode(BatchMode.MEMSIZE);\n        eventStore.start();\n\n        final int batchSize = 10;\n        for (int i = 0; i < batchSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L));\n            Assert.assertTrue(result);\n        }\n\n        final Position position = eventStore.getFirstPosition();\n        try {\n            Events<Event> entrys = eventStore.get(position, batchSize);\n            Assert.assertTrue(entrys.getEvents().size() == batchSize);\n            Assert.assertEquals(position, entrys.getPositionRange().getStart());\n            Assert.assertEquals(position, entrys.getPositionRange().getEnd());\n        } catch (CanalStoreException e) {\n        } catch (InterruptedException e) {\n        }\n\n        ExecutorService executor = Executors.newFixedThreadPool(1);\n        executor.submit(new Runnable() {\n\n            public void run() {\n                boolean result = false;\n                try {\n                    eventStore.get(position, batchSize);\n                } catch (CanalStoreException e) {\n                } catch (InterruptedException e) {\n                    System.out.println(\"interrupt occured.\");\n                    result = true;\n                }\n                Assert.assertTrue(result);\n            }\n        });\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        executor.shutdownNow();\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        eventStore.stop();\n    }\n","realPath":"store/src/test/java/com/alibaba/otter/canal/store/memory/buffer/MemoryEventStoreMemBatchTest.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"}],"commitId":"e7658879bce801da20c3ebd571ceb0a9fff8f6c8","commitMessage":"@@@= cold cleanup\n\n  * using lambda if possible (we are already building in Java8)\n  * using diamond when new generic instance\n  * remove used improt\n","date":"2020-09-17 17:46:20","modifiedFileCount":"133","status":"M","submitter":"zavakid"},{"authorTime":"2020-09-17 22:49:35","codes":[{"authorDate":"2020-09-17 22:49:35","commitOrder":3,"curCode":"    public void testBlockPutOneGet() {\n        final MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.start();\n\n        final int batchSize = 10;\n        for (int i = 0; i < batchSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L));\n            Assert.assertTrue(result);\n        }\n\n        final Position position = eventStore.getFirstPosition();\n        try {\n            Events<Event> entrys = eventStore.get(position, batchSize);\n            Assert.assertTrue(entrys.getEvents().size() == batchSize);\n            Assert.assertEquals(position, entrys.getPositionRange().getStart());\n            Assert.assertEquals(position, entrys.getPositionRange().getEnd());\n        } catch (CanalStoreException | InterruptedException e) {\n        }\n\n        ExecutorService executor = Executors.newFixedThreadPool(1);\n        executor.submit(() -> {\n            boolean result = false;\n            try {\n                eventStore.get(position, batchSize);\n            } catch (CanalStoreException e) {\n            } catch (InterruptedException e) {\n                System.out.println(\"interrupt occured.\");\n                result = true;\n            }\n            Assert.assertTrue(result);\n        });\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        executor.shutdownNow();\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        eventStore.stop();\n    }\n","date":"2020-09-17 23:22:25","endLine":170,"groupId":"1020","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testBlockPutOneGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/df/80c0735c3e32c8e05d03198e24ee9d7072af1a.src","preCode":"    public void testBlockPutOneGet() {\n        final MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.start();\n\n        final int batchSize = 10;\n        for (int i = 0; i < batchSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L));\n            Assert.assertTrue(result);\n        }\n\n        final Position position = eventStore.getFirstPosition();\n        try {\n            Events<Event> entrys = eventStore.get(position, batchSize);\n            Assert.assertTrue(entrys.getEvents().size() == batchSize);\n            Assert.assertEquals(position, entrys.getPositionRange().getStart());\n            Assert.assertEquals(position, entrys.getPositionRange().getEnd());\n        } catch (CanalStoreException e) {\n        } catch (InterruptedException e) {\n        }\n\n        ExecutorService executor = Executors.newFixedThreadPool(1);\n        executor.submit(() -> {\n            boolean result = false;\n            try {\n                eventStore.get(position, batchSize);\n            } catch (CanalStoreException e) {\n            } catch (InterruptedException e) {\n                System.out.println(\"interrupt occured.\");\n                result = true;\n            }\n            Assert.assertTrue(result);\n        });\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        executor.shutdownNow();\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        eventStore.stop();\n    }\n","realPath":"store/src/test/java/com/alibaba/otter/canal/store/memory/buffer/MemoryEventStorePutAndGetTest.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2020-09-17 22:49:35","commitOrder":3,"curCode":"    public void testBlockPutOneGet() {\n        final MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.setBufferSize(16);\n        eventStore.setBatchMode(BatchMode.MEMSIZE);\n        eventStore.start();\n\n        final int batchSize = 10;\n        for (int i = 0; i < batchSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L));\n            Assert.assertTrue(result);\n        }\n\n        final Position position = eventStore.getFirstPosition();\n        try {\n            Events<Event> entrys = eventStore.get(position, batchSize);\n            Assert.assertTrue(entrys.getEvents().size() == batchSize);\n            Assert.assertEquals(position, entrys.getPositionRange().getStart());\n            Assert.assertEquals(position, entrys.getPositionRange().getEnd());\n        } catch (CanalStoreException | InterruptedException e) {\n        }\n\n        ExecutorService executor = Executors.newFixedThreadPool(1);\n        executor.submit(() -> {\n            boolean result = false;\n            try {\n                eventStore.get(position, batchSize);\n            } catch (CanalStoreException e) {\n            } catch (InterruptedException e) {\n                System.out.println(\"interrupt occured.\");\n                result = true;\n            }\n            Assert.assertTrue(result);\n        });\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        executor.shutdownNow();\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        eventStore.stop();\n    }\n","date":"2020-09-17 23:22:25","endLine":192,"groupId":"1020","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testBlockPutOneGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/87/fa015eff038fa5c810749a619e425b3834fecf.src","preCode":"    public void testBlockPutOneGet() {\n        final MemoryEventStoreWithBuffer eventStore = new MemoryEventStoreWithBuffer();\n        eventStore.setBufferSize(16);\n        eventStore.setBatchMode(BatchMode.MEMSIZE);\n        eventStore.start();\n\n        final int batchSize = 10;\n        for (int i = 0; i < batchSize; i++) {\n            boolean result = eventStore.tryPut(buildEvent(\"1\", 1L, 1L));\n            Assert.assertTrue(result);\n        }\n\n        final Position position = eventStore.getFirstPosition();\n        try {\n            Events<Event> entrys = eventStore.get(position, batchSize);\n            Assert.assertTrue(entrys.getEvents().size() == batchSize);\n            Assert.assertEquals(position, entrys.getPositionRange().getStart());\n            Assert.assertEquals(position, entrys.getPositionRange().getEnd());\n        } catch (CanalStoreException e) {\n        } catch (InterruptedException e) {\n        }\n\n        ExecutorService executor = Executors.newFixedThreadPool(1);\n        executor.submit(() -> {\n            boolean result = false;\n            try {\n                eventStore.get(position, batchSize);\n            } catch (CanalStoreException e) {\n            } catch (InterruptedException e) {\n                System.out.println(\"interrupt occured.\");\n                result = true;\n            }\n            Assert.assertTrue(result);\n        });\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        executor.shutdownNow();\n\n        try {\n            Thread.sleep(1000L);\n        } catch (InterruptedException e) {\n            Assert.fail(e.getMessage());\n        }\n        eventStore.stop();\n    }\n","realPath":"store/src/test/java/com/alibaba/otter/canal/store/memory/buffer/MemoryEventStoreMemBatchTest.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"}],"commitId":"df24596092971cf2578244b69c61129d8ce2b336","commitMessage":"@@@= code cleanup\n\n  - for loop replaceable with enhanced 'for' loop\n  - using diamond in generic type\n  - collapse try catch exception\n  - using try-with-resource\n  - using  List#sort instead of Collections#sort\n  - replaced lambda with method reference\n  - using native compare method to compare numbers\n  - using switch instead of if for in ESSyncUtil\n","date":"2020-09-17 23:22:25","modifiedFileCount":"33","status":"M","submitter":"zavakid"}]
