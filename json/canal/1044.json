[{"authorTime":"2015-04-28 20:26:41","codes":[{"authorDate":"2015-04-28 20:26:41","commitOrder":1,"curCode":"    public Message get(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                 throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            if (positionRanges != null) {\n                throw new CanalServerException(\n                                               String.format(\"clientId:%s has last batch:[%s] isn't ack , maybe loss data\",\n                                                             clientIdentity.getClientId(), positionRanges));\n            }\n\n            Events<Event> events = null;\n            Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n            events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"get successfully, clientId:{} batchSize:{} but result is null\", new Object[] {\n                        clientIdentity.getClientId(), batchSize });\n                return new Message(-1, new ArrayList<Entry>()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                List<Entry> entrys = Lists.transform(events.getEvents(), new Function<Event, Entry>() {\n\n                    public Entry apply(Event input) {\n                        return input.getEntry();\n                    }\n                });\n\n                logger.info(\"get successfully, clientId:{} batchSize:{} real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(), batchSize, entrys.size(), batchId,\n                        events.getPositionRange());\n                \r\n                ack(clientIdentity, batchId);\n                return new Message(batchId, entrys);\n            }\n        }\n    }\n","date":"2015-04-28 20:26:41","endLine":229,"groupId":"514","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(ClientIdentityclientIdentity@intbatchSize@Longtimeout@TimeUnitunit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/38/ea14d849fae7f6775631e780423d181dc53f78.src","preCode":"    public Message get(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                 throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            if (positionRanges != null) {\n                throw new CanalServerException(\n                                               String.format(\"clientId:%s has last batch:[%s] isn't ack , maybe loss data\",\n                                                             clientIdentity.getClientId(), positionRanges));\n            }\n\n            Events<Event> events = null;\n            Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n            events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"get successfully, clientId:{} batchSize:{} but result is null\", new Object[] {\n                        clientIdentity.getClientId(), batchSize });\n                return new Message(-1, new ArrayList<Entry>()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                List<Entry> entrys = Lists.transform(events.getEvents(), new Function<Event, Entry>() {\n\n                    public Entry apply(Event input) {\n                        return input.getEntry();\n                    }\n                });\n\n                logger.info(\"get successfully, clientId:{} batchSize:{} real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(), batchSize, entrys.size(), batchId,\n                        events.getPositionRange());\n                \r\n                ack(clientIdentity, batchId);\n                return new Message(batchId, entrys);\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/alibaba/otter/canal/server/embedded/CanalServerWithEmbedded.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"B"},{"authorDate":"2015-04-28 20:26:41","commitOrder":1,"curCode":"    public Message getWithoutAck(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                           throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            Events<Event> events = null;\n            if (positionRanges != null) { \r\n                events = getEvents(canalInstance.getEventStore(), positionRanges.getStart(), batchSize, timeout, unit);\n            } else {\r\n                Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n                if (start == null) { \r\n                    start = canalInstance.getEventStore().getFirstPosition();\n                }\n\n                events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n            }\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"getWithoutAck successfully, clientId:{} batchSize:{} but result is null\", new Object[] {\n                        clientIdentity.getClientId(), batchSize });\n                return new Message(-1, new ArrayList<Entry>()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                List<Entry> entrys = Lists.transform(events.getEvents(), new Function<Event, Entry>() {\n\n                    public Entry apply(Event input) {\n                        return input.getEntry();\n                    }\n                });\n\n                logger.info(\"getWithoutAck successfully, clientId:{} batchSize:{}  real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(), batchSize, entrys.size(), batchId,\n                        events.getPositionRange());\n                return new Message(batchId, entrys);\n            }\n\n        }\n    }\n","date":"2015-04-28 20:26:41","endLine":302,"groupId":"515","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getWithoutAck","params":"(ClientIdentityclientIdentity@intbatchSize@Longtimeout@TimeUnitunit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/38/ea14d849fae7f6775631e780423d181dc53f78.src","preCode":"    public Message getWithoutAck(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                           throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            Events<Event> events = null;\n            if (positionRanges != null) { \r\n                events = getEvents(canalInstance.getEventStore(), positionRanges.getStart(), batchSize, timeout, unit);\n            } else {\r\n                Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n                if (start == null) { \r\n                    start = canalInstance.getEventStore().getFirstPosition();\n                }\n\n                events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n            }\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"getWithoutAck successfully, clientId:{} batchSize:{} but result is null\", new Object[] {\n                        clientIdentity.getClientId(), batchSize });\n                return new Message(-1, new ArrayList<Entry>()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                List<Entry> entrys = Lists.transform(events.getEvents(), new Function<Event, Entry>() {\n\n                    public Entry apply(Event input) {\n                        return input.getEntry();\n                    }\n                });\n\n                logger.info(\"getWithoutAck successfully, clientId:{} batchSize:{}  real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(), batchSize, entrys.size(), batchId,\n                        events.getPositionRange());\n                return new Message(batchId, entrys);\n            }\n\n        }\n    }\n","realPath":"server/src/main/java/com/alibaba/otter/canal/server/embedded/CanalServerWithEmbedded.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"B"}],"commitId":"ea889cb0049fd2398ee98bf77d327c2536fc3239","commitMessage":"@@@Merge pull request #115 from wenerme/master\n\nTypo. javadoc ??.  ?? guava ?18.0","date":"2015-04-28 20:26:41","modifiedFileCount":"29","status":"B","submitter":"agapple"},{"authorTime":"2018-02-10 11:15:44","codes":[{"authorDate":"2018-02-10 11:15:44","commitOrder":2,"curCode":"    public Message get(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                 throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            if (positionRanges != null) {\n                throw new CanalServerException(String.format(\"clientId:%s has last batch:[%s] isn't ack , maybe loss data\",\n                    clientIdentity.getClientId(),\n                    positionRanges));\n            }\n\n            Events<Event> events = null;\n            Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n            events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"get successfully, clientId:{} batchSize:{} but result is null\",\n                        clientIdentity.getClientId(), batchSize);\n                return new Message(-1, new ArrayList<Entry>()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                List<Entry> entrys = Lists.transform(events.getEvents(), new Function<Event, Entry>() {\n\n                    public Entry apply(Event input) {\n                        return input.getEntry();\n                    }\n                });\n                if (logger.isInfoEnabled()) {\n                    logger.info(\"get successfully, clientId:{} batchSize:{} real size is {} and result is [batchId:{} , position:{}]\",\n                            clientIdentity.getClientId(),\n                            batchSize,\n                            entrys.size(),\n                            batchId,\n                            events.getPositionRange());\n                }\n                \r\n                ack(clientIdentity, batchId);\n                return new Message(batchId, entrys);\n            }\n        }\n    }\n","date":"2018-02-10 11:15:44","endLine":248,"groupId":"1833","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(ClientIdentityclientIdentity@intbatchSize@Longtimeout@TimeUnitunit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/1b/6bd448a477dbca04280a761901e5c4cfe80442.src","preCode":"    public Message get(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                 throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            if (positionRanges != null) {\n                throw new CanalServerException(String.format(\"clientId:%s has last batch:[%s] isn't ack , maybe loss data\",\n                    clientIdentity.getClientId(),\n                    positionRanges));\n            }\n\n            Events<Event> events = null;\n            Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n            events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"get successfully, clientId:{} batchSize:{} but result is null\", new Object[] {\n                        clientIdentity.getClientId(), batchSize });\n                return new Message(-1, new ArrayList<Entry>()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                List<Entry> entrys = Lists.transform(events.getEvents(), new Function<Event, Entry>() {\n\n                    public Entry apply(Event input) {\n                        return input.getEntry();\n                    }\n                });\n\n                logger.info(\"get successfully, clientId:{} batchSize:{} real size is {} and result is [batchId:{} , position:{}]\",\n                    clientIdentity.getClientId(),\n                    batchSize,\n                    entrys.size(),\n                    batchId,\n                    events.getPositionRange());\n                \r\n                ack(clientIdentity, batchId);\n                return new Message(batchId, entrys);\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/alibaba/otter/canal/server/embedded/CanalServerWithEmbedded.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"},{"authorDate":"2018-02-10 11:15:44","commitOrder":2,"curCode":"    public Message getWithoutAck(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                           throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            Events<Event> events = null;\n            if (positionRanges != null) { \r\n                events = getEvents(canalInstance.getEventStore(), positionRanges.getStart(), batchSize, timeout, unit);\n            } else {\r\n                Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n                if (start == null) { \r\n                    start = canalInstance.getEventStore().getFirstPosition();\n                }\n\n                events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n            }\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"getWithoutAck successfully, clientId:{} batchSize:{} but result is null\",\n                        clientIdentity.getClientId(), batchSize);\n                return new Message(-1, new ArrayList<Entry>()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                List<Entry> entrys = Lists.transform(events.getEvents(), new Function<Event, Entry>() {\n\n                    public Entry apply(Event input) {\n                        return input.getEntry();\n                    }\n                });\n                if (logger.isInfoEnabled()) {\n                    logger.info(\"getWithoutAck successfully, clientId:{} batchSize:{}  real size is {} and result is [batchId:{} , position:{}]\",\n                            clientIdentity.getClientId(),\n                            batchSize,\n                            entrys.size(),\n                            batchId,\n                            events.getPositionRange());\n                }\n                return new Message(batchId, entrys);\n            }\n\n        }\n    }\n","date":"2018-02-10 11:15:44","endLine":325,"groupId":"972","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getWithoutAck","params":"(ClientIdentityclientIdentity@intbatchSize@Longtimeout@TimeUnitunit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/1b/6bd448a477dbca04280a761901e5c4cfe80442.src","preCode":"    public Message getWithoutAck(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                           throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            Events<Event> events = null;\n            if (positionRanges != null) { \r\n                events = getEvents(canalInstance.getEventStore(), positionRanges.getStart(), batchSize, timeout, unit);\n            } else {\r\n                Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n                if (start == null) { \r\n                    start = canalInstance.getEventStore().getFirstPosition();\n                }\n\n                events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n            }\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"getWithoutAck successfully, clientId:{} batchSize:{} but result is null\", new Object[] {\n                        clientIdentity.getClientId(), batchSize });\n                return new Message(-1, new ArrayList<Entry>()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                List<Entry> entrys = Lists.transform(events.getEvents(), new Function<Event, Entry>() {\n\n                    public Entry apply(Event input) {\n                        return input.getEntry();\n                    }\n                });\n\n                logger.info(\"getWithoutAck successfully, clientId:{} batchSize:{}  real size is {} and result is [batchId:{} , position:{}]\",\n                    clientIdentity.getClientId(),\n                    batchSize,\n                    entrys.size(),\n                    batchId,\n                    events.getPositionRange());\n                return new Message(batchId, entrys);\n            }\n\n        }\n    }\n","realPath":"server/src/main/java/com/alibaba/otter/canal/server/embedded/CanalServerWithEmbedded.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"}],"commitId":"31ed4efe3af5c4b1f8e0cb42ba9a68c21ec4d0e3","commitMessage":"@@@Merge pull request #497 from lcybo/master\n\n????log???","date":"2018-02-10 11:15:44","modifiedFileCount":"1","status":"M","submitter":"agapple"},{"authorTime":"2018-07-18 18:21:45","codes":[{"authorDate":"2018-07-18 18:21:45","commitOrder":3,"curCode":"    public Message get(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                 throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            if (positionRanges != null) {\n                throw new CanalServerException(String.format(\"clientId:%s has last batch:[%s] isn't ack , maybe loss data\",\n                    clientIdentity.getClientId(),\n                    positionRanges));\n            }\n\n            Events<Event> events = null;\n            Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n            events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"get successfully, clientId:{} batchSize:{} but result is null\",\n                    clientIdentity.getClientId(),\n                    batchSize);\n                return new Message(-1, true, new ArrayList()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                List<ByteString> entrys = Lists.transform(events.getEvents(), new Function<Event, ByteString>() {\n\n                    public ByteString apply(Event input) {\n                        return input.getRawEntry();\n                    }\n                });\n                if (logger.isInfoEnabled()) {\n                    logger.info(\"get successfully, clientId:{} batchSize:{} real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(),\n                        batchSize,\n                        entrys.size(),\n                        batchId,\n                        events.getPositionRange());\n                }\n                \r\n                ack(clientIdentity, batchId);\n                return new Message(batchId, true, entrys);\n            }\n        }\n    }\n","date":"2018-07-18 18:21:45","endLine":249,"groupId":"9","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(ClientIdentityclientIdentity@intbatchSize@Longtimeout@TimeUnitunit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/72/2bb2bcdb46b8d1a6d66cc3beeb514b760f4ada.src","preCode":"    public Message get(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                 throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            if (positionRanges != null) {\n                throw new CanalServerException(String.format(\"clientId:%s has last batch:[%s] isn't ack , maybe loss data\",\n                    clientIdentity.getClientId(),\n                    positionRanges));\n            }\n\n            Events<Event> events = null;\n            Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n            events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"get successfully, clientId:{} batchSize:{} but result is null\",\n                    clientIdentity.getClientId(),\n                    batchSize);\n                return new Message(-1, new ArrayList<Entry>()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                List<Entry> entrys = Lists.transform(events.getEvents(), new Function<Event, Entry>() {\n\n                    public Entry apply(Event input) {\n                        return input.getEntry();\n                    }\n                });\n                if (logger.isInfoEnabled()) {\n                    logger.info(\"get successfully, clientId:{} batchSize:{} real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(),\n                        batchSize,\n                        entrys.size(),\n                        batchId,\n                        events.getPositionRange());\n                }\n                \r\n                ack(clientIdentity, batchId);\n                return new Message(batchId, entrys);\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/alibaba/otter/canal/server/embedded/CanalServerWithEmbedded.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"},{"authorDate":"2018-07-18 18:21:45","commitOrder":3,"curCode":"    public Message getWithoutAck(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                           throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            Events<Event> events = null;\n            if (positionRanges != null) { \r\n                events = getEvents(canalInstance.getEventStore(), positionRanges.getStart(), batchSize, timeout, unit);\n            } else {\r\n                Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n                if (start == null) { \r\n                    start = canalInstance.getEventStore().getFirstPosition();\n                }\n\n                events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n            }\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"getWithoutAck successfully, clientId:{} batchSize:{} but result is null\",\n                    clientIdentity.getClientId(),\n                    batchSize);\n                return new Message(-1, true, new ArrayList()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                List<ByteString> entrys = Lists.transform(events.getEvents(), new Function<Event, ByteString>() {\n\n                    public ByteString apply(Event input) {\n                        return input.getRawEntry();\n                    }\n                });\n                if (logger.isInfoEnabled()) {\n                    logger.info(\"getWithoutAck successfully, clientId:{} batchSize:{}  real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(),\n                        batchSize,\n                        entrys.size(),\n                        batchId,\n                        events.getPositionRange());\n                }\n                return new Message(batchId, true, entrys);\n            }\n\n        }\n    }\n","date":"2018-07-18 18:21:45","endLine":327,"groupId":"11","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getWithoutAck","params":"(ClientIdentityclientIdentity@intbatchSize@Longtimeout@TimeUnitunit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/72/2bb2bcdb46b8d1a6d66cc3beeb514b760f4ada.src","preCode":"    public Message getWithoutAck(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                           throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            Events<Event> events = null;\n            if (positionRanges != null) { \r\n                events = getEvents(canalInstance.getEventStore(), positionRanges.getStart(), batchSize, timeout, unit);\n            } else {\r\n                Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n                if (start == null) { \r\n                    start = canalInstance.getEventStore().getFirstPosition();\n                }\n\n                events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n            }\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"getWithoutAck successfully, clientId:{} batchSize:{} but result is null\",\n                    clientIdentity.getClientId(),\n                    batchSize);\n                return new Message(-1, new ArrayList<Entry>()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                List<Entry> entrys = Lists.transform(events.getEvents(), new Function<Event, Entry>() {\n\n                    public Entry apply(Event input) {\n                        return input.getEntry();\n                    }\n                });\n                if (logger.isInfoEnabled()) {\n                    logger.info(\"getWithoutAck successfully, clientId:{} batchSize:{}  real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(),\n                        batchSize,\n                        entrys.size(),\n                        batchId,\n                        events.getPositionRange());\n                }\n                return new Message(batchId, entrys);\n            }\n\n        }\n    }\n","realPath":"server/src/main/java/com/alibaba/otter/canal/server/embedded/CanalServerWithEmbedded.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"10bb800f85ac047071a942a3323fccebed3dac44","commitMessage":"@@@fixed issue #726 .  ??SessionHandler?????. ?????Entry\n","date":"2018-07-18 18:21:45","modifiedFileCount":"17","status":"M","submitter":"??"},{"authorTime":"2018-09-18 10:18:22","codes":[{"authorDate":"2018-07-18 18:21:45","commitOrder":4,"curCode":"    public Message get(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                 throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            if (positionRanges != null) {\n                throw new CanalServerException(String.format(\"clientId:%s has last batch:[%s] isn't ack , maybe loss data\",\n                    clientIdentity.getClientId(),\n                    positionRanges));\n            }\n\n            Events<Event> events = null;\n            Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n            events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"get successfully, clientId:{} batchSize:{} but result is null\",\n                    clientIdentity.getClientId(),\n                    batchSize);\n                return new Message(-1, true, new ArrayList()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                List<ByteString> entrys = Lists.transform(events.getEvents(), new Function<Event, ByteString>() {\n\n                    public ByteString apply(Event input) {\n                        return input.getRawEntry();\n                    }\n                });\n                if (logger.isInfoEnabled()) {\n                    logger.info(\"get successfully, clientId:{} batchSize:{} real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(),\n                        batchSize,\n                        entrys.size(),\n                        batchId,\n                        events.getPositionRange());\n                }\n                \r\n                ack(clientIdentity, batchId);\n                return new Message(batchId, true, entrys);\n            }\n        }\n    }\n","date":"2018-07-18 18:21:45","endLine":249,"groupId":"9","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(ClientIdentityclientIdentity@intbatchSize@Longtimeout@TimeUnitunit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/72/2bb2bcdb46b8d1a6d66cc3beeb514b760f4ada.src","preCode":"    public Message get(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                 throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            if (positionRanges != null) {\n                throw new CanalServerException(String.format(\"clientId:%s has last batch:[%s] isn't ack , maybe loss data\",\n                    clientIdentity.getClientId(),\n                    positionRanges));\n            }\n\n            Events<Event> events = null;\n            Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n            events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"get successfully, clientId:{} batchSize:{} but result is null\",\n                    clientIdentity.getClientId(),\n                    batchSize);\n                return new Message(-1, true, new ArrayList()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                List<ByteString> entrys = Lists.transform(events.getEvents(), new Function<Event, ByteString>() {\n\n                    public ByteString apply(Event input) {\n                        return input.getRawEntry();\n                    }\n                });\n                if (logger.isInfoEnabled()) {\n                    logger.info(\"get successfully, clientId:{} batchSize:{} real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(),\n                        batchSize,\n                        entrys.size(),\n                        batchId,\n                        events.getPositionRange());\n                }\n                \r\n                ack(clientIdentity, batchId);\n                return new Message(batchId, true, entrys);\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/alibaba/otter/canal/server/embedded/CanalServerWithEmbedded.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"N"},{"authorDate":"2018-09-18 10:18:22","commitOrder":4,"curCode":"    public Message getWithoutAck(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                           throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            Events<Event> events = null;\n            if (positionRanges != null) { \r\n                events = getEvents(canalInstance.getEventStore(), positionRanges.getStart(), batchSize, timeout, unit);\n            } else {\r\n                Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n                if (start == null) { \r\n                    start = canalInstance.getEventStore().getFirstPosition();\n                }\n\n                events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n            }\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                \r\n                \r\n                \r\n                \r\n                return new Message(-1, true, new ArrayList()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                List<ByteString> entrys = Lists.transform(events.getEvents(), new Function<Event, ByteString>() {\n\n                    public ByteString apply(Event input) {\n                        return input.getRawEntry();\n                    }\n                });\n                if (logger.isInfoEnabled()) {\n                    logger.info(\"getWithoutAck successfully, clientId:{} batchSize:{}  real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(),\n                        batchSize,\n                        entrys.size(),\n                        batchId,\n                        events.getPositionRange());\n                }\n                return new Message(batchId, true, entrys);\n            }\n\n        }\n    }\n","date":"2018-09-18 10:18:22","endLine":340,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getWithoutAck","params":"(ClientIdentityclientIdentity@intbatchSize@Longtimeout@TimeUnitunit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/a4/f74c907960cdb91d077024f8df290b7b7510df.src","preCode":"    public Message getWithoutAck(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                           throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            Events<Event> events = null;\n            if (positionRanges != null) { \r\n                events = getEvents(canalInstance.getEventStore(), positionRanges.getStart(), batchSize, timeout, unit);\n            } else {\r\n                Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n                if (start == null) { \r\n                    start = canalInstance.getEventStore().getFirstPosition();\n                }\n\n                events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n            }\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"getWithoutAck successfully, clientId:{} batchSize:{} but result is null\",\n                    clientIdentity.getClientId(),\n                    batchSize);\n                return new Message(-1, true, new ArrayList()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                List<ByteString> entrys = Lists.transform(events.getEvents(), new Function<Event, ByteString>() {\n\n                    public ByteString apply(Event input) {\n                        return input.getRawEntry();\n                    }\n                });\n                if (logger.isInfoEnabled()) {\n                    logger.info(\"getWithoutAck successfully, clientId:{} batchSize:{}  real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(),\n                        batchSize,\n                        entrys.size(),\n                        batchId,\n                        events.getPositionRange());\n                }\n                return new Message(batchId, true, entrys);\n            }\n\n        }\n    }\n","realPath":"server/src/main/java/com/alibaba/otter/canal/server/embedded/CanalServerWithEmbedded.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"}],"commitId":"e9439125bd4beabf385b232cbbf270831bbe53a6","commitMessage":"@@@Merge branch 'master' into master","date":"2018-09-18 10:18:22","modifiedFileCount":"18","status":"M","submitter":"rewerma"},{"authorTime":"2018-10-24 13:45:58","codes":[{"authorDate":"2018-10-24 13:45:58","commitOrder":5,"curCode":"    public Message get(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                 throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            if (positionRanges != null) {\n                throw new CanalServerException(String.format(\"clientId:%s has last batch:[%s] isn't ack , maybe loss data\",\n                    clientIdentity.getClientId(),\n                    positionRanges));\n            }\n\n            Events<Event> events = null;\n            Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n            events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"get successfully, clientId:{} batchSize:{} but result is null\",\n                    clientIdentity.getClientId(),\n                    batchSize);\n                return new Message(-1, true, new ArrayList()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                boolean raw = isRaw(canalInstance.getEventStore());\n                List entrys = null;\n                if (raw) {\n                    entrys = Lists.transform(events.getEvents(), new Function<Event, ByteString>() {\n\n                        public ByteString apply(Event input) {\n                            return input.getRawEntry();\n                        }\n                    });\n                } else {\n                    entrys = Lists.transform(events.getEvents(), new Function<Event, CanalEntry.Entry>() {\n\n                        public CanalEntry.Entry apply(Event input) {\n                            return input.getEntry();\n                        }\n                    });\n                }\n                if (logger.isInfoEnabled()) {\n                    logger.info(\"get successfully, clientId:{} batchSize:{} real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(),\n                        batchSize,\n                        entrys.size(),\n                        batchId,\n                        events.getPositionRange());\n                }\n                \r\n                ack(clientIdentity, batchId);\n                return new Message(batchId, raw, entrys);\n            }\n        }\n    }\n","date":"2018-10-24 13:45:58","endLine":278,"groupId":"1833","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(ClientIdentityclientIdentity@intbatchSize@Longtimeout@TimeUnitunit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/b0/7062ee9274c97b81429776acf8bedf351b2ab5.src","preCode":"    public Message get(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                 throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            if (positionRanges != null) {\n                throw new CanalServerException(String.format(\"clientId:%s has last batch:[%s] isn't ack , maybe loss data\",\n                    clientIdentity.getClientId(),\n                    positionRanges));\n            }\n\n            Events<Event> events = null;\n            Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n            events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"get successfully, clientId:{} batchSize:{} but result is null\",\n                    clientIdentity.getClientId(),\n                    batchSize);\n                return new Message(-1, true, new ArrayList()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                List<ByteString> entrys = Lists.transform(events.getEvents(), new Function<Event, ByteString>() {\n\n                    public ByteString apply(Event input) {\n                        return input.getRawEntry();\n                    }\n                });\n                if (logger.isInfoEnabled()) {\n                    logger.info(\"get successfully, clientId:{} batchSize:{} real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(),\n                        batchSize,\n                        entrys.size(),\n                        batchId,\n                        events.getPositionRange());\n                }\n                \r\n                ack(clientIdentity, batchId);\n                return new Message(batchId, true, entrys);\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/alibaba/otter/canal/server/embedded/CanalServerWithEmbedded.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"},{"authorDate":"2018-10-24 13:45:58","commitOrder":5,"curCode":"    public Message getWithoutAck(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                           throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            Events<Event> events = null;\n            if (positionRanges != null) { \r\n                events = getEvents(canalInstance.getEventStore(), positionRanges.getStart(), batchSize, timeout, unit);\n            } else {\r\n                Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n                if (start == null) { \r\n                    start = canalInstance.getEventStore().getFirstPosition();\n                }\n\n                events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n            }\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                \r\n                \r\n                \r\n                \r\n                \r\n                return new Message(-1, true, new ArrayList()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                boolean raw = isRaw(canalInstance.getEventStore());\n                List entrys = null;\n                if (raw) {\n                    entrys = Lists.transform(events.getEvents(), new Function<Event, ByteString>() {\n\n                        public ByteString apply(Event input) {\n                            return input.getRawEntry();\n                        }\n                    });\n                } else {\n                    entrys = Lists.transform(events.getEvents(), new Function<Event, CanalEntry.Entry>() {\n\n                        public CanalEntry.Entry apply(Event input) {\n                            return input.getEntry();\n                        }\n                    });\n                }\n                if (logger.isInfoEnabled()) {\n                    logger.info(\"getWithoutAck successfully, clientId:{} batchSize:{}  real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(),\n                        batchSize,\n                        entrys.size(),\n                        batchId,\n                        events.getPositionRange());\n                }\n                return new Message(batchId, raw, entrys);\n            }\n\n        }\n    }\n","date":"2018-10-24 13:45:58","endLine":369,"groupId":"1834","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getWithoutAck","params":"(ClientIdentityclientIdentity@intbatchSize@Longtimeout@TimeUnitunit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/b0/7062ee9274c97b81429776acf8bedf351b2ab5.src","preCode":"    public Message getWithoutAck(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                           throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            Events<Event> events = null;\n            if (positionRanges != null) { \r\n                events = getEvents(canalInstance.getEventStore(), positionRanges.getStart(), batchSize, timeout, unit);\n            } else {\r\n                Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n                if (start == null) { \r\n                    start = canalInstance.getEventStore().getFirstPosition();\n                }\n\n                events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n            }\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                \r\n                \r\n                \r\n                \r\n                return new Message(-1, true, new ArrayList()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                List<ByteString> entrys = Lists.transform(events.getEvents(), new Function<Event, ByteString>() {\n\n                    public ByteString apply(Event input) {\n                        return input.getRawEntry();\n                    }\n                });\n                if (logger.isInfoEnabled()) {\n                    logger.info(\"getWithoutAck successfully, clientId:{} batchSize:{}  real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(),\n                        batchSize,\n                        entrys.size(),\n                        batchId,\n                        events.getPositionRange());\n                }\n                return new Message(batchId, true, entrys);\n            }\n\n        }\n    }\n","realPath":"server/src/main/java/com/alibaba/otter/canal/server/embedded/CanalServerWithEmbedded.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"}],"commitId":"c75c24808664ede8faadabd082b7a191f3c232fd","commitMessage":"@@@fixed issue #1019 .  support canal embedded with Entry\n","date":"2018-10-24 13:45:58","modifiedFileCount":"6","status":"M","submitter":"??"},{"authorTime":"2020-09-17 10:48:15","codes":[{"authorDate":"2020-09-17 10:48:15","commitOrder":6,"curCode":"    public Message get(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                 throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            if (positionRanges != null) {\n                throw new CanalServerException(String.format(\"clientId:%s has last batch:[%s] isn't ack , maybe loss data\",\n                    clientIdentity.getClientId(),\n                    positionRanges));\n            }\n\n            Events<Event> events = null;\n            Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n            events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"get successfully, clientId:{} batchSize:{} but result is null\",\n                    clientIdentity.getClientId(),\n                    batchSize);\n                return new Message(-1, true, new ArrayList()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                boolean raw = isRaw(canalInstance.getEventStore());\n                List entrys = null;\n                if (raw) {\n                    entrys = Lists.transform(events.getEvents(), Event::getRawEntry);\n                } else {\n                    entrys = Lists.transform(events.getEvents(), Event::getEntry);\n                }\n                if (logger.isInfoEnabled()) {\n                    logger.info(\"get successfully, clientId:{} batchSize:{} real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(),\n                        batchSize,\n                        entrys.size(),\n                        batchId,\n                        events.getPositionRange());\n                }\n                \r\n                ack(clientIdentity, batchId);\n                return new Message(batchId, raw, entrys);\n            }\n        }\n    }\n","date":"2020-09-17 17:46:20","endLine":289,"groupId":"1044","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(ClientIdentityclientIdentity@intbatchSize@Longtimeout@TimeUnitunit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/8f/0b7362de7b57dc4edd33b191d38585cbbbf4fb.src","preCode":"    public Message get(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                 throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            if (positionRanges != null) {\n                throw new CanalServerException(String.format(\"clientId:%s has last batch:[%s] isn't ack , maybe loss data\",\n                    clientIdentity.getClientId(),\n                    positionRanges));\n            }\n\n            Events<Event> events = null;\n            Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n            events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                logger.debug(\"get successfully, clientId:{} batchSize:{} but result is null\",\n                    clientIdentity.getClientId(),\n                    batchSize);\n                return new Message(-1, true, new ArrayList()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                boolean raw = isRaw(canalInstance.getEventStore());\n                List entrys = null;\n                if (raw) {\n                    entrys = Lists.transform(events.getEvents(), new Function<Event, ByteString>() {\n\n                        public ByteString apply(Event input) {\n                            return input.getRawEntry();\n                        }\n                    });\n                } else {\n                    entrys = Lists.transform(events.getEvents(), new Function<Event, CanalEntry.Entry>() {\n\n                        public CanalEntry.Entry apply(Event input) {\n                            return input.getEntry();\n                        }\n                    });\n                }\n                if (logger.isInfoEnabled()) {\n                    logger.info(\"get successfully, clientId:{} batchSize:{} real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(),\n                        batchSize,\n                        entrys.size(),\n                        batchId,\n                        events.getPositionRange());\n                }\n                \r\n                ack(clientIdentity, batchId);\n                return new Message(batchId, raw, entrys);\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/alibaba/otter/canal/server/embedded/CanalServerWithEmbedded.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2020-09-17 10:48:15","commitOrder":6,"curCode":"    public Message getWithoutAck(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                           throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            Events<Event> events = null;\n            if (positionRanges != null) { \r\n                events = getEvents(canalInstance.getEventStore(), positionRanges.getStart(), batchSize, timeout, unit);\n            } else {\r\n                Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n                if (start == null) { \r\n                    start = canalInstance.getEventStore().getFirstPosition();\n                }\n\n                events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n            }\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                \r\n                \r\n                \r\n                \r\n                \r\n                return new Message(-1, true, new ArrayList()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                boolean raw = isRaw(canalInstance.getEventStore());\n                List entrys = null;\n                if (raw) {\n                    entrys = Lists.transform(events.getEvents(), Event::getRawEntry);\n                } else {\n                    entrys = Lists.transform(events.getEvents(), Event::getEntry);\n                }\n                if (logger.isInfoEnabled()) {\n                    logger.info(\"getWithoutAck successfully, clientId:{} batchSize:{}  real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(),\n                        batchSize,\n                        entrys.size(),\n                        batchId,\n                        events.getPositionRange());\n                }\n                return new Message(batchId, raw, entrys);\n            }\n\n        }\n    }\n","date":"2020-09-17 17:46:20","endLine":370,"groupId":"1044","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getWithoutAck","params":"(ClientIdentityclientIdentity@intbatchSize@Longtimeout@TimeUnitunit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-canal-10-0.7/blobInfo/CC_OUT/blobs/8f/0b7362de7b57dc4edd33b191d38585cbbbf4fb.src","preCode":"    public Message getWithoutAck(ClientIdentity clientIdentity, int batchSize, Long timeout, TimeUnit unit)\n                                                                                                           throws CanalServerException {\n        checkStart(clientIdentity.getDestination());\n        checkSubscribe(clientIdentity);\n\n        CanalInstance canalInstance = canalInstances.get(clientIdentity.getDestination());\n        synchronized (canalInstance) {\n            \r\n            PositionRange<LogPosition> positionRanges = canalInstance.getMetaManager().getLastestBatch(clientIdentity);\n\n            Events<Event> events = null;\n            if (positionRanges != null) { \r\n                events = getEvents(canalInstance.getEventStore(), positionRanges.getStart(), batchSize, timeout, unit);\n            } else {\r\n                Position start = canalInstance.getMetaManager().getCursor(clientIdentity);\n                if (start == null) { \r\n                    start = canalInstance.getEventStore().getFirstPosition();\n                }\n\n                events = getEvents(canalInstance.getEventStore(), start, batchSize, timeout, unit);\n            }\n\n            if (CollectionUtils.isEmpty(events.getEvents())) {\n                \r\n                \r\n                \r\n                \r\n                \r\n                return new Message(-1, true, new ArrayList()); \r\n            } else {\n                \r\n                Long batchId = canalInstance.getMetaManager().addBatch(clientIdentity, events.getPositionRange());\n                boolean raw = isRaw(canalInstance.getEventStore());\n                List entrys = null;\n                if (raw) {\n                    entrys = Lists.transform(events.getEvents(), new Function<Event, ByteString>() {\n\n                        public ByteString apply(Event input) {\n                            return input.getRawEntry();\n                        }\n                    });\n                } else {\n                    entrys = Lists.transform(events.getEvents(), new Function<Event, CanalEntry.Entry>() {\n\n                        public CanalEntry.Entry apply(Event input) {\n                            return input.getEntry();\n                        }\n                    });\n                }\n                if (logger.isInfoEnabled()) {\n                    logger.info(\"getWithoutAck successfully, clientId:{} batchSize:{}  real size is {} and result is [batchId:{} , position:{}]\",\n                        clientIdentity.getClientId(),\n                        batchSize,\n                        entrys.size(),\n                        batchId,\n                        events.getPositionRange());\n                }\n                return new Message(batchId, raw, entrys);\n            }\n\n        }\n    }\n","realPath":"server/src/main/java/com/alibaba/otter/canal/server/embedded/CanalServerWithEmbedded.java","repoName":"canal","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"}],"commitId":"e7658879bce801da20c3ebd571ceb0a9fff8f6c8","commitMessage":"@@@= cold cleanup\n\n  * using lambda if possible (we are already building in Java8)\n  * using diamond when new generic instance\n  * remove used improt\n","date":"2020-09-17 17:46:20","modifiedFileCount":"133","status":"M","submitter":"zavakid"}]
