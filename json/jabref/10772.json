[{"authorTime":"2017-02-17 05:41:47","codes":[{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public void testFixAuthorFirstNameFirstCommas() {\n\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", true, false));\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", false, false));\n\n        Assert.assertEquals(\"John Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",\n                false, false));\n        Assert.assertEquals(\"J. Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\", true,\n                false));\n\n        \r\n        Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true, false).equals(AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John von Neumann\" + (0 == 1 ? \"\" : \" and \")\n                        + \"John Smith and Black Brown, Peter\", true, false)));\n\n        Assert.assertEquals(\"John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\", false, false));\n        Assert.assertEquals(\"J. Smith and P. Black Brown\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Smith and Black Brown, Peter\", true, false));\n\n        \r\n        \r\n        Assert.assertEquals(\"John von Neumann, John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false, false));\n        Assert.assertEquals(\"J. von Neumann, J. Smith and P. Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true, false));\n\n        Assert.assertEquals(\"J. P. von Neumann\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Peter von Neumann\", true, false));\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", true, true));\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", false, true));\n\n        Assert.assertEquals(\"John Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",\n                false, true));\n        Assert.assertEquals(\"J. Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\", true,\n                true));\n\n        \r\n        Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true, true).equals(AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John von Neumann\" + (0 == 1 ? \"\" : \" and \")\n                        + \"John Smith and Black Brown, Peter\", true, true)));\n\n        Assert.assertEquals(\"John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\", false, true));\n        Assert.assertEquals(\"J. Smith and P. Black Brown\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Smith and Black Brown, Peter\", true, true));\n\n        \r\n        \r\n        Assert.assertEquals(\"John von Neumann, John Smith, and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false, true));\n        Assert.assertEquals(\"J. von Neumann, J. Smith, and P. Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true, true));\n\n        Assert.assertEquals(\"J. P. von Neumann\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Peter von Neumann\", true, true));\n\n    }\n","date":"2017-02-17 05:41:47","endLine":107,"groupId":"11131","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFixAuthorFirstNameFirstCommas","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/1a/cbb4742700cac0b261d4116fd6bd83ffe08886.src","preCode":"    public void testFixAuthorFirstNameFirstCommas() {\n\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", true, false));\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", false, false));\n\n        Assert.assertEquals(\"John Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",\n                false, false));\n        Assert.assertEquals(\"J. Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\", true,\n                false));\n\n        \r\n        Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true, false).equals(AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John von Neumann\" + (0 == 1 ? \"\" : \" and \")\n                        + \"John Smith and Black Brown, Peter\", true, false)));\n\n        Assert.assertEquals(\"John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\", false, false));\n        Assert.assertEquals(\"J. Smith and P. Black Brown\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Smith and Black Brown, Peter\", true, false));\n\n        \r\n        \r\n        Assert.assertEquals(\"John von Neumann, John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false, false));\n        Assert.assertEquals(\"J. von Neumann, J. Smith and P. Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true, false));\n\n        Assert.assertEquals(\"J. P. von Neumann\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Peter von Neumann\", true, false));\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", true, true));\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", false, true));\n\n        Assert.assertEquals(\"John Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",\n                false, true));\n        Assert.assertEquals(\"J. Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\", true,\n                true));\n\n        \r\n        Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true, true).equals(AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John von Neumann\" + (0 == 1 ? \"\" : \" and \")\n                        + \"John Smith and Black Brown, Peter\", true, true)));\n\n        Assert.assertEquals(\"John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\", false, true));\n        Assert.assertEquals(\"J. Smith and P. Black Brown\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Smith and Black Brown, Peter\", true, true));\n\n        \r\n        \r\n        Assert.assertEquals(\"John von Neumann, John Smith, and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false, true));\n        Assert.assertEquals(\"J. von Neumann, J. Smith, and P. Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true, true));\n\n        Assert.assertEquals(\"J. P. von Neumann\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Peter von Neumann\", true, true));\n\n    }\n","realPath":"src/test/java/org/jabref/model/entry/AuthorListTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"},{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public void testFixAuthorLastNameOnlyCommas() {\n\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorLastNameOnlyCommas(\"\", false));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\", false));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\", false));\n\n        Assert.assertTrue(AuthorList.fixAuthorLastNameOnlyCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", false).equals(AuthorList\n                .fixAuthorLastNameOnlyCommas(\"John von Neumann\" + (0 == 1 ? \"\" : \" and \")\n                        + \"John Smith and Black Brown, Peter\", false)));\n\n        Assert.assertEquals(\"von Neumann, Smith and Black Brown\", AuthorList\n                .fixAuthorLastNameOnlyCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false));\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorLastNameOnlyCommas(\"\", true));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\", true));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\", true));\n\n        Assert.assertTrue(AuthorList.fixAuthorLastNameOnlyCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true).equals(AuthorList\n                .fixAuthorLastNameOnlyCommas(\"John von Neumann\" + (0 == 1 ? \"\" : \" and \")\n                        + \"John Smith and Black Brown, Peter\", true)));\n\n        Assert.assertEquals(\"von Neumann, Smith, and Black Brown\", AuthorList\n                .fixAuthorLastNameOnlyCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true));\n    }\n","date":"2017-02-17 05:41:47","endLine":291,"groupId":"12581","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFixAuthorLastNameOnlyCommas","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/1a/cbb4742700cac0b261d4116fd6bd83ffe08886.src","preCode":"    public void testFixAuthorLastNameOnlyCommas() {\n\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorLastNameOnlyCommas(\"\", false));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\", false));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\", false));\n\n        Assert.assertTrue(AuthorList.fixAuthorLastNameOnlyCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", false).equals(AuthorList\n                .fixAuthorLastNameOnlyCommas(\"John von Neumann\" + (0 == 1 ? \"\" : \" and \")\n                        + \"John Smith and Black Brown, Peter\", false)));\n\n        Assert.assertEquals(\"von Neumann, Smith and Black Brown\", AuthorList\n                .fixAuthorLastNameOnlyCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false));\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorLastNameOnlyCommas(\"\", true));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\", true));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\", true));\n\n        Assert.assertTrue(AuthorList.fixAuthorLastNameOnlyCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true).equals(AuthorList\n                .fixAuthorLastNameOnlyCommas(\"John von Neumann\" + (0 == 1 ? \"\" : \" and \")\n                        + \"John Smith and Black Brown, Peter\", true)));\n\n        Assert.assertEquals(\"von Neumann, Smith, and Black Brown\", AuthorList\n                .fixAuthorLastNameOnlyCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true));\n    }\n","realPath":"src/test/java/org/jabref/model/entry/AuthorListTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"B"}],"commitId":"ebbeb1d249edf7134abf92d24c2031ae54d19881","commitMessage":"@@@Merge branch 'net-sf-to-org-jabref'\n","date":"2017-02-17 05:41:47","modifiedFileCount":"1","status":"B","submitter":"Oliver Kopp"},{"authorTime":"2017-08-24 15:26:47","codes":[{"authorDate":"2017-08-24 15:26:47","commitOrder":2,"curCode":"    public void testFixAuthorFirstNameFirstCommas() {\n\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", true, false));\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", false, false));\n\n        Assert.assertEquals(\"John Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",\n                false, false));\n        Assert.assertEquals(\"J. Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\", true,\n                false));\n\n        \r\n        Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true, false).equals(\n                        AuthorList\n                                .fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\", true, false)));\n\n        Assert.assertEquals(\"John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\", false, false));\n        Assert.assertEquals(\"J. Smith and P. Black Brown\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Smith and Black Brown, Peter\", true, false));\n\n        \r\n        \r\n        Assert.assertEquals(\"John von Neumann, John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false, false));\n        Assert.assertEquals(\"J. von Neumann, J. Smith and P. Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true, false));\n\n        Assert.assertEquals(\"J. P. von Neumann\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Peter von Neumann\", true, false));\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", true, true));\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", false, true));\n\n        Assert.assertEquals(\"John Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",\n                false, true));\n        Assert.assertEquals(\"J. Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\", true,\n                true));\n\n        \r\n        Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true, true).equals(\n                        AuthorList\n                                .fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\", true, true)));\n\n        Assert.assertEquals(\"John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\", false, true));\n        Assert.assertEquals(\"J. Smith and P. Black Brown\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Smith and Black Brown, Peter\", true, true));\n\n        \r\n        \r\n        Assert.assertEquals(\"John von Neumann, John Smith, and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false, true));\n        Assert.assertEquals(\"J. von Neumann, J. Smith, and P. Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true, true));\n\n        Assert.assertEquals(\"J. P. von Neumann\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Peter von Neumann\", true, true));\n\n    }\n","date":"2017-08-24 15:26:47","endLine":100,"groupId":"11131","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFixAuthorFirstNameFirstCommas","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/7b/234f41bb7292e487a39608bd6bb1944edc2a89.src","preCode":"    public void testFixAuthorFirstNameFirstCommas() {\n\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", true, false));\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", false, false));\n\n        Assert.assertEquals(\"John Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",\n                false, false));\n        Assert.assertEquals(\"J. Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\", true,\n                false));\n\n        \r\n        Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true, false).equals(AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John von Neumann\" + (0 == 1 ? \"\" : \" and \")\n                        + \"John Smith and Black Brown, Peter\", true, false)));\n\n        Assert.assertEquals(\"John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\", false, false));\n        Assert.assertEquals(\"J. Smith and P. Black Brown\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Smith and Black Brown, Peter\", true, false));\n\n        \r\n        \r\n        Assert.assertEquals(\"John von Neumann, John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false, false));\n        Assert.assertEquals(\"J. von Neumann, J. Smith and P. Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true, false));\n\n        Assert.assertEquals(\"J. P. von Neumann\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Peter von Neumann\", true, false));\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", true, true));\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", false, true));\n\n        Assert.assertEquals(\"John Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",\n                false, true));\n        Assert.assertEquals(\"J. Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\", true,\n                true));\n\n        \r\n        Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true, true).equals(AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John von Neumann\" + (0 == 1 ? \"\" : \" and \")\n                        + \"John Smith and Black Brown, Peter\", true, true)));\n\n        Assert.assertEquals(\"John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\", false, true));\n        Assert.assertEquals(\"J. Smith and P. Black Brown\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Smith and Black Brown, Peter\", true, true));\n\n        \r\n        \r\n        Assert.assertEquals(\"John von Neumann, John Smith, and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false, true));\n        Assert.assertEquals(\"J. von Neumann, J. Smith, and P. Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true, true));\n\n        Assert.assertEquals(\"J. P. von Neumann\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Peter von Neumann\", true, true));\n\n    }\n","realPath":"src/test/java/org/jabref/model/entry/AuthorListTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2017-08-24 15:26:47","commitOrder":2,"curCode":"    public void testFixAuthorLastNameOnlyCommas() {\n\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorLastNameOnlyCommas(\"\", false));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\", false));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\", false));\n\n        Assert.assertTrue(AuthorList.fixAuthorLastNameOnlyCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", false).equals(\n                        AuthorList\n                                .fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\", false)));\n\n        Assert.assertEquals(\"von Neumann, Smith and Black Brown\", AuthorList\n                .fixAuthorLastNameOnlyCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false));\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorLastNameOnlyCommas(\"\", true));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\", true));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\", true));\n\n        Assert.assertTrue(AuthorList.fixAuthorLastNameOnlyCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true).equals(\n                        AuthorList\n                                .fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\", true)));\n\n        Assert.assertEquals(\"von Neumann, Smith, and Black Brown\", AuthorList\n                .fixAuthorLastNameOnlyCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true));\n    }\n","date":"2017-08-24 15:26:47","endLine":276,"groupId":"12581","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFixAuthorLastNameOnlyCommas","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/7b/234f41bb7292e487a39608bd6bb1944edc2a89.src","preCode":"    public void testFixAuthorLastNameOnlyCommas() {\n\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorLastNameOnlyCommas(\"\", false));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\", false));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\", false));\n\n        Assert.assertTrue(AuthorList.fixAuthorLastNameOnlyCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", false).equals(AuthorList\n                .fixAuthorLastNameOnlyCommas(\"John von Neumann\" + (0 == 1 ? \"\" : \" and \")\n                        + \"John Smith and Black Brown, Peter\", false)));\n\n        Assert.assertEquals(\"von Neumann, Smith and Black Brown\", AuthorList\n                .fixAuthorLastNameOnlyCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false));\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorLastNameOnlyCommas(\"\", true));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\", true));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\", true));\n\n        Assert.assertTrue(AuthorList.fixAuthorLastNameOnlyCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true).equals(AuthorList\n                .fixAuthorLastNameOnlyCommas(\"John von Neumann\" + (0 == 1 ? \"\" : \" and \")\n                        + \"John Smith and Black Brown, Peter\", true)));\n\n        Assert.assertEquals(\"von Neumann, Smith, and Black Brown\", AuthorList\n                .fixAuthorLastNameOnlyCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true));\n    }\n","realPath":"src/test/java/org/jabref/model/entry/AuthorListTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"}],"commitId":"0d7dbb96465bdc2fd6802b08bf31370c3d82dc43","commitMessage":"@@@Fix errorprone (#3151)\n\n* move comments over line\n\n* add missing test annotation\n\n* fix complexBooleanConstant error\nhttp://errorprone.info/bugpattern/ComplexBooleanConstant\n\n* fix forgotten boolean constants\n\n* Fix not running test\nFix comment\n\n* fix more comment issues.  f*ck named parameter assumptions\n\n* Remove suppress warnings and replace unnecessary boolean conditions\n","date":"2017-08-24 15:26:47","modifiedFileCount":"8","status":"M","submitter":"Christoph"},{"authorTime":"2018-02-12 00:05:54","codes":[{"authorDate":"2018-02-12 00:05:54","commitOrder":3,"curCode":"    public void testFixAuthorFirstNameFirstCommas() {\n\n        \r\n        assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", true, false));\n        assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", false, false));\n\n        assertEquals(\"John Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",\n                false, false));\n        assertEquals(\"J. Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\", true,\n                false));\n\n        \r\n        assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true, false).equals(\n                        AuthorList\n                                .fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\", true, false)));\n\n        assertEquals(\"John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\", false, false));\n        assertEquals(\"J. Smith and P. Black Brown\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Smith and Black Brown, Peter\", true, false));\n\n        \r\n        \r\n        assertEquals(\"John von Neumann, John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false, false));\n        assertEquals(\"J. von Neumann, J. Smith and P. Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true, false));\n\n        assertEquals(\"J. P. von Neumann\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Peter von Neumann\", true, false));\n        \r\n        assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", true, true));\n        assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", false, true));\n\n        assertEquals(\"John Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",\n                false, true));\n        assertEquals(\"J. Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\", true,\n                true));\n\n        \r\n        assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true, true).equals(\n                        AuthorList\n                                .fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\", true, true)));\n\n        assertEquals(\"John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\", false, true));\n        assertEquals(\"J. Smith and P. Black Brown\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Smith and Black Brown, Peter\", true, true));\n\n        \r\n        \r\n        assertEquals(\"John von Neumann, John Smith, and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false, true));\n        assertEquals(\"J. von Neumann, J. Smith, and P. Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true, true));\n\n        assertEquals(\"J. P. von Neumann\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Peter von Neumann\", true, true));\n\n    }\n","date":"2018-02-12 00:05:54","endLine":108,"groupId":"1253","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFixAuthorFirstNameFirstCommas","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/73/a15650267af9d2ad89b91c197a8fadcb2bb0e4.src","preCode":"    public void testFixAuthorFirstNameFirstCommas() {\n\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", true, false));\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", false, false));\n\n        Assert.assertEquals(\"John Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",\n                false, false));\n        Assert.assertEquals(\"J. Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\", true,\n                false));\n\n        \r\n        Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true, false).equals(\n                        AuthorList\n                                .fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\", true, false)));\n\n        Assert.assertEquals(\"John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\", false, false));\n        Assert.assertEquals(\"J. Smith and P. Black Brown\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Smith and Black Brown, Peter\", true, false));\n\n        \r\n        \r\n        Assert.assertEquals(\"John von Neumann, John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false, false));\n        Assert.assertEquals(\"J. von Neumann, J. Smith and P. Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true, false));\n\n        Assert.assertEquals(\"J. P. von Neumann\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Peter von Neumann\", true, false));\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", true, true));\n        Assert.assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", false, true));\n\n        Assert.assertEquals(\"John Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",\n                false, true));\n        Assert.assertEquals(\"J. Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\", true,\n                true));\n\n        \r\n        Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true, true).equals(\n                        AuthorList\n                                .fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\", true, true)));\n\n        Assert.assertEquals(\"John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\", false, true));\n        Assert.assertEquals(\"J. Smith and P. Black Brown\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Smith and Black Brown, Peter\", true, true));\n\n        \r\n        \r\n        Assert.assertEquals(\"John von Neumann, John Smith, and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false, true));\n        Assert.assertEquals(\"J. von Neumann, J. Smith, and P. Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true, true));\n\n        Assert.assertEquals(\"J. P. von Neumann\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Peter von Neumann\", true, true));\n\n    }\n","realPath":"src/test/java/org/jabref/model/entry/AuthorListTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2018-02-12 00:05:54","commitOrder":3,"curCode":"    public void testFixAuthorLastNameOnlyCommas() {\n\n        \r\n        assertEquals(\"\", AuthorList.fixAuthorLastNameOnlyCommas(\"\", false));\n        assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\", false));\n        assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\", false));\n\n        assertTrue(AuthorList.fixAuthorLastNameOnlyCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", false).equals(\n                        AuthorList\n                                .fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\", false)));\n\n        assertEquals(\"von Neumann, Smith and Black Brown\", AuthorList\n                .fixAuthorLastNameOnlyCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false));\n        \r\n        assertEquals(\"\", AuthorList.fixAuthorLastNameOnlyCommas(\"\", true));\n        assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\", true));\n        assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\", true));\n\n        assertTrue(AuthorList.fixAuthorLastNameOnlyCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true).equals(\n                        AuthorList\n                                .fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\", true)));\n\n        assertEquals(\"von Neumann, Smith, and Black Brown\", AuthorList\n                .fixAuthorLastNameOnlyCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true));\n    }\n","date":"2018-02-12 00:05:54","endLine":284,"groupId":"5865","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFixAuthorLastNameOnlyCommas","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/73/a15650267af9d2ad89b91c197a8fadcb2bb0e4.src","preCode":"    public void testFixAuthorLastNameOnlyCommas() {\n\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorLastNameOnlyCommas(\"\", false));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\", false));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\", false));\n\n        Assert.assertTrue(AuthorList.fixAuthorLastNameOnlyCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", false).equals(\n                        AuthorList\n                                .fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\", false)));\n\n        Assert.assertEquals(\"von Neumann, Smith and Black Brown\", AuthorList\n                .fixAuthorLastNameOnlyCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false));\n        \r\n        Assert.assertEquals(\"\", AuthorList.fixAuthorLastNameOnlyCommas(\"\", true));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\", true));\n        Assert.assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\", true));\n\n        Assert.assertTrue(AuthorList.fixAuthorLastNameOnlyCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true).equals(\n                        AuthorList\n                                .fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\", true)));\n\n        Assert.assertEquals(\"von Neumann, Smith, and Black Brown\", AuthorList\n                .fixAuthorLastNameOnlyCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true));\n    }\n","realPath":"src/test/java/org/jabref/model/entry/AuthorListTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"}],"commitId":"1cef92447c4ae65ebe28d94cf9acf708861bb67b","commitMessage":"@@@Merge pull request #3711 from JabRef/junit5\n\nmigrate majority of tests to junit5","date":"2018-02-12 00:05:54","modifiedFileCount":"244","status":"M","submitter":"Oliver Kopp"},{"authorTime":"2020-05-28 23:27:15","codes":[{"authorDate":"2020-05-28 23:27:15","commitOrder":4,"curCode":"    public void testFixAuthorFirstNameFirstCommas() {\n\n        \r\n        assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", true, false));\n        assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", false, false));\n\n        assertEquals(\"John Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",\n                false, false));\n        assertEquals(\"J. Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\", true,\n                false));\n\n        \r\n        assertEquals(AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true, false), AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\", true, false));\n\n        assertEquals(\"John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\", false, false));\n        assertEquals(\"J. Smith and P. Black Brown\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Smith and Black Brown, Peter\", true, false));\n\n        \r\n        \r\n        assertEquals(\"John von Neumann, John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false, false));\n        assertEquals(\"J. von Neumann, J. Smith and P. Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true, false));\n\n        assertEquals(\"J. P. von Neumann\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Peter von Neumann\", true, false));\n        \r\n        assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", true, true));\n        assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", false, true));\n\n        assertEquals(\"John Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",\n                false, true));\n        assertEquals(\"J. Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\", true,\n                true));\n\n        \r\n        assertEquals(AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true, true), AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\", true, true));\n\n        assertEquals(\"John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\", false, true));\n        assertEquals(\"J. Smith and P. Black Brown\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Smith and Black Brown, Peter\", true, true));\n\n        \r\n        \r\n        assertEquals(\"John von Neumann, John Smith, and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false, true));\n        assertEquals(\"J. von Neumann, J. Smith, and P. Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true, true));\n\n        assertEquals(\"J. P. von Neumann\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Peter von Neumann\", true, true));\n    }\n","date":"2020-05-28 23:27:15","endLine":201,"groupId":"10772","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFixAuthorFirstNameFirstCommas","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ed/a59858ac688029419e1ba503dab3d0af6c3a7c.src","preCode":"    public void testFixAuthorFirstNameFirstCommas() {\n\n        \r\n        assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", true, false));\n        assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", false, false));\n\n        assertEquals(\"John Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",\n                false, false));\n        assertEquals(\"J. Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\", true,\n                false));\n\n        \r\n        assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true, false).equals(\n                AuthorList\n                        .fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\", true, false)));\n\n        assertEquals(\"John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\", false, false));\n        assertEquals(\"J. Smith and P. Black Brown\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Smith and Black Brown, Peter\", true, false));\n\n        \r\n        \r\n        assertEquals(\"John von Neumann, John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false, false));\n        assertEquals(\"J. von Neumann, J. Smith and P. Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true, false));\n\n        assertEquals(\"J. P. von Neumann\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Peter von Neumann\", true, false));\n        \r\n        assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", true, true));\n        assertEquals(\"\", AuthorList.fixAuthorFirstNameFirstCommas(\"\", false, true));\n\n        assertEquals(\"John Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",\n                false, true));\n        assertEquals(\"J. Smith\", AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\", true,\n                true));\n\n        \r\n        assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true, true).equals(\n                AuthorList\n                        .fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\", true, true)));\n\n        assertEquals(\"John Smith and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\", false, true));\n        assertEquals(\"J. Smith and P. Black Brown\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Smith and Black Brown, Peter\", true, true));\n\n        \r\n        \r\n        assertEquals(\"John von Neumann, John Smith, and Peter Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false, true));\n        assertEquals(\"J. von Neumann, J. Smith, and P. Black Brown\", AuthorList\n                .fixAuthorFirstNameFirstCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true, true));\n\n        assertEquals(\"J. P. von Neumann\", AuthorList.fixAuthorFirstNameFirstCommas(\n                \"John Peter von Neumann\", true, true));\n    }\n","realPath":"src/test/java/org/jabref/model/entry/AuthorListTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2020-05-28 23:27:15","commitOrder":4,"curCode":"    public void testFixAuthorLastNameOnlyCommas() {\n\n        \r\n        assertEquals(\"\", AuthorList.fixAuthorLastNameOnlyCommas(\"\", false));\n        assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\", false));\n        assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\", false));\n\n        assertEquals(AuthorList.fixAuthorLastNameOnlyCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", false), AuthorList\n                .fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\", false));\n\n        assertEquals(\"von Neumann, Smith and Black Brown\", AuthorList\n                .fixAuthorLastNameOnlyCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false));\n        \r\n        assertEquals(\"\", AuthorList.fixAuthorLastNameOnlyCommas(\"\", true));\n        assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\", true));\n        assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\", true));\n\n        assertEquals(AuthorList.fixAuthorLastNameOnlyCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true), AuthorList\n                .fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\", true));\n\n        assertEquals(\"von Neumann, Smith, and Black Brown\", AuthorList\n                .fixAuthorLastNameOnlyCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true));\n    }\n","date":"2020-05-28 23:27:15","endLine":688,"groupId":"10772","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFixAuthorLastNameOnlyCommas","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ed/a59858ac688029419e1ba503dab3d0af6c3a7c.src","preCode":"    public void testFixAuthorLastNameOnlyCommas() {\n\n        \r\n        assertEquals(\"\", AuthorList.fixAuthorLastNameOnlyCommas(\"\", false));\n        assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\", false));\n        assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\", false));\n\n        assertTrue(AuthorList.fixAuthorLastNameOnlyCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", false).equals(\n                AuthorList\n                        .fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\", false)));\n\n        assertEquals(\"von Neumann, Smith and Black Brown\", AuthorList\n                .fixAuthorLastNameOnlyCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", false));\n        \r\n        assertEquals(\"\", AuthorList.fixAuthorLastNameOnlyCommas(\"\", true));\n        assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\", true));\n        assertEquals(\"Smith\", AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\", true));\n\n        assertTrue(AuthorList.fixAuthorLastNameOnlyCommas(\n                \"John von Neumann and John Smith and Black Brown, Peter\", true).equals(\n                AuthorList\n                        .fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\", true)));\n\n        assertEquals(\"von Neumann, Smith, and Black Brown\", AuthorList\n                .fixAuthorLastNameOnlyCommas(\n                        \"John von Neumann and John Smith and Black Brown, Peter\", true));\n    }\n","realPath":"src/test/java/org/jabref/model/entry/AuthorListTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":662,"status":"M"}],"commitId":"08eccb629d3214301d8b37862e10e2a10939b221","commitMessage":"@@@Fixes generated bibtex key and display of institute authors (#6479)\n\n* Fix Pattern.compile for frequently used regexes\n\n* Fix one additional Pattern.compile\n\n* Fix style and unnecessary escape sequences\n\n* Fix invalid index in call to substring\n\nThe original condition is evaluated to false.\nThe substring is shorter than \"uni\".\n\n* Refactor name and javadoc of a regex\n\n* Fix use of compiled regex for matching department\n\n* Fix check for uppercase letter\n\nPerhaps the assumption should be that the letters are ASCII.\nIf all letters are ASCII checking 'A' <= k.charAt(0) <= 'Z'\nmight make more sense.\nI am not convinced about doing this with a regex.\n\n* Fix usage of uncompiled regex\n\n* Fix readability?\n\n* Add test cases\n\nBoth test cases involves an author name containing department or school\n without university or institute of technology.\n\n* Fix `null` appearing as part of author name\n\nCorporate authors without university/institute of technology\n\n* Refactor name of capital regex pattern\n\n* Add debug output for reordering of names in fields\n\n* Add helper methods\n\n* Fix missing negation in \"uni\" matching\n\n* Fix test cases for corporate authors\n\n* Fix to keep all uppercase letters in abbreviation\n\n* Fix commented out code\n\n* Fix key for institution's name containing keyword\n\nIf the name of an institution can't be split.  assume that\n\"School\"/\"Department\" is part of the name.\n\n* Fix test case for short institution name\n\n* Refactor check for institution types\n\n* Refactor comments and names improving readability?\n\n* Refactor to improve readability and closure\n\n* Fix JavaDoc\n\nMinor typos and the \"rest\" part is now created differently.\n\n* Fix JavaDoc typos\n\n* Fix preliminary order for authors -> latexfree\n\n* Drop logger\n\n* Add convenience methods for cached latexfree names\n\n* Add name format method for names containing latex\n\n* Add call to formatNameLatexFree\n\n* Fix unclear statement in JavaDoc\n\n* Fix to only keep the first character of each word\n\nThere are some examples that will turn out wrong if only capital letters\n are kept.  e.g..  \"iOS Developer University Program\".\n The original problem with \"The School of Life\" becoming too short is\n avoided by only removing school/department for names containing two or\n  more '. ' separated strings. This will still produce an unexpected\n   result if the address of the institution is part of the authors field\n\n* Add latexfree Natbib test cases\n\n* Fix typo in latex-free test cases\n\n* Add Natbib test with escaped brackets\n\n* Add Natbib institution test with escaped brackets\n\n* Add test for latex-free comma separated lastnames\n\n* Add test for latex-free comma separated first name\n\nFirst name first and abbreviated first name first\n\n* Add test for latex-free comma separated last name\n\nLast name first and abbreviated first names\n\n* Fix adherence to JavaDoc and readability(?)\n\n* Fix readability(?)\n\n* Fix CheckStyle issues\n\nThe deprecated static methods BibtexKeyGenerator.generateKey are moved\nto the test file as a similar convenience method is required for\nthe test cases. Suppress warning has been added for some methods.\n\n* Fix CHANGELOG.md\n\n* Fix mistake in BibtexKeyGeneratorTest\n\ngenerateKey was not copy-pasted properly.\n\n* Add test for oxford comma\n\n* Fix miss-capitalization of enum\n\n* Fix fields not displayed latex-free\n\n* Fix in-line methods in MainTableNameFormatter\n\n* Fix in-line of generateKey() method\n\n* Fix separating tests into parsing/representation\n\n* Fix cache check and simplify expressions\n\n* Drop inlined methods\n\n* Fix most abbreviated abbreviations\n\n* Drop old formatName method\n\n* Refactor formatNameLatexFree\n\nThe author list parsing is moved outside of the if/else statements\n\n* Refactor new parse tests\n\n* Add more parse tests\n\n* Drop all test cases containing escaped brackets\n\n* Refactor parse with latex tests\n\nMove them close to other parse tests\n\n* Fix my own spelling mistakes\n\n* Refactor abbreviation name","date":"2020-05-28 23:27:15","modifiedFileCount":"6","status":"M","submitter":"k3KAW8Pnf7mkmdSMPHz27"}]
