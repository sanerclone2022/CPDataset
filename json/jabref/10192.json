[{"authorTime":"2020-08-03 04:34:28","codes":[{"authorDate":"2020-08-03 04:34:28","commitOrder":1,"curCode":"    default void supportsYearSearch() throws Exception {\n        ComplexSearchQuery.ComplexSearchQueryBuilder builder = ComplexSearchQuery.builder();\n        builder.singleYear(getTestYear());\n\n        List<BibEntry> result = getFetcher().performComplexSearch(builder.build());\n        new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result);\n        List<String> differentYearsInResult = result.stream()\n                                                    .map(bibEntry -> bibEntry.getField(StandardField.YEAR))\n                                                    .filter(Optional::isPresent)\n                                                    .map(Optional::get)\n                                                    .distinct()\n                                                    .collect(Collectors.toList());\n\n        assertFalse(result.isEmpty());\n        assertEquals(Collections.singletonList(getTestYear().toString()), differentYearsInResult);\n    }\n","date":"2020-08-03 04:34:28","endLine":68,"groupId":"1248","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"supportsYearSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/7f/7a4a69cdf4b6f67361a30a039d4c8643bc8572.src","preCode":"    default void supportsYearSearch() throws Exception {\n        ComplexSearchQuery.ComplexSearchQueryBuilder builder = ComplexSearchQuery.builder();\n        builder.singleYear(getTestYear());\n\n        List<BibEntry> result = getFetcher().performComplexSearch(builder.build());\n        new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result);\n        List<String> differentYearsInResult = result.stream()\n                                                    .map(bibEntry -> bibEntry.getField(StandardField.YEAR))\n                                                    .filter(Optional::isPresent)\n                                                    .map(Optional::get)\n                                                    .distinct()\n                                                    .collect(Collectors.toList());\n\n        assertFalse(result.isEmpty());\n        assertEquals(Collections.singletonList(getTestYear().toString()), differentYearsInResult);\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fetcher/SearchBasedFetcherCapabilityTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"},{"authorDate":"2020-08-03 04:34:28","commitOrder":1,"curCode":"    default void supportsYearRangeSearch() throws Exception {\n        ComplexSearchQuery.ComplexSearchQueryBuilder builder = ComplexSearchQuery.builder();\n        List<String> yearsInYearRange = List.of(\"2018\", \"2019\", \"2020\");\n        builder.fromYearAndToYear(2018, 2020);\n\n        List<BibEntry> result = getFetcher().performComplexSearch(builder.build());\n        new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result);\n        List<String> differentYearsInResult = result.stream()\n                                                    .map(bibEntry -> bibEntry.getField(StandardField.YEAR))\n                                                    .filter(Optional::isPresent)\n                                                    .map(Optional::get)\n                                                    .distinct()\n                                                    .collect(Collectors.toList());\n        assertFalse(result.isEmpty());\n        assertTrue(yearsInYearRange.containsAll(differentYearsInResult));\n    }\n","date":"2020-08-03 04:34:28","endLine":89,"groupId":"1248","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"supportsYearRangeSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/7f/7a4a69cdf4b6f67361a30a039d4c8643bc8572.src","preCode":"    default void supportsYearRangeSearch() throws Exception {\n        ComplexSearchQuery.ComplexSearchQueryBuilder builder = ComplexSearchQuery.builder();\n        List<String> yearsInYearRange = List.of(\"2018\", \"2019\", \"2020\");\n        builder.fromYearAndToYear(2018, 2020);\n\n        List<BibEntry> result = getFetcher().performComplexSearch(builder.build());\n        new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result);\n        List<String> differentYearsInResult = result.stream()\n                                                    .map(bibEntry -> bibEntry.getField(StandardField.YEAR))\n                                                    .filter(Optional::isPresent)\n                                                    .map(Optional::get)\n                                                    .distinct()\n                                                    .collect(Collectors.toList());\n        assertFalse(result.isEmpty());\n        assertTrue(yearsInYearRange.containsAll(differentYearsInResult));\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fetcher/SearchBasedFetcherCapabilityTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"b506baa7e8ac8c29786b2627c24f5f2696d35b6c","commitMessage":"@@@Add testing interface.  including a set of capabilities to tests for (#6687)\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>\n","date":"2020-08-03 04:34:28","modifiedFileCount":"23","status":"B","submitter":"Dominik Voigt"},{"authorTime":"2020-08-03 04:34:28","codes":[{"authorDate":"2020-08-27 04:03:52","commitOrder":2,"curCode":"    default void supportsYearSearch() throws Exception {\n        ComplexSearchQuery complexSearchQuery = ComplexSearchQuery\n                .builder()\n                .singleYear(getTestYear())\n                .build();\n\n        List<BibEntry> result = getFetcher().performComplexSearch(complexSearchQuery);\n        new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result);\n        List<String> differentYearsInResult = result.stream()\n                                                    .map(bibEntry -> bibEntry.getField(StandardField.YEAR))\n                                                    .filter(Optional::isPresent)\n                                                    .map(Optional::get)\n                                                    .distinct()\n                                                    .collect(Collectors.toList());\n\n        assertEquals(Collections.singletonList(getTestYear().toString()), differentYearsInResult);\n    }\n","date":"2020-08-27 04:03:52","endLine":69,"groupId":"3545","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"supportsYearSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/02/760e1b91e3ee7af7f8e22091ee24a641d37e2c.src","preCode":"    default void supportsYearSearch() throws Exception {\n        ComplexSearchQuery.ComplexSearchQueryBuilder builder = ComplexSearchQuery.builder();\n        builder.singleYear(getTestYear());\n\n        List<BibEntry> result = getFetcher().performComplexSearch(builder.build());\n        new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result);\n        List<String> differentYearsInResult = result.stream()\n                                                    .map(bibEntry -> bibEntry.getField(StandardField.YEAR))\n                                                    .filter(Optional::isPresent)\n                                                    .map(Optional::get)\n                                                    .distinct()\n                                                    .collect(Collectors.toList());\n\n        assertFalse(result.isEmpty());\n        assertEquals(Collections.singletonList(getTestYear().toString()), differentYearsInResult);\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fetcher/SearchBasedFetcherCapabilityTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-08-03 04:34:28","commitOrder":2,"curCode":"    default void supportsYearRangeSearch() throws Exception {\n        ComplexSearchQuery.ComplexSearchQueryBuilder builder = ComplexSearchQuery.builder();\n        List<String> yearsInYearRange = List.of(\"2018\", \"2019\", \"2020\");\n        builder.fromYearAndToYear(2018, 2020);\n\n        List<BibEntry> result = getFetcher().performComplexSearch(builder.build());\n        new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result);\n        List<String> differentYearsInResult = result.stream()\n                                                    .map(bibEntry -> bibEntry.getField(StandardField.YEAR))\n                                                    .filter(Optional::isPresent)\n                                                    .map(Optional::get)\n                                                    .distinct()\n                                                    .collect(Collectors.toList());\n        assertFalse(result.isEmpty());\n        assertTrue(yearsInYearRange.containsAll(differentYearsInResult));\n    }\n","date":"2020-08-03 04:34:28","endLine":89,"groupId":"1248","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"supportsYearRangeSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/7f/7a4a69cdf4b6f67361a30a039d4c8643bc8572.src","preCode":"    default void supportsYearRangeSearch() throws Exception {\n        ComplexSearchQuery.ComplexSearchQueryBuilder builder = ComplexSearchQuery.builder();\n        List<String> yearsInYearRange = List.of(\"2018\", \"2019\", \"2020\");\n        builder.fromYearAndToYear(2018, 2020);\n\n        List<BibEntry> result = getFetcher().performComplexSearch(builder.build());\n        new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result);\n        List<String> differentYearsInResult = result.stream()\n                                                    .map(bibEntry -> bibEntry.getField(StandardField.YEAR))\n                                                    .filter(Optional::isPresent)\n                                                    .map(Optional::get)\n                                                    .distinct()\n                                                    .collect(Collectors.toList());\n        assertFalse(result.isEmpty());\n        assertTrue(yearsInYearRange.containsAll(differentYearsInResult));\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fetcher/SearchBasedFetcherCapabilityTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"}],"commitId":"d05217092ef7ae28fdbbd98fd5f6b5e323191f23","commitMessage":"@@@Fix more fetchers (#6790)\n\n","date":"2020-08-27 04:03:52","modifiedFileCount":"12","status":"M","submitter":"Oliver Kopp"},{"authorTime":"2020-11-16 06:01:39","codes":[{"authorDate":"2020-11-16 06:01:39","commitOrder":3,"curCode":"    default void supportsYearSearch() throws Exception {\n        ComplexSearchQuery complexSearchQuery = ComplexSearchQuery\n                .builder()\n                .singleYear(getTestYear())\n                .build();\n\n        List<BibEntry> result = getFetcher().performSearch(complexSearchQuery);\n        new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result);\n        List<String> differentYearsInResult = result.stream()\n                                                    .map(bibEntry -> bibEntry.getField(StandardField.YEAR))\n                                                    .filter(Optional::isPresent)\n                                                    .map(Optional::get)\n                                                    .distinct()\n                                                    .collect(Collectors.toList());\n\n        assertEquals(Collections.singletonList(getTestYear().toString()), differentYearsInResult);\n    }\n","date":"2020-11-16 06:01:39","endLine":69,"groupId":"3545","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"supportsYearSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/73/afa6d63c9dc3b3bc723aa133089bdf96b901bb.src","preCode":"    default void supportsYearSearch() throws Exception {\n        ComplexSearchQuery complexSearchQuery = ComplexSearchQuery\n                .builder()\n                .singleYear(getTestYear())\n                .build();\n\n        List<BibEntry> result = getFetcher().performComplexSearch(complexSearchQuery);\n        new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result);\n        List<String> differentYearsInResult = result.stream()\n                                                    .map(bibEntry -> bibEntry.getField(StandardField.YEAR))\n                                                    .filter(Optional::isPresent)\n                                                    .map(Optional::get)\n                                                    .distinct()\n                                                    .collect(Collectors.toList());\n\n        assertEquals(Collections.singletonList(getTestYear().toString()), differentYearsInResult);\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fetcher/SearchBasedFetcherCapabilityTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-11-16 06:01:39","commitOrder":3,"curCode":"    default void supportsYearRangeSearch() throws Exception {\n        ComplexSearchQuery.ComplexSearchQueryBuilder builder = ComplexSearchQuery.builder();\n        List<String> yearsInYearRange = List.of(\"2018\", \"2019\", \"2020\");\n        builder.fromYearAndToYear(2018, 2020);\n\n        List<BibEntry> result = getFetcher().performSearch(builder.build());\n        new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result);\n        List<String> differentYearsInResult = result.stream()\n                                                    .map(bibEntry -> bibEntry.getField(StandardField.YEAR))\n                                                    .filter(Optional::isPresent)\n                                                    .map(Optional::get)\n                                                    .distinct()\n                                                    .collect(Collectors.toList());\n        assertFalse(result.isEmpty());\n        assertTrue(yearsInYearRange.containsAll(differentYearsInResult));\n    }\n","date":"2020-11-16 06:01:39","endLine":90,"groupId":"1248","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"supportsYearRangeSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/73/afa6d63c9dc3b3bc723aa133089bdf96b901bb.src","preCode":"    default void supportsYearRangeSearch() throws Exception {\n        ComplexSearchQuery.ComplexSearchQueryBuilder builder = ComplexSearchQuery.builder();\n        List<String> yearsInYearRange = List.of(\"2018\", \"2019\", \"2020\");\n        builder.fromYearAndToYear(2018, 2020);\n\n        List<BibEntry> result = getFetcher().performComplexSearch(builder.build());\n        new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result);\n        List<String> differentYearsInResult = result.stream()\n                                                    .map(bibEntry -> bibEntry.getField(StandardField.YEAR))\n                                                    .filter(Optional::isPresent)\n                                                    .map(Optional::get)\n                                                    .distinct()\n                                                    .collect(Collectors.toList());\n        assertFalse(result.isEmpty());\n        assertTrue(yearsInYearRange.containsAll(differentYearsInResult));\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fetcher/SearchBasedFetcherCapabilityTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"00e340919cee86159d3af587c8d3db60ccf2c94b","commitMessage":"@@@Feature/enable paginated fetchers (#7082)\n\n","date":"2020-11-16 06:01:39","modifiedFileCount":"29","status":"M","submitter":"Dominik Voigt"},{"authorTime":"2021-01-27 06:43:31","codes":[{"authorDate":"2021-01-27 06:43:31","commitOrder":4,"curCode":"    default void supportsYearSearch() throws Exception {\n        List<BibEntry> result = getFetcher().performSearch(\"year:\" + getTestYear());\n        new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result);\n        List<String> differentYearsInResult = result.stream()\n                                                    .map(bibEntry -> bibEntry.getField(StandardField.YEAR))\n                                                    .filter(Optional::isPresent)\n                                                    .map(Optional::get)\n                                                    .distinct()\n                                                    .collect(Collectors.toList());\n\n        assertEquals(Collections.singletonList(getTestYear().toString()), differentYearsInResult);\n    }\n","date":"2021-01-27 06:43:31","endLine":65,"groupId":"10192","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"supportsYearSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a5/bd223cdf274b95fa9ee26dffe1c0238df7056b.src","preCode":"    default void supportsYearSearch() throws Exception {\n        ComplexSearchQuery complexSearchQuery = ComplexSearchQuery\n                .builder()\n                .singleYear(getTestYear())\n                .build();\n\n        List<BibEntry> result = getFetcher().performSearch(complexSearchQuery);\n        new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result);\n        List<String> differentYearsInResult = result.stream()\n                                                    .map(bibEntry -> bibEntry.getField(StandardField.YEAR))\n                                                    .filter(Optional::isPresent)\n                                                    .map(Optional::get)\n                                                    .distinct()\n                                                    .collect(Collectors.toList());\n\n        assertEquals(Collections.singletonList(getTestYear().toString()), differentYearsInResult);\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fetcher/SearchBasedFetcherCapabilityTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2021-01-27 06:43:31","commitOrder":4,"curCode":"    default void supportsYearRangeSearch() throws Exception {\n        List<String> yearsInYearRange = List.of(\"2018\", \"2019\", \"2020\");\n\n        List<BibEntry> result = getFetcher().performSearch(\"year-range:2018-2020\");\n        new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result);\n        List<String> differentYearsInResult = result.stream()\n                                                    .map(bibEntry -> bibEntry.getField(StandardField.YEAR))\n                                                    .filter(Optional::isPresent)\n                                                    .map(Optional::get)\n                                                    .distinct()\n                                                    .collect(Collectors.toList());\n        assertFalse(result.isEmpty());\n        assertTrue(yearsInYearRange.containsAll(differentYearsInResult));\n    }\n","date":"2021-01-27 06:43:31","endLine":84,"groupId":"10192","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"supportsYearRangeSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a5/bd223cdf274b95fa9ee26dffe1c0238df7056b.src","preCode":"    default void supportsYearRangeSearch() throws Exception {\n        ComplexSearchQuery.ComplexSearchQueryBuilder builder = ComplexSearchQuery.builder();\n        List<String> yearsInYearRange = List.of(\"2018\", \"2019\", \"2020\");\n        builder.fromYearAndToYear(2018, 2020);\n\n        List<BibEntry> result = getFetcher().performSearch(builder.build());\n        new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result);\n        List<String> differentYearsInResult = result.stream()\n                                                    .map(bibEntry -> bibEntry.getField(StandardField.YEAR))\n                                                    .filter(Optional::isPresent)\n                                                    .map(Optional::get)\n                                                    .distinct()\n                                                    .collect(Collectors.toList());\n        assertFalse(result.isEmpty());\n        assertTrue(yearsInYearRange.containsAll(differentYearsInResult));\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fetcher/SearchBasedFetcherCapabilityTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"034cf8c975f2ba77ea2a283cb2301d2ef40cde3a","commitMessage":"@@@Feature/implement complex queries (#7350)\n\n","date":"2021-01-27 06:43:31","modifiedFileCount":"34","status":"M","submitter":"Dominik Voigt"}]
