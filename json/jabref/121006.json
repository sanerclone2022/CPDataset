[{"authorTime":"2018-01-03 05:22:57","codes":[{"authorDate":"2017-04-18 21:05:00","commitOrder":3,"curCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n        Optional<URL> pdfLink = Optional.empty();\n\n        \r\n        Optional<DOI> doi = entry.getField(FieldName.DOI).flatMap(DOI::parse);\n\n        if(doi.isPresent()) {\n            \r\n            try {\n                HttpResponse<JsonNode> jsonResponse = Unirest.get(API_URL)\n                        .queryString(\"api_key\", API_KEY)\n                        .queryString(\"q\", String.format(\"doi:%s\", doi.get().getDOI()))\n                        .asJson();\n\n                JSONObject json = jsonResponse.getBody().getObject();\n                int results = json.getJSONArray(\"result\").getJSONObject(0).getInt(\"total\");\n\n                if (results > 0) {\n                    LOGGER.info(\"Fulltext PDF found @ Springer.\");\n                    pdfLink = Optional.of(new URL(\"http\", CONTENT_HOST, String.format(\"/content/pdf/%s.pdf\", doi.get().getDOI())));\n                }\n            } catch(UnirestException e) {\n                LOGGER.warn(\"SpringerLink API request failed\", e);\n            }\n        }\n        return pdfLink;\n    }\n","date":"2017-04-18 21:05:00","endLine":61,"groupId":"10833","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"findFullText","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/e3/bcd15039fa97f81955575b9ed1c3a0acc4e5d3.src","preCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n        Optional<URL> pdfLink = Optional.empty();\n\n        \r\n        Optional<DOI> doi = entry.getField(FieldName.DOI).flatMap(DOI::parse);\n\n        if(doi.isPresent()) {\n            \r\n            try {\n                HttpResponse<JsonNode> jsonResponse = Unirest.get(API_URL)\n                        .queryString(\"api_key\", API_KEY)\n                        .queryString(\"q\", String.format(\"doi:%s\", doi.get().getDOI()))\n                        .asJson();\n\n                JSONObject json = jsonResponse.getBody().getObject();\n                int results = json.getJSONArray(\"result\").getJSONObject(0).getInt(\"total\");\n\n                if (results > 0) {\n                    LOGGER.info(\"Fulltext PDF found @ Springer.\");\n                    pdfLink = Optional.of(new URL(\"http\", CONTENT_HOST, String.format(\"/content/pdf/%s.pdf\", doi.get().getDOI())));\n                }\n            } catch(UnirestException e) {\n                LOGGER.warn(\"SpringerLink API request failed\", e);\n            }\n        }\n        return pdfLink;\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/SpringerLink.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"NB"},{"authorDate":"2018-01-03 05:22:57","commitOrder":3,"curCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n\n        Optional<DOI> doi = entry.getField(FieldName.DOI)\n                .flatMap(DOI::parse);\n        if (doi.isPresent()) {\n            try {\n                return findFullText(doi.get());\n            } catch (UnirestException e) {\n                throw new IOException(e);\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n","date":"2018-01-03 05:22:57","endLine":43,"groupId":"11961","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"findFullText","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/b1/9be472a330523de71a60809d4aecf7d298ffaf.src","preCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n\n        Optional<DOI> doi = entry.getField(FieldName.DOI)\n                .flatMap(DOI::parse);\n        if (doi.isPresent()) {\n            try {\n                return findFullText(doi.get());\n            } catch (UnirestException e) {\n                throw new IOException(e);\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/OpenAccessDoi.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"B"}],"commitId":"b246b9ce534ae05008185ea2e4ed9df1d8cac132","commitMessage":"@@@Add oaDOI fulltext fetcher (#3581)\n\n* Add oaDOI fulltext fetcher\n\n* Rename to OpenAccessDoi\n","date":"2018-01-03 05:22:57","modifiedFileCount":"5","status":"M","submitter":"Tobias Diez"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":4,"curCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n        Optional<URL> pdfLink = Optional.empty();\n\n        \r\n        Optional<DOI> doi = entry.getField(StandardField.DOI).flatMap(DOI::parse);\n\n        if (doi.isPresent()) {\n            \r\n            try {\n                HttpResponse<JsonNode> jsonResponse = Unirest.get(API_URL)\n                        .queryString(\"api_key\", API_KEY)\n                        .queryString(\"q\", String.format(\"doi:%s\", doi.get().getDOI()))\n                        .asJson();\n\n                JSONObject json = jsonResponse.getBody().getObject();\n                int results = json.getJSONArray(\"result\").getJSONObject(0).getInt(\"total\");\n\n                if (results > 0) {\n                    LOGGER.info(\"Fulltext PDF found @ Springer.\");\n                    pdfLink = Optional.of(new URL(\"http\", CONTENT_HOST, String.format(\"/content/pdf/%s.pdf\", doi.get().getDOI())));\n                }\n            } catch (UnirestException e) {\n                LOGGER.warn(\"SpringerLink API request failed\", e);\n            }\n        }\n        return pdfLink;\n    }\n","date":"2019-08-02 15:20:10","endLine":61,"groupId":"10833","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"findFullText","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/73/722330ccd406e42a0dbbc8b669685528243fcf.src","preCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n        Optional<URL> pdfLink = Optional.empty();\n\n        \r\n        Optional<DOI> doi = entry.getField(FieldName.DOI).flatMap(DOI::parse);\n\n        if (doi.isPresent()) {\n            \r\n            try {\n                HttpResponse<JsonNode> jsonResponse = Unirest.get(API_URL)\n                        .queryString(\"api_key\", API_KEY)\n                        .queryString(\"q\", String.format(\"doi:%s\", doi.get().getDOI()))\n                        .asJson();\n\n                JSONObject json = jsonResponse.getBody().getObject();\n                int results = json.getJSONArray(\"result\").getJSONObject(0).getInt(\"total\");\n\n                if (results > 0) {\n                    LOGGER.info(\"Fulltext PDF found @ Springer.\");\n                    pdfLink = Optional.of(new URL(\"http\", CONTENT_HOST, String.format(\"/content/pdf/%s.pdf\", doi.get().getDOI())));\n                }\n            } catch (UnirestException e) {\n                LOGGER.warn(\"SpringerLink API request failed\", e);\n            }\n        }\n        return pdfLink;\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/SpringerLink.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2019-08-02 15:20:10","commitOrder":4,"curCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n\n        Optional<DOI> doi = entry.getField(StandardField.DOI)\n                                 .flatMap(DOI::parse);\n        if (doi.isPresent()) {\n            try {\n                return findFullText(doi.get());\n            } catch (UnirestException e) {\n                throw new IOException(e);\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n","date":"2019-08-02 15:20:10","endLine":43,"groupId":"11961","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"findFullText","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/64/e3ab046e6126435b8abafd31af1a93e3e25922.src","preCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n\n        Optional<DOI> doi = entry.getField(FieldName.DOI)\n                .flatMap(DOI::parse);\n        if (doi.isPresent()) {\n            try {\n                return findFullText(doi.get());\n            } catch (UnirestException e) {\n                throw new IOException(e);\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/OpenAccessDoi.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"M"}],"commitId":"4b39b78e4afcd6c36b385f5c46f1d9a4eac2e29b","commitMessage":"@@@Move to extended enums for fields and entry types (#5148)\n\n* Introduce interface for fields\n\n* Continue using fields interface instead of strings\n\n* Introduce OrFields class\n\n* Move FieldProperty\n\n* Convert entry types to extended enum\n\n* Start fixing build\n\n* Fix build\n\n* Start fixing tests\n\n* Everything compiles again\n\n* Make model tests pass\n\n* Fix most tests\n\n* Fix build\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix checkstyle issues\n\n* Fix more tests\n\n* Fix more tests\n\n* Disable test that fails on CI\n\n* Disable test that fails on CI\n","date":"2019-08-02 15:20:10","modifiedFileCount":"439","status":"M","submitter":"Tobias Diez"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2019-12-21 05:18:27","commitOrder":5,"curCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n        Optional<URL> pdfLink = Optional.empty();\n\n        \r\n        Optional<DOI> doi = entry.getField(StandardField.DOI).flatMap(DOI::parse);\n\n        if (doi.isPresent()) {\n            \r\n            try {\n                HttpResponse<JsonNode> jsonResponse = Unirest.get(API_URL)\n                                                             .queryString(\"api_key\", API_KEY)\n                                                             .queryString(\"q\", String.format(\"doi:%s\", doi.get().getDOI()))\n                                                             .asJson();\n                if (jsonResponse.getBody() != null) {\n                    JSONObject json = jsonResponse.getBody().getObject();\n                    int results = json.getJSONArray(\"result\").getJSONObject(0).getInt(\"total\");\n\n                    if (results > 0) {\n                        LOGGER.info(\"Fulltext PDF found @ Springer.\");\n                        pdfLink = Optional.of(new URL(\"http\", CONTENT_HOST, String.format(\"/content/pdf/%s.pdf\", doi.get().getDOI())));\n                    }\n                }\n            } catch (UnirestException e) {\n                LOGGER.warn(\"SpringerLink API request failed\", e);\n            }\n        }\n        return pdfLink;\n    }\n","date":"2019-12-21 05:18:27","endLine":62,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"findFullText","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/98/e313078dda012c3d243b59ff20025f227c51ba.src","preCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n        Optional<URL> pdfLink = Optional.empty();\n\n        \r\n        Optional<DOI> doi = entry.getField(StandardField.DOI).flatMap(DOI::parse);\n\n        if (doi.isPresent()) {\n            \r\n            try {\n                HttpResponse<JsonNode> jsonResponse = Unirest.get(API_URL)\n                                                             .queryString(\"api_key\", API_KEY)\n                                                             .queryString(\"q\", String.format(\"doi:%s\", doi.get().getDOI()))\n                                                             .asJson();\n\n                JSONObject json = jsonResponse.getBody().getObject();\n                int results = json.getJSONArray(\"result\").getJSONObject(0).getInt(\"total\");\n\n                if (results > 0) {\n                    LOGGER.info(\"Fulltext PDF found @ Springer.\");\n                    pdfLink = Optional.of(new URL(\"http\", CONTENT_HOST, String.format(\"/content/pdf/%s.pdf\", doi.get().getDOI())));\n                }\n            } catch (UnirestException e) {\n                LOGGER.warn(\"SpringerLink API request failed\", e);\n            }\n        }\n        return pdfLink;\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/SpringerLink.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2019-08-02 15:20:10","commitOrder":5,"curCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n\n        Optional<DOI> doi = entry.getField(StandardField.DOI)\n                                 .flatMap(DOI::parse);\n        if (doi.isPresent()) {\n            try {\n                return findFullText(doi.get());\n            } catch (UnirestException e) {\n                throw new IOException(e);\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n","date":"2019-08-02 15:20:10","endLine":43,"groupId":"11961","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"findFullText","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/64/e3ab046e6126435b8abafd31af1a93e3e25922.src","preCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n\n        Optional<DOI> doi = entry.getField(StandardField.DOI)\n                                 .flatMap(DOI::parse);\n        if (doi.isPresent()) {\n            try {\n                return findFullText(doi.get());\n            } catch (UnirestException e) {\n                throw new IOException(e);\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/OpenAccessDoi.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"N"}],"commitId":"c19feb16139f7834043b2913f35e746387860cdf","commitMessage":"@@@Fix Springer fetcher tests (#5773)\n\n","date":"2019-12-21 05:18:27","modifiedFileCount":"2","status":"M","submitter":"Oliver Kopp"},{"authorTime":"2020-03-15 19:55:20","codes":[{"authorDate":"2019-12-21 05:18:27","commitOrder":6,"curCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n        Optional<URL> pdfLink = Optional.empty();\n\n        \r\n        Optional<DOI> doi = entry.getField(StandardField.DOI).flatMap(DOI::parse);\n\n        if (doi.isPresent()) {\n            \r\n            try {\n                HttpResponse<JsonNode> jsonResponse = Unirest.get(API_URL)\n                                                             .queryString(\"api_key\", API_KEY)\n                                                             .queryString(\"q\", String.format(\"doi:%s\", doi.get().getDOI()))\n                                                             .asJson();\n                if (jsonResponse.getBody() != null) {\n                    JSONObject json = jsonResponse.getBody().getObject();\n                    int results = json.getJSONArray(\"result\").getJSONObject(0).getInt(\"total\");\n\n                    if (results > 0) {\n                        LOGGER.info(\"Fulltext PDF found @ Springer.\");\n                        pdfLink = Optional.of(new URL(\"http\", CONTENT_HOST, String.format(\"/content/pdf/%s.pdf\", doi.get().getDOI())));\n                    }\n                }\n            } catch (UnirestException e) {\n                LOGGER.warn(\"SpringerLink API request failed\", e);\n            }\n        }\n        return pdfLink;\n    }\n","date":"2019-12-21 05:18:27","endLine":62,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"findFullText","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/98/e313078dda012c3d243b59ff20025f227c51ba.src","preCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n        Optional<URL> pdfLink = Optional.empty();\n\n        \r\n        Optional<DOI> doi = entry.getField(StandardField.DOI).flatMap(DOI::parse);\n\n        if (doi.isPresent()) {\n            \r\n            try {\n                HttpResponse<JsonNode> jsonResponse = Unirest.get(API_URL)\n                                                             .queryString(\"api_key\", API_KEY)\n                                                             .queryString(\"q\", String.format(\"doi:%s\", doi.get().getDOI()))\n                                                             .asJson();\n                if (jsonResponse.getBody() != null) {\n                    JSONObject json = jsonResponse.getBody().getObject();\n                    int results = json.getJSONArray(\"result\").getJSONObject(0).getInt(\"total\");\n\n                    if (results > 0) {\n                        LOGGER.info(\"Fulltext PDF found @ Springer.\");\n                        pdfLink = Optional.of(new URL(\"http\", CONTENT_HOST, String.format(\"/content/pdf/%s.pdf\", doi.get().getDOI())));\n                    }\n                }\n            } catch (UnirestException e) {\n                LOGGER.warn(\"SpringerLink API request failed\", e);\n            }\n        }\n        return pdfLink;\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/SpringerLink.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"},{"authorDate":"2020-03-15 19:55:20","commitOrder":6,"curCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n\n        Optional<DOI> doi = entry.getField(StandardField.DOI)\n                                 .flatMap(DOI::parse);\n\n        if (!doi.isPresent()) {\n            return Optional.empty();\n        }\n\n        try {\n            return findFullText(doi.get());\n        } catch (UnirestException e) {\n            throw new IOException(e);\n        }\n    }\n","date":"2020-03-15 20:00:43","endLine":47,"groupId":"6990","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"findFullText","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/b5/290ca8cea3eaf1573904ad5ebdff4164210aa7.src","preCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n\n        Optional<DOI> doi = entry.getField(StandardField.DOI)\n                                 .flatMap(DOI::parse);\n        if (doi.isPresent()) {\n            try {\n                return findFullText(doi.get());\n            } catch (UnirestException e) {\n                throw new IOException(e);\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/OpenAccessDoi.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"}],"commitId":"086629d67ae49520bd4dc4ef5938ab03f0637ca7","commitMessage":"@@@Improve OpenAccessDoi fetcher\n","date":"2020-03-15 20:00:43","modifiedFileCount":"3","status":"M","submitter":"Stefan Kolb"},{"authorTime":"2020-03-15 19:55:20","codes":[{"authorDate":"2020-03-15 22:00:17","commitOrder":7,"curCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n\n        \r\n        Optional<DOI> doi = entry.getField(StandardField.DOI).flatMap(DOI::parse);\n\n        if (!doi.isPresent()) {\n            return Optional.empty();\n        }\n        \r\n        try {\n            HttpResponse<JsonNode> jsonResponse = Unirest.get(API_URL)\n                                                         .queryString(\"api_key\", API_KEY)\n                                                         .queryString(\"q\", String.format(\"doi:%s\", doi.get().getDOI()))\n                                                         .asJson();\n            if (jsonResponse.getBody() != null) {\n                JSONObject json = jsonResponse.getBody().getObject();\n                int results = json.getJSONArray(\"result\").getJSONObject(0).getInt(\"total\");\n\n                if (results > 0) {\n                    LOGGER.info(\"Fulltext PDF found @ Springer.\");\n                    return Optional.of(new URL(\"http\", CONTENT_HOST, String.format(\"/content/pdf/%s.pdf\", doi.get().getDOI())));\n                }\n            }\n        } catch (UnirestException e) {\n            LOGGER.warn(\"SpringerLink API request failed\", e);\n        }\n        return Optional.empty();\n    }\n","date":"2020-03-15 22:00:17","endLine":62,"groupId":"121006","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"findFullText","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/e9/aafb455977468415d7060d2c6864efb4e4769a.src","preCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n        Optional<URL> pdfLink = Optional.empty();\n\n        \r\n        Optional<DOI> doi = entry.getField(StandardField.DOI).flatMap(DOI::parse);\n\n        if (doi.isPresent()) {\n            \r\n            try {\n                HttpResponse<JsonNode> jsonResponse = Unirest.get(API_URL)\n                                                             .queryString(\"api_key\", API_KEY)\n                                                             .queryString(\"q\", String.format(\"doi:%s\", doi.get().getDOI()))\n                                                             .asJson();\n                if (jsonResponse.getBody() != null) {\n                    JSONObject json = jsonResponse.getBody().getObject();\n                    int results = json.getJSONArray(\"result\").getJSONObject(0).getInt(\"total\");\n\n                    if (results > 0) {\n                        LOGGER.info(\"Fulltext PDF found @ Springer.\");\n                        pdfLink = Optional.of(new URL(\"http\", CONTENT_HOST, String.format(\"/content/pdf/%s.pdf\", doi.get().getDOI())));\n                    }\n                }\n            } catch (UnirestException e) {\n                LOGGER.warn(\"SpringerLink API request failed\", e);\n            }\n        }\n        return pdfLink;\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/SpringerLink.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2020-03-15 19:55:20","commitOrder":7,"curCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n\n        Optional<DOI> doi = entry.getField(StandardField.DOI)\n                                 .flatMap(DOI::parse);\n\n        if (!doi.isPresent()) {\n            return Optional.empty();\n        }\n\n        try {\n            return findFullText(doi.get());\n        } catch (UnirestException e) {\n            throw new IOException(e);\n        }\n    }\n","date":"2020-03-15 20:00:43","endLine":47,"groupId":"121006","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"findFullText","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/b5/290ca8cea3eaf1573904ad5ebdff4164210aa7.src","preCode":"    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n        Objects.requireNonNull(entry);\n\n        Optional<DOI> doi = entry.getField(StandardField.DOI)\n                                 .flatMap(DOI::parse);\n\n        if (!doi.isPresent()) {\n            return Optional.empty();\n        }\n\n        try {\n            return findFullText(doi.get());\n        } catch (UnirestException e) {\n            throw new IOException(e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/OpenAccessDoi.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"N"}],"commitId":"3eeb86ce4e6fbe457d589c080531af230290abff","commitMessage":"@@@Improve SpringerLink fetcher\n","date":"2020-03-15 22:00:17","modifiedFileCount":"2","status":"M","submitter":"Stefan Kolb"}]
