[{"authorTime":"2017-11-28 01:58:17","codes":[{"authorDate":"2017-11-28 01:58:17","commitOrder":1,"curCode":"    public void testNoAstRegex() {\n        String query = \"a b\";\n        List<Text> expectedTexts = Arrays.asList(TooltipTextUtil.createText(\"This search contains entries in which any field contains the regular expression \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" and \"), TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" (case insensitive). \"),\n                TooltipTextUtil.createText(\"\\n\\nHint: To search specific fields only, enter for example:\\n\"), TooltipTextUtil.createText(\"author=smith and title=electrical\", TooltipTextUtil.TextType.MONOSPACED));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(false, true, query).getDescription();\n\n        assertTrue(TextFlowEqualityHelper.checkIfDescriptionEqualsExpectedTexts(description, expectedTexts));\n    }\n","date":"2017-11-28 01:58:17","endLine":38,"groupId":"5331","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoAstRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/78/705c52a476cdeda3019a7c1d06e2dec118385b.src","preCode":"    public void testNoAstRegex() {\n        String query = \"a b\";\n        List<Text> expectedTexts = Arrays.asList(TooltipTextUtil.createText(\"This search contains entries in which any field contains the regular expression \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" and \"), TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" (case insensitive). \"),\n                TooltipTextUtil.createText(\"\\n\\nHint: To search specific fields only, enter for example:\\n\"), TooltipTextUtil.createText(\"author=smith and title=electrical\", TooltipTextUtil.TextType.MONOSPACED));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(false, true, query).getDescription();\n\n        assertTrue(TextFlowEqualityHelper.checkIfDescriptionEqualsExpectedTexts(description, expectedTexts));\n    }\n","realPath":"src/test/java/org/jabref/gui/search/ContainsAndRegexBasedSearchRuleDescriberTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"B"},{"authorDate":"2017-11-28 01:58:17","commitOrder":1,"curCode":"    public void testNoAstCaseSensitive() {\n        String query = \"a b\";\n        List<Text> expectedTexts = Arrays.asList(TooltipTextUtil.createText(\"This search contains entries in which any field contains the term \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" and \"), TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" (case sensitive). \"),\n                TooltipTextUtil.createText(\"\\n\\nHint: To search specific fields only, enter for example:\\n\"), TooltipTextUtil.createText(\"author=smith and title=electrical\", TooltipTextUtil.TextType.MONOSPACED));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(true, false, query).getDescription();\n\n        assertTrue(TextFlowEqualityHelper.checkIfDescriptionEqualsExpectedTexts(description, expectedTexts));\n    }\n","date":"2017-11-28 01:58:17","endLine":60,"groupId":"5331","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoAstCaseSensitive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/78/705c52a476cdeda3019a7c1d06e2dec118385b.src","preCode":"    public void testNoAstCaseSensitive() {\n        String query = \"a b\";\n        List<Text> expectedTexts = Arrays.asList(TooltipTextUtil.createText(\"This search contains entries in which any field contains the term \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" and \"), TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" (case sensitive). \"),\n                TooltipTextUtil.createText(\"\\n\\nHint: To search specific fields only, enter for example:\\n\"), TooltipTextUtil.createText(\"author=smith and title=electrical\", TooltipTextUtil.TextType.MONOSPACED));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(true, false, query).getDescription();\n\n        assertTrue(TextFlowEqualityHelper.checkIfDescriptionEqualsExpectedTexts(description, expectedTexts));\n    }\n","realPath":"src/test/java/org/jabref/gui/search/ContainsAndRegexBasedSearchRuleDescriberTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"}],"commitId":"e944c7aab1df6e6ac5cc081808fe92449a39cd48","commitMessage":"@@@Fix for issue #3381 (#3443)\n\n* the SearchDescribers now return a TextFlow\n\n* moved the search.rules.describer package from logic to gui package\n  because the SearchDescriber now creates TextFlow Elements\n\n* moved the tests accordingly\n\n* modified creation of Tooltip in GlobalSearchBar to display the\n  TextFlow created by the SearchDescribers\n\n* SearchQuery now stores a TextFlow as description\n\n* Added a stub for compatibility in GroupDialog because it uses the\n  SearchQuery to get the description and needs an HTML string for\n  its Swing Tooltip\n\n* Styled the SearchBar Tooltip for readability\n\nIt uses an own style class to not change any other styled elements.\nStyling was choosen to look like the other (swing) tooltips.\n\n* refactor for better readability\n\n* removed description member of SearchQuery class\n\nbecause the description of a SearchQuery is a gui element.  it is not\nstored any more in this class. Everywhere the description is needed it\nis generated\n\n* add method to create HTML string from javafx Text\n\n* create HTML string from description for compat.\n\n* fixed formatting for style\n\n* created tests for TextUtil class\n\n* modified the SearchDescriber Implementations tests\n\nnow they work properly again and check the created Texts inside\nthe description TextFlow\n\n* split up testcases into single methods\n\n* using old localized strings again\n\nthese old localized strings containing html tags are broken up and\nconverted to Text objects to use in javafx TextFlow\n\n* added and modified tests\n\n* added changelog entry\n\n* changed syntax for getting SearchDescriber\n\nnow a whole SearchQuery object is sufficient to get a corresponding\nSearchDescriber\n\n* refactored for better style\n\n* javafx tooltips styled per css\n\nalso refactored the GlobalSearchBar tooltip to use this new styling\n\n* modified and restructured tests\n\nIt was necessary to modify the tests of the SearchDescriber\nImplementations and the TooltipTextUtil class because of the new css\nstyling for tooltips. Also refactored for better style\n","date":"2017-11-28 01:58:17","modifiedFileCount":"4","status":"B","submitter":"Julian Pfeifer"},{"authorTime":"2018-06-04 05:46:01","codes":[{"authorDate":"2018-06-04 05:46:01","commitOrder":2,"curCode":"    void testNoAstRegex() {\n        String query = \"a b\";\n        List<Text> expectedTexts = Arrays.asList(TooltipTextUtil.createText(\"This search contains entries in which any field contains the regular expression \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" and \"), TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" (case insensitive). \"),\n                TooltipTextUtil.createText(\"\\n\\nHint: To search specific fields only, enter for example:\\n\"), TooltipTextUtil.createText(\"author=smith and title=electrical\", TooltipTextUtil.TextType.MONOSPACED));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(false, true, query).getDescription();\n\n        TextFlowEqualityHelper.assertEquals(expectedTexts, description);\n    }\n","date":"2018-06-04 05:46:01","endLine":66,"groupId":"5331","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoAstRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/27/8556f0db46a5638c7df9aa625ecd331538d70e.src","preCode":"    public void testNoAstRegex() {\n        String query = \"a b\";\n        List<Text> expectedTexts = Arrays.asList(TooltipTextUtil.createText(\"This search contains entries in which any field contains the regular expression \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" and \"), TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" (case insensitive). \"),\n                TooltipTextUtil.createText(\"\\n\\nHint: To search specific fields only, enter for example:\\n\"), TooltipTextUtil.createText(\"author=smith and title=electrical\", TooltipTextUtil.TextType.MONOSPACED));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(false, true, query).getDescription();\n\n        assertTrue(TextFlowEqualityHelper.checkIfDescriptionEqualsExpectedTexts(description, expectedTexts));\n    }\n","realPath":"src/test/java/org/jabref/gui/search/ContainsAndRegexBasedSearchRuleDescriberTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2018-06-04 05:46:01","commitOrder":2,"curCode":"    void testNoAstCaseSensitive() {\n        String query = \"a b\";\n        List<Text> expectedTexts = Arrays.asList(TooltipTextUtil.createText(\"This search contains entries in which any field contains the term \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" and \"), TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" (case sensitive). \"),\n                TooltipTextUtil.createText(\"\\n\\nHint: To search specific fields only, enter for example:\\n\"), TooltipTextUtil.createText(\"author=smith and title=electrical\", TooltipTextUtil.TextType.MONOSPACED));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(true, false, query).getDescription();\n\n        TextFlowEqualityHelper.assertEquals(expectedTexts, description);\n    }\n","date":"2018-06-04 05:46:01","endLine":88,"groupId":"5331","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoAstCaseSensitive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/27/8556f0db46a5638c7df9aa625ecd331538d70e.src","preCode":"    public void testNoAstCaseSensitive() {\n        String query = \"a b\";\n        List<Text> expectedTexts = Arrays.asList(TooltipTextUtil.createText(\"This search contains entries in which any field contains the term \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" and \"), TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" (case sensitive). \"),\n                TooltipTextUtil.createText(\"\\n\\nHint: To search specific fields only, enter for example:\\n\"), TooltipTextUtil.createText(\"author=smith and title=electrical\", TooltipTextUtil.TextType.MONOSPACED));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(true, false, query).getDescription();\n\n        assertTrue(TextFlowEqualityHelper.checkIfDescriptionEqualsExpectedTexts(description, expectedTexts));\n    }\n","realPath":"src/test/java/org/jabref/gui/search/ContainsAndRegexBasedSearchRuleDescriberTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"a989aa42246c4dcf6eadc147d2f612de44a07b94","commitMessage":"@@@Merge remote-tracking branch 'origin/maintable-beta'\n\n# Conflicts:\n#\tsrc/main/java/org/jabref/gui/exporter/ExportAction.java\n#\tsrc/main/java/org/jabref/gui/exporter/ExportToClipboardAction.java\n#\tsrc/main/java/org/jabref/gui/exporter/SaveDatabaseAction.java\n#\tsrc/main/java/org/jabref/gui/importer/ImportFormats.java\n#\tsrc/main/java/org/jabref/gui/importer/actions/OpenDatabaseAction.java\n#\tsrc/main/java/org/jabref/gui/openoffice/StyleSelectDialog.java\n#\tsrc/main/java/org/jabref/gui/preftabs/PreferencesDialog.java\n#\tsrc/main/java/org/jabref/gui/protectedterms/NewProtectedTermsFileDialog.java\n#\tsrc/main/java/org/jabref/gui/shared/ConnectToSharedDatabaseDialog.java\n","date":"2018-06-04 05:46:01","modifiedFileCount":"316","status":"M","submitter":"Oliver Kopp"},{"authorTime":"2020-01-09 06:08:56","codes":[{"authorDate":"2020-01-09 06:08:56","commitOrder":3,"curCode":"    void testNoAstRegex() {\n        String query = \"a b\";\n        List<Text> expectedTexts = Arrays.asList(TooltipTextUtil.createText(\"This search contains entries in which any field contains the regular expression \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" and \"), TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" (case insensitive). \"),\n                TooltipTextUtil.createText(\"\\n\\nHint: To search specific fields only, enter for example:\"),\n                TooltipTextUtil.createText(\" author=smith and title=electrical\", TooltipTextUtil.TextType.MONOSPACED));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(false, true, query).getDescription();\n\n        TextFlowEqualityHelper.assertEquals(expectedTexts, description);\n    }\n","date":"2020-01-09 06:08:56","endLine":69,"groupId":"7144","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoAstRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fe/a01bdd4e2ef9f263d5198c46b8c05ff2dc1cff.src","preCode":"    void testNoAstRegex() {\n        String query = \"a b\";\n        List<Text> expectedTexts = Arrays.asList(TooltipTextUtil.createText(\"This search contains entries in which any field contains the regular expression \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" and \"), TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" (case insensitive). \"),\n                TooltipTextUtil.createText(\"\\n\\nHint: To search specific fields only, enter for example:\\n\"), TooltipTextUtil.createText(\"author=smith and title=electrical\", TooltipTextUtil.TextType.MONOSPACED));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(false, true, query).getDescription();\n\n        TextFlowEqualityHelper.assertEquals(expectedTexts, description);\n    }\n","realPath":"src/test/java/org/jabref/gui/search/ContainsAndRegexBasedSearchRuleDescriberTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2020-01-09 06:08:56","commitOrder":3,"curCode":"    void testNoAstCaseSensitive() {\n        String query = \"a b\";\n        List<Text> expectedTexts = Arrays.asList(TooltipTextUtil.createText(\"This search contains entries in which any field contains the term \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" and \"), TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" (case sensitive). \"),\n                TooltipTextUtil.createText(\"\\n\\nHint: To search specific fields only, enter for example:\"),\n                TooltipTextUtil.createText(\" author=smith and title=electrical\", TooltipTextUtil.TextType.MONOSPACED));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(true, false, query).getDescription();\n\n        TextFlowEqualityHelper.assertEquals(expectedTexts, description);\n    }\n","date":"2020-01-09 06:08:56","endLine":93,"groupId":"7144","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoAstCaseSensitive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fe/a01bdd4e2ef9f263d5198c46b8c05ff2dc1cff.src","preCode":"    void testNoAstCaseSensitive() {\n        String query = \"a b\";\n        List<Text> expectedTexts = Arrays.asList(TooltipTextUtil.createText(\"This search contains entries in which any field contains the term \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" and \"), TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" (case sensitive). \"),\n                TooltipTextUtil.createText(\"\\n\\nHint: To search specific fields only, enter for example:\\n\"), TooltipTextUtil.createText(\"author=smith and title=electrical\", TooltipTextUtil.TextType.MONOSPACED));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(true, false, query).getDescription();\n\n        TextFlowEqualityHelper.assertEquals(expectedTexts, description);\n    }\n","realPath":"src/test/java/org/jabref/gui/search/ContainsAndRegexBasedSearchRuleDescriberTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"db13dc0e1946ccac93c85f182e2fed6eefac4eac","commitMessage":"@@@Fix GUI tests (#5781)\n\n* Fix GUI tests (and remove BasePanelTest)\n\n* Add architecture test exception\n\n* Fix visibility of class SourceTabTest\n\n* Revert \"Add architecture test exception\"\n\nThis reverts commit 4a154a8ef7cedf0c7cbd19f0d2cb1169c1872932.\n\n* Have keyBindingRepository as parameter for SourceTab\n\n* Localize hint on rule\n\n* Fix import of Globals\n","date":"2020-01-09 06:08:56","modifiedFileCount":"9","status":"M","submitter":"Oliver Kopp"},{"authorTime":"2021-06-08 05:10:30","codes":[{"authorDate":"2021-06-08 05:10:30","commitOrder":4,"curCode":"    void testNoAstRegex() {\n        String query = \"a b\";\n        List<Text> expectedTexts = List.of(\n                TooltipTextUtil.createText(\"This search contains entries in which any field contains the regular expression \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD),\n                TooltipTextUtil.createText(\" and \"),\n                TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD),\n                TooltipTextUtil.createText(\" (case insensitive). \"));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(false, true, query).getDescription();\n\n        TextFlowEqualityHelper.assertEquals(expectedTexts, description);\n    }\n","date":"2021-06-08 05:10:30","endLine":66,"groupId":"6624","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoAstRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/b6/7da25d1caeba733b07c506fbad2562a6d3660d.src","preCode":"    void testNoAstRegex() {\n        String query = \"a b\";\n        List<Text> expectedTexts = Arrays.asList(TooltipTextUtil.createText(\"This search contains entries in which any field contains the regular expression \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" and \"), TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" (case insensitive). \"),\n                TooltipTextUtil.createText(\"\\n\\nHint: To search specific fields only, enter for example:\"),\n                TooltipTextUtil.createText(\" author=smith and title=electrical\", TooltipTextUtil.TextType.MONOSPACED));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(false, true, query).getDescription();\n\n        TextFlowEqualityHelper.assertEquals(expectedTexts, description);\n    }\n","realPath":"src/test/java/org/jabref/gui/search/ContainsAndRegexBasedSearchRuleDescriberTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2021-06-08 05:10:30","commitOrder":4,"curCode":"    void testNoAstCaseSensitive() {\n        String query = \"a b\";\n        List<Text> expectedTexts = List.of(\n                TooltipTextUtil.createText(\"This search contains entries in which any field contains the term \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD),\n                TooltipTextUtil.createText(\" and \"),\n                TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD),\n                TooltipTextUtil.createText(\" (case sensitive). \"));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(true, false, query).getDescription();\n\n        TextFlowEqualityHelper.assertEquals(expectedTexts, description);\n    }\n","date":"2021-06-08 05:10:30","endLine":94,"groupId":"6624","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoAstCaseSensitive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/b6/7da25d1caeba733b07c506fbad2562a6d3660d.src","preCode":"    void testNoAstCaseSensitive() {\n        String query = \"a b\";\n        List<Text> expectedTexts = Arrays.asList(TooltipTextUtil.createText(\"This search contains entries in which any field contains the term \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" and \"), TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD), TooltipTextUtil.createText(\" (case sensitive). \"),\n                TooltipTextUtil.createText(\"\\n\\nHint: To search specific fields only, enter for example:\"),\n                TooltipTextUtil.createText(\" author=smith and title=electrical\", TooltipTextUtil.TextType.MONOSPACED));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(true, false, query).getDescription();\n\n        TextFlowEqualityHelper.assertEquals(expectedTexts, description);\n    }\n","realPath":"src/test/java/org/jabref/gui/search/ContainsAndRegexBasedSearchRuleDescriberTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"ffd623d9ba115c9deb6751458150d7d4c25a8d8d","commitMessage":"@@@Replace <p> in localization by \\n (#7279)\n\nCo-authored-by: Christoph <siedlerkiller@gmail.com>\nCo-authored-by: Carl Christian Snethlage <cc.snethlage@gmail.com>","date":"2021-06-08 05:10:30","modifiedFileCount":"13","status":"M","submitter":"Oliver Kopp"},{"authorTime":"2021-07-15 03:49:30","codes":[{"authorDate":"2021-07-15 03:49:30","commitOrder":5,"curCode":"    void testNoAstRegex() {\n        String query = \"a b\";\n        List<Text> expectedTexts = List.of(\n                TooltipTextUtil.createText(\"This search contains entries in which any field contains the regular expression \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD),\n                TooltipTextUtil.createText(\" and \"),\n                TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD),\n                TooltipTextUtil.createText(\" (case insensitive). \"));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(EnumSet.of(SearchRules.SearchFlags.REGULAR_EXPRESSION), query).getDescription();\n\n        TextFlowEqualityHelper.assertEquals(expectedTexts, description);\n    }\n","date":"2021-07-15 03:49:30","endLine":69,"groupId":"1034","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testNoAstRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/bc/3406ec43c477b8f04de51047e4d2c8e6b9523b.src","preCode":"    void testNoAstRegex() {\n        String query = \"a b\";\n        List<Text> expectedTexts = List.of(\n                TooltipTextUtil.createText(\"This search contains entries in which any field contains the regular expression \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD),\n                TooltipTextUtil.createText(\" and \"),\n                TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD),\n                TooltipTextUtil.createText(\" (case insensitive). \"));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(false, true, query).getDescription();\n\n        TextFlowEqualityHelper.assertEquals(expectedTexts, description);\n    }\n","realPath":"src/test/java/org/jabref/gui/search/ContainsAndRegexBasedSearchRuleDescriberTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2021-07-15 03:49:30","commitOrder":5,"curCode":"    void testNoAstCaseSensitive() {\n        String query = \"a b\";\n        List<Text> expectedTexts = List.of(\n                TooltipTextUtil.createText(\"This search contains entries in which any field contains the term \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD),\n                TooltipTextUtil.createText(\" and \"),\n                TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD),\n                TooltipTextUtil.createText(\" (case sensitive). \"));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(EnumSet.of(SearchRules.SearchFlags.CASE_SENSITIVE), query).getDescription();\n\n        TextFlowEqualityHelper.assertEquals(expectedTexts, description);\n    }\n","date":"2021-07-15 03:49:30","endLine":97,"groupId":"1034","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testNoAstCaseSensitive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/bc/3406ec43c477b8f04de51047e4d2c8e6b9523b.src","preCode":"    void testNoAstCaseSensitive() {\n        String query = \"a b\";\n        List<Text> expectedTexts = List.of(\n                TooltipTextUtil.createText(\"This search contains entries in which any field contains the term \"),\n                TooltipTextUtil.createText(\"a\", TooltipTextUtil.TextType.BOLD),\n                TooltipTextUtil.createText(\" and \"),\n                TooltipTextUtil.createText(\"b\", TooltipTextUtil.TextType.BOLD),\n                TooltipTextUtil.createText(\" (case sensitive). \"));\n        TextFlow description = new ContainsAndRegexBasedSearchRuleDescriber(true, false, query).getDescription();\n\n        TextFlowEqualityHelper.assertEquals(expectedTexts, description);\n    }\n","realPath":"src/test/java/org/jabref/gui/search/ContainsAndRegexBasedSearchRuleDescriberTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"ddce5735b09cfec22ef55d15431582f19cb54208","commitMessage":"@@@Search in PDF Files (#2838)\n\nCo-authored-by: braunch <braunch.dev@gmail.com>\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>\nCo-authored-by: Benedikt Tutzer <btut@users.noreply.github.com>\nCo-authored-by: Carl Christian Snethlage <50491877+calixtus@users.noreply.github.com>\nCo-authored-by: Christoph <siedlerkiller@gmail.com>","date":"2021-07-15 03:49:30","modifiedFileCount":"39","status":"M","submitter":"Linus Dietz"}]
