[{"authorTime":"2021-01-27 05:40:44","codes":[{"authorDate":"2021-01-27 05:40:44","commitOrder":4,"curCode":"    void setUpMocks() {\n        importFormatPreferences = mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS);\n        savePreferences = mock(SavePreferences.class, Answers.RETURNS_DEEP_STUBS);\n        timestampPreferences = mock(TimestampPreferences.class);\n        when(savePreferences.getSaveOrder()).thenReturn(new SaveOrderConfig());\n        when(savePreferences.getEncoding()).thenReturn(null);\n        when(savePreferences.takeMetadataSaveOrderInAccount()).thenReturn(true);\n        when(importFormatPreferences.getKeywordSeparator()).thenReturn(',');\n        when(importFormatPreferences.getFieldContentFormatterPreferences()).thenReturn(new FieldContentFormatterPreferences());\n        when(importFormatPreferences.isKeywordSyncEnabled()).thenReturn(false);\n        when(importFormatPreferences.getEncoding()).thenReturn(StandardCharsets.UTF_8);\n        entryTypesManager = new BibEntryTypesManager();\n        gitHandler = mock(GitHandler.class, Answers.RETURNS_DEFAULTS);\n    }\n","date":"2021-01-27 05:40:44","endLine":51,"groupId":"3112","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpMocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/f8/50658fefb701f46f2f0f65dac245eac0a2137a.src","preCode":"    void setUpMocks() {\n        importFormatPreferences = mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS);\n        savePreferences = mock(SavePreferences.class, Answers.RETURNS_DEEP_STUBS);\n        timestampPreferences = mock(TimestampPreferences.class);\n        when(savePreferences.getSaveOrder()).thenReturn(new SaveOrderConfig());\n        when(savePreferences.getEncoding()).thenReturn(null);\n        when(savePreferences.takeMetadataSaveOrderInAccount()).thenReturn(true);\n        when(importFormatPreferences.getKeywordSeparator()).thenReturn(',');\n        when(importFormatPreferences.getFieldContentFormatterPreferences()).thenReturn(new FieldContentFormatterPreferences());\n        when(importFormatPreferences.isKeywordSyncEnabled()).thenReturn(false);\n        when(importFormatPreferences.getEncoding()).thenReturn(StandardCharsets.UTF_8);\n        entryTypesManager = new BibEntryTypesManager();\n        gitHandler = mock(GitHandler.class, Answers.RETURNS_DEFAULTS);\n    }\n","realPath":"src/test/java/org/jabref/logic/crawler/StudyDatabaseToFetcherConverterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"B"},{"authorDate":"2021-01-27 05:40:44","commitOrder":4,"curCode":"    public void setUpMocks() throws Exception {\n        savePreferences = mock(SavePreferences.class, Answers.RETURNS_DEEP_STUBS);\n        importFormatPreferences = mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS);\n        timestampPreferences = mock(TimestampPreferences.class);\n        citationKeyPatternPreferences = new CitationKeyPatternPreferences(\n                false,\n                false,\n                false,\n                CitationKeyPatternPreferences.KeySuffix.SECOND_WITH_A,\n                \"\",\n                \"\",\n                DEFAULT_UNWANTED_CHARACTERS,\n                GlobalCitationKeyPattern.fromPattern(\"[auth][year]\"),\n                ',');\n        when(savePreferences.getSaveOrder()).thenReturn(new SaveOrderConfig());\n        when(savePreferences.getEncoding()).thenReturn(null);\n        when(savePreferences.takeMetadataSaveOrderInAccount()).thenReturn(true);\n        when(savePreferences.getCitationKeyPatternPreferences()).thenReturn(citationKeyPatternPreferences);\n        when(importFormatPreferences.getKeywordSeparator()).thenReturn(',');\n        when(importFormatPreferences.getFieldContentFormatterPreferences()).thenReturn(new FieldContentFormatterPreferences());\n        when(importFormatPreferences.isKeywordSyncEnabled()).thenReturn(false);\n        when(importFormatPreferences.getEncoding()).thenReturn(StandardCharsets.UTF_8);\n        when(timestampPreferences.getTimestampField()).then(invocation -> StandardField.TIMESTAMP);\n        entryTypesManager = new BibEntryTypesManager();\n        getTestStudyRepository();\n    }\n","date":"2021-01-27 05:40:44","endLine":90,"groupId":"3112","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUpMocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/8b/ba87c2a38ff63042a453e43331bb6246aee308.src","preCode":"    public void setUpMocks() throws Exception {\n        savePreferences = mock(SavePreferences.class, Answers.RETURNS_DEEP_STUBS);\n        importFormatPreferences = mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS);\n        timestampPreferences = mock(TimestampPreferences.class);\n        citationKeyPatternPreferences = new CitationKeyPatternPreferences(\n                false,\n                false,\n                false,\n                CitationKeyPatternPreferences.KeySuffix.SECOND_WITH_A,\n                \"\",\n                \"\",\n                DEFAULT_UNWANTED_CHARACTERS,\n                GlobalCitationKeyPattern.fromPattern(\"[auth][year]\"),\n                ',');\n        when(savePreferences.getSaveOrder()).thenReturn(new SaveOrderConfig());\n        when(savePreferences.getEncoding()).thenReturn(null);\n        when(savePreferences.takeMetadataSaveOrderInAccount()).thenReturn(true);\n        when(savePreferences.getCitationKeyPatternPreferences()).thenReturn(citationKeyPatternPreferences);\n        when(importFormatPreferences.getKeywordSeparator()).thenReturn(',');\n        when(importFormatPreferences.getFieldContentFormatterPreferences()).thenReturn(new FieldContentFormatterPreferences());\n        when(importFormatPreferences.isKeywordSyncEnabled()).thenReturn(false);\n        when(importFormatPreferences.getEncoding()).thenReturn(StandardCharsets.UTF_8);\n        when(timestampPreferences.getTimestampField()).then(invocation -> StandardField.TIMESTAMP);\n        entryTypesManager = new BibEntryTypesManager();\n        getTestStudyRepository();\n    }\n","realPath":"src/test/java/org/jabref/logic/crawler/StudyRepositoryTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"MB"}],"commitId":"7117b6197aa6f69f6b8b25f9452e875c9051046b","commitMessage":"@@@Change format for study definition to yaml (#7126)\n\n","date":"2021-01-27 05:40:44","modifiedFileCount":"6","status":"M","submitter":"Dominik Voigt"},{"authorTime":"2021-07-05 03:02:18","codes":[{"authorDate":"2021-07-05 03:02:18","commitOrder":5,"curCode":"    void setUpMocks() {\n        importFormatPreferences = mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS);\n        savePreferences = mock(SavePreferences.class, Answers.RETURNS_DEEP_STUBS);\n        timestampPreferences = mock(TimestampPreferences.class);\n        when(savePreferences.getSaveOrder()).thenReturn(new SaveOrderConfig());\n        when(savePreferences.getEncoding()).thenReturn(null);\n        when(savePreferences.takeMetadataSaveOrderInAccount()).thenReturn(true);\n        when(importFormatPreferences.getKeywordSeparator()).thenReturn(',');\n        when(importFormatPreferences.getFieldContentFormatterPreferences()).thenReturn(new FieldContentFormatterPreferences());\n        when(importFormatPreferences.isKeywordSyncEnabled()).thenReturn(false);\n        when(importFormatPreferences.getEncoding()).thenReturn(StandardCharsets.UTF_8);\n        entryTypesManager = new BibEntryTypesManager();\n        gitHandler = mock(SlrGitHandler.class, Answers.RETURNS_DEFAULTS);\n    }\n","date":"2021-07-05 03:02:18","endLine":51,"groupId":"10105","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpMocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/74/ba78baa1a1b6b2fed191fbfd7d0e0445040f5c.src","preCode":"    void setUpMocks() {\n        importFormatPreferences = mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS);\n        savePreferences = mock(SavePreferences.class, Answers.RETURNS_DEEP_STUBS);\n        timestampPreferences = mock(TimestampPreferences.class);\n        when(savePreferences.getSaveOrder()).thenReturn(new SaveOrderConfig());\n        when(savePreferences.getEncoding()).thenReturn(null);\n        when(savePreferences.takeMetadataSaveOrderInAccount()).thenReturn(true);\n        when(importFormatPreferences.getKeywordSeparator()).thenReturn(',');\n        when(importFormatPreferences.getFieldContentFormatterPreferences()).thenReturn(new FieldContentFormatterPreferences());\n        when(importFormatPreferences.isKeywordSyncEnabled()).thenReturn(false);\n        when(importFormatPreferences.getEncoding()).thenReturn(StandardCharsets.UTF_8);\n        entryTypesManager = new BibEntryTypesManager();\n        gitHandler = mock(GitHandler.class, Answers.RETURNS_DEFAULTS);\n    }\n","realPath":"src/test/java/org/jabref/logic/crawler/StudyDatabaseToFetcherConverterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2021-07-05 03:02:18","commitOrder":5,"curCode":"    public void setUpMocks() throws Exception {\n        savePreferences = mock(SavePreferences.class, Answers.RETURNS_DEEP_STUBS);\n        importFormatPreferences = mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS);\n        timestampPreferences = mock(TimestampPreferences.class);\n        citationKeyPatternPreferences = new CitationKeyPatternPreferences(\n                false,\n                false,\n                false,\n                CitationKeyPatternPreferences.KeySuffix.SECOND_WITH_A,\n                \"\",\n                \"\",\n                DEFAULT_UNWANTED_CHARACTERS,\n                GlobalCitationKeyPattern.fromPattern(\"[auth][year]\"),\n                ',');\n        when(savePreferences.getSaveOrder()).thenReturn(new SaveOrderConfig());\n        when(savePreferences.getEncoding()).thenReturn(null);\n        when(savePreferences.takeMetadataSaveOrderInAccount()).thenReturn(true);\n        when(savePreferences.getEncoding()).thenReturn(Charset.defaultCharset());\n        when(savePreferences.getCitationKeyPatternPreferences()).thenReturn(citationKeyPatternPreferences);\n        when(importFormatPreferences.getKeywordSeparator()).thenReturn(',');\n        when(importFormatPreferences.getFieldContentFormatterPreferences()).thenReturn(new FieldContentFormatterPreferences());\n        when(importFormatPreferences.isKeywordSyncEnabled()).thenReturn(false);\n        when(importFormatPreferences.getEncoding()).thenReturn(StandardCharsets.UTF_8);\n        when(timestampPreferences.getTimestampField()).then(invocation -> StandardField.TIMESTAMP);\n        entryTypesManager = new BibEntryTypesManager();\n        getTestStudyRepository();\n    }\n","date":"2021-07-05 03:02:18","endLine":92,"groupId":"10105","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUpMocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/d4/becff0a1dfe71b1b76ea0a227bc186aee5078d.src","preCode":"    public void setUpMocks() throws Exception {\n        savePreferences = mock(SavePreferences.class, Answers.RETURNS_DEEP_STUBS);\n        importFormatPreferences = mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS);\n        timestampPreferences = mock(TimestampPreferences.class);\n        citationKeyPatternPreferences = new CitationKeyPatternPreferences(\n                false,\n                false,\n                false,\n                CitationKeyPatternPreferences.KeySuffix.SECOND_WITH_A,\n                \"\",\n                \"\",\n                DEFAULT_UNWANTED_CHARACTERS,\n                GlobalCitationKeyPattern.fromPattern(\"[auth][year]\"),\n                ',');\n        when(savePreferences.getSaveOrder()).thenReturn(new SaveOrderConfig());\n        when(savePreferences.getEncoding()).thenReturn(null);\n        when(savePreferences.takeMetadataSaveOrderInAccount()).thenReturn(true);\n        when(savePreferences.getCitationKeyPatternPreferences()).thenReturn(citationKeyPatternPreferences);\n        when(importFormatPreferences.getKeywordSeparator()).thenReturn(',');\n        when(importFormatPreferences.getFieldContentFormatterPreferences()).thenReturn(new FieldContentFormatterPreferences());\n        when(importFormatPreferences.isKeywordSyncEnabled()).thenReturn(false);\n        when(importFormatPreferences.getEncoding()).thenReturn(StandardCharsets.UTF_8);\n        when(timestampPreferences.getTimestampField()).then(invocation -> StandardField.TIMESTAMP);\n        entryTypesManager = new BibEntryTypesManager();\n        getTestStudyRepository();\n    }\n","realPath":"src/test/java/org/jabref/logic/crawler/StudyRepositoryTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"f0709b71ca0a303d17904e63072ef4abef29d539","commitMessage":"@@@Feature add git workflow for slr search (#7625)\n\n* Add study UI and Git support\n\n* Modify localization\n\n* Fix checkstyle\n\n* Fix test issues\n\n* Fix architecture test.  modify some formulations in UI\n\n* Add DI for services\n\n* Get table views working\nstandardize UI\n\n* Clean up\n\n* Make localization consistent\n\n* Compressed fxml and fixed minor visual issue (table cell too small)\n\n* Reduced code duplication\n\nCo-authored-by: Carl Christian Snethlage <cc.snethlage@gmail.com>\nCo-authored-by: Siedlerchr <siedlerkiller@gmail.com>","date":"2021-07-05 03:02:18","modifiedFileCount":"8","status":"M","submitter":"Dominik Voigt"}]
