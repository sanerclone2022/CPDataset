[{"authorTime":"2019-01-25 23:36:16","codes":[{"authorDate":"2017-03-16 22:35:07","commitOrder":2,"curCode":"    public void setUp() throws Exception {\n        fetcher = new CrossRef();\n\n        barrosEntry = new BibEntry();\n        barrosEntry.setField(\"title\", \"Service Interaction Patterns\");\n        barrosEntry.setField(\"author\", \"Alistair Barros and Marlon Dumas and Arthur H. M. ter Hofstede\");\n        barrosEntry.setField(\"year\", \"2005\");\n        barrosEntry.setField(\"doi\", \"10.1007/11538394_20\");\n        barrosEntry.setField(\"issn\", \"0302-9743\");\n        barrosEntry.setField(\"pages\", \"302-318\");\n    }\n","date":"2017-03-16 22:35:07","endLine":32,"groupId":"4100","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/8a/a11c7d8d08f762be6e358ad80c6d272b85972c.src","preCode":"    public void setUp() throws Exception {\n        fetcher = new CrossRef();\n\n        barrosEntry = new BibEntry();\n        barrosEntry.setField(\"title\", \"Service Interaction Patterns\");\n        barrosEntry.setField(\"author\", \"Alistair Barros and Marlon Dumas and Arthur H. M. ter Hofstede\");\n        barrosEntry.setField(\"year\", \"2005\");\n        barrosEntry.setField(\"doi\", \"10.1007/11538394_20\");\n        barrosEntry.setField(\"issn\", \"0302-9743\");\n        barrosEntry.setField(\"pages\", \"302-318\");\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fetcher/CrossRefTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":22,"status":"NB"},{"authorDate":"2019-01-25 23:36:16","commitOrder":2,"curCode":"    public static BibEntry getTestEntryBook() {\n        BibEntry entry = new BibEntry(BibtexEntryTypes.BOOK);\n        entry.setCiteKey(\"Harrer2018\");\n        entry.setField(FieldName.AUTHOR, \"Simon Harrer and J������rg Lenhard and Linus Dietz\");\n        entry.setField(FieldName.EDITOR, \"Andrea Steward\");\n        entry.setField(FieldName.TITLE, \"Java by Comparison\");\n        entry.setField(FieldName.YEAR, \"2018\");\n        entry.setField(FieldName.MONTH, \"March\");\n        entry.setField(FieldName.PUBLISHER, \"Pragmatic Bookshelf\");\n        entry.setField(FieldName.ADDRESS, \"Raleigh, NC\");\n        return entry;\n    }\n","date":"2019-01-25 23:36:16","endLine":45,"groupId":"2072","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getTestEntryBook","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/5e/f00045c546db663c9349a5eb320552c570cda1.src","preCode":"    public static BibEntry getTestEntryBook() {\n        BibEntry entry = new BibEntry(BibtexEntryTypes.BOOK);\n        entry.setCiteKey(\"Harrer2018\");\n        entry.setField(FieldName.AUTHOR, \"Simon Harrer and J������rg Lenhard and Linus Dietz\");\n        entry.setField(FieldName.EDITOR, \"Andrea Steward\");\n        entry.setField(FieldName.TITLE, \"Java by Comparison\");\n        entry.setField(FieldName.YEAR, \"2018\");\n        entry.setField(FieldName.MONTH, \"March\");\n        entry.setField(FieldName.PUBLISHER, \"Pragmatic Bookshelf\");\n        entry.setField(FieldName.ADDRESS, \"Raleigh, NC\");\n        return entry;\n    }\n","realPath":"src/main/java/org/jabref/logic/util/TestEntry.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"B"}],"commitId":"18aba35fcf77fad95577e3213e1eb66f5256cf42","commitMessage":"@@@ Convert OO/LO SidePanel to javafx (#4341)\n\n* Convert OO/LO SidePanel to javafx\n\nFirst attempt at converting the OpenOffice side panel\n\n* rework first part of select style dialog\n\n* add icon to delete style\nadd edit function\nimplement rest of logic\n\n* store settings.  show path\nload last selected style\nsubscribe preview panel to changes\n\n* update from scence builder\n\n* fix ok button\nwrap preview panel in vbox\n\n* add title for canceable progess dialog\nrework manual connect\nrework settings popup\ninitialize oo prefs to avoid NPE\nremove old style dialog\n\n* formatting\n\n* Create custom dialog which returns a dialog object\nfix preference storage\nfix manual path select\n\n* pass keybinding repo as dependency\n\n* add new dialog for advanced cite\ntodo: find out how to change the values\n\n* reload preferences in connect\nfix passing of prefs\nfix advanced cite dialog\n\n* fix checkstyle\nadd some dialog basics for manage citatiosn\n\n* further implement viewModel\n\n* implement viewModel\nfix l10n parts\n\nTODO: editing of extra info does not yet work\n\n* remove submodule\n\n* Display Manage citations as TextFlow in the table\nAllow editing of page info directly in the table\nReplace html bold with Text-Bold style\n\n* fix checkstyle\n\n* rework page info\nremove old dialog\nfix l10n\nset titles\nadd tooltips\n\n* use flowpane instead of textflow to prevent table row height increasing\n\n* cleanup and fix codacy issues\n\n* rework dialogs\nrework future handling in detect OO installation\n\n* rework constructor and rename to CitationEntryViewModel\nmove gui getText to view\n\n* fix checkstyle and l10n issues\n\n* fix order\n\n* fix style file select layout and inline variable'\n\n* Add Book as preview as well\n\n* change mac default settings to LO path\n\n* checkstyle\n\n* fix merge error\n\n* first part of refactoring\n\n* refactor and remove/fix obsolete tests\nput visible/managed bindings in fxml\n\n* Fixes #4576\nStore show/hide info of panel in preferences\n\n* use progessbar from fxdialogs\nTODO: Fix execution in fx thread\n\n* Fix autodetecting open office paths in background thread\nFix saving of settings after auto connect\nAdd notification when connections are cleared\nremove custom dialog hack\n\n* fix checkstyle\n","date":"2019-01-25 23:36:16","modifiedFileCount":"16","status":"M","submitter":"Christoph"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":3,"curCode":"    public void setUp() throws Exception {\n        fetcher = new CrossRef();\n\n        barrosEntry = new BibEntry();\n        barrosEntry.setField(StandardField.TITLE, \"Service Interaction Patterns\");\n        barrosEntry.setField(StandardField.AUTHOR, \"Alistair Barros and Marlon Dumas and Arthur H. M. ter Hofstede\");\n        barrosEntry.setField(StandardField.YEAR, \"2005\");\n        barrosEntry.setField(StandardField.DOI, \"10.1007/11538394_20\");\n        barrosEntry.setField(StandardField.ISSN, \"0302-9743\");\n        barrosEntry.setField(StandardField.PAGES, \"302-318\");\n    }\n","date":"2019-08-02 15:20:10","endLine":34,"groupId":"13200","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/7f/a7e5f90ac1829c3ef05aa52008e1d3b404a141.src","preCode":"    public void setUp() throws Exception {\n        fetcher = new CrossRef();\n\n        barrosEntry = new BibEntry();\n        barrosEntry.setField(\"title\", \"Service Interaction Patterns\");\n        barrosEntry.setField(\"author\", \"Alistair Barros and Marlon Dumas and Arthur H. M. ter Hofstede\");\n        barrosEntry.setField(\"year\", \"2005\");\n        barrosEntry.setField(\"doi\", \"10.1007/11538394_20\");\n        barrosEntry.setField(\"issn\", \"0302-9743\");\n        barrosEntry.setField(\"pages\", \"302-318\");\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fetcher/CrossRefTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":24,"status":"M"},{"authorDate":"2019-08-02 15:20:10","commitOrder":3,"curCode":"    public static BibEntry getTestEntryBook() {\n        BibEntry entry = new BibEntry(StandardEntryType.Book);\n        entry.setCiteKey(\"Harrer2018\");\n        entry.setField(StandardField.AUTHOR, \"Simon Harrer and J������rg Lenhard and Linus Dietz\");\n        entry.setField(StandardField.EDITOR, \"Andrea Steward\");\n        entry.setField(StandardField.TITLE, \"Java by Comparison\");\n        entry.setField(StandardField.YEAR, \"2018\");\n        entry.setField(StandardField.MONTH, \"March\");\n        entry.setField(StandardField.PUBLISHER, \"Pragmatic Bookshelf\");\n        entry.setField(StandardField.ADDRESS, \"Raleigh, NC\");\n        return entry;\n    }\n","date":"2019-08-02 15:20:10","endLine":55,"groupId":"11766","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getTestEntryBook","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/e5/34117fd0fb73c5f4bd9131203a924e19ce97a4.src","preCode":"    public static BibEntry getTestEntryBook() {\n        BibEntry entry = new BibEntry(BibtexEntryTypes.BOOK);\n        entry.setCiteKey(\"Harrer2018\");\n        entry.setField(FieldName.AUTHOR, \"Simon Harrer and J������rg Lenhard and Linus Dietz\");\n        entry.setField(FieldName.EDITOR, \"Andrea Steward\");\n        entry.setField(FieldName.TITLE, \"Java by Comparison\");\n        entry.setField(FieldName.YEAR, \"2018\");\n        entry.setField(FieldName.MONTH, \"March\");\n        entry.setField(FieldName.PUBLISHER, \"Pragmatic Bookshelf\");\n        entry.setField(FieldName.ADDRESS, \"Raleigh, NC\");\n        return entry;\n    }\n","realPath":"src/main/java/org/jabref/logic/util/TestEntry.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"4b39b78e4afcd6c36b385f5c46f1d9a4eac2e29b","commitMessage":"@@@Move to extended enums for fields and entry types (#5148)\n\n* Introduce interface for fields\n\n* Continue using fields interface instead of strings\n\n* Introduce OrFields class\n\n* Move FieldProperty\n\n* Convert entry types to extended enum\n\n* Start fixing build\n\n* Fix build\n\n* Start fixing tests\n\n* Everything compiles again\n\n* Make model tests pass\n\n* Fix most tests\n\n* Fix build\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix checkstyle issues\n\n* Fix more tests\n\n* Fix more tests\n\n* Disable test that fails on CI\n\n* Disable test that fails on CI\n","date":"2019-08-02 15:20:10","modifiedFileCount":"439","status":"M","submitter":"Tobias Diez"},{"authorTime":"2020-09-08 21:34:34","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":4,"curCode":"    public void setUp() throws Exception {\n        fetcher = new CrossRef();\n\n        barrosEntry = new BibEntry();\n        barrosEntry.setField(StandardField.TITLE, \"Service Interaction Patterns\");\n        barrosEntry.setField(StandardField.AUTHOR, \"Alistair Barros and Marlon Dumas and Arthur H. M. ter Hofstede\");\n        barrosEntry.setField(StandardField.YEAR, \"2005\");\n        barrosEntry.setField(StandardField.DOI, \"10.1007/11538394_20\");\n        barrosEntry.setField(StandardField.ISSN, \"0302-9743\");\n        barrosEntry.setField(StandardField.PAGES, \"302-318\");\n    }\n","date":"2019-08-02 15:20:10","endLine":34,"groupId":"10189","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/7f/a7e5f90ac1829c3ef05aa52008e1d3b404a141.src","preCode":"    public void setUp() throws Exception {\n        fetcher = new CrossRef();\n\n        barrosEntry = new BibEntry();\n        barrosEntry.setField(StandardField.TITLE, \"Service Interaction Patterns\");\n        barrosEntry.setField(StandardField.AUTHOR, \"Alistair Barros and Marlon Dumas and Arthur H. M. ter Hofstede\");\n        barrosEntry.setField(StandardField.YEAR, \"2005\");\n        barrosEntry.setField(StandardField.DOI, \"10.1007/11538394_20\");\n        barrosEntry.setField(StandardField.ISSN, \"0302-9743\");\n        barrosEntry.setField(StandardField.PAGES, \"302-318\");\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fetcher/CrossRefTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":24,"status":"N"},{"authorDate":"2020-09-08 21:34:34","commitOrder":4,"curCode":"    public static BibEntry getTestEntryBook() {\n        BibEntry entry = new BibEntry(StandardEntryType.Book);\n        entry.setCitationKey(\"Harrer2018\");\n        entry.setField(StandardField.AUTHOR, \"Simon Harrer and J������rg Lenhard and Linus Dietz\");\n        entry.setField(StandardField.EDITOR, \"Andrea Steward\");\n        entry.setField(StandardField.TITLE, \"Java by Comparison\");\n        entry.setField(StandardField.YEAR, \"2018\");\n        entry.setField(StandardField.MONTH, \"March\");\n        entry.setField(StandardField.PUBLISHER, \"Pragmatic Bookshelf\");\n        entry.setField(StandardField.ADDRESS, \"Raleigh, NC\");\n        return entry;\n    }\n","date":"2020-09-08 21:34:34","endLine":55,"groupId":"10189","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"getTestEntryBook","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a4/fcd5104db937557670ad3e7ddb20cb55593369.src","preCode":"    public static BibEntry getTestEntryBook() {\n        BibEntry entry = new BibEntry(StandardEntryType.Book);\n        entry.setCiteKey(\"Harrer2018\");\n        entry.setField(StandardField.AUTHOR, \"Simon Harrer and J������rg Lenhard and Linus Dietz\");\n        entry.setField(StandardField.EDITOR, \"Andrea Steward\");\n        entry.setField(StandardField.TITLE, \"Java by Comparison\");\n        entry.setField(StandardField.YEAR, \"2018\");\n        entry.setField(StandardField.MONTH, \"March\");\n        entry.setField(StandardField.PUBLISHER, \"Pragmatic Bookshelf\");\n        entry.setField(StandardField.ADDRESS, \"Raleigh, NC\");\n        return entry;\n    }\n","realPath":"src/main/java/org/jabref/logic/util/TestEntry.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"6dec1747d8a1c89f6c62fc1d1939d88411f17eba","commitMessage":"@@@Complete rebranding of `bibtexkey` as `citationkey` (#6875)\n\n","date":"2020-09-08 21:34:34","modifiedFileCount":"127","status":"M","submitter":"Tobias Diez"}]
