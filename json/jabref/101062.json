[{"authorTime":"2017-02-17 05:41:47","codes":[{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public OpenDocumentRepresentation(BibDatabase database, List<BibEntry> entries) {\n        this.database = database;\n        \r\n        List<FieldComparator> comparators = new ArrayList<>();\n        comparators.add(new FieldComparator(FieldName.AUTHOR));\n        comparators.add(new FieldComparator(FieldName.YEAR));\n        comparators.add(new FieldComparator(BibEntry.KEY_FIELD));\n        \r\n        List<BibEntry> entryList = new ArrayList<>();\n\n        \r\n        if (entries == null) {\n            entryList.addAll(database.getEntries());\n        } else {\n            entryList.addAll(entries);\n        }\n\n        Collections.sort(entryList, new FieldComparatorStack<>(comparators));\n        this.entries = entryList;\n    }\n","date":"2017-02-17 05:41:47","endLine":57,"groupId":"6883","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"OpenDocumentRepresentation","params":"(BibDatabasedatabase@List<BibEntry>entries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/98/e5f25e0c88acd1442ea277233de11b51db9534.src","preCode":"    public OpenDocumentRepresentation(BibDatabase database, List<BibEntry> entries) {\n        this.database = database;\n        \r\n        List<FieldComparator> comparators = new ArrayList<>();\n        comparators.add(new FieldComparator(FieldName.AUTHOR));\n        comparators.add(new FieldComparator(FieldName.YEAR));\n        comparators.add(new FieldComparator(BibEntry.KEY_FIELD));\n        \r\n        List<BibEntry> entryList = new ArrayList<>();\n\n        \r\n        if (entries == null) {\n            entryList.addAll(database.getEntries());\n        } else {\n            entryList.addAll(entries);\n        }\n\n        Collections.sort(entryList, new FieldComparatorStack<>(comparators));\n        this.entries = entryList;\n    }\n","realPath":"src/main/java/org/jabref/logic/exporter/OpenDocumentRepresentation.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"B"},{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public OOCalcDatabase(BibDatabase bibtex, List<BibEntry> entries) {\n        \r\n        List<FieldComparator> comparators = new ArrayList<>();\n        comparators.add(new FieldComparator(FieldName.AUTHOR));\n        comparators.add(new FieldComparator(FieldName.YEAR));\n        comparators.add(new FieldComparator(BibEntry.KEY_FIELD));\n        \r\n        List<BibEntry> entryList = new ArrayList<>();\n        \r\n        \r\n        if (entries == null) {\n            entryList.addAll(bibtex.getEntries());\n        } else {\n            entryList.addAll(entries);\n        }\n        Collections.sort(entryList, new FieldComparatorStack<>(comparators));\n        this.entries = entryList;\n    }\n","date":"2017-02-17 05:41:47","endLine":54,"groupId":"7703","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"OOCalcDatabase","params":"(BibDatabasebibtex@List<BibEntry>entries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/1e/7631fcc128c4b3b67d938bab35f697f03733e6.src","preCode":"    public OOCalcDatabase(BibDatabase bibtex, List<BibEntry> entries) {\n        \r\n        List<FieldComparator> comparators = new ArrayList<>();\n        comparators.add(new FieldComparator(FieldName.AUTHOR));\n        comparators.add(new FieldComparator(FieldName.YEAR));\n        comparators.add(new FieldComparator(BibEntry.KEY_FIELD));\n        \r\n        List<BibEntry> entryList = new ArrayList<>();\n        \r\n        \r\n        if (entries == null) {\n            entryList.addAll(bibtex.getEntries());\n        } else {\n            entryList.addAll(entries);\n        }\n        Collections.sort(entryList, new FieldComparatorStack<>(comparators));\n        this.entries = entryList;\n    }\n","realPath":"src/main/java/org/jabref/logic/exporter/OOCalcDatabase.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"}],"commitId":"ebbeb1d249edf7134abf92d24c2031ae54d19881","commitMessage":"@@@Merge branch 'net-sf-to-org-jabref'\n","date":"2017-02-17 05:41:47","modifiedFileCount":"1","status":"B","submitter":"Oliver Kopp"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":2,"curCode":"    public OpenDocumentRepresentation(BibDatabase database, List<BibEntry> entries) {\n        this.database = database;\n        \r\n        List<FieldComparator> comparators = new ArrayList<>();\n        comparators.add(new FieldComparator(StandardField.AUTHOR));\n        comparators.add(new FieldComparator(StandardField.YEAR));\n        comparators.add(new FieldComparator(InternalField.KEY_FIELD));\n        \r\n        List<BibEntry> entryList = new ArrayList<>();\n\n        \r\n        if (entries == null) {\n            entryList.addAll(database.getEntries());\n        } else {\n            entryList.addAll(entries);\n        }\n\n        Collections.sort(entryList, new FieldComparatorStack<>(comparators));\n        this.entries = entryList;\n    }\n","date":"2019-08-02 15:20:10","endLine":55,"groupId":"101062","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"OpenDocumentRepresentation","params":"(BibDatabasedatabase@List<BibEntry>entries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/3d/402e9714f110d13403f2aba6ecc8c3ebbf720b.src","preCode":"    public OpenDocumentRepresentation(BibDatabase database, List<BibEntry> entries) {\n        this.database = database;\n        \r\n        List<FieldComparator> comparators = new ArrayList<>();\n        comparators.add(new FieldComparator(FieldName.AUTHOR));\n        comparators.add(new FieldComparator(FieldName.YEAR));\n        comparators.add(new FieldComparator(BibEntry.KEY_FIELD));\n        \r\n        List<BibEntry> entryList = new ArrayList<>();\n\n        \r\n        if (entries == null) {\n            entryList.addAll(database.getEntries());\n        } else {\n            entryList.addAll(entries);\n        }\n\n        Collections.sort(entryList, new FieldComparatorStack<>(comparators));\n        this.entries = entryList;\n    }\n","realPath":"src/main/java/org/jabref/logic/exporter/OpenDocumentRepresentation.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2019-08-02 15:20:10","commitOrder":2,"curCode":"    public OOCalcDatabase(BibDatabase bibtex, List<BibEntry> entries) {\n        \r\n        List<FieldComparator> comparators = new ArrayList<>();\n        comparators.add(new FieldComparator(StandardField.AUTHOR));\n        comparators.add(new FieldComparator(StandardField.YEAR));\n        comparators.add(new FieldComparator(InternalField.KEY_FIELD));\n        \r\n        List<BibEntry> entryList = new ArrayList<>();\n        \r\n        \r\n        if (entries == null) {\n            entryList.addAll(bibtex.getEntries());\n        } else {\n            entryList.addAll(entries);\n        }\n        Collections.sort(entryList, new FieldComparatorStack<>(comparators));\n        this.entries = entryList;\n    }\n","date":"2019-08-02 15:20:10","endLine":52,"groupId":"101062","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"OOCalcDatabase","params":"(BibDatabasebibtex@List<BibEntry>entries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ee/84935708d34989e9321c206d5383cc157982c5.src","preCode":"    public OOCalcDatabase(BibDatabase bibtex, List<BibEntry> entries) {\n        \r\n        List<FieldComparator> comparators = new ArrayList<>();\n        comparators.add(new FieldComparator(FieldName.AUTHOR));\n        comparators.add(new FieldComparator(FieldName.YEAR));\n        comparators.add(new FieldComparator(BibEntry.KEY_FIELD));\n        \r\n        List<BibEntry> entryList = new ArrayList<>();\n        \r\n        \r\n        if (entries == null) {\n            entryList.addAll(bibtex.getEntries());\n        } else {\n            entryList.addAll(entries);\n        }\n        Collections.sort(entryList, new FieldComparatorStack<>(comparators));\n        this.entries = entryList;\n    }\n","realPath":"src/main/java/org/jabref/logic/exporter/OOCalcDatabase.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"4b39b78e4afcd6c36b385f5c46f1d9a4eac2e29b","commitMessage":"@@@Move to extended enums for fields and entry types (#5148)\n\n* Introduce interface for fields\n\n* Continue using fields interface instead of strings\n\n* Introduce OrFields class\n\n* Move FieldProperty\n\n* Convert entry types to extended enum\n\n* Start fixing build\n\n* Fix build\n\n* Start fixing tests\n\n* Everything compiles again\n\n* Make model tests pass\n\n* Fix most tests\n\n* Fix build\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix checkstyle issues\n\n* Fix more tests\n\n* Fix more tests\n\n* Disable test that fails on CI\n\n* Disable test that fails on CI\n","date":"2019-08-02 15:20:10","modifiedFileCount":"439","status":"M","submitter":"Tobias Diez"}]
