[{"authorTime":"2017-02-17 05:41:47","codes":[{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public void testIsMatch() {\n        BibEntry entry = new BibEntry();\n        entry.setType(BibtexEntryTypes.ARTICLE);\n        entry.setField(\"author\", \"asdf\");\n\n        assertFalse(new SearchQuery(\"qwer\", true, true).isMatch(entry));\n        assertTrue(new SearchQuery(\"asdf\", true, true).isMatch(entry));\n        assertTrue(new SearchQuery(\"author=asdf\", true, true).isMatch(entry));\n    }\n","date":"2017-02-17 05:41:47","endLine":125,"groupId":"5443","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIsMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/4a/49b7cc80c807fc2c72ef7e8fa922966d797560.src","preCode":"    public void testIsMatch() {\n        BibEntry entry = new BibEntry();\n        entry.setType(BibtexEntryTypes.ARTICLE);\n        entry.setField(\"author\", \"asdf\");\n\n        assertFalse(new SearchQuery(\"qwer\", true, true).isMatch(entry));\n        assertTrue(new SearchQuery(\"asdf\", true, true).isMatch(entry));\n        assertTrue(new SearchQuery(\"author=asdf\", true, true).isMatch(entry));\n    }\n","realPath":"src/test/java/org/jabref/logic/search/SearchQueryTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"},{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public void isMatchedForNormalAndFieldBasedSearchMixed() {\n        BibEntry entry = new BibEntry();\n        entry.setType(BibtexEntryTypes.ARTICLE);\n        entry.setField(\"author\", \"asdf\");\n        entry.setField(\"abstract\", \"text\");\n\n        assertTrue(new SearchQuery(\"text AND author=asdf\", true, true).isMatch(entry));\n\n    }\n","date":"2017-02-17 05:41:47","endLine":186,"groupId":"1096","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"isMatchedForNormalAndFieldBasedSearchMixed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/4a/49b7cc80c807fc2c72ef7e8fa922966d797560.src","preCode":"    public void isMatchedForNormalAndFieldBasedSearchMixed() {\n        BibEntry entry = new BibEntry();\n        entry.setType(BibtexEntryTypes.ARTICLE);\n        entry.setField(\"author\", \"asdf\");\n        entry.setField(\"abstract\", \"text\");\n\n        assertTrue(new SearchQuery(\"text AND author=asdf\", true, true).isMatch(entry));\n\n    }\n","realPath":"src/test/java/org/jabref/logic/search/SearchQueryTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"B"}],"commitId":"ebbeb1d249edf7134abf92d24c2031ae54d19881","commitMessage":"@@@Merge branch 'net-sf-to-org-jabref'\n","date":"2017-02-17 05:41:47","modifiedFileCount":"1","status":"B","submitter":"Oliver Kopp"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":2,"curCode":"    public void testIsMatch() {\n        BibEntry entry = new BibEntry();\n        entry.setType(StandardEntryType.Article);\n        entry.setField(StandardField.AUTHOR, \"asdf\");\n\n        assertFalse(new SearchQuery(\"qwer\", true, true).isMatch(entry));\n        assertTrue(new SearchQuery(\"asdf\", true, true).isMatch(entry));\n        assertTrue(new SearchQuery(\"author=asdf\", true, true).isMatch(entry));\n    }\n","date":"2019-08-02 15:20:10","endLine":128,"groupId":"5443","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIsMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/8e/030482fe75b8768bb5269531c77191fac7c154.src","preCode":"    public void testIsMatch() {\n        BibEntry entry = new BibEntry();\n        entry.setType(BibtexEntryTypes.ARTICLE);\n        entry.setField(\"author\", \"asdf\");\n\n        assertFalse(new SearchQuery(\"qwer\", true, true).isMatch(entry));\n        assertTrue(new SearchQuery(\"asdf\", true, true).isMatch(entry));\n        assertTrue(new SearchQuery(\"author=asdf\", true, true).isMatch(entry));\n    }\n","realPath":"src/test/java/org/jabref/logic/search/SearchQueryTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2019-08-02 15:20:10","commitOrder":2,"curCode":"    public void isMatchedForNormalAndFieldBasedSearchMixed() {\n        BibEntry entry = new BibEntry();\n        entry.setType(StandardEntryType.Article);\n        entry.setField(StandardField.AUTHOR, \"asdf\");\n        entry.setField(StandardField.ABSTRACT, \"text\");\n\n        assertTrue(new SearchQuery(\"text AND author=asdf\", true, true).isMatch(entry));\n    }\n","date":"2019-08-02 15:20:10","endLine":188,"groupId":"874","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"isMatchedForNormalAndFieldBasedSearchMixed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/8e/030482fe75b8768bb5269531c77191fac7c154.src","preCode":"    public void isMatchedForNormalAndFieldBasedSearchMixed() {\n        BibEntry entry = new BibEntry();\n        entry.setType(BibtexEntryTypes.ARTICLE);\n        entry.setField(\"author\", \"asdf\");\n        entry.setField(\"abstract\", \"text\");\n\n        assertTrue(new SearchQuery(\"text AND author=asdf\", true, true).isMatch(entry));\n    }\n","realPath":"src/test/java/org/jabref/logic/search/SearchQueryTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"4b39b78e4afcd6c36b385f5c46f1d9a4eac2e29b","commitMessage":"@@@Move to extended enums for fields and entry types (#5148)\n\n* Introduce interface for fields\n\n* Continue using fields interface instead of strings\n\n* Introduce OrFields class\n\n* Move FieldProperty\n\n* Convert entry types to extended enum\n\n* Start fixing build\n\n* Fix build\n\n* Start fixing tests\n\n* Everything compiles again\n\n* Make model tests pass\n\n* Fix most tests\n\n* Fix build\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix checkstyle issues\n\n* Fix more tests\n\n* Fix more tests\n\n* Disable test that fails on CI\n\n* Disable test that fails on CI\n","date":"2019-08-02 15:20:10","modifiedFileCount":"439","status":"M","submitter":"Tobias Diez"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2019-08-24 05:52:14","commitOrder":3,"curCode":"    public void testIsMatch() {\n        BibEntry entry = new BibEntry();\n        entry.setType(StandardEntryType.Article);\n        entry.setField(StandardField.AUTHOR, \"asdf\");\n\n        assertFalse(new SearchQuery(\"BiblatexEntryType\", true, true).isMatch(entry));\n        assertTrue(new SearchQuery(\"asdf\", true, true).isMatch(entry));\n        assertTrue(new SearchQuery(\"author=asdf\", true, true).isMatch(entry));\n    }\n","date":"2019-08-24 05:52:14","endLine":128,"groupId":"5443","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIsMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/d4/30eab0e3f56311f8cda1c9420e2cc4d78bb876.src","preCode":"    public void testIsMatch() {\n        BibEntry entry = new BibEntry();\n        entry.setType(StandardEntryType.Article);\n        entry.setField(StandardField.AUTHOR, \"asdf\");\n\n        assertFalse(new SearchQuery(\"qwer\", true, true).isMatch(entry));\n        assertTrue(new SearchQuery(\"asdf\", true, true).isMatch(entry));\n        assertTrue(new SearchQuery(\"author=asdf\", true, true).isMatch(entry));\n    }\n","realPath":"src/test/java/org/jabref/logic/search/SearchQueryTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2019-08-02 15:20:10","commitOrder":3,"curCode":"    public void isMatchedForNormalAndFieldBasedSearchMixed() {\n        BibEntry entry = new BibEntry();\n        entry.setType(StandardEntryType.Article);\n        entry.setField(StandardField.AUTHOR, \"asdf\");\n        entry.setField(StandardField.ABSTRACT, \"text\");\n\n        assertTrue(new SearchQuery(\"text AND author=asdf\", true, true).isMatch(entry));\n    }\n","date":"2019-08-02 15:20:10","endLine":188,"groupId":"874","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"isMatchedForNormalAndFieldBasedSearchMixed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/8e/030482fe75b8768bb5269531c77191fac7c154.src","preCode":"    public void isMatchedForNormalAndFieldBasedSearchMixed() {\n        BibEntry entry = new BibEntry();\n        entry.setType(StandardEntryType.Article);\n        entry.setField(StandardField.AUTHOR, \"asdf\");\n        entry.setField(StandardField.ABSTRACT, \"text\");\n\n        assertTrue(new SearchQuery(\"text AND author=asdf\", true, true).isMatch(entry));\n    }\n","realPath":"src/test/java/org/jabref/logic/search/SearchQueryTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"N"}],"commitId":"bbf3ab475e1300715cab72620b2c7c05dcce13bf","commitMessage":"@@@Refactor different Entry types (#5203)\n\n* fix: IEEETRANBSTCTL belongs to IEEE types not standard BibTeX types\n\n* refactor: reintroduce standard entry type\n","date":"2019-08-24 05:52:14","modifiedFileCount":"129","status":"M","submitter":"Stefan Kolb"},{"authorTime":"2021-07-15 03:49:30","codes":[{"authorDate":"2021-07-15 03:49:30","commitOrder":4,"curCode":"    public void testIsMatch() {\n        BibEntry entry = new BibEntry();\n        entry.setType(StandardEntryType.Article);\n        entry.setField(StandardField.AUTHOR, \"asdf\");\n\n        assertFalse(new SearchQuery(\"BiblatexEntryType\", EnumSet.of(SearchRules.SearchFlags.CASE_SENSITIVE, SearchRules.SearchFlags.REGULAR_EXPRESSION)).isMatch(entry));\n        assertTrue(new SearchQuery(\"asdf\", EnumSet.of(SearchRules.SearchFlags.CASE_SENSITIVE, SearchRules.SearchFlags.REGULAR_EXPRESSION)).isMatch(entry));\n        assertTrue(new SearchQuery(\"author=asdf\", EnumSet.of(SearchRules.SearchFlags.CASE_SENSITIVE, SearchRules.SearchFlags.REGULAR_EXPRESSION)).isMatch(entry));\n    }\n","date":"2021-07-15 03:49:30","endLine":131,"groupId":"10385","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testIsMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/4b/f01fadb736bf0e1f087ebdea5af6679b657180.src","preCode":"    public void testIsMatch() {\n        BibEntry entry = new BibEntry();\n        entry.setType(StandardEntryType.Article);\n        entry.setField(StandardField.AUTHOR, \"asdf\");\n\n        assertFalse(new SearchQuery(\"BiblatexEntryType\", true, true).isMatch(entry));\n        assertTrue(new SearchQuery(\"asdf\", true, true).isMatch(entry));\n        assertTrue(new SearchQuery(\"author=asdf\", true, true).isMatch(entry));\n    }\n","realPath":"src/test/java/org/jabref/logic/search/SearchQueryTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2021-07-15 03:49:30","commitOrder":4,"curCode":"    public void isMatchedForNormalAndFieldBasedSearchMixed() {\n        BibEntry entry = new BibEntry();\n        entry.setType(StandardEntryType.Article);\n        entry.setField(StandardField.AUTHOR, \"asdf\");\n        entry.setField(StandardField.ABSTRACT, \"text\");\n\n        assertTrue(new SearchQuery(\"text AND author=asdf\", EnumSet.of(SearchRules.SearchFlags.CASE_SENSITIVE, SearchRules.SearchFlags.REGULAR_EXPRESSION)).isMatch(entry));\n    }\n","date":"2021-07-15 03:49:30","endLine":191,"groupId":"10385","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"isMatchedForNormalAndFieldBasedSearchMixed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/4b/f01fadb736bf0e1f087ebdea5af6679b657180.src","preCode":"    public void isMatchedForNormalAndFieldBasedSearchMixed() {\n        BibEntry entry = new BibEntry();\n        entry.setType(StandardEntryType.Article);\n        entry.setField(StandardField.AUTHOR, \"asdf\");\n        entry.setField(StandardField.ABSTRACT, \"text\");\n\n        assertTrue(new SearchQuery(\"text AND author=asdf\", true, true).isMatch(entry));\n    }\n","realPath":"src/test/java/org/jabref/logic/search/SearchQueryTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"}],"commitId":"ddce5735b09cfec22ef55d15431582f19cb54208","commitMessage":"@@@Search in PDF Files (#2838)\n\nCo-authored-by: braunch <braunch.dev@gmail.com>\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>\nCo-authored-by: Benedikt Tutzer <btut@users.noreply.github.com>\nCo-authored-by: Carl Christian Snethlage <50491877+calixtus@users.noreply.github.com>\nCo-authored-by: Christoph <siedlerkiller@gmail.com>","date":"2021-07-15 03:49:30","modifiedFileCount":"39","status":"M","submitter":"Linus Dietz"}]
