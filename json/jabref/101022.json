[{"authorTime":"2017-02-17 05:41:47","codes":[{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    private void parseBookArticle(PubmedBookArticle currentArticle, List<BibEntry> bibItems) {\n        Map<String, String> fields = new HashMap<>();\n        if (currentArticle.getBookDocument() != null) {\n            BookDocument bookDocument = currentArticle.getBookDocument();\n            fields.put(FieldName.PMID, bookDocument.getPMID().getContent());\n            if (bookDocument.getDateRevised() != null) {\n                DateRevised dateRevised = bookDocument.getDateRevised();\n                addDateRevised(fields, dateRevised);\n            }\n            if (bookDocument.getAbstract() != null) {\n                Abstract abs = bookDocument.getAbstract();\n                addAbstract(fields, abs);\n            }\n            if (bookDocument.getPagination() != null) {\n                Pagination pagination = bookDocument.getPagination();\n                addPagination(fields, pagination);\n            }\n            if (bookDocument.getSections() != null) {\n                ArrayList<String> result = new ArrayList<>();\n                Sections sections = bookDocument.getSections();\n                for (Section section : sections.getSection()) {\n                    for (Serializable content : section.getSectionTitle().getContent()) {\n                        if (content instanceof String) {\n                            result.add((String) content);\n                        }\n                    }\n                }\n                fields.put(\"sections\", join(result, \"; \"));\n            }\n            if (bookDocument.getKeywordList() != null) {\n                addKeyWords(fields, bookDocument.getKeywordList());\n            }\n            if (bookDocument.getContributionDate() != null) {\n                addContributionDate(fields, bookDocument.getContributionDate());\n            }\n            if (bookDocument.getPublicationType() != null) {\n                List<String> result = new ArrayList<>();\n                for (PublicationType type : bookDocument.getPublicationType()) {\n                    if (type.getContent() != null) {\n                        result.add(type.getContent());\n                    }\n                }\n                fields.put(\"pubtype\", join(result, \", \"));\n            }\n            if (bookDocument.getArticleTitle() != null) {\n                ArticleTitle articleTitle = bookDocument.getArticleTitle();\n                ArrayList<String> titles = new ArrayList<>();\n                for (Serializable content : articleTitle.getContent()) {\n                    if (content instanceof String) {\n                        titles.add((String) content);\n                    }\n                }\n                fields.put(\"article\", join(titles, \", \"));\n            }\n            if (bookDocument.getBook() != null) {\n                addBookInformation(fields, bookDocument.getBook());\n            }\n        }\n\n        if (currentArticle.getPubmedBookData() != null) {\n            PubmedBookData bookData = currentArticle.getPubmedBookData();\n            putIfValueNotNull(fields, \"pubstatus\", bookData.getPublicationStatus());\n        }\n\n        BibEntry entry = new BibEntry(\"article\");\n        entry.setField(fields);\n\n        bibItems.add(entry);\n    }\n","date":"2017-02-17 05:41:47","endLine":256,"groupId":"6221","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"parseBookArticle","params":"(PubmedBookArticlecurrentArticle@List<BibEntry>bibItems)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/79/0f01e56b608310b8116596c2db718776a160d9.src","preCode":"    private void parseBookArticle(PubmedBookArticle currentArticle, List<BibEntry> bibItems) {\n        Map<String, String> fields = new HashMap<>();\n        if (currentArticle.getBookDocument() != null) {\n            BookDocument bookDocument = currentArticle.getBookDocument();\n            fields.put(FieldName.PMID, bookDocument.getPMID().getContent());\n            if (bookDocument.getDateRevised() != null) {\n                DateRevised dateRevised = bookDocument.getDateRevised();\n                addDateRevised(fields, dateRevised);\n            }\n            if (bookDocument.getAbstract() != null) {\n                Abstract abs = bookDocument.getAbstract();\n                addAbstract(fields, abs);\n            }\n            if (bookDocument.getPagination() != null) {\n                Pagination pagination = bookDocument.getPagination();\n                addPagination(fields, pagination);\n            }\n            if (bookDocument.getSections() != null) {\n                ArrayList<String> result = new ArrayList<>();\n                Sections sections = bookDocument.getSections();\n                for (Section section : sections.getSection()) {\n                    for (Serializable content : section.getSectionTitle().getContent()) {\n                        if (content instanceof String) {\n                            result.add((String) content);\n                        }\n                    }\n                }\n                fields.put(\"sections\", join(result, \"; \"));\n            }\n            if (bookDocument.getKeywordList() != null) {\n                addKeyWords(fields, bookDocument.getKeywordList());\n            }\n            if (bookDocument.getContributionDate() != null) {\n                addContributionDate(fields, bookDocument.getContributionDate());\n            }\n            if (bookDocument.getPublicationType() != null) {\n                List<String> result = new ArrayList<>();\n                for (PublicationType type : bookDocument.getPublicationType()) {\n                    if (type.getContent() != null) {\n                        result.add(type.getContent());\n                    }\n                }\n                fields.put(\"pubtype\", join(result, \", \"));\n            }\n            if (bookDocument.getArticleTitle() != null) {\n                ArticleTitle articleTitle = bookDocument.getArticleTitle();\n                ArrayList<String> titles = new ArrayList<>();\n                for (Serializable content : articleTitle.getContent()) {\n                    if (content instanceof String) {\n                        titles.add((String) content);\n                    }\n                }\n                fields.put(\"article\", join(titles, \", \"));\n            }\n            if (bookDocument.getBook() != null) {\n                addBookInformation(fields, bookDocument.getBook());\n            }\n        }\n\n        if (currentArticle.getPubmedBookData() != null) {\n            PubmedBookData bookData = currentArticle.getPubmedBookData();\n            putIfValueNotNull(fields, \"pubstatus\", bookData.getPublicationStatus());\n        }\n\n        BibEntry entry = new BibEntry(\"article\");\n        entry.setField(fields);\n\n        bibItems.add(entry);\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fileformat/MedlineImporter.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"B"},{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    private void addChemicals(Map<String, String> fields, List<Chemical> chemicals) {\n        List<String> chemicalNames = new ArrayList<>();\n        for (Chemical chemical : chemicals) {\n            if (chemical != null) {\n                chemicalNames.add(chemical.getNameOfSubstance().getContent());\n            }\n        }\n        fields.put(\"chemicals\", join(chemicalNames, \", \"));\n    }\n","date":"2017-02-17 05:41:47","endLine":534,"groupId":"6966","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addChemicals","params":"(Map<String@String>fields@List<Chemical>chemicals)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/79/0f01e56b608310b8116596c2db718776a160d9.src","preCode":"    private void addChemicals(Map<String, String> fields, List<Chemical> chemicals) {\n        List<String> chemicalNames = new ArrayList<>();\n        for (Chemical chemical : chemicals) {\n            if (chemical != null) {\n                chemicalNames.add(chemical.getNameOfSubstance().getContent());\n            }\n        }\n        fields.put(\"chemicals\", join(chemicalNames, \", \"));\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fileformat/MedlineImporter.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":526,"status":"B"}],"commitId":"ebbeb1d249edf7134abf92d24c2031ae54d19881","commitMessage":"@@@Merge branch 'net-sf-to-org-jabref'\n","date":"2017-02-17 05:41:47","modifiedFileCount":"1","status":"B","submitter":"Oliver Kopp"},{"authorTime":"2017-02-17 05:41:47","codes":[{"authorDate":"2018-12-29 06:39:28","commitOrder":2,"curCode":"    private void parseBookArticle(PubmedBookArticle currentArticle, List<BibEntry> bibItems) {\n        Map<String, String> fields = new HashMap<>();\n        if (currentArticle.getBookDocument() != null) {\n            BookDocument bookDocument = currentArticle.getBookDocument();\n            fields.put(FieldName.PMID, bookDocument.getPMID().getContent());\n            if (bookDocument.getDateRevised() != null) {\n                DateRevised dateRevised = bookDocument.getDateRevised();\n                addDateRevised(fields, dateRevised);\n            }\n            if (bookDocument.getAbstract() != null) {\n                Abstract abs = bookDocument.getAbstract();\n                addAbstract(fields, abs);\n            }\n            if (bookDocument.getPagination() != null) {\n                Pagination pagination = bookDocument.getPagination();\n                addPagination(fields, pagination);\n            }\n            if (bookDocument.getSections() != null) {\n                ArrayList<String> result = new ArrayList<>();\n                Sections sections = bookDocument.getSections();\n                for (Section section : sections.getSection()) {\n                    for (Serializable content : section.getSectionTitle().getContent()) {\n                        if (content instanceof String) {\n                            result.add((String) content);\n                        }\n                    }\n                }\n                fields.put(\"sections\", join(result, \"; \"));\n            }\n            if (bookDocument.getKeywordList() != null) {\n                addKeyWords(fields, bookDocument.getKeywordList());\n            }\n            if (bookDocument.getContributionDate() != null) {\n                addContributionDate(fields, bookDocument.getContributionDate());\n            }\n            if (bookDocument.getPublicationType() != null) {\n                List<String> result = new ArrayList<>();\n                for (PublicationType type : bookDocument.getPublicationType()) {\n                    if (type.getContent() != null) {\n                        result.add(type.getContent());\n                    }\n                }\n                fields.put(\"pubtype\", join(result, \", \"));\n            }\n            if (bookDocument.getArticleTitle() != null) {\n                ArticleTitle articleTitle = bookDocument.getArticleTitle();\n                ArrayList<String> titles = new ArrayList<>();\n                for (Serializable content : articleTitle.getContent()) {\n                    if (content instanceof String) {\n                        titles.add((String) content);\n                    }\n                }\n                fields.put(\"article\", join(titles, \", \"));\n            }\n            if (bookDocument.getBook() != null) {\n                addBookInformation(fields, bookDocument.getBook());\n            }\n        }\n\n        if (currentArticle.getPubmedBookData() != null) {\n            PubmedBookData bookData = currentArticle.getPubmedBookData();\n            putIfValueNotNull(fields, \"pubstatus\", bookData.getPublicationStatus());\n        }\n\n        BibEntry entry = new BibEntry(BibtexEntryTypes.ARTICLE);\n        entry.setField(fields);\n\n        bibItems.add(entry);\n    }\n","date":"2018-12-29 06:39:28","endLine":270,"groupId":"6221","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"parseBookArticle","params":"(PubmedBookArticlecurrentArticle@List<BibEntry>bibItems)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/93/4219824cd4539f6297c0144997df6cdeeaaf8b.src","preCode":"    private void parseBookArticle(PubmedBookArticle currentArticle, List<BibEntry> bibItems) {\n        Map<String, String> fields = new HashMap<>();\n        if (currentArticle.getBookDocument() != null) {\n            BookDocument bookDocument = currentArticle.getBookDocument();\n            fields.put(FieldName.PMID, bookDocument.getPMID().getContent());\n            if (bookDocument.getDateRevised() != null) {\n                DateRevised dateRevised = bookDocument.getDateRevised();\n                addDateRevised(fields, dateRevised);\n            }\n            if (bookDocument.getAbstract() != null) {\n                Abstract abs = bookDocument.getAbstract();\n                addAbstract(fields, abs);\n            }\n            if (bookDocument.getPagination() != null) {\n                Pagination pagination = bookDocument.getPagination();\n                addPagination(fields, pagination);\n            }\n            if (bookDocument.getSections() != null) {\n                ArrayList<String> result = new ArrayList<>();\n                Sections sections = bookDocument.getSections();\n                for (Section section : sections.getSection()) {\n                    for (Serializable content : section.getSectionTitle().getContent()) {\n                        if (content instanceof String) {\n                            result.add((String) content);\n                        }\n                    }\n                }\n                fields.put(\"sections\", join(result, \"; \"));\n            }\n            if (bookDocument.getKeywordList() != null) {\n                addKeyWords(fields, bookDocument.getKeywordList());\n            }\n            if (bookDocument.getContributionDate() != null) {\n                addContributionDate(fields, bookDocument.getContributionDate());\n            }\n            if (bookDocument.getPublicationType() != null) {\n                List<String> result = new ArrayList<>();\n                for (PublicationType type : bookDocument.getPublicationType()) {\n                    if (type.getContent() != null) {\n                        result.add(type.getContent());\n                    }\n                }\n                fields.put(\"pubtype\", join(result, \", \"));\n            }\n            if (bookDocument.getArticleTitle() != null) {\n                ArticleTitle articleTitle = bookDocument.getArticleTitle();\n                ArrayList<String> titles = new ArrayList<>();\n                for (Serializable content : articleTitle.getContent()) {\n                    if (content instanceof String) {\n                        titles.add((String) content);\n                    }\n                }\n                fields.put(\"article\", join(titles, \", \"));\n            }\n            if (bookDocument.getBook() != null) {\n                addBookInformation(fields, bookDocument.getBook());\n            }\n        }\n\n        if (currentArticle.getPubmedBookData() != null) {\n            PubmedBookData bookData = currentArticle.getPubmedBookData();\n            putIfValueNotNull(fields, \"pubstatus\", bookData.getPublicationStatus());\n        }\n\n        BibEntry entry = new BibEntry(\"article\");\n        entry.setField(fields);\n\n        bibItems.add(entry);\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fileformat/MedlineImporter.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"},{"authorDate":"2017-02-17 05:41:47","commitOrder":2,"curCode":"    private void addChemicals(Map<String, String> fields, List<Chemical> chemicals) {\n        List<String> chemicalNames = new ArrayList<>();\n        for (Chemical chemical : chemicals) {\n            if (chemical != null) {\n                chemicalNames.add(chemical.getNameOfSubstance().getContent());\n            }\n        }\n        fields.put(\"chemicals\", join(chemicalNames, \", \"));\n    }\n","date":"2017-02-17 05:41:47","endLine":534,"groupId":"6966","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addChemicals","params":"(Map<String@String>fields@List<Chemical>chemicals)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/79/0f01e56b608310b8116596c2db718776a160d9.src","preCode":"    private void addChemicals(Map<String, String> fields, List<Chemical> chemicals) {\n        List<String> chemicalNames = new ArrayList<>();\n        for (Chemical chemical : chemicals) {\n            if (chemical != null) {\n                chemicalNames.add(chemical.getNameOfSubstance().getContent());\n            }\n        }\n        fields.put(\"chemicals\", join(chemicalNames, \", \"));\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fileformat/MedlineImporter.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":526,"status":"N"}],"commitId":"cd1e795e91a0f36ea33386c47f06e31e7f812481","commitMessage":"@@@Refactor BibEntry deprecated method (#4554)\n\n* Refactor BibEntry deprecated method\n\n* Fixed error\n\n* More on checkstyle fixing\n\n* Fixed checkstyle issues\n\n* Added custom entrytype for types not registered in the enumerator.\n\n* Added getTypeOrDefault method refactor code to use it and fix NPE problem\n\n* Fixing checkstyle rules\n\n* More on checkstyle\n\n* More on getType getTypeOrDefault replacement\n\n* Revert Article EntryType into Electronic\n\n* Added break line between different packages\n\n* Refactor BibtextEntryTypes.getTypeOrDefault method\n\n* Removed unused import\n\n* Removed extra new line.  checkstyle error fixing\n","date":"2018-12-29 06:39:28","modifiedFileCount":"36","status":"M","submitter":"Bitor Tonixa Biriato Balen?a"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":3,"curCode":"    private void parseBookArticle(PubmedBookArticle currentArticle, List<BibEntry> bibItems) {\n        Map<Field, String> fields = new HashMap<>();\n        if (currentArticle.getBookDocument() != null) {\n            BookDocument bookDocument = currentArticle.getBookDocument();\n            fields.put(StandardField.PMID, bookDocument.getPMID().getContent());\n            if (bookDocument.getDateRevised() != null) {\n                DateRevised dateRevised = bookDocument.getDateRevised();\n                addDateRevised(fields, dateRevised);\n            }\n            if (bookDocument.getAbstract() != null) {\n                Abstract abs = bookDocument.getAbstract();\n                addAbstract(fields, abs);\n            }\n            if (bookDocument.getPagination() != null) {\n                Pagination pagination = bookDocument.getPagination();\n                addPagination(fields, pagination);\n            }\n            if (bookDocument.getSections() != null) {\n                ArrayList<String> result = new ArrayList<>();\n                Sections sections = bookDocument.getSections();\n                for (Section section : sections.getSection()) {\n                    for (Serializable content : section.getSectionTitle().getContent()) {\n                        if (content instanceof String) {\n                            result.add((String) content);\n                        }\n                    }\n                }\n                fields.put(new UnknownField(\"sections\"), join(result, \"; \"));\n            }\n            if (bookDocument.getKeywordList() != null) {\n                addKeyWords(fields, bookDocument.getKeywordList());\n            }\n            if (bookDocument.getContributionDate() != null) {\n                addContributionDate(fields, bookDocument.getContributionDate());\n            }\n            if (bookDocument.getPublicationType() != null) {\n                List<String> result = new ArrayList<>();\n                for (PublicationType type : bookDocument.getPublicationType()) {\n                    if (type.getContent() != null) {\n                        result.add(type.getContent());\n                    }\n                }\n                fields.put(new UnknownField(\"pubtype\"), join(result, \", \"));\n            }\n            if (bookDocument.getArticleTitle() != null) {\n                ArticleTitle articleTitle = bookDocument.getArticleTitle();\n                ArrayList<String> titles = new ArrayList<>();\n                for (Serializable content : articleTitle.getContent()) {\n                    if (content instanceof String) {\n                        titles.add((String) content);\n                    }\n                }\n                fields.put(new UnknownField(\"article\"), join(titles, \", \"));\n            }\n            if (bookDocument.getBook() != null) {\n                addBookInformation(fields, bookDocument.getBook());\n            }\n        }\n\n        if (currentArticle.getPubmedBookData() != null) {\n            PubmedBookData bookData = currentArticle.getPubmedBookData();\n            putIfValueNotNull(fields, StandardField.PUBSTATE, bookData.getPublicationStatus());\n        }\n\n        BibEntry entry = new BibEntry(StandardEntryType.Article);\n        entry.setField(fields);\n\n        bibItems.add(entry);\n    }\n","date":"2019-08-02 15:20:10","endLine":274,"groupId":"101022","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"parseBookArticle","params":"(PubmedBookArticlecurrentArticle@List<BibEntry>bibItems)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/59/602c2bf23ba979592bba0d6915025de539bc58.src","preCode":"    private void parseBookArticle(PubmedBookArticle currentArticle, List<BibEntry> bibItems) {\n        Map<String, String> fields = new HashMap<>();\n        if (currentArticle.getBookDocument() != null) {\n            BookDocument bookDocument = currentArticle.getBookDocument();\n            fields.put(FieldName.PMID, bookDocument.getPMID().getContent());\n            if (bookDocument.getDateRevised() != null) {\n                DateRevised dateRevised = bookDocument.getDateRevised();\n                addDateRevised(fields, dateRevised);\n            }\n            if (bookDocument.getAbstract() != null) {\n                Abstract abs = bookDocument.getAbstract();\n                addAbstract(fields, abs);\n            }\n            if (bookDocument.getPagination() != null) {\n                Pagination pagination = bookDocument.getPagination();\n                addPagination(fields, pagination);\n            }\n            if (bookDocument.getSections() != null) {\n                ArrayList<String> result = new ArrayList<>();\n                Sections sections = bookDocument.getSections();\n                for (Section section : sections.getSection()) {\n                    for (Serializable content : section.getSectionTitle().getContent()) {\n                        if (content instanceof String) {\n                            result.add((String) content);\n                        }\n                    }\n                }\n                fields.put(\"sections\", join(result, \"; \"));\n            }\n            if (bookDocument.getKeywordList() != null) {\n                addKeyWords(fields, bookDocument.getKeywordList());\n            }\n            if (bookDocument.getContributionDate() != null) {\n                addContributionDate(fields, bookDocument.getContributionDate());\n            }\n            if (bookDocument.getPublicationType() != null) {\n                List<String> result = new ArrayList<>();\n                for (PublicationType type : bookDocument.getPublicationType()) {\n                    if (type.getContent() != null) {\n                        result.add(type.getContent());\n                    }\n                }\n                fields.put(\"pubtype\", join(result, \", \"));\n            }\n            if (bookDocument.getArticleTitle() != null) {\n                ArticleTitle articleTitle = bookDocument.getArticleTitle();\n                ArrayList<String> titles = new ArrayList<>();\n                for (Serializable content : articleTitle.getContent()) {\n                    if (content instanceof String) {\n                        titles.add((String) content);\n                    }\n                }\n                fields.put(\"article\", join(titles, \", \"));\n            }\n            if (bookDocument.getBook() != null) {\n                addBookInformation(fields, bookDocument.getBook());\n            }\n        }\n\n        if (currentArticle.getPubmedBookData() != null) {\n            PubmedBookData bookData = currentArticle.getPubmedBookData();\n            putIfValueNotNull(fields, \"pubstatus\", bookData.getPublicationStatus());\n        }\n\n        BibEntry entry = new BibEntry(BibtexEntryTypes.ARTICLE);\n        entry.setField(fields);\n\n        bibItems.add(entry);\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fileformat/MedlineImporter.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"},{"authorDate":"2019-08-02 15:20:10","commitOrder":3,"curCode":"    private void addChemicals(Map<Field, String> fields, List<Chemical> chemicals) {\n        List<String> chemicalNames = new ArrayList<>();\n        for (Chemical chemical : chemicals) {\n            if (chemical != null) {\n                chemicalNames.add(chemical.getNameOfSubstance().getContent());\n            }\n        }\n        fields.put(new UnknownField(\"chemicals\"), join(chemicalNames, \", \"));\n    }\n","date":"2019-08-02 15:20:10","endLine":553,"groupId":"101022","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"addChemicals","params":"(Map<Field@String>fields@List<Chemical>chemicals)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/59/602c2bf23ba979592bba0d6915025de539bc58.src","preCode":"    private void addChemicals(Map<String, String> fields, List<Chemical> chemicals) {\n        List<String> chemicalNames = new ArrayList<>();\n        for (Chemical chemical : chemicals) {\n            if (chemical != null) {\n                chemicalNames.add(chemical.getNameOfSubstance().getContent());\n            }\n        }\n        fields.put(\"chemicals\", join(chemicalNames, \", \"));\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fileformat/MedlineImporter.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"M"}],"commitId":"4b39b78e4afcd6c36b385f5c46f1d9a4eac2e29b","commitMessage":"@@@Move to extended enums for fields and entry types (#5148)\n\n* Introduce interface for fields\n\n* Continue using fields interface instead of strings\n\n* Introduce OrFields class\n\n* Move FieldProperty\n\n* Convert entry types to extended enum\n\n* Start fixing build\n\n* Fix build\n\n* Start fixing tests\n\n* Everything compiles again\n\n* Make model tests pass\n\n* Fix most tests\n\n* Fix build\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix checkstyle issues\n\n* Fix more tests\n\n* Fix more tests\n\n* Disable test that fails on CI\n\n* Disable test that fails on CI\n","date":"2019-08-02 15:20:10","modifiedFileCount":"439","status":"M","submitter":"Tobias Diez"}]
