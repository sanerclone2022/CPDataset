[{"authorTime":"2017-02-17 05:41:47","codes":[{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public void sortChildrenSortsInFirstLevel() {\n        TreeNodeMock root = new TreeNodeMock();\n        TreeNodeMock child1 = new TreeNodeMock(\"a\");\n        TreeNodeMock child2 = new TreeNodeMock(\"b\");\n        TreeNodeMock child3 = new TreeNodeMock(\"c\");\n        root.addChild(child2);\n        root.addChild(child3);\n        root.addChild(child1);\n\n        root.sortChildren((o1, o2) -> o1.getName().compareToIgnoreCase(o2.getName()), false);\n        assertEquals(Arrays.asList(child1, child2, child3), root.getChildren());\n    }\n","date":"2017-02-17 05:41:47","endLine":588,"groupId":"10962","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"sortChildrenSortsInFirstLevel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fb/7a336a18f1b6f83b67c1bb2d93aa0b2e58ebdc.src","preCode":"    public void sortChildrenSortsInFirstLevel() {\n        TreeNodeMock root = new TreeNodeMock();\n        TreeNodeMock child1 = new TreeNodeMock(\"a\");\n        TreeNodeMock child2 = new TreeNodeMock(\"b\");\n        TreeNodeMock child3 = new TreeNodeMock(\"c\");\n        root.addChild(child2);\n        root.addChild(child3);\n        root.addChild(child1);\n\n        root.sortChildren((o1, o2) -> o1.getName().compareToIgnoreCase(o2.getName()), false);\n        assertEquals(Arrays.asList(child1, child2, child3), root.getChildren());\n    }\n","realPath":"src/test/java/org/jabref/model/TreeNodeTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":577,"status":"B"},{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public void sortChildrenRecursiveSortsInDeeperLevel() {\n        TreeNodeMock root = new TreeNodeMock();\n        TreeNodeMock node = getNodeInSimpleTree(root);\n        TreeNodeMock child1 = new TreeNodeMock(\"a\");\n        TreeNodeMock child2 = new TreeNodeMock(\"b\");\n        TreeNodeMock child3 = new TreeNodeMock(\"c\");\n        node.addChild(child2);\n        node.addChild(child3);\n        node.addChild(child1);\n\n        root.sortChildren((o1, o2) -> o1.getName().compareToIgnoreCase(o2.getName()), true);\n        assertEquals(Arrays.asList(child1, child2, child3), node.getChildren());\n    }\n","date":"2017-02-17 05:41:47","endLine":603,"groupId":"10963","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"sortChildrenRecursiveSortsInDeeperLevel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fb/7a336a18f1b6f83b67c1bb2d93aa0b2e58ebdc.src","preCode":"    public void sortChildrenRecursiveSortsInDeeperLevel() {\n        TreeNodeMock root = new TreeNodeMock();\n        TreeNodeMock node = getNodeInSimpleTree(root);\n        TreeNodeMock child1 = new TreeNodeMock(\"a\");\n        TreeNodeMock child2 = new TreeNodeMock(\"b\");\n        TreeNodeMock child3 = new TreeNodeMock(\"c\");\n        node.addChild(child2);\n        node.addChild(child3);\n        node.addChild(child1);\n\n        root.sortChildren((o1, o2) -> o1.getName().compareToIgnoreCase(o2.getName()), true);\n        assertEquals(Arrays.asList(child1, child2, child3), node.getChildren());\n    }\n","realPath":"src/test/java/org/jabref/model/TreeNodeTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"B"}],"commitId":"ebbeb1d249edf7134abf92d24c2031ae54d19881","commitMessage":"@@@Merge branch 'net-sf-to-org-jabref'\n","date":"2017-02-17 05:41:47","modifiedFileCount":"1","status":"B","submitter":"Oliver Kopp"},{"authorTime":"2017-03-02 18:45:03","codes":[{"authorDate":"2017-03-02 18:45:03","commitOrder":2,"curCode":"    public void sortChildrenSortsInFirstLevel() {\n        TreeNodeTestData.TreeNodeMock root = new TreeNodeTestData.TreeNodeMock();\n        TreeNodeTestData.TreeNodeMock child1 = new TreeNodeTestData.TreeNodeMock(\"a\");\n        TreeNodeTestData.TreeNodeMock child2 = new TreeNodeTestData.TreeNodeMock(\"b\");\n        TreeNodeTestData.TreeNodeMock child3 = new TreeNodeTestData.TreeNodeMock(\"c\");\n        root.addChild(child2);\n        root.addChild(child3);\n        root.addChild(child1);\n\n        root.sortChildren((o1, o2) -> o1.getName().compareToIgnoreCase(o2.getName()), false);\n        assertEquals(Arrays.asList(child1, child2, child3), root.getChildren());\n    }\n","date":"2017-03-02 18:45:03","endLine":507,"groupId":"10837","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"sortChildrenSortsInFirstLevel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/84/1dfaeab296eb7521aa1f9f0c79723571d91292.src","preCode":"    public void sortChildrenSortsInFirstLevel() {\n        TreeNodeMock root = new TreeNodeMock();\n        TreeNodeMock child1 = new TreeNodeMock(\"a\");\n        TreeNodeMock child2 = new TreeNodeMock(\"b\");\n        TreeNodeMock child3 = new TreeNodeMock(\"c\");\n        root.addChild(child2);\n        root.addChild(child3);\n        root.addChild(child1);\n\n        root.sortChildren((o1, o2) -> o1.getName().compareToIgnoreCase(o2.getName()), false);\n        assertEquals(Arrays.asList(child1, child2, child3), root.getChildren());\n    }\n","realPath":"src/test/java/org/jabref/model/TreeNodeTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":496,"status":"M"},{"authorDate":"2017-03-02 18:45:03","commitOrder":2,"curCode":"    public void sortChildrenRecursiveSortsInDeeperLevel() {\n        TreeNodeTestData.TreeNodeMock root = new TreeNodeTestData.TreeNodeMock();\n        TreeNodeTestData.TreeNodeMock node = TreeNodeTestData.getNodeInSimpleTree(root);\n        TreeNodeTestData.TreeNodeMock child1 = new TreeNodeTestData.TreeNodeMock(\"a\");\n        TreeNodeTestData.TreeNodeMock child2 = new TreeNodeTestData.TreeNodeMock(\"b\");\n        TreeNodeTestData.TreeNodeMock child3 = new TreeNodeTestData.TreeNodeMock(\"c\");\n        node.addChild(child2);\n        node.addChild(child3);\n        node.addChild(child1);\n\n        root.sortChildren((o1, o2) -> o1.getName().compareToIgnoreCase(o2.getName()), true);\n        assertEquals(Arrays.asList(child1, child2, child3), node.getChildren());\n    }\n","date":"2017-03-02 18:45:03","endLine":522,"groupId":"10837","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"sortChildrenRecursiveSortsInDeeperLevel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/84/1dfaeab296eb7521aa1f9f0c79723571d91292.src","preCode":"    public void sortChildrenRecursiveSortsInDeeperLevel() {\n        TreeNodeMock root = new TreeNodeMock();\n        TreeNodeMock node = getNodeInSimpleTree(root);\n        TreeNodeMock child1 = new TreeNodeMock(\"a\");\n        TreeNodeMock child2 = new TreeNodeMock(\"b\");\n        TreeNodeMock child3 = new TreeNodeMock(\"c\");\n        node.addChild(child2);\n        node.addChild(child3);\n        node.addChild(child1);\n\n        root.sortChildren((o1, o2) -> o1.getName().compareToIgnoreCase(o2.getName()), true);\n        assertEquals(Arrays.asList(child1, child2, child3), node.getChildren());\n    }\n","realPath":"src/test/java/org/jabref/model/TreeNodeTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"M"}],"commitId":"48f5293dca7bf19a027e64ea6ea64cf0f2d3734a","commitMessage":"@@@Implement #1904: filter groups (#2588)\n\n","date":"2017-03-02 18:45:03","modifiedFileCount":"6","status":"M","submitter":"Tobias Diez"}]
