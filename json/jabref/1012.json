[{"authorTime":"2017-11-28 03:28:32","codes":[{"authorDate":"2017-11-28 03:28:32","commitOrder":1,"curCode":"    public void updateTimestampEnabled(){\n        final String timestampField = \"timestamp\";\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = true;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(\"Initial timestamp not set correctly\",\n                Optional.of(baseDate), bibEntry.getField(timestampField));\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(\"test\", \"some value\");\n\n        assertEquals(\"Timestamp not set correctly after entry changed\",\n                Optional.of(newDate), bibEntry.getField(timestampField));\n    }\n","date":"2017-11-28 03:28:32","endLine":66,"groupId":"13081","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"updateTimestampEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/6a/27c3949b5fffb2eef1a59cea59c3eb65eb94f1.src","preCode":"    public void updateTimestampEnabled(){\n        final String timestampField = \"timestamp\";\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = true;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(\"Initial timestamp not set correctly\",\n                Optional.of(baseDate), bibEntry.getField(timestampField));\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(\"test\", \"some value\");\n\n        assertEquals(\"Timestamp not set correctly after entry changed\",\n                Optional.of(newDate), bibEntry.getField(timestampField));\n    }\n","realPath":"src/test/java/org/jabref/gui/UpdateTimestampListenerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2017-11-28 03:28:32","commitOrder":1,"curCode":"    public void updateTimestampDisabled(){\n        final String timestampField = \"timestamp\";\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = false;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(\"Initial timestamp not set correctly\",\n                Optional.of(baseDate), bibEntry.getField(timestampField));\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(\"test\", \"some value\");\n\n        assertEquals(\"New timestamp set after entry changed even though updates were disabled\",\n                Optional.of(baseDate), bibEntry.getField(timestampField));\n    }\n","date":"2017-11-28 03:28:32","endLine":91,"groupId":"13081","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"updateTimestampDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/6a/27c3949b5fffb2eef1a59cea59c3eb65eb94f1.src","preCode":"    public void updateTimestampDisabled(){\n        final String timestampField = \"timestamp\";\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = false;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(\"Initial timestamp not set correctly\",\n                Optional.of(baseDate), bibEntry.getField(timestampField));\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(\"test\", \"some value\");\n\n        assertEquals(\"New timestamp set after entry changed even though updates were disabled\",\n                Optional.of(baseDate), bibEntry.getField(timestampField));\n    }\n","realPath":"src/test/java/org/jabref/gui/UpdateTimestampListenerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"}],"commitId":"42a959d1dfadf75ae0581d99046e31314f5c8607","commitMessage":"@@@Fix for issue 2810 (#3433)\n\n* Fix timestamps not being updated for changed entries\n\nThis is a fix for the issue #2810.\n\nThe functionality has been moved from the EntryEditor to the BasePanel\nclass so that it can listen for EntryChangedEvents on the whole\ndatabase instead of specific EntryEditor objects. This allows us to\nalso update the timestamps of entries that were changed by other\nsources (like cleanup operations).\n\nThe inner class UpdateTimestampListener is defined as \"public static\"\nso that it can be used in the test cases for the implemented\nfunctionality.\n\n* Add tests for UpdateTimestampListener\n\n* Move UpdateTimestampListenerTest to gui package\n\n* Move UpdateTimestampListener into separate class\n\n* Fix assertions for Optional values in UpdateTimestampListenerTest\n\n* Add blank lines in UpdateTimestampListenerTest\n\nThe blank lines should help differentiate between the constants that\nthe test cases share and the constant that is different in both test\ncases.\n\n* Move shared calls into setup in UpdateTimestampListenerTest\n\nThis only applies to shared calls that are not dependent on the used\nconstants. As these constants define the values used in each test. \nthey are kept in each test case to improve readability. This also\napplies to constants that have the same value in all tests.\n\n* Use camel case for constants in UpdateTimestampListenerTest\n\n* Add UpdateTimestampListenerTest to architecture test exceptions\n\nThis allows the added test cases to be dependent on JabRefPreferences\nwithout causing TestArchitectureTests#testsAreIndependent() to fail.\n\nThe exception is warranted as the tested functionality is dependent on\nJabRefPreferences and the test cases mock all calls to it.\n","date":"2017-11-28 03:28:32","modifiedFileCount":"2","status":"B","submitter":"tobous"},{"authorTime":"2018-02-12 00:05:54","codes":[{"authorDate":"2018-02-12 00:05:54","commitOrder":2,"curCode":"    public void updateTimestampEnabled() {\n        final String timestampField = \"timestamp\";\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = true;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(\"test\", \"some value\");\n\n        assertEquals(Optional.of(newDate), bibEntry.getField(timestampField), \"Timestamp not set correctly after entry changed\");\n    }\n","date":"2018-02-12 00:05:54","endLine":59,"groupId":"3718","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"updateTimestampEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/66/4b78590bd61e5f3b63aa970bef3d1d341c41c4.src","preCode":"    public void updateTimestampEnabled(){\n        final String timestampField = \"timestamp\";\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = true;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(\"Initial timestamp not set correctly\",\n                Optional.of(baseDate), bibEntry.getField(timestampField));\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(\"test\", \"some value\");\n\n        assertEquals(\"Timestamp not set correctly after entry changed\",\n                Optional.of(newDate), bibEntry.getField(timestampField));\n    }\n","realPath":"src/test/java/org/jabref/gui/UpdateTimestampListenerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2018-02-12 00:05:54","commitOrder":2,"curCode":"    public void updateTimestampDisabled() {\n        final String timestampField = \"timestamp\";\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = false;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(\"test\", \"some value\");\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"New timestamp set after entry changed even though updates were disabled\");\n    }\n","date":"2018-02-12 00:05:54","endLine":82,"groupId":"3718","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"updateTimestampDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/66/4b78590bd61e5f3b63aa970bef3d1d341c41c4.src","preCode":"    public void updateTimestampDisabled(){\n        final String timestampField = \"timestamp\";\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = false;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(\"Initial timestamp not set correctly\",\n                Optional.of(baseDate), bibEntry.getField(timestampField));\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(\"test\", \"some value\");\n\n        assertEquals(\"New timestamp set after entry changed even though updates were disabled\",\n                Optional.of(baseDate), bibEntry.getField(timestampField));\n    }\n","realPath":"src/test/java/org/jabref/gui/UpdateTimestampListenerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"1cef92447c4ae65ebe28d94cf9acf708861bb67b","commitMessage":"@@@Merge pull request #3711 from JabRef/junit5\n\nmigrate majority of tests to junit5","date":"2018-02-12 00:05:54","modifiedFileCount":"244","status":"M","submitter":"Oliver Kopp"},{"authorTime":"2018-08-16 15:17:32","codes":[{"authorDate":"2018-08-16 15:17:32","commitOrder":3,"curCode":"    void updateTimestampEnabled() {\n        final String timestampField = \"timestamp\";\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = true;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(\"test\", \"some value\");\n\n        assertEquals(Optional.of(newDate), bibEntry.getField(timestampField), \"Timestamp not set correctly after entry changed\");\n    }\n","date":"2018-08-16 15:17:32","endLine":59,"groupId":"3718","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"updateTimestampEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/09/9058f40f146e505195ca86b287642155bf310f.src","preCode":"    public void updateTimestampEnabled() {\n        final String timestampField = \"timestamp\";\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = true;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(\"test\", \"some value\");\n\n        assertEquals(Optional.of(newDate), bibEntry.getField(timestampField), \"Timestamp not set correctly after entry changed\");\n    }\n","realPath":"src/test/java/org/jabref/gui/UpdateTimestampListenerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2018-08-16 15:17:32","commitOrder":3,"curCode":"    void updateTimestampDisabled() {\n        final String timestampField = \"timestamp\";\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = false;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(\"test\", \"some value\");\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"New timestamp set after entry changed even though updates were disabled\");\n    }\n","date":"2018-08-16 15:17:32","endLine":82,"groupId":"3718","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"updateTimestampDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/09/9058f40f146e505195ca86b287642155bf310f.src","preCode":"    public void updateTimestampDisabled() {\n        final String timestampField = \"timestamp\";\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = false;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(\"test\", \"some value\");\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"New timestamp set after entry changed even though updates were disabled\");\n    }\n","realPath":"src/test/java/org/jabref/gui/UpdateTimestampListenerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"a880addc0b9a45ad4461cc46ed261ea7df9c812a","commitMessage":"@@@Fix for issue 3959: migrate all tests to JUnit 5 (#4260)\n\n* Update migrate from JUnit 4 to JUnit 5\n\n* Update migrate from JUnit 4 to JUnit 5\n\n* Trying to change git accounts on my laptop\n\n* Trying to change git accounts on my laptop\n\n* Trying to change git accounts on my laptop\n\n* Using static assert methods.\n\n* Migrate from JUnit 4 to JUnit 5\n\n*AuthorListParameterTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*XmpUtilWriterTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*XmpUtilReaderTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*SearchQueryHighlightObservableTest.java\n\n    -did not use MockitoExtension.class as its official version has not been released yet.\n\n* Migrate from JUnit 4 to JUnit 5\n\n*CitationEntryTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*RTFCharsTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ProtectedTermsLoaderTest.java\n\n    -When running tests.  outputs in command line are different. I don't know if this change is correct.\n\n* Trying to change to a new branch.\n\n* commit_test\n\n* delete my meaningless txt\n\n* Migrate from JUnit 4 to JUnit 5\n\n*AuthorAndToSemicolonReplacerTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*FileDialogConfigurationTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*IntegrityCheckTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ModsExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*AutoSetFileLinksUtilTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*MsBibExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*CsvExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*HtmlExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*HtmlExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*RenamePdfCleanupTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ProtectedTermsListTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*MoveFilesCleanupTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ImporterTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n    *ExporterTest.java\n\n* Try to trigger the Travis CI build.\n\n* Try to trigger the Travis CI build.\n\n* Migrate from JUnit 4 to JUnit 5\n\n* Try to migrate from JUnit 4 to JUnit 5\n    *BibTeXMLExporterTestFiles.java\n        *Test.  not finished\n\n* Roll back to earlier version.\n    *BibTeXMLExporterTestFiles.java\n    *CleanupWorkerTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n    *ImportFormatReaderIntegrationTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n    *MimeTypeDetectorTest.java\n\n* failed to modify CleanupWorkerTest\n\n* failed to modify cleanupWorkTest\n\n* change cleanupWorkerTest to initial\n\n* ***DatabaseTest***\nMigrate from JUnit 4 to JUnit 5\n    *DBMSProcessorTest.java\n        *Wait for the Travis CI\n\n* ***DatabaseTest***\nMigrate from JUnit 4 to JUnit 5\n    *DBMSProcessorTest.java\n        *Wait for the Travis CI\n\n* Migrate from JUnit 4 to JUnit 5\n    *BibTeXMLExporterTestFiles.java\n    *MSBibExportFormatTestFiles.java\n    *All the GUI tests\n\n* Migrate from JUnit 4 to JUnit 5\n    *CleanupWorkerTest.java\n\n    *It seems that worker doesn't work in cleanupRenamePdfRenamesRelativeFile() and cleanupRelativePathsConvertAbsoluteToRelativePath()\n\n* Migrate JUnit 4 to JUnit 5.\n    *AuthorListParameterTest.java\n        -Follow up tp the newest.\n\n* Migrate JUnit 4 to JUnit 5.\n    *CleanupWorkerTest.java\n        -Delete my sout.\n\n* Migrate JUnit 4 to JUnit 5.\n    *EntryTypesTest.java\n        -Just some method name changes.\n\n* Fix part of CleanupWorkerTest.\n    -cleanupRelativePathsConvertAbsoluteToRelativePath() test passed.\n    -The cleanupRenamePdfRenamesRelativeFile() test still failed.\n\n* Migrate and sync.\n    *CiteKeyBasedFileFinderTest.java\n\n* Migrate.\n    *FileUtilTest.java\nPartly migrate.\n    *ModsExportFormatTestFiles.java\n\n* Fix CleanupWorkerTest.java\n\n* Fix .travis.yml\n\n* Remove unnecessary @Rule.\n    *IntegrityCheckTest.java\n\n* AuxParserTest.java\n\n* BibtexParserTest.java\n\n* EntryComparatorTest.java\n\n* Migrate JUnit 4 to JUnit 5 -------by 1160300229\n\n* Migrate. Some tasks by my team members.\n    *LinkedFileViewModelTest.java\n    *RecursiveTreeItemTest.java\n    *UndoTest.java\n    *EntryComparatorTest.java\n    *MakeLabelWithDatabaseTest.java\n    *MakeLabelWithoutDatabaseTest.java\n    *CleanupUrlFormatterTest.java\n    *BibtexParserTest.java\n    *MedlinePlainImporterTest.java\n    *SilverPlatterImporterTest.java\n    *EntryLinkCheckerTest.java\n    *LocalizationKeyTest.java\n    *JabRefPreferencesTest.java\n\n* Fix 1160300302's error.\n\n* Remove unnecessary \"public\".\n    *AuxParserTest.java\n\n* fix architecture test by removing check for public make some classes default visibility level\n\n* Fix \"cannot find files\" problem in JUnit 4.\n\n* Migrate to JUnit 5.\n    *BibTeXMLExporterTestFiles.java\n    *ModsExportFormatTestFiles.java\n    *MSBibExportFormatTestFiles.java\n\n* Change the slash direction.\n    *BibTeXMLExporterTestFiles.java\n    *ModsExportFormatTestFiles.java\n    *MSBibExportFormatTestFiles.java\n\n* fix resolving of paths in msbibexporterpath update junit and correct resource dirs in gradle\n\n* Fix the path issue in\n    *BibTeXMLExporterTestFiles.java\n    *ModsExportFormatTestFiles.java\n\n* Disable the failing exporter tests and change the build.gradle\n\n* Fix the parent folder issue by make every path to their child once.\n    -You can see in the code. :)\n\n* Fix some minor issues.\n    -Use the NIO methods in MoveFilesCleanupTest.java\n\n    -Use toAbsolutePath() method in RenamePdfCleanupTest.java\n\n    -Rename \"tempFilename\" to \"tempFilePath\" in BibTeXMLExporterTestFiles.java\n\n* include main/java in resources as well convert legalcy file methods to nio\n","date":"2018-08-16 15:17:32","modifiedFileCount":"59","status":"M","submitter":"Yichen Sun"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":4,"curCode":"    void updateTimestampEnabled() {\n        final Field timestampField = InternalField.TIMESTAMP;\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = true;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(new UnknownField(\"test\"), \"some value\");\n\n        assertEquals(Optional.of(newDate), bibEntry.getField(timestampField), \"Timestamp not set correctly after entry changed\");\n    }\n","date":"2019-08-02 15:20:10","endLine":62,"groupId":"3718","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"updateTimestampEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/c8/a9e226acf093951a22cc5679c3353870545e8b.src","preCode":"    void updateTimestampEnabled() {\n        final String timestampField = \"timestamp\";\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = true;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(\"test\", \"some value\");\n\n        assertEquals(Optional.of(newDate), bibEntry.getField(timestampField), \"Timestamp not set correctly after entry changed\");\n    }\n","realPath":"src/test/java/org/jabref/gui/UpdateTimestampListenerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2019-08-02 15:20:10","commitOrder":4,"curCode":"    void updateTimestampDisabled() {\n        final Field timestampField = InternalField.TIMESTAMP;\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = false;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(new UnknownField(\"test\"), \"some value\");\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"New timestamp set after entry changed even though updates were disabled\");\n    }\n","date":"2019-08-02 15:20:10","endLine":85,"groupId":"3718","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"updateTimestampDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/c8/a9e226acf093951a22cc5679c3353870545e8b.src","preCode":"    void updateTimestampDisabled() {\n        final String timestampField = \"timestamp\";\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = false;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(\"test\", \"some value\");\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"New timestamp set after entry changed even though updates were disabled\");\n    }\n","realPath":"src/test/java/org/jabref/gui/UpdateTimestampListenerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"4b39b78e4afcd6c36b385f5c46f1d9a4eac2e29b","commitMessage":"@@@Move to extended enums for fields and entry types (#5148)\n\n* Introduce interface for fields\n\n* Continue using fields interface instead of strings\n\n* Introduce OrFields class\n\n* Move FieldProperty\n\n* Convert entry types to extended enum\n\n* Start fixing build\n\n* Fix build\n\n* Start fixing tests\n\n* Everything compiles again\n\n* Make model tests pass\n\n* Fix most tests\n\n* Fix build\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix checkstyle issues\n\n* Fix more tests\n\n* Fix more tests\n\n* Disable test that fails on CI\n\n* Disable test that fails on CI\n","date":"2019-08-02 15:20:10","modifiedFileCount":"439","status":"M","submitter":"Tobias Diez"},{"authorTime":"2020-04-22 20:30:40","codes":[{"authorDate":"2020-04-22 20:30:40","commitOrder":5,"curCode":"    void updateTimestampEnabled() {\n        final Field timestampField = StandardField.TIMESTAMP;\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = true;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(new UnknownField(\"test\"), \"some value\");\n\n        assertEquals(Optional.of(newDate), bibEntry.getField(timestampField), \"Timestamp not set correctly after entry changed\");\n    }\n","date":"2020-04-22 20:30:40","endLine":62,"groupId":"3718","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"updateTimestampEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/51/2beaf6c6a1f99acf194edf3311f7fbec712e45.src","preCode":"    void updateTimestampEnabled() {\n        final Field timestampField = InternalField.TIMESTAMP;\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = true;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(new UnknownField(\"test\"), \"some value\");\n\n        assertEquals(Optional.of(newDate), bibEntry.getField(timestampField), \"Timestamp not set correctly after entry changed\");\n    }\n","realPath":"src/test/java/org/jabref/gui/UpdateTimestampListenerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2020-04-22 20:30:40","commitOrder":5,"curCode":"    void updateTimestampDisabled() {\n        final Field timestampField = StandardField.TIMESTAMP;\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = false;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(new UnknownField(\"test\"), \"some value\");\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"New timestamp set after entry changed even though updates were disabled\");\n    }\n","date":"2020-04-22 20:30:40","endLine":85,"groupId":"3718","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"updateTimestampDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/51/2beaf6c6a1f99acf194edf3311f7fbec712e45.src","preCode":"    void updateTimestampDisabled() {\n        final Field timestampField = InternalField.TIMESTAMP;\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = false;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(new UnknownField(\"test\"), \"some value\");\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"New timestamp set after entry changed even though updates were disabled\");\n    }\n","realPath":"src/test/java/org/jabref/gui/UpdateTimestampListenerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"c7d77670154c1b09d8115013c8f3b4175906219e","commitMessage":"@@@Improve performance for loading files (#6332)\n\n* Improve performance for loading files\n\n- Performance improvements around groups\n- Remove detection of duplicate ID when inserting entries (it's not really possible to create two entries with the same except if you use `setId` manually)\n- Remove detection of duplicate bibtex keys when opening a file (the result was not used and we have a integrity check for it)\n- Use EnumMap instead of HashMap to cache fields as keywords (which is only used for Keyword and Groups fields anyway)\n- Fix bug where latex code was displayed in the maintable\n- Lazy init of source tab\n\n* Fix tests compilation\n\n* Include feedback","date":"2020-04-22 20:30:40","modifiedFileCount":"37","status":"M","submitter":"Tobias Diez"},{"authorTime":"2020-12-15 04:28:26","codes":[{"authorDate":"2020-12-15 04:28:26","commitOrder":6,"curCode":"    void updateTimestampEnabled() {\n        final Field timestampField = StandardField.TIMESTAMP;\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = true;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.shouldIncludeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(new UnknownField(\"test\"), \"some value\");\n\n        assertEquals(Optional.of(newDate), bibEntry.getField(timestampField), \"Timestamp not set correctly after entry changed\");\n    }\n","date":"2020-12-15 04:28:26","endLine":62,"groupId":"3718","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"updateTimestampEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/92/b0571fb6775aa70943aba82b08b835b2dde878.src","preCode":"    void updateTimestampEnabled() {\n        final Field timestampField = StandardField.TIMESTAMP;\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = true;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(new UnknownField(\"test\"), \"some value\");\n\n        assertEquals(Optional.of(newDate), bibEntry.getField(timestampField), \"Timestamp not set correctly after entry changed\");\n    }\n","realPath":"src/test/java/org/jabref/gui/UpdateTimestampListenerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2020-12-15 04:28:26","commitOrder":6,"curCode":"    void updateTimestampDisabled() {\n        final Field timestampField = StandardField.TIMESTAMP;\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = false;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.shouldIncludeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(new UnknownField(\"test\"), \"some value\");\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"New timestamp set after entry changed even though updates were disabled\");\n    }\n","date":"2020-12-15 04:28:26","endLine":85,"groupId":"3718","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"updateTimestampDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/92/b0571fb6775aa70943aba82b08b835b2dde878.src","preCode":"    void updateTimestampDisabled() {\n        final Field timestampField = StandardField.TIMESTAMP;\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = false;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.includeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(new UnknownField(\"test\"), \"some value\");\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"New timestamp set after entry changed even though updates were disabled\");\n    }\n","realPath":"src/test/java/org/jabref/gui/UpdateTimestampListenerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"c0153bd501754d220e34f45ca689851f8ffd5fbd","commitMessage":"@@@Extraction of Globals.prefs.put and .get (#7121)\n\nCo-authored-by: Siedlerchr <siedlerkiller@gmail.com>\nCo-authored-by: Tobias Diez <tobiasdiez@gmx.de>","date":"2020-12-15 04:28:26","modifiedFileCount":"132","status":"M","submitter":"Carl Christian Snethlage"},{"authorTime":"2021-01-15 05:25:34","codes":[{"authorDate":"2021-01-15 05:25:34","commitOrder":7,"curCode":"    void updateTimestampEnabled() {\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = true;\n\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.shouldAddModificationDate()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(StandardField.MODIFICATIONDATE, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(StandardField.MODIFICATIONDATE), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(new UnknownField(\"test\"), \"some value\");\n\n        assertEquals(Optional.of(newDate), bibEntry.getField(StandardField.MODIFICATIONDATE), \"Timestamp not set correctly after entry changed\");\n    }\n","date":"2021-01-15 05:25:34","endLine":59,"groupId":"8819","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"updateTimestampEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/23/c29c4d62350415c91efea4d2406455e799a098.src","preCode":"    void updateTimestampEnabled() {\n        final Field timestampField = StandardField.TIMESTAMP;\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = true;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.shouldIncludeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(new UnknownField(\"test\"), \"some value\");\n\n        assertEquals(Optional.of(newDate), bibEntry.getField(timestampField), \"Timestamp not set correctly after entry changed\");\n    }\n","realPath":"src/test/java/org/jabref/gui/UpdateTimestampListenerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2021-01-15 05:25:34","commitOrder":7,"curCode":"    void updateTimestampDisabled() {\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = false;\n\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.shouldAddModificationDate()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(StandardField.MODIFICATIONDATE, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(StandardField.MODIFICATIONDATE), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(new UnknownField(\"test\"), \"some value\");\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(StandardField.MODIFICATIONDATE), \"New timestamp set after entry changed even though updates were disabled\");\n    }\n","date":"2021-01-15 05:25:34","endLine":80,"groupId":"8819","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"updateTimestampDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/23/c29c4d62350415c91efea4d2406455e799a098.src","preCode":"    void updateTimestampDisabled() {\n        final Field timestampField = StandardField.TIMESTAMP;\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = false;\n\n        when(timestampPreferencesMock.getTimestampField()).thenReturn(timestampField);\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.shouldIncludeTimestamps()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(timestampField, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(new UnknownField(\"test\"), \"some value\");\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(timestampField), \"New timestamp set after entry changed even though updates were disabled\");\n    }\n","realPath":"src/test/java/org/jabref/gui/UpdateTimestampListenerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"e66f5be7d82c7a7618fe327fe958ec57a25ea598","commitMessage":"@@@Add date fields (#7334)\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>\n","date":"2021-01-15 05:25:34","modifiedFileCount":"31","status":"M","submitter":"Dominik Voigt"},{"authorTime":"2021-06-22 05:08:40","codes":[{"authorDate":"2021-06-22 05:08:40","commitOrder":8,"curCode":"    void updateTimestampEnabled() {\n        final boolean includeTimestamp = true;\n\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.shouldAddModificationDate()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(StandardField.MODIFICATIONDATE, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(StandardField.MODIFICATIONDATE), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(new UnknownField(\"test\"), \"some value\");\n\n        assertEquals(Optional.of(newDate), bibEntry.getField(StandardField.MODIFICATIONDATE), \"Timestamp not set correctly after entry changed\");\n    }\n","date":"2021-06-22 05:08:40","endLine":59,"groupId":"1012","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"updateTimestampEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ec/0b99431dcf89b85eca51ceaafb8ee42572187c.src","preCode":"    void updateTimestampEnabled() {\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = true;\n\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.shouldAddModificationDate()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(StandardField.MODIFICATIONDATE, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(StandardField.MODIFICATIONDATE), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(new UnknownField(\"test\"), \"some value\");\n\n        assertEquals(Optional.of(newDate), bibEntry.getField(StandardField.MODIFICATIONDATE), \"Timestamp not set correctly after entry changed\");\n    }\n","realPath":"src/test/java/org/jabref/gui/UpdateTimestampListenerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2021-06-22 05:08:40","commitOrder":8,"curCode":"    void updateTimestampDisabled() {\n        final boolean includeTimestamp = false;\n\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.shouldAddModificationDate()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(StandardField.MODIFICATIONDATE, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(StandardField.MODIFICATIONDATE), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(new UnknownField(\"test\"), \"some value\");\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(StandardField.MODIFICATIONDATE), \"New timestamp set after entry changed even though updates were disabled\");\n    }\n","date":"2021-06-22 05:08:40","endLine":77,"groupId":"1012","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"updateTimestampDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ec/0b99431dcf89b85eca51ceaafb8ee42572187c.src","preCode":"    void updateTimestampDisabled() {\n        final String baseDate = \"2000-1-1\";\n        final String newDate = \"2000-1-2\";\n\n        final boolean includeTimestamp = false;\n\n        when(timestampPreferencesMock.now()).thenReturn(newDate);\n        when(timestampPreferencesMock.shouldAddModificationDate()).thenReturn(includeTimestamp);\n\n        bibEntry.setField(StandardField.MODIFICATIONDATE, baseDate);\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(StandardField.MODIFICATIONDATE), \"Initial timestamp not set correctly\");\n\n        database.registerListener(new UpdateTimestampListener(preferencesMock));\n\n        bibEntry.setField(new UnknownField(\"test\"), \"some value\");\n\n        assertEquals(Optional.of(baseDate), bibEntry.getField(StandardField.MODIFICATIONDATE), \"New timestamp set after entry changed even though updates were disabled\");\n    }\n","realPath":"src/test/java/org/jabref/gui/UpdateTimestampListenerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"4e93f719b4f5c6e894c29514c09469831b7ba566","commitMessage":"@@@Refactoring and addition of unit tests (#7597)\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>","date":"2021-06-22 05:08:40","modifiedFileCount":"11","status":"M","submitter":"Dario Safa"}]
