[{"authorTime":"2017-02-17 05:41:47","codes":[{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        TypedBibEntry typedEntry = new TypedBibEntry(entry, databaseContext);\n        List<ParsedFileField> fileList = typedEntry.getFiles();\n        List<ParsedFileField> newFileList = new ArrayList<>();\n        boolean changed = false;\n\n        for (ParsedFileField flEntry : fileList) {\n            String realOldFilename = flEntry.getLink();\n\n            if (onlyRelativePaths && (new File(realOldFilename).isAbsolute())) {\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            StringBuilder targetFileName = new StringBuilder(FileUtil\n                    .createFileNameFromPattern(databaseContext.getDatabase(), entry, fileNamePattern, prefs).trim());\n\n            String targetDirName = \"\";\n            if (!fileDirPattern.isEmpty()) {\n                targetDirName = FileUtil.createFileNameFromPattern(databaseContext.getDatabase(), entry, fileDirPattern,\n                        prefs);\n            }\n\n            \r\n            targetFileName.append('.').append(FileUtil.getFileExtension(realOldFilename).orElse(\"pdf\"));\n\n            \r\n            \r\n            Optional<File> expandedOldFile = FileUtil.expandFilename(realOldFilename,\n                    databaseContext.getFileDirectories(fileDirectoryPreferences));\n\n            if ((!expandedOldFile.isPresent()) || (expandedOldFile.get().getParent() == null)) {\n                \r\n                newFileList.add(flEntry);\n                continue;\n            }\n            Path newPath = null;\n            Optional<Path> dir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n            if (dir.isPresent()) {\n\n                newPath = dir.get().resolve(targetDirName).resolve(targetFileName.toString());\n\n                String expandedOldFilePath = expandedOldFile.get().toString();\n                boolean pathsDifferOnlyByCase = newPath.toString().equalsIgnoreCase(expandedOldFilePath)\n                        && !newPath.equals(expandedOldFilePath);\n\n                if (Files.exists(newPath) && !pathsDifferOnlyByCase) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    newFileList.add(flEntry);\n                    continue;\n                }\n\n                try {\n                    if (!Files.exists(newPath)) {\n                        Files.createDirectories(newPath);\n                    }\n                } catch (IOException e) {\n                    \r\n                    LOGGER.error(\"Could no create target necessary target directoires for renaming\", e);\n                }\n                \r\n                boolean renameSuccessful = FileUtil.renameFile(Paths.get(expandedOldFilePath), newPath, true);\n                if (renameSuccessful) {\n                    changed = true;\n\n                    \r\n                    String description = flEntry.getDescription();\n                    String type = flEntry.getFileType();\n\n                    Optional<Path> settingsDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n                    if (settingsDir.isPresent()) {\n\n                        Path parent = settingsDir.get();\n                        String newFileEntryFileName;\n                        if ((parent == null)) {\n                            newFileEntryFileName = targetFileName.toString();\n\n                        } else {\n                            newFileEntryFileName = parent.relativize(newPath).toString();\n                        }\n\n                        newFileList.add(new ParsedFileField(description, newFileEntryFileName, type));\n                    }\n                } else {\n                    unsuccessfulRenames++;\n                }\n            }\n        }\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            \r\n            \r\n            \r\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n        return Collections.emptyList();\n    }\n","date":"2017-02-17 05:41:47","endLine":154,"groupId":"10232","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/95/ab3351919dc72366cc3c7589a58221eebb03a6.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        TypedBibEntry typedEntry = new TypedBibEntry(entry, databaseContext);\n        List<ParsedFileField> fileList = typedEntry.getFiles();\n        List<ParsedFileField> newFileList = new ArrayList<>();\n        boolean changed = false;\n\n        for (ParsedFileField flEntry : fileList) {\n            String realOldFilename = flEntry.getLink();\n\n            if (onlyRelativePaths && (new File(realOldFilename).isAbsolute())) {\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            StringBuilder targetFileName = new StringBuilder(FileUtil\n                    .createFileNameFromPattern(databaseContext.getDatabase(), entry, fileNamePattern, prefs).trim());\n\n            String targetDirName = \"\";\n            if (!fileDirPattern.isEmpty()) {\n                targetDirName = FileUtil.createFileNameFromPattern(databaseContext.getDatabase(), entry, fileDirPattern,\n                        prefs);\n            }\n\n            \r\n            targetFileName.append('.').append(FileUtil.getFileExtension(realOldFilename).orElse(\"pdf\"));\n\n            \r\n            \r\n            Optional<File> expandedOldFile = FileUtil.expandFilename(realOldFilename,\n                    databaseContext.getFileDirectories(fileDirectoryPreferences));\n\n            if ((!expandedOldFile.isPresent()) || (expandedOldFile.get().getParent() == null)) {\n                \r\n                newFileList.add(flEntry);\n                continue;\n            }\n            Path newPath = null;\n            Optional<Path> dir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n            if (dir.isPresent()) {\n\n                newPath = dir.get().resolve(targetDirName).resolve(targetFileName.toString());\n\n                String expandedOldFilePath = expandedOldFile.get().toString();\n                boolean pathsDifferOnlyByCase = newPath.toString().equalsIgnoreCase(expandedOldFilePath)\n                        && !newPath.equals(expandedOldFilePath);\n\n                if (Files.exists(newPath) && !pathsDifferOnlyByCase) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    newFileList.add(flEntry);\n                    continue;\n                }\n\n                try {\n                    if (!Files.exists(newPath)) {\n                        Files.createDirectories(newPath);\n                    }\n                } catch (IOException e) {\n                    \r\n                    LOGGER.error(\"Could no create target necessary target directoires for renaming\", e);\n                }\n                \r\n                boolean renameSuccessful = FileUtil.renameFile(Paths.get(expandedOldFilePath), newPath, true);\n                if (renameSuccessful) {\n                    changed = true;\n\n                    \r\n                    String description = flEntry.getDescription();\n                    String type = flEntry.getFileType();\n\n                    Optional<Path> settingsDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n                    if (settingsDir.isPresent()) {\n\n                        Path parent = settingsDir.get();\n                        String newFileEntryFileName;\n                        if ((parent == null)) {\n                            newFileEntryFileName = targetFileName.toString();\n\n                        } else {\n                            newFileEntryFileName = parent.relativize(newPath).toString();\n                        }\n\n                        newFileList.add(new ParsedFileField(description, newFileEntryFileName, type));\n                    }\n                } else {\n                    unsuccessfulRenames++;\n                }\n            }\n        }\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            \r\n            \r\n            \r\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/RenamePdfCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        if(!databaseContext.getMetaData().getDefaultFileDirectory().isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<String> paths = databaseContext.getFileDirectories(fileDirectoryPreferences);\n        String defaultFileDirectory = databaseContext.getMetaData().getDefaultFileDirectory().get();\n        Optional<File> targetDirectory = FileUtil.expandFilename(defaultFileDirectory, paths);\n        if(!targetDirectory.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        TypedBibEntry typedEntry = new TypedBibEntry(entry, databaseContext);\n        List<ParsedFileField> fileList = typedEntry.getFiles();\n        List<ParsedFileField> newFileList = new ArrayList<>();\n        boolean changed = false;\n        for (ParsedFileField fileEntry : fileList) {\n            String oldFileName = fileEntry.getLink();\n\n            Optional<File> oldFile = FileUtil.expandFilename(oldFileName, paths);\n            if(!oldFile.isPresent() || !oldFile.get().exists()) {\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            File targetFile = new File(targetDirectory.get(), oldFile.get().getName());\n            if(targetFile.exists()) {\n                \r\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            oldFile.get().renameTo(targetFile);\n            String newFileName = targetFile.getName();\n\n            ParsedFileField newFileEntry = fileEntry;\n            if (!oldFileName.equals(newFileName)) {\n                newFileEntry = new ParsedFileField(fileEntry.getDescription(), newFileName, fileEntry.getFileType());\n                changed = true;\n            }\n            newFileList.add(newFileEntry);\n        }\n\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            if(change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2017-02-17 05:41:47","endLine":84,"groupId":"9937","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/76/9b2b8347ea475fb18f9ff205519466fbf67cdd.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        if(!databaseContext.getMetaData().getDefaultFileDirectory().isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<String> paths = databaseContext.getFileDirectories(fileDirectoryPreferences);\n        String defaultFileDirectory = databaseContext.getMetaData().getDefaultFileDirectory().get();\n        Optional<File> targetDirectory = FileUtil.expandFilename(defaultFileDirectory, paths);\n        if(!targetDirectory.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        TypedBibEntry typedEntry = new TypedBibEntry(entry, databaseContext);\n        List<ParsedFileField> fileList = typedEntry.getFiles();\n        List<ParsedFileField> newFileList = new ArrayList<>();\n        boolean changed = false;\n        for (ParsedFileField fileEntry : fileList) {\n            String oldFileName = fileEntry.getLink();\n\n            Optional<File> oldFile = FileUtil.expandFilename(oldFileName, paths);\n            if(!oldFile.isPresent() || !oldFile.get().exists()) {\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            File targetFile = new File(targetDirectory.get(), oldFile.get().getName());\n            if(targetFile.exists()) {\n                \r\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            oldFile.get().renameTo(targetFile);\n            String newFileName = targetFile.getName();\n\n            ParsedFileField newFileEntry = fileEntry;\n            if (!oldFileName.equals(newFileName)) {\n                newFileEntry = new ParsedFileField(fileEntry.getDescription(), newFileName, fileEntry.getFileType());\n                changed = true;\n            }\n            newFileList.add(newFileEntry);\n        }\n\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            if(change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/MoveFilesCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"B"}],"commitId":"ebbeb1d249edf7134abf92d24c2031ae54d19881","commitMessage":"@@@Merge branch 'net-sf-to-org-jabref'\n","date":"2017-02-17 05:41:47","modifiedFileCount":"1","status":"B","submitter":"Oliver Kopp"},{"authorTime":"2017-03-06 17:57:33","codes":[{"authorDate":"2017-03-06 17:57:33","commitOrder":2,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        TypedBibEntry typedEntry = new TypedBibEntry(entry, databaseContext);\n        List<ParsedFileField> newFileList;\n        List<ParsedFileField> fileList;\n        if (singleFieldCleanup != null) {\n            fileList = Arrays.asList(singleFieldCleanup);\n\n            newFileList = typedEntry.getFiles().stream().filter(x -> !x.equals(singleFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = typedEntry.getFiles();\n        }\n\n        boolean changed = false;\n\n        for (ParsedFileField flEntry : fileList) {\n            String realOldFilename = flEntry.getLink();\n\n            if (onlyRelativePaths && Paths.get(realOldFilename).isAbsolute()) {\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            \r\n            Optional<Path> expandedOldFile = FileUtil.expandFilename(realOldFilename,\n                    databaseContext.getFileDirectories(fileDirectoryPreferences)).map(File::toPath);\n\n            if ((!expandedOldFile.isPresent()) || (expandedOldFile.get().getParent() == null)) {\n                \r\n                newFileList.add(flEntry);\n                continue;\n            }\n            String targetFileName = getTargetFileName(flEntry, entry);\n            Path newPath = expandedOldFile.get().getParent().resolve(targetFileName);\n\n            String expandedOldFilePath = expandedOldFile.get().toString();\n            boolean pathsDifferOnlyByCase = newPath.toString().equalsIgnoreCase(expandedOldFilePath)\n                    && !newPath.toString().equals(expandedOldFilePath);\n\n            if (Files.exists(newPath) && !pathsDifferOnlyByCase) {\n                \r\n                \r\n                \r\n                \r\n                LOGGER.debug(\"There already exists a file with that name \" + newPath.getFileName()\n                        + \" so I won't rename it\");\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newPath)) {\n                    Files.createDirectories(newPath);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could not create necessary target directoires for renaming\", e);\n            }\n\n            boolean renameSuccessful = FileUtil.renameFile(Paths.get(expandedOldFilePath), newPath, true);\n            if (renameSuccessful) {\n                changed = true;\n\n                \r\n                String description = flEntry.getDescription();\n                String type = flEntry.getFileType();\n\n                \r\n                Optional<Path> settingsDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n                if (settingsDir.isPresent()) {\n\n                    Path parent = settingsDir.get();\n                    String newFileEntryFileName;\n                    if (parent == null) {\n                        newFileEntryFileName = targetFileName;\n                    } else {\n                        newFileEntryFileName = parent.relativize(newPath).toString();\n                    }\n                    newFileList.add(new ParsedFileField(description, newFileEntryFileName, type));\n                }\n            } else {\n                unsuccessfulRenames++;\n            }\n        }\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            \r\n            \r\n            \r\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n        return Collections.emptyList();\n    }\n","date":"2017-03-06 17:57:33","endLine":158,"groupId":"3173","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/70/5bc4419ef0e3bbacb1ecd913a9acc4d5bb9d20.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        TypedBibEntry typedEntry = new TypedBibEntry(entry, databaseContext);\n        List<ParsedFileField> fileList = typedEntry.getFiles();\n        List<ParsedFileField> newFileList = new ArrayList<>();\n        boolean changed = false;\n\n        for (ParsedFileField flEntry : fileList) {\n            String realOldFilename = flEntry.getLink();\n\n            if (onlyRelativePaths && (new File(realOldFilename).isAbsolute())) {\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            StringBuilder targetFileName = new StringBuilder(FileUtil\n                    .createFileNameFromPattern(databaseContext.getDatabase(), entry, fileNamePattern, prefs).trim());\n\n            String targetDirName = \"\";\n            if (!fileDirPattern.isEmpty()) {\n                targetDirName = FileUtil.createFileNameFromPattern(databaseContext.getDatabase(), entry, fileDirPattern,\n                        prefs);\n            }\n\n            \r\n            targetFileName.append('.').append(FileUtil.getFileExtension(realOldFilename).orElse(\"pdf\"));\n\n            \r\n            \r\n            Optional<File> expandedOldFile = FileUtil.expandFilename(realOldFilename,\n                    databaseContext.getFileDirectories(fileDirectoryPreferences));\n\n            if ((!expandedOldFile.isPresent()) || (expandedOldFile.get().getParent() == null)) {\n                \r\n                newFileList.add(flEntry);\n                continue;\n            }\n            Path newPath = null;\n            Optional<Path> dir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n            if (dir.isPresent()) {\n\n                newPath = dir.get().resolve(targetDirName).resolve(targetFileName.toString());\n\n                String expandedOldFilePath = expandedOldFile.get().toString();\n                boolean pathsDifferOnlyByCase = newPath.toString().equalsIgnoreCase(expandedOldFilePath)\n                        && !newPath.equals(expandedOldFilePath);\n\n                if (Files.exists(newPath) && !pathsDifferOnlyByCase) {\n                    \r\n                    \r\n                    \r\n                    \r\n                    newFileList.add(flEntry);\n                    continue;\n                }\n\n                try {\n                    if (!Files.exists(newPath)) {\n                        Files.createDirectories(newPath);\n                    }\n                } catch (IOException e) {\n                    \r\n                    LOGGER.error(\"Could no create target necessary target directoires for renaming\", e);\n                }\n                \r\n                boolean renameSuccessful = FileUtil.renameFile(Paths.get(expandedOldFilePath), newPath, true);\n                if (renameSuccessful) {\n                    changed = true;\n\n                    \r\n                    String description = flEntry.getDescription();\n                    String type = flEntry.getFileType();\n\n                    Optional<Path> settingsDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n                    if (settingsDir.isPresent()) {\n\n                        Path parent = settingsDir.get();\n                        String newFileEntryFileName;\n                        if ((parent == null)) {\n                            newFileEntryFileName = targetFileName.toString();\n\n                        } else {\n                            newFileEntryFileName = parent.relativize(newPath).toString();\n                        }\n\n                        newFileList.add(new ParsedFileField(description, newFileEntryFileName, type));\n                    }\n                } else {\n                    unsuccessfulRenames++;\n                }\n            }\n        }\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            \r\n            \r\n            \r\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/RenamePdfCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2017-03-06 17:57:33","commitOrder":2,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        Optional<Path> firstExistingFileDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n\n        if (!firstExistingFileDir.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<String> paths = databaseContext.getFileDirectories(fileDirectoryPreferences);\n        String defaultFileDirectory = firstExistingFileDir.get().toString();\n        Optional<Path> targetDirectory = FileUtil.expandFilename(defaultFileDirectory, paths).map(File::toPath);\n\n        if (!targetDirectory.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        TypedBibEntry typedEntry = new TypedBibEntry(entry, databaseContext);\n        List<ParsedFileField> fileList;\n        List<ParsedFileField> newFileList;\n\n        if (singleFileFieldCleanup != null) {\n            fileList = Arrays.asList(singleFileFieldCleanup);\n            \r\n            newFileList = typedEntry.getFiles().stream().filter(name -> !name.equals(singleFileFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = typedEntry.getFiles();\n        }\n\n        boolean changed = false;\n        for (ParsedFileField fileEntry : fileList) {\n            String oldFileName = fileEntry.getLink();\n\n            Optional<File> oldFile = FileUtil.expandFilename(oldFileName, paths);\n            if (!oldFile.isPresent() || !oldFile.get().exists()) {\n                newFileList.add(fileEntry);\n                continue;\n            }\n            String targetDirName = \"\";\n            if (!fileDirPattern.isEmpty()) {\n                targetDirName = FileUtil.createFileNameFromPattern(databaseContext.getDatabase(), entry, fileDirPattern,\n                        layoutPrefs);\n            }\n\n            Path newTargetFile = targetDirectory.get().resolve(targetDirName).resolve(oldFile.get().getName());\n            if (Files.exists(newTargetFile)) {\n                \r\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newTargetFile)) {\n                    Files.createDirectories(newTargetFile);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could no create necessary target directoires for renaming\", e);\n            }\n\n            if (FileUtil.renameFile(oldFile.get().toPath(), newTargetFile, true)) {\n                changed = true;\n\n                String newEntryFilePath = Paths.get(defaultFileDirectory).relativize(newTargetFile).toString();\n                ParsedFileField newFileEntry = fileEntry;\n                if (!oldFileName.equals(newTargetFile.toString())) {\n                    newFileEntry = new ParsedFileField(fileEntry.getDescription(), newEntryFilePath,\n                            fileEntry.getFileType());\n                    changed = true;\n                }\n                newFileList.add(newFileEntry);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2017-03-06 17:57:33","endLine":140,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/c5/a0e1b9ec276bd8ee6673019cecc5141bd390da.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        if(!databaseContext.getMetaData().getDefaultFileDirectory().isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<String> paths = databaseContext.getFileDirectories(fileDirectoryPreferences);\n        String defaultFileDirectory = databaseContext.getMetaData().getDefaultFileDirectory().get();\n        Optional<File> targetDirectory = FileUtil.expandFilename(defaultFileDirectory, paths);\n        if(!targetDirectory.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        TypedBibEntry typedEntry = new TypedBibEntry(entry, databaseContext);\n        List<ParsedFileField> fileList = typedEntry.getFiles();\n        List<ParsedFileField> newFileList = new ArrayList<>();\n        boolean changed = false;\n        for (ParsedFileField fileEntry : fileList) {\n            String oldFileName = fileEntry.getLink();\n\n            Optional<File> oldFile = FileUtil.expandFilename(oldFileName, paths);\n            if(!oldFile.isPresent() || !oldFile.get().exists()) {\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            File targetFile = new File(targetDirectory.get(), oldFile.get().getName());\n            if(targetFile.exists()) {\n                \r\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            oldFile.get().renameTo(targetFile);\n            String newFileName = targetFile.getName();\n\n            ParsedFileField newFileEntry = fileEntry;\n            if (!oldFileName.equals(newFileName)) {\n                newFileEntry = new ParsedFileField(fileEntry.getDescription(), newFileName, fileEntry.getFileType());\n                changed = true;\n            }\n            newFileList.add(newFileEntry);\n        }\n\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            if(change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/MoveFilesCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"31459b4e67cb9a5a370dbb1cd24b837e8797925f","commitMessage":"@@@Merge branch 'master' of github.com:JabRef/jabref\n","date":"2017-03-06 17:57:33","modifiedFileCount":"47","status":"M","submitter":"Joerg Lenhard"},{"authorTime":"2017-04-18 18:14:24","codes":[{"authorDate":"2017-04-18 18:14:24","commitOrder":3,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> newFileList;\n        List<LinkedFile> fileList;\n        if (singleFieldCleanup != null) {\n            fileList = Arrays.asList(singleFieldCleanup);\n\n            newFileList = entry.getFiles().stream().filter(x -> !x.equals(singleFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n\n        for (LinkedFile flEntry : fileList) {\n            String realOldFilename = flEntry.getLink();\n\n            if (onlyRelativePaths && Paths.get(realOldFilename).isAbsolute()) {\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            \r\n            Optional<Path> expandedOldFile = flEntry.findIn(databaseContext, fileDirectoryPreferences);\n\n            if ((!expandedOldFile.isPresent()) || (expandedOldFile.get().getParent() == null)) {\n                \r\n                newFileList.add(flEntry);\n                continue;\n            }\n            String targetFileName = getTargetFileName(flEntry, entry);\n            Path newPath = expandedOldFile.get().getParent().resolve(targetFileName);\n\n            String expandedOldFilePath = expandedOldFile.get().toString();\n            boolean pathsDifferOnlyByCase = newPath.toString().equalsIgnoreCase(expandedOldFilePath)\n                    && !newPath.toString().equals(expandedOldFilePath);\n\n            if (Files.exists(newPath) && !pathsDifferOnlyByCase) {\n                \r\n                \r\n                \r\n                \r\n                LOGGER.debug(\"There already exists a file with that name \" + newPath.getFileName()\n                        + \" so I won't rename it\");\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newPath)) {\n                    Files.createDirectories(newPath);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could not create necessary target directoires for renaming\", e);\n            }\n\n            boolean renameSuccessful = FileUtil.renameFile(Paths.get(expandedOldFilePath), newPath, true);\n            if (renameSuccessful) {\n                changed = true;\n\n                \r\n                String description = flEntry.getDescription();\n                String type = flEntry.getFileType();\n\n                \r\n                Optional<Path> settingsDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n                if (settingsDir.isPresent()) {\n\n                    Path parent = settingsDir.get();\n                    String newFileEntryFileName;\n                    if (parent == null) {\n                        newFileEntryFileName = targetFileName;\n                    } else {\n                        newFileEntryFileName = parent.relativize(newPath).toString();\n                    }\n                    newFileList.add(new LinkedFile(description, newFileEntryFileName, type));\n                }\n            } else {\n                unsuccessfulRenames++;\n            }\n        }\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            \r\n            \r\n            \r\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n        return Collections.emptyList();\n    }\n","date":"2017-04-18 18:14:24","endLine":155,"groupId":"3173","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/f3/e32edcb4f2bf981e79ff19441790b6c4e323e6.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        TypedBibEntry typedEntry = new TypedBibEntry(entry, databaseContext);\n        List<ParsedFileField> newFileList;\n        List<ParsedFileField> fileList;\n        if (singleFieldCleanup != null) {\n            fileList = Arrays.asList(singleFieldCleanup);\n\n            newFileList = typedEntry.getFiles().stream().filter(x -> !x.equals(singleFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = typedEntry.getFiles();\n        }\n\n        boolean changed = false;\n\n        for (ParsedFileField flEntry : fileList) {\n            String realOldFilename = flEntry.getLink();\n\n            if (onlyRelativePaths && Paths.get(realOldFilename).isAbsolute()) {\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            \r\n            Optional<Path> expandedOldFile = FileUtil.expandFilename(realOldFilename,\n                    databaseContext.getFileDirectories(fileDirectoryPreferences)).map(File::toPath);\n\n            if ((!expandedOldFile.isPresent()) || (expandedOldFile.get().getParent() == null)) {\n                \r\n                newFileList.add(flEntry);\n                continue;\n            }\n            String targetFileName = getTargetFileName(flEntry, entry);\n            Path newPath = expandedOldFile.get().getParent().resolve(targetFileName);\n\n            String expandedOldFilePath = expandedOldFile.get().toString();\n            boolean pathsDifferOnlyByCase = newPath.toString().equalsIgnoreCase(expandedOldFilePath)\n                    && !newPath.toString().equals(expandedOldFilePath);\n\n            if (Files.exists(newPath) && !pathsDifferOnlyByCase) {\n                \r\n                \r\n                \r\n                \r\n                LOGGER.debug(\"There already exists a file with that name \" + newPath.getFileName()\n                        + \" so I won't rename it\");\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newPath)) {\n                    Files.createDirectories(newPath);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could not create necessary target directoires for renaming\", e);\n            }\n\n            boolean renameSuccessful = FileUtil.renameFile(Paths.get(expandedOldFilePath), newPath, true);\n            if (renameSuccessful) {\n                changed = true;\n\n                \r\n                String description = flEntry.getDescription();\n                String type = flEntry.getFileType();\n\n                \r\n                Optional<Path> settingsDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n                if (settingsDir.isPresent()) {\n\n                    Path parent = settingsDir.get();\n                    String newFileEntryFileName;\n                    if (parent == null) {\n                        newFileEntryFileName = targetFileName;\n                    } else {\n                        newFileEntryFileName = parent.relativize(newPath).toString();\n                    }\n                    newFileList.add(new ParsedFileField(description, newFileEntryFileName, type));\n                }\n            } else {\n                unsuccessfulRenames++;\n            }\n        }\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            \r\n            \r\n            \r\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/RenamePdfCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2017-04-18 18:14:24","commitOrder":3,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        Optional<Path> firstExistingFileDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n\n        if (!firstExistingFileDir.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<String> paths = databaseContext.getFileDirectories(fileDirectoryPreferences);\n        String defaultFileDirectory = firstExistingFileDir.get().toString();\n        Optional<Path> targetDirectory = FileHelper.expandFilename(defaultFileDirectory, paths);\n\n        if (!targetDirectory.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<LinkedFile> fileList;\n        List<LinkedFile> newFileList;\n\n        if (singleFileFieldCleanup != null) {\n            fileList = Arrays.asList(singleFileFieldCleanup);\n            \r\n            newFileList = entry.getFiles().stream().filter(name -> !name.equals(singleFileFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n        for (LinkedFile fileEntry : fileList) {\n            String oldFileName = fileEntry.getLink();\n\n            Optional<Path> oldFile = fileEntry.findIn(paths);\n            if (!oldFile.isPresent() || !Files.exists(oldFile.get())) {\n                newFileList.add(fileEntry);\n                continue;\n            }\n            String targetDirName = \"\";\n            if (!fileDirPattern.isEmpty()) {\n                targetDirName = FileUtil.createFileNameFromPattern(databaseContext.getDatabase(), entry, fileDirPattern,\n                        layoutPrefs);\n            }\n\n            Path newTargetFile = targetDirectory.get().resolve(targetDirName).resolve(oldFile.get().getFileName());\n            if (Files.exists(newTargetFile)) {\n                \r\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newTargetFile)) {\n                    Files.createDirectories(newTargetFile);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could no create necessary target directoires for renaming\", e);\n            }\n\n            if (FileUtil.renameFile(oldFile.get(), newTargetFile, true)) {\n                changed = true;\n\n                String newEntryFilePath = Paths.get(defaultFileDirectory).relativize(newTargetFile).toString();\n                LinkedFile newFileEntry = fileEntry;\n                if (!oldFileName.equals(newTargetFile.toString())) {\n                    newFileEntry = new LinkedFile(fileEntry.getDescription(), newEntryFilePath,\n                            fileEntry.getFileType());\n                    changed = true;\n                }\n                newFileList.add(newFileEntry);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2017-04-18 18:14:24","endLine":138,"groupId":"10441","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/42/dafd86d5969e9fea8096f5854c8ccc9e89a6ec.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        Optional<Path> firstExistingFileDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n\n        if (!firstExistingFileDir.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<String> paths = databaseContext.getFileDirectories(fileDirectoryPreferences);\n        String defaultFileDirectory = firstExistingFileDir.get().toString();\n        Optional<Path> targetDirectory = FileUtil.expandFilename(defaultFileDirectory, paths).map(File::toPath);\n\n        if (!targetDirectory.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        TypedBibEntry typedEntry = new TypedBibEntry(entry, databaseContext);\n        List<ParsedFileField> fileList;\n        List<ParsedFileField> newFileList;\n\n        if (singleFileFieldCleanup != null) {\n            fileList = Arrays.asList(singleFileFieldCleanup);\n            \r\n            newFileList = typedEntry.getFiles().stream().filter(name -> !name.equals(singleFileFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = typedEntry.getFiles();\n        }\n\n        boolean changed = false;\n        for (ParsedFileField fileEntry : fileList) {\n            String oldFileName = fileEntry.getLink();\n\n            Optional<File> oldFile = FileUtil.expandFilename(oldFileName, paths);\n            if (!oldFile.isPresent() || !oldFile.get().exists()) {\n                newFileList.add(fileEntry);\n                continue;\n            }\n            String targetDirName = \"\";\n            if (!fileDirPattern.isEmpty()) {\n                targetDirName = FileUtil.createFileNameFromPattern(databaseContext.getDatabase(), entry, fileDirPattern,\n                        layoutPrefs);\n            }\n\n            Path newTargetFile = targetDirectory.get().resolve(targetDirName).resolve(oldFile.get().getName());\n            if (Files.exists(newTargetFile)) {\n                \r\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newTargetFile)) {\n                    Files.createDirectories(newTargetFile);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could no create necessary target directoires for renaming\", e);\n            }\n\n            if (FileUtil.renameFile(oldFile.get().toPath(), newTargetFile, true)) {\n                changed = true;\n\n                String newEntryFilePath = Paths.get(defaultFileDirectory).relativize(newTargetFile).toString();\n                ParsedFileField newFileEntry = fileEntry;\n                if (!oldFileName.equals(newTargetFile.toString())) {\n                    newFileEntry = new ParsedFileField(fileEntry.getDescription(), newEntryFilePath,\n                            fileEntry.getFileType());\n                    changed = true;\n                }\n                newFileList.add(newFileEntry);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/MoveFilesCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"c3104ac26445a5992bde7f9d79981bb24a8e3073","commitMessage":"@@@Merge pull request #2723 from JabRef/refactorParsedFileField\n\nRefactor parsed file field","date":"2017-04-18 18:14:24","modifiedFileCount":"47","status":"M","submitter":"Tobias Diez"},{"authorTime":"2017-05-01 18:56:11","codes":[{"authorDate":"2017-04-18 18:14:24","commitOrder":4,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> newFileList;\n        List<LinkedFile> fileList;\n        if (singleFieldCleanup != null) {\n            fileList = Arrays.asList(singleFieldCleanup);\n\n            newFileList = entry.getFiles().stream().filter(x -> !x.equals(singleFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n\n        for (LinkedFile flEntry : fileList) {\n            String realOldFilename = flEntry.getLink();\n\n            if (onlyRelativePaths && Paths.get(realOldFilename).isAbsolute()) {\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            \r\n            Optional<Path> expandedOldFile = flEntry.findIn(databaseContext, fileDirectoryPreferences);\n\n            if ((!expandedOldFile.isPresent()) || (expandedOldFile.get().getParent() == null)) {\n                \r\n                newFileList.add(flEntry);\n                continue;\n            }\n            String targetFileName = getTargetFileName(flEntry, entry);\n            Path newPath = expandedOldFile.get().getParent().resolve(targetFileName);\n\n            String expandedOldFilePath = expandedOldFile.get().toString();\n            boolean pathsDifferOnlyByCase = newPath.toString().equalsIgnoreCase(expandedOldFilePath)\n                    && !newPath.toString().equals(expandedOldFilePath);\n\n            if (Files.exists(newPath) && !pathsDifferOnlyByCase) {\n                \r\n                \r\n                \r\n                \r\n                LOGGER.debug(\"There already exists a file with that name \" + newPath.getFileName()\n                        + \" so I won't rename it\");\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newPath)) {\n                    Files.createDirectories(newPath);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could not create necessary target directoires for renaming\", e);\n            }\n\n            boolean renameSuccessful = FileUtil.renameFile(Paths.get(expandedOldFilePath), newPath, true);\n            if (renameSuccessful) {\n                changed = true;\n\n                \r\n                String description = flEntry.getDescription();\n                String type = flEntry.getFileType();\n\n                \r\n                Optional<Path> settingsDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n                if (settingsDir.isPresent()) {\n\n                    Path parent = settingsDir.get();\n                    String newFileEntryFileName;\n                    if (parent == null) {\n                        newFileEntryFileName = targetFileName;\n                    } else {\n                        newFileEntryFileName = parent.relativize(newPath).toString();\n                    }\n                    newFileList.add(new LinkedFile(description, newFileEntryFileName, type));\n                }\n            } else {\n                unsuccessfulRenames++;\n            }\n        }\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            \r\n            \r\n            \r\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n        return Collections.emptyList();\n    }\n","date":"2017-04-18 18:14:24","endLine":155,"groupId":"3173","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/f3/e32edcb4f2bf981e79ff19441790b6c4e323e6.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> newFileList;\n        List<LinkedFile> fileList;\n        if (singleFieldCleanup != null) {\n            fileList = Arrays.asList(singleFieldCleanup);\n\n            newFileList = entry.getFiles().stream().filter(x -> !x.equals(singleFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n\n        for (LinkedFile flEntry : fileList) {\n            String realOldFilename = flEntry.getLink();\n\n            if (onlyRelativePaths && Paths.get(realOldFilename).isAbsolute()) {\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            \r\n            Optional<Path> expandedOldFile = flEntry.findIn(databaseContext, fileDirectoryPreferences);\n\n            if ((!expandedOldFile.isPresent()) || (expandedOldFile.get().getParent() == null)) {\n                \r\n                newFileList.add(flEntry);\n                continue;\n            }\n            String targetFileName = getTargetFileName(flEntry, entry);\n            Path newPath = expandedOldFile.get().getParent().resolve(targetFileName);\n\n            String expandedOldFilePath = expandedOldFile.get().toString();\n            boolean pathsDifferOnlyByCase = newPath.toString().equalsIgnoreCase(expandedOldFilePath)\n                    && !newPath.toString().equals(expandedOldFilePath);\n\n            if (Files.exists(newPath) && !pathsDifferOnlyByCase) {\n                \r\n                \r\n                \r\n                \r\n                LOGGER.debug(\"There already exists a file with that name \" + newPath.getFileName()\n                        + \" so I won't rename it\");\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newPath)) {\n                    Files.createDirectories(newPath);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could not create necessary target directoires for renaming\", e);\n            }\n\n            boolean renameSuccessful = FileUtil.renameFile(Paths.get(expandedOldFilePath), newPath, true);\n            if (renameSuccessful) {\n                changed = true;\n\n                \r\n                String description = flEntry.getDescription();\n                String type = flEntry.getFileType();\n\n                \r\n                Optional<Path> settingsDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n                if (settingsDir.isPresent()) {\n\n                    Path parent = settingsDir.get();\n                    String newFileEntryFileName;\n                    if (parent == null) {\n                        newFileEntryFileName = targetFileName;\n                    } else {\n                        newFileEntryFileName = parent.relativize(newPath).toString();\n                    }\n                    newFileList.add(new LinkedFile(description, newFileEntryFileName, type));\n                }\n            } else {\n                unsuccessfulRenames++;\n            }\n        }\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            \r\n            \r\n            \r\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/RenamePdfCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2017-05-01 18:56:11","commitOrder":4,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        Optional<Path> firstExistingFileDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n\n        if (!firstExistingFileDir.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<Path> paths = databaseContext.getFileDirectoriesAsPaths(fileDirectoryPreferences);\n        String defaultFileDirectory = firstExistingFileDir.get().toString();\n        Optional<Path> targetDirectory = FileHelper.expandFilenameAsPath(defaultFileDirectory, paths);\n\n        if (!targetDirectory.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<LinkedFile> fileList;\n        List<LinkedFile> newFileList;\n\n        if (singleFileFieldCleanup != null) {\n            fileList = Arrays.asList(singleFileFieldCleanup);\n            \r\n            newFileList = entry.getFiles().stream().filter(name -> !name.equals(singleFileFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n        for (LinkedFile fileEntry : fileList) {\n            String oldFileName = fileEntry.getLink();\n\n            Optional<Path> oldFile = fileEntry.findIn(paths);\n            if (!oldFile.isPresent() || !Files.exists(oldFile.get())) {\n                newFileList.add(fileEntry);\n                continue;\n            }\n            String targetDirName = \"\";\n            if (!fileDirPattern.isEmpty()) {\n                targetDirName = FileUtil.createFileNameFromPattern(databaseContext.getDatabase(), entry, fileDirPattern,\n                        layoutPrefs);\n            }\n\n            Path newTargetFile = targetDirectory.get().resolve(targetDirName).resolve(oldFile.get().getFileName());\n            if (Files.exists(newTargetFile)) {\n                \r\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newTargetFile)) {\n                    Files.createDirectories(newTargetFile);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could no create necessary target directoires for renaming\", e);\n            }\n\n            if (FileUtil.renameFile(oldFile.get(), newTargetFile, true)) {\n                changed = true;\n\n                String newEntryFilePath = Paths.get(defaultFileDirectory).relativize(newTargetFile).toString();\n                LinkedFile newFileEntry = fileEntry;\n                if (!oldFileName.equals(newTargetFile.toString())) {\n                    newFileEntry = new LinkedFile(fileEntry.getDescription(), newEntryFilePath,\n                            fileEntry.getFileType());\n                    changed = true;\n                }\n                newFileList.add(newFileEntry);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2017-05-01 18:56:11","endLine":138,"groupId":"10441","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/f8/62fe459c23b302098cf0ea5fce9c5f2017372d.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        Optional<Path> firstExistingFileDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n\n        if (!firstExistingFileDir.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<String> paths = databaseContext.getFileDirectories(fileDirectoryPreferences);\n        String defaultFileDirectory = firstExistingFileDir.get().toString();\n        Optional<Path> targetDirectory = FileHelper.expandFilename(defaultFileDirectory, paths);\n\n        if (!targetDirectory.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<LinkedFile> fileList;\n        List<LinkedFile> newFileList;\n\n        if (singleFileFieldCleanup != null) {\n            fileList = Arrays.asList(singleFileFieldCleanup);\n            \r\n            newFileList = entry.getFiles().stream().filter(name -> !name.equals(singleFileFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n        for (LinkedFile fileEntry : fileList) {\n            String oldFileName = fileEntry.getLink();\n\n            Optional<Path> oldFile = fileEntry.findIn(paths);\n            if (!oldFile.isPresent() || !Files.exists(oldFile.get())) {\n                newFileList.add(fileEntry);\n                continue;\n            }\n            String targetDirName = \"\";\n            if (!fileDirPattern.isEmpty()) {\n                targetDirName = FileUtil.createFileNameFromPattern(databaseContext.getDatabase(), entry, fileDirPattern,\n                        layoutPrefs);\n            }\n\n            Path newTargetFile = targetDirectory.get().resolve(targetDirName).resolve(oldFile.get().getFileName());\n            if (Files.exists(newTargetFile)) {\n                \r\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newTargetFile)) {\n                    Files.createDirectories(newTargetFile);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could no create necessary target directoires for renaming\", e);\n            }\n\n            if (FileUtil.renameFile(oldFile.get(), newTargetFile, true)) {\n                changed = true;\n\n                String newEntryFilePath = Paths.get(defaultFileDirectory).relativize(newTargetFile).toString();\n                LinkedFile newFileEntry = fileEntry;\n                if (!oldFileName.equals(newTargetFile.toString())) {\n                    newFileEntry = new LinkedFile(fileEntry.getDescription(), newEntryFilePath,\n                            fileEntry.getFileType());\n                    changed = true;\n                }\n                newFileList.add(newFileEntry);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/MoveFilesCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"fcac52707c78d8a0f7ade8975c8b67b023f7f777","commitMessage":"@@@Rework file editor in JavaFX (#2798)\n\n* Reimplement file editor in JavaFX:\n - File type as icon (only PDF for now)\n - Description as tooltip\n\n* Reimplement file editor in JavaFX:\n - Add action: directly file and don't open edit window afterwards\n - Download from URL: show download progress in file list\n\n* Refactor file related things and readd auto-find feature to FileEditor\n\n* Add fulltext search back to file editor\n\n* Update localization\n\n* Include feedback and fix style issues\n\n* Remove whitespace checkstyle rule\n\n* Fix tests\n","date":"2017-05-01 18:56:11","modifiedFileCount":"37","status":"M","submitter":"Tobias Diez"},{"authorTime":"2017-05-01 18:56:11","codes":[{"authorDate":"2017-06-12 02:18:30","commitOrder":5,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> newFileList;\n        List<LinkedFile> fileList;\n        if (singleFieldCleanup != null) {\n            fileList = Arrays.asList(singleFieldCleanup);\n\n            newFileList = entry.getFiles().stream().filter(x -> !x.equals(singleFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n\n        for (LinkedFile flEntry : fileList) {\n            String realOldFilename = flEntry.getLink();\n\n            if (StringUtil.isBlank(realOldFilename)) {\n                continue; \r\n            }\n\n            if (onlyRelativePaths && Paths.get(realOldFilename).isAbsolute()) {\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            \r\n            Optional<Path> expandedOldFile = flEntry.findIn(databaseContext, fileDirectoryPreferences);\n\n            if ((!expandedOldFile.isPresent()) || (expandedOldFile.get().getParent() == null)) {\n                \r\n                newFileList.add(flEntry);\n                continue;\n            }\n            String targetFileName = getTargetFileName(flEntry, entry);\n            Path newPath = expandedOldFile.get().getParent().resolve(targetFileName);\n\n            String expandedOldFilePath = expandedOldFile.get().toString();\n            boolean pathsDifferOnlyByCase = newPath.toString().equalsIgnoreCase(expandedOldFilePath)\n                    && !newPath.toString().equals(expandedOldFilePath);\n\n            if (Files.exists(newPath) && !pathsDifferOnlyByCase) {\n                \r\n                \r\n                \r\n                \r\n                LOGGER.debug(\"There already exists a file with that name \" + newPath.getFileName()\n                        + \" so I won't rename it\");\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newPath)) {\n                    Files.createDirectories(newPath);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could not create necessary target directoires for renaming\", e);\n            }\n\n            boolean renameSuccessful = FileUtil.renameFile(Paths.get(expandedOldFilePath), newPath, true);\n            if (renameSuccessful) {\n                changed = true;\n\n                \r\n                String description = flEntry.getDescription();\n                String type = flEntry.getFileType();\n\n                \r\n                Optional<Path> settingsDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n                if (settingsDir.isPresent()) {\n\n                    Path parent = settingsDir.get();\n                    String newFileEntryFileName;\n                    if (parent == null) {\n                        newFileEntryFileName = targetFileName;\n                    } else {\n                        newFileEntryFileName = parent.relativize(newPath).toString();\n                    }\n                    newFileList.add(new LinkedFile(description, newFileEntryFileName, type));\n                }\n            } else {\n                unsuccessfulRenames++;\n            }\n        }\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            \r\n            \r\n            \r\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n        return Collections.emptyList();\n    }\n","date":"2017-06-12 02:18:30","endLine":160,"groupId":"3173","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/c5/57d4607daa4df46ca5874d9282d0022dc18fd6.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> newFileList;\n        List<LinkedFile> fileList;\n        if (singleFieldCleanup != null) {\n            fileList = Arrays.asList(singleFieldCleanup);\n\n            newFileList = entry.getFiles().stream().filter(x -> !x.equals(singleFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n\n        for (LinkedFile flEntry : fileList) {\n            String realOldFilename = flEntry.getLink();\n\n            if (onlyRelativePaths && Paths.get(realOldFilename).isAbsolute()) {\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            \r\n            Optional<Path> expandedOldFile = flEntry.findIn(databaseContext, fileDirectoryPreferences);\n\n            if ((!expandedOldFile.isPresent()) || (expandedOldFile.get().getParent() == null)) {\n                \r\n                newFileList.add(flEntry);\n                continue;\n            }\n            String targetFileName = getTargetFileName(flEntry, entry);\n            Path newPath = expandedOldFile.get().getParent().resolve(targetFileName);\n\n            String expandedOldFilePath = expandedOldFile.get().toString();\n            boolean pathsDifferOnlyByCase = newPath.toString().equalsIgnoreCase(expandedOldFilePath)\n                    && !newPath.toString().equals(expandedOldFilePath);\n\n            if (Files.exists(newPath) && !pathsDifferOnlyByCase) {\n                \r\n                \r\n                \r\n                \r\n                LOGGER.debug(\"There already exists a file with that name \" + newPath.getFileName()\n                        + \" so I won't rename it\");\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newPath)) {\n                    Files.createDirectories(newPath);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could not create necessary target directoires for renaming\", e);\n            }\n\n            boolean renameSuccessful = FileUtil.renameFile(Paths.get(expandedOldFilePath), newPath, true);\n            if (renameSuccessful) {\n                changed = true;\n\n                \r\n                String description = flEntry.getDescription();\n                String type = flEntry.getFileType();\n\n                \r\n                Optional<Path> settingsDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n                if (settingsDir.isPresent()) {\n\n                    Path parent = settingsDir.get();\n                    String newFileEntryFileName;\n                    if (parent == null) {\n                        newFileEntryFileName = targetFileName;\n                    } else {\n                        newFileEntryFileName = parent.relativize(newPath).toString();\n                    }\n                    newFileList.add(new LinkedFile(description, newFileEntryFileName, type));\n                }\n            } else {\n                unsuccessfulRenames++;\n            }\n        }\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            \r\n            \r\n            \r\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/RenamePdfCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2017-05-01 18:56:11","commitOrder":5,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        Optional<Path> firstExistingFileDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n\n        if (!firstExistingFileDir.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<Path> paths = databaseContext.getFileDirectoriesAsPaths(fileDirectoryPreferences);\n        String defaultFileDirectory = firstExistingFileDir.get().toString();\n        Optional<Path> targetDirectory = FileHelper.expandFilenameAsPath(defaultFileDirectory, paths);\n\n        if (!targetDirectory.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<LinkedFile> fileList;\n        List<LinkedFile> newFileList;\n\n        if (singleFileFieldCleanup != null) {\n            fileList = Arrays.asList(singleFileFieldCleanup);\n            \r\n            newFileList = entry.getFiles().stream().filter(name -> !name.equals(singleFileFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n        for (LinkedFile fileEntry : fileList) {\n            String oldFileName = fileEntry.getLink();\n\n            Optional<Path> oldFile = fileEntry.findIn(paths);\n            if (!oldFile.isPresent() || !Files.exists(oldFile.get())) {\n                newFileList.add(fileEntry);\n                continue;\n            }\n            String targetDirName = \"\";\n            if (!fileDirPattern.isEmpty()) {\n                targetDirName = FileUtil.createFileNameFromPattern(databaseContext.getDatabase(), entry, fileDirPattern,\n                        layoutPrefs);\n            }\n\n            Path newTargetFile = targetDirectory.get().resolve(targetDirName).resolve(oldFile.get().getFileName());\n            if (Files.exists(newTargetFile)) {\n                \r\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newTargetFile)) {\n                    Files.createDirectories(newTargetFile);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could no create necessary target directoires for renaming\", e);\n            }\n\n            if (FileUtil.renameFile(oldFile.get(), newTargetFile, true)) {\n                changed = true;\n\n                String newEntryFilePath = Paths.get(defaultFileDirectory).relativize(newTargetFile).toString();\n                LinkedFile newFileEntry = fileEntry;\n                if (!oldFileName.equals(newTargetFile.toString())) {\n                    newFileEntry = new LinkedFile(fileEntry.getDescription(), newEntryFilePath,\n                            fileEntry.getFileType());\n                    changed = true;\n                }\n                newFileList.add(newFileEntry);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2017-05-01 18:56:11","endLine":138,"groupId":"10441","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/f8/62fe459c23b302098cf0ea5fce9c5f2017372d.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        Optional<Path> firstExistingFileDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n\n        if (!firstExistingFileDir.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<Path> paths = databaseContext.getFileDirectoriesAsPaths(fileDirectoryPreferences);\n        String defaultFileDirectory = firstExistingFileDir.get().toString();\n        Optional<Path> targetDirectory = FileHelper.expandFilenameAsPath(defaultFileDirectory, paths);\n\n        if (!targetDirectory.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<LinkedFile> fileList;\n        List<LinkedFile> newFileList;\n\n        if (singleFileFieldCleanup != null) {\n            fileList = Arrays.asList(singleFileFieldCleanup);\n            \r\n            newFileList = entry.getFiles().stream().filter(name -> !name.equals(singleFileFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n        for (LinkedFile fileEntry : fileList) {\n            String oldFileName = fileEntry.getLink();\n\n            Optional<Path> oldFile = fileEntry.findIn(paths);\n            if (!oldFile.isPresent() || !Files.exists(oldFile.get())) {\n                newFileList.add(fileEntry);\n                continue;\n            }\n            String targetDirName = \"\";\n            if (!fileDirPattern.isEmpty()) {\n                targetDirName = FileUtil.createFileNameFromPattern(databaseContext.getDatabase(), entry, fileDirPattern,\n                        layoutPrefs);\n            }\n\n            Path newTargetFile = targetDirectory.get().resolve(targetDirName).resolve(oldFile.get().getFileName());\n            if (Files.exists(newTargetFile)) {\n                \r\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newTargetFile)) {\n                    Files.createDirectories(newTargetFile);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could no create necessary target directoires for renaming\", e);\n            }\n\n            if (FileUtil.renameFile(oldFile.get(), newTargetFile, true)) {\n                changed = true;\n\n                String newEntryFilePath = Paths.get(defaultFileDirectory).relativize(newTargetFile).toString();\n                LinkedFile newFileEntry = fileEntry;\n                if (!oldFileName.equals(newTargetFile.toString())) {\n                    newFileEntry = new LinkedFile(fileEntry.getDescription(), newEntryFilePath,\n                            fileEntry.getFileType());\n                    changed = true;\n                }\n                newFileList.add(newFileEntry);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/MoveFilesCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"}],"commitId":"42c2ca41a9029d9ea8141652cf3e2f5b3970b0b2","commitMessage":"@@@Fix invalid folder when passed file/path is empty string (#2826)\n\n* Fix invalid folder when passed file/path is empty string\nReturn the correct working dir\n\n* Fix failing tests.  the empty files are ignored\n\n* Fix error in renaming multiple files when one of them was empty\n","date":"2017-06-12 02:18:30","modifiedFileCount":"5","status":"M","submitter":"Christoph"},{"authorTime":"2017-05-01 18:56:11","codes":[{"authorDate":"2017-09-04 15:50:31","commitOrder":6,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> newFileList;\n        List<LinkedFile> fileList;\n        if (singleFieldCleanup != null) {\n            fileList = Arrays.asList(singleFieldCleanup);\n\n            newFileList = entry.getFiles().stream().filter(x -> !x.equals(singleFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n\n        for (LinkedFile flEntry : fileList) {\n            String realOldFilename = flEntry.getLink();\n\n            if (StringUtil.isBlank(realOldFilename)) {\n                continue; \r\n            }\n\n            if (onlyRelativePaths && Paths.get(realOldFilename).isAbsolute()) {\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            \r\n            Optional<Path> expandedOldFile = flEntry.findIn(databaseContext, fileDirectoryPreferences);\n\n            if ((!expandedOldFile.isPresent()) || (expandedOldFile.get().getParent() == null)) {\n                \r\n                newFileList.add(flEntry);\n                continue;\n            }\n            String targetFileName = getTargetFileName(flEntry, entry);\n            Path newPath = expandedOldFile.get().getParent().resolve(targetFileName);\n\n            String expandedOldFilePath = expandedOldFile.get().toString();\n            boolean pathsDifferOnlyByCase = newPath.toString().equalsIgnoreCase(expandedOldFilePath)\n                    && !newPath.toString().equals(expandedOldFilePath);\n\n            if (Files.exists(newPath) && !pathsDifferOnlyByCase) {\n                \r\n                \r\n                \r\n                \r\n                LOGGER.debug(\"There already exists a file with that name \" + newPath.getFileName()\n                        + \" so I won't rename it\");\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newPath)) {\n                    Files.createDirectories(newPath);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could not create necessary target directories for renaming\", e);\n            }\n\n            boolean renameSuccessful = FileUtil.renameFile(Paths.get(expandedOldFilePath), newPath, true);\n            if (renameSuccessful) {\n                changed = true;\n\n                \r\n                String description = flEntry.getDescription();\n                String type = flEntry.getFileType();\n\n                \r\n                Optional<Path> settingsDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n                if (settingsDir.isPresent()) {\n\n                    Path parent = settingsDir.get();\n                    String newFileEntryFileName;\n                    if (parent == null) {\n                        newFileEntryFileName = targetFileName;\n                    } else {\n                        newFileEntryFileName = parent.relativize(newPath).toString();\n                    }\n                    newFileList.add(new LinkedFile(description, newFileEntryFileName, type));\n                }\n            } else {\n                unsuccessfulRenames++;\n            }\n        }\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            \r\n            \r\n            \r\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n        return Collections.emptyList();\n    }\n","date":"2017-09-04 15:50:31","endLine":160,"groupId":"3173","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/32/00849bec22c56a1092da1b5b3c22dd0173c8dd.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> newFileList;\n        List<LinkedFile> fileList;\n        if (singleFieldCleanup != null) {\n            fileList = Arrays.asList(singleFieldCleanup);\n\n            newFileList = entry.getFiles().stream().filter(x -> !x.equals(singleFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n\n        for (LinkedFile flEntry : fileList) {\n            String realOldFilename = flEntry.getLink();\n\n            if (StringUtil.isBlank(realOldFilename)) {\n                continue; \r\n            }\n\n            if (onlyRelativePaths && Paths.get(realOldFilename).isAbsolute()) {\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            \r\n            Optional<Path> expandedOldFile = flEntry.findIn(databaseContext, fileDirectoryPreferences);\n\n            if ((!expandedOldFile.isPresent()) || (expandedOldFile.get().getParent() == null)) {\n                \r\n                newFileList.add(flEntry);\n                continue;\n            }\n            String targetFileName = getTargetFileName(flEntry, entry);\n            Path newPath = expandedOldFile.get().getParent().resolve(targetFileName);\n\n            String expandedOldFilePath = expandedOldFile.get().toString();\n            boolean pathsDifferOnlyByCase = newPath.toString().equalsIgnoreCase(expandedOldFilePath)\n                    && !newPath.toString().equals(expandedOldFilePath);\n\n            if (Files.exists(newPath) && !pathsDifferOnlyByCase) {\n                \r\n                \r\n                \r\n                \r\n                LOGGER.debug(\"There already exists a file with that name \" + newPath.getFileName()\n                        + \" so I won't rename it\");\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newPath)) {\n                    Files.createDirectories(newPath);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could not create necessary target directoires for renaming\", e);\n            }\n\n            boolean renameSuccessful = FileUtil.renameFile(Paths.get(expandedOldFilePath), newPath, true);\n            if (renameSuccessful) {\n                changed = true;\n\n                \r\n                String description = flEntry.getDescription();\n                String type = flEntry.getFileType();\n\n                \r\n                Optional<Path> settingsDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n                if (settingsDir.isPresent()) {\n\n                    Path parent = settingsDir.get();\n                    String newFileEntryFileName;\n                    if (parent == null) {\n                        newFileEntryFileName = targetFileName;\n                    } else {\n                        newFileEntryFileName = parent.relativize(newPath).toString();\n                    }\n                    newFileList.add(new LinkedFile(description, newFileEntryFileName, type));\n                }\n            } else {\n                unsuccessfulRenames++;\n            }\n        }\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            \r\n            \r\n            \r\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/RenamePdfCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2017-05-01 18:56:11","commitOrder":6,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        Optional<Path> firstExistingFileDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n\n        if (!firstExistingFileDir.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<Path> paths = databaseContext.getFileDirectoriesAsPaths(fileDirectoryPreferences);\n        String defaultFileDirectory = firstExistingFileDir.get().toString();\n        Optional<Path> targetDirectory = FileHelper.expandFilenameAsPath(defaultFileDirectory, paths);\n\n        if (!targetDirectory.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<LinkedFile> fileList;\n        List<LinkedFile> newFileList;\n\n        if (singleFileFieldCleanup != null) {\n            fileList = Arrays.asList(singleFileFieldCleanup);\n            \r\n            newFileList = entry.getFiles().stream().filter(name -> !name.equals(singleFileFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n        for (LinkedFile fileEntry : fileList) {\n            String oldFileName = fileEntry.getLink();\n\n            Optional<Path> oldFile = fileEntry.findIn(paths);\n            if (!oldFile.isPresent() || !Files.exists(oldFile.get())) {\n                newFileList.add(fileEntry);\n                continue;\n            }\n            String targetDirName = \"\";\n            if (!fileDirPattern.isEmpty()) {\n                targetDirName = FileUtil.createFileNameFromPattern(databaseContext.getDatabase(), entry, fileDirPattern,\n                        layoutPrefs);\n            }\n\n            Path newTargetFile = targetDirectory.get().resolve(targetDirName).resolve(oldFile.get().getFileName());\n            if (Files.exists(newTargetFile)) {\n                \r\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newTargetFile)) {\n                    Files.createDirectories(newTargetFile);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could no create necessary target directoires for renaming\", e);\n            }\n\n            if (FileUtil.renameFile(oldFile.get(), newTargetFile, true)) {\n                changed = true;\n\n                String newEntryFilePath = Paths.get(defaultFileDirectory).relativize(newTargetFile).toString();\n                LinkedFile newFileEntry = fileEntry;\n                if (!oldFileName.equals(newTargetFile.toString())) {\n                    newFileEntry = new LinkedFile(fileEntry.getDescription(), newEntryFilePath,\n                            fileEntry.getFileType());\n                    changed = true;\n                }\n                newFileList.add(newFileEntry);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2017-05-01 18:56:11","endLine":138,"groupId":"10441","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/f8/62fe459c23b302098cf0ea5fce9c5f2017372d.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        Optional<Path> firstExistingFileDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n\n        if (!firstExistingFileDir.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<Path> paths = databaseContext.getFileDirectoriesAsPaths(fileDirectoryPreferences);\n        String defaultFileDirectory = firstExistingFileDir.get().toString();\n        Optional<Path> targetDirectory = FileHelper.expandFilenameAsPath(defaultFileDirectory, paths);\n\n        if (!targetDirectory.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<LinkedFile> fileList;\n        List<LinkedFile> newFileList;\n\n        if (singleFileFieldCleanup != null) {\n            fileList = Arrays.asList(singleFileFieldCleanup);\n            \r\n            newFileList = entry.getFiles().stream().filter(name -> !name.equals(singleFileFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n        for (LinkedFile fileEntry : fileList) {\n            String oldFileName = fileEntry.getLink();\n\n            Optional<Path> oldFile = fileEntry.findIn(paths);\n            if (!oldFile.isPresent() || !Files.exists(oldFile.get())) {\n                newFileList.add(fileEntry);\n                continue;\n            }\n            String targetDirName = \"\";\n            if (!fileDirPattern.isEmpty()) {\n                targetDirName = FileUtil.createFileNameFromPattern(databaseContext.getDatabase(), entry, fileDirPattern,\n                        layoutPrefs);\n            }\n\n            Path newTargetFile = targetDirectory.get().resolve(targetDirName).resolve(oldFile.get().getFileName());\n            if (Files.exists(newTargetFile)) {\n                \r\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newTargetFile)) {\n                    Files.createDirectories(newTargetFile);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could no create necessary target directoires for renaming\", e);\n            }\n\n            if (FileUtil.renameFile(oldFile.get(), newTargetFile, true)) {\n                changed = true;\n\n                String newEntryFilePath = Paths.get(defaultFileDirectory).relativize(newTargetFile).toString();\n                LinkedFile newFileEntry = fileEntry;\n                if (!oldFileName.equals(newTargetFile.toString())) {\n                    newFileEntry = new LinkedFile(fileEntry.getDescription(), newEntryFilePath,\n                            fileEntry.getFileType());\n                    changed = true;\n                }\n                newFileList.add(newFileEntry);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/MoveFilesCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"}],"commitId":"4ebf095f24e9f821d4e9c43a424775b910fcff39","commitMessage":"@@@Fix typo\n","date":"2017-09-04 15:50:31","modifiedFileCount":"1","status":"M","submitter":"Oliver Kopp"},{"authorTime":"2017-05-01 18:56:11","codes":[{"authorDate":"2017-09-07 23:46:26","commitOrder":7,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> newFileList;\n        List<LinkedFile> oldFileList;\n        if (singleFieldCleanup != null) {\n            oldFileList = Collections.singletonList(singleFieldCleanup);\n\n            newFileList = entry.getFiles().stream().filter(x -> !x.equals(singleFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            oldFileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n\n        for (LinkedFile oldLinkedFile : oldFileList) {\n            String realOldFilename = oldLinkedFile.getLink();\n\n            if (StringUtil.isBlank(realOldFilename)) {\n                continue; \r\n            }\n\n            if (onlyRelativePaths && Paths.get(realOldFilename).isAbsolute()) {\n                newFileList.add(oldLinkedFile);\n                continue;\n            }\n\n            \r\n            Optional<Path> expandedOldFile = oldLinkedFile.findIn(databaseContext, fileDirectoryPreferences);\n\n            if ((!expandedOldFile.isPresent()) || (expandedOldFile.get().getParent() == null)) {\n                \r\n                newFileList.add(oldLinkedFile);\n                continue;\n            }\n            String targetFileName = getTargetFileName(oldLinkedFile, entry);\n            Path newPath = expandedOldFile.get().getParent().resolve(targetFileName);\n\n            String expandedOldFilePath = expandedOldFile.get().toString();\n            boolean pathsDifferOnlyByCase = newPath.toString().equalsIgnoreCase(expandedOldFilePath)\n                    && !newPath.toString().equals(expandedOldFilePath);\n\n            if (Files.exists(newPath) && !pathsDifferOnlyByCase) {\n                \r\n                \r\n                \r\n                \r\n                LOGGER.debug(\"There already exists a file with that name \" + newPath.getFileName() + \" so I won't rename it\");\n                newFileList.add(oldLinkedFile);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newPath)) {\n                    Files.createDirectories(newPath);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could not create necessary target directories for renaming\", e);\n            }\n\n            boolean renameSuccessful = FileUtil.renameFile(Paths.get(expandedOldFilePath), newPath, true);\n            if (renameSuccessful) {\n                changed = true;\n\n                \r\n                String description = oldLinkedFile.getDescription();\n                String type = oldLinkedFile.getFileType();\n\n                \r\n                \r\n                Path settingsDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences).get();\n                newFileList.add(new LinkedFile(description, settingsDir.relativize(newPath).toString(), type));\n            } else {\n                unsuccessfulRenames++;\n            }\n        }\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            \r\n            \r\n            \r\n            return change.map(Collections::singletonList).orElseGet(Collections::emptyList);\n        }\n        return Collections.emptyList();\n    }\n","date":"2017-09-07 23:46:26","endLine":144,"groupId":"7782","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fb/ff14c15a5d220e61581a3b1ade98e7b602207d.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> newFileList;\n        List<LinkedFile> fileList;\n        if (singleFieldCleanup != null) {\n            fileList = Arrays.asList(singleFieldCleanup);\n\n            newFileList = entry.getFiles().stream().filter(x -> !x.equals(singleFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n\n        for (LinkedFile flEntry : fileList) {\n            String realOldFilename = flEntry.getLink();\n\n            if (StringUtil.isBlank(realOldFilename)) {\n                continue; \r\n            }\n\n            if (onlyRelativePaths && Paths.get(realOldFilename).isAbsolute()) {\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            \r\n            Optional<Path> expandedOldFile = flEntry.findIn(databaseContext, fileDirectoryPreferences);\n\n            if ((!expandedOldFile.isPresent()) || (expandedOldFile.get().getParent() == null)) {\n                \r\n                newFileList.add(flEntry);\n                continue;\n            }\n            String targetFileName = getTargetFileName(flEntry, entry);\n            Path newPath = expandedOldFile.get().getParent().resolve(targetFileName);\n\n            String expandedOldFilePath = expandedOldFile.get().toString();\n            boolean pathsDifferOnlyByCase = newPath.toString().equalsIgnoreCase(expandedOldFilePath)\n                    && !newPath.toString().equals(expandedOldFilePath);\n\n            if (Files.exists(newPath) && !pathsDifferOnlyByCase) {\n                \r\n                \r\n                \r\n                \r\n                LOGGER.debug(\"There already exists a file with that name \" + newPath.getFileName()\n                        + \" so I won't rename it\");\n                newFileList.add(flEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newPath)) {\n                    Files.createDirectories(newPath);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could not create necessary target directories for renaming\", e);\n            }\n\n            boolean renameSuccessful = FileUtil.renameFile(Paths.get(expandedOldFilePath), newPath, true);\n            if (renameSuccessful) {\n                changed = true;\n\n                \r\n                String description = flEntry.getDescription();\n                String type = flEntry.getFileType();\n\n                \r\n                Optional<Path> settingsDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n                if (settingsDir.isPresent()) {\n\n                    Path parent = settingsDir.get();\n                    String newFileEntryFileName;\n                    if (parent == null) {\n                        newFileEntryFileName = targetFileName;\n                    } else {\n                        newFileEntryFileName = parent.relativize(newPath).toString();\n                    }\n                    newFileList.add(new LinkedFile(description, newFileEntryFileName, type));\n                }\n            } else {\n                unsuccessfulRenames++;\n            }\n        }\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            \r\n            \r\n            \r\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/RenamePdfCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2017-05-01 18:56:11","commitOrder":7,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        Optional<Path> firstExistingFileDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n\n        if (!firstExistingFileDir.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<Path> paths = databaseContext.getFileDirectoriesAsPaths(fileDirectoryPreferences);\n        String defaultFileDirectory = firstExistingFileDir.get().toString();\n        Optional<Path> targetDirectory = FileHelper.expandFilenameAsPath(defaultFileDirectory, paths);\n\n        if (!targetDirectory.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<LinkedFile> fileList;\n        List<LinkedFile> newFileList;\n\n        if (singleFileFieldCleanup != null) {\n            fileList = Arrays.asList(singleFileFieldCleanup);\n            \r\n            newFileList = entry.getFiles().stream().filter(name -> !name.equals(singleFileFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n        for (LinkedFile fileEntry : fileList) {\n            String oldFileName = fileEntry.getLink();\n\n            Optional<Path> oldFile = fileEntry.findIn(paths);\n            if (!oldFile.isPresent() || !Files.exists(oldFile.get())) {\n                newFileList.add(fileEntry);\n                continue;\n            }\n            String targetDirName = \"\";\n            if (!fileDirPattern.isEmpty()) {\n                targetDirName = FileUtil.createFileNameFromPattern(databaseContext.getDatabase(), entry, fileDirPattern,\n                        layoutPrefs);\n            }\n\n            Path newTargetFile = targetDirectory.get().resolve(targetDirName).resolve(oldFile.get().getFileName());\n            if (Files.exists(newTargetFile)) {\n                \r\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newTargetFile)) {\n                    Files.createDirectories(newTargetFile);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could no create necessary target directoires for renaming\", e);\n            }\n\n            if (FileUtil.renameFile(oldFile.get(), newTargetFile, true)) {\n                changed = true;\n\n                String newEntryFilePath = Paths.get(defaultFileDirectory).relativize(newTargetFile).toString();\n                LinkedFile newFileEntry = fileEntry;\n                if (!oldFileName.equals(newTargetFile.toString())) {\n                    newFileEntry = new LinkedFile(fileEntry.getDescription(), newEntryFilePath,\n                            fileEntry.getFileType());\n                    changed = true;\n                }\n                newFileList.add(newFileEntry);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2017-05-01 18:56:11","endLine":138,"groupId":"10441","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/f8/62fe459c23b302098cf0ea5fce9c5f2017372d.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        Optional<Path> firstExistingFileDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n\n        if (!firstExistingFileDir.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<Path> paths = databaseContext.getFileDirectoriesAsPaths(fileDirectoryPreferences);\n        String defaultFileDirectory = firstExistingFileDir.get().toString();\n        Optional<Path> targetDirectory = FileHelper.expandFilenameAsPath(defaultFileDirectory, paths);\n\n        if (!targetDirectory.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<LinkedFile> fileList;\n        List<LinkedFile> newFileList;\n\n        if (singleFileFieldCleanup != null) {\n            fileList = Arrays.asList(singleFileFieldCleanup);\n            \r\n            newFileList = entry.getFiles().stream().filter(name -> !name.equals(singleFileFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n        for (LinkedFile fileEntry : fileList) {\n            String oldFileName = fileEntry.getLink();\n\n            Optional<Path> oldFile = fileEntry.findIn(paths);\n            if (!oldFile.isPresent() || !Files.exists(oldFile.get())) {\n                newFileList.add(fileEntry);\n                continue;\n            }\n            String targetDirName = \"\";\n            if (!fileDirPattern.isEmpty()) {\n                targetDirName = FileUtil.createFileNameFromPattern(databaseContext.getDatabase(), entry, fileDirPattern,\n                        layoutPrefs);\n            }\n\n            Path newTargetFile = targetDirectory.get().resolve(targetDirName).resolve(oldFile.get().getFileName());\n            if (Files.exists(newTargetFile)) {\n                \r\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newTargetFile)) {\n                    Files.createDirectories(newTargetFile);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could no create necessary target directoires for renaming\", e);\n            }\n\n            if (FileUtil.renameFile(oldFile.get(), newTargetFile, true)) {\n                changed = true;\n\n                String newEntryFilePath = Paths.get(defaultFileDirectory).relativize(newTargetFile).toString();\n                LinkedFile newFileEntry = fileEntry;\n                if (!oldFileName.equals(newTargetFile.toString())) {\n                    newFileEntry = new LinkedFile(fileEntry.getDescription(), newEntryFilePath,\n                            fileEntry.getFileType());\n                    changed = true;\n                }\n                newFileList.add(newFileEntry);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/MoveFilesCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"}],"commitId":"26b5a96cee2c9b57e2dd77fdc73dde8811098441","commitMessage":"@@@Filenames (#2628)\n\n* Resolves #2622 Only create valid filenames (255 chars for now)\n\n* Changelog\n\n* Fix changelog.  formatting\n\n* Tighten everything up a bit\n\n* Get rid of a misleading optional\n","date":"2017-09-07 23:46:26","modifiedFileCount":"3","status":"M","submitter":"Stefan Kolb"},{"authorTime":"2017-10-05 01:29:59","codes":[{"authorDate":"2017-09-07 23:46:26","commitOrder":8,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> newFileList;\n        List<LinkedFile> oldFileList;\n        if (singleFieldCleanup != null) {\n            oldFileList = Collections.singletonList(singleFieldCleanup);\n\n            newFileList = entry.getFiles().stream().filter(x -> !x.equals(singleFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            oldFileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n\n        for (LinkedFile oldLinkedFile : oldFileList) {\n            String realOldFilename = oldLinkedFile.getLink();\n\n            if (StringUtil.isBlank(realOldFilename)) {\n                continue; \r\n            }\n\n            if (onlyRelativePaths && Paths.get(realOldFilename).isAbsolute()) {\n                newFileList.add(oldLinkedFile);\n                continue;\n            }\n\n            \r\n            Optional<Path> expandedOldFile = oldLinkedFile.findIn(databaseContext, fileDirectoryPreferences);\n\n            if ((!expandedOldFile.isPresent()) || (expandedOldFile.get().getParent() == null)) {\n                \r\n                newFileList.add(oldLinkedFile);\n                continue;\n            }\n            String targetFileName = getTargetFileName(oldLinkedFile, entry);\n            Path newPath = expandedOldFile.get().getParent().resolve(targetFileName);\n\n            String expandedOldFilePath = expandedOldFile.get().toString();\n            boolean pathsDifferOnlyByCase = newPath.toString().equalsIgnoreCase(expandedOldFilePath)\n                    && !newPath.toString().equals(expandedOldFilePath);\n\n            if (Files.exists(newPath) && !pathsDifferOnlyByCase) {\n                \r\n                \r\n                \r\n                \r\n                LOGGER.debug(\"There already exists a file with that name \" + newPath.getFileName() + \" so I won't rename it\");\n                newFileList.add(oldLinkedFile);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newPath)) {\n                    Files.createDirectories(newPath);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could not create necessary target directories for renaming\", e);\n            }\n\n            boolean renameSuccessful = FileUtil.renameFile(Paths.get(expandedOldFilePath), newPath, true);\n            if (renameSuccessful) {\n                changed = true;\n\n                \r\n                String description = oldLinkedFile.getDescription();\n                String type = oldLinkedFile.getFileType();\n\n                \r\n                \r\n                Path settingsDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences).get();\n                newFileList.add(new LinkedFile(description, settingsDir.relativize(newPath).toString(), type));\n            } else {\n                unsuccessfulRenames++;\n            }\n        }\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            \r\n            \r\n            \r\n            return change.map(Collections::singletonList).orElseGet(Collections::emptyList);\n        }\n        return Collections.emptyList();\n    }\n","date":"2017-09-07 23:46:26","endLine":144,"groupId":"7782","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fb/ff14c15a5d220e61581a3b1ade98e7b602207d.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> newFileList;\n        List<LinkedFile> oldFileList;\n        if (singleFieldCleanup != null) {\n            oldFileList = Collections.singletonList(singleFieldCleanup);\n\n            newFileList = entry.getFiles().stream().filter(x -> !x.equals(singleFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            oldFileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n\n        for (LinkedFile oldLinkedFile : oldFileList) {\n            String realOldFilename = oldLinkedFile.getLink();\n\n            if (StringUtil.isBlank(realOldFilename)) {\n                continue; \r\n            }\n\n            if (onlyRelativePaths && Paths.get(realOldFilename).isAbsolute()) {\n                newFileList.add(oldLinkedFile);\n                continue;\n            }\n\n            \r\n            Optional<Path> expandedOldFile = oldLinkedFile.findIn(databaseContext, fileDirectoryPreferences);\n\n            if ((!expandedOldFile.isPresent()) || (expandedOldFile.get().getParent() == null)) {\n                \r\n                newFileList.add(oldLinkedFile);\n                continue;\n            }\n            String targetFileName = getTargetFileName(oldLinkedFile, entry);\n            Path newPath = expandedOldFile.get().getParent().resolve(targetFileName);\n\n            String expandedOldFilePath = expandedOldFile.get().toString();\n            boolean pathsDifferOnlyByCase = newPath.toString().equalsIgnoreCase(expandedOldFilePath)\n                    && !newPath.toString().equals(expandedOldFilePath);\n\n            if (Files.exists(newPath) && !pathsDifferOnlyByCase) {\n                \r\n                \r\n                \r\n                \r\n                LOGGER.debug(\"There already exists a file with that name \" + newPath.getFileName() + \" so I won't rename it\");\n                newFileList.add(oldLinkedFile);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newPath)) {\n                    Files.createDirectories(newPath);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could not create necessary target directories for renaming\", e);\n            }\n\n            boolean renameSuccessful = FileUtil.renameFile(Paths.get(expandedOldFilePath), newPath, true);\n            if (renameSuccessful) {\n                changed = true;\n\n                \r\n                String description = oldLinkedFile.getDescription();\n                String type = oldLinkedFile.getFileType();\n\n                \r\n                \r\n                Path settingsDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences).get();\n                newFileList.add(new LinkedFile(description, settingsDir.relativize(newPath).toString(), type));\n            } else {\n                unsuccessfulRenames++;\n            }\n        }\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            \r\n            \r\n            \r\n            return change.map(Collections::singletonList).orElseGet(Collections::emptyList);\n        }\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/RenamePdfCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2017-10-05 01:29:59","commitOrder":8,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        Optional<Path> firstExistingFileDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n\n        if (!firstExistingFileDir.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<Path> paths = databaseContext.getFileDirectoriesAsPaths(fileDirectoryPreferences);\n        String defaultFileDirectory = firstExistingFileDir.get().toString();\n        Optional<Path> targetDirectory = FileHelper.expandFilenameAsPath(defaultFileDirectory, paths);\n\n        if (!targetDirectory.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<LinkedFile> fileList;\n        List<LinkedFile> newFileList;\n\n        if (singleFileFieldCleanup != null) {\n            fileList = Arrays.asList(singleFileFieldCleanup);\n            \r\n            newFileList = entry.getFiles().stream().filter(name -> !name.equals(singleFileFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n        for (LinkedFile fileEntry : fileList) {\n            String oldFileName = fileEntry.getLink();\n\n            Optional<Path> oldFile = fileEntry.findIn(paths);\n            if (!oldFile.isPresent() || !Files.exists(oldFile.get())) {\n                newFileList.add(fileEntry);\n                continue;\n            }\n            String targetDirName = \"\";\n            if (!fileDirPattern.isEmpty()) {\n                targetDirName = FileUtil.createDirNameFromPattern(databaseContext.getDatabase(), entry, fileDirPattern);\n            }\n\n            Path newTargetFile = targetDirectory.get().resolve(targetDirName).resolve(oldFile.get().getFileName());\n            if (Files.exists(newTargetFile)) {\n                \r\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newTargetFile)) {\n                    Files.createDirectories(newTargetFile);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could no create necessary target directoires for renaming\", e);\n            }\n\n            if (FileUtil.renameFile(oldFile.get(), newTargetFile, true)) {\n                changed = true;\n\n                String newEntryFilePath = Paths.get(defaultFileDirectory).relativize(newTargetFile).toString();\n                LinkedFile newFileEntry = fileEntry;\n                if (!oldFileName.equals(newTargetFile.toString())) {\n                    newFileEntry = new LinkedFile(fileEntry.getDescription(), newEntryFilePath,\n                            fileEntry.getFileType());\n                    changed = true;\n                }\n                newFileList.add(newFileEntry);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2017-10-05 01:29:59","endLine":136,"groupId":"7759","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/f2/e94f90703b7af6bfe6a5f13955b231db0a8077.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        Optional<Path> firstExistingFileDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n\n        if (!firstExistingFileDir.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<Path> paths = databaseContext.getFileDirectoriesAsPaths(fileDirectoryPreferences);\n        String defaultFileDirectory = firstExistingFileDir.get().toString();\n        Optional<Path> targetDirectory = FileHelper.expandFilenameAsPath(defaultFileDirectory, paths);\n\n        if (!targetDirectory.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<LinkedFile> fileList;\n        List<LinkedFile> newFileList;\n\n        if (singleFileFieldCleanup != null) {\n            fileList = Arrays.asList(singleFileFieldCleanup);\n            \r\n            newFileList = entry.getFiles().stream().filter(name -> !name.equals(singleFileFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n        for (LinkedFile fileEntry : fileList) {\n            String oldFileName = fileEntry.getLink();\n\n            Optional<Path> oldFile = fileEntry.findIn(paths);\n            if (!oldFile.isPresent() || !Files.exists(oldFile.get())) {\n                newFileList.add(fileEntry);\n                continue;\n            }\n            String targetDirName = \"\";\n            if (!fileDirPattern.isEmpty()) {\n                targetDirName = FileUtil.createFileNameFromPattern(databaseContext.getDatabase(), entry, fileDirPattern,\n                        layoutPrefs);\n            }\n\n            Path newTargetFile = targetDirectory.get().resolve(targetDirName).resolve(oldFile.get().getFileName());\n            if (Files.exists(newTargetFile)) {\n                \r\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newTargetFile)) {\n                    Files.createDirectories(newTargetFile);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could no create necessary target directoires for renaming\", e);\n            }\n\n            if (FileUtil.renameFile(oldFile.get(), newTargetFile, true)) {\n                changed = true;\n\n                String newEntryFilePath = Paths.get(defaultFileDirectory).relativize(newTargetFile).toString();\n                LinkedFile newFileEntry = fileEntry;\n                if (!oldFileName.equals(newTargetFile.toString())) {\n                    newFileEntry = new LinkedFile(fileEntry.getDescription(), newEntryFilePath,\n                            fileEntry.getFileType());\n                    changed = true;\n                }\n                newFileList.add(newFileEntry);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/MoveFilesCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"effe3349e2dfe8b104ade137f86ef8e2fbee36a5","commitMessage":"@@@Directory pattern bracketed expressions (#3238)\n\n","date":"2017-10-05 01:29:59","modifiedFileCount":"19","status":"M","submitter":"Saulius Gra?ulis"},{"authorTime":"2018-09-11 16:55:56","codes":[{"authorDate":"2018-09-11 16:55:56","commitOrder":9,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> files = entry.getFiles();\n\n        boolean changed = false;\n        for (LinkedFile file : files) {\n            if (onlyRelativePaths && Paths.get(file.getLink()).isAbsolute()) {\n                continue;\n            }\n\n            LinkedFileHandler fileHandler = new LinkedFileHandler(file, entry, databaseContext, filePreferences);\n            try {\n                boolean changedFile = fileHandler.renameToSuggestedName();\n                if (changedFile) {\n                    changed = true;\n                }\n            } catch (IOException exception) {\n                LOGGER.error(\"Error while renaming file {}\", file.getLink(), exception);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> changes = entry.setFiles(files);\n            return OptionalUtil.toList(changes);\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2018-09-11 16:55:56","endLine":62,"groupId":"9135","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/40/16081e60b558db4564f5c8aa9739efecf033c2.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> newFileList;\n        List<LinkedFile> oldFileList;\n        if (singleFieldCleanup != null) {\n            oldFileList = Collections.singletonList(singleFieldCleanup);\n\n            newFileList = entry.getFiles().stream().filter(x -> !x.equals(singleFieldCleanup))\n                    .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            oldFileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n\n        for (LinkedFile oldLinkedFile : oldFileList) {\n            String realOldFilename = oldLinkedFile.getLink();\n\n            if (StringUtil.isBlank(realOldFilename)) {\n                continue; \r\n            }\n\n            if (onlyRelativePaths && Paths.get(realOldFilename).isAbsolute()) {\n                newFileList.add(oldLinkedFile);\n                continue;\n            }\n\n            \r\n            Optional<Path> expandedOldFile = oldLinkedFile.findIn(databaseContext, fileDirectoryPreferences);\n\n            if ((!expandedOldFile.isPresent()) || (expandedOldFile.get().getParent() == null)) {\n                \r\n                newFileList.add(oldLinkedFile);\n                continue;\n            }\n            String targetFileName = getTargetFileName(oldLinkedFile, entry);\n            Path newPath = expandedOldFile.get().getParent().resolve(targetFileName);\n\n            String expandedOldFilePath = expandedOldFile.get().toString();\n            boolean pathsDifferOnlyByCase = newPath.toString().equalsIgnoreCase(expandedOldFilePath)\n                    && !newPath.toString().equals(expandedOldFilePath);\n\n            if (Files.exists(newPath) && !pathsDifferOnlyByCase) {\n                \r\n                \r\n                \r\n                \r\n                LOGGER.debug(\"There already exists a file with that name \" + newPath.getFileName() + \" so I won't rename it\");\n                newFileList.add(oldLinkedFile);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newPath)) {\n                    Files.createDirectories(newPath);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could not create necessary target directories for renaming\", e);\n            }\n\n            boolean renameSuccessful = FileUtil.renameFile(Paths.get(expandedOldFilePath), newPath, true);\n            if (renameSuccessful) {\n                changed = true;\n\n                \r\n                String description = oldLinkedFile.getDescription();\n                String type = oldLinkedFile.getFileType();\n\n                \r\n                \r\n                Path settingsDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences).get();\n                newFileList.add(new LinkedFile(description, settingsDir.relativize(newPath).toString(), type));\n            } else {\n                unsuccessfulRenames++;\n            }\n        }\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            \r\n            \r\n            \r\n            return change.map(Collections::singletonList).orElseGet(Collections::emptyList);\n        }\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/RenamePdfCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2018-09-11 16:55:56","commitOrder":9,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> files = entry.getFiles();\n\n        boolean changed = false;\n        for (LinkedFile file : files) {\n            LinkedFileHandler fileHandler = new LinkedFileHandler(file, entry, databaseContext, filePreferences);\n            try {\n                boolean fileChanged = fileHandler.moveToDefaultDirectory();\n                if (fileChanged) {\n                    changed = true;\n                }\n            } catch (IOException exception) {\n                LOGGER.error(\"Error while moving file {}\", file.getLink(), exception);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> changes = entry.setFiles(files);\n            return OptionalUtil.toList(changes);\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2018-09-11 16:55:56","endLine":56,"groupId":"11054","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/42/0167764f880871f76a3255747f057c4d9ae27c.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        Optional<Path> firstExistingFileDir = databaseContext.getFirstExistingFileDir(fileDirectoryPreferences);\n\n        if (!firstExistingFileDir.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<Path> paths = databaseContext.getFileDirectoriesAsPaths(fileDirectoryPreferences);\n        String defaultFileDirectory = firstExistingFileDir.get().toString();\n        Optional<Path> targetDirectory = FileHelper.expandFilenameAsPath(defaultFileDirectory, paths);\n\n        if (!targetDirectory.isPresent()) {\n            return Collections.emptyList();\n        }\n\n        List<LinkedFile> fileList;\n        List<LinkedFile> newFileList;\n\n        if (singleFileFieldCleanup != null) {\n            fileList = Arrays.asList(singleFileFieldCleanup);\n            \r\n            newFileList = entry.getFiles().stream().filter(name -> !name.equals(singleFileFieldCleanup))\n                               .collect(Collectors.toList());\n        } else {\n            newFileList = new ArrayList<>();\n            fileList = entry.getFiles();\n        }\n\n        boolean changed = false;\n        for (LinkedFile fileEntry : fileList) {\n            String oldFileName = fileEntry.getLink();\n\n            Optional<Path> oldFile = fileEntry.findIn(paths);\n            if (!oldFile.isPresent() || !Files.exists(oldFile.get())) {\n                newFileList.add(fileEntry);\n                continue;\n            }\n            String targetDirName = \"\";\n            if (!fileDirPattern.isEmpty()) {\n                targetDirName = FileUtil.createDirNameFromPattern(databaseContext.getDatabase(), entry, fileDirPattern);\n            }\n\n            Path newTargetFile = targetDirectory.get().resolve(targetDirName).resolve(oldFile.get().getFileName());\n            if (Files.exists(newTargetFile)) {\n                \r\n                newFileList.add(fileEntry);\n                continue;\n            }\n\n            try {\n                if (!Files.exists(newTargetFile)) {\n                    Files.createDirectories(newTargetFile);\n                }\n            } catch (IOException e) {\n                LOGGER.error(\"Could no create necessary target directoires for renaming\", e);\n            }\n\n            if (FileUtil.renameFile(oldFile.get(), newTargetFile, true)) {\n                changed = true;\n\n                String newEntryFilePath = Paths.get(defaultFileDirectory).relativize(newTargetFile).toString();\n                LinkedFile newFileEntry = fileEntry;\n                if (!oldFileName.equals(newTargetFile.toString())) {\n                    newFileEntry = new LinkedFile(fileEntry.getDescription(), newEntryFilePath,\n                                                  fileEntry.getFileType());\n                    changed = true;\n                }\n                newFileList.add(newFileEntry);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> change = entry.setFiles(newFileList);\n            if (change.isPresent()) {\n                return Collections.singletonList(change.get());\n            } else {\n                return Collections.emptyList();\n            }\n        }\n\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/MoveFilesCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"}],"commitId":"4c3e520a32f986e0df8a6b7187cf6b2dfe322ccc","commitMessage":"@@@Fix that \"Rename and move file\" throws file not found exception (#4317)\n\n* Fix that \"Rename and move file\" throws file not found exception\n\nFixes #4307. Moreover.  I refactored a bit how files are renamed/moved to the default file directory. This should make it easier to reuse the code.\n\n* Fix tests\n","date":"2018-09-11 16:55:56","modifiedFileCount":"62","status":"M","submitter":"Tobias Diez"},{"authorTime":"2018-09-11 16:55:56","codes":[{"authorDate":"2019-03-28 19:07:14","commitOrder":10,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> files = entry.getFiles();\n\n        boolean changed = false;\n        for (LinkedFile file : files) {\n            if (onlyRelativePaths && Paths.get(file.getLink()).isAbsolute()) {\n                continue;\n            }\n\n            LinkedFileHandler fileHandler = new LinkedFileHandler(file, entry, databaseContext, filePreferences);\n            try {\n                boolean changedFile = fileHandler.renameToSuggestedName();\n                if (changedFile) {\n                    changed = true;\n                }\n            } catch (IOException exception) {\n                LOGGER.error(\"Error while renaming file {}\", file.getLink(), exception);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> fileFieldChanged = DefaultTaskExecutor.runInJavaFXThread(() -> entry.setFiles(files));\n            return OptionalUtil.toList(fileFieldChanged);\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2019-03-28 19:07:14","endLine":63,"groupId":"9135","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/72/912ed73de409b34b107438a9c073c5c9f81814.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> files = entry.getFiles();\n\n        boolean changed = false;\n        for (LinkedFile file : files) {\n            if (onlyRelativePaths && Paths.get(file.getLink()).isAbsolute()) {\n                continue;\n            }\n\n            LinkedFileHandler fileHandler = new LinkedFileHandler(file, entry, databaseContext, filePreferences);\n            try {\n                boolean changedFile = fileHandler.renameToSuggestedName();\n                if (changedFile) {\n                    changed = true;\n                }\n            } catch (IOException exception) {\n                LOGGER.error(\"Error while renaming file {}\", file.getLink(), exception);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> changes = entry.setFiles(files);\n            return OptionalUtil.toList(changes);\n        }\n\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/RenamePdfCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2018-09-11 16:55:56","commitOrder":10,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> files = entry.getFiles();\n\n        boolean changed = false;\n        for (LinkedFile file : files) {\n            LinkedFileHandler fileHandler = new LinkedFileHandler(file, entry, databaseContext, filePreferences);\n            try {\n                boolean fileChanged = fileHandler.moveToDefaultDirectory();\n                if (fileChanged) {\n                    changed = true;\n                }\n            } catch (IOException exception) {\n                LOGGER.error(\"Error while moving file {}\", file.getLink(), exception);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> changes = entry.setFiles(files);\n            return OptionalUtil.toList(changes);\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2018-09-11 16:55:56","endLine":56,"groupId":"11054","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/42/0167764f880871f76a3255747f057c4d9ae27c.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> files = entry.getFiles();\n\n        boolean changed = false;\n        for (LinkedFile file : files) {\n            LinkedFileHandler fileHandler = new LinkedFileHandler(file, entry, databaseContext, filePreferences);\n            try {\n                boolean fileChanged = fileHandler.moveToDefaultDirectory();\n                if (fileChanged) {\n                    changed = true;\n                }\n            } catch (IOException exception) {\n                LOGGER.error(\"Error while moving file {}\", file.getLink(), exception);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> changes = entry.setFiles(files);\n            return OptionalUtil.toList(changes);\n        }\n\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/MoveFilesCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"a9115a256107620fcfbb7c087f1e89e14a632b0d","commitMessage":"@@@put renaming of file entries in JavaFX thread for cleanup (#4818)\n\n","date":"2019-03-28 19:07:14","modifiedFileCount":"1","status":"M","submitter":"Robin"},{"authorTime":"2018-09-11 16:55:56","codes":[{"authorDate":"2019-03-29 20:21:28","commitOrder":11,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> files = entry.getFiles();\n\n        boolean changed = false;\n        for (LinkedFile file : files) {\n            if (onlyRelativePaths && Paths.get(file.getLink()).isAbsolute()) {\n                continue;\n            }\n\n            LinkedFileHandler fileHandler = new LinkedFileHandler(file, entry, databaseContext, filePreferences);\n            try {\n                boolean changedFile = fileHandler.renameToSuggestedName();\n                if (changedFile) {\n                    changed = true;\n                }\n            } catch (IOException exception) {\n                LOGGER.error(\"Error while renaming file {}\", file.getLink(), exception);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> changes = entry.setFiles(files);\n            return OptionalUtil.toList(changes);\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2019-03-29 20:21:28","endLine":62,"groupId":"9135","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/40/16081e60b558db4564f5c8aa9739efecf033c2.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> files = entry.getFiles();\n\n        boolean changed = false;\n        for (LinkedFile file : files) {\n            if (onlyRelativePaths && Paths.get(file.getLink()).isAbsolute()) {\n                continue;\n            }\n\n            LinkedFileHandler fileHandler = new LinkedFileHandler(file, entry, databaseContext, filePreferences);\n            try {\n                boolean changedFile = fileHandler.renameToSuggestedName();\n                if (changedFile) {\n                    changed = true;\n                }\n            } catch (IOException exception) {\n                LOGGER.error(\"Error while renaming file {}\", file.getLink(), exception);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> fileFieldChanged = DefaultTaskExecutor.runInJavaFXThread(() -> entry.setFiles(files));\n            return OptionalUtil.toList(fileFieldChanged);\n        }\n\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/RenamePdfCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2018-09-11 16:55:56","commitOrder":11,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> files = entry.getFiles();\n\n        boolean changed = false;\n        for (LinkedFile file : files) {\n            LinkedFileHandler fileHandler = new LinkedFileHandler(file, entry, databaseContext, filePreferences);\n            try {\n                boolean fileChanged = fileHandler.moveToDefaultDirectory();\n                if (fileChanged) {\n                    changed = true;\n                }\n            } catch (IOException exception) {\n                LOGGER.error(\"Error while moving file {}\", file.getLink(), exception);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> changes = entry.setFiles(files);\n            return OptionalUtil.toList(changes);\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2018-09-11 16:55:56","endLine":56,"groupId":"11054","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/42/0167764f880871f76a3255747f057c4d9ae27c.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> files = entry.getFiles();\n\n        boolean changed = false;\n        for (LinkedFile file : files) {\n            LinkedFileHandler fileHandler = new LinkedFileHandler(file, entry, databaseContext, filePreferences);\n            try {\n                boolean fileChanged = fileHandler.moveToDefaultDirectory();\n                if (fileChanged) {\n                    changed = true;\n                }\n            } catch (IOException exception) {\n                LOGGER.error(\"Error while moving file {}\", file.getLink(), exception);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> changes = entry.setFiles(files);\n            return OptionalUtil.toList(changes);\n        }\n\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/MoveFilesCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"2c327259a45e744c7ad9a46ae35af3145940a830","commitMessage":"@@@Moved cleanup out of background thread to stick with the architecture? (#4823)\n\n* Moved cleanup out of background thread to stick with the architecture tests\n\n* remove unused imports\n\n* Had to split the URLUtil since another logic class used URLUtil functionality\n\n* fixed checkstyle\n\n* Update DOAJFetcher.java\n\n* checkstyle III\n","date":"2019-03-29 20:21:28","modifiedFileCount":"7","status":"M","submitter":"Johannes Manner"},{"authorTime":"2018-09-11 16:55:56","codes":[{"authorDate":"2020-04-30 17:10:13","commitOrder":12,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> files = entry.getFiles();\n\n        boolean changed = false;\n        for (LinkedFile file : files) {\n            if (onlyRelativePaths && Path.of(file.getLink()).isAbsolute()) {\n                continue;\n            }\n\n            LinkedFileHandler fileHandler = new LinkedFileHandler(file, entry, databaseContext, filePreferences);\n            try {\n                boolean changedFile = fileHandler.renameToSuggestedName();\n                if (changedFile) {\n                    changed = true;\n                }\n            } catch (IOException exception) {\n                LOGGER.error(\"Error while renaming file {}\", file.getLink(), exception);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> changes = entry.setFiles(files);\n            return OptionalUtil.toList(changes);\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2020-04-30 17:10:13","endLine":62,"groupId":"101055","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a6/2a616da4100af33bb475e8e9b0df982d60728a.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> files = entry.getFiles();\n\n        boolean changed = false;\n        for (LinkedFile file : files) {\n            if (onlyRelativePaths && Paths.get(file.getLink()).isAbsolute()) {\n                continue;\n            }\n\n            LinkedFileHandler fileHandler = new LinkedFileHandler(file, entry, databaseContext, filePreferences);\n            try {\n                boolean changedFile = fileHandler.renameToSuggestedName();\n                if (changedFile) {\n                    changed = true;\n                }\n            } catch (IOException exception) {\n                LOGGER.error(\"Error while renaming file {}\", file.getLink(), exception);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> changes = entry.setFiles(files);\n            return OptionalUtil.toList(changes);\n        }\n\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/RenamePdfCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2018-09-11 16:55:56","commitOrder":12,"curCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> files = entry.getFiles();\n\n        boolean changed = false;\n        for (LinkedFile file : files) {\n            LinkedFileHandler fileHandler = new LinkedFileHandler(file, entry, databaseContext, filePreferences);\n            try {\n                boolean fileChanged = fileHandler.moveToDefaultDirectory();\n                if (fileChanged) {\n                    changed = true;\n                }\n            } catch (IOException exception) {\n                LOGGER.error(\"Error while moving file {}\", file.getLink(), exception);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> changes = entry.setFiles(files);\n            return OptionalUtil.toList(changes);\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2018-09-11 16:55:56","endLine":56,"groupId":"101055","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanup","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/42/0167764f880871f76a3255747f057c4d9ae27c.src","preCode":"    public List<FieldChange> cleanup(BibEntry entry) {\n        List<LinkedFile> files = entry.getFiles();\n\n        boolean changed = false;\n        for (LinkedFile file : files) {\n            LinkedFileHandler fileHandler = new LinkedFileHandler(file, entry, databaseContext, filePreferences);\n            try {\n                boolean fileChanged = fileHandler.moveToDefaultDirectory();\n                if (fileChanged) {\n                    changed = true;\n                }\n            } catch (IOException exception) {\n                LOGGER.error(\"Error while moving file {}\", file.getLink(), exception);\n            }\n        }\n\n        if (changed) {\n            Optional<FieldChange> changes = entry.setFiles(files);\n            return OptionalUtil.toList(changes);\n        }\n\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/cleanup/MoveFilesCleanup.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"862078a4db316cfd15bd77be68d3d2b010feab3b","commitMessage":"@@@Fixes #6357: File directory (#6377)\n\n* Fixes #6357: File directory\n\nBug was introduced in https://github.com/JabRef/jabref/commit/1b03f039aa4abf0812a3a8ae0ba248c08fdb39a3.\n\n* Fix tests\n\n* Replace Paths.get\n\n* Fix code style","date":"2020-04-30 17:10:13","modifiedFileCount":"110","status":"M","submitter":"Tobias Diez"}]
