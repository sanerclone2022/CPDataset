[{"authorTime":"2020-02-20 07:57:05","codes":[{"authorDate":"2020-02-20 07:57:05","commitOrder":5,"curCode":"    protected void insertIntoFieldTable(List<BibEntry> bibEntries) {\n        try {\n            \r\n            \r\n            List<List<Field>> fields = bibEntries.stream().map(entry -> new ArrayList<>(entry.getFields()))\n                    .collect(Collectors.toList());\n            StringBuilder insertFieldQuery = new StringBuilder()\n                    .append(\"INSERT ALL\");\n            int numFields = 0;\n            for (List<Field> entryFields : fields) {\n                numFields += entryFields.size();\n            }\n            for (int i = 0; i < numFields; i++) {\n                insertFieldQuery.append(\" INTO \")\n                                .append(escape(\"FIELD\"))\n                                .append(\" (\")\n                                .append(escape(\"ENTRY_SHARED_ID\"))\n                                .append(\", \")\n                                .append(escape(\"NAME\"))\n                                .append(\", \")\n                                .append(escape(\"VALUE\"))\n                                .append(\") VALUES (?, ?, ?)\");\n            }\n            insertFieldQuery.append(\" SELECT * FROM DUAL\");\n            try (PreparedStatement preparedFieldStatement = connection.prepareStatement(insertFieldQuery.toString())) {\n                int fieldsCompleted = 0;\n                for (int entryIndex = 0; entryIndex < fields.size(); entryIndex++) {\n                    for (int entryFieldsIndex = 0; entryFieldsIndex < fields.get(entryIndex).size(); entryFieldsIndex++) {\n                        \r\n                        preparedFieldStatement.setInt((3 * fieldsCompleted) + 1, bibEntries.get(entryIndex).getSharedBibEntryData().getSharedID());\n                        preparedFieldStatement.setString((3 * fieldsCompleted) + 2, fields.get(entryIndex).get(entryFieldsIndex).getName());\n                        preparedFieldStatement.setString((3 * fieldsCompleted) + 3, bibEntries.get(entryIndex).getField(fields.get(entryIndex).get(entryFieldsIndex)).get());\n                        fieldsCompleted += 1;\n                    }\n                }\n                preparedFieldStatement.executeUpdate();            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","date":"2020-02-20 07:57:05","endLine":176,"groupId":"1740","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"insertIntoFieldTable","params":"(List<BibEntry>bibEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/f4/fd183a1d300a813fe809ed00ecb44a729e765d.src","preCode":"    protected void insertIntoFieldTable(List<BibEntry> bibEntries) {\n        try {\n            \r\n            \r\n            List<List<Field>> fields = bibEntries.stream().map(entry -> new ArrayList<>(entry.getFields()))\n                    .collect(Collectors.toList());\n            StringBuilder insertFieldQuery = new StringBuilder()\n                    .append(\"INSERT ALL\");\n            int numFields = 0;\n            for (List<Field> entryFields : fields) {\n                numFields += entryFields.size();\n            }\n            for (int i = 0; i < numFields; i++) {\n                insertFieldQuery.append(\" INTO \")\n                                .append(escape(\"FIELD\"))\n                                .append(\" (\")\n                                .append(escape(\"ENTRY_SHARED_ID\"))\n                                .append(\", \")\n                                .append(escape(\"NAME\"))\n                                .append(\", \")\n                                .append(escape(\"VALUE\"))\n                                .append(\") VALUES (?, ?, ?)\");\n            }\n            insertFieldQuery.append(\" SELECT * FROM DUAL\");\n            try (PreparedStatement preparedFieldStatement = connection.prepareStatement(insertFieldQuery.toString())) {\n                int fieldsCompleted = 0;\n                for (int entryIndex = 0; entryIndex < fields.size(); entryIndex++) {\n                    for (int entryFieldsIndex = 0; entryFieldsIndex < fields.get(entryIndex).size(); entryFieldsIndex++) {\n                        \r\n                        preparedFieldStatement.setInt((3 * fieldsCompleted) + 1, bibEntries.get(entryIndex).getSharedBibEntryData().getSharedID());\n                        preparedFieldStatement.setString((3 * fieldsCompleted) + 2, fields.get(entryIndex).get(entryFieldsIndex).getName());\n                        preparedFieldStatement.setString((3 * fieldsCompleted) + 3, bibEntries.get(entryIndex).getField(fields.get(entryIndex).get(entryFieldsIndex)).get());\n                        fieldsCompleted += 1;\n                    }\n                }\n                preparedFieldStatement.executeUpdate();            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/shared/OracleProcessor.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"MB"},{"authorDate":"2020-02-20 07:57:05","commitOrder":5,"curCode":"    protected void insertIntoFieldTable(List<BibEntry> bibEntries) {\n        try {\n            \r\n            \r\n            List<List<Field>> fields = bibEntries.stream().map(bibEntry -> new ArrayList<>(bibEntry.getFields()))\n                                                 .collect(Collectors.toList());\n            StringBuilder insertFieldQuery = new StringBuilder()\n                    .append(\"INSERT INTO \")\n                    .append(escape(\"FIELD\"))\n                    .append(\"(\")\n                    .append(escape(\"ENTRY_SHARED_ID\"))\n                    .append(\", \")\n                    .append(escape(\"NAME\"))\n                    .append(\", \")\n                    .append(escape(\"VALUE\"))\n                    .append(\") VALUES(?, ?, ?)\");\n            int numFields = 0;\n            for (List<Field> entryFields : fields) {\n                numFields += entryFields.size();\n            }\n            \r\n            for (int i = 0; i < numFields - 1; i++) {\n                insertFieldQuery.append(\", (?, ?, ?)\");\n            }\n            try (PreparedStatement preparedFieldStatement = connection.prepareStatement(insertFieldQuery.toString())) {\n                int fieldsCompleted = 0;\n                for (int entryIndex = 0; entryIndex < fields.size(); entryIndex++) {\n                    for (int entryFieldsIndex = 0; entryFieldsIndex < fields.get(entryIndex).size(); entryFieldsIndex++) {\n                        \r\n                        preparedFieldStatement.setInt((3 * fieldsCompleted) + 1, bibEntries.get(entryIndex).getSharedBibEntryData().getSharedID());\n                        preparedFieldStatement.setString((3 * fieldsCompleted) + 2, fields.get(entryIndex).get(entryFieldsIndex).getName());\n                        preparedFieldStatement.setString((3 * fieldsCompleted) + 3, bibEntries.get(entryIndex).getField(fields.get(entryIndex).get(entryFieldsIndex)).get());\n                        fieldsCompleted += 1;\n                    }\n                }\n                preparedFieldStatement.executeUpdate();\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","date":"2020-02-20 07:57:05","endLine":279,"groupId":"12342","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"insertIntoFieldTable","params":"(List<BibEntry>bibEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/9e/f40561391d822fe899b426225f695cd5cba466.src","preCode":"    protected void insertIntoFieldTable(List<BibEntry> bibEntries) {\n        try {\n            \r\n            \r\n            List<List<Field>> fields = bibEntries.stream().map(bibEntry -> new ArrayList<>(bibEntry.getFields()))\n                                                 .collect(Collectors.toList());\n            StringBuilder insertFieldQuery = new StringBuilder()\n                    .append(\"INSERT INTO \")\n                    .append(escape(\"FIELD\"))\n                    .append(\"(\")\n                    .append(escape(\"ENTRY_SHARED_ID\"))\n                    .append(\", \")\n                    .append(escape(\"NAME\"))\n                    .append(\", \")\n                    .append(escape(\"VALUE\"))\n                    .append(\") VALUES(?, ?, ?)\");\n            int numFields = 0;\n            for (List<Field> entryFields : fields) {\n                numFields += entryFields.size();\n            }\n            \r\n            for (int i = 0; i < numFields - 1; i++) {\n                insertFieldQuery.append(\", (?, ?, ?)\");\n            }\n            try (PreparedStatement preparedFieldStatement = connection.prepareStatement(insertFieldQuery.toString())) {\n                int fieldsCompleted = 0;\n                for (int entryIndex = 0; entryIndex < fields.size(); entryIndex++) {\n                    for (int entryFieldsIndex = 0; entryFieldsIndex < fields.get(entryIndex).size(); entryFieldsIndex++) {\n                        \r\n                        preparedFieldStatement.setInt((3 * fieldsCompleted) + 1, bibEntries.get(entryIndex).getSharedBibEntryData().getSharedID());\n                        preparedFieldStatement.setString((3 * fieldsCompleted) + 2, fields.get(entryIndex).get(entryFieldsIndex).getName());\n                        preparedFieldStatement.setString((3 * fieldsCompleted) + 3, bibEntries.get(entryIndex).getField(fields.get(entryIndex).get(entryFieldsIndex)).get());\n                        fieldsCompleted += 1;\n                    }\n                }\n                preparedFieldStatement.executeUpdate();\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/shared/DBMSProcessor.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"MB"}],"commitId":"93196eeb819024079e94dd1eea3b22af993723cf","commitMessage":"@@@[WIP] Initial work on DBMSProcessor batch entry insertion into ENTRY table (#5814)\n\n* Initial work on DBMSProcessor entry insertion into ENTRY table\n\n* Change syntax for Oracle multi-row insert SQL statement\n\n* Run tests also when source files changed\n\n* Add to comment about Oracle\n\n* Assume ResultSet is in order for setting shared IDs\n\n* Add insertEntry for DBMSProcessor tests and fix PostgresSQLProcessor\n\n* Fix SQL typo\n\n* Separate table drops in Oracle tests\n\n* Remove CI tests that were added in branch\n\n* Work on unit test for DBMSProcessor insertEntries\n\n* Fix bug in DBMSProcessorTest and simplify DBMSProcessor.FilterForBibEntryExistence\n\n* Remove Oracle connection bug with wrong port\n\n* Add Oracle insertIntoEntryTable\n\n* Oracle connection fix - taken from fix_fields_sql branch\n\n* Fix typo bug\n\n* Clean up code\n\n* Remove commented blocks\n\n* Remove comment about needing a test that probably isn't necessary\n\n* Manually merge fix_fields_sql OracleProcessor (just add method)\n\n* Emphasize todo\n\n* setSharedID into OracleProcessor entry table method\n\n* Add shared id to preparedEntryStatement\n\n* Make Oracle insertIntoEntryTable iterative - pasted from master - not yet tested\n\n* Add fields to fields table in parallel\n\n* Reset test trace length\n\n* Fix checkStyle\n\n* Revert port setting\n\nCo-authored-by: Tobias Diez <tobiasdiez@gmx.de>\n","date":"2020-02-20 07:57:05","modifiedFileCount":"6","status":"M","submitter":"Abraham Polk"},{"authorTime":"2020-12-15 03:17:24","codes":[{"authorDate":"2020-02-20 07:57:05","commitOrder":6,"curCode":"    protected void insertIntoFieldTable(List<BibEntry> bibEntries) {\n        try {\n            \r\n            \r\n            List<List<Field>> fields = bibEntries.stream().map(entry -> new ArrayList<>(entry.getFields()))\n                    .collect(Collectors.toList());\n            StringBuilder insertFieldQuery = new StringBuilder()\n                    .append(\"INSERT ALL\");\n            int numFields = 0;\n            for (List<Field> entryFields : fields) {\n                numFields += entryFields.size();\n            }\n            for (int i = 0; i < numFields; i++) {\n                insertFieldQuery.append(\" INTO \")\n                                .append(escape(\"FIELD\"))\n                                .append(\" (\")\n                                .append(escape(\"ENTRY_SHARED_ID\"))\n                                .append(\", \")\n                                .append(escape(\"NAME\"))\n                                .append(\", \")\n                                .append(escape(\"VALUE\"))\n                                .append(\") VALUES (?, ?, ?)\");\n            }\n            insertFieldQuery.append(\" SELECT * FROM DUAL\");\n            try (PreparedStatement preparedFieldStatement = connection.prepareStatement(insertFieldQuery.toString())) {\n                int fieldsCompleted = 0;\n                for (int entryIndex = 0; entryIndex < fields.size(); entryIndex++) {\n                    for (int entryFieldsIndex = 0; entryFieldsIndex < fields.get(entryIndex).size(); entryFieldsIndex++) {\n                        \r\n                        preparedFieldStatement.setInt((3 * fieldsCompleted) + 1, bibEntries.get(entryIndex).getSharedBibEntryData().getSharedID());\n                        preparedFieldStatement.setString((3 * fieldsCompleted) + 2, fields.get(entryIndex).get(entryFieldsIndex).getName());\n                        preparedFieldStatement.setString((3 * fieldsCompleted) + 3, bibEntries.get(entryIndex).getField(fields.get(entryIndex).get(entryFieldsIndex)).get());\n                        fieldsCompleted += 1;\n                    }\n                }\n                preparedFieldStatement.executeUpdate();            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","date":"2020-02-20 07:57:05","endLine":176,"groupId":"101046","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"insertIntoFieldTable","params":"(List<BibEntry>bibEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/f4/fd183a1d300a813fe809ed00ecb44a729e765d.src","preCode":"    protected void insertIntoFieldTable(List<BibEntry> bibEntries) {\n        try {\n            \r\n            \r\n            List<List<Field>> fields = bibEntries.stream().map(entry -> new ArrayList<>(entry.getFields()))\n                    .collect(Collectors.toList());\n            StringBuilder insertFieldQuery = new StringBuilder()\n                    .append(\"INSERT ALL\");\n            int numFields = 0;\n            for (List<Field> entryFields : fields) {\n                numFields += entryFields.size();\n            }\n            for (int i = 0; i < numFields; i++) {\n                insertFieldQuery.append(\" INTO \")\n                                .append(escape(\"FIELD\"))\n                                .append(\" (\")\n                                .append(escape(\"ENTRY_SHARED_ID\"))\n                                .append(\", \")\n                                .append(escape(\"NAME\"))\n                                .append(\", \")\n                                .append(escape(\"VALUE\"))\n                                .append(\") VALUES (?, ?, ?)\");\n            }\n            insertFieldQuery.append(\" SELECT * FROM DUAL\");\n            try (PreparedStatement preparedFieldStatement = connection.prepareStatement(insertFieldQuery.toString())) {\n                int fieldsCompleted = 0;\n                for (int entryIndex = 0; entryIndex < fields.size(); entryIndex++) {\n                    for (int entryFieldsIndex = 0; entryFieldsIndex < fields.get(entryIndex).size(); entryFieldsIndex++) {\n                        \r\n                        preparedFieldStatement.setInt((3 * fieldsCompleted) + 1, bibEntries.get(entryIndex).getSharedBibEntryData().getSharedID());\n                        preparedFieldStatement.setString((3 * fieldsCompleted) + 2, fields.get(entryIndex).get(entryFieldsIndex).getName());\n                        preparedFieldStatement.setString((3 * fieldsCompleted) + 3, bibEntries.get(entryIndex).getField(fields.get(entryIndex).get(entryFieldsIndex)).get());\n                        fieldsCompleted += 1;\n                    }\n                }\n                preparedFieldStatement.executeUpdate();            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/shared/OracleProcessor.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"N"},{"authorDate":"2020-12-15 03:17:24","commitOrder":6,"curCode":"    protected void insertIntoFieldTable(List<BibEntry> bibEntries) {\n        try {\n            \r\n            \r\n            List<List<Field>> fields = bibEntries.stream().map(bibEntry -> new ArrayList<>(bibEntry.getFields()))\n                                                 .collect(Collectors.toList());\n\n            StringBuilder insertFieldQuery = new StringBuilder()\n                    .append(\"INSERT INTO \")\n                    .append(escape(\"FIELD\"))\n                    .append(\"(\")\n                    .append(escape(\"ENTRY_SHARED_ID\"))\n                    .append(\", \")\n                    .append(escape(\"NAME\"))\n                    .append(\", \")\n                    .append(escape(\"VALUE\"))\n                    .append(\") VALUES(?, ?, ?)\");\n            int numFields = 0;\n            for (List<Field> entryFields : fields) {\n                numFields += entryFields.size();\n            }\n\n            if (numFields == 0) {\n                return; \r\n            }\n\n            \r\n            for (int i = 0; i < (numFields - 1); i++) {\n                insertFieldQuery.append(\", (?, ?, ?)\");\n            }\n            try (PreparedStatement preparedFieldStatement = connection.prepareStatement(insertFieldQuery.toString())) {\n                int fieldsCompleted = 0;\n                for (int entryIndex = 0; entryIndex < fields.size(); entryIndex++) {\n                    for (int entryFieldsIndex = 0; entryFieldsIndex < fields.get(entryIndex).size(); entryFieldsIndex++) {\n                        \r\n                        preparedFieldStatement.setInt((3 * fieldsCompleted) + 1, bibEntries.get(entryIndex).getSharedBibEntryData().getSharedID());\n                        preparedFieldStatement.setString((3 * fieldsCompleted) + 2, fields.get(entryIndex).get(entryFieldsIndex).getName());\n                        preparedFieldStatement.setString((3 * fieldsCompleted) + 3, bibEntries.get(entryIndex).getField(fields.get(entryIndex).get(entryFieldsIndex)).get());\n                        fieldsCompleted += 1;\n                    }\n                }\n                preparedFieldStatement.executeUpdate();\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","date":"2020-12-15 03:17:24","endLine":282,"groupId":"101046","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"insertIntoFieldTable","params":"(List<BibEntry>bibEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ec/364110a91390e15fef565b8ac27ba233472ecf.src","preCode":"    protected void insertIntoFieldTable(List<BibEntry> bibEntries) {\n        try {\n            \r\n            \r\n            List<List<Field>> fields = bibEntries.stream().map(bibEntry -> new ArrayList<>(bibEntry.getFields()))\n                                                 .collect(Collectors.toList());\n            StringBuilder insertFieldQuery = new StringBuilder()\n                    .append(\"INSERT INTO \")\n                    .append(escape(\"FIELD\"))\n                    .append(\"(\")\n                    .append(escape(\"ENTRY_SHARED_ID\"))\n                    .append(\", \")\n                    .append(escape(\"NAME\"))\n                    .append(\", \")\n                    .append(escape(\"VALUE\"))\n                    .append(\") VALUES(?, ?, ?)\");\n            int numFields = 0;\n            for (List<Field> entryFields : fields) {\n                numFields += entryFields.size();\n            }\n            \r\n            for (int i = 0; i < numFields - 1; i++) {\n                insertFieldQuery.append(\", (?, ?, ?)\");\n            }\n            try (PreparedStatement preparedFieldStatement = connection.prepareStatement(insertFieldQuery.toString())) {\n                int fieldsCompleted = 0;\n                for (int entryIndex = 0; entryIndex < fields.size(); entryIndex++) {\n                    for (int entryFieldsIndex = 0; entryFieldsIndex < fields.get(entryIndex).size(); entryFieldsIndex++) {\n                        \r\n                        preparedFieldStatement.setInt((3 * fieldsCompleted) + 1, bibEntries.get(entryIndex).getSharedBibEntryData().getSharedID());\n                        preparedFieldStatement.setString((3 * fieldsCompleted) + 2, fields.get(entryIndex).get(entryFieldsIndex).getName());\n                        preparedFieldStatement.setString((3 * fieldsCompleted) + 3, bibEntries.get(entryIndex).getField(fields.get(entryIndex).get(entryFieldsIndex)).get());\n                        fieldsCompleted += 1;\n                    }\n                }\n                preparedFieldStatement.executeUpdate();\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/shared/DBMSProcessor.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"}],"commitId":"f356f9e54a2d621163f5ee5ef56ed657b0fb99b4","commitMessage":"@@@Fix newly added entry not synced to db (#7178)\n\n* Fix newly added entry not synced to db\n\n\nNewly added entries have empty fields; don't update the field table to prevent SQL Exception\nFix shared entry not found by id\nuse left outer join for this\n\n* fix checkstyle\n\n* fix wording\n\n* add tests for fix\n\n* adjust test","date":"2020-12-15 03:17:24","modifiedFileCount":"3","status":"M","submitter":"Christoph"}]
