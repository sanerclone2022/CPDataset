[{"authorTime":"2018-07-13 18:23:05","codes":[{"authorDate":"2018-07-13 18:23:05","commitOrder":1,"curCode":"    public Parser getParser() {\n        return inputStream -> {\n            String response = new BufferedReader(new InputStreamReader(inputStream)).lines().collect(Collectors.joining(OS.NEWLINE));\n            JSONObject jsonObject = new JSONObject(response);\n\n            List<BibEntry> entries = new ArrayList<>();\n            if (jsonObject.has(\"results\")) {\n                JSONArray results = jsonObject.getJSONArray(\"results\");\n                for (int i = 0; i < results.length(); i++) {\n                    JSONObject bibJsonEntry = results.getJSONObject(i).getJSONObject(\"bibjson\");\n                    BibEntry entry = parseBibJSONtoBibtex(bibJsonEntry, preferences.getKeywordSeparator());\n                    entries.add(entry);\n                }\n            }\n            return entries;\n        };\n    }\n","date":"2018-07-13 18:23:05","endLine":190,"groupId":"1682","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getParser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/98/1ab58ea528d6931c7c469633915307a5453bd1.src","preCode":"    public Parser getParser() {\n        return inputStream -> {\n            String response = new BufferedReader(new InputStreamReader(inputStream)).lines().collect(Collectors.joining(OS.NEWLINE));\n            JSONObject jsonObject = new JSONObject(response);\n\n            List<BibEntry> entries = new ArrayList<>();\n            if (jsonObject.has(\"results\")) {\n                JSONArray results = jsonObject.getJSONArray(\"results\");\n                for (int i = 0; i < results.length(); i++) {\n                    JSONObject bibJsonEntry = results.getJSONObject(i).getJSONObject(\"bibjson\");\n                    BibEntry entry = parseBibJSONtoBibtex(bibJsonEntry, preferences.getKeywordSeparator());\n                    entries.add(entry);\n                }\n            }\n            return entries;\n        };\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/DOAJFetcher.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"B"},{"authorDate":"2018-07-13 18:23:05","commitOrder":1,"curCode":"    public Parser getParser() {\n        return inputStream -> {\n            String response = new BufferedReader(new InputStreamReader(inputStream)).lines().collect(Collectors.joining(OS.NEWLINE));\n            JSONObject jsonObject = new JSONObject(response);\n\n            List<BibEntry> entries = new ArrayList<>();\n            if (jsonObject.has(\"articles\")) {\n                JSONArray results = jsonObject.getJSONArray(\"articles\");\n                for (int i = 0; i < results.length(); i++) {\n                    JSONObject jsonEntry = results.getJSONObject(i);\n                    BibEntry entry = parseJsonRespone(jsonEntry, preferences.getKeywordSeparator());\n                    entries.add(entry);\n                }\n            }\n\n            return entries;\n        };\n    }\n","date":"2018-07-13 18:23:05","endLine":223,"groupId":"1682","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getParser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/dd/9a00ceab20ed85fdab5251b1fc07f4909d4c7f.src","preCode":"    public Parser getParser() {\n        return inputStream -> {\n            String response = new BufferedReader(new InputStreamReader(inputStream)).lines().collect(Collectors.joining(OS.NEWLINE));\n            JSONObject jsonObject = new JSONObject(response);\n\n            List<BibEntry> entries = new ArrayList<>();\n            if (jsonObject.has(\"articles\")) {\n                JSONArray results = jsonObject.getJSONArray(\"articles\");\n                for (int i = 0; i < results.length(); i++) {\n                    JSONObject jsonEntry = results.getJSONObject(i);\n                    BibEntry entry = parseJsonRespone(jsonEntry, preferences.getKeywordSeparator());\n                    entries.add(entry);\n                }\n            }\n\n            return entries;\n        };\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/IEEE.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"B"}],"commitId":"b56368c44da949722d6df1ea66f7d71653c67a97","commitMessage":"@@@Merge branch 'master' of https://github.com/JabRef/jabref\n","date":"2018-07-13 18:23:05","modifiedFileCount":"71","status":"B","submitter":"Tobias Diez"},{"authorTime":"2021-06-30 05:54:52","codes":[{"authorDate":"2018-07-13 18:23:05","commitOrder":2,"curCode":"    public Parser getParser() {\n        return inputStream -> {\n            String response = new BufferedReader(new InputStreamReader(inputStream)).lines().collect(Collectors.joining(OS.NEWLINE));\n            JSONObject jsonObject = new JSONObject(response);\n\n            List<BibEntry> entries = new ArrayList<>();\n            if (jsonObject.has(\"results\")) {\n                JSONArray results = jsonObject.getJSONArray(\"results\");\n                for (int i = 0; i < results.length(); i++) {\n                    JSONObject bibJsonEntry = results.getJSONObject(i).getJSONObject(\"bibjson\");\n                    BibEntry entry = parseBibJSONtoBibtex(bibJsonEntry, preferences.getKeywordSeparator());\n                    entries.add(entry);\n                }\n            }\n            return entries;\n        };\n    }\n","date":"2018-07-13 18:23:05","endLine":190,"groupId":"101009","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getParser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/98/1ab58ea528d6931c7c469633915307a5453bd1.src","preCode":"    public Parser getParser() {\n        return inputStream -> {\n            String response = new BufferedReader(new InputStreamReader(inputStream)).lines().collect(Collectors.joining(OS.NEWLINE));\n            JSONObject jsonObject = new JSONObject(response);\n\n            List<BibEntry> entries = new ArrayList<>();\n            if (jsonObject.has(\"results\")) {\n                JSONArray results = jsonObject.getJSONArray(\"results\");\n                for (int i = 0; i < results.length(); i++) {\n                    JSONObject bibJsonEntry = results.getJSONObject(i).getJSONObject(\"bibjson\");\n                    BibEntry entry = parseBibJSONtoBibtex(bibJsonEntry, preferences.getKeywordSeparator());\n                    entries.add(entry);\n                }\n            }\n            return entries;\n        };\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/DOAJFetcher.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"N"},{"authorDate":"2021-06-30 05:54:52","commitOrder":2,"curCode":"    public Parser getParser() {\n        return inputStream -> {\n            String response = new BufferedReader(new InputStreamReader(inputStream)).lines().collect(Collectors.joining(OS.NEWLINE));\n            JSONObject jsonObject = new JSONObject(response);\n\n            List<BibEntry> entries = new ArrayList<>();\n            if (jsonObject.has(\"articles\")) {\n                JSONArray results = jsonObject.getJSONArray(\"articles\");\n                for (int i = 0; i < results.length(); i++) {\n                    JSONObject jsonEntry = results.getJSONObject(i);\n                    BibEntry entry = parseJsonResponse(jsonEntry, preferences.getKeywordSeparator());\n                    boolean addEntry;\n                    \r\n                    \r\n                    \r\n                    if (entry.hasField(StandardField.YEAR)) {\n                        addEntry = entry.getField(StandardField.YEAR).filter(year -> {\n                            Integer yearAsInteger = Integer.valueOf(year);\n                            return\n                                    transformer.getStartYear().map(startYear -> yearAsInteger >= startYear).orElse(true) &&\n                                            transformer.getEndYear().map(endYear -> yearAsInteger <= endYear).orElse(true);\n                        }).map(x -> true).orElse(false);\n                    } else {\n                        addEntry = true;\n                    }\n                    if (addEntry) {\n                        entries.add(entry);\n                    }\n                }\n            }\n\n            return entries;\n        };\n    }\n","date":"2021-06-30 05:54:52","endLine":233,"groupId":"101009","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getParser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/77/b3c626cd06dfe6bceb1304ac1e26deae7209d8.src","preCode":"    public Parser getParser() {\n        return inputStream -> {\n            String response = new BufferedReader(new InputStreamReader(inputStream)).lines().collect(Collectors.joining(OS.NEWLINE));\n            JSONObject jsonObject = new JSONObject(response);\n\n            List<BibEntry> entries = new ArrayList<>();\n            if (jsonObject.has(\"articles\")) {\n                JSONArray results = jsonObject.getJSONArray(\"articles\");\n                for (int i = 0; i < results.length(); i++) {\n                    JSONObject jsonEntry = results.getJSONObject(i);\n                    BibEntry entry = parseJsonRespone(jsonEntry, preferences.getKeywordSeparator());\n                    entries.add(entry);\n                }\n            }\n\n            return entries;\n        };\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/IEEE.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"c168fbd4cea905b4aefd4b6221e1435ddcec1595","commitMessage":"@@@Fix IEEE test (#7852)\n\n","date":"2021-06-30 05:54:52","modifiedFileCount":"14","status":"M","submitter":"Oliver Kopp"}]
