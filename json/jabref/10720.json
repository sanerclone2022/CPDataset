[{"authorTime":"2017-02-17 05:41:47","codes":[{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public final void testPerformExport() throws Exception {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        String tempFilename = tempFile.getCanonicalPath();\n        List<BibEntry> entries = bibtexImporter.importDatabase(importFile, charset).getDatabase().getEntries();\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        modsExportFormat.performExport(databaseContext, tempFile.getPath(), charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilename)));\n\n        Assert.assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","date":"2017-02-17 05:41:47","endLine":89,"groupId":"12677","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPerformExport","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fe/bd1a744605f2981a40e9d68ac66473e87ea21d.src","preCode":"    public final void testPerformExport() throws Exception {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        String tempFilename = tempFile.getCanonicalPath();\n        List<BibEntry> entries = bibtexImporter.importDatabase(importFile, charset).getDatabase().getEntries();\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        modsExportFormat.performExport(databaseContext, tempFile.getPath(), charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilename)));\n\n        Assert.assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/ModsExportFormatTestFiles.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"},{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public final void testImportAsModsAndExportAsMods() throws Exception {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        String tempFilename = tempFile.getCanonicalPath();\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        List<BibEntry> entries = modsImporter.importDatabase(xmlFile, charset).getDatabase().getEntries();\n\n        modsExportFormat.performExport(databaseContext, tempFile.getPath(), charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilename)));\n\n        Assert.assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","date":"2017-02-17 05:41:47","endLine":114,"groupId":"2220","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testImportAsModsAndExportAsMods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fe/bd1a744605f2981a40e9d68ac66473e87ea21d.src","preCode":"    public final void testImportAsModsAndExportAsMods() throws Exception {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        String tempFilename = tempFile.getCanonicalPath();\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        List<BibEntry> entries = modsImporter.importDatabase(xmlFile, charset).getDatabase().getEntries();\n\n        modsExportFormat.performExport(databaseContext, tempFile.getPath(), charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilename)));\n\n        Assert.assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/ModsExportFormatTestFiles.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"}],"commitId":"ebbeb1d249edf7134abf92d24c2031ae54d19881","commitMessage":"@@@Merge branch 'net-sf-to-org-jabref'\n","date":"2017-02-17 05:41:47","modifiedFileCount":"1","status":"B","submitter":"Oliver Kopp"},{"authorTime":"2018-01-03 05:13:37","codes":[{"authorDate":"2018-01-03 05:13:37","commitOrder":2,"curCode":"    public final void testPerformExport() throws Exception {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        String tempFilename = tempFile.getCanonicalPath();\n        List<BibEntry> entries = bibtexImporter.importDatabase(importFile, charset).getDatabase().getEntries();\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        modsExportFormat.export(databaseContext, tempFile.toPath(), charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilename)));\n\n        Assert.assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","date":"2018-01-03 05:13:37","endLine":92,"groupId":"12677","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPerformExport","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/01/e2e87d23b593999778e6ebc2c11ea86a885bb2.src","preCode":"    public final void testPerformExport() throws Exception {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        String tempFilename = tempFile.getCanonicalPath();\n        List<BibEntry> entries = bibtexImporter.importDatabase(importFile, charset).getDatabase().getEntries();\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        modsExportFormat.performExport(databaseContext, tempFile.getPath(), charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilename)));\n\n        Assert.assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/ModsExportFormatTestFiles.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2018-01-03 05:13:37","commitOrder":2,"curCode":"    public final void testImportAsModsAndExportAsMods() throws Exception {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        String tempFilename = tempFile.getCanonicalPath();\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        List<BibEntry> entries = modsImporter.importDatabase(xmlFile, charset).getDatabase().getEntries();\n\n        modsExportFormat.export(databaseContext, tempFile.toPath(), charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilename)));\n\n        Assert.assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","date":"2018-01-03 05:13:37","endLine":117,"groupId":"2220","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testImportAsModsAndExportAsMods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/01/e2e87d23b593999778e6ebc2c11ea86a885bb2.src","preCode":"    public final void testImportAsModsAndExportAsMods() throws Exception {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        String tempFilename = tempFile.getCanonicalPath();\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        List<BibEntry> entries = modsImporter.importDatabase(xmlFile, charset).getDatabase().getEntries();\n\n        modsExportFormat.performExport(databaseContext, tempFile.getPath(), charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilename)));\n\n        Assert.assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/ModsExportFormatTestFiles.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"d38183928d7915bf33a5366af11d9dde3f695c5e","commitMessage":"@@@Refactor export code to fix #3576 (#3578)\n\n* Refactor exports to fix #3576\n\n* Add changelog\n\n* Fix build\n\n* Implement feedback and fix tests\n\n* Include feedback\n\n* Fix checkstyle...again...joy!\n","date":"2018-01-03 05:13:37","modifiedFileCount":"83","status":"M","submitter":"Tobias Diez"},{"authorTime":"2018-08-16 15:17:32","codes":[{"authorDate":"2018-08-16 15:17:32","commitOrder":3,"curCode":"    public final void testPerformExport(String filename) throws Exception {\n        importFile = Paths.get(ModsExportFormatTestFiles.class.getResource(filename).toURI());\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path tempFilename = tempFile.toAbsolutePath();\n        List<BibEntry> entries = bibtexImporter.importDatabase(importFile, charset).getDatabase().getEntries();\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        modsExportFormat.export(databaseContext, tempFile, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(tempFilename));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","date":"2018-08-16 15:17:32","endLine":89,"groupId":"8127","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPerformExport","params":"(Stringfilename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/df/ce7d716e17bdaa7558c97c7ca121f692e8fe09.src","preCode":"    public final void testPerformExport() throws Exception {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        String tempFilename = tempFile.getCanonicalPath();\n        List<BibEntry> entries = bibtexImporter.importDatabase(importFile, charset).getDatabase().getEntries();\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        modsExportFormat.export(databaseContext, tempFile.toPath(), charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilename)));\n\n        Assert.assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/ModsExportFormatTestFiles.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2018-08-16 15:17:32","commitOrder":3,"curCode":"    public final void testImportAsModsAndExportAsMods(String filename) throws Exception {\n        importFile = Paths.get(ModsExportFormatTestFiles.class.getResource(filename).toURI());\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path tempFilename = tempFile.toAbsolutePath();\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        List<BibEntry> entries = modsImporter.importDatabase(xmlFile, charset).getDatabase().getEntries();\n\n        modsExportFormat.export(databaseContext, tempFile, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(tempFilename));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","date":"2018-08-16 15:17:32","endLine":120,"groupId":"2220","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testImportAsModsAndExportAsMods","params":"(Stringfilename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/df/ce7d716e17bdaa7558c97c7ca121f692e8fe09.src","preCode":"    public final void testImportAsModsAndExportAsMods() throws Exception {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        String tempFilename = tempFile.getCanonicalPath();\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        List<BibEntry> entries = modsImporter.importDatabase(xmlFile, charset).getDatabase().getEntries();\n\n        modsExportFormat.export(databaseContext, tempFile.toPath(), charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilename)));\n\n        Assert.assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/ModsExportFormatTestFiles.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"a880addc0b9a45ad4461cc46ed261ea7df9c812a","commitMessage":"@@@Fix for issue 3959: migrate all tests to JUnit 5 (#4260)\n\n* Update migrate from JUnit 4 to JUnit 5\n\n* Update migrate from JUnit 4 to JUnit 5\n\n* Trying to change git accounts on my laptop\n\n* Trying to change git accounts on my laptop\n\n* Trying to change git accounts on my laptop\n\n* Using static assert methods.\n\n* Migrate from JUnit 4 to JUnit 5\n\n*AuthorListParameterTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*XmpUtilWriterTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*XmpUtilReaderTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*SearchQueryHighlightObservableTest.java\n\n    -did not use MockitoExtension.class as its official version has not been released yet.\n\n* Migrate from JUnit 4 to JUnit 5\n\n*CitationEntryTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*RTFCharsTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ProtectedTermsLoaderTest.java\n\n    -When running tests.  outputs in command line are different. I don't know if this change is correct.\n\n* Trying to change to a new branch.\n\n* commit_test\n\n* delete my meaningless txt\n\n* Migrate from JUnit 4 to JUnit 5\n\n*AuthorAndToSemicolonReplacerTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*FileDialogConfigurationTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*IntegrityCheckTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ModsExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*AutoSetFileLinksUtilTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*MsBibExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*CsvExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*HtmlExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*HtmlExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*RenamePdfCleanupTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ProtectedTermsListTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*MoveFilesCleanupTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ImporterTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n    *ExporterTest.java\n\n* Try to trigger the Travis CI build.\n\n* Try to trigger the Travis CI build.\n\n* Migrate from JUnit 4 to JUnit 5\n\n* Try to migrate from JUnit 4 to JUnit 5\n    *BibTeXMLExporterTestFiles.java\n        *Test.  not finished\n\n* Roll back to earlier version.\n    *BibTeXMLExporterTestFiles.java\n    *CleanupWorkerTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n    *ImportFormatReaderIntegrationTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n    *MimeTypeDetectorTest.java\n\n* failed to modify CleanupWorkerTest\n\n* failed to modify cleanupWorkTest\n\n* change cleanupWorkerTest to initial\n\n* ***DatabaseTest***\nMigrate from JUnit 4 to JUnit 5\n    *DBMSProcessorTest.java\n        *Wait for the Travis CI\n\n* ***DatabaseTest***\nMigrate from JUnit 4 to JUnit 5\n    *DBMSProcessorTest.java\n        *Wait for the Travis CI\n\n* Migrate from JUnit 4 to JUnit 5\n    *BibTeXMLExporterTestFiles.java\n    *MSBibExportFormatTestFiles.java\n    *All the GUI tests\n\n* Migrate from JUnit 4 to JUnit 5\n    *CleanupWorkerTest.java\n\n    *It seems that worker doesn't work in cleanupRenamePdfRenamesRelativeFile() and cleanupRelativePathsConvertAbsoluteToRelativePath()\n\n* Migrate JUnit 4 to JUnit 5.\n    *AuthorListParameterTest.java\n        -Follow up tp the newest.\n\n* Migrate JUnit 4 to JUnit 5.\n    *CleanupWorkerTest.java\n        -Delete my sout.\n\n* Migrate JUnit 4 to JUnit 5.\n    *EntryTypesTest.java\n        -Just some method name changes.\n\n* Fix part of CleanupWorkerTest.\n    -cleanupRelativePathsConvertAbsoluteToRelativePath() test passed.\n    -The cleanupRenamePdfRenamesRelativeFile() test still failed.\n\n* Migrate and sync.\n    *CiteKeyBasedFileFinderTest.java\n\n* Migrate.\n    *FileUtilTest.java\nPartly migrate.\n    *ModsExportFormatTestFiles.java\n\n* Fix CleanupWorkerTest.java\n\n* Fix .travis.yml\n\n* Remove unnecessary @Rule.\n    *IntegrityCheckTest.java\n\n* AuxParserTest.java\n\n* BibtexParserTest.java\n\n* EntryComparatorTest.java\n\n* Migrate JUnit 4 to JUnit 5 -------by 1160300229\n\n* Migrate. Some tasks by my team members.\n    *LinkedFileViewModelTest.java\n    *RecursiveTreeItemTest.java\n    *UndoTest.java\n    *EntryComparatorTest.java\n    *MakeLabelWithDatabaseTest.java\n    *MakeLabelWithoutDatabaseTest.java\n    *CleanupUrlFormatterTest.java\n    *BibtexParserTest.java\n    *MedlinePlainImporterTest.java\n    *SilverPlatterImporterTest.java\n    *EntryLinkCheckerTest.java\n    *LocalizationKeyTest.java\n    *JabRefPreferencesTest.java\n\n* Fix 1160300302's error.\n\n* Remove unnecessary \"public\".\n    *AuxParserTest.java\n\n* fix architecture test by removing check for public make some classes default visibility level\n\n* Fix \"cannot find files\" problem in JUnit 4.\n\n* Migrate to JUnit 5.\n    *BibTeXMLExporterTestFiles.java\n    *ModsExportFormatTestFiles.java\n    *MSBibExportFormatTestFiles.java\n\n* Change the slash direction.\n    *BibTeXMLExporterTestFiles.java\n    *ModsExportFormatTestFiles.java\n    *MSBibExportFormatTestFiles.java\n\n* fix resolving of paths in msbibexporterpath update junit and correct resource dirs in gradle\n\n* Fix the path issue in\n    *BibTeXMLExporterTestFiles.java\n    *ModsExportFormatTestFiles.java\n\n* Disable the failing exporter tests and change the build.gradle\n\n* Fix the parent folder issue by make every path to their child once.\n    -You can see in the code. :)\n\n* Fix some minor issues.\n    -Use the NIO methods in MoveFilesCleanupTest.java\n\n    -Use toAbsolutePath() method in RenamePdfCleanupTest.java\n\n    -Rename \"tempFilename\" to \"tempFilePath\" in BibTeXMLExporterTestFiles.java\n\n* include main/java in resources as well convert legalcy file methods to nio\n","date":"2018-08-16 15:17:32","modifiedFileCount":"59","status":"M","submitter":"Yichen Sun"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":4,"curCode":"    public final void testPerformExport(String filename) throws Exception {\n        importFile = Paths.get(ModsExportFormatTestFiles.class.getResource(filename).toURI());\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        List<BibEntry> entries = bibtexImporter.importDatabase(importFile, charset).getDatabase().getEntries();\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        exporter.export(databaseContext, tempFile, charset, entries);\n\n        assertEquals(\n                String.join(\"\\n\", Files.readAllLines(xmlFile)),\n                String.join(\"\\n\", Files.readAllLines(tempFile)));\n    }\n","date":"2019-08-02 15:20:10","endLine":79,"groupId":"1554","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPerformExport","params":"(Stringfilename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/05/3f9fbb3bce0c4895fea65d400b5d8566d42ff2.src","preCode":"    public final void testPerformExport(String filename) throws Exception {\n        importFile = Paths.get(ModsExportFormatTestFiles.class.getResource(filename).toURI());\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path tempFilename = tempFile.toAbsolutePath();\n        List<BibEntry> entries = bibtexImporter.importDatabase(importFile, charset).getDatabase().getEntries();\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        modsExportFormat.export(databaseContext, tempFile, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(tempFilename));\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                                       .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/ModsExportFormatTestFiles.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2019-08-02 15:20:10","commitOrder":4,"curCode":"    public final void testImportAsModsAndExportAsMods(String filename) throws Exception {\n        importFile = Paths.get(ModsExportFormatTestFiles.class.getResource(filename).toURI());\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        List<BibEntry> entries = modsImporter.importDatabase(xmlFile, charset).getDatabase().getEntries();\n\n        exporter.export(databaseContext, tempFile, charset, entries);\n\n        assertEquals(\n                String.join(\"\\n\", Files.readAllLines(xmlFile)),\n                String.join(\"\\n\", Files.readAllLines(tempFile)));\n    }\n","date":"2019-08-02 15:20:10","endLine":105,"groupId":"2220","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testImportAsModsAndExportAsMods","params":"(Stringfilename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/05/3f9fbb3bce0c4895fea65d400b5d8566d42ff2.src","preCode":"    public final void testImportAsModsAndExportAsMods(String filename) throws Exception {\n        importFile = Paths.get(ModsExportFormatTestFiles.class.getResource(filename).toURI());\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path tempFilename = tempFile.toAbsolutePath();\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        List<BibEntry> entries = modsImporter.importDatabase(xmlFile, charset).getDatabase().getEntries();\n\n        modsExportFormat.export(databaseContext, tempFile, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(tempFilename));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                                       .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/ModsExportFormatTestFiles.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"4b39b78e4afcd6c36b385f5c46f1d9a4eac2e29b","commitMessage":"@@@Move to extended enums for fields and entry types (#5148)\n\n* Introduce interface for fields\n\n* Continue using fields interface instead of strings\n\n* Introduce OrFields class\n\n* Move FieldProperty\n\n* Convert entry types to extended enum\n\n* Start fixing build\n\n* Fix build\n\n* Start fixing tests\n\n* Everything compiles again\n\n* Make model tests pass\n\n* Fix most tests\n\n* Fix build\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix checkstyle issues\n\n* Fix more tests\n\n* Fix more tests\n\n* Disable test that fails on CI\n\n* Disable test that fails on CI\n","date":"2019-08-02 15:20:10","modifiedFileCount":"439","status":"M","submitter":"Tobias Diez"},{"authorTime":"2019-08-25 23:26:12","codes":[{"authorDate":"2019-08-25 23:26:12","commitOrder":5,"curCode":"    public final void testPerformExport(String filename) throws Exception {\n        importFile = Paths.get(ModsExportFormatTestFiles.class.getResource(filename).toURI());\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        List<BibEntry> entries = bibtexImporter.importDatabase(importFile, charset).getDatabase().getEntries();\n        Path expectedFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        exporter.export(databaseContext, exportedFile, charset, entries);\n\n        assertEquals(\n                String.join(\"\\n\", Files.readAllLines(expectedFile)),\n                String.join(\"\\n\", Files.readAllLines(exportedFile)));\n    }\n","date":"2019-08-25 23:26:12","endLine":79,"groupId":"1554","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testPerformExport","params":"(Stringfilename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a0/8598fea183750707d4133f96991c8c21ee91ad.src","preCode":"    public final void testPerformExport(String filename) throws Exception {\n        importFile = Paths.get(ModsExportFormatTestFiles.class.getResource(filename).toURI());\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        List<BibEntry> entries = bibtexImporter.importDatabase(importFile, charset).getDatabase().getEntries();\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        exporter.export(databaseContext, tempFile, charset, entries);\n\n        assertEquals(\n                String.join(\"\\n\", Files.readAllLines(xmlFile)),\n                String.join(\"\\n\", Files.readAllLines(tempFile)));\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/ModsExportFormatTestFiles.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2019-08-25 23:26:12","commitOrder":5,"curCode":"    public final void testImportAsModsAndExportAsMods(String filename) throws Exception {\n        importFile = Paths.get(ModsExportFormatTestFiles.class.getResource(filename).toURI());\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        List<BibEntry> entries = modsImporter.importDatabase(xmlFile, charset).getDatabase().getEntries();\n\n        exporter.export(databaseContext, exportedFile, charset, entries);\n\n        assertEquals(\n                String.join(\"\\n\", Files.readAllLines(xmlFile)),\n                String.join(\"\\n\", Files.readAllLines(exportedFile)));\n    }\n","date":"2019-08-25 23:26:12","endLine":105,"groupId":"2220","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testImportAsModsAndExportAsMods","params":"(Stringfilename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a0/8598fea183750707d4133f96991c8c21ee91ad.src","preCode":"    public final void testImportAsModsAndExportAsMods(String filename) throws Exception {\n        importFile = Paths.get(ModsExportFormatTestFiles.class.getResource(filename).toURI());\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        List<BibEntry> entries = modsImporter.importDatabase(xmlFile, charset).getDatabase().getEntries();\n\n        exporter.export(databaseContext, tempFile, charset, entries);\n\n        assertEquals(\n                String.join(\"\\n\", Files.readAllLines(xmlFile)),\n                String.join(\"\\n\", Files.readAllLines(tempFile)));\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/ModsExportFormatTestFiles.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"f85c081e75e373820077e720fe9d48db6542704c","commitMessage":"@@@Merge pull request #3421 from JabRef/jdk9\n\nPort JabRef to Java 11","date":"2019-08-25 23:26:12","modifiedFileCount":"47","status":"M","submitter":"Oliver Kopp"},{"authorTime":"2020-04-30 17:10:13","codes":[{"authorDate":"2020-04-30 17:10:13","commitOrder":6,"curCode":"    public final void testPerformExport(String filename) throws Exception {\n        importFile = Path.of(ModsExportFormatTestFiles.class.getResource(filename).toURI());\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        List<BibEntry> entries = bibtexImporter.importDatabase(importFile, charset).getDatabase().getEntries();\n        Path expectedFile = Path.of(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        exporter.export(databaseContext, exportedFile, charset, entries);\n\n        assertEquals(\n                String.join(\"\\n\", Files.readAllLines(expectedFile)),\n                String.join(\"\\n\", Files.readAllLines(exportedFile)));\n    }\n","date":"2020-04-30 17:10:13","endLine":78,"groupId":"10720","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testPerformExport","params":"(Stringfilename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/58/20f344daa642bc540061d579b21b134108f5dc.src","preCode":"    public final void testPerformExport(String filename) throws Exception {\n        importFile = Paths.get(ModsExportFormatTestFiles.class.getResource(filename).toURI());\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        List<BibEntry> entries = bibtexImporter.importDatabase(importFile, charset).getDatabase().getEntries();\n        Path expectedFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        exporter.export(databaseContext, exportedFile, charset, entries);\n\n        assertEquals(\n                String.join(\"\\n\", Files.readAllLines(expectedFile)),\n                String.join(\"\\n\", Files.readAllLines(exportedFile)));\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/ModsExportFormatTestFiles.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-04-30 17:10:13","commitOrder":6,"curCode":"    public final void testImportAsModsAndExportAsMods(String filename) throws Exception {\n        importFile = Path.of(ModsExportFormatTestFiles.class.getResource(filename).toURI());\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path xmlFile = Path.of(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        List<BibEntry> entries = modsImporter.importDatabase(xmlFile, charset).getDatabase().getEntries();\n\n        exporter.export(databaseContext, exportedFile, charset, entries);\n\n        assertEquals(\n                String.join(\"\\n\", Files.readAllLines(xmlFile)),\n                String.join(\"\\n\", Files.readAllLines(exportedFile)));\n    }\n","date":"2020-04-30 17:10:13","endLine":104,"groupId":"10720","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testImportAsModsAndExportAsMods","params":"(Stringfilename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/58/20f344daa642bc540061d579b21b134108f5dc.src","preCode":"    public final void testImportAsModsAndExportAsMods(String filename) throws Exception {\n        importFile = Paths.get(ModsExportFormatTestFiles.class.getResource(filename).toURI());\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path xmlFile = Paths.get(ModsExportFormatTestFiles.class.getResource(xmlFileName).toURI());\n\n        List<BibEntry> entries = modsImporter.importDatabase(xmlFile, charset).getDatabase().getEntries();\n\n        exporter.export(databaseContext, exportedFile, charset, entries);\n\n        assertEquals(\n                String.join(\"\\n\", Files.readAllLines(xmlFile)),\n                String.join(\"\\n\", Files.readAllLines(exportedFile)));\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/ModsExportFormatTestFiles.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"862078a4db316cfd15bd77be68d3d2b010feab3b","commitMessage":"@@@Fixes #6357: File directory (#6377)\n\n* Fixes #6357: File directory\n\nBug was introduced in https://github.com/JabRef/jabref/commit/1b03f039aa4abf0812a3a8ae0ba248c08fdb39a3.\n\n* Fix tests\n\n* Replace Paths.get\n\n* Fix code style","date":"2020-04-30 17:10:13","modifiedFileCount":"110","status":"M","submitter":"Tobias Diez"}]
