[{"authorTime":"2020-06-04 18:52:52","codes":[{"authorDate":"2020-06-04 18:52:52","commitOrder":1,"curCode":"    public List<IntegrityMessage> check(BibEntry entry) {\n        Optional<String> citeKey = entry.getCiteKeyOptional();\n        if (citeKey.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        boolean isDuplicate = database.isDuplicateCiteKeyExisting(citeKey.get());\n        if (isDuplicate) {\n            return Collections.singletonList(\n                    new IntegrityMessage(Localization.lang(\"Duplicate citation key\"), entry, StandardField.KEY));\n        }\n        return Collections.emptyList();\n    }\n","date":"2020-06-04 18:52:52","endLine":34,"groupId":"1204","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"check","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/57/5b57510b7ad21d9c9b45a92e1fc52c20d795b8.src","preCode":"    public List<IntegrityMessage> check(BibEntry entry) {\n        Optional<String> citeKey = entry.getCiteKeyOptional();\n        if (citeKey.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        boolean isDuplicate = database.isDuplicateCiteKeyExisting(citeKey.get());\n        if (isDuplicate) {\n            return Collections.singletonList(\n                    new IntegrityMessage(Localization.lang(\"Duplicate citation key\"), entry, StandardField.KEY));\n        }\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/integrity/CitationKeyDuplicationChecker.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":22,"status":"B"},{"authorDate":"2020-06-04 18:52:52","commitOrder":1,"curCode":"    public List<IntegrityMessage> check(BibEntry entry) {\n        Optional<String> valuekey = entry.getCiteKeyOptional();\n        if (valuekey.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        String key = valuekey.get();\n\n        \r\n        String generatedKey = new CitationKeyGenerator(bibDatabaseContext, citationKeyPatternPreferences).generateKey(entry);\n\n        if (!Objects.equals(key, generatedKey)) {\n            return Collections.singletonList(new IntegrityMessage(\n                    Localization.lang(\"Citation key deviates from generated key\"), entry, InternalField.KEY_FIELD));\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2020-06-04 18:52:52","endLine":43,"groupId":"11859","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"check","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/c3/b70dc350e321938f033166790631daa407f2b4.src","preCode":"    public List<IntegrityMessage> check(BibEntry entry) {\n        Optional<String> valuekey = entry.getCiteKeyOptional();\n        if (valuekey.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        String key = valuekey.get();\n\n        \r\n        String generatedKey = new CitationKeyGenerator(bibDatabaseContext, citationKeyPatternPreferences).generateKey(entry);\n\n        if (!Objects.equals(key, generatedKey)) {\n            return Collections.singletonList(new IntegrityMessage(\n                    Localization.lang(\"Citation key deviates from generated key\"), entry, InternalField.KEY_FIELD));\n        }\n\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/integrity/CitationKeyDeviationChecker.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":26,"status":"B"}],"commitId":"7cc57474b7aa991ef6ea148d4030d4bb68ee69bf","commitMessage":"@@@Rename bibtexkey (#6545)\n\n* Reworded 'BibtexKey' to 'CitationKey'\n\n* Fixed merge errors.  renamed constants\n\n* Renamed forgotten package\n\n* Fixed overlooked enum names and added CHANGELOG.md entry","date":"2020-06-04 18:52:52","modifiedFileCount":"54","status":"B","submitter":"Carl Christian Snethlage"},{"authorTime":"2020-09-08 21:34:34","codes":[{"authorDate":"2020-09-08 21:34:34","commitOrder":2,"curCode":"    public List<IntegrityMessage> check(BibEntry entry) {\n        Optional<String> citeKey = entry.getCitationKey();\n        if (citeKey.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        boolean isDuplicate = database.isDuplicateCitationKeyExisting(citeKey.get());\n        if (isDuplicate) {\n            return Collections.singletonList(\n                    new IntegrityMessage(Localization.lang(\"Duplicate citation key\"), entry, StandardField.KEY));\n        }\n        return Collections.emptyList();\n    }\n","date":"2020-09-08 21:34:34","endLine":34,"groupId":"101059","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"check","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ae/222225e2693f77aeb518924ab9122018239986.src","preCode":"    public List<IntegrityMessage> check(BibEntry entry) {\n        Optional<String> citeKey = entry.getCiteKeyOptional();\n        if (citeKey.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        boolean isDuplicate = database.isDuplicateCiteKeyExisting(citeKey.get());\n        if (isDuplicate) {\n            return Collections.singletonList(\n                    new IntegrityMessage(Localization.lang(\"Duplicate citation key\"), entry, StandardField.KEY));\n        }\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/integrity/CitationKeyDuplicationChecker.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":22,"status":"M"},{"authorDate":"2020-09-08 21:34:34","commitOrder":2,"curCode":"    public List<IntegrityMessage> check(BibEntry entry) {\n        Optional<String> valuekey = entry.getCitationKey();\n        if (valuekey.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        String key = valuekey.get();\n\n        \r\n        String generatedKey = new CitationKeyGenerator(bibDatabaseContext, citationKeyPatternPreferences).generateKey(entry);\n\n        if (!Objects.equals(key, generatedKey)) {\n            return Collections.singletonList(new IntegrityMessage(\n                    Localization.lang(\"Citation key deviates from generated key\"), entry, InternalField.KEY_FIELD));\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2020-09-08 21:34:34","endLine":43,"groupId":"101059","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"check","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/47/d7bff811adbeb8d6e766333c9c7503c27af9eb.src","preCode":"    public List<IntegrityMessage> check(BibEntry entry) {\n        Optional<String> valuekey = entry.getCiteKeyOptional();\n        if (valuekey.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        String key = valuekey.get();\n\n        \r\n        String generatedKey = new CitationKeyGenerator(bibDatabaseContext, citationKeyPatternPreferences).generateKey(entry);\n\n        if (!Objects.equals(key, generatedKey)) {\n            return Collections.singletonList(new IntegrityMessage(\n                    Localization.lang(\"Citation key deviates from generated key\"), entry, InternalField.KEY_FIELD));\n        }\n\n        return Collections.emptyList();\n    }\n","realPath":"src/main/java/org/jabref/logic/integrity/CitationKeyDeviationChecker.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":26,"status":"M"}],"commitId":"6dec1747d8a1c89f6c62fc1d1939d88411f17eba","commitMessage":"@@@Complete rebranding of `bibtexkey` as `citationkey` (#6875)\n\n","date":"2020-09-08 21:34:34","modifiedFileCount":"127","status":"M","submitter":"Tobias Diez"}]
