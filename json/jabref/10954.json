[{"authorTime":"2017-02-17 05:41:47","codes":[{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public boolean quit() {\n        \r\n        \r\n        boolean close = true;\n\n        List<String> filenames = new ArrayList<>();\n        if (tabbedPane.getTabCount() > 0) {\n            for (int i = 0; i < tabbedPane.getTabCount(); i++) {\n                BibDatabaseContext context = getBasePanelAt(i).getBibDatabaseContext();\n\n                if (getBasePanelAt(i).isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n                    tabbedPane.setSelectedIndex(i);\n                    String filename = context.getDatabaseFile().map(File::getAbsolutePath).orElse(GUIGlobals.UNTITLED_TITLE);\n                    int answer = showSaveDialog(filename);\n\n                    if ((answer == JOptionPane.CANCEL_OPTION) ||\n                            (answer == JOptionPane.CLOSED_OPTION)) {\n                        return false;\n                    }\n                    if (answer == JOptionPane.YES_OPTION) {\n                        \r\n                        try {\n                            \r\n                            SaveDatabaseAction saveAction = new SaveDatabaseAction(getCurrentBasePanel());\n                            saveAction.runCommand();\n                            if (saveAction.isCanceled() || !saveAction.isSuccess()) {\n                                \r\n                                \r\n                                output(Localization.lang(\"Unable to save library\"));\n                                close = false;\n                            }\n                        } catch (Throwable ex) {\n                            \r\n                            \r\n                            close = false;\n                            break;\n                        }\n                    }\n                } else if (context.getLocation() == DatabaseLocation.SHARED) {\n                    context.convertToLocalDatabase();\n                    context.getDBMSSynchronizer().closeSharedDatabase();\n                    context.clearDBMSSynchronizer();\n                }\n                AutosaveManager.shutdown(context);\n                BackupManager.shutdown(context);\n                context.getDatabaseFile().map(File::getAbsolutePath).ifPresent(filenames::add);\n            }\n        }\n\n        if (close) {\n            for (int i = 0; i < tabbedPane.getTabCount(); i++) {\n                if (getBasePanelAt(i).isSaving()) {\n                    \r\n                    WaitForSaveOperation w = new WaitForSaveOperation(this);\n                    w.show(); \r\n                    if (w.canceled()) {\n                        return false; \r\n                    }\n                }\n            }\n\n            tearDownJabRef(filenames);\n            return true;\n        }\n\n        return false;\n    }\n","date":"2017-02-17 05:41:47","endLine":847,"groupId":"1829","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"quit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/db/dad1539bf43b561971d7ce29852919f6da6a35.src","preCode":"    public boolean quit() {\n        \r\n        \r\n        boolean close = true;\n\n        List<String> filenames = new ArrayList<>();\n        if (tabbedPane.getTabCount() > 0) {\n            for (int i = 0; i < tabbedPane.getTabCount(); i++) {\n                BibDatabaseContext context = getBasePanelAt(i).getBibDatabaseContext();\n\n                if (getBasePanelAt(i).isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n                    tabbedPane.setSelectedIndex(i);\n                    String filename = context.getDatabaseFile().map(File::getAbsolutePath).orElse(GUIGlobals.UNTITLED_TITLE);\n                    int answer = showSaveDialog(filename);\n\n                    if ((answer == JOptionPane.CANCEL_OPTION) ||\n                            (answer == JOptionPane.CLOSED_OPTION)) {\n                        return false;\n                    }\n                    if (answer == JOptionPane.YES_OPTION) {\n                        \r\n                        try {\n                            \r\n                            SaveDatabaseAction saveAction = new SaveDatabaseAction(getCurrentBasePanel());\n                            saveAction.runCommand();\n                            if (saveAction.isCanceled() || !saveAction.isSuccess()) {\n                                \r\n                                \r\n                                output(Localization.lang(\"Unable to save library\"));\n                                close = false;\n                            }\n                        } catch (Throwable ex) {\n                            \r\n                            \r\n                            close = false;\n                            break;\n                        }\n                    }\n                } else if (context.getLocation() == DatabaseLocation.SHARED) {\n                    context.convertToLocalDatabase();\n                    context.getDBMSSynchronizer().closeSharedDatabase();\n                    context.clearDBMSSynchronizer();\n                }\n                AutosaveManager.shutdown(context);\n                BackupManager.shutdown(context);\n                context.getDatabaseFile().map(File::getAbsolutePath).ifPresent(filenames::add);\n            }\n        }\n\n        if (close) {\n            for (int i = 0; i < tabbedPane.getTabCount(); i++) {\n                if (getBasePanelAt(i).isSaving()) {\n                    \r\n                    WaitForSaveOperation w = new WaitForSaveOperation(this);\n                    w.show(); \r\n                    if (w.canceled()) {\n                        return false; \r\n                    }\n                }\n            }\n\n            tearDownJabRef(filenames);\n            return true;\n        }\n\n        return false;\n    }\n","realPath":"src/main/java/org/jabref/gui/JabRefFrame.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":781,"status":"B"},{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    private void closeTab(BasePanel panel) {\n        \r\n        if (panel == null) {\n            return;\n        }\n\n        BibDatabaseContext context = panel.getBibDatabaseContext();\n\n        if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n            if (confirmClose(panel)) {\n                removeTab(panel);\n            }\n        } else if (context.getLocation() == DatabaseLocation.SHARED) {\n            context.convertToLocalDatabase();\n            context.getDBMSSynchronizer().closeSharedDatabase();\n            context.clearDBMSSynchronizer();\n            removeTab(panel);\n        } else {\n            removeTab(panel);\n        }\n        AutosaveManager.shutdown(context);\n        BackupManager.shutdown(context);\n    }\n","date":"2017-02-17 05:41:47","endLine":1772,"groupId":"5611","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"closeTab","params":"(BasePanelpanel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/db/dad1539bf43b561971d7ce29852919f6da6a35.src","preCode":"    private void closeTab(BasePanel panel) {\n        \r\n        if (panel == null) {\n            return;\n        }\n\n        BibDatabaseContext context = panel.getBibDatabaseContext();\n\n        if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n            if (confirmClose(panel)) {\n                removeTab(panel);\n            }\n        } else if (context.getLocation() == DatabaseLocation.SHARED) {\n            context.convertToLocalDatabase();\n            context.getDBMSSynchronizer().closeSharedDatabase();\n            context.clearDBMSSynchronizer();\n            removeTab(panel);\n        } else {\n            removeTab(panel);\n        }\n        AutosaveManager.shutdown(context);\n        BackupManager.shutdown(context);\n    }\n","realPath":"src/main/java/org/jabref/gui/JabRefFrame.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":1750,"status":"B"}],"commitId":"ebbeb1d249edf7134abf92d24c2031ae54d19881","commitMessage":"@@@Merge branch 'net-sf-to-org-jabref'\n","date":"2017-02-17 05:41:47","modifiedFileCount":"1","status":"B","submitter":"Oliver Kopp"},{"authorTime":"2017-02-17 05:41:47","codes":[{"authorDate":"2018-06-04 05:46:01","commitOrder":2,"curCode":"    public boolean quit() {\n        \r\n        List<String> filenames = new ArrayList<>();\n        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {\n            BasePanel panel = getBasePanelAt(i);\n            BibDatabaseContext context = panel.getBibDatabaseContext();\n\n            if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n                tabbedPane.getSelectionModel().select(i);\n                if (!confirmClose(panel)) {\n                    return false;\n                }\n            } else if (context.getLocation() == DatabaseLocation.SHARED) {\n                context.convertToLocalDatabase();\n                context.getDBMSSynchronizer().closeSharedDatabase();\n                context.clearDBMSSynchronizer();\n            }\n            AutosaveManager.shutdown(context);\n            BackupManager.shutdown(context);\n            context.getDatabaseFile().map(File::getAbsolutePath).ifPresent(filenames::add);\n        }\n\n        \r\n        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {\n            if (getBasePanelAt(i).isSaving()) {\n                \r\n                WaitForSaveOperation w = new WaitForSaveOperation(this);\n                w.show(); \r\n                if (w.canceled()) {\n                    return false; \r\n                }\n            }\n        }\n\n        \r\n        tearDownJabRef(filenames);\n        Platform.exit();\n        return true;\n    }\n","date":"2018-06-04 05:46:01","endLine":503,"groupId":"2961","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"quit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fe/47af976ce7a746a41102e8c49dd71927cd4442.src","preCode":"    public boolean quit() {\n        \r\n        \r\n        boolean close = true;\n\n        List<String> filenames = new ArrayList<>();\n        if (tabbedPane.getTabCount() > 0) {\n            for (int i = 0; i < tabbedPane.getTabCount(); i++) {\n                BibDatabaseContext context = getBasePanelAt(i).getBibDatabaseContext();\n\n                if (getBasePanelAt(i).isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n                    tabbedPane.setSelectedIndex(i);\n                    String filename = context.getDatabaseFile().map(File::getAbsolutePath).orElse(GUIGlobals.UNTITLED_TITLE);\n                    int answer = showSaveDialog(filename);\n\n                    if ((answer == JOptionPane.CANCEL_OPTION) ||\n                            (answer == JOptionPane.CLOSED_OPTION)) {\n                        return false;\n                    }\n                    if (answer == JOptionPane.YES_OPTION) {\n                        \r\n                        try {\n                            \r\n                            SaveDatabaseAction saveAction = new SaveDatabaseAction(getCurrentBasePanel());\n                            saveAction.runCommand();\n                            if (saveAction.isCanceled() || !saveAction.isSuccess()) {\n                                \r\n                                \r\n                                output(Localization.lang(\"Unable to save library\"));\n                                close = false;\n                            }\n                        } catch (Throwable ex) {\n                            \r\n                            \r\n                            close = false;\n                            break;\n                        }\n                    }\n                } else if (context.getLocation() == DatabaseLocation.SHARED) {\n                    context.convertToLocalDatabase();\n                    context.getDBMSSynchronizer().closeSharedDatabase();\n                    context.clearDBMSSynchronizer();\n                }\n                AutosaveManager.shutdown(context);\n                BackupManager.shutdown(context);\n                context.getDatabaseFile().map(File::getAbsolutePath).ifPresent(filenames::add);\n            }\n        }\n\n        if (close) {\n            for (int i = 0; i < tabbedPane.getTabCount(); i++) {\n                if (getBasePanelAt(i).isSaving()) {\n                    \r\n                    WaitForSaveOperation w = new WaitForSaveOperation(this);\n                    w.show(); \r\n                    if (w.canceled()) {\n                        return false; \r\n                    }\n                }\n            }\n\n            tearDownJabRef(filenames);\n            return true;\n        }\n\n        return false;\n    }\n","realPath":"src/main/java/org/jabref/gui/JabRefFrame.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":465,"status":"M"},{"authorDate":"2017-02-17 05:41:47","commitOrder":2,"curCode":"    private void closeTab(BasePanel panel) {\n        \r\n        if (panel == null) {\n            return;\n        }\n\n        BibDatabaseContext context = panel.getBibDatabaseContext();\n\n        if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n            if (confirmClose(panel)) {\n                removeTab(panel);\n            }\n        } else if (context.getLocation() == DatabaseLocation.SHARED) {\n            context.convertToLocalDatabase();\n            context.getDBMSSynchronizer().closeSharedDatabase();\n            context.clearDBMSSynchronizer();\n            removeTab(panel);\n        } else {\n            removeTab(panel);\n        }\n        AutosaveManager.shutdown(context);\n        BackupManager.shutdown(context);\n    }\n","date":"2017-02-17 05:41:47","endLine":1772,"groupId":"5611","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"closeTab","params":"(BasePanelpanel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/db/dad1539bf43b561971d7ce29852919f6da6a35.src","preCode":"    private void closeTab(BasePanel panel) {\n        \r\n        if (panel == null) {\n            return;\n        }\n\n        BibDatabaseContext context = panel.getBibDatabaseContext();\n\n        if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n            if (confirmClose(panel)) {\n                removeTab(panel);\n            }\n        } else if (context.getLocation() == DatabaseLocation.SHARED) {\n            context.convertToLocalDatabase();\n            context.getDBMSSynchronizer().closeSharedDatabase();\n            context.clearDBMSSynchronizer();\n            removeTab(panel);\n        } else {\n            removeTab(panel);\n        }\n        AutosaveManager.shutdown(context);\n        BackupManager.shutdown(context);\n    }\n","realPath":"src/main/java/org/jabref/gui/JabRefFrame.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":1750,"status":"N"}],"commitId":"a989aa42246c4dcf6eadc147d2f612de44a07b94","commitMessage":"@@@Merge remote-tracking branch 'origin/maintable-beta'\n\n# Conflicts:\n#\tsrc/main/java/org/jabref/gui/exporter/ExportAction.java\n#\tsrc/main/java/org/jabref/gui/exporter/ExportToClipboardAction.java\n#\tsrc/main/java/org/jabref/gui/exporter/SaveDatabaseAction.java\n#\tsrc/main/java/org/jabref/gui/importer/ImportFormats.java\n#\tsrc/main/java/org/jabref/gui/importer/actions/OpenDatabaseAction.java\n#\tsrc/main/java/org/jabref/gui/openoffice/StyleSelectDialog.java\n#\tsrc/main/java/org/jabref/gui/preftabs/PreferencesDialog.java\n#\tsrc/main/java/org/jabref/gui/protectedterms/NewProtectedTermsFileDialog.java\n#\tsrc/main/java/org/jabref/gui/shared/ConnectToSharedDatabaseDialog.java\n","date":"2018-06-04 05:46:01","modifiedFileCount":"316","status":"M","submitter":"Oliver Kopp"},{"authorTime":"2017-02-17 05:41:47","codes":[{"authorDate":"2019-03-07 16:04:37","commitOrder":3,"curCode":"    public boolean quit() {\n        \r\n        List<String> filenames = new ArrayList<>();\n        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {\n            BasePanel panel = getBasePanelAt(i);\n            BibDatabaseContext context = panel.getBibDatabaseContext();\n\n            if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n                tabbedPane.getSelectionModel().select(i);\n                if (!confirmClose(panel)) {\n                    return false;\n                }\n            } else if (context.getLocation() == DatabaseLocation.SHARED) {\n                context.convertToLocalDatabase();\n                context.getDBMSSynchronizer().closeSharedDatabase();\n                context.clearDBMSSynchronizer();\n            }\n            AutosaveManager.shutdown(context);\n            BackupManager.shutdown(context);\n            context.getDatabaseFile().map(File::getAbsolutePath).ifPresent(filenames::add);\n        }\n\n        WaitForSaveFinishedDialog waitForSaveFinishedDialog = new WaitForSaveFinishedDialog(dialogService);\n        waitForSaveFinishedDialog.showAndWait(getBasePanelList());\n\n        \r\n        tearDownJabRef(filenames);\n        Platform.exit();\n        return true;\n    }\n","date":"2019-03-07 16:04:37","endLine":510,"groupId":"2961","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"quit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/81/290cfaab29e5322c894710e9b5b98b368eba9f.src","preCode":"    public boolean quit() {\n        \r\n        List<String> filenames = new ArrayList<>();\n        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {\n            BasePanel panel = getBasePanelAt(i);\n            BibDatabaseContext context = panel.getBibDatabaseContext();\n\n            if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n                tabbedPane.getSelectionModel().select(i);\n                if (!confirmClose(panel)) {\n                    return false;\n                }\n            } else if (context.getLocation() == DatabaseLocation.SHARED) {\n                context.convertToLocalDatabase();\n                context.getDBMSSynchronizer().closeSharedDatabase();\n                context.clearDBMSSynchronizer();\n            }\n            AutosaveManager.shutdown(context);\n            BackupManager.shutdown(context);\n            context.getDatabaseFile().map(File::getAbsolutePath).ifPresent(filenames::add);\n        }\n\n        \r\n        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {\n            if (getBasePanelAt(i).isSaving()) {\n                \r\n                WaitForSaveOperation w = new WaitForSaveOperation(this);\n                w.show(); \r\n                if (w.canceled()) {\n                    return false; \r\n                }\n            }\n        }\n\n        \r\n        tearDownJabRef(filenames);\n        Platform.exit();\n        return true;\n    }\n","realPath":"src/main/java/org/jabref/gui/JabRefFrame.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":481,"status":"M"},{"authorDate":"2017-02-17 05:41:47","commitOrder":3,"curCode":"    private void closeTab(BasePanel panel) {\n        \r\n        if (panel == null) {\n            return;\n        }\n\n        BibDatabaseContext context = panel.getBibDatabaseContext();\n\n        if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n            if (confirmClose(panel)) {\n                removeTab(panel);\n            }\n        } else if (context.getLocation() == DatabaseLocation.SHARED) {\n            context.convertToLocalDatabase();\n            context.getDBMSSynchronizer().closeSharedDatabase();\n            context.clearDBMSSynchronizer();\n            removeTab(panel);\n        } else {\n            removeTab(panel);\n        }\n        AutosaveManager.shutdown(context);\n        BackupManager.shutdown(context);\n    }\n","date":"2017-02-17 05:41:47","endLine":1772,"groupId":"5611","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"closeTab","params":"(BasePanelpanel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/db/dad1539bf43b561971d7ce29852919f6da6a35.src","preCode":"    private void closeTab(BasePanel panel) {\n        \r\n        if (panel == null) {\n            return;\n        }\n\n        BibDatabaseContext context = panel.getBibDatabaseContext();\n\n        if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n            if (confirmClose(panel)) {\n                removeTab(panel);\n            }\n        } else if (context.getLocation() == DatabaseLocation.SHARED) {\n            context.convertToLocalDatabase();\n            context.getDBMSSynchronizer().closeSharedDatabase();\n            context.clearDBMSSynchronizer();\n            removeTab(panel);\n        } else {\n            removeTab(panel);\n        }\n        AutosaveManager.shutdown(context);\n        BackupManager.shutdown(context);\n    }\n","realPath":"src/main/java/org/jabref/gui/JabRefFrame.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":1750,"status":"N"}],"commitId":"2f7aa7a6305a1dd760e08d35f8954ffcb1a9faa0","commitMessage":"@@@Convert \"wait for save\" dialog to JavaFX (#4697)\n\n","date":"2019-03-07 16:04:37","modifiedFileCount":"1","status":"M","submitter":"Tobias Diez"},{"authorTime":"2019-03-26 23:46:14","codes":[{"authorDate":"2019-03-07 16:04:37","commitOrder":4,"curCode":"    public boolean quit() {\n        \r\n        List<String> filenames = new ArrayList<>();\n        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {\n            BasePanel panel = getBasePanelAt(i);\n            BibDatabaseContext context = panel.getBibDatabaseContext();\n\n            if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n                tabbedPane.getSelectionModel().select(i);\n                if (!confirmClose(panel)) {\n                    return false;\n                }\n            } else if (context.getLocation() == DatabaseLocation.SHARED) {\n                context.convertToLocalDatabase();\n                context.getDBMSSynchronizer().closeSharedDatabase();\n                context.clearDBMSSynchronizer();\n            }\n            AutosaveManager.shutdown(context);\n            BackupManager.shutdown(context);\n            context.getDatabaseFile().map(File::getAbsolutePath).ifPresent(filenames::add);\n        }\n\n        WaitForSaveFinishedDialog waitForSaveFinishedDialog = new WaitForSaveFinishedDialog(dialogService);\n        waitForSaveFinishedDialog.showAndWait(getBasePanelList());\n\n        \r\n        tearDownJabRef(filenames);\n        Platform.exit();\n        return true;\n    }\n","date":"2019-03-07 16:04:37","endLine":510,"groupId":"2961","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"quit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/81/290cfaab29e5322c894710e9b5b98b368eba9f.src","preCode":"    public boolean quit() {\n        \r\n        List<String> filenames = new ArrayList<>();\n        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {\n            BasePanel panel = getBasePanelAt(i);\n            BibDatabaseContext context = panel.getBibDatabaseContext();\n\n            if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n                tabbedPane.getSelectionModel().select(i);\n                if (!confirmClose(panel)) {\n                    return false;\n                }\n            } else if (context.getLocation() == DatabaseLocation.SHARED) {\n                context.convertToLocalDatabase();\n                context.getDBMSSynchronizer().closeSharedDatabase();\n                context.clearDBMSSynchronizer();\n            }\n            AutosaveManager.shutdown(context);\n            BackupManager.shutdown(context);\n            context.getDatabaseFile().map(File::getAbsolutePath).ifPresent(filenames::add);\n        }\n\n        WaitForSaveFinishedDialog waitForSaveFinishedDialog = new WaitForSaveFinishedDialog(dialogService);\n        waitForSaveFinishedDialog.showAndWait(getBasePanelList());\n\n        \r\n        tearDownJabRef(filenames);\n        Platform.exit();\n        return true;\n    }\n","realPath":"src/main/java/org/jabref/gui/JabRefFrame.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":481,"status":"N"},{"authorDate":"2019-03-26 23:46:14","commitOrder":4,"curCode":"    private void closeTab(BasePanel panel) {\n        \r\n        if (panel == null) {\n            return;\n        }\n\n        BibDatabaseContext context = panel.getBibDatabaseContext();\n\n        if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n            if (confirmClose(panel)) {\n                removeTab(panel);\n            } else {\n                return;\n            }\n        } else if (context.getLocation() == DatabaseLocation.SHARED) {\n            context.convertToLocalDatabase();\n            context.getDBMSSynchronizer().closeSharedDatabase();\n            context.clearDBMSSynchronizer();\n            removeTab(panel);\n        } else {\n            removeTab(panel);\n        }\n        AutosaveManager.shutdown(context);\n        BackupManager.shutdown(context);\n    }\n","date":"2019-03-26 23:46:14","endLine":1360,"groupId":"9552","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"closeTab","params":"(BasePanelpanel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/1c/f05c35116defb1489dd6664f321f40f822ef8e.src","preCode":"    private void closeTab(BasePanel panel) {\n        \r\n        if (panel == null) {\n            return;\n        }\n\n        BibDatabaseContext context = panel.getBibDatabaseContext();\n\n        if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n            if (confirmClose(panel)) {\n                removeTab(panel);\n            }\n        } else if (context.getLocation() == DatabaseLocation.SHARED) {\n            context.convertToLocalDatabase();\n            context.getDBMSSynchronizer().closeSharedDatabase();\n            context.clearDBMSSynchronizer();\n            removeTab(panel);\n        } else {\n            removeTab(panel);\n        }\n        AutosaveManager.shutdown(context);\n        BackupManager.shutdown(context);\n    }\n","realPath":"src/main/java/org/jabref/gui/JabRefFrame.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":1336,"status":"M"}],"commitId":"83c8022697bef2756d238ad401adc6697ada467f","commitMessage":"@@@Fix closing of library not handling backup and autosave manager shutdown (#4794)\n\n","date":"2019-03-26 23:46:14","modifiedFileCount":"1","status":"M","submitter":"Yash  Kothari"},{"authorTime":"2019-03-26 23:46:14","codes":[{"authorDate":"2020-03-17 13:46:07","commitOrder":5,"curCode":"    public boolean quit() {\n        \r\n        List<String> filenames = new ArrayList<>();\n        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {\n            BasePanel panel = getBasePanelAt(i);\n            BibDatabaseContext context = panel.getBibDatabaseContext();\n\n            if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n                tabbedPane.getSelectionModel().select(i);\n                if (!confirmClose(panel)) {\n                    return false;\n                }\n            } else if (context.getLocation() == DatabaseLocation.SHARED) {\n                context.convertToLocalDatabase();\n                context.getDBMSSynchronizer().closeSharedDatabase();\n                context.clearDBMSSynchronizer();\n            }\n            AutosaveManager.shutdown(context);\n            BackupManager.shutdown(context);\n            context.getDatabasePath().map(Path::toAbsolutePath).map(Path::toString).ifPresent(filenames::add);\n        }\n\n        WaitForSaveFinishedDialog waitForSaveFinishedDialog = new WaitForSaveFinishedDialog(dialogService);\n        waitForSaveFinishedDialog.showAndWait(getBasePanelList());\n\n        \r\n        tearDownJabRef(filenames);\n        Platform.exit();\n        return true;\n    }\n","date":"2020-03-17 13:46:07","endLine":406,"groupId":"2961","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"quit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ca/09b4c1af880c23ab6a2ef2ca5fdf697295d2b5.src","preCode":"    public boolean quit() {\n        \r\n        List<String> filenames = new ArrayList<>();\n        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {\n            BasePanel panel = getBasePanelAt(i);\n            BibDatabaseContext context = panel.getBibDatabaseContext();\n\n            if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n                tabbedPane.getSelectionModel().select(i);\n                if (!confirmClose(panel)) {\n                    return false;\n                }\n            } else if (context.getLocation() == DatabaseLocation.SHARED) {\n                context.convertToLocalDatabase();\n                context.getDBMSSynchronizer().closeSharedDatabase();\n                context.clearDBMSSynchronizer();\n            }\n            AutosaveManager.shutdown(context);\n            BackupManager.shutdown(context);\n            context.getDatabaseFile().map(File::getAbsolutePath).ifPresent(filenames::add);\n        }\n\n        WaitForSaveFinishedDialog waitForSaveFinishedDialog = new WaitForSaveFinishedDialog(dialogService);\n        waitForSaveFinishedDialog.showAndWait(getBasePanelList());\n\n        \r\n        tearDownJabRef(filenames);\n        Platform.exit();\n        return true;\n    }\n","realPath":"src/main/java/org/jabref/gui/JabRefFrame.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":377,"status":"M"},{"authorDate":"2019-03-26 23:46:14","commitOrder":5,"curCode":"    private void closeTab(BasePanel panel) {\n        \r\n        if (panel == null) {\n            return;\n        }\n\n        BibDatabaseContext context = panel.getBibDatabaseContext();\n\n        if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n            if (confirmClose(panel)) {\n                removeTab(panel);\n            } else {\n                return;\n            }\n        } else if (context.getLocation() == DatabaseLocation.SHARED) {\n            context.convertToLocalDatabase();\n            context.getDBMSSynchronizer().closeSharedDatabase();\n            context.clearDBMSSynchronizer();\n            removeTab(panel);\n        } else {\n            removeTab(panel);\n        }\n        AutosaveManager.shutdown(context);\n        BackupManager.shutdown(context);\n    }\n","date":"2019-03-26 23:46:14","endLine":1360,"groupId":"9552","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"closeTab","params":"(BasePanelpanel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/1c/f05c35116defb1489dd6664f321f40f822ef8e.src","preCode":"    private void closeTab(BasePanel panel) {\n        \r\n        if (panel == null) {\n            return;\n        }\n\n        BibDatabaseContext context = panel.getBibDatabaseContext();\n\n        if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n            if (confirmClose(panel)) {\n                removeTab(panel);\n            } else {\n                return;\n            }\n        } else if (context.getLocation() == DatabaseLocation.SHARED) {\n            context.convertToLocalDatabase();\n            context.getDBMSSynchronizer().closeSharedDatabase();\n            context.clearDBMSSynchronizer();\n            removeTab(panel);\n        } else {\n            removeTab(panel);\n        }\n        AutosaveManager.shutdown(context);\n        BackupManager.shutdown(context);\n    }\n","realPath":"src/main/java/org/jabref/gui/JabRefFrame.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":1336,"status":"N"}],"commitId":"1b03f039aa4abf0812a3a8ae0ba248c08fdb39a3","commitMessage":"@@@Remove obsolete usage of File in DatabaseContext (#6135)\n\n","date":"2020-03-17 13:46:07","modifiedFileCount":"6","status":"M","submitter":"Oliver Kopp"},{"authorTime":"2020-03-22 17:27:07","codes":[{"authorDate":"2020-03-22 17:27:07","commitOrder":6,"curCode":"    public boolean quit() {\n        \r\n        List<String> filenames = new ArrayList<>();\n        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {\n            BasePanel panel = getBasePanelAt(i);\n            final BibDatabaseContext context = panel.getBibDatabaseContext();\n\n            if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n                tabbedPane.getSelectionModel().select(i);\n                if (!confirmClose(panel)) {\n                    return false;\n                }\n            } else if (context.getLocation() == DatabaseLocation.SHARED) {\n                context.convertToLocalDatabase();\n                context.getDBMSSynchronizer().closeSharedDatabase();\n                context.clearDBMSSynchronizer();\n            }\n            AutosaveManager.shutdown(context);\n            BackupManager.shutdown(context);\n            context.getDatabasePath().map(Path::toAbsolutePath).map(Path::toString).ifPresent(filenames::add);\n        }\n\n        WaitForSaveFinishedDialog waitForSaveFinishedDialog = new WaitForSaveFinishedDialog(dialogService);\n        waitForSaveFinishedDialog.showAndWait(getBasePanelList());\n\n        \r\n        tearDownJabRef(filenames);\n        Platform.exit();\n        return true;\n    }\n","date":"2020-03-22 17:27:07","endLine":406,"groupId":"2961","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"quit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/07/1ceeab8819510c39f8fc12e875e7efa18e5772.src","preCode":"    public boolean quit() {\n        \r\n        List<String> filenames = new ArrayList<>();\n        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {\n            BasePanel panel = getBasePanelAt(i);\n            BibDatabaseContext context = panel.getBibDatabaseContext();\n\n            if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n                tabbedPane.getSelectionModel().select(i);\n                if (!confirmClose(panel)) {\n                    return false;\n                }\n            } else if (context.getLocation() == DatabaseLocation.SHARED) {\n                context.convertToLocalDatabase();\n                context.getDBMSSynchronizer().closeSharedDatabase();\n                context.clearDBMSSynchronizer();\n            }\n            AutosaveManager.shutdown(context);\n            BackupManager.shutdown(context);\n            context.getDatabasePath().map(Path::toAbsolutePath).map(Path::toString).ifPresent(filenames::add);\n        }\n\n        WaitForSaveFinishedDialog waitForSaveFinishedDialog = new WaitForSaveFinishedDialog(dialogService);\n        waitForSaveFinishedDialog.showAndWait(getBasePanelList());\n\n        \r\n        tearDownJabRef(filenames);\n        Platform.exit();\n        return true;\n    }\n","realPath":"src/main/java/org/jabref/gui/JabRefFrame.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":377,"status":"M"},{"authorDate":"2020-03-22 17:27:07","commitOrder":6,"curCode":"    private void closeTab(BasePanel panel) {\n        \r\n        if (panel == null) {\n            return;\n        }\n\n        final BibDatabaseContext context = panel.getBibDatabaseContext();\n\n        if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n            if (confirmClose(panel)) {\n                removeTab(panel);\n            } else {\n                return;\n            }\n        } else if (context.getLocation() == DatabaseLocation.SHARED) {\n            context.convertToLocalDatabase();\n            context.getDBMSSynchronizer().closeSharedDatabase();\n            context.clearDBMSSynchronizer();\n            removeTab(panel);\n        } else {\n            removeTab(panel);\n        }\n        AutosaveManager.shutdown(context);\n        BackupManager.shutdown(context);\n    }\n","date":"2020-03-22 17:27:07","endLine":1174,"groupId":"9552","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"closeTab","params":"(BasePanelpanel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/07/1ceeab8819510c39f8fc12e875e7efa18e5772.src","preCode":"    private void closeTab(BasePanel panel) {\n        \r\n        if (panel == null) {\n            return;\n        }\n\n        BibDatabaseContext context = panel.getBibDatabaseContext();\n\n        if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n            if (confirmClose(panel)) {\n                removeTab(panel);\n            } else {\n                return;\n            }\n        } else if (context.getLocation() == DatabaseLocation.SHARED) {\n            context.convertToLocalDatabase();\n            context.getDBMSSynchronizer().closeSharedDatabase();\n            context.clearDBMSSynchronizer();\n            removeTab(panel);\n        } else {\n            removeTab(panel);\n        }\n        AutosaveManager.shutdown(context);\n        BackupManager.shutdown(context);\n    }\n","realPath":"src/main/java/org/jabref/gui/JabRefFrame.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":1150,"status":"M"}],"commitId":"a38d7bd22059d3b6ebe2d50707c275dd75f7e2bc","commitMessage":"@@@Fix: Only if `.sav` file has changes a recovery dialog is shown (#6116)\n\nWhen JabRef finds a `.sav` file without changes.  there is no dialog asking for acceptance of changes anymore.\n\nCo-authored-by: Stefan Kolb <stefan-kolb@web.de>\n","date":"2020-03-22 17:27:07","modifiedFileCount":"7","status":"M","submitter":"Oliver Kopp"},{"authorTime":"2020-03-22 17:27:07","codes":[{"authorDate":"2020-05-12 20:23:05","commitOrder":7,"curCode":"    public boolean quit() {\n        \r\n        \r\n\r\n\r\n\n        if (stateManager.getAnyTaskRunning().getValue()) {\n            Optional<ButtonType> shouldClose = dialogService.showBackgroundProgressDialogAndWait(\n                    Localization.lang(\"Please wait...\"),\n                    Localization.lang(\"Waiting for background tasks to finish. Quit anyway?\"),\n                    stateManager\n            );\n            if (!(shouldClose.isPresent() && shouldClose.get() == ButtonType.YES)) {\n                return false;\n            }\n        }\n\n        \r\n        List<String> filenames = new ArrayList<>();\n        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {\n            BasePanel panel = getBasePanelAt(i);\n            final BibDatabaseContext context = panel.getBibDatabaseContext();\n\n            if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n                tabbedPane.getSelectionModel().select(i);\n                if (!confirmClose(panel)) {\n                    return false;\n                }\n            } else if (context.getLocation() == DatabaseLocation.SHARED) {\n                context.convertToLocalDatabase();\n                context.getDBMSSynchronizer().closeSharedDatabase();\n                context.clearDBMSSynchronizer();\n            }\n            AutosaveManager.shutdown(context);\n            BackupManager.shutdown(context);\n            context.getDatabasePath().map(Path::toAbsolutePath).map(Path::toString).ifPresent(filenames::add);\n        }\n\n        WaitForSaveFinishedDialog waitForSaveFinishedDialog = new WaitForSaveFinishedDialog(dialogService);\n        waitForSaveFinishedDialog.showAndWait(getBasePanelList());\n\n        \r\n        tearDownJabRef(filenames);\n        Platform.exit();\n        return true;\n    }\n","date":"2020-05-12 20:23:05","endLine":449,"groupId":"2961","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"quit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/67/d97243523cf438a062d8856d6a30491a6cbb0f.src","preCode":"    public boolean quit() {\n        \r\n        List<String> filenames = new ArrayList<>();\n        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {\n            BasePanel panel = getBasePanelAt(i);\n            final BibDatabaseContext context = panel.getBibDatabaseContext();\n\n            if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n                tabbedPane.getSelectionModel().select(i);\n                if (!confirmClose(panel)) {\n                    return false;\n                }\n            } else if (context.getLocation() == DatabaseLocation.SHARED) {\n                context.convertToLocalDatabase();\n                context.getDBMSSynchronizer().closeSharedDatabase();\n                context.clearDBMSSynchronizer();\n            }\n            AutosaveManager.shutdown(context);\n            BackupManager.shutdown(context);\n            context.getDatabasePath().map(Path::toAbsolutePath).map(Path::toString).ifPresent(filenames::add);\n        }\n\n        WaitForSaveFinishedDialog waitForSaveFinishedDialog = new WaitForSaveFinishedDialog(dialogService);\n        waitForSaveFinishedDialog.showAndWait(getBasePanelList());\n\n        \r\n        tearDownJabRef(filenames);\n        Platform.exit();\n        return true;\n    }\n","realPath":"src/main/java/org/jabref/gui/JabRefFrame.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":404,"status":"M"},{"authorDate":"2020-03-22 17:27:07","commitOrder":7,"curCode":"    private void closeTab(BasePanel panel) {\n        \r\n        if (panel == null) {\n            return;\n        }\n\n        final BibDatabaseContext context = panel.getBibDatabaseContext();\n\n        if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n            if (confirmClose(panel)) {\n                removeTab(panel);\n            } else {\n                return;\n            }\n        } else if (context.getLocation() == DatabaseLocation.SHARED) {\n            context.convertToLocalDatabase();\n            context.getDBMSSynchronizer().closeSharedDatabase();\n            context.clearDBMSSynchronizer();\n            removeTab(panel);\n        } else {\n            removeTab(panel);\n        }\n        AutosaveManager.shutdown(context);\n        BackupManager.shutdown(context);\n    }\n","date":"2020-03-22 17:27:07","endLine":1174,"groupId":"9552","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"closeTab","params":"(BasePanelpanel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/07/1ceeab8819510c39f8fc12e875e7efa18e5772.src","preCode":"    private void closeTab(BasePanel panel) {\n        \r\n        if (panel == null) {\n            return;\n        }\n\n        final BibDatabaseContext context = panel.getBibDatabaseContext();\n\n        if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n            if (confirmClose(panel)) {\n                removeTab(panel);\n            } else {\n                return;\n            }\n        } else if (context.getLocation() == DatabaseLocation.SHARED) {\n            context.convertToLocalDatabase();\n            context.getDBMSSynchronizer().closeSharedDatabase();\n            context.clearDBMSSynchronizer();\n            removeTab(panel);\n        } else {\n            removeTab(panel);\n        }\n        AutosaveManager.shutdown(context);\n        BackupManager.shutdown(context);\n    }\n","realPath":"src/main/java/org/jabref/gui/JabRefFrame.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":1150,"status":"N"}],"commitId":"4423d27999393da42a12b68d4a45009272599b7f","commitMessage":"@@@Implement task progress indicator (and dialog) in the toolbar (#6443)\n\n* First draft of a task progress dialog\n\nImplemented a task progress dialog using a TaskProgressView.\nTasks show up.  but without info. Neither the progress nor title and\nmessage are shown.\n\n* Added progress indicator in JabRefFrame\n\nThere now i a progress indicator at the rightmost postition of JabRefs\ntoolbar. It shows the average progress of all running background tasks.\nClicking it will show a TaskProgressDialog.\n\nstill looks ugly and the binding to the average progress does not seem\nto be working.\n\n* Beautified progressindicator and added localization\n\n* Changed to Task<?> in the Tasklist.\n\nThis makes the view work with download tasks for example. Most other\ntasks are still shown without title.  message (because none are set) and\nprogress.\nAlso.  there are a lot of tasks somehow.\n\nThe progress indicator in the main view still does not work as I can't\nget the bindings to work.\n\n* Resolved typing issues for bindings\n\nThe progress indicator is now successfully bound to the list of tasks.\nHowever.  tasks do not show up in the dialogue any more.\n\n* Converted list of Properties to tasks for listbind\n\nWhen using ObjectProperties in the list of tasks.  we can use EasyBind to\nconvert the list into a list of tasks which in turn can be bound to the\nlist of tasks in the view.\n\nWith this.  the basic functionality works. There is a progress indicator\nin the toolbar that shows the average progress of all running background\ntasks. It is indeterminate if any task has indeterminate progress and\nshows 100% if no tasks are running.\n\nClicking it opens an overview of all running tasks and their progress.\n\nCurrently.  there are many tasks running all the time. The only tasks\nthat were adapted for this to be pretty are the download tasks.  and they\nare also still missing an icon.\n\n* New Tasks are first in the list\n\n* Use a PopOver instead of a dialog\n\n* Only show download tasks\n\n* Better messages for download tasks\n\nThese are shorter and therefore the task progress view does not need a\nhorizontal scroll bar.\n\n* Type Witnesses are not needed any more.\n\n* Added extractor to task list\n\n* Made anyTaskRunningBinding public\n\nFor consistency with other variables\n\n* Removed ObjectProperty wrapping\n\n* NOT WORKING: quit dialogue\n\n* Cleanup\n\n* Fix in dialog service\n\nMake showProgressDialogAndWait actually not only show but also wait.\n\n* Add extractor for isRunning\n\n* More informative (and working) quit dialog\n\nThe dialog that is shown when the user quits JabRef during ongoing\nbackground tasks now shows which background tasks are still running.\n\nWhen all of them complete or the user chooses to quit anyway.  JabRef\nquits.\n\nThe user can also cancel the dialog. In that case.  the dialog closes and\nJobRef remains running.\n\n* Added graphics callback\n\n* Fixed some style issues\n\nThere are still some ImportOrder errors though where I can see no issue.\n\n* Registered the save task as background task\n\nThis makes the dialog that pops up if background tasks are running wait\nfor pending saves.\n\n* Revert \"Registered the save task as background task\"\n\nThis reverts commit d7442cc2247772b6e54bcb68cea947a5a2a604bc.\n\n* Added note on dialog-order upon close\n\n* Updated changelog\n\n* Fixed style\n\n* Quickfix for resizing indicator when indeterminate\n\nSet the pref-width when the indicator is determinate to keep the\nindeterminate state from making the indicator wider.\n\n* Styled dialog waiting for background tasks\n\n* Minor style fix\n\n* Removed Globals from DefaultTaskExecutor\n\nAddresses https://github.com/JabRef/jabref/pull/6443#discussion_r422981410\n\n* Removed WaitForBackgroundtasksFinishedDialog\n\nMore in line with the other JabRef dialogs\nAddresses https://github.com/JabRef/jabref/pull/6443#discussion_r422977336\n\n* Made Bindings in StateManager private\n\nAddresses https://github.com/JabRef/jabref/pull/6443#discussion_r422975104\n\n* Added tooltip to progress indicator\n\nAddresses https://github.com/JabRef/jabref/pull/6443#discussion_r422973356\n\n* Not working: own styleclass for toolbar progress indicator\n\nTries to address https://github.com/JabRef/jabref/pull/6443#discussion_r422971198\n\n* Changed callback to method in BackgroundTask\n\nAddresses https://github.com/JabRef/jabref/pull/6443#discussion_r422980468\n\n* Fixed progress-indicator styling\n\n* Improve getIcon method\n\n* Well.  I said hopefully ;-)\n\n* Revert \"Well.  I said hopefully ;-)\"\n\nThis reverts commit 0557c678a657e6315dcb2c2c1c98d90b45a76e08.\n\n* Revert \"Improve getIcon method\"\n\nThis reverts commit 478ee059e5606251361d663b939284f19bc834e4.\n\n* Improved readability in JabRefFrame\n\nCo-authored-by: Benedikt Tutzer <benedikt.tutzer@gmail.com>\nCo-authored-by: Tobias Diez <tobiasdiez@gmx.de>","date":"2020-05-12 20:23:05","modifiedFileCount":"9","status":"M","submitter":"Benedikt Tutzer"},{"authorTime":"2020-03-22 17:27:07","codes":[{"authorDate":"2020-08-18 14:22:03","commitOrder":8,"curCode":"    public boolean quit() {\n        \r\n        \r\n\r\n\r\n\n        if (stateManager.getAnyTaskRunning().getValue()) {\n            Optional<ButtonType> shouldClose = dialogService.showBackgroundProgressDialogAndWait(\n                    Localization.lang(\"Please wait...\"),\n                    Localization.lang(\"Waiting for background tasks to finish. Quit anyway?\"),\n                    stateManager\n            );\n            if (!(shouldClose.isPresent() && (shouldClose.get() == ButtonType.YES))) {\n                return false;\n            }\n        }\n\n        \r\n        List<String> filenames = new ArrayList<>();\n        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {\n            BasePanel panel = getBasePanelAt(i);\n            final BibDatabaseContext context = panel.getBibDatabaseContext();\n\n            if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n                tabbedPane.getSelectionModel().select(i);\n                if (!confirmClose(panel)) {\n                    return false;\n                }\n            } else if (context.getLocation() == DatabaseLocation.SHARED) {\n                context.convertToLocalDatabase();\n                context.getDBMSSynchronizer().closeSharedDatabase();\n                context.clearDBMSSynchronizer();\n            }\n            AutosaveManager.shutdown(context);\n            BackupManager.shutdown(context);\n            context.getDatabasePath().map(Path::toAbsolutePath).map(Path::toString).ifPresent(filenames::add);\n        }\n\n        WaitForSaveFinishedDialog waitForSaveFinishedDialog = new WaitForSaveFinishedDialog(dialogService);\n        waitForSaveFinishedDialog.showAndWait(getBasePanelList());\n\n        \r\n        tearDownJabRef(filenames);\n        Platform.exit();\n        return true;\n    }\n","date":"2020-08-18 14:22:03","endLine":456,"groupId":"2961","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"quit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/00/7b95c7b212870656410f8c26512a5d343b11d4.src","preCode":"    public boolean quit() {\n        \r\n        \r\n\r\n\r\n\n        if (stateManager.getAnyTaskRunning().getValue()) {\n            Optional<ButtonType> shouldClose = dialogService.showBackgroundProgressDialogAndWait(\n                    Localization.lang(\"Please wait...\"),\n                    Localization.lang(\"Waiting for background tasks to finish. Quit anyway?\"),\n                    stateManager\n            );\n            if (!(shouldClose.isPresent() && shouldClose.get() == ButtonType.YES)) {\n                return false;\n            }\n        }\n\n        \r\n        List<String> filenames = new ArrayList<>();\n        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {\n            BasePanel panel = getBasePanelAt(i);\n            final BibDatabaseContext context = panel.getBibDatabaseContext();\n\n            if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n                tabbedPane.getSelectionModel().select(i);\n                if (!confirmClose(panel)) {\n                    return false;\n                }\n            } else if (context.getLocation() == DatabaseLocation.SHARED) {\n                context.convertToLocalDatabase();\n                context.getDBMSSynchronizer().closeSharedDatabase();\n                context.clearDBMSSynchronizer();\n            }\n            AutosaveManager.shutdown(context);\n            BackupManager.shutdown(context);\n            context.getDatabasePath().map(Path::toAbsolutePath).map(Path::toString).ifPresent(filenames::add);\n        }\n\n        WaitForSaveFinishedDialog waitForSaveFinishedDialog = new WaitForSaveFinishedDialog(dialogService);\n        waitForSaveFinishedDialog.showAndWait(getBasePanelList());\n\n        \r\n        tearDownJabRef(filenames);\n        Platform.exit();\n        return true;\n    }\n","realPath":"src/main/java/org/jabref/gui/JabRefFrame.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"M"},{"authorDate":"2020-03-22 17:27:07","commitOrder":8,"curCode":"    private void closeTab(BasePanel panel) {\n        \r\n        if (panel == null) {\n            return;\n        }\n\n        final BibDatabaseContext context = panel.getBibDatabaseContext();\n\n        if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n            if (confirmClose(panel)) {\n                removeTab(panel);\n            } else {\n                return;\n            }\n        } else if (context.getLocation() == DatabaseLocation.SHARED) {\n            context.convertToLocalDatabase();\n            context.getDBMSSynchronizer().closeSharedDatabase();\n            context.clearDBMSSynchronizer();\n            removeTab(panel);\n        } else {\n            removeTab(panel);\n        }\n        AutosaveManager.shutdown(context);\n        BackupManager.shutdown(context);\n    }\n","date":"2020-03-22 17:27:07","endLine":1174,"groupId":"9552","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"closeTab","params":"(BasePanelpanel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/07/1ceeab8819510c39f8fc12e875e7efa18e5772.src","preCode":"    private void closeTab(BasePanel panel) {\n        \r\n        if (panel == null) {\n            return;\n        }\n\n        final BibDatabaseContext context = panel.getBibDatabaseContext();\n\n        if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n            if (confirmClose(panel)) {\n                removeTab(panel);\n            } else {\n                return;\n            }\n        } else if (context.getLocation() == DatabaseLocation.SHARED) {\n            context.convertToLocalDatabase();\n            context.getDBMSSynchronizer().closeSharedDatabase();\n            context.clearDBMSSynchronizer();\n            removeTab(panel);\n        } else {\n            removeTab(panel);\n        }\n        AutosaveManager.shutdown(context);\n        BackupManager.shutdown(context);\n    }\n","realPath":"src/main/java/org/jabref/gui/JabRefFrame.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":1150,"status":"N"}],"commitId":"ec5371281cd4d53f6c0bea9c84ebf20073f618ca","commitMessage":"@@@Fix entry gets deleted after aux import (#6746)\n\n* Fix entry gets deleted after aux import\n\nSet changed flag on clone also for Misc entry type.  because otherwise it equals the default entry type and no change is triggered which results in the entry not beeing written to the database on save\nFixes  #6405\n\nSimplify gui code\n\n* add changelog\n\n* fix checkstyle shit\n\n* copy serialization on clone\n\n* Update CHANGELOG.md\n\nCo-authored-by: Tobias Diez <tobiasdiez@gmx.de>\n\n* Cosmetic change\n\n* Fix clone\n\n* Mark each entry changed to trigger a \"proper\" write by JabRef\n\nCo-authored-by: Tobias Diez <tobiasdiez@gmx.de>\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>","date":"2020-08-18 14:22:03","modifiedFileCount":"7","status":"M","submitter":"Christoph"},{"authorTime":"2020-10-21 05:27:30","codes":[{"authorDate":"2020-10-21 05:27:30","commitOrder":9,"curCode":"    public boolean quit() {\n        \r\n        \r\n\r\n\r\n\n        if (stateManager.getAnyTaskRunning().getValue()) {\n            Optional<ButtonType> shouldClose = dialogService.showBackgroundProgressDialogAndWait(\n                    Localization.lang(\"Please wait...\"),\n                    Localization.lang(\"Waiting for background tasks to finish. Quit anyway?\"),\n                    stateManager\n            );\n            if (!(shouldClose.isPresent() && (shouldClose.get() == ButtonType.YES))) {\n                return false;\n            }\n        }\n\n        \r\n        List<String> filenames = new ArrayList<>();\n        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {\n            LibraryTab libraryTab = getLibraryTabAt(i);\n            final BibDatabaseContext context = libraryTab.getBibDatabaseContext();\n\n            if (libraryTab.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n                tabbedPane.getSelectionModel().select(i);\n                if (!confirmClose(libraryTab)) {\n                    return false;\n                }\n            } else if (context.getLocation() == DatabaseLocation.SHARED) {\n                context.convertToLocalDatabase();\n                context.getDBMSSynchronizer().closeSharedDatabase();\n                context.clearDBMSSynchronizer();\n            }\n            AutosaveManager.shutdown(context);\n            BackupManager.shutdown(context);\n            context.getDatabasePath().map(Path::toAbsolutePath).map(Path::toString).ifPresent(filenames::add);\n        }\n\n        WaitForSaveFinishedDialog waitForSaveFinishedDialog = new WaitForSaveFinishedDialog(dialogService);\n        waitForSaveFinishedDialog.showAndWait(getLibraryTabs());\n\n        \r\n        tearDownJabRef(filenames);\n        Platform.exit();\n        return true;\n    }\n","date":"2020-10-21 05:27:30","endLine":420,"groupId":"10954","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"quit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/48/55a16e3ca5a8085f21e425370b8ab55ac24417.src","preCode":"    public boolean quit() {\n        \r\n        \r\n\r\n\r\n\n        if (stateManager.getAnyTaskRunning().getValue()) {\n            Optional<ButtonType> shouldClose = dialogService.showBackgroundProgressDialogAndWait(\n                    Localization.lang(\"Please wait...\"),\n                    Localization.lang(\"Waiting for background tasks to finish. Quit anyway?\"),\n                    stateManager\n            );\n            if (!(shouldClose.isPresent() && (shouldClose.get() == ButtonType.YES))) {\n                return false;\n            }\n        }\n\n        \r\n        List<String> filenames = new ArrayList<>();\n        for (int i = 0; i < tabbedPane.getTabs().size(); i++) {\n            BasePanel panel = getBasePanelAt(i);\n            final BibDatabaseContext context = panel.getBibDatabaseContext();\n\n            if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n                tabbedPane.getSelectionModel().select(i);\n                if (!confirmClose(panel)) {\n                    return false;\n                }\n            } else if (context.getLocation() == DatabaseLocation.SHARED) {\n                context.convertToLocalDatabase();\n                context.getDBMSSynchronizer().closeSharedDatabase();\n                context.clearDBMSSynchronizer();\n            }\n            AutosaveManager.shutdown(context);\n            BackupManager.shutdown(context);\n            context.getDatabasePath().map(Path::toAbsolutePath).map(Path::toString).ifPresent(filenames::add);\n        }\n\n        WaitForSaveFinishedDialog waitForSaveFinishedDialog = new WaitForSaveFinishedDialog(dialogService);\n        waitForSaveFinishedDialog.showAndWait(getBasePanelList());\n\n        \r\n        tearDownJabRef(filenames);\n        Platform.exit();\n        return true;\n    }\n","realPath":"src/main/java/org/jabref/gui/JabRefFrame.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"M"},{"authorDate":"2020-10-21 05:27:30","commitOrder":9,"curCode":"    private void closeTab(LibraryTab libraryTab) {\n        \r\n        if (libraryTab == null) {\n            return;\n        }\n\n        final BibDatabaseContext context = libraryTab.getBibDatabaseContext();\n\n        if (libraryTab.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n            if (confirmClose(libraryTab)) {\n                removeTab(libraryTab);\n            } else {\n                return;\n            }\n        } else if (context.getLocation() == DatabaseLocation.SHARED) {\n            context.convertToLocalDatabase();\n            context.getDBMSSynchronizer().closeSharedDatabase();\n            context.clearDBMSSynchronizer();\n            removeTab(libraryTab);\n        } else {\n            removeTab(libraryTab);\n        }\n        AutosaveManager.shutdown(context);\n        BackupManager.shutdown(context);\n    }\n","date":"2020-10-21 05:27:30","endLine":1155,"groupId":"10954","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"closeTab","params":"(LibraryTablibraryTab)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/48/55a16e3ca5a8085f21e425370b8ab55ac24417.src","preCode":"    private void closeTab(BasePanel panel) {\n        \r\n        if (panel == null) {\n            return;\n        }\n\n        final BibDatabaseContext context = panel.getBibDatabaseContext();\n\n        if (panel.isModified() && (context.getLocation() == DatabaseLocation.LOCAL)) {\n            if (confirmClose(panel)) {\n                removeTab(panel);\n            } else {\n                return;\n            }\n        } else if (context.getLocation() == DatabaseLocation.SHARED) {\n            context.convertToLocalDatabase();\n            context.getDBMSSynchronizer().closeSharedDatabase();\n            context.clearDBMSSynchronizer();\n            removeTab(panel);\n        } else {\n            removeTab(panel);\n        }\n        AutosaveManager.shutdown(context);\n        BackupManager.shutdown(context);\n    }\n","realPath":"src/main/java/org/jabref/gui/JabRefFrame.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":1131,"status":"M"}],"commitId":"4cf2fb06d3d876d2043f65ca0e51c3c4185fd05c","commitMessage":"@@@Fix setting of title (and simplify BasePanel to LibraryTab) (#6129)\n\nCo-authored-by: Carl Christian Snethlage <50491877+calixtus@users.noreply.github.com>","date":"2020-10-21 05:27:30","modifiedFileCount":"66","status":"M","submitter":"Oliver Kopp"}]
