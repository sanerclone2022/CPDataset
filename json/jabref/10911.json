[{"authorTime":"2020-12-07 01:48:14","codes":[{"authorDate":"2020-10-21 05:27:30","commitOrder":2,"curCode":"    public LibraryTab(JabRefFrame frame,\n                      PreferencesService preferencesService,\n                      BibDatabaseContext bibDatabaseContext,\n                      ExternalFileTypes externalFileTypes) {\n        this.frame = Objects.requireNonNull(frame);\n        this.bibDatabaseContext = Objects.requireNonNull(bibDatabaseContext);\n        this.externalFileTypes = Objects.requireNonNull(externalFileTypes);\n        this.undoManager = frame.getUndoManager();\n        this.dialogService = frame.getDialogService();\n        this.preferencesService = Objects.requireNonNull(preferencesService);\n\n        bibDatabaseContext.getDatabase().registerListener(this);\n        bibDatabaseContext.getMetaData().registerListener(this);\n\n        this.sidePaneManager = frame.getSidePaneManager();\n        this.tableModel = new MainTableDataModel(getBibDatabaseContext(), preferencesService, Globals.stateManager);\n\n        citationStyleCache = new CitationStyleCache(bibDatabaseContext);\n        annotationCache = new FileAnnotationCache(bibDatabaseContext, preferencesService.getFilePreferences());\n\n        setupMainPanel();\n        setupAutoCompletion();\n\n        this.getDatabase().registerListener(new SearchListener());\n        this.getDatabase().registerListener(new EntriesRemovedListener());\n\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(new GroupTreeListener());\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(this);\n\n        this.getDatabase().registerListener(new UpdateTimestampListener(preferencesService));\n\n        this.entryEditor = new EntryEditor(this, externalFileTypes);\n\n        Platform.runLater(() -> {\n            EasyBind.subscribe(changedProperty, this::updateTabTitle);\n            Globals.stateManager.getOpenDatabases().addListener((ListChangeListener<BibDatabaseContext>) c ->\n                    updateTabTitle(changedProperty.getValue()));\n        });\n    }\n","date":"2020-10-21 05:27:30","endLine":141,"groupId":"200","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"LibraryTab","params":"(JabRefFrameframe@PreferencesServicepreferencesService@BibDatabaseContextbibDatabaseContext@ExternalFileTypesexternalFileTypes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/2c/b7174d95cb186f0cc106ca1c0571b691d68dcb.src","preCode":"    public LibraryTab(JabRefFrame frame,\n                      PreferencesService preferencesService,\n                      BibDatabaseContext bibDatabaseContext,\n                      ExternalFileTypes externalFileTypes) {\n        this.frame = Objects.requireNonNull(frame);\n        this.bibDatabaseContext = Objects.requireNonNull(bibDatabaseContext);\n        this.externalFileTypes = Objects.requireNonNull(externalFileTypes);\n        this.undoManager = frame.getUndoManager();\n        this.dialogService = frame.getDialogService();\n        this.preferencesService = Objects.requireNonNull(preferencesService);\n\n        bibDatabaseContext.getDatabase().registerListener(this);\n        bibDatabaseContext.getMetaData().registerListener(this);\n\n        this.sidePaneManager = frame.getSidePaneManager();\n        this.tableModel = new MainTableDataModel(getBibDatabaseContext(), preferencesService, Globals.stateManager);\n\n        citationStyleCache = new CitationStyleCache(bibDatabaseContext);\n        annotationCache = new FileAnnotationCache(bibDatabaseContext, preferencesService.getFilePreferences());\n\n        setupMainPanel();\n        setupAutoCompletion();\n\n        this.getDatabase().registerListener(new SearchListener());\n        this.getDatabase().registerListener(new EntriesRemovedListener());\n\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(new GroupTreeListener());\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(this);\n\n        this.getDatabase().registerListener(new UpdateTimestampListener(preferencesService));\n\n        this.entryEditor = new EntryEditor(this, externalFileTypes);\n\n        Platform.runLater(() -> {\n            EasyBind.subscribe(changedProperty, this::updateTabTitle);\n            Globals.stateManager.getOpenDatabases().addListener((ListChangeListener<BibDatabaseContext>) c ->\n                    updateTabTitle(changedProperty.getValue()));\n        });\n    }\n","realPath":"src/main/java/org/jabref/gui/LibraryTab.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"NB"},{"authorDate":"2020-12-07 01:48:14","commitOrder":2,"curCode":"    public void feedData(BibDatabaseContext bibDatabaseContext) {\n        cleanUp();\n\n        this.bibDatabaseContext = Objects.requireNonNull(bibDatabaseContext);\n\n        bibDatabaseContext.getDatabase().registerListener(this);\n        bibDatabaseContext.getMetaData().registerListener(this);\n\n        this.tableModel = new MainTableDataModel(getBibDatabaseContext(), preferencesService, Globals.stateManager);\n        citationStyleCache = new CitationStyleCache(bibDatabaseContext);\n        annotationCache = new FileAnnotationCache(bibDatabaseContext, preferencesService.getFilePreferences());\n\n        setupMainPanel();\n        setupAutoCompletion();\n\n        this.getDatabase().registerListener(new SearchListener());\n        this.getDatabase().registerListener(new EntriesRemovedListener());\n\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(new GroupTreeListener());\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(this);\n\n        this.getDatabase().registerListener(new UpdateTimestampListener(preferencesService));\n\n        this.entryEditor = new EntryEditor(this, externalFileTypes);\n\n        Platform.runLater(() -> {\n            EasyBind.subscribe(changedProperty, this::updateTabTitle);\n            Globals.stateManager.getOpenDatabases().addListener((ListChangeListener<BibDatabaseContext>) c ->\n                    updateTabTitle(changedProperty.getValue()));\n        });\n\n        if (isDatabaseReadyForAutoSave(bibDatabaseContext)) {\n            AutosaveManager autoSaver = AutosaveManager.start(bibDatabaseContext);\n            autoSaver.registerListener(new AutosaveUiManager(this));\n        }\n\n        BackupManager.start(this.bibDatabaseContext, Globals.entryTypesManager, Globals.prefs);\n    }\n","date":"2020-12-07 01:48:14","endLine":237,"groupId":"4404","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"feedData","params":"(BibDatabaseContextbibDatabaseContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/b8/f1f8aabf574d4ae72d3900b1e8ba80ff4b6e97.src","preCode":"    public void feedData(BibDatabaseContext bibDatabaseContext) {\n        cleanUp();\n\n        this.bibDatabaseContext = Objects.requireNonNull(bibDatabaseContext);\n\n        bibDatabaseContext.getDatabase().registerListener(this);\n        bibDatabaseContext.getMetaData().registerListener(this);\n\n        this.tableModel = new MainTableDataModel(getBibDatabaseContext(), preferencesService, Globals.stateManager);\n        citationStyleCache = new CitationStyleCache(bibDatabaseContext);\n        annotationCache = new FileAnnotationCache(bibDatabaseContext, preferencesService.getFilePreferences());\n\n        setupMainPanel();\n        setupAutoCompletion();\n\n        this.getDatabase().registerListener(new SearchListener());\n        this.getDatabase().registerListener(new EntriesRemovedListener());\n\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(new GroupTreeListener());\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(this);\n\n        this.getDatabase().registerListener(new UpdateTimestampListener(preferencesService));\n\n        this.entryEditor = new EntryEditor(this, externalFileTypes);\n\n        Platform.runLater(() -> {\n            EasyBind.subscribe(changedProperty, this::updateTabTitle);\n            Globals.stateManager.getOpenDatabases().addListener((ListChangeListener<BibDatabaseContext>) c ->\n                    updateTabTitle(changedProperty.getValue()));\n        });\n\n        if (isDatabaseReadyForAutoSave(bibDatabaseContext)) {\n            AutosaveManager autoSaver = AutosaveManager.start(bibDatabaseContext);\n            autoSaver.registerListener(new AutosaveUiManager(this));\n        }\n\n        BackupManager.start(this.bibDatabaseContext, Globals.entryTypesManager, Globals.prefs);\n    }\n","realPath":"src/main/java/org/jabref/gui/LibraryTab.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"B"}],"commitId":"33b931539a360a95e049944eda96d432258ff834","commitMessage":"@@@Improve library loading UX (#7119)\n\n* refactoring LibraryTab to be able to create an empty tab and feed it data when it's available\n\n* applying the improvement when opening database using action\n\n* checkstyle\n\n* add exception parameter to error dialog\n\n* Adding DataLoadingTask to LibraryTab\n\n* Add getter for dataLoadingTask\n\n* Fixing memory leak by canceling dataLoadingTask when tab is closed\n\n* Relocate LibraryTab method trackOpenNewDatabase() to OpenDatabaseAction\n\n* Refactor LibraryTab to handle dataLoadingTask callbacks\n\n* Put performPostOpenActions() before feedData() for performance reasons\n\n* Fix groups pane not updating bug\n\n* Cleanup code\n\n* Extracted JabRefPreferences.  fixed imports\n\n* Extracted JabRefPreferences.  fixed imports.  removed dead code.  shortened method name\n\nCo-authored-by: Carl Christian Snethlage <50491877+calixtus@users.noreply.github.com>\nCo-authored-by: Carl Christian Snethlage <cc.snethlage@gmail.com>","date":"2020-12-07 01:48:14","modifiedFileCount":"3","status":"M","submitter":"Houssem Nasri"},{"authorTime":"2020-12-07 01:48:14","codes":[{"authorDate":"2021-07-15 03:49:30","commitOrder":3,"curCode":"    public LibraryTab(JabRefFrame frame,\n                      PreferencesService preferencesService,\n                      BibDatabaseContext bibDatabaseContext,\n                      ExternalFileTypes externalFileTypes) {\n        this.frame = Objects.requireNonNull(frame);\n        this.bibDatabaseContext = Objects.requireNonNull(bibDatabaseContext);\n        this.externalFileTypes = Objects.requireNonNull(externalFileTypes);\n        this.undoManager = frame.getUndoManager();\n        this.dialogService = frame.getDialogService();\n        this.preferencesService = Objects.requireNonNull(preferencesService);\n\n        bibDatabaseContext.getDatabase().registerListener(this);\n        bibDatabaseContext.getMetaData().registerListener(this);\n\n        this.sidePaneManager = frame.getSidePaneManager();\n        this.tableModel = new MainTableDataModel(getBibDatabaseContext(), preferencesService, Globals.stateManager);\n\n        citationStyleCache = new CitationStyleCache(bibDatabaseContext);\n        annotationCache = new FileAnnotationCache(bibDatabaseContext, preferencesService.getFilePreferences());\n\n        setupMainPanel();\n        setupAutoCompletion();\n\n        this.getDatabase().registerListener(new SearchListener());\n        this.getDatabase().registerListener(new IndexUpdateListener());\n        this.getDatabase().registerListener(new EntriesRemovedListener());\n\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(new GroupTreeListener());\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(this);\n\n        this.getDatabase().registerListener(new UpdateTimestampListener(preferencesService));\n\n        this.entryEditor = new EntryEditor(this, externalFileTypes);\n\n        Platform.runLater(() -> {\n            EasyBind.subscribe(changedProperty, this::updateTabTitle);\n            Globals.stateManager.getOpenDatabases().addListener((ListChangeListener<BibDatabaseContext>) c ->\n                    updateTabTitle(changedProperty.getValue()));\n        });\n    }\n","date":"2021-07-15 03:49:30","endLine":154,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"LibraryTab","params":"(JabRefFrameframe@PreferencesServicepreferencesService@BibDatabaseContextbibDatabaseContext@ExternalFileTypesexternalFileTypes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/c6/c55f4681b1cc4114be43dc19513ecfdb8f3ddc.src","preCode":"    public LibraryTab(JabRefFrame frame,\n                      PreferencesService preferencesService,\n                      BibDatabaseContext bibDatabaseContext,\n                      ExternalFileTypes externalFileTypes) {\n        this.frame = Objects.requireNonNull(frame);\n        this.bibDatabaseContext = Objects.requireNonNull(bibDatabaseContext);\n        this.externalFileTypes = Objects.requireNonNull(externalFileTypes);\n        this.undoManager = frame.getUndoManager();\n        this.dialogService = frame.getDialogService();\n        this.preferencesService = Objects.requireNonNull(preferencesService);\n\n        bibDatabaseContext.getDatabase().registerListener(this);\n        bibDatabaseContext.getMetaData().registerListener(this);\n\n        this.sidePaneManager = frame.getSidePaneManager();\n        this.tableModel = new MainTableDataModel(getBibDatabaseContext(), preferencesService, Globals.stateManager);\n\n        citationStyleCache = new CitationStyleCache(bibDatabaseContext);\n        annotationCache = new FileAnnotationCache(bibDatabaseContext, preferencesService.getFilePreferences());\n\n        setupMainPanel();\n        setupAutoCompletion();\n\n        this.getDatabase().registerListener(new SearchListener());\n        this.getDatabase().registerListener(new EntriesRemovedListener());\n\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(new GroupTreeListener());\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(this);\n\n        this.getDatabase().registerListener(new UpdateTimestampListener(preferencesService));\n\n        this.entryEditor = new EntryEditor(this, externalFileTypes);\n\n        Platform.runLater(() -> {\n            EasyBind.subscribe(changedProperty, this::updateTabTitle);\n            Globals.stateManager.getOpenDatabases().addListener((ListChangeListener<BibDatabaseContext>) c ->\n                    updateTabTitle(changedProperty.getValue()));\n        });\n    }\n","realPath":"src/main/java/org/jabref/gui/LibraryTab.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2020-12-07 01:48:14","commitOrder":3,"curCode":"    public void feedData(BibDatabaseContext bibDatabaseContext) {\n        cleanUp();\n\n        this.bibDatabaseContext = Objects.requireNonNull(bibDatabaseContext);\n\n        bibDatabaseContext.getDatabase().registerListener(this);\n        bibDatabaseContext.getMetaData().registerListener(this);\n\n        this.tableModel = new MainTableDataModel(getBibDatabaseContext(), preferencesService, Globals.stateManager);\n        citationStyleCache = new CitationStyleCache(bibDatabaseContext);\n        annotationCache = new FileAnnotationCache(bibDatabaseContext, preferencesService.getFilePreferences());\n\n        setupMainPanel();\n        setupAutoCompletion();\n\n        this.getDatabase().registerListener(new SearchListener());\n        this.getDatabase().registerListener(new EntriesRemovedListener());\n\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(new GroupTreeListener());\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(this);\n\n        this.getDatabase().registerListener(new UpdateTimestampListener(preferencesService));\n\n        this.entryEditor = new EntryEditor(this, externalFileTypes);\n\n        Platform.runLater(() -> {\n            EasyBind.subscribe(changedProperty, this::updateTabTitle);\n            Globals.stateManager.getOpenDatabases().addListener((ListChangeListener<BibDatabaseContext>) c ->\n                    updateTabTitle(changedProperty.getValue()));\n        });\n\n        if (isDatabaseReadyForAutoSave(bibDatabaseContext)) {\n            AutosaveManager autoSaver = AutosaveManager.start(bibDatabaseContext);\n            autoSaver.registerListener(new AutosaveUiManager(this));\n        }\n\n        BackupManager.start(this.bibDatabaseContext, Globals.entryTypesManager, Globals.prefs);\n    }\n","date":"2020-12-07 01:48:14","endLine":237,"groupId":"4404","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"feedData","params":"(BibDatabaseContextbibDatabaseContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/b8/f1f8aabf574d4ae72d3900b1e8ba80ff4b6e97.src","preCode":"    public void feedData(BibDatabaseContext bibDatabaseContext) {\n        cleanUp();\n\n        this.bibDatabaseContext = Objects.requireNonNull(bibDatabaseContext);\n\n        bibDatabaseContext.getDatabase().registerListener(this);\n        bibDatabaseContext.getMetaData().registerListener(this);\n\n        this.tableModel = new MainTableDataModel(getBibDatabaseContext(), preferencesService, Globals.stateManager);\n        citationStyleCache = new CitationStyleCache(bibDatabaseContext);\n        annotationCache = new FileAnnotationCache(bibDatabaseContext, preferencesService.getFilePreferences());\n\n        setupMainPanel();\n        setupAutoCompletion();\n\n        this.getDatabase().registerListener(new SearchListener());\n        this.getDatabase().registerListener(new EntriesRemovedListener());\n\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(new GroupTreeListener());\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(this);\n\n        this.getDatabase().registerListener(new UpdateTimestampListener(preferencesService));\n\n        this.entryEditor = new EntryEditor(this, externalFileTypes);\n\n        Platform.runLater(() -> {\n            EasyBind.subscribe(changedProperty, this::updateTabTitle);\n            Globals.stateManager.getOpenDatabases().addListener((ListChangeListener<BibDatabaseContext>) c ->\n                    updateTabTitle(changedProperty.getValue()));\n        });\n\n        if (isDatabaseReadyForAutoSave(bibDatabaseContext)) {\n            AutosaveManager autoSaver = AutosaveManager.start(bibDatabaseContext);\n            autoSaver.registerListener(new AutosaveUiManager(this));\n        }\n\n        BackupManager.start(this.bibDatabaseContext, Globals.entryTypesManager, Globals.prefs);\n    }\n","realPath":"src/main/java/org/jabref/gui/LibraryTab.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"N"}],"commitId":"ddce5735b09cfec22ef55d15431582f19cb54208","commitMessage":"@@@Search in PDF Files (#2838)\n\nCo-authored-by: braunch <braunch.dev@gmail.com>\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>\nCo-authored-by: Benedikt Tutzer <btut@users.noreply.github.com>\nCo-authored-by: Carl Christian Snethlage <50491877+calixtus@users.noreply.github.com>\nCo-authored-by: Christoph <siedlerkiller@gmail.com>","date":"2021-07-15 03:49:30","modifiedFileCount":"39","status":"M","submitter":"Linus Dietz"},{"authorTime":"2021-08-31 19:50:57","codes":[{"authorDate":"2021-08-31 19:50:57","commitOrder":4,"curCode":"    public LibraryTab(JabRefFrame frame,\n                      PreferencesService preferencesService,\n                      StateManager stateManager,\n                      BibDatabaseContext bibDatabaseContext,\n                      ExternalFileTypes externalFileTypes) {\n        this.frame = Objects.requireNonNull(frame);\n        this.bibDatabaseContext = Objects.requireNonNull(bibDatabaseContext);\n        this.externalFileTypes = Objects.requireNonNull(externalFileTypes);\n        this.undoManager = frame.getUndoManager();\n        this.dialogService = frame.getDialogService();\n        this.preferencesService = Objects.requireNonNull(preferencesService);\n        this.stateManager = Objects.requireNonNull(stateManager);\n\n        bibDatabaseContext.getDatabase().registerListener(this);\n        bibDatabaseContext.getMetaData().registerListener(this);\n\n        this.sidePaneManager = frame.getSidePaneManager();\n        this.tableModel = new MainTableDataModel(getBibDatabaseContext(), preferencesService, stateManager);\n\n        citationStyleCache = new CitationStyleCache(bibDatabaseContext);\n        annotationCache = new FileAnnotationCache(bibDatabaseContext, preferencesService.getFilePreferences());\n\n        setupMainPanel();\n        setupAutoCompletion();\n\n        this.getDatabase().registerListener(new SearchListener());\n        this.getDatabase().registerListener(new IndexUpdateListener());\n        this.getDatabase().registerListener(new EntriesRemovedListener());\n\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(new GroupTreeListener());\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(this);\n\n        this.getDatabase().registerListener(new UpdateTimestampListener(preferencesService));\n\n        this.entryEditor = new EntryEditor(this, externalFileTypes);\n\n        Platform.runLater(() -> {\n            EasyBind.subscribe(changedProperty, this::updateTabTitle);\n            stateManager.getOpenDatabases().addListener((ListChangeListener<BibDatabaseContext>) c ->\n                    updateTabTitle(changedProperty.getValue()));\n        });\n    }\n","date":"2021-08-31 19:50:57","endLine":157,"groupId":"10911","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"LibraryTab","params":"(JabRefFrameframe@PreferencesServicepreferencesService@StateManagerstateManager@BibDatabaseContextbibDatabaseContext@ExternalFileTypesexternalFileTypes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/d5/443bf343ba5148f136ce844a2322ff2d812561.src","preCode":"    public LibraryTab(JabRefFrame frame,\n                      PreferencesService preferencesService,\n                      BibDatabaseContext bibDatabaseContext,\n                      ExternalFileTypes externalFileTypes) {\n        this.frame = Objects.requireNonNull(frame);\n        this.bibDatabaseContext = Objects.requireNonNull(bibDatabaseContext);\n        this.externalFileTypes = Objects.requireNonNull(externalFileTypes);\n        this.undoManager = frame.getUndoManager();\n        this.dialogService = frame.getDialogService();\n        this.preferencesService = Objects.requireNonNull(preferencesService);\n\n        bibDatabaseContext.getDatabase().registerListener(this);\n        bibDatabaseContext.getMetaData().registerListener(this);\n\n        this.sidePaneManager = frame.getSidePaneManager();\n        this.tableModel = new MainTableDataModel(getBibDatabaseContext(), preferencesService, Globals.stateManager);\n\n        citationStyleCache = new CitationStyleCache(bibDatabaseContext);\n        annotationCache = new FileAnnotationCache(bibDatabaseContext, preferencesService.getFilePreferences());\n\n        setupMainPanel();\n        setupAutoCompletion();\n\n        this.getDatabase().registerListener(new SearchListener());\n        this.getDatabase().registerListener(new IndexUpdateListener());\n        this.getDatabase().registerListener(new EntriesRemovedListener());\n\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(new GroupTreeListener());\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(this);\n\n        this.getDatabase().registerListener(new UpdateTimestampListener(preferencesService));\n\n        this.entryEditor = new EntryEditor(this, externalFileTypes);\n\n        Platform.runLater(() -> {\n            EasyBind.subscribe(changedProperty, this::updateTabTitle);\n            Globals.stateManager.getOpenDatabases().addListener((ListChangeListener<BibDatabaseContext>) c ->\n                    updateTabTitle(changedProperty.getValue()));\n        });\n    }\n","realPath":"src/main/java/org/jabref/gui/LibraryTab.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2021-08-31 19:50:57","commitOrder":4,"curCode":"    public void feedData(BibDatabaseContext bibDatabaseContext) {\n        cleanUp();\n\n        this.bibDatabaseContext = Objects.requireNonNull(bibDatabaseContext);\n\n        bibDatabaseContext.getDatabase().registerListener(this);\n        bibDatabaseContext.getMetaData().registerListener(this);\n\n        this.tableModel = new MainTableDataModel(getBibDatabaseContext(), preferencesService, stateManager);\n        citationStyleCache = new CitationStyleCache(bibDatabaseContext);\n        annotationCache = new FileAnnotationCache(bibDatabaseContext, preferencesService.getFilePreferences());\n\n        setupMainPanel();\n        setupAutoCompletion();\n\n        this.getDatabase().registerListener(new SearchListener());\n        this.getDatabase().registerListener(new EntriesRemovedListener());\n\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(new GroupTreeListener());\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(this);\n\n        this.getDatabase().registerListener(new UpdateTimestampListener(preferencesService));\n\n        this.entryEditor = new EntryEditor(this, externalFileTypes);\n\n        Platform.runLater(() -> {\n            EasyBind.subscribe(changedProperty, this::updateTabTitle);\n            stateManager.getOpenDatabases().addListener((ListChangeListener<BibDatabaseContext>) c ->\n                    updateTabTitle(changedProperty.getValue()));\n        });\n\n        if (isDatabaseReadyForAutoSave(bibDatabaseContext)) {\n            AutosaveManager autoSaver = AutosaveManager.start(bibDatabaseContext);\n            autoSaver.registerListener(new AutosaveUiManager(this));\n        }\n\n        BackupManager.start(this.bibDatabaseContext, Globals.entryTypesManager, preferencesService);\n    }\n","date":"2021-08-31 19:50:57","endLine":261,"groupId":"10911","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"feedData","params":"(BibDatabaseContextbibDatabaseContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/d5/443bf343ba5148f136ce844a2322ff2d812561.src","preCode":"    public void feedData(BibDatabaseContext bibDatabaseContext) {\n        cleanUp();\n\n        this.bibDatabaseContext = Objects.requireNonNull(bibDatabaseContext);\n\n        bibDatabaseContext.getDatabase().registerListener(this);\n        bibDatabaseContext.getMetaData().registerListener(this);\n\n        this.tableModel = new MainTableDataModel(getBibDatabaseContext(), preferencesService, Globals.stateManager);\n        citationStyleCache = new CitationStyleCache(bibDatabaseContext);\n        annotationCache = new FileAnnotationCache(bibDatabaseContext, preferencesService.getFilePreferences());\n\n        setupMainPanel();\n        setupAutoCompletion();\n\n        this.getDatabase().registerListener(new SearchListener());\n        this.getDatabase().registerListener(new EntriesRemovedListener());\n\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(new GroupTreeListener());\n        \r\n        this.bibDatabaseContext.getDatabase().registerListener(this);\n\n        this.getDatabase().registerListener(new UpdateTimestampListener(preferencesService));\n\n        this.entryEditor = new EntryEditor(this, externalFileTypes);\n\n        Platform.runLater(() -> {\n            EasyBind.subscribe(changedProperty, this::updateTabTitle);\n            Globals.stateManager.getOpenDatabases().addListener((ListChangeListener<BibDatabaseContext>) c ->\n                    updateTabTitle(changedProperty.getValue()));\n        });\n\n        if (isDatabaseReadyForAutoSave(bibDatabaseContext)) {\n            AutosaveManager autoSaver = AutosaveManager.start(bibDatabaseContext);\n            autoSaver.registerListener(new AutosaveUiManager(this));\n        }\n\n        BackupManager.start(this.bibDatabaseContext, Globals.entryTypesManager, Globals.prefs);\n    }\n","realPath":"src/main/java/org/jabref/gui/LibraryTab.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"df83c9d8c709c121e69868c8149263ac2988b2ac","commitMessage":"@@@Cleanup preferences (#8036)\n\n* Extracted Globals.prefs from JabRefDesktop\n\n* Extracted Globals.prefs from EntryAddChangeViewModel and Globals.stateManager\n\n* More simple extractions of Globals.prefs\n\n* Remove double return of standardWorkingDirectory\n\n* More simple extractions of Globals.prefs\n\nCo-authored-by: Siedlerchr <siedlerkiller@gmail.com>","date":"2021-08-31 19:50:57","modifiedFileCount":"28","status":"M","submitter":"Carl Christian Snethlage"}]
