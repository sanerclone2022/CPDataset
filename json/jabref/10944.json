[{"authorTime":"2021-01-25 01:56:08","codes":[{"authorDate":"2021-01-30 05:11:29","commitOrder":3,"curCode":"    private FileNodeViewModel searchDirectory(Path directory, UnlinkedPDFFileFilter fileFilter) throws IOException {\n        \r\n        if ((directory == null) || !Files.isDirectory(directory)) {\n            throw new IOException(String.format(\"Invalid directory for searching: %s\", directory));\n        }\n\n        FileNodeViewModel parent = new FileNodeViewModel(directory);\n        Map<Boolean, List<Path>> fileListPartition;\n\n        try (Stream<Path> filesStream = StreamSupport.stream(Files.newDirectoryStream(directory, fileFilter).spliterator(), false)) {\n            fileListPartition = filesStream.collect(Collectors.partitioningBy(Files::isDirectory));\n        } catch (IOException e) {\n            LOGGER.error(String.format(\"%s while searching files: %s\", e.getClass().getName(), e.getMessage()));\n            return parent;\n        }\n\n        List<Path> subDirectories = fileListPartition.get(true);\n        List<Path> files = new ArrayList<>(fileListPartition.get(false));\n        int fileCount = 0;\n\n        for (Path subDirectory : subDirectories) {\n            FileNodeViewModel subRoot = searchDirectory(subDirectory, fileFilter);\n\n            if (!subRoot.getChildren().isEmpty()) {\n                fileCount += subRoot.getFileCount();\n                parent.getChildren().add(subRoot);\n            }\n        }\n\n        parent.setFileCount(files.size() + fileCount);\n        parent.getChildren().addAll(files.stream()\n                                         .map(FileNodeViewModel::new)\n                                         .collect(Collectors.toList()));\n        return parent;\n    }\n","date":"2021-01-30 05:11:29","endLine":101,"groupId":"6298","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"searchDirectory","params":"(Pathdirectory@UnlinkedPDFFileFilterfileFilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/4b/29a57204f72f965835e2fcf305019bae71fecb.src","preCode":"    private FileNodeViewModel searchDirectory(Path directory, UnlinkedPDFFileFilter fileFilter) throws IOException {\n        \r\n        if ((directory == null) || !Files.isDirectory(directory)) {\n            throw new IOException(String.format(\"Invalid directory for searching: %s\", directory));\n        }\n\n        FileNodeViewModel parent = new FileNodeViewModel(directory);\n        Map<Boolean, List<Path>> fileListPartition;\n\n        try (Stream<Path> filesStream = StreamSupport.stream(Files.newDirectoryStream(directory, fileFilter).spliterator(), false)) {\n            fileListPartition = filesStream.collect(Collectors.partitioningBy(Files::isDirectory));\n        } catch (IOException e) {\n            LOGGER.error(String.format(\"%s while searching files: %s\", e.getClass().getName(), e.getMessage()));\n            return parent;\n        }\n\n        List<Path> subDirectories = fileListPartition.get(true);\n        List<Path> files = new ArrayList<>(fileListPartition.get(false));\n        int fileCount = 0;\n\n        for (Path subDirectory : subDirectories) {\n            FileNodeViewModel subRoot = searchDirectory(subDirectory, fileFilter);\n\n            if (!subRoot.getChildren().isEmpty()) {\n                fileCount += subRoot.getFileCount();\n                parent.getChildren().add(subRoot);\n            }\n        }\n\n        parent.setFileCount(files.size() + fileCount);\n        parent.getChildren().addAll(files.stream()\n                                         .map(FileNodeViewModel::new)\n                                         .collect(Collectors.toList()));\n        return parent;\n    }\n","realPath":"src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesCrawler.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"MB"},{"authorDate":"2021-01-25 01:56:08","commitOrder":3,"curCode":"    private FileNodeViewModel searchDirectory(Path directory) throws IOException {\n        if ((directory == null) || !directory.toFile().isDirectory()) {\n            throw new IOException(String.format(\"Invalid directory for searching: %s\", directory));\n        }\n\n        FileNodeViewModel parent = new FileNodeViewModel(directory);\n        Map<Boolean, List<Path>> fileListPartition;\n\n        try (Stream<Path> filesStream = Files.list(directory)) {\n            fileListPartition = filesStream.collect(Collectors.partitioningBy(path -> path.toFile().isDirectory()));\n        } catch (IOException e) {\n            LOGGER.error(String.format(\"%s while searching files: %s\", e.getClass().getName(), e.getMessage()));\n            return parent;\n        }\n\n        List<Path> subDirectories = fileListPartition.get(true);\n        List<Path> files = fileListPartition.get(false)\n                                            .stream()\n                                            .filter(path -> path.toString().endsWith(TEX_EXT))\n                                            .collect(Collectors.toList());\n        int fileCount = 0;\n\n        for (Path subDirectory : subDirectories) {\n            FileNodeViewModel subRoot = searchDirectory(subDirectory);\n\n            if (!subRoot.getChildren().isEmpty()) {\n                fileCount += subRoot.getFileCount();\n                parent.getChildren().add(subRoot);\n            }\n        }\n\n        parent.setFileCount(files.size() + fileCount);\n        parent.getChildren().addAll(files.stream()\n                                         .map(FileNodeViewModel::new)\n                                         .collect(Collectors.toList()));\n        return parent;\n    }\n","date":"2021-01-25 01:56:08","endLine":187,"groupId":"8382","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"searchDirectory","params":"(Pathdirectory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/50/806523d9437bfc93c6aead222f54cfa6aa07a4.src","preCode":"    private FileNodeViewModel searchDirectory(Path directory) throws IOException {\n        if ((directory == null) || !directory.toFile().isDirectory()) {\n            throw new IOException(String.format(\"Invalid directory for searching: %s\", directory));\n        }\n\n        FileNodeViewModel parent = new FileNodeViewModel(directory);\n        Map<Boolean, List<Path>> fileListPartition;\n\n        try (Stream<Path> filesStream = Files.list(directory)) {\n            fileListPartition = filesStream.collect(Collectors.partitioningBy(path -> path.toFile().isDirectory()));\n        } catch (IOException e) {\n            LOGGER.error(String.format(\"%s while searching files: %s\", e.getClass().getName(), e.getMessage()));\n            return parent;\n        }\n\n        List<Path> subDirectories = fileListPartition.get(true);\n        List<Path> files = fileListPartition.get(false)\n                                            .stream()\n                                            .filter(path -> path.toString().endsWith(TEX_EXT))\n                                            .collect(Collectors.toList());\n        int fileCount = 0;\n\n        for (Path subDirectory : subDirectories) {\n            FileNodeViewModel subRoot = searchDirectory(subDirectory);\n\n            if (!subRoot.getChildren().isEmpty()) {\n                fileCount += subRoot.getFileCount();\n                parent.getChildren().add(subRoot);\n            }\n        }\n\n        parent.setFileCount(files.size() + fileCount);\n        parent.getChildren().addAll(files.stream()\n                                         .map(FileNodeViewModel::new)\n                                         .collect(Collectors.toList()));\n        return parent;\n    }\n","realPath":"src/main/java/org/jabref/gui/texparser/ParseLatexDialogViewModel.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"NB"}],"commitId":"ec88998eb8456295d5360964876b192d01002ec3","commitMessage":"@@@Fix File Filter and some layout issues (#7385)\n\n* Fix File Filter and some layout issues\n\nFixes part of #7383\n\n* better min width\n\n* Any file instead of all\n\n* remove style class\n\n* l10n\n\nCo-authored-by: Carl Christian Snethlage <50491877+calixtus@users.noreply.github.com>","date":"2021-01-30 05:11:29","modifiedFileCount":"7","status":"M","submitter":"Christoph"},{"authorTime":"2021-01-25 01:56:08","codes":[{"authorDate":"2021-06-28 21:50:55","commitOrder":4,"curCode":"    private FileNodeViewModel searchDirectory(Path directory, UnlinkedPDFFileFilter fileFilter) throws IOException {\n        \r\n        if ((directory == null) || !Files.isDirectory(directory)) {\n            throw new IOException(String.format(\"Invalid directory for searching: %s\", directory));\n        }\n\n        FileNodeViewModel parent = new FileNodeViewModel(directory);\n        Map<Boolean, List<Path>> fileListPartition;\n\n        try (Stream<Path> filesStream = StreamSupport.stream(Files.newDirectoryStream(directory, fileFilter).spliterator(), false)) {\n            fileListPartition = filesStream.collect(Collectors.partitioningBy(Files::isDirectory));\n        } catch (IOException e) {\n            LOGGER.error(String.format(\"%s while searching files: %s\", e.getClass().getName(), e.getMessage()));\n            return parent;\n        }\n\n        List<Path> subDirectories = fileListPartition.get(true);\n        List<Path> files = new ArrayList<>(fileListPartition.get(false));\n        int fileCount = 0;\n\n        for (Path subDirectory : subDirectories) {\n            FileNodeViewModel subRoot = searchDirectory(subDirectory, fileFilter);\n\n            if (!subRoot.getChildren().isEmpty()) {\n                fileCount += subRoot.getFileCount();\n                parent.getChildren().add(subRoot);\n            }\n        }\n        \r\n        List<Path> filteredFiles = new ArrayList<Path>();\n        for (Path path : files) {\n            if (FileFilterUtils.filterByDate(path, dateFilter)) {\n                filteredFiles.add(path);\n            }\n        }\n        \r\n        filteredFiles = FileFilterUtils.sortByDate(filteredFiles, sorter);\n        parent.setFileCount(filteredFiles.size() + fileCount);\n        parent.getChildren().addAll(filteredFiles.stream()\n                .map(FileNodeViewModel::new)\n                .collect(Collectors.toList()));\n        return parent;\n    }\n","date":"2021-06-28 21:50:55","endLine":116,"groupId":"10944","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"searchDirectory","params":"(Pathdirectory@UnlinkedPDFFileFilterfileFilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/53/ebad10fc5514fc787acc57aaae0a219907fa77.src","preCode":"    private FileNodeViewModel searchDirectory(Path directory, UnlinkedPDFFileFilter fileFilter) throws IOException {\n        \r\n        if ((directory == null) || !Files.isDirectory(directory)) {\n            throw new IOException(String.format(\"Invalid directory for searching: %s\", directory));\n        }\n\n        FileNodeViewModel parent = new FileNodeViewModel(directory);\n        Map<Boolean, List<Path>> fileListPartition;\n\n        try (Stream<Path> filesStream = StreamSupport.stream(Files.newDirectoryStream(directory, fileFilter).spliterator(), false)) {\n            fileListPartition = filesStream.collect(Collectors.partitioningBy(Files::isDirectory));\n        } catch (IOException e) {\n            LOGGER.error(String.format(\"%s while searching files: %s\", e.getClass().getName(), e.getMessage()));\n            return parent;\n        }\n\n        List<Path> subDirectories = fileListPartition.get(true);\n        List<Path> files = new ArrayList<>(fileListPartition.get(false));\n        int fileCount = 0;\n\n        for (Path subDirectory : subDirectories) {\n            FileNodeViewModel subRoot = searchDirectory(subDirectory, fileFilter);\n\n            if (!subRoot.getChildren().isEmpty()) {\n                fileCount += subRoot.getFileCount();\n                parent.getChildren().add(subRoot);\n            }\n        }\n\n        parent.setFileCount(files.size() + fileCount);\n        parent.getChildren().addAll(files.stream()\n                                         .map(FileNodeViewModel::new)\n                                         .collect(Collectors.toList()));\n        return parent;\n    }\n","realPath":"src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesCrawler.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2021-01-25 01:56:08","commitOrder":4,"curCode":"    private FileNodeViewModel searchDirectory(Path directory) throws IOException {\n        if ((directory == null) || !directory.toFile().isDirectory()) {\n            throw new IOException(String.format(\"Invalid directory for searching: %s\", directory));\n        }\n\n        FileNodeViewModel parent = new FileNodeViewModel(directory);\n        Map<Boolean, List<Path>> fileListPartition;\n\n        try (Stream<Path> filesStream = Files.list(directory)) {\n            fileListPartition = filesStream.collect(Collectors.partitioningBy(path -> path.toFile().isDirectory()));\n        } catch (IOException e) {\n            LOGGER.error(String.format(\"%s while searching files: %s\", e.getClass().getName(), e.getMessage()));\n            return parent;\n        }\n\n        List<Path> subDirectories = fileListPartition.get(true);\n        List<Path> files = fileListPartition.get(false)\n                                            .stream()\n                                            .filter(path -> path.toString().endsWith(TEX_EXT))\n                                            .collect(Collectors.toList());\n        int fileCount = 0;\n\n        for (Path subDirectory : subDirectories) {\n            FileNodeViewModel subRoot = searchDirectory(subDirectory);\n\n            if (!subRoot.getChildren().isEmpty()) {\n                fileCount += subRoot.getFileCount();\n                parent.getChildren().add(subRoot);\n            }\n        }\n\n        parent.setFileCount(files.size() + fileCount);\n        parent.getChildren().addAll(files.stream()\n                                         .map(FileNodeViewModel::new)\n                                         .collect(Collectors.toList()));\n        return parent;\n    }\n","date":"2021-01-25 01:56:08","endLine":187,"groupId":"10944","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"searchDirectory","params":"(Pathdirectory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/50/806523d9437bfc93c6aead222f54cfa6aa07a4.src","preCode":"    private FileNodeViewModel searchDirectory(Path directory) throws IOException {\n        if ((directory == null) || !directory.toFile().isDirectory()) {\n            throw new IOException(String.format(\"Invalid directory for searching: %s\", directory));\n        }\n\n        FileNodeViewModel parent = new FileNodeViewModel(directory);\n        Map<Boolean, List<Path>> fileListPartition;\n\n        try (Stream<Path> filesStream = Files.list(directory)) {\n            fileListPartition = filesStream.collect(Collectors.partitioningBy(path -> path.toFile().isDirectory()));\n        } catch (IOException e) {\n            LOGGER.error(String.format(\"%s while searching files: %s\", e.getClass().getName(), e.getMessage()));\n            return parent;\n        }\n\n        List<Path> subDirectories = fileListPartition.get(true);\n        List<Path> files = fileListPartition.get(false)\n                                            .stream()\n                                            .filter(path -> path.toString().endsWith(TEX_EXT))\n                                            .collect(Collectors.toList());\n        int fileCount = 0;\n\n        for (Path subDirectory : subDirectories) {\n            FileNodeViewModel subRoot = searchDirectory(subDirectory);\n\n            if (!subRoot.getChildren().isEmpty()) {\n                fileCount += subRoot.getFileCount();\n                parent.getChildren().add(subRoot);\n            }\n        }\n\n        parent.setFileCount(files.size() + fileCount);\n        parent.getChildren().addAll(files.stream()\n                                         .map(FileNodeViewModel::new)\n                                         .collect(Collectors.toList()));\n        return parent;\n    }\n","realPath":"src/main/java/org/jabref/gui/texparser/ParseLatexDialogViewModel.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"N"}],"commitId":"b4b3075bbd9b5c56c0803f9944996a60810b1836","commitMessage":"@@@Fix for issue #4652: Add Find Unlinked Files Filter based on Date (#7846)\n\nCo-authored-by: George Liargkovas <t8180061@aueb.gr>","date":"2021-06-28 21:50:55","modifiedFileCount":"4","status":"M","submitter":"Giorgos Drosos"}]
