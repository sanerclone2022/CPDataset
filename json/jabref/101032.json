[{"authorTime":"2017-03-16 23:48:38","codes":[{"authorDate":"2017-03-16 23:48:38","commitOrder":2,"curCode":"    private static AbstractGroup automaticKeywordGroupFromString(String string) {\n        if (!string.startsWith(MetadataSerializationConfiguration.AUTOMATIC_KEYWORD_GROUP_ID)) {\n            throw new IllegalArgumentException(\"KeywordGroup cannot be created from \\\"\" + string + \"\\\".\");\n        }\n        QuotedStringTokenizer tok = new QuotedStringTokenizer(string.substring(MetadataSerializationConfiguration.AUTOMATIC_KEYWORD_GROUP_ID\n                .length()), MetadataSerializationConfiguration.GROUP_UNIT_SEPARATOR, MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n\n        String name = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        GroupHierarchyType context = GroupHierarchyType.getByNumberOrDefault(Integer.parseInt(tok.nextToken()));\n        String field = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        Character separator = tok.nextToken().charAt(0);\n        AutomaticKeywordGroup newGroup = new AutomaticKeywordGroup(name, context, field, separator);\n        addGroupDetails(tok, newGroup);\n        return newGroup;\n    }\n","date":"2017-03-16 23:48:38","endLine":131,"groupId":"9274","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"automaticKeywordGroupFromString","params":"(Stringstring)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a7/69f6e7297d27696d2f9c19a296898b530afa2e.src","preCode":"    private static AbstractGroup automaticKeywordGroupFromString(String string) {\n        if (!string.startsWith(MetadataSerializationConfiguration.AUTOMATIC_KEYWORD_GROUP_ID)) {\n            throw new IllegalArgumentException(\"KeywordGroup cannot be created from \\\"\" + string + \"\\\".\");\n        }\n        QuotedStringTokenizer tok = new QuotedStringTokenizer(string.substring(MetadataSerializationConfiguration.AUTOMATIC_KEYWORD_GROUP_ID\n                .length()), MetadataSerializationConfiguration.GROUP_UNIT_SEPARATOR, MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n\n        String name = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        GroupHierarchyType context = GroupHierarchyType.getByNumberOrDefault(Integer.parseInt(tok.nextToken()));\n        String field = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        Character separator = tok.nextToken().charAt(0);\n        AutomaticKeywordGroup newGroup = new AutomaticKeywordGroup(name, context, field, separator);\n        addGroupDetails(tok, newGroup);\n        return newGroup;\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/util/GroupsParser.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"},{"authorDate":"2017-03-16 23:48:38","commitOrder":2,"curCode":"    private static KeywordGroup keywordGroupFromString(String s, Character keywordSeparator) throws ParseException {\n        if (!s.startsWith(MetadataSerializationConfiguration.KEYWORD_GROUP_ID)) {\n            throw new IllegalArgumentException(\"KeywordGroup cannot be created from \\\"\" + s + \"\\\".\");\n        }\n        QuotedStringTokenizer tok = new QuotedStringTokenizer(s.substring(MetadataSerializationConfiguration.KEYWORD_GROUP_ID\n                .length()), MetadataSerializationConfiguration.GROUP_UNIT_SEPARATOR, MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n\n        String name = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        GroupHierarchyType context = GroupHierarchyType.getByNumberOrDefault(Integer.parseInt(tok.nextToken()));\n        String field = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        String expression = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        boolean caseSensitive = Integer.parseInt(tok.nextToken()) == 1;\n        boolean regExp = Integer.parseInt(tok.nextToken()) == 1;\n        KeywordGroup newGroup;\n        if (regExp) {\n            newGroup = new RegexKeywordGroup(name, context, field, expression, caseSensitive);\n        } else {\n            newGroup = new WordKeywordGroup(name, context, field, expression, caseSensitive, keywordSeparator, false);\n        }\n        addGroupDetails(tok, newGroup);\n        return newGroup;\n    }\n","date":"2017-03-16 23:48:38","endLine":160,"groupId":"2121","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"keywordGroupFromString","params":"(Strings@CharacterkeywordSeparator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a7/69f6e7297d27696d2f9c19a296898b530afa2e.src","preCode":"    private static KeywordGroup keywordGroupFromString(String s, Character keywordSeparator) throws ParseException {\n        if (!s.startsWith(MetadataSerializationConfiguration.KEYWORD_GROUP_ID)) {\n            throw new IllegalArgumentException(\"KeywordGroup cannot be created from \\\"\" + s + \"\\\".\");\n        }\n        QuotedStringTokenizer tok = new QuotedStringTokenizer(s.substring(MetadataSerializationConfiguration.KEYWORD_GROUP_ID\n                .length()), MetadataSerializationConfiguration.GROUP_UNIT_SEPARATOR, MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n\n        String name = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        GroupHierarchyType context = GroupHierarchyType.getByNumberOrDefault(Integer.parseInt(tok.nextToken()));\n        String field = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        String expression = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        boolean caseSensitive = Integer.parseInt(tok.nextToken()) == 1;\n        boolean regExp = Integer.parseInt(tok.nextToken()) == 1;\n        KeywordGroup newGroup;\n        if (regExp) {\n            newGroup = new RegexKeywordGroup(name, context, field, expression, caseSensitive);\n        } else {\n            newGroup = new WordKeywordGroup(name, context, field, expression, caseSensitive, keywordSeparator, false);\n        }\n        addGroupDetails(tok, newGroup);\n        return newGroup;\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/util/GroupsParser.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"MB"}],"commitId":"8a436940004887a5e232c903e18139a97c42c461","commitMessage":"@@@Finally write the new group properties to the bib file: icon with color.  description.  expanded status and automatic groups (#2634)\n\n* Add serialization of group details: iconCode.  description.  color.  expanded status\n\n* Add serialization and parsing of automatic groups\n\n* Add changelog entry\n\n* Fix import order\n\n* Minor code cleanup\n\n* Fix tests\n\n* Fix tests part 2\n","date":"2017-03-16 23:48:38","modifiedFileCount":"11","status":"M","submitter":"Tobias Diez"},{"authorTime":"2017-03-16 23:48:38","codes":[{"authorDate":"2017-04-06 21:06:55","commitOrder":3,"curCode":"    private static AbstractGroup automaticKeywordGroupFromString(String string) {\n        if (!string.startsWith(MetadataSerializationConfiguration.AUTOMATIC_KEYWORD_GROUP_ID)) {\n            throw new IllegalArgumentException(\"KeywordGroup cannot be created from \\\"\" + string + \"\\\".\");\n        }\n        QuotedStringTokenizer tok = new QuotedStringTokenizer(string.substring(MetadataSerializationConfiguration.AUTOMATIC_KEYWORD_GROUP_ID\n                .length()), MetadataSerializationConfiguration.GROUP_UNIT_SEPARATOR, MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n\n        String name = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        GroupHierarchyType context = GroupHierarchyType.getByNumberOrDefault(Integer.parseInt(tok.nextToken()));\n        String field = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        Character delimiter = tok.nextToken().charAt(0);\n        Character hierarchicalDelimiter = tok.nextToken().charAt(0);\n        AutomaticKeywordGroup newGroup = new AutomaticKeywordGroup(name, context, field, delimiter, hierarchicalDelimiter);\n        addGroupDetails(tok, newGroup);\n        return newGroup;\n    }\n","date":"2017-04-06 21:06:55","endLine":135,"groupId":"9274","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"automaticKeywordGroupFromString","params":"(Stringstring)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/44/b240d42dbcd867f45618ad6577a4aabbb290e8.src","preCode":"    private static AbstractGroup automaticKeywordGroupFromString(String string) {\n        if (!string.startsWith(MetadataSerializationConfiguration.AUTOMATIC_KEYWORD_GROUP_ID)) {\n            throw new IllegalArgumentException(\"KeywordGroup cannot be created from \\\"\" + string + \"\\\".\");\n        }\n        QuotedStringTokenizer tok = new QuotedStringTokenizer(string.substring(MetadataSerializationConfiguration.AUTOMATIC_KEYWORD_GROUP_ID\n                .length()), MetadataSerializationConfiguration.GROUP_UNIT_SEPARATOR, MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n\n        String name = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        GroupHierarchyType context = GroupHierarchyType.getByNumberOrDefault(Integer.parseInt(tok.nextToken()));\n        String field = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        Character separator = tok.nextToken().charAt(0);\n        AutomaticKeywordGroup newGroup = new AutomaticKeywordGroup(name, context, field, separator);\n        addGroupDetails(tok, newGroup);\n        return newGroup;\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/util/GroupsParser.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2017-03-16 23:48:38","commitOrder":3,"curCode":"    private static KeywordGroup keywordGroupFromString(String s, Character keywordSeparator) throws ParseException {\n        if (!s.startsWith(MetadataSerializationConfiguration.KEYWORD_GROUP_ID)) {\n            throw new IllegalArgumentException(\"KeywordGroup cannot be created from \\\"\" + s + \"\\\".\");\n        }\n        QuotedStringTokenizer tok = new QuotedStringTokenizer(s.substring(MetadataSerializationConfiguration.KEYWORD_GROUP_ID\n                .length()), MetadataSerializationConfiguration.GROUP_UNIT_SEPARATOR, MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n\n        String name = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        GroupHierarchyType context = GroupHierarchyType.getByNumberOrDefault(Integer.parseInt(tok.nextToken()));\n        String field = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        String expression = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        boolean caseSensitive = Integer.parseInt(tok.nextToken()) == 1;\n        boolean regExp = Integer.parseInt(tok.nextToken()) == 1;\n        KeywordGroup newGroup;\n        if (regExp) {\n            newGroup = new RegexKeywordGroup(name, context, field, expression, caseSensitive);\n        } else {\n            newGroup = new WordKeywordGroup(name, context, field, expression, caseSensitive, keywordSeparator, false);\n        }\n        addGroupDetails(tok, newGroup);\n        return newGroup;\n    }\n","date":"2017-03-16 23:48:38","endLine":160,"groupId":"2121","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"keywordGroupFromString","params":"(Strings@CharacterkeywordSeparator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a7/69f6e7297d27696d2f9c19a296898b530afa2e.src","preCode":"    private static KeywordGroup keywordGroupFromString(String s, Character keywordSeparator) throws ParseException {\n        if (!s.startsWith(MetadataSerializationConfiguration.KEYWORD_GROUP_ID)) {\n            throw new IllegalArgumentException(\"KeywordGroup cannot be created from \\\"\" + s + \"\\\".\");\n        }\n        QuotedStringTokenizer tok = new QuotedStringTokenizer(s.substring(MetadataSerializationConfiguration.KEYWORD_GROUP_ID\n                .length()), MetadataSerializationConfiguration.GROUP_UNIT_SEPARATOR, MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n\n        String name = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        GroupHierarchyType context = GroupHierarchyType.getByNumberOrDefault(Integer.parseInt(tok.nextToken()));\n        String field = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        String expression = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        boolean caseSensitive = Integer.parseInt(tok.nextToken()) == 1;\n        boolean regExp = Integer.parseInt(tok.nextToken()) == 1;\n        KeywordGroup newGroup;\n        if (regExp) {\n            newGroup = new RegexKeywordGroup(name, context, field, expression, caseSensitive);\n        } else {\n            newGroup = new WordKeywordGroup(name, context, field, expression, caseSensitive, keywordSeparator, false);\n        }\n        addGroupDetails(tok, newGroup);\n        return newGroup;\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/util/GroupsParser.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"N"}],"commitId":"67e457c9395a86eaa440c905d3a4b14379ea504f","commitMessage":"@@@Fix #628: implement hierarchical keywords (#2703)\n\n* Rename keywords to keyword chains\n\n* Parse hierarchical keywords\n\n* Automatic group creates a proper tree instead of a simple list for hierarchical keywords\n\n* Make hierarchical delimiter for automatic group configurable and write it to bib file\n\n* Adapt Changelog entry\n\n* Fix tests\n","date":"2017-04-06 21:06:55","modifiedFileCount":"16","status":"M","submitter":"Tobias Diez"},{"authorTime":"2017-03-16 23:48:38","codes":[{"authorDate":"2019-04-05 22:40:30","commitOrder":4,"curCode":"    private static AbstractGroup automaticKeywordGroupFromString(String string) {\n        if (!string.startsWith(MetadataSerializationConfiguration.AUTOMATIC_KEYWORD_GROUP_ID)) {\n            throw new IllegalArgumentException(\"KeywordGroup cannot be created from \\\"\" + string + \"\\\".\");\n        }\n        QuotedStringTokenizer tok = new QuotedStringTokenizer(string.substring(MetadataSerializationConfiguration.AUTOMATIC_KEYWORD_GROUP_ID\n                .length()), MetadataSerializationConfiguration.GROUP_UNIT_SEPARATOR, MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n\n        String name = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        GroupHierarchyType context = GroupHierarchyType.getByNumberOrDefault(Integer.parseInt(tok.nextToken()));\n        String field = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        Character delimiter = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR).charAt(0);\n        Character hierarchicalDelimiter = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR).charAt(0);\n        AutomaticKeywordGroup newGroup = new AutomaticKeywordGroup(name, context, field, delimiter, hierarchicalDelimiter);\n        addGroupDetails(tok, newGroup);\n        return newGroup;\n    }\n","date":"2019-04-05 22:40:30","endLine":177,"groupId":"9274","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"automaticKeywordGroupFromString","params":"(Stringstring)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/dd/25ce3dc7ac6fff7b059eb09a6547865dff33e0.src","preCode":"    private static AbstractGroup automaticKeywordGroupFromString(String string) {\n        if (!string.startsWith(MetadataSerializationConfiguration.AUTOMATIC_KEYWORD_GROUP_ID)) {\n            throw new IllegalArgumentException(\"KeywordGroup cannot be created from \\\"\" + string + \"\\\".\");\n        }\n        QuotedStringTokenizer tok = new QuotedStringTokenizer(string.substring(MetadataSerializationConfiguration.AUTOMATIC_KEYWORD_GROUP_ID\n                .length()), MetadataSerializationConfiguration.GROUP_UNIT_SEPARATOR, MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n\n        String name = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        GroupHierarchyType context = GroupHierarchyType.getByNumberOrDefault(Integer.parseInt(tok.nextToken()));\n        String field = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        Character delimiter = tok.nextToken().charAt(0);\n        Character hierarchicalDelimiter = tok.nextToken().charAt(0);\n        AutomaticKeywordGroup newGroup = new AutomaticKeywordGroup(name, context, field, delimiter, hierarchicalDelimiter);\n        addGroupDetails(tok, newGroup);\n        return newGroup;\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/util/GroupsParser.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2017-03-16 23:48:38","commitOrder":4,"curCode":"    private static KeywordGroup keywordGroupFromString(String s, Character keywordSeparator) throws ParseException {\n        if (!s.startsWith(MetadataSerializationConfiguration.KEYWORD_GROUP_ID)) {\n            throw new IllegalArgumentException(\"KeywordGroup cannot be created from \\\"\" + s + \"\\\".\");\n        }\n        QuotedStringTokenizer tok = new QuotedStringTokenizer(s.substring(MetadataSerializationConfiguration.KEYWORD_GROUP_ID\n                .length()), MetadataSerializationConfiguration.GROUP_UNIT_SEPARATOR, MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n\n        String name = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        GroupHierarchyType context = GroupHierarchyType.getByNumberOrDefault(Integer.parseInt(tok.nextToken()));\n        String field = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        String expression = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        boolean caseSensitive = Integer.parseInt(tok.nextToken()) == 1;\n        boolean regExp = Integer.parseInt(tok.nextToken()) == 1;\n        KeywordGroup newGroup;\n        if (regExp) {\n            newGroup = new RegexKeywordGroup(name, context, field, expression, caseSensitive);\n        } else {\n            newGroup = new WordKeywordGroup(name, context, field, expression, caseSensitive, keywordSeparator, false);\n        }\n        addGroupDetails(tok, newGroup);\n        return newGroup;\n    }\n","date":"2017-03-16 23:48:38","endLine":160,"groupId":"2121","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"keywordGroupFromString","params":"(Strings@CharacterkeywordSeparator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a7/69f6e7297d27696d2f9c19a296898b530afa2e.src","preCode":"    private static KeywordGroup keywordGroupFromString(String s, Character keywordSeparator) throws ParseException {\n        if (!s.startsWith(MetadataSerializationConfiguration.KEYWORD_GROUP_ID)) {\n            throw new IllegalArgumentException(\"KeywordGroup cannot be created from \\\"\" + s + \"\\\".\");\n        }\n        QuotedStringTokenizer tok = new QuotedStringTokenizer(s.substring(MetadataSerializationConfiguration.KEYWORD_GROUP_ID\n                .length()), MetadataSerializationConfiguration.GROUP_UNIT_SEPARATOR, MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n\n        String name = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        GroupHierarchyType context = GroupHierarchyType.getByNumberOrDefault(Integer.parseInt(tok.nextToken()));\n        String field = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        String expression = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        boolean caseSensitive = Integer.parseInt(tok.nextToken()) == 1;\n        boolean regExp = Integer.parseInt(tok.nextToken()) == 1;\n        KeywordGroup newGroup;\n        if (regExp) {\n            newGroup = new RegexKeywordGroup(name, context, field, expression, caseSensitive);\n        } else {\n            newGroup = new WordKeywordGroup(name, context, field, expression, caseSensitive, keywordSeparator, false);\n        }\n        addGroupDetails(tok, newGroup);\n        return newGroup;\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/util/GroupsParser.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"N"}],"commitId":"17bfe91cd5a87f3c0f7299b86686bde0075b2fc4","commitMessage":"@@@QuotedStringTokenizer now does not unquote (#4830)\n\n* QuotedStringTokenizer now does not unquote\n\n* Unquote to fix test failures\n\n* Add javadoc to nextToken\n","date":"2019-04-05 22:40:30","modifiedFileCount":"2","status":"M","submitter":"Abraham Polk"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":5,"curCode":"    private static AbstractGroup automaticKeywordGroupFromString(String string) {\n        if (!string.startsWith(MetadataSerializationConfiguration.AUTOMATIC_KEYWORD_GROUP_ID)) {\n            throw new IllegalArgumentException(\"KeywordGroup cannot be created from \\\"\" + string + \"\\\".\");\n        }\n        QuotedStringTokenizer tok = new QuotedStringTokenizer(string.substring(MetadataSerializationConfiguration.AUTOMATIC_KEYWORD_GROUP_ID\n                .length()), MetadataSerializationConfiguration.GROUP_UNIT_SEPARATOR, MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n\n        String name = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        GroupHierarchyType context = GroupHierarchyType.getByNumberOrDefault(Integer.parseInt(tok.nextToken()));\n        Field field = FieldFactory.parseField(StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR));\n        Character delimiter = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR).charAt(0);\n        Character hierarchicalDelimiter = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR).charAt(0);\n        AutomaticKeywordGroup newGroup = new AutomaticKeywordGroup(name, context, field, delimiter, hierarchicalDelimiter);\n        addGroupDetails(tok, newGroup);\n        return newGroup;\n    }\n","date":"2019-08-02 15:20:10","endLine":179,"groupId":"101032","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"automaticKeywordGroupFromString","params":"(Stringstring)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/2b/0044ba5434b994792cc1066b055eaf247d7d21.src","preCode":"    private static AbstractGroup automaticKeywordGroupFromString(String string) {\n        if (!string.startsWith(MetadataSerializationConfiguration.AUTOMATIC_KEYWORD_GROUP_ID)) {\n            throw new IllegalArgumentException(\"KeywordGroup cannot be created from \\\"\" + string + \"\\\".\");\n        }\n        QuotedStringTokenizer tok = new QuotedStringTokenizer(string.substring(MetadataSerializationConfiguration.AUTOMATIC_KEYWORD_GROUP_ID\n                .length()), MetadataSerializationConfiguration.GROUP_UNIT_SEPARATOR, MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n\n        String name = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        GroupHierarchyType context = GroupHierarchyType.getByNumberOrDefault(Integer.parseInt(tok.nextToken()));\n        String field = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        Character delimiter = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR).charAt(0);\n        Character hierarchicalDelimiter = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR).charAt(0);\n        AutomaticKeywordGroup newGroup = new AutomaticKeywordGroup(name, context, field, delimiter, hierarchicalDelimiter);\n        addGroupDetails(tok, newGroup);\n        return newGroup;\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/util/GroupsParser.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"},{"authorDate":"2019-08-02 15:20:10","commitOrder":5,"curCode":"    private static KeywordGroup keywordGroupFromString(String s, Character keywordSeparator) throws ParseException {\n        if (!s.startsWith(MetadataSerializationConfiguration.KEYWORD_GROUP_ID)) {\n            throw new IllegalArgumentException(\"KeywordGroup cannot be created from \\\"\" + s + \"\\\".\");\n        }\n        QuotedStringTokenizer tok = new QuotedStringTokenizer(s.substring(MetadataSerializationConfiguration.KEYWORD_GROUP_ID\n                .length()), MetadataSerializationConfiguration.GROUP_UNIT_SEPARATOR, MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n\n        String name = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        GroupHierarchyType context = GroupHierarchyType.getByNumberOrDefault(Integer.parseInt(tok.nextToken()));\n        Field field = FieldFactory.parseField(StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR));\n        String expression = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        boolean caseSensitive = Integer.parseInt(tok.nextToken()) == 1;\n        boolean regExp = Integer.parseInt(tok.nextToken()) == 1;\n        KeywordGroup newGroup;\n        if (regExp) {\n            newGroup = new RegexKeywordGroup(name, context, field, expression, caseSensitive);\n        } else {\n            newGroup = new WordKeywordGroup(name, context, field, expression, caseSensitive, keywordSeparator, false);\n        }\n        addGroupDetails(tok, newGroup);\n        return newGroup;\n    }\n","date":"2019-08-02 15:20:10","endLine":208,"groupId":"101032","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"keywordGroupFromString","params":"(Strings@CharacterkeywordSeparator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/2b/0044ba5434b994792cc1066b055eaf247d7d21.src","preCode":"    private static KeywordGroup keywordGroupFromString(String s, Character keywordSeparator) throws ParseException {\n        if (!s.startsWith(MetadataSerializationConfiguration.KEYWORD_GROUP_ID)) {\n            throw new IllegalArgumentException(\"KeywordGroup cannot be created from \\\"\" + s + \"\\\".\");\n        }\n        QuotedStringTokenizer tok = new QuotedStringTokenizer(s.substring(MetadataSerializationConfiguration.KEYWORD_GROUP_ID\n                .length()), MetadataSerializationConfiguration.GROUP_UNIT_SEPARATOR, MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n\n        String name = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        GroupHierarchyType context = GroupHierarchyType.getByNumberOrDefault(Integer.parseInt(tok.nextToken()));\n        String field = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        String expression = StringUtil.unquote(tok.nextToken(), MetadataSerializationConfiguration.GROUP_QUOTE_CHAR);\n        boolean caseSensitive = Integer.parseInt(tok.nextToken()) == 1;\n        boolean regExp = Integer.parseInt(tok.nextToken()) == 1;\n        KeywordGroup newGroup;\n        if (regExp) {\n            newGroup = new RegexKeywordGroup(name, context, field, expression, caseSensitive);\n        } else {\n            newGroup = new WordKeywordGroup(name, context, field, expression, caseSensitive, keywordSeparator, false);\n        }\n        addGroupDetails(tok, newGroup);\n        return newGroup;\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/util/GroupsParser.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"4b39b78e4afcd6c36b385f5c46f1d9a4eac2e29b","commitMessage":"@@@Move to extended enums for fields and entry types (#5148)\n\n* Introduce interface for fields\n\n* Continue using fields interface instead of strings\n\n* Introduce OrFields class\n\n* Move FieldProperty\n\n* Convert entry types to extended enum\n\n* Start fixing build\n\n* Fix build\n\n* Start fixing tests\n\n* Everything compiles again\n\n* Make model tests pass\n\n* Fix most tests\n\n* Fix build\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix checkstyle issues\n\n* Fix more tests\n\n* Fix more tests\n\n* Disable test that fails on CI\n\n* Disable test that fails on CI\n","date":"2019-08-02 15:20:10","modifiedFileCount":"439","status":"M","submitter":"Tobias Diez"}]
