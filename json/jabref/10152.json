[{"authorTime":"2017-02-17 05:41:47","codes":[{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public void testNormal() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        File auxFile = Paths.get(AuxParserTest.class.getResource(\"paper.aux\").toURI()).toFile();\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences).parse(originalReader);\n\n            AuxParser auxParser = new AuxParser(auxFile.getAbsolutePath(), result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse();\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(0, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(2, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","date":"2017-02-17 05:41:47","endLine":59,"groupId":"6260","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/79/7e859d5c844a208cbbe0182fb1ba6f8beca15f.src","preCode":"    public void testNormal() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        File auxFile = Paths.get(AuxParserTest.class.getResource(\"paper.aux\").toURI()).toFile();\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences).parse(originalReader);\n\n            AuxParser auxParser = new AuxParser(auxFile.getAbsolutePath(), result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse();\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(0, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(2, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/auxparser/AuxParserTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"},{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public void testNotAllFound() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        File auxFile = Paths.get(AuxParserTest.class.getResource(\"badpaper.aux\").toURI()).toFile();\n\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences).parse(originalReader);\n\n            AuxParser auxParser = new AuxParser(auxFile.getAbsolutePath(), result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse();\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(1, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(3, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","date":"2017-02-17 05:41:47","endLine":82,"groupId":"6260","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotAllFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/79/7e859d5c844a208cbbe0182fb1ba6f8beca15f.src","preCode":"    public void testNotAllFound() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        File auxFile = Paths.get(AuxParserTest.class.getResource(\"badpaper.aux\").toURI()).toFile();\n\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences).parse(originalReader);\n\n            AuxParser auxParser = new AuxParser(auxFile.getAbsolutePath(), result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse();\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(1, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(3, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/auxparser/AuxParserTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"}],"commitId":"ebbeb1d249edf7134abf92d24c2031ae54d19881","commitMessage":"@@@Merge branch 'net-sf-to-org-jabref'\n","date":"2017-02-17 05:41:47","modifiedFileCount":"1","status":"B","submitter":"Oliver Kopp"},{"authorTime":"2018-01-29 02:37:06","codes":[{"authorDate":"2018-01-29 02:37:06","commitOrder":2,"curCode":"    public void testNormal() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        Path auxFile = Paths.get(AuxParserTest.class.getResource(\"paper.aux\").toURI());\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor()).parse(originalReader);\n\n            AuxParser auxParser = new DefaultAuxParser(result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse(auxFile);\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(0, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(2, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","date":"2018-01-29 02:37:06","endLine":63,"groupId":"6260","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/01/6f7b62d2687a257373502b882b67dd99930fac.src","preCode":"    public void testNormal() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        File auxFile = Paths.get(AuxParserTest.class.getResource(\"paper.aux\").toURI()).toFile();\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences).parse(originalReader);\n\n            AuxParser auxParser = new AuxParser(auxFile.getAbsolutePath(), result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse();\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(0, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(2, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/auxparser/AuxParserTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2018-01-29 02:37:06","commitOrder":2,"curCode":"    public void testNotAllFound() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        Path auxFile = Paths.get(AuxParserTest.class.getResource(\"badpaper.aux\").toURI());\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor()).parse(originalReader);\n\n            AuxParser auxParser = new DefaultAuxParser(result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse(auxFile);\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(1, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(3, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","date":"2018-01-29 02:37:06","endLine":85,"groupId":"6260","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotAllFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/01/6f7b62d2687a257373502b882b67dd99930fac.src","preCode":"    public void testNotAllFound() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        File auxFile = Paths.get(AuxParserTest.class.getResource(\"badpaper.aux\").toURI()).toFile();\n\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences).parse(originalReader);\n\n            AuxParser auxParser = new AuxParser(auxFile.getAbsolutePath(), result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse();\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(1, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(3, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/auxparser/AuxParserTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"cfb424f80c2069c61673d5051fa761715edab091","commitMessage":"@@@Implements #1664: group based on aux file (#3444)\n\n* First prototype of aux group\n\n* Refactor so that TexGroup does not depend on logic\n\n* Add changelog entry\n\n* Fix architecture tests\n\n* Add new language key\n\n* Fix tests\n","date":"2018-01-29 02:37:06","modifiedFileCount":"76","status":"M","submitter":"Tobias Diez"},{"authorTime":"2018-08-16 15:17:32","codes":[{"authorDate":"2018-08-16 15:17:32","commitOrder":3,"curCode":"    void testNormal() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        Path auxFile = Paths.get(AuxParserTest.class.getResource(\"paper.aux\").toURI());\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor()).parse(originalReader);\n\n            AuxParser auxParser = new DefaultAuxParser(result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse(auxFile);\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(0, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(2, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","date":"2018-08-16 15:17:32","endLine":63,"groupId":"6260","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/b4/3c5796706377b98686a2a8a3064715aa4f4352.src","preCode":"    public void testNormal() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        Path auxFile = Paths.get(AuxParserTest.class.getResource(\"paper.aux\").toURI());\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor()).parse(originalReader);\n\n            AuxParser auxParser = new DefaultAuxParser(result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse(auxFile);\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(0, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(2, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/auxparser/AuxParserTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2018-08-16 15:17:32","commitOrder":3,"curCode":"    void testNotAllFound() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        Path auxFile = Paths.get(AuxParserTest.class.getResource(\"badpaper.aux\").toURI());\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor()).parse(originalReader);\n\n            AuxParser auxParser = new DefaultAuxParser(result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse(auxFile);\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(1, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(3, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","date":"2018-08-16 15:17:32","endLine":85,"groupId":"6260","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotAllFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/b4/3c5796706377b98686a2a8a3064715aa4f4352.src","preCode":"    public void testNotAllFound() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        Path auxFile = Paths.get(AuxParserTest.class.getResource(\"badpaper.aux\").toURI());\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor()).parse(originalReader);\n\n            AuxParser auxParser = new DefaultAuxParser(result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse(auxFile);\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(1, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(3, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/auxparser/AuxParserTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"a880addc0b9a45ad4461cc46ed261ea7df9c812a","commitMessage":"@@@Fix for issue 3959: migrate all tests to JUnit 5 (#4260)\n\n* Update migrate from JUnit 4 to JUnit 5\n\n* Update migrate from JUnit 4 to JUnit 5\n\n* Trying to change git accounts on my laptop\n\n* Trying to change git accounts on my laptop\n\n* Trying to change git accounts on my laptop\n\n* Using static assert methods.\n\n* Migrate from JUnit 4 to JUnit 5\n\n*AuthorListParameterTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*XmpUtilWriterTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*XmpUtilReaderTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*SearchQueryHighlightObservableTest.java\n\n    -did not use MockitoExtension.class as its official version has not been released yet.\n\n* Migrate from JUnit 4 to JUnit 5\n\n*CitationEntryTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*RTFCharsTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ProtectedTermsLoaderTest.java\n\n    -When running tests.  outputs in command line are different. I don't know if this change is correct.\n\n* Trying to change to a new branch.\n\n* commit_test\n\n* delete my meaningless txt\n\n* Migrate from JUnit 4 to JUnit 5\n\n*AuthorAndToSemicolonReplacerTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*FileDialogConfigurationTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*IntegrityCheckTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ModsExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*AutoSetFileLinksUtilTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*MsBibExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*CsvExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*HtmlExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*HtmlExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*RenamePdfCleanupTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ProtectedTermsListTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*MoveFilesCleanupTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ImporterTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n    *ExporterTest.java\n\n* Try to trigger the Travis CI build.\n\n* Try to trigger the Travis CI build.\n\n* Migrate from JUnit 4 to JUnit 5\n\n* Try to migrate from JUnit 4 to JUnit 5\n    *BibTeXMLExporterTestFiles.java\n        *Test.  not finished\n\n* Roll back to earlier version.\n    *BibTeXMLExporterTestFiles.java\n    *CleanupWorkerTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n    *ImportFormatReaderIntegrationTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n    *MimeTypeDetectorTest.java\n\n* failed to modify CleanupWorkerTest\n\n* failed to modify cleanupWorkTest\n\n* change cleanupWorkerTest to initial\n\n* ***DatabaseTest***\nMigrate from JUnit 4 to JUnit 5\n    *DBMSProcessorTest.java\n        *Wait for the Travis CI\n\n* ***DatabaseTest***\nMigrate from JUnit 4 to JUnit 5\n    *DBMSProcessorTest.java\n        *Wait for the Travis CI\n\n* Migrate from JUnit 4 to JUnit 5\n    *BibTeXMLExporterTestFiles.java\n    *MSBibExportFormatTestFiles.java\n    *All the GUI tests\n\n* Migrate from JUnit 4 to JUnit 5\n    *CleanupWorkerTest.java\n\n    *It seems that worker doesn't work in cleanupRenamePdfRenamesRelativeFile() and cleanupRelativePathsConvertAbsoluteToRelativePath()\n\n* Migrate JUnit 4 to JUnit 5.\n    *AuthorListParameterTest.java\n        -Follow up tp the newest.\n\n* Migrate JUnit 4 to JUnit 5.\n    *CleanupWorkerTest.java\n        -Delete my sout.\n\n* Migrate JUnit 4 to JUnit 5.\n    *EntryTypesTest.java\n        -Just some method name changes.\n\n* Fix part of CleanupWorkerTest.\n    -cleanupRelativePathsConvertAbsoluteToRelativePath() test passed.\n    -The cleanupRenamePdfRenamesRelativeFile() test still failed.\n\n* Migrate and sync.\n    *CiteKeyBasedFileFinderTest.java\n\n* Migrate.\n    *FileUtilTest.java\nPartly migrate.\n    *ModsExportFormatTestFiles.java\n\n* Fix CleanupWorkerTest.java\n\n* Fix .travis.yml\n\n* Remove unnecessary @Rule.\n    *IntegrityCheckTest.java\n\n* AuxParserTest.java\n\n* BibtexParserTest.java\n\n* EntryComparatorTest.java\n\n* Migrate JUnit 4 to JUnit 5 -------by 1160300229\n\n* Migrate. Some tasks by my team members.\n    *LinkedFileViewModelTest.java\n    *RecursiveTreeItemTest.java\n    *UndoTest.java\n    *EntryComparatorTest.java\n    *MakeLabelWithDatabaseTest.java\n    *MakeLabelWithoutDatabaseTest.java\n    *CleanupUrlFormatterTest.java\n    *BibtexParserTest.java\n    *MedlinePlainImporterTest.java\n    *SilverPlatterImporterTest.java\n    *EntryLinkCheckerTest.java\n    *LocalizationKeyTest.java\n    *JabRefPreferencesTest.java\n\n* Fix 1160300302's error.\n\n* Remove unnecessary \"public\".\n    *AuxParserTest.java\n\n* fix architecture test by removing check for public make some classes default visibility level\n\n* Fix \"cannot find files\" problem in JUnit 4.\n\n* Migrate to JUnit 5.\n    *BibTeXMLExporterTestFiles.java\n    *ModsExportFormatTestFiles.java\n    *MSBibExportFormatTestFiles.java\n\n* Change the slash direction.\n    *BibTeXMLExporterTestFiles.java\n    *ModsExportFormatTestFiles.java\n    *MSBibExportFormatTestFiles.java\n\n* fix resolving of paths in msbibexporterpath update junit and correct resource dirs in gradle\n\n* Fix the path issue in\n    *BibTeXMLExporterTestFiles.java\n    *ModsExportFormatTestFiles.java\n\n* Disable the failing exporter tests and change the build.gradle\n\n* Fix the parent folder issue by make every path to their child once.\n    -You can see in the code. :)\n\n* Fix some minor issues.\n    -Use the NIO methods in MoveFilesCleanupTest.java\n\n    -Use toAbsolutePath() method in RenamePdfCleanupTest.java\n\n    -Rename \"tempFilename\" to \"tempFilePath\" in BibTeXMLExporterTestFiles.java\n\n* include main/java in resources as well convert legalcy file methods to nio\n","date":"2018-08-16 15:17:32","modifiedFileCount":"59","status":"M","submitter":"Yichen Sun"},{"authorTime":"2020-04-30 17:10:13","codes":[{"authorDate":"2020-04-30 17:10:13","commitOrder":4,"curCode":"    void testNormal() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        Path auxFile = Path.of(AuxParserTest.class.getResource(\"paper.aux\").toURI());\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor()).parse(originalReader);\n\n            AuxParser auxParser = new DefaultAuxParser(result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse(auxFile);\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(0, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(2, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","date":"2020-04-30 17:10:13","endLine":62,"groupId":"6260","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/06/187f889e0fe3aef02e7462eab82d4f10acabc1.src","preCode":"    void testNormal() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        Path auxFile = Paths.get(AuxParserTest.class.getResource(\"paper.aux\").toURI());\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor()).parse(originalReader);\n\n            AuxParser auxParser = new DefaultAuxParser(result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse(auxFile);\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(0, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(2, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/auxparser/AuxParserTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2020-04-30 17:10:13","commitOrder":4,"curCode":"    void testNotAllFound() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        Path auxFile = Path.of(AuxParserTest.class.getResource(\"badpaper.aux\").toURI());\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor()).parse(originalReader);\n\n            AuxParser auxParser = new DefaultAuxParser(result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse(auxFile);\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(1, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(3, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","date":"2020-04-30 17:10:13","endLine":84,"groupId":"6260","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotAllFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/06/187f889e0fe3aef02e7462eab82d4f10acabc1.src","preCode":"    void testNotAllFound() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        Path auxFile = Paths.get(AuxParserTest.class.getResource(\"badpaper.aux\").toURI());\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor()).parse(originalReader);\n\n            AuxParser auxParser = new DefaultAuxParser(result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse(auxFile);\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(1, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(3, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/auxparser/AuxParserTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"862078a4db316cfd15bd77be68d3d2b010feab3b","commitMessage":"@@@Fixes #6357: File directory (#6377)\n\n* Fixes #6357: File directory\n\nBug was introduced in https://github.com/JabRef/jabref/commit/1b03f039aa4abf0812a3a8ae0ba248c08fdb39a3.\n\n* Fix tests\n\n* Replace Paths.get\n\n* Fix code style","date":"2020-04-30 17:10:13","modifiedFileCount":"110","status":"M","submitter":"Tobias Diez"},{"authorTime":"2020-04-30 17:10:13","codes":[{"authorDate":"2020-08-18 14:22:03","commitOrder":5,"curCode":"    void testNormal() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        Path auxFile = Path.of(AuxParserTest.class.getResource(\"paper.aux\").toURI());\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor()).parse(originalReader);\n\n            AuxParser auxParser = new DefaultAuxParser(result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse(auxFile);\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(0, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            List<BibEntry> newEntries = newDB.getEntries();\n            assertEquals(2, newEntries.size());\n            assertTrue(newEntries.get(0).hasChanged());\n            assertTrue(newEntries.get(1).hasChanged());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(2, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","date":"2020-08-18 14:22:03","endLine":67,"groupId":"10152","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/c2/a80b7c7b126e79123ef2e0bf8a7d5dfd6db1f0.src","preCode":"    void testNormal() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        Path auxFile = Path.of(AuxParserTest.class.getResource(\"paper.aux\").toURI());\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor()).parse(originalReader);\n\n            AuxParser auxParser = new DefaultAuxParser(result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse(auxFile);\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(0, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(2, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/auxparser/AuxParserTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2020-04-30 17:10:13","commitOrder":5,"curCode":"    void testNotAllFound() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        Path auxFile = Path.of(AuxParserTest.class.getResource(\"badpaper.aux\").toURI());\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor()).parse(originalReader);\n\n            AuxParser auxParser = new DefaultAuxParser(result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse(auxFile);\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(1, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(3, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","date":"2020-04-30 17:10:13","endLine":84,"groupId":"10152","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotAllFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/06/187f889e0fe3aef02e7462eab82d4f10acabc1.src","preCode":"    void testNotAllFound() throws URISyntaxException, IOException {\n        InputStream originalStream = AuxParserTest.class.getResourceAsStream(\"origin.bib\");\n        Path auxFile = Path.of(AuxParserTest.class.getResource(\"badpaper.aux\").toURI());\n        try (InputStreamReader originalReader = new InputStreamReader(originalStream, StandardCharsets.UTF_8)) {\n            ParserResult result = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor()).parse(originalReader);\n\n            AuxParser auxParser = new DefaultAuxParser(result.getDatabase());\n            AuxParserResult auxResult = auxParser.parse(auxFile);\n\n            assertTrue(auxResult.getGeneratedBibDatabase().hasEntries());\n            assertEquals(1, auxResult.getUnresolvedKeysCount());\n            BibDatabase newDB = auxResult.getGeneratedBibDatabase();\n            assertEquals(2, newDB.getEntries().size());\n            assertEquals(2, auxResult.getResolvedKeysCount());\n            assertEquals(3, auxResult.getFoundKeysInAux());\n            assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),\n                    auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount());\n            assertEquals(0, auxResult.getCrossRefEntriesCount());\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/auxparser/AuxParserTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"}],"commitId":"ec5371281cd4d53f6c0bea9c84ebf20073f618ca","commitMessage":"@@@Fix entry gets deleted after aux import (#6746)\n\n* Fix entry gets deleted after aux import\n\nSet changed flag on clone also for Misc entry type.  because otherwise it equals the default entry type and no change is triggered which results in the entry not beeing written to the database on save\nFixes  #6405\n\nSimplify gui code\n\n* add changelog\n\n* fix checkstyle shit\n\n* copy serialization on clone\n\n* Update CHANGELOG.md\n\nCo-authored-by: Tobias Diez <tobiasdiez@gmx.de>\n\n* Cosmetic change\n\n* Fix clone\n\n* Mark each entry changed to trigger a \"proper\" write by JabRef\n\nCo-authored-by: Tobias Diez <tobiasdiez@gmx.de>\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>","date":"2020-08-18 14:22:03","modifiedFileCount":"7","status":"M","submitter":"Christoph"}]
