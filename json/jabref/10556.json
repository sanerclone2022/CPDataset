[{"authorTime":"2018-09-11 16:55:56","codes":[{"authorDate":"2018-09-11 16:55:56","commitOrder":1,"curCode":"    void movesFile() throws Exception {\n        when(filePreferences.getFileDirPattern()).thenReturn(\"\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"test.pdf\", \"\"))),\n                entry.getField(\"file\"));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","date":"2018-09-11 16:55:56","endLine":79,"groupId":"4757","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"movesFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/9e/9d21bfbd04ff4211c3b3d756b4276746a33c50.src","preCode":"    void movesFile() throws Exception {\n        when(filePreferences.getFileDirPattern()).thenReturn(\"\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"test.pdf\", \"\"))),\n                entry.getField(\"file\"));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/MoveFilesCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"},{"authorDate":"2018-09-11 16:55:56","commitOrder":1,"curCode":"    void movesFileWithSubdirectoryPattern() throws Exception {\n        when(filePreferences.getFileDirPattern()).thenReturn(\"[entrytype]/[year]/[auth]\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"Misc\").resolve(\"1989\").resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"Misc/1989/test.pdf\", \"\"))),\n                entry.getField(\"file\"));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","date":"2018-09-11 16:55:56","endLine":123,"groupId":"5248","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"movesFileWithSubdirectoryPattern","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/9e/9d21bfbd04ff4211c3b3d756b4276746a33c50.src","preCode":"    void movesFileWithSubdirectoryPattern() throws Exception {\n        when(filePreferences.getFileDirPattern()).thenReturn(\"[entrytype]/[year]/[auth]\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"Misc\").resolve(\"1989\").resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"Misc/1989/test.pdf\", \"\"))),\n                entry.getField(\"file\"));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/MoveFilesCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"}],"commitId":"4c3e520a32f986e0df8a6b7187cf6b2dfe322ccc","commitMessage":"@@@Fix that \"Rename and move file\" throws file not found exception (#4317)\n\n* Fix that \"Rename and move file\" throws file not found exception\n\nFixes #4307. Moreover.  I refactored a bit how files are renamed/moved to the default file directory. This should make it easier to reuse the code.\n\n* Fix tests\n","date":"2018-09-11 16:55:56","modifiedFileCount":"62","status":"B","submitter":"Tobias Diez"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":2,"curCode":"    void movesFile() throws Exception {\n        when(filePreferences.getFileDirPattern()).thenReturn(\"\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"test.pdf\", \"\"))),\n                entry.getField(StandardField.FILE));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","date":"2019-08-02 15:20:10","endLine":78,"groupId":"4757","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"movesFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/72/7da151fe01a9b1aa16e9a2167b794fb3471446.src","preCode":"    void movesFile() throws Exception {\n        when(filePreferences.getFileDirPattern()).thenReturn(\"\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"test.pdf\", \"\"))),\n                entry.getField(\"file\"));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/MoveFilesCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2019-08-02 15:20:10","commitOrder":2,"curCode":"    void movesFileWithSubdirectoryPattern() throws Exception {\n        when(filePreferences.getFileDirPattern()).thenReturn(\"[entrytype]/[year]/[auth]\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"Misc\").resolve(\"1989\").resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"Misc/1989/test.pdf\", \"\"))),\n                entry.getField(StandardField.FILE));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","date":"2019-08-02 15:20:10","endLine":122,"groupId":"5248","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"movesFileWithSubdirectoryPattern","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/72/7da151fe01a9b1aa16e9a2167b794fb3471446.src","preCode":"    void movesFileWithSubdirectoryPattern() throws Exception {\n        when(filePreferences.getFileDirPattern()).thenReturn(\"[entrytype]/[year]/[auth]\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"Misc\").resolve(\"1989\").resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"Misc/1989/test.pdf\", \"\"))),\n                entry.getField(\"file\"));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/MoveFilesCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"4b39b78e4afcd6c36b385f5c46f1d9a4eac2e29b","commitMessage":"@@@Move to extended enums for fields and entry types (#5148)\n\n* Introduce interface for fields\n\n* Continue using fields interface instead of strings\n\n* Introduce OrFields class\n\n* Move FieldProperty\n\n* Convert entry types to extended enum\n\n* Start fixing build\n\n* Fix build\n\n* Start fixing tests\n\n* Everything compiles again\n\n* Make model tests pass\n\n* Fix most tests\n\n* Fix build\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix checkstyle issues\n\n* Fix more tests\n\n* Fix more tests\n\n* Disable test that fails on CI\n\n* Disable test that fails on CI\n","date":"2019-08-02 15:20:10","modifiedFileCount":"439","status":"M","submitter":"Tobias Diez"},{"authorTime":"2020-09-01 20:20:10","codes":[{"authorDate":"2020-09-01 20:20:10","commitOrder":3,"curCode":"    void movesFile() throws Exception {\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"test.pdf\", \"\"))),\n                entry.getField(StandardField.FILE));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","date":"2020-09-01 20:20:10","endLine":81,"groupId":"4757","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"movesFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/63/246e9f04dcd447ec2ecd47e8b3eee86a6674f5.src","preCode":"    void movesFile() throws Exception {\n        when(filePreferences.getFileDirPattern()).thenReturn(\"\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"test.pdf\", \"\"))),\n                entry.getField(StandardField.FILE));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/MoveFilesCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-09-01 20:20:10","commitOrder":3,"curCode":"    void movesFileWithSubdirectoryPattern() throws Exception {\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"[entrytype]/[year]/[auth]\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"Misc\").resolve(\"1989\").resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"Misc/1989/test.pdf\", \"\"))),\n                entry.getField(StandardField.FILE));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","date":"2020-09-01 20:20:10","endLine":138,"groupId":"5248","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"movesFileWithSubdirectoryPattern","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/63/246e9f04dcd447ec2ecd47e8b3eee86a6674f5.src","preCode":"    void movesFileWithSubdirectoryPattern() throws Exception {\n        when(filePreferences.getFileDirPattern()).thenReturn(\"[entrytype]/[year]/[auth]\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"Misc\").resolve(\"1989\").resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"Misc/1989/test.pdf\", \"\"))),\n                entry.getField(StandardField.FILE));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/MoveFilesCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"5ab494e8b1732f688d4ed8d696740bc7e8ef4101","commitMessage":"@@@Refactor file preferences (#6779)\n\n* Refactored for same basic clean-up and naming consistency\n\n* Refactored for more clean-ups and naming consistency\n\n* Refactored and extended AutoLinkPreferences\n\n* Refactored FilePreferences to immutable class\n\n* Refactored two preferences from AutoLinkPreferences to FilePreferences\n\n* Moved import linked file patterns preferences to FilePreferencesTab\n\n* Extended FilePreferences and refactored FileTab to use it\n\n* Checkstyle\n\n* Fixed merge error\n\n* Moved import-export preferences to exportSortingTab and renamed the tab\n\n* Renamed FileTab to LinkedFilesTab\n\n* Refactored ImportExportTab to PreferencesService\n\n* CHANGELOG.md\n\n* Rewording ImportExport to File\n\n* Make FilePreferences and SavePreferences mutable.  added ADR\n","date":"2020-09-01 20:20:10","modifiedFileCount":"28","status":"M","submitter":"Carl Christian Snethlage"},{"authorTime":"2020-09-26 05:39:50","codes":[{"authorDate":"2020-09-26 05:39:50","commitOrder":4,"curCode":"    void movesFile() {\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", Path.of(\"test.pdf\"), \"\"))),\n                entry.getField(StandardField.FILE));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","date":"2020-09-26 05:39:50","endLine":81,"groupId":"10556","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"movesFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/1c/96bd826589a5b99b756f2424d29850c688a345.src","preCode":"    void movesFile() throws Exception {\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"test.pdf\", \"\"))),\n                entry.getField(StandardField.FILE));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/MoveFilesCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-09-26 05:39:50","commitOrder":4,"curCode":"    void movesFileWithSubdirectoryPattern() {\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"[entrytype]/[year]/[auth]\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"Misc\").resolve(\"1989\").resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", Path.of(\"Misc/1989/test.pdf\"), \"\"))),\n                entry.getField(StandardField.FILE));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","date":"2020-09-26 05:39:50","endLine":143,"groupId":"10556","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"movesFileWithSubdirectoryPattern","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/1c/96bd826589a5b99b756f2424d29850c688a345.src","preCode":"    void movesFileWithSubdirectoryPattern() throws Exception {\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"[entrytype]/[year]/[auth]\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"Misc\").resolve(\"1989\").resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"Misc/1989/test.pdf\", \"\"))),\n                entry.getField(StandardField.FILE));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/MoveFilesCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"3123090b6cf44e853eceae42854d49e78e81be2a","commitMessage":"@@@Changed default value of \"search and store files relative to bibtex file\" to true (#6928)\n\n* Fixes #6863\n\n* CHANGELOG.md\n\n* Reworded bibLocationAsPrimary to reflect real meaning of the preference setting.  changed default val to true\n\n* Cleanup of deprecated methods LinkedFiles(String.  String.  String) and List<String> getFileDirectories(...)\n\n* Reworded package filelist to linkedfile\n\n* Fixed SpringerFetcher","date":"2020-09-26 05:39:50","modifiedFileCount":"45","status":"M","submitter":"Carl Christian Snethlage"}]
