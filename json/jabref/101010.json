[{"authorTime":"2020-07-09 17:48:40","codes":[{"authorDate":"2019-10-25 18:24:37","commitOrder":4,"curCode":"    public URL getURLForEntry(BibEntry entry) throws URISyntaxException, MalformedURLException, FetcherException {\n        StringBuilder stringBuilder = new StringBuilder();\n\n        Optional<String> title = entry.getFieldOrAlias(StandardField.TITLE).map(t -> \"title:\\\"\" + t + \"\\\"\");\n        Optional<String> author = entry.getFieldOrAlias(StandardField.AUTHOR).map(a -> \"author:\\\"\" + a + \"\\\"\");\n\n        if (title.isPresent()) {\n            stringBuilder.append(title.get())\n                         .append(author.map(s -> \" AND \" + s)\n                                       .orElse(\"\"));\n        } else {\n            stringBuilder.append(author.orElse(\"\"));\n        }\n        String query = stringBuilder.toString().trim();\n\n        URIBuilder builder = new URIBuilder(API_SEARCH_URL);\n        builder.addParameter(\"q\", query);\n        builder.addParameter(\"fl\", \"bibcode\");\n        builder.addParameter(\"rows\", \"20\");\n        return builder.build().toURL();\n    }\n","date":"2019-10-25 18:24:37","endLine":115,"groupId":"1877","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getURLForEntry","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/70/f81f095dda3e960ee83675edec8068eca3e213.src","preCode":"    public URL getURLForEntry(BibEntry entry) throws URISyntaxException, MalformedURLException, FetcherException {\n        StringBuilder stringBuilder = new StringBuilder();\n\n        Optional<String> title = entry.getFieldOrAlias(StandardField.TITLE).map(t -> \"title:\\\"\" + t + \"\\\"\");\n        Optional<String> author = entry.getFieldOrAlias(StandardField.AUTHOR).map(a -> \"author:\\\"\" + a + \"\\\"\");\n\n        if (title.isPresent()) {\n            stringBuilder.append(title.get())\n                         .append(author.map(s -> \" AND \" + s)\n                                       .orElse(\"\"));\n        } else {\n            stringBuilder.append(author.orElse(\"\"));\n        }\n        String query = stringBuilder.toString().trim();\n\n        URIBuilder builder = new URIBuilder(API_SEARCH_URL);\n        builder.addParameter(\"q\", query);\n        builder.addParameter(\"fl\", \"bibcode\");\n        builder.addParameter(\"rows\", \"20\");\n        return builder.build().toURL();\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/AstrophysicsDataSystem.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"NB"},{"authorDate":"2020-07-09 17:48:40","commitOrder":4,"curCode":"    public URL getUrlForIdentifier(String identifier) throws FetcherException, URISyntaxException, MalformedURLException {\n        String query = \"doi:\\\"\" + identifier + \"\\\" OR \" + \"bibcode:\\\"\" + identifier + \"\\\"\";\n        URIBuilder builder = new URIBuilder(API_SEARCH_URL);\n        builder.addParameter(\"q\", query);\n        builder.addParameter(\"fl\", \"bibcode\");\n        return builder.build().toURL();\n    }\n","date":"2020-07-09 17:48:40","endLine":130,"groupId":"440","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getUrlForIdentifier","params":"(Stringidentifier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/33/fdcabbea511f25511d7409af48814a79175896.src","preCode":"    public URL getUrlForIdentifier(String identifier) throws FetcherException, URISyntaxException, MalformedURLException {\n        String query = \"doi:\\\"\" + identifier + \"\\\" OR \" + \"bibcode:\\\"\" + identifier + \"\\\"\";\n        URIBuilder builder = new URIBuilder(API_SEARCH_URL);\n        builder.addParameter(\"q\", query);\n        builder.addParameter(\"fl\", \"bibcode\");\n        return builder.build().toURL();\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/AstrophysicsDataSystem.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"B"}],"commitId":"20e78a4959bb2ccc0155f3a2cd4bf107c7c11352","commitMessage":"@@@mEDRA DOI fetcher implementation. (#6641)\n\n* mEDRA DOI fetcher implementation.\n\n* mEDRA DOI fetcher implementation\n\n* mEDRA DOI fetcher implementation\n\n* mEDRA DOI fetcher implementation\n\n* mEDRA DOI fetcher implementation\n\n* mEDRA DOI fetcher implementation\n\n* mEDRA DOI fetcher implementation\n\n* mEDRA DOI fetcher implementation\n\n* mEDRA DOI fetcher implementation\n\n* mEDRA DOI fetcher implementation\n\n* Revert wrong merge\n\n* mEDRA DOI fetcher implementation\n\n* Rewrite JsonReader to accept an empty input stream\n\n* Introduce \"getUrlDownloadForIdentifier\" and shrink fetcher code\n\n- Rename getURLForID to getUrlForIdentifier\n- Shrink Medra fetcher\n- Shrink CrossRef fetcher\n\n* Use parameterized tests (and add ISSN to Cisternino Paola)\n\n* Fix parsing of names\n\n* Fix checkstyle\n\n* Move \"getUrlDownload\" up to WebFetcher\n\nReastion: It is the common base of both SearchBasedParserFetcher and IdBasedParserFetcher\n\n* Use new method \"getUrlDownload\"\n\n* mEDRA DOI fetcher implementation\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>\nCo-authored-by: Christoph <siedlerkiller@gmail.com>","date":"2020-07-09 17:48:40","modifiedFileCount":"20","status":"M","submitter":"Giovanni Caldarola"},{"authorTime":"2020-07-09 17:48:40","codes":[{"authorDate":"2020-11-16 06:01:39","commitOrder":5,"curCode":"    public URL getURLForEntry(BibEntry entry) throws URISyntaxException, MalformedURLException {\n        StringBuilder stringBuilder = new StringBuilder();\n\n        Optional<String> title = entry.getFieldOrAlias(StandardField.TITLE).map(t -> \"title:\\\"\" + t + \"\\\"\");\n        Optional<String> author = entry.getFieldOrAlias(StandardField.AUTHOR).map(a -> \"author:\\\"\" + a + \"\\\"\");\n\n        if (title.isPresent()) {\n            stringBuilder.append(title.get())\n                         .append(author.map(s -> \" AND \" + s)\n                                       .orElse(\"\"));\n        } else {\n            stringBuilder.append(author.orElse(\"\"));\n        }\n        String query = stringBuilder.toString().trim();\n\n        URIBuilder builder = new URIBuilder(API_SEARCH_URL);\n        builder.addParameter(\"q\", query);\n        builder.addParameter(\"fl\", \"bibcode\");\n        builder.addParameter(\"rows\", \"20\");\n        return builder.build().toURL();\n    }\n","date":"2020-11-16 06:01:39","endLine":120,"groupId":"101010","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getURLForEntry","params":"(BibEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a2/66418b3517308c79b1e265793b1756b4562ead.src","preCode":"    public URL getURLForEntry(BibEntry entry) throws URISyntaxException, MalformedURLException, FetcherException {\n        StringBuilder stringBuilder = new StringBuilder();\n\n        Optional<String> title = entry.getFieldOrAlias(StandardField.TITLE).map(t -> \"title:\\\"\" + t + \"\\\"\");\n        Optional<String> author = entry.getFieldOrAlias(StandardField.AUTHOR).map(a -> \"author:\\\"\" + a + \"\\\"\");\n\n        if (title.isPresent()) {\n            stringBuilder.append(title.get())\n                         .append(author.map(s -> \" AND \" + s)\n                                       .orElse(\"\"));\n        } else {\n            stringBuilder.append(author.orElse(\"\"));\n        }\n        String query = stringBuilder.toString().trim();\n\n        URIBuilder builder = new URIBuilder(API_SEARCH_URL);\n        builder.addParameter(\"q\", query);\n        builder.addParameter(\"fl\", \"bibcode\");\n        builder.addParameter(\"rows\", \"20\");\n        return builder.build().toURL();\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/AstrophysicsDataSystem.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2020-07-09 17:48:40","commitOrder":5,"curCode":"    public URL getUrlForIdentifier(String identifier) throws FetcherException, URISyntaxException, MalformedURLException {\n        String query = \"doi:\\\"\" + identifier + \"\\\" OR \" + \"bibcode:\\\"\" + identifier + \"\\\"\";\n        URIBuilder builder = new URIBuilder(API_SEARCH_URL);\n        builder.addParameter(\"q\", query);\n        builder.addParameter(\"fl\", \"bibcode\");\n        return builder.build().toURL();\n    }\n","date":"2020-07-09 17:48:40","endLine":130,"groupId":"101010","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getUrlForIdentifier","params":"(Stringidentifier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/33/fdcabbea511f25511d7409af48814a79175896.src","preCode":"    public URL getUrlForIdentifier(String identifier) throws FetcherException, URISyntaxException, MalformedURLException {\n        String query = \"doi:\\\"\" + identifier + \"\\\" OR \" + \"bibcode:\\\"\" + identifier + \"\\\"\";\n        URIBuilder builder = new URIBuilder(API_SEARCH_URL);\n        builder.addParameter(\"q\", query);\n        builder.addParameter(\"fl\", \"bibcode\");\n        return builder.build().toURL();\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/AstrophysicsDataSystem.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"N"}],"commitId":"00e340919cee86159d3af587c8d3db60ccf2c94b","commitMessage":"@@@Feature/enable paginated fetchers (#7082)\n\n","date":"2020-11-16 06:01:39","modifiedFileCount":"29","status":"M","submitter":"Dominik Voigt"}]
