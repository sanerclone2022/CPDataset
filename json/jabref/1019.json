[{"authorTime":"2021-03-15 06:26:52","codes":[{"authorDate":"2021-03-15 06:26:52","commitOrder":1,"curCode":"    void downloadHtmlWhenLinkedFilePointsToHtml() throws MalformedURLException {\n        \r\n        String url = \"https://onlinelibrary.wiley.com/doi/abs/10.1002/0470862106.ia615\";\n        String fileType = StandardExternalFileType.URL.getName();\n        linkedFile = new LinkedFile(new URL(url), fileType);\n\n        when(filePreferences.shouldStoreFilesRelativeToBib()).thenReturn(true);\n        when(filePreferences.getFileNamePattern()).thenReturn(\"[citationkey]\");\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"[entrytype]\");\n\n        databaseContext.setDatabasePath(tempFile);\n\n        LinkedFileViewModel viewModel = new LinkedFileViewModel(linkedFile, entry, databaseContext, new CurrentThreadTaskExecutor(), dialogService, xmpPreferences, filePreferences, externalFileType);\n\n        viewModel.download();\n\n        List<LinkedFile> linkedFiles = entry.getFiles();\n\n        for (LinkedFile file: linkedFiles) {\n            if (file.getLink().equalsIgnoreCase(\"Misc/asdf.html\")) {\n                assertEquals(\"URL\", file.getFileType());\n                return;\n            }\n        }\n        \r\n        fail();\n    }\n","date":"2021-03-15 06:26:52","endLine":246,"groupId":"4614","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"downloadHtmlWhenLinkedFilePointsToHtml","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/b5/443699f57026ea2f210a3e37644ae58d540892.src","preCode":"    void downloadHtmlWhenLinkedFilePointsToHtml() throws MalformedURLException {\n        \r\n        String url = \"https://onlinelibrary.wiley.com/doi/abs/10.1002/0470862106.ia615\";\n        String fileType = StandardExternalFileType.URL.getName();\n        linkedFile = new LinkedFile(new URL(url), fileType);\n\n        when(filePreferences.shouldStoreFilesRelativeToBib()).thenReturn(true);\n        when(filePreferences.getFileNamePattern()).thenReturn(\"[citationkey]\");\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"[entrytype]\");\n\n        databaseContext.setDatabasePath(tempFile);\n\n        LinkedFileViewModel viewModel = new LinkedFileViewModel(linkedFile, entry, databaseContext, new CurrentThreadTaskExecutor(), dialogService, xmpPreferences, filePreferences, externalFileType);\n\n        viewModel.download();\n\n        List<LinkedFile> linkedFiles = entry.getFiles();\n\n        for (LinkedFile file: linkedFiles) {\n            if (file.getLink().equalsIgnoreCase(\"Misc/asdf.html\")) {\n                assertEquals(\"URL\", file.getFileType());\n                return;\n            }\n        }\n        \r\n        fail();\n    }\n","realPath":"src/test/java/org/jabref/gui/fieldeditors/LinkedFileViewModelTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"B"},{"authorDate":"2021-03-15 06:26:52","commitOrder":1,"curCode":"    void downloadPdfFileWhenLinkedFilePointsToPdfUrl() throws MalformedURLException {\n        linkedFile = new LinkedFile(new URL(\"http://arxiv.org/pdf/1207.0408v1\"), \"pdf\");\n        \r\n        when(filePreferences.shouldStoreFilesRelativeToBib()).thenReturn(true);\n        when(filePreferences.getFileNamePattern()).thenReturn(\"[citationkey]\");\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"[entrytype]\");\n\n        databaseContext.setDatabasePath(tempFile);\n\n        LinkedFileViewModel viewModel = new LinkedFileViewModel(linkedFile, entry, databaseContext, new CurrentThreadTaskExecutor(), dialogService, xmpPreferences, filePreferences, externalFileType);\n        viewModel.download();\n\n        \r\n        List<LinkedFile> linkedFiles = entry.getFiles();\n        for (LinkedFile files : linkedFiles) {\n            if (files.getLink().equalsIgnoreCase(\"Misc/asdf.pdf\")) {\n                assertEquals(\"pdf\", files.getFileType().toLowerCase());\n                return;\n            }\n        }\n        \r\n        fail();\n    }\n","date":"2021-03-15 06:26:52","endLine":302,"groupId":"4614","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"downloadPdfFileWhenLinkedFilePointsToPdfUrl","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/b5/443699f57026ea2f210a3e37644ae58d540892.src","preCode":"    void downloadPdfFileWhenLinkedFilePointsToPdfUrl() throws MalformedURLException {\n        linkedFile = new LinkedFile(new URL(\"http://arxiv.org/pdf/1207.0408v1\"), \"pdf\");\n        \r\n        when(filePreferences.shouldStoreFilesRelativeToBib()).thenReturn(true);\n        when(filePreferences.getFileNamePattern()).thenReturn(\"[citationkey]\");\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"[entrytype]\");\n\n        databaseContext.setDatabasePath(tempFile);\n\n        LinkedFileViewModel viewModel = new LinkedFileViewModel(linkedFile, entry, databaseContext, new CurrentThreadTaskExecutor(), dialogService, xmpPreferences, filePreferences, externalFileType);\n        viewModel.download();\n\n        \r\n        List<LinkedFile> linkedFiles = entry.getFiles();\n        for (LinkedFile files : linkedFiles) {\n            if (files.getLink().equalsIgnoreCase(\"Misc/asdf.pdf\")) {\n                assertEquals(\"pdf\", files.getFileType().toLowerCase());\n                return;\n            }\n        }\n        \r\n        fail();\n    }\n","realPath":"src/test/java/org/jabref/gui/fieldeditors/LinkedFileViewModelTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"B"}],"commitId":"42270fadcf75507fdf0bda1a3cf1634e5602f563","commitMessage":"@@@Dd2480 2021 group 22 fix for issue 7452 (#7534)\n\n* Ignore mime type params  (#7452)\n\nAdds ignore parameter to mime type and notify the user if the file downloaded is HTML.\n\n* Update status bar message (#7452)\n\nUse Localization when writing messages in the status bar.\n\n* Add debug message (#7452)\n\n* Replace apache StringUtils (#7452)\nreplace StringUtils::substringBefore with String::substring\n\n* Add UI test (#7452)\nAdd test ensuring the UI warns the user if they download a linked HTML file (i.e. a web page).\n\n* Add unit test for HTML file (#7452)\n\nThe test checks the resulting file type when downloading a HTML file.\n\n* Fix mime type parsing bug (#7452)\nAdd check to only process the mimeType if an ';' exists inside the string\n\n* Add unit test for mime type parsing (#7452)\n\nTests that mime type with parameter value is parsed correctly to exclude the parameter.\n\n* Add changes to changelog (#7452)\n\n* Clarify changes (#7452)\n\n* Reset cookie policy in test (#7452)\n\nSets a new system-wide cookie manager if there is none.  and sets the cookie policy\nto ACCEPT_NONE after each test.\n\n* Add test for when a linked file points to a PDF url (#7452)\n\n* Clean up code style (#7452)\nClean up code styling according to JabRef style guidelines.\n\n* Remove duplicate changelog entry (#7452)\n\n* Refactor LinkedFileViewModelTest adding mock for JabRefPreferences used in testing (#7452)\n\n* Refactor LinkedFileViewModelTest removing redundant code (#7452)\n\n* Refactor LinkedFileViewModelTest removing redundant code (#7452)\n\n* Fix tests\n\n* fix checkstyle\n\nCo-authored-by: Binxin <binxin@kth.se>\nCo-authored-by: kittyt <kittyt@kth.se>\nCo-authored-by: Keivan Matinzadeh <matinzadeh.keivan@gmail.com>\nCo-authored-by: Johan Grundberg <johan.grundberg98@gmail.com>\nCo-authored-by: Johan Grundberg <grundb@kth.se>\nCo-authored-by: kaniyi <kaniyi@kth.se>","date":"2021-03-15 06:26:52","modifiedFileCount":"3","status":"B","submitter":"Christoph"},{"authorTime":"2021-08-22 02:47:23","codes":[{"authorDate":"2021-08-22 02:47:23","commitOrder":2,"curCode":"    void downloadHtmlWhenLinkedFilePointsToHtml() throws MalformedURLException {\n        \r\n        String url = \"https://onlinelibrary.wiley.com/doi/abs/10.1002/0470862106.ia615\";\n        String fileType = StandardExternalFileType.URL.getName();\n        linkedFile = new LinkedFile(new URL(url), fileType);\n\n        when(filePreferences.shouldStoreFilesRelativeToBib()).thenReturn(true);\n        when(filePreferences.getFileNamePattern()).thenReturn(\"[citationkey]\");\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"[entrytype]\");\n\n        databaseContext.setDatabasePath(tempFile);\n\n        LinkedFileViewModel viewModel = new LinkedFileViewModel(linkedFile, entry, databaseContext, new CurrentThreadTaskExecutor(), dialogService, preferences, externalFileType);\n\n        viewModel.download();\n\n        List<LinkedFile> linkedFiles = entry.getFiles();\n\n        for (LinkedFile file: linkedFiles) {\n            if (file.getLink().equalsIgnoreCase(\"Misc/asdf.html\")) {\n                assertEquals(\"URL\", file.getFileType());\n                return;\n            }\n        }\n        \r\n        fail();\n    }\n","date":"2021-08-22 02:47:23","endLine":249,"groupId":"1019","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"downloadHtmlWhenLinkedFilePointsToHtml","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/5b/78bd0d6c27f7311b10382063d0094596088b61.src","preCode":"    void downloadHtmlWhenLinkedFilePointsToHtml() throws MalformedURLException {\n        \r\n        String url = \"https://onlinelibrary.wiley.com/doi/abs/10.1002/0470862106.ia615\";\n        String fileType = StandardExternalFileType.URL.getName();\n        linkedFile = new LinkedFile(new URL(url), fileType);\n\n        when(filePreferences.shouldStoreFilesRelativeToBib()).thenReturn(true);\n        when(filePreferences.getFileNamePattern()).thenReturn(\"[citationkey]\");\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"[entrytype]\");\n\n        databaseContext.setDatabasePath(tempFile);\n\n        LinkedFileViewModel viewModel = new LinkedFileViewModel(linkedFile, entry, databaseContext, new CurrentThreadTaskExecutor(), dialogService, xmpPreferences, filePreferences, externalFileType);\n\n        viewModel.download();\n\n        List<LinkedFile> linkedFiles = entry.getFiles();\n\n        for (LinkedFile file: linkedFiles) {\n            if (file.getLink().equalsIgnoreCase(\"Misc/asdf.html\")) {\n                assertEquals(\"URL\", file.getFileType());\n                return;\n            }\n        }\n        \r\n        fail();\n    }\n","realPath":"src/test/java/org/jabref/gui/fieldeditors/LinkedFileViewModelTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"},{"authorDate":"2021-08-22 02:47:23","commitOrder":2,"curCode":"    void downloadPdfFileWhenLinkedFilePointsToPdfUrl() throws MalformedURLException {\n        linkedFile = new LinkedFile(new URL(\"http://arxiv.org/pdf/1207.0408v1\"), \"pdf\");\n        \r\n        when(filePreferences.shouldStoreFilesRelativeToBib()).thenReturn(true);\n        when(filePreferences.getFileNamePattern()).thenReturn(\"[citationkey]\");\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"[entrytype]\");\n\n        databaseContext.setDatabasePath(tempFile);\n\n        LinkedFileViewModel viewModel = new LinkedFileViewModel(linkedFile, entry, databaseContext, new CurrentThreadTaskExecutor(), dialogService, preferences, externalFileType);\n        viewModel.download();\n\n        \r\n        List<LinkedFile> linkedFiles = entry.getFiles();\n        for (LinkedFile files : linkedFiles) {\n            if (files.getLink().equalsIgnoreCase(\"Misc/asdf.pdf\")) {\n                assertEquals(\"pdf\", files.getFileType().toLowerCase());\n                return;\n            }\n        }\n        \r\n        fail();\n    }\n","date":"2021-08-22 02:47:23","endLine":305,"groupId":"1019","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"downloadPdfFileWhenLinkedFilePointsToPdfUrl","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/5b/78bd0d6c27f7311b10382063d0094596088b61.src","preCode":"    void downloadPdfFileWhenLinkedFilePointsToPdfUrl() throws MalformedURLException {\n        linkedFile = new LinkedFile(new URL(\"http://arxiv.org/pdf/1207.0408v1\"), \"pdf\");\n        \r\n        when(filePreferences.shouldStoreFilesRelativeToBib()).thenReturn(true);\n        when(filePreferences.getFileNamePattern()).thenReturn(\"[citationkey]\");\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"[entrytype]\");\n\n        databaseContext.setDatabasePath(tempFile);\n\n        LinkedFileViewModel viewModel = new LinkedFileViewModel(linkedFile, entry, databaseContext, new CurrentThreadTaskExecutor(), dialogService, xmpPreferences, filePreferences, externalFileType);\n        viewModel.download();\n\n        \r\n        List<LinkedFile> linkedFiles = entry.getFiles();\n        for (LinkedFile files : linkedFiles) {\n            if (files.getLink().equalsIgnoreCase(\"Misc/asdf.pdf\")) {\n                assertEquals(\"pdf\", files.getFileType().toLowerCase());\n                return;\n            }\n        }\n        \r\n        fail();\n    }\n","realPath":"src/test/java/org/jabref/gui/fieldeditors/LinkedFileViewModelTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"}],"commitId":"fd1cab0eb1ed51261049b7799584b060dbe46755","commitMessage":"@@@Implement an interface to import PDF metadata from multiple sources (XMP.  Grobid.  ...) (#7929)\n\nCo-authored-by: Christoph <siedlerkiller@gmail.com>\nCo-authored-by: Carl Christian Snethlage <50491877+calixtus@users.noreply.github.com>\n","date":"2021-08-22 02:47:23","modifiedFileCount":"10","status":"M","submitter":"Benedikt Tutzer"}]
