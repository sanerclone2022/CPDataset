[{"authorTime":"2018-01-03 02:38:01","codes":[{"authorDate":"2018-01-03 02:38:01","commitOrder":1,"curCode":"    private void removeSharedFieldsByDifference(BibEntry localBibEntry, BibEntry sharedBibEntry) throws SQLException {\n        Set<String> nullFields = new HashSet<>(sharedBibEntry.getFieldNames());\n        nullFields.removeAll(localBibEntry.getFieldNames());\n        for (String nullField : nullFields) {\n            StringBuilder deleteFieldQuery = new StringBuilder()\n                .append(\"DELETE FROM \")\n                .append(escape(\"FIELD\"))\n                .append(\" WHERE \")\n                .append(escape(\"NAME\"))\n                .append(\" = ? AND \")\n                .append(escape(\"ENTRY_SHARED_ID\"))\n                .append(\" = ?\");\n\n            try (PreparedStatement preparedDeleteFieldStatement = connection\n                    .prepareStatement(deleteFieldQuery.toString())) {\n                preparedDeleteFieldStatement.setString(1, nullField);\n                preparedDeleteFieldStatement.setInt(2, localBibEntry.getSharedBibEntryData().getSharedID());\n                preparedDeleteFieldStatement.executeUpdate();\n            }\n        }\n    }\n","date":"2018-01-03 02:38:01","endLine":323,"groupId":"2195","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"removeSharedFieldsByDifference","params":"(BibEntrylocalBibEntry@BibEntrysharedBibEntry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/5e/5ac46aa4924b3f813a5bd6f16482a283ff0184.src","preCode":"    private void removeSharedFieldsByDifference(BibEntry localBibEntry, BibEntry sharedBibEntry) throws SQLException {\n        Set<String> nullFields = new HashSet<>(sharedBibEntry.getFieldNames());\n        nullFields.removeAll(localBibEntry.getFieldNames());\n        for (String nullField : nullFields) {\n            StringBuilder deleteFieldQuery = new StringBuilder()\n                .append(\"DELETE FROM \")\n                .append(escape(\"FIELD\"))\n                .append(\" WHERE \")\n                .append(escape(\"NAME\"))\n                .append(\" = ? AND \")\n                .append(escape(\"ENTRY_SHARED_ID\"))\n                .append(\" = ?\");\n\n            try (PreparedStatement preparedDeleteFieldStatement = connection\n                    .prepareStatement(deleteFieldQuery.toString())) {\n                preparedDeleteFieldStatement.setString(1, nullField);\n                preparedDeleteFieldStatement.setInt(2, localBibEntry.getSharedBibEntryData().getSharedID());\n                preparedDeleteFieldStatement.executeUpdate();\n            }\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/shared/DBMSProcessor.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"B"},{"authorDate":"2018-01-03 02:38:01","commitOrder":1,"curCode":"    private void insertOrUpdateFields(BibEntry localBibEntry) throws SQLException {\n        for (String fieldName : localBibEntry.getFieldNames()) {\n            \r\n            Optional<String> valueOptional = localBibEntry.getField(fieldName);\n            String value = null;\n            if (valueOptional.isPresent()) {\n                value = valueOptional.get();\n            }\n\n            StringBuilder selectFieldQuery = new StringBuilder()\n                    .append(\"SELECT * FROM \")\n                    .append(escape(\"FIELD\"))\n                    .append(\" WHERE \")\n                    .append(escape(\"NAME\"))\n                    .append(\" = ? AND \")\n                    .append(escape(\"ENTRY_SHARED_ID\"))\n                    .append(\" = ?\");\n\n            try (PreparedStatement preparedSelectFieldStatement = connection\n                    .prepareStatement(selectFieldQuery.toString())) {\n                preparedSelectFieldStatement.setString(1, fieldName);\n                preparedSelectFieldStatement.setInt(2, localBibEntry.getSharedBibEntryData().getSharedID());\n\n                try (ResultSet selectFieldResultSet = preparedSelectFieldStatement.executeQuery()) {\n                    if (selectFieldResultSet.next()) { \r\n                        StringBuilder updateFieldQuery = new StringBuilder()\n                                .append(\"UPDATE \")\n                                .append(escape(\"FIELD\"))\n                                .append(\" SET \")\n                                .append(escape(\"VALUE\"))\n                                .append(\" = ? WHERE \")\n                                .append(escape(\"NAME\"))\n                                .append(\" = ? AND \")\n                                .append(escape(\"ENTRY_SHARED_ID\"))\n                                .append(\" = ?\");\n\n                        try (PreparedStatement preparedUpdateFieldStatement = connection\n                                .prepareStatement(updateFieldQuery.toString())) {\n                            preparedUpdateFieldStatement.setString(1, value);\n                            preparedUpdateFieldStatement.setString(2, fieldName);\n                            preparedUpdateFieldStatement.setInt(3, localBibEntry.getSharedBibEntryData().getSharedID());\n                            preparedUpdateFieldStatement.executeUpdate();\n                        }\n                    } else {\n                        StringBuilder insertFieldQuery = new StringBuilder()\n                                .append(\"INSERT INTO \")\n                                .append(escape(\"FIELD\"))\n                                .append(\"(\")\n                                .append(escape(\"ENTRY_SHARED_ID\"))\n                                .append(\", \")\n                                .append(escape(\"NAME\"))\n                                .append(\", \")\n                                .append(escape(\"VALUE\"))\n                                .append(\") VALUES(?, ?, ?)\");\n\n                        try (PreparedStatement preparedFieldStatement = connection\n                                .prepareStatement(insertFieldQuery.toString())) {\n                            preparedFieldStatement.setInt(1, localBibEntry.getSharedBibEntryData().getSharedID());\n                            preparedFieldStatement.setString(2, fieldName);\n                            preparedFieldStatement.setString(3, value);\n                            preparedFieldStatement.executeUpdate();\n                        }\n                    }\n                }\n            }\n        }\n    }\n","date":"2018-01-03 02:38:01","endLine":394,"groupId":"7448","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"insertOrUpdateFields","params":"(BibEntrylocalBibEntry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/5e/5ac46aa4924b3f813a5bd6f16482a283ff0184.src","preCode":"    private void insertOrUpdateFields(BibEntry localBibEntry) throws SQLException {\n        for (String fieldName : localBibEntry.getFieldNames()) {\n            \r\n            Optional<String> valueOptional = localBibEntry.getField(fieldName);\n            String value = null;\n            if (valueOptional.isPresent()) {\n                value = valueOptional.get();\n            }\n\n            StringBuilder selectFieldQuery = new StringBuilder()\n                    .append(\"SELECT * FROM \")\n                    .append(escape(\"FIELD\"))\n                    .append(\" WHERE \")\n                    .append(escape(\"NAME\"))\n                    .append(\" = ? AND \")\n                    .append(escape(\"ENTRY_SHARED_ID\"))\n                    .append(\" = ?\");\n\n            try (PreparedStatement preparedSelectFieldStatement = connection\n                    .prepareStatement(selectFieldQuery.toString())) {\n                preparedSelectFieldStatement.setString(1, fieldName);\n                preparedSelectFieldStatement.setInt(2, localBibEntry.getSharedBibEntryData().getSharedID());\n\n                try (ResultSet selectFieldResultSet = preparedSelectFieldStatement.executeQuery()) {\n                    if (selectFieldResultSet.next()) { \r\n                        StringBuilder updateFieldQuery = new StringBuilder()\n                                .append(\"UPDATE \")\n                                .append(escape(\"FIELD\"))\n                                .append(\" SET \")\n                                .append(escape(\"VALUE\"))\n                                .append(\" = ? WHERE \")\n                                .append(escape(\"NAME\"))\n                                .append(\" = ? AND \")\n                                .append(escape(\"ENTRY_SHARED_ID\"))\n                                .append(\" = ?\");\n\n                        try (PreparedStatement preparedUpdateFieldStatement = connection\n                                .prepareStatement(updateFieldQuery.toString())) {\n                            preparedUpdateFieldStatement.setString(1, value);\n                            preparedUpdateFieldStatement.setString(2, fieldName);\n                            preparedUpdateFieldStatement.setInt(3, localBibEntry.getSharedBibEntryData().getSharedID());\n                            preparedUpdateFieldStatement.executeUpdate();\n                        }\n                    } else {\n                        StringBuilder insertFieldQuery = new StringBuilder()\n                                .append(\"INSERT INTO \")\n                                .append(escape(\"FIELD\"))\n                                .append(\"(\")\n                                .append(escape(\"ENTRY_SHARED_ID\"))\n                                .append(\", \")\n                                .append(escape(\"NAME\"))\n                                .append(\", \")\n                                .append(escape(\"VALUE\"))\n                                .append(\") VALUES(?, ?, ?)\");\n\n                        try (PreparedStatement preparedFieldStatement = connection\n                                .prepareStatement(insertFieldQuery.toString())) {\n                            preparedFieldStatement.setInt(1, localBibEntry.getSharedBibEntryData().getSharedID());\n                            preparedFieldStatement.setString(2, fieldName);\n                            preparedFieldStatement.setString(3, value);\n                            preparedFieldStatement.executeUpdate();\n                        }\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/shared/DBMSProcessor.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"B"}],"commitId":"c7517154ffc54aa1b4b2b0103f5e7b316fff61be","commitMessage":"@@@Refactor shared package into the architecture (#3523)\n\n* Refactor shared package into the architecture\n\n* Add DatabaseConnectionProperties to DatabaseSynchronizer interface\n\n* Encapsulate SQLException in IllegalStateException\n","date":"2018-01-03 02:38:01","modifiedFileCount":"12","status":"B","submitter":"J?rg Lenhard"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":2,"curCode":"    private void removeSharedFieldsByDifference(BibEntry localBibEntry, BibEntry sharedBibEntry) throws SQLException {\n        Set<Field> nullFields = new HashSet<>(sharedBibEntry.getFields());\n        nullFields.removeAll(localBibEntry.getFields());\n        for (Field nullField : nullFields) {\n            StringBuilder deleteFieldQuery = new StringBuilder()\n                .append(\"DELETE FROM \")\n                .append(escape(\"FIELD\"))\n                .append(\" WHERE \")\n                .append(escape(\"NAME\"))\n                .append(\" = ? AND \")\n                .append(escape(\"ENTRY_SHARED_ID\"))\n                .append(\" = ?\");\n\n            try (PreparedStatement preparedDeleteFieldStatement = connection\n                    .prepareStatement(deleteFieldQuery.toString())) {\n                preparedDeleteFieldStatement.setString(1, nullField.getName());\n                preparedDeleteFieldStatement.setInt(2, localBibEntry.getSharedBibEntryData().getSharedID());\n                preparedDeleteFieldStatement.executeUpdate();\n            }\n        }\n    }\n","date":"2019-08-02 15:20:10","endLine":326,"groupId":"101047","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"removeSharedFieldsByDifference","params":"(BibEntrylocalBibEntry@BibEntrysharedBibEntry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a9/4dc133901534c7cd340fd2c589049c293878f8.src","preCode":"    private void removeSharedFieldsByDifference(BibEntry localBibEntry, BibEntry sharedBibEntry) throws SQLException {\n        Set<String> nullFields = new HashSet<>(sharedBibEntry.getFieldNames());\n        nullFields.removeAll(localBibEntry.getFieldNames());\n        for (String nullField : nullFields) {\n            StringBuilder deleteFieldQuery = new StringBuilder()\n                .append(\"DELETE FROM \")\n                .append(escape(\"FIELD\"))\n                .append(\" WHERE \")\n                .append(escape(\"NAME\"))\n                .append(\" = ? AND \")\n                .append(escape(\"ENTRY_SHARED_ID\"))\n                .append(\" = ?\");\n\n            try (PreparedStatement preparedDeleteFieldStatement = connection\n                    .prepareStatement(deleteFieldQuery.toString())) {\n                preparedDeleteFieldStatement.setString(1, nullField);\n                preparedDeleteFieldStatement.setInt(2, localBibEntry.getSharedBibEntryData().getSharedID());\n                preparedDeleteFieldStatement.executeUpdate();\n            }\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/shared/DBMSProcessor.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"M"},{"authorDate":"2019-08-02 15:20:10","commitOrder":2,"curCode":"    private void insertOrUpdateFields(BibEntry localBibEntry) throws SQLException {\n        for (Field field : localBibEntry.getFields()) {\n            \r\n            Optional<String> valueOptional = localBibEntry.getField(field);\n            String value = null;\n            if (valueOptional.isPresent()) {\n                value = valueOptional.get();\n            }\n\n            StringBuilder selectFieldQuery = new StringBuilder()\n                    .append(\"SELECT * FROM \")\n                    .append(escape(\"FIELD\"))\n                    .append(\" WHERE \")\n                    .append(escape(\"NAME\"))\n                    .append(\" = ? AND \")\n                    .append(escape(\"ENTRY_SHARED_ID\"))\n                    .append(\" = ?\");\n\n            try (PreparedStatement preparedSelectFieldStatement = connection\n                    .prepareStatement(selectFieldQuery.toString())) {\n                preparedSelectFieldStatement.setString(1, field.getName());\n                preparedSelectFieldStatement.setInt(2, localBibEntry.getSharedBibEntryData().getSharedID());\n\n                try (ResultSet selectFieldResultSet = preparedSelectFieldStatement.executeQuery()) {\n                    if (selectFieldResultSet.next()) { \r\n                        StringBuilder updateFieldQuery = new StringBuilder()\n                                .append(\"UPDATE \")\n                                .append(escape(\"FIELD\"))\n                                .append(\" SET \")\n                                .append(escape(\"VALUE\"))\n                                .append(\" = ? WHERE \")\n                                .append(escape(\"NAME\"))\n                                .append(\" = ? AND \")\n                                .append(escape(\"ENTRY_SHARED_ID\"))\n                                .append(\" = ?\");\n\n                        try (PreparedStatement preparedUpdateFieldStatement = connection\n                                .prepareStatement(updateFieldQuery.toString())) {\n                            preparedUpdateFieldStatement.setString(1, value);\n                            preparedUpdateFieldStatement.setString(2, field.getName());\n                            preparedUpdateFieldStatement.setInt(3, localBibEntry.getSharedBibEntryData().getSharedID());\n                            preparedUpdateFieldStatement.executeUpdate();\n                        }\n                    } else {\n                        StringBuilder insertFieldQuery = new StringBuilder()\n                                .append(\"INSERT INTO \")\n                                .append(escape(\"FIELD\"))\n                                .append(\"(\")\n                                .append(escape(\"ENTRY_SHARED_ID\"))\n                                .append(\", \")\n                                .append(escape(\"NAME\"))\n                                .append(\", \")\n                                .append(escape(\"VALUE\"))\n                                .append(\") VALUES(?, ?, ?)\");\n\n                        try (PreparedStatement preparedFieldStatement = connection\n                                .prepareStatement(insertFieldQuery.toString())) {\n                            preparedFieldStatement.setInt(1, localBibEntry.getSharedBibEntryData().getSharedID());\n                            preparedFieldStatement.setString(2, field.getName());\n                            preparedFieldStatement.setString(3, value);\n                            preparedFieldStatement.executeUpdate();\n                        }\n                    }\n                }\n            }\n        }\n    }\n","date":"2019-08-02 15:20:10","endLine":397,"groupId":"101047","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"insertOrUpdateFields","params":"(BibEntrylocalBibEntry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a9/4dc133901534c7cd340fd2c589049c293878f8.src","preCode":"    private void insertOrUpdateFields(BibEntry localBibEntry) throws SQLException {\n        for (String fieldName : localBibEntry.getFieldNames()) {\n            \r\n            Optional<String> valueOptional = localBibEntry.getField(fieldName);\n            String value = null;\n            if (valueOptional.isPresent()) {\n                value = valueOptional.get();\n            }\n\n            StringBuilder selectFieldQuery = new StringBuilder()\n                    .append(\"SELECT * FROM \")\n                    .append(escape(\"FIELD\"))\n                    .append(\" WHERE \")\n                    .append(escape(\"NAME\"))\n                    .append(\" = ? AND \")\n                    .append(escape(\"ENTRY_SHARED_ID\"))\n                    .append(\" = ?\");\n\n            try (PreparedStatement preparedSelectFieldStatement = connection\n                    .prepareStatement(selectFieldQuery.toString())) {\n                preparedSelectFieldStatement.setString(1, fieldName);\n                preparedSelectFieldStatement.setInt(2, localBibEntry.getSharedBibEntryData().getSharedID());\n\n                try (ResultSet selectFieldResultSet = preparedSelectFieldStatement.executeQuery()) {\n                    if (selectFieldResultSet.next()) { \r\n                        StringBuilder updateFieldQuery = new StringBuilder()\n                                .append(\"UPDATE \")\n                                .append(escape(\"FIELD\"))\n                                .append(\" SET \")\n                                .append(escape(\"VALUE\"))\n                                .append(\" = ? WHERE \")\n                                .append(escape(\"NAME\"))\n                                .append(\" = ? AND \")\n                                .append(escape(\"ENTRY_SHARED_ID\"))\n                                .append(\" = ?\");\n\n                        try (PreparedStatement preparedUpdateFieldStatement = connection\n                                .prepareStatement(updateFieldQuery.toString())) {\n                            preparedUpdateFieldStatement.setString(1, value);\n                            preparedUpdateFieldStatement.setString(2, fieldName);\n                            preparedUpdateFieldStatement.setInt(3, localBibEntry.getSharedBibEntryData().getSharedID());\n                            preparedUpdateFieldStatement.executeUpdate();\n                        }\n                    } else {\n                        StringBuilder insertFieldQuery = new StringBuilder()\n                                .append(\"INSERT INTO \")\n                                .append(escape(\"FIELD\"))\n                                .append(\"(\")\n                                .append(escape(\"ENTRY_SHARED_ID\"))\n                                .append(\", \")\n                                .append(escape(\"NAME\"))\n                                .append(\", \")\n                                .append(escape(\"VALUE\"))\n                                .append(\") VALUES(?, ?, ?)\");\n\n                        try (PreparedStatement preparedFieldStatement = connection\n                                .prepareStatement(insertFieldQuery.toString())) {\n                            preparedFieldStatement.setInt(1, localBibEntry.getSharedBibEntryData().getSharedID());\n                            preparedFieldStatement.setString(2, fieldName);\n                            preparedFieldStatement.setString(3, value);\n                            preparedFieldStatement.executeUpdate();\n                        }\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/shared/DBMSProcessor.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"}],"commitId":"4b39b78e4afcd6c36b385f5c46f1d9a4eac2e29b","commitMessage":"@@@Move to extended enums for fields and entry types (#5148)\n\n* Introduce interface for fields\n\n* Continue using fields interface instead of strings\n\n* Introduce OrFields class\n\n* Move FieldProperty\n\n* Convert entry types to extended enum\n\n* Start fixing build\n\n* Fix build\n\n* Start fixing tests\n\n* Everything compiles again\n\n* Make model tests pass\n\n* Fix most tests\n\n* Fix build\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix checkstyle issues\n\n* Fix more tests\n\n* Fix more tests\n\n* Disable test that fails on CI\n\n* Disable test that fails on CI\n","date":"2019-08-02 15:20:10","modifiedFileCount":"439","status":"M","submitter":"Tobias Diez"}]
