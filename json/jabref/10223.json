[{"authorTime":"2017-02-17 05:41:47","codes":[{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public void testIsRecognizedFormat() throws IOException, URISyntaxException {\n        List<String> list = Arrays.asList(\"Endnote.pattern.A.enw\", \"Endnote.pattern.E.enw\", \"Endnote.book.example.enw\");\n\n        for (String str : list) {\n            Path file = Paths.get(EndnoteImporterTest.class.getResource(str).toURI());\n            assertTrue(importer.isRecognizedFormat(file, StandardCharsets.UTF_8));\n        }\n    }\n","date":"2017-02-17 05:41:47","endLine":67,"groupId":"12647","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIsRecognizedFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/c2/204447f1ecd7bfb50b19c0d59a0d4cd28a3e7e.src","preCode":"    public void testIsRecognizedFormat() throws IOException, URISyntaxException {\n        List<String> list = Arrays.asList(\"Endnote.pattern.A.enw\", \"Endnote.pattern.E.enw\", \"Endnote.book.example.enw\");\n\n        for (String str : list) {\n            Path file = Paths.get(EndnoteImporterTest.class.getResource(str).toURI());\n            assertTrue(importer.isRecognizedFormat(file, StandardCharsets.UTF_8));\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/EndnoteImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"},{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public void testIsRecognizedFormatReject() throws IOException, URISyntaxException {\n        List<String> list = Arrays.asList(\"IEEEImport1.txt\", \"IsiImporterTest1.isi\", \"IsiImporterTestInspec.isi\",\n                \"IsiImporterTestWOS.isi\", \"IsiImporterTestMedline.isi\", \"RisImporterTest1.ris\",\n                \"Endnote.pattern.no_enw\", \"empty.pdf\", \"annotated.pdf\");\n\n        for (String str : list) {\n            Path file = Paths.get(EndnoteImporterTest.class.getResource(str).toURI());\n            assertFalse(importer.isRecognizedFormat(file, Charset.defaultCharset()));\n        }\n    }\n","date":"2017-02-17 05:41:47","endLine":79,"groupId":"12190","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsRecognizedFormatReject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/c2/204447f1ecd7bfb50b19c0d59a0d4cd28a3e7e.src","preCode":"    public void testIsRecognizedFormatReject() throws IOException, URISyntaxException {\n        List<String> list = Arrays.asList(\"IEEEImport1.txt\", \"IsiImporterTest1.isi\", \"IsiImporterTestInspec.isi\",\n                \"IsiImporterTestWOS.isi\", \"IsiImporterTestMedline.isi\", \"RisImporterTest1.ris\",\n                \"Endnote.pattern.no_enw\", \"empty.pdf\", \"annotated.pdf\");\n\n        for (String str : list) {\n            Path file = Paths.get(EndnoteImporterTest.class.getResource(str).toURI());\n            assertFalse(importer.isRecognizedFormat(file, Charset.defaultCharset()));\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/EndnoteImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"}],"commitId":"ebbeb1d249edf7134abf92d24c2031ae54d19881","commitMessage":"@@@Merge branch 'net-sf-to-org-jabref'\n","date":"2017-02-17 05:41:47","modifiedFileCount":"1","status":"B","submitter":"Oliver Kopp"},{"authorTime":"2018-02-01 01:07:12","codes":[{"authorDate":"2018-02-01 01:07:12","commitOrder":2,"curCode":"    public void testIsRecognizedFormat() throws IOException, URISyntaxException {\n        List<String> list = Arrays.asList(\"Endnote.pattern.A.enw\", \"Endnote.pattern.E.enw\", \"Endnote.book.example.enw\");\n\n        for (String string : list) {\n            Path file = Paths.get(EndnoteImporterTest.class.getResource(string).toURI());\n            assertTrue(importer.isRecognizedFormat(file, StandardCharsets.UTF_8));\n        }\n    }\n","date":"2018-02-01 01:07:12","endLine":66,"groupId":"6577","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIsRecognizedFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/7f/e0eacfd84ca199486d08944d2493bc4618548b.src","preCode":"    public void testIsRecognizedFormat() throws IOException, URISyntaxException {\n        List<String> list = Arrays.asList(\"Endnote.pattern.A.enw\", \"Endnote.pattern.E.enw\", \"Endnote.book.example.enw\");\n\n        for (String str : list) {\n            Path file = Paths.get(EndnoteImporterTest.class.getResource(str).toURI());\n            assertTrue(importer.isRecognizedFormat(file, StandardCharsets.UTF_8));\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/EndnoteImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2018-02-01 01:07:12","commitOrder":2,"curCode":"    public void testIsRecognizedFormatReject() throws IOException, URISyntaxException {\n        List<String> list = Arrays.asList(\"IEEEImport1.txt\", \"IsiImporterTest1.isi\", \"IsiImporterTestInspec.isi\",\n                \"IsiImporterTestWOS.isi\", \"IsiImporterTestMedline.isi\", \"RisImporterTest1.ris\",\n                \"Endnote.pattern.no_enw\", \"empty.pdf\", \"annotated.pdf\");\n\n        for (String string : list) {\n            Path file = Paths.get(EndnoteImporterTest.class.getResource(string).toURI());\n            assertFalse(importer.isRecognizedFormat(file, Charset.defaultCharset()));\n        }\n    }\n","date":"2018-02-01 01:07:12","endLine":78,"groupId":"2422","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsRecognizedFormatReject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/7f/e0eacfd84ca199486d08944d2493bc4618548b.src","preCode":"    public void testIsRecognizedFormatReject() throws IOException, URISyntaxException {\n        List<String> list = Arrays.asList(\"IEEEImport1.txt\", \"IsiImporterTest1.isi\", \"IsiImporterTestInspec.isi\",\n                \"IsiImporterTestWOS.isi\", \"IsiImporterTestMedline.isi\", \"RisImporterTest1.ris\",\n                \"Endnote.pattern.no_enw\", \"empty.pdf\", \"annotated.pdf\");\n\n        for (String str : list) {\n            Path file = Paths.get(EndnoteImporterTest.class.getResource(str).toURI());\n            assertFalse(importer.isRecognizedFormat(file, Charset.defaultCharset()));\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/EndnoteImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"608e415b643995d3492ad12c411b101311d67358","commitMessage":"@@@Migrate importer tests to JUnit5 (#3665)\n\n* Migrate paramterized RIS tests to JUnit5\n\n* Extract generic importer testing code to new class\n\n* Switch to JUnit5 assertions in BibEntryAssert\n\n* Remove unused imports\n\n* Use static import for Assertion when possible\n\n* Extract file collection from importer test classes\n\n* Refactor biblioscape importer tests\n\n* Refactor BiblioscapeImporterTestTypes to JUnit5 syntax\n\n* Refactor CopacImporterTestFiles\n\n* Migrate medline importer tests to JUnit5\n\n* Convert BibTeXML importer tests to JUnit5\n\n* Move several non-parametric importer test classes to JUnit5\n\n* Refactor Medline importer tests to JUni5\n\n* Migrate parameterized MODS importer tests to JUnit5\n\n* Migrate MrDLib importer tests to JUnit5\n\n* Migrate MsBibImporter tests to JUnit5\n\n* Migrate OvidImporter tests to JUnit5\n\n* Migrate PdfContentImporter tests to JUnit5\n\n* Migrate PdfXmpImporter tests to JUnit5\n\n* Migrate RepecNepImporter tests to JUnit5\n\n* Migrate RISImporter tests to JUnit5\n\n* Migrate SilverPlatterImporter tests to JUnit5\n\n* Fix imports in SilverPlatterImporterTest\n\n* Fix BibTeXMLImporter tests\n\n* Fix and clarify BibTeXMLImporterTestTypes\n\n* Fix medline tests for malformed files\n\n* Remove unused imports\n\n* Fix broken test files that can be fixed and remove the ones with larger syntactic problem\n\n* Fix MODSImporter tests\n\n* Fix test file for MsBibImporter tests\n\n* Convert Before to BeforeEach in OvidImporterTests\n\n* Check starting line of a file for checking whether it is a PDF\n\n* Migrate additional BibTeXML tests to JUnit5\n\n* Refactor and restructure BibTexParser tests\n\n* Refactor CopacImporter tests\n\n* Refactor BibTeXMLImporter tests\n\n* Refactor EndnoteImporter tests\n\n* Refactor FreeCiteImporter tests\n\n* Refactor InspecImporter tests\n\n* Refactor IsiImporter tests\n\n* Refactor MedlineImporter tests\n\n* Refactor MrDLibImporter tests\n\n* Refactor MsBibImporter tests\n\n* Refactor OvidImporter tests\n\n* Refactor PdfXmpImporter tests\n\n* Refactor RepecNepImporter tests\n\n* Refactor SilverPlatterImporter tests\n\n* Fix a bunch of codacy issues\n","date":"2018-02-01 01:07:12","modifiedFileCount":"32","status":"M","submitter":"J?rg Lenhard"},{"authorTime":"2020-04-30 17:10:13","codes":[{"authorDate":"2020-04-30 17:10:13","commitOrder":3,"curCode":"    public void testIsRecognizedFormat() throws IOException, URISyntaxException {\n        List<String> list = Arrays.asList(\"Endnote.pattern.A.enw\", \"Endnote.pattern.E.enw\", \"Endnote.book.example.enw\");\n\n        for (String string : list) {\n            Path file = Path.of(EndnoteImporterTest.class.getResource(string).toURI());\n            assertTrue(importer.isRecognizedFormat(file, StandardCharsets.UTF_8));\n        }\n    }\n","date":"2020-04-30 17:10:13","endLine":67,"groupId":"10223","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIsRecognizedFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/78/d2d54795f4b77de1c0247f0ba539e1efd74906.src","preCode":"    public void testIsRecognizedFormat() throws IOException, URISyntaxException {\n        List<String> list = Arrays.asList(\"Endnote.pattern.A.enw\", \"Endnote.pattern.E.enw\", \"Endnote.book.example.enw\");\n\n        for (String string : list) {\n            Path file = Paths.get(EndnoteImporterTest.class.getResource(string).toURI());\n            assertTrue(importer.isRecognizedFormat(file, StandardCharsets.UTF_8));\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/EndnoteImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2020-04-30 17:10:13","commitOrder":3,"curCode":"    public void testIsRecognizedFormatReject() throws IOException, URISyntaxException {\n        List<String> list = Arrays.asList(\"IEEEImport1.txt\", \"IsiImporterTest1.isi\", \"IsiImporterTestInspec.isi\",\n                \"IsiImporterTestWOS.isi\", \"IsiImporterTestMedline.isi\", \"RisImporterTest1.ris\",\n                \"Endnote.pattern.no_enw\", \"empty.pdf\", \"annotated.pdf\");\n\n        for (String string : list) {\n            Path file = Path.of(EndnoteImporterTest.class.getResource(string).toURI());\n            assertFalse(importer.isRecognizedFormat(file, Charset.defaultCharset()));\n        }\n    }\n","date":"2020-04-30 17:10:13","endLine":79,"groupId":"10223","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsRecognizedFormatReject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/78/d2d54795f4b77de1c0247f0ba539e1efd74906.src","preCode":"    public void testIsRecognizedFormatReject() throws IOException, URISyntaxException {\n        List<String> list = Arrays.asList(\"IEEEImport1.txt\", \"IsiImporterTest1.isi\", \"IsiImporterTestInspec.isi\",\n                \"IsiImporterTestWOS.isi\", \"IsiImporterTestMedline.isi\", \"RisImporterTest1.ris\",\n                \"Endnote.pattern.no_enw\", \"empty.pdf\", \"annotated.pdf\");\n\n        for (String string : list) {\n            Path file = Paths.get(EndnoteImporterTest.class.getResource(string).toURI());\n            assertFalse(importer.isRecognizedFormat(file, Charset.defaultCharset()));\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/EndnoteImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"862078a4db316cfd15bd77be68d3d2b010feab3b","commitMessage":"@@@Fixes #6357: File directory (#6377)\n\n* Fixes #6357: File directory\n\nBug was introduced in https://github.com/JabRef/jabref/commit/1b03f039aa4abf0812a3a8ae0ba248c08fdb39a3.\n\n* Fix tests\n\n* Replace Paths.get\n\n* Fix code style","date":"2020-04-30 17:10:13","modifiedFileCount":"110","status":"M","submitter":"Tobias Diez"}]
