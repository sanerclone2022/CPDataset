[{"authorTime":"2017-02-17 05:41:47","codes":[{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public void detectMixedModeAsBiblatex() {\n        BibEntry bibtex = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        bibtex.setField(\"journal\", \"IEEE Trans. Services Computing\");\n        BibEntry biblatex = new BibEntry(BiblatexEntryTypes.ARTICLE.getName());\n        biblatex.setField(\"translator\", \"Stefan Kolb\");\n        Collection<BibEntry> entries = Arrays.asList(bibtex, biblatex);\n\n        assertEquals(BibDatabaseMode.BIBTEX, BibDatabaseModeDetection.inferMode(BibDatabases.createDatabase(entries)));\n    }\n","date":"2017-02-17 05:41:47","endLine":42,"groupId":"4002","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"detectMixedModeAsBiblatex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fe/8609d904bde6ec1b68fd72db7f5d4fd6c0576c.src","preCode":"    public void detectMixedModeAsBiblatex() {\n        BibEntry bibtex = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        bibtex.setField(\"journal\", \"IEEE Trans. Services Computing\");\n        BibEntry biblatex = new BibEntry(BiblatexEntryTypes.ARTICLE.getName());\n        biblatex.setField(\"translator\", \"Stefan Kolb\");\n        Collection<BibEntry> entries = Arrays.asList(bibtex, biblatex);\n\n        assertEquals(BibDatabaseMode.BIBTEX, BibDatabaseModeDetection.inferMode(BibDatabases.createDatabase(entries)));\n    }\n","realPath":"src/test/java/org/jabref/model/database/BibDatabaseModeDetectionTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"B"},{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public void ignoreUnknownTypesForBiblatexDecision() {\n        BibEntry custom = new BibEntry(new CustomEntryType(\"unknowntype\", new ArrayList<>(0), new ArrayList<>(0)).getName());\n        BibEntry bibtex = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        BibEntry biblatex = new BibEntry(BiblatexEntryTypes.MVBOOK.getName());\n        Collection<BibEntry> entries = Arrays.asList(custom, bibtex, biblatex);\n\n        assertEquals(BibDatabaseMode.BIBLATEX, BibDatabaseModeDetection.inferMode(BibDatabases.createDatabase(entries)));\n    }\n","date":"2017-02-17 05:41:47","endLine":70,"groupId":"4000","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"ignoreUnknownTypesForBiblatexDecision","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fe/8609d904bde6ec1b68fd72db7f5d4fd6c0576c.src","preCode":"    public void ignoreUnknownTypesForBiblatexDecision() {\n        BibEntry custom = new BibEntry(new CustomEntryType(\"unknowntype\", new ArrayList<>(0), new ArrayList<>(0)).getName());\n        BibEntry bibtex = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        BibEntry biblatex = new BibEntry(BiblatexEntryTypes.MVBOOK.getName());\n        Collection<BibEntry> entries = Arrays.asList(custom, bibtex, biblatex);\n\n        assertEquals(BibDatabaseMode.BIBLATEX, BibDatabaseModeDetection.inferMode(BibDatabases.createDatabase(entries)));\n    }\n","realPath":"src/test/java/org/jabref/model/database/BibDatabaseModeDetectionTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"}],"commitId":"ebbeb1d249edf7134abf92d24c2031ae54d19881","commitMessage":"@@@Merge branch 'net-sf-to-org-jabref'\n","date":"2017-02-17 05:41:47","modifiedFileCount":"1","status":"B","submitter":"Oliver Kopp"},{"authorTime":"2018-12-29 06:39:28","codes":[{"authorDate":"2018-12-29 06:39:28","commitOrder":2,"curCode":"    public void detectMixedModeAsBiblatex() {\n        BibEntry bibtex = new BibEntry(BibtexEntryTypes.ARTICLE);\n        bibtex.setField(\"journal\", \"IEEE Trans. Services Computing\");\n        BibEntry biblatex = new BibEntry(BiblatexEntryTypes.ARTICLE);\n        biblatex.setField(\"translator\", \"Stefan Kolb\");\n        Collection<BibEntry> entries = Arrays.asList(bibtex, biblatex);\n\n        assertEquals(BibDatabaseMode.BIBTEX, BibDatabaseModeDetection.inferMode(BibDatabases.createDatabase(entries)));\n    }\n","date":"2018-12-29 06:39:28","endLine":42,"groupId":"4002","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"detectMixedModeAsBiblatex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/5a/82943b0e0c6e9b3647b68ae26ed56a3c59872d.src","preCode":"    public void detectMixedModeAsBiblatex() {\n        BibEntry bibtex = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        bibtex.setField(\"journal\", \"IEEE Trans. Services Computing\");\n        BibEntry biblatex = new BibEntry(BiblatexEntryTypes.ARTICLE.getName());\n        biblatex.setField(\"translator\", \"Stefan Kolb\");\n        Collection<BibEntry> entries = Arrays.asList(bibtex, biblatex);\n\n        assertEquals(BibDatabaseMode.BIBTEX, BibDatabaseModeDetection.inferMode(BibDatabases.createDatabase(entries)));\n    }\n","realPath":"src/test/java/org/jabref/model/database/BibDatabaseModeDetectionTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2018-12-29 06:39:28","commitOrder":2,"curCode":"    public void ignoreUnknownTypesForBiblatexDecision() {\n        BibEntry custom = new BibEntry(new CustomEntryType(\"unknowntype\", new ArrayList<>(0), new ArrayList<>(0)));\n        BibEntry bibtex = new BibEntry(BibtexEntryTypes.ARTICLE);\n        BibEntry biblatex = new BibEntry(BiblatexEntryTypes.MVBOOK);\n        Collection<BibEntry> entries = Arrays.asList(custom, bibtex, biblatex);\n\n        assertEquals(BibDatabaseMode.BIBLATEX, BibDatabaseModeDetection.inferMode(BibDatabases.createDatabase(entries)));\n    }\n","date":"2018-12-29 06:39:28","endLine":70,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"ignoreUnknownTypesForBiblatexDecision","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/5a/82943b0e0c6e9b3647b68ae26ed56a3c59872d.src","preCode":"    public void ignoreUnknownTypesForBiblatexDecision() {\n        BibEntry custom = new BibEntry(new CustomEntryType(\"unknowntype\", new ArrayList<>(0), new ArrayList<>(0)).getName());\n        BibEntry bibtex = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        BibEntry biblatex = new BibEntry(BiblatexEntryTypes.MVBOOK.getName());\n        Collection<BibEntry> entries = Arrays.asList(custom, bibtex, biblatex);\n\n        assertEquals(BibDatabaseMode.BIBLATEX, BibDatabaseModeDetection.inferMode(BibDatabases.createDatabase(entries)));\n    }\n","realPath":"src/test/java/org/jabref/model/database/BibDatabaseModeDetectionTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"cd1e795e91a0f36ea33386c47f06e31e7f812481","commitMessage":"@@@Refactor BibEntry deprecated method (#4554)\n\n* Refactor BibEntry deprecated method\n\n* Fixed error\n\n* More on checkstyle fixing\n\n* Fixed checkstyle issues\n\n* Added custom entrytype for types not registered in the enumerator.\n\n* Added getTypeOrDefault method refactor code to use it and fix NPE problem\n\n* Fixing checkstyle rules\n\n* More on checkstyle\n\n* More on getType getTypeOrDefault replacement\n\n* Revert Article EntryType into Electronic\n\n* Added break line between different packages\n\n* Refactor BibtextEntryTypes.getTypeOrDefault method\n\n* Removed unused import\n\n* Removed extra new line.  checkstyle error fixing\n","date":"2018-12-29 06:39:28","modifiedFileCount":"36","status":"M","submitter":"Bitor Tonixa Biriato Balen?a"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":3,"curCode":"    public void detectMixedModeAsBiblatex() {\n        BibEntry bibtex = new BibEntry(StandardEntryType.Article);\n        bibtex.setField(StandardField.JOURNAL, \"IEEE Trans. Services Computing\");\n        BibEntry biblatex = new BibEntry(StandardEntryType.Article);\n        biblatex.setField(StandardField.TRANSLATOR, \"Stefan Kolb\");\n        Collection<BibEntry> entries = Arrays.asList(bibtex, biblatex);\n\n        assertEquals(BibDatabaseMode.BIBTEX, BibDatabaseModeDetection.inferMode(BibDatabases.createDatabase(entries)));\n    }\n","date":"2019-08-02 15:20:10","endLine":45,"groupId":"9808","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"detectMixedModeAsBiblatex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/98/402b03023fdd1881da66d2ba45904229e8a51c.src","preCode":"    public void detectMixedModeAsBiblatex() {\n        BibEntry bibtex = new BibEntry(BibtexEntryTypes.ARTICLE);\n        bibtex.setField(\"journal\", \"IEEE Trans. Services Computing\");\n        BibEntry biblatex = new BibEntry(BiblatexEntryTypes.ARTICLE);\n        biblatex.setField(\"translator\", \"Stefan Kolb\");\n        Collection<BibEntry> entries = Arrays.asList(bibtex, biblatex);\n\n        assertEquals(BibDatabaseMode.BIBTEX, BibDatabaseModeDetection.inferMode(BibDatabases.createDatabase(entries)));\n    }\n","realPath":"src/test/java/org/jabref/model/database/BibDatabaseModeDetectionTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2019-08-02 15:20:10","commitOrder":3,"curCode":"    public void ignoreUnknownTypesForBiblatexDecision() {\n        BibEntry custom = new BibEntry(UNKNOWN_TYPE);\n        BibEntry bibtex = new BibEntry(StandardEntryType.Article);\n        BibEntry biblatex = new BibEntry(StandardEntryType.MvBook);\n        Collection<BibEntry> entries = Arrays.asList(custom, bibtex, biblatex);\n\n        assertEquals(BibDatabaseMode.BIBLATEX, BibDatabaseModeDetection.inferMode(BibDatabases.createDatabase(entries)));\n    }\n","date":"2019-08-02 15:20:10","endLine":73,"groupId":"9810","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"ignoreUnknownTypesForBiblatexDecision","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/98/402b03023fdd1881da66d2ba45904229e8a51c.src","preCode":"    public void ignoreUnknownTypesForBiblatexDecision() {\n        BibEntry custom = new BibEntry(new CustomEntryType(\"unknowntype\", new ArrayList<>(0), new ArrayList<>(0)));\n        BibEntry bibtex = new BibEntry(BibtexEntryTypes.ARTICLE);\n        BibEntry biblatex = new BibEntry(BiblatexEntryTypes.MVBOOK);\n        Collection<BibEntry> entries = Arrays.asList(custom, bibtex, biblatex);\n\n        assertEquals(BibDatabaseMode.BIBLATEX, BibDatabaseModeDetection.inferMode(BibDatabases.createDatabase(entries)));\n    }\n","realPath":"src/test/java/org/jabref/model/database/BibDatabaseModeDetectionTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"4b39b78e4afcd6c36b385f5c46f1d9a4eac2e29b","commitMessage":"@@@Move to extended enums for fields and entry types (#5148)\n\n* Introduce interface for fields\n\n* Continue using fields interface instead of strings\n\n* Introduce OrFields class\n\n* Move FieldProperty\n\n* Convert entry types to extended enum\n\n* Start fixing build\n\n* Fix build\n\n* Start fixing tests\n\n* Everything compiles again\n\n* Make model tests pass\n\n* Fix most tests\n\n* Fix build\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix checkstyle issues\n\n* Fix more tests\n\n* Fix more tests\n\n* Disable test that fails on CI\n\n* Disable test that fails on CI\n","date":"2019-08-02 15:20:10","modifiedFileCount":"439","status":"M","submitter":"Tobias Diez"},{"authorTime":"2020-04-22 20:30:40","codes":[{"authorDate":"2020-04-22 20:30:40","commitOrder":4,"curCode":"    public void detectMixedModeAsBiblatex() {\n        BibEntry bibtex = new BibEntry(StandardEntryType.Article);\n        bibtex.setField(StandardField.JOURNAL, \"IEEE Trans. Services Computing\");\n        BibEntry biblatex = new BibEntry(StandardEntryType.Article);\n        biblatex.setField(StandardField.TRANSLATOR, \"Stefan Kolb\");\n        List<BibEntry> entries = Arrays.asList(bibtex, biblatex);\n\n        assertEquals(BibDatabaseMode.BIBTEX, BibDatabaseModeDetection.inferMode(new BibDatabase(entries)));\n    }\n","date":"2020-04-22 20:30:40","endLine":45,"groupId":"10820","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"detectMixedModeAsBiblatex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/30/937e8235ea650834c035f350010cd5e871971a.src","preCode":"    public void detectMixedModeAsBiblatex() {\n        BibEntry bibtex = new BibEntry(StandardEntryType.Article);\n        bibtex.setField(StandardField.JOURNAL, \"IEEE Trans. Services Computing\");\n        BibEntry biblatex = new BibEntry(StandardEntryType.Article);\n        biblatex.setField(StandardField.TRANSLATOR, \"Stefan Kolb\");\n        Collection<BibEntry> entries = Arrays.asList(bibtex, biblatex);\n\n        assertEquals(BibDatabaseMode.BIBTEX, BibDatabaseModeDetection.inferMode(BibDatabases.createDatabase(entries)));\n    }\n","realPath":"src/test/java/org/jabref/model/database/BibDatabaseModeDetectionTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2020-04-22 20:30:40","commitOrder":4,"curCode":"    public void ignoreUnknownTypesForBiblatexDecision() {\n        BibEntry custom = new BibEntry(UNKNOWN_TYPE);\n        BibEntry bibtex = new BibEntry(StandardEntryType.Article);\n        BibEntry biblatex = new BibEntry(StandardEntryType.MvBook);\n        List<BibEntry> entries = Arrays.asList(custom, bibtex, biblatex);\n\n        assertEquals(BibDatabaseMode.BIBLATEX, BibDatabaseModeDetection.inferMode(new BibDatabase(entries)));\n    }\n","date":"2020-04-22 20:30:40","endLine":73,"groupId":"10820","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"ignoreUnknownTypesForBiblatexDecision","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/30/937e8235ea650834c035f350010cd5e871971a.src","preCode":"    public void ignoreUnknownTypesForBiblatexDecision() {\n        BibEntry custom = new BibEntry(UNKNOWN_TYPE);\n        BibEntry bibtex = new BibEntry(StandardEntryType.Article);\n        BibEntry biblatex = new BibEntry(StandardEntryType.MvBook);\n        Collection<BibEntry> entries = Arrays.asList(custom, bibtex, biblatex);\n\n        assertEquals(BibDatabaseMode.BIBLATEX, BibDatabaseModeDetection.inferMode(BibDatabases.createDatabase(entries)));\n    }\n","realPath":"src/test/java/org/jabref/model/database/BibDatabaseModeDetectionTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"c7d77670154c1b09d8115013c8f3b4175906219e","commitMessage":"@@@Improve performance for loading files (#6332)\n\n* Improve performance for loading files\n\n- Performance improvements around groups\n- Remove detection of duplicate ID when inserting entries (it's not really possible to create two entries with the same except if you use `setId` manually)\n- Remove detection of duplicate bibtex keys when opening a file (the result was not used and we have a integrity check for it)\n- Use EnumMap instead of HashMap to cache fields as keywords (which is only used for Keyword and Groups fields anyway)\n- Fix bug where latex code was displayed in the maintable\n- Lazy init of source tab\n\n* Fix tests compilation\n\n* Include feedback","date":"2020-04-22 20:30:40","modifiedFileCount":"37","status":"M","submitter":"Tobias Diez"}]
