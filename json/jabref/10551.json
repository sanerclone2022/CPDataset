[{"authorTime":"2020-06-15 13:41:17","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":11,"curCode":"    void cleanupRenamePdfRenamesWithMultipleFiles(@TempDir Path testFolder) throws IOException {\n        Path path = testFolder.resolve(\"Toot.tmp\");\n        Files.createFile(path);\n\n        entry.setField(StandardField.TITLE, \"test title\");\n        entry.setField(StandardField.FILE, FileFieldWriter.getStringRepresentation(\n                Arrays.asList(new LinkedFile(\"\", \"\", \"\"), new LinkedFile(\"\", path.toAbsolutePath().toString(), \"\"), new LinkedFile(\"\", \"\", \"\"))));\n\n        when(filePreferences.getFileNamePattern()).thenReturn(\"[bibtexkey] - [fulltitle]\");\n        cleanup.cleanup(entry);\n\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(\n                        Arrays.asList(new LinkedFile(\"\", \"\", \"\"), new LinkedFile(\"\", \"Toot - test title.tmp\", \"\"), new LinkedFile(\"\", \"\", \"\")))),\n                entry.getField(StandardField.FILE));\n    }\n","date":"2019-08-02 15:20:10","endLine":83,"groupId":"8471","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"cleanupRenamePdfRenamesWithMultipleFiles","params":"(@TempDirPathtestFolder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/81/96a580a431b7767a25d45d82c48c56b8853fe7.src","preCode":"    void cleanupRenamePdfRenamesWithMultipleFiles(@TempDir Path testFolder) throws IOException {\n        Path path = testFolder.resolve(\"Toot.tmp\");\n        Files.createFile(path);\n\n        entry.setField(StandardField.TITLE, \"test title\");\n        entry.setField(StandardField.FILE, FileFieldWriter.getStringRepresentation(\n                Arrays.asList(new LinkedFile(\"\", \"\", \"\"), new LinkedFile(\"\", path.toAbsolutePath().toString(), \"\"), new LinkedFile(\"\", \"\", \"\"))));\n\n        when(filePreferences.getFileNamePattern()).thenReturn(\"[bibtexkey] - [fulltitle]\");\n        cleanup.cleanup(entry);\n\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(\n                        Arrays.asList(new LinkedFile(\"\", \"\", \"\"), new LinkedFile(\"\", \"Toot - test title.tmp\", \"\"), new LinkedFile(\"\", \"\", \"\")))),\n                entry.getField(StandardField.FILE));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/RenamePdfCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"NB"},{"authorDate":"2020-06-15 13:41:17","commitOrder":11,"curCode":"    void doesNotMoveFileWithEmptyFileDirPattern() throws Exception {\n        when(filePreferences.getFileDirPattern()).thenReturn(\"\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"test.pdf\", \"\"))),\n                entry.getField(StandardField.FILE));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","date":"2020-06-15 13:41:17","endLine":125,"groupId":"4757","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doesNotMoveFileWithEmptyFileDirPattern","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/8c/792b7dd851f5c581bfcaa5b5a3983b0f39864d.src","preCode":"    void doesNotMoveFileWithEmptyFileDirPattern() throws Exception {\n        when(filePreferences.getFileDirPattern()).thenReturn(\"\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"test.pdf\", \"\"))),\n                entry.getField(StandardField.FILE));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/MoveFilesCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"}],"commitId":"ed96faa350ebb32c504aede1440879bd9c781557","commitMessage":"@@@Merge pull request #6608 from JabRef/fixFileLinkDL\n\nFix downloaded files moved to citation key dir","date":"2020-06-15 13:41:17","modifiedFileCount":"3","status":"M","submitter":"Christoph"},{"authorTime":"2020-09-01 20:20:10","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":12,"curCode":"    void cleanupRenamePdfRenamesWithMultipleFiles(@TempDir Path testFolder) throws IOException {\n        Path path = testFolder.resolve(\"Toot.tmp\");\n        Files.createFile(path);\n\n        entry.setField(StandardField.TITLE, \"test title\");\n        entry.setField(StandardField.FILE, FileFieldWriter.getStringRepresentation(\n                Arrays.asList(new LinkedFile(\"\", \"\", \"\"), new LinkedFile(\"\", path.toAbsolutePath().toString(), \"\"), new LinkedFile(\"\", \"\", \"\"))));\n\n        when(filePreferences.getFileNamePattern()).thenReturn(\"[bibtexkey] - [fulltitle]\");\n        cleanup.cleanup(entry);\n\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(\n                        Arrays.asList(new LinkedFile(\"\", \"\", \"\"), new LinkedFile(\"\", \"Toot - test title.tmp\", \"\"), new LinkedFile(\"\", \"\", \"\")))),\n                entry.getField(StandardField.FILE));\n    }\n","date":"2019-08-02 15:20:10","endLine":83,"groupId":"8471","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"cleanupRenamePdfRenamesWithMultipleFiles","params":"(@TempDirPathtestFolder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/81/96a580a431b7767a25d45d82c48c56b8853fe7.src","preCode":"    void cleanupRenamePdfRenamesWithMultipleFiles(@TempDir Path testFolder) throws IOException {\n        Path path = testFolder.resolve(\"Toot.tmp\");\n        Files.createFile(path);\n\n        entry.setField(StandardField.TITLE, \"test title\");\n        entry.setField(StandardField.FILE, FileFieldWriter.getStringRepresentation(\n                Arrays.asList(new LinkedFile(\"\", \"\", \"\"), new LinkedFile(\"\", path.toAbsolutePath().toString(), \"\"), new LinkedFile(\"\", \"\", \"\"))));\n\n        when(filePreferences.getFileNamePattern()).thenReturn(\"[bibtexkey] - [fulltitle]\");\n        cleanup.cleanup(entry);\n\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(\n                        Arrays.asList(new LinkedFile(\"\", \"\", \"\"), new LinkedFile(\"\", \"Toot - test title.tmp\", \"\"), new LinkedFile(\"\", \"\", \"\")))),\n                entry.getField(StandardField.FILE));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/RenamePdfCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"},{"authorDate":"2020-09-01 20:20:10","commitOrder":12,"curCode":"    void doesNotMoveFileWithEmptyFileDirPattern() throws Exception {\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"test.pdf\", \"\"))),\n                entry.getField(StandardField.FILE));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","date":"2020-09-01 20:20:10","endLine":125,"groupId":"4757","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doesNotMoveFileWithEmptyFileDirPattern","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/63/246e9f04dcd447ec2ecd47e8b3eee86a6674f5.src","preCode":"    void doesNotMoveFileWithEmptyFileDirPattern() throws Exception {\n        when(filePreferences.getFileDirPattern()).thenReturn(\"\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"test.pdf\", \"\"))),\n                entry.getField(StandardField.FILE));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/MoveFilesCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"5ab494e8b1732f688d4ed8d696740bc7e8ef4101","commitMessage":"@@@Refactor file preferences (#6779)\n\n* Refactored for same basic clean-up and naming consistency\n\n* Refactored for more clean-ups and naming consistency\n\n* Refactored and extended AutoLinkPreferences\n\n* Refactored FilePreferences to immutable class\n\n* Refactored two preferences from AutoLinkPreferences to FilePreferences\n\n* Moved import linked file patterns preferences to FilePreferencesTab\n\n* Extended FilePreferences and refactored FileTab to use it\n\n* Checkstyle\n\n* Fixed merge error\n\n* Moved import-export preferences to exportSortingTab and renamed the tab\n\n* Renamed FileTab to LinkedFilesTab\n\n* Refactored ImportExportTab to PreferencesService\n\n* CHANGELOG.md\n\n* Rewording ImportExport to File\n\n* Make FilePreferences and SavePreferences mutable.  added ADR\n","date":"2020-09-01 20:20:10","modifiedFileCount":"28","status":"M","submitter":"Carl Christian Snethlage"},{"authorTime":"2020-09-01 20:20:10","codes":[{"authorDate":"2020-09-08 21:34:34","commitOrder":13,"curCode":"    void cleanupRenamePdfRenamesWithMultipleFiles(@TempDir Path testFolder) throws IOException {\n        Path path = testFolder.resolve(\"Toot.tmp\");\n        Files.createFile(path);\n\n        entry.setField(StandardField.TITLE, \"test title\");\n        entry.setField(StandardField.FILE, FileFieldWriter.getStringRepresentation(\n                Arrays.asList(new LinkedFile(\"\", \"\", \"\"), new LinkedFile(\"\", path.toAbsolutePath().toString(), \"\"), new LinkedFile(\"\", \"\", \"\"))));\n\n        when(filePreferences.getFileNamePattern()).thenReturn(\"[citationkey] - [fulltitle]\");\n        cleanup.cleanup(entry);\n\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(\n                        Arrays.asList(new LinkedFile(\"\", \"\", \"\"), new LinkedFile(\"\", \"Toot - test title.tmp\", \"\"), new LinkedFile(\"\", \"\", \"\")))),\n                entry.getField(StandardField.FILE));\n    }\n","date":"2020-09-08 21:34:34","endLine":82,"groupId":"8471","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"cleanupRenamePdfRenamesWithMultipleFiles","params":"(@TempDirPathtestFolder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/c2/cd3e87ff89e8dc72950a8449e8e6de0614990c.src","preCode":"    void cleanupRenamePdfRenamesWithMultipleFiles(@TempDir Path testFolder) throws IOException {\n        Path path = testFolder.resolve(\"Toot.tmp\");\n        Files.createFile(path);\n\n        entry.setField(StandardField.TITLE, \"test title\");\n        entry.setField(StandardField.FILE, FileFieldWriter.getStringRepresentation(\n                Arrays.asList(new LinkedFile(\"\", \"\", \"\"), new LinkedFile(\"\", path.toAbsolutePath().toString(), \"\"), new LinkedFile(\"\", \"\", \"\"))));\n\n        when(filePreferences.getFileNamePattern()).thenReturn(\"[bibtexkey] - [fulltitle]\");\n        cleanup.cleanup(entry);\n\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(\n                        Arrays.asList(new LinkedFile(\"\", \"\", \"\"), new LinkedFile(\"\", \"Toot - test title.tmp\", \"\"), new LinkedFile(\"\", \"\", \"\")))),\n                entry.getField(StandardField.FILE));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/RenamePdfCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-09-01 20:20:10","commitOrder":13,"curCode":"    void doesNotMoveFileWithEmptyFileDirPattern() throws Exception {\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"test.pdf\", \"\"))),\n                entry.getField(StandardField.FILE));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","date":"2020-09-01 20:20:10","endLine":125,"groupId":"4757","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doesNotMoveFileWithEmptyFileDirPattern","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/63/246e9f04dcd447ec2ecd47e8b3eee86a6674f5.src","preCode":"    void doesNotMoveFileWithEmptyFileDirPattern() throws Exception {\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"test.pdf\", \"\"))),\n                entry.getField(StandardField.FILE));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/MoveFilesCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"N"}],"commitId":"6dec1747d8a1c89f6c62fc1d1939d88411f17eba","commitMessage":"@@@Complete rebranding of `bibtexkey` as `citationkey` (#6875)\n\n","date":"2020-09-08 21:34:34","modifiedFileCount":"127","status":"M","submitter":"Tobias Diez"},{"authorTime":"2020-09-26 05:39:50","codes":[{"authorDate":"2020-09-26 05:39:50","commitOrder":14,"curCode":"    void cleanupRenamePdfRenamesWithMultipleFiles(@TempDir Path testFolder) throws IOException {\n        Path path = testFolder.resolve(\"Toot.tmp\");\n        Files.createFile(path);\n\n        entry.setField(StandardField.TITLE, \"test title\");\n        entry.setField(StandardField.FILE, FileFieldWriter.getStringRepresentation(\n                Arrays.asList(\n                        new LinkedFile(\"\", Path.of(\"\"), \"\"),\n                        new LinkedFile(\"\", path.toAbsolutePath(), \"\"),\n                        new LinkedFile(\"\", Path.of(\"\"), \"\"))));\n\n        when(filePreferences.getFileNamePattern()).thenReturn(\"[citationkey] - [fulltitle]\");\n        cleanup.cleanup(entry);\n\n        assertEquals(Optional.of(FileFieldWriter.getStringRepresentation(\n                Arrays.asList(\n                        new LinkedFile(\"\", Path.of(\"\"), \"\"),\n                        new LinkedFile(\"\", Path.of(\"Toot - test title.tmp\"), \"\"),\n                        new LinkedFile(\"\", Path.of(\"\"), \"\")))),\n                entry.getField(StandardField.FILE));\n    }\n","date":"2020-09-26 05:39:50","endLine":87,"groupId":"10551","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"cleanupRenamePdfRenamesWithMultipleFiles","params":"(@TempDirPathtestFolder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/bd/47aa164718cb9ca2484986b9f010a12a4b3c58.src","preCode":"    void cleanupRenamePdfRenamesWithMultipleFiles(@TempDir Path testFolder) throws IOException {\n        Path path = testFolder.resolve(\"Toot.tmp\");\n        Files.createFile(path);\n\n        entry.setField(StandardField.TITLE, \"test title\");\n        entry.setField(StandardField.FILE, FileFieldWriter.getStringRepresentation(\n                Arrays.asList(new LinkedFile(\"\", \"\", \"\"), new LinkedFile(\"\", path.toAbsolutePath().toString(), \"\"), new LinkedFile(\"\", \"\", \"\"))));\n\n        when(filePreferences.getFileNamePattern()).thenReturn(\"[citationkey] - [fulltitle]\");\n        cleanup.cleanup(entry);\n\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(\n                        Arrays.asList(new LinkedFile(\"\", \"\", \"\"), new LinkedFile(\"\", \"Toot - test title.tmp\", \"\"), new LinkedFile(\"\", \"\", \"\")))),\n                entry.getField(StandardField.FILE));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/RenamePdfCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-09-26 05:39:50","commitOrder":14,"curCode":"    void doesNotMoveFileWithEmptyFileDirPattern() {\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", Path.of(\"test.pdf\"), \"\"))),\n                entry.getField(StandardField.FILE));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","date":"2020-09-26 05:39:50","endLine":130,"groupId":"10551","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"doesNotMoveFileWithEmptyFileDirPattern","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/1c/96bd826589a5b99b756f2424d29850c688a345.src","preCode":"    void doesNotMoveFileWithEmptyFileDirPattern() throws Exception {\n        when(filePreferences.getFileDirectoryPattern()).thenReturn(\"\");\n        cleanup.cleanup(entry);\n\n        Path fileAfter = defaultFileFolder.resolve(\"test.pdf\");\n        assertEquals(\n                Optional.of(FileFieldWriter.getStringRepresentation(new LinkedFile(\"\", \"test.pdf\", \"\"))),\n                entry.getField(StandardField.FILE));\n        assertFalse(Files.exists(fileBefore));\n        assertTrue(Files.exists(fileAfter));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/MoveFilesCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"3123090b6cf44e853eceae42854d49e78e81be2a","commitMessage":"@@@Changed default value of \"search and store files relative to bibtex file\" to true (#6928)\n\n* Fixes #6863\n\n* CHANGELOG.md\n\n* Reworded bibLocationAsPrimary to reflect real meaning of the preference setting.  changed default val to true\n\n* Cleanup of deprecated methods LinkedFiles(String.  String.  String) and List<String> getFileDirectories(...)\n\n* Reworded package filelist to linkedfile\n\n* Fixed SpringerFetcher","date":"2020-09-26 05:39:50","modifiedFileCount":"45","status":"M","submitter":"Carl Christian Snethlage"}]
