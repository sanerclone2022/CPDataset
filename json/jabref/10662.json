[{"authorTime":"2018-11-25 23:32:29","codes":[{"authorDate":"2018-08-16 15:17:32","commitOrder":4,"curCode":"    public final void testPerformExport(String filename) throws IOException, SaveException {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path importFile = resourceDir.resolve(filename);\n        String tempFilePath = tempFile.toAbsolutePath().toString();\n\n        List<BibEntry> entries = testImporter.importDatabase(importFile, StandardCharsets.UTF_8).getDatabase()\n                .getEntries();\n\n        bibtexmlExportFormat.export(databaseContext, tempFile, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(resourceDir.resolve(xmlFileName)));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilePath)));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","date":"2018-08-16 15:17:32","endLine":83,"groupId":"8939","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPerformExport","params":"(Stringfilename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a6/83dd2bff56c6722bc2a5592c379e7d1d70de03.src","preCode":"    public final void testPerformExport(String filename) throws IOException, SaveException {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path importFile = resourceDir.resolve(filename);\n        String tempFilePath = tempFile.toAbsolutePath().toString();\n\n        List<BibEntry> entries = testImporter.importDatabase(importFile, StandardCharsets.UTF_8).getDatabase()\n                .getEntries();\n\n        bibtexmlExportFormat.export(databaseContext, tempFile, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(resourceDir.resolve(xmlFileName)));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilePath)));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/BibTeXMLExporterTestFiles.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"NB"},{"authorDate":"2018-11-25 23:32:29","commitOrder":4,"curCode":"    public void testPerformExportForSingleEntry(@TempDirectory.TempDir Path testFolder) throws Exception {\n\n        Path path = testFolder.resolve(\"ThisIsARandomlyNamedFile\");\n\n        exportFormat.export(databaseContext, path, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(path));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                                       .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","date":"2018-11-25 23:32:29","endLine":83,"groupId":"2429","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPerformExportForSingleEntry","params":"(@TempDirectory.TempDirPathtestFolder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/94/8d47facf7a658a1d6ff3fdaf1d07b10e61dd8f.src","preCode":"    public void testPerformExportForSingleEntry(@TempDirectory.TempDir Path testFolder) throws Exception {\n\n        Path path = testFolder.resolve(\"ThisIsARandomlyNamedFile\");\n\n        exportFormat.export(databaseContext, path, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(path));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                                       .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/DocBook5ExporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"}],"commitId":"9213e3c2db76ab2839c36644dc241af60e9d3322","commitMessage":"@@@Add docbook 5 support (#4319)\n\n* Add docbook 5 support\nRenamed to docbook 5 export\nremoved old layout files\n\n* rename old docbook to docbook 4\nuse lastName only in docbook5\nuse new docbook template\nfavor composition over inheritance\nadd docbook version enum\n\n* fix wrong method name in masterthesis for docbook4\n\n* add test for docbook5\n\n* split format in separate files\n\n* remove submodule accidentaly commited\n\n* fix variable ordr\n\n* fix tests\n\n* fix checkstyle\n\n* Update docbook5 layout fiels\n\n* fix tests\n\n* Use FullName instead of NoInitials\nUser lower case formatter for \\entrytype\n\n* lastname instead of fullname\n\n* update to latest version of docbook layout files provided\nconvert tab character to spaces\n\n* fix test\n","date":"2018-11-25 23:32:29","modifiedFileCount":"2","status":"M","submitter":"Christoph"},{"authorTime":"2019-02-09 22:36:12","codes":[{"authorDate":"2018-08-16 15:17:32","commitOrder":5,"curCode":"    public final void testPerformExport(String filename) throws IOException, SaveException {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path importFile = resourceDir.resolve(filename);\n        String tempFilePath = tempFile.toAbsolutePath().toString();\n\n        List<BibEntry> entries = testImporter.importDatabase(importFile, StandardCharsets.UTF_8).getDatabase()\n                .getEntries();\n\n        bibtexmlExportFormat.export(databaseContext, tempFile, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(resourceDir.resolve(xmlFileName)));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilePath)));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","date":"2018-08-16 15:17:32","endLine":83,"groupId":"8939","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPerformExport","params":"(Stringfilename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a6/83dd2bff56c6722bc2a5592c379e7d1d70de03.src","preCode":"    public final void testPerformExport(String filename) throws IOException, SaveException {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path importFile = resourceDir.resolve(filename);\n        String tempFilePath = tempFile.toAbsolutePath().toString();\n\n        List<BibEntry> entries = testImporter.importDatabase(importFile, StandardCharsets.UTF_8).getDatabase()\n                .getEntries();\n\n        bibtexmlExportFormat.export(databaseContext, tempFile, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(resourceDir.resolve(xmlFileName)));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilePath)));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/BibTeXMLExporterTestFiles.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"},{"authorDate":"2019-02-09 22:36:12","commitOrder":5,"curCode":"    public void testPerformExportForSingleEntry(@TempDir Path testFolder) throws Exception {\n\n        Path path = testFolder.resolve(\"ThisIsARandomlyNamedFile\");\n\n        exportFormat.export(databaseContext, path, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(path));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                                       .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","date":"2019-02-09 22:36:12","endLine":80,"groupId":"2429","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPerformExportForSingleEntry","params":"(@TempDirPathtestFolder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/cd/0fa728187b7e7b3701b9d76100fece7fa22802.src","preCode":"    public void testPerformExportForSingleEntry(@TempDirectory.TempDir Path testFolder) throws Exception {\n\n        Path path = testFolder.resolve(\"ThisIsARandomlyNamedFile\");\n\n        exportFormat.export(databaseContext, path, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(path));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                                       .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/DocBook5ExporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"71e02379a068756a3885aa22161337255683fca3","commitMessage":"@@@Fix for issue 4641: Remove usage of TempDirectory extension from junit-pioneer (#4644)\n\n* Removed the TempDirectory extension from junit-pioneer with the built in\nextension of junit 5.4\n\n* Removed unused import\n","date":"2019-02-09 22:36:12","modifiedFileCount":"23","status":"M","submitter":"Akash Deep"},{"authorTime":"2019-02-10 20:47:48","codes":[{"authorDate":"2018-08-16 15:17:32","commitOrder":6,"curCode":"    public final void testPerformExport(String filename) throws IOException, SaveException {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path importFile = resourceDir.resolve(filename);\n        String tempFilePath = tempFile.toAbsolutePath().toString();\n\n        List<BibEntry> entries = testImporter.importDatabase(importFile, StandardCharsets.UTF_8).getDatabase()\n                .getEntries();\n\n        bibtexmlExportFormat.export(databaseContext, tempFile, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(resourceDir.resolve(xmlFileName)));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilePath)));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","date":"2018-08-16 15:17:32","endLine":83,"groupId":"8939","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPerformExport","params":"(Stringfilename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a6/83dd2bff56c6722bc2a5592c379e7d1d70de03.src","preCode":"    public final void testPerformExport(String filename) throws IOException, SaveException {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path importFile = resourceDir.resolve(filename);\n        String tempFilePath = tempFile.toAbsolutePath().toString();\n\n        List<BibEntry> entries = testImporter.importDatabase(importFile, StandardCharsets.UTF_8).getDatabase()\n                .getEntries();\n\n        bibtexmlExportFormat.export(databaseContext, tempFile, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(resourceDir.resolve(xmlFileName)));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilePath)));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/BibTeXMLExporterTestFiles.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"},{"authorDate":"2019-02-10 20:47:48","commitOrder":6,"curCode":"    void testPerformExportForSingleEntry(@TempDir Path testFolder) throws Exception {\n        Path path = testFolder.resolve(\"ThisIsARandomlyNamedFile\");\n\n        exportFormat.export(databaseContext, path, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(path));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                                       .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","date":"2019-02-10 20:47:48","endLine":79,"groupId":"2429","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPerformExportForSingleEntry","params":"(@TempDirPathtestFolder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/8b/995bfa69337294f67ea0dad31f1a180867f95e.src","preCode":"    public void testPerformExportForSingleEntry(@TempDir Path testFolder) throws Exception {\n\n        Path path = testFolder.resolve(\"ThisIsARandomlyNamedFile\");\n\n        exportFormat.export(databaseContext, path, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(path));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                                       .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/DocBook5ExporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"8520833e684aa9e305dd8745e45696ffd6d984fb","commitMessage":"@@@Remove old code for PDF import (#4634)\n\n* Remove old code for PDF import\n\n* Fix tests\n\n* Update Docbook5ExportFormat.xml\n\n* Fix tests\n\n* Fix checkstyle\n","date":"2019-02-10 20:47:48","modifiedFileCount":"75","status":"M","submitter":"Tobias Diez"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2018-08-16 15:17:32","commitOrder":7,"curCode":"    public final void testPerformExport(String filename) throws IOException, SaveException {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path importFile = resourceDir.resolve(filename);\n        String tempFilePath = tempFile.toAbsolutePath().toString();\n\n        List<BibEntry> entries = testImporter.importDatabase(importFile, StandardCharsets.UTF_8).getDatabase()\n                .getEntries();\n\n        bibtexmlExportFormat.export(databaseContext, tempFile, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(resourceDir.resolve(xmlFileName)));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilePath)));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","date":"2018-08-16 15:17:32","endLine":83,"groupId":"8939","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPerformExport","params":"(Stringfilename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a6/83dd2bff56c6722bc2a5592c379e7d1d70de03.src","preCode":"    public final void testPerformExport(String filename) throws IOException, SaveException {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path importFile = resourceDir.resolve(filename);\n        String tempFilePath = tempFile.toAbsolutePath().toString();\n\n        List<BibEntry> entries = testImporter.importDatabase(importFile, StandardCharsets.UTF_8).getDatabase()\n                .getEntries();\n\n        bibtexmlExportFormat.export(databaseContext, tempFile, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(resourceDir.resolve(xmlFileName)));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilePath)));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/BibTeXMLExporterTestFiles.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"},{"authorDate":"2019-08-02 15:20:10","commitOrder":7,"curCode":"    void testPerformExportForSingleEntry(@TempDir Path testFolder) throws Exception {\n        Path path = testFolder.resolve(\"ThisIsARandomlyNamedFile\");\n\n        exporter.export(databaseContext, path, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(path));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                                       .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","date":"2019-08-02 15:20:10","endLine":81,"groupId":"2429","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPerformExportForSingleEntry","params":"(@TempDirPathtestFolder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ba/39df690476b177d2365f8672ff94cd7ec45c61.src","preCode":"    void testPerformExportForSingleEntry(@TempDir Path testFolder) throws Exception {\n        Path path = testFolder.resolve(\"ThisIsARandomlyNamedFile\");\n\n        exportFormat.export(databaseContext, path, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(path));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                                       .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/DocBook5ExporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"4b39b78e4afcd6c36b385f5c46f1d9a4eac2e29b","commitMessage":"@@@Move to extended enums for fields and entry types (#5148)\n\n* Introduce interface for fields\n\n* Continue using fields interface instead of strings\n\n* Introduce OrFields class\n\n* Move FieldProperty\n\n* Convert entry types to extended enum\n\n* Start fixing build\n\n* Fix build\n\n* Start fixing tests\n\n* Everything compiles again\n\n* Make model tests pass\n\n* Fix most tests\n\n* Fix build\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix checkstyle issues\n\n* Fix more tests\n\n* Fix more tests\n\n* Disable test that fails on CI\n\n* Disable test that fails on CI\n","date":"2019-08-02 15:20:10","modifiedFileCount":"439","status":"M","submitter":"Tobias Diez"},{"authorTime":"2019-08-06 02:02:41","codes":[{"authorDate":"2018-08-16 15:17:32","commitOrder":8,"curCode":"    public final void testPerformExport(String filename) throws IOException, SaveException {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path importFile = resourceDir.resolve(filename);\n        String tempFilePath = tempFile.toAbsolutePath().toString();\n\n        List<BibEntry> entries = testImporter.importDatabase(importFile, StandardCharsets.UTF_8).getDatabase()\n                .getEntries();\n\n        bibtexmlExportFormat.export(databaseContext, tempFile, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(resourceDir.resolve(xmlFileName)));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilePath)));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","date":"2018-08-16 15:17:32","endLine":83,"groupId":"8939","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testPerformExport","params":"(Stringfilename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a6/83dd2bff56c6722bc2a5592c379e7d1d70de03.src","preCode":"    public final void testPerformExport(String filename) throws IOException, SaveException {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path importFile = resourceDir.resolve(filename);\n        String tempFilePath = tempFile.toAbsolutePath().toString();\n\n        List<BibEntry> entries = testImporter.importDatabase(importFile, StandardCharsets.UTF_8).getDatabase()\n                .getEntries();\n\n        bibtexmlExportFormat.export(databaseContext, tempFile, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(resourceDir.resolve(xmlFileName)));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilePath)));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/BibTeXMLExporterTestFiles.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"},{"authorDate":"2019-08-06 02:02:41","commitOrder":8,"curCode":"    void testPerformExportForSingleEntry(@TempDir Path testFolder) throws Exception {\n        Path path = testFolder.resolve(\"ThisIsARandomlyNamedFile\");\n\n        exporter.export(databaseContext, path, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(path));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                                       .normalizeWhitespace()\n                                       .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","date":"2019-08-06 02:02:41","endLine":80,"groupId":"2429","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testPerformExportForSingleEntry","params":"(@TempDirPathtestFolder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/0f/a6bb1682020fc89e23f54f4989e102a07a6729.src","preCode":"    void testPerformExportForSingleEntry(@TempDir Path testFolder) throws Exception {\n        Path path = testFolder.resolve(\"ThisIsARandomlyNamedFile\");\n\n        exporter.export(databaseContext, path, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(path));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                                       .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/DocBook5ExporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"76f9ac5785958581d663e00bb0d27143b3ebf238","commitMessage":"@@@Fix fail on testPerformExportForSingleEntry from DocBook5ExporterTest (#5168)\n\n* Fix fail on testPerformExportForSingleEntry from DocBook5ExporterTest\n\n* Restore XML test file and fix the bug in the right place\n","date":"2019-08-06 02:02:41","modifiedFileCount":"2","status":"M","submitter":"David M?ndez"},{"authorTime":"2019-08-06 02:02:41","codes":[{"authorDate":"2020-04-30 17:10:13","commitOrder":9,"curCode":"    public final void testPerformExport(String filename) throws IOException, SaveException {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path importFile = resourceDir.resolve(filename);\n        String tempFilePath = tempFile.toAbsolutePath().toString();\n\n        List<BibEntry> entries = testImporter.importDatabase(importFile, StandardCharsets.UTF_8).getDatabase()\n                                             .getEntries();\n\n        bibtexmlExportFormat.export(databaseContext, tempFile, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(resourceDir.resolve(xmlFileName)));\n        Builder test = Input.from(Files.newInputStream(Path.of(tempFilePath)));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                                       .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","date":"2020-04-30 17:10:13","endLine":78,"groupId":"10662","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testPerformExport","params":"(Stringfilename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/2e/8bfa1d5a54ca257486630c152279fed1e60332.src","preCode":"    public final void testPerformExport(String filename) throws IOException, SaveException {\n        String xmlFileName = filename.replace(\".bib\", \".xml\");\n        Path importFile = resourceDir.resolve(filename);\n        String tempFilePath = tempFile.toAbsolutePath().toString();\n\n        List<BibEntry> entries = testImporter.importDatabase(importFile, StandardCharsets.UTF_8).getDatabase()\n                                             .getEntries();\n\n        bibtexmlExportFormat.export(databaseContext, tempFile, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(resourceDir.resolve(xmlFileName)));\n        Builder test = Input.from(Files.newInputStream(Paths.get(tempFilePath)));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                                       .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/BibTeXMLExporterTestFiles.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2019-08-06 02:02:41","commitOrder":9,"curCode":"    void testPerformExportForSingleEntry(@TempDir Path testFolder) throws Exception {\n        Path path = testFolder.resolve(\"ThisIsARandomlyNamedFile\");\n\n        exporter.export(databaseContext, path, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(path));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                                       .normalizeWhitespace()\n                                       .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","date":"2019-08-06 02:02:41","endLine":80,"groupId":"10662","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testPerformExportForSingleEntry","params":"(@TempDirPathtestFolder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/0f/a6bb1682020fc89e23f54f4989e102a07a6729.src","preCode":"    void testPerformExportForSingleEntry(@TempDir Path testFolder) throws Exception {\n        Path path = testFolder.resolve(\"ThisIsARandomlyNamedFile\");\n\n        exporter.export(databaseContext, path, charset, entries);\n\n        Builder control = Input.from(Files.newInputStream(xmlFile));\n        Builder test = Input.from(Files.newInputStream(path));\n\n        assertThat(test, CompareMatcher.isSimilarTo(control)\n                                       .normalizeWhitespace()\n                                       .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure());\n    }\n","realPath":"src/test/java/org/jabref/logic/exporter/DocBook5ExporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"}],"commitId":"862078a4db316cfd15bd77be68d3d2b010feab3b","commitMessage":"@@@Fixes #6357: File directory (#6377)\n\n* Fixes #6357: File directory\n\nBug was introduced in https://github.com/JabRef/jabref/commit/1b03f039aa4abf0812a3a8ae0ba248c08fdb39a3.\n\n* Fix tests\n\n* Replace Paths.get\n\n* Fix code style","date":"2020-04-30 17:10:13","modifiedFileCount":"110","status":"M","submitter":"Tobias Diez"}]
