[{"authorTime":"2017-02-17 05:41:47","codes":[{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public ParserResult importDatabase(BufferedReader reader) throws IOException {\n        List<BibEntry> bibitems = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        String str;\n        while ((str = reader.readLine()) != null) {\n            if (str.length() < 2) {\n                continue;\n            }\n            if (str.indexOf(\"Record\") == 0) {\n                sb.append(\"__::__\").append(str);\n            } else {\n                sb.append(\"__NEWFIELD__\").append(str);\n            }\n        }\n        String[] entries = sb.toString().split(\"__::__\");\n        String type = \"\";\n        Map<String, String> h = new HashMap<>();\n        for (String entry : entries) {\n            if (entry.indexOf(\"Record\") != 0) {\n                continue;\n            }\n            h.clear();\n\n            String[] fields = entry.split(\"__NEWFIELD__\");\n            for (String s : fields) {\n                String f3 = s.substring(0, 2);\n                String frest = s.substring(5);\n                if (\"TI\".equals(f3)) {\n                    h.put(FieldName.TITLE, frest);\n                } else if (\"PY\".equals(f3)) {\n                    h.put(FieldName.YEAR, frest);\n                } else if (\"AU\".equals(f3)) {\n                    h.put(FieldName.AUTHOR,\n                            AuthorList.fixAuthorLastNameFirst(frest.replace(\",-\", \", \").replace(\";\", \" and \")));\n                } else if (\"AB\".equals(f3)) {\n                    h.put(FieldName.ABSTRACT, frest);\n                } else if (\"ID\".equals(f3)) {\n                    h.put(FieldName.KEYWORDS, frest);\n                } else if (\"SO\".equals(f3)) {\n                    int m = frest.indexOf('.');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.JOURNAL, jr.replace(\"-\", \" \"));\n                        frest = frest.substring(m);\n                        m = frest.indexOf(';');\n                        if (m >= 5) {\n                            String yr = frest.substring(m - 5, m).trim();\n                            h.put(FieldName.YEAR, yr);\n                            frest = frest.substring(m);\n                            m = frest.indexOf(':');\n                            if (m >= 0) {\n                                String pg = frest.substring(m + 1).trim();\n                                h.put(FieldName.PAGES, pg);\n                                String vol = frest.substring(1, m).trim();\n                                h.put(FieldName.VOLUME, vol);\n                            }\n                        }\n                    }\n\n                } else if (\"RT\".equals(f3)) {\n                    frest = frest.trim();\n                    if (\"Journal-Paper\".equals(frest)) {\n                        type = \"article\";\n                    } else if (\"Conference-Paper\".equals(frest) || \"Conference-Paper; Journal-Paper\".equals(frest)) {\n                        type = \"inproceedings\";\n                    } else {\n                        type = frest.replace(\" \", \"\");\n                    }\n                }\n            }\n            BibEntry b = new BibEntry(type);\n            b.setField(h);\n\n            bibitems.add(b);\n\n        }\n\n        return new ParserResult(bibitems);\n    }\n","date":"2017-02-17 05:41:47","endLine":131,"groupId":"1384","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"importDatabase","params":"(BufferedReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/57/81094cfd1e95d14f1318cec94d110aa09340f7.src","preCode":"    public ParserResult importDatabase(BufferedReader reader) throws IOException {\n        List<BibEntry> bibitems = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        String str;\n        while ((str = reader.readLine()) != null) {\n            if (str.length() < 2) {\n                continue;\n            }\n            if (str.indexOf(\"Record\") == 0) {\n                sb.append(\"__::__\").append(str);\n            } else {\n                sb.append(\"__NEWFIELD__\").append(str);\n            }\n        }\n        String[] entries = sb.toString().split(\"__::__\");\n        String type = \"\";\n        Map<String, String> h = new HashMap<>();\n        for (String entry : entries) {\n            if (entry.indexOf(\"Record\") != 0) {\n                continue;\n            }\n            h.clear();\n\n            String[] fields = entry.split(\"__NEWFIELD__\");\n            for (String s : fields) {\n                String f3 = s.substring(0, 2);\n                String frest = s.substring(5);\n                if (\"TI\".equals(f3)) {\n                    h.put(FieldName.TITLE, frest);\n                } else if (\"PY\".equals(f3)) {\n                    h.put(FieldName.YEAR, frest);\n                } else if (\"AU\".equals(f3)) {\n                    h.put(FieldName.AUTHOR,\n                            AuthorList.fixAuthorLastNameFirst(frest.replace(\",-\", \", \").replace(\";\", \" and \")));\n                } else if (\"AB\".equals(f3)) {\n                    h.put(FieldName.ABSTRACT, frest);\n                } else if (\"ID\".equals(f3)) {\n                    h.put(FieldName.KEYWORDS, frest);\n                } else if (\"SO\".equals(f3)) {\n                    int m = frest.indexOf('.');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.JOURNAL, jr.replace(\"-\", \" \"));\n                        frest = frest.substring(m);\n                        m = frest.indexOf(';');\n                        if (m >= 5) {\n                            String yr = frest.substring(m - 5, m).trim();\n                            h.put(FieldName.YEAR, yr);\n                            frest = frest.substring(m);\n                            m = frest.indexOf(':');\n                            if (m >= 0) {\n                                String pg = frest.substring(m + 1).trim();\n                                h.put(FieldName.PAGES, pg);\n                                String vol = frest.substring(1, m).trim();\n                                h.put(FieldName.VOLUME, vol);\n                            }\n                        }\n                    }\n\n                } else if (\"RT\".equals(f3)) {\n                    frest = frest.trim();\n                    if (\"Journal-Paper\".equals(frest)) {\n                        type = \"article\";\n                    } else if (\"Conference-Paper\".equals(frest) || \"Conference-Paper; Journal-Paper\".equals(frest)) {\n                        type = \"inproceedings\";\n                    } else {\n                        type = frest.replace(\" \", \"\");\n                    }\n                }\n            }\n            BibEntry b = new BibEntry(type);\n            b.setField(h);\n\n            bibitems.add(b);\n\n        }\n\n        return new ParserResult(bibitems);\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fileformat/InspecImporter.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"},{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public ParserResult importDatabase(BufferedReader reader) throws IOException {\n        List<BibEntry> bibitems = new ArrayList<>();\n        boolean isChapter = false;\n        String str;\n        StringBuilder sb = new StringBuilder();\n        while ((str = reader.readLine()) != null) {\n            if (str.length() < 2) {\n                sb.append(\"__::__\").append(str);\n            } else {\n                sb.append(\"__NEWFIELD__\").append(str);\n            }\n        }\n        String[] entries = sb.toString().split(\"__::__\");\n        String type = \"\";\n        Map<String, String> h = new HashMap<>();\n        for (String entry : entries) {\n            if (entry.trim().length() < 6) {\n                continue;\n            }\n            h.clear();\n            String[] fields = entry.split(\"__NEWFIELD__\");\n            for (String field : fields) {\n                if (field.length() < 6) {\n                    continue;\n                }\n                String f3 = field.substring(0, 2);\n                String frest = field.substring(5);\n                if (\"TI\".equals(f3)) {\n                    h.put(FieldName.TITLE, frest);\n                } else if (\"AU\".equals(f3)) {\n                    if (frest.trim().endsWith(\"(ed)\")) {\n                        String ed = frest.trim();\n                        ed = ed.substring(0, ed.length() - 4);\n                        h.put(FieldName.EDITOR,\n                                AuthorList.fixAuthorLastNameFirst(ed.replace(\",-\", \", \").replace(\";\", \" and \")));\n                    } else {\n                        h.put(FieldName.AUTHOR,\n                                AuthorList.fixAuthorLastNameFirst(frest.replace(\",-\", \", \").replace(\";\", \" and \")));\n                    }\n                } else if (\"AB\".equals(f3)) {\n                    h.put(FieldName.ABSTRACT, frest);\n                } else if (\"DE\".equals(f3)) {\n                    String kw = frest.replace(\"-;\", \",\").toLowerCase();\n                    h.put(FieldName.KEYWORDS, kw.substring(0, kw.length() - 1));\n                } else if (\"SO\".equals(f3)) {\n                    int m = frest.indexOf('.');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.JOURNAL, jr.replace(\"-\", \" \"));\n                        frest = frest.substring(m);\n                        m = frest.indexOf(';');\n                        if (m >= 5) {\n                            String yr = frest.substring(m - 5, m).trim();\n                            h.put(FieldName.YEAR, yr);\n                            frest = frest.substring(m);\n                            m = frest.indexOf(':');\n                            int issueIndex = frest.indexOf('(');\n                            int endIssueIndex = frest.indexOf(')');\n                            if (m >= 0) {\n                                String pg = frest.substring(m + 1).trim();\n                                h.put(FieldName.PAGES, pg);\n                                h.put(FieldName.VOLUME, frest.substring(1, issueIndex).trim());\n                                h.put(FieldName.ISSUE, frest.substring(issueIndex + 1, endIssueIndex).trim());\n                            }\n                        }\n                    }\n                } else if (\"PB\".equals(f3)) {\n                    int m = frest.indexOf(':');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.PUBLISHER, jr.replace(\"-\", \" \").trim());\n                        frest = frest.substring(m);\n                        m = frest.indexOf(\", \");\n                        if ((m + 2) < frest.length()) {\n                            String yr = frest.substring(m + 2).trim();\n                            try {\n                                Integer.parseInt(yr);\n                                h.put(FieldName.YEAR, yr);\n                            } catch (NumberFormatException ex) {\n                                \r\n                                \r\n                            }\n\n                        }\n\n                    }\n                } else if (\"AF\".equals(f3)) {\n                    h.put(FieldName.SCHOOL, frest.trim());\n\n                } else if (\"DT\".equals(f3)) {\n                    frest = frest.trim();\n                    if (\"Monograph\".equals(frest)) {\n                        type = \"book\";\n                    } else if (frest.startsWith(\"Dissertation\")) {\n                        type = \"phdthesis\";\n                    } else if (frest.toLowerCase().contains(FieldName.JOURNAL)) {\n                        type = \"article\";\n                    } else if (\"Contribution\".equals(frest) || \"Chapter\".equals(frest)) {\n                        type = \"incollection\";\n                        \r\n                        \r\n                        isChapter = true;\n                    } else {\n                        type = frest.replace(\" \", \"\");\n                    }\n                }\n            }\n\n            if (isChapter) {\n                String titleO = h.get(FieldName.TITLE);\n                if (titleO != null) {\n                    String title = titleO.trim();\n                    int inPos = title.indexOf(\"\\\" in \");\n                    if (inPos > 1) {\n                        h.put(FieldName.TITLE, title.substring(0, inPos));\n                    }\n                }\n\n            }\n\n            BibEntry b = new BibEntry(type);\n            \r\n            b.setField(h);\n\n            bibitems.add(b);\n\n        }\n\n        return new ParserResult(bibitems);\n    }\n","date":"2017-02-17 05:41:47","endLine":191,"groupId":"7878","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"importDatabase","params":"(BufferedReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/31/9aec43847ec24d51eeb85e82b65115544ca2f8.src","preCode":"    public ParserResult importDatabase(BufferedReader reader) throws IOException {\n        List<BibEntry> bibitems = new ArrayList<>();\n        boolean isChapter = false;\n        String str;\n        StringBuilder sb = new StringBuilder();\n        while ((str = reader.readLine()) != null) {\n            if (str.length() < 2) {\n                sb.append(\"__::__\").append(str);\n            } else {\n                sb.append(\"__NEWFIELD__\").append(str);\n            }\n        }\n        String[] entries = sb.toString().split(\"__::__\");\n        String type = \"\";\n        Map<String, String> h = new HashMap<>();\n        for (String entry : entries) {\n            if (entry.trim().length() < 6) {\n                continue;\n            }\n            h.clear();\n            String[] fields = entry.split(\"__NEWFIELD__\");\n            for (String field : fields) {\n                if (field.length() < 6) {\n                    continue;\n                }\n                String f3 = field.substring(0, 2);\n                String frest = field.substring(5);\n                if (\"TI\".equals(f3)) {\n                    h.put(FieldName.TITLE, frest);\n                } else if (\"AU\".equals(f3)) {\n                    if (frest.trim().endsWith(\"(ed)\")) {\n                        String ed = frest.trim();\n                        ed = ed.substring(0, ed.length() - 4);\n                        h.put(FieldName.EDITOR,\n                                AuthorList.fixAuthorLastNameFirst(ed.replace(\",-\", \", \").replace(\";\", \" and \")));\n                    } else {\n                        h.put(FieldName.AUTHOR,\n                                AuthorList.fixAuthorLastNameFirst(frest.replace(\",-\", \", \").replace(\";\", \" and \")));\n                    }\n                } else if (\"AB\".equals(f3)) {\n                    h.put(FieldName.ABSTRACT, frest);\n                } else if (\"DE\".equals(f3)) {\n                    String kw = frest.replace(\"-;\", \",\").toLowerCase();\n                    h.put(FieldName.KEYWORDS, kw.substring(0, kw.length() - 1));\n                } else if (\"SO\".equals(f3)) {\n                    int m = frest.indexOf('.');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.JOURNAL, jr.replace(\"-\", \" \"));\n                        frest = frest.substring(m);\n                        m = frest.indexOf(';');\n                        if (m >= 5) {\n                            String yr = frest.substring(m - 5, m).trim();\n                            h.put(FieldName.YEAR, yr);\n                            frest = frest.substring(m);\n                            m = frest.indexOf(':');\n                            int issueIndex = frest.indexOf('(');\n                            int endIssueIndex = frest.indexOf(')');\n                            if (m >= 0) {\n                                String pg = frest.substring(m + 1).trim();\n                                h.put(FieldName.PAGES, pg);\n                                h.put(FieldName.VOLUME, frest.substring(1, issueIndex).trim());\n                                h.put(FieldName.ISSUE, frest.substring(issueIndex + 1, endIssueIndex).trim());\n                            }\n                        }\n                    }\n                } else if (\"PB\".equals(f3)) {\n                    int m = frest.indexOf(':');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.PUBLISHER, jr.replace(\"-\", \" \").trim());\n                        frest = frest.substring(m);\n                        m = frest.indexOf(\", \");\n                        if ((m + 2) < frest.length()) {\n                            String yr = frest.substring(m + 2).trim();\n                            try {\n                                Integer.parseInt(yr);\n                                h.put(FieldName.YEAR, yr);\n                            } catch (NumberFormatException ex) {\n                                \r\n                                \r\n                            }\n\n                        }\n\n                    }\n                } else if (\"AF\".equals(f3)) {\n                    h.put(FieldName.SCHOOL, frest.trim());\n\n                } else if (\"DT\".equals(f3)) {\n                    frest = frest.trim();\n                    if (\"Monograph\".equals(frest)) {\n                        type = \"book\";\n                    } else if (frest.startsWith(\"Dissertation\")) {\n                        type = \"phdthesis\";\n                    } else if (frest.toLowerCase().contains(FieldName.JOURNAL)) {\n                        type = \"article\";\n                    } else if (\"Contribution\".equals(frest) || \"Chapter\".equals(frest)) {\n                        type = \"incollection\";\n                        \r\n                        \r\n                        isChapter = true;\n                    } else {\n                        type = frest.replace(\" \", \"\");\n                    }\n                }\n            }\n\n            if (isChapter) {\n                String titleO = h.get(FieldName.TITLE);\n                if (titleO != null) {\n                    String title = titleO.trim();\n                    int inPos = title.indexOf(\"\\\" in \");\n                    if (inPos > 1) {\n                        h.put(FieldName.TITLE, title.substring(0, inPos));\n                    }\n                }\n\n            }\n\n            BibEntry b = new BibEntry(type);\n            \r\n            b.setField(h);\n\n            bibitems.add(b);\n\n        }\n\n        return new ParserResult(bibitems);\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fileformat/SilverPlatterImporter.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"}],"commitId":"ebbeb1d249edf7134abf92d24c2031ae54d19881","commitMessage":"@@@Merge branch 'net-sf-to-org-jabref'\n","date":"2017-02-17 05:41:47","modifiedFileCount":"1","status":"B","submitter":"Oliver Kopp"},{"authorTime":"2017-03-06 20:35:47","codes":[{"authorDate":"2017-02-17 05:41:47","commitOrder":2,"curCode":"    public ParserResult importDatabase(BufferedReader reader) throws IOException {\n        List<BibEntry> bibitems = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        String str;\n        while ((str = reader.readLine()) != null) {\n            if (str.length() < 2) {\n                continue;\n            }\n            if (str.indexOf(\"Record\") == 0) {\n                sb.append(\"__::__\").append(str);\n            } else {\n                sb.append(\"__NEWFIELD__\").append(str);\n            }\n        }\n        String[] entries = sb.toString().split(\"__::__\");\n        String type = \"\";\n        Map<String, String> h = new HashMap<>();\n        for (String entry : entries) {\n            if (entry.indexOf(\"Record\") != 0) {\n                continue;\n            }\n            h.clear();\n\n            String[] fields = entry.split(\"__NEWFIELD__\");\n            for (String s : fields) {\n                String f3 = s.substring(0, 2);\n                String frest = s.substring(5);\n                if (\"TI\".equals(f3)) {\n                    h.put(FieldName.TITLE, frest);\n                } else if (\"PY\".equals(f3)) {\n                    h.put(FieldName.YEAR, frest);\n                } else if (\"AU\".equals(f3)) {\n                    h.put(FieldName.AUTHOR,\n                            AuthorList.fixAuthorLastNameFirst(frest.replace(\",-\", \", \").replace(\";\", \" and \")));\n                } else if (\"AB\".equals(f3)) {\n                    h.put(FieldName.ABSTRACT, frest);\n                } else if (\"ID\".equals(f3)) {\n                    h.put(FieldName.KEYWORDS, frest);\n                } else if (\"SO\".equals(f3)) {\n                    int m = frest.indexOf('.');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.JOURNAL, jr.replace(\"-\", \" \"));\n                        frest = frest.substring(m);\n                        m = frest.indexOf(';');\n                        if (m >= 5) {\n                            String yr = frest.substring(m - 5, m).trim();\n                            h.put(FieldName.YEAR, yr);\n                            frest = frest.substring(m);\n                            m = frest.indexOf(':');\n                            if (m >= 0) {\n                                String pg = frest.substring(m + 1).trim();\n                                h.put(FieldName.PAGES, pg);\n                                String vol = frest.substring(1, m).trim();\n                                h.put(FieldName.VOLUME, vol);\n                            }\n                        }\n                    }\n\n                } else if (\"RT\".equals(f3)) {\n                    frest = frest.trim();\n                    if (\"Journal-Paper\".equals(frest)) {\n                        type = \"article\";\n                    } else if (\"Conference-Paper\".equals(frest) || \"Conference-Paper; Journal-Paper\".equals(frest)) {\n                        type = \"inproceedings\";\n                    } else {\n                        type = frest.replace(\" \", \"\");\n                    }\n                }\n            }\n            BibEntry b = new BibEntry(type);\n            b.setField(h);\n\n            bibitems.add(b);\n\n        }\n\n        return new ParserResult(bibitems);\n    }\n","date":"2017-02-17 05:41:47","endLine":131,"groupId":"1384","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"importDatabase","params":"(BufferedReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/57/81094cfd1e95d14f1318cec94d110aa09340f7.src","preCode":"    public ParserResult importDatabase(BufferedReader reader) throws IOException {\n        List<BibEntry> bibitems = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        String str;\n        while ((str = reader.readLine()) != null) {\n            if (str.length() < 2) {\n                continue;\n            }\n            if (str.indexOf(\"Record\") == 0) {\n                sb.append(\"__::__\").append(str);\n            } else {\n                sb.append(\"__NEWFIELD__\").append(str);\n            }\n        }\n        String[] entries = sb.toString().split(\"__::__\");\n        String type = \"\";\n        Map<String, String> h = new HashMap<>();\n        for (String entry : entries) {\n            if (entry.indexOf(\"Record\") != 0) {\n                continue;\n            }\n            h.clear();\n\n            String[] fields = entry.split(\"__NEWFIELD__\");\n            for (String s : fields) {\n                String f3 = s.substring(0, 2);\n                String frest = s.substring(5);\n                if (\"TI\".equals(f3)) {\n                    h.put(FieldName.TITLE, frest);\n                } else if (\"PY\".equals(f3)) {\n                    h.put(FieldName.YEAR, frest);\n                } else if (\"AU\".equals(f3)) {\n                    h.put(FieldName.AUTHOR,\n                            AuthorList.fixAuthorLastNameFirst(frest.replace(\",-\", \", \").replace(\";\", \" and \")));\n                } else if (\"AB\".equals(f3)) {\n                    h.put(FieldName.ABSTRACT, frest);\n                } else if (\"ID\".equals(f3)) {\n                    h.put(FieldName.KEYWORDS, frest);\n                } else if (\"SO\".equals(f3)) {\n                    int m = frest.indexOf('.');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.JOURNAL, jr.replace(\"-\", \" \"));\n                        frest = frest.substring(m);\n                        m = frest.indexOf(';');\n                        if (m >= 5) {\n                            String yr = frest.substring(m - 5, m).trim();\n                            h.put(FieldName.YEAR, yr);\n                            frest = frest.substring(m);\n                            m = frest.indexOf(':');\n                            if (m >= 0) {\n                                String pg = frest.substring(m + 1).trim();\n                                h.put(FieldName.PAGES, pg);\n                                String vol = frest.substring(1, m).trim();\n                                h.put(FieldName.VOLUME, vol);\n                            }\n                        }\n                    }\n\n                } else if (\"RT\".equals(f3)) {\n                    frest = frest.trim();\n                    if (\"Journal-Paper\".equals(frest)) {\n                        type = \"article\";\n                    } else if (\"Conference-Paper\".equals(frest) || \"Conference-Paper; Journal-Paper\".equals(frest)) {\n                        type = \"inproceedings\";\n                    } else {\n                        type = frest.replace(\" \", \"\");\n                    }\n                }\n            }\n            BibEntry b = new BibEntry(type);\n            b.setField(h);\n\n            bibitems.add(b);\n\n        }\n\n        return new ParserResult(bibitems);\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fileformat/InspecImporter.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2017-03-06 20:35:47","commitOrder":2,"curCode":"    public ParserResult importDatabase(BufferedReader reader) throws IOException {\n        List<BibEntry> bibitems = new ArrayList<>();\n        boolean isChapter = false;\n        String str;\n        StringBuilder sb = new StringBuilder();\n        while ((str = reader.readLine()) != null) {\n            if (str.length() < 2) {\n                sb.append(\"__::__\").append(str);\n            } else {\n                sb.append(\"__NEWFIELD__\").append(str);\n            }\n        }\n        String[] entries = sb.toString().split(\"__::__\");\n        String type = \"\";\n        Map<String, String> h = new HashMap<>();\n        for (String entry : entries) {\n            if (entry.trim().length() < 6) {\n                continue;\n            }\n            h.clear();\n            String[] fields = entry.split(\"__NEWFIELD__\");\n            for (String field : fields) {\n                if (field.length() < 6) {\n                    continue;\n                }\n                String f3 = field.substring(0, 2);\n                String frest = field.substring(5);\n                if (\"TI\".equals(f3)) {\n                    h.put(FieldName.TITLE, frest);\n                } else if (\"AU\".equals(f3)) {\n                    if (frest.trim().endsWith(\"(ed)\")) {\n                        String ed = frest.trim();\n                        ed = ed.substring(0, ed.length() - 4);\n                        h.put(FieldName.EDITOR,\n                                AuthorList.fixAuthorLastNameFirst(ed.replace(\",-\", \", \").replace(\";\", \" and \")));\n                    } else {\n                        h.put(FieldName.AUTHOR,\n                                AuthorList.fixAuthorLastNameFirst(frest.replace(\",-\", \", \").replace(\";\", \" and \")));\n                    }\n                } else if (\"AB\".equals(f3)) {\n                    h.put(FieldName.ABSTRACT, frest);\n                } else if (\"DE\".equals(f3)) {\n                    String kw = frest.replace(\"-;\", \",\").toLowerCase(Locale.ROOT);\n                    h.put(FieldName.KEYWORDS, kw.substring(0, kw.length() - 1));\n                } else if (\"SO\".equals(f3)) {\n                    int m = frest.indexOf('.');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.JOURNAL, jr.replace(\"-\", \" \"));\n                        frest = frest.substring(m);\n                        m = frest.indexOf(';');\n                        if (m >= 5) {\n                            String yr = frest.substring(m - 5, m).trim();\n                            h.put(FieldName.YEAR, yr);\n                            frest = frest.substring(m);\n                            m = frest.indexOf(':');\n                            int issueIndex = frest.indexOf('(');\n                            int endIssueIndex = frest.indexOf(')');\n                            if (m >= 0) {\n                                String pg = frest.substring(m + 1).trim();\n                                h.put(FieldName.PAGES, pg);\n                                h.put(FieldName.VOLUME, frest.substring(1, issueIndex).trim());\n                                h.put(FieldName.ISSUE, frest.substring(issueIndex + 1, endIssueIndex).trim());\n                            }\n                        }\n                    }\n                } else if (\"PB\".equals(f3)) {\n                    int m = frest.indexOf(':');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.PUBLISHER, jr.replace(\"-\", \" \").trim());\n                        frest = frest.substring(m);\n                        m = frest.indexOf(\", \");\n                        if ((m + 2) < frest.length()) {\n                            String yr = frest.substring(m + 2).trim();\n                            try {\n                                Integer.parseInt(yr);\n                                h.put(FieldName.YEAR, yr);\n                            } catch (NumberFormatException ex) {\n                                \r\n                                \r\n                            }\n\n                        }\n\n                    }\n                } else if (\"AF\".equals(f3)) {\n                    h.put(FieldName.SCHOOL, frest.trim());\n\n                } else if (\"DT\".equals(f3)) {\n                    frest = frest.trim();\n                    if (\"Monograph\".equals(frest)) {\n                        type = \"book\";\n                    } else if (frest.startsWith(\"Dissertation\")) {\n                        type = \"phdthesis\";\n                    } else if (frest.toLowerCase(Locale.ROOT).contains(FieldName.JOURNAL)) {\n                        type = \"article\";\n                    } else if (\"Contribution\".equals(frest) || \"Chapter\".equals(frest)) {\n                        type = \"incollection\";\n                        \r\n                        \r\n                        isChapter = true;\n                    } else {\n                        type = frest.replace(\" \", \"\");\n                    }\n                }\n            }\n\n            if (isChapter) {\n                String titleO = h.get(FieldName.TITLE);\n                if (titleO != null) {\n                    String title = titleO.trim();\n                    int inPos = title.indexOf(\"\\\" in \");\n                    if (inPos > 1) {\n                        h.put(FieldName.TITLE, title.substring(0, inPos));\n                    }\n                }\n\n            }\n\n            BibEntry b = new BibEntry(type);\n            \r\n            b.setField(h);\n\n            bibitems.add(b);\n\n        }\n\n        return new ParserResult(bibitems);\n    }\n","date":"2017-03-06 20:35:47","endLine":192,"groupId":"7878","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"importDatabase","params":"(BufferedReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/60/0d56ef32f1bbee82f208fae3de3d2909b9cc7b.src","preCode":"    public ParserResult importDatabase(BufferedReader reader) throws IOException {\n        List<BibEntry> bibitems = new ArrayList<>();\n        boolean isChapter = false;\n        String str;\n        StringBuilder sb = new StringBuilder();\n        while ((str = reader.readLine()) != null) {\n            if (str.length() < 2) {\n                sb.append(\"__::__\").append(str);\n            } else {\n                sb.append(\"__NEWFIELD__\").append(str);\n            }\n        }\n        String[] entries = sb.toString().split(\"__::__\");\n        String type = \"\";\n        Map<String, String> h = new HashMap<>();\n        for (String entry : entries) {\n            if (entry.trim().length() < 6) {\n                continue;\n            }\n            h.clear();\n            String[] fields = entry.split(\"__NEWFIELD__\");\n            for (String field : fields) {\n                if (field.length() < 6) {\n                    continue;\n                }\n                String f3 = field.substring(0, 2);\n                String frest = field.substring(5);\n                if (\"TI\".equals(f3)) {\n                    h.put(FieldName.TITLE, frest);\n                } else if (\"AU\".equals(f3)) {\n                    if (frest.trim().endsWith(\"(ed)\")) {\n                        String ed = frest.trim();\n                        ed = ed.substring(0, ed.length() - 4);\n                        h.put(FieldName.EDITOR,\n                                AuthorList.fixAuthorLastNameFirst(ed.replace(\",-\", \", \").replace(\";\", \" and \")));\n                    } else {\n                        h.put(FieldName.AUTHOR,\n                                AuthorList.fixAuthorLastNameFirst(frest.replace(\",-\", \", \").replace(\";\", \" and \")));\n                    }\n                } else if (\"AB\".equals(f3)) {\n                    h.put(FieldName.ABSTRACT, frest);\n                } else if (\"DE\".equals(f3)) {\n                    String kw = frest.replace(\"-;\", \",\").toLowerCase();\n                    h.put(FieldName.KEYWORDS, kw.substring(0, kw.length() - 1));\n                } else if (\"SO\".equals(f3)) {\n                    int m = frest.indexOf('.');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.JOURNAL, jr.replace(\"-\", \" \"));\n                        frest = frest.substring(m);\n                        m = frest.indexOf(';');\n                        if (m >= 5) {\n                            String yr = frest.substring(m - 5, m).trim();\n                            h.put(FieldName.YEAR, yr);\n                            frest = frest.substring(m);\n                            m = frest.indexOf(':');\n                            int issueIndex = frest.indexOf('(');\n                            int endIssueIndex = frest.indexOf(')');\n                            if (m >= 0) {\n                                String pg = frest.substring(m + 1).trim();\n                                h.put(FieldName.PAGES, pg);\n                                h.put(FieldName.VOLUME, frest.substring(1, issueIndex).trim());\n                                h.put(FieldName.ISSUE, frest.substring(issueIndex + 1, endIssueIndex).trim());\n                            }\n                        }\n                    }\n                } else if (\"PB\".equals(f3)) {\n                    int m = frest.indexOf(':');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.PUBLISHER, jr.replace(\"-\", \" \").trim());\n                        frest = frest.substring(m);\n                        m = frest.indexOf(\", \");\n                        if ((m + 2) < frest.length()) {\n                            String yr = frest.substring(m + 2).trim();\n                            try {\n                                Integer.parseInt(yr);\n                                h.put(FieldName.YEAR, yr);\n                            } catch (NumberFormatException ex) {\n                                \r\n                                \r\n                            }\n\n                        }\n\n                    }\n                } else if (\"AF\".equals(f3)) {\n                    h.put(FieldName.SCHOOL, frest.trim());\n\n                } else if (\"DT\".equals(f3)) {\n                    frest = frest.trim();\n                    if (\"Monograph\".equals(frest)) {\n                        type = \"book\";\n                    } else if (frest.startsWith(\"Dissertation\")) {\n                        type = \"phdthesis\";\n                    } else if (frest.toLowerCase().contains(FieldName.JOURNAL)) {\n                        type = \"article\";\n                    } else if (\"Contribution\".equals(frest) || \"Chapter\".equals(frest)) {\n                        type = \"incollection\";\n                        \r\n                        \r\n                        isChapter = true;\n                    } else {\n                        type = frest.replace(\" \", \"\");\n                    }\n                }\n            }\n\n            if (isChapter) {\n                String titleO = h.get(FieldName.TITLE);\n                if (titleO != null) {\n                    String title = titleO.trim();\n                    int inPos = title.indexOf(\"\\\" in \");\n                    if (inPos > 1) {\n                        h.put(FieldName.TITLE, title.substring(0, inPos));\n                    }\n                }\n\n            }\n\n            BibEntry b = new BibEntry(type);\n            \r\n            b.setField(h);\n\n            bibitems.add(b);\n\n        }\n\n        return new ParserResult(bibitems);\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fileformat/SilverPlatterImporter.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"7a1b15abb58016b40e21a72124edf9da17cd08f2","commitMessage":"@@@Merge pull request #2584 from JabRef/locales\n\nAdded Locale.ROOT to toUpper/toLower Methods","date":"2017-03-06 20:35:47","modifiedFileCount":"63","status":"M","submitter":"Linus Dietz"},{"authorTime":"2018-12-29 06:39:28","codes":[{"authorDate":"2018-12-29 06:39:28","commitOrder":3,"curCode":"    public ParserResult importDatabase(BufferedReader reader) throws IOException {\n        List<BibEntry> bibitems = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        String str;\n        while ((str = reader.readLine()) != null) {\n            if (str.length() < 2) {\n                continue;\n            }\n            if (str.indexOf(\"Record\") == 0) {\n                sb.append(\"__::__\").append(str);\n            } else {\n                sb.append(\"__NEWFIELD__\").append(str);\n            }\n        }\n        String[] entries = sb.toString().split(\"__::__\");\n        String type = \"\";\n        Map<String, String> h = new HashMap<>();\n        for (String entry : entries) {\n            if (entry.indexOf(\"Record\") != 0) {\n                continue;\n            }\n            h.clear();\n\n            String[] fields = entry.split(\"__NEWFIELD__\");\n            for (String s : fields) {\n                String f3 = s.substring(0, 2);\n                String frest = s.substring(5);\n                if (\"TI\".equals(f3)) {\n                    h.put(FieldName.TITLE, frest);\n                } else if (\"PY\".equals(f3)) {\n                    h.put(FieldName.YEAR, frest);\n                } else if (\"AU\".equals(f3)) {\n                    h.put(FieldName.AUTHOR,\n                            AuthorList.fixAuthorLastNameFirst(frest.replace(\",-\", \", \").replace(\";\", \" and \")));\n                } else if (\"AB\".equals(f3)) {\n                    h.put(FieldName.ABSTRACT, frest);\n                } else if (\"ID\".equals(f3)) {\n                    h.put(FieldName.KEYWORDS, frest);\n                } else if (\"SO\".equals(f3)) {\n                    int m = frest.indexOf('.');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.JOURNAL, jr.replace(\"-\", \" \"));\n                        frest = frest.substring(m);\n                        m = frest.indexOf(';');\n                        if (m >= 5) {\n                            String yr = frest.substring(m - 5, m).trim();\n                            h.put(FieldName.YEAR, yr);\n                            frest = frest.substring(m);\n                            m = frest.indexOf(':');\n                            if (m >= 0) {\n                                String pg = frest.substring(m + 1).trim();\n                                h.put(FieldName.PAGES, pg);\n                                String vol = frest.substring(1, m).trim();\n                                h.put(FieldName.VOLUME, vol);\n                            }\n                        }\n                    }\n\n                } else if (\"RT\".equals(f3)) {\n                    frest = frest.trim();\n                    if (\"Journal-Paper\".equals(frest)) {\n                        type = \"article\";\n                    } else if (\"Conference-Paper\".equals(frest) || \"Conference-Paper; Journal-Paper\".equals(frest)) {\n                        type = \"inproceedings\";\n                    } else {\n                        type = frest.replace(\" \", \"\");\n                    }\n                }\n            }\n            BibEntry b = new BibEntry(BibtexEntryTypes.getTypeOrDefault(type));\n            b.setField(h);\n\n            bibitems.add(b);\n\n        }\n\n        return new ParserResult(bibitems);\n    }\n","date":"2018-12-29 06:39:28","endLine":132,"groupId":"1384","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"importDatabase","params":"(BufferedReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/36/0093665354ed423580b0c9b20abaa2111282e5.src","preCode":"    public ParserResult importDatabase(BufferedReader reader) throws IOException {\n        List<BibEntry> bibitems = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        String str;\n        while ((str = reader.readLine()) != null) {\n            if (str.length() < 2) {\n                continue;\n            }\n            if (str.indexOf(\"Record\") == 0) {\n                sb.append(\"__::__\").append(str);\n            } else {\n                sb.append(\"__NEWFIELD__\").append(str);\n            }\n        }\n        String[] entries = sb.toString().split(\"__::__\");\n        String type = \"\";\n        Map<String, String> h = new HashMap<>();\n        for (String entry : entries) {\n            if (entry.indexOf(\"Record\") != 0) {\n                continue;\n            }\n            h.clear();\n\n            String[] fields = entry.split(\"__NEWFIELD__\");\n            for (String s : fields) {\n                String f3 = s.substring(0, 2);\n                String frest = s.substring(5);\n                if (\"TI\".equals(f3)) {\n                    h.put(FieldName.TITLE, frest);\n                } else if (\"PY\".equals(f3)) {\n                    h.put(FieldName.YEAR, frest);\n                } else if (\"AU\".equals(f3)) {\n                    h.put(FieldName.AUTHOR,\n                            AuthorList.fixAuthorLastNameFirst(frest.replace(\",-\", \", \").replace(\";\", \" and \")));\n                } else if (\"AB\".equals(f3)) {\n                    h.put(FieldName.ABSTRACT, frest);\n                } else if (\"ID\".equals(f3)) {\n                    h.put(FieldName.KEYWORDS, frest);\n                } else if (\"SO\".equals(f3)) {\n                    int m = frest.indexOf('.');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.JOURNAL, jr.replace(\"-\", \" \"));\n                        frest = frest.substring(m);\n                        m = frest.indexOf(';');\n                        if (m >= 5) {\n                            String yr = frest.substring(m - 5, m).trim();\n                            h.put(FieldName.YEAR, yr);\n                            frest = frest.substring(m);\n                            m = frest.indexOf(':');\n                            if (m >= 0) {\n                                String pg = frest.substring(m + 1).trim();\n                                h.put(FieldName.PAGES, pg);\n                                String vol = frest.substring(1, m).trim();\n                                h.put(FieldName.VOLUME, vol);\n                            }\n                        }\n                    }\n\n                } else if (\"RT\".equals(f3)) {\n                    frest = frest.trim();\n                    if (\"Journal-Paper\".equals(frest)) {\n                        type = \"article\";\n                    } else if (\"Conference-Paper\".equals(frest) || \"Conference-Paper; Journal-Paper\".equals(frest)) {\n                        type = \"inproceedings\";\n                    } else {\n                        type = frest.replace(\" \", \"\");\n                    }\n                }\n            }\n            BibEntry b = new BibEntry(type);\n            b.setField(h);\n\n            bibitems.add(b);\n\n        }\n\n        return new ParserResult(bibitems);\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fileformat/InspecImporter.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2018-12-29 06:39:28","commitOrder":3,"curCode":"    public ParserResult importDatabase(BufferedReader reader) throws IOException {\n        List<BibEntry> bibitems = new ArrayList<>();\n        boolean isChapter = false;\n        String str;\n        StringBuilder sb = new StringBuilder();\n        while ((str = reader.readLine()) != null) {\n            if (str.length() < 2) {\n                sb.append(\"__::__\").append(str);\n            } else {\n                sb.append(\"__NEWFIELD__\").append(str);\n            }\n        }\n        String[] entries = sb.toString().split(\"__::__\");\n        String type = \"\";\n        Map<String, String> h = new HashMap<>();\n        for (String entry : entries) {\n            if (entry.trim().length() < 6) {\n                continue;\n            }\n            h.clear();\n            String[] fields = entry.split(\"__NEWFIELD__\");\n            for (String field : fields) {\n                if (field.length() < 6) {\n                    continue;\n                }\n                String f3 = field.substring(0, 2);\n                String frest = field.substring(5);\n                if (\"TI\".equals(f3)) {\n                    h.put(FieldName.TITLE, frest);\n                } else if (\"AU\".equals(f3)) {\n                    if (frest.trim().endsWith(\"(ed)\")) {\n                        String ed = frest.trim();\n                        ed = ed.substring(0, ed.length() - 4);\n                        h.put(FieldName.EDITOR,\n                                AuthorList.fixAuthorLastNameFirst(ed.replace(\",-\", \", \").replace(\";\", \" and \")));\n                    } else {\n                        h.put(FieldName.AUTHOR,\n                                AuthorList.fixAuthorLastNameFirst(frest.replace(\",-\", \", \").replace(\";\", \" and \")));\n                    }\n                } else if (\"AB\".equals(f3)) {\n                    h.put(FieldName.ABSTRACT, frest);\n                } else if (\"DE\".equals(f3)) {\n                    String kw = frest.replace(\"-;\", \",\").toLowerCase(Locale.ROOT);\n                    h.put(FieldName.KEYWORDS, kw.substring(0, kw.length() - 1));\n                } else if (\"SO\".equals(f3)) {\n                    int m = frest.indexOf('.');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.JOURNAL, jr.replace(\"-\", \" \"));\n                        frest = frest.substring(m);\n                        m = frest.indexOf(';');\n                        if (m >= 5) {\n                            String yr = frest.substring(m - 5, m).trim();\n                            h.put(FieldName.YEAR, yr);\n                            frest = frest.substring(m);\n                            m = frest.indexOf(':');\n                            int issueIndex = frest.indexOf('(');\n                            int endIssueIndex = frest.indexOf(')');\n                            if (m >= 0) {\n                                String pg = frest.substring(m + 1).trim();\n                                h.put(FieldName.PAGES, pg);\n                                h.put(FieldName.VOLUME, frest.substring(1, issueIndex).trim());\n                                h.put(FieldName.ISSUE, frest.substring(issueIndex + 1, endIssueIndex).trim());\n                            }\n                        }\n                    }\n                } else if (\"PB\".equals(f3)) {\n                    int m = frest.indexOf(':');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.PUBLISHER, jr.replace(\"-\", \" \").trim());\n                        frest = frest.substring(m);\n                        m = frest.indexOf(\", \");\n                        if ((m + 2) < frest.length()) {\n                            String yr = frest.substring(m + 2).trim();\n                            try {\n                                Integer.parseInt(yr);\n                                h.put(FieldName.YEAR, yr);\n                            } catch (NumberFormatException ex) {\n                                \r\n                                \r\n                            }\n\n                        }\n\n                    }\n                } else if (\"AF\".equals(f3)) {\n                    h.put(FieldName.SCHOOL, frest.trim());\n\n                } else if (\"DT\".equals(f3)) {\n                    frest = frest.trim();\n                    if (\"Monograph\".equals(frest)) {\n                        type = \"book\";\n                    } else if (frest.startsWith(\"Dissertation\")) {\n                        type = \"phdthesis\";\n                    } else if (frest.toLowerCase(Locale.ROOT).contains(FieldName.JOURNAL)) {\n                        type = \"article\";\n                    } else if (\"Contribution\".equals(frest) || \"Chapter\".equals(frest)) {\n                        type = \"incollection\";\n                        \r\n                        \r\n                        isChapter = true;\n                    } else {\n                        type = frest.replace(\" \", \"\");\n                    }\n                }\n            }\n\n            if (isChapter) {\n                String titleO = h.get(FieldName.TITLE);\n                if (titleO != null) {\n                    String title = titleO.trim();\n                    int inPos = title.indexOf(\"\\\" in \");\n                    if (inPos > 1) {\n                        h.put(FieldName.TITLE, title.substring(0, inPos));\n                    }\n                }\n\n            }\n\n            BibEntry b = new BibEntry(BibtexEntryTypes.getTypeOrDefault(type));\n            \r\n            b.setField(h);\n\n            bibitems.add(b);\n\n        }\n\n        return new ParserResult(bibitems);\n    }\n","date":"2018-12-29 06:39:28","endLine":193,"groupId":"7878","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"importDatabase","params":"(BufferedReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/1b/1d0f965598a4be50401e8b236b151581a4276b.src","preCode":"    public ParserResult importDatabase(BufferedReader reader) throws IOException {\n        List<BibEntry> bibitems = new ArrayList<>();\n        boolean isChapter = false;\n        String str;\n        StringBuilder sb = new StringBuilder();\n        while ((str = reader.readLine()) != null) {\n            if (str.length() < 2) {\n                sb.append(\"__::__\").append(str);\n            } else {\n                sb.append(\"__NEWFIELD__\").append(str);\n            }\n        }\n        String[] entries = sb.toString().split(\"__::__\");\n        String type = \"\";\n        Map<String, String> h = new HashMap<>();\n        for (String entry : entries) {\n            if (entry.trim().length() < 6) {\n                continue;\n            }\n            h.clear();\n            String[] fields = entry.split(\"__NEWFIELD__\");\n            for (String field : fields) {\n                if (field.length() < 6) {\n                    continue;\n                }\n                String f3 = field.substring(0, 2);\n                String frest = field.substring(5);\n                if (\"TI\".equals(f3)) {\n                    h.put(FieldName.TITLE, frest);\n                } else if (\"AU\".equals(f3)) {\n                    if (frest.trim().endsWith(\"(ed)\")) {\n                        String ed = frest.trim();\n                        ed = ed.substring(0, ed.length() - 4);\n                        h.put(FieldName.EDITOR,\n                                AuthorList.fixAuthorLastNameFirst(ed.replace(\",-\", \", \").replace(\";\", \" and \")));\n                    } else {\n                        h.put(FieldName.AUTHOR,\n                                AuthorList.fixAuthorLastNameFirst(frest.replace(\",-\", \", \").replace(\";\", \" and \")));\n                    }\n                } else if (\"AB\".equals(f3)) {\n                    h.put(FieldName.ABSTRACT, frest);\n                } else if (\"DE\".equals(f3)) {\n                    String kw = frest.replace(\"-;\", \",\").toLowerCase(Locale.ROOT);\n                    h.put(FieldName.KEYWORDS, kw.substring(0, kw.length() - 1));\n                } else if (\"SO\".equals(f3)) {\n                    int m = frest.indexOf('.');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.JOURNAL, jr.replace(\"-\", \" \"));\n                        frest = frest.substring(m);\n                        m = frest.indexOf(';');\n                        if (m >= 5) {\n                            String yr = frest.substring(m - 5, m).trim();\n                            h.put(FieldName.YEAR, yr);\n                            frest = frest.substring(m);\n                            m = frest.indexOf(':');\n                            int issueIndex = frest.indexOf('(');\n                            int endIssueIndex = frest.indexOf(')');\n                            if (m >= 0) {\n                                String pg = frest.substring(m + 1).trim();\n                                h.put(FieldName.PAGES, pg);\n                                h.put(FieldName.VOLUME, frest.substring(1, issueIndex).trim());\n                                h.put(FieldName.ISSUE, frest.substring(issueIndex + 1, endIssueIndex).trim());\n                            }\n                        }\n                    }\n                } else if (\"PB\".equals(f3)) {\n                    int m = frest.indexOf(':');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.PUBLISHER, jr.replace(\"-\", \" \").trim());\n                        frest = frest.substring(m);\n                        m = frest.indexOf(\", \");\n                        if ((m + 2) < frest.length()) {\n                            String yr = frest.substring(m + 2).trim();\n                            try {\n                                Integer.parseInt(yr);\n                                h.put(FieldName.YEAR, yr);\n                            } catch (NumberFormatException ex) {\n                                \r\n                                \r\n                            }\n\n                        }\n\n                    }\n                } else if (\"AF\".equals(f3)) {\n                    h.put(FieldName.SCHOOL, frest.trim());\n\n                } else if (\"DT\".equals(f3)) {\n                    frest = frest.trim();\n                    if (\"Monograph\".equals(frest)) {\n                        type = \"book\";\n                    } else if (frest.startsWith(\"Dissertation\")) {\n                        type = \"phdthesis\";\n                    } else if (frest.toLowerCase(Locale.ROOT).contains(FieldName.JOURNAL)) {\n                        type = \"article\";\n                    } else if (\"Contribution\".equals(frest) || \"Chapter\".equals(frest)) {\n                        type = \"incollection\";\n                        \r\n                        \r\n                        isChapter = true;\n                    } else {\n                        type = frest.replace(\" \", \"\");\n                    }\n                }\n            }\n\n            if (isChapter) {\n                String titleO = h.get(FieldName.TITLE);\n                if (titleO != null) {\n                    String title = titleO.trim();\n                    int inPos = title.indexOf(\"\\\" in \");\n                    if (inPos > 1) {\n                        h.put(FieldName.TITLE, title.substring(0, inPos));\n                    }\n                }\n\n            }\n\n            BibEntry b = new BibEntry(type);\n            \r\n            b.setField(h);\n\n            bibitems.add(b);\n\n        }\n\n        return new ParserResult(bibitems);\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fileformat/SilverPlatterImporter.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"cd1e795e91a0f36ea33386c47f06e31e7f812481","commitMessage":"@@@Refactor BibEntry deprecated method (#4554)\n\n* Refactor BibEntry deprecated method\n\n* Fixed error\n\n* More on checkstyle fixing\n\n* Fixed checkstyle issues\n\n* Added custom entrytype for types not registered in the enumerator.\n\n* Added getTypeOrDefault method refactor code to use it and fix NPE problem\n\n* Fixing checkstyle rules\n\n* More on checkstyle\n\n* More on getType getTypeOrDefault replacement\n\n* Revert Article EntryType into Electronic\n\n* Added break line between different packages\n\n* Refactor BibtextEntryTypes.getTypeOrDefault method\n\n* Removed unused import\n\n* Removed extra new line.  checkstyle error fixing\n","date":"2018-12-29 06:39:28","modifiedFileCount":"36","status":"M","submitter":"Bitor Tonixa Biriato Balen?a"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":4,"curCode":"    public ParserResult importDatabase(BufferedReader reader) throws IOException {\n        List<BibEntry> bibitems = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        String str;\n        while ((str = reader.readLine()) != null) {\n            if (str.length() < 2) {\n                continue;\n            }\n            if (str.indexOf(\"Record\") == 0) {\n                sb.append(\"__::__\").append(str);\n            } else {\n                sb.append(\"__NEWFIELD__\").append(str);\n            }\n        }\n        String[] entries = sb.toString().split(\"__::__\");\n        EntryType type = BibEntry.DEFAULT_TYPE;\n        Map<Field, String> h = new HashMap<>();\n        for (String entry : entries) {\n            if (entry.indexOf(\"Record\") != 0) {\n                continue;\n            }\n            h.clear();\n\n            String[] fields = entry.split(\"__NEWFIELD__\");\n            for (String s : fields) {\n                String f3 = s.substring(0, 2);\n                String frest = s.substring(5);\n                if (\"TI\".equals(f3)) {\n                    h.put(StandardField.TITLE, frest);\n                } else if (\"PY\".equals(f3)) {\n                    h.put(StandardField.YEAR, frest);\n                } else if (\"AU\".equals(f3)) {\n                    h.put(StandardField.AUTHOR,\n                            AuthorList.fixAuthorLastNameFirst(frest.replace(\",-\", \", \").replace(\";\", \" and \")));\n                } else if (\"AB\".equals(f3)) {\n                    h.put(StandardField.ABSTRACT, frest);\n                } else if (\"ID\".equals(f3)) {\n                    h.put(StandardField.KEYWORDS, frest);\n                } else if (\"SO\".equals(f3)) {\n                    int m = frest.indexOf('.');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(StandardField.JOURNAL, jr.replace(\"-\", \" \"));\n                        frest = frest.substring(m);\n                        m = frest.indexOf(';');\n                        if (m >= 5) {\n                            String yr = frest.substring(m - 5, m).trim();\n                            h.put(StandardField.YEAR, yr);\n                            frest = frest.substring(m);\n                            m = frest.indexOf(':');\n                            if (m >= 0) {\n                                String pg = frest.substring(m + 1).trim();\n                                h.put(StandardField.PAGES, pg);\n                                String vol = frest.substring(1, m).trim();\n                                h.put(StandardField.VOLUME, vol);\n                            }\n                        }\n                    }\n\n                } else if (\"RT\".equals(f3)) {\n                    frest = frest.trim();\n                    if (\"Journal-Paper\".equals(frest)) {\n                        type = StandardEntryType.Article;\n                    } else if (\"Conference-Paper\".equals(frest) || \"Conference-Paper; Journal-Paper\".equals(frest)) {\n                        type = StandardEntryType.InProceedings;\n                    } else {\n                        type = EntryTypeFactory.parse(frest.replace(\" \", \"\"));\n                    }\n                }\n            }\n            BibEntry b = new BibEntry(type);\n            b.setField(h);\n\n            bibitems.add(b);\n\n        }\n\n        return new ParserResult(bibitems);\n    }\n","date":"2019-08-02 15:20:10","endLine":135,"groupId":"101028","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"importDatabase","params":"(BufferedReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/c6/e12bfc41833e2d091a0881d29565b4a6059b22.src","preCode":"    public ParserResult importDatabase(BufferedReader reader) throws IOException {\n        List<BibEntry> bibitems = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        String str;\n        while ((str = reader.readLine()) != null) {\n            if (str.length() < 2) {\n                continue;\n            }\n            if (str.indexOf(\"Record\") == 0) {\n                sb.append(\"__::__\").append(str);\n            } else {\n                sb.append(\"__NEWFIELD__\").append(str);\n            }\n        }\n        String[] entries = sb.toString().split(\"__::__\");\n        String type = \"\";\n        Map<String, String> h = new HashMap<>();\n        for (String entry : entries) {\n            if (entry.indexOf(\"Record\") != 0) {\n                continue;\n            }\n            h.clear();\n\n            String[] fields = entry.split(\"__NEWFIELD__\");\n            for (String s : fields) {\n                String f3 = s.substring(0, 2);\n                String frest = s.substring(5);\n                if (\"TI\".equals(f3)) {\n                    h.put(FieldName.TITLE, frest);\n                } else if (\"PY\".equals(f3)) {\n                    h.put(FieldName.YEAR, frest);\n                } else if (\"AU\".equals(f3)) {\n                    h.put(FieldName.AUTHOR,\n                            AuthorList.fixAuthorLastNameFirst(frest.replace(\",-\", \", \").replace(\";\", \" and \")));\n                } else if (\"AB\".equals(f3)) {\n                    h.put(FieldName.ABSTRACT, frest);\n                } else if (\"ID\".equals(f3)) {\n                    h.put(FieldName.KEYWORDS, frest);\n                } else if (\"SO\".equals(f3)) {\n                    int m = frest.indexOf('.');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.JOURNAL, jr.replace(\"-\", \" \"));\n                        frest = frest.substring(m);\n                        m = frest.indexOf(';');\n                        if (m >= 5) {\n                            String yr = frest.substring(m - 5, m).trim();\n                            h.put(FieldName.YEAR, yr);\n                            frest = frest.substring(m);\n                            m = frest.indexOf(':');\n                            if (m >= 0) {\n                                String pg = frest.substring(m + 1).trim();\n                                h.put(FieldName.PAGES, pg);\n                                String vol = frest.substring(1, m).trim();\n                                h.put(FieldName.VOLUME, vol);\n                            }\n                        }\n                    }\n\n                } else if (\"RT\".equals(f3)) {\n                    frest = frest.trim();\n                    if (\"Journal-Paper\".equals(frest)) {\n                        type = \"article\";\n                    } else if (\"Conference-Paper\".equals(frest) || \"Conference-Paper; Journal-Paper\".equals(frest)) {\n                        type = \"inproceedings\";\n                    } else {\n                        type = frest.replace(\" \", \"\");\n                    }\n                }\n            }\n            BibEntry b = new BibEntry(BibtexEntryTypes.getTypeOrDefault(type));\n            b.setField(h);\n\n            bibitems.add(b);\n\n        }\n\n        return new ParserResult(bibitems);\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fileformat/InspecImporter.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2019-08-02 15:20:10","commitOrder":4,"curCode":"    public ParserResult importDatabase(BufferedReader reader) throws IOException {\n        List<BibEntry> bibitems = new ArrayList<>();\n        boolean isChapter = false;\n        String str;\n        StringBuilder sb = new StringBuilder();\n        while ((str = reader.readLine()) != null) {\n            if (str.length() < 2) {\n                sb.append(\"__::__\").append(str);\n            } else {\n                sb.append(\"__NEWFIELD__\").append(str);\n            }\n        }\n        String[] entries = sb.toString().split(\"__::__\");\n        EntryType type = StandardEntryType.Misc;\n        Map<Field, String> h = new HashMap<>();\n        for (String entry : entries) {\n            if (entry.trim().length() < 6) {\n                continue;\n            }\n            h.clear();\n            String[] fields = entry.split(\"__NEWFIELD__\");\n            for (String field : fields) {\n                if (field.length() < 6) {\n                    continue;\n                }\n                String f3 = field.substring(0, 2);\n                String frest = field.substring(5);\n                if (\"TI\".equals(f3)) {\n                    h.put(StandardField.TITLE, frest);\n                } else if (\"AU\".equals(f3)) {\n                    if (frest.trim().endsWith(\"(ed)\")) {\n                        String ed = frest.trim();\n                        ed = ed.substring(0, ed.length() - 4);\n                        h.put(StandardField.EDITOR,\n                                AuthorList.fixAuthorLastNameFirst(ed.replace(\",-\", \", \").replace(\";\", \" and \")));\n                    } else {\n                        h.put(StandardField.AUTHOR,\n                                AuthorList.fixAuthorLastNameFirst(frest.replace(\",-\", \", \").replace(\";\", \" and \")));\n                    }\n                } else if (\"AB\".equals(f3)) {\n                    h.put(StandardField.ABSTRACT, frest);\n                } else if (\"DE\".equals(f3)) {\n                    String kw = frest.replace(\"-;\", \",\").toLowerCase(Locale.ROOT);\n                    h.put(StandardField.KEYWORDS, kw.substring(0, kw.length() - 1));\n                } else if (\"SO\".equals(f3)) {\n                    int m = frest.indexOf('.');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(StandardField.JOURNAL, jr.replace(\"-\", \" \"));\n                        frest = frest.substring(m);\n                        m = frest.indexOf(';');\n                        if (m >= 5) {\n                            String yr = frest.substring(m - 5, m).trim();\n                            h.put(StandardField.YEAR, yr);\n                            frest = frest.substring(m);\n                            m = frest.indexOf(':');\n                            int issueIndex = frest.indexOf('(');\n                            int endIssueIndex = frest.indexOf(')');\n                            if (m >= 0) {\n                                String pg = frest.substring(m + 1).trim();\n                                h.put(StandardField.PAGES, pg);\n                                h.put(StandardField.VOLUME, frest.substring(1, issueIndex).trim());\n                                h.put(StandardField.ISSUE, frest.substring(issueIndex + 1, endIssueIndex).trim());\n                            }\n                        }\n                    }\n                } else if (\"PB\".equals(f3)) {\n                    int m = frest.indexOf(':');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(StandardField.PUBLISHER, jr.replace(\"-\", \" \").trim());\n                        frest = frest.substring(m);\n                        m = frest.indexOf(\", \");\n                        if ((m + 2) < frest.length()) {\n                            String yr = frest.substring(m + 2).trim();\n                            try {\n                                Integer.parseInt(yr);\n                                h.put(StandardField.YEAR, yr);\n                            } catch (NumberFormatException ex) {\n                                \r\n                                \r\n                            }\n\n                        }\n\n                    }\n                } else if (\"AF\".equals(f3)) {\n                    h.put(StandardField.SCHOOL, frest.trim());\n\n                } else if (\"DT\".equals(f3)) {\n                    frest = frest.trim();\n                    if (\"Monograph\".equals(frest)) {\n                        type = StandardEntryType.Book;\n                    } else if (frest.startsWith(\"Dissertation\")) {\n                        type = StandardEntryType.PhdThesis;\n                    } else if (frest.toLowerCase(Locale.ROOT).contains(StandardField.JOURNAL.getName())) {\n                        type = StandardEntryType.Article;\n                    } else if (\"Contribution\".equals(frest) || \"Chapter\".equals(frest)) {\n                        type = StandardEntryType.InCollection;\n                        \r\n                        \r\n                        isChapter = true;\n                    } else {\n                        type = EntryTypeFactory.parse(frest.replace(\" \", \"\"));\n                    }\n                }\n            }\n\n            if (isChapter) {\n                String titleO = h.get(StandardField.TITLE);\n                if (titleO != null) {\n                    String title = titleO.trim();\n                    int inPos = title.indexOf(\"\\\" in \");\n                    if (inPos > 1) {\n                        h.put(StandardField.TITLE, title.substring(0, inPos));\n                    }\n                }\n\n            }\n\n            BibEntry b = new BibEntry(type);\n            \r\n            b.setField(h);\n\n            bibitems.add(b);\n\n        }\n\n        return new ParserResult(bibitems);\n    }\n","date":"2019-08-02 15:20:10","endLine":196,"groupId":"101028","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"importDatabase","params":"(BufferedReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/db/49b702e8f164b3cb778a14b6781e64e5fdeea3.src","preCode":"    public ParserResult importDatabase(BufferedReader reader) throws IOException {\n        List<BibEntry> bibitems = new ArrayList<>();\n        boolean isChapter = false;\n        String str;\n        StringBuilder sb = new StringBuilder();\n        while ((str = reader.readLine()) != null) {\n            if (str.length() < 2) {\n                sb.append(\"__::__\").append(str);\n            } else {\n                sb.append(\"__NEWFIELD__\").append(str);\n            }\n        }\n        String[] entries = sb.toString().split(\"__::__\");\n        String type = \"\";\n        Map<String, String> h = new HashMap<>();\n        for (String entry : entries) {\n            if (entry.trim().length() < 6) {\n                continue;\n            }\n            h.clear();\n            String[] fields = entry.split(\"__NEWFIELD__\");\n            for (String field : fields) {\n                if (field.length() < 6) {\n                    continue;\n                }\n                String f3 = field.substring(0, 2);\n                String frest = field.substring(5);\n                if (\"TI\".equals(f3)) {\n                    h.put(FieldName.TITLE, frest);\n                } else if (\"AU\".equals(f3)) {\n                    if (frest.trim().endsWith(\"(ed)\")) {\n                        String ed = frest.trim();\n                        ed = ed.substring(0, ed.length() - 4);\n                        h.put(FieldName.EDITOR,\n                                AuthorList.fixAuthorLastNameFirst(ed.replace(\",-\", \", \").replace(\";\", \" and \")));\n                    } else {\n                        h.put(FieldName.AUTHOR,\n                                AuthorList.fixAuthorLastNameFirst(frest.replace(\",-\", \", \").replace(\";\", \" and \")));\n                    }\n                } else if (\"AB\".equals(f3)) {\n                    h.put(FieldName.ABSTRACT, frest);\n                } else if (\"DE\".equals(f3)) {\n                    String kw = frest.replace(\"-;\", \",\").toLowerCase(Locale.ROOT);\n                    h.put(FieldName.KEYWORDS, kw.substring(0, kw.length() - 1));\n                } else if (\"SO\".equals(f3)) {\n                    int m = frest.indexOf('.');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.JOURNAL, jr.replace(\"-\", \" \"));\n                        frest = frest.substring(m);\n                        m = frest.indexOf(';');\n                        if (m >= 5) {\n                            String yr = frest.substring(m - 5, m).trim();\n                            h.put(FieldName.YEAR, yr);\n                            frest = frest.substring(m);\n                            m = frest.indexOf(':');\n                            int issueIndex = frest.indexOf('(');\n                            int endIssueIndex = frest.indexOf(')');\n                            if (m >= 0) {\n                                String pg = frest.substring(m + 1).trim();\n                                h.put(FieldName.PAGES, pg);\n                                h.put(FieldName.VOLUME, frest.substring(1, issueIndex).trim());\n                                h.put(FieldName.ISSUE, frest.substring(issueIndex + 1, endIssueIndex).trim());\n                            }\n                        }\n                    }\n                } else if (\"PB\".equals(f3)) {\n                    int m = frest.indexOf(':');\n                    if (m >= 0) {\n                        String jr = frest.substring(0, m);\n                        h.put(FieldName.PUBLISHER, jr.replace(\"-\", \" \").trim());\n                        frest = frest.substring(m);\n                        m = frest.indexOf(\", \");\n                        if ((m + 2) < frest.length()) {\n                            String yr = frest.substring(m + 2).trim();\n                            try {\n                                Integer.parseInt(yr);\n                                h.put(FieldName.YEAR, yr);\n                            } catch (NumberFormatException ex) {\n                                \r\n                                \r\n                            }\n\n                        }\n\n                    }\n                } else if (\"AF\".equals(f3)) {\n                    h.put(FieldName.SCHOOL, frest.trim());\n\n                } else if (\"DT\".equals(f3)) {\n                    frest = frest.trim();\n                    if (\"Monograph\".equals(frest)) {\n                        type = \"book\";\n                    } else if (frest.startsWith(\"Dissertation\")) {\n                        type = \"phdthesis\";\n                    } else if (frest.toLowerCase(Locale.ROOT).contains(FieldName.JOURNAL)) {\n                        type = \"article\";\n                    } else if (\"Contribution\".equals(frest) || \"Chapter\".equals(frest)) {\n                        type = \"incollection\";\n                        \r\n                        \r\n                        isChapter = true;\n                    } else {\n                        type = frest.replace(\" \", \"\");\n                    }\n                }\n            }\n\n            if (isChapter) {\n                String titleO = h.get(FieldName.TITLE);\n                if (titleO != null) {\n                    String title = titleO.trim();\n                    int inPos = title.indexOf(\"\\\" in \");\n                    if (inPos > 1) {\n                        h.put(FieldName.TITLE, title.substring(0, inPos));\n                    }\n                }\n\n            }\n\n            BibEntry b = new BibEntry(BibtexEntryTypes.getTypeOrDefault(type));\n            \r\n            b.setField(h);\n\n            bibitems.add(b);\n\n        }\n\n        return new ParserResult(bibitems);\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fileformat/SilverPlatterImporter.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"4b39b78e4afcd6c36b385f5c46f1d9a4eac2e29b","commitMessage":"@@@Move to extended enums for fields and entry types (#5148)\n\n* Introduce interface for fields\n\n* Continue using fields interface instead of strings\n\n* Introduce OrFields class\n\n* Move FieldProperty\n\n* Convert entry types to extended enum\n\n* Start fixing build\n\n* Fix build\n\n* Start fixing tests\n\n* Everything compiles again\n\n* Make model tests pass\n\n* Fix most tests\n\n* Fix build\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix checkstyle issues\n\n* Fix more tests\n\n* Fix more tests\n\n* Disable test that fails on CI\n\n* Disable test that fails on CI\n","date":"2019-08-02 15:20:10","modifiedFileCount":"439","status":"M","submitter":"Tobias Diez"}]
