[{"authorTime":"2018-01-03 02:38:01","codes":[{"authorDate":"2018-01-03 02:38:01","commitOrder":1,"curCode":"    protected void insertIntoEntryTable(BibEntry bibEntry) {\n        \r\n        StringBuilder insertIntoEntryQuery = new StringBuilder()\n                .append(\"INSERT INTO \")\n                .append(escape(\"ENTRY\"))\n                .append(\"(\")\n                .append(escape(\"TYPE\"))\n                .append(\") VALUES(?)\");\n\n        \r\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery.toString(),\n                Statement.RETURN_GENERATED_KEYS)) {\n\n            preparedEntryStatement.setString(1, bibEntry.getType());\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                if (generatedKeys.next()) {\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1)); \r\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","date":"2018-01-03 02:38:01","endLine":82,"groupId":"9342","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"insertIntoEntryTable","params":"(BibEntrybibEntry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a6/c3432876a1869c870c9532e97180fc0edf9808.src","preCode":"    protected void insertIntoEntryTable(BibEntry bibEntry) {\n        \r\n        StringBuilder insertIntoEntryQuery = new StringBuilder()\n                .append(\"INSERT INTO \")\n                .append(escape(\"ENTRY\"))\n                .append(\"(\")\n                .append(escape(\"TYPE\"))\n                .append(\") VALUES(?)\");\n\n        \r\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery.toString(),\n                Statement.RETURN_GENERATED_KEYS)) {\n\n            preparedEntryStatement.setString(1, bibEntry.getType());\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                if (generatedKeys.next()) {\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1)); \r\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/shared/PostgreSQLProcessor.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2018-01-03 02:38:01","commitOrder":1,"curCode":"    protected void insertIntoEntryTable(BibEntry bibEntry) {\n        \r\n        StringBuilder insertIntoEntryQuery = new StringBuilder()\n                .append(\"INSERT INTO \")\n                .append(escape(\"ENTRY\"))\n                .append(\"(\")\n                .append(escape(\"TYPE\"))\n                .append(\") VALUES(?)\");\n\n        \r\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery.toString(),\n                new String[] {\"SHARED_ID\"})) {\n\n            preparedEntryStatement.setString(1, bibEntry.getType());\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                if (generatedKeys.next()) {\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1)); \r\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","date":"2018-01-03 02:38:01","endLine":173,"groupId":"12445","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"insertIntoEntryTable","params":"(BibEntrybibEntry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/5e/5ac46aa4924b3f813a5bd6f16482a283ff0184.src","preCode":"    protected void insertIntoEntryTable(BibEntry bibEntry) {\n        \r\n        StringBuilder insertIntoEntryQuery = new StringBuilder()\n                .append(\"INSERT INTO \")\n                .append(escape(\"ENTRY\"))\n                .append(\"(\")\n                .append(escape(\"TYPE\"))\n                .append(\") VALUES(?)\");\n\n        \r\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery.toString(),\n                new String[] {\"SHARED_ID\"})) {\n\n            preparedEntryStatement.setString(1, bibEntry.getType());\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                if (generatedKeys.next()) {\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1)); \r\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/shared/DBMSProcessor.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"}],"commitId":"c7517154ffc54aa1b4b2b0103f5e7b316fff61be","commitMessage":"@@@Refactor shared package into the architecture (#3523)\n\n* Refactor shared package into the architecture\n\n* Add DatabaseConnectionProperties to DatabaseSynchronizer interface\n\n* Encapsulate SQLException in IllegalStateException\n","date":"2018-01-03 02:38:01","modifiedFileCount":"12","status":"B","submitter":"J?rg Lenhard"},{"authorTime":"2019-03-12 05:35:49","codes":[{"authorDate":"2018-01-03 02:38:01","commitOrder":2,"curCode":"    protected void insertIntoEntryTable(BibEntry bibEntry) {\n        \r\n        StringBuilder insertIntoEntryQuery = new StringBuilder()\n                .append(\"INSERT INTO \")\n                .append(escape(\"ENTRY\"))\n                .append(\"(\")\n                .append(escape(\"TYPE\"))\n                .append(\") VALUES(?)\");\n\n        \r\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery.toString(),\n                Statement.RETURN_GENERATED_KEYS)) {\n\n            preparedEntryStatement.setString(1, bibEntry.getType());\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                if (generatedKeys.next()) {\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1)); \r\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","date":"2018-01-03 02:38:01","endLine":82,"groupId":"9342","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"insertIntoEntryTable","params":"(BibEntrybibEntry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a6/c3432876a1869c870c9532e97180fc0edf9808.src","preCode":"    protected void insertIntoEntryTable(BibEntry bibEntry) {\n        \r\n        StringBuilder insertIntoEntryQuery = new StringBuilder()\n                .append(\"INSERT INTO \")\n                .append(escape(\"ENTRY\"))\n                .append(\"(\")\n                .append(escape(\"TYPE\"))\n                .append(\") VALUES(?)\");\n\n        \r\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery.toString(),\n                Statement.RETURN_GENERATED_KEYS)) {\n\n            preparedEntryStatement.setString(1, bibEntry.getType());\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                if (generatedKeys.next()) {\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1)); \r\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/shared/PostgreSQLProcessor.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"N"},{"authorDate":"2019-03-12 05:35:49","commitOrder":2,"curCode":"    protected void insertIntoEntryTable(BibEntry bibEntry) {\n        \r\n        String insertIntoEntryQuery =\n                \"INSERT INTO \" +\n                        escape(\"ENTRY\") +\n                        \"(\" +\n                        escape(\"TYPE\") +\n                        \") VALUES(?)\";\n\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery,\n                new String[] {\"SHARED_ID\"})) {\n\n            preparedEntryStatement.setString(1, bibEntry.getType());\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                if (generatedKeys.next()) {\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1)); \r\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","date":"2019-03-12 05:35:49","endLine":174,"groupId":"12445","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"insertIntoEntryTable","params":"(BibEntrybibEntry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/59/d3deed12398ec56f0ca79b0f99ca8a626ea5ab.src","preCode":"    protected void insertIntoEntryTable(BibEntry bibEntry) {\n        \r\n        StringBuilder insertIntoEntryQuery = new StringBuilder()\n                .append(\"INSERT INTO \")\n                .append(escape(\"ENTRY\"))\n                .append(\"(\")\n                .append(escape(\"TYPE\"))\n                .append(\") VALUES(?)\");\n\n        \r\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery.toString(),\n                new String[] {\"SHARED_ID\"})) {\n\n            preparedEntryStatement.setString(1, bibEntry.getType());\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                if (generatedKeys.next()) {\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1)); \r\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/shared/DBMSProcessor.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"b906e69449d70857d8a46b2139032f47fa2a06b3","commitMessage":"@@@Optimize data fetching (#4520)\n\n* optimize data fetching from database\n\n* delete time measure code\n\n* revert code style\n\n* fix checkstyle\n\n* put columns name instead of *\n\n* revert checkstyle\n\n* change for to stream\n\n* refactor variable name\n\n* create simple test\n\n* fix test\n\n* rename method name\n\n* refactor\n\n* create test\n\n* Fix formatting\n\n* Remove obsolete method by slight refactoring\n\nCo-authored-by: Tobias Diez <tobiasdiez@gmx.de>\n","date":"2019-03-12 05:35:49","modifiedFileCount":"3","status":"M","submitter":"Ali"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":3,"curCode":"    protected void insertIntoEntryTable(BibEntry bibEntry) {\n        \r\n        StringBuilder insertIntoEntryQuery = new StringBuilder()\n                                                                .append(\"INSERT INTO \")\n                                                                .append(escape(\"ENTRY\"))\n                                                                .append(\"(\")\n                                                                .append(escape(\"TYPE\"))\n                                                                .append(\") VALUES(?)\");\n\n        \r\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery.toString(),\n                                                                                    Statement.RETURN_GENERATED_KEYS)) {\n\n            preparedEntryStatement.setString(1, bibEntry.getType().getName());\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                if (generatedKeys.next()) {\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1)); \r\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","date":"2019-08-02 15:20:10","endLine":76,"groupId":"9342","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"insertIntoEntryTable","params":"(BibEntrybibEntry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/26/cb1adfd01b606d72b46089728f7f97e185a41b.src","preCode":"    protected void insertIntoEntryTable(BibEntry bibEntry) {\n        \r\n        StringBuilder insertIntoEntryQuery = new StringBuilder()\n                                                                .append(\"INSERT INTO \")\n                                                                .append(escape(\"ENTRY\"))\n                                                                .append(\"(\")\n                                                                .append(escape(\"TYPE\"))\n                                                                .append(\") VALUES(?)\");\n\n        \r\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery.toString(),\n                                                                                    Statement.RETURN_GENERATED_KEYS)) {\n\n            preparedEntryStatement.setString(1, bibEntry.getType());\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                if (generatedKeys.next()) {\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1)); \r\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/shared/PostgreSQLProcessor.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2019-08-02 15:20:10","commitOrder":3,"curCode":"    protected void insertIntoEntryTable(BibEntry bibEntry) {\n        \r\n        String insertIntoEntryQuery =\n                \"INSERT INTO \" +\n                        escape(\"ENTRY\") +\n                        \"(\" +\n                        escape(\"TYPE\") +\n                        \") VALUES(?)\";\n\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery,\n                new String[] {\"SHARED_ID\"})) {\n\n            preparedEntryStatement.setString(1, bibEntry.getType().getName());\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                if (generatedKeys.next()) {\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1)); \r\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","date":"2019-08-02 15:20:10","endLine":176,"groupId":"4869","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"insertIntoEntryTable","params":"(BibEntrybibEntry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a9/4dc133901534c7cd340fd2c589049c293878f8.src","preCode":"    protected void insertIntoEntryTable(BibEntry bibEntry) {\n        \r\n        String insertIntoEntryQuery =\n                \"INSERT INTO \" +\n                        escape(\"ENTRY\") +\n                        \"(\" +\n                        escape(\"TYPE\") +\n                        \") VALUES(?)\";\n\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery,\n                new String[] {\"SHARED_ID\"})) {\n\n            preparedEntryStatement.setString(1, bibEntry.getType());\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                if (generatedKeys.next()) {\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1)); \r\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/shared/DBMSProcessor.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"4b39b78e4afcd6c36b385f5c46f1d9a4eac2e29b","commitMessage":"@@@Move to extended enums for fields and entry types (#5148)\n\n* Introduce interface for fields\n\n* Continue using fields interface instead of strings\n\n* Introduce OrFields class\n\n* Move FieldProperty\n\n* Convert entry types to extended enum\n\n* Start fixing build\n\n* Fix build\n\n* Start fixing tests\n\n* Everything compiles again\n\n* Make model tests pass\n\n* Fix most tests\n\n* Fix build\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix checkstyle issues\n\n* Fix more tests\n\n* Fix more tests\n\n* Disable test that fails on CI\n\n* Disable test that fails on CI\n","date":"2019-08-02 15:20:10","modifiedFileCount":"439","status":"M","submitter":"Tobias Diez"},{"authorTime":"2020-02-20 07:57:05","codes":[{"authorDate":"2020-02-20 07:57:05","commitOrder":4,"curCode":"    protected void insertIntoEntryTable(List<BibEntry> bibEntries) {\n        StringBuilder insertIntoEntryQuery = new StringBuilder()\n                .append(\"INSERT INTO \")\n                .append(escape(\"ENTRY\"))\n                .append(\"(\")\n                .append(escape(\"TYPE\"))\n                .append(\") VALUES(?)\");\n        \r\n        for (int i = 0; i < bibEntries.size() - 1; i++) {\n            insertIntoEntryQuery.append(\", (?)\");\n        }\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery.toString(),\n                Statement.RETURN_GENERATED_KEYS)) {\n            for (int i = 0; i < bibEntries.size(); i++) {\n                preparedEntryStatement.setString(i + 1, bibEntries.get(i).getType().getName());\n            }\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                \r\n                \r\n                for (BibEntry bibEntry : bibEntries) {\n                    generatedKeys.next();\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1));\n                }\n                if (generatedKeys.next()) {\n                    LOGGER.error(\"Error: Some shared IDs left unassigned\");\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","date":"2020-02-20 07:57:05","endLine":85,"groupId":"628","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"insertIntoEntryTable","params":"(List<BibEntry>bibEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ad/53d54fd3b98da318bfbea436b31afe8c430823.src","preCode":"    protected void insertIntoEntryTable(BibEntry bibEntry) {\n        \r\n        StringBuilder insertIntoEntryQuery = new StringBuilder()\n                                                                .append(\"INSERT INTO \")\n                                                                .append(escape(\"ENTRY\"))\n                                                                .append(\"(\")\n                                                                .append(escape(\"TYPE\"))\n                                                                .append(\") VALUES(?)\");\n\n        \r\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery.toString(),\n                                                                                    Statement.RETURN_GENERATED_KEYS)) {\n\n            preparedEntryStatement.setString(1, bibEntry.getType().getName());\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                if (generatedKeys.next()) {\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1)); \r\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/shared/PostgreSQLProcessor.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-02-20 07:57:05","commitOrder":4,"curCode":"    protected void insertIntoEntryTable(List<BibEntry> bibEntries) {\n        StringBuilder insertIntoEntryQuery = new StringBuilder()\n                .append(\"INSERT INTO \")\n                .append(escape(\"ENTRY\"))\n                .append(\"(\")\n                .append(escape(\"TYPE\"))\n                .append(\") VALUES(?)\");\n        \r\n        for (int i = 0; i < bibEntries.size() - 1; i++) {\n            insertIntoEntryQuery.append(\", (?)\");\n        }\n\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery.toString(),\n                new String[]{\"SHARED_ID\"})) {\n            for (int i = 0; i < bibEntries.size(); i++) {\n                preparedEntryStatement.setString(i + 1, bibEntries.get(i).getType().getName());\n            }\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                \r\n                \r\n                for (BibEntry bibEntry : bibEntries) {\n                    generatedKeys.next();\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1));\n                }\n                if (generatedKeys.next()) {\n                    LOGGER.error(\"Error: Some shared IDs left unassigned\");\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","date":"2020-02-20 07:57:05","endLine":196,"groupId":"12340","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"insertIntoEntryTable","params":"(List<BibEntry>bibEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/9e/f40561391d822fe899b426225f695cd5cba466.src","preCode":"    protected void insertIntoEntryTable(BibEntry bibEntry) {\n        \r\n        String insertIntoEntryQuery =\n                \"INSERT INTO \" +\n                        escape(\"ENTRY\") +\n                        \"(\" +\n                        escape(\"TYPE\") +\n                        \") VALUES(?)\";\n\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery,\n                new String[]{\"SHARED_ID\"})) {\n\n            preparedEntryStatement.setString(1, bibEntry.getType().getName());\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                if (generatedKeys.next()) {\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1)); \r\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/shared/DBMSProcessor.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"93196eeb819024079e94dd1eea3b22af993723cf","commitMessage":"@@@[WIP] Initial work on DBMSProcessor batch entry insertion into ENTRY table (#5814)\n\n* Initial work on DBMSProcessor entry insertion into ENTRY table\n\n* Change syntax for Oracle multi-row insert SQL statement\n\n* Run tests also when source files changed\n\n* Add to comment about Oracle\n\n* Assume ResultSet is in order for setting shared IDs\n\n* Add insertEntry for DBMSProcessor tests and fix PostgresSQLProcessor\n\n* Fix SQL typo\n\n* Separate table drops in Oracle tests\n\n* Remove CI tests that were added in branch\n\n* Work on unit test for DBMSProcessor insertEntries\n\n* Fix bug in DBMSProcessorTest and simplify DBMSProcessor.FilterForBibEntryExistence\n\n* Remove Oracle connection bug with wrong port\n\n* Add Oracle insertIntoEntryTable\n\n* Oracle connection fix - taken from fix_fields_sql branch\n\n* Fix typo bug\n\n* Clean up code\n\n* Remove commented blocks\n\n* Remove comment about needing a test that probably isn't necessary\n\n* Manually merge fix_fields_sql OracleProcessor (just add method)\n\n* Emphasize todo\n\n* setSharedID into OracleProcessor entry table method\n\n* Add shared id to preparedEntryStatement\n\n* Make Oracle insertIntoEntryTable iterative - pasted from master - not yet tested\n\n* Add fields to fields table in parallel\n\n* Reset test trace length\n\n* Fix checkStyle\n\n* Revert port setting\n\nCo-authored-by: Tobias Diez <tobiasdiez@gmx.de>\n","date":"2020-02-20 07:57:05","modifiedFileCount":"6","status":"M","submitter":"Abraham Polk"},{"authorTime":"2020-12-15 03:17:24","codes":[{"authorDate":"2020-02-20 07:57:05","commitOrder":5,"curCode":"    protected void insertIntoEntryTable(List<BibEntry> bibEntries) {\n        StringBuilder insertIntoEntryQuery = new StringBuilder()\n                .append(\"INSERT INTO \")\n                .append(escape(\"ENTRY\"))\n                .append(\"(\")\n                .append(escape(\"TYPE\"))\n                .append(\") VALUES(?)\");\n        \r\n        for (int i = 0; i < bibEntries.size() - 1; i++) {\n            insertIntoEntryQuery.append(\", (?)\");\n        }\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery.toString(),\n                Statement.RETURN_GENERATED_KEYS)) {\n            for (int i = 0; i < bibEntries.size(); i++) {\n                preparedEntryStatement.setString(i + 1, bibEntries.get(i).getType().getName());\n            }\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                \r\n                \r\n                for (BibEntry bibEntry : bibEntries) {\n                    generatedKeys.next();\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1));\n                }\n                if (generatedKeys.next()) {\n                    LOGGER.error(\"Error: Some shared IDs left unassigned\");\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","date":"2020-02-20 07:57:05","endLine":85,"groupId":"101042","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"insertIntoEntryTable","params":"(List<BibEntry>bibEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ad/53d54fd3b98da318bfbea436b31afe8c430823.src","preCode":"    protected void insertIntoEntryTable(List<BibEntry> bibEntries) {\n        StringBuilder insertIntoEntryQuery = new StringBuilder()\n                .append(\"INSERT INTO \")\n                .append(escape(\"ENTRY\"))\n                .append(\"(\")\n                .append(escape(\"TYPE\"))\n                .append(\") VALUES(?)\");\n        \r\n        for (int i = 0; i < bibEntries.size() - 1; i++) {\n            insertIntoEntryQuery.append(\", (?)\");\n        }\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery.toString(),\n                Statement.RETURN_GENERATED_KEYS)) {\n            for (int i = 0; i < bibEntries.size(); i++) {\n                preparedEntryStatement.setString(i + 1, bibEntries.get(i).getType().getName());\n            }\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                \r\n                \r\n                for (BibEntry bibEntry : bibEntries) {\n                    generatedKeys.next();\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1));\n                }\n                if (generatedKeys.next()) {\n                    LOGGER.error(\"Error: Some shared IDs left unassigned\");\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/shared/PostgreSQLProcessor.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2020-12-15 03:17:24","commitOrder":5,"curCode":"    protected void insertIntoEntryTable(List<BibEntry> bibEntries) {\n        StringBuilder insertIntoEntryQuery = new StringBuilder()\n                .append(\"INSERT INTO \")\n                .append(escape(\"ENTRY\"))\n                .append(\"(\")\n                .append(escape(\"TYPE\"))\n                .append(\") VALUES(?)\");\n        \r\n        for (int i = 0; i < (bibEntries.size() - 1); i++) {\n            insertIntoEntryQuery.append(\", (?)\");\n        }\n\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery.toString(),\n                new String[] {\"SHARED_ID\"})) {\n            for (int i = 0; i < bibEntries.size(); i++) {\n                preparedEntryStatement.setString(i + 1, bibEntries.get(i).getType().getName());\n            }\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                \r\n                \r\n                for (BibEntry bibEntry : bibEntries) {\n                    generatedKeys.next();\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1));\n                }\n                if (generatedKeys.next()) {\n                    LOGGER.error(\"Error: Some shared IDs left unassigned\");\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","date":"2020-12-15 03:17:24","endLine":193,"groupId":"101042","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"insertIntoEntryTable","params":"(List<BibEntry>bibEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ec/364110a91390e15fef565b8ac27ba233472ecf.src","preCode":"    protected void insertIntoEntryTable(List<BibEntry> bibEntries) {\n        StringBuilder insertIntoEntryQuery = new StringBuilder()\n                .append(\"INSERT INTO \")\n                .append(escape(\"ENTRY\"))\n                .append(\"(\")\n                .append(escape(\"TYPE\"))\n                .append(\") VALUES(?)\");\n        \r\n        for (int i = 0; i < bibEntries.size() - 1; i++) {\n            insertIntoEntryQuery.append(\", (?)\");\n        }\n\n        try (PreparedStatement preparedEntryStatement = connection.prepareStatement(insertIntoEntryQuery.toString(),\n                new String[] {\"SHARED_ID\"})) {\n            for (int i = 0; i < bibEntries.size(); i++) {\n                preparedEntryStatement.setString(i + 1, bibEntries.get(i).getType().getName());\n            }\n            preparedEntryStatement.executeUpdate();\n\n            try (ResultSet generatedKeys = preparedEntryStatement.getGeneratedKeys()) {\n                \r\n                \r\n                for (BibEntry bibEntry : bibEntries) {\n                    generatedKeys.next();\n                    bibEntry.getSharedBibEntryData().setSharedID(generatedKeys.getInt(1));\n                }\n                if (generatedKeys.next()) {\n                    LOGGER.error(\"Error: Some shared IDs left unassigned\");\n                }\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"SQL Error: \", e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/shared/DBMSProcessor.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"f356f9e54a2d621163f5ee5ef56ed657b0fb99b4","commitMessage":"@@@Fix newly added entry not synced to db (#7178)\n\n* Fix newly added entry not synced to db\n\n\nNewly added entries have empty fields; don't update the field table to prevent SQL Exception\nFix shared entry not found by id\nuse left outer join for this\n\n* fix checkstyle\n\n* fix wording\n\n* add tests for fix\n\n* adjust test","date":"2020-12-15 03:17:24","modifiedFileCount":"3","status":"M","submitter":"Christoph"}]
