[{"authorTime":"2017-06-16 00:21:19","codes":[{"authorDate":"2017-05-01 18:56:11","commitOrder":2,"curCode":"    public void testFindFiles() {\n        \r\n        BibEntry localEntry = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        localEntry.setCiteKey(\"pdfInDatabase\");\n        localEntry.setField(\"year\", \"2001\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(filesDirectory));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/pdfInDatabase.pdf\")),\n                result);\n    }\n","date":"2017-05-01 18:56:11","endLine":63,"groupId":"6558","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindFiles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/4e/e346059e0796eb6a4f32a905c21d00327b2471.src","preCode":"    public void testFindFiles() {\n        \r\n        BibEntry localEntry = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        localEntry.setCiteKey(\"pdfInDatabase\");\n        localEntry.setField(\"year\", \"2001\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(filesDirectory));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/pdfInDatabase.pdf\")),\n                result);\n    }\n","realPath":"src/test/java/org/jabref/logic/util/io/RegExpBasedFileFinderTests.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"NB"},{"authorDate":"2017-06-16 00:21:19","commitOrder":2,"curCode":"    public void testFindFileInSubdirectory() {\n        \r\n        BibEntry localEntry = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        localEntry.setCiteKey(\"pdfInSubdirectory\");\n        localEntry.setField(\"year\", \"2017\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(filesDirectory));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/directory/subdirectory/pdfInSubdirectory.pdf\")),\n                result);\n    }\n","date":"2017-06-16 00:21:19","endLine":84,"groupId":"6558","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindFileInSubdirectory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/21/7a5b2fc66fcfb7b026afe7c63330f687e1fe70.src","preCode":"    public void testFindFileInSubdirectory() {\n        \r\n        BibEntry localEntry = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        localEntry.setCiteKey(\"pdfInSubdirectory\");\n        localEntry.setField(\"year\", \"2017\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(filesDirectory));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/directory/subdirectory/pdfInSubdirectory.pdf\")),\n                result);\n    }\n","realPath":"src/test/java/org/jabref/logic/util/io/RegExpBasedFileFinderTests.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"}],"commitId":"0c006c1e1bf290cc758ac066df3bc12e2136f535","commitMessage":"@@@[WIP] Avoid duplicate results for recursive search in RegExpBasedFileFinder (#2914)\n\n* Avoid duplicate results for recursive search\n\n* Add tests for correct recursive and non-recursive search\n\n* Added recursive search fix to CHANGELOG\n","date":"2017-06-16 00:21:19","modifiedFileCount":"2","status":"M","submitter":"Thomas Ilsche"},{"authorTime":"2018-01-10 00:30:00","codes":[{"authorDate":"2018-01-10 00:30:00","commitOrder":3,"curCode":"    public void testFindFiles() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        localEntry.setCiteKey(\"pdfInDatabase\");\n        localEntry.setField(\"year\", \"2001\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(filesDirectory));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/pdfInDatabase.pdf\")),\n                result);\n    }\n","date":"2018-01-10 00:30:00","endLine":64,"groupId":"6558","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindFiles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/c6/27eb0f4386a4756d782d997e0d1cad2eb51a54.src","preCode":"    public void testFindFiles() {\n        \r\n        BibEntry localEntry = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        localEntry.setCiteKey(\"pdfInDatabase\");\n        localEntry.setField(\"year\", \"2001\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(filesDirectory));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/pdfInDatabase.pdf\")),\n                result);\n    }\n","realPath":"src/test/java/org/jabref/logic/util/io/RegExpBasedFileFinderTests.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2018-01-10 00:30:00","commitOrder":3,"curCode":"    public void testFindFileInSubdirectory() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        localEntry.setCiteKey(\"pdfInSubdirectory\");\n        localEntry.setField(\"year\", \"2017\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(filesDirectory));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/directory/subdirectory/pdfInSubdirectory.pdf\")),\n                result);\n    }\n","date":"2018-01-10 00:30:00","endLine":122,"groupId":"6558","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindFileInSubdirectory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/c6/27eb0f4386a4756d782d997e0d1cad2eb51a54.src","preCode":"    public void testFindFileInSubdirectory() {\n        \r\n        BibEntry localEntry = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        localEntry.setCiteKey(\"pdfInSubdirectory\");\n        localEntry.setField(\"year\", \"2017\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(filesDirectory));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/directory/subdirectory/pdfInSubdirectory.pdf\")),\n                result);\n    }\n","realPath":"src/test/java/org/jabref/logic/util/io/RegExpBasedFileFinderTests.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"2d10f83170e51dae21f50e1ca121f50b981350cf","commitMessage":"@@@Catch and propagate UncheckedIOException in FileFinder (#3603)\n\n* Catch UncheckedIOException in FileFinder\n\n* Catch PatternSyntaxException and propagate as IOException\n\n* refactor code to get rid of exceptions\n\n* Catch unchecked IOException again\n","date":"2018-01-10 00:30:00","modifiedFileCount":"11","status":"M","submitter":"Tobias Diez"},{"authorTime":"2018-10-17 17:05:51","codes":[{"authorDate":"2018-10-17 17:05:51","commitOrder":4,"curCode":"    public void testFindFiles() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        localEntry.setCiteKey(\"pdfInDatabase\");\n        localEntry.setField(\"year\", \"2001\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/pdfInDatabase.pdf\")),\n                result);\n    }\n","date":"2018-10-17 17:05:51","endLine":64,"groupId":"6558","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindFiles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/d0/24017ff34e154406b9c3088ce4e0a0c39fcee7.src","preCode":"    public void testFindFiles() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        localEntry.setCiteKey(\"pdfInDatabase\");\n        localEntry.setField(\"year\", \"2001\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(filesDirectory));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/pdfInDatabase.pdf\")),\n                result);\n    }\n","realPath":"src/test/java/org/jabref/logic/util/io/RegExpBasedFileFinderTests.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2018-10-17 17:05:51","commitOrder":4,"curCode":"    public void testFindFileInSubdirectory() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        localEntry.setCiteKey(\"pdfInSubdirectory\");\n        localEntry.setField(\"year\", \"2017\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/directory/subdirectory/pdfInSubdirectory.pdf\")),\n                result);\n    }\n","date":"2018-10-17 17:05:51","endLine":122,"groupId":"6558","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindFileInSubdirectory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/d0/24017ff34e154406b9c3088ce4e0a0c39fcee7.src","preCode":"    public void testFindFileInSubdirectory() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        localEntry.setCiteKey(\"pdfInSubdirectory\");\n        localEntry.setField(\"year\", \"2017\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(filesDirectory));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/directory/subdirectory/pdfInSubdirectory.pdf\")),\n                result);\n    }\n","realPath":"src/test/java/org/jabref/logic/util/io/RegExpBasedFileFinderTests.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"e7780ed8038fd2a9193573eca03750777f9f7bec","commitMessage":"@@@Enable checkstyle for tests and fix style issues (#4378)\n\n* Enable checkstyle for tests\n\n* Correct imports\n\n* Reformat code\n\n* Reformat code\n","date":"2018-10-17 17:05:51","modifiedFileCount":"249","status":"M","submitter":"Tobias Diez"},{"authorTime":"2018-12-29 06:39:28","codes":[{"authorDate":"2018-12-29 06:39:28","commitOrder":5,"curCode":"    public void testFindFiles() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(BibtexEntryTypes.ARTICLE);\n        localEntry.setCiteKey(\"pdfInDatabase\");\n        localEntry.setField(\"year\", \"2001\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/pdfInDatabase.pdf\")),\n                result);\n    }\n","date":"2018-12-29 06:39:28","endLine":64,"groupId":"6558","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindFiles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/4e/5edbc03227fdbdca65fddf0befc64d61165861.src","preCode":"    public void testFindFiles() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        localEntry.setCiteKey(\"pdfInDatabase\");\n        localEntry.setField(\"year\", \"2001\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/pdfInDatabase.pdf\")),\n                result);\n    }\n","realPath":"src/test/java/org/jabref/logic/util/io/RegExpBasedFileFinderTests.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2018-12-29 06:39:28","commitOrder":5,"curCode":"    public void testFindFileInSubdirectory() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(BibtexEntryTypes.ARTICLE);\n        localEntry.setCiteKey(\"pdfInSubdirectory\");\n        localEntry.setField(\"year\", \"2017\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/directory/subdirectory/pdfInSubdirectory.pdf\")),\n                result);\n    }\n","date":"2018-12-29 06:39:28","endLine":122,"groupId":"6558","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindFileInSubdirectory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/4e/5edbc03227fdbdca65fddf0befc64d61165861.src","preCode":"    public void testFindFileInSubdirectory() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(BibtexEntryTypes.ARTICLE.getName());\n        localEntry.setCiteKey(\"pdfInSubdirectory\");\n        localEntry.setField(\"year\", \"2017\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/directory/subdirectory/pdfInSubdirectory.pdf\")),\n                result);\n    }\n","realPath":"src/test/java/org/jabref/logic/util/io/RegExpBasedFileFinderTests.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"cd1e795e91a0f36ea33386c47f06e31e7f812481","commitMessage":"@@@Refactor BibEntry deprecated method (#4554)\n\n* Refactor BibEntry deprecated method\n\n* Fixed error\n\n* More on checkstyle fixing\n\n* Fixed checkstyle issues\n\n* Added custom entrytype for types not registered in the enumerator.\n\n* Added getTypeOrDefault method refactor code to use it and fix NPE problem\n\n* Fixing checkstyle rules\n\n* More on checkstyle\n\n* More on getType getTypeOrDefault replacement\n\n* Revert Article EntryType into Electronic\n\n* Added break line between different packages\n\n* Refactor BibtextEntryTypes.getTypeOrDefault method\n\n* Removed unused import\n\n* Removed extra new line.  checkstyle error fixing\n","date":"2018-12-29 06:39:28","modifiedFileCount":"36","status":"M","submitter":"Bitor Tonixa Biriato Balen?a"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":6,"curCode":"    public void testFindFiles() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(StandardEntryType.Article);\n        localEntry.setCiteKey(\"pdfInDatabase\");\n        localEntry.setField(StandardField.YEAR, \"2001\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/pdfInDatabase.pdf\")),\n                result);\n    }\n","date":"2019-08-02 15:20:10","endLine":65,"groupId":"6558","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindFiles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ec/10590f8b7036106dc1dbee8e6484e1eab52e63.src","preCode":"    public void testFindFiles() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(BibtexEntryTypes.ARTICLE);\n        localEntry.setCiteKey(\"pdfInDatabase\");\n        localEntry.setField(\"year\", \"2001\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/pdfInDatabase.pdf\")),\n                result);\n    }\n","realPath":"src/test/java/org/jabref/logic/util/io/RegExpBasedFileFinderTests.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2019-08-02 15:20:10","commitOrder":6,"curCode":"    public void testFindFileInSubdirectory() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(StandardEntryType.Article);\n        localEntry.setCiteKey(\"pdfInSubdirectory\");\n        localEntry.setField(StandardField.YEAR, \"2017\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/directory/subdirectory/pdfInSubdirectory.pdf\")),\n                result);\n    }\n","date":"2019-08-02 15:20:10","endLine":123,"groupId":"6558","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindFileInSubdirectory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ec/10590f8b7036106dc1dbee8e6484e1eab52e63.src","preCode":"    public void testFindFileInSubdirectory() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(BibtexEntryTypes.ARTICLE);\n        localEntry.setCiteKey(\"pdfInSubdirectory\");\n        localEntry.setField(\"year\", \"2017\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/directory/subdirectory/pdfInSubdirectory.pdf\")),\n                result);\n    }\n","realPath":"src/test/java/org/jabref/logic/util/io/RegExpBasedFileFinderTests.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"4b39b78e4afcd6c36b385f5c46f1d9a4eac2e29b","commitMessage":"@@@Move to extended enums for fields and entry types (#5148)\n\n* Introduce interface for fields\n\n* Continue using fields interface instead of strings\n\n* Introduce OrFields class\n\n* Move FieldProperty\n\n* Convert entry types to extended enum\n\n* Start fixing build\n\n* Fix build\n\n* Start fixing tests\n\n* Everything compiles again\n\n* Make model tests pass\n\n* Fix most tests\n\n* Fix build\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix checkstyle issues\n\n* Fix more tests\n\n* Fix more tests\n\n* Disable test that fails on CI\n\n* Disable test that fails on CI\n","date":"2019-08-02 15:20:10","modifiedFileCount":"439","status":"M","submitter":"Tobias Diez"},{"authorTime":"2020-04-30 17:10:13","codes":[{"authorDate":"2020-04-30 17:10:13","commitOrder":7,"curCode":"    public void testFindFiles() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(StandardEntryType.Article);\n        localEntry.setCiteKey(\"pdfInDatabase\");\n        localEntry.setField(StandardField.YEAR, \"2001\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Path.of(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Path.of(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/pdfInDatabase.pdf\")),\n                result);\n    }\n","date":"2020-04-30 17:10:13","endLine":64,"groupId":"10260","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindFiles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/23/f61a3d1a0389aa19bc15e4e5e98d78e6e31d99.src","preCode":"    public void testFindFiles() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(StandardEntryType.Article);\n        localEntry.setCiteKey(\"pdfInDatabase\");\n        localEntry.setField(StandardField.YEAR, \"2001\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/pdfInDatabase.pdf\")),\n                result);\n    }\n","realPath":"src/test/java/org/jabref/logic/util/io/RegExpBasedFileFinderTests.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2020-04-30 17:10:13","commitOrder":7,"curCode":"    public void testFindFileInSubdirectory() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(StandardEntryType.Article);\n        localEntry.setCiteKey(\"pdfInSubdirectory\");\n        localEntry.setField(StandardField.YEAR, \"2017\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Path.of(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Path.of(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/directory/subdirectory/pdfInSubdirectory.pdf\")),\n                result);\n    }\n","date":"2020-04-30 17:10:13","endLine":122,"groupId":"10260","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindFileInSubdirectory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/23/f61a3d1a0389aa19bc15e4e5e98d78e6e31d99.src","preCode":"    public void testFindFileInSubdirectory() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(StandardEntryType.Article);\n        localEntry.setCiteKey(\"pdfInSubdirectory\");\n        localEntry.setField(StandardField.YEAR, \"2017\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Paths.get(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Paths.get(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/directory/subdirectory/pdfInSubdirectory.pdf\")),\n                result);\n    }\n","realPath":"src/test/java/org/jabref/logic/util/io/RegExpBasedFileFinderTests.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"862078a4db316cfd15bd77be68d3d2b010feab3b","commitMessage":"@@@Fixes #6357: File directory (#6377)\n\n* Fixes #6357: File directory\n\nBug was introduced in https://github.com/JabRef/jabref/commit/1b03f039aa4abf0812a3a8ae0ba248c08fdb39a3.\n\n* Fix tests\n\n* Replace Paths.get\n\n* Fix code style","date":"2020-04-30 17:10:13","modifiedFileCount":"110","status":"M","submitter":"Tobias Diez"},{"authorTime":"2020-09-08 21:34:34","codes":[{"authorDate":"2020-09-08 21:34:34","commitOrder":8,"curCode":"    void testFindFiles() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(StandardEntryType.Article);\n        localEntry.setCitationKey(\"pdfInDatabase\");\n        localEntry.setField(StandardField.YEAR, \"2001\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Path.of(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[citationkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Path.of(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/pdfInDatabase.pdf\")),\n                result);\n    }\n","date":"2020-09-08 21:34:34","endLine":64,"groupId":"10260","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindFiles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a7/b9cb3a6b71c06bf69abc715b83c4fab96b53de.src","preCode":"    public void testFindFiles() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(StandardEntryType.Article);\n        localEntry.setCiteKey(\"pdfInDatabase\");\n        localEntry.setField(StandardField.YEAR, \"2001\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Path.of(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Path.of(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/pdfInDatabase.pdf\")),\n                result);\n    }\n","realPath":"src/test/java/org/jabref/logic/util/io/RegExpBasedFileFinderTests.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2020-09-08 21:34:34","commitOrder":8,"curCode":"    void testFindFileInSubdirectory() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(StandardEntryType.Article);\n        localEntry.setCitationKey(\"pdfInSubdirectory\");\n        localEntry.setField(StandardField.YEAR, \"2017\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Path.of(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[citationkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Path.of(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/directory/subdirectory/pdfInSubdirectory.pdf\")),\n                result);\n    }\n","date":"2020-09-08 21:34:34","endLine":122,"groupId":"10260","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindFileInSubdirectory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a7/b9cb3a6b71c06bf69abc715b83c4fab96b53de.src","preCode":"    public void testFindFileInSubdirectory() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(StandardEntryType.Article);\n        localEntry.setCiteKey(\"pdfInSubdirectory\");\n        localEntry.setField(StandardField.YEAR, \"2017\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Path.of(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[bibtexkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Path.of(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/directory/subdirectory/pdfInSubdirectory.pdf\")),\n                result);\n    }\n","realPath":"src/test/java/org/jabref/logic/util/io/RegExpBasedFileFinderTests.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"6dec1747d8a1c89f6c62fc1d1939d88411f17eba","commitMessage":"@@@Complete rebranding of `bibtexkey` as `citationkey` (#6875)\n\n","date":"2020-09-08 21:34:34","modifiedFileCount":"127","status":"M","submitter":"Tobias Diez"},{"authorTime":"2021-01-25 03:53:44","codes":[{"authorDate":"2021-01-25 03:53:44","commitOrder":9,"curCode":"    void testFindFiles() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(StandardEntryType.Article).withCitationKey(\"pdfInDatabase\");\n\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[citationkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, List.of(directory), PDF_EXTENSION);\n        List<Path> expected = List.of(directory.resolve(\"pdfInDatabase.pdf\"));\n\n        \r\n        assertEquals(expected, result);\n    }\n","date":"2021-01-25 03:53:44","endLine":71,"groupId":"10476","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"testFindFiles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/0c/776e52fdd1c9e2a1bc99ec42479e75ae07442a.src","preCode":"    void testFindFiles() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(StandardEntryType.Article);\n        localEntry.setCitationKey(\"pdfInDatabase\");\n        localEntry.setField(StandardField.YEAR, \"2001\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Path.of(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[citationkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Path.of(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/pdfInDatabase.pdf\")),\n                result);\n    }\n","realPath":"src/test/java/org/jabref/logic/util/io/RegExpBasedFileFinderTests.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2021-01-25 03:53:44","commitOrder":9,"curCode":"    void testFindFileInSubdirectory() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(StandardEntryType.Article);\n        localEntry.setCitationKey(\"pdfInSubdirectory\");\n        localEntry.setField(StandardField.YEAR, \"2017\");\n\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[citationkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, List.of(directory), PDF_EXTENSION);\n        List<Path> expected = List.of(directory.resolve(\"directory/subdirectory/pdfInSubdirectory.pdf\"));\n\n        \r\n        assertEquals(expected, result);\n    }\n","date":"2021-01-25 03:53:44","endLine":159,"groupId":"10476","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"testFindFileInSubdirectory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/0c/776e52fdd1c9e2a1bc99ec42479e75ae07442a.src","preCode":"    void testFindFileInSubdirectory() throws Exception {\n        \r\n        BibEntry localEntry = new BibEntry(StandardEntryType.Article);\n        localEntry.setCitationKey(\"pdfInSubdirectory\");\n        localEntry.setField(StandardField.YEAR, \"2017\");\n\n        List<String> extensions = Collections.singletonList(\"pdf\");\n\n        List<Path> dirs = Collections.singletonList(Path.of(FILES_DIRECTORY));\n        RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/[citationkey].*\\\\\\\\.[extension]\", ',');\n\n        \r\n        List<Path> result = fileFinder.findAssociatedFiles(localEntry, dirs, extensions);\n\n        \r\n        assertEquals(Collections.singletonList(Path.of(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/directory/subdirectory/pdfInSubdirectory.pdf\")),\n                result);\n    }\n","realPath":"src/test/java/org/jabref/logic/util/io/RegExpBasedFileFinderTests.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"}],"commitId":"7672b2de95aea95b92d47cde3215ffb9f96aadcb","commitMessage":"@@@Fix expansion of bracketed expressions in RegExpBasedFileFinder (#7338)\n\n","date":"2021-01-25 03:53:44","modifiedFileCount":"4","status":"M","submitter":"Jonatan Asketorp"}]
