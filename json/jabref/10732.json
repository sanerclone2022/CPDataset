[{"authorTime":"2018-02-20 21:59:12","codes":[{"authorDate":"2018-02-20 21:59:12","commitOrder":1,"curCode":"    public void testReadArticleDublinCoreReadXmp() throws IOException, URISyntaxException, ParseException {\n        List<BibEntry> entries = XmpUtilReader.readXmp(Paths.get(XmpUtilShared.class.getResource(\"article_dublinCore.pdf\").toURI()), xmpPreferences);\n        BibEntry entry = entries.get(0);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"article_dublinCore.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n\n        Assert.assertEquals(entryFromBibFile.get(), entry);\n    }\n","date":"2018-02-20 21:59:12","endLine":87,"groupId":"11693","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadArticleDublinCoreReadXmp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/62/9d698246645e67a8e714201d35bb2c59e99493.src","preCode":"    public void testReadArticleDublinCoreReadXmp() throws IOException, URISyntaxException, ParseException {\n        List<BibEntry> entries = XmpUtilReader.readXmp(Paths.get(XmpUtilShared.class.getResource(\"article_dublinCore.pdf\").toURI()), xmpPreferences);\n        BibEntry entry = entries.get(0);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"article_dublinCore.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n\n        Assert.assertEquals(entryFromBibFile.get(), entry);\n    }\n","realPath":"src/test/java/org/jabref/logic/xmp/XmpUtilReaderTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"},{"authorDate":"2018-02-20 21:59:12","commitOrder":1,"curCode":"    public void testReadPDMetadata() throws IOException, URISyntaxException, ParseException {\n        List<BibEntry> entries = XmpUtilReader.readXmp(Paths.get(XmpUtilShared.class.getResource(\"PD_metadata.pdf\").toURI()), xmpPreferences);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"PD_metadata.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n\n        Assert.assertEquals(entryFromBibFile.get(), entries.get(0));\n    }\n","date":"2018-02-20 21:59:12","endLine":109,"groupId":"1707","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReadPDMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/62/9d698246645e67a8e714201d35bb2c59e99493.src","preCode":"    public void testReadPDMetadata() throws IOException, URISyntaxException, ParseException {\n        List<BibEntry> entries = XmpUtilReader.readXmp(Paths.get(XmpUtilShared.class.getResource(\"PD_metadata.pdf\").toURI()), xmpPreferences);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"PD_metadata.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n\n        Assert.assertEquals(entryFromBibFile.get(), entries.get(0));\n    }\n","realPath":"src/test/java/org/jabref/logic/xmp/XmpUtilReaderTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"}],"commitId":"ea8ccb39c73d4f977592eadc5bd3a64c0fafdcab","commitMessage":"@@@Improve Dublin Core (#3710)\n\nThis fixes #938\n\n- Reading and writing multiple dublinCore entries works: XMPUtilWriter supports mutliple metadata entries in dublinCore and a single entry in the PDDocumentInformation. If you want to test the reading of multiple entries.  the PDF file JabRef_multipleMetaEntries.pdf contains three metadata entries in DublinCore for testing locally.\n- Removed to much code when refactoring the XMPUtil. Non XMP metadata are also relevent.  when retrieving org.apache.pdfbox.pdmodel.PDDocumentInformation\n- Update pdfbox and fontbox from 1.8.13 to 2.0.8 and migritate from jempbox to xmpbox.  See pull https://github.com/JabRef/jabref/pull/1096.\n- Refactor extraction from DublinCoreSchema\n- The tests cover the most important use cases.  which include reading and writing metadata from pdf files. Both formats.  DublinCore and PDMetadata (which are no XMP metadata) are tested.\n- Separated XMPUtils in a reader and a writer utitlity class.\n- add meaningful names in DublinCoreExtractor and use StringUtils.isNullOrEmpty\n- Log exception in XMPUtilShared","date":"2018-02-20 21:59:12","modifiedFileCount":"20","status":"B","submitter":"Johannes Manner"},{"authorTime":"2018-08-16 15:17:32","codes":[{"authorDate":"2018-08-16 15:17:32","commitOrder":2,"curCode":"    void testReadArticleDublinCoreReadXmp() throws IOException, URISyntaxException, ParseException {\n        List<BibEntry> entries = XmpUtilReader.readXmp(Paths.get(XmpUtilShared.class.getResource(\"article_dublinCore.pdf\").toURI()), xmpPreferences);\n        BibEntry entry = entries.get(0);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"article_dublinCore.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n\n        assertEquals(entryFromBibFile.get(), entry);\n    }\n","date":"2018-08-16 15:17:32","endLine":84,"groupId":"11693","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadArticleDublinCoreReadXmp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ea/5dfe702c1ed8aa5efe6efb2797b8ad648fcb44.src","preCode":"    public void testReadArticleDublinCoreReadXmp() throws IOException, URISyntaxException, ParseException {\n        List<BibEntry> entries = XmpUtilReader.readXmp(Paths.get(XmpUtilShared.class.getResource(\"article_dublinCore.pdf\").toURI()), xmpPreferences);\n        BibEntry entry = entries.get(0);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"article_dublinCore.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n\n        Assert.assertEquals(entryFromBibFile.get(), entry);\n    }\n","realPath":"src/test/java/org/jabref/logic/xmp/XmpUtilReaderTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2018-08-16 15:17:32","commitOrder":2,"curCode":"    void testReadPDMetadata() throws IOException, URISyntaxException, ParseException {\n        List<BibEntry> entries = XmpUtilReader.readXmp(Paths.get(XmpUtilShared.class.getResource(\"PD_metadata.pdf\").toURI()), xmpPreferences);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"PD_metadata.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n\n        assertEquals(entryFromBibFile.get(), entries.get(0));\n    }\n","date":"2018-08-16 15:17:32","endLine":106,"groupId":"1707","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReadPDMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ea/5dfe702c1ed8aa5efe6efb2797b8ad648fcb44.src","preCode":"    public void testReadPDMetadata() throws IOException, URISyntaxException, ParseException {\n        List<BibEntry> entries = XmpUtilReader.readXmp(Paths.get(XmpUtilShared.class.getResource(\"PD_metadata.pdf\").toURI()), xmpPreferences);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"PD_metadata.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n\n        Assert.assertEquals(entryFromBibFile.get(), entries.get(0));\n    }\n","realPath":"src/test/java/org/jabref/logic/xmp/XmpUtilReaderTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"a880addc0b9a45ad4461cc46ed261ea7df9c812a","commitMessage":"@@@Fix for issue 3959: migrate all tests to JUnit 5 (#4260)\n\n* Update migrate from JUnit 4 to JUnit 5\n\n* Update migrate from JUnit 4 to JUnit 5\n\n* Trying to change git accounts on my laptop\n\n* Trying to change git accounts on my laptop\n\n* Trying to change git accounts on my laptop\n\n* Using static assert methods.\n\n* Migrate from JUnit 4 to JUnit 5\n\n*AuthorListParameterTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*XmpUtilWriterTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*XmpUtilReaderTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*SearchQueryHighlightObservableTest.java\n\n    -did not use MockitoExtension.class as its official version has not been released yet.\n\n* Migrate from JUnit 4 to JUnit 5\n\n*CitationEntryTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*RTFCharsTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ProtectedTermsLoaderTest.java\n\n    -When running tests.  outputs in command line are different. I don't know if this change is correct.\n\n* Trying to change to a new branch.\n\n* commit_test\n\n* delete my meaningless txt\n\n* Migrate from JUnit 4 to JUnit 5\n\n*AuthorAndToSemicolonReplacerTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*FileDialogConfigurationTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*IntegrityCheckTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ModsExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*AutoSetFileLinksUtilTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*MsBibExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*CsvExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*HtmlExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*HtmlExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*RenamePdfCleanupTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ProtectedTermsListTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*MoveFilesCleanupTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ImporterTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n    *ExporterTest.java\n\n* Try to trigger the Travis CI build.\n\n* Try to trigger the Travis CI build.\n\n* Migrate from JUnit 4 to JUnit 5\n\n* Try to migrate from JUnit 4 to JUnit 5\n    *BibTeXMLExporterTestFiles.java\n        *Test.  not finished\n\n* Roll back to earlier version.\n    *BibTeXMLExporterTestFiles.java\n    *CleanupWorkerTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n    *ImportFormatReaderIntegrationTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n    *MimeTypeDetectorTest.java\n\n* failed to modify CleanupWorkerTest\n\n* failed to modify cleanupWorkTest\n\n* change cleanupWorkerTest to initial\n\n* ***DatabaseTest***\nMigrate from JUnit 4 to JUnit 5\n    *DBMSProcessorTest.java\n        *Wait for the Travis CI\n\n* ***DatabaseTest***\nMigrate from JUnit 4 to JUnit 5\n    *DBMSProcessorTest.java\n        *Wait for the Travis CI\n\n* Migrate from JUnit 4 to JUnit 5\n    *BibTeXMLExporterTestFiles.java\n    *MSBibExportFormatTestFiles.java\n    *All the GUI tests\n\n* Migrate from JUnit 4 to JUnit 5\n    *CleanupWorkerTest.java\n\n    *It seems that worker doesn't work in cleanupRenamePdfRenamesRelativeFile() and cleanupRelativePathsConvertAbsoluteToRelativePath()\n\n* Migrate JUnit 4 to JUnit 5.\n    *AuthorListParameterTest.java\n        -Follow up tp the newest.\n\n* Migrate JUnit 4 to JUnit 5.\n    *CleanupWorkerTest.java\n        -Delete my sout.\n\n* Migrate JUnit 4 to JUnit 5.\n    *EntryTypesTest.java\n        -Just some method name changes.\n\n* Fix part of CleanupWorkerTest.\n    -cleanupRelativePathsConvertAbsoluteToRelativePath() test passed.\n    -The cleanupRenamePdfRenamesRelativeFile() test still failed.\n\n* Migrate and sync.\n    *CiteKeyBasedFileFinderTest.java\n\n* Migrate.\n    *FileUtilTest.java\nPartly migrate.\n    *ModsExportFormatTestFiles.java\n\n* Fix CleanupWorkerTest.java\n\n* Fix .travis.yml\n\n* Remove unnecessary @Rule.\n    *IntegrityCheckTest.java\n\n* AuxParserTest.java\n\n* BibtexParserTest.java\n\n* EntryComparatorTest.java\n\n* Migrate JUnit 4 to JUnit 5 -------by 1160300229\n\n* Migrate. Some tasks by my team members.\n    *LinkedFileViewModelTest.java\n    *RecursiveTreeItemTest.java\n    *UndoTest.java\n    *EntryComparatorTest.java\n    *MakeLabelWithDatabaseTest.java\n    *MakeLabelWithoutDatabaseTest.java\n    *CleanupUrlFormatterTest.java\n    *BibtexParserTest.java\n    *MedlinePlainImporterTest.java\n    *SilverPlatterImporterTest.java\n    *EntryLinkCheckerTest.java\n    *LocalizationKeyTest.java\n    *JabRefPreferencesTest.java\n\n* Fix 1160300302's error.\n\n* Remove unnecessary \"public\".\n    *AuxParserTest.java\n\n* fix architecture test by removing check for public make some classes default visibility level\n\n* Fix \"cannot find files\" problem in JUnit 4.\n\n* Migrate to JUnit 5.\n    *BibTeXMLExporterTestFiles.java\n    *ModsExportFormatTestFiles.java\n    *MSBibExportFormatTestFiles.java\n\n* Change the slash direction.\n    *BibTeXMLExporterTestFiles.java\n    *ModsExportFormatTestFiles.java\n    *MSBibExportFormatTestFiles.java\n\n* fix resolving of paths in msbibexporterpath update junit and correct resource dirs in gradle\n\n* Fix the path issue in\n    *BibTeXMLExporterTestFiles.java\n    *ModsExportFormatTestFiles.java\n\n* Disable the failing exporter tests and change the build.gradle\n\n* Fix the parent folder issue by make every path to their child once.\n    -You can see in the code. :)\n\n* Fix some minor issues.\n    -Use the NIO methods in MoveFilesCleanupTest.java\n\n    -Use toAbsolutePath() method in RenamePdfCleanupTest.java\n\n    -Rename \"tempFilename\" to \"tempFilePath\" in BibTeXMLExporterTestFiles.java\n\n* include main/java in resources as well convert legalcy file methods to nio\n","date":"2018-08-16 15:17:32","modifiedFileCount":"59","status":"M","submitter":"Yichen Sun"},{"authorTime":"2019-02-10 20:47:48","codes":[{"authorDate":"2019-02-10 20:47:48","commitOrder":3,"curCode":"    void testReadArticleDublinCoreReadXmp() throws IOException, URISyntaxException, ParseException {\n        Path pathPdf = Paths.get(XmpUtilShared.class.getResource(\"article_dublinCore.pdf\").toURI());\n        List<BibEntry> entries = XmpUtilReader.readXmp(pathPdf, xmpPreferences);\n        BibEntry entry = entries.get(0);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"article_dublinCore.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n        entryFromBibFile.get().setFiles(Arrays.asList(\n                new LinkedFile(\"\", \"paper.pdf\", \"PDF\"),\n                new LinkedFile(\"\", pathPdf.toAbsolutePath().toString(), \"PDF\"))\n        );\n\n        assertEquals(entryFromBibFile.get(), entry);\n    }\n","date":"2019-02-10 20:47:48","endLine":86,"groupId":"4001","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadArticleDublinCoreReadXmp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ad/d59fee6d825823748ec525e7be27f19acbbfe4.src","preCode":"    void testReadArticleDublinCoreReadXmp() throws IOException, URISyntaxException, ParseException {\n        List<BibEntry> entries = XmpUtilReader.readXmp(Paths.get(XmpUtilShared.class.getResource(\"article_dublinCore.pdf\").toURI()), xmpPreferences);\n        BibEntry entry = entries.get(0);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"article_dublinCore.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n\n        assertEquals(entryFromBibFile.get(), entry);\n    }\n","realPath":"src/test/java/org/jabref/logic/xmp/XmpUtilReaderTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2019-02-10 20:47:48","commitOrder":3,"curCode":"    void testReadPDMetadata() throws IOException, URISyntaxException, ParseException {\n        Path pathPdf = Paths.get(XmpUtilShared.class.getResource(\"PD_metadata.pdf\").toURI());\n        List<BibEntry> entries = XmpUtilReader.readXmp(pathPdf, xmpPreferences);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"PD_metadata.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n        entryFromBibFile.get().setFiles(Collections.singletonList(\n                new LinkedFile(\"\", pathPdf.toAbsolutePath().toString(), \"PDF\"))\n        );\n\n        assertEquals(entryFromBibFile.get(), entries.get(0));\n    }\n","date":"2019-02-10 20:47:48","endLine":112,"groupId":"3999","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testReadPDMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ad/d59fee6d825823748ec525e7be27f19acbbfe4.src","preCode":"    void testReadPDMetadata() throws IOException, URISyntaxException, ParseException {\n        List<BibEntry> entries = XmpUtilReader.readXmp(Paths.get(XmpUtilShared.class.getResource(\"PD_metadata.pdf\").toURI()), xmpPreferences);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"PD_metadata.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n\n        assertEquals(entryFromBibFile.get(), entries.get(0));\n    }\n","realPath":"src/test/java/org/jabref/logic/xmp/XmpUtilReaderTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"8520833e684aa9e305dd8745e45696ffd6d984fb","commitMessage":"@@@Remove old code for PDF import (#4634)\n\n* Remove old code for PDF import\n\n* Fix tests\n\n* Update Docbook5ExportFormat.xml\n\n* Fix tests\n\n* Fix checkstyle\n","date":"2019-02-10 20:47:48","modifiedFileCount":"75","status":"M","submitter":"Tobias Diez"},{"authorTime":"2020-04-30 17:10:13","codes":[{"authorDate":"2020-04-30 17:10:13","commitOrder":4,"curCode":"    void testReadArticleDublinCoreReadXmp() throws IOException, URISyntaxException, ParseException {\n        Path pathPdf = Path.of(XmpUtilShared.class.getResource(\"article_dublinCore.pdf\").toURI());\n        List<BibEntry> entries = XmpUtilReader.readXmp(pathPdf, xmpPreferences);\n        BibEntry entry = entries.get(0);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"article_dublinCore.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n        entryFromBibFile.get().setFiles(Arrays.asList(\n                new LinkedFile(\"\", \"paper.pdf\", \"PDF\"),\n                new LinkedFile(\"\", pathPdf.toAbsolutePath().toString(), \"PDF\"))\n        );\n\n        assertEquals(entryFromBibFile.get(), entry);\n    }\n","date":"2020-04-30 17:10:13","endLine":85,"groupId":"4001","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadArticleDublinCoreReadXmp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/37/c43679ae1f1832af114a0494e7dd895a80b383.src","preCode":"    void testReadArticleDublinCoreReadXmp() throws IOException, URISyntaxException, ParseException {\n        Path pathPdf = Paths.get(XmpUtilShared.class.getResource(\"article_dublinCore.pdf\").toURI());\n        List<BibEntry> entries = XmpUtilReader.readXmp(pathPdf, xmpPreferences);\n        BibEntry entry = entries.get(0);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"article_dublinCore.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n        entryFromBibFile.get().setFiles(Arrays.asList(\n                new LinkedFile(\"\", \"paper.pdf\", \"PDF\"),\n                new LinkedFile(\"\", pathPdf.toAbsolutePath().toString(), \"PDF\"))\n        );\n\n        assertEquals(entryFromBibFile.get(), entry);\n    }\n","realPath":"src/test/java/org/jabref/logic/xmp/XmpUtilReaderTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-04-30 17:10:13","commitOrder":4,"curCode":"    void testReadPDMetadata() throws IOException, URISyntaxException, ParseException {\n        Path pathPdf = Path.of(XmpUtilShared.class.getResource(\"PD_metadata.pdf\").toURI());\n        List<BibEntry> entries = XmpUtilReader.readXmp(pathPdf, xmpPreferences);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"PD_metadata.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n        entryFromBibFile.get().setFiles(Collections.singletonList(\n                new LinkedFile(\"\", pathPdf.toAbsolutePath().toString(), \"PDF\"))\n        );\n\n        assertEquals(entryFromBibFile.get(), entries.get(0));\n    }\n","date":"2020-04-30 17:10:13","endLine":111,"groupId":"3999","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testReadPDMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/37/c43679ae1f1832af114a0494e7dd895a80b383.src","preCode":"    void testReadPDMetadata() throws IOException, URISyntaxException, ParseException {\n        Path pathPdf = Paths.get(XmpUtilShared.class.getResource(\"PD_metadata.pdf\").toURI());\n        List<BibEntry> entries = XmpUtilReader.readXmp(pathPdf, xmpPreferences);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"PD_metadata.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n        entryFromBibFile.get().setFiles(Collections.singletonList(\n                new LinkedFile(\"\", pathPdf.toAbsolutePath().toString(), \"PDF\"))\n        );\n\n        assertEquals(entryFromBibFile.get(), entries.get(0));\n    }\n","realPath":"src/test/java/org/jabref/logic/xmp/XmpUtilReaderTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"862078a4db316cfd15bd77be68d3d2b010feab3b","commitMessage":"@@@Fixes #6357: File directory (#6377)\n\n* Fixes #6357: File directory\n\nBug was introduced in https://github.com/JabRef/jabref/commit/1b03f039aa4abf0812a3a8ae0ba248c08fdb39a3.\n\n* Fix tests\n\n* Replace Paths.get\n\n* Fix code style","date":"2020-04-30 17:10:13","modifiedFileCount":"110","status":"M","submitter":"Tobias Diez"},{"authorTime":"2020-09-26 05:39:50","codes":[{"authorDate":"2020-09-26 05:39:50","commitOrder":5,"curCode":"    void testReadArticleDublinCoreReadXmp() throws IOException, URISyntaxException, ParseException {\n        Path pathPdf = Path.of(XmpUtilShared.class.getResource(\"article_dublinCore.pdf\").toURI());\n        List<BibEntry> entries = XmpUtilReader.readXmp(pathPdf, xmpPreferences);\n        BibEntry entry = entries.get(0);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"article_dublinCore.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n        entryFromBibFile.get().setFiles(Arrays.asList(\n                new LinkedFile(\"\", Path.of(\"paper.pdf\"), \"PDF\"),\n                new LinkedFile(\"\", pathPdf.toAbsolutePath(), \"PDF\"))\n        );\n\n        assertEquals(entryFromBibFile.get(), entry);\n    }\n","date":"2020-09-26 05:39:50","endLine":85,"groupId":"10732","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testReadArticleDublinCoreReadXmp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/b9/23e54675e384daeeb8f0653c091feec69965d4.src","preCode":"    void testReadArticleDublinCoreReadXmp() throws IOException, URISyntaxException, ParseException {\n        Path pathPdf = Path.of(XmpUtilShared.class.getResource(\"article_dublinCore.pdf\").toURI());\n        List<BibEntry> entries = XmpUtilReader.readXmp(pathPdf, xmpPreferences);\n        BibEntry entry = entries.get(0);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"article_dublinCore.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n        entryFromBibFile.get().setFiles(Arrays.asList(\n                new LinkedFile(\"\", \"paper.pdf\", \"PDF\"),\n                new LinkedFile(\"\", pathPdf.toAbsolutePath().toString(), \"PDF\"))\n        );\n\n        assertEquals(entryFromBibFile.get(), entry);\n    }\n","realPath":"src/test/java/org/jabref/logic/xmp/XmpUtilReaderTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-09-26 05:39:50","commitOrder":5,"curCode":"    void testReadPDMetadata() throws IOException, URISyntaxException, ParseException {\n        Path pathPdf = Path.of(XmpUtilShared.class.getResource(\"PD_metadata.pdf\").toURI());\n        List<BibEntry> entries = XmpUtilReader.readXmp(pathPdf, xmpPreferences);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"PD_metadata.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n        entryFromBibFile.get().setFiles(Collections.singletonList(\n                new LinkedFile(\"\", pathPdf.toAbsolutePath(), \"PDF\"))\n        );\n\n        assertEquals(entryFromBibFile.get(), entries.get(0));\n    }\n","date":"2020-09-26 05:39:50","endLine":111,"groupId":"10732","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testReadPDMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/b9/23e54675e384daeeb8f0653c091feec69965d4.src","preCode":"    void testReadPDMetadata() throws IOException, URISyntaxException, ParseException {\n        Path pathPdf = Path.of(XmpUtilShared.class.getResource(\"PD_metadata.pdf\").toURI());\n        List<BibEntry> entries = XmpUtilReader.readXmp(pathPdf, xmpPreferences);\n\n        String bibString = Resources.toString(XmpUtilShared.class.getResource(\"PD_metadata.bib\"), StandardCharsets.UTF_8);\n        Optional<BibEntry> entryFromBibFile = parser.parseSingleEntry(bibString);\n        entryFromBibFile.get().setFiles(Collections.singletonList(\n                new LinkedFile(\"\", pathPdf.toAbsolutePath().toString(), \"PDF\"))\n        );\n\n        assertEquals(entryFromBibFile.get(), entries.get(0));\n    }\n","realPath":"src/test/java/org/jabref/logic/xmp/XmpUtilReaderTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"3123090b6cf44e853eceae42854d49e78e81be2a","commitMessage":"@@@Changed default value of \"search and store files relative to bibtex file\" to true (#6928)\n\n* Fixes #6863\n\n* CHANGELOG.md\n\n* Reworded bibLocationAsPrimary to reflect real meaning of the preference setting.  changed default val to true\n\n* Cleanup of deprecated methods LinkedFiles(String.  String.  String) and List<String> getFileDirectories(...)\n\n* Reworded package filelist to linkedfile\n\n* Fixed SpringerFetcher","date":"2020-09-26 05:39:50","modifiedFileCount":"45","status":"M","submitter":"Carl Christian Snethlage"}]
