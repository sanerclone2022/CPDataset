[{"authorTime":"2020-09-01 20:41:35","codes":[{"authorDate":"2020-09-01 20:41:35","commitOrder":1,"curCode":"    void mergeBibTexStringsWithSameNameAreImportedWithModifiedName() {\n        BibtexString targetString = new BibtexString(\"name\", \"content1\");\n\n        \r\n        BibtexString sourceString1 = new BibtexString(\"name\", \"content2\");\n        BibtexString sourceString2 = new BibtexString(\"name\", \"content3\");\n\n        \r\n        BibtexString importedBibTeXString1 = new BibtexString(\"name_1\", \"content2\");\n        BibtexString importedBibTeXString2 = new BibtexString(\"name_2\", \"content3\");\n\n        BibDatabase target = new BibDatabase();\n        BibDatabase source1 = new BibDatabase();\n        BibDatabase source2 = new BibDatabase();\n        target.addString(targetString);\n        source1.addString(sourceString1);\n        source2.addString(sourceString2);\n\n        new DatabaseMerger().mergeStrings(target, source1);\n        new DatabaseMerger().mergeStrings(target, source2);\n        \r\n        List<String> resultStringsSorted = target.getStringValues()\n                                                 .stream()\n                                                 .map(BibtexString::toString)\n                                                 .sorted()\n                                                 .collect(Collectors.toList());\n\n        assertEquals(List.of(targetString.toString(), importedBibTeXString1.toString(),\n                importedBibTeXString2.toString()), resultStringsSorted);\n    }\n","date":"2020-09-01 20:41:35","endLine":80,"groupId":"11745","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeBibTexStringsWithSameNameAreImportedWithModifiedName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fa/56cb9324dc9e6b8703ab7dab48845c47adabfa.src","preCode":"    void mergeBibTexStringsWithSameNameAreImportedWithModifiedName() {\n        BibtexString targetString = new BibtexString(\"name\", \"content1\");\n\n        \r\n        BibtexString sourceString1 = new BibtexString(\"name\", \"content2\");\n        BibtexString sourceString2 = new BibtexString(\"name\", \"content3\");\n\n        \r\n        BibtexString importedBibTeXString1 = new BibtexString(\"name_1\", \"content2\");\n        BibtexString importedBibTeXString2 = new BibtexString(\"name_2\", \"content3\");\n\n        BibDatabase target = new BibDatabase();\n        BibDatabase source1 = new BibDatabase();\n        BibDatabase source2 = new BibDatabase();\n        target.addString(targetString);\n        source1.addString(sourceString1);\n        source2.addString(sourceString2);\n\n        new DatabaseMerger().mergeStrings(target, source1);\n        new DatabaseMerger().mergeStrings(target, source2);\n        \r\n        List<String> resultStringsSorted = target.getStringValues()\n                                                 .stream()\n                                                 .map(BibtexString::toString)\n                                                 .sorted()\n                                                 .collect(Collectors.toList());\n\n        assertEquals(List.of(targetString.toString(), importedBibTeXString1.toString(),\n                importedBibTeXString2.toString()), resultStringsSorted);\n    }\n","realPath":"src/test/java/org/jabref/logic/database/DatabaseMergerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2020-09-01 20:41:35","commitOrder":1,"curCode":"    void mergeBibTexStringsWithSameNameAndContentAreIgnored() {\n        BibtexString targetString1 = new BibtexString(\"name1\", \"content1\");\n        BibtexString targetString2 = new BibtexString(\"name2\", \"content2\");\n\n        \r\n        BibtexString sourceString1 = new BibtexString(\"name1\", \"content1\");\n        BibtexString sourceString2 = new BibtexString(\"name2\", \"content2\");\n\n        BibDatabase target = new BibDatabase();\n        BibDatabase source = new BibDatabase();\n        target.addString(targetString1);\n        target.addString(targetString2);\n        source.addString(sourceString1);\n        source.addString(sourceString2);\n\n        new DatabaseMerger().mergeStrings(target, source);\n        \r\n        List<String> resultStringsSorted = target.getStringValues()\n                                                 .stream()\n                                                 .map(BibtexString::toString)\n                                                 .sorted()\n                                                 .collect(Collectors.toList());\n\n        assertEquals(List.of(targetString1.toString(), targetString2.toString()), resultStringsSorted);\n    }\n","date":"2020-09-01 20:41:35","endLine":107,"groupId":"6902","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mergeBibTexStringsWithSameNameAndContentAreIgnored","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fa/56cb9324dc9e6b8703ab7dab48845c47adabfa.src","preCode":"    void mergeBibTexStringsWithSameNameAndContentAreIgnored() {\n        BibtexString targetString1 = new BibtexString(\"name1\", \"content1\");\n        BibtexString targetString2 = new BibtexString(\"name2\", \"content2\");\n\n        \r\n        BibtexString sourceString1 = new BibtexString(\"name1\", \"content1\");\n        BibtexString sourceString2 = new BibtexString(\"name2\", \"content2\");\n\n        BibDatabase target = new BibDatabase();\n        BibDatabase source = new BibDatabase();\n        target.addString(targetString1);\n        target.addString(targetString2);\n        source.addString(sourceString1);\n        source.addString(sourceString2);\n\n        new DatabaseMerger().mergeStrings(target, source);\n        \r\n        List<String> resultStringsSorted = target.getStringValues()\n                                                 .stream()\n                                                 .map(BibtexString::toString)\n                                                 .sorted()\n                                                 .collect(Collectors.toList());\n\n        assertEquals(List.of(targetString1.toString(), targetString2.toString()), resultStringsSorted);\n    }\n","realPath":"src/test/java/org/jabref/logic/database/DatabaseMergerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"}],"commitId":"35f5078f6b050cbe9b74f6d48f092984c4c3a61a","commitMessage":"@@@Enable Merging of BibDatabases (#6689)\n\n* Clean up commit and remove unwanted changes.\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>\n\n* Move Merger and DuplicateCheck into database package\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>\n\n* Move meta data merging into DatabaseMerger\nAdd DatabaseContext merging capability to DatabaseMerger\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>\n\n* Add one meta data merge test (unfinished)\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>\n\n* Add meta data merging tests.\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>\n\n* Reduce test example\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>","date":"2020-09-01 20:41:35","modifiedFileCount":"7","status":"B","submitter":"Dominik Voigt"},{"authorTime":"2020-12-15 04:28:26","codes":[{"authorDate":"2020-12-15 04:28:26","commitOrder":2,"curCode":"    void mergeBibTexStringsWithSameNameAreImportedWithModifiedName() {\n        BibtexString targetString = new BibtexString(\"name\", \"content1\");\n\n        \r\n        BibtexString sourceString1 = new BibtexString(\"name\", \"content2\");\n        BibtexString sourceString2 = new BibtexString(\"name\", \"content3\");\n\n        \r\n        BibtexString importedBibTeXString1 = new BibtexString(\"name_1\", \"content2\");\n        BibtexString importedBibTeXString2 = new BibtexString(\"name_2\", \"content3\");\n\n        BibDatabase target = new BibDatabase();\n        BibDatabase source1 = new BibDatabase();\n        BibDatabase source2 = new BibDatabase();\n        target.addString(targetString);\n        source1.addString(sourceString1);\n        source2.addString(sourceString2);\n\n        new DatabaseMerger(importFormatPreferences.getKeywordSeparator()).mergeStrings(target, source1);\n        new DatabaseMerger(importFormatPreferences.getKeywordSeparator()).mergeStrings(target, source2);\n        \r\n        List<String> resultStringsSorted = target.getStringValues()\n                                                 .stream()\n                                                 .map(BibtexString::toString)\n                                                 .sorted()\n                                                 .collect(Collectors.toList());\n\n        assertEquals(List.of(targetString.toString(), importedBibTeXString1.toString(),\n                importedBibTeXString2.toString()), resultStringsSorted);\n    }\n","date":"2020-12-15 04:28:26","endLine":90,"groupId":"10167","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"mergeBibTexStringsWithSameNameAreImportedWithModifiedName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/7f/c49bab23267de5e6b6b86d8b4c919ed9a38504.src","preCode":"    void mergeBibTexStringsWithSameNameAreImportedWithModifiedName() {\n        BibtexString targetString = new BibtexString(\"name\", \"content1\");\n\n        \r\n        BibtexString sourceString1 = new BibtexString(\"name\", \"content2\");\n        BibtexString sourceString2 = new BibtexString(\"name\", \"content3\");\n\n        \r\n        BibtexString importedBibTeXString1 = new BibtexString(\"name_1\", \"content2\");\n        BibtexString importedBibTeXString2 = new BibtexString(\"name_2\", \"content3\");\n\n        BibDatabase target = new BibDatabase();\n        BibDatabase source1 = new BibDatabase();\n        BibDatabase source2 = new BibDatabase();\n        target.addString(targetString);\n        source1.addString(sourceString1);\n        source2.addString(sourceString2);\n\n        new DatabaseMerger().mergeStrings(target, source1);\n        new DatabaseMerger().mergeStrings(target, source2);\n        \r\n        List<String> resultStringsSorted = target.getStringValues()\n                                                 .stream()\n                                                 .map(BibtexString::toString)\n                                                 .sorted()\n                                                 .collect(Collectors.toList());\n\n        assertEquals(List.of(targetString.toString(), importedBibTeXString1.toString(),\n                importedBibTeXString2.toString()), resultStringsSorted);\n    }\n","realPath":"src/test/java/org/jabref/logic/database/DatabaseMergerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2020-12-15 04:28:26","commitOrder":2,"curCode":"    void mergeBibTexStringsWithSameNameAndContentAreIgnored() {\n        BibtexString targetString1 = new BibtexString(\"name1\", \"content1\");\n        BibtexString targetString2 = new BibtexString(\"name2\", \"content2\");\n\n        \r\n        BibtexString sourceString1 = new BibtexString(\"name1\", \"content1\");\n        BibtexString sourceString2 = new BibtexString(\"name2\", \"content2\");\n\n        BibDatabase target = new BibDatabase();\n        BibDatabase source = new BibDatabase();\n        target.addString(targetString1);\n        target.addString(targetString2);\n        source.addString(sourceString1);\n        source.addString(sourceString2);\n\n        new DatabaseMerger(importFormatPreferences.getKeywordSeparator()).mergeStrings(target, source);\n        \r\n        List<String> resultStringsSorted = target.getStringValues()\n                                                 .stream()\n                                                 .map(BibtexString::toString)\n                                                 .sorted()\n                                                 .collect(Collectors.toList());\n\n        assertEquals(List.of(targetString1.toString(), targetString2.toString()), resultStringsSorted);\n    }\n","date":"2020-12-15 04:28:26","endLine":117,"groupId":"10167","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"mergeBibTexStringsWithSameNameAndContentAreIgnored","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/7f/c49bab23267de5e6b6b86d8b4c919ed9a38504.src","preCode":"    void mergeBibTexStringsWithSameNameAndContentAreIgnored() {\n        BibtexString targetString1 = new BibtexString(\"name1\", \"content1\");\n        BibtexString targetString2 = new BibtexString(\"name2\", \"content2\");\n\n        \r\n        BibtexString sourceString1 = new BibtexString(\"name1\", \"content1\");\n        BibtexString sourceString2 = new BibtexString(\"name2\", \"content2\");\n\n        BibDatabase target = new BibDatabase();\n        BibDatabase source = new BibDatabase();\n        target.addString(targetString1);\n        target.addString(targetString2);\n        source.addString(sourceString1);\n        source.addString(sourceString2);\n\n        new DatabaseMerger().mergeStrings(target, source);\n        \r\n        List<String> resultStringsSorted = target.getStringValues()\n                                                 .stream()\n                                                 .map(BibtexString::toString)\n                                                 .sorted()\n                                                 .collect(Collectors.toList());\n\n        assertEquals(List.of(targetString1.toString(), targetString2.toString()), resultStringsSorted);\n    }\n","realPath":"src/test/java/org/jabref/logic/database/DatabaseMergerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"c0153bd501754d220e34f45ca689851f8ffd5fbd","commitMessage":"@@@Extraction of Globals.prefs.put and .get (#7121)\n\nCo-authored-by: Siedlerchr <siedlerkiller@gmail.com>\nCo-authored-by: Tobias Diez <tobiasdiez@gmx.de>","date":"2020-12-15 04:28:26","modifiedFileCount":"132","status":"M","submitter":"Carl Christian Snethlage"}]
