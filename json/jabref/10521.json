[{"authorTime":"2018-01-18 23:38:36","codes":[{"authorDate":"2017-02-17 05:41:47","commitOrder":2,"curCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        Assert.assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        Assert.assertEquals(\"misc\", entry.getType());\n        Assert.assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(\"author\"));\n        Assert.assertEquals(Optional.of(\"Short abstract\"), entry.getField(\"abstract\"));\n        Assert.assertEquals(Optional.of(\"Musterbuch\"), entry.getField(\"title\"));\n        Assert.assertEquals(Optional.of(\"Einleitung\"), entry.getField(\"chaptertitle\"));\n\n        entry = entries.get(1);\n        Assert.assertEquals(\"inproceedings\", entry.getType());\n        Assert.assertEquals(Optional.of(\"Max\"), entry.getField(\"editor\"));\n        Assert.assertEquals(Optional.of(\"Max the Editor\"), entry.getField(\"title\"));\n        Assert.assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        Assert.assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        Assert.assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        Assert.assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        Assert.assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(2);\n        Assert.assertEquals(\"incollection\", entry.getType());\n        Assert.assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        Assert.assertEquals(Optional.of(\"Test\"), entry.getField(\"title\"));\n        Assert.assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        Assert.assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        Assert.assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        Assert.assertEquals(Optional.of(\"April\"), entry.getField(\"month\"));\n        Assert.assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        Assert.assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(3);\n        Assert.assertEquals(\"book\", entry.getType());\n        Assert.assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        Assert.assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        Assert.assertEquals(Optional.of(\"Editor\"), entry.getField(\"editor\"));\n        Assert.assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"booktitle\"));\n        Assert.assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n        Assert.assertEquals(Optional.of(\"Address\"), entry.getField(\"address\"));\n        Assert.assertEquals(Optional.of(\"Publisher\"), entry.getField(\"publisher\"));\n\n        entry = entries.get(4);\n        Assert.assertEquals(\"article\", entry.getType());\n        Assert.assertEquals(Optional.of(\"2014\"), entry.getField(\"year\"));\n        Assert.assertEquals(Optional.of(\"58\"), entry.getField(\"pages\"));\n        Assert.assertEquals(Optional.of(\"Test\"), entry.getField(\"address\"));\n        Assert.assertEquals(Optional.empty(), entry.getField(\"title\"));\n        Assert.assertEquals(Optional.of(\"TestPublisher\"), entry.getField(\"publisher\"));\n    }\n","date":"2017-02-17 05:41:47","endLine":133,"groupId":"9693","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testImportEntries1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/da/149a8e7e6ab7e71598a0e895caa97e3d6ca60a.src","preCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        Assert.assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        Assert.assertEquals(\"misc\", entry.getType());\n        Assert.assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(\"author\"));\n        Assert.assertEquals(Optional.of(\"Short abstract\"), entry.getField(\"abstract\"));\n        Assert.assertEquals(Optional.of(\"Musterbuch\"), entry.getField(\"title\"));\n        Assert.assertEquals(Optional.of(\"Einleitung\"), entry.getField(\"chaptertitle\"));\n\n        entry = entries.get(1);\n        Assert.assertEquals(\"inproceedings\", entry.getType());\n        Assert.assertEquals(Optional.of(\"Max\"), entry.getField(\"editor\"));\n        Assert.assertEquals(Optional.of(\"Max the Editor\"), entry.getField(\"title\"));\n        Assert.assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        Assert.assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        Assert.assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        Assert.assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        Assert.assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(2);\n        Assert.assertEquals(\"incollection\", entry.getType());\n        Assert.assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        Assert.assertEquals(Optional.of(\"Test\"), entry.getField(\"title\"));\n        Assert.assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        Assert.assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        Assert.assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        Assert.assertEquals(Optional.of(\"April\"), entry.getField(\"month\"));\n        Assert.assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        Assert.assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(3);\n        Assert.assertEquals(\"book\", entry.getType());\n        Assert.assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        Assert.assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        Assert.assertEquals(Optional.of(\"Editor\"), entry.getField(\"editor\"));\n        Assert.assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"booktitle\"));\n        Assert.assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n        Assert.assertEquals(Optional.of(\"Address\"), entry.getField(\"address\"));\n        Assert.assertEquals(Optional.of(\"Publisher\"), entry.getField(\"publisher\"));\n\n        entry = entries.get(4);\n        Assert.assertEquals(\"article\", entry.getType());\n        Assert.assertEquals(Optional.of(\"2014\"), entry.getField(\"year\"));\n        Assert.assertEquals(Optional.of(\"58\"), entry.getField(\"pages\"));\n        Assert.assertEquals(Optional.of(\"Test\"), entry.getField(\"address\"));\n        Assert.assertEquals(Optional.empty(), entry.getField(\"title\"));\n        Assert.assertEquals(Optional.of(\"TestPublisher\"), entry.getField(\"publisher\"));\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/OvidImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"NB"},{"authorDate":"2018-01-18 23:38:36","commitOrder":2,"curCode":"    public void cleanupMovesJournaltitleToJournal() {\n        BibEntry entry = new BibEntry().withField(\"journaltitle\", \"Best of JabRef\");\n\n        worker.cleanup(entry);\n\n        Assert.assertEquals(Optional.empty(), entry.getField(FieldName.JOURNALTITLE));\n        Assert.assertEquals(Optional.of(\"Best of JabRef\"), entry.getField(FieldName.JOURNAL));\n    }\n","date":"2018-01-18 23:38:36","endLine":52,"groupId":"4521","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanupMovesJournaltitleToJournal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/5b/5de9d37b4a9abb6367bfbbc0d11cd396c67c46.src","preCode":"    public void cleanupMovesJournaltitleToJournal() {\n        BibEntry entry = new BibEntry().withField(\"journaltitle\", \"Best of JabRef\");\n\n        worker.cleanup(entry);\n\n        Assert.assertEquals(Optional.empty(), entry.getField(FieldName.JOURNALTITLE));\n        Assert.assertEquals(Optional.of(\"Best of JabRef\"), entry.getField(FieldName.JOURNAL));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/ConvertToBibtexCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"}],"commitId":"beb6ee06e4137ab2c864a80bf87c5ffd75188a0d","commitMessage":"@@@[WIP] Add \"Convert to BibTeX format\" cleanup (#3541)\n\n* Add \"Convert to BibTeX format\" cleanup\n\n* Add round-trip tests\n\n* Fix tests\n\n* Make conversations modal\n","date":"2018-01-18 23:38:36","modifiedFileCount":"9","status":"M","submitter":"Tobias Diez"},{"authorTime":"2018-01-18 23:38:36","codes":[{"authorDate":"2018-02-01 01:07:12","commitOrder":3,"curCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        assertEquals(\"misc\", entry.getType());\n        assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"Short abstract\"), entry.getField(\"abstract\"));\n        assertEquals(Optional.of(\"Musterbuch\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Einleitung\"), entry.getField(\"chaptertitle\"));\n\n        entry = entries.get(1);\n        assertEquals(\"inproceedings\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"editor\"));\n        assertEquals(Optional.of(\"Max the Editor\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(2);\n        assertEquals(\"incollection\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"Test\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        assertEquals(Optional.of(\"April\"), entry.getField(\"month\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(3);\n        assertEquals(\"book\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"Editor\"), entry.getField(\"editor\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"booktitle\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n        assertEquals(Optional.of(\"Address\"), entry.getField(\"address\"));\n        assertEquals(Optional.of(\"Publisher\"), entry.getField(\"publisher\"));\n\n        entry = entries.get(4);\n        assertEquals(\"article\", entry.getType());\n        assertEquals(Optional.of(\"2014\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"58\"), entry.getField(\"pages\"));\n        assertEquals(Optional.of(\"Test\"), entry.getField(\"address\"));\n        assertEquals(Optional.empty(), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"TestPublisher\"), entry.getField(\"publisher\"));\n    }\n","date":"2018-02-01 01:07:12","endLine":140,"groupId":"6983","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testImportEntries1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fd/7b8a8d03273a8f48c7fd868b0e5ff0748b91bf.src","preCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        Assert.assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        Assert.assertEquals(\"misc\", entry.getType());\n        Assert.assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(\"author\"));\n        Assert.assertEquals(Optional.of(\"Short abstract\"), entry.getField(\"abstract\"));\n        Assert.assertEquals(Optional.of(\"Musterbuch\"), entry.getField(\"title\"));\n        Assert.assertEquals(Optional.of(\"Einleitung\"), entry.getField(\"chaptertitle\"));\n\n        entry = entries.get(1);\n        Assert.assertEquals(\"inproceedings\", entry.getType());\n        Assert.assertEquals(Optional.of(\"Max\"), entry.getField(\"editor\"));\n        Assert.assertEquals(Optional.of(\"Max the Editor\"), entry.getField(\"title\"));\n        Assert.assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        Assert.assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        Assert.assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        Assert.assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        Assert.assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(2);\n        Assert.assertEquals(\"incollection\", entry.getType());\n        Assert.assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        Assert.assertEquals(Optional.of(\"Test\"), entry.getField(\"title\"));\n        Assert.assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        Assert.assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        Assert.assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        Assert.assertEquals(Optional.of(\"April\"), entry.getField(\"month\"));\n        Assert.assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        Assert.assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(3);\n        Assert.assertEquals(\"book\", entry.getType());\n        Assert.assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        Assert.assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        Assert.assertEquals(Optional.of(\"Editor\"), entry.getField(\"editor\"));\n        Assert.assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"booktitle\"));\n        Assert.assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n        Assert.assertEquals(Optional.of(\"Address\"), entry.getField(\"address\"));\n        Assert.assertEquals(Optional.of(\"Publisher\"), entry.getField(\"publisher\"));\n\n        entry = entries.get(4);\n        Assert.assertEquals(\"article\", entry.getType());\n        Assert.assertEquals(Optional.of(\"2014\"), entry.getField(\"year\"));\n        Assert.assertEquals(Optional.of(\"58\"), entry.getField(\"pages\"));\n        Assert.assertEquals(Optional.of(\"Test\"), entry.getField(\"address\"));\n        Assert.assertEquals(Optional.empty(), entry.getField(\"title\"));\n        Assert.assertEquals(Optional.of(\"TestPublisher\"), entry.getField(\"publisher\"));\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/OvidImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2018-01-18 23:38:36","commitOrder":3,"curCode":"    public void cleanupMovesJournaltitleToJournal() {\n        BibEntry entry = new BibEntry().withField(\"journaltitle\", \"Best of JabRef\");\n\n        worker.cleanup(entry);\n\n        Assert.assertEquals(Optional.empty(), entry.getField(FieldName.JOURNALTITLE));\n        Assert.assertEquals(Optional.of(\"Best of JabRef\"), entry.getField(FieldName.JOURNAL));\n    }\n","date":"2018-01-18 23:38:36","endLine":52,"groupId":"4521","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanupMovesJournaltitleToJournal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/5b/5de9d37b4a9abb6367bfbbc0d11cd396c67c46.src","preCode":"    public void cleanupMovesJournaltitleToJournal() {\n        BibEntry entry = new BibEntry().withField(\"journaltitle\", \"Best of JabRef\");\n\n        worker.cleanup(entry);\n\n        Assert.assertEquals(Optional.empty(), entry.getField(FieldName.JOURNALTITLE));\n        Assert.assertEquals(Optional.of(\"Best of JabRef\"), entry.getField(FieldName.JOURNAL));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/ConvertToBibtexCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"}],"commitId":"608e415b643995d3492ad12c411b101311d67358","commitMessage":"@@@Migrate importer tests to JUnit5 (#3665)\n\n* Migrate paramterized RIS tests to JUnit5\n\n* Extract generic importer testing code to new class\n\n* Switch to JUnit5 assertions in BibEntryAssert\n\n* Remove unused imports\n\n* Use static import for Assertion when possible\n\n* Extract file collection from importer test classes\n\n* Refactor biblioscape importer tests\n\n* Refactor BiblioscapeImporterTestTypes to JUnit5 syntax\n\n* Refactor CopacImporterTestFiles\n\n* Migrate medline importer tests to JUnit5\n\n* Convert BibTeXML importer tests to JUnit5\n\n* Move several non-parametric importer test classes to JUnit5\n\n* Refactor Medline importer tests to JUni5\n\n* Migrate parameterized MODS importer tests to JUnit5\n\n* Migrate MrDLib importer tests to JUnit5\n\n* Migrate MsBibImporter tests to JUnit5\n\n* Migrate OvidImporter tests to JUnit5\n\n* Migrate PdfContentImporter tests to JUnit5\n\n* Migrate PdfXmpImporter tests to JUnit5\n\n* Migrate RepecNepImporter tests to JUnit5\n\n* Migrate RISImporter tests to JUnit5\n\n* Migrate SilverPlatterImporter tests to JUnit5\n\n* Fix imports in SilverPlatterImporterTest\n\n* Fix BibTeXMLImporter tests\n\n* Fix and clarify BibTeXMLImporterTestTypes\n\n* Fix medline tests for malformed files\n\n* Remove unused imports\n\n* Fix broken test files that can be fixed and remove the ones with larger syntactic problem\n\n* Fix MODSImporter tests\n\n* Fix test file for MsBibImporter tests\n\n* Convert Before to BeforeEach in OvidImporterTests\n\n* Check starting line of a file for checking whether it is a PDF\n\n* Migrate additional BibTeXML tests to JUnit5\n\n* Refactor and restructure BibTexParser tests\n\n* Refactor CopacImporter tests\n\n* Refactor BibTeXMLImporter tests\n\n* Refactor EndnoteImporter tests\n\n* Refactor FreeCiteImporter tests\n\n* Refactor InspecImporter tests\n\n* Refactor IsiImporter tests\n\n* Refactor MedlineImporter tests\n\n* Refactor MrDLibImporter tests\n\n* Refactor MsBibImporter tests\n\n* Refactor OvidImporter tests\n\n* Refactor PdfXmpImporter tests\n\n* Refactor RepecNepImporter tests\n\n* Refactor SilverPlatterImporter tests\n\n* Fix a bunch of codacy issues\n","date":"2018-02-01 01:07:12","modifiedFileCount":"32","status":"M","submitter":"J?rg Lenhard"},{"authorTime":"2018-02-12 00:05:54","codes":[{"authorDate":"2018-02-01 01:07:12","commitOrder":4,"curCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        assertEquals(\"misc\", entry.getType());\n        assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"Short abstract\"), entry.getField(\"abstract\"));\n        assertEquals(Optional.of(\"Musterbuch\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Einleitung\"), entry.getField(\"chaptertitle\"));\n\n        entry = entries.get(1);\n        assertEquals(\"inproceedings\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"editor\"));\n        assertEquals(Optional.of(\"Max the Editor\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(2);\n        assertEquals(\"incollection\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"Test\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        assertEquals(Optional.of(\"April\"), entry.getField(\"month\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(3);\n        assertEquals(\"book\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"Editor\"), entry.getField(\"editor\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"booktitle\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n        assertEquals(Optional.of(\"Address\"), entry.getField(\"address\"));\n        assertEquals(Optional.of(\"Publisher\"), entry.getField(\"publisher\"));\n\n        entry = entries.get(4);\n        assertEquals(\"article\", entry.getType());\n        assertEquals(Optional.of(\"2014\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"58\"), entry.getField(\"pages\"));\n        assertEquals(Optional.of(\"Test\"), entry.getField(\"address\"));\n        assertEquals(Optional.empty(), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"TestPublisher\"), entry.getField(\"publisher\"));\n    }\n","date":"2018-02-01 01:07:12","endLine":140,"groupId":"6983","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testImportEntries1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fd/7b8a8d03273a8f48c7fd868b0e5ff0748b91bf.src","preCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        assertEquals(\"misc\", entry.getType());\n        assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"Short abstract\"), entry.getField(\"abstract\"));\n        assertEquals(Optional.of(\"Musterbuch\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Einleitung\"), entry.getField(\"chaptertitle\"));\n\n        entry = entries.get(1);\n        assertEquals(\"inproceedings\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"editor\"));\n        assertEquals(Optional.of(\"Max the Editor\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(2);\n        assertEquals(\"incollection\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"Test\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        assertEquals(Optional.of(\"April\"), entry.getField(\"month\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(3);\n        assertEquals(\"book\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"Editor\"), entry.getField(\"editor\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"booktitle\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n        assertEquals(Optional.of(\"Address\"), entry.getField(\"address\"));\n        assertEquals(Optional.of(\"Publisher\"), entry.getField(\"publisher\"));\n\n        entry = entries.get(4);\n        assertEquals(\"article\", entry.getType());\n        assertEquals(Optional.of(\"2014\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"58\"), entry.getField(\"pages\"));\n        assertEquals(Optional.of(\"Test\"), entry.getField(\"address\"));\n        assertEquals(Optional.empty(), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"TestPublisher\"), entry.getField(\"publisher\"));\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/OvidImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"},{"authorDate":"2018-02-12 00:05:54","commitOrder":4,"curCode":"    public void cleanupMovesJournaltitleToJournal() {\n        BibEntry entry = new BibEntry().withField(\"journaltitle\", \"Best of JabRef\");\n\n        worker.cleanup(entry);\n\n        assertEquals(Optional.empty(), entry.getField(FieldName.JOURNALTITLE));\n        assertEquals(Optional.of(\"Best of JabRef\"), entry.getField(FieldName.JOURNAL));\n    }\n","date":"2018-02-12 00:05:54","endLine":53,"groupId":"9629","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanupMovesJournaltitleToJournal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/df/46c7da88492199b02dfed7b473e4d1f27e92ec.src","preCode":"    public void cleanupMovesJournaltitleToJournal() {\n        BibEntry entry = new BibEntry().withField(\"journaltitle\", \"Best of JabRef\");\n\n        worker.cleanup(entry);\n\n        Assert.assertEquals(Optional.empty(), entry.getField(FieldName.JOURNALTITLE));\n        Assert.assertEquals(Optional.of(\"Best of JabRef\"), entry.getField(FieldName.JOURNAL));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/ConvertToBibtexCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"1cef92447c4ae65ebe28d94cf9acf708861bb67b","commitMessage":"@@@Merge pull request #3711 from JabRef/junit5\n\nmigrate majority of tests to junit5","date":"2018-02-12 00:05:54","modifiedFileCount":"244","status":"M","submitter":"Oliver Kopp"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":5,"curCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        assertEquals(StandardEntryType.Misc, entry.getType());\n        assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"Short abstract\"), entry.getField(StandardField.ABSTRACT));\n        assertEquals(Optional.of(\"Musterbuch\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Einleitung\"), entry.getField(new UnknownField(\"chaptertitle\")));\n\n        entry = entries.get(1);\n        assertEquals(StandardEntryType.InProceedings, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.EDITOR));\n        assertEquals(Optional.of(\"Max the Editor\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.JOURNAL));\n        assertEquals(Optional.of(\"28\"), entry.getField(StandardField.VOLUME));\n        assertEquals(Optional.of(\"2\"), entry.getField(StandardField.ISSUE));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n\n        entry = entries.get(2);\n        assertEquals(StandardEntryType.InCollection, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"Test\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.JOURNAL));\n        assertEquals(Optional.of(\"28\"), entry.getField(StandardField.VOLUME));\n        assertEquals(Optional.of(\"2\"), entry.getField(StandardField.ISSUE));\n        assertEquals(Optional.of(\"April\"), entry.getField(StandardField.MONTH));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n\n        entry = entries.get(3);\n        assertEquals(StandardEntryType.Book, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"Editor\"), entry.getField(StandardField.EDITOR));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.BOOKTITLE));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n        assertEquals(Optional.of(\"Address\"), entry.getField(StandardField.ADDRESS));\n        assertEquals(Optional.of(\"Publisher\"), entry.getField(StandardField.PUBLISHER));\n\n        entry = entries.get(4);\n        assertEquals(StandardEntryType.Article, entry.getType());\n        assertEquals(Optional.of(\"2014\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"58\"), entry.getField(StandardField.PAGES));\n        assertEquals(Optional.of(\"Test\"), entry.getField(StandardField.ADDRESS));\n        assertEquals(Optional.empty(), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"TestPublisher\"), entry.getField(StandardField.PUBLISHER));\n    }\n","date":"2019-08-02 15:20:10","endLine":142,"groupId":"9693","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testImportEntries1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/85/396c42e155f791a761d8f9c230f94dc3a83d4d.src","preCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        assertEquals(\"misc\", entry.getType());\n        assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"Short abstract\"), entry.getField(\"abstract\"));\n        assertEquals(Optional.of(\"Musterbuch\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Einleitung\"), entry.getField(\"chaptertitle\"));\n\n        entry = entries.get(1);\n        assertEquals(\"inproceedings\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"editor\"));\n        assertEquals(Optional.of(\"Max the Editor\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(2);\n        assertEquals(\"incollection\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"Test\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        assertEquals(Optional.of(\"April\"), entry.getField(\"month\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(3);\n        assertEquals(\"book\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"Editor\"), entry.getField(\"editor\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"booktitle\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n        assertEquals(Optional.of(\"Address\"), entry.getField(\"address\"));\n        assertEquals(Optional.of(\"Publisher\"), entry.getField(\"publisher\"));\n\n        entry = entries.get(4);\n        assertEquals(\"article\", entry.getType());\n        assertEquals(Optional.of(\"2014\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"58\"), entry.getField(\"pages\"));\n        assertEquals(Optional.of(\"Test\"), entry.getField(\"address\"));\n        assertEquals(Optional.empty(), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"TestPublisher\"), entry.getField(\"publisher\"));\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/OvidImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2019-08-02 15:20:10","commitOrder":5,"curCode":"    public void cleanupMovesJournaltitleToJournal() {\n        BibEntry entry = new BibEntry().withField(StandardField.JOURNALTITLE, \"Best of JabRef\");\n\n        worker.cleanup(entry);\n\n        assertEquals(Optional.empty(), entry.getField(StandardField.JOURNALTITLE));\n        assertEquals(Optional.of(\"Best of JabRef\"), entry.getField(StandardField.JOURNAL));\n    }\n","date":"2019-08-02 15:20:10","endLine":53,"groupId":"9693","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"cleanupMovesJournaltitleToJournal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/38/259aaef2f6c9ef08c3140f9bf779efa6788788.src","preCode":"    public void cleanupMovesJournaltitleToJournal() {\n        BibEntry entry = new BibEntry().withField(\"journaltitle\", \"Best of JabRef\");\n\n        worker.cleanup(entry);\n\n        assertEquals(Optional.empty(), entry.getField(FieldName.JOURNALTITLE));\n        assertEquals(Optional.of(\"Best of JabRef\"), entry.getField(FieldName.JOURNAL));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/ConvertToBibtexCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"4b39b78e4afcd6c36b385f5c46f1d9a4eac2e29b","commitMessage":"@@@Move to extended enums for fields and entry types (#5148)\n\n* Introduce interface for fields\n\n* Continue using fields interface instead of strings\n\n* Introduce OrFields class\n\n* Move FieldProperty\n\n* Convert entry types to extended enum\n\n* Start fixing build\n\n* Fix build\n\n* Start fixing tests\n\n* Everything compiles again\n\n* Make model tests pass\n\n* Fix most tests\n\n* Fix build\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix checkstyle issues\n\n* Fix more tests\n\n* Fix more tests\n\n* Disable test that fails on CI\n\n* Disable test that fails on CI\n","date":"2019-08-02 15:20:10","modifiedFileCount":"439","status":"M","submitter":"Tobias Diez"},{"authorTime":"2019-08-02 15:20:10","codes":[{"authorDate":"2020-04-30 17:10:13","commitOrder":6,"curCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Path.of(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        assertEquals(StandardEntryType.Misc, entry.getType());\n        assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"Short abstract\"), entry.getField(StandardField.ABSTRACT));\n        assertEquals(Optional.of(\"Musterbuch\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Einleitung\"), entry.getField(new UnknownField(\"chaptertitle\")));\n\n        entry = entries.get(1);\n        assertEquals(StandardEntryType.InProceedings, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.EDITOR));\n        assertEquals(Optional.of(\"Max the Editor\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.JOURNAL));\n        assertEquals(Optional.of(\"28\"), entry.getField(StandardField.VOLUME));\n        assertEquals(Optional.of(\"2\"), entry.getField(StandardField.ISSUE));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n\n        entry = entries.get(2);\n        assertEquals(StandardEntryType.InCollection, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"Test\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.JOURNAL));\n        assertEquals(Optional.of(\"28\"), entry.getField(StandardField.VOLUME));\n        assertEquals(Optional.of(\"2\"), entry.getField(StandardField.ISSUE));\n        assertEquals(Optional.of(\"April\"), entry.getField(StandardField.MONTH));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n\n        entry = entries.get(3);\n        assertEquals(StandardEntryType.Book, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"Editor\"), entry.getField(StandardField.EDITOR));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.BOOKTITLE));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n        assertEquals(Optional.of(\"Address\"), entry.getField(StandardField.ADDRESS));\n        assertEquals(Optional.of(\"Publisher\"), entry.getField(StandardField.PUBLISHER));\n\n        entry = entries.get(4);\n        assertEquals(StandardEntryType.Article, entry.getType());\n        assertEquals(Optional.of(\"2014\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"58\"), entry.getField(StandardField.PAGES));\n        assertEquals(Optional.of(\"Test\"), entry.getField(StandardField.ADDRESS));\n        assertEquals(Optional.empty(), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"TestPublisher\"), entry.getField(StandardField.PUBLISHER));\n    }\n","date":"2020-04-30 17:10:13","endLine":141,"groupId":"10521","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testImportEntries1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/69/5ca2e9d7b8ac5174d2d0c49d7cd703dbdc58fb.src","preCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        assertEquals(StandardEntryType.Misc, entry.getType());\n        assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"Short abstract\"), entry.getField(StandardField.ABSTRACT));\n        assertEquals(Optional.of(\"Musterbuch\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Einleitung\"), entry.getField(new UnknownField(\"chaptertitle\")));\n\n        entry = entries.get(1);\n        assertEquals(StandardEntryType.InProceedings, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.EDITOR));\n        assertEquals(Optional.of(\"Max the Editor\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.JOURNAL));\n        assertEquals(Optional.of(\"28\"), entry.getField(StandardField.VOLUME));\n        assertEquals(Optional.of(\"2\"), entry.getField(StandardField.ISSUE));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n\n        entry = entries.get(2);\n        assertEquals(StandardEntryType.InCollection, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"Test\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.JOURNAL));\n        assertEquals(Optional.of(\"28\"), entry.getField(StandardField.VOLUME));\n        assertEquals(Optional.of(\"2\"), entry.getField(StandardField.ISSUE));\n        assertEquals(Optional.of(\"April\"), entry.getField(StandardField.MONTH));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n\n        entry = entries.get(3);\n        assertEquals(StandardEntryType.Book, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"Editor\"), entry.getField(StandardField.EDITOR));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.BOOKTITLE));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n        assertEquals(Optional.of(\"Address\"), entry.getField(StandardField.ADDRESS));\n        assertEquals(Optional.of(\"Publisher\"), entry.getField(StandardField.PUBLISHER));\n\n        entry = entries.get(4);\n        assertEquals(StandardEntryType.Article, entry.getType());\n        assertEquals(Optional.of(\"2014\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"58\"), entry.getField(StandardField.PAGES));\n        assertEquals(Optional.of(\"Test\"), entry.getField(StandardField.ADDRESS));\n        assertEquals(Optional.empty(), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"TestPublisher\"), entry.getField(StandardField.PUBLISHER));\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/OvidImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2019-08-02 15:20:10","commitOrder":6,"curCode":"    public void cleanupMovesJournaltitleToJournal() {\n        BibEntry entry = new BibEntry().withField(StandardField.JOURNALTITLE, \"Best of JabRef\");\n\n        worker.cleanup(entry);\n\n        assertEquals(Optional.empty(), entry.getField(StandardField.JOURNALTITLE));\n        assertEquals(Optional.of(\"Best of JabRef\"), entry.getField(StandardField.JOURNAL));\n    }\n","date":"2019-08-02 15:20:10","endLine":53,"groupId":"10521","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"cleanupMovesJournaltitleToJournal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/38/259aaef2f6c9ef08c3140f9bf779efa6788788.src","preCode":"    public void cleanupMovesJournaltitleToJournal() {\n        BibEntry entry = new BibEntry().withField(StandardField.JOURNALTITLE, \"Best of JabRef\");\n\n        worker.cleanup(entry);\n\n        assertEquals(Optional.empty(), entry.getField(StandardField.JOURNALTITLE));\n        assertEquals(Optional.of(\"Best of JabRef\"), entry.getField(StandardField.JOURNAL));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/ConvertToBibtexCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"}],"commitId":"862078a4db316cfd15bd77be68d3d2b010feab3b","commitMessage":"@@@Fixes #6357: File directory (#6377)\n\n* Fixes #6357: File directory\n\nBug was introduced in https://github.com/JabRef/jabref/commit/1b03f039aa4abf0812a3a8ae0ba248c08fdb39a3.\n\n* Fix tests\n\n* Replace Paths.get\n\n* Fix code style","date":"2020-04-30 17:10:13","modifiedFileCount":"110","status":"M","submitter":"Tobias Diez"}]
