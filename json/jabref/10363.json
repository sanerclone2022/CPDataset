[{"authorTime":"2020-02-20 07:57:05","codes":[{"authorDate":"2020-02-20 07:57:05","commitOrder":7,"curCode":"    void testInsertEntry() throws SQLException {\n        BibEntry expectedEntry = getBibEntryExample();\n\n        dbmsProcessor.insertEntry(expectedEntry);\n\n        BibEntry emptyEntry = getBibEntryExample();\n        emptyEntry.getSharedBibEntryData().setSharedID(1);\n        dbmsProcessor.insertEntry(emptyEntry); \r\n\n        Map<String, String> actualFieldMap = new HashMap<>();\n\n        try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertTrue(entryResultSet.next());\n            assertEquals(1, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"inproceedings\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertFalse(entryResultSet.next());\n\n            try (ResultSet fieldResultSet = selectFrom(\"FIELD\", dbmsConnection, dbmsProcessor)) {\n                while (fieldResultSet.next()) {\n                    actualFieldMap.put(fieldResultSet.getString(\"NAME\"), fieldResultSet.getString(\"VALUE\"));\n                }\n            }\n        }\n\n        Map<String, String> expectedFieldMap = expectedEntry.getFieldMap().entrySet().stream().collect(Collectors.toMap((entry) -> entry.getKey().getName(), Map.Entry::getValue));\n\n        assertEquals(expectedFieldMap, actualFieldMap);\n    }\n","date":"2020-02-20 07:57:05","endLine":97,"groupId":"12175","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInsertEntry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fe/7c59b4263bee04c4c7b751a10005d8d35d3e21.src","preCode":"    void testInsertEntry() throws SQLException {\n        BibEntry expectedEntry = getBibEntryExample();\n\n        dbmsProcessor.insertEntry(expectedEntry);\n\n        BibEntry emptyEntry = getBibEntryExample();\n        emptyEntry.getSharedBibEntryData().setSharedID(1);\n        dbmsProcessor.insertEntry(emptyEntry); \r\n\n        Map<String, String> actualFieldMap = new HashMap<>();\n\n        try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertTrue(entryResultSet.next());\n            assertEquals(1, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"inproceedings\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertFalse(entryResultSet.next());\n\n            try (ResultSet fieldResultSet = selectFrom(\"FIELD\", dbmsConnection, dbmsProcessor)) {\n                while (fieldResultSet.next()) {\n                    actualFieldMap.put(fieldResultSet.getString(\"NAME\"), fieldResultSet.getString(\"VALUE\"));\n                }\n            }\n        }\n\n        Map<String, String> expectedFieldMap = expectedEntry.getFieldMap().entrySet().stream().collect(Collectors.toMap((entry) -> entry.getKey().getName(), Map.Entry::getValue));\n\n        assertEquals(expectedFieldMap, actualFieldMap);\n    }\n","realPath":"src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"MB"},{"authorDate":"2020-02-20 07:57:05","commitOrder":7,"curCode":"    void testInsertMultipleEntries() throws SQLException {\n        List<BibEntry> entries = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            entries.add(new BibEntry(StandardEntryType.Article).withField(StandardField.JOURNAL, \"journal \" + i)\n            .withField(StandardField.ISSUE, Integer.toString(i)));\n        }\n        entries.get(3).setType(StandardEntryType.Thesis);\n        dbmsProcessor.insertEntries(entries);\n\n        Map<Integer, Map<String, String>> actualFieldMap = new HashMap<>();\n\n        try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertTrue(entryResultSet.next());\n            assertEquals(1, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertTrue(entryResultSet.next());\n            assertEquals(2, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertTrue(entryResultSet.next());\n            assertEquals(3, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertTrue(entryResultSet.next());\n            assertEquals(4, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"thesis\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertTrue(entryResultSet.next());\n            assertEquals(5, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertFalse(entryResultSet.next());\n\n            try (ResultSet fieldResultSet = selectFrom(\"FIELD\", dbmsConnection, dbmsProcessor)) {\n                while (fieldResultSet.next()) {\n                    if (actualFieldMap.keySet().contains(fieldResultSet.getInt(\"ENTRY_SHARED_ID\"))) {\n                        actualFieldMap.get(fieldResultSet.getInt(\"ENTRY_SHARED_ID\")).put(\n                                fieldResultSet.getString(\"NAME\"), fieldResultSet.getString(\"VALUE\"));\n                    } else {\n                        int sharedId = fieldResultSet.getInt(\"ENTRY_SHARED_ID\");\n                        actualFieldMap.put(sharedId,\n                                new HashMap<>());\n                        actualFieldMap.get(sharedId).put(fieldResultSet.getString(\"NAME\"),\n                                        fieldResultSet.getString(\"VALUE\"));\n                    }\n                }\n            }\n        }\n        Map<Integer, Map<String, String>> expectedFieldMap = entries.stream()\n                                                                   .collect(Collectors.toMap(bibEntry -> bibEntry.getSharedBibEntryData().getSharedID(),\n                                                                           (bibEntry) -> bibEntry.getFieldMap().entrySet().stream()\n                                                                                           .collect(Collectors.toMap((entry) -> entry.getKey().getName(), Map.Entry::getValue))));\n\n        assertEquals(expectedFieldMap, actualFieldMap);\n    }\n","date":"2020-02-20 07:57:05","endLine":155,"groupId":"12043","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInsertMultipleEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fe/7c59b4263bee04c4c7b751a10005d8d35d3e21.src","preCode":"    void testInsertMultipleEntries() throws SQLException {\n        List<BibEntry> entries = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            entries.add(new BibEntry(StandardEntryType.Article).withField(StandardField.JOURNAL, \"journal \" + i)\n            .withField(StandardField.ISSUE, Integer.toString(i)));\n        }\n        entries.get(3).setType(StandardEntryType.Thesis);\n        dbmsProcessor.insertEntries(entries);\n\n        Map<Integer, Map<String, String>> actualFieldMap = new HashMap<>();\n\n        try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertTrue(entryResultSet.next());\n            assertEquals(1, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertTrue(entryResultSet.next());\n            assertEquals(2, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertTrue(entryResultSet.next());\n            assertEquals(3, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertTrue(entryResultSet.next());\n            assertEquals(4, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"thesis\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertTrue(entryResultSet.next());\n            assertEquals(5, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertFalse(entryResultSet.next());\n\n            try (ResultSet fieldResultSet = selectFrom(\"FIELD\", dbmsConnection, dbmsProcessor)) {\n                while (fieldResultSet.next()) {\n                    if (actualFieldMap.keySet().contains(fieldResultSet.getInt(\"ENTRY_SHARED_ID\"))) {\n                        actualFieldMap.get(fieldResultSet.getInt(\"ENTRY_SHARED_ID\")).put(\n                                fieldResultSet.getString(\"NAME\"), fieldResultSet.getString(\"VALUE\"));\n                    } else {\n                        int sharedId = fieldResultSet.getInt(\"ENTRY_SHARED_ID\");\n                        actualFieldMap.put(sharedId,\n                                new HashMap<>());\n                        actualFieldMap.get(sharedId).put(fieldResultSet.getString(\"NAME\"),\n                                        fieldResultSet.getString(\"VALUE\"));\n                    }\n                }\n            }\n        }\n        Map<Integer, Map<String, String>> expectedFieldMap = entries.stream()\n                                                                   .collect(Collectors.toMap(bibEntry -> bibEntry.getSharedBibEntryData().getSharedID(),\n                                                                           (bibEntry) -> bibEntry.getFieldMap().entrySet().stream()\n                                                                                           .collect(Collectors.toMap((entry) -> entry.getKey().getName(), Map.Entry::getValue))));\n\n        assertEquals(expectedFieldMap, actualFieldMap);\n    }\n","realPath":"src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"MB"}],"commitId":"93196eeb819024079e94dd1eea3b22af993723cf","commitMessage":"@@@[WIP] Initial work on DBMSProcessor batch entry insertion into ENTRY table (#5814)\n\n* Initial work on DBMSProcessor entry insertion into ENTRY table\n\n* Change syntax for Oracle multi-row insert SQL statement\n\n* Run tests also when source files changed\n\n* Add to comment about Oracle\n\n* Assume ResultSet is in order for setting shared IDs\n\n* Add insertEntry for DBMSProcessor tests and fix PostgresSQLProcessor\n\n* Fix SQL typo\n\n* Separate table drops in Oracle tests\n\n* Remove CI tests that were added in branch\n\n* Work on unit test for DBMSProcessor insertEntries\n\n* Fix bug in DBMSProcessorTest and simplify DBMSProcessor.FilterForBibEntryExistence\n\n* Remove Oracle connection bug with wrong port\n\n* Add Oracle insertIntoEntryTable\n\n* Oracle connection fix - taken from fix_fields_sql branch\n\n* Fix typo bug\n\n* Clean up code\n\n* Remove commented blocks\n\n* Remove comment about needing a test that probably isn't necessary\n\n* Manually merge fix_fields_sql OracleProcessor (just add method)\n\n* Emphasize todo\n\n* setSharedID into OracleProcessor entry table method\n\n* Add shared id to preparedEntryStatement\n\n* Make Oracle insertIntoEntryTable iterative - pasted from master - not yet tested\n\n* Add fields to fields table in parallel\n\n* Reset test trace length\n\n* Fix checkStyle\n\n* Revert port setting\n\nCo-authored-by: Tobias Diez <tobiasdiez@gmx.de>\n","date":"2020-02-20 07:57:05","modifiedFileCount":"6","status":"M","submitter":"Abraham Polk"},{"authorTime":"2020-09-08 21:34:34","codes":[{"authorDate":"2020-02-20 07:57:05","commitOrder":8,"curCode":"    void testInsertEntry() throws SQLException {\n        BibEntry expectedEntry = getBibEntryExample();\n\n        dbmsProcessor.insertEntry(expectedEntry);\n\n        BibEntry emptyEntry = getBibEntryExample();\n        emptyEntry.getSharedBibEntryData().setSharedID(1);\n        dbmsProcessor.insertEntry(emptyEntry); \r\n\n        Map<String, String> actualFieldMap = new HashMap<>();\n\n        try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertTrue(entryResultSet.next());\n            assertEquals(1, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"inproceedings\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertFalse(entryResultSet.next());\n\n            try (ResultSet fieldResultSet = selectFrom(\"FIELD\", dbmsConnection, dbmsProcessor)) {\n                while (fieldResultSet.next()) {\n                    actualFieldMap.put(fieldResultSet.getString(\"NAME\"), fieldResultSet.getString(\"VALUE\"));\n                }\n            }\n        }\n\n        Map<String, String> expectedFieldMap = expectedEntry.getFieldMap().entrySet().stream().collect(Collectors.toMap((entry) -> entry.getKey().getName(), Map.Entry::getValue));\n\n        assertEquals(expectedFieldMap, actualFieldMap);\n    }\n","date":"2020-02-20 07:57:05","endLine":97,"groupId":"10363","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInsertEntry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fe/7c59b4263bee04c4c7b751a10005d8d35d3e21.src","preCode":"    void testInsertEntry() throws SQLException {\n        BibEntry expectedEntry = getBibEntryExample();\n\n        dbmsProcessor.insertEntry(expectedEntry);\n\n        BibEntry emptyEntry = getBibEntryExample();\n        emptyEntry.getSharedBibEntryData().setSharedID(1);\n        dbmsProcessor.insertEntry(emptyEntry); \r\n\n        Map<String, String> actualFieldMap = new HashMap<>();\n\n        try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertTrue(entryResultSet.next());\n            assertEquals(1, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"inproceedings\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertFalse(entryResultSet.next());\n\n            try (ResultSet fieldResultSet = selectFrom(\"FIELD\", dbmsConnection, dbmsProcessor)) {\n                while (fieldResultSet.next()) {\n                    actualFieldMap.put(fieldResultSet.getString(\"NAME\"), fieldResultSet.getString(\"VALUE\"));\n                }\n            }\n        }\n\n        Map<String, String> expectedFieldMap = expectedEntry.getFieldMap().entrySet().stream().collect(Collectors.toMap((entry) -> entry.getKey().getName(), Map.Entry::getValue));\n\n        assertEquals(expectedFieldMap, actualFieldMap);\n    }\n","realPath":"src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"},{"authorDate":"2020-09-08 21:34:34","commitOrder":8,"curCode":"    void testInsertMultipleEntries() throws SQLException {\n        List<BibEntry> entries = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            entries.add(new BibEntry(StandardEntryType.Article).withField(StandardField.JOURNAL, \"journal \" + i)\n                                                               .withField(StandardField.ISSUE, Integer.toString(i)));\n        }\n        entries.get(3).setType(StandardEntryType.Thesis);\n        dbmsProcessor.insertEntries(entries);\n\n        Map<Integer, Map<String, String>> actualFieldMap = new HashMap<>();\n\n        try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertTrue(entryResultSet.next());\n            assertEquals(1, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertTrue(entryResultSet.next());\n            assertEquals(2, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertTrue(entryResultSet.next());\n            assertEquals(3, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertTrue(entryResultSet.next());\n            assertEquals(4, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"thesis\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertTrue(entryResultSet.next());\n            assertEquals(5, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertFalse(entryResultSet.next());\n\n            try (ResultSet fieldResultSet = selectFrom(\"FIELD\", dbmsConnection, dbmsProcessor)) {\n                while (fieldResultSet.next()) {\n                    if (actualFieldMap.containsKey(fieldResultSet.getInt(\"ENTRY_SHARED_ID\"))) {\n                        actualFieldMap.get(fieldResultSet.getInt(\"ENTRY_SHARED_ID\")).put(\n                                fieldResultSet.getString(\"NAME\"), fieldResultSet.getString(\"VALUE\"));\n                    } else {\n                        int sharedId = fieldResultSet.getInt(\"ENTRY_SHARED_ID\");\n                        actualFieldMap.put(sharedId,\n                                new HashMap<>());\n                        actualFieldMap.get(sharedId).put(fieldResultSet.getString(\"NAME\"),\n                                fieldResultSet.getString(\"VALUE\"));\n                    }\n                }\n            }\n        }\n        Map<Integer, Map<String, String>> expectedFieldMap = entries.stream()\n                                                                    .collect(Collectors.toMap(bibEntry -> bibEntry.getSharedBibEntryData().getSharedID(),\n                                                                            (bibEntry) -> bibEntry.getFieldMap().entrySet().stream()\n                                                                                                  .collect(Collectors.toMap((entry) -> entry.getKey().getName(), Map.Entry::getValue))));\n\n        assertEquals(expectedFieldMap, actualFieldMap);\n    }\n","date":"2020-09-08 21:34:34","endLine":388,"groupId":"10363","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInsertMultipleEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/97/732a6ca5d63d456e86156c99482a0d61685796.src","preCode":"    void testInsertMultipleEntries() throws SQLException {\n        List<BibEntry> entries = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            entries.add(new BibEntry(StandardEntryType.Article).withField(StandardField.JOURNAL, \"journal \" + i)\n            .withField(StandardField.ISSUE, Integer.toString(i)));\n        }\n        entries.get(3).setType(StandardEntryType.Thesis);\n        dbmsProcessor.insertEntries(entries);\n\n        Map<Integer, Map<String, String>> actualFieldMap = new HashMap<>();\n\n        try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertTrue(entryResultSet.next());\n            assertEquals(1, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertTrue(entryResultSet.next());\n            assertEquals(2, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertTrue(entryResultSet.next());\n            assertEquals(3, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertTrue(entryResultSet.next());\n            assertEquals(4, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"thesis\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertTrue(entryResultSet.next());\n            assertEquals(5, entryResultSet.getInt(\"SHARED_ID\"));\n            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n            assertFalse(entryResultSet.next());\n\n            try (ResultSet fieldResultSet = selectFrom(\"FIELD\", dbmsConnection, dbmsProcessor)) {\n                while (fieldResultSet.next()) {\n                    if (actualFieldMap.keySet().contains(fieldResultSet.getInt(\"ENTRY_SHARED_ID\"))) {\n                        actualFieldMap.get(fieldResultSet.getInt(\"ENTRY_SHARED_ID\")).put(\n                                fieldResultSet.getString(\"NAME\"), fieldResultSet.getString(\"VALUE\"));\n                    } else {\n                        int sharedId = fieldResultSet.getInt(\"ENTRY_SHARED_ID\");\n                        actualFieldMap.put(sharedId,\n                                new HashMap<>());\n                        actualFieldMap.get(sharedId).put(fieldResultSet.getString(\"NAME\"),\n                                        fieldResultSet.getString(\"VALUE\"));\n                    }\n                }\n            }\n        }\n        Map<Integer, Map<String, String>> expectedFieldMap = entries.stream()\n                                                                   .collect(Collectors.toMap(bibEntry -> bibEntry.getSharedBibEntryData().getSharedID(),\n                                                                           (bibEntry) -> bibEntry.getFieldMap().entrySet().stream()\n                                                                                           .collect(Collectors.toMap((entry) -> entry.getKey().getName(), Map.Entry::getValue))));\n\n        assertEquals(expectedFieldMap, actualFieldMap);\n    }\n","realPath":"src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"}],"commitId":"6dec1747d8a1c89f6c62fc1d1939d88411f17eba","commitMessage":"@@@Complete rebranding of `bibtexkey` as `citationkey` (#6875)\n\n","date":"2020-09-08 21:34:34","modifiedFileCount":"127","status":"M","submitter":"Tobias Diez"}]
