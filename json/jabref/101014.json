[{"authorTime":"2018-07-13 18:23:05","codes":[{"authorDate":"2019-10-25 18:24:37","commitOrder":4,"curCode":"    public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n        if (StringUtil.isBlank(identifier)) {\n            return Optional.empty();\n        }\n\n        try {\n            List<String> bibcodes = fetchBibcodes(getURLForID(identifier));\n            List<BibEntry> fetchedEntries = performSearchByIds(bibcodes);\n\n            if (fetchedEntries.isEmpty()) {\n                return Optional.empty();\n            }\n            if (fetchedEntries.size() > 1) {\n                LOGGER.info(\"Fetcher \" + getName() + \"found more than one result for identifier \" + identifier\n                        + \". We will use the first entry.\");\n            }\n            BibEntry entry = fetchedEntries.get(0);\n            return Optional.of(entry);\n        } catch (URISyntaxException e) {\n            throw new FetcherException(\"Search URI is malformed\", e);\n        } catch (IOException e) {\n            throw new FetcherException(\"A network error occurred\", e);\n        }\n    }\n","date":"2019-10-25 18:24:37","endLine":237,"groupId":"5787","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"performSearchById","params":"(Stringidentifier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/70/f81f095dda3e960ee83675edec8068eca3e213.src","preCode":"    public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n        if (StringUtil.isBlank(identifier)) {\n            return Optional.empty();\n        }\n\n        try {\n            List<String> bibcodes = fetchBibcodes(getURLForID(identifier));\n            List<BibEntry> fetchedEntries = performSearchByIds(bibcodes);\n\n            if (fetchedEntries.isEmpty()) {\n                return Optional.empty();\n            }\n            if (fetchedEntries.size() > 1) {\n                LOGGER.info(\"Fetcher \" + getName() + \"found more than one result for identifier \" + identifier\n                        + \". We will use the first entry.\");\n            }\n            BibEntry entry = fetchedEntries.get(0);\n            return Optional.of(entry);\n        } catch (URISyntaxException e) {\n            throw new FetcherException(\"Search URI is malformed\", e);\n        } catch (IOException e) {\n            throw new FetcherException(\"A network error occurred\", e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/AstrophysicsDataSystem.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"B"},{"authorDate":"2018-07-13 18:23:05","commitOrder":4,"curCode":"    default Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n        if (StringUtil.isBlank(identifier)) {\n            return Optional.empty();\n        }\n\n        try (InputStream stream = new URLDownload(getURLForID(identifier)).asInputStream()) {\n            List<BibEntry> fetchedEntries = getParser().parseEntries(stream);\n\n            if (fetchedEntries.isEmpty()) {\n                return Optional.empty();\n            }\n\n            if (fetchedEntries.size() > 1) {\n                LOGGER.info(\"Fetcher \" + getName() + \"found more than one result for identifier \" + identifier\n                        + \". We will use the first entry.\");\n            }\n\n            BibEntry entry = fetchedEntries.get(0);\n\n            \r\n            doPostCleanup(entry);\n\n            return Optional.of(entry);\n        } catch (URISyntaxException e) {\n            throw new FetcherException(\"Search URI is malformed\", e);\n        } catch (IOException e) {\n            \r\n            throw new FetcherException(\"A network error occurred\", e);\n        } catch (ParseException e) {\n            throw new FetcherException(\"An internal parser error occurred\", e);\n        }\n    }\n","date":"2018-07-13 18:23:05","endLine":89,"groupId":"6841","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"performSearchById","params":"(Stringidentifier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/29/c1ded0e0598416c5be7e1a82c2c47743a6b45a.src","preCode":"    default Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n        if (StringUtil.isBlank(identifier)) {\n            return Optional.empty();\n        }\n\n        try (InputStream stream = new URLDownload(getURLForID(identifier)).asInputStream()) {\n            List<BibEntry> fetchedEntries = getParser().parseEntries(stream);\n\n            if (fetchedEntries.isEmpty()) {\n                return Optional.empty();\n            }\n\n            if (fetchedEntries.size() > 1) {\n                LOGGER.info(\"Fetcher \" + getName() + \"found more than one result for identifier \" + identifier\n                        + \". We will use the first entry.\");\n            }\n\n            BibEntry entry = fetchedEntries.get(0);\n\n            \r\n            doPostCleanup(entry);\n\n            return Optional.of(entry);\n        } catch (URISyntaxException e) {\n            throw new FetcherException(\"Search URI is malformed\", e);\n        } catch (IOException e) {\n            \r\n            throw new FetcherException(\"A network error occurred\", e);\n        } catch (ParseException e) {\n            throw new FetcherException(\"An internal parser error occurred\", e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/IdBasedParserFetcher.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"NB"}],"commitId":"fdd06d74243c1137eca75d22959fb8f1abde65cf","commitMessage":"@@@New ADS Fetcher (#5501)\n\n* Changed performSearch to default implementation\n\nRemoves method as it is essentially the same as the default implementation.\n\n* Added new ADS fetcher\n\nAdded a new ADS fetcher that uses the new ADS API.  ref #4949\nPreserve the old fetcher until the new fetcher is stable/ well tested\n\n* Added new ADS fetcher\n\nAdded a new ADS fetcher that uses the new ADS API.  ref #4949\nPreserve the old fetcher until the new fetcher is stable/ well tested\n\n* Added new ADS fetcher\n\nAdded a new ADS fetcher that uses the new ADS API.  ref #4949\nPreserve the old fetcher until the new fetcher is stable/ well tested\n\n* added cleanup\n\n* support doi and ads bibcodes\n\n* fixes wrong search syntax\n\n* fixed test cases to API response\n\n* fixed bug where equals doesnt work with unknown field\n\n* changed array method parameters to Collections\n\n* removes json module dependency\n\n* replace old fetcher with the new one\n\n* replace old fetcher with the new one\n\n* added Javadoc\n\n* Add token\n","date":"2019-10-25 18:24:37","modifiedFileCount":"2","status":"M","submitter":"Johannes Hupe"},{"authorTime":"2020-07-09 17:48:40","codes":[{"authorDate":"2020-07-09 17:48:40","commitOrder":5,"curCode":"    public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n        if (StringUtil.isBlank(identifier)) {\n            return Optional.empty();\n        }\n\n        try {\n            List<String> bibcodes = fetchBibcodes(getUrlForIdentifier(identifier));\n            List<BibEntry> fetchedEntries = performSearchByIds(bibcodes);\n\n            if (fetchedEntries.isEmpty()) {\n                return Optional.empty();\n            }\n            if (fetchedEntries.size() > 1) {\n                LOGGER.info(\"Fetcher \" + getName() + \"found more than one result for identifier \" + identifier\n                        + \". We will use the first entry.\");\n            }\n            BibEntry entry = fetchedEntries.get(0);\n            return Optional.of(entry);\n        } catch (URISyntaxException e) {\n            throw new FetcherException(\"Search URI is malformed\", e);\n        } catch (IOException e) {\n            throw new FetcherException(\"A network error occurred\", e);\n        }\n    }\n","date":"2020-07-09 17:48:40","endLine":247,"groupId":"101014","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"performSearchById","params":"(Stringidentifier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/33/fdcabbea511f25511d7409af48814a79175896.src","preCode":"    public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n        if (StringUtil.isBlank(identifier)) {\n            return Optional.empty();\n        }\n\n        try {\n            List<String> bibcodes = fetchBibcodes(getURLForID(identifier));\n            List<BibEntry> fetchedEntries = performSearchByIds(bibcodes);\n\n            if (fetchedEntries.isEmpty()) {\n                return Optional.empty();\n            }\n            if (fetchedEntries.size() > 1) {\n                LOGGER.info(\"Fetcher \" + getName() + \"found more than one result for identifier \" + identifier\n                        + \". We will use the first entry.\");\n            }\n            BibEntry entry = fetchedEntries.get(0);\n            return Optional.of(entry);\n        } catch (URISyntaxException e) {\n            throw new FetcherException(\"Search URI is malformed\", e);\n        } catch (IOException e) {\n            throw new FetcherException(\"A network error occurred\", e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/fetcher/AstrophysicsDataSystem.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"},{"authorDate":"2020-07-09 17:48:40","commitOrder":5,"curCode":"    default Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n        if (StringUtil.isBlank(identifier)) {\n            return Optional.empty();\n        }\n\n        try (InputStream stream = getUrlDownload(getUrlForIdentifier(identifier)).asInputStream()) {\n            List<BibEntry> fetchedEntries = getParser().parseEntries(stream);\n\n            if (fetchedEntries.isEmpty()) {\n                return Optional.empty();\n            }\n\n            if (fetchedEntries.size() > 1) {\n                LOGGER.info(\"Fetcher \" + getName() + \"found more than one result for identifier \" + identifier\n                        + \". We will use the first entry.\");\n            }\n\n            BibEntry entry = fetchedEntries.get(0);\n\n            \r\n            doPostCleanup(entry);\n\n            return Optional.of(entry);\n        } catch (URISyntaxException e) {\n            throw new FetcherException(\"Search URI is malformed\", e);\n        } catch (IOException e) {\n            \r\n            throw new FetcherException(\"A network error occurred\", e);\n        } catch (ParseException e) {\n            throw new FetcherException(\"An internal parser error occurred\", e);\n        }\n    }\n","date":"2020-07-09 17:48:40","endLine":90,"groupId":"101014","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"performSearchById","params":"(Stringidentifier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/e2/d232273044a0904a95969a8a3d4f9a05008f8c.src","preCode":"    default Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n        if (StringUtil.isBlank(identifier)) {\n            return Optional.empty();\n        }\n\n        try (InputStream stream = new URLDownload(getURLForID(identifier)).asInputStream()) {\n            List<BibEntry> fetchedEntries = getParser().parseEntries(stream);\n\n            if (fetchedEntries.isEmpty()) {\n                return Optional.empty();\n            }\n\n            if (fetchedEntries.size() > 1) {\n                LOGGER.info(\"Fetcher \" + getName() + \"found more than one result for identifier \" + identifier\n                        + \". We will use the first entry.\");\n            }\n\n            BibEntry entry = fetchedEntries.get(0);\n\n            \r\n            doPostCleanup(entry);\n\n            return Optional.of(entry);\n        } catch (URISyntaxException e) {\n            throw new FetcherException(\"Search URI is malformed\", e);\n        } catch (IOException e) {\n            \r\n            throw new FetcherException(\"A network error occurred\", e);\n        } catch (ParseException e) {\n            throw new FetcherException(\"An internal parser error occurred\", e);\n        }\n    }\n","realPath":"src/main/java/org/jabref/logic/importer/IdBasedParserFetcher.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"20e78a4959bb2ccc0155f3a2cd4bf107c7c11352","commitMessage":"@@@mEDRA DOI fetcher implementation. (#6641)\n\n* mEDRA DOI fetcher implementation.\n\n* mEDRA DOI fetcher implementation\n\n* mEDRA DOI fetcher implementation\n\n* mEDRA DOI fetcher implementation\n\n* mEDRA DOI fetcher implementation\n\n* mEDRA DOI fetcher implementation\n\n* mEDRA DOI fetcher implementation\n\n* mEDRA DOI fetcher implementation\n\n* mEDRA DOI fetcher implementation\n\n* mEDRA DOI fetcher implementation\n\n* Revert wrong merge\n\n* mEDRA DOI fetcher implementation\n\n* Rewrite JsonReader to accept an empty input stream\n\n* Introduce \"getUrlDownloadForIdentifier\" and shrink fetcher code\n\n- Rename getURLForID to getUrlForIdentifier\n- Shrink Medra fetcher\n- Shrink CrossRef fetcher\n\n* Use parameterized tests (and add ISSN to Cisternino Paola)\n\n* Fix parsing of names\n\n* Fix checkstyle\n\n* Move \"getUrlDownload\" up to WebFetcher\n\nReastion: It is the common base of both SearchBasedParserFetcher and IdBasedParserFetcher\n\n* Use new method \"getUrlDownload\"\n\n* mEDRA DOI fetcher implementation\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>\nCo-authored-by: Christoph <siedlerkiller@gmail.com>","date":"2020-07-09 17:48:40","modifiedFileCount":"20","status":"M","submitter":"Giovanni Caldarola"}]
