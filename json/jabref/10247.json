[{"authorTime":"2017-02-17 05:41:47","codes":[{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    public void testImportSingleEntries() throws IOException, URISyntaxException {\n\n        for (int n = 3; n <= 7; n++) {\n            Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest\" + n + \".txt\").toURI());\n            try (InputStream nis = OvidImporter.class.getResourceAsStream(\"OvidImporterTestBib\" + n + \".bib\")) {\n                List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase()\n                        .getEntries();\n                Assert.assertNotNull(entries);\n                Assert.assertEquals(1, entries.size());\n                BibEntryAssert.assertEquals(nis, entries.get(0));\n            }\n        }\n    }\n","date":"2017-02-17 05:41:47","endLine":155,"groupId":"2669","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testImportSingleEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/da/149a8e7e6ab7e71598a0e895caa97e3d6ca60a.src","preCode":"    public void testImportSingleEntries() throws IOException, URISyntaxException {\n\n        for (int n = 3; n <= 7; n++) {\n            Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest\" + n + \".txt\").toURI());\n            try (InputStream nis = OvidImporter.class.getResourceAsStream(\"OvidImporterTestBib\" + n + \".bib\")) {\n                List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase()\n                        .getEntries();\n                Assert.assertNotNull(entries);\n                Assert.assertEquals(1, entries.size());\n                BibEntryAssert.assertEquals(nis, entries.get(0));\n            }\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/OvidImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"B"},{"authorDate":"2017-02-17 05:41:47","commitOrder":1,"curCode":"    private void assertImportOfMedlineFileEqualsBibtexFile(String medlineFile, String bibtexFile)\n            throws IOException, URISyntaxException {\n        Path file = Paths.get(MedlinePlainImporter.class.getResource(medlineFile).toURI());\n        try (InputStream nis = MedlinePlainImporter.class.getResourceAsStream(bibtexFile)) {\n            List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n            Assert.assertNotNull(entries);\n            assertEquals(1, entries.size());\n            BibEntryAssert.assertEquals(nis, entries.get(0));\n        }\n    }\n","date":"2017-02-17 05:41:47","endLine":156,"groupId":"7286","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertImportOfMedlineFileEqualsBibtexFile","params":"(StringmedlineFile@StringbibtexFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/7e/8216cd6a847acdbac4b558eb6218f6d5689a35.src","preCode":"    private void assertImportOfMedlineFileEqualsBibtexFile(String medlineFile, String bibtexFile)\n            throws IOException, URISyntaxException {\n        Path file = Paths.get(MedlinePlainImporter.class.getResource(medlineFile).toURI());\n        try (InputStream nis = MedlinePlainImporter.class.getResourceAsStream(bibtexFile)) {\n            List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n            Assert.assertNotNull(entries);\n            assertEquals(1, entries.size());\n            BibEntryAssert.assertEquals(nis, entries.get(0));\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/MedlinePlainImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"B"}],"commitId":"ebbeb1d249edf7134abf92d24c2031ae54d19881","commitMessage":"@@@Merge branch 'net-sf-to-org-jabref'\n","date":"2017-02-17 05:41:47","modifiedFileCount":"1","status":"B","submitter":"Oliver Kopp"},{"authorTime":"2018-02-01 01:07:12","codes":[{"authorDate":"2018-02-01 01:07:12","commitOrder":2,"curCode":"    public void testImportSingleEntries() throws IOException, URISyntaxException {\n\n        for (int n = 3; n <= 7; n++) {\n            Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest\" + n + \".txt\").toURI());\n            try (InputStream nis = OvidImporter.class.getResourceAsStream(\"OvidImporterTestBib\" + n + \".bib\")) {\n                List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase()\n                        .getEntries();\n                assertNotNull(entries);\n                assertEquals(1, entries.size());\n                BibEntryAssert.assertEquals(nis, entries.get(0));\n            }\n        }\n    }\n","date":"2018-02-01 01:07:12","endLine":162,"groupId":"2669","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testImportSingleEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fd/7b8a8d03273a8f48c7fd868b0e5ff0748b91bf.src","preCode":"    public void testImportSingleEntries() throws IOException, URISyntaxException {\n\n        for (int n = 3; n <= 7; n++) {\n            Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest\" + n + \".txt\").toURI());\n            try (InputStream nis = OvidImporter.class.getResourceAsStream(\"OvidImporterTestBib\" + n + \".bib\")) {\n                List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase()\n                        .getEntries();\n                Assert.assertNotNull(entries);\n                Assert.assertEquals(1, entries.size());\n                BibEntryAssert.assertEquals(nis, entries.get(0));\n            }\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/OvidImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"},{"authorDate":"2018-02-01 01:07:12","commitOrder":2,"curCode":"    private void assertImportOfMedlineFileEqualsBibtexFile(String medlineFile, String bibtexFile)\n            throws IOException, URISyntaxException {\n        Path file = Paths.get(MedlinePlainImporter.class.getResource(medlineFile).toURI());\n\n        try (InputStream nis = MedlinePlainImporter.class.getResourceAsStream(bibtexFile)) {\n            List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n            assertNotNull(entries);\n            assertEquals(1, entries.size());\n            BibEntryAssert.assertEquals(nis, entries.get(0));\n        }\n    }\n","date":"2018-02-01 01:07:12","endLine":157,"groupId":"7072","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertImportOfMedlineFileEqualsBibtexFile","params":"(StringmedlineFile@StringbibtexFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a5/f789b71257d988d63d913198ccd254df958a71.src","preCode":"    private void assertImportOfMedlineFileEqualsBibtexFile(String medlineFile, String bibtexFile)\n            throws IOException, URISyntaxException {\n        Path file = Paths.get(MedlinePlainImporter.class.getResource(medlineFile).toURI());\n        try (InputStream nis = MedlinePlainImporter.class.getResourceAsStream(bibtexFile)) {\n            List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n            Assert.assertNotNull(entries);\n            assertEquals(1, entries.size());\n            BibEntryAssert.assertEquals(nis, entries.get(0));\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/MedlinePlainImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"}],"commitId":"608e415b643995d3492ad12c411b101311d67358","commitMessage":"@@@Migrate importer tests to JUnit5 (#3665)\n\n* Migrate paramterized RIS tests to JUnit5\n\n* Extract generic importer testing code to new class\n\n* Switch to JUnit5 assertions in BibEntryAssert\n\n* Remove unused imports\n\n* Use static import for Assertion when possible\n\n* Extract file collection from importer test classes\n\n* Refactor biblioscape importer tests\n\n* Refactor BiblioscapeImporterTestTypes to JUnit5 syntax\n\n* Refactor CopacImporterTestFiles\n\n* Migrate medline importer tests to JUnit5\n\n* Convert BibTeXML importer tests to JUnit5\n\n* Move several non-parametric importer test classes to JUnit5\n\n* Refactor Medline importer tests to JUni5\n\n* Migrate parameterized MODS importer tests to JUnit5\n\n* Migrate MrDLib importer tests to JUnit5\n\n* Migrate MsBibImporter tests to JUnit5\n\n* Migrate OvidImporter tests to JUnit5\n\n* Migrate PdfContentImporter tests to JUnit5\n\n* Migrate PdfXmpImporter tests to JUnit5\n\n* Migrate RepecNepImporter tests to JUnit5\n\n* Migrate RISImporter tests to JUnit5\n\n* Migrate SilverPlatterImporter tests to JUnit5\n\n* Fix imports in SilverPlatterImporterTest\n\n* Fix BibTeXMLImporter tests\n\n* Fix and clarify BibTeXMLImporterTestTypes\n\n* Fix medline tests for malformed files\n\n* Remove unused imports\n\n* Fix broken test files that can be fixed and remove the ones with larger syntactic problem\n\n* Fix MODSImporter tests\n\n* Fix test file for MsBibImporter tests\n\n* Convert Before to BeforeEach in OvidImporterTests\n\n* Check starting line of a file for checking whether it is a PDF\n\n* Migrate additional BibTeXML tests to JUnit5\n\n* Refactor and restructure BibTexParser tests\n\n* Refactor CopacImporter tests\n\n* Refactor BibTeXMLImporter tests\n\n* Refactor EndnoteImporter tests\n\n* Refactor FreeCiteImporter tests\n\n* Refactor InspecImporter tests\n\n* Refactor IsiImporter tests\n\n* Refactor MedlineImporter tests\n\n* Refactor MrDLibImporter tests\n\n* Refactor MsBibImporter tests\n\n* Refactor OvidImporter tests\n\n* Refactor PdfXmpImporter tests\n\n* Refactor RepecNepImporter tests\n\n* Refactor SilverPlatterImporter tests\n\n* Fix a bunch of codacy issues\n","date":"2018-02-01 01:07:12","modifiedFileCount":"32","status":"M","submitter":"J?rg Lenhard"},{"authorTime":"2020-04-30 17:10:13","codes":[{"authorDate":"2020-04-30 17:10:13","commitOrder":3,"curCode":"    public void testImportSingleEntries() throws IOException, URISyntaxException {\n\n        for (int n = 3; n <= 7; n++) {\n            Path file = Path.of(OvidImporter.class.getResource(\"OvidImporterTest\" + n + \".txt\").toURI());\n            try (InputStream nis = OvidImporter.class.getResourceAsStream(\"OvidImporterTestBib\" + n + \".bib\")) {\n                List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase()\n                                                 .getEntries();\n                assertNotNull(entries);\n                assertEquals(1, entries.size());\n                BibEntryAssert.assertEquals(nis, entries.get(0));\n            }\n        }\n    }\n","date":"2020-04-30 17:10:13","endLine":163,"groupId":"10247","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testImportSingleEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/69/5ca2e9d7b8ac5174d2d0c49d7cd703dbdc58fb.src","preCode":"    public void testImportSingleEntries() throws IOException, URISyntaxException {\n\n        for (int n = 3; n <= 7; n++) {\n            Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest\" + n + \".txt\").toURI());\n            try (InputStream nis = OvidImporter.class.getResourceAsStream(\"OvidImporterTestBib\" + n + \".bib\")) {\n                List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase()\n                                                 .getEntries();\n                assertNotNull(entries);\n                assertEquals(1, entries.size());\n                BibEntryAssert.assertEquals(nis, entries.get(0));\n            }\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/OvidImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2020-04-30 17:10:13","commitOrder":3,"curCode":"    private void assertImportOfMedlineFileEqualsBibtexFile(String medlineFile, String bibtexFile)\n            throws IOException, URISyntaxException {\n        Path file = Path.of(MedlinePlainImporter.class.getResource(medlineFile).toURI());\n\n        try (InputStream nis = MedlinePlainImporter.class.getResourceAsStream(bibtexFile)) {\n            List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n            assertNotNull(entries);\n            assertEquals(1, entries.size());\n            BibEntryAssert.assertEquals(nis, entries.get(0));\n        }\n    }\n","date":"2020-04-30 17:10:13","endLine":157,"groupId":"10247","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertImportOfMedlineFileEqualsBibtexFile","params":"(StringmedlineFile@StringbibtexFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/1a/13480a1977d20eb46bbbc0c08752060e869dcb.src","preCode":"    private void assertImportOfMedlineFileEqualsBibtexFile(String medlineFile, String bibtexFile)\n            throws IOException, URISyntaxException {\n        Path file = Paths.get(MedlinePlainImporter.class.getResource(medlineFile).toURI());\n\n        try (InputStream nis = MedlinePlainImporter.class.getResourceAsStream(bibtexFile)) {\n            List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n            assertNotNull(entries);\n            assertEquals(1, entries.size());\n            BibEntryAssert.assertEquals(nis, entries.get(0));\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/MedlinePlainImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"}],"commitId":"862078a4db316cfd15bd77be68d3d2b010feab3b","commitMessage":"@@@Fixes #6357: File directory (#6377)\n\n* Fixes #6357: File directory\n\nBug was introduced in https://github.com/JabRef/jabref/commit/1b03f039aa4abf0812a3a8ae0ba248c08fdb39a3.\n\n* Fix tests\n\n* Replace Paths.get\n\n* Fix code style","date":"2020-04-30 17:10:13","modifiedFileCount":"110","status":"M","submitter":"Tobias Diez"}]
