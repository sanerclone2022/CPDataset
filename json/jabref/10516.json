[{"authorTime":"2018-02-01 01:07:12","codes":[{"authorDate":"2018-02-01 01:07:12","commitOrder":2,"curCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        assertEquals(\"misc\", entry.getType());\n        assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"Short abstract\"), entry.getField(\"abstract\"));\n        assertEquals(Optional.of(\"Musterbuch\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Einleitung\"), entry.getField(\"chaptertitle\"));\n\n        entry = entries.get(1);\n        assertEquals(\"inproceedings\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"editor\"));\n        assertEquals(Optional.of(\"Max the Editor\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(2);\n        assertEquals(\"incollection\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"Test\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        assertEquals(Optional.of(\"April\"), entry.getField(\"month\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(3);\n        assertEquals(\"book\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"Editor\"), entry.getField(\"editor\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"booktitle\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n        assertEquals(Optional.of(\"Address\"), entry.getField(\"address\"));\n        assertEquals(Optional.of(\"Publisher\"), entry.getField(\"publisher\"));\n\n        entry = entries.get(4);\n        assertEquals(\"article\", entry.getType());\n        assertEquals(Optional.of(\"2014\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"58\"), entry.getField(\"pages\"));\n        assertEquals(Optional.of(\"Test\"), entry.getField(\"address\"));\n        assertEquals(Optional.empty(), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"TestPublisher\"), entry.getField(\"publisher\"));\n    }\n","date":"2018-02-01 01:07:12","endLine":140,"groupId":"6983","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testImportEntries1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fd/7b8a8d03273a8f48c7fd868b0e5ff0748b91bf.src","preCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        assertEquals(\"misc\", entry.getType());\n        assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"Short abstract\"), entry.getField(\"abstract\"));\n        assertEquals(Optional.of(\"Musterbuch\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Einleitung\"), entry.getField(\"chaptertitle\"));\n\n        entry = entries.get(1);\n        assertEquals(\"inproceedings\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"editor\"));\n        assertEquals(Optional.of(\"Max the Editor\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(2);\n        assertEquals(\"incollection\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"Test\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        assertEquals(Optional.of(\"April\"), entry.getField(\"month\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(3);\n        assertEquals(\"book\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"Editor\"), entry.getField(\"editor\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"booktitle\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n        assertEquals(Optional.of(\"Address\"), entry.getField(\"address\"));\n        assertEquals(Optional.of(\"Publisher\"), entry.getField(\"publisher\"));\n\n        entry = entries.get(4);\n        assertEquals(\"article\", entry.getType());\n        assertEquals(Optional.of(\"2014\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"58\"), entry.getField(\"pages\"));\n        assertEquals(Optional.of(\"Test\"), entry.getField(\"address\"));\n        assertEquals(Optional.empty(), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"TestPublisher\"), entry.getField(\"publisher\"));\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/OvidImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"MB"},{"authorDate":"2018-02-01 01:07:12","commitOrder":2,"curCode":"    public void testWithMultipleEntries() throws IOException, URISyntaxException {\n        Path file = Paths\n                .get(MedlinePlainImporter.class.getResource(\"MedlinePlainImporterStringOutOfBounds.txt\").toURI());\n\n        List<BibEntry> entries = importer.importDatabase(file, Charsets.UTF_8).getDatabase().getEntries();\n\n        BibEntryAssert.assertEquals(MedlinePlainImporter.class, \"MedlinePlainImporterStringOutOfBounds.bib\", entries);\n    }\n","date":"2018-02-01 01:07:12","endLine":207,"groupId":"9693","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithMultipleEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/a5/f789b71257d988d63d913198ccd254df958a71.src","preCode":"    public void testWithMultipleEntries() throws IOException, URISyntaxException {\n        Path file = Paths\n                .get(MedlinePlainImporter.class.getResource(\"MedlinePlainImporterStringOutOfBounds.txt\").toURI());\n\n        List<BibEntry> entries = importer.importDatabase(file, Charsets.UTF_8).getDatabase().getEntries();\n\n        BibEntryAssert.assertEquals(MedlinePlainImporter.class, \"MedlinePlainImporterStringOutOfBounds.bib\", entries);\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/MedlinePlainImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"B"}],"commitId":"608e415b643995d3492ad12c411b101311d67358","commitMessage":"@@@Migrate importer tests to JUnit5 (#3665)\n\n* Migrate paramterized RIS tests to JUnit5\n\n* Extract generic importer testing code to new class\n\n* Switch to JUnit5 assertions in BibEntryAssert\n\n* Remove unused imports\n\n* Use static import for Assertion when possible\n\n* Extract file collection from importer test classes\n\n* Refactor biblioscape importer tests\n\n* Refactor BiblioscapeImporterTestTypes to JUnit5 syntax\n\n* Refactor CopacImporterTestFiles\n\n* Migrate medline importer tests to JUnit5\n\n* Convert BibTeXML importer tests to JUnit5\n\n* Move several non-parametric importer test classes to JUnit5\n\n* Refactor Medline importer tests to JUni5\n\n* Migrate parameterized MODS importer tests to JUnit5\n\n* Migrate MrDLib importer tests to JUnit5\n\n* Migrate MsBibImporter tests to JUnit5\n\n* Migrate OvidImporter tests to JUnit5\n\n* Migrate PdfContentImporter tests to JUnit5\n\n* Migrate PdfXmpImporter tests to JUnit5\n\n* Migrate RepecNepImporter tests to JUnit5\n\n* Migrate RISImporter tests to JUnit5\n\n* Migrate SilverPlatterImporter tests to JUnit5\n\n* Fix imports in SilverPlatterImporterTest\n\n* Fix BibTeXMLImporter tests\n\n* Fix and clarify BibTeXMLImporterTestTypes\n\n* Fix medline tests for malformed files\n\n* Remove unused imports\n\n* Fix broken test files that can be fixed and remove the ones with larger syntactic problem\n\n* Fix MODSImporter tests\n\n* Fix test file for MsBibImporter tests\n\n* Convert Before to BeforeEach in OvidImporterTests\n\n* Check starting line of a file for checking whether it is a PDF\n\n* Migrate additional BibTeXML tests to JUnit5\n\n* Refactor and restructure BibTexParser tests\n\n* Refactor CopacImporter tests\n\n* Refactor BibTeXMLImporter tests\n\n* Refactor EndnoteImporter tests\n\n* Refactor FreeCiteImporter tests\n\n* Refactor InspecImporter tests\n\n* Refactor IsiImporter tests\n\n* Refactor MedlineImporter tests\n\n* Refactor MrDLibImporter tests\n\n* Refactor MsBibImporter tests\n\n* Refactor OvidImporter tests\n\n* Refactor PdfXmpImporter tests\n\n* Refactor RepecNepImporter tests\n\n* Refactor SilverPlatterImporter tests\n\n* Fix a bunch of codacy issues\n","date":"2018-02-01 01:07:12","modifiedFileCount":"32","status":"M","submitter":"J?rg Lenhard"},{"authorTime":"2018-08-16 15:17:32","codes":[{"authorDate":"2018-02-01 01:07:12","commitOrder":3,"curCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        assertEquals(\"misc\", entry.getType());\n        assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"Short abstract\"), entry.getField(\"abstract\"));\n        assertEquals(Optional.of(\"Musterbuch\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Einleitung\"), entry.getField(\"chaptertitle\"));\n\n        entry = entries.get(1);\n        assertEquals(\"inproceedings\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"editor\"));\n        assertEquals(Optional.of(\"Max the Editor\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(2);\n        assertEquals(\"incollection\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"Test\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        assertEquals(Optional.of(\"April\"), entry.getField(\"month\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(3);\n        assertEquals(\"book\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"Editor\"), entry.getField(\"editor\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"booktitle\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n        assertEquals(Optional.of(\"Address\"), entry.getField(\"address\"));\n        assertEquals(Optional.of(\"Publisher\"), entry.getField(\"publisher\"));\n\n        entry = entries.get(4);\n        assertEquals(\"article\", entry.getType());\n        assertEquals(Optional.of(\"2014\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"58\"), entry.getField(\"pages\"));\n        assertEquals(Optional.of(\"Test\"), entry.getField(\"address\"));\n        assertEquals(Optional.empty(), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"TestPublisher\"), entry.getField(\"publisher\"));\n    }\n","date":"2018-02-01 01:07:12","endLine":140,"groupId":"6983","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testImportEntries1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fd/7b8a8d03273a8f48c7fd868b0e5ff0748b91bf.src","preCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        assertEquals(\"misc\", entry.getType());\n        assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"Short abstract\"), entry.getField(\"abstract\"));\n        assertEquals(Optional.of(\"Musterbuch\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Einleitung\"), entry.getField(\"chaptertitle\"));\n\n        entry = entries.get(1);\n        assertEquals(\"inproceedings\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"editor\"));\n        assertEquals(Optional.of(\"Max the Editor\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(2);\n        assertEquals(\"incollection\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"Test\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        assertEquals(Optional.of(\"April\"), entry.getField(\"month\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(3);\n        assertEquals(\"book\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"Editor\"), entry.getField(\"editor\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"booktitle\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n        assertEquals(Optional.of(\"Address\"), entry.getField(\"address\"));\n        assertEquals(Optional.of(\"Publisher\"), entry.getField(\"publisher\"));\n\n        entry = entries.get(4);\n        assertEquals(\"article\", entry.getType());\n        assertEquals(Optional.of(\"2014\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"58\"), entry.getField(\"pages\"));\n        assertEquals(Optional.of(\"Test\"), entry.getField(\"address\"));\n        assertEquals(Optional.empty(), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"TestPublisher\"), entry.getField(\"publisher\"));\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/OvidImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"},{"authorDate":"2018-08-16 15:17:32","commitOrder":3,"curCode":"    void testWithMultipleEntries() throws IOException, URISyntaxException {\n        Path file = Paths\n                .get(MedlinePlainImporter.class.getResource(\"MedlinePlainImporterStringOutOfBounds.txt\").toURI());\n\n        List<BibEntry> entries = importer.importDatabase(file, Charsets.UTF_8).getDatabase().getEntries();\n\n        BibEntryAssert.assertEquals(MedlinePlainImporter.class, \"MedlinePlainImporterStringOutOfBounds.bib\", entries);\n    }\n","date":"2018-08-16 15:17:32","endLine":204,"groupId":"9693","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithMultipleEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/2d/66b44a0c58dcc0650f112335ebda98c760b0e6.src","preCode":"    public void testWithMultipleEntries() throws IOException, URISyntaxException {\n        Path file = Paths\n                .get(MedlinePlainImporter.class.getResource(\"MedlinePlainImporterStringOutOfBounds.txt\").toURI());\n\n        List<BibEntry> entries = importer.importDatabase(file, Charsets.UTF_8).getDatabase().getEntries();\n\n        BibEntryAssert.assertEquals(MedlinePlainImporter.class, \"MedlinePlainImporterStringOutOfBounds.bib\", entries);\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/MedlinePlainImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"}],"commitId":"a880addc0b9a45ad4461cc46ed261ea7df9c812a","commitMessage":"@@@Fix for issue 3959: migrate all tests to JUnit 5 (#4260)\n\n* Update migrate from JUnit 4 to JUnit 5\n\n* Update migrate from JUnit 4 to JUnit 5\n\n* Trying to change git accounts on my laptop\n\n* Trying to change git accounts on my laptop\n\n* Trying to change git accounts on my laptop\n\n* Using static assert methods.\n\n* Migrate from JUnit 4 to JUnit 5\n\n*AuthorListParameterTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*XmpUtilWriterTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*XmpUtilReaderTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*SearchQueryHighlightObservableTest.java\n\n    -did not use MockitoExtension.class as its official version has not been released yet.\n\n* Migrate from JUnit 4 to JUnit 5\n\n*CitationEntryTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*RTFCharsTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ProtectedTermsLoaderTest.java\n\n    -When running tests.  outputs in command line are different. I don't know if this change is correct.\n\n* Trying to change to a new branch.\n\n* commit_test\n\n* delete my meaningless txt\n\n* Migrate from JUnit 4 to JUnit 5\n\n*AuthorAndToSemicolonReplacerTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*FileDialogConfigurationTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*IntegrityCheckTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ModsExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*AutoSetFileLinksUtilTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*MsBibExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*CsvExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*HtmlExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*HtmlExportFormatTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*RenamePdfCleanupTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ProtectedTermsListTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*MoveFilesCleanupTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n*ImporterTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n\n    *ExporterTest.java\n\n* Try to trigger the Travis CI build.\n\n* Try to trigger the Travis CI build.\n\n* Migrate from JUnit 4 to JUnit 5\n\n* Try to migrate from JUnit 4 to JUnit 5\n    *BibTeXMLExporterTestFiles.java\n        *Test.  not finished\n\n* Roll back to earlier version.\n    *BibTeXMLExporterTestFiles.java\n    *CleanupWorkerTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n    *ImportFormatReaderIntegrationTest.java\n\n* Migrate from JUnit 4 to JUnit 5\n    *MimeTypeDetectorTest.java\n\n* failed to modify CleanupWorkerTest\n\n* failed to modify cleanupWorkTest\n\n* change cleanupWorkerTest to initial\n\n* ***DatabaseTest***\nMigrate from JUnit 4 to JUnit 5\n    *DBMSProcessorTest.java\n        *Wait for the Travis CI\n\n* ***DatabaseTest***\nMigrate from JUnit 4 to JUnit 5\n    *DBMSProcessorTest.java\n        *Wait for the Travis CI\n\n* Migrate from JUnit 4 to JUnit 5\n    *BibTeXMLExporterTestFiles.java\n    *MSBibExportFormatTestFiles.java\n    *All the GUI tests\n\n* Migrate from JUnit 4 to JUnit 5\n    *CleanupWorkerTest.java\n\n    *It seems that worker doesn't work in cleanupRenamePdfRenamesRelativeFile() and cleanupRelativePathsConvertAbsoluteToRelativePath()\n\n* Migrate JUnit 4 to JUnit 5.\n    *AuthorListParameterTest.java\n        -Follow up tp the newest.\n\n* Migrate JUnit 4 to JUnit 5.\n    *CleanupWorkerTest.java\n        -Delete my sout.\n\n* Migrate JUnit 4 to JUnit 5.\n    *EntryTypesTest.java\n        -Just some method name changes.\n\n* Fix part of CleanupWorkerTest.\n    -cleanupRelativePathsConvertAbsoluteToRelativePath() test passed.\n    -The cleanupRenamePdfRenamesRelativeFile() test still failed.\n\n* Migrate and sync.\n    *CiteKeyBasedFileFinderTest.java\n\n* Migrate.\n    *FileUtilTest.java\nPartly migrate.\n    *ModsExportFormatTestFiles.java\n\n* Fix CleanupWorkerTest.java\n\n* Fix .travis.yml\n\n* Remove unnecessary @Rule.\n    *IntegrityCheckTest.java\n\n* AuxParserTest.java\n\n* BibtexParserTest.java\n\n* EntryComparatorTest.java\n\n* Migrate JUnit 4 to JUnit 5 -------by 1160300229\n\n* Migrate. Some tasks by my team members.\n    *LinkedFileViewModelTest.java\n    *RecursiveTreeItemTest.java\n    *UndoTest.java\n    *EntryComparatorTest.java\n    *MakeLabelWithDatabaseTest.java\n    *MakeLabelWithoutDatabaseTest.java\n    *CleanupUrlFormatterTest.java\n    *BibtexParserTest.java\n    *MedlinePlainImporterTest.java\n    *SilverPlatterImporterTest.java\n    *EntryLinkCheckerTest.java\n    *LocalizationKeyTest.java\n    *JabRefPreferencesTest.java\n\n* Fix 1160300302's error.\n\n* Remove unnecessary \"public\".\n    *AuxParserTest.java\n\n* fix architecture test by removing check for public make some classes default visibility level\n\n* Fix \"cannot find files\" problem in JUnit 4.\n\n* Migrate to JUnit 5.\n    *BibTeXMLExporterTestFiles.java\n    *ModsExportFormatTestFiles.java\n    *MSBibExportFormatTestFiles.java\n\n* Change the slash direction.\n    *BibTeXMLExporterTestFiles.java\n    *ModsExportFormatTestFiles.java\n    *MSBibExportFormatTestFiles.java\n\n* fix resolving of paths in msbibexporterpath update junit and correct resource dirs in gradle\n\n* Fix the path issue in\n    *BibTeXMLExporterTestFiles.java\n    *ModsExportFormatTestFiles.java\n\n* Disable the failing exporter tests and change the build.gradle\n\n* Fix the parent folder issue by make every path to their child once.\n    -You can see in the code. :)\n\n* Fix some minor issues.\n    -Use the NIO methods in MoveFilesCleanupTest.java\n\n    -Use toAbsolutePath() method in RenamePdfCleanupTest.java\n\n    -Rename \"tempFilename\" to \"tempFilePath\" in BibTeXMLExporterTestFiles.java\n\n* include main/java in resources as well convert legalcy file methods to nio\n","date":"2018-08-16 15:17:32","modifiedFileCount":"59","status":"M","submitter":"Yichen Sun"},{"authorTime":"2018-08-16 15:17:32","codes":[{"authorDate":"2019-08-02 15:20:10","commitOrder":4,"curCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        assertEquals(StandardEntryType.Misc, entry.getType());\n        assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"Short abstract\"), entry.getField(StandardField.ABSTRACT));\n        assertEquals(Optional.of(\"Musterbuch\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Einleitung\"), entry.getField(new UnknownField(\"chaptertitle\")));\n\n        entry = entries.get(1);\n        assertEquals(StandardEntryType.InProceedings, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.EDITOR));\n        assertEquals(Optional.of(\"Max the Editor\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.JOURNAL));\n        assertEquals(Optional.of(\"28\"), entry.getField(StandardField.VOLUME));\n        assertEquals(Optional.of(\"2\"), entry.getField(StandardField.ISSUE));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n\n        entry = entries.get(2);\n        assertEquals(StandardEntryType.InCollection, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"Test\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.JOURNAL));\n        assertEquals(Optional.of(\"28\"), entry.getField(StandardField.VOLUME));\n        assertEquals(Optional.of(\"2\"), entry.getField(StandardField.ISSUE));\n        assertEquals(Optional.of(\"April\"), entry.getField(StandardField.MONTH));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n\n        entry = entries.get(3);\n        assertEquals(StandardEntryType.Book, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"Editor\"), entry.getField(StandardField.EDITOR));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.BOOKTITLE));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n        assertEquals(Optional.of(\"Address\"), entry.getField(StandardField.ADDRESS));\n        assertEquals(Optional.of(\"Publisher\"), entry.getField(StandardField.PUBLISHER));\n\n        entry = entries.get(4);\n        assertEquals(StandardEntryType.Article, entry.getType());\n        assertEquals(Optional.of(\"2014\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"58\"), entry.getField(StandardField.PAGES));\n        assertEquals(Optional.of(\"Test\"), entry.getField(StandardField.ADDRESS));\n        assertEquals(Optional.empty(), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"TestPublisher\"), entry.getField(StandardField.PUBLISHER));\n    }\n","date":"2019-08-02 15:20:10","endLine":142,"groupId":"9693","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testImportEntries1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/85/396c42e155f791a761d8f9c230f94dc3a83d4d.src","preCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        assertEquals(\"misc\", entry.getType());\n        assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"Short abstract\"), entry.getField(\"abstract\"));\n        assertEquals(Optional.of(\"Musterbuch\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Einleitung\"), entry.getField(\"chaptertitle\"));\n\n        entry = entries.get(1);\n        assertEquals(\"inproceedings\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"editor\"));\n        assertEquals(Optional.of(\"Max the Editor\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(2);\n        assertEquals(\"incollection\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"Test\"), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"journal\"));\n        assertEquals(Optional.of(\"28\"), entry.getField(\"volume\"));\n        assertEquals(Optional.of(\"2\"), entry.getField(\"issue\"));\n        assertEquals(Optional.of(\"April\"), entry.getField(\"month\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n\n        entry = entries.get(3);\n        assertEquals(\"book\", entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(\"author\"));\n        assertEquals(Optional.of(\"2015\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"Editor\"), entry.getField(\"editor\"));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(\"booktitle\"));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(\"pages\"));\n        assertEquals(Optional.of(\"Address\"), entry.getField(\"address\"));\n        assertEquals(Optional.of(\"Publisher\"), entry.getField(\"publisher\"));\n\n        entry = entries.get(4);\n        assertEquals(\"article\", entry.getType());\n        assertEquals(Optional.of(\"2014\"), entry.getField(\"year\"));\n        assertEquals(Optional.of(\"58\"), entry.getField(\"pages\"));\n        assertEquals(Optional.of(\"Test\"), entry.getField(\"address\"));\n        assertEquals(Optional.empty(), entry.getField(\"title\"));\n        assertEquals(Optional.of(\"TestPublisher\"), entry.getField(\"publisher\"));\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/OvidImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2018-08-16 15:17:32","commitOrder":4,"curCode":"    void testWithMultipleEntries() throws IOException, URISyntaxException {\n        Path file = Paths\n                .get(MedlinePlainImporter.class.getResource(\"MedlinePlainImporterStringOutOfBounds.txt\").toURI());\n\n        List<BibEntry> entries = importer.importDatabase(file, Charsets.UTF_8).getDatabase().getEntries();\n\n        BibEntryAssert.assertEquals(MedlinePlainImporter.class, \"MedlinePlainImporterStringOutOfBounds.bib\", entries);\n    }\n","date":"2018-08-16 15:17:32","endLine":204,"groupId":"9693","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithMultipleEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/2d/66b44a0c58dcc0650f112335ebda98c760b0e6.src","preCode":"    void testWithMultipleEntries() throws IOException, URISyntaxException {\n        Path file = Paths\n                .get(MedlinePlainImporter.class.getResource(\"MedlinePlainImporterStringOutOfBounds.txt\").toURI());\n\n        List<BibEntry> entries = importer.importDatabase(file, Charsets.UTF_8).getDatabase().getEntries();\n\n        BibEntryAssert.assertEquals(MedlinePlainImporter.class, \"MedlinePlainImporterStringOutOfBounds.bib\", entries);\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/MedlinePlainImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"N"}],"commitId":"4b39b78e4afcd6c36b385f5c46f1d9a4eac2e29b","commitMessage":"@@@Move to extended enums for fields and entry types (#5148)\n\n* Introduce interface for fields\n\n* Continue using fields interface instead of strings\n\n* Introduce OrFields class\n\n* Move FieldProperty\n\n* Convert entry types to extended enum\n\n* Start fixing build\n\n* Fix build\n\n* Start fixing tests\n\n* Everything compiles again\n\n* Make model tests pass\n\n* Fix most tests\n\n* Fix build\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix a few more tests\n\n* Fix checkstyle issues\n\n* Fix more tests\n\n* Fix more tests\n\n* Disable test that fails on CI\n\n* Disable test that fails on CI\n","date":"2019-08-02 15:20:10","modifiedFileCount":"439","status":"M","submitter":"Tobias Diez"},{"authorTime":"2018-08-16 15:17:32","codes":[{"authorDate":"2020-04-30 17:10:13","commitOrder":5,"curCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Path.of(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        assertEquals(StandardEntryType.Misc, entry.getType());\n        assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"Short abstract\"), entry.getField(StandardField.ABSTRACT));\n        assertEquals(Optional.of(\"Musterbuch\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Einleitung\"), entry.getField(new UnknownField(\"chaptertitle\")));\n\n        entry = entries.get(1);\n        assertEquals(StandardEntryType.InProceedings, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.EDITOR));\n        assertEquals(Optional.of(\"Max the Editor\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.JOURNAL));\n        assertEquals(Optional.of(\"28\"), entry.getField(StandardField.VOLUME));\n        assertEquals(Optional.of(\"2\"), entry.getField(StandardField.ISSUE));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n\n        entry = entries.get(2);\n        assertEquals(StandardEntryType.InCollection, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"Test\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.JOURNAL));\n        assertEquals(Optional.of(\"28\"), entry.getField(StandardField.VOLUME));\n        assertEquals(Optional.of(\"2\"), entry.getField(StandardField.ISSUE));\n        assertEquals(Optional.of(\"April\"), entry.getField(StandardField.MONTH));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n\n        entry = entries.get(3);\n        assertEquals(StandardEntryType.Book, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"Editor\"), entry.getField(StandardField.EDITOR));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.BOOKTITLE));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n        assertEquals(Optional.of(\"Address\"), entry.getField(StandardField.ADDRESS));\n        assertEquals(Optional.of(\"Publisher\"), entry.getField(StandardField.PUBLISHER));\n\n        entry = entries.get(4);\n        assertEquals(StandardEntryType.Article, entry.getType());\n        assertEquals(Optional.of(\"2014\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"58\"), entry.getField(StandardField.PAGES));\n        assertEquals(Optional.of(\"Test\"), entry.getField(StandardField.ADDRESS));\n        assertEquals(Optional.empty(), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"TestPublisher\"), entry.getField(StandardField.PUBLISHER));\n    }\n","date":"2020-04-30 17:10:13","endLine":141,"groupId":"9693","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testImportEntries1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/69/5ca2e9d7b8ac5174d2d0c49d7cd703dbdc58fb.src","preCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Paths.get(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        assertEquals(StandardEntryType.Misc, entry.getType());\n        assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"Short abstract\"), entry.getField(StandardField.ABSTRACT));\n        assertEquals(Optional.of(\"Musterbuch\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Einleitung\"), entry.getField(new UnknownField(\"chaptertitle\")));\n\n        entry = entries.get(1);\n        assertEquals(StandardEntryType.InProceedings, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.EDITOR));\n        assertEquals(Optional.of(\"Max the Editor\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.JOURNAL));\n        assertEquals(Optional.of(\"28\"), entry.getField(StandardField.VOLUME));\n        assertEquals(Optional.of(\"2\"), entry.getField(StandardField.ISSUE));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n\n        entry = entries.get(2);\n        assertEquals(StandardEntryType.InCollection, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"Test\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.JOURNAL));\n        assertEquals(Optional.of(\"28\"), entry.getField(StandardField.VOLUME));\n        assertEquals(Optional.of(\"2\"), entry.getField(StandardField.ISSUE));\n        assertEquals(Optional.of(\"April\"), entry.getField(StandardField.MONTH));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n\n        entry = entries.get(3);\n        assertEquals(StandardEntryType.Book, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"Editor\"), entry.getField(StandardField.EDITOR));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.BOOKTITLE));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n        assertEquals(Optional.of(\"Address\"), entry.getField(StandardField.ADDRESS));\n        assertEquals(Optional.of(\"Publisher\"), entry.getField(StandardField.PUBLISHER));\n\n        entry = entries.get(4);\n        assertEquals(StandardEntryType.Article, entry.getType());\n        assertEquals(Optional.of(\"2014\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"58\"), entry.getField(StandardField.PAGES));\n        assertEquals(Optional.of(\"Test\"), entry.getField(StandardField.ADDRESS));\n        assertEquals(Optional.empty(), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"TestPublisher\"), entry.getField(StandardField.PUBLISHER));\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/OvidImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2018-08-16 15:17:32","commitOrder":5,"curCode":"    void testWithMultipleEntries() throws IOException, URISyntaxException {\n        Path file = Paths\n                .get(MedlinePlainImporter.class.getResource(\"MedlinePlainImporterStringOutOfBounds.txt\").toURI());\n\n        List<BibEntry> entries = importer.importDatabase(file, Charsets.UTF_8).getDatabase().getEntries();\n\n        BibEntryAssert.assertEquals(MedlinePlainImporter.class, \"MedlinePlainImporterStringOutOfBounds.bib\", entries);\n    }\n","date":"2018-08-16 15:17:32","endLine":204,"groupId":"9693","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithMultipleEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/2d/66b44a0c58dcc0650f112335ebda98c760b0e6.src","preCode":"    void testWithMultipleEntries() throws IOException, URISyntaxException {\n        Path file = Paths\n                .get(MedlinePlainImporter.class.getResource(\"MedlinePlainImporterStringOutOfBounds.txt\").toURI());\n\n        List<BibEntry> entries = importer.importDatabase(file, Charsets.UTF_8).getDatabase().getEntries();\n\n        BibEntryAssert.assertEquals(MedlinePlainImporter.class, \"MedlinePlainImporterStringOutOfBounds.bib\", entries);\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/MedlinePlainImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"N"}],"commitId":"862078a4db316cfd15bd77be68d3d2b010feab3b","commitMessage":"@@@Fixes #6357: File directory (#6377)\n\n* Fixes #6357: File directory\n\nBug was introduced in https://github.com/JabRef/jabref/commit/1b03f039aa4abf0812a3a8ae0ba248c08fdb39a3.\n\n* Fix tests\n\n* Replace Paths.get\n\n* Fix code style","date":"2020-04-30 17:10:13","modifiedFileCount":"110","status":"M","submitter":"Tobias Diez"},{"authorTime":"2020-09-02 19:40:52","codes":[{"authorDate":"2020-04-30 17:10:13","commitOrder":6,"curCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Path.of(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        assertEquals(StandardEntryType.Misc, entry.getType());\n        assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"Short abstract\"), entry.getField(StandardField.ABSTRACT));\n        assertEquals(Optional.of(\"Musterbuch\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Einleitung\"), entry.getField(new UnknownField(\"chaptertitle\")));\n\n        entry = entries.get(1);\n        assertEquals(StandardEntryType.InProceedings, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.EDITOR));\n        assertEquals(Optional.of(\"Max the Editor\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.JOURNAL));\n        assertEquals(Optional.of(\"28\"), entry.getField(StandardField.VOLUME));\n        assertEquals(Optional.of(\"2\"), entry.getField(StandardField.ISSUE));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n\n        entry = entries.get(2);\n        assertEquals(StandardEntryType.InCollection, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"Test\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.JOURNAL));\n        assertEquals(Optional.of(\"28\"), entry.getField(StandardField.VOLUME));\n        assertEquals(Optional.of(\"2\"), entry.getField(StandardField.ISSUE));\n        assertEquals(Optional.of(\"April\"), entry.getField(StandardField.MONTH));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n\n        entry = entries.get(3);\n        assertEquals(StandardEntryType.Book, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"Editor\"), entry.getField(StandardField.EDITOR));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.BOOKTITLE));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n        assertEquals(Optional.of(\"Address\"), entry.getField(StandardField.ADDRESS));\n        assertEquals(Optional.of(\"Publisher\"), entry.getField(StandardField.PUBLISHER));\n\n        entry = entries.get(4);\n        assertEquals(StandardEntryType.Article, entry.getType());\n        assertEquals(Optional.of(\"2014\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"58\"), entry.getField(StandardField.PAGES));\n        assertEquals(Optional.of(\"Test\"), entry.getField(StandardField.ADDRESS));\n        assertEquals(Optional.empty(), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"TestPublisher\"), entry.getField(StandardField.PUBLISHER));\n    }\n","date":"2020-04-30 17:10:13","endLine":141,"groupId":"10516","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testImportEntries1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/69/5ca2e9d7b8ac5174d2d0c49d7cd703dbdc58fb.src","preCode":"    public void testImportEntries1() throws IOException, URISyntaxException {\n        Path file = Path.of(OvidImporter.class.getResource(\"OvidImporterTest1.txt\").toURI());\n        List<BibEntry> entries = importer.importDatabase(file, StandardCharsets.UTF_8).getDatabase().getEntries();\n        assertEquals(5, entries.size());\n\n        BibEntry entry = entries.get(0);\n        assertEquals(StandardEntryType.Misc, entry.getType());\n        assertEquals(Optional.of(\"Mustermann and Musterfrau\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"Short abstract\"), entry.getField(StandardField.ABSTRACT));\n        assertEquals(Optional.of(\"Musterbuch\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Einleitung\"), entry.getField(new UnknownField(\"chaptertitle\")));\n\n        entry = entries.get(1);\n        assertEquals(StandardEntryType.InProceedings, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.EDITOR));\n        assertEquals(Optional.of(\"Max the Editor\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.JOURNAL));\n        assertEquals(Optional.of(\"28\"), entry.getField(StandardField.VOLUME));\n        assertEquals(Optional.of(\"2\"), entry.getField(StandardField.ISSUE));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n\n        entry = entries.get(2);\n        assertEquals(StandardEntryType.InCollection, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"Test\"), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.JOURNAL));\n        assertEquals(Optional.of(\"28\"), entry.getField(StandardField.VOLUME));\n        assertEquals(Optional.of(\"2\"), entry.getField(StandardField.ISSUE));\n        assertEquals(Optional.of(\"April\"), entry.getField(StandardField.MONTH));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n\n        entry = entries.get(3);\n        assertEquals(StandardEntryType.Book, entry.getType());\n        assertEquals(Optional.of(\"Max\"), entry.getField(StandardField.AUTHOR));\n        assertEquals(Optional.of(\"2015\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"Editor\"), entry.getField(StandardField.EDITOR));\n        assertEquals(Optional.of(\"Very Long Title\"), entry.getField(StandardField.BOOKTITLE));\n        assertEquals(Optional.of(\"103--106\"), entry.getField(StandardField.PAGES));\n        assertEquals(Optional.of(\"Address\"), entry.getField(StandardField.ADDRESS));\n        assertEquals(Optional.of(\"Publisher\"), entry.getField(StandardField.PUBLISHER));\n\n        entry = entries.get(4);\n        assertEquals(StandardEntryType.Article, entry.getType());\n        assertEquals(Optional.of(\"2014\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"58\"), entry.getField(StandardField.PAGES));\n        assertEquals(Optional.of(\"Test\"), entry.getField(StandardField.ADDRESS));\n        assertEquals(Optional.empty(), entry.getField(StandardField.TITLE));\n        assertEquals(Optional.of(\"TestPublisher\"), entry.getField(StandardField.PUBLISHER));\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/OvidImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"N"},{"authorDate":"2020-09-02 19:40:52","commitOrder":6,"curCode":"    void testWithMultipleEntries() throws IOException, URISyntaxException {\n        Path file = Path.of(MedlinePlainImporter.class.getResource(\"MedlinePlainImporterStringOutOfBounds.txt\").toURI());\n\n        List<BibEntry> entries = importer.importDatabase(file, Charsets.UTF_8).getDatabase().getEntries();\n\n        BibEntryAssert.assertEquals(MedlinePlainImporter.class, \"MedlinePlainImporterStringOutOfBounds.bib\", entries);\n    }\n","date":"2020-09-02 19:40:52","endLine":204,"groupId":"10516","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testWithMultipleEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fe/48bcb86cad30b08f3f0dfaa1873d0ca010096d.src","preCode":"    void testWithMultipleEntries() throws IOException, URISyntaxException {\n        Path file = Paths\n                .get(MedlinePlainImporter.class.getResource(\"MedlinePlainImporterStringOutOfBounds.txt\").toURI());\n\n        List<BibEntry> entries = importer.importDatabase(file, Charsets.UTF_8).getDatabase().getEntries();\n\n        BibEntryAssert.assertEquals(MedlinePlainImporter.class, \"MedlinePlainImporterStringOutOfBounds.bib\", entries);\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/MedlinePlainImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"}],"commitId":"1b35f8cb0040fdfb515974e78532598f07e11af2","commitMessage":"@@@Arch fix (#6825)\n\n","date":"2020-09-02 19:40:52","modifiedFileCount":"172","status":"M","submitter":"Tobias Diez"}]
