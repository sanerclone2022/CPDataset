[{"authorTime":"2019-04-15 03:10:59","codes":[{"authorDate":"2018-11-15 18:41:35","commitOrder":3,"curCode":"    private void initialize() {\n        visualizer.setDecoration(new IconValidationDecorator());\n\n        viewModel = new SharedDatabaseLoginDialogViewModel(frame, dialogService);\n        databaseType.getItems().addAll(DBMSType.values());\n        databaseType.getSelectionModel().select(0);\n\n        database.textProperty().bindBidirectional(viewModel.databaseproperty());\n        host.textProperty().bindBidirectional(viewModel.hostProperty());\n        user.textProperty().bindBidirectional(viewModel.userProperty());\n        password.textProperty().bindBidirectional(viewModel.passwordProperty());\n        port.textProperty().bindBidirectional(viewModel.portProperty());\n        serverTimezone.textProperty().bindBidirectional(viewModel.serverTimezoneProperty());\n        databaseType.valueProperty().bindBidirectional(viewModel.selectedDbmstypeProperty());\n\n        folder.textProperty().bindBidirectional(viewModel.folderProperty());\n        browseButton.disableProperty().bind(viewModel.autosaveProperty().not());\n        folder.disableProperty().bind(viewModel.autosaveProperty().not());\n        autosave.selectedProperty().bindBidirectional(viewModel.autosaveProperty());\n\n        useSSL.selectedProperty().bindBidirectional(viewModel.useSSLProperty());\n\n        fileKeystore.textProperty().bindBidirectional(viewModel.keyStoreProperty());\n\n        browseKeystore.disableProperty().bind(viewModel.useSSLProperty().not());\n        passwordKeystore.disableProperty().bind(viewModel.useSSLProperty().not());\n        passwordKeystore.textProperty().bindBidirectional(viewModel.keyStorePasswordProperty());\n\n        \r\n        Platform.runLater(() -> {\n            visualizer.initVisualization(viewModel.dbValidation(), database, true);\n            visualizer.initVisualization(viewModel.hostValidation(), host, true);\n            visualizer.initVisualization(viewModel.portValidation(), port, true);\n            visualizer.initVisualization(viewModel.userValidation(), user, true);\n\n            EasyBind.subscribe(autosave.selectedProperty(), selected -> {\n                visualizer.initVisualization(viewModel.folderValidation(), folder, true);\n            });\n\n            EasyBind.subscribe(useSSL.selectedProperty(), selected -> {\n                visualizer.initVisualization(viewModel.keystoreValidation(), fileKeystore, true);\n            });\n        });\n    }\n","date":"2018-11-15 18:41:35","endLine":118,"groupId":"6293","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/61/2c2267aea5a54aa124b7436f6fb84350ed79e2.src","preCode":"    private void initialize() {\n        visualizer.setDecoration(new IconValidationDecorator());\n\n        viewModel = new SharedDatabaseLoginDialogViewModel(frame, dialogService);\n        databaseType.getItems().addAll(DBMSType.values());\n        databaseType.getSelectionModel().select(0);\n\n        database.textProperty().bindBidirectional(viewModel.databaseproperty());\n        host.textProperty().bindBidirectional(viewModel.hostProperty());\n        user.textProperty().bindBidirectional(viewModel.userProperty());\n        password.textProperty().bindBidirectional(viewModel.passwordProperty());\n        port.textProperty().bindBidirectional(viewModel.portProperty());\n        serverTimezone.textProperty().bindBidirectional(viewModel.serverTimezoneProperty());\n        databaseType.valueProperty().bindBidirectional(viewModel.selectedDbmstypeProperty());\n\n        folder.textProperty().bindBidirectional(viewModel.folderProperty());\n        browseButton.disableProperty().bind(viewModel.autosaveProperty().not());\n        folder.disableProperty().bind(viewModel.autosaveProperty().not());\n        autosave.selectedProperty().bindBidirectional(viewModel.autosaveProperty());\n\n        useSSL.selectedProperty().bindBidirectional(viewModel.useSSLProperty());\n\n        fileKeystore.textProperty().bindBidirectional(viewModel.keyStoreProperty());\n\n        browseKeystore.disableProperty().bind(viewModel.useSSLProperty().not());\n        passwordKeystore.disableProperty().bind(viewModel.useSSLProperty().not());\n        passwordKeystore.textProperty().bindBidirectional(viewModel.keyStorePasswordProperty());\n\n        \r\n        Platform.runLater(() -> {\n            visualizer.initVisualization(viewModel.dbValidation(), database, true);\n            visualizer.initVisualization(viewModel.hostValidation(), host, true);\n            visualizer.initVisualization(viewModel.portValidation(), port, true);\n            visualizer.initVisualization(viewModel.userValidation(), user, true);\n\n            EasyBind.subscribe(autosave.selectedProperty(), selected -> {\n                visualizer.initVisualization(viewModel.folderValidation(), folder, true);\n            });\n\n            EasyBind.subscribe(useSSL.selectedProperty(), selected -> {\n                visualizer.initVisualization(viewModel.keystoreValidation(), fileKeystore, true);\n            });\n        });\n    }\n","realPath":"src/main/java/org/jabref/gui/shared/SharedDatabaseLoginDialogView.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"NB"},{"authorDate":"2019-04-15 03:10:59","commitOrder":3,"curCode":"    public void initialize() {\n        viewModel = new EditExternalFileTypeViewModel(entry);\n\n        icon.setGraphic(viewModel.getIcon());\n\n        defaultApplication.selectedProperty().bindBidirectional(viewModel.defaultApplicationSelectedProperty());\n        selectedApplication.disableProperty().bind(viewModel.defaultApplicationSelectedProperty());\n        btnBrowse.disableProperty().bind(viewModel.defaultApplicationSelectedProperty());\n\n        extension.textProperty().bindBidirectional(viewModel.extensionProperty());\n        name.textProperty().bindBidirectional(viewModel.nameProperty());\n        mimeType.textProperty().bindBidirectional(viewModel.mimeTypeProperty());\n        selectedApplication.textProperty().bindBidirectional(viewModel.selectedApplicationProperty());\n    }\n","date":"2019-04-15 03:10:59","endLine":72,"groupId":"11338","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/88/566e07772dda3da2b99436dbcb9d3092061924.src","preCode":"    public void initialize() {\n        viewModel = new EditExternalFileTypeViewModel(entry);\n\n        icon.setGraphic(viewModel.getIcon());\n\n        defaultApplication.selectedProperty().bindBidirectional(viewModel.defaultApplicationSelectedProperty());\n        selectedApplication.disableProperty().bind(viewModel.defaultApplicationSelectedProperty());\n        btnBrowse.disableProperty().bind(viewModel.defaultApplicationSelectedProperty());\n\n        extension.textProperty().bindBidirectional(viewModel.extensionProperty());\n        name.textProperty().bindBidirectional(viewModel.nameProperty());\n        mimeType.textProperty().bindBidirectional(viewModel.mimeTypeProperty());\n        selectedApplication.textProperty().bindBidirectional(viewModel.selectedApplicationProperty());\n    }\n","realPath":"src/main/java/org/jabref/gui/externalfiletype/EditExternalFileTypeEntryDialog.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"}],"commitId":"0190a10c418f5ac98830428ef7f6f8c333793896","commitMessage":"@@@ Convert ExternalFileTypeEntryEditor to javafx (#4885)\n\n* [WIP] Convert ExternalFileTypeEntryEditor to javafx\n\n* convert rest of the dialog\n\n* Pass l10n dialog title as parameter\n\n* rename to EditExternalFileTypeEntryDialog\n","date":"2019-04-15 03:10:59","modifiedFileCount":"1","status":"M","submitter":"Christoph"},{"authorTime":"2020-02-02 17:47:21","codes":[{"authorDate":"2018-11-15 18:41:35","commitOrder":4,"curCode":"    private void initialize() {\n        visualizer.setDecoration(new IconValidationDecorator());\n\n        viewModel = new SharedDatabaseLoginDialogViewModel(frame, dialogService);\n        databaseType.getItems().addAll(DBMSType.values());\n        databaseType.getSelectionModel().select(0);\n\n        database.textProperty().bindBidirectional(viewModel.databaseproperty());\n        host.textProperty().bindBidirectional(viewModel.hostProperty());\n        user.textProperty().bindBidirectional(viewModel.userProperty());\n        password.textProperty().bindBidirectional(viewModel.passwordProperty());\n        port.textProperty().bindBidirectional(viewModel.portProperty());\n        serverTimezone.textProperty().bindBidirectional(viewModel.serverTimezoneProperty());\n        databaseType.valueProperty().bindBidirectional(viewModel.selectedDbmstypeProperty());\n\n        folder.textProperty().bindBidirectional(viewModel.folderProperty());\n        browseButton.disableProperty().bind(viewModel.autosaveProperty().not());\n        folder.disableProperty().bind(viewModel.autosaveProperty().not());\n        autosave.selectedProperty().bindBidirectional(viewModel.autosaveProperty());\n\n        useSSL.selectedProperty().bindBidirectional(viewModel.useSSLProperty());\n\n        fileKeystore.textProperty().bindBidirectional(viewModel.keyStoreProperty());\n\n        browseKeystore.disableProperty().bind(viewModel.useSSLProperty().not());\n        passwordKeystore.disableProperty().bind(viewModel.useSSLProperty().not());\n        passwordKeystore.textProperty().bindBidirectional(viewModel.keyStorePasswordProperty());\n\n        \r\n        Platform.runLater(() -> {\n            visualizer.initVisualization(viewModel.dbValidation(), database, true);\n            visualizer.initVisualization(viewModel.hostValidation(), host, true);\n            visualizer.initVisualization(viewModel.portValidation(), port, true);\n            visualizer.initVisualization(viewModel.userValidation(), user, true);\n\n            EasyBind.subscribe(autosave.selectedProperty(), selected -> {\n                visualizer.initVisualization(viewModel.folderValidation(), folder, true);\n            });\n\n            EasyBind.subscribe(useSSL.selectedProperty(), selected -> {\n                visualizer.initVisualization(viewModel.keystoreValidation(), fileKeystore, true);\n            });\n        });\n    }\n","date":"2018-11-15 18:41:35","endLine":118,"groupId":"6293","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/61/2c2267aea5a54aa124b7436f6fb84350ed79e2.src","preCode":"    private void initialize() {\n        visualizer.setDecoration(new IconValidationDecorator());\n\n        viewModel = new SharedDatabaseLoginDialogViewModel(frame, dialogService);\n        databaseType.getItems().addAll(DBMSType.values());\n        databaseType.getSelectionModel().select(0);\n\n        database.textProperty().bindBidirectional(viewModel.databaseproperty());\n        host.textProperty().bindBidirectional(viewModel.hostProperty());\n        user.textProperty().bindBidirectional(viewModel.userProperty());\n        password.textProperty().bindBidirectional(viewModel.passwordProperty());\n        port.textProperty().bindBidirectional(viewModel.portProperty());\n        serverTimezone.textProperty().bindBidirectional(viewModel.serverTimezoneProperty());\n        databaseType.valueProperty().bindBidirectional(viewModel.selectedDbmstypeProperty());\n\n        folder.textProperty().bindBidirectional(viewModel.folderProperty());\n        browseButton.disableProperty().bind(viewModel.autosaveProperty().not());\n        folder.disableProperty().bind(viewModel.autosaveProperty().not());\n        autosave.selectedProperty().bindBidirectional(viewModel.autosaveProperty());\n\n        useSSL.selectedProperty().bindBidirectional(viewModel.useSSLProperty());\n\n        fileKeystore.textProperty().bindBidirectional(viewModel.keyStoreProperty());\n\n        browseKeystore.disableProperty().bind(viewModel.useSSLProperty().not());\n        passwordKeystore.disableProperty().bind(viewModel.useSSLProperty().not());\n        passwordKeystore.textProperty().bindBidirectional(viewModel.keyStorePasswordProperty());\n\n        \r\n        Platform.runLater(() -> {\n            visualizer.initVisualization(viewModel.dbValidation(), database, true);\n            visualizer.initVisualization(viewModel.hostValidation(), host, true);\n            visualizer.initVisualization(viewModel.portValidation(), port, true);\n            visualizer.initVisualization(viewModel.userValidation(), user, true);\n\n            EasyBind.subscribe(autosave.selectedProperty(), selected -> {\n                visualizer.initVisualization(viewModel.folderValidation(), folder, true);\n            });\n\n            EasyBind.subscribe(useSSL.selectedProperty(), selected -> {\n                visualizer.initVisualization(viewModel.keystoreValidation(), fileKeystore, true);\n            });\n        });\n    }\n","realPath":"src/main/java/org/jabref/gui/shared/SharedDatabaseLoginDialogView.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"},{"authorDate":"2020-02-02 17:47:21","commitOrder":4,"curCode":"    public void initialize() {\n        viewModel = new EditExternalFileTypeViewModel(entry);\n\n        icon.setGraphic(viewModel.getIcon());\n\n        defaultApplication.selectedProperty().bindBidirectional(viewModel.defaultApplicationSelectedProperty());\n        customApplication.selectedProperty().bindBidirectional(viewModel.customApplicationSelectedProperty());\n        selectedApplication.disableProperty().bind(viewModel.defaultApplicationSelectedProperty());\n        btnBrowse.disableProperty().bind(viewModel.defaultApplicationSelectedProperty());\n\n        extension.textProperty().bindBidirectional(viewModel.extensionProperty());\n        name.textProperty().bindBidirectional(viewModel.nameProperty());\n        mimeType.textProperty().bindBidirectional(viewModel.mimeTypeProperty());\n        selectedApplication.textProperty().bindBidirectional(viewModel.selectedApplicationProperty());\n    }\n","date":"2020-02-02 17:47:21","endLine":73,"groupId":"11338","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ba/fbece5ded47d8adea539aa99c7eb4730b98d3e.src","preCode":"    public void initialize() {\n        viewModel = new EditExternalFileTypeViewModel(entry);\n\n        icon.setGraphic(viewModel.getIcon());\n\n        defaultApplication.selectedProperty().bindBidirectional(viewModel.defaultApplicationSelectedProperty());\n        selectedApplication.disableProperty().bind(viewModel.defaultApplicationSelectedProperty());\n        btnBrowse.disableProperty().bind(viewModel.defaultApplicationSelectedProperty());\n\n        extension.textProperty().bindBidirectional(viewModel.extensionProperty());\n        name.textProperty().bindBidirectional(viewModel.nameProperty());\n        mimeType.textProperty().bindBidirectional(viewModel.mimeTypeProperty());\n        selectedApplication.textProperty().bindBidirectional(viewModel.selectedApplicationProperty());\n    }\n","realPath":"src/main/java/org/jabref/gui/externalfiletype/EditExternalFileTypeEntryDialog.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"78f7d65a4ac274a9a2cf2e95988a5857d1347ebd","commitMessage":"@@@Fixes problems with managing external file types (issue 5846) (#5894)\n\n* - edit/customize external file types: radio button for \"default program\"/\"custom program\" fixed: it now gets updated properly (binding added);\n- \"Edit file type dialog\": correct value get loaded now for the input field \"Name\"\n- when storing an updated file type: no differentiation will be made any more whether program runs on Windows or somewhere else\n- quick fix for pending issue: editing an ExternalFileType works now (still room for improvement); visual bug concerning \"lazy\" update of table could be a Linux issue.  since other tables are affected as well; so basically - except the \"lazy\" update thing -- everything works concerning external file types\n\n* cleanup + changelog\n\n* revert authors\n","date":"2020-02-02 17:47:21","modifiedFileCount":"3","status":"M","submitter":"systemoperator"},{"authorTime":"2020-02-02 17:47:21","codes":[{"authorDate":"2020-12-04 04:22:21","commitOrder":5,"curCode":"    private void initialize() {\n        visualizer.setDecoration(new IconValidationDecorator());\n\n        viewModel = new SharedDatabaseLoginDialogViewModel(frame, dialogService);\n        databaseType.getItems().addAll(DBMSType.values());\n        databaseType.getSelectionModel().select(0);\n\n        database.textProperty().bindBidirectional(viewModel.databaseproperty());\n        host.textProperty().bindBidirectional(viewModel.hostProperty());\n        user.textProperty().bindBidirectional(viewModel.userProperty());\n        password.textProperty().bindBidirectional(viewModel.passwordProperty());\n        port.textProperty().bindBidirectional(viewModel.portProperty());\n        serverTimezone.textProperty().bindBidirectional(viewModel.serverTimezoneProperty());\n        databaseType.valueProperty().bindBidirectional(viewModel.selectedDbmstypeProperty());\n\n        folder.textProperty().bindBidirectional(viewModel.folderProperty());\n        browseButton.disableProperty().bind(viewModel.autosaveProperty().not());\n        folder.disableProperty().bind(viewModel.autosaveProperty().not());\n        autosave.selectedProperty().bindBidirectional(viewModel.autosaveProperty());\n\n        useSSL.selectedProperty().bindBidirectional(viewModel.useSSLProperty());\n\n        fileKeystore.textProperty().bindBidirectional(viewModel.keyStoreProperty());\n\n        browseKeystore.disableProperty().bind(viewModel.useSSLProperty().not());\n        passwordKeystore.disableProperty().bind(viewModel.useSSLProperty().not());\n        passwordKeystore.textProperty().bindBidirectional(viewModel.keyStorePasswordProperty());\n        rememberPassword.selectedProperty().bindBidirectional(viewModel.rememberPasswordProperty());\n\n        \r\n        Platform.runLater(() -> {\n            visualizer.initVisualization(viewModel.dbValidation(), database, true);\n            visualizer.initVisualization(viewModel.hostValidation(), host, true);\n            visualizer.initVisualization(viewModel.portValidation(), port, true);\n            visualizer.initVisualization(viewModel.userValidation(), user, true);\n\n            EasyBind.subscribe(autosave.selectedProperty(), selected -> {\n                visualizer.initVisualization(viewModel.folderValidation(), folder, true);\n            });\n\n            EasyBind.subscribe(useSSL.selectedProperty(), selected -> {\n                visualizer.initVisualization(viewModel.keystoreValidation(), fileKeystore, true);\n            });\n        });\n    }\n","date":"2020-12-04 04:22:21","endLine":122,"groupId":"10902","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"initialize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/11/85c91d95e664a66815daf043e7d458adad7bcc.src","preCode":"    private void initialize() {\n        visualizer.setDecoration(new IconValidationDecorator());\n\n        viewModel = new SharedDatabaseLoginDialogViewModel(frame, dialogService);\n        databaseType.getItems().addAll(DBMSType.values());\n        databaseType.getSelectionModel().select(0);\n\n        database.textProperty().bindBidirectional(viewModel.databaseproperty());\n        host.textProperty().bindBidirectional(viewModel.hostProperty());\n        user.textProperty().bindBidirectional(viewModel.userProperty());\n        password.textProperty().bindBidirectional(viewModel.passwordProperty());\n        port.textProperty().bindBidirectional(viewModel.portProperty());\n        serverTimezone.textProperty().bindBidirectional(viewModel.serverTimezoneProperty());\n        databaseType.valueProperty().bindBidirectional(viewModel.selectedDbmstypeProperty());\n\n        folder.textProperty().bindBidirectional(viewModel.folderProperty());\n        browseButton.disableProperty().bind(viewModel.autosaveProperty().not());\n        folder.disableProperty().bind(viewModel.autosaveProperty().not());\n        autosave.selectedProperty().bindBidirectional(viewModel.autosaveProperty());\n\n        useSSL.selectedProperty().bindBidirectional(viewModel.useSSLProperty());\n\n        fileKeystore.textProperty().bindBidirectional(viewModel.keyStoreProperty());\n\n        browseKeystore.disableProperty().bind(viewModel.useSSLProperty().not());\n        passwordKeystore.disableProperty().bind(viewModel.useSSLProperty().not());\n        passwordKeystore.textProperty().bindBidirectional(viewModel.keyStorePasswordProperty());\n\n        \r\n        Platform.runLater(() -> {\n            visualizer.initVisualization(viewModel.dbValidation(), database, true);\n            visualizer.initVisualization(viewModel.hostValidation(), host, true);\n            visualizer.initVisualization(viewModel.portValidation(), port, true);\n            visualizer.initVisualization(viewModel.userValidation(), user, true);\n\n            EasyBind.subscribe(autosave.selectedProperty(), selected -> {\n                visualizer.initVisualization(viewModel.folderValidation(), folder, true);\n            });\n\n            EasyBind.subscribe(useSSL.selectedProperty(), selected -> {\n                visualizer.initVisualization(viewModel.keystoreValidation(), fileKeystore, true);\n            });\n        });\n    }\n","realPath":"src/main/java/org/jabref/gui/shared/SharedDatabaseLoginDialogView.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2020-02-02 17:47:21","commitOrder":5,"curCode":"    public void initialize() {\n        viewModel = new EditExternalFileTypeViewModel(entry);\n\n        icon.setGraphic(viewModel.getIcon());\n\n        defaultApplication.selectedProperty().bindBidirectional(viewModel.defaultApplicationSelectedProperty());\n        customApplication.selectedProperty().bindBidirectional(viewModel.customApplicationSelectedProperty());\n        selectedApplication.disableProperty().bind(viewModel.defaultApplicationSelectedProperty());\n        btnBrowse.disableProperty().bind(viewModel.defaultApplicationSelectedProperty());\n\n        extension.textProperty().bindBidirectional(viewModel.extensionProperty());\n        name.textProperty().bindBidirectional(viewModel.nameProperty());\n        mimeType.textProperty().bindBidirectional(viewModel.mimeTypeProperty());\n        selectedApplication.textProperty().bindBidirectional(viewModel.selectedApplicationProperty());\n    }\n","date":"2020-02-02 17:47:21","endLine":73,"groupId":"10902","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/ba/fbece5ded47d8adea539aa99c7eb4730b98d3e.src","preCode":"    public void initialize() {\n        viewModel = new EditExternalFileTypeViewModel(entry);\n\n        icon.setGraphic(viewModel.getIcon());\n\n        defaultApplication.selectedProperty().bindBidirectional(viewModel.defaultApplicationSelectedProperty());\n        customApplication.selectedProperty().bindBidirectional(viewModel.customApplicationSelectedProperty());\n        selectedApplication.disableProperty().bind(viewModel.defaultApplicationSelectedProperty());\n        btnBrowse.disableProperty().bind(viewModel.defaultApplicationSelectedProperty());\n\n        extension.textProperty().bindBidirectional(viewModel.extensionProperty());\n        name.textProperty().bindBidirectional(viewModel.nameProperty());\n        mimeType.textProperty().bindBidirectional(viewModel.mimeTypeProperty());\n        selectedApplication.textProperty().bindBidirectional(viewModel.selectedApplicationProperty());\n    }\n","realPath":"src/main/java/org/jabref/gui/externalfiletype/EditExternalFileTypeEntryDialog.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"N"}],"commitId":"40311041c6ffacc49bf159e6d9b9fe8bf5d9717f","commitMessage":"@@@Fix remembering password for sql db (#7154)\n\nFixes #6869\n\nAdd misisng binding","date":"2020-12-04 04:22:21","modifiedFileCount":"1","status":"M","submitter":"Christoph"}]
