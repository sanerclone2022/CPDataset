[{"authorTime":"2021-07-15 03:49:30","codes":[{"authorDate":"2021-08-12 23:29:59","commitOrder":2,"curCode":"    public void dontIndexNonPdf() throws IOException {\n        \r\n        BibEntry entry = new BibEntry(StandardEntryType.PhdThesis);\n        entry.setFiles(Collections.singletonList(new LinkedFile(\"Example Thesis\", \"thesis-example.pdf\", StandardFileType.AUX.getName())));\n        database.insertEntry(entry);\n\n        \r\n        indexer.createIndex(database, context);\n\n        \r\n        try (IndexReader reader = DirectoryReader.open(new NIOFSDirectory(context.getFulltextIndexPath()))) {\n            assertEquals(0, reader.numDocs());\n        }\n    }\n","date":"2021-08-12 23:29:59","endLine":77,"groupId":"1965","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"dontIndexNonPdf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/82/f220df78470da773636c0cea7430c8af4a0ca4.src","preCode":"    public void dontIndexNonPdf() throws IOException {\n        \r\n        BibEntry entry = new BibEntry(StandardEntryType.PhdThesis);\n        entry.setFiles(Collections.singletonList(new LinkedFile(\"Example Thesis\", \"thesis-example.pdf\", StandardFileType.AUX.getName())));\n        database.insertEntry(entry);\n\n        \r\n        indexer.createIndex(database, context);\n\n        \r\n        try (IndexReader reader = DirectoryReader.open(new NIOFSDirectory(context.getFulltextIndexPath()))) {\n            assertEquals(0, reader.numDocs());\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/pdf/search/indexing/PdfIndexerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"},{"authorDate":"2021-07-15 03:49:30","commitOrder":2,"curCode":"    public void testFlushIndex() throws IOException {\n        \r\n        BibEntry entry = new BibEntry(StandardEntryType.PhdThesis);\n        entry.setCitationKey(\"Example2017\");\n        entry.setFiles(Collections.singletonList(new LinkedFile(\"Example Thesis\", \"thesis-example.pdf\", StandardFileType.PDF.getName())));\n        database.insertEntry(entry);\n\n        indexer.createIndex(database, context);\n        \r\n        try (IndexReader reader = DirectoryReader.open(new NIOFSDirectory(context.getFulltextIndexPath()))) {\n            assertEquals(1, reader.numDocs());\n        }\n\n        \r\n        indexer.flushIndex();\n\n        \r\n        try (IndexReader reader = DirectoryReader.open(new NIOFSDirectory(context.getFulltextIndexPath()))) {\n            assertEquals(0, reader.numDocs());\n        }\n    }\n","date":"2021-07-15 03:49:30","endLine":118,"groupId":"6095","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFlushIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/9d/c45525ac896ce54b2bbf2b0a859477ae408f73.src","preCode":"    public void testFlushIndex() throws IOException {\n        \r\n        BibEntry entry = new BibEntry(StandardEntryType.PhdThesis);\n        entry.setCitationKey(\"Example2017\");\n        entry.setFiles(Collections.singletonList(new LinkedFile(\"Example Thesis\", \"thesis-example.pdf\", StandardFileType.PDF.getName())));\n        database.insertEntry(entry);\n\n        indexer.createIndex(database, context);\n        \r\n        try (IndexReader reader = DirectoryReader.open(new NIOFSDirectory(context.getFulltextIndexPath()))) {\n            assertEquals(1, reader.numDocs());\n        }\n\n        \r\n        indexer.flushIndex();\n\n        \r\n        try (IndexReader reader = DirectoryReader.open(new NIOFSDirectory(context.getFulltextIndexPath()))) {\n            assertEquals(0, reader.numDocs());\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/pdf/search/indexing/PdfIndexerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"NB"}],"commitId":"025c099bd5f7533707e0c055d9e968342e3bf0ca","commitMessage":"@@@Fulltext Index: Only index local pdf files (#7980)\n\n","date":"2021-08-12 23:29:59","modifiedFileCount":"2","status":"M","submitter":"Benedikt Tutzer"},{"authorTime":"2021-08-20 02:31:20","codes":[{"authorDate":"2021-08-20 02:31:20","commitOrder":3,"curCode":"    public void dontIndexNonPdf() throws IOException {\n        \r\n        BibEntry entry = new BibEntry(StandardEntryType.PhdThesis);\n        entry.setFiles(Collections.singletonList(new LinkedFile(\"Example Thesis\", \"thesis-example.pdf\", StandardFileType.AUX.getName())));\n        database.insertEntry(entry);\n\n        \r\n        indexer.createIndex();\n        indexer.addToIndex(context);\n\n        \r\n        try (IndexReader reader = DirectoryReader.open(new NIOFSDirectory(context.getFulltextIndexPath()))) {\n            assertEquals(0, reader.numDocs());\n        }\n    }\n","date":"2021-08-20 02:31:20","endLine":80,"groupId":"1965","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"dontIndexNonPdf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/4d/948f7f37f20e2da78151a381d9513a84ca8b8c.src","preCode":"    public void dontIndexNonPdf() throws IOException {\n        \r\n        BibEntry entry = new BibEntry(StandardEntryType.PhdThesis);\n        entry.setFiles(Collections.singletonList(new LinkedFile(\"Example Thesis\", \"thesis-example.pdf\", StandardFileType.AUX.getName())));\n        database.insertEntry(entry);\n\n        \r\n        indexer.createIndex(database, context);\n\n        \r\n        try (IndexReader reader = DirectoryReader.open(new NIOFSDirectory(context.getFulltextIndexPath()))) {\n            assertEquals(0, reader.numDocs());\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/pdf/search/indexing/PdfIndexerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2021-08-20 02:31:20","commitOrder":3,"curCode":"    public void testFlushIndex() throws IOException {\n        \r\n        BibEntry entry = new BibEntry(StandardEntryType.PhdThesis);\n        entry.setCitationKey(\"Example2017\");\n        entry.setFiles(Collections.singletonList(new LinkedFile(\"Example Thesis\", \"thesis-example.pdf\", StandardFileType.PDF.getName())));\n        database.insertEntry(entry);\n\n        indexer.createIndex();\n        indexer.addToIndex(context);\n        \r\n        try (IndexReader reader = DirectoryReader.open(new NIOFSDirectory(context.getFulltextIndexPath()))) {\n            assertEquals(1, reader.numDocs());\n        }\n\n        \r\n        indexer.flushIndex();\n\n        \r\n        try (IndexReader reader = DirectoryReader.open(new NIOFSDirectory(context.getFulltextIndexPath()))) {\n            assertEquals(0, reader.numDocs());\n        }\n    }\n","date":"2021-08-20 02:31:20","endLine":157,"groupId":"557","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFlushIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/4d/948f7f37f20e2da78151a381d9513a84ca8b8c.src","preCode":"    public void testFlushIndex() throws IOException {\n        \r\n        BibEntry entry = new BibEntry(StandardEntryType.PhdThesis);\n        entry.setCitationKey(\"Example2017\");\n        entry.setFiles(Collections.singletonList(new LinkedFile(\"Example Thesis\", \"thesis-example.pdf\", StandardFileType.PDF.getName())));\n        database.insertEntry(entry);\n\n        indexer.createIndex(database, context);\n        \r\n        try (IndexReader reader = DirectoryReader.open(new NIOFSDirectory(context.getFulltextIndexPath()))) {\n            assertEquals(1, reader.numDocs());\n        }\n\n        \r\n        indexer.flushIndex();\n\n        \r\n        try (IndexReader reader = DirectoryReader.open(new NIOFSDirectory(context.getFulltextIndexPath()))) {\n            assertEquals(0, reader.numDocs());\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/pdf/search/indexing/PdfIndexerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"}],"commitId":"05a0ce9755d044557d97c48103d02bfb6b43c1a0","commitMessage":"@@@Improved progress indication for fulltext-index operations (#7981)\n\n","date":"2021-08-20 02:31:20","modifiedFileCount":"5","status":"M","submitter":"Benedikt Tutzer"},{"authorTime":"2021-08-22 03:51:23","codes":[{"authorDate":"2021-08-20 02:31:20","commitOrder":4,"curCode":"    public void dontIndexNonPdf() throws IOException {\n        \r\n        BibEntry entry = new BibEntry(StandardEntryType.PhdThesis);\n        entry.setFiles(Collections.singletonList(new LinkedFile(\"Example Thesis\", \"thesis-example.pdf\", StandardFileType.AUX.getName())));\n        database.insertEntry(entry);\n\n        \r\n        indexer.createIndex();\n        indexer.addToIndex(context);\n\n        \r\n        try (IndexReader reader = DirectoryReader.open(new NIOFSDirectory(context.getFulltextIndexPath()))) {\n            assertEquals(0, reader.numDocs());\n        }\n    }\n","date":"2021-08-20 02:31:20","endLine":80,"groupId":"10763","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"dontIndexNonPdf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/4d/948f7f37f20e2da78151a381d9513a84ca8b8c.src","preCode":"    public void dontIndexNonPdf() throws IOException {\n        \r\n        BibEntry entry = new BibEntry(StandardEntryType.PhdThesis);\n        entry.setFiles(Collections.singletonList(new LinkedFile(\"Example Thesis\", \"thesis-example.pdf\", StandardFileType.AUX.getName())));\n        database.insertEntry(entry);\n\n        \r\n        indexer.createIndex();\n        indexer.addToIndex(context);\n\n        \r\n        try (IndexReader reader = DirectoryReader.open(new NIOFSDirectory(context.getFulltextIndexPath()))) {\n            assertEquals(0, reader.numDocs());\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/pdf/search/indexing/PdfIndexerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2021-08-22 03:51:23","commitOrder":4,"curCode":"    public void testFlushIndex() throws IOException {\n        \r\n        BibEntry entry = new BibEntry(StandardEntryType.PhdThesis);\n        entry.setCitationKey(\"Example2017\");\n        entry.setFiles(Collections.singletonList(new LinkedFile(\"Example Thesis\", \"thesis-example.pdf\", StandardFileType.PDF.getName())));\n        database.insertEntry(entry);\n\n        indexer.createIndex();\n        indexer.addToIndex(context);\n        \r\n        try (IndexReader reader = DirectoryReader.open(new NIOFSDirectory(context.getFulltextIndexPath()))) {\n            assertEquals(33, reader.numDocs());\n        }\n\n        \r\n        indexer.flushIndex();\n\n        \r\n        try (IndexReader reader = DirectoryReader.open(new NIOFSDirectory(context.getFulltextIndexPath()))) {\n            assertEquals(0, reader.numDocs());\n        }\n    }\n","date":"2021-08-22 03:51:23","endLine":157,"groupId":"10763","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testFlushIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/62/9bb2937781ed30d3bf219f0a68a93751c5d137.src","preCode":"    public void testFlushIndex() throws IOException {\n        \r\n        BibEntry entry = new BibEntry(StandardEntryType.PhdThesis);\n        entry.setCitationKey(\"Example2017\");\n        entry.setFiles(Collections.singletonList(new LinkedFile(\"Example Thesis\", \"thesis-example.pdf\", StandardFileType.PDF.getName())));\n        database.insertEntry(entry);\n\n        indexer.createIndex();\n        indexer.addToIndex(context);\n        \r\n        try (IndexReader reader = DirectoryReader.open(new NIOFSDirectory(context.getFulltextIndexPath()))) {\n            assertEquals(1, reader.numDocs());\n        }\n\n        \r\n        indexer.flushIndex();\n\n        \r\n        try (IndexReader reader = DirectoryReader.open(new NIOFSDirectory(context.getFulltextIndexPath()))) {\n            assertEquals(0, reader.numDocs());\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/pdf/search/indexing/PdfIndexerTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"}],"commitId":"09c0f59456ecefc0c56825608dc09100d82b581e","commitMessage":"@@@Improve presentation of fulltext search results (#7989)\n\n","date":"2021-08-22 03:51:23","modifiedFileCount":"14","status":"M","submitter":"Benedikt Tutzer"}]
