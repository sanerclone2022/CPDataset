[{"authorTime":"2019-11-27 04:12:21","codes":[{"authorDate":"2019-11-27 04:12:21","commitOrder":1,"curCode":"    void testRemoveAllEntries(DBMSType dbmsType, DBMSConnection dbmsConnection, DBMSProcessor dbmsProcessor) throws SQLException {\n        dbmsProcessor.setupSharedDatabase();\n        BibEntry firstEntry = getBibEntryExample();\n        BibEntry secondEntry = getBibEntryExample();\n        List<BibEntry> entriesToRemove = Arrays.asList(firstEntry, secondEntry);\n        dbmsProcessor.insertEntry(firstEntry);\n        dbmsProcessor.insertEntry(secondEntry);\n        dbmsProcessor.removeEntries(entriesToRemove);\n\n        try (ResultSet resultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertFalse(resultSet.next());\n        }\n        clear(dbmsConnection);\n    }\n","date":"2019-11-27 04:12:21","endLine":181,"groupId":"5947","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoveAllEntries","params":"(DBMSTypedbmsType@DBMSConnectiondbmsConnection@DBMSProcessordbmsProcessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/40/1ba599020bd2304fb9d8aeaf2e9bb7682b75b4.src","preCode":"    void testRemoveAllEntries(DBMSType dbmsType, DBMSConnection dbmsConnection, DBMSProcessor dbmsProcessor) throws SQLException {\n        dbmsProcessor.setupSharedDatabase();\n        BibEntry firstEntry = getBibEntryExample();\n        BibEntry secondEntry = getBibEntryExample();\n        List<BibEntry> entriesToRemove = Arrays.asList(firstEntry, secondEntry);\n        dbmsProcessor.insertEntry(firstEntry);\n        dbmsProcessor.insertEntry(secondEntry);\n        dbmsProcessor.removeEntries(entriesToRemove);\n\n        try (ResultSet resultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertFalse(resultSet.next());\n        }\n        clear(dbmsConnection);\n    }\n","realPath":"src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"B"},{"authorDate":"2019-11-27 04:12:21","commitOrder":1,"curCode":"    void testRemoveSomeEntries(DBMSType dbmsType, DBMSConnection dbmsConnection, DBMSProcessor dbmsProcessor) throws SQLException {\n        dbmsProcessor.setupSharedDatabase();\n        BibEntry firstEntry = getBibEntryExample();\n        BibEntry secondEntry = getBibEntryExample();\n        BibEntry thirdEntry = getBibEntryExample();\n\n        \r\n\n        List<BibEntry> entriesToRemove = Arrays.asList(firstEntry, thirdEntry);\n        dbmsProcessor.insertEntry(firstEntry);\n        dbmsProcessor.insertEntry(secondEntry);\n        dbmsProcessor.insertEntry(thirdEntry);\n        dbmsProcessor.removeEntries(entriesToRemove);\n\n        try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertTrue(entryResultSet.next());\n            assertEquals(2, entryResultSet.getInt(\"SHARED_ID\"));\n            assertFalse(entryResultSet.next());\n        }\n\n        clear(dbmsConnection);\n    }\n","date":"2019-11-27 04:12:21","endLine":206,"groupId":"12045","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveSomeEntries","params":"(DBMSTypedbmsType@DBMSConnectiondbmsConnection@DBMSProcessordbmsProcessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/40/1ba599020bd2304fb9d8aeaf2e9bb7682b75b4.src","preCode":"    void testRemoveSomeEntries(DBMSType dbmsType, DBMSConnection dbmsConnection, DBMSProcessor dbmsProcessor) throws SQLException {\n        dbmsProcessor.setupSharedDatabase();\n        BibEntry firstEntry = getBibEntryExample();\n        BibEntry secondEntry = getBibEntryExample();\n        BibEntry thirdEntry = getBibEntryExample();\n\n        \r\n\n        List<BibEntry> entriesToRemove = Arrays.asList(firstEntry, thirdEntry);\n        dbmsProcessor.insertEntry(firstEntry);\n        dbmsProcessor.insertEntry(secondEntry);\n        dbmsProcessor.insertEntry(thirdEntry);\n        dbmsProcessor.removeEntries(entriesToRemove);\n\n        try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertTrue(entryResultSet.next());\n            assertEquals(2, entryResultSet.getInt(\"SHARED_ID\"));\n            assertFalse(entryResultSet.next());\n        }\n\n        clear(dbmsConnection);\n    }\n","realPath":"src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"B"}],"commitId":"917defcc7b02c8701eb11980ff642f21f45134fb","commitMessage":"@@@Batch remove entries (#5659)\n\n","date":"2019-11-27 04:12:21","modifiedFileCount":"4","status":"B","submitter":"Abraham Polk"},{"authorTime":"2019-11-29 23:58:12","codes":[{"authorDate":"2019-11-29 23:58:12","commitOrder":2,"curCode":"    void testRemoveAllEntries() throws SQLException {\n        BibEntry firstEntry = getBibEntryExample();\n        BibEntry secondEntry = getBibEntryExample();\n        List<BibEntry> entriesToRemove = Arrays.asList(firstEntry, secondEntry);\n        dbmsProcessor.insertEntry(firstEntry);\n        dbmsProcessor.insertEntry(secondEntry);\n        dbmsProcessor.removeEntries(entriesToRemove);\n\n        try (ResultSet resultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertFalse(resultSet.next());\n        }\n    }\n","date":"2019-11-29 23:58:12","endLine":168,"groupId":"5947","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoveAllEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/1a/ae2ccb1dcf55ab6b3f4019ff3bd8a48a8d9bbd.src","preCode":"    void testRemoveAllEntries(DBMSType dbmsType, DBMSConnection dbmsConnection, DBMSProcessor dbmsProcessor) throws SQLException {\n        dbmsProcessor.setupSharedDatabase();\n        BibEntry firstEntry = getBibEntryExample();\n        BibEntry secondEntry = getBibEntryExample();\n        List<BibEntry> entriesToRemove = Arrays.asList(firstEntry, secondEntry);\n        dbmsProcessor.insertEntry(firstEntry);\n        dbmsProcessor.insertEntry(secondEntry);\n        dbmsProcessor.removeEntries(entriesToRemove);\n\n        try (ResultSet resultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertFalse(resultSet.next());\n        }\n        clear(dbmsConnection);\n    }\n","realPath":"src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2019-11-29 23:58:12","commitOrder":2,"curCode":"    void testRemoveSomeEntries() throws SQLException {\n        BibEntry firstEntry = getBibEntryExample();\n        BibEntry secondEntry = getBibEntryExample();\n        BibEntry thirdEntry = getBibEntryExample();\n\n        \r\n\n        List<BibEntry> entriesToRemove = Arrays.asList(firstEntry, thirdEntry);\n        dbmsProcessor.insertEntry(firstEntry);\n        dbmsProcessor.insertEntry(secondEntry);\n        dbmsProcessor.insertEntry(thirdEntry);\n        dbmsProcessor.removeEntries(entriesToRemove);\n\n        try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertTrue(entryResultSet.next());\n            assertEquals(2, entryResultSet.getInt(\"SHARED_ID\"));\n            assertFalse(entryResultSet.next());\n        }\n    }\n","date":"2019-11-29 23:58:12","endLine":189,"groupId":"12045","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveSomeEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/1a/ae2ccb1dcf55ab6b3f4019ff3bd8a48a8d9bbd.src","preCode":"    void testRemoveSomeEntries(DBMSType dbmsType, DBMSConnection dbmsConnection, DBMSProcessor dbmsProcessor) throws SQLException {\n        dbmsProcessor.setupSharedDatabase();\n        BibEntry firstEntry = getBibEntryExample();\n        BibEntry secondEntry = getBibEntryExample();\n        BibEntry thirdEntry = getBibEntryExample();\n\n        \r\n\n        List<BibEntry> entriesToRemove = Arrays.asList(firstEntry, thirdEntry);\n        dbmsProcessor.insertEntry(firstEntry);\n        dbmsProcessor.insertEntry(secondEntry);\n        dbmsProcessor.insertEntry(thirdEntry);\n        dbmsProcessor.removeEntries(entriesToRemove);\n\n        try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertTrue(entryResultSet.next());\n            assertEquals(2, entryResultSet.getInt(\"SHARED_ID\"));\n            assertFalse(entryResultSet.next());\n        }\n\n        clear(dbmsConnection);\n    }\n","realPath":"src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"}],"commitId":"ea5e632e4e1819673a01bca255304e83924b3dd0","commitMessage":"@@@Fix database tests and enable running using GitHub workflows (#5676)\n\n- fix behavior when no entries have to be inserted during a synch\n- fix database tests\n- have dbms test test only one database\n- DBMS to test is passed via environment variable \"DBMS\".  defaulting to PostgreSQL\n- add shared information on Canonical BibTeX entry\n- some code improvement\n- have checkstyle running on github workflows (not on Travis)\n- One big workflow for tests\n- Make allowPublicKeyRetrieval a property of DBMSConnectionProperties (and create a builder for the properties)\n- Add check-outdated-dependencies as workflow\n- Add formatting of test results (scripts/after-failure.sh)\n- Have fetcher tests and GUI tests run after the database tests (because they currently fail)\n- Update gradle from 6.0.0 to 6.0.1\n","date":"2019-11-29 23:58:12","modifiedFileCount":"16","status":"M","submitter":"Oliver Kopp"},{"authorTime":"2020-01-08 06:26:50","codes":[{"authorDate":"2020-01-08 06:26:50","commitOrder":3,"curCode":"    void testRemoveAllEntries() throws SQLException {\n        BibEntry firstEntry = getBibEntryExample();\n        BibEntry secondEntry = getBibEntryExample2();\n        List<BibEntry> entriesToRemove = Arrays.asList(firstEntry, secondEntry);\n        dbmsProcessor.insertEntry(firstEntry);\n        dbmsProcessor.insertEntry(secondEntry);\n        dbmsProcessor.removeEntries(entriesToRemove);\n\n        try (ResultSet resultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertFalse(resultSet.next());\n        }\n    }\n","date":"2020-01-08 06:26:50","endLine":221,"groupId":"10368","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoveAllEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/75/4e601e0b22d36f3776a118421c344111b328d1.src","preCode":"    void testRemoveAllEntries() throws SQLException {\n        BibEntry firstEntry = getBibEntryExample();\n        BibEntry secondEntry = getBibEntryExample();\n        List<BibEntry> entriesToRemove = Arrays.asList(firstEntry, secondEntry);\n        dbmsProcessor.insertEntry(firstEntry);\n        dbmsProcessor.insertEntry(secondEntry);\n        dbmsProcessor.removeEntries(entriesToRemove);\n\n        try (ResultSet resultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertFalse(resultSet.next());\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"},{"authorDate":"2020-01-08 06:26:50","commitOrder":3,"curCode":"    void testRemoveSomeEntries() throws SQLException {\n        BibEntry firstEntry = getBibEntryExample();\n        BibEntry secondEntry = getBibEntryExample2();\n        BibEntry thirdEntry = getBibEntryExample3();\n\n        \r\n\n        List<BibEntry> entriesToRemove = Arrays.asList(firstEntry, thirdEntry);\n        dbmsProcessor.insertEntry(firstEntry);\n        dbmsProcessor.insertEntry(secondEntry);\n        dbmsProcessor.insertEntry(thirdEntry);\n        dbmsProcessor.removeEntries(entriesToRemove);\n\n        try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertTrue(entryResultSet.next());\n            assertEquals(2, entryResultSet.getInt(\"SHARED_ID\"));\n            assertFalse(entryResultSet.next());\n        }\n    }\n","date":"2020-01-08 06:26:50","endLine":242,"groupId":"10368","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveSomeEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/75/4e601e0b22d36f3776a118421c344111b328d1.src","preCode":"    void testRemoveSomeEntries() throws SQLException {\n        BibEntry firstEntry = getBibEntryExample();\n        BibEntry secondEntry = getBibEntryExample();\n        BibEntry thirdEntry = getBibEntryExample();\n\n        \r\n\n        List<BibEntry> entriesToRemove = Arrays.asList(firstEntry, thirdEntry);\n        dbmsProcessor.insertEntry(firstEntry);\n        dbmsProcessor.insertEntry(secondEntry);\n        dbmsProcessor.insertEntry(thirdEntry);\n        dbmsProcessor.removeEntries(entriesToRemove);\n\n        try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n            assertTrue(entryResultSet.next());\n            assertEquals(2, entryResultSet.getInt(\"SHARED_ID\"));\n            assertFalse(entryResultSet.next());\n        }\n    }\n","realPath":"src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"}],"commitId":"2f5565b3e3b97eecf93bb4a51752b18426efedce","commitMessage":"@@@Batch DBMSProcessor fields insertion (#5812)\n\nBatch DBMSProcessor fields insertion","date":"2020-01-08 06:26:50","modifiedFileCount":"2","status":"M","submitter":"Oliver Kopp"}]
