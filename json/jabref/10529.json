[{"authorTime":"2020-05-14 17:02:54","codes":[{"authorDate":"2018-08-16 15:17:32","commitOrder":3,"curCode":"    void testWithMultipleEntries() throws IOException, URISyntaxException {\n        Path file = Paths\n                .get(MedlinePlainImporter.class.getResource(\"MedlinePlainImporterStringOutOfBounds.txt\").toURI());\n\n        List<BibEntry> entries = importer.importDatabase(file, Charsets.UTF_8).getDatabase().getEntries();\n\n        BibEntryAssert.assertEquals(MedlinePlainImporter.class, \"MedlinePlainImporterStringOutOfBounds.bib\", entries);\n    }\n","date":"2018-08-16 15:17:32","endLine":204,"groupId":"9693","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithMultipleEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/2d/66b44a0c58dcc0650f112335ebda98c760b0e6.src","preCode":"    void testWithMultipleEntries() throws IOException, URISyntaxException {\n        Path file = Paths\n                .get(MedlinePlainImporter.class.getResource(\"MedlinePlainImporterStringOutOfBounds.txt\").toURI());\n\n        List<BibEntry> entries = importer.importDatabase(file, Charsets.UTF_8).getDatabase().getEntries();\n\n        BibEntryAssert.assertEquals(MedlinePlainImporter.class, \"MedlinePlainImporterStringOutOfBounds.bib\", entries);\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/MedlinePlainImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"NB"},{"authorDate":"2020-05-14 17:02:54","commitOrder":3,"curCode":"    public void cleanupWithDateAlreadyPresentAndDifferentFromMonthDoesNothing() {\n        BibEntry entry = new BibEntry();\n        entry.setField(StandardField.YEAR, \"2011\");\n        entry.setField(StandardField.MONTH, \"#jan#\");\n        entry.setField(StandardField.DATE, \"2011-02\");\n\n        worker.cleanup(entry);\n\n        assertEquals(Optional.of(\"2011\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"#jan#\"), entry.getField(StandardField.MONTH));\n        assertEquals(Optional.of(\"2011-02\"), entry.getField(StandardField.DATE));\n    }\n","date":"2020-05-14 17:02:54","endLine":61,"groupId":"5126","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"cleanupWithDateAlreadyPresentAndDifferentFromMonthDoesNothing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/8c/215028ba94a123af0fe32c2b8bb19ffc030996.src","preCode":"    public void cleanupWithDateAlreadyPresentAndDifferentFromMonthDoesNothing() {\n        BibEntry entry = new BibEntry();\n        entry.setField(StandardField.YEAR, \"2011\");\n        entry.setField(StandardField.MONTH, \"#jan#\");\n        entry.setField(StandardField.DATE, \"2011-02\");\n\n        worker.cleanup(entry);\n\n        assertEquals(Optional.of(\"2011\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"#jan#\"), entry.getField(StandardField.MONTH));\n        assertEquals(Optional.of(\"2011-02\"), entry.getField(StandardField.DATE));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/ConvertToBiblatexCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"}],"commitId":"09111be0d1b6c60de6de202c84387e158f7727b4","commitMessage":"@@@Fix clear year and month field when converting to biblatex (#6434)\n\n* ISSUE :: 6224 - allow merging of year and date if identical\n\n* fix comment\n\n* Updated Changelog.md file with fixed issue\n\n* Fix changelog.md file\n\n* Check If date field is filled and is equal to year it should be removed the year and month fields\n\n* Added unit test: Cleanup With Date Already Present And Equals To Year Removes Year And Month\n\n* ISSUE :: 6224 - Removed Unused import - java.util.Optional\n\n* ISSUE :: 6224 - Separated org.jabref.model.FieldChange from previous imports\n\n* remove checkstyle warning\n\n* Change variable newYear name\n\n* Update Changelog.md\n\n* ISSUE :: 6224 - Added month validation and tests\n\n* ISSUE :: 6224 - For inconsistent data: Do not overwrite/move\n\n* ISSUE :: 6224 - Fix Test\n\n* ISSUE :: 6224 - Added month checking Test\n\n* ISSUE :: 6224 - Fix Test\n\n* ISSUE :: 6224 - Change Date.parse\n\n* ISSUE :: 6224 - Update Date class\n\n* ISSUE :: 6224 - Fix Date\n\n* ISSUE :: 6224 - Added new test","date":"2020-05-14 17:02:54","modifiedFileCount":"3","status":"M","submitter":"Catarina Gomes"},{"authorTime":"2020-05-14 17:02:54","codes":[{"authorDate":"2020-09-02 19:40:52","commitOrder":4,"curCode":"    void testWithMultipleEntries() throws IOException, URISyntaxException {\n        Path file = Path.of(MedlinePlainImporter.class.getResource(\"MedlinePlainImporterStringOutOfBounds.txt\").toURI());\n\n        List<BibEntry> entries = importer.importDatabase(file, Charsets.UTF_8).getDatabase().getEntries();\n\n        BibEntryAssert.assertEquals(MedlinePlainImporter.class, \"MedlinePlainImporterStringOutOfBounds.bib\", entries);\n    }\n","date":"2020-09-02 19:40:52","endLine":204,"groupId":"10529","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testWithMultipleEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/fe/48bcb86cad30b08f3f0dfaa1873d0ca010096d.src","preCode":"    void testWithMultipleEntries() throws IOException, URISyntaxException {\n        Path file = Paths\n                .get(MedlinePlainImporter.class.getResource(\"MedlinePlainImporterStringOutOfBounds.txt\").toURI());\n\n        List<BibEntry> entries = importer.importDatabase(file, Charsets.UTF_8).getDatabase().getEntries();\n\n        BibEntryAssert.assertEquals(MedlinePlainImporter.class, \"MedlinePlainImporterStringOutOfBounds.bib\", entries);\n    }\n","realPath":"src/test/java/org/jabref/logic/importer/fileformat/MedlinePlainImporterTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"},{"authorDate":"2020-05-14 17:02:54","commitOrder":4,"curCode":"    public void cleanupWithDateAlreadyPresentAndDifferentFromMonthDoesNothing() {\n        BibEntry entry = new BibEntry();\n        entry.setField(StandardField.YEAR, \"2011\");\n        entry.setField(StandardField.MONTH, \"#jan#\");\n        entry.setField(StandardField.DATE, \"2011-02\");\n\n        worker.cleanup(entry);\n\n        assertEquals(Optional.of(\"2011\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"#jan#\"), entry.getField(StandardField.MONTH));\n        assertEquals(Optional.of(\"2011-02\"), entry.getField(StandardField.DATE));\n    }\n","date":"2020-05-14 17:02:54","endLine":61,"groupId":"10529","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"cleanupWithDateAlreadyPresentAndDifferentFromMonthDoesNothing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/8c/215028ba94a123af0fe32c2b8bb19ffc030996.src","preCode":"    public void cleanupWithDateAlreadyPresentAndDifferentFromMonthDoesNothing() {\n        BibEntry entry = new BibEntry();\n        entry.setField(StandardField.YEAR, \"2011\");\n        entry.setField(StandardField.MONTH, \"#jan#\");\n        entry.setField(StandardField.DATE, \"2011-02\");\n\n        worker.cleanup(entry);\n\n        assertEquals(Optional.of(\"2011\"), entry.getField(StandardField.YEAR));\n        assertEquals(Optional.of(\"#jan#\"), entry.getField(StandardField.MONTH));\n        assertEquals(Optional.of(\"2011-02\"), entry.getField(StandardField.DATE));\n    }\n","realPath":"src/test/java/org/jabref/logic/cleanup/ConvertToBiblatexCleanupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"1b35f8cb0040fdfb515974e78532598f07e11af2","commitMessage":"@@@Arch fix (#6825)\n\n","date":"2020-09-02 19:40:52","modifiedFileCount":"172","status":"M","submitter":"Tobias Diez"}]
