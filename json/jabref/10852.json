[{"authorTime":"2019-10-03 03:43:34","codes":[{"authorDate":"2019-10-03 03:43:34","commitOrder":4,"curCode":"    void createSubgroupsForTwoKeywords() throws Exception {\n        AutomaticKeywordGroup keywordsGroup = new AutomaticKeywordGroup(\"Keywords\", GroupHierarchyType.INDEPENDENT, StandardField.KEYWORDS, ',', '>');\n        BibEntry entry = new BibEntry().withField(StandardField.KEYWORDS, \"A, B\");\n\n        Set<GroupTreeNode> expected = new HashSet<>();\n        expected.add(GroupTreeNode.fromGroup(new WordKeywordGroup(\"A\", GroupHierarchyType.INCLUDING, StandardField.KEYWORDS, \"A\", true, ',', true)));\n        expected.add(GroupTreeNode.fromGroup(new WordKeywordGroup(\"B\", GroupHierarchyType.INCLUDING, StandardField.KEYWORDS, \"B\", true, ',', true)));\n        assertEquals(expected, keywordsGroup.createSubgroups(entry));\n    }\n","date":"2019-10-03 03:43:34","endLine":24,"groupId":"7288","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createSubgroupsForTwoKeywords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/8b/4af7c4df05cea54206fc05c79ea0316b80d6d6.src","preCode":"    void createSubgroupsForTwoKeywords() throws Exception {\n        AutomaticKeywordGroup keywordsGroup = new AutomaticKeywordGroup(\"Keywords\", GroupHierarchyType.INDEPENDENT, StandardField.KEYWORDS, ',', '>');\n        BibEntry entry = new BibEntry().withField(StandardField.KEYWORDS, \"A, B\");\n\n        Set<GroupTreeNode> expected = new HashSet<>();\n        expected.add(GroupTreeNode.fromGroup(new WordKeywordGroup(\"A\", GroupHierarchyType.INCLUDING, StandardField.KEYWORDS, \"A\", true, ',', true)));\n        expected.add(GroupTreeNode.fromGroup(new WordKeywordGroup(\"B\", GroupHierarchyType.INCLUDING, StandardField.KEYWORDS, \"B\", true, ',', true)));\n        assertEquals(expected, keywordsGroup.createSubgroups(entry));\n    }\n","realPath":"src/test/java/org/jabref/model/groups/AutomaticKeywordGroupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":16,"status":"MB"},{"authorDate":"2019-10-03 03:43:34","commitOrder":4,"curCode":"    void createSubgroupsIgnoresEmptyKeyword() throws Exception {\n        AutomaticKeywordGroup keywordsGroup = new AutomaticKeywordGroup(\"Keywords\", GroupHierarchyType.INDEPENDENT, StandardField.KEYWORDS, ',', '>');\n        BibEntry entry = new BibEntry().withField(StandardField.KEYWORDS, \"A, ,B\");\n\n        Set<GroupTreeNode> expected = new HashSet<>();\n        expected.add(GroupTreeNode.fromGroup(new WordKeywordGroup(\"A\", GroupHierarchyType.INCLUDING, StandardField.KEYWORDS, \"A\", true, ',', true)));\n        expected.add(GroupTreeNode.fromGroup(new WordKeywordGroup(\"B\", GroupHierarchyType.INCLUDING, StandardField.KEYWORDS, \"B\", true, ',', true)));\n        assertEquals(expected, keywordsGroup.createSubgroups(entry));\n    }\n","date":"2019-10-03 03:43:34","endLine":35,"groupId":"7288","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createSubgroupsIgnoresEmptyKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/8b/4af7c4df05cea54206fc05c79ea0316b80d6d6.src","preCode":"    void createSubgroupsIgnoresEmptyKeyword() throws Exception {\n        AutomaticKeywordGroup keywordsGroup = new AutomaticKeywordGroup(\"Keywords\", GroupHierarchyType.INDEPENDENT, StandardField.KEYWORDS, ',', '>');\n        BibEntry entry = new BibEntry().withField(StandardField.KEYWORDS, \"A, ,B\");\n\n        Set<GroupTreeNode> expected = new HashSet<>();\n        expected.add(GroupTreeNode.fromGroup(new WordKeywordGroup(\"A\", GroupHierarchyType.INCLUDING, StandardField.KEYWORDS, \"A\", true, ',', true)));\n        expected.add(GroupTreeNode.fromGroup(new WordKeywordGroup(\"B\", GroupHierarchyType.INCLUDING, StandardField.KEYWORDS, \"B\", true, ',', true)));\n        assertEquals(expected, keywordsGroup.createSubgroups(entry));\n    }\n","realPath":"src/test/java/org/jabref/model/groups/AutomaticKeywordGroupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":27,"status":"B"}],"commitId":"96037dfc1e8f8504fd162f21e42adc0ac3ec1c0e","commitMessage":"@@@Fix display bug for keyword groups with empty keywords (#5347)\n\nFix display bug for keyword groups with empty keywords","date":"2019-10-03 03:43:34","modifiedFileCount":"2","status":"M","submitter":"Oliver Kopp"},{"authorTime":"2021-05-07 05:04:30","codes":[{"authorDate":"2021-05-07 05:04:30","commitOrder":5,"curCode":"    void createSubgroupsForTwoKeywords() throws Exception {\n        AutomaticKeywordGroup keywordsGroup = new AutomaticKeywordGroup(\"Keywords\", GroupHierarchyType.INDEPENDENT, StandardField.KEYWORDS, ',', '>');\n        BibEntry entry = new BibEntry().withField(StandardField.KEYWORDS, \"A, B\");\n\n        Set<GroupTreeNode> expected = createIncludingKeywordsSubgroup();\n\n        assertEquals(expected, keywordsGroup.createSubgroups(entry));\n    }\n","date":"2021-05-07 05:04:30","endLine":23,"groupId":"10852","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"createSubgroupsForTwoKeywords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/21/bebfc69b73f9a48d9da92e07515e4338e52944.src","preCode":"    void createSubgroupsForTwoKeywords() throws Exception {\n        AutomaticKeywordGroup keywordsGroup = new AutomaticKeywordGroup(\"Keywords\", GroupHierarchyType.INDEPENDENT, StandardField.KEYWORDS, ',', '>');\n        BibEntry entry = new BibEntry().withField(StandardField.KEYWORDS, \"A, B\");\n\n        Set<GroupTreeNode> expected = new HashSet<>();\n        expected.add(GroupTreeNode.fromGroup(new WordKeywordGroup(\"A\", GroupHierarchyType.INCLUDING, StandardField.KEYWORDS, \"A\", true, ',', true)));\n        expected.add(GroupTreeNode.fromGroup(new WordKeywordGroup(\"B\", GroupHierarchyType.INCLUDING, StandardField.KEYWORDS, \"B\", true, ',', true)));\n        assertEquals(expected, keywordsGroup.createSubgroups(entry));\n    }\n","realPath":"src/test/java/org/jabref/model/groups/AutomaticKeywordGroupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":16,"status":"M"},{"authorDate":"2021-05-07 05:04:30","commitOrder":5,"curCode":"    void createSubgroupsIgnoresEmptyKeyword() throws Exception {\n        AutomaticKeywordGroup keywordsGroup = new AutomaticKeywordGroup(\"Keywords\", GroupHierarchyType.INDEPENDENT, StandardField.KEYWORDS, ',', '>');\n        BibEntry entry = new BibEntry().withField(StandardField.KEYWORDS, \"A, ,B\");\n\n        Set<GroupTreeNode> expected = createIncludingKeywordsSubgroup();\n\n        assertEquals(expected, keywordsGroup.createSubgroups(entry));\n    }\n","date":"2021-05-07 05:04:30","endLine":33,"groupId":"10852","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"createSubgroupsIgnoresEmptyKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/21/bebfc69b73f9a48d9da92e07515e4338e52944.src","preCode":"    void createSubgroupsIgnoresEmptyKeyword() throws Exception {\n        AutomaticKeywordGroup keywordsGroup = new AutomaticKeywordGroup(\"Keywords\", GroupHierarchyType.INDEPENDENT, StandardField.KEYWORDS, ',', '>');\n        BibEntry entry = new BibEntry().withField(StandardField.KEYWORDS, \"A, ,B\");\n\n        Set<GroupTreeNode> expected = new HashSet<>();\n        expected.add(GroupTreeNode.fromGroup(new WordKeywordGroup(\"A\", GroupHierarchyType.INCLUDING, StandardField.KEYWORDS, \"A\", true, ',', true)));\n        expected.add(GroupTreeNode.fromGroup(new WordKeywordGroup(\"B\", GroupHierarchyType.INCLUDING, StandardField.KEYWORDS, \"B\", true, ',', true)));\n        assertEquals(expected, keywordsGroup.createSubgroups(entry));\n    }\n","realPath":"src/test/java/org/jabref/model/groups/AutomaticKeywordGroupTest.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":26,"status":"M"}],"commitId":"65874f56686975edf7cb3723024ce9a87cbbd754","commitMessage":"@@@Refactoring and addition of unit tests (#7581)\n\n","date":"2021-05-07 05:04:30","modifiedFileCount":"12","status":"M","submitter":"BShaq"}]
