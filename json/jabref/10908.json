[{"authorTime":"2021-04-09 00:50:02","codes":[{"authorDate":"2021-09-02 22:29:11","commitOrder":29,"curCode":"    public SearchResultsTable(MainTableDataModel model,\n                              BibDatabaseContext database,\n                              PreferencesService preferencesService,\n                              UndoManager undoManager,\n                              DialogService dialogService,\n                              StateManager stateManager,\n                              ExternalFileTypes externalFileTypes) {\n        super();\n\n        MainTablePreferences mainTablePreferences = preferencesService.getMainTablePreferences();\n\n        this.getColumns().addAll(new MainTableColumnFactory(\n                database,\n                preferencesService,\n                externalFileTypes,\n                undoManager,\n                dialogService,\n                stateManager).createColumns());\n\n        this.getSortOrder().clear();\n        mainTablePreferences.getColumnPreferences().getColumnSortOrder().forEach(columnModel ->\n                this.getColumns().stream()\n                    .map(column -> (MainTableColumn<?>) column)\n                    .filter(column -> column.getModel().equals(columnModel))\n                    .findFirst()\n                    .ifPresent(column -> this.getSortOrder().add(column)));\n\n        if (mainTablePreferences.getResizeColumnsToFit()) {\n            this.setColumnResizePolicy(new SmartConstrainedResizePolicy());\n        }\n\n        this.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);\n        this.setItems(model.getEntriesFilteredAndSorted());\n        \r\n        model.getEntriesFilteredAndSorted().comparatorProperty().bind(this.comparatorProperty());\n\n        this.getStylesheets().add(MainTable.class.getResource(\"MainTable.css\").toExternalForm());\n        database.getDatabase().registerListener(this);\n    }\n","date":"2021-09-02 22:29:11","endLine":61,"groupId":"9014","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"SearchResultsTable","params":"(MainTableDataModelmodel@BibDatabaseContextdatabase@PreferencesServicepreferencesService@UndoManagerundoManager@DialogServicedialogService@StateManagerstateManager@ExternalFileTypesexternalFileTypes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/e6/01a85d548ac9ce75fd4be16403c28c8863c81d.src","preCode":"    public SearchResultsTable(MainTableDataModel model,\n                              BibDatabaseContext database,\n                              PreferencesService preferencesService,\n                              UndoManager undoManager,\n                              DialogService dialogService,\n                              StateManager stateManager,\n                              ExternalFileTypes externalFileTypes) {\n        super();\n\n        MainTablePreferences mainTablePreferences = preferencesService.getMainTablePreferences();\n\n        this.getColumns().addAll(new MainTableColumnFactory(\n                database,\n                preferencesService,\n                externalFileTypes,\n                undoManager,\n                dialogService,\n                stateManager).createColumns());\n\n        this.getSortOrder().clear();\n        mainTablePreferences.getColumnPreferences().getColumnSortOrder().forEach(columnModel ->\n                this.getColumns().stream()\n                    .map(column -> (MainTableColumn<?>) column)\n                    .filter(column -> column.getModel().equals(columnModel))\n                    .findFirst()\n                    .ifPresent(column -> this.getSortOrder().add(column)));\n\n        if (mainTablePreferences.getResizeColumnsToFit()) {\n            this.setColumnResizePolicy(new SmartConstrainedResizePolicy());\n        }\n\n        this.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);\n        this.setItems(model.getEntriesFilteredAndSorted());\n        \r\n        model.getEntriesFilteredAndSorted().comparatorProperty().bind(this.comparatorProperty());\n\n        this.getStylesheets().add(MainTable.class.getResource(\"MainTable.css\").toExternalForm());\n        database.getDatabase().registerListener(this);\n    }\n","realPath":"src/main/java/org/jabref/gui/search/SearchResultsTable.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":23,"status":"B"},{"authorDate":"2021-04-09 00:50:02","commitOrder":29,"curCode":"    public MainTable(MainTableDataModel model,\n                     LibraryTab libraryTab,\n                     BibDatabaseContext database,\n                     PreferencesService preferencesService,\n                     DialogService dialogService,\n                     StateManager stateManager,\n                     ExternalFileTypes externalFileTypes,\n                     KeyBindingRepository keyBindingRepository) {\n        super();\n\n        this.libraryTab = libraryTab;\n        this.dialogService = dialogService;\n        this.database = Objects.requireNonNull(database);\n        this.model = model;\n        UndoManager undoManager = libraryTab.getUndoManager();\n        MainTablePreferences mainTablePreferences = preferencesService.getMainTablePreferences();\n\n        importHandler = new ImportHandler(\n                database, externalFileTypes,\n                preferencesService,\n                Globals.getFileUpdateMonitor(),\n                undoManager,\n                stateManager);\n\n        localDragboard = stateManager.getLocalDragboard();\n\n        this.setOnDragOver(this::handleOnDragOverTableView);\n        this.setOnDragDropped(this::handleOnDragDroppedTableView);\n\n        this.getColumns().addAll(\n                new MainTableColumnFactory(\n                        database,\n                        preferencesService,\n                        externalFileTypes,\n                        libraryTab.getUndoManager(),\n                        dialogService,\n                        stateManager).createColumns());\n\n        new ViewModelTableRowFactory<BibEntryTableViewModel>()\n                .withOnMouseClickedEvent((entry, event) -> {\n                    if (event.getClickCount() == 2) {\n                        libraryTab.showAndEdit(entry.getEntry());\n                    }\n                })\n                .withContextMenu(entry -> RightClickMenu.create(entry,\n                        keyBindingRepository,\n                        libraryTab,\n                        dialogService,\n                        stateManager,\n                        preferencesService,\n                        undoManager,\n                        Globals.getClipboardManager()))\n                .setOnDragDetected(this::handleOnDragDetected)\n                .setOnDragDropped(this::handleOnDragDropped)\n                .setOnDragOver(this::handleOnDragOver)\n                .setOnDragExited(this::handleOnDragExited)\n                .setOnMouseDragEntered(this::handleOnDragEntered)\n                .install(this);\n\n        this.getSortOrder().clear();\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        mainTablePreferences.getColumnPreferences().getColumnSortOrder().forEach(columnModel ->\n                this.getColumns().stream()\n                    .map(column -> (MainTableColumn<?>) column)\n                    .filter(column -> column.getModel().equals(columnModel))\n                    .findFirst()\n                    .ifPresent(column -> this.getSortOrder().add(column)));\n\n        if (mainTablePreferences.getResizeColumnsToFit()) {\n            this.setColumnResizePolicy(new SmartConstrainedResizePolicy());\n        }\n\n        this.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);\n\n        this.setItems(model.getEntriesFilteredAndSorted());\n\n        \r\n        model.getEntriesFilteredAndSorted().comparatorProperty().bind(this.comparatorProperty());\n\n        this.getStylesheets().add(MainTable.class.getResource(\"MainTable.css\").toExternalForm());\n\n        \r\n        new PersistenceVisualStateTable(this, preferencesService);\n\n        setupKeyBindings(keyBindingRepository);\n\n        this.setOnKeyTyped(key -> {\n            if (this.getSortOrder().isEmpty()) {\n                return;\n            }\n            this.jumpToSearchKey(getSortOrder().get(0), key);\n        });\n\n        database.getDatabase().registerListener(this);\n    }\n","date":"2021-04-09 00:50:02","endLine":178,"groupId":"2055","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"MainTable","params":"(MainTableDataModelmodel@LibraryTablibraryTab@BibDatabaseContextdatabase@PreferencesServicepreferencesService@DialogServicedialogService@StateManagerstateManager@ExternalFileTypesexternalFileTypes@KeyBindingRepositorykeyBindingRepository)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/5e/effeafc895c7463fa74a1785920182da88ecb7.src","preCode":"    public MainTable(MainTableDataModel model,\n                     LibraryTab libraryTab,\n                     BibDatabaseContext database,\n                     PreferencesService preferencesService,\n                     DialogService dialogService,\n                     StateManager stateManager,\n                     ExternalFileTypes externalFileTypes,\n                     KeyBindingRepository keyBindingRepository) {\n        super();\n\n        this.libraryTab = libraryTab;\n        this.dialogService = dialogService;\n        this.database = Objects.requireNonNull(database);\n        this.model = model;\n        UndoManager undoManager = libraryTab.getUndoManager();\n        MainTablePreferences mainTablePreferences = preferencesService.getMainTablePreferences();\n\n        importHandler = new ImportHandler(\n                database, externalFileTypes,\n                preferencesService,\n                Globals.getFileUpdateMonitor(),\n                undoManager,\n                stateManager);\n\n        localDragboard = stateManager.getLocalDragboard();\n\n        this.setOnDragOver(this::handleOnDragOverTableView);\n        this.setOnDragDropped(this::handleOnDragDroppedTableView);\n\n        this.getColumns().addAll(\n                new MainTableColumnFactory(\n                        database,\n                        preferencesService,\n                        externalFileTypes,\n                        libraryTab.getUndoManager(),\n                        dialogService,\n                        stateManager).createColumns());\n\n        new ViewModelTableRowFactory<BibEntryTableViewModel>()\n                .withOnMouseClickedEvent((entry, event) -> {\n                    if (event.getClickCount() == 2) {\n                        libraryTab.showAndEdit(entry.getEntry());\n                    }\n                })\n                .withContextMenu(entry -> RightClickMenu.create(entry,\n                        keyBindingRepository,\n                        libraryTab,\n                        dialogService,\n                        stateManager,\n                        preferencesService,\n                        undoManager,\n                        Globals.getClipboardManager()))\n                .setOnDragDetected(this::handleOnDragDetected)\n                .setOnDragDropped(this::handleOnDragDropped)\n                .setOnDragOver(this::handleOnDragOver)\n                .setOnDragExited(this::handleOnDragExited)\n                .setOnMouseDragEntered(this::handleOnDragEntered)\n                .install(this);\n\n        this.getSortOrder().clear();\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        mainTablePreferences.getColumnPreferences().getColumnSortOrder().forEach(columnModel ->\n                this.getColumns().stream()\n                    .map(column -> (MainTableColumn<?>) column)\n                    .filter(column -> column.getModel().equals(columnModel))\n                    .findFirst()\n                    .ifPresent(column -> this.getSortOrder().add(column)));\n\n        if (mainTablePreferences.getResizeColumnsToFit()) {\n            this.setColumnResizePolicy(new SmartConstrainedResizePolicy());\n        }\n\n        this.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);\n\n        this.setItems(model.getEntriesFilteredAndSorted());\n\n        \r\n        model.getEntriesFilteredAndSorted().comparatorProperty().bind(this.comparatorProperty());\n\n        this.getStylesheets().add(MainTable.class.getResource(\"MainTable.css\").toExternalForm());\n\n        \r\n        new PersistenceVisualStateTable(this, preferencesService);\n\n        setupKeyBindings(keyBindingRepository);\n\n        this.setOnKeyTyped(key -> {\n            if (this.getSortOrder().isEmpty()) {\n                return;\n            }\n            this.jumpToSearchKey(getSortOrder().get(0), key);\n        });\n\n        database.getDatabase().registerListener(this);\n    }\n","realPath":"src/main/java/org/jabref/gui/maintable/MainTable.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"NB"}],"commitId":"9c5b8ab5cf458447c57caee726705f8202aa3d88","commitMessage":"@@@New global search (#8045)\n\nCo-authored-by: Carl Christian Snethlage <50491877+calixtus@users.noreply.github.com>\n","date":"2021-09-02 22:29:11","modifiedFileCount":"10","status":"M","submitter":"Christoph"},{"authorTime":"2021-04-09 00:50:02","codes":[{"authorDate":"2021-09-10 02:08:03","commitOrder":30,"curCode":"    public SearchResultsTable(SearchResultsTableDataModel model,\n                              BibDatabaseContext database,\n                              PreferencesService preferencesService,\n                              UndoManager undoManager,\n                              DialogService dialogService,\n                              StateManager stateManager,\n                              ExternalFileTypes externalFileTypes) {\n        super();\n\n        MainTablePreferences mainTablePreferences = preferencesService.getMainTablePreferences();\n\n        this.getColumns().addAll(new MainTableColumnFactory(\n                database,\n                preferencesService,\n                externalFileTypes,\n                undoManager,\n                dialogService,\n                stateManager).createColumns());\n\n        this.getSortOrder().clear();\n        mainTablePreferences.getColumnPreferences().getColumnSortOrder().forEach(columnModel ->\n                this.getColumns().stream()\n                    .map(column -> (MainTableColumn<?>) column)\n                    .filter(column -> column.getModel().equals(columnModel))\n                    .findFirst()\n                    .ifPresent(column -> this.getSortOrder().add(column)));\n\n        if (mainTablePreferences.getResizeColumnsToFit()) {\n            this.setColumnResizePolicy(new SmartConstrainedResizePolicy());\n        }\n\n        this.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);\n        this.setItems(model.getEntriesFilteredAndSorted());\n        \r\n        model.getEntriesFilteredAndSorted().comparatorProperty().bind(this.comparatorProperty());\n\n        this.getStylesheets().add(MainTable.class.getResource(\"MainTable.css\").toExternalForm());\n        database.getDatabase().registerListener(this);\n    }\n","date":"2021-09-10 02:08:03","endLine":60,"groupId":"10908","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"SearchResultsTable","params":"(SearchResultsTableDataModelmodel@BibDatabaseContextdatabase@PreferencesServicepreferencesService@UndoManagerundoManager@DialogServicedialogService@StateManagerstateManager@ExternalFileTypesexternalFileTypes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/60/ba2ad60e46b812c58b307ff2331256927dbece.src","preCode":"    public SearchResultsTable(MainTableDataModel model,\n                              BibDatabaseContext database,\n                              PreferencesService preferencesService,\n                              UndoManager undoManager,\n                              DialogService dialogService,\n                              StateManager stateManager,\n                              ExternalFileTypes externalFileTypes) {\n        super();\n\n        MainTablePreferences mainTablePreferences = preferencesService.getMainTablePreferences();\n\n        this.getColumns().addAll(new MainTableColumnFactory(\n                database,\n                preferencesService,\n                externalFileTypes,\n                undoManager,\n                dialogService,\n                stateManager).createColumns());\n\n        this.getSortOrder().clear();\n        mainTablePreferences.getColumnPreferences().getColumnSortOrder().forEach(columnModel ->\n                this.getColumns().stream()\n                    .map(column -> (MainTableColumn<?>) column)\n                    .filter(column -> column.getModel().equals(columnModel))\n                    .findFirst()\n                    .ifPresent(column -> this.getSortOrder().add(column)));\n\n        if (mainTablePreferences.getResizeColumnsToFit()) {\n            this.setColumnResizePolicy(new SmartConstrainedResizePolicy());\n        }\n\n        this.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);\n        this.setItems(model.getEntriesFilteredAndSorted());\n        \r\n        model.getEntriesFilteredAndSorted().comparatorProperty().bind(this.comparatorProperty());\n\n        this.getStylesheets().add(MainTable.class.getResource(\"MainTable.css\").toExternalForm());\n        database.getDatabase().registerListener(this);\n    }\n","realPath":"src/main/java/org/jabref/gui/search/SearchResultsTable.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":22,"status":"M"},{"authorDate":"2021-04-09 00:50:02","commitOrder":30,"curCode":"    public MainTable(MainTableDataModel model,\n                     LibraryTab libraryTab,\n                     BibDatabaseContext database,\n                     PreferencesService preferencesService,\n                     DialogService dialogService,\n                     StateManager stateManager,\n                     ExternalFileTypes externalFileTypes,\n                     KeyBindingRepository keyBindingRepository) {\n        super();\n\n        this.libraryTab = libraryTab;\n        this.dialogService = dialogService;\n        this.database = Objects.requireNonNull(database);\n        this.model = model;\n        UndoManager undoManager = libraryTab.getUndoManager();\n        MainTablePreferences mainTablePreferences = preferencesService.getMainTablePreferences();\n\n        importHandler = new ImportHandler(\n                database, externalFileTypes,\n                preferencesService,\n                Globals.getFileUpdateMonitor(),\n                undoManager,\n                stateManager);\n\n        localDragboard = stateManager.getLocalDragboard();\n\n        this.setOnDragOver(this::handleOnDragOverTableView);\n        this.setOnDragDropped(this::handleOnDragDroppedTableView);\n\n        this.getColumns().addAll(\n                new MainTableColumnFactory(\n                        database,\n                        preferencesService,\n                        externalFileTypes,\n                        libraryTab.getUndoManager(),\n                        dialogService,\n                        stateManager).createColumns());\n\n        new ViewModelTableRowFactory<BibEntryTableViewModel>()\n                .withOnMouseClickedEvent((entry, event) -> {\n                    if (event.getClickCount() == 2) {\n                        libraryTab.showAndEdit(entry.getEntry());\n                    }\n                })\n                .withContextMenu(entry -> RightClickMenu.create(entry,\n                        keyBindingRepository,\n                        libraryTab,\n                        dialogService,\n                        stateManager,\n                        preferencesService,\n                        undoManager,\n                        Globals.getClipboardManager()))\n                .setOnDragDetected(this::handleOnDragDetected)\n                .setOnDragDropped(this::handleOnDragDropped)\n                .setOnDragOver(this::handleOnDragOver)\n                .setOnDragExited(this::handleOnDragExited)\n                .setOnMouseDragEntered(this::handleOnDragEntered)\n                .install(this);\n\n        this.getSortOrder().clear();\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        mainTablePreferences.getColumnPreferences().getColumnSortOrder().forEach(columnModel ->\n                this.getColumns().stream()\n                    .map(column -> (MainTableColumn<?>) column)\n                    .filter(column -> column.getModel().equals(columnModel))\n                    .findFirst()\n                    .ifPresent(column -> this.getSortOrder().add(column)));\n\n        if (mainTablePreferences.getResizeColumnsToFit()) {\n            this.setColumnResizePolicy(new SmartConstrainedResizePolicy());\n        }\n\n        this.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);\n\n        this.setItems(model.getEntriesFilteredAndSorted());\n\n        \r\n        model.getEntriesFilteredAndSorted().comparatorProperty().bind(this.comparatorProperty());\n\n        this.getStylesheets().add(MainTable.class.getResource(\"MainTable.css\").toExternalForm());\n\n        \r\n        new PersistenceVisualStateTable(this, preferencesService);\n\n        setupKeyBindings(keyBindingRepository);\n\n        this.setOnKeyTyped(key -> {\n            if (this.getSortOrder().isEmpty()) {\n                return;\n            }\n            this.jumpToSearchKey(getSortOrder().get(0), key);\n        });\n\n        database.getDatabase().registerListener(this);\n    }\n","date":"2021-04-09 00:50:02","endLine":178,"groupId":"10908","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"MainTable","params":"(MainTableDataModelmodel@LibraryTablibraryTab@BibDatabaseContextdatabase@PreferencesServicepreferencesService@DialogServicedialogService@StateManagerstateManager@ExternalFileTypesexternalFileTypes@KeyBindingRepositorykeyBindingRepository)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jabref-10-0.7/blobInfo/CC_OUT/blobs/5e/effeafc895c7463fa74a1785920182da88ecb7.src","preCode":"    public MainTable(MainTableDataModel model,\n                     LibraryTab libraryTab,\n                     BibDatabaseContext database,\n                     PreferencesService preferencesService,\n                     DialogService dialogService,\n                     StateManager stateManager,\n                     ExternalFileTypes externalFileTypes,\n                     KeyBindingRepository keyBindingRepository) {\n        super();\n\n        this.libraryTab = libraryTab;\n        this.dialogService = dialogService;\n        this.database = Objects.requireNonNull(database);\n        this.model = model;\n        UndoManager undoManager = libraryTab.getUndoManager();\n        MainTablePreferences mainTablePreferences = preferencesService.getMainTablePreferences();\n\n        importHandler = new ImportHandler(\n                database, externalFileTypes,\n                preferencesService,\n                Globals.getFileUpdateMonitor(),\n                undoManager,\n                stateManager);\n\n        localDragboard = stateManager.getLocalDragboard();\n\n        this.setOnDragOver(this::handleOnDragOverTableView);\n        this.setOnDragDropped(this::handleOnDragDroppedTableView);\n\n        this.getColumns().addAll(\n                new MainTableColumnFactory(\n                        database,\n                        preferencesService,\n                        externalFileTypes,\n                        libraryTab.getUndoManager(),\n                        dialogService,\n                        stateManager).createColumns());\n\n        new ViewModelTableRowFactory<BibEntryTableViewModel>()\n                .withOnMouseClickedEvent((entry, event) -> {\n                    if (event.getClickCount() == 2) {\n                        libraryTab.showAndEdit(entry.getEntry());\n                    }\n                })\n                .withContextMenu(entry -> RightClickMenu.create(entry,\n                        keyBindingRepository,\n                        libraryTab,\n                        dialogService,\n                        stateManager,\n                        preferencesService,\n                        undoManager,\n                        Globals.getClipboardManager()))\n                .setOnDragDetected(this::handleOnDragDetected)\n                .setOnDragDropped(this::handleOnDragDropped)\n                .setOnDragOver(this::handleOnDragOver)\n                .setOnDragExited(this::handleOnDragExited)\n                .setOnMouseDragEntered(this::handleOnDragEntered)\n                .install(this);\n\n        this.getSortOrder().clear();\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        mainTablePreferences.getColumnPreferences().getColumnSortOrder().forEach(columnModel ->\n                this.getColumns().stream()\n                    .map(column -> (MainTableColumn<?>) column)\n                    .filter(column -> column.getModel().equals(columnModel))\n                    .findFirst()\n                    .ifPresent(column -> this.getSortOrder().add(column)));\n\n        if (mainTablePreferences.getResizeColumnsToFit()) {\n            this.setColumnResizePolicy(new SmartConstrainedResizePolicy());\n        }\n\n        this.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);\n\n        this.setItems(model.getEntriesFilteredAndSorted());\n\n        \r\n        model.getEntriesFilteredAndSorted().comparatorProperty().bind(this.comparatorProperty());\n\n        this.getStylesheets().add(MainTable.class.getResource(\"MainTable.css\").toExternalForm());\n\n        \r\n        new PersistenceVisualStateTable(this, preferencesService);\n\n        setupKeyBindings(keyBindingRepository);\n\n        this.setOnKeyTyped(key -> {\n            if (this.getSortOrder().isEmpty()) {\n                return;\n            }\n            this.jumpToSearchKey(getSortOrder().get(0), key);\n        });\n\n        database.getDatabase().registerListener(this);\n    }\n","realPath":"src/main/java/org/jabref/gui/maintable/MainTable.java","repoName":"jabref","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"}],"commitId":"24fb04fcdfe1fbf2856e71e3270d3436f282278d","commitMessage":"@@@Merge pull request #8066 from JabRef/fixGlobalSearch\n\nSimplify global search and library name","date":"2021-09-10 02:08:03","modifiedFileCount":"6","status":"M","submitter":"Christoph"}]
