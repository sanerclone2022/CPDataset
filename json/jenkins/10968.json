[{"authorTime":"2010-07-06 10:12:06","codes":[{"authorDate":"2010-03-09 05:55:40","commitOrder":3,"curCode":"    protected void eol(byte[] in, int sz) throws IOException {\n        line.reset();\n        final StringBuffer strBuf = line.getStringBuffer();\n\n        int next = ConsoleNote.findPreamble(in,0,sz);\n\n        List<ConsoleAnnotator<T>> annotators=null;\n\n        {\r\n            int written = 0;\n            while (next>=0) {\n                if (next>written) {\n                    lineOut.write(in,written,next-written);\n                    lineOut.flush();\n                    written = next;\n                } else {\n                    assert next==written;\n                }\n\n                \r\n                final int charPos = strBuf.length();\n\n                int rest = sz - next;\n                ByteArrayInputStream b = new ByteArrayInputStream(in, next, rest);\n\n                try {\n                    final ConsoleNote a = ConsoleNote.readFrom(new DataInputStream(b));\n                    if (a!=null) {\n                        if (annotators==null)\n                            annotators = new ArrayList<ConsoleAnnotator<T>>();\n                        annotators.add(new ConsoleAnnotator<T>() {\n                            public ConsoleAnnotator annotate(T context, MarkupText text) {\n                                return a.annotate(context,text,charPos);\n                            }\n                        });\n                    }\n                } catch (IOException e) {\n                    \r\n                    LOGGER.log(Level.FINE,\"Failed to resurrect annotation\",e);\n                } catch (ClassNotFoundException e) {\n                    LOGGER.log(Level.FINE,\"Failed to resurrect annotation\",e);\n                }\n\n                int bytesUsed = rest - b.available(); \r\n                written += bytesUsed;\n\n\n                next = ConsoleNote.findPreamble(in,written,sz-written);\n            }\n            \r\n            lineOut.write(in,written,sz-written);\n\n            if (annotators!=null) {\n                \r\n                if (ann!=null)      annotators.add(ann);\n                ann = ConsoleAnnotator.combine(annotators);\n            }\n        }\n\n        lineOut.flush();\n        MarkupText mt = new MarkupText(strBuf.toString());\n        if (ann!=null)\n            ann = ann.annotate(context,mt);\n        out.write(mt.toString(true)); \r\n    }\n","date":"2010-03-09 05:55:40","endLine":147,"groupId":"5438","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"eol","params":"(byte[]in@intsz)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/91/9e3af0117fb48e9a9788e85dc2ce07d0fbcf36.src","preCode":"    protected void eol(byte[] in, int sz) throws IOException {\n        line.reset();\n        final StringBuffer strBuf = line.getStringBuffer();\n\n        int next = ConsoleNote.findPreamble(in,0,sz);\n\n        List<ConsoleAnnotator<T>> annotators=null;\n\n        {\r\n            int written = 0;\n            while (next>=0) {\n                if (next>written) {\n                    lineOut.write(in,written,next-written);\n                    lineOut.flush();\n                    written = next;\n                } else {\n                    assert next==written;\n                }\n\n                \r\n                final int charPos = strBuf.length();\n\n                int rest = sz - next;\n                ByteArrayInputStream b = new ByteArrayInputStream(in, next, rest);\n\n                try {\n                    final ConsoleNote a = ConsoleNote.readFrom(new DataInputStream(b));\n                    if (a!=null) {\n                        if (annotators==null)\n                            annotators = new ArrayList<ConsoleAnnotator<T>>();\n                        annotators.add(new ConsoleAnnotator<T>() {\n                            public ConsoleAnnotator annotate(T context, MarkupText text) {\n                                return a.annotate(context,text,charPos);\n                            }\n                        });\n                    }\n                } catch (IOException e) {\n                    \r\n                    LOGGER.log(Level.FINE,\"Failed to resurrect annotation\",e);\n                } catch (ClassNotFoundException e) {\n                    LOGGER.log(Level.FINE,\"Failed to resurrect annotation\",e);\n                }\n\n                int bytesUsed = rest - b.available(); \r\n                written += bytesUsed;\n\n\n                next = ConsoleNote.findPreamble(in,written,sz-written);\n            }\n            \r\n            lineOut.write(in,written,sz-written);\n\n            if (annotators!=null) {\n                \r\n                if (ann!=null)      annotators.add(ann);\n                ann = ConsoleAnnotator.combine(annotators);\n            }\n        }\n\n        lineOut.flush();\n        MarkupText mt = new MarkupText(strBuf.toString());\n        if (ann!=null)\n            ann = ann.annotate(context,mt);\n        out.write(mt.toString(true)); \r\n    }\n","realPath":"core/src/main/java/hudson/console/ConsoleAnnotationOutputStream.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"NB"},{"authorDate":"2010-07-06 10:12:06","commitOrder":3,"curCode":"    protected void eol(byte[] in, int sz) throws IOException {\n\n        int next = ConsoleNote.findPreamble(in,0,sz);\n\n        \r\n        int written = 0;\n        while (next>=0) {\n            if (next>written) {\n                out.write(in,written,next-written);\n                written = next;\n            } else {\n                assert next==written;\n            }\n\n            int rest = sz - next;\n            ByteArrayInputStream b = new ByteArrayInputStream(in, next, rest);\n\n            ConsoleNote.skip(new DataInputStream(b));\n\n            int bytesUsed = rest - b.available(); \r\n            written += bytesUsed;\n\n\n            next = ConsoleNote.findPreamble(in,written,sz-written);\n        }\n        \r\n        out.write(in,written,sz-written);\n    }\n","date":"2010-07-06 10:12:06","endLine":78,"groupId":"8098","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"eol","params":"(byte[]in@intsz)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f1/afa2fad5ad91447f5588d35edaede9defcab40.src","preCode":"    protected void eol(byte[] in, int sz) throws IOException {\n\n        int next = ConsoleNote.findPreamble(in,0,sz);\n\n        \r\n        int written = 0;\n        while (next>=0) {\n            if (next>written) {\n                out.write(in,written,next-written);\n                written = next;\n            } else {\n                assert next==written;\n            }\n\n            int rest = sz - next;\n            ByteArrayInputStream b = new ByteArrayInputStream(in, next, rest);\n\n            ConsoleNote.skip(new DataInputStream(b));\n\n            int bytesUsed = rest - b.available(); \r\n            written += bytesUsed;\n\n\n            next = ConsoleNote.findPreamble(in,written,sz-written);\n        }\n        \r\n        out.write(in,written,sz-written);\n    }\n","realPath":"core/src/main/java/hudson/console/PlainTextConsoleOutputStream.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"}],"commitId":"941559c98cfe0d046ac432e2bc86d5219d1b4043","commitMessage":"@@@[FIXED HUDSON-6034] plain text console output needs to filter out inline console annotations\n\ngit-svn-id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/main@32514 71c3de6d-444a-0410-be80-ed276b4c234a\n","date":"2010-07-06 10:12:06","modifiedFileCount":"4","status":"M","submitter":"kohsuke"},{"authorTime":"2010-07-06 10:12:06","codes":[{"authorDate":"2018-10-08 14:16:41","commitOrder":4,"curCode":"    protected void eol(byte[] in, int sz) throws IOException {\n        line.reset();\n        final StringBuffer strBuf = line.getStringBuffer();\n\n        int next = ConsoleNote.findPreamble(in,0,sz);\n\n        List<ConsoleAnnotator<T>> annotators=null;\n\n        {\r\n            int written = 0;\n            while (next>=0) {\n                if (next>written) {\n                    lineOut.write(in,written,next-written);\n                    lineOut.flush();\n                    written = next;\n                } else {\n                    assert next==written;\n                }\n\n                \r\n                final int charPos = strBuf.length();\n\n                int rest = sz - next;\n                ByteArrayInputStream b = new ByteArrayInputStream(in, next, rest);\n\n                try {\n                    final ConsoleNote a = ConsoleNote.readFrom(new DataInputStream(b));\n                    if (a!=null) {\n                        if (annotators==null)\n                            annotators = new ArrayList<>();\n                        annotators.add(new ConsoleAnnotator<T>() {\n                            @Override\n                            public ConsoleAnnotator<T> annotate(T context, MarkupText text) {\n                                return a.annotate(context,text,charPos);\n                            }\n                        });\n                    }\n                } catch (IOException e) {\n                    \r\n                    LOGGER.log(Level.FINE,\"Failed to resurrect annotation\",e);\n                } catch (ClassNotFoundException e) {\n                    LOGGER.log(Level.FINE,\"Failed to resurrect annotation\",e);\n                }\n\n                int bytesUsed = rest - b.available(); \r\n                written += bytesUsed;\n\n\n                next = ConsoleNote.findPreamble(in,written,sz-written);\n            }\n            \r\n            lineOut.write(in,written,sz-written);\n\n            if (annotators!=null) {\n                \r\n                if (ann!=null)      annotators.add(ann);\n                ann = ConsoleAnnotator.combine(annotators);\n            }\n        }\n\n        lineOut.flush();\n        MarkupText mt = new MarkupText(strBuf.toString());\n        if (ann!=null)\n            ann = ann.annotate(context,mt);\n        out.write(mt.toString(true)); \r\n    }\n","date":"2018-10-08 14:16:41","endLine":150,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"eol","params":"(byte[]in@intsz)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f3/a22c875cbdc9041424a7ab71070c9e5d8c5472.src","preCode":"    protected void eol(byte[] in, int sz) throws IOException {\n        line.reset();\n        final StringBuffer strBuf = line.getStringBuffer();\n\n        int next = ConsoleNote.findPreamble(in,0,sz);\n\n        List<ConsoleAnnotator<T>> annotators=null;\n\n        {\r\n            int written = 0;\n            while (next>=0) {\n                if (next>written) {\n                    lineOut.write(in,written,next-written);\n                    lineOut.flush();\n                    written = next;\n                } else {\n                    assert next==written;\n                }\n\n                \r\n                final int charPos = strBuf.length();\n\n                int rest = sz - next;\n                ByteArrayInputStream b = new ByteArrayInputStream(in, next, rest);\n\n                try {\n                    final ConsoleNote a = ConsoleNote.readFrom(new DataInputStream(b));\n                    if (a!=null) {\n                        if (annotators==null)\n                            annotators = new ArrayList<ConsoleAnnotator<T>>();\n                        annotators.add(new ConsoleAnnotator<T>() {\n                            public ConsoleAnnotator annotate(T context, MarkupText text) {\n                                return a.annotate(context,text,charPos);\n                            }\n                        });\n                    }\n                } catch (IOException e) {\n                    \r\n                    LOGGER.log(Level.FINE,\"Failed to resurrect annotation\",e);\n                } catch (ClassNotFoundException e) {\n                    LOGGER.log(Level.FINE,\"Failed to resurrect annotation\",e);\n                }\n\n                int bytesUsed = rest - b.available(); \r\n                written += bytesUsed;\n\n\n                next = ConsoleNote.findPreamble(in,written,sz-written);\n            }\n            \r\n            lineOut.write(in,written,sz-written);\n\n            if (annotators!=null) {\n                \r\n                if (ann!=null)      annotators.add(ann);\n                ann = ConsoleAnnotator.combine(annotators);\n            }\n        }\n\n        lineOut.flush();\n        MarkupText mt = new MarkupText(strBuf.toString());\n        if (ann!=null)\n            ann = ann.annotate(context,mt);\n        out.write(mt.toString(true)); \r\n    }\n","realPath":"core/src/main/java/hudson/console/ConsoleAnnotationOutputStream.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2010-07-06 10:12:06","commitOrder":4,"curCode":"    protected void eol(byte[] in, int sz) throws IOException {\n\n        int next = ConsoleNote.findPreamble(in,0,sz);\n\n        \r\n        int written = 0;\n        while (next>=0) {\n            if (next>written) {\n                out.write(in,written,next-written);\n                written = next;\n            } else {\n                assert next==written;\n            }\n\n            int rest = sz - next;\n            ByteArrayInputStream b = new ByteArrayInputStream(in, next, rest);\n\n            ConsoleNote.skip(new DataInputStream(b));\n\n            int bytesUsed = rest - b.available(); \r\n            written += bytesUsed;\n\n\n            next = ConsoleNote.findPreamble(in,written,sz-written);\n        }\n        \r\n        out.write(in,written,sz-written);\n    }\n","date":"2010-07-06 10:12:06","endLine":78,"groupId":"8098","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"eol","params":"(byte[]in@intsz)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f1/afa2fad5ad91447f5588d35edaede9defcab40.src","preCode":"    protected void eol(byte[] in, int sz) throws IOException {\n\n        int next = ConsoleNote.findPreamble(in,0,sz);\n\n        \r\n        int written = 0;\n        while (next>=0) {\n            if (next>written) {\n                out.write(in,written,next-written);\n                written = next;\n            } else {\n                assert next==written;\n            }\n\n            int rest = sz - next;\n            ByteArrayInputStream b = new ByteArrayInputStream(in, next, rest);\n\n            ConsoleNote.skip(new DataInputStream(b));\n\n            int bytesUsed = rest - b.available(); \r\n            written += bytesUsed;\n\n\n            next = ConsoleNote.findPreamble(in,written,sz-written);\n        }\n        \r\n        out.write(in,written,sz-written);\n    }\n","realPath":"core/src/main/java/hudson/console/PlainTextConsoleOutputStream.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"}],"commitId":"ef5e4a01455f69a02ab589ecdd1c494fe5a3e3b7","commitMessage":"@@@Merge commit 'edd303e91747380043723c1b4c7dc843b91afa51' into security-master\n","date":"2018-10-08 14:16:41","modifiedFileCount":"63","status":"M","submitter":"Daniel Beck"},{"authorTime":"2010-07-06 10:12:06","codes":[{"authorDate":"2019-04-08 23:18:26","commitOrder":5,"curCode":"    protected void eol(byte[] in, int sz) throws IOException {\n        line.reset();\n        final StringBuffer strBuf = line.getStringBuffer();\n\n        int next = ConsoleNote.findPreamble(in,0,sz);\n\n        List<ConsoleAnnotator<T>> annotators=null;\n\n        {\r\n            int written = 0;\n            while (next>=0) {\n                if (next>written) {\n                    lineOut.write(in,written,next-written);\n                    lineOut.flush();\n                    written = next;\n                } else {\n                    assert next==written;\n                }\n\n                \r\n                final int charPos = strBuf.length();\n\n                int rest = sz - next;\n                ByteArrayInputStream b = new ByteArrayInputStream(in, next, rest);\n\n                try {\n                    final ConsoleNote a = ConsoleNote.readFrom(new DataInputStream(b));\n                    if (a!=null) {\n                        if (annotators==null)\n                            annotators = new ArrayList<>();\n                        annotators.add(new ConsoleAnnotator<T>() {\n                            @Override\n                            public ConsoleAnnotator<T> annotate(T context, MarkupText text) {\n                                return a.annotate(context,text,charPos);\n                            }\n                        });\n                    }\n                } catch (IOException | ClassNotFoundException e) {\n                    \r\n                    LOGGER.log(Level.FINE, \"Failed to resurrect annotation from \\\"\" + StringEscapeUtils.escapeJava(new String(in, next, rest)) + \"\\\"\", e);\n                }\n\n                int bytesUsed = rest - b.available(); \r\n                written += bytesUsed;\n\n\n                next = ConsoleNote.findPreamble(in,written,sz-written);\n            }\n            \r\n            lineOut.write(in,written,sz-written);\n\n            if (annotators!=null) {\n                \r\n                if (ann!=null)      annotators.add(ann);\n                ann = ConsoleAnnotator.combine(annotators);\n            }\n        }\n\n        lineOut.flush();\n        MarkupText mt = new MarkupText(strBuf.toString());\n        if (ann!=null)\n            ann = ann.annotate(context,mt);\n        out.write(mt.toString(true)); \r\n    }\n","date":"2019-04-08 23:18:26","endLine":148,"groupId":"10968","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"eol","params":"(byte[]in@intsz)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5c/731a17ddc5854329b93a7886173ea4ed456b43.src","preCode":"    protected void eol(byte[] in, int sz) throws IOException {\n        line.reset();\n        final StringBuffer strBuf = line.getStringBuffer();\n\n        int next = ConsoleNote.findPreamble(in,0,sz);\n\n        List<ConsoleAnnotator<T>> annotators=null;\n\n        {\r\n            int written = 0;\n            while (next>=0) {\n                if (next>written) {\n                    lineOut.write(in,written,next-written);\n                    lineOut.flush();\n                    written = next;\n                } else {\n                    assert next==written;\n                }\n\n                \r\n                final int charPos = strBuf.length();\n\n                int rest = sz - next;\n                ByteArrayInputStream b = new ByteArrayInputStream(in, next, rest);\n\n                try {\n                    final ConsoleNote a = ConsoleNote.readFrom(new DataInputStream(b));\n                    if (a!=null) {\n                        if (annotators==null)\n                            annotators = new ArrayList<>();\n                        annotators.add(new ConsoleAnnotator<T>() {\n                            @Override\n                            public ConsoleAnnotator<T> annotate(T context, MarkupText text) {\n                                return a.annotate(context,text,charPos);\n                            }\n                        });\n                    }\n                } catch (IOException e) {\n                    \r\n                    LOGGER.log(Level.FINE,\"Failed to resurrect annotation\",e);\n                } catch (ClassNotFoundException e) {\n                    LOGGER.log(Level.FINE,\"Failed to resurrect annotation\",e);\n                }\n\n                int bytesUsed = rest - b.available(); \r\n                written += bytesUsed;\n\n\n                next = ConsoleNote.findPreamble(in,written,sz-written);\n            }\n            \r\n            lineOut.write(in,written,sz-written);\n\n            if (annotators!=null) {\n                \r\n                if (ann!=null)      annotators.add(ann);\n                ann = ConsoleAnnotator.combine(annotators);\n            }\n        }\n\n        lineOut.flush();\n        MarkupText mt = new MarkupText(strBuf.toString());\n        if (ann!=null)\n            ann = ann.annotate(context,mt);\n        out.write(mt.toString(true)); \r\n    }\n","realPath":"core/src/main/java/hudson/console/ConsoleAnnotationOutputStream.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2010-07-06 10:12:06","commitOrder":5,"curCode":"    protected void eol(byte[] in, int sz) throws IOException {\n\n        int next = ConsoleNote.findPreamble(in,0,sz);\n\n        \r\n        int written = 0;\n        while (next>=0) {\n            if (next>written) {\n                out.write(in,written,next-written);\n                written = next;\n            } else {\n                assert next==written;\n            }\n\n            int rest = sz - next;\n            ByteArrayInputStream b = new ByteArrayInputStream(in, next, rest);\n\n            ConsoleNote.skip(new DataInputStream(b));\n\n            int bytesUsed = rest - b.available(); \r\n            written += bytesUsed;\n\n\n            next = ConsoleNote.findPreamble(in,written,sz-written);\n        }\n        \r\n        out.write(in,written,sz-written);\n    }\n","date":"2010-07-06 10:12:06","endLine":78,"groupId":"10968","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"eol","params":"(byte[]in@intsz)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f1/afa2fad5ad91447f5588d35edaede9defcab40.src","preCode":"    protected void eol(byte[] in, int sz) throws IOException {\n\n        int next = ConsoleNote.findPreamble(in,0,sz);\n\n        \r\n        int written = 0;\n        while (next>=0) {\n            if (next>written) {\n                out.write(in,written,next-written);\n                written = next;\n            } else {\n                assert next==written;\n            }\n\n            int rest = sz - next;\n            ByteArrayInputStream b = new ByteArrayInputStream(in, next, rest);\n\n            ConsoleNote.skip(new DataInputStream(b));\n\n            int bytesUsed = rest - b.available(); \r\n            written += bytesUsed;\n\n\n            next = ConsoleNote.findPreamble(in,written,sz-written);\n        }\n        \r\n        out.write(in,written,sz-written);\n    }\n","realPath":"core/src/main/java/hudson/console/PlainTextConsoleOutputStream.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"}],"commitId":"6b4c6c955d10ade9b78ab02fd2733cc29e0b1ab3","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2019-04-08 23:18:26","modifiedFileCount":"242","status":"M","submitter":"Daniel Beck"}]
