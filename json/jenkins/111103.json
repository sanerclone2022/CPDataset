[{"authorTime":"2007-11-27 10:12:16","codes":[{"authorDate":"2007-09-28 22:32:36","commitOrder":4,"curCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = Hudson.getInstance().getItemByFullName(request.getParameter(\"job\"),AbstractProject.class);\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            try {\n                FilePath ws = p.getWorkspace();\n\n                if(ws==null || !ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                String msg = ws.validateAntFileMask(value);\n                if(errorIfNotExist)     error(msg);\n                else                    warning(msg);\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","date":"2007-09-28 22:32:36","endLine":243,"groupId":"7567","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"check","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d3/50cc067e9a2120da6fdb285817b790b4877b09.src","preCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = Hudson.getInstance().getItemByFullName(request.getParameter(\"job\"),AbstractProject.class);\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            try {\n                FilePath ws = p.getWorkspace();\n\n                if(ws==null || !ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                String msg = ws.validateAntFileMask(value);\n                if(errorIfNotExist)     error(msg);\n                else                    warning(msg);\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/FormFieldValidator.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"NB"},{"authorDate":"2007-11-27 10:12:16","commitOrder":4,"curCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = Hudson.getInstance().getItemByFullName(request.getParameter(\"job\"),AbstractProject.class);\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            if(value.contains(\"*\")) {\n                \r\n                error(\"Wildcard is not allowed here\");\n                return;\n            }\n\n            try {\n                FilePath ws = p.getWorkspace();\n\n                if(!ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                if(ws.child(value).exists()) {\n                    if (expectingFile) {\n                        if(!ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a file\");\n                    } else {\n                        if(ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a directory\");\n                    }\n                } else {\n                    String msg = \"No such \"+(expectingFile?\"file\":\"directory\")+\": \" + value;\n                    if(errorIfNotExist)     error(msg);\n                    else                    warning(msg);\n                }\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","date":"2007-11-27 10:12:16","endLine":321,"groupId":"7361","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"check","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5c/e8fb310864d0129a95a0ccc69ba7215124299b.src","preCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = Hudson.getInstance().getItemByFullName(request.getParameter(\"job\"),AbstractProject.class);\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            if(value.contains(\"*\")) {\n                \r\n                error(\"Wildcard is not allowed here\");\n                return;\n            }\n\n            try {\n                FilePath ws = p.getWorkspace();\n\n                if(!ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                if(ws.child(value).exists()) {\n                    if (expectingFile) {\n                        if(!ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a file\");\n                    } else {\n                        if(ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a directory\");\n                    }\n                } else {\n                    String msg = \"No such \"+(expectingFile?\"file\":\"directory\")+\": \" + value;\n                    if(errorIfNotExist)     error(msg);\n                    else                    warning(msg);\n                }\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/FormFieldValidator.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"B"}],"commitId":"62a34d3632eae4bfcb23bfbc7fcd29bcdc2c0586","commitMessage":"@@@Incorporated a part of the changes as discussed in http://www.nabble.com/Re%3A--Issue-1032---Pluginify-the-dependency-management-tf4874011.html\nI made a change to improve code reuse.\n\n\ngit-svn-id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/main@6080 71c3de6d-444a-0410-be80-ed276b4c234a\n","date":"2007-11-27 10:12:16","modifiedFileCount":"1","status":"M","submitter":"kohsuke"},{"authorTime":"2008-01-17 14:15:48","codes":[{"authorDate":"2007-09-28 22:32:36","commitOrder":5,"curCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = Hudson.getInstance().getItemByFullName(request.getParameter(\"job\"),AbstractProject.class);\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            try {\n                FilePath ws = p.getWorkspace();\n\n                if(ws==null || !ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                String msg = ws.validateAntFileMask(value);\n                if(errorIfNotExist)     error(msg);\n                else                    warning(msg);\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","date":"2007-09-28 22:32:36","endLine":243,"groupId":"7567","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"check","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d3/50cc067e9a2120da6fdb285817b790b4877b09.src","preCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = Hudson.getInstance().getItemByFullName(request.getParameter(\"job\"),AbstractProject.class);\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            try {\n                FilePath ws = p.getWorkspace();\n\n                if(ws==null || !ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                String msg = ws.validateAntFileMask(value);\n                if(errorIfNotExist)     error(msg);\n                else                    warning(msg);\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/FormFieldValidator.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"N"},{"authorDate":"2008-01-17 14:15:48","commitOrder":5,"curCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?, ?> p = getProject();\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            if(value.contains(\"*\")) {\n                \r\n                error(\"Wildcard is not allowed here\");\n                return;\n            }\n\n            try {\n                FilePath ws = p.getWorkspace();\n\n                if(!ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                if(ws.child(value).exists()) {\n                    if (expectingFile) {\n                        if(!ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a file\");\n                    } else {\n                        if(ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a directory\");\n                    }\n                } else {\n                    String msg = \"No such \"+(expectingFile?\"file\":\"directory\")+\": \" + value;\n                    if(errorIfNotExist)     error(msg);\n                    else                    warning(msg);\n                }\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","date":"2008-01-17 14:15:48","endLine":322,"groupId":"7361","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"check","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/03/804cdbee2a0a57afeffa94a539ec56dcb89e84.src","preCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = Hudson.getInstance().getItemByFullName(request.getParameter(\"job\"),AbstractProject.class);\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            if(value.contains(\"*\")) {\n                \r\n                error(\"Wildcard is not allowed here\");\n                return;\n            }\n\n            try {\n                FilePath ws = p.getWorkspace();\n\n                if(!ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                if(ws.child(value).exists()) {\n                    if (expectingFile) {\n                        if(!ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a file\");\n                    } else {\n                        if(ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a directory\");\n                    }\n                } else {\n                    String msg = \"No such \"+(expectingFile?\"file\":\"directory\")+\": \" + value;\n                    if(errorIfNotExist)     error(msg);\n                    else                    warning(msg);\n                }\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/FormFieldValidator.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"f7df02d71ad0eeead1d1aebb9b99cef0361899cc","commitMessage":"@@@allowing override in case this is used by Job.\n\n\ngit-svn-id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/main@6719 71c3de6d-444a-0410-be80-ed276b4c234a\n","date":"2008-01-17 14:15:48","modifiedFileCount":"1","status":"M","submitter":"kohsuke"},{"authorTime":"2008-03-07 04:24:48","codes":[{"authorDate":"2008-03-07 04:24:48","commitOrder":6,"curCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = Hudson.getInstance().getItemByFullName(request.getParameter(\"job\"),AbstractProject.class);\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            try {\n                FilePath ws = getBaseDirectory(p);\n\n                if(ws==null || !ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                String msg = ws.validateAntFileMask(value);\n                if(errorIfNotExist)     error(msg);\n                else                    warning(msg);\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","date":"2008-03-07 04:24:48","endLine":243,"groupId":"6480","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"check","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/45/53742edcb8c0c6c4748cc2c62c3ce92093243b.src","preCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = Hudson.getInstance().getItemByFullName(request.getParameter(\"job\"),AbstractProject.class);\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            try {\n                FilePath ws = p.getWorkspace();\n\n                if(ws==null || !ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                String msg = ws.validateAntFileMask(value);\n                if(errorIfNotExist)     error(msg);\n                else                    warning(msg);\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/FormFieldValidator.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"},{"authorDate":"2008-03-07 04:24:48","commitOrder":6,"curCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?, ?> p = getProject();\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            if(value.contains(\"*\")) {\n                \r\n                error(\"Wildcard is not allowed here\");\n                return;\n            }\n\n            try {\n                FilePath ws = getBaseDirectory(p);\n\n                if(!ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                if(ws.child(value).exists()) {\n                    if (expectingFile) {\n                        if(!ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a file\");\n                    } else {\n                        if(ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a directory\");\n                    }\n                } else {\n                    String msg = \"No such \"+(expectingFile?\"file\":\"directory\")+\": \" + value;\n                    if(errorIfNotExist)     error(msg);\n                    else                    warning(msg);\n                }\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","date":"2008-03-07 04:24:48","endLine":326,"groupId":"8338","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"check","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/45/53742edcb8c0c6c4748cc2c62c3ce92093243b.src","preCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?, ?> p = getProject();\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            if(value.contains(\"*\")) {\n                \r\n                error(\"Wildcard is not allowed here\");\n                return;\n            }\n\n            try {\n                FilePath ws = p.getWorkspace();\n\n                if(!ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                if(ws.child(value).exists()) {\n                    if (expectingFile) {\n                        if(!ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a file\");\n                    } else {\n                        if(ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a directory\");\n                    }\n                } else {\n                    String msg = \"No such \"+(expectingFile?\"file\":\"directory\")+\": \" + value;\n                    if(errorIfNotExist)     error(msg);\n                    else                    warning(msg);\n                }\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/FormFieldValidator.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"}],"commitId":"15eccb8b8504b9f8267297c8e90353f9648d3f17","commitMessage":"@@@fixed a bug in the form field validation of pom.xml\n\n\ngit-svn-id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/main@7376 71c3de6d-444a-0410-be80-ed276b4c234a\n","date":"2008-03-07 04:24:48","modifiedFileCount":"2","status":"M","submitter":"kohsuke"},{"authorTime":"2008-05-24 01:43:09","codes":[{"authorDate":"2008-03-07 04:24:48","commitOrder":7,"curCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = Hudson.getInstance().getItemByFullName(request.getParameter(\"job\"),AbstractProject.class);\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            try {\n                FilePath ws = getBaseDirectory(p);\n\n                if(ws==null || !ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                String msg = ws.validateAntFileMask(value);\n                if(errorIfNotExist)     error(msg);\n                else                    warning(msg);\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","date":"2008-03-07 04:24:48","endLine":243,"groupId":"6480","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"check","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/45/53742edcb8c0c6c4748cc2c62c3ce92093243b.src","preCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = Hudson.getInstance().getItemByFullName(request.getParameter(\"job\"),AbstractProject.class);\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            try {\n                FilePath ws = getBaseDirectory(p);\n\n                if(ws==null || !ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                String msg = ws.validateAntFileMask(value);\n                if(errorIfNotExist)     error(msg);\n                else                    warning(msg);\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/FormFieldValidator.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"N"},{"authorDate":"2008-05-24 01:43:09","commitOrder":7,"curCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?, ?> p = getProject();\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            if(value.contains(\"*\")) {\n                \r\n                error(\"Wildcard is not allowed here\");\n                return;\n            }\n\n            try {\n                FilePath ws = getBaseDirectory(p);\n\n                if(ws==null) {\r\n                    ok();\n                    return;\n                }\n\n                if(!ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                if(ws.child(value).exists()) {\n                    if (expectingFile) {\n                        if(!ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a file\");\n                    } else {\n                        if(ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a directory\");\n                    }\n                } else {\n                    String msg = \"No such \"+(expectingFile?\"file\":\"directory\")+\": \" + value;\n                    if(errorIfNotExist)     error(msg);\n                    else                    warning(msg);\n                }\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","date":"2008-05-24 01:43:09","endLine":367,"groupId":"1780","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"check","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/cd/5752f34150f3dff1375cd92c2c0622a4cbc520.src","preCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?, ?> p = getProject();\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            if(value.contains(\"*\")) {\n                \r\n                error(\"Wildcard is not allowed here\");\n                return;\n            }\n\n            try {\n                FilePath ws = getBaseDirectory(p);\n\n                if(!ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                if(ws.child(value).exists()) {\n                    if (expectingFile) {\n                        if(!ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a file\");\n                    } else {\n                        if(ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a directory\");\n                    }\n                } else {\n                    String msg = \"No such \"+(expectingFile?\"file\":\"directory\")+\": \" + value;\n                    if(errorIfNotExist)     error(msg);\n                    else                    warning(msg);\n                }\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/FormFieldValidator.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"}],"commitId":"f70901a7c64a74ccbfb54c8f43bc29a9b245f985","commitMessage":"@@@when the slave is offline.  don't crap out.\n\ngit-svn-id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/main@9612 71c3de6d-444a-0410-be80-ed276b4c234a\n","date":"2008-05-24 01:43:09","modifiedFileCount":"1","status":"M","submitter":"kohsuke"},{"authorTime":"2008-12-25 03:31:10","codes":[{"authorDate":"2008-12-25 03:31:10","commitOrder":8,"curCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = (AbstractProject<?,?>)subject;\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            try {\n                FilePath ws = getBaseDirectory(p);\n\n                if(ws==null || !ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                String msg = ws.validateAntFileMask(value);\n                if(errorIfNotExist)     error(msg);\n                else                    warning(msg);\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","date":"2008-12-25 03:31:10","endLine":313,"groupId":"6480","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"check","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/07/92f5d11b64d4ed62ccbbfaab0edd0f9bbf55ae.src","preCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = Hudson.getInstance().getItemByFullName(request.getParameter(\"job\"),AbstractProject.class);\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            try {\n                FilePath ws = getBaseDirectory(p);\n\n                if(ws==null || !ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                String msg = ws.validateAntFileMask(value);\n                if(errorIfNotExist)     error(msg);\n                else                    warning(msg);\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/FormFieldValidator.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"},{"authorDate":"2008-12-25 03:31:10","commitOrder":8,"curCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = (AbstractProject<?,?>)subject;\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            if(value.contains(\"*\")) {\n                \r\n                error(\"Wildcard is not allowed here\");\n                return;\n            }\n\n            try {\n                FilePath ws = getBaseDirectory(p);\n\n                if(ws==null) {\r\n                    ok();\n                    return;\n                }\n\n                if(!ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                if(ws.child(value).exists()) {\n                    if (expectingFile) {\n                        if(!ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a file\");\n                    } else {\n                        if(ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a directory\");\n                    }\n                } else {\n                    String msg = \"No such \"+(expectingFile?\"file\":\"directory\")+\": \" + value;\n                    if(errorIfNotExist)     error(msg);\n                    else                    warning(msg);\n                }\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","date":"2008-12-25 03:31:10","endLine":402,"groupId":"1780","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"check","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/07/92f5d11b64d4ed62ccbbfaab0edd0f9bbf55ae.src","preCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?, ?> p = getProject();\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            if(value.contains(\"*\")) {\n                \r\n                error(\"Wildcard is not allowed here\");\n                return;\n            }\n\n            try {\n                FilePath ws = getBaseDirectory(p);\n\n                if(ws==null) {\r\n                    ok();\n                    return;\n                }\n\n                if(!ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                if(ws.child(value).exists()) {\n                    if (expectingFile) {\n                        if(!ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a file\");\n                    } else {\n                        if(ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a directory\");\n                    }\n                } else {\n                    String msg = \"No such \"+(expectingFile?\"file\":\"directory\")+\": \" + value;\n                    if(errorIfNotExist)     error(msg);\n                    else                    warning(msg);\n                }\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/FormFieldValidator.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"}],"commitId":"fb873cbaf2e6b3cd4d040bc4ca85dea1cc08c5af","commitMessage":"@@@[FIXED HUDSON-2715] Field validators in configure screen shouldn't require the admin permission where possible.\n\ngit-svn-id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/main@13838 71c3de6d-444a-0410-be80-ed276b4c234a\n","date":"2008-12-25 03:31:10","modifiedFileCount":"14","status":"M","submitter":"kohsuke"},{"authorTime":"2008-12-25 03:31:10","codes":[{"authorDate":"2012-09-20 04:43:20","commitOrder":9,"curCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = (AbstractProject<?,?>)subject;\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            try {\n                FilePath ws = getBaseDirectory(p);\n\n                if(ws==null || !ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                String msg = ws.validateAntFileMask(value, 10000);\n                if(errorIfNotExist)     error(msg);\n                else                    warning(msg);\n            } catch (InterruptedException e) {\n                ok(Messages.FormFieldValidator_did_not_manage_to_validate_may_be_too_sl(value));\n            }\n        }\n","date":"2012-09-20 04:43:20","endLine":387,"groupId":"6480","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"check","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e6/44e028bede5046a5f90d3ebbff9815fc1a9e6d.src","preCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = (AbstractProject<?,?>)subject;\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            try {\n                FilePath ws = getBaseDirectory(p);\n\n                if(ws==null || !ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                String msg = ws.validateAntFileMask(value);\n                if(errorIfNotExist)     error(msg);\n                else                    warning(msg);\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/FormFieldValidator.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":364,"status":"M"},{"authorDate":"2008-12-25 03:31:10","commitOrder":9,"curCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = (AbstractProject<?,?>)subject;\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            if(value.contains(\"*\")) {\n                \r\n                error(\"Wildcard is not allowed here\");\n                return;\n            }\n\n            try {\n                FilePath ws = getBaseDirectory(p);\n\n                if(ws==null) {\r\n                    ok();\n                    return;\n                }\n\n                if(!ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                if(ws.child(value).exists()) {\n                    if (expectingFile) {\n                        if(!ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a file\");\n                    } else {\n                        if(ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a directory\");\n                    }\n                } else {\n                    String msg = \"No such \"+(expectingFile?\"file\":\"directory\")+\": \" + value;\n                    if(errorIfNotExist)     error(msg);\n                    else                    warning(msg);\n                }\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","date":"2008-12-25 03:31:10","endLine":402,"groupId":"1780","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"check","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/07/92f5d11b64d4ed62ccbbfaab0edd0f9bbf55ae.src","preCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = (AbstractProject<?,?>)subject;\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            if(value.contains(\"*\")) {\n                \r\n                error(\"Wildcard is not allowed here\");\n                return;\n            }\n\n            try {\n                FilePath ws = getBaseDirectory(p);\n\n                if(ws==null) {\r\n                    ok();\n                    return;\n                }\n\n                if(!ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                if(ws.child(value).exists()) {\n                    if (expectingFile) {\n                        if(!ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a file\");\n                    } else {\n                        if(ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a directory\");\n                    }\n                } else {\n                    String msg = \"No such \"+(expectingFile?\"file\":\"directory\")+\": \" + value;\n                    if(errorIfNotExist)     error(msg);\n                    else                    warning(msg);\n                }\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/FormFieldValidator.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"N"}],"commitId":"a885cc2179ea76bced186c3ed223ce50fec58a75","commitMessage":"@@@[FIXED JENKINS-7214] FilePath.validateAntFileMask too slow for /configure.","date":"2012-09-20 04:43:20","modifiedFileCount":"3","status":"M","submitter":"Jesse Glick"},{"authorTime":"2008-12-25 03:31:10","codes":[{"authorDate":"2014-11-24 23:37:58","commitOrder":10,"curCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = (AbstractProject<?,?>)subject;\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            try {\n                FilePath ws = getBaseDirectory(p);\n\n                if(ws==null || !ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                String msg = ws.validateAntFileMask(value, FilePath.VALIDATE_ANT_FILE_MASK_BOUND);\n                if(errorIfNotExist)     error(msg);\n                else                    warning(msg);\n            } catch (InterruptedException e) {\n                ok(Messages.FormFieldValidator_did_not_manage_to_validate_may_be_too_sl(value));\n            }\n        }\n","date":"2014-11-24 23:37:58","endLine":387,"groupId":"111103","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"check","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d3/44dd43d5b9c1dc8bd02ab0f0a89bb56bdae8d7.src","preCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = (AbstractProject<?,?>)subject;\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            try {\n                FilePath ws = getBaseDirectory(p);\n\n                if(ws==null || !ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                String msg = ws.validateAntFileMask(value, 10000);\n                if(errorIfNotExist)     error(msg);\n                else                    warning(msg);\n            } catch (InterruptedException e) {\n                ok(Messages.FormFieldValidator_did_not_manage_to_validate_may_be_too_sl(value));\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/FormFieldValidator.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":364,"status":"M"},{"authorDate":"2008-12-25 03:31:10","commitOrder":10,"curCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = (AbstractProject<?,?>)subject;\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            if(value.contains(\"*\")) {\n                \r\n                error(\"Wildcard is not allowed here\");\n                return;\n            }\n\n            try {\n                FilePath ws = getBaseDirectory(p);\n\n                if(ws==null) {\r\n                    ok();\n                    return;\n                }\n\n                if(!ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                if(ws.child(value).exists()) {\n                    if (expectingFile) {\n                        if(!ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a file\");\n                    } else {\n                        if(ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a directory\");\n                    }\n                } else {\n                    String msg = \"No such \"+(expectingFile?\"file\":\"directory\")+\": \" + value;\n                    if(errorIfNotExist)     error(msg);\n                    else                    warning(msg);\n                }\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","date":"2008-12-25 03:31:10","endLine":402,"groupId":"111103","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"check","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/07/92f5d11b64d4ed62ccbbfaab0edd0f9bbf55ae.src","preCode":"        protected void check() throws IOException, ServletException {\n            String value = fixEmpty(request.getParameter(\"value\"));\n            AbstractProject<?,?> p = (AbstractProject<?,?>)subject;\n\n            if(value==null || p==null) {\n                ok(); \r\n                return;\n            }\n\n            if(value.contains(\"*\")) {\n                \r\n                error(\"Wildcard is not allowed here\");\n                return;\n            }\n\n            try {\n                FilePath ws = getBaseDirectory(p);\n\n                if(ws==null) {\r\n                    ok();\n                    return;\n                }\n\n                if(!ws.exists()) {\r\n                    ok();\n                    return;\n                }\n\n                if(ws.child(value).exists()) {\n                    if (expectingFile) {\n                        if(!ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a file\");\n                    } else {\n                        if(ws.child(value).isDirectory())\n                            ok();\n                        else\n                            error(value+\" is not a directory\");\n                    }\n                } else {\n                    String msg = \"No such \"+(expectingFile?\"file\":\"directory\")+\": \" + value;\n                    if(errorIfNotExist)     error(msg);\n                    else                    warning(msg);\n                }\n            } catch (InterruptedException e) {\n                ok(); \r\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/FormFieldValidator.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"N"}],"commitId":"534328b264f9338e48418d2bcc0d28daaf48b3a0","commitMessage":"@@@[FIXED JENKINS-25759] Avoid consuming too much memory while running validateAntFileMask.\nNot fully solved.  since the scannedDirs field can still grow to be large.  but at least clearing files/dirsNotIncluded.\nAlso imposing a 5s timeout on the scan regardless of file count.  and defining a user-customizable bound.","date":"2014-11-24 23:37:58","modifiedFileCount":"4","status":"M","submitter":"Jesse Glick"}]
