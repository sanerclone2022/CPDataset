[{"authorTime":"2015-01-08 05:12:18","codes":[{"authorDate":"2015-01-08 05:12:18","commitOrder":1,"curCode":"    public void buildPendingWhenBuildRunning() throws Exception {\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        project.getBuildersList().add(new SleepBuilder(2000));\n\n        \r\n        project.scheduleBuild2(1);\n        \r\n        project.scheduleBuild2(1);\n\n        \r\n        assertTrue(project.isInQueue());\n\n        \r\n        j.jenkins.getQueue().cancel(project.getQueueItem());\n\n        \r\n        assertTrue(j.jenkins.getQueue().isEmpty());\n    }\n","date":"2015-01-08 05:12:18","endLine":63,"groupId":"6632","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildPendingWhenBuildRunning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/4c/92d2032d889c0c0c0539bc0cbc243c9eb44ea7.src","preCode":"    public void buildPendingWhenBuildRunning() throws Exception {\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        project.getBuildersList().add(new SleepBuilder(2000));\n\n        \r\n        project.scheduleBuild2(1);\n        \r\n        project.scheduleBuild2(1);\n\n        \r\n        assertTrue(project.isInQueue());\n\n        \r\n        j.jenkins.getQueue().cancel(project.getQueueItem());\n\n        \r\n        assertTrue(j.jenkins.getQueue().isEmpty());\n    }\n","realPath":"test/src/test/java/hudson/model/JobQueueTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2015-01-08 05:12:18","commitOrder":1,"curCode":"    public void buildPendingWhenBuildInPostProduction() throws Exception {\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        project.getBuildersList().add(new SleepBuilder(1000));\n\n        \r\n        project.scheduleBuild2(1);\n        int count =0;\n        \r\n        while(!JobQueueTest.fireCompletedFlag && count<100) {\n            Thread.sleep(100);\n            count++;\n        }\n\n        if(JobQueueTest.fireCompletedFlag) {\n        \r\n            project.scheduleBuild2(0);\n            assertTrue(project.isInQueue()); \r\n            j.jenkins.getQueue().maintain();\n            while(j.jenkins.getQueue().getItem(project) instanceof WaitingItem) {\n                System.out.println(j.jenkins.getQueue().getItem(project));\n                j.jenkins.getQueue().maintain();\n                Thread.sleep(10);\n            }\n            assertTrue(j.jenkins.getQueue().getItem(project) instanceof BlockedItem); \r\n        }\n        else {\n            fail(\"The maximum attemps for checking if the job is in POST_PRODUCTION State have reached\");\n        }\n        count=0;\n        while(!JobQueueTest.fireFinalizeFlag && count<100) {\n            Thread.sleep(100);\n            count++;\n        }\n\n        if(JobQueueTest.fireFinalizeFlag) {\n        \r\n        \r\n            j.jenkins.getQueue().maintain();\n            assertFalse(j.jenkins.getQueue().getItem(project) instanceof BlockedItem);\n        }\n        else {\n            fail(\"The maximum attemps for checking if the job is in COMPLETED State have reached\");\n        }\n        Thread.sleep(1000); \r\n    }\n","date":"2015-01-08 05:12:18","endLine":110,"groupId":"6632","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildPendingWhenBuildInPostProduction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/4c/92d2032d889c0c0c0539bc0cbc243c9eb44ea7.src","preCode":"    public void buildPendingWhenBuildInPostProduction() throws Exception {\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        project.getBuildersList().add(new SleepBuilder(1000));\n\n        \r\n        project.scheduleBuild2(1);\n        int count =0;\n        \r\n        while(!JobQueueTest.fireCompletedFlag && count<100) {\n            Thread.sleep(100);\n            count++;\n        }\n\n        if(JobQueueTest.fireCompletedFlag) {\n        \r\n            project.scheduleBuild2(0);\n            assertTrue(project.isInQueue()); \r\n            j.jenkins.getQueue().maintain();\n            while(j.jenkins.getQueue().getItem(project) instanceof WaitingItem) {\n                System.out.println(j.jenkins.getQueue().getItem(project));\n                j.jenkins.getQueue().maintain();\n                Thread.sleep(10);\n            }\n            assertTrue(j.jenkins.getQueue().getItem(project) instanceof BlockedItem); \r\n        }\n        else {\n            fail(\"The maximum attemps for checking if the job is in POST_PRODUCTION State have reached\");\n        }\n        count=0;\n        while(!JobQueueTest.fireFinalizeFlag && count<100) {\n            Thread.sleep(100);\n            count++;\n        }\n\n        if(JobQueueTest.fireFinalizeFlag) {\n        \r\n        \r\n            j.jenkins.getQueue().maintain();\n            assertFalse(j.jenkins.getQueue().getItem(project) instanceof BlockedItem);\n        }\n        else {\n            fail(\"The maximum attemps for checking if the job is in COMPLETED State have reached\");\n        }\n        Thread.sleep(1000); \r\n    }\n","realPath":"test/src/test/java/hudson/model/JobQueueTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"}],"commitId":"cd0752432ed718e30281eb4e2732646550996868","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into JENKINS-22811\n\nConflicts:\n\ttest/src/test/java/hudson/model/ItemGroupMixInTest.java\n","date":"2015-01-08 05:12:18","modifiedFileCount":"190","status":"B","submitter":"christ66"},{"authorTime":"2015-08-18 20:45:17","codes":[{"authorDate":"2015-01-08 05:12:18","commitOrder":2,"curCode":"    public void buildPendingWhenBuildRunning() throws Exception {\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        project.getBuildersList().add(new SleepBuilder(2000));\n\n        \r\n        project.scheduleBuild2(1);\n        \r\n        project.scheduleBuild2(1);\n\n        \r\n        assertTrue(project.isInQueue());\n\n        \r\n        j.jenkins.getQueue().cancel(project.getQueueItem());\n\n        \r\n        assertTrue(j.jenkins.getQueue().isEmpty());\n    }\n","date":"2015-01-08 05:12:18","endLine":63,"groupId":"10522","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"buildPendingWhenBuildRunning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/4c/92d2032d889c0c0c0539bc0cbc243c9eb44ea7.src","preCode":"    public void buildPendingWhenBuildRunning() throws Exception {\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        project.getBuildersList().add(new SleepBuilder(2000));\n\n        \r\n        project.scheduleBuild2(1);\n        \r\n        project.scheduleBuild2(1);\n\n        \r\n        assertTrue(project.isInQueue());\n\n        \r\n        j.jenkins.getQueue().cancel(project.getQueueItem());\n\n        \r\n        assertTrue(j.jenkins.getQueue().isEmpty());\n    }\n","realPath":"test/src/test/java/hudson/model/JobQueueTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"},{"authorDate":"2015-08-18 20:45:17","commitOrder":2,"curCode":"    public void buildPendingWhenBuildInPostProduction() throws Exception {\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        project.getBuildersList().add(new SleepBuilder(1000));\n\n        \r\n        project.scheduleBuild2(1);\n        int count =0;\n        \r\n        while(!JobQueueTest.fireCompletedFlag && count<100) {\n            Thread.sleep(100);\n            count++;\n        }\n\n        if(JobQueueTest.fireCompletedFlag) {\n        \r\n            project.scheduleBuild2(0);\n            assertTrue(project.isInQueue()); \r\n            j.jenkins.getQueue().maintain();\n            while(j.jenkins.getQueue().getItem(project) instanceof WaitingItem) {\n                System.out.println(j.jenkins.getQueue().getItem(project));\n                j.jenkins.getQueue().maintain();\n                Thread.sleep(10);\n            }\n            assertTrue(j.jenkins.getQueue().getItem(project) instanceof BlockedItem); \r\n        }\n        else {\n            fail(\"The maximum attempts for checking if the job is in POST_PRODUCTION State have reached\");\n        }\n        count=0;\n        while(!JobQueueTest.fireFinalizeFlag && count<100) {\n            Thread.sleep(100);\n            count++;\n        }\n\n        if(JobQueueTest.fireFinalizeFlag) {\n        \r\n        \r\n            j.jenkins.getQueue().maintain();\n            assertFalse(j.jenkins.getQueue().getItem(project) instanceof BlockedItem);\n        }\n        else {\n            fail(\"The maximum attempts for checking if the job is in COMPLETED State have reached\");\n        }\n        Thread.sleep(1000); \r\n    }\n","date":"2015-08-18 20:45:17","endLine":110,"groupId":"10522","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildPendingWhenBuildInPostProduction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/41/af7e4d1ed4dd26d2ecf5518ae6891fb8d0898e.src","preCode":"    public void buildPendingWhenBuildInPostProduction() throws Exception {\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        project.getBuildersList().add(new SleepBuilder(1000));\n\n        \r\n        project.scheduleBuild2(1);\n        int count =0;\n        \r\n        while(!JobQueueTest.fireCompletedFlag && count<100) {\n            Thread.sleep(100);\n            count++;\n        }\n\n        if(JobQueueTest.fireCompletedFlag) {\n        \r\n            project.scheduleBuild2(0);\n            assertTrue(project.isInQueue()); \r\n            j.jenkins.getQueue().maintain();\n            while(j.jenkins.getQueue().getItem(project) instanceof WaitingItem) {\n                System.out.println(j.jenkins.getQueue().getItem(project));\n                j.jenkins.getQueue().maintain();\n                Thread.sleep(10);\n            }\n            assertTrue(j.jenkins.getQueue().getItem(project) instanceof BlockedItem); \r\n        }\n        else {\n            fail(\"The maximum attemps for checking if the job is in POST_PRODUCTION State have reached\");\n        }\n        count=0;\n        while(!JobQueueTest.fireFinalizeFlag && count<100) {\n            Thread.sleep(100);\n            count++;\n        }\n\n        if(JobQueueTest.fireFinalizeFlag) {\n        \r\n        \r\n            j.jenkins.getQueue().maintain();\n            assertFalse(j.jenkins.getQueue().getItem(project) instanceof BlockedItem);\n        }\n        else {\n            fail(\"The maximum attemps for checking if the job is in COMPLETED State have reached\");\n        }\n        Thread.sleep(1000); \r\n    }\n","realPath":"test/src/test/java/hudson/model/JobQueueTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"d81cd2bbf156d3184ccc07cdb608ff856f5a95d7","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2015-08-18 20:45:17","modifiedFileCount":"32","status":"M","submitter":"Kohsuke Kawaguchi"}]
