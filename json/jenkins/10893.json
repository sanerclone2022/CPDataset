[{"authorTime":"2021-01-13 22:41:47","codes":[{"authorDate":"2021-01-13 22:41:47","commitOrder":1,"curCode":"    public void testOpenNoFollowLinks_NoFollowsLinkInternalSymlink_FileVF() throws Exception {\n        File ws = tmp.newFolder(\"ws\");\n        VirtualFile rootVirtualFile = VirtualFile.forFile(tmp.getRoot());\n        String symlinkName = \"symlink\";\n        Util.createSymlink(tmp.getRoot(), ws.getName(), symlinkName, null);\n        String childString = \"child\";\n        FileUtils.write(new File(ws, childString), childString);\n        File childThroughSymlink = new File(tmp.getRoot(), \"/\" + symlinkName + \"/\" + childString);\n        VirtualFile child = rootVirtualFile.child(symlinkName).child(childString);\n        try {\n        child.open(true);\n            fail(\"Should have not followed links.\");\n        } catch (IOException ioe) {\n            \r\n        }\n    }\n","date":"2021-01-13 22:41:47","endLine":1087,"groupId":"1949","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOpenNoFollowLinks_NoFollowsLinkInternalSymlink_FileVF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d6/51a438db756ff8093f9c9feda8c330c4908d1c.src","preCode":"    public void testOpenNoFollowLinks_NoFollowsLinkInternalSymlink_FileVF() throws Exception {\n        File ws = tmp.newFolder(\"ws\");\n        VirtualFile rootVirtualFile = VirtualFile.forFile(tmp.getRoot());\n        String symlinkName = \"symlink\";\n        Util.createSymlink(tmp.getRoot(), ws.getName(), symlinkName, null);\n        String childString = \"child\";\n        FileUtils.write(new File(ws, childString), childString);\n        File childThroughSymlink = new File(tmp.getRoot(), \"/\" + symlinkName + \"/\" + childString);\n        VirtualFile child = rootVirtualFile.child(symlinkName).child(childString);\n        try {\n        child.open(true);\n            fail(\"Should have not followed links.\");\n        } catch (IOException ioe) {\n            \r\n        }\n    }\n","realPath":"core/src/test/java/jenkins/util/VirtualFileTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":1072,"status":"B"},{"authorDate":"2021-01-13 22:41:47","commitOrder":1,"curCode":"    public void testOpenNoFollowLinks_NoFollowsLinkInternalSymlink_FilePathVF() throws Exception {\n        File ws = tmp.newFolder(\"ws\");\n        String symlinkName = \"symlink\";\n        Util.createSymlink(tmp.getRoot(), ws.getName(), symlinkName, null);\n        String childString = \"child\";\n        FileUtils.write(new File(ws, childString), childString);\n        VirtualFile rootVirtualPath = VirtualFile.forFilePath(new FilePath(tmp.getRoot()));\n        VirtualFile childVirtualPath = rootVirtualPath.child(symlinkName).child(childString);\n        try {\n            childVirtualPath.open(true);\n            fail(\"Should have not followed links.\");\n        } catch (IOException ioe) {\n            \r\n        }\n    }\n","date":"2021-01-13 22:41:47","endLine":1105,"groupId":"1950","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOpenNoFollowLinks_NoFollowsLinkInternalSymlink_FilePathVF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d6/51a438db756ff8093f9c9feda8c330c4908d1c.src","preCode":"    public void testOpenNoFollowLinks_NoFollowsLinkInternalSymlink_FilePathVF() throws Exception {\n        File ws = tmp.newFolder(\"ws\");\n        String symlinkName = \"symlink\";\n        Util.createSymlink(tmp.getRoot(), ws.getName(), symlinkName, null);\n        String childString = \"child\";\n        FileUtils.write(new File(ws, childString), childString);\n        VirtualFile rootVirtualPath = VirtualFile.forFilePath(new FilePath(tmp.getRoot()));\n        VirtualFile childVirtualPath = rootVirtualPath.child(symlinkName).child(childString);\n        try {\n            childVirtualPath.open(true);\n            fail(\"Should have not followed links.\");\n        } catch (IOException ioe) {\n            \r\n        }\n    }\n","realPath":"core/src/test/java/jenkins/util/VirtualFileTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":1091,"status":"B"}],"commitId":"82688811faeb81a6286e72bf6edd569e40826c7f","commitMessage":"@@@Merge branch 'security-master' into master\n","date":"2021-01-13 22:41:47","modifiedFileCount":"21","status":"B","submitter":"Daniel Beck"},{"authorTime":"2021-05-26 03:51:14","codes":[{"authorDate":"2021-05-26 03:51:14","commitOrder":2,"curCode":"    public void testOpenNoFollowLinks_NoFollowsLinkInternalSymlink_FileVF() throws Exception {\n        File ws = tmp.newFolder(\"ws\");\n        VirtualFile rootVirtualFile = VirtualFile.forFile(tmp.getRoot());\n        String symlinkName = \"symlink\";\n        Util.createSymlink(tmp.getRoot(), ws.getName(), symlinkName, null);\n        String childString = \"child\";\n        FileUtils.write(new File(ws, childString), childString);\n        File childThroughSymlink = new File(tmp.getRoot(), \"/\" + symlinkName + \"/\" + childString);\n        VirtualFile child = rootVirtualFile.child(symlinkName).child(childString);\n        assertThrows(\"Should have not followed links\", IOException.class, () -> child.open(true));\n    }\n","date":"2021-05-26 03:51:14","endLine":1143,"groupId":"10893","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOpenNoFollowLinks_NoFollowsLinkInternalSymlink_FileVF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e2/f4d81a450dfd2217cbbc79abdb990441f48437.src","preCode":"    public void testOpenNoFollowLinks_NoFollowsLinkInternalSymlink_FileVF() throws Exception {\n        File ws = tmp.newFolder(\"ws\");\n        VirtualFile rootVirtualFile = VirtualFile.forFile(tmp.getRoot());\n        String symlinkName = \"symlink\";\n        Util.createSymlink(tmp.getRoot(), ws.getName(), symlinkName, null);\n        String childString = \"child\";\n        FileUtils.write(new File(ws, childString), childString);\n        File childThroughSymlink = new File(tmp.getRoot(), \"/\" + symlinkName + \"/\" + childString);\n        VirtualFile child = rootVirtualFile.child(symlinkName).child(childString);\n        try {\n        child.open(true);\n            fail(\"Should have not followed links.\");\n        } catch (IOException ioe) {\n            \r\n        }\n    }\n","realPath":"core/src/test/java/jenkins/util/VirtualFileTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":1133,"status":"M"},{"authorDate":"2021-05-26 03:51:14","commitOrder":2,"curCode":"    public void testOpenNoFollowLinks_NoFollowsLinkInternalSymlink_FilePathVF() throws Exception {\n        File ws = tmp.newFolder(\"ws\");\n        String symlinkName = \"symlink\";\n        Util.createSymlink(tmp.getRoot(), ws.getName(), symlinkName, null);\n        String childString = \"child\";\n        FileUtils.write(new File(ws, childString), childString);\n        VirtualFile rootVirtualPath = VirtualFile.forFilePath(new FilePath(tmp.getRoot()));\n        VirtualFile childVirtualPath = rootVirtualPath.child(symlinkName).child(childString);\n        assertThrows(\"Should have not followed links\", IOException.class, () -> childVirtualPath.open(true));\n    }\n","date":"2021-05-26 03:51:14","endLine":1156,"groupId":"10893","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOpenNoFollowLinks_NoFollowsLinkInternalSymlink_FilePathVF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e2/f4d81a450dfd2217cbbc79abdb990441f48437.src","preCode":"    public void testOpenNoFollowLinks_NoFollowsLinkInternalSymlink_FilePathVF() throws Exception {\n        File ws = tmp.newFolder(\"ws\");\n        String symlinkName = \"symlink\";\n        Util.createSymlink(tmp.getRoot(), ws.getName(), symlinkName, null);\n        String childString = \"child\";\n        FileUtils.write(new File(ws, childString), childString);\n        VirtualFile rootVirtualPath = VirtualFile.forFilePath(new FilePath(tmp.getRoot()));\n        VirtualFile childVirtualPath = rootVirtualPath.child(symlinkName).child(childString);\n        try {\n            childVirtualPath.open(true);\n            fail(\"Should have not followed links.\");\n        } catch (IOException ioe) {\n            \r\n        }\n    }\n","realPath":"core/src/test/java/jenkins/util/VirtualFileTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":1147,"status":"M"}],"commitId":"7f382b576e05c58c2e25d9030bbf0aa2b8c08bba","commitMessage":"@@@Fix `CatchAndPrintStackTrace`.  `CatchFail`.  and `EmptyCatch` Error Prone violations in tests (#5522)\n\nCo-authored-by: Daniel Beck <1831569+daniel-beck@users.noreply.github.com>","date":"2021-05-26 03:51:14","modifiedFileCount":"10","status":"M","submitter":"Basil Crow"}]
