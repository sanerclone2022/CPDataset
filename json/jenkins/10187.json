[{"authorTime":"2016-07-12 15:10:16","codes":[{"authorDate":"2016-07-12 15:10:16","commitOrder":1,"curCode":"    public void cancelQuietDownShouldSuccessOnNoQuietDownedJenkinsAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final OneShotEvent finish = new OneShotEvent();\n        Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                .invoke();\n        assertThat(result, succeededSilently());\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n        assertThat(project.isBuilding(), equalTo(true));\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n    }\n","date":"2016-07-12 15:10:16","endLine":132,"groupId":"6588","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"cancelQuietDownShouldSuccessOnNoQuietDownedJenkinsAndRunningExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/fb/a92e78857eea9b0d7ed254f3e2432783bb8468.src","preCode":"    public void cancelQuietDownShouldSuccessOnNoQuietDownedJenkinsAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final OneShotEvent finish = new OneShotEvent();\n        Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                .invoke();\n        assertThat(result, succeededSilently());\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n        assertThat(project.isBuilding(), equalTo(true));\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n    }\n","realPath":"test/src/test/java/hudson/cli/CancelQuietDownCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"},{"authorDate":"2016-07-12 15:10:16","commitOrder":1,"curCode":"    public void cancelQuietDownShouldSuccessOnQuietDownedJenkinsAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final OneShotEvent finish = new OneShotEvent();\n        Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(true));\n        j.jenkins.getActiveInstance().doQuietDown();\n        QuietDownCommandTest.assertJenkinsInQuietMode(j);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                .invoke();\n        assertThat(result, succeededSilently());\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n        assertThat(project.isBuilding(), equalTo(true));\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n    }\n","date":"2016-07-12 15:10:16","endLine":168,"groupId":"6588","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"cancelQuietDownShouldSuccessOnQuietDownedJenkinsAndRunningExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/fb/a92e78857eea9b0d7ed254f3e2432783bb8468.src","preCode":"    public void cancelQuietDownShouldSuccessOnQuietDownedJenkinsAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final OneShotEvent finish = new OneShotEvent();\n        Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(true));\n        j.jenkins.getActiveInstance().doQuietDown();\n        QuietDownCommandTest.assertJenkinsInQuietMode(j);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                .invoke();\n        assertThat(result, succeededSilently());\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n        assertThat(project.isBuilding(), equalTo(true));\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n    }\n","realPath":"test/src/test/java/hudson/cli/CancelQuietDownCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"B"}],"commitId":"e750cd3511670c233a1bcf8dfac3bb6aa80097e9","commitMessage":"@@@Merge pull request #2420 from pjanouse/JENKINS-35423\n\n[JENKINS-35423] CLI commands quiet-down/cancel-quiet-down extracted from core to CLI\n","date":"2016-07-12 15:10:16","modifiedFileCount":"2","status":"B","submitter":"Oliver Gond?a"},{"authorTime":"2020-01-20 21:55:10","codes":[{"authorDate":"2016-07-12 15:10:16","commitOrder":2,"curCode":"    public void cancelQuietDownShouldSuccessOnNoQuietDownedJenkinsAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final OneShotEvent finish = new OneShotEvent();\n        Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                .invoke();\n        assertThat(result, succeededSilently());\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n        assertThat(project.isBuilding(), equalTo(true));\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n    }\n","date":"2016-07-12 15:10:16","endLine":132,"groupId":"10187","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"cancelQuietDownShouldSuccessOnNoQuietDownedJenkinsAndRunningExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/fb/a92e78857eea9b0d7ed254f3e2432783bb8468.src","preCode":"    public void cancelQuietDownShouldSuccessOnNoQuietDownedJenkinsAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final OneShotEvent finish = new OneShotEvent();\n        Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                .invoke();\n        assertThat(result, succeededSilently());\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n        assertThat(project.isBuilding(), equalTo(true));\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n    }\n","realPath":"test/src/test/java/hudson/cli/CancelQuietDownCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"},{"authorDate":"2020-01-20 21:55:10","commitOrder":2,"curCode":"    public void cancelQuietDownShouldSuccessOnQuietDownedJenkinsAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final OneShotEvent finish = new OneShotEvent();\n        Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(true));\n        j.jenkins.doQuietDown();\n        QuietDownCommandTest.assertJenkinsInQuietMode(j);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                .invoke();\n        assertThat(result, succeededSilently());\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n        assertThat(project.isBuilding(), equalTo(true));\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n    }\n","date":"2020-01-20 21:55:10","endLine":158,"groupId":"10187","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"cancelQuietDownShouldSuccessOnQuietDownedJenkinsAndRunningExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d4/c40b9cb33f53438a40ab18e591d389fd084be8.src","preCode":"    public void cancelQuietDownShouldSuccessOnQuietDownedJenkinsAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final OneShotEvent finish = new OneShotEvent();\n        Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(true));\n        j.jenkins.getActiveInstance().doQuietDown();\n        QuietDownCommandTest.assertJenkinsInQuietMode(j);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                .invoke();\n        assertThat(result, succeededSilently());\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n        assertThat(project.isBuilding(), equalTo(true));\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n    }\n","realPath":"test/src/test/java/hudson/cli/CancelQuietDownCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"574ec6e5bdf2e4ac9394e290fefff5ac1c9a5c96","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2020-01-20 21:55:10","modifiedFileCount":"193","status":"M","submitter":"Wadeck Follonier"}]
