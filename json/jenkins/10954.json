[{"authorTime":"2016-05-22 13:15:11","codes":[{"authorDate":"2016-02-19 22:53:15","commitOrder":3,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","date":"2016-02-19 22:53:15","endLine":89,"groupId":"410","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/12/7ec43f6c59672859aa45f589290b9b3c15a28b.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteJobCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"NB"},{"authorDate":"2016-05-22 13:15:11","commitOrder":3,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if(computer == null) {\n                    if(names == null) {\n                        names = new ArrayList<String>();\n                        for (Computer c : jenkins.getComputers())\n                            if (!c.getName().isEmpty())\n                                names.add(c.getName());\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","date":"2016-05-22 13:15:11","endLine":106,"groupId":"8960","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/cd/3a3bf8f96703d29dba6d3d5f1db4c397a353aa.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if(computer == null) {\n                    if(names == null) {\n                        names = new ArrayList<String>();\n                        for (Computer c : jenkins.getComputers())\n                            if (!c.getName().isEmpty())\n                                names.add(c.getName());\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/ConnectNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"}],"commitId":"6b328e10d8aedd02e61a2d49863f302046588b86","commitMessage":"@@@[JENKINS-31417] CLI command connect-node extracted from core to CLI (#1923)\n\n* [JENKINS-31417] CLI command connect-node extracted from core to CLI\n\nconnect-node extended to accept multiple node names\nconnect-node covered by test-cases\n\n* Slighty modified Javadoc\n\n* Fixed translations after rebase\n","date":"2016-05-22 13:15:11","modifiedFileCount":"1","status":"M","submitter":"Pavel Janousek"},{"authorTime":"2016-07-12 15:13:33","codes":[{"authorDate":"2016-02-19 22:53:15","commitOrder":4,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","date":"2016-02-19 22:53:15","endLine":89,"groupId":"410","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/12/7ec43f6c59672859aa45f589290b9b3c15a28b.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteJobCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2016-07-12 15:13:33","commitOrder":4,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if(computer == null) {\n                    if(names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","date":"2016-07-12 15:13:33","endLine":102,"groupId":"1567","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ff/9017a76e2a74c4ebb8677966e201385534b897.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if(computer == null) {\n                    if(names == null) {\n                        names = new ArrayList<String>();\n                        for (Computer c : jenkins.getComputers())\n                            if (!c.getName().isEmpty())\n                                names.add(c.getName());\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/ConnectNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"b21ab921dedd041a33023955194606a5a2df2b24","commitMessage":"@@@[JENKINS-35570] List of computer's names extracted to Util (#2408)\n\n* [JENKINS-35570] List of computer's names extracted to Util","date":"2016-07-12 15:13:33","modifiedFileCount":"7","status":"M","submitter":"Pavel Janousek"},{"authorTime":"2016-10-15 23:34:12","codes":[{"authorDate":"2016-10-15 23:34:12","commitOrder":5,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2016-10-15 23:34:12","endLine":90,"groupId":"410","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/64/2de5a06c5520963f7046ab70ed820c632d55e0.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteJobCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2016-10-15 23:34:12","commitOrder":5,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if(computer == null) {\n                    if(names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2016-10-15 23:34:12","endLine":103,"groupId":"1567","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ae/20f5e60848507503cca9f3ff0d3a21cb9c53a5.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if(computer == null) {\n                    if(names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/ConnectNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"b50034c9bffb704acfce0bc49d99855b689eace6","commitMessage":"@@@[FIXED JENKINS-38650] - Cleanup spelling in CLi commands + Javadoc updates (#2571)\n\n* [FIXED JENKINS-38650] - Cleanup spelling in CLi commands.\n\nAlso adds some javadoc and since definitions.\n\n* [JENKINS-38650] - Move common warning message to the constant\n\n* [JENKINS-38650] - DeleteViewCommand should also use the constant string\n\n* [JENKINS-38650] - Rename the constant in order to make the name more explicit\n","date":"2016-10-15 23:34:12","modifiedFileCount":"23","status":"M","submitter":"Oleg Nenashev"},{"authorTime":"2019-01-27 21:52:11","codes":[{"authorDate":"2019-01-27 21:52:11","commitOrder":6,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>();\n        hs.addAll(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-01-27 21:52:11","endLine":89,"groupId":"410","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/03/e63e8579da3f9b631577120b30bb873ab6d8ae.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteJobCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2019-01-27 21:52:11","commitOrder":6,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>();\n        hs.addAll(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if(computer == null) {\n                    if(names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-01-27 21:52:11","endLine":103,"groupId":"1567","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/18/9d2b5406376a2e88c6411308aa991238d5339e.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if(computer == null) {\n                    if(names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/ConnectNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"86da98c317f6d40e5ffb40e92bfe351c6543d592","commitMessage":"@@@Merge pull request #3208 from oleg-nenashev/cleanup/cli\n\nBulk cleanup of code in hudson.cli.","date":"2019-01-27 21:52:11","modifiedFileCount":"26","status":"M","submitter":"Baptiste Mathus"},{"authorTime":"2019-07-03 01:06:17","codes":[{"authorDate":"2019-07-03 01:06:17","commitOrder":7,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-07-03 01:06:17","endLine":89,"groupId":"410","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/0c/b1ee7f5a467a03f148928698ae9e6445fca7c9.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>();\n        hs.addAll(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteJobCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2019-07-03 01:06:17","commitOrder":7,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if(computer == null) {\n                    if(names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-07-03 01:06:17","endLine":103,"groupId":"1567","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/4f/87a15daddff15a2cb634483b84f0c77d9504c2.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>();\n        hs.addAll(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if(computer == null) {\n                    if(names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/ConnectNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"d72041041acc3f887237e9d0da639a1587142320","commitMessage":"@@@Merge commit '36fa47add280b81c0e54c61dd7b7d015da5307c9' of github.com:jenkinsci/jenkins\n","date":"2019-07-03 01:06:17","modifiedFileCount":"39","status":"M","submitter":"Jeff Thompson"},{"authorTime":"2019-07-03 02:02:48","codes":[{"authorDate":"2019-07-03 02:02:48","commitOrder":8,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-07-03 02:02:48","endLine":89,"groupId":"410","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f6/c4fe5c9ededb72a1d5a048fa1800817b72c523.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteJobCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2019-07-03 02:02:48","commitOrder":8,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if(computer == null) {\n                    if(names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-07-03 02:02:48","endLine":103,"groupId":"1567","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/01/2237190f057c84fbd9d15023343d0102b12491.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if(computer == null) {\n                    if(names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/ConnectNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"494119294fa2f095b4a28db0dd32c0d2092d9fa1","commitMessage":"@@@Merge commit '4404c6e662befe16e8daa1ea7a412df73b370086' of github.com:jenkinsci/jenkins\n","date":"2019-07-03 02:02:48","modifiedFileCount":"292","status":"M","submitter":"Jeff Thompson"},{"authorTime":"2019-09-27 04:40:34","codes":[{"authorDate":"2019-09-27 04:40:34","commitOrder":9,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = job_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-09-27 04:40:34","endLine":89,"groupId":"410","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/37/5e158a8737c02fb62f881b9aecfa611fe14595.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteJobCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2019-09-27 04:40:34","commitOrder":9,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if(computer == null) {\n                    if(names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = node_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-09-27 04:40:34","endLine":103,"groupId":"1567","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ce/0fb64fef68e5e5cf4d0b6203678fab6e0206f7.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if(computer == null) {\n                    if(names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/ConnectNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"36ac586fc013a8b7228175aea49495a8448a9cc4","commitMessage":"@@@removed redundant string.format calls and merged array creation with addAll() calls (#4214)\n\n","date":"2019-09-27 04:40:34","modifiedFileCount":"9","status":"M","submitter":"StefanSpieker"},{"authorTime":"2019-10-08 22:47:11","codes":[{"authorDate":"2019-09-27 04:40:34","commitOrder":10,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = job_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-09-27 04:40:34","endLine":89,"groupId":"410","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/37/5e158a8737c02fb62f881b9aecfa611fe14595.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = job_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteJobCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"},{"authorDate":"2019-10-08 22:47:11","commitOrder":10,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = Computer.resolveForCLI(node_s);\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = node_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-10-08 22:47:11","endLine":86,"groupId":"8225","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/16/fc8f9bf563b44d713b81c78c8eb18c380abaae.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if(computer == null) {\n                    if(names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = node_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/ConnectNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"6adccd7dda1b894d1dc8927ad3361120c2927548","commitMessage":"@@@Merge pull request #4258 from jsoref/java-cleanup-Computer.resolveForCLI\n\nIntelliJ/Java: Duplicate code -> Computer.resolveForCLI","date":"2019-10-08 22:47:11","modifiedFileCount":"2","status":"M","submitter":"Oleg Nenashev"},{"authorTime":"2019-10-08 22:47:11","codes":[{"authorDate":"2020-01-20 21:55:10","commitOrder":11,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = job_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2020-01-20 21:55:10","endLine":89,"groupId":"410","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d8/29340892e12afd60819aa4d9f803db9f51e270.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = job_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteJobCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2019-10-08 22:47:11","commitOrder":11,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = Computer.resolveForCLI(node_s);\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = node_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-10-08 22:47:11","endLine":86,"groupId":"8225","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/16/fc8f9bf563b44d713b81c78c8eb18c380abaae.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = Computer.resolveForCLI(node_s);\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = node_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/ConnectNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"574ec6e5bdf2e4ac9394e290fefff5ac1c9a5c96","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2020-01-20 21:55:10","modifiedFileCount":"193","status":"M","submitter":"Wadeck Follonier"},{"authorTime":"2019-10-08 22:47:11","codes":[{"authorDate":"2021-04-20 04:54:17","commitOrder":12,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(Item.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = job_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2021-04-20 04:54:17","endLine":90,"groupId":"10954","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/8f/f81987e6ee81f27c4c50e0d7097c751964a2b3.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = job_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteJobCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2019-10-08 22:47:11","commitOrder":12,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = Computer.resolveForCLI(node_s);\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = node_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-10-08 22:47:11","endLine":86,"groupId":"10954","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/16/fc8f9bf563b44d713b81c78c8eb18c380abaae.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = Computer.resolveForCLI(node_s);\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = node_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/ConnectNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"0fd55bd6b50fcdf27368c6b771fb3d8363a24f83","commitMessage":"@@@Merge pull request #5419 from basil/subtypes\n\nUse declaring class as qualifier","date":"2021-04-20 04:54:17","modifiedFileCount":"43","status":"M","submitter":"Oleg Nenashev"}]
