[{"authorTime":"2019-10-19 21:25:17","codes":[{"authorDate":"2019-10-11 15:41:32","commitOrder":2,"curCode":"    public void missingPermissionsCause403() throws Exception {\n        \r\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        \r\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ, Item.WORKSPACE).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        \r\n        HtmlPage page = webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL anonUrl = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", anonUrl.toString().contains(\"/static-files/\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"Response mentions workspace permission\", page.getWebResponse().getStatusMessage().contains(\"Failed permission check: anonymous is missing the Job/Workspace permission\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.DISCOVER).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"Response mentions workspace permission\", page.getWebResponse().getStatusMessage().contains(\"Failed permission check: Please login to access job\"));\n    }\n","date":"2019-10-11 15:41:32","endLine":228,"groupId":"7682","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"missingPermissionsCause403","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/86/333d23d75f71c49fae8a5f777a6cfbc1e21585.src","preCode":"    public void missingPermissionsCause403() throws Exception {\n        \r\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        \r\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ, Item.WORKSPACE).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        \r\n        HtmlPage page = webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL anonUrl = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", anonUrl.toString().contains(\"/static-files/\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"Response mentions workspace permission\", page.getWebResponse().getStatusMessage().contains(\"Failed permission check: anonymous is missing the Job/Workspace permission\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.DISCOVER).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"Response mentions workspace permission\", page.getWebResponse().getStatusMessage().contains(\"Failed permission check: Please login to access job\"));\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"NB"},{"authorDate":"2019-10-19 21:25:17","commitOrder":2,"curCode":"    public void testUrlEncoding() throws Exception {\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"This has spaces and is 100% evil.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        HtmlPage page = webClient.getPage(project, \"ws/This%20has%20spaces%20and%20is%20100%25%20evil.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL url = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", url.toString().contains(\"/static-files/\"));\n    }\n","date":"2019-10-19 21:25:17","endLine":315,"groupId":"7682","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUrlEncoding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/c2/4cf9d2140fc4c78492f9df332dcf7de3791283.src","preCode":"    public void testUrlEncoding() throws Exception {\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"This has spaces and is 100% evil.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        HtmlPage page = webClient.getPage(project, \"ws/This%20has%20spaces%20and%20is%20100%25%20evil.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL url = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", url.toString().contains(\"/static-files/\"));\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"B"}],"commitId":"3de4d8faa29316199faa4dbeece223300254dce8","commitMessage":"@@@Merge pull request #4302 from daniel-beck/JENKINS-59849\n\n[JENKINS-59849] Don't fail to serve resource files with nontrivial names","date":"2019-10-19 21:25:17","modifiedFileCount":"2","status":"M","submitter":"Daniel Beck"},{"authorTime":"2019-10-19 21:25:17","codes":[{"authorDate":"2020-01-20 21:55:10","commitOrder":3,"curCode":"    public void missingPermissionsCause403() throws Exception {\n        \r\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        \r\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ, Item.WORKSPACE).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        \r\n        HtmlPage page = webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL anonUrl = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", anonUrl.toString().contains(\"/static-files/\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertThat(\"Response mentions workspace permission\", page.getWebResponse().getContentAsString(), containsString(\"Failed permission check: anonymous is missing the Job/Workspace permission\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.DISCOVER).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertThat(\"Response mentions workspace permission\", page.getWebResponse().getContentAsString(), containsString(\"Failed permission check: Please login to access job\"));\n    }\n","date":"2020-01-20 21:55:10","endLine":235,"groupId":"7682","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"missingPermissionsCause403","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5c/5c335eb2296ccb4dede335bb47cb5f589ccd22.src","preCode":"    public void missingPermissionsCause403() throws Exception {\n        \r\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        \r\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ, Item.WORKSPACE).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        \r\n        HtmlPage page = webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL anonUrl = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", anonUrl.toString().contains(\"/static-files/\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"Response mentions workspace permission\", page.getWebResponse().getStatusMessage().contains(\"Failed permission check: anonymous is missing the Job/Workspace permission\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.DISCOVER).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"Response mentions workspace permission\", page.getWebResponse().getStatusMessage().contains(\"Failed permission check: Please login to access job\"));\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"},{"authorDate":"2019-10-19 21:25:17","commitOrder":3,"curCode":"    public void testUrlEncoding() throws Exception {\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"This has spaces and is 100% evil.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        HtmlPage page = webClient.getPage(project, \"ws/This%20has%20spaces%20and%20is%20100%25%20evil.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL url = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", url.toString().contains(\"/static-files/\"));\n    }\n","date":"2019-10-19 21:25:17","endLine":315,"groupId":"7682","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUrlEncoding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/c2/4cf9d2140fc4c78492f9df332dcf7de3791283.src","preCode":"    public void testUrlEncoding() throws Exception {\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"This has spaces and is 100% evil.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        HtmlPage page = webClient.getPage(project, \"ws/This%20has%20spaces%20and%20is%20100%25%20evil.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL url = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", url.toString().contains(\"/static-files/\"));\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"N"}],"commitId":"574ec6e5bdf2e4ac9394e290fefff5ac1c9a5c96","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2020-01-20 21:55:10","modifiedFileCount":"193","status":"M","submitter":"Wadeck Follonier"},{"authorTime":"2019-10-19 21:25:17","codes":[{"authorDate":"2020-06-30 21:54:47","commitOrder":4,"curCode":"    public void missingPermissionsCause403() throws Exception {\n        \r\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        \r\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ, Item.WORKSPACE).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        \r\n        HtmlPage page = webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL anonUrl = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", anonUrl.toString().contains(\"/static-files/\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        assertThat(\"Response mentions workspace permission\", page.getWebResponse().getContentAsString(), containsString(\"Failed permission check: anonymous is missing the Job/Workspace permission\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.DISCOVER).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        assertThat(\"Response mentions workspace permission\", page.getWebResponse().getContentAsString(), containsString(\"Failed permission check: Please login to access job\"));\n    }\n","date":"2020-06-30 21:54:47","endLine":236,"groupId":"10628","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"missingPermissionsCause403","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5d/90f81f9d491effc52bd5987bec96952d65424d.src","preCode":"    public void missingPermissionsCause403() throws Exception {\n        \r\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        \r\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ, Item.WORKSPACE).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        \r\n        HtmlPage page = webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL anonUrl = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", anonUrl.toString().contains(\"/static-files/\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertThat(\"Response mentions workspace permission\", page.getWebResponse().getContentAsString(), containsString(\"Failed permission check: anonymous is missing the Job/Workspace permission\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.DISCOVER).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertThat(\"Response mentions workspace permission\", page.getWebResponse().getContentAsString(), containsString(\"Failed permission check: Please login to access job\"));\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2019-10-19 21:25:17","commitOrder":4,"curCode":"    public void testUrlEncoding() throws Exception {\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"This has spaces and is 100% evil.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        HtmlPage page = webClient.getPage(project, \"ws/This%20has%20spaces%20and%20is%20100%25%20evil.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL url = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", url.toString().contains(\"/static-files/\"));\n    }\n","date":"2019-10-19 21:25:17","endLine":315,"groupId":"10628","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testUrlEncoding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/c2/4cf9d2140fc4c78492f9df332dcf7de3791283.src","preCode":"    public void testUrlEncoding() throws Exception {\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"This has spaces and is 100% evil.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        HtmlPage page = webClient.getPage(project, \"ws/This%20has%20spaces%20and%20is%20100%25%20evil.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL url = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", url.toString().contains(\"/static-files/\"));\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"N"}],"commitId":"75391b3ad789c8bb8a488b5e677a2dd3d1741d16","commitMessage":"@@@Merge commit 'a1097dfec620bb309d6df4122f96aa22a5288563' of https://github.com/jenkinsci/jenkins\n","date":"2020-06-30 21:54:47","modifiedFileCount":"290","status":"M","submitter":"Wadeck Follonier"}]
