[{"authorTime":"2015-01-08 05:12:18","codes":[{"authorDate":"2015-01-08 05:12:18","commitOrder":1,"curCode":"    @Test public void installIfNecessaryAvoidsExcessiveDownloadsByUsingIfModifiedSince() throws Exception {\n        File tmp = temp.getRoot();\n            final FilePath d = new FilePath(tmp);\n\n            d.child(\".timestamp\").touch(123000);\n\n            final HttpURLConnection con = mock(HttpURLConnection.class);\n            final URL url = someUrlToZipFile(con);\n\n            when(con.getResponseCode())\n                .thenReturn(HttpURLConnection.HTTP_NOT_MODIFIED);\n\n            assertFalse(d.installIfNecessaryFrom(url, null, null));\n\n            verify(con).setIfModifiedSince(123000);\n    }\n","date":"2015-01-08 05:12:18","endLine":531,"groupId":"5776","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"installIfNecessaryAvoidsExcessiveDownloadsByUsingIfModifiedSince","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/99/9b3e792cf3d0ffeaced08ecb1dfe413f9307fb.src","preCode":"    @Test public void installIfNecessaryAvoidsExcessiveDownloadsByUsingIfModifiedSince() throws Exception {\n        File tmp = temp.getRoot();\n            final FilePath d = new FilePath(tmp);\n\n            d.child(\".timestamp\").touch(123000);\n\n            final HttpURLConnection con = mock(HttpURLConnection.class);\n            final URL url = someUrlToZipFile(con);\n\n            when(con.getResponseCode())\n                .thenReturn(HttpURLConnection.HTTP_NOT_MODIFIED);\n\n            assertFalse(d.installIfNecessaryFrom(url, null, null));\n\n            verify(con).setIfModifiedSince(123000);\n    }\n","realPath":"core/src/test/java/hudson/FilePathTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"B"},{"authorDate":"2015-01-08 05:12:18","commitOrder":1,"curCode":"    @Test public void installIfNecessarySkipsDownloadWhenErroneous() throws Exception {\n        File tmp = temp.getRoot();\n        final FilePath d = new FilePath(tmp);\n        d.child(\".timestamp\").touch(123000);\n        final HttpURLConnection con = mock(HttpURLConnection.class);\n        final URL url = someUrlToZipFile(con);\n        when(con.getResponseCode()).thenReturn(HttpURLConnection.HTTP_GATEWAY_TIMEOUT);\n        when(con.getResponseMessage()).thenReturn(\"Gateway Timeout\");\n        when(con.getInputStream()).thenThrow(new ConnectException());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        String message = \"going ahead\";\n        assertFalse(d.installIfNecessaryFrom(url, new StreamTaskListener(baos), message));\n        verify(con).setIfModifiedSince(123000);\n        String log = baos.toString();\n        assertFalse(log, log.contains(message));\n        assertTrue(log, log.contains(\"504 Gateway Timeout\"));\n    }\n","date":"2015-01-08 05:12:18","endLine":567,"groupId":"5824","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"installIfNecessarySkipsDownloadWhenErroneous","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/99/9b3e792cf3d0ffeaced08ecb1dfe413f9307fb.src","preCode":"    @Test public void installIfNecessarySkipsDownloadWhenErroneous() throws Exception {\n        File tmp = temp.getRoot();\n        final FilePath d = new FilePath(tmp);\n        d.child(\".timestamp\").touch(123000);\n        final HttpURLConnection con = mock(HttpURLConnection.class);\n        final URL url = someUrlToZipFile(con);\n        when(con.getResponseCode()).thenReturn(HttpURLConnection.HTTP_GATEWAY_TIMEOUT);\n        when(con.getResponseMessage()).thenReturn(\"Gateway Timeout\");\n        when(con.getInputStream()).thenThrow(new ConnectException());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        String message = \"going ahead\";\n        assertFalse(d.installIfNecessaryFrom(url, new StreamTaskListener(baos), message));\n        verify(con).setIfModifiedSince(123000);\n        String log = baos.toString();\n        assertFalse(log, log.contains(message));\n        assertTrue(log, log.contains(\"504 Gateway Timeout\"));\n    }\n","realPath":"core/src/test/java/hudson/FilePathTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":551,"status":"B"}],"commitId":"cd0752432ed718e30281eb4e2732646550996868","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into JENKINS-22811\n\nConflicts:\n\ttest/src/test/java/hudson/model/ItemGroupMixInTest.java\n","date":"2015-01-08 05:12:18","modifiedFileCount":"190","status":"B","submitter":"christ66"},{"authorTime":"2015-01-08 05:12:18","codes":[{"authorDate":"2017-12-23 00:38:57","commitOrder":2,"curCode":"    @Test public void installIfNecessaryAvoidsExcessiveDownloadsByUsingIfModifiedSince() throws Exception {\n        File tmp = temp.getRoot();\n            final FilePath d = new FilePath(tmp);\n\n            d.child(\".timestamp\").touch(123000);\n\n            final HttpURLConnection con = mock(HttpURLConnection.class);\n            final URL url = someUrlToZipFile(con);\n\n            when(con.getResponseCode())\n                .thenReturn(HttpURLConnection.HTTP_NOT_MODIFIED);\n\n            assertFalse(d.installIfNecessaryFrom(url, null, \"\"));\n\n            verify(con).setIfModifiedSince(123000);\n    }\n","date":"2017-12-23 00:38:57","endLine":631,"groupId":"5776","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"installIfNecessaryAvoidsExcessiveDownloadsByUsingIfModifiedSince","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/57/815f661831ba9c2080b044b243d797b2187c2e.src","preCode":"    @Test public void installIfNecessaryAvoidsExcessiveDownloadsByUsingIfModifiedSince() throws Exception {\n        File tmp = temp.getRoot();\n            final FilePath d = new FilePath(tmp);\n\n            d.child(\".timestamp\").touch(123000);\n\n            final HttpURLConnection con = mock(HttpURLConnection.class);\n            final URL url = someUrlToZipFile(con);\n\n            when(con.getResponseCode())\n                .thenReturn(HttpURLConnection.HTTP_NOT_MODIFIED);\n\n            assertFalse(d.installIfNecessaryFrom(url, null, null));\n\n            verify(con).setIfModifiedSince(123000);\n    }\n","realPath":"core/src/test/java/hudson/FilePathTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":616,"status":"M"},{"authorDate":"2015-01-08 05:12:18","commitOrder":2,"curCode":"    @Test public void installIfNecessarySkipsDownloadWhenErroneous() throws Exception {\n        File tmp = temp.getRoot();\n        final FilePath d = new FilePath(tmp);\n        d.child(\".timestamp\").touch(123000);\n        final HttpURLConnection con = mock(HttpURLConnection.class);\n        final URL url = someUrlToZipFile(con);\n        when(con.getResponseCode()).thenReturn(HttpURLConnection.HTTP_GATEWAY_TIMEOUT);\n        when(con.getResponseMessage()).thenReturn(\"Gateway Timeout\");\n        when(con.getInputStream()).thenThrow(new ConnectException());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        String message = \"going ahead\";\n        assertFalse(d.installIfNecessaryFrom(url, new StreamTaskListener(baos), message));\n        verify(con).setIfModifiedSince(123000);\n        String log = baos.toString();\n        assertFalse(log, log.contains(message));\n        assertTrue(log, log.contains(\"504 Gateway Timeout\"));\n    }\n","date":"2015-01-08 05:12:18","endLine":567,"groupId":"5824","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"installIfNecessarySkipsDownloadWhenErroneous","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/99/9b3e792cf3d0ffeaced08ecb1dfe413f9307fb.src","preCode":"    @Test public void installIfNecessarySkipsDownloadWhenErroneous() throws Exception {\n        File tmp = temp.getRoot();\n        final FilePath d = new FilePath(tmp);\n        d.child(\".timestamp\").touch(123000);\n        final HttpURLConnection con = mock(HttpURLConnection.class);\n        final URL url = someUrlToZipFile(con);\n        when(con.getResponseCode()).thenReturn(HttpURLConnection.HTTP_GATEWAY_TIMEOUT);\n        when(con.getResponseMessage()).thenReturn(\"Gateway Timeout\");\n        when(con.getInputStream()).thenThrow(new ConnectException());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        String message = \"going ahead\";\n        assertFalse(d.installIfNecessaryFrom(url, new StreamTaskListener(baos), message));\n        verify(con).setIfModifiedSince(123000);\n        String log = baos.toString();\n        assertFalse(log, log.contains(message));\n        assertTrue(log, log.contains(\"504 Gateway Timeout\"));\n    }\n","realPath":"core/src/test/java/hudson/FilePathTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":551,"status":"N"}],"commitId":"8e78ab1c660de81f48beecedced25d9b2cbbf64a","commitMessage":"@@@[JENKINS-48227] Use \"Files.createTempDirectory\" to create temp directory (#3161)\n\n* Use \"Files.createTempDirectory\" to create temp directory instead\nSee SonarQube critical vulnerability squid:S2976 (tag: owasp-a9)\nhttps://next.sonarqube.com/sonarqube/coding_rules#rule_key=squid%3AS2976\n\n* [JENKINS-48227]\nCreating a utility \"static Path toPath(File file) throws IOException\" method. \nwhich wraps InvalidPathException to IOException so that it will be checked.\n- also fixed public static final reference\n- fixed broken test cases\n- added new test cases for toPath() and createTempDir()\n\n* Revert back to public static int\n\n* adjustments due to merges\n\n* Add posix check to determine if Posix FileAttributes should be included\nin call to Files.createTempDirectory()\n\n* Remove reference to private element\n\n* Updated to use explicit imports\n","date":"2017-12-23 00:38:57","modifiedFileCount":"2","status":"M","submitter":"Larry Singleton"},{"authorTime":"2015-01-08 05:12:18","codes":[{"authorDate":"2018-04-26 07:49:42","commitOrder":3,"curCode":"    @Test public void installIfNecessaryAvoidsExcessiveDownloadsByUsingIfModifiedSince() throws Exception {\n        File tmp = temp.getRoot();\n            final FilePath d = new FilePath(tmp);\n\n            d.child(\".timestamp\").touch(123000);\n\n            final HttpURLConnection con = mock(HttpURLConnection.class);\n            final URL url = someUrlToZipFile(con);\n\n            when(con.getResponseCode())\n                .thenReturn(HttpURLConnection.HTTP_NOT_MODIFIED);\n\n            assertFalse(d.installIfNecessaryFrom(url, null, \"message if failed\"));\n\n            verify(con).setIfModifiedSince(123000);\n    }\n","date":"2018-04-26 07:49:42","endLine":631,"groupId":"10817","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"installIfNecessaryAvoidsExcessiveDownloadsByUsingIfModifiedSince","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/96/d4084f90e1aae1af7098b4c8ae2ce84edd8a05.src","preCode":"    @Test public void installIfNecessaryAvoidsExcessiveDownloadsByUsingIfModifiedSince() throws Exception {\n        File tmp = temp.getRoot();\n            final FilePath d = new FilePath(tmp);\n\n            d.child(\".timestamp\").touch(123000);\n\n            final HttpURLConnection con = mock(HttpURLConnection.class);\n            final URL url = someUrlToZipFile(con);\n\n            when(con.getResponseCode())\n                .thenReturn(HttpURLConnection.HTTP_NOT_MODIFIED);\n\n            assertFalse(d.installIfNecessaryFrom(url, null, \"\"));\n\n            verify(con).setIfModifiedSince(123000);\n    }\n","realPath":"core/src/test/java/hudson/FilePathTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":616,"status":"M"},{"authorDate":"2015-01-08 05:12:18","commitOrder":3,"curCode":"    @Test public void installIfNecessarySkipsDownloadWhenErroneous() throws Exception {\n        File tmp = temp.getRoot();\n        final FilePath d = new FilePath(tmp);\n        d.child(\".timestamp\").touch(123000);\n        final HttpURLConnection con = mock(HttpURLConnection.class);\n        final URL url = someUrlToZipFile(con);\n        when(con.getResponseCode()).thenReturn(HttpURLConnection.HTTP_GATEWAY_TIMEOUT);\n        when(con.getResponseMessage()).thenReturn(\"Gateway Timeout\");\n        when(con.getInputStream()).thenThrow(new ConnectException());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        String message = \"going ahead\";\n        assertFalse(d.installIfNecessaryFrom(url, new StreamTaskListener(baos), message));\n        verify(con).setIfModifiedSince(123000);\n        String log = baos.toString();\n        assertFalse(log, log.contains(message));\n        assertTrue(log, log.contains(\"504 Gateway Timeout\"));\n    }\n","date":"2015-01-08 05:12:18","endLine":567,"groupId":"10817","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"installIfNecessarySkipsDownloadWhenErroneous","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/99/9b3e792cf3d0ffeaced08ecb1dfe413f9307fb.src","preCode":"    @Test public void installIfNecessarySkipsDownloadWhenErroneous() throws Exception {\n        File tmp = temp.getRoot();\n        final FilePath d = new FilePath(tmp);\n        d.child(\".timestamp\").touch(123000);\n        final HttpURLConnection con = mock(HttpURLConnection.class);\n        final URL url = someUrlToZipFile(con);\n        when(con.getResponseCode()).thenReturn(HttpURLConnection.HTTP_GATEWAY_TIMEOUT);\n        when(con.getResponseMessage()).thenReturn(\"Gateway Timeout\");\n        when(con.getInputStream()).thenThrow(new ConnectException());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        String message = \"going ahead\";\n        assertFalse(d.installIfNecessaryFrom(url, new StreamTaskListener(baos), message));\n        verify(con).setIfModifiedSince(123000);\n        String log = baos.toString();\n        assertFalse(log, log.contains(message));\n        assertTrue(log, log.contains(\"504 Gateway Timeout\"));\n    }\n","realPath":"core/src/test/java/hudson/FilePathTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":551,"status":"N"}],"commitId":"c5497c9a577ba8447780be590c6242555638c19b","commitMessage":"@@@Merge branch 'security-stable-2.107' into security-master\n","date":"2018-04-26 07:49:42","modifiedFileCount":"8","status":"M","submitter":"Daniel Beck"}]
