[{"authorTime":"2015-06-09 18:55:52","codes":[{"authorDate":"2015-06-09 18:55:52","commitOrder":1,"curCode":"    @Test public void deleteJobManyShouldSucceed() throws Exception {\n\n        j.createFreeStyleProject(\"aProject1\");\n        j.createFreeStyleProject(\"aProject2\");\n        j.createFreeStyleProject(\"aProject3\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject3\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getItem(\"aProject1\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject2\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject3\"), nullValue());\n    }\n","date":"2015-06-09 18:55:52","endLine":118,"groupId":"9388","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteJobManyShouldSucceed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e8/621a5f8e528f8208fb6a7b5b9390bec682a102.src","preCode":"    @Test public void deleteJobManyShouldSucceed() throws Exception {\n\n        j.createFreeStyleProject(\"aProject1\");\n        j.createFreeStyleProject(\"aProject2\");\n        j.createFreeStyleProject(\"aProject3\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject3\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getItem(\"aProject1\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject2\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject3\"), nullValue());\n    }\n","realPath":"test/src/test/java/hudson/cli/DeleteJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"},{"authorDate":"2015-06-09 18:55:52","commitOrder":1,"curCode":"    @Test public void deleteJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {\n\n        j.createFreeStyleProject(\"aProject1\");\n        j.createFreeStyleProject(\"aProject2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject1\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getItem(\"aProject1\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject2\"), nullValue());\n    }\n","date":"2015-06-09 18:55:52","endLine":150,"groupId":"7638","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteJobManyShouldSucceedEvenAJobIsSpecifiedTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e8/621a5f8e528f8208fb6a7b5b9390bec682a102.src","preCode":"    @Test public void deleteJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {\n\n        j.createFreeStyleProject(\"aProject1\");\n        j.createFreeStyleProject(\"aProject2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject1\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getItem(\"aProject1\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject2\"), nullValue());\n    }\n","realPath":"test/src/test/java/hudson/cli/DeleteJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"B"}],"commitId":"0e846fca9fb850ffc242bb016c6e9e16aa3a1626","commitMessage":"@@@Merge pull request #1704 from pjanouse/JENKINS-28041\n\n[FIXED JENKINS-28041] - Allow delete-* CLI commands to operate on multiple arguments\n","date":"2015-06-09 18:55:52","modifiedFileCount":"5","status":"B","submitter":"Oliver Gond?a"},{"authorTime":"2021-04-20 04:54:17","codes":[{"authorDate":"2021-04-20 04:54:17","commitOrder":2,"curCode":"    @Test public void deleteJobManyShouldSucceed() throws Exception {\n\n        j.createFreeStyleProject(\"aProject1\");\n        j.createFreeStyleProject(\"aProject2\");\n        j.createFreeStyleProject(\"aProject3\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Item.READ, Item.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject3\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getItem(\"aProject1\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject2\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject3\"), nullValue());\n    }\n","date":"2021-04-20 04:54:17","endLine":120,"groupId":"10314","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"deleteJobManyShouldSucceed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/7f/33d7ca2a0b93da5bb392d93e68516306798dc9.src","preCode":"    @Test public void deleteJobManyShouldSucceed() throws Exception {\n\n        j.createFreeStyleProject(\"aProject1\");\n        j.createFreeStyleProject(\"aProject2\");\n        j.createFreeStyleProject(\"aProject3\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject3\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getItem(\"aProject1\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject2\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject3\"), nullValue());\n    }\n","realPath":"test/src/test/java/hudson/cli/DeleteJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2021-04-20 04:54:17","commitOrder":2,"curCode":"    @Test public void deleteJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {\n\n        j.createFreeStyleProject(\"aProject1\");\n        j.createFreeStyleProject(\"aProject2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Item.READ, Item.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject1\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getItem(\"aProject1\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject2\"), nullValue());\n    }\n","date":"2021-04-20 04:54:17","endLine":212,"groupId":"10314","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"deleteJobManyShouldSucceedEvenAJobIsSpecifiedTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/7f/33d7ca2a0b93da5bb392d93e68516306798dc9.src","preCode":"    @Test public void deleteJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {\n\n        j.createFreeStyleProject(\"aProject1\");\n        j.createFreeStyleProject(\"aProject2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject1\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getItem(\"aProject1\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject2\"), nullValue());\n    }\n","realPath":"test/src/test/java/hudson/cli/DeleteJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"0fd55bd6b50fcdf27368c6b771fb3d8363a24f83","commitMessage":"@@@Merge pull request #5419 from basil/subtypes\n\nUse declaring class as qualifier","date":"2021-04-20 04:54:17","modifiedFileCount":"43","status":"M","submitter":"Oleg Nenashev"}]
