[{"authorTime":"2021-01-13 22:41:47","codes":[{"authorDate":"2021-01-13 22:41:47","commitOrder":3,"curCode":"    public void symlink_outsideWorkspace_areNotAllowed() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent, StandardCharsets.UTF_8);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (Functions.isWindows()) {\n            \r\n            \r\n\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\")\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    \"intermediateFolder/public2.key\",\n                    \"public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"public2.key\"));\n        }\n    }\n","date":"2021-01-13 22:41:47","endLine":540,"groupId":"3487","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"symlink_outsideWorkspace_areNotAllowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/c8/8adf0d4862f5dc2cc4168bbef733d4e2c98c20.src","preCode":"    public void symlink_outsideWorkspace_areNotAllowed() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent, StandardCharsets.UTF_8);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (Functions.isWindows()) {\n            \r\n            \r\n\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\")\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    \"intermediateFolder/public2.key\",\n                    \"public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"public2.key\"));\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/DirectoryBrowserSupportTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"MB"},{"authorDate":"2021-01-13 22:41:47","commitOrder":3,"curCode":"    public void symlink_insideWorkspace_areNotAllowedAnymore() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        \r\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        File jobWorkspaceFolder = new File(new File(j.jenkins.getRootDir(), \"workspace\"), p.name);\n        File folderInsideWorkspace = new File(jobWorkspaceFolder, \"asset\");\n        folderInsideWorkspace.mkdir();\n        File fileTarget = new File(folderInsideWorkspace, \"goal.txt\");\n        String publicContent = \"not-secret\";\n        FileUtils.write(fileTarget, publicContent, StandardCharsets.UTF_8);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (Functions.isWindows()) {\n            String script = loadContentFromResource(\"insideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script = loadContentFromResource(\"insideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"asset\"),\n                    not(containsString(\"to_internal1\")),\n                    not(containsString(\"to_internal_goal1\")),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"to_internal2\")),\n                    not(containsString(\"to_internal_goal2\")\n                    )));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_internal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_internal_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_internal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_internal_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/asset/goal.txt/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, containsString(publicContent));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/asset/*zip*/asset.zip\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n        }\n    }\n","date":"2021-01-13 22:41:47","endLine":920,"groupId":"6861","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"symlink_insideWorkspace_areNotAllowedAnymore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/c8/8adf0d4862f5dc2cc4168bbef733d4e2c98c20.src","preCode":"    public void symlink_insideWorkspace_areNotAllowedAnymore() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        \r\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        File jobWorkspaceFolder = new File(new File(j.jenkins.getRootDir(), \"workspace\"), p.name);\n        File folderInsideWorkspace = new File(jobWorkspaceFolder, \"asset\");\n        folderInsideWorkspace.mkdir();\n        File fileTarget = new File(folderInsideWorkspace, \"goal.txt\");\n        String publicContent = \"not-secret\";\n        FileUtils.write(fileTarget, publicContent, StandardCharsets.UTF_8);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (Functions.isWindows()) {\n            String script = loadContentFromResource(\"insideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script = loadContentFromResource(\"insideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"asset\"),\n                    not(containsString(\"to_internal1\")),\n                    not(containsString(\"to_internal_goal1\")),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"to_internal2\")),\n                    not(containsString(\"to_internal_goal2\")\n                    )));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_internal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_internal_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_internal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_internal_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/asset/goal.txt/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, containsString(publicContent));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/asset/*zip*/asset.zip\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/DirectoryBrowserSupportTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":838,"status":"B"}],"commitId":"82688811faeb81a6286e72bf6edd569e40826c7f","commitMessage":"@@@Merge branch 'security-master' into master\n","date":"2021-01-13 22:41:47","modifiedFileCount":"21","status":"M","submitter":"Daniel Beck"},{"authorTime":"2021-01-13 22:41:47","codes":[{"authorDate":"2021-01-19 17:11:30","commitOrder":4,"curCode":"    public void symlink_outsideWorkspace_areNotAllowed() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent, StandardCharsets.UTF_8);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (Functions.isWindows()) {\n            \r\n            \r\n\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\")\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    p.getName() + \"/intermediateFolder/public2.key\",\n                    p.getName() + \"/public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/**/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    \"intermediateFolder/public2.key\",\n                    \"public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/**/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"public2.key\"));\n        }\n    }\n","date":"2021-01-19 17:11:30","endLine":557,"groupId":"10535","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"symlink_outsideWorkspace_areNotAllowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/db/59c696fb745c2816cc207176d1543c4dd3cf90.src","preCode":"    public void symlink_outsideWorkspace_areNotAllowed() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent, StandardCharsets.UTF_8);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (Functions.isWindows()) {\n            \r\n            \r\n\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\")\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    \"intermediateFolder/public2.key\",\n                    \"public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"public2.key\"));\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/DirectoryBrowserSupportTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"M"},{"authorDate":"2021-01-13 22:41:47","commitOrder":4,"curCode":"    public void symlink_insideWorkspace_areNotAllowedAnymore() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        \r\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        File jobWorkspaceFolder = new File(new File(j.jenkins.getRootDir(), \"workspace\"), p.name);\n        File folderInsideWorkspace = new File(jobWorkspaceFolder, \"asset\");\n        folderInsideWorkspace.mkdir();\n        File fileTarget = new File(folderInsideWorkspace, \"goal.txt\");\n        String publicContent = \"not-secret\";\n        FileUtils.write(fileTarget, publicContent, StandardCharsets.UTF_8);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (Functions.isWindows()) {\n            String script = loadContentFromResource(\"insideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script = loadContentFromResource(\"insideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"asset\"),\n                    not(containsString(\"to_internal1\")),\n                    not(containsString(\"to_internal_goal1\")),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"to_internal2\")),\n                    not(containsString(\"to_internal_goal2\")\n                    )));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_internal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_internal_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_internal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_internal_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/asset/goal.txt/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, containsString(publicContent));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/asset/*zip*/asset.zip\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n        }\n    }\n","date":"2021-01-13 22:41:47","endLine":920,"groupId":"10535","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"symlink_insideWorkspace_areNotAllowedAnymore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/c8/8adf0d4862f5dc2cc4168bbef733d4e2c98c20.src","preCode":"    public void symlink_insideWorkspace_areNotAllowedAnymore() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        \r\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        File jobWorkspaceFolder = new File(new File(j.jenkins.getRootDir(), \"workspace\"), p.name);\n        File folderInsideWorkspace = new File(jobWorkspaceFolder, \"asset\");\n        folderInsideWorkspace.mkdir();\n        File fileTarget = new File(folderInsideWorkspace, \"goal.txt\");\n        String publicContent = \"not-secret\";\n        FileUtils.write(fileTarget, publicContent, StandardCharsets.UTF_8);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (Functions.isWindows()) {\n            String script = loadContentFromResource(\"insideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script = loadContentFromResource(\"insideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"asset\"),\n                    not(containsString(\"to_internal1\")),\n                    not(containsString(\"to_internal_goal1\")),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"to_internal2\")),\n                    not(containsString(\"to_internal_goal2\")\n                    )));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_internal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_internal_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_internal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_internal_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/asset/goal.txt/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, containsString(publicContent));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/asset/*zip*/asset.zip\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/DirectoryBrowserSupportTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":838,"status":"N"}],"commitId":"ecf309536208cdf847732f3f0a0a7a2a0e1fa2c1","commitMessage":"@@@[JENKINS-64621] Fix zip regression (#5187)\n\n","date":"2021-01-19 17:11:30","modifiedFileCount":"7","status":"M","submitter":"Wadeck Follonier"}]
