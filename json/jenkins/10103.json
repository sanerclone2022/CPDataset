[{"authorTime":"2013-07-17 12:56:01","codes":[{"authorDate":"2013-07-17 12:56:01","commitOrder":1,"curCode":"    @Test public void createNode() throws Exception {\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.ADMINISTER)\n                .withStdin(getClass().getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(\"No error output expected\", result.stderr(), isEmptyString());\n        assertThat(\"Command is expected to succeed\", result.returnCode(), equalTo(0));\n\n        final Slave updatedSlave = (Slave) j.jenkins.getNode(\"SlaveFromXML\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"SlaveFromXML\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n        assertThat(updatedSlave.getUserId(), equalTo(command.user().getId()));\n    }\n","date":"2013-07-17 12:56:01","endLine":81,"groupId":"6259","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d1/16776a1e7f3acbc8383ca00c92e07b345f334c.src","preCode":"    @Test public void createNode() throws Exception {\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.ADMINISTER)\n                .withStdin(getClass().getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(\"No error output expected\", result.stderr(), isEmptyString());\n        assertThat(\"Command is expected to succeed\", result.returnCode(), equalTo(0));\n\n        final Slave updatedSlave = (Slave) j.jenkins.getNode(\"SlaveFromXML\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"SlaveFromXML\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n        assertThat(updatedSlave.getUserId(), equalTo(command.user().getId()));\n    }\n","realPath":"test/src/test/java/hudson/cli/CreateNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"},{"authorDate":"2013-07-17 12:56:01","commitOrder":1,"curCode":"    @Test public void createNodeSpecifyingDifferentNameExplicitly() throws Exception {\n\n        final Node originalSlave = j.createSlave(\"SlaveFromXml\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.ADMINISTER)\n                .withStdin(getClass().getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"CustomSlaveName\")\n        ;\n\n        assertThat(\"No error output expected\", result.stderr(), isEmptyString());\n        assertThat(\"Command is expected to succeed\", result.returnCode(), equalTo(0));\n\n        assertThat(\"A slave with original name should be left untouched\", j.jenkins.getNode(\"SlaveFromXml\"), equalTo(originalSlave));\n\n        final Slave updatedSlave = (Slave) j.jenkins.getNode(\"CustomSlaveName\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"CustomSlaveName\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n        assertThat(updatedSlave.getUserId(), equalTo(command.user().getId()));\n    }\n","date":"2013-07-17 12:56:01","endLine":121,"groupId":"6262","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createNodeSpecifyingDifferentNameExplicitly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d1/16776a1e7f3acbc8383ca00c92e07b345f334c.src","preCode":"    @Test public void createNodeSpecifyingDifferentNameExplicitly() throws Exception {\n\n        final Node originalSlave = j.createSlave(\"SlaveFromXml\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.ADMINISTER)\n                .withStdin(getClass().getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"CustomSlaveName\")\n        ;\n\n        assertThat(\"No error output expected\", result.stderr(), isEmptyString());\n        assertThat(\"Command is expected to succeed\", result.returnCode(), equalTo(0));\n\n        assertThat(\"A slave with original name should be left untouched\", j.jenkins.getNode(\"SlaveFromXml\"), equalTo(originalSlave));\n\n        final Slave updatedSlave = (Slave) j.jenkins.getNode(\"CustomSlaveName\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"CustomSlaveName\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n        assertThat(updatedSlave.getUserId(), equalTo(command.user().getId()));\n    }\n","realPath":"test/src/test/java/hudson/cli/CreateNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"}],"commitId":"681769a9df146038b3b44ae739e9baf7f8c2728c","commitMessage":"@@@Merge pull request #803 from olivergondza/node-cli\n\n[FIXED JENKINS-18282] - Manipulate nodes via CLI","date":"2013-07-17 12:56:01","modifiedFileCount":"1","status":"B","submitter":"Kohsuke Kawaguchi"},{"authorTime":"2013-10-08 11:38:34","codes":[{"authorDate":"2013-10-08 11:38:34","commitOrder":2,"curCode":"    @Test public void createNode() throws Exception {\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(\"No error output expected\", result.stderr(), isEmptyString());\n        assertThat(\"Command is expected to succeed\", result.returnCode(), equalTo(0));\n\n        final Slave updatedSlave = (Slave) j.jenkins.getNode(\"SlaveFromXML\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"SlaveFromXML\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n        assertThat(updatedSlave.getUserId(), equalTo(command.user().getId()));\n    }\n","date":"2013-10-08 11:38:34","endLine":81,"groupId":"6259","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e4/dbb872681ce61d2c46c01271635cfdac86a1b4.src","preCode":"    @Test public void createNode() throws Exception {\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.ADMINISTER)\n                .withStdin(getClass().getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(\"No error output expected\", result.stderr(), isEmptyString());\n        assertThat(\"Command is expected to succeed\", result.returnCode(), equalTo(0));\n\n        final Slave updatedSlave = (Slave) j.jenkins.getNode(\"SlaveFromXML\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"SlaveFromXML\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n        assertThat(updatedSlave.getUserId(), equalTo(command.user().getId()));\n    }\n","realPath":"test/src/test/java/hudson/cli/CreateNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2013-10-08 11:38:34","commitOrder":2,"curCode":"    @Test public void createNodeSpecifyingDifferentNameExplicitly() throws Exception {\n\n        final Node originalSlave = j.createSlave(\"SlaveFromXml\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"CustomSlaveName\")\n        ;\n\n        assertThat(\"No error output expected\", result.stderr(), isEmptyString());\n        assertThat(\"Command is expected to succeed\", result.returnCode(), equalTo(0));\n\n        assertThat(\"A slave with original name should be left untouched\", j.jenkins.getNode(\"SlaveFromXml\"), equalTo(originalSlave));\n\n        final Slave updatedSlave = (Slave) j.jenkins.getNode(\"CustomSlaveName\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"CustomSlaveName\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n        assertThat(updatedSlave.getUserId(), equalTo(command.user().getId()));\n    }\n","date":"2013-10-08 11:38:34","endLine":121,"groupId":"6262","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createNodeSpecifyingDifferentNameExplicitly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e4/dbb872681ce61d2c46c01271635cfdac86a1b4.src","preCode":"    @Test public void createNodeSpecifyingDifferentNameExplicitly() throws Exception {\n\n        final Node originalSlave = j.createSlave(\"SlaveFromXml\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.ADMINISTER)\n                .withStdin(getClass().getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"CustomSlaveName\")\n        ;\n\n        assertThat(\"No error output expected\", result.stderr(), isEmptyString());\n        assertThat(\"Command is expected to succeed\", result.returnCode(), equalTo(0));\n\n        assertThat(\"A slave with original name should be left untouched\", j.jenkins.getNode(\"SlaveFromXml\"), equalTo(originalSlave));\n\n        final Slave updatedSlave = (Slave) j.jenkins.getNode(\"CustomSlaveName\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"CustomSlaveName\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n        assertThat(updatedSlave.getUserId(), equalTo(command.user().getId()));\n    }\n","realPath":"test/src/test/java/hudson/cli/CreateNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"8c4288ca59568e9c8d94022de7871e472f019a2f","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into executor-ondemand\n","date":"2013-10-08 11:38:34","modifiedFileCount":"67","status":"M","submitter":"Kohsuke Kawaguchi"},{"authorTime":"2014-01-30 06:21:11","codes":[{"authorDate":"2014-01-30 06:21:11","commitOrder":3,"curCode":"    @Test public void createNode() throws Exception {\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result, succeededSilently());\n\n        final Slave updatedSlave = (Slave) j.jenkins.getNode(\"SlaveFromXML\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"SlaveFromXML\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n        assertThat(updatedSlave.getUserId(), equalTo(command.user().getId()));\n    }\n","date":"2014-01-30 06:31:49","endLine":82,"groupId":"5403","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ad/207cc0d74efd7315785963480a27711a4b7d25.src","preCode":"    @Test public void createNode() throws Exception {\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(\"No error output expected\", result.stderr(), isEmptyString());\n        assertThat(\"Command is expected to succeed\", result.returnCode(), equalTo(0));\n\n        final Slave updatedSlave = (Slave) j.jenkins.getNode(\"SlaveFromXML\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"SlaveFromXML\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n        assertThat(updatedSlave.getUserId(), equalTo(command.user().getId()));\n    }\n","realPath":"test/src/test/java/hudson/cli/CreateNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2014-01-30 06:21:11","commitOrder":3,"curCode":"    @Test public void createNodeSpecifyingDifferentNameExplicitly() throws Exception {\n\n        final Node originalSlave = j.createSlave(\"SlaveFromXml\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"CustomSlaveName\")\n        ;\n\n        assertThat(result, succeededSilently());\n\n        assertThat(\"A slave with original name should be left untouched\", j.jenkins.getNode(\"SlaveFromXml\"), equalTo(originalSlave));\n\n        final Slave updatedSlave = (Slave) j.jenkins.getNode(\"CustomSlaveName\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"CustomSlaveName\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n        assertThat(updatedSlave.getUserId(), equalTo(command.user().getId()));\n    }\n","date":"2014-01-30 06:31:49","endLine":120,"groupId":"6544","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createNodeSpecifyingDifferentNameExplicitly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ad/207cc0d74efd7315785963480a27711a4b7d25.src","preCode":"    @Test public void createNodeSpecifyingDifferentNameExplicitly() throws Exception {\n\n        final Node originalSlave = j.createSlave(\"SlaveFromXml\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"CustomSlaveName\")\n        ;\n\n        assertThat(\"No error output expected\", result.stderr(), isEmptyString());\n        assertThat(\"Command is expected to succeed\", result.returnCode(), equalTo(0));\n\n        assertThat(\"A slave with original name should be left untouched\", j.jenkins.getNode(\"SlaveFromXml\"), equalTo(originalSlave));\n\n        final Slave updatedSlave = (Slave) j.jenkins.getNode(\"CustomSlaveName\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"CustomSlaveName\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n        assertThat(updatedSlave.getUserId(), equalTo(command.user().getId()));\n    }\n","realPath":"test/src/test/java/hudson/cli/CreateNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"3aa812fe1fc0c2b4b9be3c75c17670837266a358","commitMessage":"@@@Refactor CLI tests\n","date":"2014-01-30 06:31:49","modifiedFileCount":"9","status":"M","submitter":"Oliver Gond?a"},{"authorTime":"2020-03-05 02:00:47","codes":[{"authorDate":"2020-03-05 02:00:47","commitOrder":4,"curCode":"    @Test public void createNode() throws Exception {\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result, succeededSilently());\n\n        final Slave updatedSlave = (Slave) j.jenkins.getNode(\"SlaveFromXML\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"SlaveFromXML\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n    }\n","date":"2020-03-05 02:00:47","endLine":81,"groupId":"5403","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/0a/e5fc30bedfb000dd29efd62dd5b97f1bd38b1c.src","preCode":"    @Test public void createNode() throws Exception {\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result, succeededSilently());\n\n        final Slave updatedSlave = (Slave) j.jenkins.getNode(\"SlaveFromXML\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"SlaveFromXML\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n        assertThat(updatedSlave.getUserId(), equalTo(command.user().getId()));\n    }\n","realPath":"test/src/test/java/hudson/cli/CreateNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2020-03-05 02:00:47","commitOrder":4,"curCode":"    @Test public void createNodeSpecifyingDifferentNameExplicitly() throws Exception {\n\n        final Node originalSlave = j.createSlave(\"SlaveFromXml\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"CustomSlaveName\")\n        ;\n\n        assertThat(result, succeededSilently());\n\n        assertThat(\"A slave with original name should be left untouched\", j.jenkins.getNode(\"SlaveFromXml\"), equalTo(originalSlave));\n\n        final Slave updatedSlave = (Slave) j.jenkins.getNode(\"CustomSlaveName\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"CustomSlaveName\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n    }\n","date":"2020-03-05 02:00:47","endLine":117,"groupId":"6544","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createNodeSpecifyingDifferentNameExplicitly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/0a/e5fc30bedfb000dd29efd62dd5b97f1bd38b1c.src","preCode":"    @Test public void createNodeSpecifyingDifferentNameExplicitly() throws Exception {\n\n        final Node originalSlave = j.createSlave(\"SlaveFromXml\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"CustomSlaveName\")\n        ;\n\n        assertThat(result, succeededSilently());\n\n        assertThat(\"A slave with original name should be left untouched\", j.jenkins.getNode(\"SlaveFromXml\"), equalTo(originalSlave));\n\n        final Slave updatedSlave = (Slave) j.jenkins.getNode(\"CustomSlaveName\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"CustomSlaveName\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n        assertThat(updatedSlave.getUserId(), equalTo(command.user().getId()));\n    }\n","realPath":"test/src/test/java/hudson/cli/CreateNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"07bcd1fe597250c30397ee0d1e15f00e8fbf7ffc","commitMessage":"@@@Merge commit '7f8de3ce8a8326c83fe85e14489baacab38241ce' of https://github.com/jenkinsci/jenkins\n","date":"2020-03-05 02:00:47","modifiedFileCount":"119","status":"M","submitter":"Daniel Beck"},{"authorTime":"2021-06-22 13:30:16","codes":[{"authorDate":"2021-06-22 13:30:16","commitOrder":5,"curCode":"    @Test public void createNode() throws Exception {\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result, succeededSilently());\n\n        final Slave updated = (Slave) j.jenkins.getNode(\"AgentFromXML\");\n        assertThat(updated.getNodeName(), equalTo(\"AgentFromXML\"));\n        assertThat(updated.getNumExecutors(), equalTo(42));\n    }\n","date":"2021-06-22 13:30:16","endLine":85,"groupId":"10103","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"createNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/bf/b0d0abc29fab5efbe390b37a1bf152a63aa8a7.src","preCode":"    @Test public void createNode() throws Exception {\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result, succeededSilently());\n\n        final Slave updatedSlave = (Slave) j.jenkins.getNode(\"SlaveFromXML\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"SlaveFromXML\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n    }\n","realPath":"test/src/test/java/hudson/cli/CreateNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2021-06-22 13:30:16","commitOrder":5,"curCode":"    @Test public void createNodeSpecifyingDifferentNameExplicitly() throws Exception {\n\n        final Node original = j.createSlave(\"AgentFromXml\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"CustomAgentName\")\n        ;\n\n        assertThat(result, succeededSilently());\n\n        assertThat(\"An agent with original name should be left untouched\", j.jenkins.getNode(\"AgentFromXml\"), equalTo(original));\n\n        final Slave updated = (Slave) j.jenkins.getNode(\"CustomAgentName\");\n        assertThat(updated.getNodeName(), equalTo(\"CustomAgentName\"));\n        assertThat(updated.getNumExecutors(), equalTo(42));\n    }\n","date":"2021-06-22 13:30:16","endLine":121,"groupId":"10103","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"createNodeSpecifyingDifferentNameExplicitly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/bf/b0d0abc29fab5efbe390b37a1bf152a63aa8a7.src","preCode":"    @Test public void createNodeSpecifyingDifferentNameExplicitly() throws Exception {\n\n        final Node originalSlave = j.createSlave(\"SlaveFromXml\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"CustomSlaveName\")\n        ;\n\n        assertThat(result, succeededSilently());\n\n        assertThat(\"A slave with original name should be left untouched\", j.jenkins.getNode(\"SlaveFromXml\"), equalTo(originalSlave));\n\n        final Slave updatedSlave = (Slave) j.jenkins.getNode(\"CustomSlaveName\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"CustomSlaveName\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n    }\n","realPath":"test/src/test/java/hudson/cli/CreateNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"f48c5f552f72485658c1c98482b42ae42ed1ee8c","commitMessage":"@@@Merge pull request #5582 from daniel-beck/terminology-internal\n\nTerminology cleanup: Internal and Javadoc changes","date":"2021-06-22 13:30:16","modifiedFileCount":"48","status":"M","submitter":"Daniel Beck"}]
