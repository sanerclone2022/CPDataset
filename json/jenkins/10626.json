[{"authorTime":"2019-11-01 06:23:39","codes":[{"authorDate":"2019-10-11 15:41:32","commitOrder":2,"curCode":"    public void secondDomainCannotBeFaked() throws Exception {\n        JenkinsRule.WebClient webClient = j.createWebClient();\n\n        String resourceResponseUrl;\n        { \r\n            webClient.setRedirectEnabled(true);\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n\n        {\n            \r\n            String modifiedUrl = resourceResponseUrl.replaceAll(\"static[-]files[/]....\", \"static-files/aaaa\");\n            Page page = webClient.getPage(modifiedUrl);\n            Assert.assertEquals(\"resource not found\", 404, page.getWebResponse().getStatusCode());\n            Assert.assertEquals(\"resource not found\", ResourceDomainFilter.ERROR_RESPONSE, page.getWebResponse().getStatusMessage());\n        }\n\n\n    }\n","date":"2019-10-11 15:41:32","endLine":177,"groupId":"8279","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"secondDomainCannotBeFaked","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/86/333d23d75f71c49fae8a5f777a6cfbc1e21585.src","preCode":"    public void secondDomainCannotBeFaked() throws Exception {\n        JenkinsRule.WebClient webClient = j.createWebClient();\n\n        String resourceResponseUrl;\n        { \r\n            webClient.setRedirectEnabled(true);\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n\n        {\n            \r\n            String modifiedUrl = resourceResponseUrl.replaceAll(\"static[-]files[/]....\", \"static-files/aaaa\");\n            Page page = webClient.getPage(modifiedUrl);\n            Assert.assertEquals(\"resource not found\", 404, page.getWebResponse().getStatusCode());\n            Assert.assertEquals(\"resource not found\", ResourceDomainFilter.ERROR_RESPONSE, page.getWebResponse().getStatusMessage());\n        }\n\n\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"NB"},{"authorDate":"2019-11-01 06:23:39","commitOrder":2,"curCode":"    public void testColonUserName() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setRedirectEnabled(true);\n        webClient.login(\"foo:bar\");\n\n        Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n        String resourceResponseUrl = page.getUrl().toString();\n        Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n        Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n        Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n    }\n","date":"2019-11-01 06:23:39","endLine":306,"groupId":"56","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testColonUserName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/4a/ca157e6db019d163194c5bbb6e5c1a035c29db.src","preCode":"    public void testColonUserName() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setRedirectEnabled(true);\n        webClient.login(\"foo:bar\");\n\n        Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n        String resourceResponseUrl = page.getUrl().toString();\n        Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n        Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n        Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"B"}],"commitId":"eb1698c673fa69d2ca08b78511209f0caa13b055","commitMessage":"@@@[JENKINS-59859] Make resource root URL tokens work with user names containing : (#4307)\n\n* Make resource root URL tokens work with user names containing :\n\n* Fix null handling\n","date":"2019-11-01 06:23:39","modifiedFileCount":"2","status":"M","submitter":"Daniel Beck"},{"authorTime":"2019-11-01 06:23:39","codes":[{"authorDate":"2020-01-20 21:55:10","commitOrder":3,"curCode":"    public void secondDomainCannotBeFaked() throws Exception {\n        JenkinsRule.WebClient webClient = j.createWebClient();\n\n        String resourceResponseUrl;\n        { \r\n            webClient.setRedirectEnabled(true);\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n\n        {\n            \r\n            String modifiedUrl = resourceResponseUrl.replaceAll(\"static[-]files[/]....\", \"static-files/aaaa\");\n            Page page = webClient.getPage(modifiedUrl);\n            Assert.assertEquals(\"resource not found\", 404, page.getWebResponse().getStatusCode());\n            Assert.assertThat(\"resource not found\", page.getWebResponse().getContentAsString(), containsString(ResourceDomainFilter.ERROR_RESPONSE));\n        }\n\n\n    }\n","date":"2020-01-20 21:55:10","endLine":184,"groupId":"8279","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"secondDomainCannotBeFaked","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5c/5c335eb2296ccb4dede335bb47cb5f589ccd22.src","preCode":"    public void secondDomainCannotBeFaked() throws Exception {\n        JenkinsRule.WebClient webClient = j.createWebClient();\n\n        String resourceResponseUrl;\n        { \r\n            webClient.setRedirectEnabled(true);\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n\n        {\n            \r\n            String modifiedUrl = resourceResponseUrl.replaceAll(\"static[-]files[/]....\", \"static-files/aaaa\");\n            Page page = webClient.getPage(modifiedUrl);\n            Assert.assertEquals(\"resource not found\", 404, page.getWebResponse().getStatusCode());\n            Assert.assertEquals(\"resource not found\", ResourceDomainFilter.ERROR_RESPONSE, page.getWebResponse().getStatusMessage());\n        }\n\n\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2019-11-01 06:23:39","commitOrder":3,"curCode":"    public void testColonUserName() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setRedirectEnabled(true);\n        webClient.login(\"foo:bar\");\n\n        Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n        String resourceResponseUrl = page.getUrl().toString();\n        Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n        Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n        Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n    }\n","date":"2019-11-01 06:23:39","endLine":306,"groupId":"56","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testColonUserName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/4a/ca157e6db019d163194c5bbb6e5c1a035c29db.src","preCode":"    public void testColonUserName() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setRedirectEnabled(true);\n        webClient.login(\"foo:bar\");\n\n        Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n        String resourceResponseUrl = page.getUrl().toString();\n        Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n        Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n        Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"N"}],"commitId":"574ec6e5bdf2e4ac9394e290fefff5ac1c9a5c96","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2020-01-20 21:55:10","modifiedFileCount":"193","status":"M","submitter":"Wadeck Follonier"},{"authorTime":"2019-11-01 06:23:39","codes":[{"authorDate":"2020-06-30 21:54:47","commitOrder":4,"curCode":"    public void secondDomainCannotBeFaked() throws Exception {\n        JenkinsRule.WebClient webClient = j.createWebClient();\n\n        String resourceResponseUrl;\n        { \r\n            webClient.setRedirectEnabled(true);\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n\n        {\n            \r\n            String modifiedUrl = resourceResponseUrl.replaceAll(\"static[-]files[/]....\", \"static-files/aaaa\");\n            Page page = webClient.getPage(modifiedUrl);\n            Assert.assertEquals(\"resource not found\", 404, page.getWebResponse().getStatusCode());\n            assertThat(\"resource not found\", page.getWebResponse().getContentAsString(), containsString(ResourceDomainFilter.ERROR_RESPONSE));\n        }\n\n\n    }\n","date":"2020-06-30 21:54:47","endLine":185,"groupId":"10626","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"secondDomainCannotBeFaked","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5d/90f81f9d491effc52bd5987bec96952d65424d.src","preCode":"    public void secondDomainCannotBeFaked() throws Exception {\n        JenkinsRule.WebClient webClient = j.createWebClient();\n\n        String resourceResponseUrl;\n        { \r\n            webClient.setRedirectEnabled(true);\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n\n        {\n            \r\n            String modifiedUrl = resourceResponseUrl.replaceAll(\"static[-]files[/]....\", \"static-files/aaaa\");\n            Page page = webClient.getPage(modifiedUrl);\n            Assert.assertEquals(\"resource not found\", 404, page.getWebResponse().getStatusCode());\n            Assert.assertThat(\"resource not found\", page.getWebResponse().getContentAsString(), containsString(ResourceDomainFilter.ERROR_RESPONSE));\n        }\n\n\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2019-11-01 06:23:39","commitOrder":4,"curCode":"    public void testColonUserName() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setRedirectEnabled(true);\n        webClient.login(\"foo:bar\");\n\n        Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n        String resourceResponseUrl = page.getUrl().toString();\n        Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n        Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n        Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n    }\n","date":"2019-11-01 06:23:39","endLine":306,"groupId":"10626","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testColonUserName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/4a/ca157e6db019d163194c5bbb6e5c1a035c29db.src","preCode":"    public void testColonUserName() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setRedirectEnabled(true);\n        webClient.login(\"foo:bar\");\n\n        Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n        String resourceResponseUrl = page.getUrl().toString();\n        Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n        Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n        Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"N"}],"commitId":"75391b3ad789c8bb8a488b5e677a2dd3d1741d16","commitMessage":"@@@Merge commit 'a1097dfec620bb309d6df4122f96aa22a5288563' of https://github.com/jenkinsci/jenkins\n","date":"2020-06-30 21:54:47","modifiedFileCount":"290","status":"M","submitter":"Wadeck Follonier"}]
