[{"authorTime":"2017-02-12 18:38:30","codes":[{"authorDate":"2016-02-19 22:53:15","commitOrder":3,"curCode":"    @Test public void deleteViewShouldFailIfViewDoesNotExist() {\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(View.READ, View.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"never_created\")\n        ;\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No view named never_created inside view Jenkins\"));\n    }\n","date":"2016-02-19 22:53:15","endLine":112,"groupId":"7297","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteViewShouldFailIfViewDoesNotExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/73/2270fcccc7c98b7fedd169341d4d406c2b66fe.src","preCode":"    @Test public void deleteViewShouldFailIfViewDoesNotExist() {\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(View.READ, View.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"never_created\")\n        ;\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No view named never_created inside view Jenkins\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/DeleteViewCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"NB"},{"authorDate":"2017-02-12 18:38:30","commitOrder":3,"curCode":"    @Test public void deleteViewShouldFailIfViewNameIsSpace() {\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(View.READ, View.DELETE, Jenkins.READ)\n                .invokeWithArgs(\" \")\n                ;\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No view named   inside view Jenkins\"));\n    }\n","date":"2017-02-12 18:38:30","endLine":149,"groupId":"9135","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteViewShouldFailIfViewNameIsSpace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/40/ab7db0a483dffe1b3c1cbee46b4c67f0893035.src","preCode":"    @Test public void deleteViewShouldFailIfViewNameIsSpace() {\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(View.READ, View.DELETE, Jenkins.READ)\n                .invokeWithArgs(\" \")\n                ;\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No view named   inside view Jenkins\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/DeleteViewCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"B"}],"commitId":"496703d0fe133445e10c7d8d07fa7afd351c8854","commitMessage":"@@@Spelling fixes in changelogs.  Javadoc.  logs and UI (#2718)\n\n* spelling: abstract\n\n* spelling: about\n\n* spelling: absolute\n\n* spelling: across\n\n* spelling: activity\n\n* spelling: actually\n\n* spelling: addition\n\n* spelling: allocating\n\n* spelling: ambiguous\n\n* spelling: analyzes\n\n* spelling: analysis\n\n* spelling: another\n\n* spelling: appear\n\n* spelling: arbitrary\n\n* spelling: artifact\n\n* spelling: assignment\n\n* spelling: associated\n\n* spelling: augment\n\n* spelling: authentication\n\n* spelling: automatically\n\n* spelling: available\n\n* spelling: availability\n\n* spelling: because\n\n* spelling: background\n\n* spelling: beginning\n\n* spelling: boolean\n\n* spelling: browsers\n\n* spelling: building\n\n* spelling: calculation\n\n* spelling: channel\n\n* spelling: column\n\n* spelling: concatenation\n\n* spelling: connect\n\n* spelling: contribute\n\n* spelling: convert\n\n* spelling: copied\n\n* spelling: couldn't\n\n* spelling: scrambled\n\n* spelling: creates-a\n\n* spelling: curr-entry\n\n* spelling: customize\n\n* spelling: diagnostic\n\n* spelling: contain\n\n* spelling: default\n\n* spelling: delimiter\n\n* spelling: descriptor\n\n* spelling: disambiguates\n\n* spelling: different\n\n* spelling: diligently\n\n* spelling: disabled\n\n* spelling: discovered\n\n* spelling: display\n\n* spelling: doesn't\n\n* spelling: dollar\n\n* spelling: downstream\n\n* spelling: dynamically\n\n* spelling: preemptively\n\n* spelling: encrypt\n\n* spelling: erroneous\n\n* spelling: examine\n\n* spelling: existence\n\n* spelling: value\n\n* spelling: february\n\n* spelling: handling\n\n* spelling: hostname\n\n* spelling: convenient\n\n* spelling: identify\n\n* spelling: implementation\n\n* spelling: incorrect\n\n* spelling: individual\n\n* spelling: initialization\n\n* spelling: initialized\n\n* spelling: inputstream\n\n* spelling: instantiated\n\n* spelling: instantiation\n\n* spelling: intended\n\n* spelling: interpreted\n\n* spelling: interrupted\n\n* spelling: invocations\n\n* spelling: kern\n\n* spelling: localization\n\n* spelling: logger\n\n* spelling: malfunctioning\n\n* spelling: methods\n\n* spelling: monitor\n\n* spelling: mutator\n\n* spelling: multiple\n\n* spelling: object\n\n* spelling: configured\n\n* spelling: optionally\n\n* spelling: option\n\n* spelling: overridden\n\n* spelling: parameterized\n\n* spelling: parent\n\n* spelling: permissions\n\n* spelling: plugin\n\n* spelling: potentially\n\n* spelling: preferable\n\n* spelling: problems like\n\n* spelling: programmatically\n\n* spelling: property\n\n* spelling: reallocate\n\n* spelling: recommended\n\n* spelling: redirected\n\n* spelling: registered\n\n* spelling: reliable\n\n* spelling: remember\n\n* spelling: recurrence\n\n* spelling: repeatable\n\n* spelling: repeated\n\n* spelling: resource\n\n* spelling: retrieve\n\n* spelling: returned\n\n* spelling: revision\n\n* spelling: sandwich\n\n* spelling: separator\n\n* spelling: serialization\n\n* spelling: settings\n\n* spelling: shadow\n\n* spelling: should\n\n* spelling: someone\n\n* spelling: source\n\n* spelling: specified\n\n* spelling: style\n\n* spelling: subversion\n\n* spelling: sufficient\n\n* spelling: supplementary\n\n* spelling: suppressing\n\n* spelling: synchronization\n\n* spelling: synchronized\n\n* spelling: this\n\n* spelling: transitioning\n\n* spelling: termination\n\n* spelling: trying\n\n* spelling: truncatable\n\n* spelling: unknown\n\n* spelling: undeployed\n\n* spelling: unnecessary\n\n* spelling: unparseable\n\n* spelling: update\n\n* spelling: upper\n\n* spelling: verify\n\n* spelling: visible\n\n* spelling: warning\n\n* spelling: we're\n\n* spelling: whitespace\n\n* spelling: wide\n\n* spelling: with\n\n* spelling: workspace\n\n* spelling: yielding\n\n* spelling: to\n\n* spelling: by\n\n* spelling: the\n\n* spelling: hours\n","date":"2017-02-12 18:38:30","modifiedFileCount":"110","status":"M","submitter":"Josh Soref"},{"authorTime":"2021-09-05 22:13:34","codes":[{"authorDate":"2021-09-05 22:13:34","commitOrder":4,"curCode":"    @Test public void deleteViewShouldFailIfViewDoesNotExist() {\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, View.DELETE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result = command\n                .invokeWithArgs(\"never_created\")\n        ;\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No view named never_created inside view Jenkins\"));\n    }\n","date":"2021-09-05 22:13:34","endLine":113,"groupId":"10319","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"deleteViewShouldFailIfViewDoesNotExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/7a/59525f5564dcad78e5f050fd8cc14547a7c1ff.src","preCode":"    @Test public void deleteViewShouldFailIfViewDoesNotExist() {\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(View.READ, View.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"never_created\")\n        ;\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No view named never_created inside view Jenkins\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/DeleteViewCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2021-09-05 22:13:34","commitOrder":4,"curCode":"    @Test public void deleteViewShouldFailIfViewNameIsSpace() {\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, View.DELETE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result = command\n                .invokeWithArgs(\" \")\n                ;\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No view named   inside view Jenkins\"));\n    }\n","date":"2021-09-05 22:13:34","endLine":148,"groupId":"10319","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"deleteViewShouldFailIfViewNameIsSpace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/7a/59525f5564dcad78e5f050fd8cc14547a7c1ff.src","preCode":"    @Test public void deleteViewShouldFailIfViewNameIsSpace() {\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(View.READ, View.DELETE, Jenkins.READ)\n                .invokeWithArgs(\" \")\n                ;\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No view named   inside view Jenkins\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/DeleteViewCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"}],"commitId":"d7604cfb08cd82449e0d79f25432a196fa04bc2a","commitMessage":"@@@Merge pull request #5701 from jglick/anonymous-to-lambda\n\nReplace some anonymous classes with lambdas","date":"2021-09-05 22:13:34","modifiedFileCount":"32","status":"M","submitter":"Raihaan Shouhell"}]
