[{"authorTime":"2016-07-12 15:10:16","codes":[{"authorDate":"2016-07-12 15:10:16","commitOrder":1,"curCode":"    public void quietDownShouldSuccessWithBlockAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final ExecutorService threadPool = Executors.newSingleThreadExecutor();\n        final OneShotEvent beforeCli = new OneShotEvent();\n        final OneShotEvent finish = new OneShotEvent();\n        final Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        boolean timeoutOccurred = false;\n        final FutureTask exec_task = new FutureTask(new Callable() {\n            public Object call() {\n                assertJenkinsNotInQuietMode();\n                beforeCli.signal();\n                final CLICommandInvoker.Result result = command\n                        .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                        .invokeWithArgs(\"-block\");\n                fail(\"Should never return from previous CLI call!\");\n                return null;\n            }\n        });\n        try {\n            threadPool.submit(exec_task);\n            beforeCli.block();\n            Thread.sleep(1000); \r\n            assertJenkinsInQuietMode();\n            exec_task.get(10, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred = true;\n        }\n        if(!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        exec_task.cancel(true);\n        assertJenkinsInQuietMode();\n    }\n","date":"2016-07-12 15:10:16","endLine":232,"groupId":"2089","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"quietDownShouldSuccessWithBlockAndRunningExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/84/0031b5dae0a8b72001f79fcd056dadfc15a49e.src","preCode":"    public void quietDownShouldSuccessWithBlockAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final ExecutorService threadPool = Executors.newSingleThreadExecutor();\n        final OneShotEvent beforeCli = new OneShotEvent();\n        final OneShotEvent finish = new OneShotEvent();\n        final Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        boolean timeoutOccurred = false;\n        final FutureTask exec_task = new FutureTask(new Callable() {\n            public Object call() {\n                assertJenkinsNotInQuietMode();\n                beforeCli.signal();\n                final CLICommandInvoker.Result result = command\n                        .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                        .invokeWithArgs(\"-block\");\n                fail(\"Should never return from previous CLI call!\");\n                return null;\n            }\n        });\n        try {\n            threadPool.submit(exec_task);\n            beforeCli.block();\n            Thread.sleep(1000); \r\n            assertJenkinsInQuietMode();\n            exec_task.get(10, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred = true;\n        }\n        if(!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        exec_task.cancel(true);\n        assertJenkinsInQuietMode();\n    }\n","realPath":"test/src/test/java/hudson/cli/QuietDownCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"B"},{"authorDate":"2016-07-12 15:10:16","commitOrder":1,"curCode":"    public void quietDownShouldSuccessWithBlockAndZeroTimeoutAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final ExecutorService threadPool = Executors.newSingleThreadExecutor();\n        final OneShotEvent beforeCli = new OneShotEvent();\n        final OneShotEvent finish = new OneShotEvent();\n        final Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        boolean timeoutOccurred = false;\n        final FutureTask exec_task = new FutureTask(new Callable() {\n            public Object call() {\n                assertJenkinsNotInQuietMode();\n                beforeCli.signal();\n                final CLICommandInvoker.Result result = command\n                        .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                        .invokeWithArgs(\"-block\", \"-timeout\", \"0\");\n                fail(\"Should never return from previous CLI call!\");\n                return null;\n            }\n        });\n        try {\n            threadPool.submit(exec_task);\n            beforeCli.block();\n            Thread.sleep(1000); \r\n            assertJenkinsInQuietMode();\n            exec_task.get(10, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred = true;\n        }\n        if(!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        exec_task.cancel(true);\n        assertJenkinsInQuietMode();\n    }\n","date":"2016-07-12 15:10:16","endLine":278,"groupId":"2088","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"quietDownShouldSuccessWithBlockAndZeroTimeoutAndRunningExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/84/0031b5dae0a8b72001f79fcd056dadfc15a49e.src","preCode":"    public void quietDownShouldSuccessWithBlockAndZeroTimeoutAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final ExecutorService threadPool = Executors.newSingleThreadExecutor();\n        final OneShotEvent beforeCli = new OneShotEvent();\n        final OneShotEvent finish = new OneShotEvent();\n        final Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        boolean timeoutOccurred = false;\n        final FutureTask exec_task = new FutureTask(new Callable() {\n            public Object call() {\n                assertJenkinsNotInQuietMode();\n                beforeCli.signal();\n                final CLICommandInvoker.Result result = command\n                        .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                        .invokeWithArgs(\"-block\", \"-timeout\", \"0\");\n                fail(\"Should never return from previous CLI call!\");\n                return null;\n            }\n        });\n        try {\n            threadPool.submit(exec_task);\n            beforeCli.block();\n            Thread.sleep(1000); \r\n            assertJenkinsInQuietMode();\n            exec_task.get(10, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred = true;\n        }\n        if(!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        exec_task.cancel(true);\n        assertJenkinsInQuietMode();\n    }\n","realPath":"test/src/test/java/hudson/cli/QuietDownCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"B"}],"commitId":"e750cd3511670c233a1bcf8dfac3bb6aa80097e9","commitMessage":"@@@Merge pull request #2420 from pjanouse/JENKINS-35423\n\n[JENKINS-35423] CLI commands quiet-down/cancel-quiet-down extracted from core to CLI\n","date":"2016-07-12 15:10:16","modifiedFileCount":"2","status":"B","submitter":"Oliver Gond?a"},{"authorTime":"2017-12-14 01:53:14","codes":[{"authorDate":"2017-12-14 01:53:14","commitOrder":2,"curCode":"    public void quietDownShouldSuccessWithBlockAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final ExecutorService threadPool = Executors.newSingleThreadExecutor();\n        final OneShotEvent beforeCli = new OneShotEvent();\n        final OneShotEvent finish = new OneShotEvent();\n        final Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        boolean timeoutOccurred = false;\n        final FutureTask exec_task = new FutureTask(new Callable() {\n            public Object call() {\n                assertJenkinsNotInQuietMode();\n                beforeCli.signal();\n                final CLICommandInvoker.Result result = command\n                        .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                        .invokeWithArgs(\"-block\");\n                fail(\"Should never return from previous CLI call!\");\n                return null;\n            }\n        });\n        try {\n            threadPool.submit(exec_task);\n            beforeCli.block();\n            assertJenkinsInQuietMode();\n            exec_task.get(10, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred = true;\n        }\n        if(!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        exec_task.cancel(true);\n        assertJenkinsInQuietMode();\n    }\n","date":"2017-12-14 01:53:14","endLine":232,"groupId":"2089","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"quietDownShouldSuccessWithBlockAndRunningExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/c7/837abc9dce291c0ab81ccef9f2cdcdf69c0ecb.src","preCode":"    public void quietDownShouldSuccessWithBlockAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final ExecutorService threadPool = Executors.newSingleThreadExecutor();\n        final OneShotEvent beforeCli = new OneShotEvent();\n        final OneShotEvent finish = new OneShotEvent();\n        final Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        boolean timeoutOccurred = false;\n        final FutureTask exec_task = new FutureTask(new Callable() {\n            public Object call() {\n                assertJenkinsNotInQuietMode();\n                beforeCli.signal();\n                final CLICommandInvoker.Result result = command\n                        .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                        .invokeWithArgs(\"-block\");\n                fail(\"Should never return from previous CLI call!\");\n                return null;\n            }\n        });\n        try {\n            threadPool.submit(exec_task);\n            beforeCli.block();\n            Thread.sleep(1000); \r\n            assertJenkinsInQuietMode();\n            exec_task.get(10, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred = true;\n        }\n        if(!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        exec_task.cancel(true);\n        assertJenkinsInQuietMode();\n    }\n","realPath":"test/src/test/java/hudson/cli/QuietDownCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2017-12-14 01:53:14","commitOrder":2,"curCode":"    public void quietDownShouldSuccessWithBlockAndZeroTimeoutAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final ExecutorService threadPool = Executors.newSingleThreadExecutor();\n        final OneShotEvent beforeCli = new OneShotEvent();\n        final OneShotEvent finish = new OneShotEvent();\n        final Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        boolean timeoutOccurred = false;\n        final FutureTask exec_task = new FutureTask(new Callable() {\n            public Object call() {\n                assertJenkinsNotInQuietMode();\n                beforeCli.signal();\n                final CLICommandInvoker.Result result = command\n                        .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                        .invokeWithArgs(\"-block\", \"-timeout\", \"0\");\n                fail(\"Should never return from previous CLI call!\");\n                return null;\n            }\n        });\n        try {\n            threadPool.submit(exec_task);\n            beforeCli.block();\n            assertJenkinsInQuietMode();\n            exec_task.get(10, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred = true;\n        }\n        if(!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        exec_task.cancel(true);\n        assertJenkinsInQuietMode();\n    }\n","date":"2017-12-14 01:53:14","endLine":277,"groupId":"2088","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"quietDownShouldSuccessWithBlockAndZeroTimeoutAndRunningExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/c7/837abc9dce291c0ab81ccef9f2cdcdf69c0ecb.src","preCode":"    public void quietDownShouldSuccessWithBlockAndZeroTimeoutAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final ExecutorService threadPool = Executors.newSingleThreadExecutor();\n        final OneShotEvent beforeCli = new OneShotEvent();\n        final OneShotEvent finish = new OneShotEvent();\n        final Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        boolean timeoutOccurred = false;\n        final FutureTask exec_task = new FutureTask(new Callable() {\n            public Object call() {\n                assertJenkinsNotInQuietMode();\n                beforeCli.signal();\n                final CLICommandInvoker.Result result = command\n                        .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                        .invokeWithArgs(\"-block\", \"-timeout\", \"0\");\n                fail(\"Should never return from previous CLI call!\");\n                return null;\n            }\n        });\n        try {\n            threadPool.submit(exec_task);\n            beforeCli.block();\n            Thread.sleep(1000); \r\n            assertJenkinsInQuietMode();\n            exec_task.get(10, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred = true;\n        }\n        if(!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        exec_task.cancel(true);\n        assertJenkinsInQuietMode();\n    }\n","realPath":"test/src/test/java/hudson/cli/QuietDownCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"}],"commitId":"c0ba0527eece7e1fbcb2fc037f8e25542bc8dd45","commitMessage":"@@@Merge commit '78adf02addc47ccb2629c9bb9101a8dd630b22a5'\n","date":"2017-12-14 01:53:14","modifiedFileCount":"66","status":"M","submitter":"Jesse Glick"},{"authorTime":"2021-04-28 17:28:25","codes":[{"authorDate":"2021-04-28 17:28:25","commitOrder":3,"curCode":"    public void quietDownShouldSuccessWithBlockAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final ExecutorService threadPool = Executors.newSingleThreadExecutor();\n        final OneShotEvent beforeCli = new OneShotEvent();\n        final OneShotEvent finish = new OneShotEvent();\n        final Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        boolean timeoutOccurred = false;\n        final FutureTask exec_task = new FutureTask(new Callable() {\n            @Override\n            public Object call() {\n                assertJenkinsNotInQuietMode();\n                beforeCli.signal();\n                final CLICommandInvoker.Result result = command\n                        .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                        .invokeWithArgs(\"-block\");\n                fail(\"Should never return from previous CLI call!\");\n                return null;\n            }\n        });\n        try {\n            threadPool.submit(exec_task);\n            beforeCli.block();\n            assertJenkinsInQuietMode();\n            exec_task.get(10, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred = true;\n        }\n        if(!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        exec_task.cancel(true);\n        assertJenkinsInQuietMode();\n    }\n","date":"2021-04-28 17:28:25","endLine":254,"groupId":"10128","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"quietDownShouldSuccessWithBlockAndRunningExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/44/ffdc5f8f56940a0502b13d77b04f749d1b9c0c.src","preCode":"    public void quietDownShouldSuccessWithBlockAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final ExecutorService threadPool = Executors.newSingleThreadExecutor();\n        final OneShotEvent beforeCli = new OneShotEvent();\n        final OneShotEvent finish = new OneShotEvent();\n        final Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        boolean timeoutOccurred = false;\n        final FutureTask exec_task = new FutureTask(new Callable() {\n            public Object call() {\n                assertJenkinsNotInQuietMode();\n                beforeCli.signal();\n                final CLICommandInvoker.Result result = command\n                        .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                        .invokeWithArgs(\"-block\");\n                fail(\"Should never return from previous CLI call!\");\n                return null;\n            }\n        });\n        try {\n            threadPool.submit(exec_task);\n            beforeCli.block();\n            assertJenkinsInQuietMode();\n            exec_task.get(10, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred = true;\n        }\n        if(!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        exec_task.cancel(true);\n        assertJenkinsInQuietMode();\n    }\n","realPath":"test/src/test/java/hudson/cli/QuietDownCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"},{"authorDate":"2021-04-28 17:28:25","commitOrder":3,"curCode":"    public void quietDownShouldSuccessWithBlockAndZeroTimeoutAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final ExecutorService threadPool = Executors.newSingleThreadExecutor();\n        final OneShotEvent beforeCli = new OneShotEvent();\n        final OneShotEvent finish = new OneShotEvent();\n        final Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        boolean timeoutOccurred = false;\n        final FutureTask exec_task = new FutureTask(new Callable() {\n            @Override\n            public Object call() {\n                assertJenkinsNotInQuietMode();\n                beforeCli.signal();\n                final CLICommandInvoker.Result result = command\n                        .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                        .invokeWithArgs(\"-block\", \"-timeout\", \"0\");\n                fail(\"Should never return from previous CLI call!\");\n                return null;\n            }\n        });\n        try {\n            threadPool.submit(exec_task);\n            beforeCli.block();\n            assertJenkinsInQuietMode();\n            exec_task.get(10, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred = true;\n        }\n        if(!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        exec_task.cancel(true);\n        assertJenkinsInQuietMode();\n    }\n","date":"2021-04-28 17:28:25","endLine":300,"groupId":"10128","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"quietDownShouldSuccessWithBlockAndZeroTimeoutAndRunningExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/44/ffdc5f8f56940a0502b13d77b04f749d1b9c0c.src","preCode":"    public void quietDownShouldSuccessWithBlockAndZeroTimeoutAndRunningExecutor() throws Exception {\n        final FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        final ExecutorService threadPool = Executors.newSingleThreadExecutor();\n        final OneShotEvent beforeCli = new OneShotEvent();\n        final OneShotEvent finish = new OneShotEvent();\n        final Future<FreeStyleBuild> build = OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        boolean timeoutOccurred = false;\n        final FutureTask exec_task = new FutureTask(new Callable() {\n            public Object call() {\n                assertJenkinsNotInQuietMode();\n                beforeCli.signal();\n                final CLICommandInvoker.Result result = command\n                        .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                        .invokeWithArgs(\"-block\", \"-timeout\", \"0\");\n                fail(\"Should never return from previous CLI call!\");\n                return null;\n            }\n        });\n        try {\n            threadPool.submit(exec_task);\n            beforeCli.block();\n            assertJenkinsInQuietMode();\n            exec_task.get(10, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred = true;\n        }\n        if(!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n\n        finish.signal();\n        build.get();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n        assertThat(project.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        exec_task.cancel(true);\n        assertJenkinsInQuietMode();\n    }\n","realPath":"test/src/test/java/hudson/cli/QuietDownCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"f6378676b11288cc2525852b0a1a441d147e31d3","commitMessage":"@@@Add missing @Override annotations (#5430)\n\n","date":"2021-04-28 17:28:25","modifiedFileCount":"405","status":"M","submitter":"Basil Crow"}]
