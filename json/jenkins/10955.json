[{"authorTime":"2016-02-19 22:53:15","codes":[{"authorDate":"2016-02-19 22:53:15","commitOrder":3,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","date":"2016-02-19 22:53:15","endLine":89,"groupId":"410","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/12/7ec43f6c59672859aa45f589290b9b3c15a28b.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteJobCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"MB"},{"authorDate":"2016-02-19 22:53:15","commitOrder":3,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(nodes);\n\n        for (String node_s : hs) {\n            Node node = null;\n\n            try {\n                node = jenkins.getNode(node_s);\n\n                if (node == null) {\n                    throw new IllegalArgumentException(\"No such node '\" + node_s + \"'\");\n                }\n\n                node.toComputer().doDoDelete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","date":"2016-02-19 22:53:15","endLine":88,"groupId":"5965","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5f/c70fc764aba7388f3a265e9f410bdcd2818ad0.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(nodes);\n\n        for (String node_s : hs) {\n            Node node = null;\n\n            try {\n                node = jenkins.getNode(node_s);\n\n                if (node == null) {\n                    throw new IllegalArgumentException(\"No such node '\" + node_s + \"'\");\n                }\n\n                node.toComputer().doDoDelete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"MB"}],"commitId":"fe41dc89ab9801c9d57713f84e650788e172e115","commitMessage":"@@@Merge pull request #1997 from pjanouse/JENKINS-32273\n\n[JENKINS-32273] Unified an issue handling in CLI\n","date":"2016-02-19 22:53:15","modifiedFileCount":"50","status":"M","submitter":"Oliver Gond?a"},{"authorTime":"2016-10-15 23:34:12","codes":[{"authorDate":"2016-10-15 23:34:12","commitOrder":4,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2016-10-15 23:34:12","endLine":90,"groupId":"410","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/64/2de5a06c5520963f7046ab70ed820c632d55e0.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteJobCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2016-10-15 23:34:12","commitOrder":4,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(nodes);\n\n        for (String node_s : hs) {\n            Node node = null;\n\n            try {\n                node = jenkins.getNode(node_s);\n\n                if (node == null) {\n                    throw new IllegalArgumentException(\"No such node '\" + node_s + \"'\");\n                }\n\n                node.toComputer().doDoDelete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2016-10-15 23:34:12","endLine":89,"groupId":"5965","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/03/001fccc3a10886fb164632952e426d31862ba7.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(nodes);\n\n        for (String node_s : hs) {\n            Node node = null;\n\n            try {\n                node = jenkins.getNode(node_s);\n\n                if (node == null) {\n                    throw new IllegalArgumentException(\"No such node '\" + node_s + \"'\");\n                }\n\n                node.toComputer().doDoDelete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"b50034c9bffb704acfce0bc49d99855b689eace6","commitMessage":"@@@[FIXED JENKINS-38650] - Cleanup spelling in CLi commands + Javadoc updates (#2571)\n\n* [FIXED JENKINS-38650] - Cleanup spelling in CLi commands.\n\nAlso adds some javadoc and since definitions.\n\n* [JENKINS-38650] - Move common warning message to the constant\n\n* [JENKINS-38650] - DeleteViewCommand should also use the constant string\n\n* [JENKINS-38650] - Rename the constant in order to make the name more explicit\n","date":"2016-10-15 23:34:12","modifiedFileCount":"23","status":"M","submitter":"Oleg Nenashev"},{"authorTime":"2019-01-27 21:52:11","codes":[{"authorDate":"2019-01-27 21:52:11","commitOrder":5,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>();\n        hs.addAll(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-01-27 21:52:11","endLine":89,"groupId":"410","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/03/e63e8579da3f9b631577120b30bb873ab6d8ae.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteJobCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2019-01-27 21:52:11","commitOrder":5,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>();\n        hs.addAll(nodes);\n\n        for (String node_s : hs) {\n            Node node = null;\n\n            try {\n                node = jenkins.getNode(node_s);\n\n                if (node == null) {\n                    throw new IllegalArgumentException(\"No such node '\" + node_s + \"'\");\n                }\n\n                node.toComputer().doDoDelete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-01-27 21:52:11","endLine":88,"groupId":"5965","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/60/a8821e0f7134b396344ce4fc6078dd4c5eac24.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(nodes);\n\n        for (String node_s : hs) {\n            Node node = null;\n\n            try {\n                node = jenkins.getNode(node_s);\n\n                if (node == null) {\n                    throw new IllegalArgumentException(\"No such node '\" + node_s + \"'\");\n                }\n\n                node.toComputer().doDoDelete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"86da98c317f6d40e5ffb40e92bfe351c6543d592","commitMessage":"@@@Merge pull request #3208 from oleg-nenashev/cleanup/cli\n\nBulk cleanup of code in hudson.cli.","date":"2019-01-27 21:52:11","modifiedFileCount":"26","status":"M","submitter":"Baptiste Mathus"},{"authorTime":"2019-07-03 01:06:17","codes":[{"authorDate":"2019-07-03 01:06:17","commitOrder":6,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-07-03 01:06:17","endLine":89,"groupId":"410","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/0c/b1ee7f5a467a03f148928698ae9e6445fca7c9.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>();\n        hs.addAll(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteJobCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2019-07-03 01:06:17","commitOrder":6,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        for (String node_s : hs) {\n            Node node = null;\n\n            try {\n                node = jenkins.getNode(node_s);\n\n                if (node == null) {\n                    throw new IllegalArgumentException(\"No such node '\" + node_s + \"'\");\n                }\n\n                node.toComputer().doDoDelete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-07-03 01:06:17","endLine":88,"groupId":"5965","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/76/5d10a878ca34bad4100c0965cefdf024f66e56.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>();\n        hs.addAll(nodes);\n\n        for (String node_s : hs) {\n            Node node = null;\n\n            try {\n                node = jenkins.getNode(node_s);\n\n                if (node == null) {\n                    throw new IllegalArgumentException(\"No such node '\" + node_s + \"'\");\n                }\n\n                node.toComputer().doDoDelete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"d72041041acc3f887237e9d0da639a1587142320","commitMessage":"@@@Merge commit '36fa47add280b81c0e54c61dd7b7d015da5307c9' of github.com:jenkinsci/jenkins\n","date":"2019-07-03 01:06:17","modifiedFileCount":"39","status":"M","submitter":"Jeff Thompson"},{"authorTime":"2019-07-03 02:02:48","codes":[{"authorDate":"2019-07-03 02:02:48","commitOrder":7,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-07-03 02:02:48","endLine":89,"groupId":"410","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f6/c4fe5c9ededb72a1d5a048fa1800817b72c523.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job = null;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteJobCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2019-07-03 02:02:48","commitOrder":7,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        for (String node_s : hs) {\n            Node node;\n\n            try {\n                node = jenkins.getNode(node_s);\n\n                if (node == null) {\n                    throw new IllegalArgumentException(\"No such node '\" + node_s + \"'\");\n                }\n\n                node.toComputer().doDoDelete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-07-03 02:02:48","endLine":88,"groupId":"5965","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ed/1a178267a20f9bc0509e301e29d9cef8954b7e.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        for (String node_s : hs) {\n            Node node = null;\n\n            try {\n                node = jenkins.getNode(node_s);\n\n                if (node == null) {\n                    throw new IllegalArgumentException(\"No such node '\" + node_s + \"'\");\n                }\n\n                node.toComputer().doDoDelete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"494119294fa2f095b4a28db0dd32c0d2092d9fa1","commitMessage":"@@@Merge commit '4404c6e662befe16e8daa1ea7a412df73b370086' of github.com:jenkinsci/jenkins\n","date":"2019-07-03 02:02:48","modifiedFileCount":"292","status":"M","submitter":"Jeff Thompson"},{"authorTime":"2019-09-27 04:40:34","codes":[{"authorDate":"2019-09-27 04:40:34","commitOrder":8,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = job_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-09-27 04:40:34","endLine":89,"groupId":"410","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/37/5e158a8737c02fb62f881b9aecfa611fe14595.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(job_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteJobCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2019-09-27 04:40:34","commitOrder":8,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        for (String node_s : hs) {\n            Node node;\n\n            try {\n                node = jenkins.getNode(node_s);\n\n                if (node == null) {\n                    throw new IllegalArgumentException(\"No such node '\" + node_s + \"'\");\n                }\n\n                node.toComputer().doDoDelete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = node_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-09-27 04:40:34","endLine":88,"groupId":"5965","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/76/e5c2953085a78fb73dbb025ebd5ccf603c4983.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        for (String node_s : hs) {\n            Node node;\n\n            try {\n                node = jenkins.getNode(node_s);\n\n                if (node == null) {\n                    throw new IllegalArgumentException(\"No such node '\" + node_s + \"'\");\n                }\n\n                node.toComputer().doDoDelete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = String.format(node_s + \": \" + e.getMessage());\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"36ac586fc013a8b7228175aea49495a8448a9cc4","commitMessage":"@@@removed redundant string.format calls and merged array creation with addAll() calls (#4214)\n\n","date":"2019-09-27 04:40:34","modifiedFileCount":"9","status":"M","submitter":"StefanSpieker"},{"authorTime":"2020-01-20 21:55:10","codes":[{"authorDate":"2020-01-20 21:55:10","commitOrder":9,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = job_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2020-01-20 21:55:10","endLine":89,"groupId":"410","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d8/29340892e12afd60819aa4d9f803db9f51e270.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = job_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteJobCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2020-01-20 21:55:10","commitOrder":9,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        for (String node_s : hs) {\n            Node node;\n\n            try {\n                node = jenkins.getNode(node_s);\n\n                if (node == null) {\n                    throw new IllegalArgumentException(\"No such node '\" + node_s + \"'\");\n                }\n\n                node.toComputer().doDoDelete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = node_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2020-01-20 21:55:10","endLine":88,"groupId":"5965","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/57/aad43507581c82743053669e6837393a667c1e.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        for (String node_s : hs) {\n            Node node;\n\n            try {\n                node = jenkins.getNode(node_s);\n\n                if (node == null) {\n                    throw new IllegalArgumentException(\"No such node '\" + node_s + \"'\");\n                }\n\n                node.toComputer().doDoDelete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = node_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"574ec6e5bdf2e4ac9394e290fefff5ac1c9a5c96","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2020-01-20 21:55:10","modifiedFileCount":"193","status":"M","submitter":"Wadeck Follonier"},{"authorTime":"2020-01-20 21:55:10","codes":[{"authorDate":"2021-04-20 04:54:17","commitOrder":10,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(Item.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = job_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2021-04-20 04:54:17","endLine":90,"groupId":"10955","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/8f/f81987e6ee81f27c4c50e0d7097c751964a2b3.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n\n        final HashSet<String> hs = new HashSet<>(jobs);\n\n        for (String job_s: hs) {\n            AbstractItem job;\n\n            try {\n                job = (AbstractItem) jenkins.getItemByFullName(job_s);\n\n                if(job == null) {\n                    throw new IllegalArgumentException(\"No such job '\" + job_s + \"'\");\n                }\n\n                job.checkPermission(AbstractItem.DELETE);\n                job.delete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = job_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteJobCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2020-01-20 21:55:10","commitOrder":10,"curCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        for (String node_s : hs) {\n            Node node;\n\n            try {\n                node = jenkins.getNode(node_s);\n\n                if (node == null) {\n                    throw new IllegalArgumentException(\"No such node '\" + node_s + \"'\");\n                }\n\n                node.toComputer().doDoDelete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = node_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2020-01-20 21:55:10","endLine":88,"groupId":"10955","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/57/aad43507581c82743053669e6837393a667c1e.src","preCode":"    protected int run() throws Exception {\n\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        for (String node_s : hs) {\n            Node node;\n\n            try {\n                node = jenkins.getNode(node_s);\n\n                if (node == null) {\n                    throw new IllegalArgumentException(\"No such node '\" + node_s + \"'\");\n                }\n\n                node.toComputer().doDoDelete();\n            } catch (Exception e) {\n                if(hs.size() == 1) {\n                    throw e;\n                }\n\n                final String errorMsg = node_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DeleteNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"}],"commitId":"0fd55bd6b50fcdf27368c6b771fb3d8363a24f83","commitMessage":"@@@Merge pull request #5419 from basil/subtypes\n\nUse declaring class as qualifier","date":"2021-04-20 04:54:17","modifiedFileCount":"43","status":"M","submitter":"Oleg Nenashev"}]
