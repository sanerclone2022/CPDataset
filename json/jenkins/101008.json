[{"authorTime":"2009-01-07 09:02:56","codes":[{"authorDate":"2009-08-11 08:44:30","commitOrder":2,"curCode":"    public Graph getBuildTimeGraph() {\n        return new Graph(getLastBuild().getTimestamp(),500,400) {\n            @Override\n            protected JFreeChart createGraph() {\n                class ChartLabel implements Comparable<ChartLabel> {\n                    final Run run;\n\n                    public ChartLabel(Run r) {\n                        this.run = r;\n                    }\n\n                    public int compareTo(ChartLabel that) {\n                        return this.run.number - that.run.number;\n                    }\n\n                    public boolean equals(Object o) {\n                        \r\n                        \r\n                        if (o == null || !ChartLabel.class.isAssignableFrom( o.getClass() ))  {\n                            return false;\n                        }\n                        ChartLabel that = (ChartLabel) o;\n                        return run == that.run;\n                    }\n\n                    public Color getColor() {\n                        \r\n                        \r\n                        Result r = run.getResult();\n                        if (r == Result.FAILURE)\n                            return ColorPalette.RED;\n                        else if (r == Result.UNSTABLE)\n                            return ColorPalette.YELLOW;\n                        else if (r == Result.ABORTED || r == Result.NOT_BUILT)\n                            return ColorPalette.GREY;\n                        else\n                            return ColorPalette.BLUE;\n                    }\n\n                    public int hashCode() {\n                        return run.hashCode();\n                    }\n\n                    public String toString() {\n                        String l = run.getDisplayName();\n                        if (run instanceof Build) {\n                            String s = ((Build) run).getBuiltOnStr();\n                            if (s != null)\n                                l += ' ' + s;\n                        }\n                        return l;\n                    }\n\n                }\n\n                DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<String, ChartLabel>();\n                for (Run r : getBuilds()) {\n                    if (r.isBuilding())\n                        continue;\n                    data.add(((double) r.getDuration()) / (1000 * 60), \"min\",\n                            new ChartLabel(r));\n                }\n\n                final CategoryDataset dataset = data.build();\n\n                final JFreeChart chart = ChartFactory.createStackedAreaChart(null, \r\n                                                                                    \r\n                        null, \r\n                        Messages.Job_minutes(), \r\n                        dataset, \r\n                        PlotOrientation.VERTICAL, \r\n                        false, \r\n                        true, \r\n                        false \r\n                        );\n\n                chart.setBackgroundPaint(Color.white);\n\n                final CategoryPlot plot = chart.getCategoryPlot();\n\n                \r\n                plot.setBackgroundPaint(Color.WHITE);\n                plot.setOutlinePaint(null);\n                plot.setForegroundAlpha(0.8f);\n                \r\n                \r\n                plot.setRangeGridlinesVisible(true);\n                plot.setRangeGridlinePaint(Color.black);\n\n                CategoryAxis domainAxis = new ShiftedCategoryAxis(null);\n                plot.setDomainAxis(domainAxis);\n                domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n                domainAxis.setLowerMargin(0.0);\n                domainAxis.setUpperMargin(0.0);\n                domainAxis.setCategoryMargin(0.0);\n\n                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n                ChartUtil.adjustChebyshev(dataset, rangeAxis);\n                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n                StackedAreaRenderer ar = new StackedAreaRenderer2() {\n                    @Override\n                    public Paint getItemPaint(int row, int column) {\n                        ChartLabel key = (ChartLabel) dataset.getColumnKey(column);\n                        return key.getColor();\n                    }\n\n                    @Override\n                    public String generateURL(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return String.valueOf(label.run.number);\n                    }\n\n                    @Override\n                    public String generateToolTip(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return label.run.getDisplayName() + \" : \"\n                                + label.run.getDurationString();\n                    }\n                };\n                plot.setRenderer(ar);\n\n                \r\n                plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n                return chart;\n            }\n        };\n","date":"2009-08-11 08:44:30","endLine":1160,"groupId":"8822","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getBuildTimeGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a5/4a5264cf3709c984803c61cf335449fda72038.src","preCode":"    public Graph getBuildTimeGraph() {\n        return new Graph(getLastBuild().getTimestamp(),500,400) {\n            @Override\n            protected JFreeChart createGraph() {\n                class ChartLabel implements Comparable<ChartLabel> {\n                    final Run run;\n\n                    public ChartLabel(Run r) {\n                        this.run = r;\n                    }\n\n                    public int compareTo(ChartLabel that) {\n                        return this.run.number - that.run.number;\n                    }\n\n                    public boolean equals(Object o) {\n                        \r\n                        \r\n                        if (o == null || !ChartLabel.class.isAssignableFrom( o.getClass() ))  {\n                            return false;\n                        }\n                        ChartLabel that = (ChartLabel) o;\n                        return run == that.run;\n                    }\n\n                    public Color getColor() {\n                        \r\n                        \r\n                        Result r = run.getResult();\n                        if (r == Result.FAILURE)\n                            return ColorPalette.RED;\n                        else if (r == Result.UNSTABLE)\n                            return ColorPalette.YELLOW;\n                        else if (r == Result.ABORTED || r == Result.NOT_BUILT)\n                            return ColorPalette.GREY;\n                        else\n                            return ColorPalette.BLUE;\n                    }\n\n                    public int hashCode() {\n                        return run.hashCode();\n                    }\n\n                    public String toString() {\n                        String l = run.getDisplayName();\n                        if (run instanceof Build) {\n                            String s = ((Build) run).getBuiltOnStr();\n                            if (s != null)\n                                l += ' ' + s;\n                        }\n                        return l;\n                    }\n\n                }\n\n                DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<String, ChartLabel>();\n                for (Run r : getBuilds()) {\n                    if (r.isBuilding())\n                        continue;\n                    data.add(((double) r.getDuration()) / (1000 * 60), \"min\",\n                            new ChartLabel(r));\n                }\n\n                final CategoryDataset dataset = data.build();\n\n                final JFreeChart chart = ChartFactory.createStackedAreaChart(null, \r\n                                                                                    \r\n                        null, \r\n                        Messages.Job_minutes(), \r\n                        dataset, \r\n                        PlotOrientation.VERTICAL, \r\n                        false, \r\n                        true, \r\n                        false \r\n                        );\n\n                chart.setBackgroundPaint(Color.white);\n\n                final CategoryPlot plot = chart.getCategoryPlot();\n\n                \r\n                plot.setBackgroundPaint(Color.WHITE);\n                plot.setOutlinePaint(null);\n                plot.setForegroundAlpha(0.8f);\n                \r\n                \r\n                plot.setRangeGridlinesVisible(true);\n                plot.setRangeGridlinePaint(Color.black);\n\n                CategoryAxis domainAxis = new ShiftedCategoryAxis(null);\n                plot.setDomainAxis(domainAxis);\n                domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n                domainAxis.setLowerMargin(0.0);\n                domainAxis.setUpperMargin(0.0);\n                domainAxis.setCategoryMargin(0.0);\n\n                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n                ChartUtil.adjustChebyshev(dataset, rangeAxis);\n                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n                StackedAreaRenderer ar = new StackedAreaRenderer2() {\n                    @Override\n                    public Paint getItemPaint(int row, int column) {\n                        ChartLabel key = (ChartLabel) dataset.getColumnKey(column);\n                        return key.getColor();\n                    }\n\n                    @Override\n                    public String generateURL(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return String.valueOf(label.run.number);\n                    }\n\n                    @Override\n                    public String generateToolTip(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return label.run.getDisplayName() + \" : \"\n                                + label.run.getDurationString();\n                    }\n                };\n                plot.setRenderer(ar);\n\n                \r\n                plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n                return chart;\n            }\n        };\n","realPath":"core/src/main/java/hudson/model/Job.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":1031,"status":"B"},{"authorDate":"2009-01-07 09:02:56","commitOrder":2,"curCode":"    public JFreeChart createChart(CategoryDataset ds) {\n        final JFreeChart chart = ChartFactory.createLineChart(null, \r\n                null, \r\n                null, \r\n                ds, \r\n                PlotOrientation.VERTICAL, \r\n                true, \r\n                true, \r\n                false \r\n                );\n\n        chart.setBackgroundPaint(Color.white);\n\n        final CategoryPlot plot = chart.getCategoryPlot();\n        plot.setBackgroundPaint(Color.WHITE);\n        plot.setOutlinePaint(null);\n        plot.setRangeGridlinesVisible(true);\n        plot.setRangeGridlinePaint(Color.black);\n\n        final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();\n        renderer.setBaseStroke(new BasicStroke(3));\n        configureRenderer(renderer);\n\n        final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null);\n        plot.setDomainAxis(domainAxis);\n        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n        domainAxis.setLowerMargin(0.0);\n        domainAxis.setUpperMargin(0.0);\n        domainAxis.setCategoryMargin(0.0);\n\n        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        \r\n        plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n        return chart;\n    }\n","date":"2009-01-07 09:02:56","endLine":125,"groupId":"7620","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createChart","params":"(CategoryDatasetds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/bc/0cdf0bad7415a574f6c1a1f0c84aa47b6b4bdf.src","preCode":"    public JFreeChart createChart(CategoryDataset ds) {\n        final JFreeChart chart = ChartFactory.createLineChart(null, \r\n                null, \r\n                null, \r\n                ds, \r\n                PlotOrientation.VERTICAL, \r\n                true, \r\n                true, \r\n                false \r\n                );\n\n        chart.setBackgroundPaint(Color.white);\n\n        final CategoryPlot plot = chart.getCategoryPlot();\n        plot.setBackgroundPaint(Color.WHITE);\n        plot.setOutlinePaint(null);\n        plot.setRangeGridlinesVisible(true);\n        plot.setRangeGridlinePaint(Color.black);\n\n        final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();\n        renderer.setBaseStroke(new BasicStroke(3));\n        configureRenderer(renderer);\n\n        final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null);\n        plot.setDomainAxis(domainAxis);\n        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n        domainAxis.setLowerMargin(0.0);\n        domainAxis.setUpperMargin(0.0);\n        domainAxis.setCategoryMargin(0.0);\n\n        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        \r\n        plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n        return chart;\n    }\n","realPath":"core/src/main/java/hudson/model/LoadStatistics.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"NB"}],"commitId":"048fc0c4c0564d4cd56315349c553de2710562ff","commitMessage":"@@@introduced the Graph class to improve the OO-ness of the model classes. This should also improve testability a bit.\n\ngit-svn-id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/main@20611 71c3de6d-444a-0410-be80-ed276b4c234a\n","date":"2009-08-11 08:44:30","modifiedFileCount":"3","status":"M","submitter":"kohsuke"},{"authorTime":"2009-01-07 09:02:56","codes":[{"authorDate":"2009-09-15 03:40:23","commitOrder":3,"curCode":"    public Graph getBuildTimeGraph() {\n        return new Graph(getLastBuild().getTimestamp(),500,400) {\n            @Override\n            protected JFreeChart createGraph() {\n                class ChartLabel implements Comparable<ChartLabel> {\n                    final Run run;\n\n                    public ChartLabel(Run r) {\n                        this.run = r;\n                    }\n\n                    public int compareTo(ChartLabel that) {\n                        return this.run.number - that.run.number;\n                    }\n\n                    @Override\n                    public boolean equals(Object o) {\n                        \r\n                        \r\n                        if (o == null || !ChartLabel.class.isAssignableFrom( o.getClass() ))  {\n                            return false;\n                        }\n                        ChartLabel that = (ChartLabel) o;\n                        return run == that.run;\n                    }\n\n                    public Color getColor() {\n                        \r\n                        \r\n                        Result r = run.getResult();\n                        if (r == Result.FAILURE)\n                            return ColorPalette.RED;\n                        else if (r == Result.UNSTABLE)\n                            return ColorPalette.YELLOW;\n                        else if (r == Result.ABORTED || r == Result.NOT_BUILT)\n                            return ColorPalette.GREY;\n                        else\n                            return ColorPalette.BLUE;\n                    }\n\n                    @Override\n                    public int hashCode() {\n                        return run.hashCode();\n                    }\n\n                    @Override\n                    public String toString() {\n                        String l = run.getDisplayName();\n                        if (run instanceof Build) {\n                            String s = ((Build) run).getBuiltOnStr();\n                            if (s != null)\n                                l += ' ' + s;\n                        }\n                        return l;\n                    }\n\n                }\n\n                DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<String, ChartLabel>();\n                for (Run r : getBuilds()) {\n                    if (r.isBuilding())\n                        continue;\n                    data.add(((double) r.getDuration()) / (1000 * 60), \"min\",\n                            new ChartLabel(r));\n                }\n\n                final CategoryDataset dataset = data.build();\n\n                final JFreeChart chart = ChartFactory.createStackedAreaChart(null, \r\n                                                                                    \r\n                        null, \r\n                        Messages.Job_minutes(), \r\n                        dataset, \r\n                        PlotOrientation.VERTICAL, \r\n                        false, \r\n                        true, \r\n                        false \r\n                        );\n\n                chart.setBackgroundPaint(Color.white);\n\n                final CategoryPlot plot = chart.getCategoryPlot();\n\n                \r\n                plot.setBackgroundPaint(Color.WHITE);\n                plot.setOutlinePaint(null);\n                plot.setForegroundAlpha(0.8f);\n                \r\n                \r\n                plot.setRangeGridlinesVisible(true);\n                plot.setRangeGridlinePaint(Color.black);\n\n                CategoryAxis domainAxis = new ShiftedCategoryAxis(null);\n                plot.setDomainAxis(domainAxis);\n                domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n                domainAxis.setLowerMargin(0.0);\n                domainAxis.setUpperMargin(0.0);\n                domainAxis.setCategoryMargin(0.0);\n\n                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n                ChartUtil.adjustChebyshev(dataset, rangeAxis);\n                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n                StackedAreaRenderer ar = new StackedAreaRenderer2() {\n                    @Override\n                    public Paint getItemPaint(int row, int column) {\n                        ChartLabel key = (ChartLabel) dataset.getColumnKey(column);\n                        return key.getColor();\n                    }\n\n                    @Override\n                    public String generateURL(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return String.valueOf(label.run.number);\n                    }\n\n                    @Override\n                    public String generateToolTip(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return label.run.getDisplayName() + \" : \"\n                                + label.run.getDurationString();\n                    }\n                };\n                plot.setRenderer(ar);\n\n                \r\n                plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n                return chart;\n            }\n        };\n","date":"2009-09-15 03:40:23","endLine":1171,"groupId":"8822","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getBuildTimeGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/91/4202c878ff9b84e876094a81769098648d4a1b.src","preCode":"    public Graph getBuildTimeGraph() {\n        return new Graph(getLastBuild().getTimestamp(),500,400) {\n            @Override\n            protected JFreeChart createGraph() {\n                class ChartLabel implements Comparable<ChartLabel> {\n                    final Run run;\n\n                    public ChartLabel(Run r) {\n                        this.run = r;\n                    }\n\n                    public int compareTo(ChartLabel that) {\n                        return this.run.number - that.run.number;\n                    }\n\n                    public boolean equals(Object o) {\n                        \r\n                        \r\n                        if (o == null || !ChartLabel.class.isAssignableFrom( o.getClass() ))  {\n                            return false;\n                        }\n                        ChartLabel that = (ChartLabel) o;\n                        return run == that.run;\n                    }\n\n                    public Color getColor() {\n                        \r\n                        \r\n                        Result r = run.getResult();\n                        if (r == Result.FAILURE)\n                            return ColorPalette.RED;\n                        else if (r == Result.UNSTABLE)\n                            return ColorPalette.YELLOW;\n                        else if (r == Result.ABORTED || r == Result.NOT_BUILT)\n                            return ColorPalette.GREY;\n                        else\n                            return ColorPalette.BLUE;\n                    }\n\n                    public int hashCode() {\n                        return run.hashCode();\n                    }\n\n                    public String toString() {\n                        String l = run.getDisplayName();\n                        if (run instanceof Build) {\n                            String s = ((Build) run).getBuiltOnStr();\n                            if (s != null)\n                                l += ' ' + s;\n                        }\n                        return l;\n                    }\n\n                }\n\n                DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<String, ChartLabel>();\n                for (Run r : getBuilds()) {\n                    if (r.isBuilding())\n                        continue;\n                    data.add(((double) r.getDuration()) / (1000 * 60), \"min\",\n                            new ChartLabel(r));\n                }\n\n                final CategoryDataset dataset = data.build();\n\n                final JFreeChart chart = ChartFactory.createStackedAreaChart(null, \r\n                                                                                    \r\n                        null, \r\n                        Messages.Job_minutes(), \r\n                        dataset, \r\n                        PlotOrientation.VERTICAL, \r\n                        false, \r\n                        true, \r\n                        false \r\n                        );\n\n                chart.setBackgroundPaint(Color.white);\n\n                final CategoryPlot plot = chart.getCategoryPlot();\n\n                \r\n                plot.setBackgroundPaint(Color.WHITE);\n                plot.setOutlinePaint(null);\n                plot.setForegroundAlpha(0.8f);\n                \r\n                \r\n                plot.setRangeGridlinesVisible(true);\n                plot.setRangeGridlinePaint(Color.black);\n\n                CategoryAxis domainAxis = new ShiftedCategoryAxis(null);\n                plot.setDomainAxis(domainAxis);\n                domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n                domainAxis.setLowerMargin(0.0);\n                domainAxis.setUpperMargin(0.0);\n                domainAxis.setCategoryMargin(0.0);\n\n                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n                ChartUtil.adjustChebyshev(dataset, rangeAxis);\n                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n                StackedAreaRenderer ar = new StackedAreaRenderer2() {\n                    @Override\n                    public Paint getItemPaint(int row, int column) {\n                        ChartLabel key = (ChartLabel) dataset.getColumnKey(column);\n                        return key.getColor();\n                    }\n\n                    @Override\n                    public String generateURL(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return String.valueOf(label.run.number);\n                    }\n\n                    @Override\n                    public String generateToolTip(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return label.run.getDisplayName() + \" : \"\n                                + label.run.getDurationString();\n                    }\n                };\n                plot.setRenderer(ar);\n\n                \r\n                plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n                return chart;\n            }\n        };\n","realPath":"core/src/main/java/hudson/model/Job.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":1039,"status":"M"},{"authorDate":"2009-01-07 09:02:56","commitOrder":3,"curCode":"    public JFreeChart createChart(CategoryDataset ds) {\n        final JFreeChart chart = ChartFactory.createLineChart(null, \r\n                null, \r\n                null, \r\n                ds, \r\n                PlotOrientation.VERTICAL, \r\n                true, \r\n                true, \r\n                false \r\n                );\n\n        chart.setBackgroundPaint(Color.white);\n\n        final CategoryPlot plot = chart.getCategoryPlot();\n        plot.setBackgroundPaint(Color.WHITE);\n        plot.setOutlinePaint(null);\n        plot.setRangeGridlinesVisible(true);\n        plot.setRangeGridlinePaint(Color.black);\n\n        final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();\n        renderer.setBaseStroke(new BasicStroke(3));\n        configureRenderer(renderer);\n\n        final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null);\n        plot.setDomainAxis(domainAxis);\n        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n        domainAxis.setLowerMargin(0.0);\n        domainAxis.setUpperMargin(0.0);\n        domainAxis.setCategoryMargin(0.0);\n\n        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        \r\n        plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n        return chart;\n    }\n","date":"2009-01-07 09:02:56","endLine":125,"groupId":"7620","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createChart","params":"(CategoryDatasetds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/bc/0cdf0bad7415a574f6c1a1f0c84aa47b6b4bdf.src","preCode":"    public JFreeChart createChart(CategoryDataset ds) {\n        final JFreeChart chart = ChartFactory.createLineChart(null, \r\n                null, \r\n                null, \r\n                ds, \r\n                PlotOrientation.VERTICAL, \r\n                true, \r\n                true, \r\n                false \r\n                );\n\n        chart.setBackgroundPaint(Color.white);\n\n        final CategoryPlot plot = chart.getCategoryPlot();\n        plot.setBackgroundPaint(Color.WHITE);\n        plot.setOutlinePaint(null);\n        plot.setRangeGridlinesVisible(true);\n        plot.setRangeGridlinePaint(Color.black);\n\n        final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();\n        renderer.setBaseStroke(new BasicStroke(3));\n        configureRenderer(renderer);\n\n        final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null);\n        plot.setDomainAxis(domainAxis);\n        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n        domainAxis.setLowerMargin(0.0);\n        domainAxis.setUpperMargin(0.0);\n        domainAxis.setCategoryMargin(0.0);\n\n        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        \r\n        plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n        return chart;\n    }\n","realPath":"core/src/main/java/hudson/model/LoadStatistics.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"82f0feb999bdeb404374a56496682eb3f385e8ec","commitMessage":"@@@Updates to use non-deprecated APIs.  and add some @Override annotations\n\n\ngit-svn-id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/main@21661 71c3de6d-444a-0410-be80-ed276b4c234a\n","date":"2009-09-15 03:40:23","modifiedFileCount":"9","status":"M","submitter":"mindless"},{"authorTime":"2009-01-07 09:02:56","codes":[{"authorDate":"2013-12-10 23:56:48","commitOrder":4,"curCode":"    public Graph getBuildTimeGraph() {\n        return new Graph(getLastBuild().getTimestamp(),500,400) {\n            @Override\n            protected JFreeChart createGraph() {\n                class ChartLabel implements Comparable<ChartLabel> {\n                    final Run run;\n\n                    public ChartLabel(Run r) {\n                        this.run = r;\n                    }\n\n                    public int compareTo(ChartLabel that) {\n                        return this.run.number - that.run.number;\n                    }\n\n                    @Override\n                    public boolean equals(Object o) {\n                        \r\n                        \r\n                        if (o == null || !ChartLabel.class.isAssignableFrom( o.getClass() ))  {\n                            return false;\n                        }\n                        ChartLabel that = (ChartLabel) o;\n                        return run == that.run;\n                    }\n\n                    public Color getColor() {\n                        \r\n                        \r\n                        Result r = run.getResult();\n                        if (r == Result.FAILURE)\n                            return ColorPalette.RED;\n                        else if (r == Result.UNSTABLE)\n                            return ColorPalette.YELLOW;\n                        else if (r == Result.ABORTED || r == Result.NOT_BUILT)\n                            return ColorPalette.GREY;\n                        else\n                            return ColorPalette.BLUE;\n                    }\n\n                    @Override\n                    public int hashCode() {\n                        return run.hashCode();\n                    }\n\n                    @Override\n                    public String toString() {\n                        String l = run.getDisplayName();\n                        if (run instanceof Build) {\n                            String s = ((Build) run).getBuiltOnStr();\n                            if (s != null)\n                                l += ' ' + s;\n                        }\n                        return l;\n                    }\n\n                }\n\n                DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<String, ChartLabel>();\n                for (Run r : getNewBuilds()) {\n                    if (r.isBuilding())\n                        continue;\n                    data.add(((double) r.getDuration()) / (1000 * 60), \"min\",\n                            new ChartLabel(r));\n                }\n\n                final CategoryDataset dataset = data.build();\n\n                final JFreeChart chart = ChartFactory.createStackedAreaChart(null, \r\n                                                                                    \r\n                        null, \r\n                        Messages.Job_minutes(), \r\n                        dataset, \r\n                        PlotOrientation.VERTICAL, \r\n                        false, \r\n                        true, \r\n                        false \r\n                        );\n\n                chart.setBackgroundPaint(Color.white);\n\n                final CategoryPlot plot = chart.getCategoryPlot();\n\n                \r\n                plot.setBackgroundPaint(Color.WHITE);\n                plot.setOutlinePaint(null);\n                plot.setForegroundAlpha(0.8f);\n                \r\n                \r\n                plot.setRangeGridlinesVisible(true);\n                plot.setRangeGridlinePaint(Color.black);\n\n                CategoryAxis domainAxis = new ShiftedCategoryAxis(null);\n                plot.setDomainAxis(domainAxis);\n                domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n                domainAxis.setLowerMargin(0.0);\n                domainAxis.setUpperMargin(0.0);\n                domainAxis.setCategoryMargin(0.0);\n\n                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n                ChartUtil.adjustChebyshev(dataset, rangeAxis);\n                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n                StackedAreaRenderer ar = new StackedAreaRenderer2() {\n                    @Override\n                    public Paint getItemPaint(int row, int column) {\n                        ChartLabel key = (ChartLabel) dataset.getColumnKey(column);\n                        return key.getColor();\n                    }\n\n                    @Override\n                    public String generateURL(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return String.valueOf(label.run.number);\n                    }\n\n                    @Override\n                    public String generateToolTip(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return label.run.getDisplayName() + \" : \"\n                                + label.run.getDurationString();\n                    }\n                };\n                plot.setRenderer(ar);\n\n                \r\n                plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n                return chart;\n            }\n        };\n","date":"2013-12-10 23:56:48","endLine":1345,"groupId":"8822","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getBuildTimeGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/29/a7cd9425672c4daf644cc22c404efb67f6efc6.src","preCode":"    public Graph getBuildTimeGraph() {\n        return new Graph(getLastBuild().getTimestamp(),500,400) {\n            @Override\n            protected JFreeChart createGraph() {\n                class ChartLabel implements Comparable<ChartLabel> {\n                    final Run run;\n\n                    public ChartLabel(Run r) {\n                        this.run = r;\n                    }\n\n                    public int compareTo(ChartLabel that) {\n                        return this.run.number - that.run.number;\n                    }\n\n                    @Override\n                    public boolean equals(Object o) {\n                        \r\n                        \r\n                        if (o == null || !ChartLabel.class.isAssignableFrom( o.getClass() ))  {\n                            return false;\n                        }\n                        ChartLabel that = (ChartLabel) o;\n                        return run == that.run;\n                    }\n\n                    public Color getColor() {\n                        \r\n                        \r\n                        Result r = run.getResult();\n                        if (r == Result.FAILURE)\n                            return ColorPalette.RED;\n                        else if (r == Result.UNSTABLE)\n                            return ColorPalette.YELLOW;\n                        else if (r == Result.ABORTED || r == Result.NOT_BUILT)\n                            return ColorPalette.GREY;\n                        else\n                            return ColorPalette.BLUE;\n                    }\n\n                    @Override\n                    public int hashCode() {\n                        return run.hashCode();\n                    }\n\n                    @Override\n                    public String toString() {\n                        String l = run.getDisplayName();\n                        if (run instanceof Build) {\n                            String s = ((Build) run).getBuiltOnStr();\n                            if (s != null)\n                                l += ' ' + s;\n                        }\n                        return l;\n                    }\n\n                }\n\n                DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<String, ChartLabel>();\n                for (Run r : getBuilds()) {\n                    if (r.isBuilding())\n                        continue;\n                    data.add(((double) r.getDuration()) / (1000 * 60), \"min\",\n                            new ChartLabel(r));\n                }\n\n                final CategoryDataset dataset = data.build();\n\n                final JFreeChart chart = ChartFactory.createStackedAreaChart(null, \r\n                                                                                    \r\n                        null, \r\n                        Messages.Job_minutes(), \r\n                        dataset, \r\n                        PlotOrientation.VERTICAL, \r\n                        false, \r\n                        true, \r\n                        false \r\n                        );\n\n                chart.setBackgroundPaint(Color.white);\n\n                final CategoryPlot plot = chart.getCategoryPlot();\n\n                \r\n                plot.setBackgroundPaint(Color.WHITE);\n                plot.setOutlinePaint(null);\n                plot.setForegroundAlpha(0.8f);\n                \r\n                \r\n                plot.setRangeGridlinesVisible(true);\n                plot.setRangeGridlinePaint(Color.black);\n\n                CategoryAxis domainAxis = new ShiftedCategoryAxis(null);\n                plot.setDomainAxis(domainAxis);\n                domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n                domainAxis.setLowerMargin(0.0);\n                domainAxis.setUpperMargin(0.0);\n                domainAxis.setCategoryMargin(0.0);\n\n                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n                ChartUtil.adjustChebyshev(dataset, rangeAxis);\n                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n                StackedAreaRenderer ar = new StackedAreaRenderer2() {\n                    @Override\n                    public Paint getItemPaint(int row, int column) {\n                        ChartLabel key = (ChartLabel) dataset.getColumnKey(column);\n                        return key.getColor();\n                    }\n\n                    @Override\n                    public String generateURL(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return String.valueOf(label.run.number);\n                    }\n\n                    @Override\n                    public String generateToolTip(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return label.run.getDisplayName() + \" : \"\n                                + label.run.getDurationString();\n                    }\n                };\n                plot.setRenderer(ar);\n\n                \r\n                plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n                return chart;\n            }\n        };\n","realPath":"core/src/main/java/hudson/model/Job.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":1213,"status":"M"},{"authorDate":"2009-01-07 09:02:56","commitOrder":4,"curCode":"    public JFreeChart createChart(CategoryDataset ds) {\n        final JFreeChart chart = ChartFactory.createLineChart(null, \r\n                null, \r\n                null, \r\n                ds, \r\n                PlotOrientation.VERTICAL, \r\n                true, \r\n                true, \r\n                false \r\n                );\n\n        chart.setBackgroundPaint(Color.white);\n\n        final CategoryPlot plot = chart.getCategoryPlot();\n        plot.setBackgroundPaint(Color.WHITE);\n        plot.setOutlinePaint(null);\n        plot.setRangeGridlinesVisible(true);\n        plot.setRangeGridlinePaint(Color.black);\n\n        final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();\n        renderer.setBaseStroke(new BasicStroke(3));\n        configureRenderer(renderer);\n\n        final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null);\n        plot.setDomainAxis(domainAxis);\n        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n        domainAxis.setLowerMargin(0.0);\n        domainAxis.setUpperMargin(0.0);\n        domainAxis.setCategoryMargin(0.0);\n\n        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        \r\n        plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n        return chart;\n    }\n","date":"2009-01-07 09:02:56","endLine":125,"groupId":"7620","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createChart","params":"(CategoryDatasetds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/bc/0cdf0bad7415a574f6c1a1f0c84aa47b6b4bdf.src","preCode":"    public JFreeChart createChart(CategoryDataset ds) {\n        final JFreeChart chart = ChartFactory.createLineChart(null, \r\n                null, \r\n                null, \r\n                ds, \r\n                PlotOrientation.VERTICAL, \r\n                true, \r\n                true, \r\n                false \r\n                );\n\n        chart.setBackgroundPaint(Color.white);\n\n        final CategoryPlot plot = chart.getCategoryPlot();\n        plot.setBackgroundPaint(Color.WHITE);\n        plot.setOutlinePaint(null);\n        plot.setRangeGridlinesVisible(true);\n        plot.setRangeGridlinePaint(Color.black);\n\n        final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();\n        renderer.setBaseStroke(new BasicStroke(3));\n        configureRenderer(renderer);\n\n        final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null);\n        plot.setDomainAxis(domainAxis);\n        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n        domainAxis.setLowerMargin(0.0);\n        domainAxis.setUpperMargin(0.0);\n        domainAxis.setCategoryMargin(0.0);\n\n        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        \r\n        plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n        return chart;\n    }\n","realPath":"core/src/main/java/hudson/model/LoadStatistics.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"67b163321b6bd9b072b281348864867f90a0ba10","commitMessage":"@@@[FIXED JENKINS-20892] /{view. computer. user}/*/builds & /job/*/buildTimeTrend block HTTP response on build record loading.\nMerge branch 'lazy-build-lists-JENKINS-20892'\n","date":"2013-12-10 23:56:48","modifiedFileCount":"5","status":"M","submitter":"Jesse Glick"},{"authorTime":"2009-01-07 09:02:56","codes":[{"authorDate":"2014-01-09 05:20:36","commitOrder":5,"curCode":"    public Graph getBuildTimeGraph() {\n        return new Graph(getLastBuildTime(),500,400) {\n            @Override\n            protected JFreeChart createGraph() {\n                class ChartLabel implements Comparable<ChartLabel> {\n                    final Run run;\n\n                    public ChartLabel(Run r) {\n                        this.run = r;\n                    }\n\n                    public int compareTo(ChartLabel that) {\n                        return this.run.number - that.run.number;\n                    }\n\n                    @Override\n                    public boolean equals(Object o) {\n                        \r\n                        \r\n                        if (o == null || !ChartLabel.class.isAssignableFrom( o.getClass() ))  {\n                            return false;\n                        }\n                        ChartLabel that = (ChartLabel) o;\n                        return run == that.run;\n                    }\n\n                    public Color getColor() {\n                        \r\n                        \r\n                        Result r = run.getResult();\n                        if (r == Result.FAILURE)\n                            return ColorPalette.RED;\n                        else if (r == Result.UNSTABLE)\n                            return ColorPalette.YELLOW;\n                        else if (r == Result.ABORTED || r == Result.NOT_BUILT)\n                            return ColorPalette.GREY;\n                        else\n                            return ColorPalette.BLUE;\n                    }\n\n                    @Override\n                    public int hashCode() {\n                        return run.hashCode();\n                    }\n\n                    @Override\n                    public String toString() {\n                        String l = run.getDisplayName();\n                        if (run instanceof Build) {\n                            String s = ((Build) run).getBuiltOnStr();\n                            if (s != null)\n                                l += ' ' + s;\n                        }\n                        return l;\n                    }\n\n                }\n\n                DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<String, ChartLabel>();\n                for (Run r : getNewBuilds()) {\n                    if (r.isBuilding())\n                        continue;\n                    data.add(((double) r.getDuration()) / (1000 * 60), \"min\",\n                            new ChartLabel(r));\n                }\n\n                final CategoryDataset dataset = data.build();\n\n                final JFreeChart chart = ChartFactory.createStackedAreaChart(null, \r\n                                                                                    \r\n                        null, \r\n                        Messages.Job_minutes(), \r\n                        dataset, \r\n                        PlotOrientation.VERTICAL, \r\n                        false, \r\n                        true, \r\n                        false \r\n                        );\n\n                chart.setBackgroundPaint(Color.white);\n\n                final CategoryPlot plot = chart.getCategoryPlot();\n\n                \r\n                plot.setBackgroundPaint(Color.WHITE);\n                plot.setOutlinePaint(null);\n                plot.setForegroundAlpha(0.8f);\n                \r\n                \r\n                plot.setRangeGridlinesVisible(true);\n                plot.setRangeGridlinePaint(Color.black);\n\n                CategoryAxis domainAxis = new ShiftedCategoryAxis(null);\n                plot.setDomainAxis(domainAxis);\n                domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n                domainAxis.setLowerMargin(0.0);\n                domainAxis.setUpperMargin(0.0);\n                domainAxis.setCategoryMargin(0.0);\n\n                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n                ChartUtil.adjustChebyshev(dataset, rangeAxis);\n                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n                StackedAreaRenderer ar = new StackedAreaRenderer2() {\n                    @Override\n                    public Paint getItemPaint(int row, int column) {\n                        ChartLabel key = (ChartLabel) dataset.getColumnKey(column);\n                        return key.getColor();\n                    }\n\n                    @Override\n                    public String generateURL(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return String.valueOf(label.run.number);\n                    }\n\n                    @Override\n                    public String generateToolTip(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return label.run.getDisplayName() + \" : \"\n                                + label.run.getDurationString();\n                    }\n                };\n                plot.setRenderer(ar);\n\n                \r\n                plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n                return chart;\n            }\n        };\n","date":"2014-01-09 05:20:36","endLine":1350,"groupId":"8822","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getBuildTimeGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/2e/3ed8a7a88f05c3bfa35bc8b583ce334820e580.src","preCode":"    public Graph getBuildTimeGraph() {\n        return new Graph(getLastBuild().getTimestamp(),500,400) {\n            @Override\n            protected JFreeChart createGraph() {\n                class ChartLabel implements Comparable<ChartLabel> {\n                    final Run run;\n\n                    public ChartLabel(Run r) {\n                        this.run = r;\n                    }\n\n                    public int compareTo(ChartLabel that) {\n                        return this.run.number - that.run.number;\n                    }\n\n                    @Override\n                    public boolean equals(Object o) {\n                        \r\n                        \r\n                        if (o == null || !ChartLabel.class.isAssignableFrom( o.getClass() ))  {\n                            return false;\n                        }\n                        ChartLabel that = (ChartLabel) o;\n                        return run == that.run;\n                    }\n\n                    public Color getColor() {\n                        \r\n                        \r\n                        Result r = run.getResult();\n                        if (r == Result.FAILURE)\n                            return ColorPalette.RED;\n                        else if (r == Result.UNSTABLE)\n                            return ColorPalette.YELLOW;\n                        else if (r == Result.ABORTED || r == Result.NOT_BUILT)\n                            return ColorPalette.GREY;\n                        else\n                            return ColorPalette.BLUE;\n                    }\n\n                    @Override\n                    public int hashCode() {\n                        return run.hashCode();\n                    }\n\n                    @Override\n                    public String toString() {\n                        String l = run.getDisplayName();\n                        if (run instanceof Build) {\n                            String s = ((Build) run).getBuiltOnStr();\n                            if (s != null)\n                                l += ' ' + s;\n                        }\n                        return l;\n                    }\n\n                }\n\n                DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<String, ChartLabel>();\n                for (Run r : getNewBuilds()) {\n                    if (r.isBuilding())\n                        continue;\n                    data.add(((double) r.getDuration()) / (1000 * 60), \"min\",\n                            new ChartLabel(r));\n                }\n\n                final CategoryDataset dataset = data.build();\n\n                final JFreeChart chart = ChartFactory.createStackedAreaChart(null, \r\n                                                                                    \r\n                        null, \r\n                        Messages.Job_minutes(), \r\n                        dataset, \r\n                        PlotOrientation.VERTICAL, \r\n                        false, \r\n                        true, \r\n                        false \r\n                        );\n\n                chart.setBackgroundPaint(Color.white);\n\n                final CategoryPlot plot = chart.getCategoryPlot();\n\n                \r\n                plot.setBackgroundPaint(Color.WHITE);\n                plot.setOutlinePaint(null);\n                plot.setForegroundAlpha(0.8f);\n                \r\n                \r\n                plot.setRangeGridlinesVisible(true);\n                plot.setRangeGridlinePaint(Color.black);\n\n                CategoryAxis domainAxis = new ShiftedCategoryAxis(null);\n                plot.setDomainAxis(domainAxis);\n                domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n                domainAxis.setLowerMargin(0.0);\n                domainAxis.setUpperMargin(0.0);\n                domainAxis.setCategoryMargin(0.0);\n\n                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n                ChartUtil.adjustChebyshev(dataset, rangeAxis);\n                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n                StackedAreaRenderer ar = new StackedAreaRenderer2() {\n                    @Override\n                    public Paint getItemPaint(int row, int column) {\n                        ChartLabel key = (ChartLabel) dataset.getColumnKey(column);\n                        return key.getColor();\n                    }\n\n                    @Override\n                    public String generateURL(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return String.valueOf(label.run.number);\n                    }\n\n                    @Override\n                    public String generateToolTip(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return label.run.getDisplayName() + \" : \"\n                                + label.run.getDurationString();\n                    }\n                };\n                plot.setRenderer(ar);\n\n                \r\n                plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n                return chart;\n            }\n        };\n","realPath":"core/src/main/java/hudson/model/Job.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":1218,"status":"M"},{"authorDate":"2009-01-07 09:02:56","commitOrder":5,"curCode":"    public JFreeChart createChart(CategoryDataset ds) {\n        final JFreeChart chart = ChartFactory.createLineChart(null, \r\n                null, \r\n                null, \r\n                ds, \r\n                PlotOrientation.VERTICAL, \r\n                true, \r\n                true, \r\n                false \r\n                );\n\n        chart.setBackgroundPaint(Color.white);\n\n        final CategoryPlot plot = chart.getCategoryPlot();\n        plot.setBackgroundPaint(Color.WHITE);\n        plot.setOutlinePaint(null);\n        plot.setRangeGridlinesVisible(true);\n        plot.setRangeGridlinePaint(Color.black);\n\n        final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();\n        renderer.setBaseStroke(new BasicStroke(3));\n        configureRenderer(renderer);\n\n        final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null);\n        plot.setDomainAxis(domainAxis);\n        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n        domainAxis.setLowerMargin(0.0);\n        domainAxis.setUpperMargin(0.0);\n        domainAxis.setCategoryMargin(0.0);\n\n        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        \r\n        plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n        return chart;\n    }\n","date":"2009-01-07 09:02:56","endLine":125,"groupId":"7620","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createChart","params":"(CategoryDatasetds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/bc/0cdf0bad7415a574f6c1a1f0c84aa47b6b4bdf.src","preCode":"    public JFreeChart createChart(CategoryDataset ds) {\n        final JFreeChart chart = ChartFactory.createLineChart(null, \r\n                null, \r\n                null, \r\n                ds, \r\n                PlotOrientation.VERTICAL, \r\n                true, \r\n                true, \r\n                false \r\n                );\n\n        chart.setBackgroundPaint(Color.white);\n\n        final CategoryPlot plot = chart.getCategoryPlot();\n        plot.setBackgroundPaint(Color.WHITE);\n        plot.setOutlinePaint(null);\n        plot.setRangeGridlinesVisible(true);\n        plot.setRangeGridlinePaint(Color.black);\n\n        final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();\n        renderer.setBaseStroke(new BasicStroke(3));\n        configureRenderer(renderer);\n\n        final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null);\n        plot.setDomainAxis(domainAxis);\n        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n        domainAxis.setLowerMargin(0.0);\n        domainAxis.setUpperMargin(0.0);\n        domainAxis.setCategoryMargin(0.0);\n\n        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        \r\n        plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n        return chart;\n    }\n","realPath":"core/src/main/java/hudson/model/LoadStatistics.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"0b5927dc0d9dd937641c660e89c857703457da6a","commitMessage":"@@@Merge branch 'master' into folder-moving\n","date":"2014-01-09 05:20:36","modifiedFileCount":"7","status":"M","submitter":"Jesse Glick"},{"authorTime":"2009-01-07 09:02:56","codes":[{"authorDate":"2016-07-14 23:08:40","commitOrder":6,"curCode":"    public Graph getBuildTimeGraph() {\n        return new Graph(getLastBuildTime(),500,400) {\n            @Override\n            protected JFreeChart createGraph() {\n                class ChartLabel implements Comparable<ChartLabel> {\n                    final Run run;\n\n                    public ChartLabel(Run r) {\n                        this.run = r;\n                    }\n\n                    public int compareTo(ChartLabel that) {\n                        return this.run.number - that.run.number;\n                    }\n\n                    @Override\n                    public boolean equals(Object o) {\n                        \r\n                        \r\n                        if (o == null || !ChartLabel.class.isAssignableFrom( o.getClass() ))  {\n                            return false;\n                        }\n                        ChartLabel that = (ChartLabel) o;\n                        return run == that.run;\n                    }\n\n                    public java.awt.Color getColor() {\n                        \r\n                        \r\n                        Result r = run.getResult();\n                        if (r == Result.FAILURE)\n                            return ColorPalette.RED;\n                        else if (r == Result.UNSTABLE)\n                            return ColorPalette.YELLOW;\n                        else if (r == Result.ABORTED || r == Result.NOT_BUILT)\n                            return ColorPalette.GREY;\n                        else\n                            return ColorPalette.BLUE;\n                    }\n\n                    @Override\n                    public int hashCode() {\n                        return run.hashCode();\n                    }\n\n                    @Override\n                    public String toString() {\n                        String l = run.getDisplayName();\n                        if (run instanceof Build) {\n                            String s = ((Build) run).getBuiltOnStr();\n                            if (s != null)\n                                l += ' ' + s;\n                        }\n                        return l;\n                    }\n\n                }\n\n                DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<String, ChartLabel>();\n                for (Run r : getNewBuilds()) {\n                    if (r.isBuilding())\n                        continue;\n                    data.add(((double) r.getDuration()) / (1000 * 60), \"min\",\n                            new ChartLabel(r));\n                }\n\n                final CategoryDataset dataset = data.build();\n\n                final JFreeChart chart = ChartFactory.createStackedAreaChart(null, \r\n                                                                                    \r\n                        null, \r\n                        Messages.Job_minutes(), \r\n                        dataset, \r\n                        PlotOrientation.VERTICAL, \r\n                        false, \r\n                        true, \r\n                        false \r\n                        );\n\n                chart.setBackgroundPaint(Color.white);\n\n                final CategoryPlot plot = chart.getCategoryPlot();\n\n                \r\n                plot.setBackgroundPaint(Color.WHITE);\n                plot.setOutlinePaint(null);\n                plot.setForegroundAlpha(0.8f);\n                \r\n                \r\n                plot.setRangeGridlinesVisible(true);\n                plot.setRangeGridlinePaint(Color.black);\n\n                CategoryAxis domainAxis = new ShiftedCategoryAxis(null);\n                plot.setDomainAxis(domainAxis);\n                domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n                domainAxis.setLowerMargin(0.0);\n                domainAxis.setUpperMargin(0.0);\n                domainAxis.setCategoryMargin(0.0);\n\n                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n                ChartUtil.adjustChebyshev(dataset, rangeAxis);\n                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n                StackedAreaRenderer ar = new StackedAreaRenderer2() {\n                    @Override\n                    public Paint getItemPaint(int row, int column) {\n                        ChartLabel key = (ChartLabel) dataset.getColumnKey(column);\n                        return key.getColor();\n                    }\n\n                    @Override\n                    public String generateURL(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return String.valueOf(label.run.number);\n                    }\n\n                    @Override\n                    public String generateToolTip(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return label.run.getDisplayName() + \" : \"\n                                + label.run.getDurationString();\n                    }\n                };\n                plot.setRenderer(ar);\n\n                \r\n                plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n                return chart;\n            }\n        };\n","date":"2016-07-14 23:08:40","endLine":1464,"groupId":"8822","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getBuildTimeGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/26/f2ddfa7ce49b3f0a968a9a1d756a7452ada1a1.src","preCode":"    public Graph getBuildTimeGraph() {\n        return new Graph(getLastBuildTime(),500,400) {\n            @Override\n            protected JFreeChart createGraph() {\n                class ChartLabel implements Comparable<ChartLabel> {\n                    final Run run;\n\n                    public ChartLabel(Run r) {\n                        this.run = r;\n                    }\n\n                    public int compareTo(ChartLabel that) {\n                        return this.run.number - that.run.number;\n                    }\n\n                    @Override\n                    public boolean equals(Object o) {\n                        \r\n                        \r\n                        if (o == null || !ChartLabel.class.isAssignableFrom( o.getClass() ))  {\n                            return false;\n                        }\n                        ChartLabel that = (ChartLabel) o;\n                        return run == that.run;\n                    }\n\n                    public Color getColor() {\n                        \r\n                        \r\n                        Result r = run.getResult();\n                        if (r == Result.FAILURE)\n                            return ColorPalette.RED;\n                        else if (r == Result.UNSTABLE)\n                            return ColorPalette.YELLOW;\n                        else if (r == Result.ABORTED || r == Result.NOT_BUILT)\n                            return ColorPalette.GREY;\n                        else\n                            return ColorPalette.BLUE;\n                    }\n\n                    @Override\n                    public int hashCode() {\n                        return run.hashCode();\n                    }\n\n                    @Override\n                    public String toString() {\n                        String l = run.getDisplayName();\n                        if (run instanceof Build) {\n                            String s = ((Build) run).getBuiltOnStr();\n                            if (s != null)\n                                l += ' ' + s;\n                        }\n                        return l;\n                    }\n\n                }\n\n                DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<String, ChartLabel>();\n                for (Run r : getNewBuilds()) {\n                    if (r.isBuilding())\n                        continue;\n                    data.add(((double) r.getDuration()) / (1000 * 60), \"min\",\n                            new ChartLabel(r));\n                }\n\n                final CategoryDataset dataset = data.build();\n\n                final JFreeChart chart = ChartFactory.createStackedAreaChart(null, \r\n                                                                                    \r\n                        null, \r\n                        Messages.Job_minutes(), \r\n                        dataset, \r\n                        PlotOrientation.VERTICAL, \r\n                        false, \r\n                        true, \r\n                        false \r\n                        );\n\n                chart.setBackgroundPaint(Color.white);\n\n                final CategoryPlot plot = chart.getCategoryPlot();\n\n                \r\n                plot.setBackgroundPaint(Color.WHITE);\n                plot.setOutlinePaint(null);\n                plot.setForegroundAlpha(0.8f);\n                \r\n                \r\n                plot.setRangeGridlinesVisible(true);\n                plot.setRangeGridlinePaint(Color.black);\n\n                CategoryAxis domainAxis = new ShiftedCategoryAxis(null);\n                plot.setDomainAxis(domainAxis);\n                domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n                domainAxis.setLowerMargin(0.0);\n                domainAxis.setUpperMargin(0.0);\n                domainAxis.setCategoryMargin(0.0);\n\n                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n                ChartUtil.adjustChebyshev(dataset, rangeAxis);\n                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n                StackedAreaRenderer ar = new StackedAreaRenderer2() {\n                    @Override\n                    public Paint getItemPaint(int row, int column) {\n                        ChartLabel key = (ChartLabel) dataset.getColumnKey(column);\n                        return key.getColor();\n                    }\n\n                    @Override\n                    public String generateURL(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return String.valueOf(label.run.number);\n                    }\n\n                    @Override\n                    public String generateToolTip(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return label.run.getDisplayName() + \" : \"\n                                + label.run.getDurationString();\n                    }\n                };\n                plot.setRenderer(ar);\n\n                \r\n                plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n                return chart;\n            }\n        };\n","realPath":"core/src/main/java/hudson/model/Job.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":1332,"status":"M"},{"authorDate":"2009-01-07 09:02:56","commitOrder":6,"curCode":"    public JFreeChart createChart(CategoryDataset ds) {\n        final JFreeChart chart = ChartFactory.createLineChart(null, \r\n                null, \r\n                null, \r\n                ds, \r\n                PlotOrientation.VERTICAL, \r\n                true, \r\n                true, \r\n                false \r\n                );\n\n        chart.setBackgroundPaint(Color.white);\n\n        final CategoryPlot plot = chart.getCategoryPlot();\n        plot.setBackgroundPaint(Color.WHITE);\n        plot.setOutlinePaint(null);\n        plot.setRangeGridlinesVisible(true);\n        plot.setRangeGridlinePaint(Color.black);\n\n        final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();\n        renderer.setBaseStroke(new BasicStroke(3));\n        configureRenderer(renderer);\n\n        final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null);\n        plot.setDomainAxis(domainAxis);\n        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n        domainAxis.setLowerMargin(0.0);\n        domainAxis.setUpperMargin(0.0);\n        domainAxis.setCategoryMargin(0.0);\n\n        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        \r\n        plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n        return chart;\n    }\n","date":"2009-01-07 09:02:56","endLine":125,"groupId":"7620","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createChart","params":"(CategoryDatasetds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/bc/0cdf0bad7415a574f6c1a1f0c84aa47b6b4bdf.src","preCode":"    public JFreeChart createChart(CategoryDataset ds) {\n        final JFreeChart chart = ChartFactory.createLineChart(null, \r\n                null, \r\n                null, \r\n                ds, \r\n                PlotOrientation.VERTICAL, \r\n                true, \r\n                true, \r\n                false \r\n                );\n\n        chart.setBackgroundPaint(Color.white);\n\n        final CategoryPlot plot = chart.getCategoryPlot();\n        plot.setBackgroundPaint(Color.WHITE);\n        plot.setOutlinePaint(null);\n        plot.setRangeGridlinesVisible(true);\n        plot.setRangeGridlinePaint(Color.black);\n\n        final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();\n        renderer.setBaseStroke(new BasicStroke(3));\n        configureRenderer(renderer);\n\n        final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null);\n        plot.setDomainAxis(domainAxis);\n        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n        domainAxis.setLowerMargin(0.0);\n        domainAxis.setUpperMargin(0.0);\n        domainAxis.setCategoryMargin(0.0);\n\n        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        \r\n        plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n        return chart;\n    }\n","realPath":"core/src/main/java/hudson/model/LoadStatistics.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"2e533ef7a0f598de99736025abb6d789f8cb735e","commitMessage":"@@@Merge pull request #2451 from stephenc/optimize-recent-build-stability\n\n[JENKINS-36629] Optimization for recent build stability calculation","date":"2016-07-14 23:08:40","modifiedFileCount":"3","status":"M","submitter":"Stephen Connolly"},{"authorTime":"2009-01-07 09:02:56","codes":[{"authorDate":"2016-07-14 23:12:08","commitOrder":7,"curCode":"    public Graph getBuildTimeGraph() {\n        return new Graph(getLastBuildTime(),500,400) {\n            @Override\n            protected JFreeChart createGraph() {\n                class ChartLabel implements Comparable<ChartLabel> {\n                    final Run run;\n\n                    public ChartLabel(Run r) {\n                        this.run = r;\n                    }\n\n                    public int compareTo(ChartLabel that) {\n                        return this.run.number - that.run.number;\n                    }\n\n                    @Override\n                    public boolean equals(Object o) {\n                        \r\n                        \r\n                        if (o == null || !ChartLabel.class.isAssignableFrom( o.getClass() ))  {\n                            return false;\n                        }\n                        ChartLabel that = (ChartLabel) o;\n                        return run == that.run;\n                    }\n\n                    public Color getColor() {\n                        \r\n                        \r\n                        Result r = run.getResult();\n                        if (r == Result.FAILURE)\n                            return ColorPalette.RED;\n                        else if (r == Result.UNSTABLE)\n                            return ColorPalette.YELLOW;\n                        else if (r == Result.ABORTED || r == Result.NOT_BUILT)\n                            return ColorPalette.GREY;\n                        else\n                            return ColorPalette.BLUE;\n                    }\n\n                    @Override\n                    public int hashCode() {\n                        return run.hashCode();\n                    }\n\n                    @Override\n                    public String toString() {\n                        String l = run.getDisplayName();\n                        if (run instanceof Build) {\n                            String s = ((Build) run).getBuiltOnStr();\n                            if (s != null)\n                                l += ' ' + s;\n                        }\n                        return l;\n                    }\n\n                }\n\n                DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<String, ChartLabel>();\n                for (Run r : getNewBuilds()) {\n                    if (r.isBuilding())\n                        continue;\n                    data.add(((double) r.getDuration()) / (1000 * 60), \"min\",\n                            new ChartLabel(r));\n                }\n\n                final CategoryDataset dataset = data.build();\n\n                final JFreeChart chart = ChartFactory.createStackedAreaChart(null, \r\n                                                                                    \r\n                        null, \r\n                        Messages.Job_minutes(), \r\n                        dataset, \r\n                        PlotOrientation.VERTICAL, \r\n                        false, \r\n                        true, \r\n                        false \r\n                        );\n\n                chart.setBackgroundPaint(Color.white);\n\n                final CategoryPlot plot = chart.getCategoryPlot();\n\n                \r\n                plot.setBackgroundPaint(Color.WHITE);\n                plot.setOutlinePaint(null);\n                plot.setForegroundAlpha(0.8f);\n                \r\n                \r\n                plot.setRangeGridlinesVisible(true);\n                plot.setRangeGridlinePaint(Color.black);\n\n                CategoryAxis domainAxis = new ShiftedCategoryAxis(null);\n                plot.setDomainAxis(domainAxis);\n                domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n                domainAxis.setLowerMargin(0.0);\n                domainAxis.setUpperMargin(0.0);\n                domainAxis.setCategoryMargin(0.0);\n\n                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n                ChartUtil.adjustChebyshev(dataset, rangeAxis);\n                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n                StackedAreaRenderer ar = new StackedAreaRenderer2() {\n                    @Override\n                    public Paint getItemPaint(int row, int column) {\n                        ChartLabel key = (ChartLabel) dataset.getColumnKey(column);\n                        return key.getColor();\n                    }\n\n                    @Override\n                    public String generateURL(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return String.valueOf(label.run.number);\n                    }\n\n                    @Override\n                    public String generateToolTip(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return label.run.getDisplayName() + \" : \"\n                                + label.run.getDurationString();\n                    }\n                };\n                plot.setRenderer(ar);\n\n                \r\n                plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n                return chart;\n            }\n        };\n","date":"2016-07-14 23:12:08","endLine":1464,"groupId":"8822","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getBuildTimeGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/7d/a6ae235726e1537405caef1440eab8dda34110.src","preCode":"    public Graph getBuildTimeGraph() {\n        return new Graph(getLastBuildTime(),500,400) {\n            @Override\n            protected JFreeChart createGraph() {\n                class ChartLabel implements Comparable<ChartLabel> {\n                    final Run run;\n\n                    public ChartLabel(Run r) {\n                        this.run = r;\n                    }\n\n                    public int compareTo(ChartLabel that) {\n                        return this.run.number - that.run.number;\n                    }\n\n                    @Override\n                    public boolean equals(Object o) {\n                        \r\n                        \r\n                        if (o == null || !ChartLabel.class.isAssignableFrom( o.getClass() ))  {\n                            return false;\n                        }\n                        ChartLabel that = (ChartLabel) o;\n                        return run == that.run;\n                    }\n\n                    public java.awt.Color getColor() {\n                        \r\n                        \r\n                        Result r = run.getResult();\n                        if (r == Result.FAILURE)\n                            return ColorPalette.RED;\n                        else if (r == Result.UNSTABLE)\n                            return ColorPalette.YELLOW;\n                        else if (r == Result.ABORTED || r == Result.NOT_BUILT)\n                            return ColorPalette.GREY;\n                        else\n                            return ColorPalette.BLUE;\n                    }\n\n                    @Override\n                    public int hashCode() {\n                        return run.hashCode();\n                    }\n\n                    @Override\n                    public String toString() {\n                        String l = run.getDisplayName();\n                        if (run instanceof Build) {\n                            String s = ((Build) run).getBuiltOnStr();\n                            if (s != null)\n                                l += ' ' + s;\n                        }\n                        return l;\n                    }\n\n                }\n\n                DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<String, ChartLabel>();\n                for (Run r : getNewBuilds()) {\n                    if (r.isBuilding())\n                        continue;\n                    data.add(((double) r.getDuration()) / (1000 * 60), \"min\",\n                            new ChartLabel(r));\n                }\n\n                final CategoryDataset dataset = data.build();\n\n                final JFreeChart chart = ChartFactory.createStackedAreaChart(null, \r\n                                                                                    \r\n                        null, \r\n                        Messages.Job_minutes(), \r\n                        dataset, \r\n                        PlotOrientation.VERTICAL, \r\n                        false, \r\n                        true, \r\n                        false \r\n                        );\n\n                chart.setBackgroundPaint(Color.white);\n\n                final CategoryPlot plot = chart.getCategoryPlot();\n\n                \r\n                plot.setBackgroundPaint(Color.WHITE);\n                plot.setOutlinePaint(null);\n                plot.setForegroundAlpha(0.8f);\n                \r\n                \r\n                plot.setRangeGridlinesVisible(true);\n                plot.setRangeGridlinePaint(Color.black);\n\n                CategoryAxis domainAxis = new ShiftedCategoryAxis(null);\n                plot.setDomainAxis(domainAxis);\n                domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n                domainAxis.setLowerMargin(0.0);\n                domainAxis.setUpperMargin(0.0);\n                domainAxis.setCategoryMargin(0.0);\n\n                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n                ChartUtil.adjustChebyshev(dataset, rangeAxis);\n                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n                StackedAreaRenderer ar = new StackedAreaRenderer2() {\n                    @Override\n                    public Paint getItemPaint(int row, int column) {\n                        ChartLabel key = (ChartLabel) dataset.getColumnKey(column);\n                        return key.getColor();\n                    }\n\n                    @Override\n                    public String generateURL(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return String.valueOf(label.run.number);\n                    }\n\n                    @Override\n                    public String generateToolTip(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return label.run.getDisplayName() + \" : \"\n                                + label.run.getDurationString();\n                    }\n                };\n                plot.setRenderer(ar);\n\n                \r\n                plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n                return chart;\n            }\n        };\n","realPath":"core/src/main/java/hudson/model/Job.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":1332,"status":"M"},{"authorDate":"2009-01-07 09:02:56","commitOrder":7,"curCode":"    public JFreeChart createChart(CategoryDataset ds) {\n        final JFreeChart chart = ChartFactory.createLineChart(null, \r\n                null, \r\n                null, \r\n                ds, \r\n                PlotOrientation.VERTICAL, \r\n                true, \r\n                true, \r\n                false \r\n                );\n\n        chart.setBackgroundPaint(Color.white);\n\n        final CategoryPlot plot = chart.getCategoryPlot();\n        plot.setBackgroundPaint(Color.WHITE);\n        plot.setOutlinePaint(null);\n        plot.setRangeGridlinesVisible(true);\n        plot.setRangeGridlinePaint(Color.black);\n\n        final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();\n        renderer.setBaseStroke(new BasicStroke(3));\n        configureRenderer(renderer);\n\n        final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null);\n        plot.setDomainAxis(domainAxis);\n        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n        domainAxis.setLowerMargin(0.0);\n        domainAxis.setUpperMargin(0.0);\n        domainAxis.setCategoryMargin(0.0);\n\n        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        \r\n        plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n        return chart;\n    }\n","date":"2009-01-07 09:02:56","endLine":125,"groupId":"7620","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createChart","params":"(CategoryDatasetds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/bc/0cdf0bad7415a574f6c1a1f0c84aa47b6b4bdf.src","preCode":"    public JFreeChart createChart(CategoryDataset ds) {\n        final JFreeChart chart = ChartFactory.createLineChart(null, \r\n                null, \r\n                null, \r\n                ds, \r\n                PlotOrientation.VERTICAL, \r\n                true, \r\n                true, \r\n                false \r\n                );\n\n        chart.setBackgroundPaint(Color.white);\n\n        final CategoryPlot plot = chart.getCategoryPlot();\n        plot.setBackgroundPaint(Color.WHITE);\n        plot.setOutlinePaint(null);\n        plot.setRangeGridlinesVisible(true);\n        plot.setRangeGridlinePaint(Color.black);\n\n        final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();\n        renderer.setBaseStroke(new BasicStroke(3));\n        configureRenderer(renderer);\n\n        final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null);\n        plot.setDomainAxis(domainAxis);\n        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n        domainAxis.setLowerMargin(0.0);\n        domainAxis.setUpperMargin(0.0);\n        domainAxis.setCategoryMargin(0.0);\n\n        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        \r\n        plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n        return chart;\n    }\n","realPath":"core/src/main/java/hudson/model/LoadStatistics.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"4fb6e32d80f6a3378824ada1743a194120f1648a","commitMessage":"@@@Noting JENKINS-36629\n","date":"2016-07-14 23:12:08","modifiedFileCount":"2","status":"M","submitter":"Stephen Connolly"},{"authorTime":"2009-01-07 09:02:56","codes":[{"authorDate":"2019-04-08 23:18:26","commitOrder":8,"curCode":"    public Graph getBuildTimeGraph() {\n        return new Graph(getLastBuildTime(),500,400) {\n            @Override\n            protected JFreeChart createGraph() {\n                class ChartLabel implements Comparable<ChartLabel> {\n                    final Run run;\n\n                    public ChartLabel(Run r) {\n                        this.run = r;\n                    }\n\n                    public int compareTo(ChartLabel that) {\n                        return this.run.number - that.run.number;\n                    }\n\n                    @Override\n                    public boolean equals(Object o) {\n                        \r\n                        \r\n                        if (o == null || !ChartLabel.class.isAssignableFrom( o.getClass() ))  {\n                            return false;\n                        }\n                        ChartLabel that = (ChartLabel) o;\n                        return run == that.run;\n                    }\n\n                    public Color getColor() {\n                        \r\n                        \r\n                        Result r = run.getResult();\n                        if (r == Result.FAILURE)\n                            return ColorPalette.RED;\n                        else if (r == Result.UNSTABLE)\n                            return ColorPalette.YELLOW;\n                        else if (r == Result.ABORTED || r == Result.NOT_BUILT)\n                            return ColorPalette.GREY;\n                        else\n                            return ColorPalette.BLUE;\n                    }\n\n                    @Override\n                    public int hashCode() {\n                        return run.hashCode();\n                    }\n\n                    @Override\n                    public String toString() {\n                        String l = run.getDisplayName();\n                        if (run instanceof Build) {\n                            String s = ((Build) run).getBuiltOnStr();\n                            if (s != null)\n                                l += ' ' + s;\n                        }\n                        return l;\n                    }\n\n                }\n\n                DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<>();\n                for (Run r : getNewBuilds()) {\n                    if (r.isBuilding())\n                        continue;\n                    data.add(((double) r.getDuration()) / (1000 * 60), \"min\",\n                            new ChartLabel(r));\n                }\n\n                final CategoryDataset dataset = data.build();\n\n                final JFreeChart chart = ChartFactory.createStackedAreaChart(null, \r\n                                                                                    \r\n                        null, \r\n                        Messages.Job_minutes(), \r\n                        dataset, \r\n                        PlotOrientation.VERTICAL, \r\n                        false, \r\n                        true, \r\n                        false \r\n                        );\n\n                chart.setBackgroundPaint(Color.white);\n\n                final CategoryPlot plot = chart.getCategoryPlot();\n\n                \r\n                plot.setBackgroundPaint(Color.WHITE);\n                plot.setOutlinePaint(null);\n                plot.setForegroundAlpha(0.8f);\n                \r\n                \r\n                plot.setRangeGridlinesVisible(true);\n                plot.setRangeGridlinePaint(Color.black);\n\n                CategoryAxis domainAxis = new ShiftedCategoryAxis(null);\n                plot.setDomainAxis(domainAxis);\n                domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n                domainAxis.setLowerMargin(0.0);\n                domainAxis.setUpperMargin(0.0);\n                domainAxis.setCategoryMargin(0.0);\n\n                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n                ChartUtil.adjustChebyshev(dataset, rangeAxis);\n                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n                StackedAreaRenderer ar = new StackedAreaRenderer2() {\n                    @Override\n                    public Paint getItemPaint(int row, int column) {\n                        ChartLabel key = (ChartLabel) dataset.getColumnKey(column);\n                        return key.getColor();\n                    }\n\n                    @Override\n                    public String generateURL(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return String.valueOf(label.run.number);\n                    }\n\n                    @Override\n                    public String generateToolTip(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return label.run.getDisplayName() + \" : \"\n                                + label.run.getDurationString();\n                    }\n                };\n                plot.setRenderer(ar);\n\n                \r\n                plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n                return chart;\n            }\n        };\n","date":"2019-04-08 23:18:26","endLine":1546,"groupId":"363","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getBuildTimeGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/82/0c85e8aea35c0a3a53fc4fb516707da60bb9c7.src","preCode":"    public Graph getBuildTimeGraph() {\n        return new Graph(getLastBuildTime(),500,400) {\n            @Override\n            protected JFreeChart createGraph() {\n                class ChartLabel implements Comparable<ChartLabel> {\n                    final Run run;\n\n                    public ChartLabel(Run r) {\n                        this.run = r;\n                    }\n\n                    public int compareTo(ChartLabel that) {\n                        return this.run.number - that.run.number;\n                    }\n\n                    @Override\n                    public boolean equals(Object o) {\n                        \r\n                        \r\n                        if (o == null || !ChartLabel.class.isAssignableFrom( o.getClass() ))  {\n                            return false;\n                        }\n                        ChartLabel that = (ChartLabel) o;\n                        return run == that.run;\n                    }\n\n                    public Color getColor() {\n                        \r\n                        \r\n                        Result r = run.getResult();\n                        if (r == Result.FAILURE)\n                            return ColorPalette.RED;\n                        else if (r == Result.UNSTABLE)\n                            return ColorPalette.YELLOW;\n                        else if (r == Result.ABORTED || r == Result.NOT_BUILT)\n                            return ColorPalette.GREY;\n                        else\n                            return ColorPalette.BLUE;\n                    }\n\n                    @Override\n                    public int hashCode() {\n                        return run.hashCode();\n                    }\n\n                    @Override\n                    public String toString() {\n                        String l = run.getDisplayName();\n                        if (run instanceof Build) {\n                            String s = ((Build) run).getBuiltOnStr();\n                            if (s != null)\n                                l += ' ' + s;\n                        }\n                        return l;\n                    }\n\n                }\n\n                DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<String, ChartLabel>();\n                for (Run r : getNewBuilds()) {\n                    if (r.isBuilding())\n                        continue;\n                    data.add(((double) r.getDuration()) / (1000 * 60), \"min\",\n                            new ChartLabel(r));\n                }\n\n                final CategoryDataset dataset = data.build();\n\n                final JFreeChart chart = ChartFactory.createStackedAreaChart(null, \r\n                                                                                    \r\n                        null, \r\n                        Messages.Job_minutes(), \r\n                        dataset, \r\n                        PlotOrientation.VERTICAL, \r\n                        false, \r\n                        true, \r\n                        false \r\n                        );\n\n                chart.setBackgroundPaint(Color.white);\n\n                final CategoryPlot plot = chart.getCategoryPlot();\n\n                \r\n                plot.setBackgroundPaint(Color.WHITE);\n                plot.setOutlinePaint(null);\n                plot.setForegroundAlpha(0.8f);\n                \r\n                \r\n                plot.setRangeGridlinesVisible(true);\n                plot.setRangeGridlinePaint(Color.black);\n\n                CategoryAxis domainAxis = new ShiftedCategoryAxis(null);\n                plot.setDomainAxis(domainAxis);\n                domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n                domainAxis.setLowerMargin(0.0);\n                domainAxis.setUpperMargin(0.0);\n                domainAxis.setCategoryMargin(0.0);\n\n                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n                ChartUtil.adjustChebyshev(dataset, rangeAxis);\n                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n                StackedAreaRenderer ar = new StackedAreaRenderer2() {\n                    @Override\n                    public Paint getItemPaint(int row, int column) {\n                        ChartLabel key = (ChartLabel) dataset.getColumnKey(column);\n                        return key.getColor();\n                    }\n\n                    @Override\n                    public String generateURL(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return String.valueOf(label.run.number);\n                    }\n\n                    @Override\n                    public String generateToolTip(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return label.run.getDisplayName() + \" : \"\n                                + label.run.getDurationString();\n                    }\n                };\n                plot.setRenderer(ar);\n\n                \r\n                plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n                return chart;\n            }\n        };\n","realPath":"core/src/main/java/hudson/model/Job.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":1414,"status":"M"},{"authorDate":"2009-01-07 09:02:56","commitOrder":8,"curCode":"    public JFreeChart createChart(CategoryDataset ds) {\n        final JFreeChart chart = ChartFactory.createLineChart(null, \r\n                null, \r\n                null, \r\n                ds, \r\n                PlotOrientation.VERTICAL, \r\n                true, \r\n                true, \r\n                false \r\n                );\n\n        chart.setBackgroundPaint(Color.white);\n\n        final CategoryPlot plot = chart.getCategoryPlot();\n        plot.setBackgroundPaint(Color.WHITE);\n        plot.setOutlinePaint(null);\n        plot.setRangeGridlinesVisible(true);\n        plot.setRangeGridlinePaint(Color.black);\n\n        final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();\n        renderer.setBaseStroke(new BasicStroke(3));\n        configureRenderer(renderer);\n\n        final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null);\n        plot.setDomainAxis(domainAxis);\n        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n        domainAxis.setLowerMargin(0.0);\n        domainAxis.setUpperMargin(0.0);\n        domainAxis.setCategoryMargin(0.0);\n\n        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        \r\n        plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n        return chart;\n    }\n","date":"2009-01-07 09:02:56","endLine":125,"groupId":"7620","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createChart","params":"(CategoryDatasetds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/bc/0cdf0bad7415a574f6c1a1f0c84aa47b6b4bdf.src","preCode":"    public JFreeChart createChart(CategoryDataset ds) {\n        final JFreeChart chart = ChartFactory.createLineChart(null, \r\n                null, \r\n                null, \r\n                ds, \r\n                PlotOrientation.VERTICAL, \r\n                true, \r\n                true, \r\n                false \r\n                );\n\n        chart.setBackgroundPaint(Color.white);\n\n        final CategoryPlot plot = chart.getCategoryPlot();\n        plot.setBackgroundPaint(Color.WHITE);\n        plot.setOutlinePaint(null);\n        plot.setRangeGridlinesVisible(true);\n        plot.setRangeGridlinePaint(Color.black);\n\n        final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();\n        renderer.setBaseStroke(new BasicStroke(3));\n        configureRenderer(renderer);\n\n        final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null);\n        plot.setDomainAxis(domainAxis);\n        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n        domainAxis.setLowerMargin(0.0);\n        domainAxis.setUpperMargin(0.0);\n        domainAxis.setCategoryMargin(0.0);\n\n        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        \r\n        plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n        return chart;\n    }\n","realPath":"core/src/main/java/hudson/model/LoadStatistics.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"6b4c6c955d10ade9b78ab02fd2733cc29e0b1ab3","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2019-04-08 23:18:26","modifiedFileCount":"242","status":"M","submitter":"Daniel Beck"},{"authorTime":"2009-01-07 09:02:56","codes":[{"authorDate":"2021-03-12 18:52:10","commitOrder":9,"curCode":"    public Graph getBuildTimeGraph() {\n        return new Graph(getLastBuildTime(),500,400) {\n            @Override\n            protected JFreeChart createGraph() {\n                class ChartLabel implements Comparable<ChartLabel> {\n                    final Run run;\n\n                    ChartLabel(Run r) {\n                        this.run = r;\n                    }\n\n                    public int compareTo(ChartLabel that) {\n                        return this.run.number - that.run.number;\n                    }\n\n                    @Override\n                    public boolean equals(Object o) {\n                        \r\n                        \r\n                        if (o == null || !ChartLabel.class.isAssignableFrom( o.getClass() ))  {\n                            return false;\n                        }\n                        ChartLabel that = (ChartLabel) o;\n                        return run == that.run;\n                    }\n\n                    public Color getColor() {\n                        \r\n                        \r\n                        Result r = run.getResult();\n                        if (r == Result.FAILURE)\n                            return ColorPalette.RED;\n                        else if (r == Result.UNSTABLE)\n                            return ColorPalette.YELLOW;\n                        else if (r == Result.ABORTED || r == Result.NOT_BUILT)\n                            return ColorPalette.GREY;\n                        else\n                            return ColorPalette.BLUE;\n                    }\n\n                    @Override\n                    public int hashCode() {\n                        return run.hashCode();\n                    }\n\n                    @Override\n                    public String toString() {\n                        String l = run.getDisplayName();\n                        if (run instanceof Build) {\n                            String s = ((Build) run).getBuiltOnStr();\n                            if (s != null)\n                                l += ' ' + s;\n                        }\n                        return l;\n                    }\n\n                }\n\n                DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<>();\n                for (Run r : getNewBuilds()) {\n                    if (r.isBuilding())\n                        continue;\n                    data.add(((double) r.getDuration()) / (1000 * 60), \"min\",\n                            new ChartLabel(r));\n                }\n\n                final CategoryDataset dataset = data.build();\n\n                final JFreeChart chart = ChartFactory.createStackedAreaChart(null, \r\n                                                                                    \r\n                        null, \r\n                        Messages.Job_minutes(), \r\n                        dataset, \r\n                        PlotOrientation.VERTICAL, \r\n                        false, \r\n                        true, \r\n                        false \r\n                        );\n\n                chart.setBackgroundPaint(Color.white);\n\n                final CategoryPlot plot = chart.getCategoryPlot();\n\n                \r\n                plot.setBackgroundPaint(Color.WHITE);\n                plot.setOutlinePaint(null);\n                plot.setForegroundAlpha(0.8f);\n                \r\n                \r\n                plot.setRangeGridlinesVisible(true);\n                plot.setRangeGridlinePaint(Color.black);\n\n                CategoryAxis domainAxis = new ShiftedCategoryAxis(null);\n                plot.setDomainAxis(domainAxis);\n                domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n                domainAxis.setLowerMargin(0.0);\n                domainAxis.setUpperMargin(0.0);\n                domainAxis.setCategoryMargin(0.0);\n\n                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n                ChartUtil.adjustChebyshev(dataset, rangeAxis);\n                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n                StackedAreaRenderer ar = new StackedAreaRenderer2() {\n                    @Override\n                    public Paint getItemPaint(int row, int column) {\n                        ChartLabel key = (ChartLabel) dataset.getColumnKey(column);\n                        return key.getColor();\n                    }\n\n                    @Override\n                    public String generateURL(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return String.valueOf(label.run.number);\n                    }\n\n                    @Override\n                    public String generateToolTip(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return label.run.getDisplayName() + \" : \"\n                                + label.run.getDurationString();\n                    }\n                };\n                plot.setRenderer(ar);\n\n                \r\n                plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n                return chart;\n            }\n        };\n","date":"2021-03-12 18:52:10","endLine":1533,"groupId":"363","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"getBuildTimeGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/dc/3d4edd8a8e9bab3531e2cf553168c526d18d80.src","preCode":"    public Graph getBuildTimeGraph() {\n        return new Graph(getLastBuildTime(),500,400) {\n            @Override\n            protected JFreeChart createGraph() {\n                class ChartLabel implements Comparable<ChartLabel> {\n                    final Run run;\n\n                    public ChartLabel(Run r) {\n                        this.run = r;\n                    }\n\n                    public int compareTo(ChartLabel that) {\n                        return this.run.number - that.run.number;\n                    }\n\n                    @Override\n                    public boolean equals(Object o) {\n                        \r\n                        \r\n                        if (o == null || !ChartLabel.class.isAssignableFrom( o.getClass() ))  {\n                            return false;\n                        }\n                        ChartLabel that = (ChartLabel) o;\n                        return run == that.run;\n                    }\n\n                    public Color getColor() {\n                        \r\n                        \r\n                        Result r = run.getResult();\n                        if (r == Result.FAILURE)\n                            return ColorPalette.RED;\n                        else if (r == Result.UNSTABLE)\n                            return ColorPalette.YELLOW;\n                        else if (r == Result.ABORTED || r == Result.NOT_BUILT)\n                            return ColorPalette.GREY;\n                        else\n                            return ColorPalette.BLUE;\n                    }\n\n                    @Override\n                    public int hashCode() {\n                        return run.hashCode();\n                    }\n\n                    @Override\n                    public String toString() {\n                        String l = run.getDisplayName();\n                        if (run instanceof Build) {\n                            String s = ((Build) run).getBuiltOnStr();\n                            if (s != null)\n                                l += ' ' + s;\n                        }\n                        return l;\n                    }\n\n                }\n\n                DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<>();\n                for (Run r : getNewBuilds()) {\n                    if (r.isBuilding())\n                        continue;\n                    data.add(((double) r.getDuration()) / (1000 * 60), \"min\",\n                            new ChartLabel(r));\n                }\n\n                final CategoryDataset dataset = data.build();\n\n                final JFreeChart chart = ChartFactory.createStackedAreaChart(null, \r\n                                                                                    \r\n                        null, \r\n                        Messages.Job_minutes(), \r\n                        dataset, \r\n                        PlotOrientation.VERTICAL, \r\n                        false, \r\n                        true, \r\n                        false \r\n                        );\n\n                chart.setBackgroundPaint(Color.white);\n\n                final CategoryPlot plot = chart.getCategoryPlot();\n\n                \r\n                plot.setBackgroundPaint(Color.WHITE);\n                plot.setOutlinePaint(null);\n                plot.setForegroundAlpha(0.8f);\n                \r\n                \r\n                plot.setRangeGridlinesVisible(true);\n                plot.setRangeGridlinePaint(Color.black);\n\n                CategoryAxis domainAxis = new ShiftedCategoryAxis(null);\n                plot.setDomainAxis(domainAxis);\n                domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n                domainAxis.setLowerMargin(0.0);\n                domainAxis.setUpperMargin(0.0);\n                domainAxis.setCategoryMargin(0.0);\n\n                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n                ChartUtil.adjustChebyshev(dataset, rangeAxis);\n                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n                StackedAreaRenderer ar = new StackedAreaRenderer2() {\n                    @Override\n                    public Paint getItemPaint(int row, int column) {\n                        ChartLabel key = (ChartLabel) dataset.getColumnKey(column);\n                        return key.getColor();\n                    }\n\n                    @Override\n                    public String generateURL(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return String.valueOf(label.run.number);\n                    }\n\n                    @Override\n                    public String generateToolTip(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return label.run.getDisplayName() + \" : \"\n                                + label.run.getDurationString();\n                    }\n                };\n                plot.setRenderer(ar);\n\n                \r\n                plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n                return chart;\n            }\n        };\n","realPath":"core/src/main/java/hudson/model/Job.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":1401,"status":"M"},{"authorDate":"2009-01-07 09:02:56","commitOrder":9,"curCode":"    public JFreeChart createChart(CategoryDataset ds) {\n        final JFreeChart chart = ChartFactory.createLineChart(null, \r\n                null, \r\n                null, \r\n                ds, \r\n                PlotOrientation.VERTICAL, \r\n                true, \r\n                true, \r\n                false \r\n                );\n\n        chart.setBackgroundPaint(Color.white);\n\n        final CategoryPlot plot = chart.getCategoryPlot();\n        plot.setBackgroundPaint(Color.WHITE);\n        plot.setOutlinePaint(null);\n        plot.setRangeGridlinesVisible(true);\n        plot.setRangeGridlinePaint(Color.black);\n\n        final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();\n        renderer.setBaseStroke(new BasicStroke(3));\n        configureRenderer(renderer);\n\n        final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null);\n        plot.setDomainAxis(domainAxis);\n        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n        domainAxis.setLowerMargin(0.0);\n        domainAxis.setUpperMargin(0.0);\n        domainAxis.setCategoryMargin(0.0);\n\n        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        \r\n        plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n        return chart;\n    }\n","date":"2009-01-07 09:02:56","endLine":125,"groupId":"7620","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"createChart","params":"(CategoryDatasetds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/bc/0cdf0bad7415a574f6c1a1f0c84aa47b6b4bdf.src","preCode":"    public JFreeChart createChart(CategoryDataset ds) {\n        final JFreeChart chart = ChartFactory.createLineChart(null, \r\n                null, \r\n                null, \r\n                ds, \r\n                PlotOrientation.VERTICAL, \r\n                true, \r\n                true, \r\n                false \r\n                );\n\n        chart.setBackgroundPaint(Color.white);\n\n        final CategoryPlot plot = chart.getCategoryPlot();\n        plot.setBackgroundPaint(Color.WHITE);\n        plot.setOutlinePaint(null);\n        plot.setRangeGridlinesVisible(true);\n        plot.setRangeGridlinePaint(Color.black);\n\n        final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();\n        renderer.setBaseStroke(new BasicStroke(3));\n        configureRenderer(renderer);\n\n        final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null);\n        plot.setDomainAxis(domainAxis);\n        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n        domainAxis.setLowerMargin(0.0);\n        domainAxis.setUpperMargin(0.0);\n        domainAxis.setCategoryMargin(0.0);\n\n        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        \r\n        plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n        return chart;\n    }\n","realPath":"core/src/main/java/hudson/model/LoadStatistics.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"7c0d4df8cb6c2b5621b8e71daee6773b1e47715d","commitMessage":"@@@Merge pull request #5346 from basil/checkstyle\n\nBump Checkstyle from 8.29 to 8.41 and enable additional checks","date":"2021-03-12 18:52:10","modifiedFileCount":"79","status":"M","submitter":"Oleg Nenashev"},{"authorTime":"2009-01-07 09:02:56","codes":[{"authorDate":"2021-04-28 17:28:25","commitOrder":10,"curCode":"    public Graph getBuildTimeGraph() {\n        return new Graph(getLastBuildTime(),500,400) {\n            @Override\n            protected JFreeChart createGraph() {\n                class ChartLabel implements Comparable<ChartLabel> {\n                    final Run run;\n\n                    ChartLabel(Run r) {\n                        this.run = r;\n                    }\n\n                    @Override\n                    public int compareTo(ChartLabel that) {\n                        return this.run.number - that.run.number;\n                    }\n\n                    @Override\n                    public boolean equals(Object o) {\n                        \r\n                        \r\n                        if (o == null || !ChartLabel.class.isAssignableFrom( o.getClass() ))  {\n                            return false;\n                        }\n                        ChartLabel that = (ChartLabel) o;\n                        return run == that.run;\n                    }\n\n                    public Color getColor() {\n                        \r\n                        \r\n                        Result r = run.getResult();\n                        if (r == Result.FAILURE)\n                            return ColorPalette.RED;\n                        else if (r == Result.UNSTABLE)\n                            return ColorPalette.YELLOW;\n                        else if (r == Result.ABORTED || r == Result.NOT_BUILT)\n                            return ColorPalette.GREY;\n                        else\n                            return ColorPalette.BLUE;\n                    }\n\n                    @Override\n                    public int hashCode() {\n                        return run.hashCode();\n                    }\n\n                    @Override\n                    public String toString() {\n                        String l = run.getDisplayName();\n                        if (run instanceof Build) {\n                            String s = ((Build) run).getBuiltOnStr();\n                            if (s != null)\n                                l += ' ' + s;\n                        }\n                        return l;\n                    }\n\n                }\n\n                DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<>();\n                for (Run r : getNewBuilds()) {\n                    if (r.isBuilding())\n                        continue;\n                    data.add(((double) r.getDuration()) / (1000 * 60), \"min\",\n                            new ChartLabel(r));\n                }\n\n                final CategoryDataset dataset = data.build();\n\n                final JFreeChart chart = ChartFactory.createStackedAreaChart(null, \r\n                                                                                    \r\n                        null, \r\n                        Messages.Job_minutes(), \r\n                        dataset, \r\n                        PlotOrientation.VERTICAL, \r\n                        false, \r\n                        true, \r\n                        false \r\n                        );\n\n                chart.setBackgroundPaint(Color.white);\n\n                final CategoryPlot plot = chart.getCategoryPlot();\n\n                \r\n                plot.setBackgroundPaint(Color.WHITE);\n                plot.setOutlinePaint(null);\n                plot.setForegroundAlpha(0.8f);\n                \r\n                \r\n                plot.setRangeGridlinesVisible(true);\n                plot.setRangeGridlinePaint(Color.black);\n\n                CategoryAxis domainAxis = new ShiftedCategoryAxis(null);\n                plot.setDomainAxis(domainAxis);\n                domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n                domainAxis.setLowerMargin(0.0);\n                domainAxis.setUpperMargin(0.0);\n                domainAxis.setCategoryMargin(0.0);\n\n                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n                ChartUtil.adjustChebyshev(dataset, rangeAxis);\n                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n                StackedAreaRenderer ar = new StackedAreaRenderer2() {\n                    @Override\n                    public Paint getItemPaint(int row, int column) {\n                        ChartLabel key = (ChartLabel) dataset.getColumnKey(column);\n                        return key.getColor();\n                    }\n\n                    @Override\n                    public String generateURL(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return String.valueOf(label.run.number);\n                    }\n\n                    @Override\n                    public String generateToolTip(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return label.run.getDisplayName() + \" : \"\n                                + label.run.getDurationString();\n                    }\n                };\n                plot.setRenderer(ar);\n\n                \r\n                plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n                return chart;\n            }\n        };\n","date":"2021-04-28 17:28:25","endLine":1548,"groupId":"101008","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"getBuildTimeGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/de/30680acac925b758949f5299060e9be868d515.src","preCode":"    public Graph getBuildTimeGraph() {\n        return new Graph(getLastBuildTime(),500,400) {\n            @Override\n            protected JFreeChart createGraph() {\n                class ChartLabel implements Comparable<ChartLabel> {\n                    final Run run;\n\n                    ChartLabel(Run r) {\n                        this.run = r;\n                    }\n\n                    public int compareTo(ChartLabel that) {\n                        return this.run.number - that.run.number;\n                    }\n\n                    @Override\n                    public boolean equals(Object o) {\n                        \r\n                        \r\n                        if (o == null || !ChartLabel.class.isAssignableFrom( o.getClass() ))  {\n                            return false;\n                        }\n                        ChartLabel that = (ChartLabel) o;\n                        return run == that.run;\n                    }\n\n                    public Color getColor() {\n                        \r\n                        \r\n                        Result r = run.getResult();\n                        if (r == Result.FAILURE)\n                            return ColorPalette.RED;\n                        else if (r == Result.UNSTABLE)\n                            return ColorPalette.YELLOW;\n                        else if (r == Result.ABORTED || r == Result.NOT_BUILT)\n                            return ColorPalette.GREY;\n                        else\n                            return ColorPalette.BLUE;\n                    }\n\n                    @Override\n                    public int hashCode() {\n                        return run.hashCode();\n                    }\n\n                    @Override\n                    public String toString() {\n                        String l = run.getDisplayName();\n                        if (run instanceof Build) {\n                            String s = ((Build) run).getBuiltOnStr();\n                            if (s != null)\n                                l += ' ' + s;\n                        }\n                        return l;\n                    }\n\n                }\n\n                DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<>();\n                for (Run r : getNewBuilds()) {\n                    if (r.isBuilding())\n                        continue;\n                    data.add(((double) r.getDuration()) / (1000 * 60), \"min\",\n                            new ChartLabel(r));\n                }\n\n                final CategoryDataset dataset = data.build();\n\n                final JFreeChart chart = ChartFactory.createStackedAreaChart(null, \r\n                                                                                    \r\n                        null, \r\n                        Messages.Job_minutes(), \r\n                        dataset, \r\n                        PlotOrientation.VERTICAL, \r\n                        false, \r\n                        true, \r\n                        false \r\n                        );\n\n                chart.setBackgroundPaint(Color.white);\n\n                final CategoryPlot plot = chart.getCategoryPlot();\n\n                \r\n                plot.setBackgroundPaint(Color.WHITE);\n                plot.setOutlinePaint(null);\n                plot.setForegroundAlpha(0.8f);\n                \r\n                \r\n                plot.setRangeGridlinesVisible(true);\n                plot.setRangeGridlinePaint(Color.black);\n\n                CategoryAxis domainAxis = new ShiftedCategoryAxis(null);\n                plot.setDomainAxis(domainAxis);\n                domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n                domainAxis.setLowerMargin(0.0);\n                domainAxis.setUpperMargin(0.0);\n                domainAxis.setCategoryMargin(0.0);\n\n                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n                ChartUtil.adjustChebyshev(dataset, rangeAxis);\n                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n                StackedAreaRenderer ar = new StackedAreaRenderer2() {\n                    @Override\n                    public Paint getItemPaint(int row, int column) {\n                        ChartLabel key = (ChartLabel) dataset.getColumnKey(column);\n                        return key.getColor();\n                    }\n\n                    @Override\n                    public String generateURL(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return String.valueOf(label.run.number);\n                    }\n\n                    @Override\n                    public String generateToolTip(CategoryDataset dataset, int row,\n                            int column) {\n                        ChartLabel label = (ChartLabel) dataset.getColumnKey(column);\n                        return label.run.getDisplayName() + \" : \"\n                                + label.run.getDurationString();\n                    }\n                };\n                plot.setRenderer(ar);\n\n                \r\n                plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n                return chart;\n            }\n        };\n","realPath":"core/src/main/java/hudson/model/Job.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":1415,"status":"M"},{"authorDate":"2009-01-07 09:02:56","commitOrder":10,"curCode":"    public JFreeChart createChart(CategoryDataset ds) {\n        final JFreeChart chart = ChartFactory.createLineChart(null, \r\n                null, \r\n                null, \r\n                ds, \r\n                PlotOrientation.VERTICAL, \r\n                true, \r\n                true, \r\n                false \r\n                );\n\n        chart.setBackgroundPaint(Color.white);\n\n        final CategoryPlot plot = chart.getCategoryPlot();\n        plot.setBackgroundPaint(Color.WHITE);\n        plot.setOutlinePaint(null);\n        plot.setRangeGridlinesVisible(true);\n        plot.setRangeGridlinePaint(Color.black);\n\n        final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();\n        renderer.setBaseStroke(new BasicStroke(3));\n        configureRenderer(renderer);\n\n        final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null);\n        plot.setDomainAxis(domainAxis);\n        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n        domainAxis.setLowerMargin(0.0);\n        domainAxis.setUpperMargin(0.0);\n        domainAxis.setCategoryMargin(0.0);\n\n        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        \r\n        plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n        return chart;\n    }\n","date":"2009-01-07 09:02:56","endLine":125,"groupId":"101008","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"createChart","params":"(CategoryDatasetds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/bc/0cdf0bad7415a574f6c1a1f0c84aa47b6b4bdf.src","preCode":"    public JFreeChart createChart(CategoryDataset ds) {\n        final JFreeChart chart = ChartFactory.createLineChart(null, \r\n                null, \r\n                null, \r\n                ds, \r\n                PlotOrientation.VERTICAL, \r\n                true, \r\n                true, \r\n                false \r\n                );\n\n        chart.setBackgroundPaint(Color.white);\n\n        final CategoryPlot plot = chart.getCategoryPlot();\n        plot.setBackgroundPaint(Color.WHITE);\n        plot.setOutlinePaint(null);\n        plot.setRangeGridlinesVisible(true);\n        plot.setRangeGridlinePaint(Color.black);\n\n        final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();\n        renderer.setBaseStroke(new BasicStroke(3));\n        configureRenderer(renderer);\n\n        final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null);\n        plot.setDomainAxis(domainAxis);\n        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90);\n        domainAxis.setLowerMargin(0.0);\n        domainAxis.setUpperMargin(0.0);\n        domainAxis.setCategoryMargin(0.0);\n\n        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        \r\n        plot.setInsets(new RectangleInsets(0, 0, 0, 5.0));\n\n        return chart;\n    }\n","realPath":"core/src/main/java/hudson/model/LoadStatistics.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"f6378676b11288cc2525852b0a1a441d147e31d3","commitMessage":"@@@Add missing @Override annotations (#5430)\n\n","date":"2021-04-28 17:28:25","modifiedFileCount":"405","status":"M","submitter":"Basil Crow"}]
