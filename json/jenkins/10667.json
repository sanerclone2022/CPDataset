[{"authorTime":"2018-09-27 21:56:48","codes":[{"authorDate":"2018-09-27 21:56:48","commitOrder":1,"curCode":"    public void legacyToken_regularCase() {\n        AtomicReference<String> token = new AtomicReference<>();\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                enableLegacyTokenGenerationOnUserCreation();\n                configureSecurity();\n                \n                {\n                    JenkinsRule.WebClient wc = rr.j.createWebClient();\n                    \r\n                    \r\n                    wc.login(\"user1\");\n                    HtmlPage page = wc.goTo(\"user/user1/configure\");\n                    String tokenValue = ((HtmlTextInput) page.getDocumentElement().querySelector(\"#apiToken\")).getText();\n                    token.set(tokenValue);\n                }\n            }\n        });\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                User user = User.getById(\"user1\", false);\n                assertNotNull(user);\n                \n                JenkinsRule.WebClient wc = rr.j.createWebClient();\n                wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n                \n                { \r\n                    WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", \"invalid-token\"));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n                { \r\n                    WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user-not-valid\", token.get()));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n    \n                assertNull(User.getById(\"user-not-valid\", false));\n                \n                { \r\n                    WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", token.get()));\n                    XmlPage xmlPage = wc.getPage(request);\n                    assertThat(xmlPage, hasXPath(\"//name\", is(\"user1\")));\n                }\n            }\n        });\n    }\n","date":"2018-09-27 21:56:48","endLine":112,"groupId":"5044","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"legacyToken_regularCase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e6/1b7f297cf69f0b88989d0b972c4d45ab5a620f.src","preCode":"    public void legacyToken_regularCase() {\n        AtomicReference<String> token = new AtomicReference<>();\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                enableLegacyTokenGenerationOnUserCreation();\n                configureSecurity();\n                \n                {\n                    JenkinsRule.WebClient wc = rr.j.createWebClient();\n                    \r\n                    \r\n                    wc.login(\"user1\");\n                    HtmlPage page = wc.goTo(\"user/user1/configure\");\n                    String tokenValue = ((HtmlTextInput) page.getDocumentElement().querySelector(\"#apiToken\")).getText();\n                    token.set(tokenValue);\n                }\n            }\n        });\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                User user = User.getById(\"user1\", false);\n                assertNotNull(user);\n                \n                JenkinsRule.WebClient wc = rr.j.createWebClient();\n                wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n                \n                { \r\n                    WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", \"invalid-token\"));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n                { \r\n                    WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user-not-valid\", token.get()));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n    \n                assertNull(User.getById(\"user-not-valid\", false));\n                \n                { \r\n                    WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", token.get()));\n                    XmlPage xmlPage = wc.getPage(request);\n                    assertThat(xmlPage, hasXPath(\"//name\", is(\"user1\")));\n                }\n            }\n        });\n    }\n","realPath":"test/src/test/java/jenkins/security/BasicHeaderApiTokenAuthenticatorTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2018-09-27 21:56:48","commitOrder":1,"curCode":"    public void legacyToken_withoutLastGrantedAuthorities() {\n        AtomicReference<String> token = new AtomicReference<>();\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                enableLegacyTokenGenerationOnUserCreation();\n                configureSecurity();\n                \n                {\n                    JenkinsRule.WebClient wc = rr.j.createWebClient();\n                    wc.login(\"user1\");\n                    HtmlPage page = wc.goTo(\"user/user1/configure\");\n                    String tokenValue = ((HtmlTextInput) page.getDocumentElement().querySelector(\"#apiToken\")).getText();\n                    token.set(tokenValue);\n                }\n            }\n        });\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                User user = User.getById(\"user1\", false);\n                assertNull(user);\n                \n                JenkinsRule.WebClient wc = rr.j.createWebClient();\n                wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n                \n                { \r\n                    WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", \"invalid-token\"));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n                { \r\n                    WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user-not-valid\", token.get()));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n    \n                assertNull(User.getById(\"user1\", false));\n                assertNull(User.getById(\"user-not-valid\", false));\n                \n                { \r\n                    WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", token.get()));\n                    XmlPage xmlPage = wc.getPage(request);\n                    assertThat(xmlPage, hasXPath(\"//name\", is(\"user1\")));\n                }\n            }\n        });\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                User user = User.getById(\"user1\", false);\n                assertNull(user);\n            }\n        });\n    }\n","date":"2018-09-27 21:56:48","endLine":174,"groupId":"5044","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"legacyToken_withoutLastGrantedAuthorities","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e6/1b7f297cf69f0b88989d0b972c4d45ab5a620f.src","preCode":"    public void legacyToken_withoutLastGrantedAuthorities() {\n        AtomicReference<String> token = new AtomicReference<>();\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                enableLegacyTokenGenerationOnUserCreation();\n                configureSecurity();\n                \n                {\n                    JenkinsRule.WebClient wc = rr.j.createWebClient();\n                    wc.login(\"user1\");\n                    HtmlPage page = wc.goTo(\"user/user1/configure\");\n                    String tokenValue = ((HtmlTextInput) page.getDocumentElement().querySelector(\"#apiToken\")).getText();\n                    token.set(tokenValue);\n                }\n            }\n        });\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                User user = User.getById(\"user1\", false);\n                assertNull(user);\n                \n                JenkinsRule.WebClient wc = rr.j.createWebClient();\n                wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n                \n                { \r\n                    WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", \"invalid-token\"));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n                { \r\n                    WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user-not-valid\", token.get()));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n    \n                assertNull(User.getById(\"user1\", false));\n                assertNull(User.getById(\"user-not-valid\", false));\n                \n                { \r\n                    WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", token.get()));\n                    XmlPage xmlPage = wc.getPage(request);\n                    assertThat(xmlPage, hasXPath(\"//name\", is(\"user1\")));\n                }\n            }\n        });\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                User user = User.getById(\"user1\", false);\n                assertNull(user);\n            }\n        });\n    }\n","realPath":"test/src/test/java/jenkins/security/BasicHeaderApiTokenAuthenticatorTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"}],"commitId":"e1077a45b9b0c9b2c1843eb168a50572ec28f010","commitMessage":"@@@Merge branch 'security-stable-2.138' into security-master\n","date":"2018-09-27 21:56:48","modifiedFileCount":"0","status":"B","submitter":"Daniel Beck"},{"authorTime":"2021-06-03 15:27:51","codes":[{"authorDate":"2021-06-03 15:27:51","commitOrder":2,"curCode":"    public void legacyToken_regularCase() throws Throwable {\n        AtomicReference<String> token = new AtomicReference<>();\n        sessions.then(j -> {\n                enableLegacyTokenGenerationOnUserCreation();\n                configureSecurity(j);\n                \n                {\n                    JenkinsRule.WebClient wc = j.createWebClient();\n                    \r\n                    \r\n                    wc.login(\"user1\");\n                    HtmlPage page = wc.goTo(\"user/user1/configure\");\n                    String tokenValue = ((HtmlTextInput) page.getDocumentElement().querySelector(\"#apiToken\")).getText();\n                    token.set(tokenValue);\n                }\n        });\n        sessions.then(j -> {\n                User user = User.getById(\"user1\", false);\n                assertNotNull(user);\n                \n                JenkinsRule.WebClient wc = j.createWebClient();\n                wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n                \n                { \r\n                    WebRequest request = new WebRequest(new URL(j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", \"invalid-token\"));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n                { \r\n                    WebRequest request = new WebRequest(new URL(j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user-not-valid\", token.get()));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n    \n                assertNull(User.getById(\"user-not-valid\", false));\n                \n                { \r\n                    WebRequest request = new WebRequest(new URL(j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", token.get()));\n                    XmlPage xmlPage = wc.getPage(request);\n                    assertThat(xmlPage, hasXPath(\"//name\", is(\"user1\")));\n                }\n        });\n    }\n","date":"2021-06-03 15:27:51","endLine":105,"groupId":"10667","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"legacyToken_regularCase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/66/142606498d0757ddfd128b3530cded1b744f65.src","preCode":"    public void legacyToken_regularCase() {\n        AtomicReference<String> token = new AtomicReference<>();\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                enableLegacyTokenGenerationOnUserCreation();\n                configureSecurity();\n                \n                {\n                    JenkinsRule.WebClient wc = rr.j.createWebClient();\n                    \r\n                    \r\n                    wc.login(\"user1\");\n                    HtmlPage page = wc.goTo(\"user/user1/configure\");\n                    String tokenValue = ((HtmlTextInput) page.getDocumentElement().querySelector(\"#apiToken\")).getText();\n                    token.set(tokenValue);\n                }\n            }\n        });\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                User user = User.getById(\"user1\", false);\n                assertNotNull(user);\n                \n                JenkinsRule.WebClient wc = rr.j.createWebClient();\n                wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n                \n                { \r\n                    WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", \"invalid-token\"));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n                { \r\n                    WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user-not-valid\", token.get()));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n    \n                assertNull(User.getById(\"user-not-valid\", false));\n                \n                { \r\n                    WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", token.get()));\n                    XmlPage xmlPage = wc.getPage(request);\n                    assertThat(xmlPage, hasXPath(\"//name\", is(\"user1\")));\n                }\n            }\n        });\n    }\n","realPath":"test/src/test/java/jenkins/security/BasicHeaderApiTokenAuthenticatorTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2021-06-03 15:27:51","commitOrder":2,"curCode":"    public void legacyToken_withoutLastGrantedAuthorities() throws Throwable {\n        AtomicReference<String> token = new AtomicReference<>();\n        sessions.then(j -> {\n                enableLegacyTokenGenerationOnUserCreation();\n                configureSecurity(j);\n                \n                {\n                    JenkinsRule.WebClient wc = j.createWebClient();\n                    wc.login(\"user1\");\n                    HtmlPage page = wc.goTo(\"user/user1/configure\");\n                    String tokenValue = ((HtmlTextInput) page.getDocumentElement().querySelector(\"#apiToken\")).getText();\n                    token.set(tokenValue);\n                }\n        });\n        sessions.then(j -> {\n                User user = User.getById(\"user1\", false);\n                assertNull(user);\n                \n                JenkinsRule.WebClient wc = j.createWebClient();\n                wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n                \n                { \r\n                    WebRequest request = new WebRequest(new URL(j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", \"invalid-token\"));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n                { \r\n                    WebRequest request = new WebRequest(new URL(j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user-not-valid\", token.get()));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n    \n                assertNull(User.getById(\"user1\", false));\n                assertNull(User.getById(\"user-not-valid\", false));\n                \n                { \r\n                    WebRequest request = new WebRequest(new URL(j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", token.get()));\n                    XmlPage xmlPage = wc.getPage(request);\n                    assertThat(xmlPage, hasXPath(\"//name\", is(\"user1\")));\n                }\n        });\n        sessions.then(j -> {\n                User user = User.getById(\"user1\", false);\n                assertNull(user);\n        });\n    }\n","date":"2021-06-03 15:27:51","endLine":158,"groupId":"10667","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"legacyToken_withoutLastGrantedAuthorities","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/66/142606498d0757ddfd128b3530cded1b744f65.src","preCode":"    public void legacyToken_withoutLastGrantedAuthorities() {\n        AtomicReference<String> token = new AtomicReference<>();\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                enableLegacyTokenGenerationOnUserCreation();\n                configureSecurity();\n                \n                {\n                    JenkinsRule.WebClient wc = rr.j.createWebClient();\n                    wc.login(\"user1\");\n                    HtmlPage page = wc.goTo(\"user/user1/configure\");\n                    String tokenValue = ((HtmlTextInput) page.getDocumentElement().querySelector(\"#apiToken\")).getText();\n                    token.set(tokenValue);\n                }\n            }\n        });\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                User user = User.getById(\"user1\", false);\n                assertNull(user);\n                \n                JenkinsRule.WebClient wc = rr.j.createWebClient();\n                wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n                \n                { \r\n                    WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", \"invalid-token\"));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n                { \r\n                    WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user-not-valid\", token.get()));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n    \n                assertNull(User.getById(\"user1\", false));\n                assertNull(User.getById(\"user-not-valid\", false));\n                \n                { \r\n                    WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + \"whoAmI/api/xml\"));\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", token.get()));\n                    XmlPage xmlPage = wc.getPage(request);\n                    assertThat(xmlPage, hasXPath(\"//name\", is(\"user1\")));\n                }\n            }\n        });\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                User user = User.getById(\"user1\", false);\n                assertNull(user);\n            }\n        });\n    }\n","realPath":"test/src/test/java/jenkins/security/BasicHeaderApiTokenAuthenticatorTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"5e9b451a11926e5b42d4a94612ca566de058f494","commitMessage":"@@@Merge pull request #5544 from basil/JenkinsSessionRule\n\nMigrate from `RestartableJenkinsRule` to `JenkinsSessionRule`","date":"2021-06-03 15:27:51","modifiedFileCount":"8","status":"M","submitter":"Oleg Nenashev"}]
