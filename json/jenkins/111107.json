[{"authorTime":"2017-01-09 22:51:36","codes":[{"authorDate":"2018-11-23 07:19:45","commitOrder":4,"curCode":"            public synchronized List<String> getArguments() {\n                if (arguments != null)\n                    return arguments;\n\n                arguments = new ArrayList<String>(argc);\n                if (argc == 0) {\n                    return arguments;\n                }\n\n                try {\n                    int psize = b64 ? 8 : 4;\n                    Memory m = new Memory(psize);\n                    int fd = LIBC.open(getFile(\"as\").getAbsolutePath(), 0);\n\n                    try {\n                        \r\n                        LIBC.pread(fd, m, new NativeLong(psize), new NativeLong(pr_argp));\n                        long argp = b64 ? m.getLong(0) : to64(m.getInt(0));\n\n                        if (argp == 0) \r\n                            return arguments;\n\n                        \r\n                        for( int n=0; ; n++ ) {\n\n                            LIBC.pread(fd, m, new NativeLong(psize), new NativeLong(argp+(n*psize)));\n                            long addr = b64 ? m.getLong(0) : to64(m.getInt(0));\n\n                            if (addr == 0) \r\n                                break;\n\n                            \r\n                            arguments.add(readLine(fd, addr, \"arg[\"+ n +\"]\"));\n                        }\n                    } finally  {\n                       LIBC.close(fd); \n                    }\n                } catch (IOException | LastErrorException e) {\n                    \r\n                    \r\n                }\n\n                arguments = Collections.unmodifiableList(arguments);\n                return arguments;\n            }\n","date":"2018-11-23 07:19:45","endLine":1230,"groupId":"4143","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/18/624bad29a0b4e1f412c6f42b61de8d21067142.src","preCode":"            public synchronized List<String> getArguments() {\n                if (arguments != null)\n                    return arguments;\n\n                arguments = new ArrayList<String>(argc);\n                if (argc == 0) {\n                    return arguments;\n                }\n\n                try {\n                    int psize = b64 ? 8 : 4;\n                    Memory m = new Memory(psize);\n                    int fd = LIBC.open(getFile(\"as\").getAbsolutePath(), 0);\n\n                    try {\n                        \r\n                        LIBC.pread(fd, m, new NativeLong(psize), new NativeLong(pr_argp));\n                        long argp = b64 ? m.getLong(0) : to64(m.getInt(0));\n\n                        if (argp == 0) \r\n                            return arguments;\n\n                        \r\n                        for( int n=0; ; n++ ) {\n\n                            LIBC.pread(fd, m, new NativeLong(psize), new NativeLong(argp+(n*psize)));\n                            long addr = b64 ? m.getLong(0) : to64(m.getInt(0));\n\n                            if (addr == 0) \r\n                                break;\n\n                            \r\n                            arguments.add(readLine(fd, addr, \"arg[\"+ n +\"]\"));\n                        }\n                    } finally  {\n                       LIBC.close(fd); \n                    }\n                } catch (IOException | LastErrorException e) {\n                    \r\n                    \r\n                }\n\n                arguments = Collections.unmodifiableList(arguments);\n                return arguments;\n            }\n","realPath":"core/src/main/java/hudson/util/ProcessTree.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":1186,"status":"B"},{"authorDate":"2017-01-09 22:51:36","commitOrder":4,"curCode":"            public synchronized List<String> getArguments() {\n                if(arguments!=null)\n                    return arguments;\n\n                arguments = new ArrayList<String>(argc);\n\t\tif (argc == 0) {\n\t\t    return arguments;\n\t\t}\n\n                int psize = b64 ? 8 : 4;\n                Memory m = new Memory(psize);\n                try {\n                    if(LOGGER.isLoggable(FINER))\n                        LOGGER.finer(\"Reading \"+getFile(\"as\"));\n                    int fd = LIBC.open(getFile(\"as\").getAbsolutePath(), 0);\n                    try {\n                        for( int n=0; n<argc; n++ ) {\n                            \r\n                            LIBC.pread(fd, m, new NativeLong(psize), new NativeLong(argp+n*psize));\n                            long addr = b64 ? m.getLong(0) : to64(m.getInt(0));\n\n                            arguments.add(readLine(fd, addr, \"argv[\"+ n +\"]\"));\n                        }\n                    } finally {\n                        LIBC.close(fd);\n                    }\n                } catch (IOException | LastErrorException e) {\n                    \r\n                    \r\n                }\n\n                arguments = Collections.unmodifiableList(arguments);\n                return arguments;\n            }\n","date":"2017-01-09 22:51:36","endLine":925,"groupId":"3406","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/40/e30217a57375c1daa3cea4b9527b5632953208.src","preCode":"            public synchronized List<String> getArguments() {\n                if(arguments!=null)\n                    return arguments;\n\n                arguments = new ArrayList<String>(argc);\n\t\tif (argc == 0) {\n\t\t    return arguments;\n\t\t}\n\n                int psize = b64 ? 8 : 4;\n                Memory m = new Memory(psize);\n                try {\n                    if(LOGGER.isLoggable(FINER))\n                        LOGGER.finer(\"Reading \"+getFile(\"as\"));\n                    int fd = LIBC.open(getFile(\"as\").getAbsolutePath(), 0);\n                    try {\n                        for( int n=0; n<argc; n++ ) {\n                            \r\n                            LIBC.pread(fd, m, new NativeLong(psize), new NativeLong(argp+n*psize));\n                            long addr = b64 ? m.getLong(0) : to64(m.getInt(0));\n\n                            arguments.add(readLine(fd, addr, \"argv[\"+ n +\"]\"));\n                        }\n                    } finally {\n                        LIBC.close(fd);\n                    }\n                } catch (IOException | LastErrorException e) {\n                    \r\n                    \r\n                }\n\n                arguments = Collections.unmodifiableList(arguments);\n                return arguments;\n            }\n","realPath":"core/src/main/java/hudson/util/ProcessTree.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":892,"status":"NB"}],"commitId":"896356a03893c300361dd8a3acc3b83f926301b7","commitMessage":"@@@Merge commit '8d429ff13b2013ff0b390d59f9c8a7674e6d24a1' into security-master\n","date":"2018-11-23 07:19:45","modifiedFileCount":"5","status":"M","submitter":"Daniel Beck"},{"authorTime":"2019-10-02 15:46:53","codes":[{"authorDate":"2019-10-02 15:46:53","commitOrder":5,"curCode":"            public synchronized List<String> getArguments() {\n                if (arguments != null)\n                    return arguments;\n\n                arguments = new ArrayList<>(argc);\n                if (argc == 0) {\n                    return arguments;\n                }\n\n                try {\n                    int psize = b64 ? 8 : 4;\n                    Memory m = new Memory(psize);\n                    int fd = LIBC.open(getFile(\"as\").getAbsolutePath(), 0);\n\n                    try {\n                        \r\n                        LIBC.pread(fd, m, new NativeLong(psize), new NativeLong(pr_argp));\n                        long argp = b64 ? m.getLong(0) : to64(m.getInt(0));\n\n                        if (argp == 0) \r\n                            return arguments;\n\n                        \r\n                        for( int n=0; ; n++ ) {\n\n                            LIBC.pread(fd, m, new NativeLong(psize), new NativeLong(argp+(n*psize)));\n                            long addr = b64 ? m.getLong(0) : to64(m.getInt(0));\n\n                            if (addr == 0) \r\n                                break;\n\n                            \r\n                            arguments.add(readLine(fd, addr, \"arg[\"+ n +\"]\"));\n                        }\n                    } finally  {\n                       LIBC.close(fd); \n                    }\n                } catch (IOException | LastErrorException e) {\n                    \r\n                    \r\n                }\n\n                arguments = Collections.unmodifiableList(arguments);\n                return arguments;\n            }\n","date":"2019-10-02 15:46:53","endLine":1230,"groupId":"111107","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/2e/aaad44243e4ca9aca042325a671c729390b095.src","preCode":"            public synchronized List<String> getArguments() {\n                if (arguments != null)\n                    return arguments;\n\n                arguments = new ArrayList<String>(argc);\n                if (argc == 0) {\n                    return arguments;\n                }\n\n                try {\n                    int psize = b64 ? 8 : 4;\n                    Memory m = new Memory(psize);\n                    int fd = LIBC.open(getFile(\"as\").getAbsolutePath(), 0);\n\n                    try {\n                        \r\n                        LIBC.pread(fd, m, new NativeLong(psize), new NativeLong(pr_argp));\n                        long argp = b64 ? m.getLong(0) : to64(m.getInt(0));\n\n                        if (argp == 0) \r\n                            return arguments;\n\n                        \r\n                        for( int n=0; ; n++ ) {\n\n                            LIBC.pread(fd, m, new NativeLong(psize), new NativeLong(argp+(n*psize)));\n                            long addr = b64 ? m.getLong(0) : to64(m.getInt(0));\n\n                            if (addr == 0) \r\n                                break;\n\n                            \r\n                            arguments.add(readLine(fd, addr, \"arg[\"+ n +\"]\"));\n                        }\n                    } finally  {\n                       LIBC.close(fd); \n                    }\n                } catch (IOException | LastErrorException e) {\n                    \r\n                    \r\n                }\n\n                arguments = Collections.unmodifiableList(arguments);\n                return arguments;\n            }\n","realPath":"core/src/main/java/hudson/util/ProcessTree.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":1186,"status":"M"},{"authorDate":"2019-10-02 15:46:53","commitOrder":5,"curCode":"            public synchronized List<String> getArguments() {\n                if(arguments!=null)\n                    return arguments;\n\n                arguments = new ArrayList<>(argc);\n\t\tif (argc == 0) {\n\t\t    return arguments;\n\t\t}\n\n                int psize = b64 ? 8 : 4;\n                Memory m = new Memory(psize);\n                try {\n                    if(LOGGER.isLoggable(FINER))\n                        LOGGER.finer(\"Reading \"+getFile(\"as\"));\n                    int fd = LIBC.open(getFile(\"as\").getAbsolutePath(), 0);\n                    try {\n                        for( int n=0; n<argc; n++ ) {\n                            \r\n                            LIBC.pread(fd, m, new NativeLong(psize), new NativeLong(argp+n*psize));\n                            long addr = b64 ? m.getLong(0) : to64(m.getInt(0));\n\n                            arguments.add(readLine(fd, addr, \"argv[\"+ n +\"]\"));\n                        }\n                    } finally {\n                        LIBC.close(fd);\n                    }\n                } catch (IOException | LastErrorException e) {\n                    \r\n                    \r\n                }\n\n                arguments = Collections.unmodifiableList(arguments);\n                return arguments;\n            }\n","date":"2019-10-02 15:46:53","endLine":1506,"groupId":"111107","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/2e/aaad44243e4ca9aca042325a671c729390b095.src","preCode":"            public synchronized List<String> getArguments() {\n                if(arguments!=null)\n                    return arguments;\n\n                arguments = new ArrayList<String>(argc);\n\t\tif (argc == 0) {\n\t\t    return arguments;\n\t\t}\n\n                int psize = b64 ? 8 : 4;\n                Memory m = new Memory(psize);\n                try {\n                    if(LOGGER.isLoggable(FINER))\n                        LOGGER.finer(\"Reading \"+getFile(\"as\"));\n                    int fd = LIBC.open(getFile(\"as\").getAbsolutePath(), 0);\n                    try {\n                        for( int n=0; n<argc; n++ ) {\n                            \r\n                            LIBC.pread(fd, m, new NativeLong(psize), new NativeLong(argp+n*psize));\n                            long addr = b64 ? m.getLong(0) : to64(m.getInt(0));\n\n                            arguments.add(readLine(fd, addr, \"argv[\"+ n +\"]\"));\n                        }\n                    } finally {\n                        LIBC.close(fd);\n                    }\n                } catch (IOException | LastErrorException e) {\n                    \r\n                    \r\n                }\n\n                arguments = Collections.unmodifiableList(arguments);\n                return arguments;\n            }\n","realPath":"core/src/main/java/hudson/util/ProcessTree.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":1473,"status":"M"}],"commitId":"531972f113e6ff56f393512f0e17a59647fea54f","commitMessage":"@@@Merge pull request #4243 from res0nance/infer-types\n\nUse type inference instead of specifying it","date":"2019-10-02 15:46:53","modifiedFileCount":"44","status":"M","submitter":"Oleg Nenashev"}]
