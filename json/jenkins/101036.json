[{"authorTime":"2016-07-02 00:06:45","codes":[{"authorDate":"2016-07-02 00:06:45","commitOrder":3,"curCode":"    public static <T extends Descriptor> List<T> apply(Object context, Iterable<T> source) {\n        ExtensionList<DescriptorVisibilityFilter> filters = all();\n        List<T> r = new ArrayList<T>();\n        Class<?> contextClass = context == null ? null : context.getClass();\n\n        OUTER:\n        for (T d : source) {\n            if (LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.fine(\"Determining visibility of \" + d + \" in context \" + context);\n            }\n            for (DescriptorVisibilityFilter f : filters) {\n                if (LOGGER.isLoggable(Level.FINER)) {\n                    LOGGER.finer(\"Querying \" + f + \" for visibility of \" + d + \" in \" + context);\n                }\n                try {\n                    if (contextClass != null && !f.filterType(contextClass, d)) {\n                        if (LOGGER.isLoggable(Level.CONFIG)) {\n                            LOGGER.config(\"Filter \" + f + \" hides \" + d + \" in contexts of type \" + contextClass);\n                        }\n                        continue OUTER; \r\n                    }\n                    if (!f.filter(context, d)) {\n                        if (LOGGER.isLoggable(Level.CONFIG)) {\n                            LOGGER.config(\"Filter \" + f + \" hides \" + d + \" in context \" + context);\n                        }\n                        continue OUTER; \r\n                    }\n                } catch (Error e) {\n                    LOGGER.log(Level.WARNING, \"Encountered error while processing filter \" + f + \" for context \" + context, e);\n                    throw e;\n                } catch (Throwable e) {\n                    LOGGER.log(logLevelFor(f), \"Uncaught exception from filter \" + f + \" for context \" + context, e);\n                    continue OUTER; \r\n                }\n            }\n            r.add(d);\n        }\n        return r;\n    }\n","date":"2016-07-02 00:06:45","endLine":104,"groupId":"9316","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(Objectcontext@Iterable<T>source)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/83/8e3a0caf4309bc75a568fcc727fde31b74b292.src","preCode":"    public static <T extends Descriptor> List<T> apply(Object context, Iterable<T> source) {\n        ExtensionList<DescriptorVisibilityFilter> filters = all();\n        List<T> r = new ArrayList<T>();\n        Class<?> contextClass = context == null ? null : context.getClass();\n\n        OUTER:\n        for (T d : source) {\n            if (LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.fine(\"Determining visibility of \" + d + \" in context \" + context);\n            }\n            for (DescriptorVisibilityFilter f : filters) {\n                if (LOGGER.isLoggable(Level.FINER)) {\n                    LOGGER.finer(\"Querying \" + f + \" for visibility of \" + d + \" in \" + context);\n                }\n                try {\n                    if (contextClass != null && !f.filterType(contextClass, d)) {\n                        if (LOGGER.isLoggable(Level.CONFIG)) {\n                            LOGGER.config(\"Filter \" + f + \" hides \" + d + \" in contexts of type \" + contextClass);\n                        }\n                        continue OUTER; \r\n                    }\n                    if (!f.filter(context, d)) {\n                        if (LOGGER.isLoggable(Level.CONFIG)) {\n                            LOGGER.config(\"Filter \" + f + \" hides \" + d + \" in context \" + context);\n                        }\n                        continue OUTER; \r\n                    }\n                } catch (Error e) {\n                    LOGGER.log(Level.WARNING, \"Encountered error while processing filter \" + f + \" for context \" + context, e);\n                    throw e;\n                } catch (Throwable e) {\n                    LOGGER.log(logLevelFor(f), \"Uncaught exception from filter \" + f + \" for context \" + context, e);\n                    continue OUTER; \r\n                }\n            }\n            r.add(d);\n        }\n        return r;\n    }\n","realPath":"core/src/main/java/hudson/model/DescriptorVisibilityFilter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"MB"},{"authorDate":"2016-07-02 00:06:45","commitOrder":3,"curCode":"    public static <T extends Descriptor> List<T> applyType(Class<?> contextClass, Iterable<T> source) {\n        ExtensionList<DescriptorVisibilityFilter> filters = all();\n        List<T> r = new ArrayList<T>();\n\n        OUTER:\n        for (T d : source) {\n            if (LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.fine(\"Determining visibility of \" + d + \" in contexts of type \" + contextClass);\n            }\n            for (DescriptorVisibilityFilter f : filters) {\n                if (LOGGER.isLoggable(Level.FINER)) {\n                    LOGGER.finer(\"Querying \" + f + \" for visibility of \" + d + \" in type \" + contextClass);\n                }\n                try {\n                    if (contextClass != null && !f.filterType(contextClass, d)) {\n                        if (LOGGER.isLoggable(Level.CONFIG)) {\n                            LOGGER.config(\"Filter \" + f + \" hides \" + d + \" in contexts of type \" + contextClass);\n                        }\n                        continue OUTER; \r\n                    }\n                } catch (Error e) {\n                    LOGGER.log(Level.WARNING,\n                            \"Encountered error while processing filter \" + f + \" for contexts of type \" + contextClass, e);\n                    throw e;\n                } catch (Throwable e) {\n                    LOGGER.log(logLevelFor(f), \"Uncaught exception from filter \" + f + \" for context of type \" + contextClass, e);\n                    continue OUTER; \r\n                }\n            }\n            r.add(d);\n        }\n        return r;\n    }\n","date":"2016-07-02 00:06:45","endLine":138,"groupId":"9318","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"applyType","params":"(Class<?>contextClass@Iterable<T>source)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/83/8e3a0caf4309bc75a568fcc727fde31b74b292.src","preCode":"    public static <T extends Descriptor> List<T> applyType(Class<?> contextClass, Iterable<T> source) {\n        ExtensionList<DescriptorVisibilityFilter> filters = all();\n        List<T> r = new ArrayList<T>();\n\n        OUTER:\n        for (T d : source) {\n            if (LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.fine(\"Determining visibility of \" + d + \" in contexts of type \" + contextClass);\n            }\n            for (DescriptorVisibilityFilter f : filters) {\n                if (LOGGER.isLoggable(Level.FINER)) {\n                    LOGGER.finer(\"Querying \" + f + \" for visibility of \" + d + \" in type \" + contextClass);\n                }\n                try {\n                    if (contextClass != null && !f.filterType(contextClass, d)) {\n                        if (LOGGER.isLoggable(Level.CONFIG)) {\n                            LOGGER.config(\"Filter \" + f + \" hides \" + d + \" in contexts of type \" + contextClass);\n                        }\n                        continue OUTER; \r\n                    }\n                } catch (Error e) {\n                    LOGGER.log(Level.WARNING,\n                            \"Encountered error while processing filter \" + f + \" for contexts of type \" + contextClass, e);\n                    throw e;\n                } catch (Throwable e) {\n                    LOGGER.log(logLevelFor(f), \"Uncaught exception from filter \" + f + \" for context of type \" + contextClass, e);\n                    continue OUTER; \r\n                }\n            }\n            r.add(d);\n        }\n        return r;\n    }\n","realPath":"core/src/main/java/hudson/model/DescriptorVisibilityFilter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"}],"commitId":"5a0d7ece6a32be4e9df37f055a950c51c80ffdf8","commitMessage":"@@@Merge pull request #2427 from stephenc/jenkins-36280\n\n[FIXED JENKINS-36280] Enable DescriptorVisibilityFilter for Slave's C?","date":"2016-07-02 00:06:45","modifiedFileCount":"6","status":"M","submitter":"Stephen Connolly"},{"authorTime":"2016-07-02 00:06:45","codes":[{"authorDate":"2017-06-16 02:03:24","commitOrder":4,"curCode":"    public static <T extends Descriptor> List<T> apply(Object context, Iterable<T> source) {\n        ExtensionList<DescriptorVisibilityFilter> filters = all();\n        List<T> r = new ArrayList<T>();\n        Class<?> contextClass = context == null ? null : context.getClass();\n\n        if (source == null) {\n            \r\n            throw new NullPointerException(\"Descriptor list is null for context '\" + contextClass + \"' in thread '\" + Thread.currentThread().getName() + \"'\");\n        }\n\n        OUTER:\n        for (T d : source) {\n            if (LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.fine(\"Determining visibility of \" + d + \" in context \" + context);\n            }\n            for (DescriptorVisibilityFilter f : filters) {\n                if (LOGGER.isLoggable(Level.FINER)) {\n                    LOGGER.finer(\"Querying \" + f + \" for visibility of \" + d + \" in \" + context);\n                }\n                try {\n                    if (contextClass != null && !f.filterType(contextClass, d)) {\n                        if (LOGGER.isLoggable(Level.CONFIG)) {\n                            LOGGER.config(\"Filter \" + f + \" hides \" + d + \" in contexts of type \" + contextClass);\n                        }\n                        continue OUTER; \r\n                    }\n                    if (!f.filter(context, d)) {\n                        if (LOGGER.isLoggable(Level.CONFIG)) {\n                            LOGGER.config(\"Filter \" + f + \" hides \" + d + \" in context \" + context);\n                        }\n                        continue OUTER; \r\n                    }\n                } catch (Error e) {\n                    LOGGER.log(Level.WARNING, \"Encountered error while processing filter \" + f + \" for context \" + context, e);\n                    throw e;\n                } catch (Throwable e) {\n                    LOGGER.log(logLevelFor(f), \"Uncaught exception from filter \" + f + \" for context \" + context, e);\n                    continue OUTER; \r\n                }\n            }\n            r.add(d);\n        }\n        return r;\n    }\n","date":"2017-06-16 02:03:24","endLine":109,"groupId":"9316","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(Objectcontext@Iterable<T>source)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e4/49569500d8afee5de19199c97d83762af5b3f4.src","preCode":"    public static <T extends Descriptor> List<T> apply(Object context, Iterable<T> source) {\n        ExtensionList<DescriptorVisibilityFilter> filters = all();\n        List<T> r = new ArrayList<T>();\n        Class<?> contextClass = context == null ? null : context.getClass();\n\n        OUTER:\n        for (T d : source) {\n            if (LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.fine(\"Determining visibility of \" + d + \" in context \" + context);\n            }\n            for (DescriptorVisibilityFilter f : filters) {\n                if (LOGGER.isLoggable(Level.FINER)) {\n                    LOGGER.finer(\"Querying \" + f + \" for visibility of \" + d + \" in \" + context);\n                }\n                try {\n                    if (contextClass != null && !f.filterType(contextClass, d)) {\n                        if (LOGGER.isLoggable(Level.CONFIG)) {\n                            LOGGER.config(\"Filter \" + f + \" hides \" + d + \" in contexts of type \" + contextClass);\n                        }\n                        continue OUTER; \r\n                    }\n                    if (!f.filter(context, d)) {\n                        if (LOGGER.isLoggable(Level.CONFIG)) {\n                            LOGGER.config(\"Filter \" + f + \" hides \" + d + \" in context \" + context);\n                        }\n                        continue OUTER; \r\n                    }\n                } catch (Error e) {\n                    LOGGER.log(Level.WARNING, \"Encountered error while processing filter \" + f + \" for context \" + context, e);\n                    throw e;\n                } catch (Throwable e) {\n                    LOGGER.log(logLevelFor(f), \"Uncaught exception from filter \" + f + \" for context \" + context, e);\n                    continue OUTER; \r\n                }\n            }\n            r.add(d);\n        }\n        return r;\n    }\n","realPath":"core/src/main/java/hudson/model/DescriptorVisibilityFilter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2016-07-02 00:06:45","commitOrder":4,"curCode":"    public static <T extends Descriptor> List<T> applyType(Class<?> contextClass, Iterable<T> source) {\n        ExtensionList<DescriptorVisibilityFilter> filters = all();\n        List<T> r = new ArrayList<T>();\n\n        OUTER:\n        for (T d : source) {\n            if (LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.fine(\"Determining visibility of \" + d + \" in contexts of type \" + contextClass);\n            }\n            for (DescriptorVisibilityFilter f : filters) {\n                if (LOGGER.isLoggable(Level.FINER)) {\n                    LOGGER.finer(\"Querying \" + f + \" for visibility of \" + d + \" in type \" + contextClass);\n                }\n                try {\n                    if (contextClass != null && !f.filterType(contextClass, d)) {\n                        if (LOGGER.isLoggable(Level.CONFIG)) {\n                            LOGGER.config(\"Filter \" + f + \" hides \" + d + \" in contexts of type \" + contextClass);\n                        }\n                        continue OUTER; \r\n                    }\n                } catch (Error e) {\n                    LOGGER.log(Level.WARNING,\n                            \"Encountered error while processing filter \" + f + \" for contexts of type \" + contextClass, e);\n                    throw e;\n                } catch (Throwable e) {\n                    LOGGER.log(logLevelFor(f), \"Uncaught exception from filter \" + f + \" for context of type \" + contextClass, e);\n                    continue OUTER; \r\n                }\n            }\n            r.add(d);\n        }\n        return r;\n    }\n","date":"2016-07-02 00:06:45","endLine":138,"groupId":"9318","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"applyType","params":"(Class<?>contextClass@Iterable<T>source)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/83/8e3a0caf4309bc75a568fcc727fde31b74b292.src","preCode":"    public static <T extends Descriptor> List<T> applyType(Class<?> contextClass, Iterable<T> source) {\n        ExtensionList<DescriptorVisibilityFilter> filters = all();\n        List<T> r = new ArrayList<T>();\n\n        OUTER:\n        for (T d : source) {\n            if (LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.fine(\"Determining visibility of \" + d + \" in contexts of type \" + contextClass);\n            }\n            for (DescriptorVisibilityFilter f : filters) {\n                if (LOGGER.isLoggable(Level.FINER)) {\n                    LOGGER.finer(\"Querying \" + f + \" for visibility of \" + d + \" in type \" + contextClass);\n                }\n                try {\n                    if (contextClass != null && !f.filterType(contextClass, d)) {\n                        if (LOGGER.isLoggable(Level.CONFIG)) {\n                            LOGGER.config(\"Filter \" + f + \" hides \" + d + \" in contexts of type \" + contextClass);\n                        }\n                        continue OUTER; \r\n                    }\n                } catch (Error e) {\n                    LOGGER.log(Level.WARNING,\n                            \"Encountered error while processing filter \" + f + \" for contexts of type \" + contextClass, e);\n                    throw e;\n                } catch (Throwable e) {\n                    LOGGER.log(logLevelFor(f), \"Uncaught exception from filter \" + f + \" for context of type \" + contextClass, e);\n                    continue OUTER; \r\n                }\n            }\n            r.add(d);\n        }\n        return r;\n    }\n","realPath":"core/src/main/java/hudson/model/DescriptorVisibilityFilter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"}],"commitId":"70f80e97c7fcdf112812923c6439773628239a53","commitMessage":"@@@Merge pull request #2919 from olivergondza/visiblity-filter\n\n[FIXED JENKINS-40545] Diagnose NPE in DescriptorVisibilityFilter.apply","date":"2017-06-16 02:03:24","modifiedFileCount":"1","status":"M","submitter":"Oliver Gond?a"},{"authorTime":"2019-04-08 23:18:26","codes":[{"authorDate":"2019-04-08 23:18:26","commitOrder":5,"curCode":"    public static <T extends Descriptor> List<T> apply(Object context, Iterable<T> source) {\n        ExtensionList<DescriptorVisibilityFilter> filters = all();\n        List<T> r = new ArrayList<>();\n        Class<?> contextClass = context == null ? null : context.getClass();\n\n        if (source == null) {\n            \r\n            throw new NullPointerException(\"Descriptor list is null for context '\" + contextClass + \"' in thread '\" + Thread.currentThread().getName() + \"'\");\n        }\n\n        OUTER:\n        for (T d : source) {\n            if (LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.fine(\"Determining visibility of \" + d + \" in context \" + context);\n            }\n            for (DescriptorVisibilityFilter f : filters) {\n                if (LOGGER.isLoggable(Level.FINER)) {\n                    LOGGER.finer(\"Querying \" + f + \" for visibility of \" + d + \" in \" + context);\n                }\n                try {\n                    if (contextClass != null && !f.filterType(contextClass, d)) {\n                        if (LOGGER.isLoggable(Level.CONFIG)) {\n                            LOGGER.config(\"Filter \" + f + \" hides \" + d + \" in contexts of type \" + contextClass);\n                        }\n                        continue OUTER; \r\n                    }\n                    if (!f.filter(context, d)) {\n                        if (LOGGER.isLoggable(Level.CONFIG)) {\n                            LOGGER.config(\"Filter \" + f + \" hides \" + d + \" in context \" + context);\n                        }\n                        continue OUTER; \r\n                    }\n                } catch (Error e) {\n                    LOGGER.log(Level.WARNING, \"Encountered error while processing filter \" + f + \" for context \" + context, e);\n                    throw e;\n                } catch (Throwable e) {\n                    LOGGER.log(logLevelFor(f), \"Uncaught exception from filter \" + f + \" for context \" + context, e);\n                    continue OUTER; \r\n                }\n            }\n            r.add(d);\n        }\n        return r;\n    }\n","date":"2019-04-08 23:18:26","endLine":109,"groupId":"101036","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(Objectcontext@Iterable<T>source)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ef/099a64dc77ff013567e4269652567a61584df7.src","preCode":"    public static <T extends Descriptor> List<T> apply(Object context, Iterable<T> source) {\n        ExtensionList<DescriptorVisibilityFilter> filters = all();\n        List<T> r = new ArrayList<T>();\n        Class<?> contextClass = context == null ? null : context.getClass();\n\n        if (source == null) {\n            \r\n            throw new NullPointerException(\"Descriptor list is null for context '\" + contextClass + \"' in thread '\" + Thread.currentThread().getName() + \"'\");\n        }\n\n        OUTER:\n        for (T d : source) {\n            if (LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.fine(\"Determining visibility of \" + d + \" in context \" + context);\n            }\n            for (DescriptorVisibilityFilter f : filters) {\n                if (LOGGER.isLoggable(Level.FINER)) {\n                    LOGGER.finer(\"Querying \" + f + \" for visibility of \" + d + \" in \" + context);\n                }\n                try {\n                    if (contextClass != null && !f.filterType(contextClass, d)) {\n                        if (LOGGER.isLoggable(Level.CONFIG)) {\n                            LOGGER.config(\"Filter \" + f + \" hides \" + d + \" in contexts of type \" + contextClass);\n                        }\n                        continue OUTER; \r\n                    }\n                    if (!f.filter(context, d)) {\n                        if (LOGGER.isLoggable(Level.CONFIG)) {\n                            LOGGER.config(\"Filter \" + f + \" hides \" + d + \" in context \" + context);\n                        }\n                        continue OUTER; \r\n                    }\n                } catch (Error e) {\n                    LOGGER.log(Level.WARNING, \"Encountered error while processing filter \" + f + \" for context \" + context, e);\n                    throw e;\n                } catch (Throwable e) {\n                    LOGGER.log(logLevelFor(f), \"Uncaught exception from filter \" + f + \" for context \" + context, e);\n                    continue OUTER; \r\n                }\n            }\n            r.add(d);\n        }\n        return r;\n    }\n","realPath":"core/src/main/java/hudson/model/DescriptorVisibilityFilter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2019-04-08 23:18:26","commitOrder":5,"curCode":"    public static <T extends Descriptor> List<T> applyType(Class<?> contextClass, Iterable<T> source) {\n        ExtensionList<DescriptorVisibilityFilter> filters = all();\n        List<T> r = new ArrayList<>();\n\n        OUTER:\n        for (T d : source) {\n            if (LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.fine(\"Determining visibility of \" + d + \" in contexts of type \" + contextClass);\n            }\n            for (DescriptorVisibilityFilter f : filters) {\n                if (LOGGER.isLoggable(Level.FINER)) {\n                    LOGGER.finer(\"Querying \" + f + \" for visibility of \" + d + \" in type \" + contextClass);\n                }\n                try {\n                    if (contextClass != null && !f.filterType(contextClass, d)) {\n                        if (LOGGER.isLoggable(Level.CONFIG)) {\n                            LOGGER.config(\"Filter \" + f + \" hides \" + d + \" in contexts of type \" + contextClass);\n                        }\n                        continue OUTER; \r\n                    }\n                } catch (Error e) {\n                    LOGGER.log(Level.WARNING,\n                            \"Encountered error while processing filter \" + f + \" for contexts of type \" + contextClass, e);\n                    throw e;\n                } catch (Throwable e) {\n                    LOGGER.log(logLevelFor(f), \"Uncaught exception from filter \" + f + \" for context of type \" + contextClass, e);\n                    continue OUTER; \r\n                }\n            }\n            r.add(d);\n        }\n        return r;\n    }\n","date":"2019-04-08 23:18:26","endLine":143,"groupId":"101036","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"applyType","params":"(Class<?>contextClass@Iterable<T>source)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ef/099a64dc77ff013567e4269652567a61584df7.src","preCode":"    public static <T extends Descriptor> List<T> applyType(Class<?> contextClass, Iterable<T> source) {\n        ExtensionList<DescriptorVisibilityFilter> filters = all();\n        List<T> r = new ArrayList<T>();\n\n        OUTER:\n        for (T d : source) {\n            if (LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.fine(\"Determining visibility of \" + d + \" in contexts of type \" + contextClass);\n            }\n            for (DescriptorVisibilityFilter f : filters) {\n                if (LOGGER.isLoggable(Level.FINER)) {\n                    LOGGER.finer(\"Querying \" + f + \" for visibility of \" + d + \" in type \" + contextClass);\n                }\n                try {\n                    if (contextClass != null && !f.filterType(contextClass, d)) {\n                        if (LOGGER.isLoggable(Level.CONFIG)) {\n                            LOGGER.config(\"Filter \" + f + \" hides \" + d + \" in contexts of type \" + contextClass);\n                        }\n                        continue OUTER; \r\n                    }\n                } catch (Error e) {\n                    LOGGER.log(Level.WARNING,\n                            \"Encountered error while processing filter \" + f + \" for contexts of type \" + contextClass, e);\n                    throw e;\n                } catch (Throwable e) {\n                    LOGGER.log(logLevelFor(f), \"Uncaught exception from filter \" + f + \" for context of type \" + contextClass, e);\n                    continue OUTER; \r\n                }\n            }\n            r.add(d);\n        }\n        return r;\n    }\n","realPath":"core/src/main/java/hudson/model/DescriptorVisibilityFilter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"6b4c6c955d10ade9b78ab02fd2733cc29e0b1ab3","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2019-04-08 23:18:26","modifiedFileCount":"242","status":"M","submitter":"Daniel Beck"}]
