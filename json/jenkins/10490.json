[{"authorTime":"2017-12-14 01:53:14","codes":[{"authorDate":"2017-12-14 01:53:14","commitOrder":1,"curCode":"    public void retentionFiltering() throws Exception {\n        DumbSlave.DescriptorImpl descriptor =\n                j.getInstance().getDescriptorByType(DumbSlave.DescriptorImpl.class);\n        DescriptorExtensionList<RetentionStrategy<?>, Descriptor<RetentionStrategy<?>>> descriptors = RetentionStrategy.all();\n        assumeThat(\"we need at least two retention strategies to test this\", descriptors.size(), not(anyOf(is(0), is(1))));\n        assertThat(descriptor.retentionStrategyDescriptors(null), containsInAnyOrder(descriptors.toArray(new Descriptor[descriptors.size()])));\n\n        Descriptor<RetentionStrategy<?>> victim = descriptors.iterator().next();\n        assertThat(descriptor.retentionStrategyDescriptors(null), hasItem(victim));\n        DynamicFilter.descriptors().add(victim);\n        assertThat(descriptor.retentionStrategyDescriptors(null), not(hasItem(victim)));\n        DynamicFilter.descriptors().remove(victim);\n        assertThat(descriptor.retentionStrategyDescriptors(null), hasItem(victim));\n    }\n","date":"2017-12-14 01:53:14","endLine":212,"groupId":"5550","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"retentionFiltering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/76/823820c3d4788dcf5465eb430b387c384b13a5.src","preCode":"    public void retentionFiltering() throws Exception {\n        DumbSlave.DescriptorImpl descriptor =\n                j.getInstance().getDescriptorByType(DumbSlave.DescriptorImpl.class);\n        DescriptorExtensionList<RetentionStrategy<?>, Descriptor<RetentionStrategy<?>>> descriptors = RetentionStrategy.all();\n        assumeThat(\"we need at least two retention strategies to test this\", descriptors.size(), not(anyOf(is(0), is(1))));\n        assertThat(descriptor.retentionStrategyDescriptors(null), containsInAnyOrder(descriptors.toArray(new Descriptor[descriptors.size()])));\n\n        Descriptor<RetentionStrategy<?>> victim = descriptors.iterator().next();\n        assertThat(descriptor.retentionStrategyDescriptors(null), hasItem(victim));\n        DynamicFilter.descriptors().add(victim);\n        assertThat(descriptor.retentionStrategyDescriptors(null), not(hasItem(victim)));\n        DynamicFilter.descriptors().remove(victim);\n        assertThat(descriptor.retentionStrategyDescriptors(null), hasItem(victim));\n    }\n","realPath":"test/src/test/java/hudson/model/SlaveTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"B"},{"authorDate":"2017-12-14 01:53:14","commitOrder":1,"curCode":"    public void propertyFiltering() throws Exception {\n        DumbSlave.DescriptorImpl descriptor =\n                j.getInstance().getDescriptorByType(DumbSlave.DescriptorImpl.class);\n        DescriptorExtensionList<NodeProperty<?>, NodePropertyDescriptor> descriptors = NodeProperty.all();\n        assumeThat(\"we need at least two node properties to test this\", descriptors.size(), not(anyOf(is(0), is(1))));\n        assertThat(descriptor.nodePropertyDescriptors(null), containsInAnyOrder(descriptors.toArray(new Descriptor[descriptors.size()])));\n\n        NodePropertyDescriptor victim = descriptors.iterator().next();\n        assertThat(descriptor.nodePropertyDescriptors(null), hasItem(victim));\n        DynamicFilter.descriptors().add(victim);\n        assertThat(descriptor.nodePropertyDescriptors(null), not(hasItem(victim)));\n        DynamicFilter.descriptors().remove(victim);\n        assertThat(descriptor.nodePropertyDescriptors(null), hasItem(victim));\n    }\n","date":"2017-12-14 01:53:14","endLine":229,"groupId":"5548","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"propertyFiltering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/76/823820c3d4788dcf5465eb430b387c384b13a5.src","preCode":"    public void propertyFiltering() throws Exception {\n        DumbSlave.DescriptorImpl descriptor =\n                j.getInstance().getDescriptorByType(DumbSlave.DescriptorImpl.class);\n        DescriptorExtensionList<NodeProperty<?>, NodePropertyDescriptor> descriptors = NodeProperty.all();\n        assumeThat(\"we need at least two node properties to test this\", descriptors.size(), not(anyOf(is(0), is(1))));\n        assertThat(descriptor.nodePropertyDescriptors(null), containsInAnyOrder(descriptors.toArray(new Descriptor[descriptors.size()])));\n\n        NodePropertyDescriptor victim = descriptors.iterator().next();\n        assertThat(descriptor.nodePropertyDescriptors(null), hasItem(victim));\n        DynamicFilter.descriptors().add(victim);\n        assertThat(descriptor.nodePropertyDescriptors(null), not(hasItem(victim)));\n        DynamicFilter.descriptors().remove(victim);\n        assertThat(descriptor.nodePropertyDescriptors(null), hasItem(victim));\n    }\n","realPath":"test/src/test/java/hudson/model/SlaveTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"B"}],"commitId":"c0ba0527eece7e1fbcb2fc037f8e25542bc8dd45","commitMessage":"@@@Merge commit '78adf02addc47ccb2629c9bb9101a8dd630b22a5'\n","date":"2017-12-14 01:53:14","modifiedFileCount":"66","status":"B","submitter":"Jesse Glick"},{"authorTime":"2019-08-13 18:21:22","codes":[{"authorDate":"2017-12-14 01:53:14","commitOrder":2,"curCode":"    public void retentionFiltering() throws Exception {\n        DumbSlave.DescriptorImpl descriptor =\n                j.getInstance().getDescriptorByType(DumbSlave.DescriptorImpl.class);\n        DescriptorExtensionList<RetentionStrategy<?>, Descriptor<RetentionStrategy<?>>> descriptors = RetentionStrategy.all();\n        assumeThat(\"we need at least two retention strategies to test this\", descriptors.size(), not(anyOf(is(0), is(1))));\n        assertThat(descriptor.retentionStrategyDescriptors(null), containsInAnyOrder(descriptors.toArray(new Descriptor[descriptors.size()])));\n\n        Descriptor<RetentionStrategy<?>> victim = descriptors.iterator().next();\n        assertThat(descriptor.retentionStrategyDescriptors(null), hasItem(victim));\n        DynamicFilter.descriptors().add(victim);\n        assertThat(descriptor.retentionStrategyDescriptors(null), not(hasItem(victim)));\n        DynamicFilter.descriptors().remove(victim);\n        assertThat(descriptor.retentionStrategyDescriptors(null), hasItem(victim));\n    }\n","date":"2017-12-14 01:53:14","endLine":212,"groupId":"5550","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"retentionFiltering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/76/823820c3d4788dcf5465eb430b387c384b13a5.src","preCode":"    public void retentionFiltering() throws Exception {\n        DumbSlave.DescriptorImpl descriptor =\n                j.getInstance().getDescriptorByType(DumbSlave.DescriptorImpl.class);\n        DescriptorExtensionList<RetentionStrategy<?>, Descriptor<RetentionStrategy<?>>> descriptors = RetentionStrategy.all();\n        assumeThat(\"we need at least two retention strategies to test this\", descriptors.size(), not(anyOf(is(0), is(1))));\n        assertThat(descriptor.retentionStrategyDescriptors(null), containsInAnyOrder(descriptors.toArray(new Descriptor[descriptors.size()])));\n\n        Descriptor<RetentionStrategy<?>> victim = descriptors.iterator().next();\n        assertThat(descriptor.retentionStrategyDescriptors(null), hasItem(victim));\n        DynamicFilter.descriptors().add(victim);\n        assertThat(descriptor.retentionStrategyDescriptors(null), not(hasItem(victim)));\n        DynamicFilter.descriptors().remove(victim);\n        assertThat(descriptor.retentionStrategyDescriptors(null), hasItem(victim));\n    }\n","realPath":"test/src/test/java/hudson/model/SlaveTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"N"},{"authorDate":"2019-08-13 18:21:22","commitOrder":2,"curCode":"    public void propertyFiltering() throws Exception {\n        j.jenkins.setAuthorizationStrategy(new ProjectMatrixAuthorizationStrategy()); \r\n        DumbSlave.DescriptorImpl descriptor =\n                j.getInstance().getDescriptorByType(DumbSlave.DescriptorImpl.class);\n        DescriptorExtensionList<NodeProperty<?>, NodePropertyDescriptor> descriptors = NodeProperty.all();\n        assumeThat(\"we need at least two node properties to test this\", descriptors.size(), not(anyOf(is(0), is(1))));\n        assertThat(descriptor.nodePropertyDescriptors(null), containsInAnyOrder(descriptors.toArray(new Descriptor[descriptors.size()])));\n\n        NodePropertyDescriptor victim = descriptors.iterator().next();\n        assertThat(descriptor.nodePropertyDescriptors(null), hasItem(victim));\n        DynamicFilter.descriptors().add(victim);\n        assertThat(descriptor.nodePropertyDescriptors(null), not(hasItem(victim)));\n        DynamicFilter.descriptors().remove(victim);\n        assertThat(descriptor.nodePropertyDescriptors(null), hasItem(victim));\n    }\n","date":"2019-08-13 18:21:22","endLine":231,"groupId":"5548","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"propertyFiltering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/45/9c2ecfde255dda559a83a079f96b5c2c6909d5.src","preCode":"    public void propertyFiltering() throws Exception {\n        DumbSlave.DescriptorImpl descriptor =\n                j.getInstance().getDescriptorByType(DumbSlave.DescriptorImpl.class);\n        DescriptorExtensionList<NodeProperty<?>, NodePropertyDescriptor> descriptors = NodeProperty.all();\n        assumeThat(\"we need at least two node properties to test this\", descriptors.size(), not(anyOf(is(0), is(1))));\n        assertThat(descriptor.nodePropertyDescriptors(null), containsInAnyOrder(descriptors.toArray(new Descriptor[descriptors.size()])));\n\n        NodePropertyDescriptor victim = descriptors.iterator().next();\n        assertThat(descriptor.nodePropertyDescriptors(null), hasItem(victim));\n        DynamicFilter.descriptors().add(victim);\n        assertThat(descriptor.nodePropertyDescriptors(null), not(hasItem(victim)));\n        DynamicFilter.descriptors().remove(victim);\n        assertThat(descriptor.nodePropertyDescriptors(null), hasItem(victim));\n    }\n","realPath":"test/src/test/java/hudson/model/SlaveTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"}],"commitId":"d5453e0af79072b84eb97e4bf081a98a44f602d7","commitMessage":"@@@Merge commit '17d45ff1ae22a961dedb0b914ffd7ecdfadff005' of https://github.com/jenkinsci/jenkins\n","date":"2019-08-13 18:21:22","modifiedFileCount":"18","status":"M","submitter":"Daniel Beck"},{"authorTime":"2020-08-11 14:52:06","codes":[{"authorDate":"2020-08-11 14:52:06","commitOrder":3,"curCode":"    public void retentionFiltering() {\n        DumbSlave.DescriptorImpl descriptor =\n                j.getInstance().getDescriptorByType(DumbSlave.DescriptorImpl.class);\n        DescriptorExtensionList<RetentionStrategy<?>, Descriptor<RetentionStrategy<?>>> descriptors = RetentionStrategy.all();\n        assumeThat(\"we need at least two retention strategies to test this\", descriptors.size(), not(anyOf(is(0), is(1))));\n        assertThat(descriptor.retentionStrategyDescriptors(null), containsInAnyOrder(descriptors.toArray(new Descriptor[descriptors.size()])));\n\n        Descriptor<RetentionStrategy<?>> victim = descriptors.iterator().next();\n        assertThat(descriptor.retentionStrategyDescriptors(null), hasItem(victim));\n        DynamicFilter.descriptors().add(victim);\n        assertThat(descriptor.retentionStrategyDescriptors(null), not(hasItem(victim)));\n        DynamicFilter.descriptors().remove(victim);\n        assertThat(descriptor.retentionStrategyDescriptors(null), hasItem(victim));\n    }\n","date":"2020-08-11 14:52:06","endLine":216,"groupId":"10490","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"retentionFiltering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/9e/db518ea64aa747b8198bc2dc2ec1fd69b5508e.src","preCode":"    public void retentionFiltering() throws Exception {\n        DumbSlave.DescriptorImpl descriptor =\n                j.getInstance().getDescriptorByType(DumbSlave.DescriptorImpl.class);\n        DescriptorExtensionList<RetentionStrategy<?>, Descriptor<RetentionStrategy<?>>> descriptors = RetentionStrategy.all();\n        assumeThat(\"we need at least two retention strategies to test this\", descriptors.size(), not(anyOf(is(0), is(1))));\n        assertThat(descriptor.retentionStrategyDescriptors(null), containsInAnyOrder(descriptors.toArray(new Descriptor[descriptors.size()])));\n\n        Descriptor<RetentionStrategy<?>> victim = descriptors.iterator().next();\n        assertThat(descriptor.retentionStrategyDescriptors(null), hasItem(victim));\n        DynamicFilter.descriptors().add(victim);\n        assertThat(descriptor.retentionStrategyDescriptors(null), not(hasItem(victim)));\n        DynamicFilter.descriptors().remove(victim);\n        assertThat(descriptor.retentionStrategyDescriptors(null), hasItem(victim));\n    }\n","realPath":"test/src/test/java/hudson/model/SlaveTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"},{"authorDate":"2020-08-11 14:52:06","commitOrder":3,"curCode":"    public void propertyFiltering() {\n        j.jenkins.setAuthorizationStrategy(new ProjectMatrixAuthorizationStrategy()); \r\n        DumbSlave.DescriptorImpl descriptor =\n                j.getInstance().getDescriptorByType(DumbSlave.DescriptorImpl.class);\n        DescriptorExtensionList<NodeProperty<?>, NodePropertyDescriptor> descriptors = NodeProperty.all();\n        assumeThat(\"we need at least two node properties to test this\", descriptors.size(), not(anyOf(is(0), is(1))));\n        assertThat(descriptor.nodePropertyDescriptors(null), containsInAnyOrder(descriptors.toArray(new Descriptor[descriptors.size()])));\n\n        NodePropertyDescriptor victim = descriptors.iterator().next();\n        assertThat(descriptor.nodePropertyDescriptors(null), hasItem(victim));\n        DynamicFilter.descriptors().add(victim);\n        assertThat(descriptor.nodePropertyDescriptors(null), not(hasItem(victim)));\n        DynamicFilter.descriptors().remove(victim);\n        assertThat(descriptor.nodePropertyDescriptors(null), hasItem(victim));\n    }\n","date":"2020-08-11 14:52:06","endLine":234,"groupId":"10490","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"propertyFiltering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/9e/db518ea64aa747b8198bc2dc2ec1fd69b5508e.src","preCode":"    public void propertyFiltering() throws Exception {\n        j.jenkins.setAuthorizationStrategy(new ProjectMatrixAuthorizationStrategy()); \r\n        DumbSlave.DescriptorImpl descriptor =\n                j.getInstance().getDescriptorByType(DumbSlave.DescriptorImpl.class);\n        DescriptorExtensionList<NodeProperty<?>, NodePropertyDescriptor> descriptors = NodeProperty.all();\n        assumeThat(\"we need at least two node properties to test this\", descriptors.size(), not(anyOf(is(0), is(1))));\n        assertThat(descriptor.nodePropertyDescriptors(null), containsInAnyOrder(descriptors.toArray(new Descriptor[descriptors.size()])));\n\n        NodePropertyDescriptor victim = descriptors.iterator().next();\n        assertThat(descriptor.nodePropertyDescriptors(null), hasItem(victim));\n        DynamicFilter.descriptors().add(victim);\n        assertThat(descriptor.nodePropertyDescriptors(null), not(hasItem(victim)));\n        DynamicFilter.descriptors().remove(victim);\n        assertThat(descriptor.nodePropertyDescriptors(null), hasItem(victim));\n    }\n","realPath":"test/src/test/java/hudson/model/SlaveTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"}],"commitId":"f91b1f76629611185cb0c9624bfd40e0a2872f4f","commitMessage":"@@@minor test refactoring around StandardCharsets.  simplified JUnit assertions.  removed obsolete throws.  fixed deprecation warnings (#4872)\n\n","date":"2020-08-11 14:52:06","modifiedFileCount":"14","status":"M","submitter":"StefanSpieker"}]
