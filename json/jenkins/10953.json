[{"authorTime":"2014-04-11 08:58:30","codes":[{"authorDate":"2014-04-11 08:58:30","commitOrder":15,"curCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        AbstractProject nearest = AbstractProject.findNearest(projectName,project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof AbstractProject))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (auth.equals(ACL.SYSTEM) && !QueueItemAuthenticatorConfiguration.get().getAuthenticators().isEmpty()) {\n                        auth = Jenkins.ANONYMOUS; \r\n                    }\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2014-04-11 08:58:30","endLine":402,"groupId":"4806","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doCheck","params":"(@AncestorInPathAbstractProjectproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/2e/b0aa075b0da1c2d8c4310ae646e857e0721ddd.src","preCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        AbstractProject nearest = AbstractProject.findNearest(projectName,project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof AbstractProject))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (auth.equals(ACL.SYSTEM) && !QueueItemAuthenticatorConfiguration.get().getAuthenticators().isEmpty()) {\n                        auth = Jenkins.ANONYMOUS; \r\n                    }\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"MB"},{"authorDate":"2014-04-11 08:58:30","commitOrder":15,"curCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Job item = Jenkins.getInstance().getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2014-04-11 08:58:30","endLine":202,"groupId":"2421","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doCheckUpstreamProjects","params":"(@AncestorInPathJobproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/1c/f4358b224ccda3b429dcf8d1cc2b57ce78e2d7.src","preCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Job item = Jenkins.getInstance().getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"}],"commitId":"840bb66944783f07dc551062f8274a6608a11214","commitMessage":"@@@Replacing pseudoUpstreamTrigger with ReverseBuildTrigger.","date":"2014-04-11 08:58:30","modifiedFileCount":"5","status":"M","submitter":"Jesse Glick"},{"authorTime":"2014-04-12 03:59:41","codes":[{"authorDate":"2014-04-11 08:58:30","commitOrder":16,"curCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        AbstractProject nearest = AbstractProject.findNearest(projectName,project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof AbstractProject))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (auth.equals(ACL.SYSTEM) && !QueueItemAuthenticatorConfiguration.get().getAuthenticators().isEmpty()) {\n                        auth = Jenkins.ANONYMOUS; \r\n                    }\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2014-04-11 08:58:30","endLine":402,"groupId":"4806","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doCheck","params":"(@AncestorInPathAbstractProjectproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/2e/b0aa075b0da1c2d8c4310ae646e857e0721ddd.src","preCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        AbstractProject nearest = AbstractProject.findNearest(projectName,project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof AbstractProject))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (auth.equals(ACL.SYSTEM) && !QueueItemAuthenticatorConfiguration.get().getAuthenticators().isEmpty()) {\n                        auth = Jenkins.ANONYMOUS; \r\n                    }\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"N"},{"authorDate":"2014-04-12 03:59:41","commitOrder":16,"curCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Jenkins jenkins = Jenkins.getInstance();\n                    if (jenkins == null) {\n                        return FormValidation.ok();\n                    }\n                    Job item = jenkins.getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2014-04-12 03:59:41","endLine":206,"groupId":"498","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doCheckUpstreamProjects","params":"(@AncestorInPathJobproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/15/1eef6ce39e7c4c65df813fff9bfaba0781f024.src","preCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Job item = Jenkins.getInstance().getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"}],"commitId":"32a8e9dd2a04e61d7ba6ceea66f2ca6021722e5b","commitMessage":"@@@Some mistakes turned up by FindBugs and BuildTriggerTest stack traces.","date":"2014-04-12 03:59:41","modifiedFileCount":"1","status":"M","submitter":"Jesse Glick"},{"authorTime":"2016-03-08 06:08:36","codes":[{"authorDate":"2014-04-11 08:58:30","commitOrder":17,"curCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        AbstractProject nearest = AbstractProject.findNearest(projectName,project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof AbstractProject))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (auth.equals(ACL.SYSTEM) && !QueueItemAuthenticatorConfiguration.get().getAuthenticators().isEmpty()) {\n                        auth = Jenkins.ANONYMOUS; \r\n                    }\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2014-04-11 08:58:30","endLine":402,"groupId":"4806","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doCheck","params":"(@AncestorInPathAbstractProjectproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/2e/b0aa075b0da1c2d8c4310ae646e857e0721ddd.src","preCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        AbstractProject nearest = AbstractProject.findNearest(projectName,project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof AbstractProject))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (auth.equals(ACL.SYSTEM) && !QueueItemAuthenticatorConfiguration.get().getAuthenticators().isEmpty()) {\n                        auth = Jenkins.ANONYMOUS; \r\n                    }\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"N"},{"authorDate":"2016-03-08 06:08:36","commitOrder":17,"curCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Jenkins jenkins = Jenkins.getInstanceOrNull();\n                    if (jenkins == null) {\n                        return FormValidation.ok();\n                    }\n                    Job item = jenkins.getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2016-03-08 06:08:36","endLine":223,"groupId":"498","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doCheckUpstreamProjects","params":"(@AncestorInPathJobproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/cc/5e3a8f14bfc7b74327db63593835cb8b97b2d0.src","preCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Jenkins jenkins = Jenkins.getInstance();\n                    if (jenkins == null) {\n                        return FormValidation.ok();\n                    }\n                    Job item = jenkins.getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"bb7c8fcedbcc9b51c5b1bb5b32810af5ac6b1ffb","commitMessage":"@@@Jenkins.getInstance() should be non-null\n\n- It is never too late to do the right thing.\n- The vast majority of usages of `Jenkins.getInstance()` in core currently assume that its return value is non-null\n- This commit changes those that are written to correctly check for non-null values will call `Jenkins.getInstanceOrNull()`\n- We deprecate the `Jenkins.getActiveInstance()` madness\n- I checked with @kohsuke who said not to bother with a PR and just commit this strongly opinionated change direct to master as a PR will just degrade into a bikeshedding.\n","date":"2016-03-08 06:08:36","modifiedFileCount":"42","status":"M","submitter":"Stephen Connolly"},{"authorTime":"2016-03-09 05:09:28","codes":[{"authorDate":"2014-04-11 08:58:30","commitOrder":18,"curCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        AbstractProject nearest = AbstractProject.findNearest(projectName,project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof AbstractProject))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (auth.equals(ACL.SYSTEM) && !QueueItemAuthenticatorConfiguration.get().getAuthenticators().isEmpty()) {\n                        auth = Jenkins.ANONYMOUS; \r\n                    }\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2014-04-11 08:58:30","endLine":402,"groupId":"4806","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doCheck","params":"(@AncestorInPathAbstractProjectproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/2e/b0aa075b0da1c2d8c4310ae646e857e0721ddd.src","preCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        AbstractProject nearest = AbstractProject.findNearest(projectName,project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof AbstractProject))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (auth.equals(ACL.SYSTEM) && !QueueItemAuthenticatorConfiguration.get().getAuthenticators().isEmpty()) {\n                        auth = Jenkins.ANONYMOUS; \r\n                    }\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"N"},{"authorDate":"2016-03-09 05:09:28","commitOrder":18,"curCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Jenkins jenkins = Jenkins.getInstance();\n                    if (jenkins == null) {\n                        return FormValidation.ok();\n                    }\n                    Job item = jenkins.getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2016-03-09 05:09:28","endLine":223,"groupId":"498","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doCheckUpstreamProjects","params":"(@AncestorInPathJobproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/53/0533dac663a8523af4dc2387df4c7dae58a4c6.src","preCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Jenkins jenkins = Jenkins.getInstanceOrNull();\n                    if (jenkins == null) {\n                        return FormValidation.ok();\n                    }\n                    Job item = jenkins.getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"d1dfbd2bafd49a743cbc7adcd03a75139ed0ff9f","commitMessage":"@@@Revert \"Jenkins.getInstance() should be non-null\"\n\nThis reverts commit bb7c8fcedbcc9b51c5b1bb5b32810af5ac6b1ffb.\n\nCloses #2090.  I'll redo this as a PR... though if that PR is subject to multiple rounds of review before being merged then I will take that of evidence of the exact problem that committing directly was supposed to resolve... namely exponentially multiplying the effort required to make actual improvements to the code base.\n","date":"2016-03-09 05:09:28","modifiedFileCount":"42","status":"M","submitter":"Stephen Connolly"},{"authorTime":"2016-03-10 17:07:14","codes":[{"authorDate":"2014-04-11 08:58:30","commitOrder":19,"curCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        AbstractProject nearest = AbstractProject.findNearest(projectName,project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof AbstractProject))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (auth.equals(ACL.SYSTEM) && !QueueItemAuthenticatorConfiguration.get().getAuthenticators().isEmpty()) {\n                        auth = Jenkins.ANONYMOUS; \r\n                    }\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2014-04-11 08:58:30","endLine":402,"groupId":"4806","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doCheck","params":"(@AncestorInPathAbstractProjectproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/2e/b0aa075b0da1c2d8c4310ae646e857e0721ddd.src","preCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        AbstractProject nearest = AbstractProject.findNearest(projectName,project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof AbstractProject))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (auth.equals(ACL.SYSTEM) && !QueueItemAuthenticatorConfiguration.get().getAuthenticators().isEmpty()) {\n                        auth = Jenkins.ANONYMOUS; \r\n                    }\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"N"},{"authorDate":"2016-03-10 17:07:14","commitOrder":19,"curCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Jenkins jenkins = Jenkins.getInstanceOrNull();\n                    if (jenkins == null) {\n                        return FormValidation.ok();\n                    }\n                    Job item = jenkins.getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2016-03-10 17:07:14","endLine":223,"groupId":"498","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doCheckUpstreamProjects","params":"(@AncestorInPathJobproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/cc/5e3a8f14bfc7b74327db63593835cb8b97b2d0.src","preCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Jenkins jenkins = Jenkins.getInstance();\n                    if (jenkins == null) {\n                        return FormValidation.ok();\n                    }\n                    Job item = jenkins.getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"4107d86328e907a34e23b09f21cd86340ae137ea","commitMessage":"@@@Merge pull request #2094 from stephenc/alt-pr-2090\n\nFix Jenkins.getInstance() to make life easier for plugin authors","date":"2016-03-10 17:07:14","modifiedFileCount":"40","status":"M","submitter":"Stephen Connolly"},{"authorTime":"2016-03-10 18:27:46","codes":[{"authorDate":"2014-04-11 08:58:30","commitOrder":20,"curCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        AbstractProject nearest = AbstractProject.findNearest(projectName,project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof AbstractProject))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (auth.equals(ACL.SYSTEM) && !QueueItemAuthenticatorConfiguration.get().getAuthenticators().isEmpty()) {\n                        auth = Jenkins.ANONYMOUS; \r\n                    }\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2014-04-11 08:58:30","endLine":402,"groupId":"4806","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"doCheck","params":"(@AncestorInPathAbstractProjectproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/2e/b0aa075b0da1c2d8c4310ae646e857e0721ddd.src","preCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        AbstractProject nearest = AbstractProject.findNearest(projectName,project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof AbstractProject))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (auth.equals(ACL.SYSTEM) && !QueueItemAuthenticatorConfiguration.get().getAuthenticators().isEmpty()) {\n                        auth = Jenkins.ANONYMOUS; \r\n                    }\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"N"},{"authorDate":"2016-03-10 18:27:46","commitOrder":20,"curCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Job item = Jenkins.getInstance().getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2016-03-10 18:27:46","endLine":219,"groupId":"2421","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"doCheckUpstreamProjects","params":"(@AncestorInPathJobproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ad/6dc6d234e6f3b20488429151ed918e36533443.src","preCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Jenkins jenkins = Jenkins.getInstanceOrNull();\n                    if (jenkins == null) {\n                        return FormValidation.ok();\n                    }\n                    Job item = jenkins.getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"c5a3b2f61f9b48fe568368119778022a8c9ad74f","commitMessage":"@@@Merge pull request #2092 from stephenc/bb7c8fc-followup\n\nUse getInstance() in place of getInstanceOrNull() for execution paths that cannot have a null","date":"2016-03-10 18:27:46","modifiedFileCount":"24","status":"M","submitter":"Stephen Connolly"},{"authorTime":"2016-03-10 18:27:46","codes":[{"authorDate":"2016-03-17 21:58:50","commitOrder":21,"curCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if (project == null) return FormValidation.ok(Messages.BuildTrigger_ok_ancestor_is_null());\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        AbstractProject nearest = AbstractProject.findNearest(projectName,project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof AbstractProject))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (auth.equals(ACL.SYSTEM) && !QueueItemAuthenticatorConfiguration.get().getAuthenticators().isEmpty()) {\n                        auth = Jenkins.ANONYMOUS; \r\n                    }\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2016-03-17 21:58:50","endLine":404,"groupId":"4806","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"doCheck","params":"(@AncestorInPathAbstractProjectproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/17/83f0921538e5ba4aa0114ed1d26b15fefc0705.src","preCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        AbstractProject nearest = AbstractProject.findNearest(projectName,project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof AbstractProject))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (auth.equals(ACL.SYSTEM) && !QueueItemAuthenticatorConfiguration.get().getAuthenticators().isEmpty()) {\n                        auth = Jenkins.ANONYMOUS; \r\n                    }\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"M"},{"authorDate":"2016-03-10 18:27:46","commitOrder":21,"curCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Job item = Jenkins.getInstance().getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2016-03-10 18:27:46","endLine":219,"groupId":"2421","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"doCheckUpstreamProjects","params":"(@AncestorInPathJobproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ad/6dc6d234e6f3b20488429151ed918e36533443.src","preCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Job item = Jenkins.getInstance().getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"N"}],"commitId":"a4cabd511fdcd04d8a057927688968ade569106f","commitMessage":"@@@[FIXED JENKINS-32525] Merged #2087.\n","date":"2016-03-17 21:58:50","modifiedFileCount":"2","status":"M","submitter":"Jesse Glick"},{"authorTime":"2016-03-10 18:27:46","codes":[{"authorDate":"2017-05-14 10:22:40","commitOrder":22,"curCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if (project == null) return FormValidation.ok(Messages.BuildTrigger_ok_ancestor_is_null());\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        Job<?, ?> nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (auth.equals(ACL.SYSTEM) && !QueueItemAuthenticatorConfiguration.get().getAuthenticators().isEmpty()) {\n                        auth = Jenkins.ANONYMOUS; \r\n                    }\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2017-05-14 10:22:40","endLine":460,"groupId":"9098","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"doCheck","params":"(@AncestorInPathAbstractProjectproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/fe/e5c4711b7426a86a18dabe6cac10cb86ab42d4.src","preCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if (project == null) return FormValidation.ok(Messages.BuildTrigger_ok_ancestor_is_null());\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        AbstractProject nearest = AbstractProject.findNearest(projectName,project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof AbstractProject))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (auth.equals(ACL.SYSTEM) && !QueueItemAuthenticatorConfiguration.get().getAuthenticators().isEmpty()) {\n                        auth = Jenkins.ANONYMOUS; \r\n                    }\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":425,"status":"M"},{"authorDate":"2016-03-10 18:27:46","commitOrder":22,"curCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Job item = Jenkins.getInstance().getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2016-03-10 18:27:46","endLine":219,"groupId":"2421","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"doCheckUpstreamProjects","params":"(@AncestorInPathJobproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ad/6dc6d234e6f3b20488429151ed918e36533443.src","preCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Job item = Jenkins.getInstance().getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"N"}],"commitId":"f1a26582c1b25c470989d19b25378cff5c6d2497","commitMessage":"@@@[JENKINS-28113] Allow freestyle builds to trigger downstream Pipeline builds (#2873)\n\n* Offering default methods on ParameterizedJob.\n\n* Javadoc typo.\n\n* Cleaner use of default methods in ParameterizedJob.\n\n* Need to pick up https://github.com/infradna/bridge-method-injector/pull/15 to be able to build.\n\n* Sketch of pulling disabled functionality into ParameterizedJob.\n\n* EnableJobCommandTest.groovy ? EnableJobCommandTest.java.  and replacing deprecated Remoting-based CLI calls with CLICommandInvoker.\n\n* All CLI commands could be broken by a missing CLI.*.shortDescription key on just one!\n\n* Forgot to move CLI method short descriptions to new package.\n\n* Needed a @CLIResolver for ParameterizedJob. Adding an OptionHandler while we are here.\n\n* Trying to fix up access-modifier versions; started failing in CI today for unknown reasons.\n\n* Introduced <p:makeDisabled/> by analogy with <p:config-disableBuild/>.\n\n* Using new type bounds.\n\n* access-modifier 1.11 released.\n\n* MatrixProject and MavenModuleSet both expect to have access to makeDisabled.jelly.\n\n* Trying to generalize some more.\n\n* Minor simplification.\n\n* [JENKINS-34716] Generalizing doPolling and schedulePolling.\n\n* isBuildable\n\n* Obsolete comment.\n\n* Updated comments.\n\n* bridge-method-injector 1.17\n\n* Unfortunately AbstractProject.schedulePolling cannot delegate to SCMTriggerItem.\n\n* [FIXED JENKINS-28113] Generalize BuildTrigger to be able to trigger non-AbstractProject downstream ParameterizedJob?s without DependencyGraph.\n\n* [JENKINS-22949] Dropping QueueItemAuthenticator trickiness.  as in #2881.\n","date":"2017-05-14 10:22:40","modifiedFileCount":"2","status":"M","submitter":"Jesse Glick"},{"authorTime":"2016-03-10 18:27:46","codes":[{"authorDate":"2017-05-19 14:14:59","commitOrder":23,"curCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if (project == null) return FormValidation.ok(Messages.BuildTrigger_ok_ancestor_is_null());\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        Job<?, ?> nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2017-05-19 14:14:59","endLine":424,"groupId":"9098","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"doCheck","params":"(@AncestorInPathAbstractProjectproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/11/9d5794afe752677530c2c401a8c6da748fc554.src","preCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if (project == null) return FormValidation.ok(Messages.BuildTrigger_ok_ancestor_is_null());\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        Job<?, ?> nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (auth.equals(ACL.SYSTEM) && !QueueItemAuthenticatorConfiguration.get().getAuthenticators().isEmpty()) {\n                        auth = Jenkins.ANONYMOUS; \r\n                    }\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"M"},{"authorDate":"2016-03-10 18:27:46","commitOrder":23,"curCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Job item = Jenkins.getInstance().getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2016-03-10 18:27:46","endLine":219,"groupId":"2421","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"doCheckUpstreamProjects","params":"(@AncestorInPathJobproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ad/6dc6d234e6f3b20488429151ed918e36533443.src","preCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Job item = Jenkins.getInstance().getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"N"}],"commitId":"915543dca5399d3ba052219ddfe9c3c061e70726","commitMessage":"@@@[JENKINS-22949] BuildTrigger & ReverseBuildTrigger should respect QueueItemAuthenticatorConfiguration (#2881)\n\n* [JENKINS-22949] Simplifying behavior of BuildTrigger & ReverseBuildTrigger to honor QueueItemAuthenticator?s as defined.  rather than falling back to anonymous.\n\n* There is no need to impersonate what is already the current thread?s authentication.\n","date":"2017-05-19 14:14:59","modifiedFileCount":"5","status":"M","submitter":"Jesse Glick"},{"authorTime":"2016-03-10 18:27:46","codes":[{"authorDate":"2017-12-14 01:53:14","commitOrder":24,"curCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if (project == null) return FormValidation.ok(Messages.BuildTrigger_ok_ancestor_is_null());\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        Job<?, ?> nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (!item.hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2017-12-14 01:53:14","endLine":424,"groupId":"9098","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"doCheck","params":"(@AncestorInPathAbstractProjectproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/00/615dbc79a7e9649d39d0a2b3c977c715494fed.src","preCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if (project == null) return FormValidation.ok(Messages.BuildTrigger_ok_ancestor_is_null());\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        Job<?, ?> nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (!item.getACL().hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"M"},{"authorDate":"2016-03-10 18:27:46","commitOrder":24,"curCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Job item = Jenkins.getInstance().getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2016-03-10 18:27:46","endLine":219,"groupId":"2421","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"doCheckUpstreamProjects","params":"(@AncestorInPathJobproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ad/6dc6d234e6f3b20488429151ed918e36533443.src","preCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Job item = Jenkins.getInstance().getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"N"}],"commitId":"c0ba0527eece7e1fbcb2fc037f8e25542bc8dd45","commitMessage":"@@@Merge commit '78adf02addc47ccb2629c9bb9101a8dd630b22a5'\n","date":"2017-12-14 01:53:14","modifiedFileCount":"66","status":"M","submitter":"Jesse Glick"},{"authorTime":"2019-07-03 02:02:48","codes":[{"authorDate":"2019-07-03 02:02:48","commitOrder":25,"curCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if (project == null) return FormValidation.ok(Messages.BuildTrigger_ok_ancestor_is_null());\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.get().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        Job<?, ?> nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (!item.hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2019-07-03 02:02:48","endLine":424,"groupId":"4858","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"doCheck","params":"(@AncestorInPathAbstractProjectproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/af/cf0b8214c76f1ddcbbd2346eb935ab1eb94078.src","preCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if (project == null) return FormValidation.ok(Messages.BuildTrigger_ok_ancestor_is_null());\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.getInstance().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        Job<?, ?> nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (!item.hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"M"},{"authorDate":"2019-07-03 02:02:48","commitOrder":25,"curCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Job item = Jenkins.get().getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2019-07-03 02:02:48","endLine":237,"groupId":"8273","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"doCheckUpstreamProjects","params":"(@AncestorInPathJobproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/86/2c6f5e30254c2ed5f66f50b3fec846825308ce.src","preCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Job item = Jenkins.getInstance().getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"}],"commitId":"494119294fa2f095b4a28db0dd32c0d2092d9fa1","commitMessage":"@@@Merge commit '4404c6e662befe16e8daa1ea7a412df73b370086' of github.com:jenkinsci/jenkins\n","date":"2019-07-03 02:02:48","modifiedFileCount":"292","status":"M","submitter":"Jeff Thompson"},{"authorTime":"2019-07-03 02:02:48","codes":[{"authorDate":"2020-11-07 02:30:25","commitOrder":26,"curCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if (project == null) return FormValidation.ok(Messages.BuildTrigger_ok_ancestor_is_null());\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.get().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        Job<?, ?> nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf2(project);\n                    if (!item.hasPermission2(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2020-11-07 02:30:25","endLine":423,"groupId":"10953","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"doCheck","params":"(@AncestorInPathAbstractProjectproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/3a/73f2fedf816ddd2d2c8231554920fc3ea132b6.src","preCode":"        public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {\n            \r\n            if (project == null) return FormValidation.ok(Messages.BuildTrigger_ok_ancestor_is_null());\n            \r\n            if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();\n\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Item item = Jenkins.get().getItem(projectName,project,Item.class);\n                    if (item == null) {\n                        Job<?, ?> nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob))\n                        return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));\n                    \r\n                    Authentication auth = Tasks.getAuthenticationOf(project);\n                    if (!item.hasPermission(auth, Item.BUILD)) {\n                        return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":391,"status":"M"},{"authorDate":"2019-07-03 02:02:48","commitOrder":26,"curCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Job item = Jenkins.get().getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","date":"2019-07-03 02:02:48","endLine":237,"groupId":"10953","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"doCheckUpstreamProjects","params":"(@AncestorInPathJobproject@@QueryParameterStringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/86/2c6f5e30254c2ed5f66f50b3fec846825308ce.src","preCode":"        public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {\n            if (!project.hasPermission(Item.CONFIGURE)) {\n                return FormValidation.ok();\n            }\n            StringTokenizer tokens = new StringTokenizer(Util.fixNull(value),\",\");\n            boolean hasProjects = false;\n            while(tokens.hasMoreTokens()) {\n                String projectName = tokens.nextToken().trim();\n                if (StringUtils.isNotBlank(projectName)) {\n                    Job item = Jenkins.get().getItem(projectName, project, Job.class);\n                    if (item == null) {\n                        Job nearest = Items.findNearest(Job.class, projectName, project.getParent());\n                        String alternative = nearest != null ? nearest.getRelativeNameFrom(project) : \"?\";\n                        return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoSuchProject(projectName, alternative));\n                    }\n                    hasProjects = true;\n                }\n            }\n            if (!hasProjects) {\n                return FormValidation.error(hudson.tasks.Messages.BuildTrigger_NoProjectSpecified());\n            }\n\n            return FormValidation.ok();\n        }\n","realPath":"core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"N"}],"commitId":"a9ca5ef3d4c97937636bf3c585f4232514279b14","commitMessage":"@@@[JEP-227] Replace Acegi Security with Spring Security & upgrade Spring Framework (#4848)\n\nReplacing Acegi Security with Spring Security\n\nCo-authored-by: Tim Jacomb <timjacomb1+github@gmail.com>\nCo-authored-by: James Nord <jtnord@users.noreply.github.com>","date":"2020-11-07 02:30:25","modifiedFileCount":"149","status":"M","submitter":"Jesse Glick"}]
