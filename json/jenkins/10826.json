[{"authorTime":"2013-05-13 22:09:49","codes":[{"authorDate":"2013-05-13 22:09:49","commitOrder":1,"curCode":"    @Test public void hashSerialization() throws Exception {\n        HashData td = new HashData();\n        XStream2 xs = new XStream2();\n\n        String out = xs.toXML(td);\n        assertEquals(\"empty maps\", \"<hudson.util.CopyOnWriteMapTest_-HashData>\"\n                + \"<map1/><map2/></hudson.util.CopyOnWriteMapTest_-HashData>\",\n                out.replaceAll(\"\\\\s+\", \"\"));\n        HashData td2 = (HashData)xs.fromXML(out);\n        assertTrue(td2.map1.isEmpty());\n        assertTrue(td2.map2.isEmpty());\n\n        td.map1.put(\"foo1\", \"bar1\");\n        td.map2.put(\"foo2\", \"bar2\");\n        out = xs.toXML(td);\n        assertEquals(\"maps\", \"<hudson.util.CopyOnWriteMapTest_-HashData><map1>\"\n                + \"<entry><string>foo1</string><string>bar1</string></entry></map1>\"\n                + \"<map2><entry><string>foo2</string><string>bar2</string></entry>\"\n                + \"</map2></hudson.util.CopyOnWriteMapTest_-HashData>\",\n                out.replaceAll(\"\\\\s+\", \"\"));\n        td2 = (HashData)xs.fromXML(out);\n        assertEquals(\"bar1\", td2.map1.get(\"foo1\"));\n        assertEquals(\"bar2\", td2.map2.get(\"foo2\"));\n    }\n","date":"2013-05-13 22:09:49","endLine":67,"groupId":"6726","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"hashSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/4a/75976e32e2ad27ff03e0971450554f37f5bdf0.src","preCode":"    @Test public void hashSerialization() throws Exception {\n        HashData td = new HashData();\n        XStream2 xs = new XStream2();\n\n        String out = xs.toXML(td);\n        assertEquals(\"empty maps\", \"<hudson.util.CopyOnWriteMapTest_-HashData>\"\n                + \"<map1/><map2/></hudson.util.CopyOnWriteMapTest_-HashData>\",\n                out.replaceAll(\"\\\\s+\", \"\"));\n        HashData td2 = (HashData)xs.fromXML(out);\n        assertTrue(td2.map1.isEmpty());\n        assertTrue(td2.map2.isEmpty());\n\n        td.map1.put(\"foo1\", \"bar1\");\n        td.map2.put(\"foo2\", \"bar2\");\n        out = xs.toXML(td);\n        assertEquals(\"maps\", \"<hudson.util.CopyOnWriteMapTest_-HashData><map1>\"\n                + \"<entry><string>foo1</string><string>bar1</string></entry></map1>\"\n                + \"<map2><entry><string>foo2</string><string>bar2</string></entry>\"\n                + \"</map2></hudson.util.CopyOnWriteMapTest_-HashData>\",\n                out.replaceAll(\"\\\\s+\", \"\"));\n        td2 = (HashData)xs.fromXML(out);\n        assertEquals(\"bar1\", td2.map1.get(\"foo1\"));\n        assertEquals(\"bar2\", td2.map2.get(\"foo2\"));\n    }\n","realPath":"core/src/test/java/hudson/util/CopyOnWriteMapTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2013-05-13 22:09:49","commitOrder":1,"curCode":"    @Test public void treeSerialization() throws Exception {\n        TreeData td = new TreeData();\n        XStream2 xs = new XStream2();\n\n        String out = xs.toXML(td);\n        assertEquals(\"empty maps\", \"<hudson.util.CopyOnWriteMapTest_-TreeData>\"\n                + \"<map1/><map2/>\"\n                + \"</hudson.util.CopyOnWriteMapTest_-TreeData>\",\n                out.replaceAll(\"\\\\s+\", \"\"));\n        TreeData td2 = (TreeData)xs.fromXML(out);\n        assertTrue(td2.map1.isEmpty());\n        assertTrue(td2.map2.isEmpty());\n\n        td = new TreeData(String.CASE_INSENSITIVE_ORDER);\n        td.map1.put(\"foo1\", \"bar1\");\n        td.map2.put(\"foo2\", \"bar2\");\n        out = xs.toXML(td);\n        assertEquals(\"maps\", \"<hudson.util.CopyOnWriteMapTest_-TreeData><map1>\"\n                + \"<comparator class=\\\"java.lang.String$CaseInsensitiveComparator\\\"/>\"\n                + \"<entry><string>foo1</string><string>bar1</string></entry></map1>\"\n                + \"<map2><comparator class=\\\"java.lang.String$CaseInsensitiveComparator\\\"\"\n                + \" reference=\\\"../../map1/comparator\\\"/>\"\n                + \"<entry><string>foo2</string><string>bar2</string></entry></map2>\"\n                + \"</hudson.util.CopyOnWriteMapTest_-TreeData>\",\n                out.replaceAll(\">\\\\s+<\", \"><\"));\n        td2 = (TreeData)xs.fromXML(out);\n        assertEquals(\"bar1\", td2.map1.get(\"foo1\"));\n        assertEquals(\"bar2\", td2.map2.get(\"foo2\"));\n    }\n","date":"2013-05-13 22:09:49","endLine":114,"groupId":"8583","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"treeSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/4a/75976e32e2ad27ff03e0971450554f37f5bdf0.src","preCode":"    @Test public void treeSerialization() throws Exception {\n        TreeData td = new TreeData();\n        XStream2 xs = new XStream2();\n\n        String out = xs.toXML(td);\n        assertEquals(\"empty maps\", \"<hudson.util.CopyOnWriteMapTest_-TreeData>\"\n                + \"<map1/><map2/>\"\n                + \"</hudson.util.CopyOnWriteMapTest_-TreeData>\",\n                out.replaceAll(\"\\\\s+\", \"\"));\n        TreeData td2 = (TreeData)xs.fromXML(out);\n        assertTrue(td2.map1.isEmpty());\n        assertTrue(td2.map2.isEmpty());\n\n        td = new TreeData(String.CASE_INSENSITIVE_ORDER);\n        td.map1.put(\"foo1\", \"bar1\");\n        td.map2.put(\"foo2\", \"bar2\");\n        out = xs.toXML(td);\n        assertEquals(\"maps\", \"<hudson.util.CopyOnWriteMapTest_-TreeData><map1>\"\n                + \"<comparator class=\\\"java.lang.String$CaseInsensitiveComparator\\\"/>\"\n                + \"<entry><string>foo1</string><string>bar1</string></entry></map1>\"\n                + \"<map2><comparator class=\\\"java.lang.String$CaseInsensitiveComparator\\\"\"\n                + \" reference=\\\"../../map1/comparator\\\"/>\"\n                + \"<entry><string>foo2</string><string>bar2</string></entry></map2>\"\n                + \"</hudson.util.CopyOnWriteMapTest_-TreeData>\",\n                out.replaceAll(\">\\\\s+<\", \"><\"));\n        td2 = (TreeData)xs.fromXML(out);\n        assertEquals(\"bar1\", td2.map1.get(\"foo1\"));\n        assertEquals(\"bar2\", td2.map2.get(\"foo2\"));\n    }\n","realPath":"core/src/test/java/hudson/util/CopyOnWriteMapTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"42fb9c7143d60601af203476daf7cbf473687f97","commitMessage":"@@@JUnit 4.","date":"2013-05-13 22:09:49","modifiedFileCount":"1","status":"B","submitter":"Jesse Glick"},{"authorTime":"2019-10-17 17:48:03","codes":[{"authorDate":"2019-10-17 17:48:03","commitOrder":2,"curCode":"    @Test public void hashSerialization() {\n        HashData td = new HashData();\n        XStream2 xs = new XStream2();\n\n        String out = xs.toXML(td);\n        assertEquals(\"empty maps\", \"<hudson.util.CopyOnWriteMapTest_-HashData>\"\n                + \"<map1/><map2/></hudson.util.CopyOnWriteMapTest_-HashData>\",\n                out.replaceAll(\"\\\\s+\", \"\"));\n        HashData td2 = (HashData)xs.fromXML(out);\n        assertTrue(td2.map1.isEmpty());\n        assertTrue(td2.map2.isEmpty());\n\n        td.map1.put(\"foo1\", \"bar1\");\n        td.map2.put(\"foo2\", \"bar2\");\n        out = xs.toXML(td);\n        assertEquals(\"maps\", \"<hudson.util.CopyOnWriteMapTest_-HashData><map1>\"\n                + \"<entry><string>foo1</string><string>bar1</string></entry></map1>\"\n                + \"<map2><entry><string>foo2</string><string>bar2</string></entry>\"\n                + \"</map2></hudson.util.CopyOnWriteMapTest_-HashData>\",\n                out.replaceAll(\"\\\\s+\", \"\"));\n        td2 = (HashData)xs.fromXML(out);\n        assertEquals(\"bar1\", td2.map1.get(\"foo1\"));\n        assertEquals(\"bar2\", td2.map2.get(\"foo2\"));\n    }\n","date":"2019-10-17 17:48:03","endLine":68,"groupId":"10826","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"hashSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/cc/dd1d69130357e4832ca8132c9f9d9883ce1499.src","preCode":"    @Test public void hashSerialization() throws Exception {\n        HashData td = new HashData();\n        XStream2 xs = new XStream2();\n\n        String out = xs.toXML(td);\n        assertEquals(\"empty maps\", \"<hudson.util.CopyOnWriteMapTest_-HashData>\"\n                + \"<map1/><map2/></hudson.util.CopyOnWriteMapTest_-HashData>\",\n                out.replaceAll(\"\\\\s+\", \"\"));\n        HashData td2 = (HashData)xs.fromXML(out);\n        assertTrue(td2.map1.isEmpty());\n        assertTrue(td2.map2.isEmpty());\n\n        td.map1.put(\"foo1\", \"bar1\");\n        td.map2.put(\"foo2\", \"bar2\");\n        out = xs.toXML(td);\n        assertEquals(\"maps\", \"<hudson.util.CopyOnWriteMapTest_-HashData><map1>\"\n                + \"<entry><string>foo1</string><string>bar1</string></entry></map1>\"\n                + \"<map2><entry><string>foo2</string><string>bar2</string></entry>\"\n                + \"</map2></hudson.util.CopyOnWriteMapTest_-HashData>\",\n                out.replaceAll(\"\\\\s+\", \"\"));\n        td2 = (HashData)xs.fromXML(out);\n        assertEquals(\"bar1\", td2.map1.get(\"foo1\"));\n        assertEquals(\"bar2\", td2.map2.get(\"foo2\"));\n    }\n","realPath":"core/src/test/java/hudson/util/CopyOnWriteMapTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2019-10-17 17:48:03","commitOrder":2,"curCode":"    @Test public void treeSerialization() {\n        TreeData td = new TreeData();\n        XStream2 xs = new XStream2();\n\n        String out = xs.toXML(td);\n        assertEquals(\"empty maps\", \"<hudson.util.CopyOnWriteMapTest_-TreeData>\"\n                + \"<map1/><map2/>\"\n                + \"</hudson.util.CopyOnWriteMapTest_-TreeData>\",\n                out.replaceAll(\"\\\\s+\", \"\"));\n        TreeData td2 = (TreeData)xs.fromXML(out);\n        assertTrue(td2.map1.isEmpty());\n        assertTrue(td2.map2.isEmpty());\n\n        td = new TreeData(String.CASE_INSENSITIVE_ORDER);\n        td.map1.put(\"foo1\", \"bar1\");\n        td.map2.put(\"foo2\", \"bar2\");\n        out = xs.toXML(td);\n        assertEquals(\"maps\", \"<hudson.util.CopyOnWriteMapTest_-TreeData><map1>\"\n                + \"<comparator class=\\\"java.lang.String$CaseInsensitiveComparator\\\"/>\"\n                + \"<entry><string>foo1</string><string>bar1</string></entry></map1>\"\n                + \"<map2><comparator class=\\\"java.lang.String$CaseInsensitiveComparator\\\"\"\n                + \" reference=\\\"../../map1/comparator\\\"/>\"\n                + \"<entry><string>foo2</string><string>bar2</string></entry></map2>\"\n                + \"</hudson.util.CopyOnWriteMapTest_-TreeData>\",\n                out.replaceAll(\">\\\\s+<\", \"><\"));\n        td2 = (TreeData)xs.fromXML(out);\n        assertEquals(\"bar1\", td2.map1.get(\"foo1\"));\n        assertEquals(\"bar2\", td2.map2.get(\"foo2\"));\n    }\n","date":"2019-10-17 17:48:03","endLine":115,"groupId":"10826","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"treeSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/cc/dd1d69130357e4832ca8132c9f9d9883ce1499.src","preCode":"    @Test public void treeSerialization() throws Exception {\n        TreeData td = new TreeData();\n        XStream2 xs = new XStream2();\n\n        String out = xs.toXML(td);\n        assertEquals(\"empty maps\", \"<hudson.util.CopyOnWriteMapTest_-TreeData>\"\n                + \"<map1/><map2/>\"\n                + \"</hudson.util.CopyOnWriteMapTest_-TreeData>\",\n                out.replaceAll(\"\\\\s+\", \"\"));\n        TreeData td2 = (TreeData)xs.fromXML(out);\n        assertTrue(td2.map1.isEmpty());\n        assertTrue(td2.map2.isEmpty());\n\n        td = new TreeData(String.CASE_INSENSITIVE_ORDER);\n        td.map1.put(\"foo1\", \"bar1\");\n        td.map2.put(\"foo2\", \"bar2\");\n        out = xs.toXML(td);\n        assertEquals(\"maps\", \"<hudson.util.CopyOnWriteMapTest_-TreeData><map1>\"\n                + \"<comparator class=\\\"java.lang.String$CaseInsensitiveComparator\\\"/>\"\n                + \"<entry><string>foo1</string><string>bar1</string></entry></map1>\"\n                + \"<map2><comparator class=\\\"java.lang.String$CaseInsensitiveComparator\\\"\"\n                + \" reference=\\\"../../map1/comparator\\\"/>\"\n                + \"<entry><string>foo2</string><string>bar2</string></entry></map2>\"\n                + \"</hudson.util.CopyOnWriteMapTest_-TreeData>\",\n                out.replaceAll(\">\\\\s+<\", \"><\"));\n        td2 = (TreeData)xs.fromXML(out);\n        assertEquals(\"bar1\", td2.map1.get(\"foo1\"));\n        assertEquals(\"bar2\", td2.map2.get(\"foo2\"));\n    }\n","realPath":"core/src/test/java/hudson/util/CopyOnWriteMapTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"20986fa481397a2605d4c3758977b9f28373187d","commitMessage":"@@@Merge pull request #4293 from StefanSpieker/simplified\n\nsimplified assertions and removed unthrown exceptions","date":"2019-10-17 17:48:03","modifiedFileCount":"7","status":"M","submitter":"Oleg Nenashev"}]
