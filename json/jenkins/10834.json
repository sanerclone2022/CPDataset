[{"authorTime":"2018-07-08 07:38:07","codes":[{"authorDate":"2017-03-30 18:46:10","commitOrder":3,"curCode":"    public void backwardsSlashesOnWindows()  {\n        \r\n        File tmpFile = null;\n        try {\n            File baz = new File(new File(new File(tmpDir, \"foo\"), \"bar\"), \"baz\");\n            baz.mkdirs();\n\n            tmpFile = new File(baz, \"Test.txt\");\n            tmpFile.createNewFile();\n        } catch (IOException e) {\n            fail(\"unable to prepare source directory for zipping\", e);\n        }\n\n        \r\n        File zipFile = null;\n\n        \r\n        ZipArchiver archiver = null;\n\n        try {\n            zipFile = File.createTempFile(\"test\", \".zip\");\n            archiver = new ZipArchiver(Files.newOutputStream(zipFile.toPath()));\n\n            archiver.visit(tmpFile, \"foo\\\\bar\\\\baz\\\\Test.txt\");\n        } catch (Exception e) {\n            fail(\"exception driving ZipArchiver\", e);\n        } finally {\n            if (archiver != null) {\n                try {\n                    archiver.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n\n        \r\n        \r\n        String zipEntryName = null;\n\n        ZipFile zipFileVerify = null;\n        try {\n            zipFileVerify = new ZipFile(zipFile);\n\n            zipEntryName = ((ZipEntry) zipFileVerify.entries().nextElement()).getName();\n        } catch (Exception e) {\n            fail(\"failure enumerating zip entries\", e);\n        } finally {\n            if (zipFileVerify != null) {\n                try {\n                    zipFileVerify.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n\n        assertEquals(\"foo/bar/baz/Test.txt\", zipEntryName);\n    }\n","date":"2017-03-30 18:46:10","endLine":103,"groupId":"5621","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"backwardsSlashesOnWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/cd/e8bd4ae7c3c6d27a028b9f72f535eb8a98788e.src","preCode":"    public void backwardsSlashesOnWindows()  {\n        \r\n        File tmpFile = null;\n        try {\n            File baz = new File(new File(new File(tmpDir, \"foo\"), \"bar\"), \"baz\");\n            baz.mkdirs();\n\n            tmpFile = new File(baz, \"Test.txt\");\n            tmpFile.createNewFile();\n        } catch (IOException e) {\n            fail(\"unable to prepare source directory for zipping\", e);\n        }\n\n        \r\n        File zipFile = null;\n\n        \r\n        ZipArchiver archiver = null;\n\n        try {\n            zipFile = File.createTempFile(\"test\", \".zip\");\n            archiver = new ZipArchiver(Files.newOutputStream(zipFile.toPath()));\n\n            archiver.visit(tmpFile, \"foo\\\\bar\\\\baz\\\\Test.txt\");\n        } catch (Exception e) {\n            fail(\"exception driving ZipArchiver\", e);\n        } finally {\n            if (archiver != null) {\n                try {\n                    archiver.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n\n        \r\n        \r\n        String zipEntryName = null;\n\n        ZipFile zipFileVerify = null;\n        try {\n            zipFileVerify = new ZipFile(zipFile);\n\n            zipEntryName = ((ZipEntry) zipFileVerify.entries().nextElement()).getName();\n        } catch (Exception e) {\n            fail(\"failure enumerating zip entries\", e);\n        } finally {\n            if (zipFileVerify != null) {\n                try {\n                    zipFileVerify.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n\n        assertEquals(\"foo/bar/baz/Test.txt\", zipEntryName);\n    }\n","realPath":"core/src/test/java/hudson/util/io/ZipArchiverTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"NB"},{"authorDate":"2018-07-08 07:38:07","commitOrder":3,"curCode":"    public void huge64bitFile()  {\n        \r\n\n        File hugeFile = new File(tmpDir, \"huge64bitFileTest.txt\");\n        try {\n            RandomAccessFile largeFile = new RandomAccessFile(hugeFile, \"rw\");\n            largeFile.setLength(4 * 1024 * 1024 * 1024 + 2);\n        } catch (IOException e) {\n            \r\n\r\n\n            LOGGER.log(Level.SEVERE, \"Couldn't set up huge file for huge64bitFile test\", e);\n            return;\n        }\n\n        \r\n        File zipFile = null;\n\n        \r\n        ZipArchiver archiver = null;\n\n        try {\n            zipFile = File.createTempFile(\"test\", \".zip\");\n            archiver = new ZipArchiver(Files.newOutputStream(zipFile.toPath()));\n\n            archiver.visit(hugeFile, \"huge64bitFileTest.txt\");\n        } catch (Exception e) {\n            fail(\"exception driving ZipArchiver\", e);\n        } finally {\n            if (archiver != null) {\n                try {\n                    archiver.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n\n        \r\n        String zipEntryName = null;\n\n        ZipFile zipFileVerify = null;\n        try {\n            zipFileVerify = new ZipFile(zipFile);\n\n            zipEntryName = ((ZipEntry) zipFileVerify.entries().nextElement()).getName();\n        } catch (Exception e) {\n            fail(\"failure enumerating zip entries\", e);\n        } finally {\n            if (zipFileVerify != null) {\n                try {\n                    zipFileVerify.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n\n        assertEquals(\"huge64bitFileTest.txt\", zipEntryName);\n    }\n","date":"2018-07-08 07:38:07","endLine":166,"groupId":"5621","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"huge64bitFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/0e/d31a83c5cfe0f009e60f7c236cc1336a7cecb2.src","preCode":"    public void huge64bitFile()  {\n        \r\n\n        File hugeFile = new File(tmpDir, \"huge64bitFileTest.txt\");\n        try {\n            RandomAccessFile largeFile = new RandomAccessFile(hugeFile, \"rw\");\n            largeFile.setLength(4 * 1024 * 1024 * 1024 + 2);\n        } catch (IOException e) {\n            \r\n\r\n\n            LOGGER.log(Level.SEVERE, \"Couldn't set up huge file for huge64bitFile test\", e);\n            return;\n        }\n\n        \r\n        File zipFile = null;\n\n        \r\n        ZipArchiver archiver = null;\n\n        try {\n            zipFile = File.createTempFile(\"test\", \".zip\");\n            archiver = new ZipArchiver(Files.newOutputStream(zipFile.toPath()));\n\n            archiver.visit(hugeFile, \"huge64bitFileTest.txt\");\n        } catch (Exception e) {\n            fail(\"exception driving ZipArchiver\", e);\n        } finally {\n            if (archiver != null) {\n                try {\n                    archiver.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n\n        \r\n        String zipEntryName = null;\n\n        ZipFile zipFileVerify = null;\n        try {\n            zipFileVerify = new ZipFile(zipFile);\n\n            zipEntryName = ((ZipEntry) zipFileVerify.entries().nextElement()).getName();\n        } catch (Exception e) {\n            fail(\"failure enumerating zip entries\", e);\n        } finally {\n            if (zipFileVerify != null) {\n                try {\n                    zipFileVerify.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n\n        assertEquals(\"huge64bitFileTest.txt\", zipEntryName);\n    }\n","realPath":"core/src/test/java/hudson/util/io/ZipArchiverTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"}],"commitId":"e2b74038427842c106b3b54daf1f501a5c8ddf69","commitMessage":"@@@[JENKINS-46205] ZipArchiver support 64 bit files (#3536)\n\n* [JENKINS-46205] ZipArchiver support 64 bit files\n\ncall setUseZip64(Zip64Mode.AsNeeded)\n\n* [JENKINS-46205] ZipArchiver support 64 bit files\n\nUpdate test to assume it means insufficient disk space and skip\n","date":"2018-07-08 07:38:07","modifiedFileCount":"2","status":"M","submitter":"Josh Soref"},{"authorTime":"2020-01-20 21:55:10","codes":[{"authorDate":"2020-01-20 21:55:10","commitOrder":4,"curCode":"    public void backwardsSlashesOnWindows()  {\n        \r\n        File tmpFile = null;\n        try {\n            File baz = new File(new File(new File(tmpDir, \"foo\"), \"bar\"), \"baz\");\n            baz.mkdirs();\n\n            tmpFile = new File(baz, \"Test.txt\");\n            tmpFile.createNewFile();\n        } catch (IOException e) {\n            fail(\"unable to prepare source directory for zipping\", e);\n        }\n\n        \r\n        File zipFile = null;\n\n        \r\n        ZipArchiver archiver = null;\n\n        try {\n            zipFile = File.createTempFile(\"test\", \".zip\");\n            archiver = new ZipArchiver(Files.newOutputStream(zipFile.toPath()));\n\n            archiver.visit(tmpFile, \"foo\\\\bar\\\\baz\\\\Test.txt\");\n        } catch (Exception e) {\n            fail(\"exception driving ZipArchiver\", e);\n        } finally {\n            if (archiver != null) {\n                try {\n                    archiver.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n\n        \r\n        \r\n        String zipEntryName = null;\n\n        try (ZipFile zipFileVerify = new ZipFile(zipFile)) {\n\n            zipEntryName = ((ZipEntry) zipFileVerify.entries().nextElement()).getName();\n        } catch (Exception e) {\n            fail(\"failure enumerating zip entries\", e);\n        }\n\n        assertEquals(\"foo/bar/baz/Test.txt\", zipEntryName);\n    }\n","date":"2020-01-20 21:55:10","endLine":93,"groupId":"5621","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"backwardsSlashesOnWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f8/65016113dbdb6de6b0f6c0d0cad38a1af9310f.src","preCode":"    public void backwardsSlashesOnWindows()  {\n        \r\n        File tmpFile = null;\n        try {\n            File baz = new File(new File(new File(tmpDir, \"foo\"), \"bar\"), \"baz\");\n            baz.mkdirs();\n\n            tmpFile = new File(baz, \"Test.txt\");\n            tmpFile.createNewFile();\n        } catch (IOException e) {\n            fail(\"unable to prepare source directory for zipping\", e);\n        }\n\n        \r\n        File zipFile = null;\n\n        \r\n        ZipArchiver archiver = null;\n\n        try {\n            zipFile = File.createTempFile(\"test\", \".zip\");\n            archiver = new ZipArchiver(Files.newOutputStream(zipFile.toPath()));\n\n            archiver.visit(tmpFile, \"foo\\\\bar\\\\baz\\\\Test.txt\");\n        } catch (Exception e) {\n            fail(\"exception driving ZipArchiver\", e);\n        } finally {\n            if (archiver != null) {\n                try {\n                    archiver.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n\n        \r\n        \r\n        String zipEntryName = null;\n\n        ZipFile zipFileVerify = null;\n        try {\n            zipFileVerify = new ZipFile(zipFile);\n\n            zipEntryName = ((ZipEntry) zipFileVerify.entries().nextElement()).getName();\n        } catch (Exception e) {\n            fail(\"failure enumerating zip entries\", e);\n        } finally {\n            if (zipFileVerify != null) {\n                try {\n                    zipFileVerify.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n\n        assertEquals(\"foo/bar/baz/Test.txt\", zipEntryName);\n    }\n","realPath":"core/src/test/java/hudson/util/io/ZipArchiverTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2020-01-20 21:55:10","commitOrder":4,"curCode":"    public void huge64bitFile()  {\n        \r\n\n        File hugeFile = new File(tmpDir, \"huge64bitFileTest.txt\");\n        try {\n            RandomAccessFile largeFile = new RandomAccessFile(hugeFile, \"rw\");\n            largeFile.setLength(4 * 1024 * 1024 * 1024 + 2);\n        } catch (IOException e) {\n            \r\n\r\n\n            LOGGER.log(Level.SEVERE, \"Couldn't set up huge file for huge64bitFile test\", e);\n            return;\n        }\n\n        \r\n        File zipFile = null;\n\n        \r\n        ZipArchiver archiver = null;\n\n        try {\n            zipFile = File.createTempFile(\"test\", \".zip\");\n            archiver = new ZipArchiver(Files.newOutputStream(zipFile.toPath()));\n\n            archiver.visit(hugeFile, \"huge64bitFileTest.txt\");\n        } catch (Exception e) {\n            fail(\"exception driving ZipArchiver\", e);\n        } finally {\n            if (archiver != null) {\n                try {\n                    archiver.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n\n        \r\n        String zipEntryName = null;\n\n        try (ZipFile zipFileVerify = new ZipFile(zipFile)) {\n\n            zipEntryName = ((ZipEntry) zipFileVerify.entries().nextElement()).getName();\n        } catch (Exception e) {\n            fail(\"failure enumerating zip entries\", e);\n        }\n\n        assertEquals(\"huge64bitFileTest.txt\", zipEntryName);\n    }\n","date":"2020-01-20 21:55:10","endLine":145,"groupId":"5621","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"huge64bitFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f8/65016113dbdb6de6b0f6c0d0cad38a1af9310f.src","preCode":"    public void huge64bitFile()  {\n        \r\n\n        File hugeFile = new File(tmpDir, \"huge64bitFileTest.txt\");\n        try {\n            RandomAccessFile largeFile = new RandomAccessFile(hugeFile, \"rw\");\n            largeFile.setLength(4 * 1024 * 1024 * 1024 + 2);\n        } catch (IOException e) {\n            \r\n\r\n\n            LOGGER.log(Level.SEVERE, \"Couldn't set up huge file for huge64bitFile test\", e);\n            return;\n        }\n\n        \r\n        File zipFile = null;\n\n        \r\n        ZipArchiver archiver = null;\n\n        try {\n            zipFile = File.createTempFile(\"test\", \".zip\");\n            archiver = new ZipArchiver(Files.newOutputStream(zipFile.toPath()));\n\n            archiver.visit(hugeFile, \"huge64bitFileTest.txt\");\n        } catch (Exception e) {\n            fail(\"exception driving ZipArchiver\", e);\n        } finally {\n            if (archiver != null) {\n                try {\n                    archiver.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n\n        \r\n        String zipEntryName = null;\n\n        ZipFile zipFileVerify = null;\n        try {\n            zipFileVerify = new ZipFile(zipFile);\n\n            zipEntryName = ((ZipEntry) zipFileVerify.entries().nextElement()).getName();\n        } catch (Exception e) {\n            fail(\"failure enumerating zip entries\", e);\n        } finally {\n            if (zipFileVerify != null) {\n                try {\n                    zipFileVerify.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n\n        assertEquals(\"huge64bitFileTest.txt\", zipEntryName);\n    }\n","realPath":"core/src/test/java/hudson/util/io/ZipArchiverTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"574ec6e5bdf2e4ac9394e290fefff5ac1c9a5c96","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2020-01-20 21:55:10","modifiedFileCount":"193","status":"M","submitter":"Wadeck Follonier"},{"authorTime":"2021-04-24 16:59:11","codes":[{"authorDate":"2021-04-24 16:59:11","commitOrder":5,"curCode":"    public void backwardsSlashesOnWindows() throws IOException {\n        \r\n        Path baz = tmp.newFolder().toPath().resolve(\"foo\").resolve(\"bar\").resolve(\"baz\");\n        Files.createDirectories(baz);\n        Path tmpFile = baz.resolve(\"Test.txt\");\n        Files.createFile(tmpFile);\n\n        \r\n        Path zipFile = Files.createTempFile(tmp.getRoot().toPath(), \"test\", \".zip\");\n\n        \r\n        try (ZipArchiver archiver = new ZipArchiver(Files.newOutputStream(zipFile))) {\n            archiver.visit(tmpFile.toFile(), \"foo\\\\bar\\\\baz\\\\Test.txt\");\n        }\n\n        \r\n        \r\n        try (ZipFile zipFileVerify = new ZipFile(zipFile.toFile())) {\n            assertEquals(1, zipFileVerify.size());\n            ZipEntry zipEntry = zipFileVerify.entries().nextElement();\n            assertEquals(\"foo/bar/baz/Test.txt\", zipEntry.getName());\n        }\n    }\n","date":"2021-04-24 16:59:11","endLine":47,"groupId":"10834","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"backwardsSlashesOnWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/29/b601e727689aba8d111e4fbb2f9f3b48eabafd.src","preCode":"    public void backwardsSlashesOnWindows()  {\n        \r\n        File tmpFile = null;\n        try {\n            File baz = new File(new File(new File(tmpDir, \"foo\"), \"bar\"), \"baz\");\n            baz.mkdirs();\n\n            tmpFile = new File(baz, \"Test.txt\");\n            tmpFile.createNewFile();\n        } catch (IOException e) {\n            fail(\"unable to prepare source directory for zipping\", e);\n        }\n\n        \r\n        File zipFile = null;\n\n        \r\n        ZipArchiver archiver = null;\n\n        try {\n            zipFile = File.createTempFile(\"test\", \".zip\");\n            archiver = new ZipArchiver(Files.newOutputStream(zipFile.toPath()));\n\n            archiver.visit(tmpFile, \"foo\\\\bar\\\\baz\\\\Test.txt\");\n        } catch (Exception e) {\n            fail(\"exception driving ZipArchiver\", e);\n        } finally {\n            if (archiver != null) {\n                try {\n                    archiver.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n\n        \r\n        \r\n        String zipEntryName = null;\n\n        try (ZipFile zipFileVerify = new ZipFile(zipFile)) {\n\n            zipEntryName = ((ZipEntry) zipFileVerify.entries().nextElement()).getName();\n        } catch (Exception e) {\n            fail(\"failure enumerating zip entries\", e);\n        }\n\n        assertEquals(\"foo/bar/baz/Test.txt\", zipEntryName);\n    }\n","realPath":"core/src/test/java/hudson/util/io/ZipArchiverTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":25,"status":"M"},{"authorDate":"2021-04-24 16:59:11","commitOrder":5,"curCode":"    public void huge64bitFile() throws IOException {\n        \r\n        Path hugeFile = tmp.newFolder().toPath().resolve(\"huge64bitFileTest.txt\");\n        long length = 4L * 1024 * 1024 * 1024 + 2;\n        try (RandomAccessFile largeFile = new RandomAccessFile(hugeFile.toFile(), \"rw\")) {\n            largeFile.setLength(length);\n        } catch (IOException e) {\n            \r\n            Assume.assumeNoException(e);\n        }\n\n        \r\n        Path zipFile = Files.createTempFile(tmp.getRoot().toPath(), \"test\", \".zip\");\n\n        \r\n        try (ZipArchiver archiver = new ZipArchiver(Files.newOutputStream(zipFile))) {\n            archiver.visit(hugeFile.toFile(), \"huge64bitFileTest.txt\");\n        }\n\n        \r\n        try (ZipFile zipFileVerify = new ZipFile(zipFile.toFile())) {\n            assertEquals(1, zipFileVerify.size());\n            ZipEntry zipEntry = zipFileVerify.entries().nextElement();\n            assertEquals(\"huge64bitFileTest.txt\", zipEntry.getName());\n            assertEquals(length, zipEntry.getSize());\n        } catch (ZipException e) {\n            if (e.getMessage().contains(\"invalid CEN header (bad signature)\")) {\n                \r\n                Assume.assumeNoException(e);\n            } else {\n                throw e;\n            }\n        }\n    }\n","date":"2021-04-24 16:59:11","endLine":83,"groupId":"10834","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"huge64bitFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/29/b601e727689aba8d111e4fbb2f9f3b48eabafd.src","preCode":"    public void huge64bitFile()  {\n        \r\n\n        File hugeFile = new File(tmpDir, \"huge64bitFileTest.txt\");\n        try {\n            RandomAccessFile largeFile = new RandomAccessFile(hugeFile, \"rw\");\n            largeFile.setLength(4 * 1024 * 1024 * 1024 + 2);\n        } catch (IOException e) {\n            \r\n\r\n\n            LOGGER.log(Level.SEVERE, \"Couldn't set up huge file for huge64bitFile test\", e);\n            return;\n        }\n\n        \r\n        File zipFile = null;\n\n        \r\n        ZipArchiver archiver = null;\n\n        try {\n            zipFile = File.createTempFile(\"test\", \".zip\");\n            archiver = new ZipArchiver(Files.newOutputStream(zipFile.toPath()));\n\n            archiver.visit(hugeFile, \"huge64bitFileTest.txt\");\n        } catch (Exception e) {\n            fail(\"exception driving ZipArchiver\", e);\n        } finally {\n            if (archiver != null) {\n                try {\n                    archiver.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n\n        \r\n        String zipEntryName = null;\n\n        try (ZipFile zipFileVerify = new ZipFile(zipFile)) {\n\n            zipEntryName = ((ZipEntry) zipFileVerify.entries().nextElement()).getName();\n        } catch (Exception e) {\n            fail(\"failure enumerating zip entries\", e);\n        }\n\n        assertEquals(\"huge64bitFileTest.txt\", zipEntryName);\n    }\n","realPath":"core/src/test/java/hudson/util/io/ZipArchiverTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"8d164663c4952c6a83a79cfb3c29963f396b4839","commitMessage":"@@@[JENKINS-52356] Support ZIP64 in ZipArchiver (#5435)\n\n* [JENKINS-52356] Support ZIP64 in ZipArchiver\n\n* Fix resource leak","date":"2021-04-24 16:59:11","modifiedFileCount":"2","status":"M","submitter":"Basil Crow"}]
