[{"authorTime":"2015-08-16 17:38:51","codes":[{"authorDate":"2015-08-16 17:38:51","commitOrder":1,"curCode":"    public void testRestInterfaceFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.login(\"test\", \"test\");\n            WebRequestSettings req = new WebRequestSettings(\n                    wc.createCrumbedUrl(String.format(\"%s/config.xml\", p.getUrl())),\n                    HttpMethod.POST\n            );\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));\n            wc.getPage(req);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.login(\"test\", \"test\");\n            WebRequestSettings req = new WebRequestSettings(\n                    wc.createCrumbedUrl(String.format(\"%s/config.xml\", p.getUrl())),\n                    HttpMethod.POST\n            );\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\"));\n            \n            try {\n                wc.getPage(req);\n                fail(\"Submitting unacceptable configuration via REST should fail.\");\n            } catch (FailingHttpStatusCodeException e) {\n                \r\n            }\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","date":"2015-08-16 17:38:51","endLine":258,"groupId":"572","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestInterfaceFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/fa/3d3ad1cf61b2fdac63056a96b403ccda723445.src","preCode":"    public void testRestInterfaceFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.login(\"test\", \"test\");\n            WebRequestSettings req = new WebRequestSettings(\n                    wc.createCrumbedUrl(String.format(\"%s/config.xml\", p.getUrl())),\n                    HttpMethod.POST\n            );\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));\n            wc.getPage(req);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.login(\"test\", \"test\");\n            WebRequestSettings req = new WebRequestSettings(\n                    wc.createCrumbedUrl(String.format(\"%s/config.xml\", p.getUrl())),\n                    HttpMethod.POST\n            );\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\"));\n            \n            try {\n                wc.getPage(req);\n                fail(\"Submitting unacceptable configuration via REST should fail.\");\n            } catch (FailingHttpStatusCodeException e) {\n                \r\n            }\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/RobustReflectionConverterTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"B"},{"authorDate":"2015-08-16 17:38:51","commitOrder":1,"curCode":"    public void testCliFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLI cli = new CLI(r.getURL());\n            ByteArrayOutputStream stdout = new ByteArrayOutputStream();\n            ByteArrayOutputStream stderr = new ByteArrayOutputStream();\n            int ret = cli.execute(\n                Arrays.asList(\n                    \"update-job\",\n                    p.getFullName(),\n                    \"--username\",\n                    \"test\",\n                    \"--password\",\n                    \"test\"\n                ),\n                new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD).getBytes()),\n                stdout,\n                stderr\n            );\n            assertEquals(0, ret);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLI cli = new CLI(r.getURL());\n            ByteArrayOutputStream stdout = new ByteArrayOutputStream();\n            ByteArrayOutputStream stderr = new ByteArrayOutputStream();\n            int ret = cli.execute(\n                Arrays.asList(\n                    \"update-job\",\n                    p.getFullName(),\n                    \"--username\",\n                    \"test\",\n                    \"--password\",\n                    \"test\"\n                ),\n                new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\").getBytes()),\n                stdout,\n                stderr\n            );\n            assertNotEquals(0, ret);\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","date":"2015-08-16 17:38:51","endLine":342,"groupId":"1642","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCliFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/fa/3d3ad1cf61b2fdac63056a96b403ccda723445.src","preCode":"    public void testCliFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLI cli = new CLI(r.getURL());\n            ByteArrayOutputStream stdout = new ByteArrayOutputStream();\n            ByteArrayOutputStream stderr = new ByteArrayOutputStream();\n            int ret = cli.execute(\n                Arrays.asList(\n                    \"update-job\",\n                    p.getFullName(),\n                    \"--username\",\n                    \"test\",\n                    \"--password\",\n                    \"test\"\n                ),\n                new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD).getBytes()),\n                stdout,\n                stderr\n            );\n            assertEquals(0, ret);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLI cli = new CLI(r.getURL());\n            ByteArrayOutputStream stdout = new ByteArrayOutputStream();\n            ByteArrayOutputStream stderr = new ByteArrayOutputStream();\n            int ret = cli.execute(\n                Arrays.asList(\n                    \"update-job\",\n                    p.getFullName(),\n                    \"--username\",\n                    \"test\",\n                    \"--password\",\n                    \"test\"\n                ),\n                new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\").getBytes()),\n                stdout,\n                stderr\n            );\n            assertNotEquals(0, ret);\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/RobustReflectionConverterTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"B"}],"commitId":"e46afb59fd09c9418297a0573252171921a48cea","commitMessage":"@@@Merge pull request #1715 from ikedam/feature/JENKINS-28440_HandleCriticalField\n\n[JENKINS-28440] Reject configurations with errors in critical fields via REST / CLI","date":"2015-08-16 17:38:51","modifiedFileCount":"6","status":"B","submitter":"Daniel Beck"},{"authorTime":"2015-08-16 17:38:51","codes":[{"authorDate":"2015-08-27 02:48:14","commitOrder":2,"curCode":"    public void testRestInterfaceFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.login(\"test\", \"test\");\n            WebRequest req = new WebRequest(\n                    wc.createCrumbedUrl(String.format(\"%s/config.xml\", p.getUrl())),\n                    HttpMethod.POST\n            );\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));\n            wc.getPage(req);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.login(\"test\", \"test\");\n            WebRequest req = new WebRequest(\n                    wc.createCrumbedUrl(String.format(\"%s/config.xml\", p.getUrl())),\n                    HttpMethod.POST\n            );\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\"));\n            \n            try {\n                wc.getPage(req);\n                fail(\"Submitting unacceptable configuration via REST should fail.\");\n            } catch (FailingHttpStatusCodeException e) {\n                \r\n            }\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","date":"2015-08-27 02:48:14","endLine":260,"groupId":"572","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestInterfaceFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f9/29d6b2bc51784e0f524cae1cf61396abacda99.src","preCode":"    public void testRestInterfaceFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.login(\"test\", \"test\");\n            WebRequestSettings req = new WebRequestSettings(\n                    wc.createCrumbedUrl(String.format(\"%s/config.xml\", p.getUrl())),\n                    HttpMethod.POST\n            );\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));\n            wc.getPage(req);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.login(\"test\", \"test\");\n            WebRequestSettings req = new WebRequestSettings(\n                    wc.createCrumbedUrl(String.format(\"%s/config.xml\", p.getUrl())),\n                    HttpMethod.POST\n            );\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\"));\n            \n            try {\n                wc.getPage(req);\n                fail(\"Submitting unacceptable configuration via REST should fail.\");\n            } catch (FailingHttpStatusCodeException e) {\n                \r\n            }\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/RobustReflectionConverterTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2015-08-16 17:38:51","commitOrder":2,"curCode":"    public void testCliFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLI cli = new CLI(r.getURL());\n            ByteArrayOutputStream stdout = new ByteArrayOutputStream();\n            ByteArrayOutputStream stderr = new ByteArrayOutputStream();\n            int ret = cli.execute(\n                Arrays.asList(\n                    \"update-job\",\n                    p.getFullName(),\n                    \"--username\",\n                    \"test\",\n                    \"--password\",\n                    \"test\"\n                ),\n                new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD).getBytes()),\n                stdout,\n                stderr\n            );\n            assertEquals(0, ret);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLI cli = new CLI(r.getURL());\n            ByteArrayOutputStream stdout = new ByteArrayOutputStream();\n            ByteArrayOutputStream stderr = new ByteArrayOutputStream();\n            int ret = cli.execute(\n                Arrays.asList(\n                    \"update-job\",\n                    p.getFullName(),\n                    \"--username\",\n                    \"test\",\n                    \"--password\",\n                    \"test\"\n                ),\n                new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\").getBytes()),\n                stdout,\n                stderr\n            );\n            assertNotEquals(0, ret);\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","date":"2015-08-16 17:38:51","endLine":342,"groupId":"1642","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCliFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/fa/3d3ad1cf61b2fdac63056a96b403ccda723445.src","preCode":"    public void testCliFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLI cli = new CLI(r.getURL());\n            ByteArrayOutputStream stdout = new ByteArrayOutputStream();\n            ByteArrayOutputStream stderr = new ByteArrayOutputStream();\n            int ret = cli.execute(\n                Arrays.asList(\n                    \"update-job\",\n                    p.getFullName(),\n                    \"--username\",\n                    \"test\",\n                    \"--password\",\n                    \"test\"\n                ),\n                new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD).getBytes()),\n                stdout,\n                stderr\n            );\n            assertEquals(0, ret);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLI cli = new CLI(r.getURL());\n            ByteArrayOutputStream stdout = new ByteArrayOutputStream();\n            ByteArrayOutputStream stderr = new ByteArrayOutputStream();\n            int ret = cli.execute(\n                Arrays.asList(\n                    \"update-job\",\n                    p.getFullName(),\n                    \"--username\",\n                    \"test\",\n                    \"--password\",\n                    \"test\"\n                ),\n                new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\").getBytes()),\n                stdout,\n                stderr\n            );\n            assertNotEquals(0, ret);\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/RobustReflectionConverterTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"}],"commitId":"f552d48f5047e42810cc0e999cb33fbf9519d284","commitMessage":"@@@Merge pull request #1774 from tfennelly/upgrade-htmlunit\n\nUpgrade HtmlUnit to v2.18 (from forked version)","date":"2015-08-27 02:48:14","modifiedFileCount":"47","status":"M","submitter":"Tom Fennelly"},{"authorTime":"2015-08-31 21:46:14","codes":[{"authorDate":"2015-08-27 02:48:14","commitOrder":3,"curCode":"    public void testRestInterfaceFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.login(\"test\", \"test\");\n            WebRequest req = new WebRequest(\n                    wc.createCrumbedUrl(String.format(\"%s/config.xml\", p.getUrl())),\n                    HttpMethod.POST\n            );\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));\n            wc.getPage(req);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.login(\"test\", \"test\");\n            WebRequest req = new WebRequest(\n                    wc.createCrumbedUrl(String.format(\"%s/config.xml\", p.getUrl())),\n                    HttpMethod.POST\n            );\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\"));\n            \n            try {\n                wc.getPage(req);\n                fail(\"Submitting unacceptable configuration via REST should fail.\");\n            } catch (FailingHttpStatusCodeException e) {\n                \r\n            }\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","date":"2015-08-27 02:48:14","endLine":260,"groupId":"572","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestInterfaceFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f9/29d6b2bc51784e0f524cae1cf61396abacda99.src","preCode":"    public void testRestInterfaceFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.login(\"test\", \"test\");\n            WebRequest req = new WebRequest(\n                    wc.createCrumbedUrl(String.format(\"%s/config.xml\", p.getUrl())),\n                    HttpMethod.POST\n            );\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));\n            wc.getPage(req);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.login(\"test\", \"test\");\n            WebRequest req = new WebRequest(\n                    wc.createCrumbedUrl(String.format(\"%s/config.xml\", p.getUrl())),\n                    HttpMethod.POST\n            );\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\"));\n            \n            try {\n                wc.getPage(req);\n                fail(\"Submitting unacceptable configuration via REST should fail.\");\n            } catch (FailingHttpStatusCodeException e) {\n                \r\n            }\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/RobustReflectionConverterTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"N"},{"authorDate":"2015-08-31 21:46:14","commitOrder":3,"curCode":"    public void testCliFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            \n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD).getBytes()))\n                    .withArgs(\n                            p.getFullName(),\n                            \"--username\",\n                            \"test\",\n                            \"--password\",\n                            \"test\"\n                    )\n                    .invoke();\n            \n            assertEquals(0, ret.returnCode());\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\").getBytes()))\n                    .withArgs(\n                            p.getFullName(),\n                            \"--username\",\n                            \"test\",\n                            \"--password\",\n                            \"test\"\n                    )\n                    .invoke();\n            assertNotEquals(0, ret.returnCode());\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","date":"2015-08-31 21:46:14","endLine":332,"groupId":"573","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCliFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/0b/ff3490cf098a94fca4bcdfa21f547ad42a72ef.src","preCode":"    public void testCliFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLI cli = new CLI(r.getURL());\n            ByteArrayOutputStream stdout = new ByteArrayOutputStream();\n            ByteArrayOutputStream stderr = new ByteArrayOutputStream();\n            int ret = cli.execute(\n                Arrays.asList(\n                    \"update-job\",\n                    p.getFullName(),\n                    \"--username\",\n                    \"test\",\n                    \"--password\",\n                    \"test\"\n                ),\n                new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD).getBytes()),\n                stdout,\n                stderr\n            );\n            assertEquals(0, ret);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLI cli = new CLI(r.getURL());\n            ByteArrayOutputStream stdout = new ByteArrayOutputStream();\n            ByteArrayOutputStream stderr = new ByteArrayOutputStream();\n            int ret = cli.execute(\n                Arrays.asList(\n                    \"update-job\",\n                    p.getFullName(),\n                    \"--username\",\n                    \"test\",\n                    \"--password\",\n                    \"test\"\n                ),\n                new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\").getBytes()),\n                stdout,\n                stderr\n            );\n            assertNotEquals(0, ret);\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/RobustReflectionConverterTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"69a98484c8a879fef9532e68670e72f5d74267b7","commitMessage":"@@@Merge pull request #1811 from ikedam/feature/JENKINS-28440_AdditionalFix\n\n[JENKINS-28440] Additional fixes for #1715","date":"2015-08-31 21:46:14","modifiedFileCount":"2","status":"M","submitter":"Jesse Glick"},{"authorTime":"2015-08-31 21:46:14","codes":[{"authorDate":"2017-12-16 16:25:30","commitOrder":4,"curCode":"    public void testRestInterfaceFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n\n        User test = User.getById(\"test\", true);\n\n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.withBasicApiToken(test);\n            WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));\n            wc.getPage(req);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.withBasicApiToken(test);\n            WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\"));\n            \n            try {\n                wc.getPage(req);\n                fail(\"Submitting unacceptable configuration via REST should fail.\");\n            } catch (FailingHttpStatusCodeException e) {\n                \r\n            }\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","date":"2017-12-16 16:25:30","endLine":256,"groupId":"1537","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestInterfaceFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/c5/7acd55cd028b19358c519de44e9cc6a667cbc3.src","preCode":"    public void testRestInterfaceFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.login(\"test\", \"test\");\n            WebRequest req = new WebRequest(\n                    wc.createCrumbedUrl(String.format(\"%s/config.xml\", p.getUrl())),\n                    HttpMethod.POST\n            );\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));\n            wc.getPage(req);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.login(\"test\", \"test\");\n            WebRequest req = new WebRequest(\n                    wc.createCrumbedUrl(String.format(\"%s/config.xml\", p.getUrl())),\n                    HttpMethod.POST\n            );\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\"));\n            \n            try {\n                wc.getPage(req);\n                fail(\"Submitting unacceptable configuration via REST should fail.\");\n            } catch (FailingHttpStatusCodeException e) {\n                \r\n            }\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/RobustReflectionConverterTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2015-08-31 21:46:14","commitOrder":4,"curCode":"    public void testCliFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            \n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD).getBytes()))\n                    .withArgs(\n                            p.getFullName(),\n                            \"--username\",\n                            \"test\",\n                            \"--password\",\n                            \"test\"\n                    )\n                    .invoke();\n            \n            assertEquals(0, ret.returnCode());\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\").getBytes()))\n                    .withArgs(\n                            p.getFullName(),\n                            \"--username\",\n                            \"test\",\n                            \"--password\",\n                            \"test\"\n                    )\n                    .invoke();\n            assertNotEquals(0, ret.returnCode());\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","date":"2015-08-31 21:46:14","endLine":332,"groupId":"573","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCliFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/0b/ff3490cf098a94fca4bcdfa21f547ad42a72ef.src","preCode":"    public void testCliFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            \n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD).getBytes()))\n                    .withArgs(\n                            p.getFullName(),\n                            \"--username\",\n                            \"test\",\n                            \"--password\",\n                            \"test\"\n                    )\n                    .invoke();\n            \n            assertEquals(0, ret.returnCode());\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\").getBytes()))\n                    .withArgs(\n                            p.getFullName(),\n                            \"--username\",\n                            \"test\",\n                            \"--password\",\n                            \"test\"\n                    )\n                    .invoke();\n            assertNotEquals(0, ret.returnCode());\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/RobustReflectionConverterTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"}],"commitId":"814d202716a6c61c7d371c6a62755d296fe199a5","commitMessage":"@@@[JENKINS-22474] API Token does not require CSRF token (#3129)\n\n* [JENKINS-22474] API Token does not require CSRF token\n- in order to ease the use of the api.  we are not requiring the request to have a crumb\n- in terms of security it's not a problem normally since the CSRF attacks use the cookies and in case of API Token.  it's session-less / cookie-less\n\n* - adjust the license header\n\n* - add test for basic authentication\n- add test for login process\n\n* - add test for form submission using ui (htmlunit).  not just login form\n\n* - modification requested by Jesse\n\n* - pom.xml update to use the last version of jenkins-test-harness (with the token helper methods)\n- beginning of the simplification of tests\n\n* - using the try-with-resource approach to ease readability\n\n* - using closure method now\n\n* - add missing login transformation\n\n* - add unit test\n\n* - use withToken\n- remove useless crumb for GET method\n- add fail (otherwise the assert in catch is not as useful as it could be)\n\n* another bunch of test cases\n\n* - for HudsonTestCase.  some additional modifications are required: changing the view / different type of management for the variable inside the views\n\n* - small other tests\n\n* - last batch for the login method\n\n* - crumb is not more required since we are using API Token\n\n* - converting auth to ApiToken to avoid crumb method\n\n* - converting auth to ApiToken to avoid crumb method (second)\n\n* - remove usage of closure aware methods\n\n* - update the pom using the snapshot as adviced by Jesse\n- modifications on other class to adapt to the last modifications in JTH\n\n* - modifications requested during code review\n\n* - also put back my changes to the conflicted file\n\n* - correction of the merge :)\n","date":"2017-12-16 16:25:30","modifiedFileCount":"21","status":"M","submitter":"Wadeck Follonier"},{"authorTime":"2015-08-31 21:46:14","codes":[{"authorDate":"2018-06-24 05:20:44","commitOrder":5,"curCode":"    public void testRestInterfaceFailure() throws Exception {\n        ApiTokenTestHelper.enableLegacyBehavior();\n\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n\n        User test = User.getById(\"test\", true);\n\n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.withBasicApiToken(test);\n            WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));\n            wc.getPage(req);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.withBasicApiToken(test);\n            WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\"));\n            \n            try {\n                wc.getPage(req);\n                fail(\"Submitting unacceptable configuration via REST should fail.\");\n            } catch (FailingHttpStatusCodeException e) {\n                \r\n            }\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","date":"2018-06-24 05:20:44","endLine":261,"groupId":"1537","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestInterfaceFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/35/f489b4eac0e988c4da52149b83d304010ef849.src","preCode":"    public void testRestInterfaceFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n\n        User test = User.getById(\"test\", true);\n\n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.withBasicApiToken(test);\n            WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));\n            wc.getPage(req);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.withBasicApiToken(test);\n            WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\"));\n            \n            try {\n                wc.getPage(req);\n                fail(\"Submitting unacceptable configuration via REST should fail.\");\n            } catch (FailingHttpStatusCodeException e) {\n                \r\n            }\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/RobustReflectionConverterTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"},{"authorDate":"2015-08-31 21:46:14","commitOrder":5,"curCode":"    public void testCliFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            \n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD).getBytes()))\n                    .withArgs(\n                            p.getFullName(),\n                            \"--username\",\n                            \"test\",\n                            \"--password\",\n                            \"test\"\n                    )\n                    .invoke();\n            \n            assertEquals(0, ret.returnCode());\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\").getBytes()))\n                    .withArgs(\n                            p.getFullName(),\n                            \"--username\",\n                            \"test\",\n                            \"--password\",\n                            \"test\"\n                    )\n                    .invoke();\n            assertNotEquals(0, ret.returnCode());\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","date":"2015-08-31 21:46:14","endLine":332,"groupId":"573","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCliFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/0b/ff3490cf098a94fca4bcdfa21f547ad42a72ef.src","preCode":"    public void testCliFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            \n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD).getBytes()))\n                    .withArgs(\n                            p.getFullName(),\n                            \"--username\",\n                            \"test\",\n                            \"--password\",\n                            \"test\"\n                    )\n                    .invoke();\n            \n            assertEquals(0, ret.returnCode());\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\").getBytes()))\n                    .withArgs(\n                            p.getFullName(),\n                            \"--username\",\n                            \"test\",\n                            \"--password\",\n                            \"test\"\n                    )\n                    .invoke();\n            assertNotEquals(0, ret.returnCode());\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/RobustReflectionConverterTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"}],"commitId":"fd1ec1d125b28f0c069e050ac1abd1a20e09feef","commitMessage":"@@@Merge pull request #3271 from Wadeck/JENKINS-32442-32776_HASHED_TOKEN\n\n[JENKINS-32442][JENKINS-32776] New API Token system","date":"2018-06-24 05:20:44","modifiedFileCount":"19","status":"M","submitter":"Daniel Beck"},{"authorTime":"2015-08-31 21:46:14","codes":[{"authorDate":"2019-02-08 13:43:50","commitOrder":6,"curCode":"    public void testRestInterfaceFailure() throws Exception {\n        ApiTokenTestHelper.enableLegacyBehavior();\n\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n\n        User test = User.getById(\"test\", true);\n\n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.withBasicApiToken(test);\n            WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));\n            wc.getPage(req);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient()\n                    .withThrowExceptionOnFailingStatusCode(false);\n            wc.withBasicApiToken(test);\n            WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\"));\n            \n            Page page = wc.getPage(req);\n            assertEquals(\"Submitting unacceptable configuration via REST should fail.\", \n                    HttpURLConnection.HTTP_INTERNAL_ERROR,\n                    page.getWebResponse().getStatusCode());\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","date":"2019-02-08 13:43:50","endLine":260,"groupId":"8039","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestInterfaceFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/28/a3aa3a10bcf723ee53e1c45b4fcbea871208f6.src","preCode":"    public void testRestInterfaceFailure() throws Exception {\n        ApiTokenTestHelper.enableLegacyBehavior();\n\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n\n        User test = User.getById(\"test\", true);\n\n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.withBasicApiToken(test);\n            WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));\n            wc.getPage(req);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.withBasicApiToken(test);\n            WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\"));\n            \n            try {\n                wc.getPage(req);\n                fail(\"Submitting unacceptable configuration via REST should fail.\");\n            } catch (FailingHttpStatusCodeException e) {\n                \r\n            }\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/RobustReflectionConverterTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"},{"authorDate":"2015-08-31 21:46:14","commitOrder":6,"curCode":"    public void testCliFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            \n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD).getBytes()))\n                    .withArgs(\n                            p.getFullName(),\n                            \"--username\",\n                            \"test\",\n                            \"--password\",\n                            \"test\"\n                    )\n                    .invoke();\n            \n            assertEquals(0, ret.returnCode());\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\").getBytes()))\n                    .withArgs(\n                            p.getFullName(),\n                            \"--username\",\n                            \"test\",\n                            \"--password\",\n                            \"test\"\n                    )\n                    .invoke();\n            assertNotEquals(0, ret.returnCode());\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","date":"2015-08-31 21:46:14","endLine":332,"groupId":"573","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCliFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/0b/ff3490cf098a94fca4bcdfa21f547ad42a72ef.src","preCode":"    public void testCliFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            \n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD).getBytes()))\n                    .withArgs(\n                            p.getFullName(),\n                            \"--username\",\n                            \"test\",\n                            \"--password\",\n                            \"test\"\n                    )\n                    .invoke();\n            \n            assertEquals(0, ret.returnCode());\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\").getBytes()))\n                    .withArgs(\n                            p.getFullName(),\n                            \"--username\",\n                            \"test\",\n                            \"--password\",\n                            \"test\"\n                    )\n                    .invoke();\n            assertNotEquals(0, ret.returnCode());\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/RobustReflectionConverterTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"}],"commitId":"fab166242dd407a08dcafb727abff94fd3ca7dd1","commitMessage":"@@@Merge pull request #3618 from Wadeck/JENKINS-53511_WEBCLIENT_DISCOVERY_IMPROVEMENT\n\n[JENKINS-53511] Improve discovery and readability of WebClient","date":"2019-02-08 13:43:50","modifiedFileCount":"38","status":"M","submitter":"Oleg Nenashev"},{"authorTime":"2019-02-15 11:42:31","codes":[{"authorDate":"2019-02-08 13:43:50","commitOrder":7,"curCode":"    public void testRestInterfaceFailure() throws Exception {\n        ApiTokenTestHelper.enableLegacyBehavior();\n\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n\n        User test = User.getById(\"test\", true);\n\n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.withBasicApiToken(test);\n            WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));\n            wc.getPage(req);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient()\n                    .withThrowExceptionOnFailingStatusCode(false);\n            wc.withBasicApiToken(test);\n            WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\"));\n            \n            Page page = wc.getPage(req);\n            assertEquals(\"Submitting unacceptable configuration via REST should fail.\", \n                    HttpURLConnection.HTTP_INTERNAL_ERROR,\n                    page.getWebResponse().getStatusCode());\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","date":"2019-02-08 13:43:50","endLine":260,"groupId":"8039","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestInterfaceFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/28/a3aa3a10bcf723ee53e1c45b4fcbea871208f6.src","preCode":"    public void testRestInterfaceFailure() throws Exception {\n        ApiTokenTestHelper.enableLegacyBehavior();\n\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n\n        User test = User.getById(\"test\", true);\n\n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.withBasicApiToken(test);\n            WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));\n            wc.getPage(req);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient()\n                    .withThrowExceptionOnFailingStatusCode(false);\n            wc.withBasicApiToken(test);\n            WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\"));\n            \n            Page page = wc.getPage(req);\n            assertEquals(\"Submitting unacceptable configuration via REST should fail.\", \n                    HttpURLConnection.HTTP_INTERNAL_ERROR,\n                    page.getWebResponse().getStatusCode());\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/RobustReflectionConverterTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"N"},{"authorDate":"2019-02-15 11:42:31","commitOrder":7,"curCode":"    public void testCliFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            \n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .asUser(\"test\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD).getBytes()))\n                    .withArgs(\n                            p.getFullName()\n                    )\n                    .invoke();\n            \n            assertEquals(0, ret.returnCode());\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .asUser(\"test\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\").getBytes()))\n                    .withArgs(\n                            p.getFullName()\n                    )\n                    .invoke();\n            assertNotEquals(0, ret.returnCode());\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","date":"2019-02-15 11:42:31","endLine":328,"groupId":"5861","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testCliFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ea/89b0df3e83eda05aac96913592ecc0554c5d78.src","preCode":"    public void testCliFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            \n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD).getBytes()))\n                    .withArgs(\n                            p.getFullName(),\n                            \"--username\",\n                            \"test\",\n                            \"--password\",\n                            \"test\"\n                    )\n                    .invoke();\n            \n            assertEquals(0, ret.returnCode());\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\").getBytes()))\n                    .withArgs(\n                            p.getFullName(),\n                            \"--username\",\n                            \"test\",\n                            \"--password\",\n                            \"test\"\n                    )\n                    .invoke();\n            assertNotEquals(0, ret.returnCode());\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/RobustReflectionConverterTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"}],"commitId":"cc964ef664250b6737e471ef546a46a37421cb4f","commitMessage":"@@@Merge pull request #3838 from jglick/remotingCLI\n\nRemoving code to support the Remoting-based CLI","date":"2019-02-15 11:42:31","modifiedFileCount":"24","status":"M","submitter":"Jesse Glick"},{"authorTime":"2019-02-15 11:42:31","codes":[{"authorDate":"2021-04-20 01:16:02","commitOrder":8,"curCode":"    public void testRestInterfaceFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n\n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.withBasicApiToken(\"test\");\n            WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));\n            wc.getPage(req);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient()\n                    .withThrowExceptionOnFailingStatusCode(false);\n            wc.withBasicApiToken(\"test\");\n            WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\"));\n            \n            Page page = wc.getPage(req);\n            assertEquals(\"Submitting unacceptable configuration via REST should fail.\", \n                    HttpURLConnection.HTTP_INTERNAL_ERROR,\n                    page.getWebResponse().getStatusCode());\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","date":"2021-04-20 01:16:02","endLine":258,"groupId":"10566","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"testRestInterfaceFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/23/a0086cb9093e80dc174546740c727885c8c707.src","preCode":"    public void testRestInterfaceFailure() throws Exception {\n        ApiTokenTestHelper.enableLegacyBehavior();\n\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n\n        User test = User.getById(\"test\", true);\n\n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient();\n            wc.withBasicApiToken(test);\n            WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));\n            wc.getPage(req);\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc = r.createWebClient()\n                    .withThrowExceptionOnFailingStatusCode(false);\n            wc.withBasicApiToken(test);\n            WebRequest req = new WebRequest(new URL(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\"));\n            \n            Page page = wc.getPage(req);\n            assertEquals(\"Submitting unacceptable configuration via REST should fail.\", \n                    HttpURLConnection.HTTP_INTERNAL_ERROR,\n                    page.getWebResponse().getStatusCode());\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/RobustReflectionConverterTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"},{"authorDate":"2019-02-15 11:42:31","commitOrder":8,"curCode":"    public void testCliFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            \n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .asUser(\"test\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD).getBytes()))\n                    .withArgs(\n                            p.getFullName()\n                    )\n                    .invoke();\n            \n            assertEquals(0, ret.returnCode());\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .asUser(\"test\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\").getBytes()))\n                    .withArgs(\n                            p.getFullName()\n                    )\n                    .invoke();\n            assertNotEquals(0, ret.returnCode());\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","date":"2019-02-15 11:42:31","endLine":328,"groupId":"10566","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testCliFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ea/89b0df3e83eda05aac96913592ecc0554c5d78.src","preCode":"    public void testCliFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            \n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .asUser(\"test\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD).getBytes()))\n                    .withArgs(\n                            p.getFullName()\n                    )\n                    .invoke();\n            \n            assertEquals(0, ret.returnCode());\n            \n            \r\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            \r\n            r.jenkins.reload();\n            \n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n        }\n        \n        \r\n        {\n            FreeStyleProject p = r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n            \n            \r\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLICommandInvoker.Result ret = new CLICommandInvoker(r, \"update-job\")\n                    .asUser(\"test\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\").getBytes()))\n                    .withArgs(\n                            p.getFullName()\n                    )\n                    .invoke();\n            assertNotEquals(0, ret.returnCode());\n            \n            \r\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n            \n            r.jenkins.reload();\n            \n            \r\n            p = r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/RobustReflectionConverterTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"N"}],"commitId":"fb7827580576bac92358b6a643c72010fea0616e","commitMessage":"@@@Adapt to current jenkins-test-harness (#5426)\n\n","date":"2021-04-20 01:16:02","modifiedFileCount":"5","status":"M","submitter":"Jesse Glick"}]
