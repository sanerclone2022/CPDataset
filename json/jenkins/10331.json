[{"authorTime":"2016-10-25 17:13:55","codes":[{"authorDate":"2016-10-25 17:13:55","commitOrder":1,"curCode":"    public void testMessageLoggedWhenNoInstallerFound() throws Exception {\n        final CommandInstaller ci = new CommandInstaller(\"wrong1\", \"echo hello\", \"/opt/jdk\");\n        final BatchCommandInstaller bci = new BatchCommandInstaller(\"wrong2\", \"echo hello\", \"/opt/jdk2\");\n        InstallSourceProperty isp = new InstallSourceProperty(Arrays.asList(ci, bci));\n\n        JDK jdk = new JDK(\"jdk\", null, Collections.singletonList(isp));\n        r.jenkins.getJDKs().add(jdk);\n\n\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.setJDK(jdk);\n        p.getBuildersList().add(new Shell(\"echo $JAVA_HOME\"));\n        FreeStyleBuild b1 = r.buildAndAssertSuccess(p);\n        r.assertLogContains(hudson.tools.Messages.CannotBeInstalled(ci.getDescriptor().getDisplayName(), jdk.getName(), r.jenkins.getDisplayName()), b1);\n        r.assertLogContains(hudson.tools.Messages.CannotBeInstalled(bci.getDescriptor().getDisplayName(), jdk.getName(), r.jenkins.getDisplayName()), b1);\n    }\n","date":"2016-10-25 17:13:55","endLine":120,"groupId":"2591","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMessageLoggedWhenNoInstallerFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d3/8f78097282e7649db87a5e5d72cd6aa197732a.src","preCode":"    public void testMessageLoggedWhenNoInstallerFound() throws Exception {\n        final CommandInstaller ci = new CommandInstaller(\"wrong1\", \"echo hello\", \"/opt/jdk\");\n        final BatchCommandInstaller bci = new BatchCommandInstaller(\"wrong2\", \"echo hello\", \"/opt/jdk2\");\n        InstallSourceProperty isp = new InstallSourceProperty(Arrays.asList(ci, bci));\n\n        JDK jdk = new JDK(\"jdk\", null, Collections.singletonList(isp));\n        r.jenkins.getJDKs().add(jdk);\n\n\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.setJDK(jdk);\n        p.getBuildersList().add(new Shell(\"echo $JAVA_HOME\"));\n        FreeStyleBuild b1 = r.buildAndAssertSuccess(p);\n        r.assertLogContains(hudson.tools.Messages.CannotBeInstalled(ci.getDescriptor().getDisplayName(), jdk.getName(), r.jenkins.getDisplayName()), b1);\n        r.assertLogContains(hudson.tools.Messages.CannotBeInstalled(bci.getDescriptor().getDisplayName(), jdk.getName(), r.jenkins.getDisplayName()), b1);\n    }\n","realPath":"test/src/test/java/hudson/tools/InstallerTranslatorTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"B"},{"authorDate":"2016-10-25 17:13:55","commitOrder":1,"curCode":"    public void testNoMessageLoggedWhenAnyInstallerFound() throws Exception {\n        final CommandInstaller ci = new CommandInstaller(\"wrong1\", \"echo hello\", \"/opt/jdk\");\n        final CommandInstaller ci2 = new CommandInstaller(\"master\", \"echo hello\", \"/opt/jdk2\");\n        InstallSourceProperty isp = new InstallSourceProperty(Arrays.asList(ci, ci2));\n\n        JDK jdk = new JDK(\"jdk\", null, Collections.singletonList(isp));\n        r.jenkins.getJDKs().add(jdk);\n\n\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.setJDK(jdk);\n        p.getBuildersList().add(new Shell(\"echo $JAVA_HOME\"));\n        FreeStyleBuild b1 = r.buildAndAssertSuccess(p);\n        r.assertLogNotContains(ci.getDescriptor().getDisplayName(), b1);\n    }\n","date":"2016-10-25 17:13:55","endLine":138,"groupId":"6708","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoMessageLoggedWhenAnyInstallerFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d3/8f78097282e7649db87a5e5d72cd6aa197732a.src","preCode":"    public void testNoMessageLoggedWhenAnyInstallerFound() throws Exception {\n        final CommandInstaller ci = new CommandInstaller(\"wrong1\", \"echo hello\", \"/opt/jdk\");\n        final CommandInstaller ci2 = new CommandInstaller(\"master\", \"echo hello\", \"/opt/jdk2\");\n        InstallSourceProperty isp = new InstallSourceProperty(Arrays.asList(ci, ci2));\n\n        JDK jdk = new JDK(\"jdk\", null, Collections.singletonList(isp));\n        r.jenkins.getJDKs().add(jdk);\n\n\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.setJDK(jdk);\n        p.getBuildersList().add(new Shell(\"echo $JAVA_HOME\"));\n        FreeStyleBuild b1 = r.buildAndAssertSuccess(p);\n        r.assertLogNotContains(ci.getDescriptor().getDisplayName(), b1);\n    }\n","realPath":"test/src/test/java/hudson/tools/InstallerTranslatorTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"B"}],"commitId":"ae29e6b2463754778c3988e62292a07a846ffe57","commitMessage":"@@@[JENKINS-26940] Print message when installer isn't applicable (#2598)\n\n* [JENKINS-26940] Print message when installer isn't applicable\n\n* [JENKINS-26940] Only print when none found.  add test\n","date":"2016-10-25 17:13:55","modifiedFileCount":"2","status":"B","submitter":"Daniel Beck"},{"authorTime":"2017-02-27 05:17:05","codes":[{"authorDate":"2017-02-27 05:17:05","commitOrder":2,"curCode":"    public void testMessageLoggedWhenNoInstallerFound() throws Exception {\n        final CommandInstaller ci = new CommandInstaller(\"wrong1\", \"echo hello\", \"/opt/jdk\");\n        final BatchCommandInstaller bci = new BatchCommandInstaller(\"wrong2\", \"echo hello\", \"/opt/jdk2\");\n        InstallSourceProperty isp = new InstallSourceProperty(Arrays.asList(ci, bci));\n\n        JDK jdk = new JDK(\"jdk\", null, Collections.singletonList(isp));\n        r.jenkins.getJDKs().add(jdk);\n\n\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.setJDK(jdk);\n        p.getBuildersList().add(Functions.isWindows() ? new BatchFile(\"echo %JAVA_HOME%\") : new Shell(\"echo $JAVA_HOME\"));\n        FreeStyleBuild b1 = r.buildAndAssertSuccess(p);\n        r.assertLogContains(hudson.tools.Messages.CannotBeInstalled(ci.getDescriptor().getDisplayName(), jdk.getName(), r.jenkins.getDisplayName()), b1);\n        r.assertLogContains(hudson.tools.Messages.CannotBeInstalled(bci.getDescriptor().getDisplayName(), jdk.getName(), r.jenkins.getDisplayName()), b1);\n    }\n","date":"2017-02-27 05:17:05","endLine":124,"groupId":"2591","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMessageLoggedWhenNoInstallerFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/53/19d4e4062907919b4ab8eb4eb0c239be90659b.src","preCode":"    public void testMessageLoggedWhenNoInstallerFound() throws Exception {\n        final CommandInstaller ci = new CommandInstaller(\"wrong1\", \"echo hello\", \"/opt/jdk\");\n        final BatchCommandInstaller bci = new BatchCommandInstaller(\"wrong2\", \"echo hello\", \"/opt/jdk2\");\n        InstallSourceProperty isp = new InstallSourceProperty(Arrays.asList(ci, bci));\n\n        JDK jdk = new JDK(\"jdk\", null, Collections.singletonList(isp));\n        r.jenkins.getJDKs().add(jdk);\n\n\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.setJDK(jdk);\n        p.getBuildersList().add(new Shell(\"echo $JAVA_HOME\"));\n        FreeStyleBuild b1 = r.buildAndAssertSuccess(p);\n        r.assertLogContains(hudson.tools.Messages.CannotBeInstalled(ci.getDescriptor().getDisplayName(), jdk.getName(), r.jenkins.getDisplayName()), b1);\n        r.assertLogContains(hudson.tools.Messages.CannotBeInstalled(bci.getDescriptor().getDisplayName(), jdk.getName(), r.jenkins.getDisplayName()), b1);\n    }\n","realPath":"test/src/test/java/hudson/tools/InstallerTranslatorTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2017-02-27 05:17:05","commitOrder":2,"curCode":"    public void testNoMessageLoggedWhenAnyInstallerFound() throws Exception {\n        final AbstractCommandInstaller ci = Functions.isWindows()\n                ? new BatchCommandInstaller(\"wrong1\", \"echo hello\", \"C:\\\\jdk\")\n                : new CommandInstaller(\"wrong1\", \"echo hello\", \"/opt/jdk\");\n        final AbstractCommandInstaller ci2 = Functions.isWindows()\n                ? new BatchCommandInstaller(\"master\", \"echo hello\", \"C:\\\\jdk2\")\n                : new CommandInstaller(\"master\", \"echo hello\", \"/opt/jdk2\");\n        InstallSourceProperty isp = new InstallSourceProperty(Arrays.asList(ci, ci2));\n\n        JDK jdk = new JDK(\"jdk\", null, Collections.singletonList(isp));\n        r.jenkins.getJDKs().add(jdk);\n\n\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.setJDK(jdk);\n        p.getBuildersList().add(Functions.isWindows() ? new BatchFile(\"echo %JAVA_HOME%\") : new Shell(\"echo $JAVA_HOME\"));\n        FreeStyleBuild b1 = r.buildAndAssertSuccess(p);\n        r.assertLogNotContains(ci.getDescriptor().getDisplayName(), b1);\n    }\n","date":"2017-02-27 05:17:05","endLine":146,"groupId":"6708","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoMessageLoggedWhenAnyInstallerFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/53/19d4e4062907919b4ab8eb4eb0c239be90659b.src","preCode":"    public void testNoMessageLoggedWhenAnyInstallerFound() throws Exception {\n        final CommandInstaller ci = new CommandInstaller(\"wrong1\", \"echo hello\", \"/opt/jdk\");\n        final CommandInstaller ci2 = new CommandInstaller(\"master\", \"echo hello\", \"/opt/jdk2\");\n        InstallSourceProperty isp = new InstallSourceProperty(Arrays.asList(ci, ci2));\n\n        JDK jdk = new JDK(\"jdk\", null, Collections.singletonList(isp));\n        r.jenkins.getJDKs().add(jdk);\n\n\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.setJDK(jdk);\n        p.getBuildersList().add(new Shell(\"echo $JAVA_HOME\"));\n        FreeStyleBuild b1 = r.buildAndAssertSuccess(p);\n        r.assertLogNotContains(ci.getDescriptor().getDisplayName(), b1);\n    }\n","realPath":"test/src/test/java/hudson/tools/InstallerTranslatorTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"c63abe3e8cfcb71d27458bebe7752d54edaa2d49","commitMessage":"@@@Merge branch 'master' of github.com:jenkinsci/jenkins\n","date":"2017-02-27 05:17:05","modifiedFileCount":"23","status":"M","submitter":"Kohsuke Kawaguchi"},{"authorTime":"2021-08-16 03:31:53","codes":[{"authorDate":"2017-02-27 05:17:05","commitOrder":3,"curCode":"    public void testMessageLoggedWhenNoInstallerFound() throws Exception {\n        final CommandInstaller ci = new CommandInstaller(\"wrong1\", \"echo hello\", \"/opt/jdk\");\n        final BatchCommandInstaller bci = new BatchCommandInstaller(\"wrong2\", \"echo hello\", \"/opt/jdk2\");\n        InstallSourceProperty isp = new InstallSourceProperty(Arrays.asList(ci, bci));\n\n        JDK jdk = new JDK(\"jdk\", null, Collections.singletonList(isp));\n        r.jenkins.getJDKs().add(jdk);\n\n\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.setJDK(jdk);\n        p.getBuildersList().add(Functions.isWindows() ? new BatchFile(\"echo %JAVA_HOME%\") : new Shell(\"echo $JAVA_HOME\"));\n        FreeStyleBuild b1 = r.buildAndAssertSuccess(p);\n        r.assertLogContains(hudson.tools.Messages.CannotBeInstalled(ci.getDescriptor().getDisplayName(), jdk.getName(), r.jenkins.getDisplayName()), b1);\n        r.assertLogContains(hudson.tools.Messages.CannotBeInstalled(bci.getDescriptor().getDisplayName(), jdk.getName(), r.jenkins.getDisplayName()), b1);\n    }\n","date":"2017-02-27 05:17:05","endLine":124,"groupId":"10331","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMessageLoggedWhenNoInstallerFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/53/19d4e4062907919b4ab8eb4eb0c239be90659b.src","preCode":"    public void testMessageLoggedWhenNoInstallerFound() throws Exception {\n        final CommandInstaller ci = new CommandInstaller(\"wrong1\", \"echo hello\", \"/opt/jdk\");\n        final BatchCommandInstaller bci = new BatchCommandInstaller(\"wrong2\", \"echo hello\", \"/opt/jdk2\");\n        InstallSourceProperty isp = new InstallSourceProperty(Arrays.asList(ci, bci));\n\n        JDK jdk = new JDK(\"jdk\", null, Collections.singletonList(isp));\n        r.jenkins.getJDKs().add(jdk);\n\n\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.setJDK(jdk);\n        p.getBuildersList().add(Functions.isWindows() ? new BatchFile(\"echo %JAVA_HOME%\") : new Shell(\"echo $JAVA_HOME\"));\n        FreeStyleBuild b1 = r.buildAndAssertSuccess(p);\n        r.assertLogContains(hudson.tools.Messages.CannotBeInstalled(ci.getDescriptor().getDisplayName(), jdk.getName(), r.jenkins.getDisplayName()), b1);\n        r.assertLogContains(hudson.tools.Messages.CannotBeInstalled(bci.getDescriptor().getDisplayName(), jdk.getName(), r.jenkins.getDisplayName()), b1);\n    }\n","realPath":"test/src/test/java/hudson/tools/InstallerTranslatorTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"N"},{"authorDate":"2021-08-16 03:31:53","commitOrder":3,"curCode":"    public void testNoMessageLoggedWhenAnyInstallerFound() throws Exception {\n        final AbstractCommandInstaller ci = Functions.isWindows()\n                ? new BatchCommandInstaller(\"wrong1\", \"echo hello\", \"C:\\\\jdk\")\n                : new CommandInstaller(\"wrong1\", \"echo hello\", \"/opt/jdk\");\n        final AbstractCommandInstaller ci2 = Functions.isWindows()\n                ? new BatchCommandInstaller(\"built-in\", \"echo hello\", \"C:\\\\jdk2\")\n                : new CommandInstaller(\"built-in\", \"echo hello\", \"/opt/jdk2\");\n        InstallSourceProperty isp = new InstallSourceProperty(Arrays.asList(ci, ci2));\n\n        JDK jdk = new JDK(\"jdk\", null, Collections.singletonList(isp));\n        r.jenkins.getJDKs().add(jdk);\n\n\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.setJDK(jdk);\n        p.getBuildersList().add(Functions.isWindows() ? new BatchFile(\"echo %JAVA_HOME%\") : new Shell(\"echo $JAVA_HOME\"));\n        FreeStyleBuild b1 = r.buildAndAssertSuccess(p);\n        r.assertLogNotContains(ci.getDescriptor().getDisplayName(), b1);\n    }\n","date":"2021-08-16 03:31:53","endLine":144,"groupId":"10331","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testNoMessageLoggedWhenAnyInstallerFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d4/d5f09c745a2a807f1fe33b01f36aa4ca07c4ec.src","preCode":"    public void testNoMessageLoggedWhenAnyInstallerFound() throws Exception {\n        final AbstractCommandInstaller ci = Functions.isWindows()\n                ? new BatchCommandInstaller(\"wrong1\", \"echo hello\", \"C:\\\\jdk\")\n                : new CommandInstaller(\"wrong1\", \"echo hello\", \"/opt/jdk\");\n        final AbstractCommandInstaller ci2 = Functions.isWindows()\n                ? new BatchCommandInstaller(\"master\", \"echo hello\", \"C:\\\\jdk2\")\n                : new CommandInstaller(\"master\", \"echo hello\", \"/opt/jdk2\");\n        InstallSourceProperty isp = new InstallSourceProperty(Arrays.asList(ci, ci2));\n\n        JDK jdk = new JDK(\"jdk\", null, Collections.singletonList(isp));\n        r.jenkins.getJDKs().add(jdk);\n\n\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.setJDK(jdk);\n        p.getBuildersList().add(Functions.isWindows() ? new BatchFile(\"echo %JAVA_HOME%\") : new Shell(\"echo $JAVA_HOME\"));\n        FreeStyleBuild b1 = r.buildAndAssertSuccess(p);\n        r.assertLogNotContains(ci.getDescriptor().getDisplayName(), b1);\n    }\n","realPath":"test/src/test/java/hudson/tools/InstallerTranslatorTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"96a5526bdb1bad3f553d9a9e7f5987a1e6b11456","commitMessage":"@@@Terminology cleanup: Controller / Built-In Node (#5425)\n\nCo-authored-by: Daniel Beck <daniel-beck@users.noreply.github.com>","date":"2021-08-16 03:31:53","modifiedFileCount":"33","status":"M","submitter":"Daniel Beck"}]
