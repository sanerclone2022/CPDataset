[{"authorTime":"2015-05-15 21:28:45","codes":[{"authorDate":"2015-05-15 21:28:45","commitOrder":1,"curCode":"    public void testFreestyleWithExceptionPublisher() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); \r\n        p.getPublishersList().add(new AbortExceptionPublisher()); \r\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); \r\n        final ArtifactArchiver artifactArchiver = new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); \r\n\n        FreeStyleBuild b = p.scheduleBuild2(0).get();\n\n        assertEquals(\"Build must fail, because we used AbortExceptionPublisher\", b.getResult(), Result.FAILURE);\n        j.assertLogNotContains(\"\\tat\", b); \r\n        j.assertLogContains(\"Threw AbortException from publisher!\", b); \r\n        File file = new File(b.getArtifactsDir(), \"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", file.exists());\n        assertTrue(\"Third publisher must see FAILURE status\",\n                FileUtils.readFileToString(file).equals(Result.FAILURE.toString()));\n    }\n","date":"2015-05-15 21:28:45","endLine":81,"groupId":"7763","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFreestyleWithExceptionPublisher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d7/a5799e94c2f64ba6ae3cd9eabfa1faa6715a3a.src","preCode":"    public void testFreestyleWithExceptionPublisher() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); \r\n        p.getPublishersList().add(new AbortExceptionPublisher()); \r\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); \r\n        final ArtifactArchiver artifactArchiver = new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); \r\n\n        FreeStyleBuild b = p.scheduleBuild2(0).get();\n\n        assertEquals(\"Build must fail, because we used AbortExceptionPublisher\", b.getResult(), Result.FAILURE);\n        j.assertLogNotContains(\"\\tat\", b); \r\n        j.assertLogContains(\"Threw AbortException from publisher!\", b); \r\n        File file = new File(b.getArtifactsDir(), \"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", file.exists());\n        assertTrue(\"Third publisher must see FAILURE status\",\n                FileUtils.readFileToString(file).equals(Result.FAILURE.toString()));\n    }\n","realPath":"test/src/test/java/hudson/model/FreestyleJobPublisherTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"},{"authorDate":"2015-05-15 21:28:45","commitOrder":1,"curCode":"    public void testFreestyleWithIOExceptionPublisher() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); \r\n        p.getPublishersList().add(new IOExceptionPublisher());   \r\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); \r\n        final ArtifactArchiver artifactArchiver = new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); \r\n\n        FreeStyleBuild b = p.scheduleBuild2(0).get();\n\n        assertEquals(\"Build must fail, because we used FalsePublisher\", b.getResult(), Result.FAILURE);\n        j.assertLogContains(\"\\tat hudson.model.utils.IOExceptionPublisher\", b); \r\n        j.assertLogContains(\"Threw IOException from publisher!\", b); \r\n        File file = new File(b.getArtifactsDir(), \"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", file.exists());\n        assertTrue(\"Third publisher must see FAILURE status\",\n                FileUtils.readFileToString(file).equals(Result.FAILURE.toString()));\n    }\n","date":"2015-05-15 21:28:45","endLine":107,"groupId":"9489","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFreestyleWithIOExceptionPublisher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d7/a5799e94c2f64ba6ae3cd9eabfa1faa6715a3a.src","preCode":"    public void testFreestyleWithIOExceptionPublisher() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); \r\n        p.getPublishersList().add(new IOExceptionPublisher());   \r\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); \r\n        final ArtifactArchiver artifactArchiver = new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); \r\n\n        FreeStyleBuild b = p.scheduleBuild2(0).get();\n\n        assertEquals(\"Build must fail, because we used FalsePublisher\", b.getResult(), Result.FAILURE);\n        j.assertLogContains(\"\\tat hudson.model.utils.IOExceptionPublisher\", b); \r\n        j.assertLogContains(\"Threw IOException from publisher!\", b); \r\n        File file = new File(b.getArtifactsDir(), \"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", file.exists());\n        assertTrue(\"Third publisher must see FAILURE status\",\n                FileUtils.readFileToString(file).equals(Result.FAILURE.toString()));\n    }\n","realPath":"test/src/test/java/hudson/model/FreestyleJobPublisherTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"}],"commitId":"2c6bc734b741ab18631973ecd9722322b22616ca","commitMessage":"@@@Merge branch 'master' into extensionlist-listener\n\n* master: (61 commits)\n  [JENKINS-28384] Noting merge of #1700.\n  update changelog: PR 1682 -> issue 28233.  fix markup issue\n  Remove duplicated 1.613 section from changelog\n  [FIXED JENKINS-28384] NPE when Node.toComputer ? null.\n  Refactor fingerprint classes: Javadoc and annotations\n  fixup ce747f942c3502f3dc93b69079b4786ceb38fe86\n  Refactor ArgumentListBuilder#toWindowsCommand\n  Improve ArgumentListBuilder#toWindowsCommand test coverage\n  Forgotten @Test annotation\n  updated changelog for release\n  updated changelog for release\n  [maven-release-plugin] prepare release jenkins-1.613\n  [maven-release-plugin] prepare for next development iteration\n  Report launcher exited before establishing the channel\n  Remove erroneous '+ ' from log message.\n  Increase visibility of Java 7 requirement\n  Expose SlaveComputer#getLogDir() explicitly\n  [FIXED JENKINS-28227] Switch to Enblish locale in RunTest#getDurationString to test messages.\n  Noting #1591\n  Noting #1682\n  ...\n","date":"2015-05-15 21:28:45","modifiedFileCount":"25","status":"B","submitter":"tfennelly"},{"authorTime":"2020-07-21 11:16:06","codes":[{"authorDate":"2020-07-21 11:16:06","commitOrder":2,"curCode":"    public void testFreestyleWithExceptionPublisher() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); \r\n        p.getPublishersList().add(new AbortExceptionPublisher()); \r\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); \r\n        final ArtifactArchiver artifactArchiver = new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); \r\n\n        FreeStyleBuild b = p.scheduleBuild2(0).get();\n\n        assertEquals(\"Build must fail, because we used AbortExceptionPublisher\", b.getResult(), Result.FAILURE);\n        j.assertLogNotContains(\"\\tat\", b); \r\n        j.assertLogContains(\"Threw AbortException from publisher!\", b); \r\n        File file = new File(b.getArtifactsDir(), \"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", file.exists());\n        assertEquals(\"Third publisher must see FAILURE status\", FileUtils.readFileToString(file), Result.FAILURE.toString());\n    }\n","date":"2020-07-21 11:16:06","endLine":73,"groupId":"7763","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFreestyleWithExceptionPublisher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/28/1f0f0946899db44d2f383b02296e98df77f70e.src","preCode":"    public void testFreestyleWithExceptionPublisher() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); \r\n        p.getPublishersList().add(new AbortExceptionPublisher()); \r\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); \r\n        final ArtifactArchiver artifactArchiver = new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); \r\n\n        FreeStyleBuild b = p.scheduleBuild2(0).get();\n\n        assertEquals(\"Build must fail, because we used AbortExceptionPublisher\", b.getResult(), Result.FAILURE);\n        j.assertLogNotContains(\"\\tat\", b); \r\n        j.assertLogContains(\"Threw AbortException from publisher!\", b); \r\n        File file = new File(b.getArtifactsDir(), \"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", file.exists());\n        assertTrue(\"Third publisher must see FAILURE status\",\n                FileUtils.readFileToString(file).equals(Result.FAILURE.toString()));\n    }\n","realPath":"test/src/test/java/hudson/model/FreestyleJobPublisherTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2020-07-21 11:16:06","commitOrder":2,"curCode":"    public void testFreestyleWithIOExceptionPublisher() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); \r\n        p.getPublishersList().add(new IOExceptionPublisher());   \r\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); \r\n        final ArtifactArchiver artifactArchiver = new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); \r\n\n        FreeStyleBuild b = p.scheduleBuild2(0).get();\n\n        assertEquals(\"Build must fail, because we used FalsePublisher\", b.getResult(), Result.FAILURE);\n        j.assertLogContains(\"\\tat hudson.model.utils.IOExceptionPublisher\", b); \r\n        j.assertLogContains(\"Threw IOException from publisher!\", b); \r\n        File file = new File(b.getArtifactsDir(), \"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", file.exists());\n        assertEquals(\"Third publisher must see FAILURE status\", FileUtils.readFileToString(file), Result.FAILURE.toString());\n    }\n","date":"2020-07-21 11:16:06","endLine":98,"groupId":"9489","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFreestyleWithIOExceptionPublisher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/28/1f0f0946899db44d2f383b02296e98df77f70e.src","preCode":"    public void testFreestyleWithIOExceptionPublisher() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); \r\n        p.getPublishersList().add(new IOExceptionPublisher());   \r\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); \r\n        final ArtifactArchiver artifactArchiver = new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); \r\n\n        FreeStyleBuild b = p.scheduleBuild2(0).get();\n\n        assertEquals(\"Build must fail, because we used FalsePublisher\", b.getResult(), Result.FAILURE);\n        j.assertLogContains(\"\\tat hudson.model.utils.IOExceptionPublisher\", b); \r\n        j.assertLogContains(\"Threw IOException from publisher!\", b); \r\n        File file = new File(b.getArtifactsDir(), \"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", file.exists());\n        assertTrue(\"Third publisher must see FAILURE status\",\n                FileUtils.readFileToString(file).equals(Result.FAILURE.toString()));\n    }\n","realPath":"test/src/test/java/hudson/model/FreestyleJobPublisherTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"eb636e252161d8952b9536214dd8a0ec439a3ad7","commitMessage":"@@@Merge pull request #4851 from StefanSpieker/test_refactorings_2\n\nTests: Refactoring of various things","date":"2020-07-21 11:16:06","modifiedFileCount":"19","status":"M","submitter":"Tim Jacomb"},{"authorTime":"2021-03-02 16:17:27","codes":[{"authorDate":"2021-03-02 16:17:27","commitOrder":3,"curCode":"    public void testFreestyleWithExceptionPublisher() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); \r\n        p.getPublishersList().add(new AbortExceptionPublisher()); \r\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); \r\n        final ArtifactArchiver artifactArchiver = new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); \r\n\n        FreeStyleBuild b = p.scheduleBuild2(0).get();\n\n        assertEquals(\"Build must fail, because we used AbortExceptionPublisher\", Result.FAILURE, b.getResult());\n        j.assertLogNotContains(\"\\tat\", b); \r\n        j.assertLogContains(\"Threw AbortException from publisher!\", b); \r\n        File file = new File(b.getArtifactsDir(), \"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", file.exists());\n        assertEquals(\"Third publisher must see FAILURE status\", FileUtils.readFileToString(file), Result.FAILURE.toString());\n    }\n","date":"2021-03-02 16:17:27","endLine":73,"groupId":"7763","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFreestyleWithExceptionPublisher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ad/ca4824b8540047fa7dd93c6e1d9216e1d5a275.src","preCode":"    public void testFreestyleWithExceptionPublisher() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); \r\n        p.getPublishersList().add(new AbortExceptionPublisher()); \r\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); \r\n        final ArtifactArchiver artifactArchiver = new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); \r\n\n        FreeStyleBuild b = p.scheduleBuild2(0).get();\n\n        assertEquals(\"Build must fail, because we used AbortExceptionPublisher\", b.getResult(), Result.FAILURE);\n        j.assertLogNotContains(\"\\tat\", b); \r\n        j.assertLogContains(\"Threw AbortException from publisher!\", b); \r\n        File file = new File(b.getArtifactsDir(), \"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", file.exists());\n        assertEquals(\"Third publisher must see FAILURE status\", FileUtils.readFileToString(file), Result.FAILURE.toString());\n    }\n","realPath":"test/src/test/java/hudson/model/FreestyleJobPublisherTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2021-03-02 16:17:27","commitOrder":3,"curCode":"    public void testFreestyleWithIOExceptionPublisher() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); \r\n        p.getPublishersList().add(new IOExceptionPublisher());   \r\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); \r\n        final ArtifactArchiver artifactArchiver = new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); \r\n\n        FreeStyleBuild b = p.scheduleBuild2(0).get();\n\n        assertEquals(\"Build must fail, because we used FalsePublisher\", Result.FAILURE, b.getResult());\n        j.assertLogContains(\"\\tat hudson.model.utils.IOExceptionPublisher\", b); \r\n        j.assertLogContains(\"Threw IOException from publisher!\", b); \r\n        File file = new File(b.getArtifactsDir(), \"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", file.exists());\n        assertEquals(\"Third publisher must see FAILURE status\", FileUtils.readFileToString(file), Result.FAILURE.toString());\n    }\n","date":"2021-03-02 16:17:27","endLine":98,"groupId":"7763","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFreestyleWithIOExceptionPublisher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ad/ca4824b8540047fa7dd93c6e1d9216e1d5a275.src","preCode":"    public void testFreestyleWithIOExceptionPublisher() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); \r\n        p.getPublishersList().add(new IOExceptionPublisher());   \r\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); \r\n        final ArtifactArchiver artifactArchiver = new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); \r\n\n        FreeStyleBuild b = p.scheduleBuild2(0).get();\n\n        assertEquals(\"Build must fail, because we used FalsePublisher\", b.getResult(), Result.FAILURE);\n        j.assertLogContains(\"\\tat hudson.model.utils.IOExceptionPublisher\", b); \r\n        j.assertLogContains(\"Threw IOException from publisher!\", b); \r\n        File file = new File(b.getArtifactsDir(), \"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", file.exists());\n        assertEquals(\"Third publisher must see FAILURE status\", FileUtils.readFileToString(file), Result.FAILURE.toString());\n    }\n","realPath":"test/src/test/java/hudson/model/FreestyleJobPublisherTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"9cf3f73abdeddf360f67d98577a15b8cb0dc4162","commitMessage":"@@@Clean up JUnit assertions (#5314)\n\n","date":"2021-03-02 16:17:27","modifiedFileCount":"35","status":"M","submitter":"Basil Crow"},{"authorTime":"2021-04-12 01:49:34","codes":[{"authorDate":"2021-04-12 01:49:34","commitOrder":4,"curCode":"    public void testFreestyleWithExceptionPublisher() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); \r\n        p.getPublishersList().add(new AbortExceptionPublisher()); \r\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); \r\n        final ArtifactArchiver artifactArchiver = new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); \r\n\n        FreeStyleBuild b = p.scheduleBuild2(0).get();\n\n        assertEquals(\"Build must fail, because we used AbortExceptionPublisher\", Result.FAILURE, b.getResult());\n        j.assertLogNotContains(\"\\tat\", b); \r\n        j.assertLogContains(\"Threw AbortException from publisher!\", b); \r\n        File file = new File(b.getArtifactsDir(), \"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", file.exists());\n        assertEquals(\"Third publisher must see FAILURE status\", FileUtils.readFileToString(file, StandardCharsets.UTF_8), Result.FAILURE.toString());\n    }\n","date":"2021-04-12 01:49:34","endLine":74,"groupId":"10463","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testFreestyleWithExceptionPublisher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ed/bacd30d341c25d1347823c49023b0b7855d3ca.src","preCode":"    public void testFreestyleWithExceptionPublisher() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); \r\n        p.getPublishersList().add(new AbortExceptionPublisher()); \r\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); \r\n        final ArtifactArchiver artifactArchiver = new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); \r\n\n        FreeStyleBuild b = p.scheduleBuild2(0).get();\n\n        assertEquals(\"Build must fail, because we used AbortExceptionPublisher\", Result.FAILURE, b.getResult());\n        j.assertLogNotContains(\"\\tat\", b); \r\n        j.assertLogContains(\"Threw AbortException from publisher!\", b); \r\n        File file = new File(b.getArtifactsDir(), \"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", file.exists());\n        assertEquals(\"Third publisher must see FAILURE status\", FileUtils.readFileToString(file), Result.FAILURE.toString());\n    }\n","realPath":"test/src/test/java/hudson/model/FreestyleJobPublisherTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2021-04-12 01:49:34","commitOrder":4,"curCode":"    public void testFreestyleWithIOExceptionPublisher() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); \r\n        p.getPublishersList().add(new IOExceptionPublisher());   \r\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); \r\n        final ArtifactArchiver artifactArchiver = new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); \r\n\n        FreeStyleBuild b = p.scheduleBuild2(0).get();\n\n        assertEquals(\"Build must fail, because we used FalsePublisher\", Result.FAILURE, b.getResult());\n        j.assertLogContains(\"\\tat hudson.model.utils.IOExceptionPublisher\", b); \r\n        j.assertLogContains(\"Threw IOException from publisher!\", b); \r\n        File file = new File(b.getArtifactsDir(), \"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", file.exists());\n        assertEquals(\"Third publisher must see FAILURE status\", FileUtils.readFileToString(file, StandardCharsets.UTF_8), Result.FAILURE.toString());\n    }\n","date":"2021-04-12 01:49:34","endLine":99,"groupId":"10463","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testFreestyleWithIOExceptionPublisher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ed/bacd30d341c25d1347823c49023b0b7855d3ca.src","preCode":"    public void testFreestyleWithIOExceptionPublisher() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); \r\n        p.getPublishersList().add(new IOExceptionPublisher());   \r\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); \r\n        final ArtifactArchiver artifactArchiver = new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); \r\n\n        FreeStyleBuild b = p.scheduleBuild2(0).get();\n\n        assertEquals(\"Build must fail, because we used FalsePublisher\", Result.FAILURE, b.getResult());\n        j.assertLogContains(\"\\tat hudson.model.utils.IOExceptionPublisher\", b); \r\n        j.assertLogContains(\"Threw IOException from publisher!\", b); \r\n        File file = new File(b.getArtifactsDir(), \"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", file.exists());\n        assertEquals(\"Third publisher must see FAILURE status\", FileUtils.readFileToString(file), Result.FAILURE.toString());\n    }\n","realPath":"test/src/test/java/hudson/model/FreestyleJobPublisherTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"096a1ca6fb92a98a80ca7f1e3589e237285d3aa7","commitMessage":"@@@Merge pull request #5389 from StefanSpieker/minor_deprecation_fixes\n\nfixed some deprecation warnings","date":"2021-04-12 01:49:34","modifiedFileCount":"23","status":"M","submitter":"Mark Waite"}]
