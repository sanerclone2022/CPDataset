[{"authorTime":"2013-08-01 07:31:04","codes":[{"authorDate":"2013-08-01 07:31:04","commitOrder":1,"curCode":"    public void testDoDisable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm); \n        User user = realm.createAccount(\"John Smith\", \"password\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate()); \n        try{\n            project.doDisable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException2.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Job.READ, user.getId());\n        auth.add(Job.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n        List<HtmlForm> forms = j.createWebClient().login(user.getId(), \"password\").goTo(project.getUrl()).getForms();\n        for(HtmlForm form:forms){\n            if(\"disable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertTrue(\"Project should be disabled.\", project.isDisabled());\n    }\n","date":"2013-08-01 07:31:04","endLine":588,"groupId":"6081","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoDisable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/1e/a891b3282f7c54c44c62ceb40755aef12a66fa.src","preCode":"    public void testDoDisable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm); \n        User user = realm.createAccount(\"John Smith\", \"password\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate()); \n        try{\n            project.doDisable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException2.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Job.READ, user.getId());\n        auth.add(Job.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n        List<HtmlForm> forms = j.createWebClient().login(user.getId(), \"password\").goTo(project.getUrl()).getForms();\n        for(HtmlForm form:forms){\n            if(\"disable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertTrue(\"Project should be disabled.\", project.isDisabled());\n    }\n","realPath":"test/src/test/java/hudson/model/ProjectTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":560,"status":"B"},{"authorDate":"2013-08-01 07:31:04","commitOrder":1,"curCode":"    public void testDoEnable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user = realm.createAccount(\"John Smith\", \"password\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate()); \n        project.disable();\n        try{\n            project.doEnable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException2.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Job.READ, user.getId());\n        auth.add(Job.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n        List<HtmlForm> forms = j.createWebClient().login(user.getId(), \"password\").goTo(project.getUrl()).getForms();\n        for(HtmlForm form:forms){\n            if(\"enable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertFalse(\"Project should be enabled.\", project.isDisabled());\n    }\n","date":"2013-08-01 07:31:04","endLine":620,"groupId":"6081","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDoEnable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/1e/a891b3282f7c54c44c62ceb40755aef12a66fa.src","preCode":"    public void testDoEnable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user = realm.createAccount(\"John Smith\", \"password\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate()); \n        project.disable();\n        try{\n            project.doEnable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException2.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Job.READ, user.getId());\n        auth.add(Job.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n        List<HtmlForm> forms = j.createWebClient().login(user.getId(), \"password\").goTo(project.getUrl()).getForms();\n        for(HtmlForm form:forms){\n            if(\"enable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertFalse(\"Project should be enabled.\", project.isDisabled());\n    }\n","realPath":"test/src/test/java/hudson/model/ProjectTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"B"}],"commitId":"96edfca548b448ca38aa10712e82b63f07b9c837","commitMessage":"@@@Merge pull request #888 from lvotypko/ProjectTest\n\nAdd tests for Project class","date":"2013-08-01 07:31:04","modifiedFileCount":"0","status":"B","submitter":"Vojt?ch Jur?nek"},{"authorTime":"2017-10-12 03:22:19","codes":[{"authorDate":"2017-10-12 03:22:19","commitOrder":2,"curCode":"    public void testDoDisable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm); \n        User user = realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as = ACL.as(user)) {\n            project.doDisable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException2.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Job.READ, user.getId());\n        auth.add(Job.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n        List<HtmlForm> forms = j.createWebClient().login(user.getId(), \"password\").goTo(project.getUrl()).getForms();\n        for(HtmlForm form:forms){\n            if(\"disable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertTrue(\"Project should be disabled.\", project.isDisabled());\n    }\n","date":"2017-10-12 03:22:19","endLine":643,"groupId":"4271","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoDisable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a2/d5bf3f674cadaacbb85699a9a695493a4652fa.src","preCode":"    public void testDoDisable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm); \n        User user = realm.createAccount(\"John Smith\", \"password\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate()); \n        try{\n            project.doDisable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException2.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Job.READ, user.getId());\n        auth.add(Job.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n        List<HtmlForm> forms = j.createWebClient().login(user.getId(), \"password\").goTo(project.getUrl()).getForms();\n        for(HtmlForm form:forms){\n            if(\"disable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertTrue(\"Project should be disabled.\", project.isDisabled());\n    }\n","realPath":"test/src/test/java/hudson/model/ProjectTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":616,"status":"M"},{"authorDate":"2017-10-12 03:22:19","commitOrder":2,"curCode":"    public void testDoEnable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user = realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as = ACL.as(user)) {\n            project.disable();\n        }\n        try (ACLContext as = ACL.as(user)) {\n            project.doEnable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException2.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Job.READ, user.getId());\n        auth.add(Job.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n        List<HtmlForm> forms = j.createWebClient().login(user.getId(), \"password\").goTo(project.getUrl()).getForms();\n        for(HtmlForm form:forms){\n            if(\"enable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertFalse(\"Project should be enabled.\", project.isDisabled());\n    }\n","date":"2017-10-12 03:22:19","endLine":676,"groupId":"2139","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDoEnable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a2/d5bf3f674cadaacbb85699a9a695493a4652fa.src","preCode":"    public void testDoEnable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user = realm.createAccount(\"John Smith\", \"password\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate()); \n        project.disable();\n        try{\n            project.doEnable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException2.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Job.READ, user.getId());\n        auth.add(Job.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n        List<HtmlForm> forms = j.createWebClient().login(user.getId(), \"password\").goTo(project.getUrl()).getForms();\n        for(HtmlForm form:forms){\n            if(\"enable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertFalse(\"Project should be enabled.\", project.isDisabled());\n    }\n","realPath":"test/src/test/java/hudson/model/ProjectTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":646,"status":"M"}],"commitId":"bc974453645016a3c0676275abb3b8feb8f568b9","commitMessage":"@@@Merge commit '11ce22f1aa5fe592b8b5a8ef508ae8435a06036a' of git://github.com/jenkinsci/jenkins\n","date":"2017-10-12 03:22:19","modifiedFileCount":"13","status":"M","submitter":"Jesse Glick"},{"authorTime":"2017-12-16 16:25:30","codes":[{"authorDate":"2017-12-16 16:25:30","commitOrder":3,"curCode":"    public void testDoDisable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm); \n        User user = realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as = ACL.as(user)) {\n            project.doDisable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException2.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Job.READ, user.getId());\n        auth.add(Job.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.withBasicCredentials(user.getId(), \"password\");\n        HtmlPage p = wc.goTo(project.getUrl());\n\n        List<HtmlForm> forms = p.getForms();\n        for(HtmlForm form:forms){\n            if(\"disable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertTrue(\"Project should be disabled.\", project.isDisabled());\n    }\n","date":"2017-12-16 16:25:30","endLine":660,"groupId":"4271","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoDisable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f9/66f4e56b967e13039b0613e6a2651e2f4ee52f.src","preCode":"    public void testDoDisable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm); \n        User user = realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as = ACL.as(user)) {\n            project.doDisable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException2.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Job.READ, user.getId());\n        auth.add(Job.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n        List<HtmlForm> forms = j.createWebClient().login(user.getId(), \"password\").goTo(project.getUrl()).getForms();\n        for(HtmlForm form:forms){\n            if(\"disable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertTrue(\"Project should be disabled.\", project.isDisabled());\n    }\n","realPath":"test/src/test/java/hudson/model/ProjectTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":628,"status":"M"},{"authorDate":"2017-12-16 16:25:30","commitOrder":3,"curCode":"    public void testDoEnable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user = realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as = ACL.as(user)) {\n            project.disable();\n        }\n        try (ACLContext as = ACL.as(user)) {\n            project.doEnable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException2.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Job.READ, user.getId());\n        auth.add(Job.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.withBasicCredentials(user.getId(), \"password\");\n        HtmlPage p = wc.goTo(project.getUrl());\n\n        List<HtmlForm> forms = p.getForms();\n        for(HtmlForm form:forms){\n            if(\"enable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertFalse(\"Project should be enabled.\", project.isDisabled());\n    }\n","date":"2017-12-16 16:25:30","endLine":698,"groupId":"2139","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDoEnable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f9/66f4e56b967e13039b0613e6a2651e2f4ee52f.src","preCode":"    public void testDoEnable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user = realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as = ACL.as(user)) {\n            project.disable();\n        }\n        try (ACLContext as = ACL.as(user)) {\n            project.doEnable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException2.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Job.READ, user.getId());\n        auth.add(Job.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n        List<HtmlForm> forms = j.createWebClient().login(user.getId(), \"password\").goTo(project.getUrl()).getForms();\n        for(HtmlForm form:forms){\n            if(\"enable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertFalse(\"Project should be enabled.\", project.isDisabled());\n    }\n","realPath":"test/src/test/java/hudson/model/ProjectTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":663,"status":"M"}],"commitId":"814d202716a6c61c7d371c6a62755d296fe199a5","commitMessage":"@@@[JENKINS-22474] API Token does not require CSRF token (#3129)\n\n* [JENKINS-22474] API Token does not require CSRF token\n- in order to ease the use of the api.  we are not requiring the request to have a crumb\n- in terms of security it's not a problem normally since the CSRF attacks use the cookies and in case of API Token.  it's session-less / cookie-less\n\n* - adjust the license header\n\n* - add test for basic authentication\n- add test for login process\n\n* - add test for form submission using ui (htmlunit).  not just login form\n\n* - modification requested by Jesse\n\n* - pom.xml update to use the last version of jenkins-test-harness (with the token helper methods)\n- beginning of the simplification of tests\n\n* - using the try-with-resource approach to ease readability\n\n* - using closure method now\n\n* - add missing login transformation\n\n* - add unit test\n\n* - use withToken\n- remove useless crumb for GET method\n- add fail (otherwise the assert in catch is not as useful as it could be)\n\n* another bunch of test cases\n\n* - for HudsonTestCase.  some additional modifications are required: changing the view / different type of management for the variable inside the views\n\n* - small other tests\n\n* - last batch for the login method\n\n* - crumb is not more required since we are using API Token\n\n* - converting auth to ApiToken to avoid crumb method\n\n* - converting auth to ApiToken to avoid crumb method (second)\n\n* - remove usage of closure aware methods\n\n* - update the pom using the snapshot as adviced by Jesse\n- modifications on other class to adapt to the last modifications in JTH\n\n* - modifications requested during code review\n\n* - also put back my changes to the conflicted file\n\n* - correction of the merge :)\n","date":"2017-12-16 16:25:30","modifiedFileCount":"21","status":"M","submitter":"Wadeck Follonier"},{"authorTime":"2020-11-07 02:30:25","codes":[{"authorDate":"2020-11-07 02:30:25","commitOrder":4,"curCode":"    public void testDoDisable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm); \n        User user = realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as = ACL.as(user)) {\n            project.doDisable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException3.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Job.READ, user.getId());\n        auth.add(Job.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.withBasicCredentials(user.getId(), \"password\");\n        HtmlPage p = wc.goTo(project.getUrl());\n\n        List<HtmlForm> forms = p.getForms();\n        for(HtmlForm form:forms){\n            if(\"disable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertTrue(\"Project should be disabled.\", project.isDisabled());\n    }\n","date":"2020-11-07 02:30:25","endLine":664,"groupId":"7636","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoDisable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/13/7443631ffdd306fd0bef3f942350e6cc54acae.src","preCode":"    public void testDoDisable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm); \n        User user = realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as = ACL.as(user)) {\n            project.doDisable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException2.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Job.READ, user.getId());\n        auth.add(Job.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.withBasicCredentials(user.getId(), \"password\");\n        HtmlPage p = wc.goTo(project.getUrl());\n\n        List<HtmlForm> forms = p.getForms();\n        for(HtmlForm form:forms){\n            if(\"disable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertTrue(\"Project should be disabled.\", project.isDisabled());\n    }\n","realPath":"test/src/test/java/hudson/model/ProjectTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":632,"status":"M"},{"authorDate":"2020-11-07 02:30:25","commitOrder":4,"curCode":"    public void testDoEnable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user = realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as = ACL.as(user)) {\n            project.disable();\n        }\n        try (ACLContext as = ACL.as(user)) {\n            project.doEnable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException3.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Job.READ, user.getId());\n        auth.add(Job.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.withBasicCredentials(user.getId(), \"password\");\n        HtmlPage p = wc.goTo(project.getUrl());\n\n        List<HtmlForm> forms = p.getForms();\n        for(HtmlForm form:forms){\n            if(\"enable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertFalse(\"Project should be enabled.\", project.isDisabled());\n    }\n","date":"2020-11-07 02:30:25","endLine":702,"groupId":"6068","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDoEnable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/13/7443631ffdd306fd0bef3f942350e6cc54acae.src","preCode":"    public void testDoEnable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user = realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as = ACL.as(user)) {\n            project.disable();\n        }\n        try (ACLContext as = ACL.as(user)) {\n            project.doEnable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException2.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Job.READ, user.getId());\n        auth.add(Job.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.withBasicCredentials(user.getId(), \"password\");\n        HtmlPage p = wc.goTo(project.getUrl());\n\n        List<HtmlForm> forms = p.getForms();\n        for(HtmlForm form:forms){\n            if(\"enable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertFalse(\"Project should be enabled.\", project.isDisabled());\n    }\n","realPath":"test/src/test/java/hudson/model/ProjectTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":667,"status":"M"}],"commitId":"a9ca5ef3d4c97937636bf3c585f4232514279b14","commitMessage":"@@@[JEP-227] Replace Acegi Security with Spring Security & upgrade Spring Framework (#4848)\n\nReplacing Acegi Security with Spring Security\n\nCo-authored-by: Tim Jacomb <timjacomb1+github@gmail.com>\nCo-authored-by: James Nord <jtnord@users.noreply.github.com>","date":"2020-11-07 02:30:25","modifiedFileCount":"149","status":"M","submitter":"Jesse Glick"},{"authorTime":"2021-04-20 04:54:17","codes":[{"authorDate":"2021-04-20 04:54:17","commitOrder":5,"curCode":"    public void testDoDisable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm); \n        User user = realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as = ACL.as(user)) {\n            project.doDisable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException3.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Item.READ, user.getId());\n        auth.add(Item.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.withBasicCredentials(user.getId(), \"password\");\n        HtmlPage p = wc.goTo(project.getUrl());\n\n        List<HtmlForm> forms = p.getForms();\n        for(HtmlForm form:forms){\n            if(\"disable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertTrue(\"Project should be disabled.\", project.isDisabled());\n    }\n","date":"2021-04-20 04:54:17","endLine":664,"groupId":"7636","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoDisable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/7a/02d93be4d514f9db9d447cbbc185de7bf1b18f.src","preCode":"    public void testDoDisable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm); \n        User user = realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as = ACL.as(user)) {\n            project.doDisable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException3.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Job.READ, user.getId());\n        auth.add(Job.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.withBasicCredentials(user.getId(), \"password\");\n        HtmlPage p = wc.goTo(project.getUrl());\n\n        List<HtmlForm> forms = p.getForms();\n        for(HtmlForm form:forms){\n            if(\"disable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertTrue(\"Project should be disabled.\", project.isDisabled());\n    }\n","realPath":"test/src/test/java/hudson/model/ProjectTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":632,"status":"M"},{"authorDate":"2021-04-20 04:54:17","commitOrder":5,"curCode":"    public void testDoEnable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user = realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as = ACL.as(user)) {\n            project.disable();\n        }\n        try (ACLContext as = ACL.as(user)) {\n            project.doEnable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException3.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Item.READ, user.getId());\n        auth.add(Item.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.withBasicCredentials(user.getId(), \"password\");\n        HtmlPage p = wc.goTo(project.getUrl());\n\n        List<HtmlForm> forms = p.getForms();\n        for(HtmlForm form:forms){\n            if(\"enable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertFalse(\"Project should be enabled.\", project.isDisabled());\n    }\n","date":"2021-04-20 04:54:17","endLine":702,"groupId":"4058","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDoEnable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/7a/02d93be4d514f9db9d447cbbc185de7bf1b18f.src","preCode":"    public void testDoEnable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user = realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as = ACL.as(user)) {\n            project.disable();\n        }\n        try (ACLContext as = ACL.as(user)) {\n            project.doEnable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException3.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Job.READ, user.getId());\n        auth.add(Job.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.withBasicCredentials(user.getId(), \"password\");\n        HtmlPage p = wc.goTo(project.getUrl());\n\n        List<HtmlForm> forms = p.getForms();\n        for(HtmlForm form:forms){\n            if(\"enable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertFalse(\"Project should be enabled.\", project.isDisabled());\n    }\n","realPath":"test/src/test/java/hudson/model/ProjectTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":667,"status":"M"}],"commitId":"0fd55bd6b50fcdf27368c6b771fb3d8363a24f83","commitMessage":"@@@Merge pull request #5419 from basil/subtypes\n\nUse declaring class as qualifier","date":"2021-04-20 04:54:17","modifiedFileCount":"43","status":"M","submitter":"Oleg Nenashev"},{"authorTime":"2021-06-14 23:45:34","codes":[{"authorDate":"2021-06-14 23:45:34","commitOrder":6,"curCode":"    public void testDoDisable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm); \n        User user = realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as = ACL.as(user)) {\n            project.doDisable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!e.getClass().isAssignableFrom(AccessDeniedException3.class)){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Item.READ, user.getId());\n        auth.add(Item.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.withBasicCredentials(user.getId(), \"password\");\n        HtmlPage p = wc.goTo(project.getUrl());\n\n        List<HtmlForm> forms = p.getForms();\n        for(HtmlForm form:forms){\n            if(\"disable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertTrue(\"Project should be disabled.\", project.isDisabled());\n    }\n","date":"2021-06-14 23:45:34","endLine":672,"groupId":"10470","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoDisable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/2a/181abe87ad1449308feea1ba2f5da8fdc2f1fd.src","preCode":"    public void testDoDisable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm); \n        User user = realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as = ACL.as(user)) {\n            project.doDisable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException3.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Item.READ, user.getId());\n        auth.add(Item.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.withBasicCredentials(user.getId(), \"password\");\n        HtmlPage p = wc.goTo(project.getUrl());\n\n        List<HtmlForm> forms = p.getForms();\n        for(HtmlForm form:forms){\n            if(\"disable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertTrue(\"Project should be disabled.\", project.isDisabled());\n    }\n","realPath":"test/src/test/java/hudson/model/ProjectTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":640,"status":"M"},{"authorDate":"2021-06-14 23:45:34","commitOrder":6,"curCode":"    public void testDoEnable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user = realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as = ACL.as(user)) {\n            project.disable();\n        }\n        try (ACLContext as = ACL.as(user)) {\n            project.doEnable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!e.getClass().isAssignableFrom(AccessDeniedException3.class)){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Item.READ, user.getId());\n        auth.add(Item.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.withBasicCredentials(user.getId(), \"password\");\n        HtmlPage p = wc.goTo(project.getUrl());\n\n        List<HtmlForm> forms = p.getForms();\n        for(HtmlForm form:forms){\n            if(\"enable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertFalse(\"Project should be enabled.\", project.isDisabled());\n    }\n","date":"2021-06-14 23:45:34","endLine":710,"groupId":"10470","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testDoEnable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/2a/181abe87ad1449308feea1ba2f5da8fdc2f1fd.src","preCode":"    public void testDoEnable() throws Exception{\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user = realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as = ACL.as(user)) {\n            project.disable();\n        }\n        try (ACLContext as = ACL.as(user)) {\n            project.doEnable();\n            fail(\"User should not have permission to build project\");\n        }\n        catch(Exception e){\n            if(!(e.getClass().isAssignableFrom(AccessDeniedException3.class))){\n               fail(\"AccessDeniedException should be thrown.\");\n            }\n        } \n        auth.add(Item.READ, user.getId());\n        auth.add(Item.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.withBasicCredentials(user.getId(), \"password\");\n        HtmlPage p = wc.goTo(project.getUrl());\n\n        List<HtmlForm> forms = p.getForms();\n        for(HtmlForm form:forms){\n            if(\"enable\".equals(form.getAttribute(\"action\"))){\n                j.submit(form);\n            }\n        }\n       assertFalse(\"Project should be enabled.\", project.isDisabled());\n    }\n","realPath":"test/src/test/java/hudson/model/ProjectTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":675,"status":"M"}],"commitId":"b8c20c6428ea99d2d32a09791b393451ad9beb7d","commitMessage":"@@@Fix violations of a handful of Error Prone checks (#5519)\n\nCo-authored-by: Daniel Beck <1831569+daniel-beck@users.noreply.github.com>","date":"2021-06-14 23:45:34","modifiedFileCount":"80","status":"M","submitter":"Basil Crow"}]
