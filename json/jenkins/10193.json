[{"authorTime":"2015-10-13 04:22:10","codes":[{"authorDate":"2015-10-13 04:22:10","commitOrder":1,"curCode":"    @Test public void reloadJobManyShouldSucceed() throws Exception {\n\n        FreeStyleProject project1 = j.createFreeStyleProject(\"aProject1\");\n        project1.getBuildersList().add(new Shell(\"echo 1\"));\n        FreeStyleProject project2 = j.createFreeStyleProject(\"aProject2\");\n        project2.getBuildersList().add(new Shell(\"echo 1\"));\n        FreeStyleProject project3 = j.createFreeStyleProject(\"aProject3\");\n        project3.getBuildersList().add(new Shell(\"echo 1\"));\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        assertThat(project3.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        changeProjectOnTheDisc(project1, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project2, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project3, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject3\");\n\n        assertThat(result, succeededSilently());\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n        assertThat(project3.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n    }\n","date":"2015-10-13 04:22:10","endLine":163,"groupId":"3987","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"reloadJobManyShouldSucceed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/25/7a0c2b8033cfe73e87e1667b4e5df256eba0d1.src","preCode":"    @Test public void reloadJobManyShouldSucceed() throws Exception {\n\n        FreeStyleProject project1 = j.createFreeStyleProject(\"aProject1\");\n        project1.getBuildersList().add(new Shell(\"echo 1\"));\n        FreeStyleProject project2 = j.createFreeStyleProject(\"aProject2\");\n        project2.getBuildersList().add(new Shell(\"echo 1\"));\n        FreeStyleProject project3 = j.createFreeStyleProject(\"aProject3\");\n        project3.getBuildersList().add(new Shell(\"echo 1\"));\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        assertThat(project3.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        changeProjectOnTheDisc(project1, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project2, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project3, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject3\");\n\n        assertThat(result, succeededSilently());\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n        assertThat(project3.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ReloadJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"},{"authorDate":"2015-10-13 04:22:10","commitOrder":1,"curCode":"    @Test public void reloadJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {\n\n        FreeStyleProject project1 = j.createFreeStyleProject(\"aProject1\");\n        project1.getBuildersList().add(new Shell(\"echo 1\"));\n        FreeStyleProject project2 = j.createFreeStyleProject(\"aProject2\");\n        project2.getBuildersList().add(new Shell(\"echo 1\"));\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        changeProjectOnTheDisc(project1, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project2, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject1\");\n\n        assertThat(result, succeededSilently());\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n    }\n","date":"2015-10-13 04:22:10","endLine":211,"groupId":"6605","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"reloadJobManyShouldSucceedEvenAJobIsSpecifiedTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/25/7a0c2b8033cfe73e87e1667b4e5df256eba0d1.src","preCode":"    @Test public void reloadJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {\n\n        FreeStyleProject project1 = j.createFreeStyleProject(\"aProject1\");\n        project1.getBuildersList().add(new Shell(\"echo 1\"));\n        FreeStyleProject project2 = j.createFreeStyleProject(\"aProject2\");\n        project2.getBuildersList().add(new Shell(\"echo 1\"));\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        changeProjectOnTheDisc(project1, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project2, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject1\");\n\n        assertThat(result, succeededSilently());\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ReloadJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"B"}],"commitId":"1b0ba9e1d034fe809d58f14f835f8e5347cc3bc5","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2015-10-13 04:22:10","modifiedFileCount":"32","status":"B","submitter":"Jesse Glick"},{"authorTime":"2017-02-27 05:17:05","codes":[{"authorDate":"2017-02-27 05:17:05","commitOrder":2,"curCode":"    @Test public void reloadJobManyShouldSucceed() throws Exception {\n        FreeStyleProject project1 = j.createFreeStyleProject(\"aProject1\");\n        project1.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        FreeStyleProject project2 = j.createFreeStyleProject(\"aProject2\");\n        project2.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        FreeStyleProject project3 = j.createFreeStyleProject(\"aProject3\");\n        project3.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        assertThat(project3.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        changeProjectOnTheDisc(project1, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project2, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project3, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject3\");\n\n        assertThat(result, succeededSilently());\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n        assertThat(project3.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n    }\n","date":"2017-02-27 05:17:05","endLine":164,"groupId":"3987","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"reloadJobManyShouldSucceed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a0/12090070ed5b3ce47ba85325fae4697d9467f9.src","preCode":"    @Test public void reloadJobManyShouldSucceed() throws Exception {\n\n        FreeStyleProject project1 = j.createFreeStyleProject(\"aProject1\");\n        project1.getBuildersList().add(new Shell(\"echo 1\"));\n        FreeStyleProject project2 = j.createFreeStyleProject(\"aProject2\");\n        project2.getBuildersList().add(new Shell(\"echo 1\"));\n        FreeStyleProject project3 = j.createFreeStyleProject(\"aProject3\");\n        project3.getBuildersList().add(new Shell(\"echo 1\"));\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        assertThat(project3.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        changeProjectOnTheDisc(project1, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project2, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project3, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject3\");\n\n        assertThat(result, succeededSilently());\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n        assertThat(project3.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ReloadJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2017-02-27 05:17:05","commitOrder":2,"curCode":"    @Test public void reloadJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {\n        FreeStyleProject project1 = j.createFreeStyleProject(\"aProject1\");\n        project1.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        FreeStyleProject project2 = j.createFreeStyleProject(\"aProject2\");\n        project2.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        changeProjectOnTheDisc(project1, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project2, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject1\");\n\n        assertThat(result, succeededSilently());\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n    }\n","date":"2017-02-27 05:17:05","endLine":291,"groupId":"6605","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"reloadJobManyShouldSucceedEvenAJobIsSpecifiedTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a0/12090070ed5b3ce47ba85325fae4697d9467f9.src","preCode":"    @Test public void reloadJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {\n\n        FreeStyleProject project1 = j.createFreeStyleProject(\"aProject1\");\n        project1.getBuildersList().add(new Shell(\"echo 1\"));\n        FreeStyleProject project2 = j.createFreeStyleProject(\"aProject2\");\n        project2.getBuildersList().add(new Shell(\"echo 1\"));\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        changeProjectOnTheDisc(project1, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project2, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject1\");\n\n        assertThat(result, succeededSilently());\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ReloadJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"}],"commitId":"c63abe3e8cfcb71d27458bebe7752d54edaa2d49","commitMessage":"@@@Merge branch 'master' of github.com:jenkinsci/jenkins\n","date":"2017-02-27 05:17:05","modifiedFileCount":"23","status":"M","submitter":"Kohsuke Kawaguchi"},{"authorTime":"2021-04-20 04:54:17","codes":[{"authorDate":"2021-04-20 04:54:17","commitOrder":3,"curCode":"    @Test public void reloadJobManyShouldSucceed() throws Exception {\n        FreeStyleProject project1 = j.createFreeStyleProject(\"aProject1\");\n        project1.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        FreeStyleProject project2 = j.createFreeStyleProject(\"aProject2\");\n        project2.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        FreeStyleProject project3 = j.createFreeStyleProject(\"aProject3\");\n        project3.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        assertThat(project3.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        changeProjectOnTheDisc(project1, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project2, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project3, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Item.READ, Item.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject3\");\n\n        assertThat(result, succeededSilently());\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n        assertThat(project3.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n    }\n","date":"2021-04-20 04:54:17","endLine":164,"groupId":"10193","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"reloadJobManyShouldSucceed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5b/f90005c1bb72f746db4f8a52585881c455eca8.src","preCode":"    @Test public void reloadJobManyShouldSucceed() throws Exception {\n        FreeStyleProject project1 = j.createFreeStyleProject(\"aProject1\");\n        project1.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        FreeStyleProject project2 = j.createFreeStyleProject(\"aProject2\");\n        project2.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        FreeStyleProject project3 = j.createFreeStyleProject(\"aProject3\");\n        project3.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        assertThat(project3.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        changeProjectOnTheDisc(project1, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project2, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project3, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject3\");\n\n        assertThat(result, succeededSilently());\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n        assertThat(project3.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ReloadJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2021-04-20 04:54:17","commitOrder":3,"curCode":"    @Test public void reloadJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {\n        FreeStyleProject project1 = j.createFreeStyleProject(\"aProject1\");\n        project1.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        FreeStyleProject project2 = j.createFreeStyleProject(\"aProject2\");\n        project2.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        changeProjectOnTheDisc(project1, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project2, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Item.READ, Item.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject1\");\n\n        assertThat(result, succeededSilently());\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n    }\n","date":"2021-04-20 04:54:17","endLine":291,"groupId":"10193","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"reloadJobManyShouldSucceedEvenAJobIsSpecifiedTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5b/f90005c1bb72f746db4f8a52585881c455eca8.src","preCode":"    @Test public void reloadJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {\n        FreeStyleProject project1 = j.createFreeStyleProject(\"aProject1\");\n        project1.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        FreeStyleProject project2 = j.createFreeStyleProject(\"aProject2\");\n        project2.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        changeProjectOnTheDisc(project1, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project2, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject1\");\n\n        assertThat(result, succeededSilently());\n\n        assertThat(project1.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n        assertThat(project2.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ReloadJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"}],"commitId":"0fd55bd6b50fcdf27368c6b771fb3d8363a24f83","commitMessage":"@@@Merge pull request #5419 from basil/subtypes\n\nUse declaring class as qualifier","date":"2021-04-20 04:54:17","modifiedFileCount":"43","status":"M","submitter":"Oleg Nenashev"}]
