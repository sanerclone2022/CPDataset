[{"authorTime":"2009-10-30 05:27:46","codes":[{"authorDate":"2009-03-10 02:42:38","commitOrder":2,"curCode":"        public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n            CopyOnWriteList core = copyOnWriteListConverter.unmarshal(reader, context);\n\n            try {\n                DescribableList r = (DescribableList)context.getRequiredType().newInstance();\n                r.data.replaceBy(core);\n                return r;\n            } catch (InstantiationException e) {\n                InstantiationError x = new InstantiationError();\n                x.initCause(e);\n                throw x;\n            } catch (IllegalAccessException e) {\n                IllegalAccessError x = new IllegalAccessError();\n                x.initCause(e);\n                throw x;\n            }\n        }\n","date":"2009-03-10 02:42:38","endLine":290,"groupId":"2221","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(HierarchicalStreamReaderreader@UnmarshallingContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/3c/8de5e97a32f0a4215625785b1b0cacd68332e5.src","preCode":"        public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n            CopyOnWriteList core = copyOnWriteListConverter.unmarshal(reader, context);\n\n            try {\n                DescribableList r = (DescribableList)context.getRequiredType().newInstance();\n                r.data.replaceBy(core);\n                return r;\n            } catch (InstantiationException e) {\n                InstantiationError x = new InstantiationError();\n                x.initCause(e);\n                throw x;\n            } catch (IllegalAccessException e) {\n                IllegalAccessError x = new IllegalAccessError();\n                x.initCause(e);\n                throw x;\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/DescribableList.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"NB"},{"authorDate":"2009-10-30 05:27:46","commitOrder":2,"curCode":"        public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n            CopyOnWriteList core = copyOnWriteListConverter.unmarshal(reader, context);\n\n            try {\n                PersistedList r = (PersistedList)context.getRequiredType().newInstance();\n                r.data.replaceBy(core);\n                return r;\n            } catch (InstantiationException e) {\n                InstantiationError x = new InstantiationError();\n                x.initCause(e);\n                throw x;\n            } catch (IllegalAccessException e) {\n                IllegalAccessError x = new IllegalAccessError();\n                x.initCause(e);\n                throw x;\n            }\n        }\n","date":"2009-10-30 05:27:46","endLine":208,"groupId":"2221","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(HierarchicalStreamReaderreader@UnmarshallingContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f4/78602dcdfd911b598d7c7c69bb17ecd4bb70e6.src","preCode":"        public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n            CopyOnWriteList core = copyOnWriteListConverter.unmarshal(reader, context);\n\n            try {\n                PersistedList r = (PersistedList)context.getRequiredType().newInstance();\n                r.data.replaceBy(core);\n                return r;\n            } catch (InstantiationException e) {\n                InstantiationError x = new InstantiationError();\n                x.initCause(e);\n                throw x;\n            } catch (IllegalAccessException e) {\n                IllegalAccessError x = new IllegalAccessError();\n                x.initCause(e);\n                throw x;\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/PersistedList.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"B"}],"commitId":"720be7d7a12facd3543c0ffa2d2757ef76b9c06a","commitMessage":"@@@Merged revisions 23183. 23185. 23245. 23256. 23266. 23279-23284. 23286 via svnmerge from \nhttps://www.dev.java.net/svn/hudson/branches/multiple-update-sources\n\n........\n  r23183 | abayer | 2009-10-25 11:53:17 -0700 (Sun.  25 Oct 2009) | 1 line\n  \n  First chunk of work towards supporting multiple update centers - infrastructure in place for it.  and default update center treated as only one of multiple - have to use slightly modified update-center.json though\n........\n  r23185 | abayer | 2009-10-25 12:25:49 -0700 (Sun.  25 Oct 2009) | 1 line\n  \n  a number of tweaks - among other things.  now works properly with additional update centers defined in hudson.model.UpdateCenter.xml - try using http://andrewbayer.com/images/hello-world/helloWorld-update-center.json as second update center\n........\n  r23245 | abayer | 2009-10-27 13:45:25 -0700 (Tue.  27 Oct 2009) | 1 line\n  \n  Modified to support existing default update-center.json\n........\n  r23256 | kohsuke | 2009-10-27 18:30:15 -0700 (Tue.  27 Oct 2009) | 7 lines\n  \n  - moved data binding of update-center.json to UpdateSource.\n  - moved some of the UpdateSource property into JSON.  to improve the user experience when adding an update source.\n    the user should just type in one URL.  and everything else should happen automatically.\n  - it doesn't make sense for UpdateSource to rely on UpdateCenterConfiguration.  since behaviors cannot be\n    modified per UpdateSource basis. Instead.  leaving it in UpdateCenter allows us to maintain backward compatible\n    behaviors with the existing custom UpdateCenterConfiguration implementation.\n........\n  r23266 | kohsuke | 2009-10-27 19:29:24 -0700 (Tue.  27 Oct 2009) | 1 line\n  \n  serve id inside JSON.\n........\n  r23279 | kohsuke | 2009-10-28 10:44:00 -0700 (Wed.  28 Oct 2009) | 1 line\n  \n  Do not special-case \"default\" ID. Receive hudson.war updates from wherever that provides one.\n........\n  r23280 | kohsuke | 2009-10-28 10:50:57 -0700 (Wed.  28 Oct 2009) | 1 line\n  \n  formatting change.\n........\n  r23281 | kohsuke | 2009-10-28 11:30:40 -0700 (Wed.  28 Oct 2009) | 1 line\n  \n  typo\n........\n  r23282 | kohsuke | 2009-10-28 11:45:06 -0700 (Wed.  28 Oct 2009) | 2 lines\n  \n  - added the UI to remove sites.\n  - persistence of UpdateSource happens more automatically now.\n........\n  r23283 | kohsuke | 2009-10-28 11:50:04 -0700 (Wed.  28 Oct 2009) | 1 line\n  \n  UpdateSource -> UpdateSite to align terminology with Eclipse.\n........\n  r23284 | kohsuke | 2009-10-28 11:55:03 -0700 (Wed.  28 Oct 2009) | 5 lines\n  \n  Actually.  for now.  just having a programmatic modification to UpdateSite would satisfy the primary use case.\n  \n  And I'd like to upgrade YUI to a more recent version so that we can use its DataTable for UI. Plus the single update center model encourages the community to bring the code into the Hudson project.  which is something we'd like to keep.\n  \n  So all in all.  I'm postponing the UI work.\n........\n  r23286 | kohsuke | 2009-10-28 13:07:19 -0700 (Wed.  28 Oct 2009) | 1 line\n  \n  Renaming and bug fixes.\n........\n\n\ngit-svn-id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/main@23326 71c3de6d-444a-0410-be80-ed276b4c234a\n","date":"2009-10-30 05:27:46","modifiedFileCount":"10","status":"M","submitter":"kohsuke"},{"authorTime":"2009-10-30 05:27:46","codes":[{"authorDate":"2018-01-21 15:35:22","commitOrder":3,"curCode":"        public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n            try {\n                DescribableList r = (DescribableList) context.getRequiredType().asSubclass(DescribableList.class).newInstance();\n                CopyOnWriteList core = copyOnWriteListConverter.unmarshal(reader, context);\n                r.data.replaceBy(core);\n                return r;\n            } catch (InstantiationException e) {\n                InstantiationError x = new InstantiationError();\n                x.initCause(e);\n                throw x;\n            } catch (IllegalAccessException e) {\n                IllegalAccessError x = new IllegalAccessError();\n                x.initCause(e);\n                throw x;\n            }\n        }\n","date":"2018-01-21 15:35:22","endLine":287,"groupId":"2221","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(HierarchicalStreamReaderreader@UnmarshallingContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/18/642093c7f4e1fc1a013274797907c9e0ff25d8.src","preCode":"        public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n            CopyOnWriteList core = copyOnWriteListConverter.unmarshal(reader, context);\n\n            try {\n                DescribableList r = (DescribableList)context.getRequiredType().newInstance();\n                r.data.replaceBy(core);\n                return r;\n            } catch (InstantiationException e) {\n                InstantiationError x = new InstantiationError();\n                x.initCause(e);\n                throw x;\n            } catch (IllegalAccessException e) {\n                IllegalAccessError x = new IllegalAccessError();\n                x.initCause(e);\n                throw x;\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/DescribableList.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"},{"authorDate":"2009-10-30 05:27:46","commitOrder":3,"curCode":"        public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n            CopyOnWriteList core = copyOnWriteListConverter.unmarshal(reader, context);\n\n            try {\n                PersistedList r = (PersistedList)context.getRequiredType().newInstance();\n                r.data.replaceBy(core);\n                return r;\n            } catch (InstantiationException e) {\n                InstantiationError x = new InstantiationError();\n                x.initCause(e);\n                throw x;\n            } catch (IllegalAccessException e) {\n                IllegalAccessError x = new IllegalAccessError();\n                x.initCause(e);\n                throw x;\n            }\n        }\n","date":"2009-10-30 05:27:46","endLine":208,"groupId":"2221","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(HierarchicalStreamReaderreader@UnmarshallingContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f4/78602dcdfd911b598d7c7c69bb17ecd4bb70e6.src","preCode":"        public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n            CopyOnWriteList core = copyOnWriteListConverter.unmarshal(reader, context);\n\n            try {\n                PersistedList r = (PersistedList)context.getRequiredType().newInstance();\n                r.data.replaceBy(core);\n                return r;\n            } catch (InstantiationException e) {\n                InstantiationError x = new InstantiationError();\n                x.initCause(e);\n                throw x;\n            } catch (IllegalAccessException e) {\n                IllegalAccessError x = new IllegalAccessError();\n                x.initCause(e);\n                throw x;\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/PersistedList.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"N"}],"commitId":"53ac66eec090cb8884f2b59719e78b24c7402777","commitMessage":"@@@Merge pull request #3248 from jglick/JENKINS-49054\n\n[JENKINS-49054] Work around XStream bug by looking up list type before trying to unmarshal elements","date":"2018-01-21 15:35:22","modifiedFileCount":"1","status":"M","submitter":"Oleg Nenashev"},{"authorTime":"2021-05-16 13:27:32","codes":[{"authorDate":"2021-05-16 13:27:32","commitOrder":4,"curCode":"        public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n            try {\n                DescribableList r = (DescribableList) context.getRequiredType().asSubclass(DescribableList.class).getDeclaredConstructor().newInstance();\n                CopyOnWriteList core = copyOnWriteListConverter.unmarshal(reader, context);\n                r.data.replaceBy(core);\n                return r;\n            } catch (NoSuchMethodException e) {\n                NoSuchMethodError x = new NoSuchMethodError();\n                x.initCause(e);\n                throw x;\n            } catch (InstantiationException e) {\n                InstantiationError x = new InstantiationError();\n                x.initCause(e);\n                throw x;\n            } catch (IllegalAccessException e) {\n                IllegalAccessError x = new IllegalAccessError();\n                x.initCause(e);\n                throw x;\n            } catch (InvocationTargetException e) {\n                Throwable t = e.getCause();\n                if (t instanceof RuntimeException) {\n                    throw (RuntimeException) t;\n                } else if (t instanceof IOException) {\n                    throw new UncheckedIOException((IOException) t);\n                } else if (t instanceof Exception) {\n                    throw new RuntimeException(t);\n                } else if (t instanceof Error) {\n                    throw (Error) t;\n                } else {\n                    throw new Error(e);\n                }\n            }\n        }\n","date":"2021-05-16 13:27:32","endLine":310,"groupId":"101094","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"unmarshal","params":"(HierarchicalStreamReaderreader@UnmarshallingContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/7a/a11e88521c2a6bb719148152951330c5d38873.src","preCode":"        public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n            try {\n                DescribableList r = (DescribableList) context.getRequiredType().asSubclass(DescribableList.class).newInstance();\n                CopyOnWriteList core = copyOnWriteListConverter.unmarshal(reader, context);\n                r.data.replaceBy(core);\n                return r;\n            } catch (InstantiationException e) {\n                InstantiationError x = new InstantiationError();\n                x.initCause(e);\n                throw x;\n            } catch (IllegalAccessException e) {\n                IllegalAccessError x = new IllegalAccessError();\n                x.initCause(e);\n                throw x;\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/DescribableList.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"},{"authorDate":"2021-05-16 13:27:32","commitOrder":4,"curCode":"        public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n            CopyOnWriteList core = copyOnWriteListConverter.unmarshal(reader, context);\n\n            try {\n                PersistedList r = (PersistedList)context.getRequiredType().getDeclaredConstructor().newInstance();\n                r.data.replaceBy(core);\n                return r;\n            } catch (NoSuchMethodException e) {\n                NoSuchMethodError x = new NoSuchMethodError();\n                x.initCause(e);\n                throw x;\n            } catch (InstantiationException e) {\n                InstantiationError x = new InstantiationError();\n                x.initCause(e);\n                throw x;\n            } catch (IllegalAccessException e) {\n                IllegalAccessError x = new IllegalAccessError();\n                x.initCause(e);\n                throw x;\n            } catch (InvocationTargetException e) {\n                Throwable t = e.getCause();\n                if (t instanceof RuntimeException) {\n                    throw (RuntimeException) t;\n                } else if (t instanceof IOException) {\n                    throw new UncheckedIOException((IOException) t);\n                } else if (t instanceof Exception) {\n                    throw new RuntimeException(t);\n                } else if (t instanceof Error) {\n                    throw (Error) t;\n                } else {\n                    throw new Error(e);\n                }\n            }\n        }\n","date":"2021-05-16 13:27:32","endLine":321,"groupId":"101094","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(HierarchicalStreamReaderreader@UnmarshallingContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/50/fcd1ced35c0444ea68aeef341fc51d1745a7e7.src","preCode":"        public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n            CopyOnWriteList core = copyOnWriteListConverter.unmarshal(reader, context);\n\n            try {\n                PersistedList r = (PersistedList)context.getRequiredType().newInstance();\n                r.data.replaceBy(core);\n                return r;\n            } catch (InstantiationException e) {\n                InstantiationError x = new InstantiationError();\n                x.initCause(e);\n                throw x;\n            } catch (IllegalAccessException e) {\n                IllegalAccessError x = new IllegalAccessError();\n                x.initCause(e);\n                throw x;\n            }\n        }\n","realPath":"core/src/main/java/hudson/util/PersistedList.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"}],"commitId":"52acfa962fcd118fe8a75bc9a80719a71485f743","commitMessage":"@@@Remove usages of deprecated (in Java 9 and above) `Class#newInstance` (#5483)\n\n* Remove usages of deprecated (in Java 9 and above) `Class#newInstance`\n\n* Improve catching of InvocationTargetException\n\n* Use AssertionError where appropriate","date":"2021-05-16 13:27:32","modifiedFileCount":"13","status":"M","submitter":"Basil Crow"}]
