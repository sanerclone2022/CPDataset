[{"authorTime":"2010-01-16 04:22:17","codes":[{"authorDate":"2008-02-10 06:05:01","commitOrder":7,"curCode":"    public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) {\n        if(!build.getResult().isWorseThan(getThreshold())) {\n            PrintStream logger = listener.getLogger();\n            for (AbstractProject p : getChildProjects()) {\n                if(p.isDisabled()) {\n                    logger.println(Messages.BuildTrigger_Disabled(p.getName()));\n                    continue;\n                }\n\n                \r\n                \r\n                String name = p.getName()+\" #\"+p.getNextBuildNumber();\n                if(p.scheduleBuild()) {\n                    logger.println(Messages.BuildTrigger_Triggering(name));\n                } else {\n                    logger.println(Messages.BuildTrigger_InQueue(name));\n                }\n            }\n        }\n\n        return true;\n    }\n","date":"2008-02-10 06:05:01","endLine":111,"groupId":"4208","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"perform","params":"(AbstractBuildbuild@Launcherlauncher@BuildListenerlistener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/9e/93e131f5c82ba7b498120ad4cc557f930b8157.src","preCode":"    public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) {\n        if(!build.getResult().isWorseThan(getThreshold())) {\n            PrintStream logger = listener.getLogger();\n            for (AbstractProject p : getChildProjects()) {\n                if(p.isDisabled()) {\n                    logger.println(Messages.BuildTrigger_Disabled(p.getName()));\n                    continue;\n                }\n\n                \r\n                \r\n                String name = p.getName()+\" #\"+p.getNextBuildNumber();\n                if(p.scheduleBuild()) {\n                    logger.println(Messages.BuildTrigger_Triggering(name));\n                } else {\n                    logger.println(Messages.BuildTrigger_InQueue(name));\n                }\n            }\n        }\n\n        return true;\n    }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"NB"},{"authorDate":"2010-01-16 04:22:17","commitOrder":7,"curCode":"    public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {\n        for (AbstractProject p : getChildProjects())\n            graph.addDependency(new Dependency(owner, p) {\n                @Override\n                public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener,\n                                                  List<Action> actions) {\n                    return build.getResult().isBetterOrEqualTo(threshold);\n                }\n            });\n    }\n","date":"2010-01-16 04:22:17","endLine":212,"groupId":"8382","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildDependencyGraph","params":"(AbstractProjectowner@DependencyGraphgraph)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d2/26344b70df86cba22762947939c2b89cbf2cd6.src","preCode":"    public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {\n        for (AbstractProject p : getChildProjects())\n            graph.addDependency(new Dependency(owner, p) {\n                @Override\n                public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener,\n                                                  List<Action> actions) {\n                    return build.getResult().isBetterOrEqualTo(threshold);\n                }\n            });\n    }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"B"}],"commitId":"b4ee14c5b8bed0e9d96c8286a44ae34a55e73575","commitMessage":"@@@[HUDSON-5236] remove Dependency.getBuildActions API.  as its computation may\noverlap with shouldTriggerBuild.  Instead.  add List<Action> parameter in\nshouldTriggerBuild which impl can add Actions to before returning boolean.\n\n\ngit-svn-id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/main@25878 71c3de6d-444a-0410-be80-ed276b4c234a\n","date":"2010-01-16 04:22:17","modifiedFileCount":"3","status":"M","submitter":"mindless"},{"authorTime":"2011-03-30 07:49:44","codes":[{"authorDate":"2008-02-10 06:05:01","commitOrder":8,"curCode":"    public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) {\n        if(!build.getResult().isWorseThan(getThreshold())) {\n            PrintStream logger = listener.getLogger();\n            for (AbstractProject p : getChildProjects()) {\n                if(p.isDisabled()) {\n                    logger.println(Messages.BuildTrigger_Disabled(p.getName()));\n                    continue;\n                }\n\n                \r\n                \r\n                String name = p.getName()+\" #\"+p.getNextBuildNumber();\n                if(p.scheduleBuild()) {\n                    logger.println(Messages.BuildTrigger_Triggering(name));\n                } else {\n                    logger.println(Messages.BuildTrigger_InQueue(name));\n                }\n            }\n        }\n\n        return true;\n    }\n","date":"2008-02-10 06:05:01","endLine":111,"groupId":"4208","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"perform","params":"(AbstractBuildbuild@Launcherlauncher@BuildListenerlistener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/9e/93e131f5c82ba7b498120ad4cc557f930b8157.src","preCode":"    public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) {\n        if(!build.getResult().isWorseThan(getThreshold())) {\n            PrintStream logger = listener.getLogger();\n            for (AbstractProject p : getChildProjects()) {\n                if(p.isDisabled()) {\n                    logger.println(Messages.BuildTrigger_Disabled(p.getName()));\n                    continue;\n                }\n\n                \r\n                \r\n                String name = p.getName()+\" #\"+p.getNextBuildNumber();\n                if(p.scheduleBuild()) {\n                    logger.println(Messages.BuildTrigger_Triggering(name));\n                } else {\n                    logger.println(Messages.BuildTrigger_InQueue(name));\n                }\n            }\n        }\n\n        return true;\n    }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"},{"authorDate":"2011-03-30 07:49:44","commitOrder":8,"curCode":"    public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {\n        for (AbstractProject p : getChildProjects(owner))\n            graph.addDependency(new Dependency(owner, p) {\n                @Override\n                public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener,\n                                                  List<Action> actions) {\n                    return build.getResult().isBetterOrEqualTo(threshold);\n                }\n            });\n    }\n","date":"2011-03-30 12:34:50","endLine":232,"groupId":"8382","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildDependencyGraph","params":"(AbstractProjectowner@DependencyGraphgraph)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/55/a9a3b3f37dd7691364fc9eb41863252fc87711.src","preCode":"    public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {\n        for (AbstractProject p : getChildProjects())\n            graph.addDependency(new Dependency(owner, p) {\n                @Override\n                public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener,\n                                                  List<Action> actions) {\n                    return build.getResult().isBetterOrEqualTo(threshold);\n                }\n            });\n    }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"}],"commitId":"7c19d7930ed623dd57428df63c58e82d3e34fe2a","commitMessage":"@@@added a new method to interpret the path with relative names\n","date":"2011-03-30 12:34:50","modifiedFileCount":"6","status":"M","submitter":"Kohsuke Kawaguchi"},{"authorTime":"2014-04-04 05:09:41","codes":[{"authorDate":"2008-02-10 06:05:01","commitOrder":9,"curCode":"    public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) {\n        if(!build.getResult().isWorseThan(getThreshold())) {\n            PrintStream logger = listener.getLogger();\n            for (AbstractProject p : getChildProjects()) {\n                if(p.isDisabled()) {\n                    logger.println(Messages.BuildTrigger_Disabled(p.getName()));\n                    continue;\n                }\n\n                \r\n                \r\n                String name = p.getName()+\" #\"+p.getNextBuildNumber();\n                if(p.scheduleBuild()) {\n                    logger.println(Messages.BuildTrigger_Triggering(name));\n                } else {\n                    logger.println(Messages.BuildTrigger_InQueue(name));\n                }\n            }\n        }\n\n        return true;\n    }\n","date":"2008-02-10 06:05:01","endLine":111,"groupId":"4208","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"perform","params":"(AbstractBuildbuild@Launcherlauncher@BuildListenerlistener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/9e/93e131f5c82ba7b498120ad4cc557f930b8157.src","preCode":"    public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) {\n        if(!build.getResult().isWorseThan(getThreshold())) {\n            PrintStream logger = listener.getLogger();\n            for (AbstractProject p : getChildProjects()) {\n                if(p.isDisabled()) {\n                    logger.println(Messages.BuildTrigger_Disabled(p.getName()));\n                    continue;\n                }\n\n                \r\n                \r\n                String name = p.getName()+\" #\"+p.getNextBuildNumber();\n                if(p.scheduleBuild()) {\n                    logger.println(Messages.BuildTrigger_Triggering(name));\n                } else {\n                    logger.println(Messages.BuildTrigger_InQueue(name));\n                }\n            }\n        }\n\n        return true;\n    }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"},{"authorDate":"2014-04-04 05:09:41","commitOrder":9,"curCode":"    public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {\n        for (AbstractProject p : getChildProjects(owner))\n            graph.addDependency(new Dependency(owner, p) {\n                @Override\n                public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener,\n                                                  List<Action> actions) {\n                    AbstractProject downstream = getDownstreamProject();\n                    if (Jenkins.getInstance().getItemByFullName(downstream.getFullName()) != downstream) { \r\n                        return false; \r\n                    }\n                    if (!downstream.hasPermission(Item.BUILD)) {\n                        listener.getLogger().println(Messages.BuildTrigger_you_have_no_permission_to_build_(ModelHyperlinkNote.encodeTo(downstream)));\n                        return false;\n                    }\n                    return build.getResult().isBetterOrEqualTo(threshold);\n                }\n            });\n    }\n","date":"2014-04-04 05:09:41","endLine":284,"groupId":"8382","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"buildDependencyGraph","params":"(AbstractProjectowner@DependencyGraphgraph)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/1e/8437a783757cd40847d9bcaa2ef275b1a7a7cd.src","preCode":"    public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {\n        for (AbstractProject p : getChildProjects(owner))\n            graph.addDependency(new Dependency(owner, p) {\n                @Override\n                public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener,\n                                                  List<Action> actions) {\n                    return build.getResult().isBetterOrEqualTo(threshold);\n                }\n            });\n    }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"}],"commitId":"ef382f90a5f80dc60e24eeabd30293c48740f8d2","commitMessage":"@@@Introduced a QueueItemAuthenticator overload taking Task.\nAnd moving the permissions checks in BuildTrigger from being hardcoded in execute to being overridable in Dependency.\nThis has two benefits:\n? We can restore the previous form validation logic predicting whether Item.BUILD will be available.\n? A (true) Trigger could check Item.READ on the upstream project\n  under the authentication that the downstream project would have if it were to be built.\n  (This part is not yet implemented; probably will want to make this replace the current pseudotriggers.)","date":"2014-04-04 05:09:41","modifiedFileCount":"6","status":"M","submitter":"Jesse Glick"},{"authorTime":"2014-04-11 08:58:30","codes":[{"authorDate":"2008-02-10 06:05:01","commitOrder":10,"curCode":"    public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) {\n        if(!build.getResult().isWorseThan(getThreshold())) {\n            PrintStream logger = listener.getLogger();\n            for (AbstractProject p : getChildProjects()) {\n                if(p.isDisabled()) {\n                    logger.println(Messages.BuildTrigger_Disabled(p.getName()));\n                    continue;\n                }\n\n                \r\n                \r\n                String name = p.getName()+\" #\"+p.getNextBuildNumber();\n                if(p.scheduleBuild()) {\n                    logger.println(Messages.BuildTrigger_Triggering(name));\n                } else {\n                    logger.println(Messages.BuildTrigger_InQueue(name));\n                }\n            }\n        }\n\n        return true;\n    }\n","date":"2008-02-10 06:05:01","endLine":111,"groupId":"4208","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"perform","params":"(AbstractBuildbuild@Launcherlauncher@BuildListenerlistener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/9e/93e131f5c82ba7b498120ad4cc557f930b8157.src","preCode":"    public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) {\n        if(!build.getResult().isWorseThan(getThreshold())) {\n            PrintStream logger = listener.getLogger();\n            for (AbstractProject p : getChildProjects()) {\n                if(p.isDisabled()) {\n                    logger.println(Messages.BuildTrigger_Disabled(p.getName()));\n                    continue;\n                }\n\n                \r\n                \r\n                String name = p.getName()+\" #\"+p.getNextBuildNumber();\n                if(p.scheduleBuild()) {\n                    logger.println(Messages.BuildTrigger_Triggering(name));\n                } else {\n                    logger.println(Messages.BuildTrigger_InQueue(name));\n                }\n            }\n        }\n\n        return true;\n    }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"},{"authorDate":"2014-04-11 08:58:30","commitOrder":10,"curCode":"    public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {\n        for (AbstractProject p : getChildProjects(owner))\n            graph.addDependency(new Dependency(owner, p) {\n                @Override\n                public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener,\n                                                  List<Action> actions) {\n                    AbstractProject downstream = getDownstreamProject();\n                    if (Jenkins.getInstance().getItemByFullName(downstream.getFullName()) != downstream) { \r\n                        LOGGER.log(Level.WARNING, \"Running as {0} cannot even see {1} for trigger from {2}\", new Object[] {Jenkins.getAuthentication().getName(), downstream, getUpstreamProject()});\n                        return false; \r\n                    }\n                    if (!downstream.hasPermission(Item.BUILD)) {\n                        listener.getLogger().println(Messages.BuildTrigger_you_have_no_permission_to_build_(ModelHyperlinkNote.encodeTo(downstream)));\n                        return false;\n                    }\n                    return build.getResult().isBetterOrEqualTo(threshold);\n                }\n            });\n    }\n","date":"2014-04-11 08:58:30","endLine":288,"groupId":"8382","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"buildDependencyGraph","params":"(AbstractProjectowner@DependencyGraphgraph)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/2e/b0aa075b0da1c2d8c4310ae646e857e0721ddd.src","preCode":"    public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {\n        for (AbstractProject p : getChildProjects(owner))\n            graph.addDependency(new Dependency(owner, p) {\n                @Override\n                public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener,\n                                                  List<Action> actions) {\n                    AbstractProject downstream = getDownstreamProject();\n                    if (Jenkins.getInstance().getItemByFullName(downstream.getFullName()) != downstream) { \r\n                        return false; \r\n                    }\n                    if (!downstream.hasPermission(Item.BUILD)) {\n                        listener.getLogger().println(Messages.BuildTrigger_you_have_no_permission_to_build_(ModelHyperlinkNote.encodeTo(downstream)));\n                        return false;\n                    }\n                    return build.getResult().isBetterOrEqualTo(threshold);\n                }\n            });\n    }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"M"}],"commitId":"840bb66944783f07dc551062f8274a6608a11214","commitMessage":"@@@Replacing pseudoUpstreamTrigger with ReverseBuildTrigger.","date":"2014-04-11 08:58:30","modifiedFileCount":"5","status":"M","submitter":"Jesse Glick"},{"authorTime":"2014-04-11 08:58:30","codes":[{"authorDate":"2017-05-14 10:22:40","commitOrder":11,"curCode":"    public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) {\n        List<Job<?, ?>> jobs = new ArrayList<>();\n        for (Job<?, ?> job : getChildJobs(build.getProject())) {\n            if (job instanceof AbstractProject) {\n                continue; \r\n            }\n            jobs.add(job);\n        }\n        if (!jobs.isEmpty() && build.getResult().isBetterOrEqualTo(threshold)) {\n            PrintStream logger = listener.getLogger();\n            for (Job<?, ?> downstream : jobs) {\n                if (Jenkins.getInstance().getItemByFullName(downstream.getFullName()) != downstream) {\n                    LOGGER.log(Level.WARNING, \"Running as {0} cannot even see {1} for trigger from {2}\", new Object[] {Jenkins.getAuthentication().getName(), downstream, build.getParent()});\n                    continue;\n                }\n                if (!downstream.hasPermission(Item.BUILD)) {\n                    listener.getLogger().println(Messages.BuildTrigger_you_have_no_permission_to_build_(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                if (!(downstream instanceof ParameterizedJobMixIn.ParameterizedJob)) {\n                    logger.println(Messages.BuildTrigger_NotBuildable(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                ParameterizedJobMixIn.ParameterizedJob<?, ?> pj = (ParameterizedJobMixIn.ParameterizedJob) downstream;\n                if (pj.isDisabled()) {\n                    logger.println(Messages.BuildTrigger_Disabled(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                if (!downstream.isBuildable()) { \r\n                    logger.println(Messages.BuildTrigger_NotBuildable(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                boolean scheduled = pj.scheduleBuild(pj.getQuietPeriod(), new UpstreamCause((Run) build));\n                if (Jenkins.getInstance().getItemByFullName(downstream.getFullName()) == downstream) {\n                    String name = ModelHyperlinkNote.encodeTo(downstream);\n                    if (scheduled) {\n                        logger.println(Messages.BuildTrigger_Triggering(name));\n                    } else {\n                        logger.println(Messages.BuildTrigger_InQueue(name));\n                    }\n                }\n            }\n        }\n        return true;\n    }\n","date":"2017-05-14 10:22:40","endLine":240,"groupId":"5090","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"perform","params":"(AbstractBuildbuild@Launcherlauncher@BuildListenerlistener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/fe/e5c4711b7426a86a18dabe6cac10cb86ab42d4.src","preCode":"    public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) {\n        if(!build.getResult().isWorseThan(getThreshold())) {\n            PrintStream logger = listener.getLogger();\n            for (AbstractProject p : getChildProjects()) {\n                if(p.isDisabled()) {\n                    logger.println(Messages.BuildTrigger_Disabled(p.getName()));\n                    continue;\n                }\n\n                \r\n                \r\n                String name = p.getName()+\" #\"+p.getNextBuildNumber();\n                if(p.scheduleBuild()) {\n                    logger.println(Messages.BuildTrigger_Triggering(name));\n                } else {\n                    logger.println(Messages.BuildTrigger_InQueue(name));\n                }\n            }\n        }\n\n        return true;\n    }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"},{"authorDate":"2014-04-11 08:58:30","commitOrder":11,"curCode":"    public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {\n        for (AbstractProject p : getChildProjects(owner))\n            graph.addDependency(new Dependency(owner, p) {\n                @Override\n                public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener,\n                                                  List<Action> actions) {\n                    AbstractProject downstream = getDownstreamProject();\n                    if (Jenkins.getInstance().getItemByFullName(downstream.getFullName()) != downstream) { \r\n                        LOGGER.log(Level.WARNING, \"Running as {0} cannot even see {1} for trigger from {2}\", new Object[] {Jenkins.getAuthentication().getName(), downstream, getUpstreamProject()});\n                        return false; \r\n                    }\n                    if (!downstream.hasPermission(Item.BUILD)) {\n                        listener.getLogger().println(Messages.BuildTrigger_you_have_no_permission_to_build_(ModelHyperlinkNote.encodeTo(downstream)));\n                        return false;\n                    }\n                    return build.getResult().isBetterOrEqualTo(threshold);\n                }\n            });\n    }\n","date":"2014-04-11 08:58:30","endLine":288,"groupId":"8382","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"buildDependencyGraph","params":"(AbstractProjectowner@DependencyGraphgraph)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/2e/b0aa075b0da1c2d8c4310ae646e857e0721ddd.src","preCode":"    public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {\n        for (AbstractProject p : getChildProjects(owner))\n            graph.addDependency(new Dependency(owner, p) {\n                @Override\n                public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener,\n                                                  List<Action> actions) {\n                    AbstractProject downstream = getDownstreamProject();\n                    if (Jenkins.getInstance().getItemByFullName(downstream.getFullName()) != downstream) { \r\n                        LOGGER.log(Level.WARNING, \"Running as {0} cannot even see {1} for trigger from {2}\", new Object[] {Jenkins.getAuthentication().getName(), downstream, getUpstreamProject()});\n                        return false; \r\n                    }\n                    if (!downstream.hasPermission(Item.BUILD)) {\n                        listener.getLogger().println(Messages.BuildTrigger_you_have_no_permission_to_build_(ModelHyperlinkNote.encodeTo(downstream)));\n                        return false;\n                    }\n                    return build.getResult().isBetterOrEqualTo(threshold);\n                }\n            });\n    }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"N"}],"commitId":"f1a26582c1b25c470989d19b25378cff5c6d2497","commitMessage":"@@@[JENKINS-28113] Allow freestyle builds to trigger downstream Pipeline builds (#2873)\n\n* Offering default methods on ParameterizedJob.\n\n* Javadoc typo.\n\n* Cleaner use of default methods in ParameterizedJob.\n\n* Need to pick up https://github.com/infradna/bridge-method-injector/pull/15 to be able to build.\n\n* Sketch of pulling disabled functionality into ParameterizedJob.\n\n* EnableJobCommandTest.groovy ? EnableJobCommandTest.java.  and replacing deprecated Remoting-based CLI calls with CLICommandInvoker.\n\n* All CLI commands could be broken by a missing CLI.*.shortDescription key on just one!\n\n* Forgot to move CLI method short descriptions to new package.\n\n* Needed a @CLIResolver for ParameterizedJob. Adding an OptionHandler while we are here.\n\n* Trying to fix up access-modifier versions; started failing in CI today for unknown reasons.\n\n* Introduced <p:makeDisabled/> by analogy with <p:config-disableBuild/>.\n\n* Using new type bounds.\n\n* access-modifier 1.11 released.\n\n* MatrixProject and MavenModuleSet both expect to have access to makeDisabled.jelly.\n\n* Trying to generalize some more.\n\n* Minor simplification.\n\n* [JENKINS-34716] Generalizing doPolling and schedulePolling.\n\n* isBuildable\n\n* Obsolete comment.\n\n* Updated comments.\n\n* bridge-method-injector 1.17\n\n* Unfortunately AbstractProject.schedulePolling cannot delegate to SCMTriggerItem.\n\n* [FIXED JENKINS-28113] Generalize BuildTrigger to be able to trigger non-AbstractProject downstream ParameterizedJob?s without DependencyGraph.\n\n* [JENKINS-22949] Dropping QueueItemAuthenticator trickiness.  as in #2881.\n","date":"2017-05-14 10:22:40","modifiedFileCount":"2","status":"M","submitter":"Jesse Glick"},{"authorTime":"2019-07-03 02:02:48","codes":[{"authorDate":"2019-07-03 02:02:48","commitOrder":12,"curCode":"    public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) {\n        List<Job<?, ?>> jobs = new ArrayList<>();\n        for (Job<?, ?> job : getChildJobs(build.getProject())) {\n            if (job instanceof AbstractProject) {\n                continue; \r\n            }\n            jobs.add(job);\n        }\n        if (!jobs.isEmpty() && build.getResult().isBetterOrEqualTo(threshold)) {\n            PrintStream logger = listener.getLogger();\n            for (Job<?, ?> downstream : jobs) {\n                if (Jenkins.get().getItemByFullName(downstream.getFullName()) != downstream) {\n                    LOGGER.log(Level.WARNING, \"Running as {0} cannot even see {1} for trigger from {2}\", new Object[] {Jenkins.getAuthentication().getName(), downstream, build.getParent()});\n                    continue;\n                }\n                if (!downstream.hasPermission(Item.BUILD)) {\n                    listener.getLogger().println(Messages.BuildTrigger_you_have_no_permission_to_build_(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                if (!(downstream instanceof ParameterizedJobMixIn.ParameterizedJob)) {\n                    logger.println(Messages.BuildTrigger_NotBuildable(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                ParameterizedJobMixIn.ParameterizedJob<?, ?> pj = (ParameterizedJobMixIn.ParameterizedJob) downstream;\n                if (pj.isDisabled()) {\n                    logger.println(Messages.BuildTrigger_Disabled(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                if (!downstream.isBuildable()) { \r\n                    logger.println(Messages.BuildTrigger_NotBuildable(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                boolean scheduled = pj.scheduleBuild(pj.getQuietPeriod(), new UpstreamCause((Run) build));\n                if (Jenkins.get().getItemByFullName(downstream.getFullName()) == downstream) {\n                    String name = ModelHyperlinkNote.encodeTo(downstream);\n                    if (scheduled) {\n                        logger.println(Messages.BuildTrigger_Triggering(name));\n                    } else {\n                        logger.println(Messages.BuildTrigger_InQueue(name));\n                    }\n                }\n            }\n        }\n        return true;\n    }\n","date":"2019-07-03 02:02:48","endLine":236,"groupId":"5090","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"perform","params":"(AbstractBuildbuild@Launcherlauncher@BuildListenerlistener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/af/cf0b8214c76f1ddcbbd2346eb935ab1eb94078.src","preCode":"    public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) {\n        List<Job<?, ?>> jobs = new ArrayList<>();\n        for (Job<?, ?> job : getChildJobs(build.getProject())) {\n            if (job instanceof AbstractProject) {\n                continue; \r\n            }\n            jobs.add(job);\n        }\n        if (!jobs.isEmpty() && build.getResult().isBetterOrEqualTo(threshold)) {\n            PrintStream logger = listener.getLogger();\n            for (Job<?, ?> downstream : jobs) {\n                if (Jenkins.getInstance().getItemByFullName(downstream.getFullName()) != downstream) {\n                    LOGGER.log(Level.WARNING, \"Running as {0} cannot even see {1} for trigger from {2}\", new Object[] {Jenkins.getAuthentication().getName(), downstream, build.getParent()});\n                    continue;\n                }\n                if (!downstream.hasPermission(Item.BUILD)) {\n                    listener.getLogger().println(Messages.BuildTrigger_you_have_no_permission_to_build_(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                if (!(downstream instanceof ParameterizedJobMixIn.ParameterizedJob)) {\n                    logger.println(Messages.BuildTrigger_NotBuildable(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                ParameterizedJobMixIn.ParameterizedJob<?, ?> pj = (ParameterizedJobMixIn.ParameterizedJob) downstream;\n                if (pj.isDisabled()) {\n                    logger.println(Messages.BuildTrigger_Disabled(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                if (!downstream.isBuildable()) { \r\n                    logger.println(Messages.BuildTrigger_NotBuildable(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                boolean scheduled = pj.scheduleBuild(pj.getQuietPeriod(), new UpstreamCause((Run) build));\n                if (Jenkins.getInstance().getItemByFullName(downstream.getFullName()) == downstream) {\n                    String name = ModelHyperlinkNote.encodeTo(downstream);\n                    if (scheduled) {\n                        logger.println(Messages.BuildTrigger_Triggering(name));\n                    } else {\n                        logger.println(Messages.BuildTrigger_InQueue(name));\n                    }\n                }\n            }\n        }\n        return true;\n    }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"},{"authorDate":"2019-07-03 02:02:48","commitOrder":12,"curCode":"    public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {\n        for (AbstractProject p : getChildProjects(owner)) \r\n            graph.addDependency(new Dependency(owner, p) {\n                @Override\n                public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener,\n                                                  List<Action> actions) {\n                    AbstractProject downstream = getDownstreamProject();\n                    if (Jenkins.get().getItemByFullName(downstream.getFullName()) != downstream) { \r\n                        LOGGER.log(Level.WARNING, \"Running as {0} cannot even see {1} for trigger from {2}\", new Object[] {Jenkins.getAuthentication().getName(), downstream, getUpstreamProject()});\n                        return false; \r\n                    }\n                    if (!downstream.hasPermission(Item.BUILD)) {\n                        listener.getLogger().println(Messages.BuildTrigger_you_have_no_permission_to_build_(ModelHyperlinkNote.encodeTo(downstream)));\n                        return false;\n                    }\n                    return build.getResult().isBetterOrEqualTo(threshold);\n                }\n            });\n    }\n","date":"2019-07-03 02:02:48","endLine":311,"groupId":"8382","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"buildDependencyGraph","params":"(AbstractProjectowner@DependencyGraphgraph)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/af/cf0b8214c76f1ddcbbd2346eb935ab1eb94078.src","preCode":"    public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {\n        for (AbstractProject p : getChildProjects(owner)) \r\n            graph.addDependency(new Dependency(owner, p) {\n                @Override\n                public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener,\n                                                  List<Action> actions) {\n                    AbstractProject downstream = getDownstreamProject();\n                    if (Jenkins.getInstance().getItemByFullName(downstream.getFullName()) != downstream) { \r\n                        LOGGER.log(Level.WARNING, \"Running as {0} cannot even see {1} for trigger from {2}\", new Object[] {Jenkins.getAuthentication().getName(), downstream, getUpstreamProject()});\n                        return false; \r\n                    }\n                    if (!downstream.hasPermission(Item.BUILD)) {\n                        listener.getLogger().println(Messages.BuildTrigger_you_have_no_permission_to_build_(ModelHyperlinkNote.encodeTo(downstream)));\n                        return false;\n                    }\n                    return build.getResult().isBetterOrEqualTo(threshold);\n                }\n            });\n    }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"}],"commitId":"494119294fa2f095b4a28db0dd32c0d2092d9fa1","commitMessage":"@@@Merge commit '4404c6e662befe16e8daa1ea7a412df73b370086' of github.com:jenkinsci/jenkins\n","date":"2019-07-03 02:02:48","modifiedFileCount":"292","status":"M","submitter":"Jeff Thompson"},{"authorTime":"2020-11-07 02:30:25","codes":[{"authorDate":"2020-11-07 02:30:25","commitOrder":13,"curCode":"    public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) {\n        List<Job<?, ?>> jobs = new ArrayList<>();\n        for (Job<?, ?> job : getChildJobs(build.getProject())) {\n            if (job instanceof AbstractProject) {\n                continue; \r\n            }\n            jobs.add(job);\n        }\n        if (!jobs.isEmpty() && build.getResult().isBetterOrEqualTo(threshold)) {\n            PrintStream logger = listener.getLogger();\n            for (Job<?, ?> downstream : jobs) {\n                if (Jenkins.get().getItemByFullName(downstream.getFullName()) != downstream) {\n                    LOGGER.log(Level.WARNING, \"Running as {0} cannot even see {1} for trigger from {2}\", new Object[] {Jenkins.getAuthentication2().getName(), downstream, build.getParent()});\n                    continue;\n                }\n                if (!downstream.hasPermission(Item.BUILD)) {\n                    listener.getLogger().println(Messages.BuildTrigger_you_have_no_permission_to_build_(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                if (!(downstream instanceof ParameterizedJobMixIn.ParameterizedJob)) {\n                    logger.println(Messages.BuildTrigger_NotBuildable(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                ParameterizedJobMixIn.ParameterizedJob<?, ?> pj = (ParameterizedJobMixIn.ParameterizedJob) downstream;\n                if (pj.isDisabled()) {\n                    logger.println(Messages.BuildTrigger_Disabled(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                if (!downstream.isBuildable()) { \r\n                    logger.println(Messages.BuildTrigger_NotBuildable(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                boolean scheduled = pj.scheduleBuild(pj.getQuietPeriod(), new UpstreamCause((Run) build));\n                if (Jenkins.get().getItemByFullName(downstream.getFullName()) == downstream) {\n                    String name = ModelHyperlinkNote.encodeTo(downstream);\n                    if (scheduled) {\n                        logger.println(Messages.BuildTrigger_Triggering(name));\n                    } else {\n                        logger.println(Messages.BuildTrigger_InQueue(name));\n                    }\n                }\n            }\n        }\n        return true;\n    }\n","date":"2020-11-07 02:30:25","endLine":235,"groupId":"10952","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"perform","params":"(AbstractBuildbuild@Launcherlauncher@BuildListenerlistener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/3a/73f2fedf816ddd2d2c8231554920fc3ea132b6.src","preCode":"    public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) {\n        List<Job<?, ?>> jobs = new ArrayList<>();\n        for (Job<?, ?> job : getChildJobs(build.getProject())) {\n            if (job instanceof AbstractProject) {\n                continue; \r\n            }\n            jobs.add(job);\n        }\n        if (!jobs.isEmpty() && build.getResult().isBetterOrEqualTo(threshold)) {\n            PrintStream logger = listener.getLogger();\n            for (Job<?, ?> downstream : jobs) {\n                if (Jenkins.get().getItemByFullName(downstream.getFullName()) != downstream) {\n                    LOGGER.log(Level.WARNING, \"Running as {0} cannot even see {1} for trigger from {2}\", new Object[] {Jenkins.getAuthentication().getName(), downstream, build.getParent()});\n                    continue;\n                }\n                if (!downstream.hasPermission(Item.BUILD)) {\n                    listener.getLogger().println(Messages.BuildTrigger_you_have_no_permission_to_build_(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                if (!(downstream instanceof ParameterizedJobMixIn.ParameterizedJob)) {\n                    logger.println(Messages.BuildTrigger_NotBuildable(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                ParameterizedJobMixIn.ParameterizedJob<?, ?> pj = (ParameterizedJobMixIn.ParameterizedJob) downstream;\n                if (pj.isDisabled()) {\n                    logger.println(Messages.BuildTrigger_Disabled(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                if (!downstream.isBuildable()) { \r\n                    logger.println(Messages.BuildTrigger_NotBuildable(ModelHyperlinkNote.encodeTo(downstream)));\n                    continue;\n                }\n                boolean scheduled = pj.scheduleBuild(pj.getQuietPeriod(), new UpstreamCause((Run) build));\n                if (Jenkins.get().getItemByFullName(downstream.getFullName()) == downstream) {\n                    String name = ModelHyperlinkNote.encodeTo(downstream);\n                    if (scheduled) {\n                        logger.println(Messages.BuildTrigger_Triggering(name));\n                    } else {\n                        logger.println(Messages.BuildTrigger_InQueue(name));\n                    }\n                }\n            }\n        }\n        return true;\n    }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"},{"authorDate":"2020-11-07 02:30:25","commitOrder":13,"curCode":"    public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {\n        for (AbstractProject p : getChildProjects(owner)) \r\n            graph.addDependency(new Dependency(owner, p) {\n                @Override\n                public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener,\n                                                  List<Action> actions) {\n                    AbstractProject downstream = getDownstreamProject();\n                    if (Jenkins.get().getItemByFullName(downstream.getFullName()) != downstream) { \r\n                        LOGGER.log(Level.WARNING, \"Running as {0} cannot even see {1} for trigger from {2}\", new Object[] {Jenkins.getAuthentication2().getName(), downstream, getUpstreamProject()});\n                        return false; \r\n                    }\n                    if (!downstream.hasPermission(Item.BUILD)) {\n                        listener.getLogger().println(Messages.BuildTrigger_you_have_no_permission_to_build_(ModelHyperlinkNote.encodeTo(downstream)));\n                        return false;\n                    }\n                    return build.getResult().isBetterOrEqualTo(threshold);\n                }\n            });\n    }\n","date":"2020-11-07 02:30:25","endLine":310,"groupId":"10952","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"buildDependencyGraph","params":"(AbstractProjectowner@DependencyGraphgraph)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/3a/73f2fedf816ddd2d2c8231554920fc3ea132b6.src","preCode":"    public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {\n        for (AbstractProject p : getChildProjects(owner)) \r\n            graph.addDependency(new Dependency(owner, p) {\n                @Override\n                public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener,\n                                                  List<Action> actions) {\n                    AbstractProject downstream = getDownstreamProject();\n                    if (Jenkins.get().getItemByFullName(downstream.getFullName()) != downstream) { \r\n                        LOGGER.log(Level.WARNING, \"Running as {0} cannot even see {1} for trigger from {2}\", new Object[] {Jenkins.getAuthentication().getName(), downstream, getUpstreamProject()});\n                        return false; \r\n                    }\n                    if (!downstream.hasPermission(Item.BUILD)) {\n                        listener.getLogger().println(Messages.BuildTrigger_you_have_no_permission_to_build_(ModelHyperlinkNote.encodeTo(downstream)));\n                        return false;\n                    }\n                    return build.getResult().isBetterOrEqualTo(threshold);\n                }\n            });\n    }\n","realPath":"core/src/main/java/hudson/tasks/BuildTrigger.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"M"}],"commitId":"a9ca5ef3d4c97937636bf3c585f4232514279b14","commitMessage":"@@@[JEP-227] Replace Acegi Security with Spring Security & upgrade Spring Framework (#4848)\n\nReplacing Acegi Security with Spring Security\n\nCo-authored-by: Tim Jacomb <timjacomb1+github@gmail.com>\nCo-authored-by: James Nord <jtnord@users.noreply.github.com>","date":"2020-11-07 02:30:25","modifiedFileCount":"149","status":"M","submitter":"Jesse Glick"}]
