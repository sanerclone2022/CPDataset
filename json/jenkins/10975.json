[{"authorTime":"2013-06-18 17:54:12","codes":[{"authorDate":"2011-06-08 01:44:49","commitOrder":3,"curCode":"    public static List<NodePropertyDescriptor> getNodePropertyDescriptors(Class<? extends Node> clazz) {\n        List<NodePropertyDescriptor> result = new ArrayList<NodePropertyDescriptor>();\n        Collection<NodePropertyDescriptor> list = (Collection) Jenkins.getInstance().getDescriptorList(NodeProperty.class);\n        for (NodePropertyDescriptor npd : list) {\n            if (npd.isApplicable(clazz)) {\n                result.add(npd);\n            }\n        }\n        return result;\n    }\n","date":"2011-06-08 01:44:49","endLine":707,"groupId":"2522","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getNodePropertyDescriptors","params":"(Class<?extendsNode>clazz)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/37/e7406198bdc01a4c42f6d50ed1aca1de0f73ca.src","preCode":"    public static List<NodePropertyDescriptor> getNodePropertyDescriptors(Class<? extends Node> clazz) {\n        List<NodePropertyDescriptor> result = new ArrayList<NodePropertyDescriptor>();\n        Collection<NodePropertyDescriptor> list = (Collection) Jenkins.getInstance().getDescriptorList(NodeProperty.class);\n        for (NodePropertyDescriptor npd : list) {\n            if (npd.isApplicable(clazz)) {\n                result.add(npd);\n            }\n        }\n        return result;\n    }\n","realPath":"core/src/main/java/hudson/Functions.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":698,"status":"NB"},{"authorDate":"2013-06-18 17:54:12","commitOrder":3,"curCode":"    public static List<NodePropertyDescriptor> getGlobalNodePropertyDescriptors() {\n        List<NodePropertyDescriptor> result = new ArrayList<NodePropertyDescriptor>();\n        Collection<NodePropertyDescriptor> list = (Collection) Jenkins.getInstance().getDescriptorList(NodeProperty.class);\n        for (NodePropertyDescriptor npd : list) {\n            if (npd.isApplicableAsGlobal()) {\n                result.add(npd);\n            }\n        }\n        return result;\n    }\n","date":"2013-06-18 17:54:12","endLine":813,"groupId":"2522","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getGlobalNodePropertyDescriptors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/78/1afece9c921789718c3493756756e027bed952.src","preCode":"    public static List<NodePropertyDescriptor> getGlobalNodePropertyDescriptors() {\n        List<NodePropertyDescriptor> result = new ArrayList<NodePropertyDescriptor>();\n        Collection<NodePropertyDescriptor> list = (Collection) Jenkins.getInstance().getDescriptorList(NodeProperty.class);\n        for (NodePropertyDescriptor npd : list) {\n            if (npd.isApplicableAsGlobal()) {\n                result.add(npd);\n            }\n        }\n        return result;\n    }\n","realPath":"core/src/main/java/hudson/Functions.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":804,"status":"B"}],"commitId":"48e801023123f84ee4eebf60737089f41b44958e","commitMessage":"@@@[JENKINS-18381] Provide a mechanism to differentiate between node\nproperties that are applicable to the master node only and node properties\nthat can be applied to all nodes\n","date":"2013-06-18 17:54:12","modifiedFileCount":"2","status":"M","submitter":"Stephen Connolly"},{"authorTime":"2019-07-03 02:02:48","codes":[{"authorDate":"2019-07-03 02:02:48","commitOrder":4,"curCode":"    public static List<NodePropertyDescriptor> getNodePropertyDescriptors(Class<? extends Node> clazz) {\n        List<NodePropertyDescriptor> result = new ArrayList<NodePropertyDescriptor>();\n        Collection<NodePropertyDescriptor> list = (Collection) Jenkins.get().getDescriptorList(NodeProperty.class);\n        for (NodePropertyDescriptor npd : list) {\n            if (npd.isApplicable(clazz)) {\n                result.add(npd);\n            }\n        }\n        return result;\n    }\n","date":"2019-07-03 02:02:48","endLine":961,"groupId":"836","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getNodePropertyDescriptors","params":"(Class<?extendsNode>clazz)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/52/4ec8eaab4da57d01ad67204ff8ff4a6a8ad929.src","preCode":"    public static List<NodePropertyDescriptor> getNodePropertyDescriptors(Class<? extends Node> clazz) {\n        List<NodePropertyDescriptor> result = new ArrayList<NodePropertyDescriptor>();\n        Collection<NodePropertyDescriptor> list = (Collection) Jenkins.getInstance().getDescriptorList(NodeProperty.class);\n        for (NodePropertyDescriptor npd : list) {\n            if (npd.isApplicable(clazz)) {\n                result.add(npd);\n            }\n        }\n        return result;\n    }\n","realPath":"core/src/main/java/hudson/Functions.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":952,"status":"M"},{"authorDate":"2019-07-03 02:02:48","commitOrder":4,"curCode":"    public static List<NodePropertyDescriptor> getGlobalNodePropertyDescriptors() {\n        List<NodePropertyDescriptor> result = new ArrayList<NodePropertyDescriptor>();\n        Collection<NodePropertyDescriptor> list = (Collection) Jenkins.get().getDescriptorList(NodeProperty.class);\n        for (NodePropertyDescriptor npd : list) {\n            if (npd.isApplicableAsGlobal()) {\n                result.add(npd);\n            }\n        }\n        return result;\n    }\n","date":"2019-07-03 02:02:48","endLine":977,"groupId":"836","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getGlobalNodePropertyDescriptors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/52/4ec8eaab4da57d01ad67204ff8ff4a6a8ad929.src","preCode":"    public static List<NodePropertyDescriptor> getGlobalNodePropertyDescriptors() {\n        List<NodePropertyDescriptor> result = new ArrayList<NodePropertyDescriptor>();\n        Collection<NodePropertyDescriptor> list = (Collection) Jenkins.getInstance().getDescriptorList(NodeProperty.class);\n        for (NodePropertyDescriptor npd : list) {\n            if (npd.isApplicableAsGlobal()) {\n                result.add(npd);\n            }\n        }\n        return result;\n    }\n","realPath":"core/src/main/java/hudson/Functions.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":968,"status":"M"}],"commitId":"494119294fa2f095b4a28db0dd32c0d2092d9fa1","commitMessage":"@@@Merge commit '4404c6e662befe16e8daa1ea7a412df73b370086' of github.com:jenkinsci/jenkins\n","date":"2019-07-03 02:02:48","modifiedFileCount":"292","status":"M","submitter":"Jeff Thompson"},{"authorTime":"2019-10-02 15:46:53","codes":[{"authorDate":"2019-10-02 15:46:53","commitOrder":5,"curCode":"    public static List<NodePropertyDescriptor> getNodePropertyDescriptors(Class<? extends Node> clazz) {\n        List<NodePropertyDescriptor> result = new ArrayList<>();\n        Collection<NodePropertyDescriptor> list = (Collection) Jenkins.get().getDescriptorList(NodeProperty.class);\n        for (NodePropertyDescriptor npd : list) {\n            if (npd.isApplicable(clazz)) {\n                result.add(npd);\n            }\n        }\n        return result;\n    }\n","date":"2019-10-02 15:46:53","endLine":962,"groupId":"10975","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getNodePropertyDescriptors","params":"(Class<?extendsNode>clazz)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/04/38e8135c8730aa0d5d26a702a95a32071fc0b0.src","preCode":"    public static List<NodePropertyDescriptor> getNodePropertyDescriptors(Class<? extends Node> clazz) {\n        List<NodePropertyDescriptor> result = new ArrayList<NodePropertyDescriptor>();\n        Collection<NodePropertyDescriptor> list = (Collection) Jenkins.get().getDescriptorList(NodeProperty.class);\n        for (NodePropertyDescriptor npd : list) {\n            if (npd.isApplicable(clazz)) {\n                result.add(npd);\n            }\n        }\n        return result;\n    }\n","realPath":"core/src/main/java/hudson/Functions.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":953,"status":"M"},{"authorDate":"2019-10-02 15:46:53","commitOrder":5,"curCode":"    public static List<NodePropertyDescriptor> getGlobalNodePropertyDescriptors() {\n        List<NodePropertyDescriptor> result = new ArrayList<>();\n        Collection<NodePropertyDescriptor> list = (Collection) Jenkins.get().getDescriptorList(NodeProperty.class);\n        for (NodePropertyDescriptor npd : list) {\n            if (npd.isApplicableAsGlobal()) {\n                result.add(npd);\n            }\n        }\n        return result;\n    }\n","date":"2019-10-02 15:46:53","endLine":978,"groupId":"10975","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getGlobalNodePropertyDescriptors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/04/38e8135c8730aa0d5d26a702a95a32071fc0b0.src","preCode":"    public static List<NodePropertyDescriptor> getGlobalNodePropertyDescriptors() {\n        List<NodePropertyDescriptor> result = new ArrayList<NodePropertyDescriptor>();\n        Collection<NodePropertyDescriptor> list = (Collection) Jenkins.get().getDescriptorList(NodeProperty.class);\n        for (NodePropertyDescriptor npd : list) {\n            if (npd.isApplicableAsGlobal()) {\n                result.add(npd);\n            }\n        }\n        return result;\n    }\n","realPath":"core/src/main/java/hudson/Functions.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":969,"status":"M"}],"commitId":"531972f113e6ff56f393512f0e17a59647fea54f","commitMessage":"@@@Merge pull request #4243 from res0nance/infer-types\n\nUse type inference instead of specifying it","date":"2019-10-02 15:46:53","modifiedFileCount":"44","status":"M","submitter":"Oleg Nenashev"}]
