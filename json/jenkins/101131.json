[{"authorTime":"2013-01-08 06:10:20","codes":[{"authorDate":"2013-01-08 06:10:20","commitOrder":1,"curCode":"    public String get() {\n        try {\n            if (secret==null) {\n                synchronized (this) {\n                    if (secret==null) {\n                        byte[] payload = load();\n                        if (payload==null) {\n                            payload = ConfidentialStore.get().randomBytes(length/2);\n                            store(payload);\n                        }\n                        secret = Util.toHexString(payload).substring(0,length);\n                    }\n                }\n            }\n            return secret;\n        } catch (IOException e) {\n            throw new Error(\"Failed to load the key: \"+getId(),e);\n        }\n    }\n","date":"2013-01-08 06:10:20","endLine":64,"groupId":"9021","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/75/fb259bd8ad0b478bf3cb10280f7cd37cc13b2c.src","preCode":"    public String get() {\n        try {\n            if (secret==null) {\n                synchronized (this) {\n                    if (secret==null) {\n                        byte[] payload = load();\n                        if (payload==null) {\n                            payload = ConfidentialStore.get().randomBytes(length/2);\n                            store(payload);\n                        }\n                        secret = Util.toHexString(payload).substring(0,length);\n                    }\n                }\n            }\n            return secret;\n        } catch (IOException e) {\n            throw new Error(\"Failed to load the key: \"+getId(),e);\n        }\n    }\n","realPath":"core/src/main/java/jenkins/security/HexStringConfidentialKey.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2013-01-08 06:10:20","commitOrder":1,"curCode":"    private SecretKey getKey() {\n        try {\n            if (secret==null) {\n                synchronized (this) {\n                    if (secret==null) {\n                        byte[] payload = load();\n                        if (payload==null) {\n                            payload = ConfidentialStore.get().randomBytes(256);\n                            store(payload);\n                        }\n                        \r\n                        secret = new SecretKeySpec(payload,0,128/8, ALGORITHM);\n                    }\n                }\n            }\n            return secret;\n        } catch (IOException e) {\n            throw new Error(\"Failed to load the key: \"+getId(),e);\n        }\n    }\n","date":"2013-01-08 06:10:20","endLine":46,"groupId":"9021","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/dd/1dad9e37b96fc9018181b62702aa3217f64e55.src","preCode":"    private SecretKey getKey() {\n        try {\n            if (secret==null) {\n                synchronized (this) {\n                    if (secret==null) {\n                        byte[] payload = load();\n                        if (payload==null) {\n                            payload = ConfidentialStore.get().randomBytes(256);\n                            store(payload);\n                        }\n                        \r\n                        secret = new SecretKeySpec(payload,0,128/8, ALGORITHM);\n                    }\n                }\n            }\n            return secret;\n        } catch (IOException e) {\n            throw new Error(\"Failed to load the key: \"+getId(),e);\n        }\n    }\n","realPath":"core/src/main/java/jenkins/security/CryptoConfidentialKey.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":27,"status":"B"}],"commitId":"c9ccc6715941a6922b68735addc3ef24a15c17f8","commitMessage":"@@@Merge branch 'master' of github.com:jenkinsci/jenkins\n","date":"2013-01-08 06:10:20","modifiedFileCount":"21","status":"B","submitter":"Jesse Glick"},{"authorTime":"2017-01-24 03:26:10","codes":[{"authorDate":"2013-01-08 06:10:20","commitOrder":2,"curCode":"    public String get() {\n        try {\n            if (secret==null) {\n                synchronized (this) {\n                    if (secret==null) {\n                        byte[] payload = load();\n                        if (payload==null) {\n                            payload = ConfidentialStore.get().randomBytes(length/2);\n                            store(payload);\n                        }\n                        secret = Util.toHexString(payload).substring(0,length);\n                    }\n                }\n            }\n            return secret;\n        } catch (IOException e) {\n            throw new Error(\"Failed to load the key: \"+getId(),e);\n        }\n    }\n","date":"2013-01-08 06:10:20","endLine":64,"groupId":"9021","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/75/fb259bd8ad0b478bf3cb10280f7cd37cc13b2c.src","preCode":"    public String get() {\n        try {\n            if (secret==null) {\n                synchronized (this) {\n                    if (secret==null) {\n                        byte[] payload = load();\n                        if (payload==null) {\n                            payload = ConfidentialStore.get().randomBytes(length/2);\n                            store(payload);\n                        }\n                        secret = Util.toHexString(payload).substring(0,length);\n                    }\n                }\n            }\n            return secret;\n        } catch (IOException e) {\n            throw new Error(\"Failed to load the key: \"+getId(),e);\n        }\n    }\n","realPath":"core/src/main/java/jenkins/security/HexStringConfidentialKey.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"},{"authorDate":"2017-01-24 03:26:10","commitOrder":2,"curCode":"    private SecretKey getKey() {\n        try {\n            if (secret==null) {\n                synchronized (this) {\n                    if (secret==null) {\n                        byte[] payload = load();\n                        if (payload==null) {\n                            payload = ConfidentialStore.get().randomBytes(256);\n                            store(payload);\n                        }\n                        \r\n                        secret = new SecretKeySpec(payload,0,128/8, KEY_ALGORITHM);\n                    }\n                }\n            }\n            return secret;\n        } catch (IOException e) {\n            throw new Error(\"Failed to load the key: \"+getId(),e);\n        }\n    }\n","date":"2017-01-24 03:26:10","endLine":55,"groupId":"9021","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f4/027060131a1aba28e7cae0c24da5ec19baa117.src","preCode":"    private SecretKey getKey() {\n        try {\n            if (secret==null) {\n                synchronized (this) {\n                    if (secret==null) {\n                        byte[] payload = load();\n                        if (payload==null) {\n                            payload = ConfidentialStore.get().randomBytes(256);\n                            store(payload);\n                        }\n                        \r\n                        secret = new SecretKeySpec(payload,0,128/8, ALGORITHM);\n                    }\n                }\n            }\n            return secret;\n        } catch (IOException e) {\n            throw new Error(\"Failed to load the key: \"+getId(),e);\n        }\n    }\n","realPath":"core/src/main/java/jenkins/security/CryptoConfidentialKey.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"06327a2db6d3facb56e2c2d0f1506c1a77fece5c","commitMessage":"@@@Merge branch 'security-stable-2.32' into security-master\n","date":"2017-01-24 03:26:10","modifiedFileCount":"15","status":"M","submitter":"Jesse Glick"},{"authorTime":"2019-05-09 18:56:19","codes":[{"authorDate":"2019-05-09 18:56:19","commitOrder":3,"curCode":"    public synchronized String get() {\n        ConfidentialStore cs = ConfidentialStore.get();\n        if (secret == null || cs != lastCS) {\n            lastCS = cs;\n            try {\n                byte[] payload = load();\n                if (payload == null) {\n                    payload = cs.randomBytes(length / 2);\n                    store(payload);\n                }\n                secret = Util.toHexString(payload).substring(0, length);\n            } catch (IOException e) {\n                throw new Error(\"Failed to load the key: \" + getId(), e);\n            }\n        }\n        return secret;\n    }\n","date":"2019-05-09 18:56:19","endLine":63,"groupId":"101131","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"get","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/15/07612c81310cdd5b6b31ec23f85ab2e2e022ec.src","preCode":"    public String get() {\n        try {\n            if (secret==null) {\n                synchronized (this) {\n                    if (secret==null) {\n                        byte[] payload = load();\n                        if (payload==null) {\n                            payload = ConfidentialStore.get().randomBytes(length/2);\n                            store(payload);\n                        }\n                        secret = Util.toHexString(payload).substring(0,length);\n                    }\n                }\n            }\n            return secret;\n        } catch (IOException e) {\n            throw new Error(\"Failed to load the key: \"+getId(),e);\n        }\n    }\n","realPath":"core/src/main/java/jenkins/security/HexStringConfidentialKey.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2019-05-09 18:56:19","commitOrder":3,"curCode":"    private synchronized SecretKey getKey() {\n        ConfidentialStore cs = ConfidentialStore.get();\n        if (secret == null || cs != lastCS) {\n            lastCS = cs;\n            try {\n                byte[] payload = load();\n                if (payload == null) {\n                    payload = cs.randomBytes(256);\n                    store(payload);\n                }\n                \r\n                secret = new SecretKeySpec(payload, 0, 128 / 8, KEY_ALGORITHM);\n            } catch (IOException e) {\n                throw new Error(\"Failed to load the key: \" + getId(), e);\n            }\n        }\n        return secret;\n    }\n","date":"2019-05-09 18:56:19","endLine":52,"groupId":"101131","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"getKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/4a/e48838868895f89e73b03d8952ab6dd32662bf.src","preCode":"    private SecretKey getKey() {\n        try {\n            if (secret==null) {\n                synchronized (this) {\n                    if (secret==null) {\n                        byte[] payload = load();\n                        if (payload==null) {\n                            payload = ConfidentialStore.get().randomBytes(256);\n                            store(payload);\n                        }\n                        \r\n                        secret = new SecretKeySpec(payload,0,128/8, KEY_ALGORITHM);\n                    }\n                }\n            }\n            return secret;\n        } catch (IOException e) {\n            throw new Error(\"Failed to load the key: \"+getId(),e);\n        }\n    }\n","realPath":"core/src/main/java/jenkins/security/CryptoConfidentialKey.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"86ea7b0028c232f298172bf1a7f2e1f03e6ab7a7","commitMessage":"@@@Merge commit '79171d0cb173717f2a03bf7aec4cd7f658c7d685' of git://github.com/jenkinsci/jenkins\n","date":"2019-05-09 18:56:19","modifiedFileCount":"30","status":"M","submitter":"Daniel Beck"}]
