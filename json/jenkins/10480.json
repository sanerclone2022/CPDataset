[{"authorTime":"2020-03-23 17:55:26","codes":[{"authorDate":"2016-07-09 06:50:37","commitOrder":4,"curCode":"    @Test public void pendingsConsistenceAfterErrorDuringMaintain() throws IOException, ExecutionException, InterruptedException{\n        FreeStyleProject project1 = r.createFreeStyleProject();\n        FreeStyleProject project2 = r.createFreeStyleProject();\n        TopLevelItemDescriptor descriptor = new TopLevelItemDescriptor(FreeStyleProject.class){\n         @Override\n            public FreeStyleProject newInstance(ItemGroup parent, String name) {\n                return (FreeStyleProject) new FreeStyleProject(parent,name){\n                     @Override\n                    public Label getAssignedLabel(){\n                        throw new IllegalArgumentException(\"Test exception\"); \r\n                    }\n\n                    @Override\n                     public void save(){\n                         \r\n                     }\n            };\n        }\n        };\n        FreeStyleProject projectError = (FreeStyleProject) r.jenkins.createProject(descriptor, \"throw-error\");\n        project1.setAssignedLabel(r.jenkins.getSelfLabel());\n        project2.setAssignedLabel(r.jenkins.getSelfLabel());\n        project1.getBuildersList().add(new Shell(\"sleep 2\"));\n        project1.scheduleBuild2(0);\n        QueueTaskFuture<FreeStyleBuild> v = project2.scheduleBuild2(0);\n        projectError.scheduleBuild2(0);\n        Executor e = r.jenkins.toComputer().getExecutors().get(0);\n        Thread.sleep(2000);\n        while(project2.getLastBuild()==null){\n             if(!e.isAlive()){\n                    break; \r\n             }\n             if(e.isIdle()){\n                 assertTrue(\"Node went to idle before project had\" + project2.getDisplayName() + \" been started\", v.isDone());\n             }\n                Thread.sleep(1000);\n        }\n        if(project2.getLastBuild()!=null)\n            return;\n        Queue.getInstance().cancel(projectError); \r\n        while(!e.isIdle()){ \r\n            Thread.sleep(1000);\n        }\n        \r\n        List<Queue.BuildableItem> items = Queue.getInstance().getPendingItems();\n        for(Queue.BuildableItem item : items){\n            assertFalse(\"Project \" + project2.getDisplayName() + \" stuck in pendings\",item.task.getName().equals(project2.getName()));\n        }\n    }\n","date":"2016-07-09 06:50:37","endLine":698,"groupId":"3231","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"pendingsConsistenceAfterErrorDuringMaintain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/8a/fe9ab896be780c38fc8351933e5e298f3e57df.src","preCode":"    @Test public void pendingsConsistenceAfterErrorDuringMaintain() throws IOException, ExecutionException, InterruptedException{\n        FreeStyleProject project1 = r.createFreeStyleProject();\n        FreeStyleProject project2 = r.createFreeStyleProject();\n        TopLevelItemDescriptor descriptor = new TopLevelItemDescriptor(FreeStyleProject.class){\n         @Override\n            public FreeStyleProject newInstance(ItemGroup parent, String name) {\n                return (FreeStyleProject) new FreeStyleProject(parent,name){\n                     @Override\n                    public Label getAssignedLabel(){\n                        throw new IllegalArgumentException(\"Test exception\"); \r\n                    }\n\n                    @Override\n                     public void save(){\n                         \r\n                     }\n            };\n        }\n        };\n        FreeStyleProject projectError = (FreeStyleProject) r.jenkins.createProject(descriptor, \"throw-error\");\n        project1.setAssignedLabel(r.jenkins.getSelfLabel());\n        project2.setAssignedLabel(r.jenkins.getSelfLabel());\n        project1.getBuildersList().add(new Shell(\"sleep 2\"));\n        project1.scheduleBuild2(0);\n        QueueTaskFuture<FreeStyleBuild> v = project2.scheduleBuild2(0);\n        projectError.scheduleBuild2(0);\n        Executor e = r.jenkins.toComputer().getExecutors().get(0);\n        Thread.sleep(2000);\n        while(project2.getLastBuild()==null){\n             if(!e.isAlive()){\n                    break; \r\n             }\n             if(e.isIdle()){\n                 assertTrue(\"Node went to idle before project had\" + project2.getDisplayName() + \" been started\", v.isDone());\n             }\n                Thread.sleep(1000);\n        }\n        if(project2.getLastBuild()!=null)\n            return;\n        Queue.getInstance().cancel(projectError); \r\n        while(!e.isIdle()){ \r\n            Thread.sleep(1000);\n        }\n        \r\n        List<Queue.BuildableItem> items = Queue.getInstance().getPendingItems();\n        for(Queue.BuildableItem item : items){\n            assertFalse(\"Project \" + project2.getDisplayName() + \" stuck in pendings\",item.task.getName().equals(project2.getName()));\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/QueueTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":650,"status":"NB"},{"authorDate":"2020-03-23 17:55:26","commitOrder":4,"curCode":"    private FreeStyleProject createBrokenProject() throws IOException {\n        TopLevelItemDescriptor descriptor = new TopLevelItemDescriptor(FreeStyleProject.class) {\n            @Override\n            public FreeStyleProject newInstance(ItemGroup parent, String name) {\n                return new FreeStyleProject(parent, name) {\n                    @Override\n                    public void save() {\n                        \r\n                    }\n                };\n            }\n        };\n        return (FreeStyleProject) j.jenkins.createProject(descriptor, \"throw-error\");\n    }\n","date":"2020-03-23 17:55:26","endLine":157,"groupId":"2570","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createBrokenProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/91/cde9f0cb854efc6eeade37b2c20dcc4139d6fb.src","preCode":"    private FreeStyleProject createBrokenProject() throws IOException {\n        TopLevelItemDescriptor descriptor = new TopLevelItemDescriptor(FreeStyleProject.class) {\n            @Override\n            public FreeStyleProject newInstance(ItemGroup parent, String name) {\n                return new FreeStyleProject(parent, name) {\n                    @Override\n                    public void save() {\n                        \r\n                    }\n                };\n            }\n        };\n        return (FreeStyleProject) j.jenkins.createProject(descriptor, \"throw-error\");\n    }\n","realPath":"test/src/test/java/jenkins/security/StackTraceSuppressionTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"B"}],"commitId":"73c1ed41bb1a845dab6a05768651a714d39e641e","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2020-03-23 17:55:26","modifiedFileCount":"54","status":"M","submitter":"Daniel Beck"},{"authorTime":"2020-03-23 17:55:26","codes":[{"authorDate":"2021-01-03 01:20:57","commitOrder":5,"curCode":"    @Test public void pendingsConsistenceAfterErrorDuringMaintain() throws IOException, ExecutionException, InterruptedException{\n        FreeStyleProject project1 = r.createFreeStyleProject();\n        FreeStyleProject project2 = r.createFreeStyleProject();\n        TopLevelItemDescriptor descriptor = new TopLevelItemDescriptor(FreeStyleProject.class){\n         @Override\n            public FreeStyleProject newInstance(ItemGroup parent, String name) {\n                return (FreeStyleProject) new FreeStyleProject(parent,name){\n                     @Override\n                    public Label getAssignedLabel(){\n                        throw new IllegalArgumentException(\"Test exception\"); \r\n                    }\n\n                    @Override\n                     public void save(){\n                         \r\n                     }\n            };\n        }\n        };\n        FreeStyleProject projectError = (FreeStyleProject) r.jenkins.createProject(descriptor, \"throw-error\");\n        project1.setAssignedLabel(r.jenkins.getSelfLabel());\n        project2.setAssignedLabel(r.jenkins.getSelfLabel());\n        project1.getBuildersList().add(new Shell(\"sleep 2\"));\n        project1.scheduleBuild2(0);\n        QueueTaskFuture<FreeStyleBuild> v = project2.scheduleBuild2(0);\n        projectError.scheduleBuild2(0);\n        Executor e = r.jenkins.toComputer().getExecutors().get(0);\n        Thread.sleep(2000);\n        while(project2.getLastBuild()==null){\n             if(!e.isAlive()){\n                    break; \r\n             }\n             if(e.isIdle()){\n                 assertTrue(\"Node went to idle before project had\" + project2.getDisplayName() + \" been started\", v.isDone());\n             }\n                Thread.sleep(1000);\n        }\n        if(project2.getLastBuild()!=null)\n            return;\n        Queue.getInstance().cancel(projectError); \r\n        while(!e.isIdle()){ \r\n            Thread.sleep(1000);\n        }\n        \r\n        List<Queue.BuildableItem> items = Queue.getInstance().getPendingItems();\n        for(Queue.BuildableItem item : items){\n            assertNotEquals(\"Project \" + project2.getDisplayName() + \" stuck in pendings\", item.task.getName(), project2.getName());\n        }\n    }\n","date":"2021-01-03 01:20:57","endLine":779,"groupId":"3231","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"pendingsConsistenceAfterErrorDuringMaintain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f7/d7d93a127875d8c6cba33025509650434fe183.src","preCode":"    @Test public void pendingsConsistenceAfterErrorDuringMaintain() throws IOException, ExecutionException, InterruptedException{\n        FreeStyleProject project1 = r.createFreeStyleProject();\n        FreeStyleProject project2 = r.createFreeStyleProject();\n        TopLevelItemDescriptor descriptor = new TopLevelItemDescriptor(FreeStyleProject.class){\n         @Override\n            public FreeStyleProject newInstance(ItemGroup parent, String name) {\n                return (FreeStyleProject) new FreeStyleProject(parent,name){\n                     @Override\n                    public Label getAssignedLabel(){\n                        throw new IllegalArgumentException(\"Test exception\"); \r\n                    }\n\n                    @Override\n                     public void save(){\n                         \r\n                     }\n            };\n        }\n        };\n        FreeStyleProject projectError = (FreeStyleProject) r.jenkins.createProject(descriptor, \"throw-error\");\n        project1.setAssignedLabel(r.jenkins.getSelfLabel());\n        project2.setAssignedLabel(r.jenkins.getSelfLabel());\n        project1.getBuildersList().add(new Shell(\"sleep 2\"));\n        project1.scheduleBuild2(0);\n        QueueTaskFuture<FreeStyleBuild> v = project2.scheduleBuild2(0);\n        projectError.scheduleBuild2(0);\n        Executor e = r.jenkins.toComputer().getExecutors().get(0);\n        Thread.sleep(2000);\n        while(project2.getLastBuild()==null){\n             if(!e.isAlive()){\n                    break; \r\n             }\n             if(e.isIdle()){\n                 assertTrue(\"Node went to idle before project had\" + project2.getDisplayName() + \" been started\", v.isDone());\n             }\n                Thread.sleep(1000);\n        }\n        if(project2.getLastBuild()!=null)\n            return;\n        Queue.getInstance().cancel(projectError); \r\n        while(!e.isIdle()){ \r\n            Thread.sleep(1000);\n        }\n        \r\n        List<Queue.BuildableItem> items = Queue.getInstance().getPendingItems();\n        for(Queue.BuildableItem item : items){\n            assertFalse(\"Project \" + project2.getDisplayName() + \" stuck in pendings\",item.task.getName().equals(project2.getName()));\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/QueueTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":731,"status":"M"},{"authorDate":"2020-03-23 17:55:26","commitOrder":5,"curCode":"    private FreeStyleProject createBrokenProject() throws IOException {\n        TopLevelItemDescriptor descriptor = new TopLevelItemDescriptor(FreeStyleProject.class) {\n            @Override\n            public FreeStyleProject newInstance(ItemGroup parent, String name) {\n                return new FreeStyleProject(parent, name) {\n                    @Override\n                    public void save() {\n                        \r\n                    }\n                };\n            }\n        };\n        return (FreeStyleProject) j.jenkins.createProject(descriptor, \"throw-error\");\n    }\n","date":"2020-03-23 17:55:26","endLine":157,"groupId":"2570","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createBrokenProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/91/cde9f0cb854efc6eeade37b2c20dcc4139d6fb.src","preCode":"    private FreeStyleProject createBrokenProject() throws IOException {\n        TopLevelItemDescriptor descriptor = new TopLevelItemDescriptor(FreeStyleProject.class) {\n            @Override\n            public FreeStyleProject newInstance(ItemGroup parent, String name) {\n                return new FreeStyleProject(parent, name) {\n                    @Override\n                    public void save() {\n                        \r\n                    }\n                };\n            }\n        };\n        return (FreeStyleProject) j.jenkins.createProject(descriptor, \"throw-error\");\n    }\n","realPath":"test/src/test/java/jenkins/security/StackTraceSuppressionTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"N"}],"commitId":"a9ee90e7fc931445956616ffae4ea3c5ababe41d","commitMessage":"@@@Merge pull request #5134 from basil/improvements\n\nCode cleanup","date":"2021-01-03 01:20:57","modifiedFileCount":"88","status":"M","submitter":"Oleg Nenashev"},{"authorTime":"2020-03-23 17:55:26","codes":[{"authorDate":"2021-04-20 04:54:17","commitOrder":6,"curCode":"    @Test public void pendingsConsistenceAfterErrorDuringMaintain() throws IOException, ExecutionException, InterruptedException{\n        FreeStyleProject project1 = r.createFreeStyleProject();\n        FreeStyleProject project2 = r.createFreeStyleProject();\n        TopLevelItemDescriptor descriptor = new TopLevelItemDescriptor(FreeStyleProject.class){\n         @Override\n            public FreeStyleProject newInstance(ItemGroup parent, String name) {\n                return new FreeStyleProject(parent,name){\n                     @Override\n                    public Label getAssignedLabel(){\n                        throw new IllegalArgumentException(\"Test exception\"); \r\n                    }\n\n                    @Override\n                     public void save(){\n                         \r\n                     }\n            };\n        }\n        };\n        FreeStyleProject projectError = (FreeStyleProject) r.jenkins.createProject(descriptor, \"throw-error\");\n        project1.setAssignedLabel(r.jenkins.getSelfLabel());\n        project2.setAssignedLabel(r.jenkins.getSelfLabel());\n        project1.getBuildersList().add(new Shell(\"sleep 2\"));\n        project1.scheduleBuild2(0);\n        QueueTaskFuture<FreeStyleBuild> v = project2.scheduleBuild2(0);\n        projectError.scheduleBuild2(0);\n        Executor e = r.jenkins.toComputer().getExecutors().get(0);\n        Thread.sleep(2000);\n        while(project2.getLastBuild()==null){\n             if(!e.isAlive()){\n                    break; \r\n             }\n             if(e.isIdle()){\n                 assertTrue(\"Node went to idle before project had\" + project2.getDisplayName() + \" been started\", v.isDone());\n             }\n                Thread.sleep(1000);\n        }\n        if(project2.getLastBuild()!=null)\n            return;\n        Queue.getInstance().cancel(projectError); \r\n        while(!e.isIdle()){ \r\n            Thread.sleep(1000);\n        }\n        \r\n        List<Queue.BuildableItem> items = Queue.getInstance().getPendingItems();\n        for(Queue.BuildableItem item : items){\n            assertNotEquals(\"Project \" + project2.getDisplayName() + \" stuck in pendings\", item.task.getName(), project2.getName());\n        }\n    }\n","date":"2021-04-20 04:54:17","endLine":781,"groupId":"10480","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"pendingsConsistenceAfterErrorDuringMaintain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/51/8227d7112a9d034cc65989f5584cf1bbaa9062.src","preCode":"    @Test public void pendingsConsistenceAfterErrorDuringMaintain() throws IOException, ExecutionException, InterruptedException{\n        FreeStyleProject project1 = r.createFreeStyleProject();\n        FreeStyleProject project2 = r.createFreeStyleProject();\n        TopLevelItemDescriptor descriptor = new TopLevelItemDescriptor(FreeStyleProject.class){\n         @Override\n            public FreeStyleProject newInstance(ItemGroup parent, String name) {\n                return (FreeStyleProject) new FreeStyleProject(parent,name){\n                     @Override\n                    public Label getAssignedLabel(){\n                        throw new IllegalArgumentException(\"Test exception\"); \r\n                    }\n\n                    @Override\n                     public void save(){\n                         \r\n                     }\n            };\n        }\n        };\n        FreeStyleProject projectError = (FreeStyleProject) r.jenkins.createProject(descriptor, \"throw-error\");\n        project1.setAssignedLabel(r.jenkins.getSelfLabel());\n        project2.setAssignedLabel(r.jenkins.getSelfLabel());\n        project1.getBuildersList().add(new Shell(\"sleep 2\"));\n        project1.scheduleBuild2(0);\n        QueueTaskFuture<FreeStyleBuild> v = project2.scheduleBuild2(0);\n        projectError.scheduleBuild2(0);\n        Executor e = r.jenkins.toComputer().getExecutors().get(0);\n        Thread.sleep(2000);\n        while(project2.getLastBuild()==null){\n             if(!e.isAlive()){\n                    break; \r\n             }\n             if(e.isIdle()){\n                 assertTrue(\"Node went to idle before project had\" + project2.getDisplayName() + \" been started\", v.isDone());\n             }\n                Thread.sleep(1000);\n        }\n        if(project2.getLastBuild()!=null)\n            return;\n        Queue.getInstance().cancel(projectError); \r\n        while(!e.isIdle()){ \r\n            Thread.sleep(1000);\n        }\n        \r\n        List<Queue.BuildableItem> items = Queue.getInstance().getPendingItems();\n        for(Queue.BuildableItem item : items){\n            assertNotEquals(\"Project \" + project2.getDisplayName() + \" stuck in pendings\", item.task.getName(), project2.getName());\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/QueueTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":733,"status":"M"},{"authorDate":"2020-03-23 17:55:26","commitOrder":6,"curCode":"    private FreeStyleProject createBrokenProject() throws IOException {\n        TopLevelItemDescriptor descriptor = new TopLevelItemDescriptor(FreeStyleProject.class) {\n            @Override\n            public FreeStyleProject newInstance(ItemGroup parent, String name) {\n                return new FreeStyleProject(parent, name) {\n                    @Override\n                    public void save() {\n                        \r\n                    }\n                };\n            }\n        };\n        return (FreeStyleProject) j.jenkins.createProject(descriptor, \"throw-error\");\n    }\n","date":"2020-03-23 17:55:26","endLine":157,"groupId":"10480","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createBrokenProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/91/cde9f0cb854efc6eeade37b2c20dcc4139d6fb.src","preCode":"    private FreeStyleProject createBrokenProject() throws IOException {\n        TopLevelItemDescriptor descriptor = new TopLevelItemDescriptor(FreeStyleProject.class) {\n            @Override\n            public FreeStyleProject newInstance(ItemGroup parent, String name) {\n                return new FreeStyleProject(parent, name) {\n                    @Override\n                    public void save() {\n                        \r\n                    }\n                };\n            }\n        };\n        return (FreeStyleProject) j.jenkins.createProject(descriptor, \"throw-error\");\n    }\n","realPath":"test/src/test/java/jenkins/security/StackTraceSuppressionTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"N"}],"commitId":"0fd55bd6b50fcdf27368c6b771fb3d8363a24f83","commitMessage":"@@@Merge pull request #5419 from basil/subtypes\n\nUse declaring class as qualifier","date":"2021-04-20 04:54:17","modifiedFileCount":"43","status":"M","submitter":"Oleg Nenashev"}]
