[{"authorTime":"2016-04-09 02:40:17","codes":[{"authorDate":"2014-05-20 23:59:16","commitOrder":2,"curCode":"    @Test public void uploadHpi() throws Exception {\n        HtmlPage page = r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f = page.getFormByName(\"uploadPlugin\");\n        File dir = tmp.newFolder();\n        File plugin = new File(dir, \"legacy.hpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/legacy.hpi\"),plugin);\n        f.getInputByName(\"name\").setValueAttribute(plugin.getAbsolutePath());\n        r.submit(f);\n\n        \r\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/legacy.jpi\").exists() );\n    }\n","date":"2014-05-20 23:59:16","endLine":97,"groupId":"2730","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"uploadHpi","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a5/4f55e2c67eaa76057bbb28fdb42d7b89864061.src","preCode":"    @Test public void uploadHpi() throws Exception {\n        HtmlPage page = r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f = page.getFormByName(\"uploadPlugin\");\n        File dir = tmp.newFolder();\n        File plugin = new File(dir, \"legacy.hpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/legacy.hpi\"),plugin);\n        f.getInputByName(\"name\").setValueAttribute(plugin.getAbsolutePath());\n        r.submit(f);\n\n        \r\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/legacy.jpi\").exists() );\n    }\n","realPath":"test/src/test/java/hudson/PluginManagerTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"NB"},{"authorDate":"2016-04-09 02:40:17","commitOrder":2,"curCode":"    @Test public void uploadDependencyResolution() throws Exception {\n        PersistedList<UpdateSite> sites = r.jenkins.getUpdateCenter().getSites();\n        sites.clear();\n        URL url = PluginManagerTest.class.getResource(\"/plugins/upload-test-update-center.json\");\n        UpdateSite site = new UpdateSite(UpdateCenter.ID_DEFAULT, url.toString());\n        sites.add(site);\n\n        assertEquals(FormValidation.ok(), site.updateDirectly(false).get());\n        assertNotNull(site.getData());\n\n        \r\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"Parameterized-Remote-Trigger\"));\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n\n        HtmlPage page = r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f = page.getFormByName(\"uploadPlugin\");\n        File dir = tmp.newFolder();\n        File plugin = new File(dir, \"Parameterized-Remote-Trigger.hpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/Parameterized-Remote-Trigger.hpi\"),plugin);\n        f.getInputByName(\"name\").setValueAttribute(plugin.getAbsolutePath());\n        r.submit(f);\n\n        assertTrue(r.jenkins.getUpdateCenter().getJobs().size() > 0);\n\n        \r\n        boolean done = true;\n\tboolean passed = true;\n        do {\n            Thread.sleep(100);\n\t    done = true;\n    \t    for(UpdateCenterJob job : r.jenkins.getUpdateCenter().getJobs()) {\n                if(job instanceof UpdateCenter.DownloadJob) {\n\t\t    UpdateCenter.DownloadJob j = (UpdateCenter.DownloadJob)job;\n\t\t    assertFalse(j.status instanceof UpdateCenter.DownloadJob.Failure);\n                    done &= !(((j.status instanceof UpdateCenter.DownloadJob.Pending) || \n\t\t\t(j.status instanceof UpdateCenter.DownloadJob.Installing)));\n                }\t\t\n            }\n        } while(!done);\n\n        \r\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/Parameterized-Remote-Trigger.jpi\").exists() );\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/token-macro.jpi\").exists() );\n\n        \r\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"Parameterized-Remote-Trigger\"));\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n    }\n","date":"2016-04-09 02:40:17","endLine":428,"groupId":"2730","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"uploadDependencyResolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/42/847950cdfb12b6e82def5a834d188ae48d7589.src","preCode":"    @Test public void uploadDependencyResolution() throws Exception {\n        PersistedList<UpdateSite> sites = r.jenkins.getUpdateCenter().getSites();\n        sites.clear();\n        URL url = PluginManagerTest.class.getResource(\"/plugins/upload-test-update-center.json\");\n        UpdateSite site = new UpdateSite(UpdateCenter.ID_DEFAULT, url.toString());\n        sites.add(site);\n\n        assertEquals(FormValidation.ok(), site.updateDirectly(false).get());\n        assertNotNull(site.getData());\n\n        \r\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"Parameterized-Remote-Trigger\"));\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n\n        HtmlPage page = r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f = page.getFormByName(\"uploadPlugin\");\n        File dir = tmp.newFolder();\n        File plugin = new File(dir, \"Parameterized-Remote-Trigger.hpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/Parameterized-Remote-Trigger.hpi\"),plugin);\n        f.getInputByName(\"name\").setValueAttribute(plugin.getAbsolutePath());\n        r.submit(f);\n\n        assertTrue(r.jenkins.getUpdateCenter().getJobs().size() > 0);\n\n        \r\n        boolean done = true;\n\tboolean passed = true;\n        do {\n            Thread.sleep(100);\n\t    done = true;\n    \t    for(UpdateCenterJob job : r.jenkins.getUpdateCenter().getJobs()) {\n                if(job instanceof UpdateCenter.DownloadJob) {\n\t\t    UpdateCenter.DownloadJob j = (UpdateCenter.DownloadJob)job;\n\t\t    assertFalse(j.status instanceof UpdateCenter.DownloadJob.Failure);\n                    done &= !(((j.status instanceof UpdateCenter.DownloadJob.Pending) || \n\t\t\t(j.status instanceof UpdateCenter.DownloadJob.Installing)));\n                }\t\t\n            }\n        } while(!done);\n\n        \r\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/Parameterized-Remote-Trigger.jpi\").exists() );\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/token-macro.jpi\").exists() );\n\n        \r\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"Parameterized-Remote-Trigger\"));\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n    }\n","realPath":"test/src/test/java/hudson/PluginManagerTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"B"}],"commitId":"d5c508dece359f22799acaf84830be9e3a9e2ec3","commitMessage":"@@@Merge pull request #2239 from slide/master\n\n[FIXED JENKINS-15057] Add dependency resolution to manually uploaded plugins.","date":"2016-04-09 02:40:17","modifiedFileCount":"2","status":"M","submitter":"Daniel Beck"},{"authorTime":"2017-02-27 05:17:05","codes":[{"authorDate":"2014-05-20 23:59:16","commitOrder":3,"curCode":"    @Test public void uploadHpi() throws Exception {\n        HtmlPage page = r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f = page.getFormByName(\"uploadPlugin\");\n        File dir = tmp.newFolder();\n        File plugin = new File(dir, \"legacy.hpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/legacy.hpi\"),plugin);\n        f.getInputByName(\"name\").setValueAttribute(plugin.getAbsolutePath());\n        r.submit(f);\n\n        \r\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/legacy.jpi\").exists() );\n    }\n","date":"2014-05-20 23:59:16","endLine":97,"groupId":"2730","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"uploadHpi","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a5/4f55e2c67eaa76057bbb28fdb42d7b89864061.src","preCode":"    @Test public void uploadHpi() throws Exception {\n        HtmlPage page = r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f = page.getFormByName(\"uploadPlugin\");\n        File dir = tmp.newFolder();\n        File plugin = new File(dir, \"legacy.hpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/legacy.hpi\"),plugin);\n        f.getInputByName(\"name\").setValueAttribute(plugin.getAbsolutePath());\n        r.submit(f);\n\n        \r\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/legacy.jpi\").exists() );\n    }\n","realPath":"test/src/test/java/hudson/PluginManagerTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"N"},{"authorDate":"2017-02-27 05:17:05","commitOrder":3,"curCode":"    @Test public void uploadDependencyResolution() throws Exception {\n        assumeFalse(\"TODO: Implement this test for Windows\", Functions.isWindows());\n        PersistedList<UpdateSite> sites = r.jenkins.getUpdateCenter().getSites();\n        sites.clear();\n        URL url = PluginManagerTest.class.getResource(\"/plugins/upload-test-update-center.json\");\n        UpdateSite site = new UpdateSite(UpdateCenter.ID_DEFAULT, url.toString());\n        sites.add(site);\n\n        assertEquals(FormValidation.ok(), site.updateDirectly(false).get());\n        assertNotNull(site.getData());\n\n        \r\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"Parameterized-Remote-Trigger\"));\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n\n        HtmlPage page = r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f = page.getFormByName(\"uploadPlugin\");\n        File dir = tmp.newFolder();\n        File plugin = new File(dir, \"Parameterized-Remote-Trigger.hpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/Parameterized-Remote-Trigger.hpi\"),plugin);\n        f.getInputByName(\"name\").setValueAttribute(plugin.getAbsolutePath());\n        r.submit(f);\n\n        assertTrue(r.jenkins.getUpdateCenter().getJobs().size() > 0);\n\n        \r\n        boolean done = true;\n\tboolean passed = true;\n        do {\n            Thread.sleep(100);\n\t    done = true;\n    \t    for(UpdateCenterJob job : r.jenkins.getUpdateCenter().getJobs()) {\n                if(job instanceof UpdateCenter.DownloadJob) {\n\t\t    UpdateCenter.DownloadJob j = (UpdateCenter.DownloadJob)job;\n\t\t    assertFalse(j.status instanceof UpdateCenter.DownloadJob.Failure);\n                    done &= !(((j.status instanceof UpdateCenter.DownloadJob.Pending) || \n\t\t\t(j.status instanceof UpdateCenter.DownloadJob.Installing)));\n                }\t\t\n            }\n        } while(!done);\n\n        \r\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/Parameterized-Remote-Trigger.jpi\").exists() );\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/token-macro.jpi\").exists() );\n\n        \r\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"Parameterized-Remote-Trigger\"));\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n    }\n","date":"2017-02-27 05:17:05","endLine":519,"groupId":"2730","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"uploadDependencyResolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/7a/22d84971b41850fe44dd1dc05b5220da85d08d.src","preCode":"    @Test public void uploadDependencyResolution() throws Exception {\n        PersistedList<UpdateSite> sites = r.jenkins.getUpdateCenter().getSites();\n        sites.clear();\n        URL url = PluginManagerTest.class.getResource(\"/plugins/upload-test-update-center.json\");\n        UpdateSite site = new UpdateSite(UpdateCenter.ID_DEFAULT, url.toString());\n        sites.add(site);\n\n        assertEquals(FormValidation.ok(), site.updateDirectly(false).get());\n        assertNotNull(site.getData());\n\n        \r\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"Parameterized-Remote-Trigger\"));\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n\n        HtmlPage page = r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f = page.getFormByName(\"uploadPlugin\");\n        File dir = tmp.newFolder();\n        File plugin = new File(dir, \"Parameterized-Remote-Trigger.hpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/Parameterized-Remote-Trigger.hpi\"),plugin);\n        f.getInputByName(\"name\").setValueAttribute(plugin.getAbsolutePath());\n        r.submit(f);\n\n        assertTrue(r.jenkins.getUpdateCenter().getJobs().size() > 0);\n\n        \r\n        boolean done = true;\n\tboolean passed = true;\n        do {\n            Thread.sleep(100);\n\t    done = true;\n    \t    for(UpdateCenterJob job : r.jenkins.getUpdateCenter().getJobs()) {\n                if(job instanceof UpdateCenter.DownloadJob) {\n\t\t    UpdateCenter.DownloadJob j = (UpdateCenter.DownloadJob)job;\n\t\t    assertFalse(j.status instanceof UpdateCenter.DownloadJob.Failure);\n                    done &= !(((j.status instanceof UpdateCenter.DownloadJob.Pending) || \n\t\t\t(j.status instanceof UpdateCenter.DownloadJob.Installing)));\n                }\t\t\n            }\n        } while(!done);\n\n        \r\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/Parameterized-Remote-Trigger.jpi\").exists() );\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/token-macro.jpi\").exists() );\n\n        \r\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"Parameterized-Remote-Trigger\"));\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n    }\n","realPath":"test/src/test/java/hudson/PluginManagerTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":471,"status":"M"}],"commitId":"c63abe3e8cfcb71d27458bebe7752d54edaa2d49","commitMessage":"@@@Merge branch 'master' of github.com:jenkinsci/jenkins\n","date":"2017-02-27 05:17:05","modifiedFileCount":"23","status":"M","submitter":"Kohsuke Kawaguchi"},{"authorTime":"2021-06-14 23:45:34","codes":[{"authorDate":"2014-05-20 23:59:16","commitOrder":4,"curCode":"    @Test public void uploadHpi() throws Exception {\n        HtmlPage page = r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f = page.getFormByName(\"uploadPlugin\");\n        File dir = tmp.newFolder();\n        File plugin = new File(dir, \"legacy.hpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/legacy.hpi\"),plugin);\n        f.getInputByName(\"name\").setValueAttribute(plugin.getAbsolutePath());\n        r.submit(f);\n\n        \r\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/legacy.jpi\").exists() );\n    }\n","date":"2014-05-20 23:59:16","endLine":97,"groupId":"2730","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"uploadHpi","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a5/4f55e2c67eaa76057bbb28fdb42d7b89864061.src","preCode":"    @Test public void uploadHpi() throws Exception {\n        HtmlPage page = r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f = page.getFormByName(\"uploadPlugin\");\n        File dir = tmp.newFolder();\n        File plugin = new File(dir, \"legacy.hpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/legacy.hpi\"),plugin);\n        f.getInputByName(\"name\").setValueAttribute(plugin.getAbsolutePath());\n        r.submit(f);\n\n        \r\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/legacy.jpi\").exists() );\n    }\n","realPath":"test/src/test/java/hudson/PluginManagerTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"N"},{"authorDate":"2021-06-14 23:45:34","commitOrder":4,"curCode":"    @Test public void uploadDependencyResolution() throws Exception {\n        assumeFalse(\"TODO: Implement this test for Windows\", Functions.isWindows());\n        PersistedList<UpdateSite> sites = r.jenkins.getUpdateCenter().getSites();\n        sites.clear();\n        URL url = PluginManagerTest.class.getResource(\"/plugins/upload-test-update-center.json\");\n        UpdateSite site = new UpdateSite(UpdateCenter.ID_DEFAULT, url.toString());\n        sites.add(site);\n\n        assertEquals(FormValidation.ok(), site.updateDirectly(false).get());\n        assertNotNull(site.getData());\n\n        \r\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"Parameterized-Remote-Trigger\"));\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n\n        HtmlPage page = r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f = page.getFormByName(\"uploadPlugin\");\n        File dir = tmp.newFolder();\n        File plugin = new File(dir, \"Parameterized-Remote-Trigger.hpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/Parameterized-Remote-Trigger.hpi\"),plugin);\n        f.getInputByName(\"name\").setValueAttribute(plugin.getAbsolutePath());\n        r.submit(f);\n\n        assertTrue(r.jenkins.getUpdateCenter().getJobs().size() > 0);\n\n        \r\n        boolean done = true;\n\tboolean passed = true;\n        do {\n            Thread.sleep(100);\n\t    done = true;\n    \t    for(UpdateCenterJob job : r.jenkins.getUpdateCenter().getJobs()) {\n                if(job instanceof UpdateCenter.DownloadJob) {\n\t\t    UpdateCenter.DownloadJob j = (UpdateCenter.DownloadJob)job;\n\t\t    assertFalse(j.status instanceof UpdateCenter.DownloadJob.Failure);\n                    done &= !((j.status instanceof UpdateCenter.DownloadJob.Pending) || \n\t\t\t(j.status instanceof UpdateCenter.DownloadJob.Installing));\n                }\t\t\n            }\n        } while(!done);\n\n        \r\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/Parameterized-Remote-Trigger.jpi\").exists() );\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/token-macro.jpi\").exists() );\n\n        \r\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"Parameterized-Remote-Trigger\"));\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n    }\n","date":"2021-06-14 23:45:34","endLine":552,"groupId":"2730","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"uploadDependencyResolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/74/a07bb931ea496720b0b1ee2be8ba5a3720b9d9.src","preCode":"    @Test public void uploadDependencyResolution() throws Exception {\n        assumeFalse(\"TODO: Implement this test for Windows\", Functions.isWindows());\n        PersistedList<UpdateSite> sites = r.jenkins.getUpdateCenter().getSites();\n        sites.clear();\n        URL url = PluginManagerTest.class.getResource(\"/plugins/upload-test-update-center.json\");\n        UpdateSite site = new UpdateSite(UpdateCenter.ID_DEFAULT, url.toString());\n        sites.add(site);\n\n        assertEquals(FormValidation.ok(), site.updateDirectly(false).get());\n        assertNotNull(site.getData());\n\n        \r\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"Parameterized-Remote-Trigger\"));\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n\n        HtmlPage page = r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f = page.getFormByName(\"uploadPlugin\");\n        File dir = tmp.newFolder();\n        File plugin = new File(dir, \"Parameterized-Remote-Trigger.hpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/Parameterized-Remote-Trigger.hpi\"),plugin);\n        f.getInputByName(\"name\").setValueAttribute(plugin.getAbsolutePath());\n        r.submit(f);\n\n        assertTrue(r.jenkins.getUpdateCenter().getJobs().size() > 0);\n\n        \r\n        boolean done = true;\n\tboolean passed = true;\n        do {\n            Thread.sleep(100);\n\t    done = true;\n    \t    for(UpdateCenterJob job : r.jenkins.getUpdateCenter().getJobs()) {\n                if(job instanceof UpdateCenter.DownloadJob) {\n\t\t    UpdateCenter.DownloadJob j = (UpdateCenter.DownloadJob)job;\n\t\t    assertFalse(j.status instanceof UpdateCenter.DownloadJob.Failure);\n                    done &= !(((j.status instanceof UpdateCenter.DownloadJob.Pending) || \n\t\t\t(j.status instanceof UpdateCenter.DownloadJob.Installing)));\n                }\t\t\n            }\n        } while(!done);\n\n        \r\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/Parameterized-Remote-Trigger.jpi\").exists() );\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/token-macro.jpi\").exists() );\n\n        \r\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"Parameterized-Remote-Trigger\"));\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n    }\n","realPath":"test/src/test/java/hudson/PluginManagerTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":504,"status":"M"}],"commitId":"b8c20c6428ea99d2d32a09791b393451ad9beb7d","commitMessage":"@@@Fix violations of a handful of Error Prone checks (#5519)\n\nCo-authored-by: Daniel Beck <1831569+daniel-beck@users.noreply.github.com>","date":"2021-06-14 23:45:34","modifiedFileCount":"80","status":"M","submitter":"Basil Crow"},{"authorTime":"2021-06-25 16:23:37","codes":[{"authorDate":"2014-05-20 23:59:16","commitOrder":5,"curCode":"    @Test public void uploadHpi() throws Exception {\n        HtmlPage page = r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f = page.getFormByName(\"uploadPlugin\");\n        File dir = tmp.newFolder();\n        File plugin = new File(dir, \"legacy.hpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/legacy.hpi\"),plugin);\n        f.getInputByName(\"name\").setValueAttribute(plugin.getAbsolutePath());\n        r.submit(f);\n\n        \r\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/legacy.jpi\").exists() );\n    }\n","date":"2014-05-20 23:59:16","endLine":97,"groupId":"10329","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"uploadHpi","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a5/4f55e2c67eaa76057bbb28fdb42d7b89864061.src","preCode":"    @Test public void uploadHpi() throws Exception {\n        HtmlPage page = r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f = page.getFormByName(\"uploadPlugin\");\n        File dir = tmp.newFolder();\n        File plugin = new File(dir, \"legacy.hpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/legacy.hpi\"),plugin);\n        f.getInputByName(\"name\").setValueAttribute(plugin.getAbsolutePath());\n        r.submit(f);\n\n        \r\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/legacy.jpi\").exists() );\n    }\n","realPath":"test/src/test/java/hudson/PluginManagerTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"N"},{"authorDate":"2021-06-25 16:23:37","commitOrder":5,"curCode":"    @Test public void uploadDependencyResolution() throws Exception {\n        assumeFalse(\"TODO: Implement this test for Windows\", Functions.isWindows());\n        PersistedList<UpdateSite> sites = r.jenkins.getUpdateCenter().getSites();\n        sites.clear();\n        URL url = PluginManagerTest.class.getResource(\"/plugins/upload-test-update-center.json\");\n        UpdateSite site = new UpdateSite(UpdateCenter.ID_DEFAULT, url.toString());\n        sites.add(site);\n\n        assertEquals(FormValidation.ok(), site.updateDirectly(false).get());\n        assertNotNull(site.getData());\n\n        \r\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"Parameterized-Remote-Trigger\"));\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n\n        HtmlPage page = r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f = page.getFormByName(\"uploadPlugin\");\n        File dir = tmp.newFolder();\n        File plugin = new File(dir, \"Parameterized-Remote-Trigger.hpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/Parameterized-Remote-Trigger.hpi\"),plugin);\n        f.getInputByName(\"name\").setValueAttribute(plugin.getAbsolutePath());\n        r.submit(f);\n\n        assertTrue(r.jenkins.getUpdateCenter().getJobs().size() > 0);\n\n        \r\n        boolean done = true;\n\tboolean passed = true;\n        do {\n            Thread.sleep(100);\n\t    done = true;\n    \t    for(UpdateCenterJob job : r.jenkins.getUpdateCenter().getJobs()) {\n                if(job instanceof UpdateCenter.DownloadJob) {\n\t\t    UpdateCenter.DownloadJob j = (UpdateCenter.DownloadJob)job;\n\t\t    assertFalse(j.status instanceof UpdateCenter.DownloadJob.Failure);\n                    done &= !(j.status instanceof UpdateCenter.DownloadJob.Pending ||\n\t\t\tj.status instanceof UpdateCenter.DownloadJob.Installing);\n                }\t\t\n            }\n        } while(!done);\n\n        \r\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/Parameterized-Remote-Trigger.jpi\").exists() );\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/token-macro.jpi\").exists() );\n\n        \r\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"Parameterized-Remote-Trigger\"));\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n    }\n","date":"2021-06-25 16:23:37","endLine":552,"groupId":"10329","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"uploadDependencyResolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/34/54524468b91ab9dc8631e6b11d9c2dd6f706fb.src","preCode":"    @Test public void uploadDependencyResolution() throws Exception {\n        assumeFalse(\"TODO: Implement this test for Windows\", Functions.isWindows());\n        PersistedList<UpdateSite> sites = r.jenkins.getUpdateCenter().getSites();\n        sites.clear();\n        URL url = PluginManagerTest.class.getResource(\"/plugins/upload-test-update-center.json\");\n        UpdateSite site = new UpdateSite(UpdateCenter.ID_DEFAULT, url.toString());\n        sites.add(site);\n\n        assertEquals(FormValidation.ok(), site.updateDirectly(false).get());\n        assertNotNull(site.getData());\n\n        \r\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"Parameterized-Remote-Trigger\"));\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n\n        HtmlPage page = r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f = page.getFormByName(\"uploadPlugin\");\n        File dir = tmp.newFolder();\n        File plugin = new File(dir, \"Parameterized-Remote-Trigger.hpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/Parameterized-Remote-Trigger.hpi\"),plugin);\n        f.getInputByName(\"name\").setValueAttribute(plugin.getAbsolutePath());\n        r.submit(f);\n\n        assertTrue(r.jenkins.getUpdateCenter().getJobs().size() > 0);\n\n        \r\n        boolean done = true;\n\tboolean passed = true;\n        do {\n            Thread.sleep(100);\n\t    done = true;\n    \t    for(UpdateCenterJob job : r.jenkins.getUpdateCenter().getJobs()) {\n                if(job instanceof UpdateCenter.DownloadJob) {\n\t\t    UpdateCenter.DownloadJob j = (UpdateCenter.DownloadJob)job;\n\t\t    assertFalse(j.status instanceof UpdateCenter.DownloadJob.Failure);\n                    done &= !((j.status instanceof UpdateCenter.DownloadJob.Pending) || \n\t\t\t(j.status instanceof UpdateCenter.DownloadJob.Installing));\n                }\t\t\n            }\n        } while(!done);\n\n        \r\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/Parameterized-Remote-Trigger.jpi\").exists() );\n        assertTrue( new File(r.jenkins.getRootDir(),\"plugins/token-macro.jpi\").exists() );\n\n        \r\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"Parameterized-Remote-Trigger\"));\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n    }\n","realPath":"test/src/test/java/hudson/PluginManagerTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":504,"status":"M"}],"commitId":"bd7c823c2781d9282eab71a5e2967d386c629344","commitMessage":"@@@Remove unnecessary parentheses (#5576)\n\n","date":"2021-06-25 16:23:37","modifiedFileCount":"81","status":"M","submitter":"Basil Crow"}]
