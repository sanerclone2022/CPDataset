[{"authorTime":"2016-03-14 23:52:59","codes":[{"authorDate":"2015-10-13 04:22:10","commitOrder":2,"curCode":"    @Test public void reloadJobShouldSucceed() throws Exception {\n\n        FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(new Shell(\"echo 1\"));\n\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        changeProjectOnTheDisc(project, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, succeededSilently());\n\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n    }\n","date":"2015-10-13 04:22:10","endLine":113,"groupId":"9182","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"reloadJobShouldSucceed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/25/7a0c2b8033cfe73e87e1667b4e5df256eba0d1.src","preCode":"    @Test public void reloadJobShouldSucceed() throws Exception {\n\n        FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(new Shell(\"echo 1\"));\n\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        changeProjectOnTheDisc(project, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, succeededSilently());\n\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ReloadJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"NB"},{"authorDate":"2016-03-14 23:52:59","commitOrder":2,"curCode":"    @Test public void consoleShouldFailWithoutJobReadPermission() throws Exception {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job 'aProject'\"));\n    }\n","date":"2016-03-14 23:52:59","endLine":80,"groupId":"7626","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"consoleShouldFailWithoutJobReadPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f4/8f0fe1ed9b4b78cec0c7bcc0f23507c3dabd8c.src","preCode":"    @Test public void consoleShouldFailWithoutJobReadPermission() throws Exception {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job 'aProject'\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ConsoleCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"}],"commitId":"5a6c1ebb03b1a3418f7c43f0b26b4cfb089e8493","commitMessage":"@@@Merge pull request #2118 from pjanouse/JENKINS-32684\n\n[JENKINS-32684] Improved test coverage of CLI command 'console'","date":"2016-03-14 23:52:59","modifiedFileCount":"0","status":"M","submitter":"Daniel Beck"},{"authorTime":"2016-03-14 23:52:59","codes":[{"authorDate":"2017-02-27 05:17:05","commitOrder":3,"curCode":"    @Test public void reloadJobShouldSucceed() throws Exception {\n\n        FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        changeProjectOnTheDisc(project, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, succeededSilently());\n\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n    }\n","date":"2017-02-27 05:17:05","endLine":115,"groupId":"9182","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"reloadJobShouldSucceed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a0/12090070ed5b3ce47ba85325fae4697d9467f9.src","preCode":"    @Test public void reloadJobShouldSucceed() throws Exception {\n\n        FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(new Shell(\"echo 1\"));\n\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        changeProjectOnTheDisc(project, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, succeededSilently());\n\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ReloadJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2016-03-14 23:52:59","commitOrder":3,"curCode":"    @Test public void consoleShouldFailWithoutJobReadPermission() throws Exception {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job 'aProject'\"));\n    }\n","date":"2016-03-14 23:52:59","endLine":80,"groupId":"7626","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"consoleShouldFailWithoutJobReadPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f4/8f0fe1ed9b4b78cec0c7bcc0f23507c3dabd8c.src","preCode":"    @Test public void consoleShouldFailWithoutJobReadPermission() throws Exception {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job 'aProject'\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ConsoleCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"}],"commitId":"c63abe3e8cfcb71d27458bebe7752d54edaa2d49","commitMessage":"@@@Merge branch 'master' of github.com:jenkinsci/jenkins\n","date":"2017-02-27 05:17:05","modifiedFileCount":"23","status":"M","submitter":"Kohsuke Kawaguchi"},{"authorTime":"2016-03-14 23:52:59","codes":[{"authorDate":"2021-04-20 04:54:17","commitOrder":4,"curCode":"    @Test public void reloadJobShouldSucceed() throws Exception {\n\n        FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        changeProjectOnTheDisc(project, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Item.READ, Item.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, succeededSilently());\n\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n    }\n","date":"2021-04-20 04:54:17","endLine":115,"groupId":"10250","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"reloadJobShouldSucceed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5b/f90005c1bb72f746db4f8a52585881c455eca8.src","preCode":"    @Test public void reloadJobShouldSucceed() throws Exception {\n\n        FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        changeProjectOnTheDisc(project, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Job.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, succeededSilently());\n\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 2\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ReloadJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2016-03-14 23:52:59","commitOrder":4,"curCode":"    @Test public void consoleShouldFailWithoutJobReadPermission() throws Exception {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job 'aProject'\"));\n    }\n","date":"2016-03-14 23:52:59","endLine":80,"groupId":"10250","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"consoleShouldFailWithoutJobReadPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f4/8f0fe1ed9b4b78cec0c7bcc0f23507c3dabd8c.src","preCode":"    @Test public void consoleShouldFailWithoutJobReadPermission() throws Exception {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job 'aProject'\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ConsoleCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"}],"commitId":"0fd55bd6b50fcdf27368c6b771fb3d8363a24f83","commitMessage":"@@@Merge pull request #5419 from basil/subtypes\n\nUse declaring class as qualifier","date":"2021-04-20 04:54:17","modifiedFileCount":"43","status":"M","submitter":"Oleg Nenashev"}]
