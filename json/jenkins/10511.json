[{"authorTime":"2013-07-17 12:48:37","codes":[{"authorDate":"2013-07-17 12:48:37","commitOrder":1,"curCode":"    public void testCheckPermission() throws IOException {\n        User user = User.get(\"User\");\n        User user2 = User.get(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(Messages.Hudson_ViewName());\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);     \n        user.addProperty(property);\n        boolean ex = false;\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            ex = true;\n        }\n        assertTrue(\"Property should throw AccessDeniedException.\",ex);\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException - user should control of himself.\");\n        }\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException.\");\n        }\n    }\n","date":"2013-07-17 12:48:37","endLine":259,"groupId":"1499","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f0/18ff8d6b6794fac94aaf7eb881a33a8e3f807c.src","preCode":"    public void testCheckPermission() throws IOException {\n        User user = User.get(\"User\");\n        User user2 = User.get(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(Messages.Hudson_ViewName());\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);     \n        user.addProperty(property);\n        boolean ex = false;\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            ex = true;\n        }\n        assertTrue(\"Property should throw AccessDeniedException.\",ex);\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException - user should control of himself.\");\n        }\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException.\");\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewsPropertyTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"B"},{"authorDate":"2013-07-17 12:48:37","commitOrder":1,"curCode":"    public void testHasPermission() throws IOException {\n        User user = User.get(\"User\");\n        User user2 = User.get(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(Messages.Hudson_ViewName());\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);    \n        user.addProperty(property);\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        assertFalse(\"User User2 should not configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertTrue(\"User should control of himself.\", property.hasPermission(Permission.CONFIGURE));\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        assertTrue(\"User User2 should configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n    }\n","date":"2013-07-17 12:48:37","endLine":277,"groupId":"1500","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testHasPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f0/18ff8d6b6794fac94aaf7eb881a33a8e3f807c.src","preCode":"    public void testHasPermission() throws IOException {\n        User user = User.get(\"User\");\n        User user2 = User.get(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(Messages.Hudson_ViewName());\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);    \n        user.addProperty(property);\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        assertFalse(\"User User2 should not configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertTrue(\"User should control of himself.\", property.hasPermission(Permission.CONFIGURE));\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        assertTrue(\"User User2 should configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewsPropertyTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"B"}],"commitId":"09142f0a82eac00a105a5d5af9d629f6aa425146","commitMessage":"@@@Merge pull request #829 from lvotypko/MyViewsPropertyTest\n\nAdd tests for MyViewsProperty class","date":"2013-07-17 12:48:37","modifiedFileCount":"0","status":"B","submitter":"Kohsuke Kawaguchi"},{"authorTime":"2014-03-18 00:33:48","codes":[{"authorDate":"2014-03-18 00:33:48","commitOrder":2,"curCode":"    public void testCheckPermission() throws IOException {\n        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());\n        User user = User.get(\"User\");\n        User user2 = User.get(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(Messages.Hudson_ViewName());\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);     \n        user.addProperty(property);\n        boolean ex = false;\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            ex = true;\n        }\n        assertTrue(\"Property should throw AccessDeniedException.\",ex);\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException - user should control of himself.\");\n        }\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException.\");\n        }\n    }\n","date":"2014-03-18 00:33:48","endLine":260,"groupId":"1499","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/4c/94f1bd50a51e7fb951b90f55ec27cf2f3078ee.src","preCode":"    public void testCheckPermission() throws IOException {\n        User user = User.get(\"User\");\n        User user2 = User.get(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(Messages.Hudson_ViewName());\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);     \n        user.addProperty(property);\n        boolean ex = false;\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            ex = true;\n        }\n        assertTrue(\"Property should throw AccessDeniedException.\",ex);\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException - user should control of himself.\");\n        }\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException.\");\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewsPropertyTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"M"},{"authorDate":"2014-03-18 00:33:48","commitOrder":2,"curCode":"    public void testHasPermission() throws IOException {\n        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());\n        User user = User.get(\"User\");\n        User user2 = User.get(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(Messages.Hudson_ViewName());\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);    \n        user.addProperty(property);\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        assertFalse(\"User User2 should not configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertTrue(\"User should control of himself.\", property.hasPermission(Permission.CONFIGURE));\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        assertTrue(\"User User2 should configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n    }\n","date":"2014-03-18 00:33:48","endLine":279,"groupId":"1500","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testHasPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/4c/94f1bd50a51e7fb951b90f55ec27cf2f3078ee.src","preCode":"    public void testHasPermission() throws IOException {\n        User user = User.get(\"User\");\n        User user2 = User.get(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(Messages.Hudson_ViewName());\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);    \n        user.addProperty(property);\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        assertFalse(\"User User2 should not configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertTrue(\"User should control of himself.\", property.hasPermission(Permission.CONFIGURE));\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        assertTrue(\"User User2 should configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewsPropertyTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"}],"commitId":"db8d6508aaa04e1f56d5c0d36dd41a1995d7f464","commitMessage":"@@@Merge branch 'master' into DownloadSettings-JENKINS-19081\n","date":"2014-03-18 00:33:48","modifiedFileCount":"38","status":"M","submitter":"Jesse Glick"},{"authorTime":"2016-12-12 23:13:46","codes":[{"authorDate":"2016-12-12 23:13:46","commitOrder":3,"curCode":"    public void testCheckPermission() throws IOException {\n        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());\n        User user = User.get(\"User\");\n        User user2 = User.get(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);     \n        user.addProperty(property);\n        boolean ex = false;\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            ex = true;\n        }\n        assertTrue(\"Property should throw AccessDeniedException.\",ex);\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException - user should control of himself.\");\n        }\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException.\");\n        }\n    }\n","date":"2016-12-12 23:13:46","endLine":261,"groupId":"1499","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/1a/bfcacd35209edd2b3faf45b7a9638825e24f3a.src","preCode":"    public void testCheckPermission() throws IOException {\n        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());\n        User user = User.get(\"User\");\n        User user2 = User.get(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(Messages.Hudson_ViewName());\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);     \n        user.addProperty(property);\n        boolean ex = false;\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            ex = true;\n        }\n        assertTrue(\"Property should throw AccessDeniedException.\",ex);\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException - user should control of himself.\");\n        }\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException.\");\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewsPropertyTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"},{"authorDate":"2016-12-12 23:13:46","commitOrder":3,"curCode":"    public void testHasPermission() throws IOException {\n        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());\n        User user = User.get(\"User\");\n        User user2 = User.get(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);    \n        user.addProperty(property);\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        assertFalse(\"User User2 should not configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertTrue(\"User should control of himself.\", property.hasPermission(Permission.CONFIGURE));\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        assertTrue(\"User User2 should configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n    }\n","date":"2016-12-12 23:13:46","endLine":280,"groupId":"1500","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testHasPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/1a/bfcacd35209edd2b3faf45b7a9638825e24f3a.src","preCode":"    public void testHasPermission() throws IOException {\n        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());\n        User user = User.get(\"User\");\n        User user2 = User.get(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(Messages.Hudson_ViewName());\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);    \n        user.addProperty(property);\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        assertFalse(\"User User2 should not configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertTrue(\"User should control of himself.\", property.hasPermission(Permission.CONFIGURE));\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        assertTrue(\"User User2 should configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewsPropertyTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"M"}],"commitId":"e18b34caafe67ecbc6d675aeab0bff8d434cc459","commitMessage":"@@@Merge pull request #2603 from stephenc/jenkins-39300\n\n[JENKINS-39300] View.getDisplayName() is ignored when rendering tabs","date":"2016-12-12 23:13:46","modifiedFileCount":"15","status":"M","submitter":"Stephen Connolly"},{"authorTime":"2020-11-07 02:30:25","codes":[{"authorDate":"2020-11-07 02:30:25","commitOrder":4,"curCode":"    public void testCheckPermission() throws IOException {\n        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());\n        User user = User.get(\"User\");\n        User user2 = User.get(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);     \n        user.addProperty(property);\n        boolean ex = false;\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate2());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            ex = true;\n        }\n        assertTrue(\"Property should throw AccessDeniedException.\",ex);\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException - user should control of himself.\");\n        }\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate2());\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException.\");\n        }\n    }\n","date":"2020-11-07 02:30:25","endLine":276,"groupId":"709","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/0d/b80806bda6bb0271eba3942b0689dde1abe576.src","preCode":"    public void testCheckPermission() throws IOException {\n        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());\n        User user = User.get(\"User\");\n        User user2 = User.get(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);     \n        user.addProperty(property);\n        boolean ex = false;\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            ex = true;\n        }\n        assertTrue(\"Property should throw AccessDeniedException.\",ex);\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException - user should control of himself.\");\n        }\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException.\");\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewsPropertyTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2020-11-07 02:30:25","commitOrder":4,"curCode":"    public void testHasPermission() throws IOException {\n        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());\n        User user = User.get(\"User\");\n        User user2 = User.get(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);    \n        user.addProperty(property);\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate2());\n        assertFalse(\"User User2 should not configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertTrue(\"User should control of himself.\", property.hasPermission(Permission.CONFIGURE));\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        assertTrue(\"User User2 should configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n    }\n","date":"2020-11-07 02:30:25","endLine":295,"groupId":"708","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testHasPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/0d/b80806bda6bb0271eba3942b0689dde1abe576.src","preCode":"    public void testHasPermission() throws IOException {\n        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());\n        User user = User.get(\"User\");\n        User user2 = User.get(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);    \n        user.addProperty(property);\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate());\n        assertFalse(\"User User2 should not configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertTrue(\"User should control of himself.\", property.hasPermission(Permission.CONFIGURE));\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        assertTrue(\"User User2 should configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewsPropertyTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"a9ca5ef3d4c97937636bf3c585f4232514279b14","commitMessage":"@@@[JEP-227] Replace Acegi Security with Spring Security & upgrade Spring Framework (#4848)\n\nReplacing Acegi Security with Spring Security\n\nCo-authored-by: Tim Jacomb <timjacomb1+github@gmail.com>\nCo-authored-by: James Nord <jtnord@users.noreply.github.com>","date":"2020-11-07 02:30:25","modifiedFileCount":"149","status":"M","submitter":"Jesse Glick"},{"authorTime":"2021-04-12 01:49:34","codes":[{"authorDate":"2021-04-12 01:49:34","commitOrder":5,"curCode":"    public void testCheckPermission() throws IOException {\n        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());\n        User user = User.getOrCreateByIdOrFullName(\"User\");\n        User user2 = User.getOrCreateByIdOrFullName(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);     \n        user.addProperty(property);\n        boolean ex = false;\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate2());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            ex = true;\n        }\n        assertTrue(\"Property should throw AccessDeniedException.\",ex);\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException - user should control of himself.\");\n        }\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate2());\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException.\");\n        }\n    }\n","date":"2021-04-12 01:49:34","endLine":276,"groupId":"10511","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/71/06f352de62f6d151b04ab811b77bab78d3e19a.src","preCode":"    public void testCheckPermission() throws IOException {\n        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());\n        User user = User.get(\"User\");\n        User user2 = User.get(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);     \n        user.addProperty(property);\n        boolean ex = false;\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate2());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            ex = true;\n        }\n        assertTrue(\"Property should throw AccessDeniedException.\",ex);\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException - user should control of himself.\");\n        }\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate2());\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        try{\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch(AccessDeniedException e){\n            fail(\"Property should not throw AccessDeniedException.\");\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewsPropertyTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2021-04-12 01:49:34","commitOrder":5,"curCode":"    public void testHasPermission() throws IOException {\n        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());\n        User user = User.getOrCreateByIdOrFullName(\"User\");\n        User user2 = User.getOrCreateByIdOrFullName(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);    \n        user.addProperty(property);\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate2());\n        assertFalse(\"User User2 should not configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertTrue(\"User should control of himself.\", property.hasPermission(Permission.CONFIGURE));\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        assertTrue(\"User User2 should configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n    }\n","date":"2021-04-12 01:49:34","endLine":295,"groupId":"10511","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testHasPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/71/06f352de62f6d151b04ab811b77bab78d3e19a.src","preCode":"    public void testHasPermission() throws IOException {\n        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());\n        User user = User.get(\"User\");\n        User user2 = User.get(\"User2\");\n        MyViewsProperty property = new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);    \n        user.addProperty(property);\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate2());\n        assertFalse(\"User User2 should not configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertTrue(\"User should control of himself.\", property.hasPermission(Permission.CONFIGURE));\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        assertTrue(\"User User2 should configure permission for user User\",property.hasPermission(Permission.CONFIGURE));\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewsPropertyTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"096a1ca6fb92a98a80ca7f1e3589e237285d3aa7","commitMessage":"@@@Merge pull request #5389 from StefanSpieker/minor_deprecation_fixes\n\nfixed some deprecation warnings","date":"2021-04-12 01:49:34","modifiedFileCount":"23","status":"M","submitter":"Mark Waite"}]
