[{"authorTime":"2018-11-23 07:21:56","codes":[{"authorDate":"2018-06-24 05:20:44","commitOrder":2,"curCode":"    public void roundtrip() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        User u = User.getById(\"foo\", true);\n        \n        ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);\n        assertNotNull(t.getTokenStore());\n        assertNotNull(t.getTokenStats());\n        \n        \r\n        WebClient wc = j.createWebClient().withBasicCredentials(u.getId());\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        \n        final String TOKEN_NAME = \"New Token Name\";\n        \n        WebRequest request = new WebRequest(new URL(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken\"), HttpMethod.POST);\n        request.setRequestParameters(Arrays.asList(new NameValuePair(\"newTokenName\", TOKEN_NAME)));\n        \n        Page page = wc.getPage(request);\n        assertEquals(200, page.getWebResponse().getStatusCode());\n        String responseContent = page.getWebResponse().getContentAsString();\n        JSONObject jsonObject = JSONObject.fromObject(responseContent);\n        JSONObject jsonData = jsonObject.getJSONObject(\"data\");\n        String tokenName = jsonData.getString(\"tokenName\");\n        String tokenValue = jsonData.getString(\"tokenValue\");\n        String tokenUuid = jsonData.getString(\"tokenUuid\");\n        \n        assertEquals(TOKEN_NAME, tokenName);\n        \n        WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue);\n        checkUserIsConnected(restWc, u.getId());\n        \n        HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, config.getWebResponse().getStatusCode());\n        assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid));\n        assertThat(config.getWebResponse().getContentAsString(), containsString(tokenName));\n        \n        final int NUM_CALL_WITH_TOKEN = 5;\n        \r\n        for (int i = 1; i < NUM_CALL_WITH_TOKEN; i++) {\n            restWc.goToXml(\"whoAmI/api/xml\");\n        }\n        \n        HtmlPage configWithStats = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, configWithStats.getWebResponse().getStatusCode());\n        HtmlSpan useCounterSpan = configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n        assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n        \n        revokeToken(wc, u.getId(), tokenUuid);\n        \n        \r\n        checkUserIsNotConnected(restWc);\n        \n        HtmlPage configWithoutToken = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, configWithoutToken.getWebResponse().getStatusCode());\n        assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenUuid)));\n        assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenName)));\n    }\n","date":"2018-06-24 05:20:44","endLine":117,"groupId":"5389","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"roundtrip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e1/b8dd6674d606d3362cd35992bbe20f80725530.src","preCode":"    public void roundtrip() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        User u = User.getById(\"foo\", true);\n        \n        ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);\n        assertNotNull(t.getTokenStore());\n        assertNotNull(t.getTokenStats());\n        \n        \r\n        WebClient wc = j.createWebClient().withBasicCredentials(u.getId());\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        \n        final String TOKEN_NAME = \"New Token Name\";\n        \n        WebRequest request = new WebRequest(new URL(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken\"), HttpMethod.POST);\n        request.setRequestParameters(Arrays.asList(new NameValuePair(\"newTokenName\", TOKEN_NAME)));\n        \n        Page page = wc.getPage(request);\n        assertEquals(200, page.getWebResponse().getStatusCode());\n        String responseContent = page.getWebResponse().getContentAsString();\n        JSONObject jsonObject = JSONObject.fromObject(responseContent);\n        JSONObject jsonData = jsonObject.getJSONObject(\"data\");\n        String tokenName = jsonData.getString(\"tokenName\");\n        String tokenValue = jsonData.getString(\"tokenValue\");\n        String tokenUuid = jsonData.getString(\"tokenUuid\");\n        \n        assertEquals(TOKEN_NAME, tokenName);\n        \n        WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue);\n        checkUserIsConnected(restWc, u.getId());\n        \n        HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, config.getWebResponse().getStatusCode());\n        assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid));\n        assertThat(config.getWebResponse().getContentAsString(), containsString(tokenName));\n        \n        final int NUM_CALL_WITH_TOKEN = 5;\n        \r\n        for (int i = 1; i < NUM_CALL_WITH_TOKEN; i++) {\n            restWc.goToXml(\"whoAmI/api/xml\");\n        }\n        \n        HtmlPage configWithStats = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, configWithStats.getWebResponse().getStatusCode());\n        HtmlSpan useCounterSpan = configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n        assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n        \n        revokeToken(wc, u.getId(), tokenUuid);\n        \n        \r\n        checkUserIsNotConnected(restWc);\n        \n        HtmlPage configWithoutToken = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, configWithoutToken.getWebResponse().getStatusCode());\n        assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenUuid)));\n        assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenName)));\n    }\n","realPath":"test/src/test/java/jenkins/security/apitoken/ApiTokenStatsTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"NB"},{"authorDate":"2018-11-23 07:21:56","commitOrder":2,"curCode":"    public void roundtripWithRestart() throws Exception {\n        AtomicReference<String> tokenValue = new AtomicReference<>();\n        AtomicReference<String> tokenUuid = new AtomicReference<>();\n        String TOKEN_NAME = \"New Token Name\";\n        int NUM_CALL_WITH_TOKEN = 5;\n        \n        rr.addStep(new Statement() {\n               @Override\n               public void evaluate() throws Throwable {\n                   JenkinsRule j = rr.j;\n                   j.jenkins.setCrumbIssuer(null);\n                   j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n                   \n                   User u = User.getById(\"foo\", true);\n\n                   ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);\n                   assertNotNull(t.getTokenStore());\n                   assertNotNull(t.getTokenStats());\n\n                   \r\n                   WebClient wc = j.createWebClient().withBasicCredentials(u.getId());\n                   wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n                   WebRequest request = new WebRequest(new URL(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken\"), HttpMethod.POST);\n                   request.setRequestParameters(Arrays.asList(new NameValuePair(\"newTokenName\", TOKEN_NAME)));\n\n                   Page page = wc.getPage(request);\n                   assertEquals(200, page.getWebResponse().getStatusCode());\n                   String responseContent = page.getWebResponse().getContentAsString();\n                   JSONObject jsonObject = JSONObject.fromObject(responseContent);\n                   JSONObject jsonData = jsonObject.getJSONObject(\"data\");\n                   String tokenName = jsonData.getString(\"tokenName\");\n                   tokenValue.set(jsonData.getString(\"tokenValue\"));\n                   tokenUuid.set(jsonData.getString(\"tokenUuid\"));\n\n                   assertEquals(TOKEN_NAME, tokenName);\n\n                   WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue.get());\n                   checkUserIsConnected(restWc, u.getId());\n\n                   HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n                   assertEquals(200, config.getWebResponse().getStatusCode());\n                   assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid.get()));\n                   assertThat(config.getWebResponse().getContentAsString(), containsString(tokenName));\n\n                   \r\n                   for (int i = 1; i < NUM_CALL_WITH_TOKEN; i++) {\n                       restWc.goToXml(\"whoAmI/api/xml\");\n                   }\n\n                   HtmlPage configWithStats = wc.goTo(u.getUrl() + \"/configure\");\n                   assertEquals(200, configWithStats.getWebResponse().getStatusCode());\n                   HtmlSpan useCounterSpan = configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n                   assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n\n                   File apiTokenStatsFile = new File(u.getUserFolder(), \"apiTokenStats.xml\");\n                   assertTrue(\"apiTokenStats.xml file should exist\", apiTokenStatsFile.exists());\n               }\n           });\n    \n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j = rr.j;\n                j.jenkins.setCrumbIssuer(null);\n                \n                User u = User.getById(\"foo\", false);\n                assertNotNull(u);\n    \n                WebClient wc = j.createWebClient().login(u.getId());\n                checkUserIsConnected(wc, u.getId());\n    \n                HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n                assertEquals(200, config.getWebResponse().getStatusCode());\n                assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid.get()));\n                assertThat(config.getWebResponse().getContentAsString(), containsString(TOKEN_NAME));\n                HtmlSpan useCounterSpan = config.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n                assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n                \n                revokeToken(wc, u.getId(), tokenUuid.get());\n                \n                \r\n                WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue.get());\n                checkUserIsNotConnected(restWc);\n                \n                HtmlPage configWithoutToken = wc.goTo(u.getUrl() + \"/configure\");\n                assertEquals(200, configWithoutToken.getWebResponse().getStatusCode());\n                assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenUuid.get())));\n                assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(TOKEN_NAME)));\n            }\n        });\n    }\n","date":"2018-11-23 07:21:56","endLine":160,"groupId":"1457","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"roundtripWithRestart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/b2/f322a171d2dbf01fa89752275d2ccd1b631e66.src","preCode":"    public void roundtripWithRestart() throws Exception {\n        AtomicReference<String> tokenValue = new AtomicReference<>();\n        AtomicReference<String> tokenUuid = new AtomicReference<>();\n        String TOKEN_NAME = \"New Token Name\";\n        int NUM_CALL_WITH_TOKEN = 5;\n        \n        rr.addStep(new Statement() {\n               @Override\n               public void evaluate() throws Throwable {\n                   JenkinsRule j = rr.j;\n                   j.jenkins.setCrumbIssuer(null);\n                   j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n                   \n                   User u = User.getById(\"foo\", true);\n\n                   ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);\n                   assertNotNull(t.getTokenStore());\n                   assertNotNull(t.getTokenStats());\n\n                   \r\n                   WebClient wc = j.createWebClient().withBasicCredentials(u.getId());\n                   wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n                   WebRequest request = new WebRequest(new URL(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken\"), HttpMethod.POST);\n                   request.setRequestParameters(Arrays.asList(new NameValuePair(\"newTokenName\", TOKEN_NAME)));\n\n                   Page page = wc.getPage(request);\n                   assertEquals(200, page.getWebResponse().getStatusCode());\n                   String responseContent = page.getWebResponse().getContentAsString();\n                   JSONObject jsonObject = JSONObject.fromObject(responseContent);\n                   JSONObject jsonData = jsonObject.getJSONObject(\"data\");\n                   String tokenName = jsonData.getString(\"tokenName\");\n                   tokenValue.set(jsonData.getString(\"tokenValue\"));\n                   tokenUuid.set(jsonData.getString(\"tokenUuid\"));\n\n                   assertEquals(TOKEN_NAME, tokenName);\n\n                   WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue.get());\n                   checkUserIsConnected(restWc, u.getId());\n\n                   HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n                   assertEquals(200, config.getWebResponse().getStatusCode());\n                   assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid.get()));\n                   assertThat(config.getWebResponse().getContentAsString(), containsString(tokenName));\n\n                   \r\n                   for (int i = 1; i < NUM_CALL_WITH_TOKEN; i++) {\n                       restWc.goToXml(\"whoAmI/api/xml\");\n                   }\n\n                   HtmlPage configWithStats = wc.goTo(u.getUrl() + \"/configure\");\n                   assertEquals(200, configWithStats.getWebResponse().getStatusCode());\n                   HtmlSpan useCounterSpan = configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n                   assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n\n                   File apiTokenStatsFile = new File(u.getUserFolder(), \"apiTokenStats.xml\");\n                   assertTrue(\"apiTokenStats.xml file should exist\", apiTokenStatsFile.exists());\n               }\n           });\n    \n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j = rr.j;\n                j.jenkins.setCrumbIssuer(null);\n                \n                User u = User.getById(\"foo\", false);\n                assertNotNull(u);\n    \n                WebClient wc = j.createWebClient().login(u.getId());\n                checkUserIsConnected(wc, u.getId());\n    \n                HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n                assertEquals(200, config.getWebResponse().getStatusCode());\n                assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid.get()));\n                assertThat(config.getWebResponse().getContentAsString(), containsString(TOKEN_NAME));\n                HtmlSpan useCounterSpan = config.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n                assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n                \n                revokeToken(wc, u.getId(), tokenUuid.get());\n                \n                \r\n                WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue.get());\n                checkUserIsNotConnected(restWc);\n                \n                HtmlPage configWithoutToken = wc.goTo(u.getUrl() + \"/configure\");\n                assertEquals(200, configWithoutToken.getWebResponse().getStatusCode());\n                assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenUuid.get())));\n                assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(TOKEN_NAME)));\n            }\n        });\n    }\n","realPath":"test/src/test/java/jenkins/security/apitoken/ApiTokenStatsRestartTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"}],"commitId":"dfa84afa431482552850900bbe9a4b88209986fe","commitMessage":"@@@Merge branch 'security-stable-2.150' into security-master\n","date":"2018-11-23 07:21:56","modifiedFileCount":"5","status":"M","submitter":"Daniel Beck"},{"authorTime":"2018-11-23 07:21:56","codes":[{"authorDate":"2019-02-08 13:43:50","commitOrder":3,"curCode":"    public void roundtrip() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        User u = User.getById(\"foo\", true);\n        \n        ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);\n        assertNotNull(t.getTokenStore());\n        assertNotNull(t.getTokenStats());\n        \n        \r\n        WebClient wc = j.createWebClient()\n                .withBasicCredentials(u.getId())\n                .withThrowExceptionOnFailingStatusCode(false);\n        \n        final String TOKEN_NAME = \"New Token Name\";\n        \n        WebRequest request = new WebRequest(new URL(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken\"), HttpMethod.POST);\n        request.setRequestParameters(Arrays.asList(new NameValuePair(\"newTokenName\", TOKEN_NAME)));\n        \n        Page page = wc.getPage(request);\n        assertEquals(200, page.getWebResponse().getStatusCode());\n        String responseContent = page.getWebResponse().getContentAsString();\n        JSONObject jsonObject = JSONObject.fromObject(responseContent);\n        JSONObject jsonData = jsonObject.getJSONObject(\"data\");\n        String tokenName = jsonData.getString(\"tokenName\");\n        String tokenValue = jsonData.getString(\"tokenValue\");\n        String tokenUuid = jsonData.getString(\"tokenUuid\");\n        \n        assertEquals(TOKEN_NAME, tokenName);\n        \n        WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue);\n        checkUserIsConnected(restWc, u.getId());\n        \n        HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, config.getWebResponse().getStatusCode());\n        assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid));\n        assertThat(config.getWebResponse().getContentAsString(), containsString(tokenName));\n        \n        final int NUM_CALL_WITH_TOKEN = 5;\n        \r\n        for (int i = 1; i < NUM_CALL_WITH_TOKEN; i++) {\n            restWc.goToXml(\"whoAmI/api/xml\");\n        }\n        \n        HtmlPage configWithStats = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, configWithStats.getWebResponse().getStatusCode());\n        HtmlSpan useCounterSpan = configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n        assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n        \n        revokeToken(wc, u.getId(), tokenUuid);\n        \n        \r\n        checkUserIsNotConnected(restWc);\n        \n        HtmlPage configWithoutToken = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, configWithoutToken.getWebResponse().getStatusCode());\n        assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenUuid)));\n        assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenName)));\n    }\n","date":"2019-02-08 13:43:50","endLine":118,"groupId":"5389","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"roundtrip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/c4/36ceb38fde861957c17d1e5951a41b9c47fdd6.src","preCode":"    public void roundtrip() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        User u = User.getById(\"foo\", true);\n        \n        ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);\n        assertNotNull(t.getTokenStore());\n        assertNotNull(t.getTokenStats());\n        \n        \r\n        WebClient wc = j.createWebClient().withBasicCredentials(u.getId());\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        \n        final String TOKEN_NAME = \"New Token Name\";\n        \n        WebRequest request = new WebRequest(new URL(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken\"), HttpMethod.POST);\n        request.setRequestParameters(Arrays.asList(new NameValuePair(\"newTokenName\", TOKEN_NAME)));\n        \n        Page page = wc.getPage(request);\n        assertEquals(200, page.getWebResponse().getStatusCode());\n        String responseContent = page.getWebResponse().getContentAsString();\n        JSONObject jsonObject = JSONObject.fromObject(responseContent);\n        JSONObject jsonData = jsonObject.getJSONObject(\"data\");\n        String tokenName = jsonData.getString(\"tokenName\");\n        String tokenValue = jsonData.getString(\"tokenValue\");\n        String tokenUuid = jsonData.getString(\"tokenUuid\");\n        \n        assertEquals(TOKEN_NAME, tokenName);\n        \n        WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue);\n        checkUserIsConnected(restWc, u.getId());\n        \n        HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, config.getWebResponse().getStatusCode());\n        assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid));\n        assertThat(config.getWebResponse().getContentAsString(), containsString(tokenName));\n        \n        final int NUM_CALL_WITH_TOKEN = 5;\n        \r\n        for (int i = 1; i < NUM_CALL_WITH_TOKEN; i++) {\n            restWc.goToXml(\"whoAmI/api/xml\");\n        }\n        \n        HtmlPage configWithStats = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, configWithStats.getWebResponse().getStatusCode());\n        HtmlSpan useCounterSpan = configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n        assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n        \n        revokeToken(wc, u.getId(), tokenUuid);\n        \n        \r\n        checkUserIsNotConnected(restWc);\n        \n        HtmlPage configWithoutToken = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, configWithoutToken.getWebResponse().getStatusCode());\n        assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenUuid)));\n        assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenName)));\n    }\n","realPath":"test/src/test/java/jenkins/security/apitoken/ApiTokenStatsTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2018-11-23 07:21:56","commitOrder":3,"curCode":"    public void roundtripWithRestart() throws Exception {\n        AtomicReference<String> tokenValue = new AtomicReference<>();\n        AtomicReference<String> tokenUuid = new AtomicReference<>();\n        String TOKEN_NAME = \"New Token Name\";\n        int NUM_CALL_WITH_TOKEN = 5;\n        \n        rr.addStep(new Statement() {\n               @Override\n               public void evaluate() throws Throwable {\n                   JenkinsRule j = rr.j;\n                   j.jenkins.setCrumbIssuer(null);\n                   j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n                   \n                   User u = User.getById(\"foo\", true);\n\n                   ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);\n                   assertNotNull(t.getTokenStore());\n                   assertNotNull(t.getTokenStats());\n\n                   \r\n                   WebClient wc = j.createWebClient().withBasicCredentials(u.getId());\n                   wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n                   WebRequest request = new WebRequest(new URL(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken\"), HttpMethod.POST);\n                   request.setRequestParameters(Arrays.asList(new NameValuePair(\"newTokenName\", TOKEN_NAME)));\n\n                   Page page = wc.getPage(request);\n                   assertEquals(200, page.getWebResponse().getStatusCode());\n                   String responseContent = page.getWebResponse().getContentAsString();\n                   JSONObject jsonObject = JSONObject.fromObject(responseContent);\n                   JSONObject jsonData = jsonObject.getJSONObject(\"data\");\n                   String tokenName = jsonData.getString(\"tokenName\");\n                   tokenValue.set(jsonData.getString(\"tokenValue\"));\n                   tokenUuid.set(jsonData.getString(\"tokenUuid\"));\n\n                   assertEquals(TOKEN_NAME, tokenName);\n\n                   WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue.get());\n                   checkUserIsConnected(restWc, u.getId());\n\n                   HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n                   assertEquals(200, config.getWebResponse().getStatusCode());\n                   assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid.get()));\n                   assertThat(config.getWebResponse().getContentAsString(), containsString(tokenName));\n\n                   \r\n                   for (int i = 1; i < NUM_CALL_WITH_TOKEN; i++) {\n                       restWc.goToXml(\"whoAmI/api/xml\");\n                   }\n\n                   HtmlPage configWithStats = wc.goTo(u.getUrl() + \"/configure\");\n                   assertEquals(200, configWithStats.getWebResponse().getStatusCode());\n                   HtmlSpan useCounterSpan = configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n                   assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n\n                   File apiTokenStatsFile = new File(u.getUserFolder(), \"apiTokenStats.xml\");\n                   assertTrue(\"apiTokenStats.xml file should exist\", apiTokenStatsFile.exists());\n               }\n           });\n    \n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j = rr.j;\n                j.jenkins.setCrumbIssuer(null);\n                \n                User u = User.getById(\"foo\", false);\n                assertNotNull(u);\n    \n                WebClient wc = j.createWebClient().login(u.getId());\n                checkUserIsConnected(wc, u.getId());\n    \n                HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n                assertEquals(200, config.getWebResponse().getStatusCode());\n                assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid.get()));\n                assertThat(config.getWebResponse().getContentAsString(), containsString(TOKEN_NAME));\n                HtmlSpan useCounterSpan = config.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n                assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n                \n                revokeToken(wc, u.getId(), tokenUuid.get());\n                \n                \r\n                WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue.get());\n                checkUserIsNotConnected(restWc);\n                \n                HtmlPage configWithoutToken = wc.goTo(u.getUrl() + \"/configure\");\n                assertEquals(200, configWithoutToken.getWebResponse().getStatusCode());\n                assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenUuid.get())));\n                assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(TOKEN_NAME)));\n            }\n        });\n    }\n","date":"2018-11-23 07:21:56","endLine":160,"groupId":"1457","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"roundtripWithRestart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/b2/f322a171d2dbf01fa89752275d2ccd1b631e66.src","preCode":"    public void roundtripWithRestart() throws Exception {\n        AtomicReference<String> tokenValue = new AtomicReference<>();\n        AtomicReference<String> tokenUuid = new AtomicReference<>();\n        String TOKEN_NAME = \"New Token Name\";\n        int NUM_CALL_WITH_TOKEN = 5;\n        \n        rr.addStep(new Statement() {\n               @Override\n               public void evaluate() throws Throwable {\n                   JenkinsRule j = rr.j;\n                   j.jenkins.setCrumbIssuer(null);\n                   j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n                   \n                   User u = User.getById(\"foo\", true);\n\n                   ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);\n                   assertNotNull(t.getTokenStore());\n                   assertNotNull(t.getTokenStats());\n\n                   \r\n                   WebClient wc = j.createWebClient().withBasicCredentials(u.getId());\n                   wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n                   WebRequest request = new WebRequest(new URL(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken\"), HttpMethod.POST);\n                   request.setRequestParameters(Arrays.asList(new NameValuePair(\"newTokenName\", TOKEN_NAME)));\n\n                   Page page = wc.getPage(request);\n                   assertEquals(200, page.getWebResponse().getStatusCode());\n                   String responseContent = page.getWebResponse().getContentAsString();\n                   JSONObject jsonObject = JSONObject.fromObject(responseContent);\n                   JSONObject jsonData = jsonObject.getJSONObject(\"data\");\n                   String tokenName = jsonData.getString(\"tokenName\");\n                   tokenValue.set(jsonData.getString(\"tokenValue\"));\n                   tokenUuid.set(jsonData.getString(\"tokenUuid\"));\n\n                   assertEquals(TOKEN_NAME, tokenName);\n\n                   WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue.get());\n                   checkUserIsConnected(restWc, u.getId());\n\n                   HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n                   assertEquals(200, config.getWebResponse().getStatusCode());\n                   assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid.get()));\n                   assertThat(config.getWebResponse().getContentAsString(), containsString(tokenName));\n\n                   \r\n                   for (int i = 1; i < NUM_CALL_WITH_TOKEN; i++) {\n                       restWc.goToXml(\"whoAmI/api/xml\");\n                   }\n\n                   HtmlPage configWithStats = wc.goTo(u.getUrl() + \"/configure\");\n                   assertEquals(200, configWithStats.getWebResponse().getStatusCode());\n                   HtmlSpan useCounterSpan = configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n                   assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n\n                   File apiTokenStatsFile = new File(u.getUserFolder(), \"apiTokenStats.xml\");\n                   assertTrue(\"apiTokenStats.xml file should exist\", apiTokenStatsFile.exists());\n               }\n           });\n    \n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j = rr.j;\n                j.jenkins.setCrumbIssuer(null);\n                \n                User u = User.getById(\"foo\", false);\n                assertNotNull(u);\n    \n                WebClient wc = j.createWebClient().login(u.getId());\n                checkUserIsConnected(wc, u.getId());\n    \n                HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n                assertEquals(200, config.getWebResponse().getStatusCode());\n                assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid.get()));\n                assertThat(config.getWebResponse().getContentAsString(), containsString(TOKEN_NAME));\n                HtmlSpan useCounterSpan = config.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n                assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n                \n                revokeToken(wc, u.getId(), tokenUuid.get());\n                \n                \r\n                WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue.get());\n                checkUserIsNotConnected(restWc);\n                \n                HtmlPage configWithoutToken = wc.goTo(u.getUrl() + \"/configure\");\n                assertEquals(200, configWithoutToken.getWebResponse().getStatusCode());\n                assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenUuid.get())));\n                assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(TOKEN_NAME)));\n            }\n        });\n    }\n","realPath":"test/src/test/java/jenkins/security/apitoken/ApiTokenStatsRestartTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"}],"commitId":"fab166242dd407a08dcafb727abff94fd3ca7dd1","commitMessage":"@@@Merge pull request #3618 from Wadeck/JENKINS-53511_WEBCLIENT_DISCOVERY_IMPROVEMENT\n\n[JENKINS-53511] Improve discovery and readability of WebClient","date":"2019-02-08 13:43:50","modifiedFileCount":"38","status":"M","submitter":"Oleg Nenashev"},{"authorTime":"2020-07-17 22:15:15","codes":[{"authorDate":"2020-07-17 22:15:15","commitOrder":4,"curCode":"    public void roundtrip() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        User u = User.getById(\"foo\", true);\n        \n        ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);\n        assertNotNull(t.getTokenStore());\n        assertNotNull(t.getTokenStats());\n        \n        \r\n        WebClient wc = j.createWebClient()\n                .withBasicCredentials(u.getId())\n                .withThrowExceptionOnFailingStatusCode(false);\n        \n        final String TOKEN_NAME = \"New Token Name\";\n        \n        WebRequest request = new WebRequest(new URL(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken\"), HttpMethod.POST);\n        request.setRequestParameters(Collections.singletonList(new NameValuePair(\"newTokenName\", TOKEN_NAME)));\n        \n        Page page = wc.getPage(request);\n        assertEquals(200, page.getWebResponse().getStatusCode());\n        String responseContent = page.getWebResponse().getContentAsString();\n        JSONObject jsonObject = JSONObject.fromObject(responseContent);\n        JSONObject jsonData = jsonObject.getJSONObject(\"data\");\n        String tokenName = jsonData.getString(\"tokenName\");\n        String tokenValue = jsonData.getString(\"tokenValue\");\n        String tokenUuid = jsonData.getString(\"tokenUuid\");\n        \n        assertEquals(TOKEN_NAME, tokenName);\n        \n        WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue);\n        checkUserIsConnected(restWc, u.getId());\n        \n        HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, config.getWebResponse().getStatusCode());\n        assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid));\n        assertThat(config.getWebResponse().getContentAsString(), containsString(tokenName));\n        \n        final int NUM_CALL_WITH_TOKEN = 5;\n        \r\n        for (int i = 1; i < NUM_CALL_WITH_TOKEN; i++) {\n            restWc.goToXml(\"whoAmI/api/xml\");\n        }\n        \n        HtmlPage configWithStats = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, configWithStats.getWebResponse().getStatusCode());\n        HtmlSpan useCounterSpan = configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n        assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n        \n        revokeToken(wc, u.getId(), tokenUuid);\n        \n        \r\n        checkUserIsNotConnected(restWc);\n        \n        HtmlPage configWithoutToken = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, configWithoutToken.getWebResponse().getStatusCode());\n        assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenUuid)));\n        assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenName)));\n    }\n","date":"2020-07-17 22:15:15","endLine":118,"groupId":"5389","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"roundtrip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/6a/2bf46888b2a6a6d877e29b37a213d3941107e4.src","preCode":"    public void roundtrip() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        User u = User.getById(\"foo\", true);\n        \n        ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);\n        assertNotNull(t.getTokenStore());\n        assertNotNull(t.getTokenStats());\n        \n        \r\n        WebClient wc = j.createWebClient()\n                .withBasicCredentials(u.getId())\n                .withThrowExceptionOnFailingStatusCode(false);\n        \n        final String TOKEN_NAME = \"New Token Name\";\n        \n        WebRequest request = new WebRequest(new URL(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken\"), HttpMethod.POST);\n        request.setRequestParameters(Arrays.asList(new NameValuePair(\"newTokenName\", TOKEN_NAME)));\n        \n        Page page = wc.getPage(request);\n        assertEquals(200, page.getWebResponse().getStatusCode());\n        String responseContent = page.getWebResponse().getContentAsString();\n        JSONObject jsonObject = JSONObject.fromObject(responseContent);\n        JSONObject jsonData = jsonObject.getJSONObject(\"data\");\n        String tokenName = jsonData.getString(\"tokenName\");\n        String tokenValue = jsonData.getString(\"tokenValue\");\n        String tokenUuid = jsonData.getString(\"tokenUuid\");\n        \n        assertEquals(TOKEN_NAME, tokenName);\n        \n        WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue);\n        checkUserIsConnected(restWc, u.getId());\n        \n        HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, config.getWebResponse().getStatusCode());\n        assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid));\n        assertThat(config.getWebResponse().getContentAsString(), containsString(tokenName));\n        \n        final int NUM_CALL_WITH_TOKEN = 5;\n        \r\n        for (int i = 1; i < NUM_CALL_WITH_TOKEN; i++) {\n            restWc.goToXml(\"whoAmI/api/xml\");\n        }\n        \n        HtmlPage configWithStats = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, configWithStats.getWebResponse().getStatusCode());\n        HtmlSpan useCounterSpan = configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n        assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n        \n        revokeToken(wc, u.getId(), tokenUuid);\n        \n        \r\n        checkUserIsNotConnected(restWc);\n        \n        HtmlPage configWithoutToken = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, configWithoutToken.getWebResponse().getStatusCode());\n        assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenUuid)));\n        assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenName)));\n    }\n","realPath":"test/src/test/java/jenkins/security/apitoken/ApiTokenStatsTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2020-07-17 22:15:15","commitOrder":4,"curCode":"    public void roundtripWithRestart() {\n        AtomicReference<String> tokenValue = new AtomicReference<>();\n        AtomicReference<String> tokenUuid = new AtomicReference<>();\n        String TOKEN_NAME = \"New Token Name\";\n        int NUM_CALL_WITH_TOKEN = 5;\n        \n        rr.addStep(new Statement() {\n               @Override\n               public void evaluate() throws Throwable {\n                   JenkinsRule j = rr.j;\n                   j.jenkins.setCrumbIssuer(null);\n                   j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n                   \n                   User u = User.getById(\"foo\", true);\n\n                   ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);\n                   assertNotNull(t.getTokenStore());\n                   assertNotNull(t.getTokenStats());\n\n                   \r\n                   WebClient wc = j.createWebClient().withBasicCredentials(u.getId());\n                   wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n                   WebRequest request = new WebRequest(new URL(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken\"), HttpMethod.POST);\n                   request.setRequestParameters(Collections.singletonList(new NameValuePair(\"newTokenName\", TOKEN_NAME)));\n\n                   Page page = wc.getPage(request);\n                   assertEquals(200, page.getWebResponse().getStatusCode());\n                   String responseContent = page.getWebResponse().getContentAsString();\n                   JSONObject jsonObject = JSONObject.fromObject(responseContent);\n                   JSONObject jsonData = jsonObject.getJSONObject(\"data\");\n                   String tokenName = jsonData.getString(\"tokenName\");\n                   tokenValue.set(jsonData.getString(\"tokenValue\"));\n                   tokenUuid.set(jsonData.getString(\"tokenUuid\"));\n\n                   assertEquals(TOKEN_NAME, tokenName);\n\n                   WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue.get());\n                   checkUserIsConnected(restWc, u.getId());\n\n                   HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n                   assertEquals(200, config.getWebResponse().getStatusCode());\n                   assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid.get()));\n                   assertThat(config.getWebResponse().getContentAsString(), containsString(tokenName));\n\n                   \r\n                   for (int i = 1; i < NUM_CALL_WITH_TOKEN; i++) {\n                       restWc.goToXml(\"whoAmI/api/xml\");\n                   }\n\n                   HtmlPage configWithStats = wc.goTo(u.getUrl() + \"/configure\");\n                   assertEquals(200, configWithStats.getWebResponse().getStatusCode());\n                   HtmlSpan useCounterSpan = configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n                   assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n\n                   File apiTokenStatsFile = new File(u.getUserFolder(), \"apiTokenStats.xml\");\n                   assertTrue(\"apiTokenStats.xml file should exist\", apiTokenStatsFile.exists());\n               }\n           });\n    \n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j = rr.j;\n                j.jenkins.setCrumbIssuer(null);\n                \n                User u = User.getById(\"foo\", false);\n                assertNotNull(u);\n    \n                WebClient wc = j.createWebClient().login(u.getId());\n                checkUserIsConnected(wc, u.getId());\n    \n                HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n                assertEquals(200, config.getWebResponse().getStatusCode());\n                assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid.get()));\n                assertThat(config.getWebResponse().getContentAsString(), containsString(TOKEN_NAME));\n                HtmlSpan useCounterSpan = config.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n                assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n                \n                revokeToken(wc, u.getId(), tokenUuid.get());\n                \n                \r\n                WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue.get());\n                checkUserIsNotConnected(restWc);\n                \n                HtmlPage configWithoutToken = wc.goTo(u.getUrl() + \"/configure\");\n                assertEquals(200, configWithoutToken.getWebResponse().getStatusCode());\n                assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenUuid.get())));\n                assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(TOKEN_NAME)));\n            }\n        });\n    }\n","date":"2020-07-17 22:15:15","endLine":160,"groupId":"1457","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"roundtripWithRestart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/35/e40e68fdf4f6ba5022d1f5177fe81bf4c7b796.src","preCode":"    public void roundtripWithRestart() throws Exception {\n        AtomicReference<String> tokenValue = new AtomicReference<>();\n        AtomicReference<String> tokenUuid = new AtomicReference<>();\n        String TOKEN_NAME = \"New Token Name\";\n        int NUM_CALL_WITH_TOKEN = 5;\n        \n        rr.addStep(new Statement() {\n               @Override\n               public void evaluate() throws Throwable {\n                   JenkinsRule j = rr.j;\n                   j.jenkins.setCrumbIssuer(null);\n                   j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n                   \n                   User u = User.getById(\"foo\", true);\n\n                   ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);\n                   assertNotNull(t.getTokenStore());\n                   assertNotNull(t.getTokenStats());\n\n                   \r\n                   WebClient wc = j.createWebClient().withBasicCredentials(u.getId());\n                   wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n                   WebRequest request = new WebRequest(new URL(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken\"), HttpMethod.POST);\n                   request.setRequestParameters(Arrays.asList(new NameValuePair(\"newTokenName\", TOKEN_NAME)));\n\n                   Page page = wc.getPage(request);\n                   assertEquals(200, page.getWebResponse().getStatusCode());\n                   String responseContent = page.getWebResponse().getContentAsString();\n                   JSONObject jsonObject = JSONObject.fromObject(responseContent);\n                   JSONObject jsonData = jsonObject.getJSONObject(\"data\");\n                   String tokenName = jsonData.getString(\"tokenName\");\n                   tokenValue.set(jsonData.getString(\"tokenValue\"));\n                   tokenUuid.set(jsonData.getString(\"tokenUuid\"));\n\n                   assertEquals(TOKEN_NAME, tokenName);\n\n                   WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue.get());\n                   checkUserIsConnected(restWc, u.getId());\n\n                   HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n                   assertEquals(200, config.getWebResponse().getStatusCode());\n                   assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid.get()));\n                   assertThat(config.getWebResponse().getContentAsString(), containsString(tokenName));\n\n                   \r\n                   for (int i = 1; i < NUM_CALL_WITH_TOKEN; i++) {\n                       restWc.goToXml(\"whoAmI/api/xml\");\n                   }\n\n                   HtmlPage configWithStats = wc.goTo(u.getUrl() + \"/configure\");\n                   assertEquals(200, configWithStats.getWebResponse().getStatusCode());\n                   HtmlSpan useCounterSpan = configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n                   assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n\n                   File apiTokenStatsFile = new File(u.getUserFolder(), \"apiTokenStats.xml\");\n                   assertTrue(\"apiTokenStats.xml file should exist\", apiTokenStatsFile.exists());\n               }\n           });\n    \n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j = rr.j;\n                j.jenkins.setCrumbIssuer(null);\n                \n                User u = User.getById(\"foo\", false);\n                assertNotNull(u);\n    \n                WebClient wc = j.createWebClient().login(u.getId());\n                checkUserIsConnected(wc, u.getId());\n    \n                HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n                assertEquals(200, config.getWebResponse().getStatusCode());\n                assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid.get()));\n                assertThat(config.getWebResponse().getContentAsString(), containsString(TOKEN_NAME));\n                HtmlSpan useCounterSpan = config.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n                assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n                \n                revokeToken(wc, u.getId(), tokenUuid.get());\n                \n                \r\n                WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue.get());\n                checkUserIsNotConnected(restWc);\n                \n                HtmlPage configWithoutToken = wc.goTo(u.getUrl() + \"/configure\");\n                assertEquals(200, configWithoutToken.getWebResponse().getStatusCode());\n                assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenUuid.get())));\n                assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(TOKEN_NAME)));\n            }\n        });\n    }\n","realPath":"test/src/test/java/jenkins/security/apitoken/ApiTokenStatsRestartTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"688647a8540f8db179dc5c9cf62e3208eb444d9f","commitMessage":"@@@tests: minor refactorings either for performance or readability (#4846)\n\ntests: minor refactorings either for performance or readability","date":"2020-07-17 22:15:15","modifiedFileCount":"18","status":"M","submitter":"Tim Jacomb"},{"authorTime":"2021-06-03 15:27:51","codes":[{"authorDate":"2020-07-17 22:15:15","commitOrder":5,"curCode":"    public void roundtrip() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        User u = User.getById(\"foo\", true);\n        \n        ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);\n        assertNotNull(t.getTokenStore());\n        assertNotNull(t.getTokenStats());\n        \n        \r\n        WebClient wc = j.createWebClient()\n                .withBasicCredentials(u.getId())\n                .withThrowExceptionOnFailingStatusCode(false);\n        \n        final String TOKEN_NAME = \"New Token Name\";\n        \n        WebRequest request = new WebRequest(new URL(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken\"), HttpMethod.POST);\n        request.setRequestParameters(Collections.singletonList(new NameValuePair(\"newTokenName\", TOKEN_NAME)));\n        \n        Page page = wc.getPage(request);\n        assertEquals(200, page.getWebResponse().getStatusCode());\n        String responseContent = page.getWebResponse().getContentAsString();\n        JSONObject jsonObject = JSONObject.fromObject(responseContent);\n        JSONObject jsonData = jsonObject.getJSONObject(\"data\");\n        String tokenName = jsonData.getString(\"tokenName\");\n        String tokenValue = jsonData.getString(\"tokenValue\");\n        String tokenUuid = jsonData.getString(\"tokenUuid\");\n        \n        assertEquals(TOKEN_NAME, tokenName);\n        \n        WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue);\n        checkUserIsConnected(restWc, u.getId());\n        \n        HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, config.getWebResponse().getStatusCode());\n        assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid));\n        assertThat(config.getWebResponse().getContentAsString(), containsString(tokenName));\n        \n        final int NUM_CALL_WITH_TOKEN = 5;\n        \r\n        for (int i = 1; i < NUM_CALL_WITH_TOKEN; i++) {\n            restWc.goToXml(\"whoAmI/api/xml\");\n        }\n        \n        HtmlPage configWithStats = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, configWithStats.getWebResponse().getStatusCode());\n        HtmlSpan useCounterSpan = configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n        assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n        \n        revokeToken(wc, u.getId(), tokenUuid);\n        \n        \r\n        checkUserIsNotConnected(restWc);\n        \n        HtmlPage configWithoutToken = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, configWithoutToken.getWebResponse().getStatusCode());\n        assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenUuid)));\n        assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenName)));\n    }\n","date":"2020-07-17 22:15:15","endLine":118,"groupId":"10669","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"roundtrip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/6a/2bf46888b2a6a6d877e29b37a213d3941107e4.src","preCode":"    public void roundtrip() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        User u = User.getById(\"foo\", true);\n        \n        ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);\n        assertNotNull(t.getTokenStore());\n        assertNotNull(t.getTokenStats());\n        \n        \r\n        WebClient wc = j.createWebClient()\n                .withBasicCredentials(u.getId())\n                .withThrowExceptionOnFailingStatusCode(false);\n        \n        final String TOKEN_NAME = \"New Token Name\";\n        \n        WebRequest request = new WebRequest(new URL(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken\"), HttpMethod.POST);\n        request.setRequestParameters(Collections.singletonList(new NameValuePair(\"newTokenName\", TOKEN_NAME)));\n        \n        Page page = wc.getPage(request);\n        assertEquals(200, page.getWebResponse().getStatusCode());\n        String responseContent = page.getWebResponse().getContentAsString();\n        JSONObject jsonObject = JSONObject.fromObject(responseContent);\n        JSONObject jsonData = jsonObject.getJSONObject(\"data\");\n        String tokenName = jsonData.getString(\"tokenName\");\n        String tokenValue = jsonData.getString(\"tokenValue\");\n        String tokenUuid = jsonData.getString(\"tokenUuid\");\n        \n        assertEquals(TOKEN_NAME, tokenName);\n        \n        WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue);\n        checkUserIsConnected(restWc, u.getId());\n        \n        HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, config.getWebResponse().getStatusCode());\n        assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid));\n        assertThat(config.getWebResponse().getContentAsString(), containsString(tokenName));\n        \n        final int NUM_CALL_WITH_TOKEN = 5;\n        \r\n        for (int i = 1; i < NUM_CALL_WITH_TOKEN; i++) {\n            restWc.goToXml(\"whoAmI/api/xml\");\n        }\n        \n        HtmlPage configWithStats = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, configWithStats.getWebResponse().getStatusCode());\n        HtmlSpan useCounterSpan = configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n        assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n        \n        revokeToken(wc, u.getId(), tokenUuid);\n        \n        \r\n        checkUserIsNotConnected(restWc);\n        \n        HtmlPage configWithoutToken = wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, configWithoutToken.getWebResponse().getStatusCode());\n        assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenUuid)));\n        assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenName)));\n    }\n","realPath":"test/src/test/java/jenkins/security/apitoken/ApiTokenStatsTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2021-06-03 15:27:51","commitOrder":5,"curCode":"    public void roundtripWithRestart() throws Throwable {\n        AtomicReference<String> tokenValue = new AtomicReference<>();\n        AtomicReference<String> tokenUuid = new AtomicReference<>();\n        String TOKEN_NAME = \"New Token Name\";\n        int NUM_CALL_WITH_TOKEN = 5;\n        \n        sessions.then(j -> {\n                   j.jenkins.setCrumbIssuer(null);\n                   j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n                   \n                   User u = User.getById(\"foo\", true);\n\n                   ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);\n                   assertNotNull(t.getTokenStore());\n                   assertNotNull(t.getTokenStats());\n\n                   \r\n                   WebClient wc = j.createWebClient().withBasicCredentials(u.getId());\n                   wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n                   WebRequest request = new WebRequest(new URL(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken\"), HttpMethod.POST);\n                   request.setRequestParameters(Collections.singletonList(new NameValuePair(\"newTokenName\", TOKEN_NAME)));\n\n                   Page page = wc.getPage(request);\n                   assertEquals(200, page.getWebResponse().getStatusCode());\n                   String responseContent = page.getWebResponse().getContentAsString();\n                   JSONObject jsonObject = JSONObject.fromObject(responseContent);\n                   JSONObject jsonData = jsonObject.getJSONObject(\"data\");\n                   String tokenName = jsonData.getString(\"tokenName\");\n                   tokenValue.set(jsonData.getString(\"tokenValue\"));\n                   tokenUuid.set(jsonData.getString(\"tokenUuid\"));\n\n                   assertEquals(TOKEN_NAME, tokenName);\n\n                   WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue.get());\n                   checkUserIsConnected(restWc, u.getId());\n\n                   HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n                   assertEquals(200, config.getWebResponse().getStatusCode());\n                   assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid.get()));\n                   assertThat(config.getWebResponse().getContentAsString(), containsString(tokenName));\n\n                   \r\n                   for (int i = 1; i < NUM_CALL_WITH_TOKEN; i++) {\n                       restWc.goToXml(\"whoAmI/api/xml\");\n                   }\n\n                   HtmlPage configWithStats = wc.goTo(u.getUrl() + \"/configure\");\n                   assertEquals(200, configWithStats.getWebResponse().getStatusCode());\n                   HtmlSpan useCounterSpan = configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n                   assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n\n                   File apiTokenStatsFile = new File(u.getUserFolder(), \"apiTokenStats.xml\");\n                   assertTrue(\"apiTokenStats.xml file should exist\", apiTokenStatsFile.exists());\n           });\n    \n        sessions.then(j -> {\n                j.jenkins.setCrumbIssuer(null);\n                \n                User u = User.getById(\"foo\", false);\n                assertNotNull(u);\n    \n                WebClient wc = j.createWebClient().login(u.getId());\n                checkUserIsConnected(wc, u.getId());\n    \n                HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n                assertEquals(200, config.getWebResponse().getStatusCode());\n                assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid.get()));\n                assertThat(config.getWebResponse().getContentAsString(), containsString(TOKEN_NAME));\n                HtmlSpan useCounterSpan = config.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n                assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n                \n                revokeToken(j, wc, u.getId(), tokenUuid.get());\n                \n                \r\n                WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue.get());\n                checkUserIsNotConnected(restWc);\n                \n                HtmlPage configWithoutToken = wc.goTo(u.getUrl() + \"/configure\");\n                assertEquals(200, configWithoutToken.getWebResponse().getStatusCode());\n                assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenUuid.get())));\n                assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(TOKEN_NAME)));\n        });\n    }\n","date":"2021-06-03 15:27:51","endLine":151,"groupId":"10669","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"roundtripWithRestart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/88/45e6f435a13db9dd2f54ab9ae80081a6a59623.src","preCode":"    public void roundtripWithRestart() {\n        AtomicReference<String> tokenValue = new AtomicReference<>();\n        AtomicReference<String> tokenUuid = new AtomicReference<>();\n        String TOKEN_NAME = \"New Token Name\";\n        int NUM_CALL_WITH_TOKEN = 5;\n        \n        rr.addStep(new Statement() {\n               @Override\n               public void evaluate() throws Throwable {\n                   JenkinsRule j = rr.j;\n                   j.jenkins.setCrumbIssuer(null);\n                   j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n                   \n                   User u = User.getById(\"foo\", true);\n\n                   ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);\n                   assertNotNull(t.getTokenStore());\n                   assertNotNull(t.getTokenStats());\n\n                   \r\n                   WebClient wc = j.createWebClient().withBasicCredentials(u.getId());\n                   wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n                   WebRequest request = new WebRequest(new URL(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken\"), HttpMethod.POST);\n                   request.setRequestParameters(Collections.singletonList(new NameValuePair(\"newTokenName\", TOKEN_NAME)));\n\n                   Page page = wc.getPage(request);\n                   assertEquals(200, page.getWebResponse().getStatusCode());\n                   String responseContent = page.getWebResponse().getContentAsString();\n                   JSONObject jsonObject = JSONObject.fromObject(responseContent);\n                   JSONObject jsonData = jsonObject.getJSONObject(\"data\");\n                   String tokenName = jsonData.getString(\"tokenName\");\n                   tokenValue.set(jsonData.getString(\"tokenValue\"));\n                   tokenUuid.set(jsonData.getString(\"tokenUuid\"));\n\n                   assertEquals(TOKEN_NAME, tokenName);\n\n                   WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue.get());\n                   checkUserIsConnected(restWc, u.getId());\n\n                   HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n                   assertEquals(200, config.getWebResponse().getStatusCode());\n                   assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid.get()));\n                   assertThat(config.getWebResponse().getContentAsString(), containsString(tokenName));\n\n                   \r\n                   for (int i = 1; i < NUM_CALL_WITH_TOKEN; i++) {\n                       restWc.goToXml(\"whoAmI/api/xml\");\n                   }\n\n                   HtmlPage configWithStats = wc.goTo(u.getUrl() + \"/configure\");\n                   assertEquals(200, configWithStats.getWebResponse().getStatusCode());\n                   HtmlSpan useCounterSpan = configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n                   assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n\n                   File apiTokenStatsFile = new File(u.getUserFolder(), \"apiTokenStats.xml\");\n                   assertTrue(\"apiTokenStats.xml file should exist\", apiTokenStatsFile.exists());\n               }\n           });\n    \n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j = rr.j;\n                j.jenkins.setCrumbIssuer(null);\n                \n                User u = User.getById(\"foo\", false);\n                assertNotNull(u);\n    \n                WebClient wc = j.createWebClient().login(u.getId());\n                checkUserIsConnected(wc, u.getId());\n    \n                HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");\n                assertEquals(200, config.getWebResponse().getStatusCode());\n                assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid.get()));\n                assertThat(config.getWebResponse().getContentAsString(), containsString(TOKEN_NAME));\n                HtmlSpan useCounterSpan = config.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n                assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n                \n                revokeToken(wc, u.getId(), tokenUuid.get());\n                \n                \r\n                WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(), tokenValue.get());\n                checkUserIsNotConnected(restWc);\n                \n                HtmlPage configWithoutToken = wc.goTo(u.getUrl() + \"/configure\");\n                assertEquals(200, configWithoutToken.getWebResponse().getStatusCode());\n                assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenUuid.get())));\n                assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(TOKEN_NAME)));\n            }\n        });\n    }\n","realPath":"test/src/test/java/jenkins/security/apitoken/ApiTokenStatsRestartTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"5e9b451a11926e5b42d4a94612ca566de058f494","commitMessage":"@@@Merge pull request #5544 from basil/JenkinsSessionRule\n\nMigrate from `RestartableJenkinsRule` to `JenkinsSessionRule`","date":"2021-06-03 15:27:51","modifiedFileCount":"8","status":"M","submitter":"Oleg Nenashev"}]
