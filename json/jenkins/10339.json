[{"authorTime":"2014-05-01 05:46:46","codes":[{"authorDate":"2014-05-01 05:46:46","commitOrder":1,"curCode":"    @Test public void progressiveOutput() throws Exception {\n        final SequenceLock lock = new SequenceLock();\n        JenkinsRule.WebClient wc = r.createWebClient();\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                lock.phase(0);\n                \r\n                lock.phase(2);\n                listener.getLogger().println(\"line1\");\n                lock.phase(4);\n                listener.getLogger().println(\"line2\");\n                lock.phase(6);\n                return true;\n            }\n        });\n        Future<FreeStyleBuild> f = p.scheduleBuild2(0);\n\n\n        lock.phase(1);\n        FreeStyleBuild b = p.getBuildByNumber(1);\n        ProgressiveLogClient plc = new ProgressiveLogClient(wc,b);\n        \r\n        plc.next();\n\n        lock.phase(3);\n        assertEquals(\"<b tag=1>line1</b>\\r\\n\",plc.next());\n\n        \r\n        lock.phase(5);\n        assertEquals(\"<b tag=2>line2</b>\\r\\n\",plc.next());\n\n        lock.done();\n\n        \r\n        r.assertBuildStatusSuccess(f);\n    }\n","date":"2014-05-01 05:46:46","endLine":195,"groupId":"2501","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"progressiveOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/99/3f749c77515078c74ff6af5944f92308379ed6.src","preCode":"    @Test public void progressiveOutput() throws Exception {\n        final SequenceLock lock = new SequenceLock();\n        JenkinsRule.WebClient wc = r.createWebClient();\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                lock.phase(0);\n                \r\n                lock.phase(2);\n                listener.getLogger().println(\"line1\");\n                lock.phase(4);\n                listener.getLogger().println(\"line2\");\n                lock.phase(6);\n                return true;\n            }\n        });\n        Future<FreeStyleBuild> f = p.scheduleBuild2(0);\n\n\n        lock.phase(1);\n        FreeStyleBuild b = p.getBuildByNumber(1);\n        ProgressiveLogClient plc = new ProgressiveLogClient(wc,b);\n        \r\n        plc.next();\n\n        lock.phase(3);\n        assertEquals(\"<b tag=1>line1</b>\\r\\n\",plc.next());\n\n        \r\n        lock.phase(5);\n        assertEquals(\"<b tag=2>line2</b>\\r\\n\",plc.next());\n\n        lock.done();\n\n        \r\n        r.assertBuildStatusSuccess(f);\n    }\n","realPath":"test/src/test/java/hudson/console/ConsoleAnnotatorTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"B"},{"authorDate":"2014-05-01 05:46:46","commitOrder":1,"curCode":"    @Test public void consoleAnnotation() throws Exception {\n        final SequenceLock lock = new SequenceLock();\n        JenkinsRule.WebClient wc = r.createWebClient();\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                lock.phase(0);\n                \r\n\n                lock.phase(2);\n                listener.getLogger().print(\"abc\");\n                listener.annotate(new DollarMark());\n                listener.getLogger().println(\"def\");\n\n                lock.phase(4);\n                listener.getLogger().print(\"123\");\n                listener.annotate(new DollarMark());\n                listener.getLogger().print(\"456\");\n                listener.annotate(new DollarMark());\n                listener.getLogger().println(\"789\");\n\n                lock.phase(6);\n                return true;\n            }\n        });\n        Future<FreeStyleBuild> f = p.scheduleBuild2(0);\n\n        \r\n        lock.phase(1);\n        FreeStyleBuild b = p.getBuildByNumber(1);\n        ProgressiveLogClient plc = new ProgressiveLogClient(wc,b);\n        plc.next();\n\n        lock.phase(3);\n        assertEquals(\"abc$$$def\\r\\n\",plc.next());\n\n        lock.phase(5);\n        assertEquals(\"123$$$456$$$789\\r\\n\",plc.next());\n\n        lock.done();\n\n        \r\n        r.assertBuildStatusSuccess(f);\n    }\n","date":"2014-05-01 05:46:46","endLine":261,"groupId":"2501","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"consoleAnnotation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/99/3f749c77515078c74ff6af5944f92308379ed6.src","preCode":"    @Test public void consoleAnnotation() throws Exception {\n        final SequenceLock lock = new SequenceLock();\n        JenkinsRule.WebClient wc = r.createWebClient();\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                lock.phase(0);\n                \r\n\n                lock.phase(2);\n                listener.getLogger().print(\"abc\");\n                listener.annotate(new DollarMark());\n                listener.getLogger().println(\"def\");\n\n                lock.phase(4);\n                listener.getLogger().print(\"123\");\n                listener.annotate(new DollarMark());\n                listener.getLogger().print(\"456\");\n                listener.annotate(new DollarMark());\n                listener.getLogger().println(\"789\");\n\n                lock.phase(6);\n                return true;\n            }\n        });\n        Future<FreeStyleBuild> f = p.scheduleBuild2(0);\n\n        \r\n        lock.phase(1);\n        FreeStyleBuild b = p.getBuildByNumber(1);\n        ProgressiveLogClient plc = new ProgressiveLogClient(wc,b);\n        plc.next();\n\n        lock.phase(3);\n        assertEquals(\"abc$$$def\\r\\n\",plc.next());\n\n        lock.phase(5);\n        assertEquals(\"123$$$456$$$789\\r\\n\",plc.next());\n\n        lock.done();\n\n        \r\n        r.assertBuildStatusSuccess(f);\n    }\n","realPath":"test/src/test/java/hudson/console/ConsoleAnnotatorTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"B"}],"commitId":"87e66570b8cf83ac78057166eb17e155ef710ae4","commitMessage":"@@@JUnit 4.","date":"2014-05-01 05:46:46","modifiedFileCount":"1","status":"B","submitter":"Jesse Glick"},{"authorTime":"2021-04-28 17:28:25","codes":[{"authorDate":"2021-04-28 17:28:25","commitOrder":2,"curCode":"    @Test public void progressiveOutput() throws Exception {\n        final SequenceLock lock = new SequenceLock();\n        JenkinsRule.WebClient wc = r.createWebClient();\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                lock.phase(0);\n                \r\n                lock.phase(2);\n                listener.getLogger().println(\"line1\");\n                lock.phase(4);\n                listener.getLogger().println(\"line2\");\n                lock.phase(6);\n                return true;\n            }\n        });\n        Future<FreeStyleBuild> f = p.scheduleBuild2(0);\n\n\n        lock.phase(1);\n        FreeStyleBuild b = p.getBuildByNumber(1);\n        ProgressiveLogClient plc = new ProgressiveLogClient(wc,b);\n        \r\n        plc.next();\n\n        lock.phase(3);\n        assertEquals(\"<b tag=1>line1</b>\\r\\n\",plc.next());\n\n        \r\n        lock.phase(5);\n        assertEquals(\"<b tag=2>line2</b>\\r\\n\",plc.next());\n\n        lock.done();\n\n        \r\n        r.assertBuildStatusSuccess(f);\n    }\n","date":"2021-04-28 17:28:25","endLine":206,"groupId":"10339","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"progressiveOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/72/9f7969c02c6a1d2dbdf9ef29e3b12b3d76d7bc.src","preCode":"    @Test public void progressiveOutput() throws Exception {\n        final SequenceLock lock = new SequenceLock();\n        JenkinsRule.WebClient wc = r.createWebClient();\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                lock.phase(0);\n                \r\n                lock.phase(2);\n                listener.getLogger().println(\"line1\");\n                lock.phase(4);\n                listener.getLogger().println(\"line2\");\n                lock.phase(6);\n                return true;\n            }\n        });\n        Future<FreeStyleBuild> f = p.scheduleBuild2(0);\n\n\n        lock.phase(1);\n        FreeStyleBuild b = p.getBuildByNumber(1);\n        ProgressiveLogClient plc = new ProgressiveLogClient(wc,b);\n        \r\n        plc.next();\n\n        lock.phase(3);\n        assertEquals(\"<b tag=1>line1</b>\\r\\n\",plc.next());\n\n        \r\n        lock.phase(5);\n        assertEquals(\"<b tag=2>line2</b>\\r\\n\",plc.next());\n\n        lock.done();\n\n        \r\n        r.assertBuildStatusSuccess(f);\n    }\n","realPath":"test/src/test/java/hudson/console/ConsoleAnnotatorTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"},{"authorDate":"2021-04-28 17:28:25","commitOrder":2,"curCode":"    @Test public void consoleAnnotation() throws Exception {\n        final SequenceLock lock = new SequenceLock();\n        JenkinsRule.WebClient wc = r.createWebClient();\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                lock.phase(0);\n                \r\n\n                lock.phase(2);\n                listener.getLogger().print(\"abc\");\n                listener.annotate(new DollarMark());\n                listener.getLogger().println(\"def\");\n\n                lock.phase(4);\n                listener.getLogger().print(\"123\");\n                listener.annotate(new DollarMark());\n                listener.getLogger().print(\"456\");\n                listener.annotate(new DollarMark());\n                listener.getLogger().println(\"789\");\n\n                lock.phase(6);\n                return true;\n            }\n        });\n        Future<FreeStyleBuild> f = p.scheduleBuild2(0);\n\n        \r\n        lock.phase(1);\n        FreeStyleBuild b = p.getBuildByNumber(1);\n        ProgressiveLogClient plc = new ProgressiveLogClient(wc,b);\n        plc.next();\n\n        lock.phase(3);\n        assertEquals(\"abc$$$def\\r\\n\",plc.next());\n\n        lock.phase(5);\n        assertEquals(\"123$$$456$$$789\\r\\n\",plc.next());\n\n        lock.done();\n\n        \r\n        r.assertBuildStatusSuccess(f);\n    }\n","date":"2021-04-28 17:28:25","endLine":275,"groupId":"10339","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"consoleAnnotation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/72/9f7969c02c6a1d2dbdf9ef29e3b12b3d76d7bc.src","preCode":"    @Test public void consoleAnnotation() throws Exception {\n        final SequenceLock lock = new SequenceLock();\n        JenkinsRule.WebClient wc = r.createWebClient();\n        FreeStyleProject p = r.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                lock.phase(0);\n                \r\n\n                lock.phase(2);\n                listener.getLogger().print(\"abc\");\n                listener.annotate(new DollarMark());\n                listener.getLogger().println(\"def\");\n\n                lock.phase(4);\n                listener.getLogger().print(\"123\");\n                listener.annotate(new DollarMark());\n                listener.getLogger().print(\"456\");\n                listener.annotate(new DollarMark());\n                listener.getLogger().println(\"789\");\n\n                lock.phase(6);\n                return true;\n            }\n        });\n        Future<FreeStyleBuild> f = p.scheduleBuild2(0);\n\n        \r\n        lock.phase(1);\n        FreeStyleBuild b = p.getBuildByNumber(1);\n        ProgressiveLogClient plc = new ProgressiveLogClient(wc,b);\n        plc.next();\n\n        lock.phase(3);\n        assertEquals(\"abc$$$def\\r\\n\",plc.next());\n\n        lock.phase(5);\n        assertEquals(\"123$$$456$$$789\\r\\n\",plc.next());\n\n        lock.done();\n\n        \r\n        r.assertBuildStatusSuccess(f);\n    }\n","realPath":"test/src/test/java/hudson/console/ConsoleAnnotatorTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"}],"commitId":"f6378676b11288cc2525852b0a1a441d147e31d3","commitMessage":"@@@Add missing @Override annotations (#5430)\n\n","date":"2021-04-28 17:28:25","modifiedFileCount":"405","status":"M","submitter":"Basil Crow"}]
