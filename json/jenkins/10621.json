[{"authorTime":"2019-10-11 15:41:32","codes":[{"authorDate":"2019-10-11 15:41:32","commitOrder":1,"curCode":"    public void secondDomainBasics() throws Exception {\n        JenkinsRule.WebClient webClient = j.createWebClient();\n\n        { \r\n            Page page = webClient.goTo(\"userContent\");\n            Assert.assertEquals(\"successful request\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertTrue(\"still on the original URL\", page.getUrl().toString().contains(\"/userContent\"));\n            Assert.assertTrue(\"web page\", page.isHtmlPage());\n            Assert.assertTrue(\"complex web page\", page.getWebResponse().getContentAsString().contains(\"javascript\"));\n        }\n\n        String resourceResponseUrl;\n        { \r\n            webClient.setRedirectEnabled(true);\n            Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n\n        { \r\n            Page page = webClient.getPage(resourceResponseUrl);\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n\n        { \r\n            webClient.setRedirectEnabled(false);\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.getPage(resourceResponseUrl.replace(\"readme.txt\", \"\"));\n            Assert.assertEquals(\"directory listing response\", 200, page.getWebResponse().getStatusCode());\n            String responseContent = page.getWebResponse().getContentAsString();\n            Assert.assertTrue(\"directory listing shown\", responseContent.contains(\"readme.txt\"));\n            Assert.assertTrue(\"is HTML\", responseContent.contains(\"href=\"));\n        }\n\n        String resourceRootUrl = ResourceDomainConfiguration.get().getUrl();\n        {\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.getPage(resourceRootUrl);\n            Assert.assertEquals(\"resource root URL response is 404\", 404, page.getWebResponse().getStatusCode());\n        }\n\n        {\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.getPage(resourceRootUrl + \"/static-files\");\n            Assert.assertEquals(\"resource action index page response is 404\", 404, page.getWebResponse().getStatusCode());\n        }\n\n        { \r\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            String uuid = UUID.randomUUID().toString();\n            Page page = webClient.getPage(resourceRootUrl + \"static-files/\" + uuid);\n            Assert.assertEquals(\"resource response is 404\", 404, page.getWebResponse().getStatusCode());\n            Assert.assertTrue(\"response URL is still the same\", page.getUrl().toString().contains(uuid));\n        }\n\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        { \r\n            webClient.withRedirectEnabled(false).withThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.getPage(resourceResponseUrl);\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response failed\", 403, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n        }\n\n        a.grant(Jenkins.READ).onRoot().to(\"anonymous\");\n\n        { \r\n            Page page = webClient.getPage(resourceResponseUrl);\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n    }\n","date":"2019-10-11 15:41:32","endLine":130,"groupId":"8280","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"secondDomainBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/86/333d23d75f71c49fae8a5f777a6cfbc1e21585.src","preCode":"    public void secondDomainBasics() throws Exception {\n        JenkinsRule.WebClient webClient = j.createWebClient();\n\n        { \r\n            Page page = webClient.goTo(\"userContent\");\n            Assert.assertEquals(\"successful request\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertTrue(\"still on the original URL\", page.getUrl().toString().contains(\"/userContent\"));\n            Assert.assertTrue(\"web page\", page.isHtmlPage());\n            Assert.assertTrue(\"complex web page\", page.getWebResponse().getContentAsString().contains(\"javascript\"));\n        }\n\n        String resourceResponseUrl;\n        { \r\n            webClient.setRedirectEnabled(true);\n            Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n\n        { \r\n            Page page = webClient.getPage(resourceResponseUrl);\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n\n        { \r\n            webClient.setRedirectEnabled(false);\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.getPage(resourceResponseUrl.replace(\"readme.txt\", \"\"));\n            Assert.assertEquals(\"directory listing response\", 200, page.getWebResponse().getStatusCode());\n            String responseContent = page.getWebResponse().getContentAsString();\n            Assert.assertTrue(\"directory listing shown\", responseContent.contains(\"readme.txt\"));\n            Assert.assertTrue(\"is HTML\", responseContent.contains(\"href=\"));\n        }\n\n        String resourceRootUrl = ResourceDomainConfiguration.get().getUrl();\n        {\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.getPage(resourceRootUrl);\n            Assert.assertEquals(\"resource root URL response is 404\", 404, page.getWebResponse().getStatusCode());\n        }\n\n        {\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.getPage(resourceRootUrl + \"/static-files\");\n            Assert.assertEquals(\"resource action index page response is 404\", 404, page.getWebResponse().getStatusCode());\n        }\n\n        { \r\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            String uuid = UUID.randomUUID().toString();\n            Page page = webClient.getPage(resourceRootUrl + \"static-files/\" + uuid);\n            Assert.assertEquals(\"resource response is 404\", 404, page.getWebResponse().getStatusCode());\n            Assert.assertTrue(\"response URL is still the same\", page.getUrl().toString().contains(uuid));\n        }\n\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        { \r\n            webClient.withRedirectEnabled(false).withThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.getPage(resourceResponseUrl);\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response failed\", 403, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n        }\n\n        a.grant(Jenkins.READ).onRoot().to(\"anonymous\");\n\n        { \r\n            Page page = webClient.getPage(resourceResponseUrl);\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"},{"authorDate":"2019-10-11 15:41:32","commitOrder":1,"curCode":"    public void clearRootUrl() throws Exception {\n        JenkinsLocationConfiguration.get().setUrl(null);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n\n        String resourceResponseUrl;\n        {\n            webClient.setRedirectEnabled(true);\n            Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNotNull(\"CSP headers set\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertFalse(\"Not served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertFalse(\"Not served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n            Assert.assertTrue(\"Original URL\", resourceResponseUrl.contains(\"userContent/readme.txt\"));\n        }\n\n    }\n","date":"2019-10-11 15:41:32","endLine":150,"groupId":"8280","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"clearRootUrl","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/86/333d23d75f71c49fae8a5f777a6cfbc1e21585.src","preCode":"    public void clearRootUrl() throws Exception {\n        JenkinsLocationConfiguration.get().setUrl(null);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n\n        String resourceResponseUrl;\n        {\n            webClient.setRedirectEnabled(true);\n            Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNotNull(\"CSP headers set\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertFalse(\"Not served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertFalse(\"Not served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n            Assert.assertTrue(\"Original URL\", resourceResponseUrl.contains(\"userContent/readme.txt\"));\n        }\n\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"B"}],"commitId":"24d0cf90ab82f89aadd2b54c84c7fcab093b0d37","commitMessage":"@@@[JENKINS-41891] Resource domain support (#4239)\n\n* [JENKINS-41891] Resorce domain support\n\n* Rename a few things\n\n* Encapsulate token\n\n* Update documentation based on review feedback\n\n* Rename field and change symbol for friendlier JCasC format\n\n* Be more explicit about expiration and URL sharing\n\n* Allow favicon.ico.  robots.txt; better logging\n\n* Remove TODO from comment\n\n* Consider resource root URL only set if the Jenkins root URL is set\n\n* Improve form validation\n\n* Clean up form validation warnings a bit\n\n* Fix null handling (even though it'll never be called that way)\n\n* Simpler logging statement after code review\n\n* It's nicer to read this way\n\n* Use the proper API for this with less string magic\n\n* Update TODO comments\n\n* Simplify log statement\n\n* Use base64 instead of hexadecimal for shorter URLs\n\n* Open link to Wikipedia in new tab/window\n\n* Serve directory indexes\n\n* Fix target of redirect in admin monitor\n\n* Update TODO comments in test to current implementation\n\n* Include link to parent directory unless in top level directory\n\n* Update validation message when we cannot determine instance identity\n\n* Improve tests\n\n* Fix permission exception.  further improve tests\n\n* Annotation was redundant\n\n* Add test for resource domain monitor activation\n\n* Do not go through hex encoding/decoding\n\n* Address review comments\n\nCo-Authored-By: Jesse Glick <jglick@cloudbees.com>\n\n* Address further review feedback\n\n* Better logging.  handle exception when the user is gone\n\n* Only get the bytes once\n\n* Inline help improvements\n\nCo-Authored-By: Jeff Thompson <jeffret.g@gmail.com>\n","date":"2019-10-11 15:41:32","modifiedFileCount":"2","status":"B","submitter":"Daniel Beck"},{"authorTime":"2019-10-11 15:41:32","codes":[{"authorDate":"2020-01-20 21:55:10","commitOrder":2,"curCode":"    public void secondDomainBasics() throws Exception {\n        JenkinsRule.WebClient webClient = j.createWebClient();\n\n        { \r\n            Page page = webClient.goTo(\"userContent\");\n            Assert.assertEquals(\"successful request\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertTrue(\"still on the original URL\", page.getUrl().toString().contains(\"/userContent\"));\n            Assert.assertTrue(\"web page\", page.isHtmlPage());\n            Assert.assertTrue(\"complex web page\", page.getWebResponse().getContentAsString().contains(\"javascript\"));\n        }\n\n        String resourceResponseUrl;\n        { \r\n            webClient.setRedirectEnabled(true);\n            Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n\n        { \r\n            Page page = webClient.getPage(resourceResponseUrl);\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n\n        { \r\n            webClient.setRedirectEnabled(false);\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.getPage(resourceResponseUrl.replace(\"readme.txt\", \"\"));\n            Assert.assertEquals(\"directory listing response\", 200, page.getWebResponse().getStatusCode());\n            String responseContent = page.getWebResponse().getContentAsString();\n            Assert.assertTrue(\"directory listing shown\", responseContent.contains(\"readme.txt\"));\n            Assert.assertTrue(\"is HTML\", responseContent.contains(\"href=\"));\n        }\n\n        String resourceRootUrl = ResourceDomainConfiguration.get().getUrl();\n        {\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.getPage(resourceRootUrl);\n            Assert.assertEquals(\"resource root URL response is 404\", 404, page.getWebResponse().getStatusCode());\n        }\n\n        {\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.getPage(resourceRootUrl + \"/static-files/\");\n            Assert.assertEquals(\"resource action index page response is 404\", 404, page.getWebResponse().getStatusCode());\n        }\n\n        { \r\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            String uuid = UUID.randomUUID().toString();\n            Page page = webClient.getPage(resourceRootUrl + \"static-files/\" + uuid);\n            Assert.assertEquals(\"resource response is 404\", 404, page.getWebResponse().getStatusCode());\n            Assert.assertTrue(\"response URL is still the same\", page.getUrl().toString().contains(uuid));\n        }\n\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        { \r\n            webClient.withRedirectEnabled(false).withThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.getPage(resourceResponseUrl);\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response failed\", 403, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n        }\n\n        a.grant(Jenkins.READ).onRoot().to(\"anonymous\");\n\n        { \r\n            Page page = webClient.getPage(resourceResponseUrl);\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n    }\n","date":"2020-01-20 21:55:10","endLine":137,"groupId":"10621","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"secondDomainBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5c/5c335eb2296ccb4dede335bb47cb5f589ccd22.src","preCode":"    public void secondDomainBasics() throws Exception {\n        JenkinsRule.WebClient webClient = j.createWebClient();\n\n        { \r\n            Page page = webClient.goTo(\"userContent\");\n            Assert.assertEquals(\"successful request\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertTrue(\"still on the original URL\", page.getUrl().toString().contains(\"/userContent\"));\n            Assert.assertTrue(\"web page\", page.isHtmlPage());\n            Assert.assertTrue(\"complex web page\", page.getWebResponse().getContentAsString().contains(\"javascript\"));\n        }\n\n        String resourceResponseUrl;\n        { \r\n            webClient.setRedirectEnabled(true);\n            Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n\n        { \r\n            Page page = webClient.getPage(resourceResponseUrl);\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n\n        { \r\n            webClient.setRedirectEnabled(false);\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.getPage(resourceResponseUrl.replace(\"readme.txt\", \"\"));\n            Assert.assertEquals(\"directory listing response\", 200, page.getWebResponse().getStatusCode());\n            String responseContent = page.getWebResponse().getContentAsString();\n            Assert.assertTrue(\"directory listing shown\", responseContent.contains(\"readme.txt\"));\n            Assert.assertTrue(\"is HTML\", responseContent.contains(\"href=\"));\n        }\n\n        String resourceRootUrl = ResourceDomainConfiguration.get().getUrl();\n        {\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.getPage(resourceRootUrl);\n            Assert.assertEquals(\"resource root URL response is 404\", 404, page.getWebResponse().getStatusCode());\n        }\n\n        {\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.getPage(resourceRootUrl + \"/static-files\");\n            Assert.assertEquals(\"resource action index page response is 404\", 404, page.getWebResponse().getStatusCode());\n        }\n\n        { \r\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            String uuid = UUID.randomUUID().toString();\n            Page page = webClient.getPage(resourceRootUrl + \"static-files/\" + uuid);\n            Assert.assertEquals(\"resource response is 404\", 404, page.getWebResponse().getStatusCode());\n            Assert.assertTrue(\"response URL is still the same\", page.getUrl().toString().contains(uuid));\n        }\n\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        { \r\n            webClient.withRedirectEnabled(false).withThrowExceptionOnFailingStatusCode(false);\n            Page page = webClient.getPage(resourceResponseUrl);\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response failed\", 403, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n        }\n\n        a.grant(Jenkins.READ).onRoot().to(\"anonymous\");\n\n        { \r\n            Page page = webClient.getPage(resourceResponseUrl);\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2019-10-11 15:41:32","commitOrder":2,"curCode":"    public void clearRootUrl() throws Exception {\n        JenkinsLocationConfiguration.get().setUrl(null);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n\n        String resourceResponseUrl;\n        {\n            webClient.setRedirectEnabled(true);\n            Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNotNull(\"CSP headers set\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertFalse(\"Not served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertFalse(\"Not served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n            Assert.assertTrue(\"Original URL\", resourceResponseUrl.contains(\"userContent/readme.txt\"));\n        }\n\n    }\n","date":"2019-10-11 15:41:32","endLine":150,"groupId":"10621","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"clearRootUrl","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/86/333d23d75f71c49fae8a5f777a6cfbc1e21585.src","preCode":"    public void clearRootUrl() throws Exception {\n        JenkinsLocationConfiguration.get().setUrl(null);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n\n        String resourceResponseUrl;\n        {\n            webClient.setRedirectEnabled(true);\n            Page page = webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n            resourceResponseUrl = page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNotNull(\"CSP headers set\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertFalse(\"Not served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertFalse(\"Not served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n            Assert.assertTrue(\"Original URL\", resourceResponseUrl.contains(\"userContent/readme.txt\"));\n        }\n\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"}],"commitId":"574ec6e5bdf2e4ac9394e290fefff5ac1c9a5c96","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2020-01-20 21:55:10","modifiedFileCount":"193","status":"M","submitter":"Wadeck Follonier"}]
