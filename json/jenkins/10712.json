[{"authorTime":"2013-04-13 08:53:51","codes":[{"authorDate":"2013-04-13 08:53:51","commitOrder":1,"curCode":"    public void testDoCheckViewName_GoodName() throws Exception {\n        String[] viewNames = new String[] {\n            \"\", \"Jenkins\"    \n        };\n        \n        Jenkins jenkins = Jenkins.getInstance();\n        for (String viewName : viewNames) {\n            FormValidation v = jenkins.doCheckViewName(viewName);\n            Assert.assertEquals(FormValidation.Kind.OK, v.kind);\n        }\n    }\n","date":"2013-04-13 08:53:51","endLine":188,"groupId":"6001","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoCheckViewName_GoodName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/46/700d51957d1300f451ec7a4700f81045381188.src","preCode":"    public void testDoCheckViewName_GoodName() throws Exception {\n        String[] viewNames = new String[] {\n            \"\", \"Jenkins\"    \n        };\n        \n        Jenkins jenkins = Jenkins.getInstance();\n        for (String viewName : viewNames) {\n            FormValidation v = jenkins.doCheckViewName(viewName);\n            Assert.assertEquals(FormValidation.Kind.OK, v.kind);\n        }\n    }\n","realPath":"test/src/test/java/jenkins/model/JenkinsTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"B"},{"authorDate":"2013-04-13 08:53:51","commitOrder":1,"curCode":"    public void testDoCheckViewName_NotGoodName() throws Exception {\n        String[] viewNames = new String[] {\n            \"Jenkins?\", \"Jenkins*\", \"Jenkin/s\", \"Jenkin\\\\s\", \"jenkins%\", \n            \"Jenkins!\", \"Jenkins[]\", \"Jenkin<>s\", \"^Jenkins\", \"..\"    \n        };\n        \n        Jenkins jenkins = Jenkins.getInstance();\n        \n        for (String viewName : viewNames) {\n            FormValidation v = jenkins.doCheckViewName(viewName);\n            Assert.assertEquals(FormValidation.Kind.ERROR, v.kind);\n        }\n    }\n","date":"2013-04-13 08:53:51","endLine":203,"groupId":"9069","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDoCheckViewName_NotGoodName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/46/700d51957d1300f451ec7a4700f81045381188.src","preCode":"    public void testDoCheckViewName_NotGoodName() throws Exception {\n        String[] viewNames = new String[] {\n            \"Jenkins?\", \"Jenkins*\", \"Jenkin/s\", \"Jenkin\\\\s\", \"jenkins%\", \n            \"Jenkins!\", \"Jenkins[]\", \"Jenkin<>s\", \"^Jenkins\", \"..\"    \n        };\n        \n        Jenkins jenkins = Jenkins.getInstance();\n        \n        for (String viewName : viewNames) {\n            FormValidation v = jenkins.doCheckViewName(viewName);\n            Assert.assertEquals(FormValidation.Kind.ERROR, v.kind);\n        }\n    }\n","realPath":"test/src/test/java/jenkins/model/JenkinsTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"B"}],"commitId":"ac562d821a18e0155403ed166576928992bdca8b","commitMessage":"@@@check view name with ajax\n","date":"2013-04-13 08:53:51","modifiedFileCount":"2","status":"B","submitter":"ssogabe"},{"authorTime":"2015-01-09 09:11:09","codes":[{"authorDate":"2015-01-09 09:11:09","commitOrder":2,"curCode":"    public void testDoCheckViewName_GoodName() throws Exception {\n        String[] viewNames = new String[] {\n            \"\", \"Jenkins\"    \n        };\n        \n        Jenkins jenkins = Jenkins.getInstance();\n        for (String viewName : viewNames) {\n            FormValidation v = jenkins.doCheckViewName(viewName);\n            assertEquals(FormValidation.Kind.OK, v.kind);\n        }\n    }\n","date":"2015-01-09 09:11:09","endLine":210,"groupId":"6001","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoCheckViewName_GoodName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/cf/bdc53e10c4ce803313552b2b8ac0226444c2f8.src","preCode":"    public void testDoCheckViewName_GoodName() throws Exception {\n        String[] viewNames = new String[] {\n            \"\", \"Jenkins\"    \n        };\n        \n        Jenkins jenkins = Jenkins.getInstance();\n        for (String viewName : viewNames) {\n            FormValidation v = jenkins.doCheckViewName(viewName);\n            Assert.assertEquals(FormValidation.Kind.OK, v.kind);\n        }\n    }\n","realPath":"test/src/test/java/jenkins/model/JenkinsTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"},{"authorDate":"2015-01-09 09:11:09","commitOrder":2,"curCode":"    public void testDoCheckViewName_NotGoodName() throws Exception {\n        String[] viewNames = new String[] {\n            \"Jenkins?\", \"Jenkins*\", \"Jenkin/s\", \"Jenkin\\\\s\", \"jenkins%\", \n            \"Jenkins!\", \"Jenkins[]\", \"Jenkin<>s\", \"^Jenkins\", \"..\"    \n        };\n        \n        Jenkins jenkins = Jenkins.getInstance();\n        \n        for (String viewName : viewNames) {\n            FormValidation v = jenkins.doCheckViewName(viewName);\n            assertEquals(FormValidation.Kind.ERROR, v.kind);\n        }\n    }\n","date":"2015-01-09 09:11:09","endLine":225,"groupId":"9069","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDoCheckViewName_NotGoodName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/cf/bdc53e10c4ce803313552b2b8ac0226444c2f8.src","preCode":"    public void testDoCheckViewName_NotGoodName() throws Exception {\n        String[] viewNames = new String[] {\n            \"Jenkins?\", \"Jenkins*\", \"Jenkin/s\", \"Jenkin\\\\s\", \"jenkins%\", \n            \"Jenkins!\", \"Jenkins[]\", \"Jenkin<>s\", \"^Jenkins\", \"..\"    \n        };\n        \n        Jenkins jenkins = Jenkins.getInstance();\n        \n        for (String viewName : viewNames) {\n            FormValidation v = jenkins.doCheckViewName(viewName);\n            Assert.assertEquals(FormValidation.Kind.ERROR, v.kind);\n        }\n    }\n","realPath":"test/src/test/java/jenkins/model/JenkinsTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"28984e5920c606a0ca3c3dbc6bc525b98c2d01d7","commitMessage":"@@@Merge pull request #1521 from darxriggs/consistent-use-of-Assert\n\nstatically import methods used from org.junit.Assert","date":"2015-01-09 09:11:09","modifiedFileCount":"20","status":"M","submitter":"Jesse Glick"},{"authorTime":"2019-07-03 02:02:48","codes":[{"authorDate":"2019-07-03 02:02:48","commitOrder":3,"curCode":"    public void testDoCheckViewName_GoodName() throws Exception {\n        String[] viewNames = new String[] {\n            \"\", \"Jenkins\"    \n        };\n        \n        Jenkins jenkins = Jenkins.get();\n        for (String viewName : viewNames) {\n            FormValidation v = jenkins.doCheckViewName(viewName);\n            assertEquals(FormValidation.Kind.OK, v.kind);\n        }\n    }\n","date":"2019-07-03 02:02:48","endLine":265,"groupId":"10712","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoCheckViewName_GoodName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/17/1f7d133f875bfc86e4d08e5210d0d3b28440b1.src","preCode":"    public void testDoCheckViewName_GoodName() throws Exception {\n        String[] viewNames = new String[] {\n            \"\", \"Jenkins\"    \n        };\n        \n        Jenkins jenkins = Jenkins.getInstance();\n        for (String viewName : viewNames) {\n            FormValidation v = jenkins.doCheckViewName(viewName);\n            assertEquals(FormValidation.Kind.OK, v.kind);\n        }\n    }\n","realPath":"test/src/test/java/jenkins/model/JenkinsTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"M"},{"authorDate":"2019-07-03 02:02:48","commitOrder":3,"curCode":"    public void testDoCheckViewName_NotGoodName() throws Exception {\n        String[] viewNames = new String[] {\n            \"Jenkins?\", \"Jenkins*\", \"Jenkin/s\", \"Jenkin\\\\s\", \"jenkins%\", \n            \"Jenkins!\", \"Jenkins[]\", \"Jenkin<>s\", \"^Jenkins\", \"..\"    \n        };\n        \n        Jenkins jenkins = Jenkins.get();\n        \n        for (String viewName : viewNames) {\n            FormValidation v = jenkins.doCheckViewName(viewName);\n            assertEquals(FormValidation.Kind.ERROR, v.kind);\n        }\n    }\n","date":"2019-07-03 02:02:48","endLine":280,"groupId":"10712","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDoCheckViewName_NotGoodName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/17/1f7d133f875bfc86e4d08e5210d0d3b28440b1.src","preCode":"    public void testDoCheckViewName_NotGoodName() throws Exception {\n        String[] viewNames = new String[] {\n            \"Jenkins?\", \"Jenkins*\", \"Jenkin/s\", \"Jenkin\\\\s\", \"jenkins%\", \n            \"Jenkins!\", \"Jenkins[]\", \"Jenkin<>s\", \"^Jenkins\", \"..\"    \n        };\n        \n        Jenkins jenkins = Jenkins.getInstance();\n        \n        for (String viewName : viewNames) {\n            FormValidation v = jenkins.doCheckViewName(viewName);\n            assertEquals(FormValidation.Kind.ERROR, v.kind);\n        }\n    }\n","realPath":"test/src/test/java/jenkins/model/JenkinsTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"}],"commitId":"494119294fa2f095b4a28db0dd32c0d2092d9fa1","commitMessage":"@@@Merge commit '4404c6e662befe16e8daa1ea7a412df73b370086' of github.com:jenkinsci/jenkins\n","date":"2019-07-03 02:02:48","modifiedFileCount":"292","status":"M","submitter":"Jeff Thompson"}]
