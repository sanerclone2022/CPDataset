[{"authorTime":"2020-03-05 02:00:47","codes":[{"authorDate":"2019-11-02 21:45:28","commitOrder":2,"curCode":"    public void requireSystemDuringStart() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());\n        String pluginShortName = \"require-system-during-load\";\n        dynamicLoad(pluginShortName + \".hpi\");\n        try (ACLContext context = ACL.as(User.getById(\"underprivileged\", true).impersonate())) {\n            r.jenkins.pluginManager.start(Collections.singletonList(r.jenkins.pluginManager.getPlugin(pluginShortName)));\n        }\n    }\n","date":"2019-11-02 21:45:28","endLine":476,"groupId":"3584","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"requireSystemDuringStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/53/5587df864b55d45a9d760178529d24647a14c7.src","preCode":"    public void requireSystemDuringStart() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());\n        String pluginShortName = \"require-system-during-load\";\n        dynamicLoad(pluginShortName + \".hpi\");\n        try (ACLContext context = ACL.as(User.getById(\"underprivileged\", true).impersonate())) {\n            r.jenkins.pluginManager.start(Collections.singletonList(r.jenkins.pluginManager.getPlugin(pluginShortName)));\n        }\n    }\n","realPath":"test/src/test/java/hudson/PluginManagerTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":468,"status":"NB"},{"authorDate":"2020-03-05 02:00:47","commitOrder":2,"curCode":"    public void requireSystemInInitializer() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());\n        String pluginShortName = \"require-system-in-initializer\";\n        dynamicLoad(pluginShortName + \".jpi\");\n        try (ACLContext context = ACL.as(User.getById(\"underprivileged\", true).impersonate())) {\n            r.jenkins.pluginManager.start(Collections.singletonList(r.jenkins.pluginManager.getPlugin(pluginShortName)));\n        }\n    }\n","date":"2020-03-05 02:00:47","endLine":516,"groupId":"3585","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"requireSystemInInitializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/bb/9ce486b828ab27f85a6253ea1ab9060675533d.src","preCode":"    public void requireSystemInInitializer() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());\n        String pluginShortName = \"require-system-in-initializer\";\n        dynamicLoad(pluginShortName + \".jpi\");\n        try (ACLContext context = ACL.as(User.getById(\"underprivileged\", true).impersonate())) {\n            r.jenkins.pluginManager.start(Collections.singletonList(r.jenkins.pluginManager.getPlugin(pluginShortName)));\n        }\n    }\n","realPath":"test/src/test/java/hudson/PluginManagerTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":508,"status":"B"}],"commitId":"07bcd1fe597250c30397ee0d1e15f00e8fbf7ffc","commitMessage":"@@@Merge commit '7f8de3ce8a8326c83fe85e14489baacab38241ce' of https://github.com/jenkinsci/jenkins\n","date":"2020-03-05 02:00:47","modifiedFileCount":"119","status":"M","submitter":"Daniel Beck"},{"authorTime":"2020-11-07 02:30:25","codes":[{"authorDate":"2020-11-07 02:30:25","commitOrder":3,"curCode":"    public void requireSystemDuringStart() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());\n        String pluginShortName = \"require-system-during-load\";\n        dynamicLoad(pluginShortName + \".hpi\");\n        try (ACLContext context = ACL.as2(User.getById(\"underprivileged\", true).impersonate2())) {\n            r.jenkins.pluginManager.start(Collections.singletonList(r.jenkins.pluginManager.getPlugin(pluginShortName)));\n        }\n    }\n","date":"2020-11-07 02:30:25","endLine":512,"groupId":"10330","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"requireSystemDuringStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/34/3408909a3e1a3ca9a1b651dd2ccf5f42cee71b.src","preCode":"    public void requireSystemDuringStart() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());\n        String pluginShortName = \"require-system-during-load\";\n        dynamicLoad(pluginShortName + \".hpi\");\n        try (ACLContext context = ACL.as(User.getById(\"underprivileged\", true).impersonate())) {\n            r.jenkins.pluginManager.start(Collections.singletonList(r.jenkins.pluginManager.getPlugin(pluginShortName)));\n        }\n    }\n","realPath":"test/src/test/java/hudson/PluginManagerTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":504,"status":"M"},{"authorDate":"2020-11-07 02:30:25","commitOrder":3,"curCode":"    public void requireSystemInInitializer() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());\n        String pluginShortName = \"require-system-in-initializer\";\n        dynamicLoad(pluginShortName + \".jpi\");\n        try (ACLContext context = ACL.as2(User.getById(\"underprivileged\", true).impersonate2())) {\n            r.jenkins.pluginManager.start(Collections.singletonList(r.jenkins.pluginManager.getPlugin(pluginShortName)));\n        }\n    }\n","date":"2020-11-07 02:30:25","endLine":524,"groupId":"10330","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"requireSystemInInitializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/34/3408909a3e1a3ca9a1b651dd2ccf5f42cee71b.src","preCode":"    public void requireSystemInInitializer() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());\n        String pluginShortName = \"require-system-in-initializer\";\n        dynamicLoad(pluginShortName + \".jpi\");\n        try (ACLContext context = ACL.as(User.getById(\"underprivileged\", true).impersonate())) {\n            r.jenkins.pluginManager.start(Collections.singletonList(r.jenkins.pluginManager.getPlugin(pluginShortName)));\n        }\n    }\n","realPath":"test/src/test/java/hudson/PluginManagerTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"M"}],"commitId":"a9ca5ef3d4c97937636bf3c585f4232514279b14","commitMessage":"@@@[JEP-227] Replace Acegi Security with Spring Security & upgrade Spring Framework (#4848)\n\nReplacing Acegi Security with Spring Security\n\nCo-authored-by: Tim Jacomb <timjacomb1+github@gmail.com>\nCo-authored-by: James Nord <jtnord@users.noreply.github.com>","date":"2020-11-07 02:30:25","modifiedFileCount":"149","status":"M","submitter":"Jesse Glick"}]
