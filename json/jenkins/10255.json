[{"authorTime":"2015-06-09 18:55:52","codes":[{"authorDate":"2015-06-09 18:55:52","commitOrder":1,"curCode":"    @Test public void deleteJobShouldFailWithoutJobDeletePermission() throws IOException {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(-1));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"user is missing the Job/Delete permission\"));\n    }\n","date":"2015-06-09 18:55:52","endLine":66,"groupId":"3982","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteJobShouldFailWithoutJobDeletePermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e8/621a5f8e528f8208fb6a7b5b9390bec682a102.src","preCode":"    @Test public void deleteJobShouldFailWithoutJobDeletePermission() throws IOException {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(-1));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"user is missing the Job/Delete permission\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/DeleteJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"B"},{"authorDate":"2015-06-09 18:55:52","commitOrder":1,"curCode":"    @Test public void deleteJobShouldFailWithoutJobReadPermission() throws IOException {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(-1));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"No such job 'aProject'\"));\n    }\n","date":"2015-06-09 18:55:52","endLine":79,"groupId":"7626","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteJobShouldFailWithoutJobReadPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e8/621a5f8e528f8208fb6a7b5b9390bec682a102.src","preCode":"    @Test public void deleteJobShouldFailWithoutJobReadPermission() throws IOException {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(-1));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"No such job 'aProject'\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/DeleteJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"}],"commitId":"0e846fca9fb850ffc242bb016c6e9e16aa3a1626","commitMessage":"@@@Merge pull request #1704 from pjanouse/JENKINS-28041\n\n[FIXED JENKINS-28041] - Allow delete-* CLI commands to operate on multiple arguments\n","date":"2015-06-09 18:55:52","modifiedFileCount":"5","status":"B","submitter":"Oliver Gond?a"},{"authorTime":"2016-02-19 22:53:15","codes":[{"authorDate":"2016-02-19 22:53:15","commitOrder":2,"curCode":"    @Test public void deleteJobShouldFailWithoutJobDeletePermission() throws IOException {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the Job/Delete permission\"));\n    }\n","date":"2016-02-19 22:53:15","endLine":68,"groupId":"3982","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteJobShouldFailWithoutJobDeletePermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/1b/f3622f9929cd98ea65cbaa64204356b207946e.src","preCode":"    @Test public void deleteJobShouldFailWithoutJobDeletePermission() throws IOException {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(-1));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"user is missing the Job/Delete permission\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/DeleteJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2016-02-19 22:53:15","commitOrder":2,"curCode":"    @Test public void deleteJobShouldFailWithoutJobReadPermission() throws IOException {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job 'aProject'\"));\n    }\n","date":"2016-02-19 22:53:15","endLine":81,"groupId":"7626","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteJobShouldFailWithoutJobReadPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/1b/f3622f9929cd98ea65cbaa64204356b207946e.src","preCode":"    @Test public void deleteJobShouldFailWithoutJobReadPermission() throws IOException {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(-1));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"No such job 'aProject'\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/DeleteJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"fe41dc89ab9801c9d57713f84e650788e172e115","commitMessage":"@@@Merge pull request #1997 from pjanouse/JENKINS-32273\n\n[JENKINS-32273] Unified an issue handling in CLI\n","date":"2016-02-19 22:53:15","modifiedFileCount":"50","status":"M","submitter":"Oliver Gond?a"},{"authorTime":"2021-04-20 04:54:17","codes":[{"authorDate":"2021-04-20 04:54:17","commitOrder":3,"curCode":"    @Test public void deleteJobShouldFailWithoutJobDeletePermission() throws IOException {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Item.READ, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the Job/Delete permission\"));\n    }\n","date":"2021-04-20 04:54:17","endLine":68,"groupId":"10255","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"deleteJobShouldFailWithoutJobDeletePermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/7f/33d7ca2a0b93da5bb392d93e68516306798dc9.src","preCode":"    @Test public void deleteJobShouldFailWithoutJobDeletePermission() throws IOException {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.READ, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the Job/Delete permission\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/DeleteJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2021-04-20 04:54:17","commitOrder":3,"curCode":"    @Test public void deleteJobShouldFailWithoutJobReadPermission() throws IOException {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Item.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job 'aProject'\"));\n    }\n","date":"2021-04-20 04:54:17","endLine":81,"groupId":"10255","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"deleteJobShouldFailWithoutJobReadPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/7f/33d7ca2a0b93da5bb392d93e68516306798dc9.src","preCode":"    @Test public void deleteJobShouldFailWithoutJobReadPermission() throws IOException {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Job.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job 'aProject'\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/DeleteJobCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"0fd55bd6b50fcdf27368c6b771fb3d8363a24f83","commitMessage":"@@@Merge pull request #5419 from basil/subtypes\n\nUse declaring class as qualifier","date":"2021-04-20 04:54:17","modifiedFileCount":"43","status":"M","submitter":"Oleg Nenashev"}]
