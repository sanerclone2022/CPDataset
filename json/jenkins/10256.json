[{"authorTime":"2017-02-27 05:17:05","codes":[{"authorDate":"2018-08-19 21:37:54","commitOrder":3,"curCode":"    @Test public void consoleShouldBeAccessibleForUserWithRead() throws Exception {\t\n        FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\t\n        if (Functions.isWindows()) {\n            project.getBuildersList().add(new BatchFile(\"echo 1\"));\n        } else {\n            project.getBuildersList().add(new Shell(\"echo 1\"));\n        }\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        \n        final CLICommandInvoker.Result result = command\t\n                .authorizedTo(Jenkins.READ, Job.READ)\t\n                .invokeWithArgs(\"aProject\");\t\n        \n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"echo 1\"));\t\n    }\n","date":"2018-08-19 21:37:54","endLine":101,"groupId":"2235","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"consoleShouldBeAccessibleForUserWithRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/3c/0682d2d897c508807f105c8a312738badade99.src","preCode":"    @Test public void consoleShouldBeAccessibleForUserWithRead() throws Exception {\t\n        FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\t\n        if (Functions.isWindows()) {\n            project.getBuildersList().add(new BatchFile(\"echo 1\"));\n        } else {\n            project.getBuildersList().add(new Shell(\"echo 1\"));\n        }\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        \n        final CLICommandInvoker.Result result = command\t\n                .authorizedTo(Jenkins.READ, Job.READ)\t\n                .invokeWithArgs(\"aProject\");\t\n        \n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"echo 1\"));\t\n    }\n","realPath":"test/src/test/java/hudson/cli/ConsoleCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"},{"authorDate":"2017-02-27 05:17:05","commitOrder":3,"curCode":"    @Test public void consoleShouldSuccessWithLastBuild() throws Exception {\n\n        FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        if (Functions.isWindows()) {\n            project.getBuildersList().add(new BatchFile(\"echo 1\"));\n        } else {\n            project.getBuildersList().add(new Shell(\"echo 1\"));\n        }\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Job.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"echo 1\"));\n    }\n","date":"2017-02-27 05:17:05","endLine":174,"groupId":"2235","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"consoleShouldSuccessWithLastBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/1f/4033e0c2d7ff9bdf88dbce9f948ad53f8fab1a.src","preCode":"    @Test public void consoleShouldSuccessWithLastBuild() throws Exception {\n\n        FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        if (Functions.isWindows()) {\n            project.getBuildersList().add(new BatchFile(\"echo 1\"));\n        } else {\n            project.getBuildersList().add(new Shell(\"echo 1\"));\n        }\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Job.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"echo 1\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ConsoleCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"NB"}],"commitId":"c926d5b79f4bdd8b9e744035473a20f5ceb4926c","commitMessage":"@@@Merge pull request #3527 from ericyu2018/JENKINS-52181\n\nFix JENKINS-52181 about permission issue when using cli to get console","date":"2018-08-19 21:37:54","modifiedFileCount":"2","status":"M","submitter":"Oleg Nenashev"},{"authorTime":"2021-04-20 04:54:17","codes":[{"authorDate":"2021-04-20 04:54:17","commitOrder":4,"curCode":"    @Test public void consoleShouldBeAccessibleForUserWithRead() throws Exception {\t\n        FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\t\n        if (Functions.isWindows()) {\n            project.getBuildersList().add(new BatchFile(\"echo 1\"));\n        } else {\n            project.getBuildersList().add(new Shell(\"echo 1\"));\n        }\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        \n        final CLICommandInvoker.Result result = command\t\n                .authorizedTo(Jenkins.READ, Item.READ)\t\n                .invokeWithArgs(\"aProject\");\t\n        \n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"echo 1\"));\t\n    }\n","date":"2021-04-20 04:54:17","endLine":95,"groupId":"10256","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"consoleShouldBeAccessibleForUserWithRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/81/922f42fdde1d3982ae8b212a0c8f63de445592.src","preCode":"    @Test public void consoleShouldBeAccessibleForUserWithRead() throws Exception {\t\n        FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\t\n        if (Functions.isWindows()) {\n            project.getBuildersList().add(new BatchFile(\"echo 1\"));\n        } else {\n            project.getBuildersList().add(new Shell(\"echo 1\"));\n        }\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n        \n        final CLICommandInvoker.Result result = command\t\n                .authorizedTo(Jenkins.READ, Job.READ)\t\n                .invokeWithArgs(\"aProject\");\t\n        \n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"echo 1\"));\t\n    }\n","realPath":"test/src/test/java/hudson/cli/ConsoleCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2021-04-20 04:54:17","commitOrder":4,"curCode":"    @Test public void consoleShouldSuccessWithLastBuild() throws Exception {\n\n        FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        if (Functions.isWindows()) {\n            project.getBuildersList().add(new BatchFile(\"echo 1\"));\n        } else {\n            project.getBuildersList().add(new Shell(\"echo 1\"));\n        }\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Item.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"echo 1\"));\n    }\n","date":"2021-04-20 04:54:17","endLine":174,"groupId":"10256","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"consoleShouldSuccessWithLastBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/81/922f42fdde1d3982ae8b212a0c8f63de445592.src","preCode":"    @Test public void consoleShouldSuccessWithLastBuild() throws Exception {\n\n        FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        if (Functions.isWindows()) {\n            project.getBuildersList().add(new BatchFile(\"echo 1\"));\n        } else {\n            project.getBuildersList().add(new Shell(\"echo 1\"));\n        }\n        assertThat(project.scheduleBuild2(0).get().getLog(), containsString(\"echo 1\"));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Job.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"echo 1\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ConsoleCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"0fd55bd6b50fcdf27368c6b771fb3d8363a24f83","commitMessage":"@@@Merge pull request #5419 from basil/subtypes\n\nUse declaring class as qualifier","date":"2021-04-20 04:54:17","modifiedFileCount":"43","status":"M","submitter":"Oleg Nenashev"}]
