[{"authorTime":"2019-01-14 21:08:51","codes":[{"authorDate":"2019-01-14 21:08:51","commitOrder":1,"curCode":"    public void testForceRemoveDirectoryContents_LockedFile() throws Exception {\n        assumeTrue(Functions.isWindows());\n        File dir = tmp.newFolder();\n        File d1 = new File(dir, \"d1\");\n        File d2 = new File(dir, \"d2\");\n        File f1 = new File(dir, \"f1\");\n        File d1f1 = new File(d1, \"d1f1\");\n        File d2f2 = new File(d2, \"d1f2\");\n        mkdirs(d1, d2);\n        touchWithFileName(f1, d1f1, d2f2);\n        locker.acquireLock(d1f1);\n        PathRemover remover = PathRemover.newRemoverWithStrategy(retriesAttempted -> retriesAttempted < 1);\n        expectedException.expectMessage(allOf(\n                containsString(dir.getPath()),\n                containsString(\"Tried 1 time.\")\n        ));\n        remover.forceRemoveDirectoryContents(dir.toPath());\n        assertFalse(d2.exists());\n        assertFalse(f1.exists());\n        assertFalse(d2f2.exists());\n    }\n","date":"2019-01-14 21:08:51","endLine":184,"groupId":"1986","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testForceRemoveDirectoryContents_LockedFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/55/c7970424f68e4ba2ce7fb8765b4d096c97d40c.src","preCode":"    public void testForceRemoveDirectoryContents_LockedFile() throws Exception {\n        assumeTrue(Functions.isWindows());\n        File dir = tmp.newFolder();\n        File d1 = new File(dir, \"d1\");\n        File d2 = new File(dir, \"d2\");\n        File f1 = new File(dir, \"f1\");\n        File d1f1 = new File(d1, \"d1f1\");\n        File d2f2 = new File(d2, \"d1f2\");\n        mkdirs(d1, d2);\n        touchWithFileName(f1, d1f1, d2f2);\n        locker.acquireLock(d1f1);\n        PathRemover remover = PathRemover.newRemoverWithStrategy(retriesAttempted -> retriesAttempted < 1);\n        expectedException.expectMessage(allOf(\n                containsString(dir.getPath()),\n                containsString(\"Tried 1 time.\")\n        ));\n        remover.forceRemoveDirectoryContents(dir.toPath());\n        assertFalse(d2.exists());\n        assertFalse(f1.exists());\n        assertFalse(d2f2.exists());\n    }\n","realPath":"core/src/test/java/jenkins/util/io/PathRemoverTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"B"},{"authorDate":"2019-01-14 21:08:51","commitOrder":1,"curCode":"    public void testForceRemoveRecursive_DeletesAsMuchAsPossibleWithLockedFiles() throws Exception {\n        assumeTrue(Functions.isWindows());\n        File dir = tmp.newFolder();\n        File d1 = new File(dir, \"d1\");\n        File d2 = new File(dir, \"d2\");\n        File f1 = new File(dir, \"f1\");\n        File d1f1 = new File(d1, \"d1f1\");\n        File d2f2 = new File(d2, \"d1f2\");\n        mkdirs(d1, d2);\n        touchWithFileName(f1, d1f1, d2f2);\n\n        locker.acquireLock(d1f1);\n        PathRemover remover = PathRemover.newSimpleRemover();\n        expectedException.expectMessage(containsString(dir.getPath()));\n        remover.forceRemoveRecursive(dir.toPath());\n        assertTrue(dir.exists());\n        assertTrue(d1.exists());\n        assertTrue(d1f1.exists());\n        assertFalse(d2.exists());\n        assertFalse(d2f2.exists());\n        assertFalse(f1.exists());\n    }\n","date":"2019-01-14 21:08:51","endLine":225,"groupId":"1986","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testForceRemoveRecursive_DeletesAsMuchAsPossibleWithLockedFiles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/55/c7970424f68e4ba2ce7fb8765b4d096c97d40c.src","preCode":"    public void testForceRemoveRecursive_DeletesAsMuchAsPossibleWithLockedFiles() throws Exception {\n        assumeTrue(Functions.isWindows());\n        File dir = tmp.newFolder();\n        File d1 = new File(dir, \"d1\");\n        File d2 = new File(dir, \"d2\");\n        File f1 = new File(dir, \"f1\");\n        File d1f1 = new File(d1, \"d1f1\");\n        File d2f2 = new File(d2, \"d1f2\");\n        mkdirs(d1, d2);\n        touchWithFileName(f1, d1f1, d2f2);\n\n        locker.acquireLock(d1f1);\n        PathRemover remover = PathRemover.newSimpleRemover();\n        expectedException.expectMessage(containsString(dir.getPath()));\n        remover.forceRemoveRecursive(dir.toPath());\n        assertTrue(dir.exists());\n        assertTrue(d1.exists());\n        assertTrue(d1f1.exists());\n        assertFalse(d2.exists());\n        assertFalse(d2f2.exists());\n        assertFalse(f1.exists());\n    }\n","realPath":"core/src/test/java/jenkins/util/io/PathRemoverTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"B"}],"commitId":"3210ff57748ebd8f9d10a01db145f9ab3efacaab","commitMessage":"@@@Merge commit '6d2eb679a6fccc53d32708cc23c5927201953248' into security-master\n","date":"2019-01-14 21:08:51","modifiedFileCount":"16","status":"B","submitter":"Wadeck Follonier"},{"authorTime":"2020-12-08 08:51:40","codes":[{"authorDate":"2020-12-08 08:51:40","commitOrder":2,"curCode":"    public void testForceRemoveDirectoryContents_LockedFile() throws Exception {\n        assumeTrue(Functions.isWindows());\n        File dir = tmp.newFolder();\n        File d1 = new File(dir, \"d1\");\n        File d2 = new File(dir, \"d2\");\n        File f1 = new File(dir, \"f1\");\n        File d1f1 = new File(d1, \"d1f1\");\n        File d2f2 = new File(d2, \"d1f2\");\n        mkdirs(d1, d2);\n        touchWithFileName(f1, d1f1, d2f2);\n        locker.acquireLock(d1f1);\n        PathRemover remover = PathRemover.newRemoverWithStrategy(retriesAttempted -> retriesAttempted < 1);\n        Exception e = assertThrows(IOException.class, () -> remover.forceRemoveDirectoryContents(dir.toPath()));\n        assertThat(e.getMessage(), allOf(containsString(dir.getPath()), containsString(\"Tried 1 time.\")));\n        assertFalse(d2.exists());\n        assertFalse(f1.exists());\n        assertFalse(d2f2.exists());\n    }\n","date":"2020-12-08 08:51:40","endLine":239,"groupId":"10913","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testForceRemoveDirectoryContents_LockedFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/3e/4bd1f4cd4975ed08fee4e3180672ad081f9ff5.src","preCode":"    public void testForceRemoveDirectoryContents_LockedFile() throws Exception {\n        assumeTrue(Functions.isWindows());\n        File dir = tmp.newFolder();\n        File d1 = new File(dir, \"d1\");\n        File d2 = new File(dir, \"d2\");\n        File f1 = new File(dir, \"f1\");\n        File d1f1 = new File(d1, \"d1f1\");\n        File d2f2 = new File(d2, \"d1f2\");\n        mkdirs(d1, d2);\n        touchWithFileName(f1, d1f1, d2f2);\n        locker.acquireLock(d1f1);\n        PathRemover remover = PathRemover.newRemoverWithStrategy(retriesAttempted -> retriesAttempted < 1);\n        expectedException.expectMessage(allOf(\n                containsString(dir.getPath()),\n                containsString(\"Tried 1 time.\")\n        ));\n        remover.forceRemoveDirectoryContents(dir.toPath());\n        assertFalse(d2.exists());\n        assertFalse(f1.exists());\n        assertFalse(d2f2.exists());\n    }\n","realPath":"core/src/test/java/jenkins/util/io/PathRemoverTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"},{"authorDate":"2020-12-08 08:51:40","commitOrder":2,"curCode":"    public void testForceRemoveRecursive_DeletesAsMuchAsPossibleWithLockedFiles() throws Exception {\n        assumeTrue(Functions.isWindows());\n        File dir = tmp.newFolder();\n        File d1 = new File(dir, \"d1\");\n        File d2 = new File(dir, \"d2\");\n        File f1 = new File(dir, \"f1\");\n        File d1f1 = new File(d1, \"d1f1\");\n        File d2f2 = new File(d2, \"d1f2\");\n        mkdirs(d1, d2);\n        touchWithFileName(f1, d1f1, d2f2);\n\n        locker.acquireLock(d1f1);\n        PathRemover remover = PathRemover.newSimpleRemover();\n        Exception e = assertThrows(IOException.class, () -> remover.forceRemoveRecursive(dir.toPath()));\n        assertThat(e.getMessage(), containsString(dir.getPath()));\n        assertTrue(dir.exists());\n        assertTrue(d1.exists());\n        assertTrue(d1f1.exists());\n        assertFalse(d2.exists());\n        assertFalse(d2f2.exists());\n        assertFalse(f1.exists());\n    }\n","date":"2020-12-08 08:51:40","endLine":280,"groupId":"10913","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testForceRemoveRecursive_DeletesAsMuchAsPossibleWithLockedFiles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/3e/4bd1f4cd4975ed08fee4e3180672ad081f9ff5.src","preCode":"    public void testForceRemoveRecursive_DeletesAsMuchAsPossibleWithLockedFiles() throws Exception {\n        assumeTrue(Functions.isWindows());\n        File dir = tmp.newFolder();\n        File d1 = new File(dir, \"d1\");\n        File d2 = new File(dir, \"d2\");\n        File f1 = new File(dir, \"f1\");\n        File d1f1 = new File(d1, \"d1f1\");\n        File d2f2 = new File(d2, \"d1f2\");\n        mkdirs(d1, d2);\n        touchWithFileName(f1, d1f1, d2f2);\n\n        locker.acquireLock(d1f1);\n        PathRemover remover = PathRemover.newSimpleRemover();\n        expectedException.expectMessage(containsString(dir.getPath()));\n        remover.forceRemoveRecursive(dir.toPath());\n        assertTrue(dir.exists());\n        assertTrue(d1.exists());\n        assertTrue(d1f1.exists());\n        assertFalse(d2.exists());\n        assertFalse(d2f2.exists());\n        assertFalse(f1.exists());\n    }\n","realPath":"core/src/test/java/jenkins/util/io/PathRemoverTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"}],"commitId":"9b4632f3536586eedaa626704967119f1bc89aba","commitMessage":"@@@Merge pull request #5101 from StefanSpieker/exception_none\n\nReplaced deprecated Exception.none with assertThrows","date":"2020-12-08 08:51:40","modifiedFileCount":"3","status":"M","submitter":"Oleg Nenashev"}]
