[{"authorTime":"2013-07-17 12:48:28","codes":[{"authorDate":"2013-07-17 12:48:28","commitOrder":1,"curCode":"    public void testGetAndGetAll() {\n        User user = User.get(\"John Smith\", false, Collections.emptyMap());\n        assertNull(\"User John Smith should not be created.\", user);\n        assertFalse(\"Jenkins should not contain user John Smith.\", User.getAll().contains(user));\n        User user2 = User.get(\"John Smith2\", true, Collections.emptyMap());\n        assertNotNull(\"User John Smith2 should be created.\", user2);\n        assertTrue(\"Jenkins should contain user John Smith2.\", User.getAll().contains(user2));\n        user = User.get(\"John Smith2\", false, Collections.emptyMap());\n        assertNotNull(\"User John Smith should be created.\", user);\n        assertTrue(\"Jenkins should contain user John Smith.\", User.getAll().contains(user));\n    }\n","date":"2013-07-17 12:48:28","endLine":200,"groupId":"9163","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetAndGetAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a6/acfdfa3361e4fc73439b56fd79145e1b11effd.src","preCode":"    public void testGetAndGetAll() {\n        User user = User.get(\"John Smith\", false, Collections.emptyMap());\n        assertNull(\"User John Smith should not be created.\", user);\n        assertFalse(\"Jenkins should not contain user John Smith.\", User.getAll().contains(user));\n        User user2 = User.get(\"John Smith2\", true, Collections.emptyMap());\n        assertNotNull(\"User John Smith2 should be created.\", user2);\n        assertTrue(\"Jenkins should contain user John Smith2.\", User.getAll().contains(user2));\n        user = User.get(\"John Smith2\", false, Collections.emptyMap());\n        assertNotNull(\"User John Smith should be created.\", user);\n        assertTrue(\"Jenkins should contain user John Smith.\", User.getAll().contains(user));\n    }\n","realPath":"test/src/test/java/hudson/model/UserTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"B"},{"authorDate":"2013-07-17 12:48:28","commitOrder":1,"curCode":"    public void testDelete() throws IOException {\n         User user = User.get(\"John Smith\", true, Collections.emptyMap());\n         user.save();\n         user.delete();\n         assertFalse(\"User should be deleted with his persistent data.\", user.getConfigFile().exists());\n         assertFalse(\"User should be deleted from memory.\", User.getAll().contains(user));\n         user = User.get(\"John Smith\", false, Collections.emptyMap());\n         assertNull(\"User should be deleted from memory.\", user);\n         User.reload();\n         boolean contained = false;\n         for(User u: User.getAll()){\n             if(u.getId().equals(user.getId())){\n                 contained = true;\n                 break;\n             }\n         }\n         assertFalse(\"User should not be loaded.\", contained);\n    }\n","date":"2013-07-17 12:48:28","endLine":288,"groupId":"5985","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a6/acfdfa3361e4fc73439b56fd79145e1b11effd.src","preCode":"    public void testDelete() throws IOException {\n         User user = User.get(\"John Smith\", true, Collections.emptyMap());\n         user.save();\n         user.delete();\n         assertFalse(\"User should be deleted with his persistent data.\", user.getConfigFile().exists());\n         assertFalse(\"User should be deleted from memory.\", User.getAll().contains(user));\n         user = User.get(\"John Smith\", false, Collections.emptyMap());\n         assertNull(\"User should be deleted from memory.\", user);\n         User.reload();\n         boolean contained = false;\n         for(User u: User.getAll()){\n             if(u.getId().equals(user.getId())){\n                 contained = true;\n                 break;\n             }\n         }\n         assertFalse(\"User should not be loaded.\", contained);\n    }\n","realPath":"test/src/test/java/hudson/model/UserTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"B"}],"commitId":"5bbb724a7c88011f39f4a4604fe8ae4f5174cd4b","commitMessage":"@@@Merge pull request #831 from lvotypko/userTest\n\nTests for User class.","date":"2013-07-17 12:48:28","modifiedFileCount":"1","status":"B","submitter":"Kohsuke Kawaguchi"},{"authorTime":"2017-09-07 02:43:35","codes":[{"authorDate":"2013-07-17 12:48:28","commitOrder":2,"curCode":"    public void testGetAndGetAll() {\n        User user = User.get(\"John Smith\", false, Collections.emptyMap());\n        assertNull(\"User John Smith should not be created.\", user);\n        assertFalse(\"Jenkins should not contain user John Smith.\", User.getAll().contains(user));\n        User user2 = User.get(\"John Smith2\", true, Collections.emptyMap());\n        assertNotNull(\"User John Smith2 should be created.\", user2);\n        assertTrue(\"Jenkins should contain user John Smith2.\", User.getAll().contains(user2));\n        user = User.get(\"John Smith2\", false, Collections.emptyMap());\n        assertNotNull(\"User John Smith should be created.\", user);\n        assertTrue(\"Jenkins should contain user John Smith.\", User.getAll().contains(user));\n    }\n","date":"2013-07-17 12:48:28","endLine":200,"groupId":"9163","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetAndGetAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a6/acfdfa3361e4fc73439b56fd79145e1b11effd.src","preCode":"    public void testGetAndGetAll() {\n        User user = User.get(\"John Smith\", false, Collections.emptyMap());\n        assertNull(\"User John Smith should not be created.\", user);\n        assertFalse(\"Jenkins should not contain user John Smith.\", User.getAll().contains(user));\n        User user2 = User.get(\"John Smith2\", true, Collections.emptyMap());\n        assertNotNull(\"User John Smith2 should be created.\", user2);\n        assertTrue(\"Jenkins should contain user John Smith2.\", User.getAll().contains(user2));\n        user = User.get(\"John Smith2\", false, Collections.emptyMap());\n        assertNotNull(\"User John Smith should be created.\", user);\n        assertTrue(\"Jenkins should contain user John Smith.\", User.getAll().contains(user));\n    }\n","realPath":"test/src/test/java/hudson/model/UserTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"N"},{"authorDate":"2017-09-07 02:43:35","commitOrder":2,"curCode":"    public void testDelete() throws Exception {\n        {\n         User user = User.get(\"John Smith\", true, Collections.emptyMap());\n         user.save();\n         user.delete();\n         assertFalse(\"User should be deleted with his persistent data.\", user.getConfigFile().exists());\n         assertFalse(\"User should be deleted from memory.\", User.getAll().contains(user));\n         user = User.get(\"John Smith\", false, Collections.emptyMap());\n         assertNull(\"User should be deleted from memory.\", user);\n        }\n        j.jenkins.reload();\n        {\n         boolean contained = false;\n         for(User u: User.getAll()){\n             if(u.getId().equals(\"John Smith\")){\n                 contained = true;\n                 break;\n             }\n         }\n         assertFalse(\"User should not be loaded.\", contained);\n        }\n    }\n","date":"2017-09-07 02:43:35","endLine":392,"groupId":"4144","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ee/462096a025183ef6aba36f389343624d13810f.src","preCode":"    public void testDelete() throws IOException {\n         User user = User.get(\"John Smith\", true, Collections.emptyMap());\n         user.save();\n         user.delete();\n         assertFalse(\"User should be deleted with his persistent data.\", user.getConfigFile().exists());\n         assertFalse(\"User should be deleted from memory.\", User.getAll().contains(user));\n         user = User.get(\"John Smith\", false, Collections.emptyMap());\n         assertNull(\"User should be deleted from memory.\", user);\n         User.reload();\n         boolean contained = false;\n         for(User u: User.getAll()){\n             if(u.getId().equals(user.getId())){\n                 contained = true;\n                 break;\n             }\n         }\n         assertFalse(\"User should not be loaded.\", contained);\n    }\n","realPath":"test/src/test/java/hudson/model/UserTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":371,"status":"M"}],"commitId":"6211e8b6ec5478b9408f41a1efe53f9016378264","commitMessage":"@@@Merge branch 'master' of git://github.com/jenkinsci/jenkins\n","date":"2017-09-07 02:43:35","modifiedFileCount":"90","status":"M","submitter":"Jesse Glick"},{"authorTime":"2018-11-21 21:28:24","codes":[{"authorDate":"2013-07-17 12:48:28","commitOrder":3,"curCode":"    public void testGetAndGetAll() {\n        User user = User.get(\"John Smith\", false, Collections.emptyMap());\n        assertNull(\"User John Smith should not be created.\", user);\n        assertFalse(\"Jenkins should not contain user John Smith.\", User.getAll().contains(user));\n        User user2 = User.get(\"John Smith2\", true, Collections.emptyMap());\n        assertNotNull(\"User John Smith2 should be created.\", user2);\n        assertTrue(\"Jenkins should contain user John Smith2.\", User.getAll().contains(user2));\n        user = User.get(\"John Smith2\", false, Collections.emptyMap());\n        assertNotNull(\"User John Smith should be created.\", user);\n        assertTrue(\"Jenkins should contain user John Smith.\", User.getAll().contains(user));\n    }\n","date":"2013-07-17 12:48:28","endLine":200,"groupId":"10418","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetAndGetAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a6/acfdfa3361e4fc73439b56fd79145e1b11effd.src","preCode":"    public void testGetAndGetAll() {\n        User user = User.get(\"John Smith\", false, Collections.emptyMap());\n        assertNull(\"User John Smith should not be created.\", user);\n        assertFalse(\"Jenkins should not contain user John Smith.\", User.getAll().contains(user));\n        User user2 = User.get(\"John Smith2\", true, Collections.emptyMap());\n        assertNotNull(\"User John Smith2 should be created.\", user2);\n        assertTrue(\"Jenkins should contain user John Smith2.\", User.getAll().contains(user2));\n        user = User.get(\"John Smith2\", false, Collections.emptyMap());\n        assertNotNull(\"User John Smith should be created.\", user);\n        assertTrue(\"Jenkins should contain user John Smith.\", User.getAll().contains(user));\n    }\n","realPath":"test/src/test/java/hudson/model/UserTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"N"},{"authorDate":"2018-11-21 21:28:24","commitOrder":3,"curCode":"    public void testDelete() throws Exception {\n        {\n         User user = User.get(\"John Smith\", true, Collections.emptyMap());\n         user.save();\n         File configFolder = user.getUserFolder();\n         user.delete();\n         assertFalse(\"User should be deleted with his persistent data.\", configFolder.exists());\n         assertFalse(\"User should be deleted from memory.\", User.getAll().contains(user));\n         user = User.get(\"John Smith\", false, Collections.emptyMap());\n         assertNull(\"User should be deleted from memory.\", user);\n        }\n        j.jenkins.reload();\n        {\n         boolean contained = false;\n         for(User u: User.getAll()){\n             if(u.getId().equals(\"John Smith\")){\n                 contained = true;\n                 break;\n             }\n         }\n         assertFalse(\"User should not be loaded.\", contained);\n        }\n    }\n","date":"2018-11-21 21:28:24","endLine":378,"groupId":"10418","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/3d/7c77a6156e1ddd33ecbd6327bac5579b91a35d.src","preCode":"    public void testDelete() throws Exception {\n        {\n         User user = User.get(\"John Smith\", true, Collections.emptyMap());\n         user.save();\n         user.delete();\n         assertFalse(\"User should be deleted with his persistent data.\", user.getConfigFile().exists());\n         assertFalse(\"User should be deleted from memory.\", User.getAll().contains(user));\n         user = User.get(\"John Smith\", false, Collections.emptyMap());\n         assertNull(\"User should be deleted from memory.\", user);\n        }\n        j.jenkins.reload();\n        {\n         boolean contained = false;\n         for(User u: User.getAll()){\n             if(u.getId().equals(\"John Smith\")){\n                 contained = true;\n                 break;\n             }\n         }\n         assertFalse(\"User should not be loaded.\", contained);\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/UserTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"M"}],"commitId":"9c7c4d930f59b2c207cac19df7cef4e34b648a60","commitMessage":"@@@Merge branch 'security-stable-2.150' into security-master\n","date":"2018-11-21 21:28:24","modifiedFileCount":"15","status":"M","submitter":"Daniel Beck"}]
