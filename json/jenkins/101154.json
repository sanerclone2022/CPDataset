[{"authorTime":"2016-03-10 05:07:34","codes":[{"authorDate":"2016-03-10 05:07:34","commitOrder":1,"curCode":"    private void fireBeforeShutdown(List<Throwable> errors) {\n        LOGGER.log(Level.FINE, \"Notifying termination\");\n        for (ItemListener l : ItemListener.all()) {\n            try {\n                l.onBeforeShutdown();\n            } catch (OutOfMemoryError e) {\n                \r\n                throw e;\n            } catch (LinkageError e) {\n                LOGGER.log(Level.WARNING, \"ItemListener \" + l + \": \" + e.getMessage(), e);\n                \r\n            } catch (Throwable e) {\n                LOGGER.log(Level.WARNING, \"ItemListener \" + l + \": \" + e.getMessage(), e);\n                \r\n                errors.add(e);\n            }\n        }\n    }\n","date":"2016-03-10 05:07:34","endLine":2916,"groupId":"7610","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fireBeforeShutdown","params":"(List<Throwable>errors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/31/d76281642bf96ee411a16c4d46b76b0733f8c2.src","preCode":"    private void fireBeforeShutdown(List<Throwable> errors) {\n        LOGGER.log(Level.FINE, \"Notifying termination\");\n        for (ItemListener l : ItemListener.all()) {\n            try {\n                l.onBeforeShutdown();\n            } catch (OutOfMemoryError e) {\n                \r\n                throw e;\n            } catch (LinkageError e) {\n                LOGGER.log(Level.WARNING, \"ItemListener \" + l + \": \" + e.getMessage(), e);\n                \r\n            } catch (Throwable e) {\n                LOGGER.log(Level.WARNING, \"ItemListener \" + l + \": \" + e.getMessage(), e);\n                \r\n                errors.add(e);\n            }\n        }\n    }\n","realPath":"core/src/main/java/jenkins/model/Jenkins.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":2899,"status":"B"},{"authorDate":"2016-03-10 05:07:34","commitOrder":1,"curCode":"    private Set<Future<?>> _cleanUpDisconnectComputers(final List<Throwable> errors) {\n        LOGGER.log(Level.INFO, \"Starting node disconnection\");\n        final Set<Future<?>> pending = new HashSet<Future<?>>();\n        \r\n        Queue.withLock(new Runnable() {\n            @Override\n            public void run() {\n                for( Computer c : computers.values() ) {\n                    try {\n                        c.interrupt();\n                        killComputer(c);\n                        pending.add(c.disconnect(null));\n                    } catch (OutOfMemoryError e) {\n                        \r\n                        throw e;\n                    } catch (LinkageError e) {\n                        LOGGER.log(Level.WARNING, \"Could not disconnect \" + c + \": \" + e.getMessage(), e);\n                        \r\n                    } catch (Throwable e) {\n                        LOGGER.log(Level.WARNING, \"Could not disconnect \" + c + \": \" + e.getMessage(), e);\n                        \r\n                        errors.add(e);\n                    }\n                }\n            }\n        });\n        return pending;\n    }\n","date":"2016-03-10 05:07:34","endLine":2995,"groupId":"2474","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"_cleanUpDisconnectComputers","params":"(finalList<Throwable>errors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/31/d76281642bf96ee411a16c4d46b76b0733f8c2.src","preCode":"    private Set<Future<?>> _cleanUpDisconnectComputers(final List<Throwable> errors) {\n        LOGGER.log(Level.INFO, \"Starting node disconnection\");\n        final Set<Future<?>> pending = new HashSet<Future<?>>();\n        \r\n        Queue.withLock(new Runnable() {\n            @Override\n            public void run() {\n                for( Computer c : computers.values() ) {\n                    try {\n                        c.interrupt();\n                        killComputer(c);\n                        pending.add(c.disconnect(null));\n                    } catch (OutOfMemoryError e) {\n                        \r\n                        throw e;\n                    } catch (LinkageError e) {\n                        LOGGER.log(Level.WARNING, \"Could not disconnect \" + c + \": \" + e.getMessage(), e);\n                        \r\n                    } catch (Throwable e) {\n                        LOGGER.log(Level.WARNING, \"Could not disconnect \" + c + \": \" + e.getMessage(), e);\n                        \r\n                        errors.add(e);\n                    }\n                }\n            }\n        });\n        return pending;\n    }\n","realPath":"core/src/main/java/jenkins/model/Jenkins.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":2968,"status":"B"}],"commitId":"f56ace54d173020724d4f3199359df8a191fa311","commitMessage":"@@@Merge pull request #2103 from stephenc/jenkins-33425\n\n[FIXED JENKINS-33425] Refactored the cleanUp() method to log progress and push for completion","date":"2016-03-10 05:07:34","modifiedFileCount":"1","status":"B","submitter":"Stephen Connolly"},{"authorTime":"2017-06-01 18:08:19","codes":[{"authorDate":"2016-03-10 05:07:34","commitOrder":2,"curCode":"    private void fireBeforeShutdown(List<Throwable> errors) {\n        LOGGER.log(Level.FINE, \"Notifying termination\");\n        for (ItemListener l : ItemListener.all()) {\n            try {\n                l.onBeforeShutdown();\n            } catch (OutOfMemoryError e) {\n                \r\n                throw e;\n            } catch (LinkageError e) {\n                LOGGER.log(Level.WARNING, \"ItemListener \" + l + \": \" + e.getMessage(), e);\n                \r\n            } catch (Throwable e) {\n                LOGGER.log(Level.WARNING, \"ItemListener \" + l + \": \" + e.getMessage(), e);\n                \r\n                errors.add(e);\n            }\n        }\n    }\n","date":"2016-03-10 05:07:34","endLine":2916,"groupId":"7610","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fireBeforeShutdown","params":"(List<Throwable>errors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/31/d76281642bf96ee411a16c4d46b76b0733f8c2.src","preCode":"    private void fireBeforeShutdown(List<Throwable> errors) {\n        LOGGER.log(Level.FINE, \"Notifying termination\");\n        for (ItemListener l : ItemListener.all()) {\n            try {\n                l.onBeforeShutdown();\n            } catch (OutOfMemoryError e) {\n                \r\n                throw e;\n            } catch (LinkageError e) {\n                LOGGER.log(Level.WARNING, \"ItemListener \" + l + \": \" + e.getMessage(), e);\n                \r\n            } catch (Throwable e) {\n                LOGGER.log(Level.WARNING, \"ItemListener \" + l + \": \" + e.getMessage(), e);\n                \r\n                errors.add(e);\n            }\n        }\n    }\n","realPath":"core/src/main/java/jenkins/model/Jenkins.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":2899,"status":"N"},{"authorDate":"2017-06-01 18:08:19","commitOrder":2,"curCode":"    private Set<Future<?>> _cleanUpDisconnectComputers(final List<Throwable> errors) {\n        LOGGER.log(Main.isUnitTest ? Level.FINE : Level.INFO, \"Starting node disconnection\");\n        final Set<Future<?>> pending = new HashSet<Future<?>>();\n        \r\n        Queue.withLock(new Runnable() {\n            @Override\n            public void run() {\n                for( Computer c : computers.values() ) {\n                    try {\n                        c.interrupt();\n                        killComputer(c);\n                        pending.add(c.disconnect(null));\n                    } catch (OutOfMemoryError e) {\n                        \r\n                        throw e;\n                    } catch (LinkageError e) {\n                        LOGGER.log(Level.WARNING, \"Could not disconnect \" + c + \": \" + e.getMessage(), e);\n                        \r\n                    } catch (Throwable e) {\n                        LOGGER.log(Level.WARNING, \"Could not disconnect \" + c + \": \" + e.getMessage(), e);\n                        \r\n                        errors.add(e);\n                    }\n                }\n            }\n        });\n        return pending;\n    }\n","date":"2017-06-01 18:08:19","endLine":3366,"groupId":"2474","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"_cleanUpDisconnectComputers","params":"(finalList<Throwable>errors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f1/871370183f75dfb8d6982e90853262dd682372.src","preCode":"    private Set<Future<?>> _cleanUpDisconnectComputers(final List<Throwable> errors) {\n        LOGGER.log(Level.INFO, \"Starting node disconnection\");\n        final Set<Future<?>> pending = new HashSet<Future<?>>();\n        \r\n        Queue.withLock(new Runnable() {\n            @Override\n            public void run() {\n                for( Computer c : computers.values() ) {\n                    try {\n                        c.interrupt();\n                        killComputer(c);\n                        pending.add(c.disconnect(null));\n                    } catch (OutOfMemoryError e) {\n                        \r\n                        throw e;\n                    } catch (LinkageError e) {\n                        LOGGER.log(Level.WARNING, \"Could not disconnect \" + c + \": \" + e.getMessage(), e);\n                        \r\n                    } catch (Throwable e) {\n                        LOGGER.log(Level.WARNING, \"Could not disconnect \" + c + \": \" + e.getMessage(), e);\n                        \r\n                        errors.add(e);\n                    }\n                }\n            }\n        });\n        return pending;\n    }\n","realPath":"core/src/main/java/jenkins/model/Jenkins.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":3339,"status":"M"}],"commitId":"383b91b1f756b6cb984c135ac3daaa9d408532ad","commitMessage":"@@@Merge pull request #2906 from jglick/quieter-tests\n\nMake functional tests a little quieter so we can focus on test output rather than boilerplate logging","date":"2017-06-01 18:08:19","modifiedFileCount":"2","status":"M","submitter":"Daniel Beck"},{"authorTime":"2019-04-08 23:18:26","codes":[{"authorDate":"2016-03-10 05:07:34","commitOrder":3,"curCode":"    private void fireBeforeShutdown(List<Throwable> errors) {\n        LOGGER.log(Level.FINE, \"Notifying termination\");\n        for (ItemListener l : ItemListener.all()) {\n            try {\n                l.onBeforeShutdown();\n            } catch (OutOfMemoryError e) {\n                \r\n                throw e;\n            } catch (LinkageError e) {\n                LOGGER.log(Level.WARNING, \"ItemListener \" + l + \": \" + e.getMessage(), e);\n                \r\n            } catch (Throwable e) {\n                LOGGER.log(Level.WARNING, \"ItemListener \" + l + \": \" + e.getMessage(), e);\n                \r\n                errors.add(e);\n            }\n        }\n    }\n","date":"2016-03-10 05:07:34","endLine":2916,"groupId":"7610","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"fireBeforeShutdown","params":"(List<Throwable>errors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/31/d76281642bf96ee411a16c4d46b76b0733f8c2.src","preCode":"    private void fireBeforeShutdown(List<Throwable> errors) {\n        LOGGER.log(Level.FINE, \"Notifying termination\");\n        for (ItemListener l : ItemListener.all()) {\n            try {\n                l.onBeforeShutdown();\n            } catch (OutOfMemoryError e) {\n                \r\n                throw e;\n            } catch (LinkageError e) {\n                LOGGER.log(Level.WARNING, \"ItemListener \" + l + \": \" + e.getMessage(), e);\n                \r\n            } catch (Throwable e) {\n                LOGGER.log(Level.WARNING, \"ItemListener \" + l + \": \" + e.getMessage(), e);\n                \r\n                errors.add(e);\n            }\n        }\n    }\n","realPath":"core/src/main/java/jenkins/model/Jenkins.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":2899,"status":"N"},{"authorDate":"2019-04-08 23:18:26","commitOrder":3,"curCode":"    private Set<Future<?>> _cleanUpDisconnectComputers(final List<Throwable> errors) {\n        LOGGER.log(Main.isUnitTest ? Level.FINE : Level.INFO, \"Starting node disconnection\");\n        final Set<Future<?>> pending = new HashSet<>();\n        \r\n        Queue.withLock(new Runnable() {\n            @Override\n            public void run() {\n                for( Computer c : computers.values() ) {\n                    try {\n                        c.interrupt();\n                        killComputer(c);\n                        pending.add(c.disconnect(null));\n                    } catch (OutOfMemoryError e) {\n                        \r\n                        throw e;\n                    } catch (LinkageError e) {\n                        LOGGER.log(Level.WARNING, \"Could not disconnect \" + c + \": \" + e.getMessage(), e);\n                        \r\n                    } catch (Throwable e) {\n                        LOGGER.log(Level.WARNING, \"Could not disconnect \" + c + \": \" + e.getMessage(), e);\n                        \r\n                        errors.add(e);\n                    }\n                }\n            }\n        });\n        return pending;\n    }\n","date":"2019-04-08 23:18:26","endLine":3446,"groupId":"2474","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"_cleanUpDisconnectComputers","params":"(finalList<Throwable>errors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/38/9453de3edb37e4de04edd2d45f5797ed9a3f9c.src","preCode":"    private Set<Future<?>> _cleanUpDisconnectComputers(final List<Throwable> errors) {\n        LOGGER.log(Main.isUnitTest ? Level.FINE : Level.INFO, \"Starting node disconnection\");\n        final Set<Future<?>> pending = new HashSet<Future<?>>();\n        \r\n        Queue.withLock(new Runnable() {\n            @Override\n            public void run() {\n                for( Computer c : computers.values() ) {\n                    try {\n                        c.interrupt();\n                        killComputer(c);\n                        pending.add(c.disconnect(null));\n                    } catch (OutOfMemoryError e) {\n                        \r\n                        throw e;\n                    } catch (LinkageError e) {\n                        LOGGER.log(Level.WARNING, \"Could not disconnect \" + c + \": \" + e.getMessage(), e);\n                        \r\n                    } catch (Throwable e) {\n                        LOGGER.log(Level.WARNING, \"Could not disconnect \" + c + \": \" + e.getMessage(), e);\n                        \r\n                        errors.add(e);\n                    }\n                }\n            }\n        });\n        return pending;\n    }\n","realPath":"core/src/main/java/jenkins/model/Jenkins.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":3419,"status":"M"}],"commitId":"6b4c6c955d10ade9b78ab02fd2733cc29e0b1ab3","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2019-04-08 23:18:26","modifiedFileCount":"242","status":"M","submitter":"Daniel Beck"},{"authorTime":"2021-02-25 04:11:46","codes":[{"authorDate":"2021-02-25 04:11:46","commitOrder":4,"curCode":"    private void fireBeforeShutdown(List<Throwable> errors) {\n        LOGGER.log(Level.FINE, \"Notifying termination\");\n        for (ItemListener l : ItemListener.all()) {\n            try {\n                l.onBeforeShutdown();\n            } catch (OutOfMemoryError e) {\n                \r\n                throw e;\n            } catch (LinkageError e) {\n                LOGGER.log(Level.WARNING, e, () -> \"ItemListener \" + l + \": \" + e.getMessage());\n                \r\n            } catch (Throwable e) {\n                LOGGER.log(Level.WARNING, e, () -> \"ItemListener \" + l + \": \" + e.getMessage());\n                \r\n                errors.add(e);\n            }\n        }\n    }\n","date":"2021-02-25 04:11:46","endLine":3494,"groupId":"101154","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"fireBeforeShutdown","params":"(List<Throwable>errors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/14/6798a2264bc0b81a99a6dbfbb67727ac71be3b.src","preCode":"    private void fireBeforeShutdown(List<Throwable> errors) {\n        LOGGER.log(Level.FINE, \"Notifying termination\");\n        for (ItemListener l : ItemListener.all()) {\n            try {\n                l.onBeforeShutdown();\n            } catch (OutOfMemoryError e) {\n                \r\n                throw e;\n            } catch (LinkageError e) {\n                LOGGER.log(Level.WARNING, \"ItemListener \" + l + \": \" + e.getMessage(), e);\n                \r\n            } catch (Throwable e) {\n                LOGGER.log(Level.WARNING, \"ItemListener \" + l + \": \" + e.getMessage(), e);\n                \r\n                errors.add(e);\n            }\n        }\n    }\n","realPath":"core/src/main/java/jenkins/model/Jenkins.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":3477,"status":"M"},{"authorDate":"2021-02-25 04:11:46","commitOrder":4,"curCode":"    private Set<Future<?>> _cleanUpDisconnectComputers(final List<Throwable> errors) {\n        LOGGER.log(Main.isUnitTest ? Level.FINE : Level.INFO, \"Starting node disconnection\");\n        final Set<Future<?>> pending = new HashSet<>();\n        \r\n        Queue.withLock(() -> {\n            for (Computer c : computers.values()) {\n                try {\n                    c.interrupt();\n                    killComputer(c);\n                    pending.add(c.disconnect(null));\n                } catch (OutOfMemoryError e) {\n                    \r\n                    throw e;\n                } catch (LinkageError e) {\n                    LOGGER.log(Level.WARNING, e, () -> \"Could not disconnect \" + c + \": \" + e.getMessage());\n                    \r\n                } catch (Throwable e) {\n                    LOGGER.log(Level.WARNING, e, () -> \"Could not disconnect \" + c + \": \" + e.getMessage());\n                    \r\n                    errors.add(e);\n                }\n            }\n        });\n        return pending;\n    }\n","date":"2021-02-25 04:11:46","endLine":3562,"groupId":"101154","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"_cleanUpDisconnectComputers","params":"(finalList<Throwable>errors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/14/6798a2264bc0b81a99a6dbfbb67727ac71be3b.src","preCode":"    private Set<Future<?>> _cleanUpDisconnectComputers(final List<Throwable> errors) {\n        LOGGER.log(Main.isUnitTest ? Level.FINE : Level.INFO, \"Starting node disconnection\");\n        final Set<Future<?>> pending = new HashSet<>();\n        \r\n        Queue.withLock(new Runnable() {\n            @Override\n            public void run() {\n                for( Computer c : computers.values() ) {\n                    try {\n                        c.interrupt();\n                        killComputer(c);\n                        pending.add(c.disconnect(null));\n                    } catch (OutOfMemoryError e) {\n                        \r\n                        throw e;\n                    } catch (LinkageError e) {\n                        LOGGER.log(Level.WARNING, \"Could not disconnect \" + c + \": \" + e.getMessage(), e);\n                        \r\n                    } catch (Throwable e) {\n                        LOGGER.log(Level.WARNING, \"Could not disconnect \" + c + \": \" + e.getMessage(), e);\n                        \r\n                        errors.add(e);\n                    }\n                }\n            }\n        });\n        return pending;\n    }\n","realPath":"core/src/main/java/jenkins/model/Jenkins.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":3538,"status":"M"}],"commitId":"f6a0b56d5924aa0f43e83d39f1dd3b365c45e71b","commitMessage":"@@@Small code cleanups (#5301)\n\n","date":"2021-02-25 04:11:46","modifiedFileCount":"4","status":"M","submitter":"Matt Sicker"}]
