[{"authorTime":"2016-04-07 17:52:44","codes":[{"authorDate":"2014-05-13 08:11:46","commitOrder":7,"curCode":"    public boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException {\n        \r\n        Jenkins j = Jenkins.getInstance();\n        j.checkPermission(Jenkins.ADMINISTER);\n        if (json.has(\"useSecurity\")) {\n            JSONObject security = json.getJSONObject(\"useSecurity\");\n            j.setDisableRememberMe(security.optBoolean(\"disableRememberMe\", false));\n            j.setSecurityRealm(SecurityRealm.all().newInstanceFromRadioList(security, \"realm\"));\n            j.setAuthorizationStrategy(AuthorizationStrategy.all().newInstanceFromRadioList(security, \"authorization\"));\n            try {\n                j.setSlaveAgentPort(new ServerTcpPort(security.getJSONObject(\"slaveAgentPort\")).getPort());\n            } catch (IOException e) {\n                throw new hudson.model.Descriptor.FormException(e, \"slaveAgentPortType\");\n            }\n        } else {\n            j.disableSecurity();\n        }\n\n        if (json.has(\"markupFormatter\")) {\n            j.setMarkupFormatter(req.bindJSON(MarkupFormatter.class, json.getJSONObject(\"markupFormatter\")));\n        } else {\n            j.setMarkupFormatter(null);\n        }\n\n        \r\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req,json,d);\n        }\n        \n        return result;\n    }\n","date":"2014-05-13 08:11:46","endLine":119,"groupId":"4404","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(StaplerRequestreq@JSONObjectjson)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/de/5deceebd35155d03c3e1e7e9ab0939983f4be5.src","preCode":"    public boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException {\n        \r\n        Jenkins j = Jenkins.getInstance();\n        j.checkPermission(Jenkins.ADMINISTER);\n        if (json.has(\"useSecurity\")) {\n            JSONObject security = json.getJSONObject(\"useSecurity\");\n            j.setDisableRememberMe(security.optBoolean(\"disableRememberMe\", false));\n            j.setSecurityRealm(SecurityRealm.all().newInstanceFromRadioList(security, \"realm\"));\n            j.setAuthorizationStrategy(AuthorizationStrategy.all().newInstanceFromRadioList(security, \"authorization\"));\n            try {\n                j.setSlaveAgentPort(new ServerTcpPort(security.getJSONObject(\"slaveAgentPort\")).getPort());\n            } catch (IOException e) {\n                throw new hudson.model.Descriptor.FormException(e, \"slaveAgentPortType\");\n            }\n        } else {\n            j.disableSecurity();\n        }\n\n        if (json.has(\"markupFormatter\")) {\n            j.setMarkupFormatter(req.bindJSON(MarkupFormatter.class, json.getJSONObject(\"markupFormatter\")));\n        } else {\n            j.setMarkupFormatter(null);\n        }\n\n        \r\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req,json,d);\n        }\n        \n        return result;\n    }\n","realPath":"core/src/main/java/hudson/security/GlobalSecurityConfiguration.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"NB"},{"authorDate":"2016-04-07 17:52:44","commitOrder":7,"curCode":"    private boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException, IOException {\n        Jenkins j = Jenkins.getInstance();\n        j.checkPermission(Jenkins.ADMINISTER);\n\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req, json, d);\n        }\n        j.save();\n\n        return result;\n    }\n","date":"2016-04-07 17:52:44","endLine":93,"groupId":"8452","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(StaplerRequestreq@JSONObjectjson)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/20/9c4a1b72dc584747833d7c2689c862675fdd7c.src","preCode":"    private boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException, IOException {\n        Jenkins j = Jenkins.getInstance();\n        j.checkPermission(Jenkins.ADMINISTER);\n\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req, json, d);\n        }\n        j.save();\n\n        return result;\n    }\n","realPath":"core/src/main/java/jenkins/tools/GlobalToolConfiguration.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"B"}],"commitId":"1fe9cf7b7ada45230f2bc5b8e2f1bdb93175ff9f","commitMessage":"@@@Merge branch '2.0' of github.com:jenkinsci/jenkins\n","date":"2016-04-07 17:52:44","modifiedFileCount":"131","status":"M","submitter":"Daniel Beck"},{"authorTime":"2016-04-07 17:52:44","codes":[{"authorDate":"2016-07-29 20:08:07","commitOrder":8,"curCode":"    public boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException {\n        \r\n        Jenkins j = Jenkins.getInstance();\n        j.checkPermission(Jenkins.ADMINISTER);\n        if (json.has(\"useSecurity\")) {\n            JSONObject security = json.getJSONObject(\"useSecurity\");\n            j.setDisableRememberMe(security.optBoolean(\"disableRememberMe\", false));\n            j.setSecurityRealm(SecurityRealm.all().newInstanceFromRadioList(security, \"realm\"));\n            j.setAuthorizationStrategy(AuthorizationStrategy.all().newInstanceFromRadioList(security, \"authorization\"));\n            try {\n                j.setSlaveAgentPort(new ServerTcpPort(security.getJSONObject(\"slaveAgentPort\")).getPort());\n            } catch (IOException e) {\n                throw new hudson.model.Descriptor.FormException(e, \"slaveAgentPortType\");\n            }\n            Set<String> agentProtocols = new TreeSet<>();\n            if (security.has(\"agentProtocol\")) {\n                Object protocols = security.get(\"agentProtocol\");\n                if (protocols instanceof JSONArray) {\n                    for (int i = 0; i < ((JSONArray) protocols).size(); i++) {\n                        agentProtocols.add(((JSONArray) protocols).getString(i));\n                    }\n                } else {\n                    agentProtocols.add(protocols.toString());\n                }\n            }\n            j.setAgentProtocols(agentProtocols);\n        } else {\n            j.disableSecurity();\n        }\n\n        if (json.has(\"markupFormatter\")) {\n            j.setMarkupFormatter(req.bindJSON(MarkupFormatter.class, json.getJSONObject(\"markupFormatter\")));\n        } else {\n            j.setMarkupFormatter(null);\n        }\n\n        \r\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req,json,d);\n        }\n        \n        return result;\n    }\n","date":"2016-07-29 20:08:07","endLine":139,"groupId":"7062","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(StaplerRequestreq@JSONObjectjson)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5f/a446fef78979095cdd601dbb5fcb5f417ccfa0.src","preCode":"    public boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException {\n        \r\n        Jenkins j = Jenkins.getInstance();\n        j.checkPermission(Jenkins.ADMINISTER);\n        if (json.has(\"useSecurity\")) {\n            JSONObject security = json.getJSONObject(\"useSecurity\");\n            j.setDisableRememberMe(security.optBoolean(\"disableRememberMe\", false));\n            j.setSecurityRealm(SecurityRealm.all().newInstanceFromRadioList(security, \"realm\"));\n            j.setAuthorizationStrategy(AuthorizationStrategy.all().newInstanceFromRadioList(security, \"authorization\"));\n            try {\n                j.setSlaveAgentPort(new ServerTcpPort(security.getJSONObject(\"slaveAgentPort\")).getPort());\n            } catch (IOException e) {\n                throw new hudson.model.Descriptor.FormException(e, \"slaveAgentPortType\");\n            }\n        } else {\n            j.disableSecurity();\n        }\n\n        if (json.has(\"markupFormatter\")) {\n            j.setMarkupFormatter(req.bindJSON(MarkupFormatter.class, json.getJSONObject(\"markupFormatter\")));\n        } else {\n            j.setMarkupFormatter(null);\n        }\n\n        \r\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req,json,d);\n        }\n        \n        return result;\n    }\n","realPath":"core/src/main/java/hudson/security/GlobalSecurityConfiguration.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2016-04-07 17:52:44","commitOrder":8,"curCode":"    private boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException, IOException {\n        Jenkins j = Jenkins.getInstance();\n        j.checkPermission(Jenkins.ADMINISTER);\n\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req, json, d);\n        }\n        j.save();\n\n        return result;\n    }\n","date":"2016-04-07 17:52:44","endLine":93,"groupId":"8452","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(StaplerRequestreq@JSONObjectjson)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/20/9c4a1b72dc584747833d7c2689c862675fdd7c.src","preCode":"    private boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException, IOException {\n        Jenkins j = Jenkins.getInstance();\n        j.checkPermission(Jenkins.ADMINISTER);\n\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req, json, d);\n        }\n        j.save();\n\n        return result;\n    }\n","realPath":"core/src/main/java/jenkins/tools/GlobalToolConfiguration.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"N"}],"commitId":"61c753fca391e30b9c841d610e1184f9e14dc992","commitMessage":"@@@Merge pull request #2488 from stephenc/jenkins-37032\n\n[JENKINS-37032] Add a UI to allow controlling enabled agent protocols","date":"2016-07-29 20:08:07","modifiedFileCount":"10","status":"M","submitter":"Stephen Connolly"},{"authorTime":"2016-04-07 17:52:44","codes":[{"authorDate":"2017-02-01 21:40:10","commitOrder":9,"curCode":"    public boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException {\n        \r\n        Jenkins j = Jenkins.getInstance();\n        j.checkPermission(Jenkins.ADMINISTER);\n        if (json.has(\"useSecurity\")) {\n            JSONObject security = json.getJSONObject(\"useSecurity\");\n            j.setDisableRememberMe(security.optBoolean(\"disableRememberMe\", false));\n            j.setSecurityRealm(SecurityRealm.all().newInstanceFromRadioList(security, \"realm\"));\n            j.setAuthorizationStrategy(AuthorizationStrategy.all().newInstanceFromRadioList(security, \"authorization\"));\n            if (!isSlaveAgentPortEnforced()) {\n                try {\n                    j.setSlaveAgentPort(new ServerTcpPort(security.getJSONObject(\"slaveAgentPort\")).getPort());\n                } catch (IOException e) {\n                    throw new hudson.model.Descriptor.FormException(e, \"slaveAgentPortType\");\n                }\n            }\n            Set<String> agentProtocols = new TreeSet<>();\n            if (security.has(\"agentProtocol\")) {\n                Object protocols = security.get(\"agentProtocol\");\n                if (protocols instanceof JSONArray) {\n                    for (int i = 0; i < ((JSONArray) protocols).size(); i++) {\n                        agentProtocols.add(((JSONArray) protocols).getString(i));\n                    }\n                } else {\n                    agentProtocols.add(protocols.toString());\n                }\n            }\n            j.setAgentProtocols(agentProtocols);\n        } else {\n            j.disableSecurity();\n        }\n\n        if (json.has(\"markupFormatter\")) {\n            j.setMarkupFormatter(req.bindJSON(MarkupFormatter.class, json.getJSONObject(\"markupFormatter\")));\n        } else {\n            j.setMarkupFormatter(null);\n        }\n\n        \r\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req,json,d);\n        }\n        \n        return result;\n    }\n","date":"2017-02-01 21:40:10","endLine":153,"groupId":"7062","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(StaplerRequestreq@JSONObjectjson)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/75/1ad92f93c8e8813253c86d47e029419ebe04aa.src","preCode":"    public boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException {\n        \r\n        Jenkins j = Jenkins.getInstance();\n        j.checkPermission(Jenkins.ADMINISTER);\n        if (json.has(\"useSecurity\")) {\n            JSONObject security = json.getJSONObject(\"useSecurity\");\n            j.setDisableRememberMe(security.optBoolean(\"disableRememberMe\", false));\n            j.setSecurityRealm(SecurityRealm.all().newInstanceFromRadioList(security, \"realm\"));\n            j.setAuthorizationStrategy(AuthorizationStrategy.all().newInstanceFromRadioList(security, \"authorization\"));\n            try {\n                j.setSlaveAgentPort(new ServerTcpPort(security.getJSONObject(\"slaveAgentPort\")).getPort());\n            } catch (IOException e) {\n                throw new hudson.model.Descriptor.FormException(e, \"slaveAgentPortType\");\n            }\n            Set<String> agentProtocols = new TreeSet<>();\n            if (security.has(\"agentProtocol\")) {\n                Object protocols = security.get(\"agentProtocol\");\n                if (protocols instanceof JSONArray) {\n                    for (int i = 0; i < ((JSONArray) protocols).size(); i++) {\n                        agentProtocols.add(((JSONArray) protocols).getString(i));\n                    }\n                } else {\n                    agentProtocols.add(protocols.toString());\n                }\n            }\n            j.setAgentProtocols(agentProtocols);\n        } else {\n            j.disableSecurity();\n        }\n\n        if (json.has(\"markupFormatter\")) {\n            j.setMarkupFormatter(req.bindJSON(MarkupFormatter.class, json.getJSONObject(\"markupFormatter\")));\n        } else {\n            j.setMarkupFormatter(null);\n        }\n\n        \r\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req,json,d);\n        }\n        \n        return result;\n    }\n","realPath":"core/src/main/java/hudson/security/GlobalSecurityConfiguration.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2016-04-07 17:52:44","commitOrder":9,"curCode":"    private boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException, IOException {\n        Jenkins j = Jenkins.getInstance();\n        j.checkPermission(Jenkins.ADMINISTER);\n\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req, json, d);\n        }\n        j.save();\n\n        return result;\n    }\n","date":"2016-04-07 17:52:44","endLine":93,"groupId":"8452","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(StaplerRequestreq@JSONObjectjson)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/20/9c4a1b72dc584747833d7c2689c862675fdd7c.src","preCode":"    private boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException, IOException {\n        Jenkins j = Jenkins.getInstance();\n        j.checkPermission(Jenkins.ADMINISTER);\n\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req, json, d);\n        }\n        j.save();\n\n        return result;\n    }\n","realPath":"core/src/main/java/jenkins/tools/GlobalToolConfiguration.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"N"}],"commitId":"b4095bc4b6c62023a2029e5e2faef8ad0e3a4252","commitMessage":"@@@Merge branch 'master' of github.com:jenkinsci/jenkins\n","date":"2017-02-01 21:40:10","modifiedFileCount":"2","status":"M","submitter":"Kohsuke Kawaguchi"},{"authorTime":"2016-04-07 17:52:44","codes":[{"authorDate":"2017-06-03 16:04:02","commitOrder":10,"curCode":"    public boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException {\n        \r\n        Jenkins j = Jenkins.getInstance();\n        j.checkPermission(Jenkins.ADMINISTER);\n        if (json.has(\"useSecurity\")) {\n            JSONObject security = json.getJSONObject(\"useSecurity\");\n            j.setDisableRememberMe(security.optBoolean(\"disableRememberMe\", false));\n            j.setSecurityRealm(SecurityRealm.all().newInstanceFromRadioList(security, \"realm\"));\n            j.setAuthorizationStrategy(AuthorizationStrategy.all().newInstanceFromRadioList(security, \"authorization\"));    \n        } else {\n            j.disableSecurity();\n        }\n\n        if (json.has(\"markupFormatter\")) {\n            j.setMarkupFormatter(req.bindJSON(MarkupFormatter.class, json.getJSONObject(\"markupFormatter\")));\n        } else {\n            j.setMarkupFormatter(null);\n        }\n        \n        \r\n        if (!isSlaveAgentPortEnforced()) {\n            try {\n                j.setSlaveAgentPort(new ServerTcpPort(json.getJSONObject(\"slaveAgentPort\")).getPort());\n            } catch (IOException e) {\n                throw new hudson.model.Descriptor.FormException(e, \"slaveAgentPortType\");\n            }\n        }\n        Set<String> agentProtocols = new TreeSet<>();\n        if (json.has(\"agentProtocol\")) {\n            Object protocols = json.get(\"agentProtocol\");\n            if (protocols instanceof JSONArray) {\n                for (int i = 0; i < ((JSONArray) protocols).size(); i++) {\n                    agentProtocols.add(((JSONArray) protocols).getString(i));\n                }\n            } else {\n                agentProtocols.add(protocols.toString());\n            }\n        }\n        j.setAgentProtocols(agentProtocols);\n\n        \r\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req,json,d);\n        }\n        \n        return result;\n    }\n","date":"2017-06-03 16:04:02","endLine":157,"groupId":"2178","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(StaplerRequestreq@JSONObjectjson)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/62/9c8bba698a6ecb3d486e446f6a07e936fbbc73.src","preCode":"    public boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException {\n        \r\n        Jenkins j = Jenkins.getInstance();\n        j.checkPermission(Jenkins.ADMINISTER);\n        if (json.has(\"useSecurity\")) {\n            JSONObject security = json.getJSONObject(\"useSecurity\");\n            j.setDisableRememberMe(security.optBoolean(\"disableRememberMe\", false));\n            j.setSecurityRealm(SecurityRealm.all().newInstanceFromRadioList(security, \"realm\"));\n            j.setAuthorizationStrategy(AuthorizationStrategy.all().newInstanceFromRadioList(security, \"authorization\"));\n            if (!isSlaveAgentPortEnforced()) {\n                try {\n                    j.setSlaveAgentPort(new ServerTcpPort(security.getJSONObject(\"slaveAgentPort\")).getPort());\n                } catch (IOException e) {\n                    throw new hudson.model.Descriptor.FormException(e, \"slaveAgentPortType\");\n                }\n            }\n            Set<String> agentProtocols = new TreeSet<>();\n            if (security.has(\"agentProtocol\")) {\n                Object protocols = security.get(\"agentProtocol\");\n                if (protocols instanceof JSONArray) {\n                    for (int i = 0; i < ((JSONArray) protocols).size(); i++) {\n                        agentProtocols.add(((JSONArray) protocols).getString(i));\n                    }\n                } else {\n                    agentProtocols.add(protocols.toString());\n                }\n            }\n            j.setAgentProtocols(agentProtocols);\n        } else {\n            j.disableSecurity();\n        }\n\n        if (json.has(\"markupFormatter\")) {\n            j.setMarkupFormatter(req.bindJSON(MarkupFormatter.class, json.getJSONObject(\"markupFormatter\")));\n        } else {\n            j.setMarkupFormatter(null);\n        }\n\n        \r\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req,json,d);\n        }\n        \n        return result;\n    }\n","realPath":"core/src/main/java/hudson/security/GlobalSecurityConfiguration.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2016-04-07 17:52:44","commitOrder":10,"curCode":"    private boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException, IOException {\n        Jenkins j = Jenkins.getInstance();\n        j.checkPermission(Jenkins.ADMINISTER);\n\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req, json, d);\n        }\n        j.save();\n\n        return result;\n    }\n","date":"2016-04-07 17:52:44","endLine":93,"groupId":"8452","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(StaplerRequestreq@JSONObjectjson)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/20/9c4a1b72dc584747833d7c2689c862675fdd7c.src","preCode":"    private boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException, IOException {\n        Jenkins j = Jenkins.getInstance();\n        j.checkPermission(Jenkins.ADMINISTER);\n\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req, json, d);\n        }\n        j.save();\n\n        return result;\n    }\n","realPath":"core/src/main/java/jenkins/tools/GlobalToolConfiguration.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"N"}],"commitId":"2228b3936e3fdf6130d65324ac7278cad84edb95","commitMessage":"@@@Merge pull request #2900 from ksenia-nenasheva/JENKINS-4478\n\n[JENKINS-4478] - Move TCP port out from under security","date":"2017-06-03 16:04:02","modifiedFileCount":"1","status":"M","submitter":"Daniel Beck"},{"authorTime":"2019-07-03 02:02:48","codes":[{"authorDate":"2019-07-03 02:02:48","commitOrder":11,"curCode":"    public boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException {\n        \r\n        Jenkins j = Jenkins.get();\n        j.checkPermission(Jenkins.ADMINISTER);\n        if (json.has(\"useSecurity\")) {\n            JSONObject security = json.getJSONObject(\"useSecurity\");\n            j.setDisableRememberMe(security.optBoolean(\"disableRememberMe\", false));\n            j.setSecurityRealm(SecurityRealm.all().newInstanceFromRadioList(security, \"realm\"));\n            j.setAuthorizationStrategy(AuthorizationStrategy.all().newInstanceFromRadioList(security, \"authorization\"));    \n        } else {\n            j.disableSecurity();\n        }\n\n        if (json.has(\"markupFormatter\")) {\n            j.setMarkupFormatter(req.bindJSON(MarkupFormatter.class, json.getJSONObject(\"markupFormatter\")));\n        } else {\n            j.setMarkupFormatter(null);\n        }\n        \n        \r\n        if (!isSlaveAgentPortEnforced()) {\n            try {\n                j.setSlaveAgentPort(new ServerTcpPort(json.getJSONObject(\"slaveAgentPort\")).getPort());\n            } catch (IOException e) {\n                throw new hudson.model.Descriptor.FormException(e, \"slaveAgentPortType\");\n            }\n        }\n        Set<String> agentProtocols = new TreeSet<>();\n        if (json.has(\"agentProtocol\")) {\n            Object protocols = json.get(\"agentProtocol\");\n            if (protocols instanceof JSONArray) {\n                for (int i = 0; i < ((JSONArray) protocols).size(); i++) {\n                    agentProtocols.add(((JSONArray) protocols).getString(i));\n                }\n            } else {\n                agentProtocols.add(protocols.toString());\n            }\n        }\n        j.setAgentProtocols(agentProtocols);\n\n        \r\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req,json,d);\n        }\n        \n        return result;\n    }\n","date":"2019-07-03 02:02:48","endLine":156,"groupId":"2178","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(StaplerRequestreq@JSONObjectjson)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/cc/42117fffd1469ffee87c6d74265bf489f8b1e7.src","preCode":"    public boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException {\n        \r\n        Jenkins j = Jenkins.getInstance();\n        j.checkPermission(Jenkins.ADMINISTER);\n        if (json.has(\"useSecurity\")) {\n            JSONObject security = json.getJSONObject(\"useSecurity\");\n            j.setDisableRememberMe(security.optBoolean(\"disableRememberMe\", false));\n            j.setSecurityRealm(SecurityRealm.all().newInstanceFromRadioList(security, \"realm\"));\n            j.setAuthorizationStrategy(AuthorizationStrategy.all().newInstanceFromRadioList(security, \"authorization\"));    \n        } else {\n            j.disableSecurity();\n        }\n\n        if (json.has(\"markupFormatter\")) {\n            j.setMarkupFormatter(req.bindJSON(MarkupFormatter.class, json.getJSONObject(\"markupFormatter\")));\n        } else {\n            j.setMarkupFormatter(null);\n        }\n        \n        \r\n        if (!isSlaveAgentPortEnforced()) {\n            try {\n                j.setSlaveAgentPort(new ServerTcpPort(json.getJSONObject(\"slaveAgentPort\")).getPort());\n            } catch (IOException e) {\n                throw new hudson.model.Descriptor.FormException(e, \"slaveAgentPortType\");\n            }\n        }\n        Set<String> agentProtocols = new TreeSet<>();\n        if (json.has(\"agentProtocol\")) {\n            Object protocols = json.get(\"agentProtocol\");\n            if (protocols instanceof JSONArray) {\n                for (int i = 0; i < ((JSONArray) protocols).size(); i++) {\n                    agentProtocols.add(((JSONArray) protocols).getString(i));\n                }\n            } else {\n                agentProtocols.add(protocols.toString());\n            }\n        }\n        j.setAgentProtocols(agentProtocols);\n\n        \r\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req,json,d);\n        }\n        \n        return result;\n    }\n","realPath":"core/src/main/java/hudson/security/GlobalSecurityConfiguration.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2019-07-03 02:02:48","commitOrder":11,"curCode":"    private boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException, IOException {\n        Jenkins j = Jenkins.get();\n        j.checkPermission(Jenkins.ADMINISTER);\n\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req, json, d);\n        }\n        j.save();\n\n        return result;\n    }\n","date":"2019-07-03 02:02:48","endLine":95,"groupId":"8452","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(StaplerRequestreq@JSONObjectjson)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ed/86470443a57c97b4e30707631d46fe0adb9168.src","preCode":"    private boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException, IOException {\n        Jenkins j = Jenkins.getInstance();\n        j.checkPermission(Jenkins.ADMINISTER);\n\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req, json, d);\n        }\n        j.save();\n\n        return result;\n    }\n","realPath":"core/src/main/java/jenkins/tools/GlobalToolConfiguration.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"494119294fa2f095b4a28db0dd32c0d2092d9fa1","commitMessage":"@@@Merge commit '4404c6e662befe16e8daa1ea7a412df73b370086' of github.com:jenkinsci/jenkins\n","date":"2019-07-03 02:02:48","modifiedFileCount":"292","status":"M","submitter":"Jeff Thompson"},{"authorTime":"2019-07-03 02:02:48","codes":[{"authorDate":"2020-01-20 21:55:10","commitOrder":12,"curCode":"    public boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException {\n        \r\n        Jenkins j = Jenkins.get();\n        j.checkPermission(Jenkins.ADMINISTER);\n\n        j.setDisableRememberMe(json.optBoolean(\"disableRememberMe\", false));\n        j.setSecurityRealm(SecurityRealm.all().newInstanceFromRadioList(json, \"realm\"));\n        j.setAuthorizationStrategy(AuthorizationStrategy.all().newInstanceFromRadioList(json, \"authorization\"));    \n\n        if (json.has(\"markupFormatter\")) {\n            j.setMarkupFormatter(req.bindJSON(MarkupFormatter.class, json.getJSONObject(\"markupFormatter\")));\n        } else {\n            j.setMarkupFormatter(null);\n        }\n        \n        \r\n        if (!isSlaveAgentPortEnforced()) {\n            try {\n                j.setSlaveAgentPort(new ServerTcpPort(json.getJSONObject(\"slaveAgentPort\")).getPort());\n            } catch (IOException e) {\n                throw new hudson.model.Descriptor.FormException(e, \"slaveAgentPortType\");\n            }\n        }\n        Set<String> agentProtocols = new TreeSet<>();\n        if (json.has(\"agentProtocol\")) {\n            Object protocols = json.get(\"agentProtocol\");\n            if (protocols instanceof JSONArray) {\n                for (int i = 0; i < ((JSONArray) protocols).size(); i++) {\n                    agentProtocols.add(((JSONArray) protocols).getString(i));\n                }\n            } else {\n                agentProtocols.add(protocols.toString());\n            }\n        }\n        j.setAgentProtocols(agentProtocols);\n\n        \r\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req,json,d);\n        }\n        \n        return result;\n    }\n","date":"2020-01-20 21:55:10","endLine":152,"groupId":"2178","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(StaplerRequestreq@JSONObjectjson)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f5/ba2c38b5b47fb206d69ce070b7d4d23a0be6c7.src","preCode":"    public boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException {\n        \r\n        Jenkins j = Jenkins.get();\n        j.checkPermission(Jenkins.ADMINISTER);\n        if (json.has(\"useSecurity\")) {\n            JSONObject security = json.getJSONObject(\"useSecurity\");\n            j.setDisableRememberMe(security.optBoolean(\"disableRememberMe\", false));\n            j.setSecurityRealm(SecurityRealm.all().newInstanceFromRadioList(security, \"realm\"));\n            j.setAuthorizationStrategy(AuthorizationStrategy.all().newInstanceFromRadioList(security, \"authorization\"));    \n        } else {\n            j.disableSecurity();\n        }\n\n        if (json.has(\"markupFormatter\")) {\n            j.setMarkupFormatter(req.bindJSON(MarkupFormatter.class, json.getJSONObject(\"markupFormatter\")));\n        } else {\n            j.setMarkupFormatter(null);\n        }\n        \n        \r\n        if (!isSlaveAgentPortEnforced()) {\n            try {\n                j.setSlaveAgentPort(new ServerTcpPort(json.getJSONObject(\"slaveAgentPort\")).getPort());\n            } catch (IOException e) {\n                throw new hudson.model.Descriptor.FormException(e, \"slaveAgentPortType\");\n            }\n        }\n        Set<String> agentProtocols = new TreeSet<>();\n        if (json.has(\"agentProtocol\")) {\n            Object protocols = json.get(\"agentProtocol\");\n            if (protocols instanceof JSONArray) {\n                for (int i = 0; i < ((JSONArray) protocols).size(); i++) {\n                    agentProtocols.add(((JSONArray) protocols).getString(i));\n                }\n            } else {\n                agentProtocols.add(protocols.toString());\n            }\n        }\n        j.setAgentProtocols(agentProtocols);\n\n        \r\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req,json,d);\n        }\n        \n        return result;\n    }\n","realPath":"core/src/main/java/hudson/security/GlobalSecurityConfiguration.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2019-07-03 02:02:48","commitOrder":12,"curCode":"    private boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException, IOException {\n        Jenkins j = Jenkins.get();\n        j.checkPermission(Jenkins.ADMINISTER);\n\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req, json, d);\n        }\n        j.save();\n\n        return result;\n    }\n","date":"2019-07-03 02:02:48","endLine":95,"groupId":"8452","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(StaplerRequestreq@JSONObjectjson)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ed/86470443a57c97b4e30707631d46fe0adb9168.src","preCode":"    private boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException, IOException {\n        Jenkins j = Jenkins.get();\n        j.checkPermission(Jenkins.ADMINISTER);\n\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req, json, d);\n        }\n        j.save();\n\n        return result;\n    }\n","realPath":"core/src/main/java/jenkins/tools/GlobalToolConfiguration.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"N"}],"commitId":"574ec6e5bdf2e4ac9394e290fefff5ac1c9a5c96","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2020-01-20 21:55:10","modifiedFileCount":"193","status":"M","submitter":"Wadeck Follonier"},{"authorTime":"2020-03-05 02:00:47","codes":[{"authorDate":"2020-03-05 02:00:47","commitOrder":13,"curCode":"    public boolean configure(StaplerRequest req, JSONObject json) throws FormException {\n        \r\n        Jenkins j = Jenkins.get();\n        j.checkPermission(Jenkins.ADMINISTER);\n\n        j.setDisableRememberMe(json.optBoolean(\"disableRememberMe\", false));\n        j.setSecurityRealm(SecurityRealm.all().newInstanceFromRadioList(json, \"realm\"));\n        j.setAuthorizationStrategy(AuthorizationStrategy.all().newInstanceFromRadioList(json, \"authorization\"));    \n\n        if (json.has(\"markupFormatter\")) {\n            j.setMarkupFormatter(req.bindJSON(MarkupFormatter.class, json.getJSONObject(\"markupFormatter\")));\n        } else {\n            j.setMarkupFormatter(null);\n        }\n        \n        \r\n        if (!isSlaveAgentPortEnforced()) {\n            try {\n                j.setSlaveAgentPort(new ServerTcpPort(json.getJSONObject(\"slaveAgentPort\")).getPort());\n            } catch (IOException e) {\n                throw new FormException(e, \"slaveAgentPortType\");\n            }\n        }\n        Set<String> agentProtocols = new TreeSet<>();\n        if (json.has(\"agentProtocol\")) {\n            Object protocols = json.get(\"agentProtocol\");\n            if (protocols instanceof JSONArray) {\n                for (int i = 0; i < ((JSONArray) protocols).size(); i++) {\n                    agentProtocols.add(((JSONArray) protocols).getString(i));\n                }\n            } else {\n                agentProtocols.add(protocols.toString());\n            }\n        }\n        j.setAgentProtocols(agentProtocols);\n\n        \r\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfigByDescriptor(FILTER)){\n            result &= configureDescriptor(req,json,d);\n        }\n        \n        return result;\n    }\n","date":"2020-03-05 02:00:47","endLine":153,"groupId":"10984","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(StaplerRequestreq@JSONObjectjson)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/62/0e755f7e2b2013dffc322a5436988299287c16.src","preCode":"    public boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException {\n        \r\n        Jenkins j = Jenkins.get();\n        j.checkPermission(Jenkins.ADMINISTER);\n\n        j.setDisableRememberMe(json.optBoolean(\"disableRememberMe\", false));\n        j.setSecurityRealm(SecurityRealm.all().newInstanceFromRadioList(json, \"realm\"));\n        j.setAuthorizationStrategy(AuthorizationStrategy.all().newInstanceFromRadioList(json, \"authorization\"));    \n\n        if (json.has(\"markupFormatter\")) {\n            j.setMarkupFormatter(req.bindJSON(MarkupFormatter.class, json.getJSONObject(\"markupFormatter\")));\n        } else {\n            j.setMarkupFormatter(null);\n        }\n        \n        \r\n        if (!isSlaveAgentPortEnforced()) {\n            try {\n                j.setSlaveAgentPort(new ServerTcpPort(json.getJSONObject(\"slaveAgentPort\")).getPort());\n            } catch (IOException e) {\n                throw new hudson.model.Descriptor.FormException(e, \"slaveAgentPortType\");\n            }\n        }\n        Set<String> agentProtocols = new TreeSet<>();\n        if (json.has(\"agentProtocol\")) {\n            Object protocols = json.get(\"agentProtocol\");\n            if (protocols instanceof JSONArray) {\n                for (int i = 0; i < ((JSONArray) protocols).size(); i++) {\n                    agentProtocols.add(((JSONArray) protocols).getString(i));\n                }\n            } else {\n                agentProtocols.add(protocols.toString());\n            }\n        }\n        j.setAgentProtocols(agentProtocols);\n\n        \r\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req,json,d);\n        }\n        \n        return result;\n    }\n","realPath":"core/src/main/java/hudson/security/GlobalSecurityConfiguration.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2020-03-05 02:00:47","commitOrder":13,"curCode":"    private boolean configure(StaplerRequest req, JSONObject json) throws Descriptor.FormException, IOException {\n        Jenkins j = Jenkins.get();\n        j.checkPermission(Jenkins.ADMINISTER);\n\n        boolean result = true;\n        for (Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfigByDescriptor(FILTER)) {\n            result &= configureDescriptor(req, json, d);\n        }\n        j.save();\n\n        return result;\n    }\n","date":"2020-03-05 02:00:47","endLine":94,"groupId":"10984","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(StaplerRequestreq@JSONObjectjson)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/db/abbabdab11e3a125467338dc39ed2d12997c75.src","preCode":"    private boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException, IOException {\n        Jenkins j = Jenkins.get();\n        j.checkPermission(Jenkins.ADMINISTER);\n\n        boolean result = true;\n        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n            result &= configureDescriptor(req, json, d);\n        }\n        j.save();\n\n        return result;\n    }\n","realPath":"core/src/main/java/jenkins/tools/GlobalToolConfiguration.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"07bcd1fe597250c30397ee0d1e15f00e8fbf7ffc","commitMessage":"@@@Merge commit '7f8de3ce8a8326c83fe85e14489baacab38241ce' of https://github.com/jenkinsci/jenkins\n","date":"2020-03-05 02:00:47","modifiedFileCount":"119","status":"M","submitter":"Daniel Beck"}]
