[{"authorTime":"2016-05-13 18:36:45","codes":[{"authorDate":"2015-01-08 05:12:18","commitOrder":2,"curCode":"    @Test public void installIfNecessaryPerformsInstallation() throws Exception {\n        File tmp = temp.getRoot();\n            final FilePath d = new FilePath(tmp);\n\n            final HttpURLConnection con = mock(HttpURLConnection.class);\n            final URL url = someUrlToZipFile(con);\n\n            when(con.getResponseCode())\n              .thenReturn(HttpURLConnection.HTTP_OK);\n\n            when(con.getInputStream())\n              .thenReturn(someZippedContent());\n\n            assertTrue(d.installIfNecessaryFrom(url, null, null));\n    }\n","date":"2015-01-08 05:12:18","endLine":548,"groupId":"3346","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"installIfNecessaryPerformsInstallation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/99/9b3e792cf3d0ffeaced08ecb1dfe413f9307fb.src","preCode":"    @Test public void installIfNecessaryPerformsInstallation() throws Exception {\n        File tmp = temp.getRoot();\n            final FilePath d = new FilePath(tmp);\n\n            final HttpURLConnection con = mock(HttpURLConnection.class);\n            final URL url = someUrlToZipFile(con);\n\n            when(con.getResponseCode())\n              .thenReturn(HttpURLConnection.HTTP_OK);\n\n            when(con.getInputStream())\n              .thenReturn(someZippedContent());\n\n            assertTrue(d.installIfNecessaryFrom(url, null, null));\n    }\n","realPath":"core/src/test/java/hudson/FilePathTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":534,"status":"NB"},{"authorDate":"2016-05-13 18:36:45","commitOrder":2,"curCode":"    @Test public void installIfNecessaryFollowsRedirects() throws Exception{\n        File tmp = temp.getRoot();\n        final FilePath d = new FilePath(tmp);\n        FilePath.UrlFactory urlFactory = mock(FilePath.UrlFactory.class);\n        d.setUrlFactory(urlFactory);\n        final HttpURLConnection con = mock(HttpURLConnection.class);\n        final HttpURLConnection con2 = mock(HttpURLConnection.class);\n        final URL url = someUrlToZipFile(con);\n        when(con.getResponseCode()).thenReturn(HttpURLConnection.HTTP_MOVED_TEMP);\n        URL url2 = someUrlToZipFile(con2);\n        String someUrl = url2.toExternalForm();\n        when(con.getHeaderField(\"Location\")).thenReturn(someUrl);\n        when(urlFactory.newURL(someUrl)).thenReturn(url2);\n        when(con2.getResponseCode()).thenReturn(HttpURLConnection.HTTP_OK);\n        when(con2.getInputStream()).thenReturn(someZippedContent());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        String message = \"going ahead\";\n        assertTrue(d.installIfNecessaryFrom(url, new StreamTaskListener(baos), message));\n    }\n","date":"2016-05-13 18:36:45","endLine":662,"groupId":"4938","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"installIfNecessaryFollowsRedirects","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/7b/515ec2131692895f9c8f266ef732142137c377.src","preCode":"    @Test public void installIfNecessaryFollowsRedirects() throws Exception{\n        File tmp = temp.getRoot();\n        final FilePath d = new FilePath(tmp);\n        FilePath.UrlFactory urlFactory = mock(FilePath.UrlFactory.class);\n        d.setUrlFactory(urlFactory);\n        final HttpURLConnection con = mock(HttpURLConnection.class);\n        final HttpURLConnection con2 = mock(HttpURLConnection.class);\n        final URL url = someUrlToZipFile(con);\n        when(con.getResponseCode()).thenReturn(HttpURLConnection.HTTP_MOVED_TEMP);\n        URL url2 = someUrlToZipFile(con2);\n        String someUrl = url2.toExternalForm();\n        when(con.getHeaderField(\"Location\")).thenReturn(someUrl);\n        when(urlFactory.newURL(someUrl)).thenReturn(url2);\n        when(con2.getResponseCode()).thenReturn(HttpURLConnection.HTTP_OK);\n        when(con2.getInputStream()).thenReturn(someZippedContent());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        String message = \"going ahead\";\n        assertTrue(d.installIfNecessaryFrom(url, new StreamTaskListener(baos), message));\n    }\n","realPath":"core/src/test/java/hudson/FilePathTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":643,"status":"B"}],"commitId":"0c16c8576bf662b2af049d8d9720ea7d30085c3a","commitMessage":"@@@[JENKINS-23507] Make FilePath.installIfNecessaryFrom follow redirects (#2331)","date":"2016-05-13 18:36:45","modifiedFileCount":"2","status":"M","submitter":"Vincent Latombe"},{"authorTime":"2016-05-13 18:36:45","codes":[{"authorDate":"2017-12-23 00:38:57","commitOrder":3,"curCode":"    @Test public void installIfNecessaryPerformsInstallation() throws Exception {\n        File tmp = temp.getRoot();\n            final FilePath d = new FilePath(tmp);\n\n            final HttpURLConnection con = mock(HttpURLConnection.class);\n            final URL url = someUrlToZipFile(con);\n\n            when(con.getResponseCode())\n              .thenReturn(HttpURLConnection.HTTP_OK);\n\n            when(con.getInputStream())\n              .thenReturn(someZippedContent());\n\n            assertTrue(d.installIfNecessaryFrom(url, null, \"\"));\n    }\n","date":"2017-12-23 00:38:57","endLine":648,"groupId":"3346","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"installIfNecessaryPerformsInstallation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/57/815f661831ba9c2080b044b243d797b2187c2e.src","preCode":"    @Test public void installIfNecessaryPerformsInstallation() throws Exception {\n        File tmp = temp.getRoot();\n            final FilePath d = new FilePath(tmp);\n\n            final HttpURLConnection con = mock(HttpURLConnection.class);\n            final URL url = someUrlToZipFile(con);\n\n            when(con.getResponseCode())\n              .thenReturn(HttpURLConnection.HTTP_OK);\n\n            when(con.getInputStream())\n              .thenReturn(someZippedContent());\n\n            assertTrue(d.installIfNecessaryFrom(url, null, null));\n    }\n","realPath":"core/src/test/java/hudson/FilePathTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":634,"status":"M"},{"authorDate":"2016-05-13 18:36:45","commitOrder":3,"curCode":"    @Test public void installIfNecessaryFollowsRedirects() throws Exception{\n        File tmp = temp.getRoot();\n        final FilePath d = new FilePath(tmp);\n        FilePath.UrlFactory urlFactory = mock(FilePath.UrlFactory.class);\n        d.setUrlFactory(urlFactory);\n        final HttpURLConnection con = mock(HttpURLConnection.class);\n        final HttpURLConnection con2 = mock(HttpURLConnection.class);\n        final URL url = someUrlToZipFile(con);\n        when(con.getResponseCode()).thenReturn(HttpURLConnection.HTTP_MOVED_TEMP);\n        URL url2 = someUrlToZipFile(con2);\n        String someUrl = url2.toExternalForm();\n        when(con.getHeaderField(\"Location\")).thenReturn(someUrl);\n        when(urlFactory.newURL(someUrl)).thenReturn(url2);\n        when(con2.getResponseCode()).thenReturn(HttpURLConnection.HTTP_OK);\n        when(con2.getInputStream()).thenReturn(someZippedContent());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        String message = \"going ahead\";\n        assertTrue(d.installIfNecessaryFrom(url, new StreamTaskListener(baos), message));\n    }\n","date":"2016-05-13 18:36:45","endLine":662,"groupId":"4938","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"installIfNecessaryFollowsRedirects","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/7b/515ec2131692895f9c8f266ef732142137c377.src","preCode":"    @Test public void installIfNecessaryFollowsRedirects() throws Exception{\n        File tmp = temp.getRoot();\n        final FilePath d = new FilePath(tmp);\n        FilePath.UrlFactory urlFactory = mock(FilePath.UrlFactory.class);\n        d.setUrlFactory(urlFactory);\n        final HttpURLConnection con = mock(HttpURLConnection.class);\n        final HttpURLConnection con2 = mock(HttpURLConnection.class);\n        final URL url = someUrlToZipFile(con);\n        when(con.getResponseCode()).thenReturn(HttpURLConnection.HTTP_MOVED_TEMP);\n        URL url2 = someUrlToZipFile(con2);\n        String someUrl = url2.toExternalForm();\n        when(con.getHeaderField(\"Location\")).thenReturn(someUrl);\n        when(urlFactory.newURL(someUrl)).thenReturn(url2);\n        when(con2.getResponseCode()).thenReturn(HttpURLConnection.HTTP_OK);\n        when(con2.getInputStream()).thenReturn(someZippedContent());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        String message = \"going ahead\";\n        assertTrue(d.installIfNecessaryFrom(url, new StreamTaskListener(baos), message));\n    }\n","realPath":"core/src/test/java/hudson/FilePathTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":643,"status":"N"}],"commitId":"8e78ab1c660de81f48beecedced25d9b2cbbf64a","commitMessage":"@@@[JENKINS-48227] Use \"Files.createTempDirectory\" to create temp directory (#3161)\n\n* Use \"Files.createTempDirectory\" to create temp directory instead\nSee SonarQube critical vulnerability squid:S2976 (tag: owasp-a9)\nhttps://next.sonarqube.com/sonarqube/coding_rules#rule_key=squid%3AS2976\n\n* [JENKINS-48227]\nCreating a utility \"static Path toPath(File file) throws IOException\" method. \nwhich wraps InvalidPathException to IOException so that it will be checked.\n- also fixed public static final reference\n- fixed broken test cases\n- added new test cases for toPath() and createTempDir()\n\n* Revert back to public static int\n\n* adjustments due to merges\n\n* Add posix check to determine if Posix FileAttributes should be included\nin call to Files.createTempDirectory()\n\n* Remove reference to private element\n\n* Updated to use explicit imports\n","date":"2017-12-23 00:38:57","modifiedFileCount":"2","status":"M","submitter":"Larry Singleton"},{"authorTime":"2016-05-13 18:36:45","codes":[{"authorDate":"2018-04-26 07:49:42","commitOrder":4,"curCode":"    @Test public void installIfNecessaryPerformsInstallation() throws Exception {\n        File tmp = temp.getRoot();\n            final FilePath d = new FilePath(tmp);\n\n            final HttpURLConnection con = mock(HttpURLConnection.class);\n            final URL url = someUrlToZipFile(con);\n\n            when(con.getResponseCode())\n              .thenReturn(HttpURLConnection.HTTP_OK);\n\n            when(con.getInputStream())\n              .thenReturn(someZippedContent());\n\n            assertTrue(d.installIfNecessaryFrom(url, null, \"message if failed\"));\n    }\n","date":"2018-04-26 07:49:42","endLine":648,"groupId":"3346","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"installIfNecessaryPerformsInstallation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/96/d4084f90e1aae1af7098b4c8ae2ce84edd8a05.src","preCode":"    @Test public void installIfNecessaryPerformsInstallation() throws Exception {\n        File tmp = temp.getRoot();\n            final FilePath d = new FilePath(tmp);\n\n            final HttpURLConnection con = mock(HttpURLConnection.class);\n            final URL url = someUrlToZipFile(con);\n\n            when(con.getResponseCode())\n              .thenReturn(HttpURLConnection.HTTP_OK);\n\n            when(con.getInputStream())\n              .thenReturn(someZippedContent());\n\n            assertTrue(d.installIfNecessaryFrom(url, null, \"\"));\n    }\n","realPath":"core/src/test/java/hudson/FilePathTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":634,"status":"M"},{"authorDate":"2016-05-13 18:36:45","commitOrder":4,"curCode":"    @Test public void installIfNecessaryFollowsRedirects() throws Exception{\n        File tmp = temp.getRoot();\n        final FilePath d = new FilePath(tmp);\n        FilePath.UrlFactory urlFactory = mock(FilePath.UrlFactory.class);\n        d.setUrlFactory(urlFactory);\n        final HttpURLConnection con = mock(HttpURLConnection.class);\n        final HttpURLConnection con2 = mock(HttpURLConnection.class);\n        final URL url = someUrlToZipFile(con);\n        when(con.getResponseCode()).thenReturn(HttpURLConnection.HTTP_MOVED_TEMP);\n        URL url2 = someUrlToZipFile(con2);\n        String someUrl = url2.toExternalForm();\n        when(con.getHeaderField(\"Location\")).thenReturn(someUrl);\n        when(urlFactory.newURL(someUrl)).thenReturn(url2);\n        when(con2.getResponseCode()).thenReturn(HttpURLConnection.HTTP_OK);\n        when(con2.getInputStream()).thenReturn(someZippedContent());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        String message = \"going ahead\";\n        assertTrue(d.installIfNecessaryFrom(url, new StreamTaskListener(baos), message));\n    }\n","date":"2016-05-13 18:36:45","endLine":662,"groupId":"4938","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"installIfNecessaryFollowsRedirects","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/7b/515ec2131692895f9c8f266ef732142137c377.src","preCode":"    @Test public void installIfNecessaryFollowsRedirects() throws Exception{\n        File tmp = temp.getRoot();\n        final FilePath d = new FilePath(tmp);\n        FilePath.UrlFactory urlFactory = mock(FilePath.UrlFactory.class);\n        d.setUrlFactory(urlFactory);\n        final HttpURLConnection con = mock(HttpURLConnection.class);\n        final HttpURLConnection con2 = mock(HttpURLConnection.class);\n        final URL url = someUrlToZipFile(con);\n        when(con.getResponseCode()).thenReturn(HttpURLConnection.HTTP_MOVED_TEMP);\n        URL url2 = someUrlToZipFile(con2);\n        String someUrl = url2.toExternalForm();\n        when(con.getHeaderField(\"Location\")).thenReturn(someUrl);\n        when(urlFactory.newURL(someUrl)).thenReturn(url2);\n        when(con2.getResponseCode()).thenReturn(HttpURLConnection.HTTP_OK);\n        when(con2.getInputStream()).thenReturn(someZippedContent());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        String message = \"going ahead\";\n        assertTrue(d.installIfNecessaryFrom(url, new StreamTaskListener(baos), message));\n    }\n","realPath":"core/src/test/java/hudson/FilePathTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":643,"status":"N"}],"commitId":"c5497c9a577ba8447780be590c6242555638c19b","commitMessage":"@@@Merge branch 'security-stable-2.107' into security-master\n","date":"2018-04-26 07:49:42","modifiedFileCount":"8","status":"M","submitter":"Daniel Beck"},{"authorTime":"2019-09-23 21:33:40","codes":[{"authorDate":"2018-04-26 07:49:42","commitOrder":5,"curCode":"    @Test public void installIfNecessaryPerformsInstallation() throws Exception {\n        File tmp = temp.getRoot();\n            final FilePath d = new FilePath(tmp);\n\n            final HttpURLConnection con = mock(HttpURLConnection.class);\n            final URL url = someUrlToZipFile(con);\n\n            when(con.getResponseCode())\n              .thenReturn(HttpURLConnection.HTTP_OK);\n\n            when(con.getInputStream())\n              .thenReturn(someZippedContent());\n\n            assertTrue(d.installIfNecessaryFrom(url, null, \"message if failed\"));\n    }\n","date":"2018-04-26 07:49:42","endLine":648,"groupId":"10818","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"installIfNecessaryPerformsInstallation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/96/d4084f90e1aae1af7098b4c8ae2ce84edd8a05.src","preCode":"    @Test public void installIfNecessaryPerformsInstallation() throws Exception {\n        File tmp = temp.getRoot();\n            final FilePath d = new FilePath(tmp);\n\n            final HttpURLConnection con = mock(HttpURLConnection.class);\n            final URL url = someUrlToZipFile(con);\n\n            when(con.getResponseCode())\n              .thenReturn(HttpURLConnection.HTTP_OK);\n\n            when(con.getInputStream())\n              .thenReturn(someZippedContent());\n\n            assertTrue(d.installIfNecessaryFrom(url, null, \"message if failed\"));\n    }\n","realPath":"core/src/test/java/hudson/FilePathTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":634,"status":"N"},{"authorDate":"2019-09-23 21:33:40","commitOrder":5,"curCode":"    @Test public void installIfNecessaryFollowsRedirects() throws Exception{\n        File tmp = temp.getRoot();\n        final FilePath d = new FilePath(tmp);\n        FilePath.UrlFactory urlFactory = mock(FilePath.UrlFactory.class);\n        d.setUrlFactory(urlFactory);\n        final HttpURLConnection con = mock(HttpURLConnection.class);\n        final HttpURLConnection con2 = mock(HttpURLConnection.class);\n        final URL url = someUrlToZipFile(con);\n        when(con.getResponseCode()).thenReturn(HttpURLConnection.HTTP_MOVED_TEMP);\n        URL url2 = someUrlToZipFile(con2);\n        String someUrl = url2.toExternalForm();\n        when(con.getHeaderField(\"Location\")).thenReturn(someUrl);\n        when(urlFactory.newURL(someUrl)).thenReturn(url2);\n        when(con2.getResponseCode()).thenReturn(HttpURLConnection.HTTP_OK);\n        when(con2.getInputStream()).thenReturn(someZippedContent());\n\n        String message = \"going ahead\";\n        assertTrue(d.installIfNecessaryFrom(url, null, message));\n    }\n","date":"2019-09-23 21:33:40","endLine":669,"groupId":"10818","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"installIfNecessaryFollowsRedirects","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/24/ae5a48a5f22305e00808e396ddeeef791c8234.src","preCode":"    @Test public void installIfNecessaryFollowsRedirects() throws Exception{\n        File tmp = temp.getRoot();\n        final FilePath d = new FilePath(tmp);\n        FilePath.UrlFactory urlFactory = mock(FilePath.UrlFactory.class);\n        d.setUrlFactory(urlFactory);\n        final HttpURLConnection con = mock(HttpURLConnection.class);\n        final HttpURLConnection con2 = mock(HttpURLConnection.class);\n        final URL url = someUrlToZipFile(con);\n        when(con.getResponseCode()).thenReturn(HttpURLConnection.HTTP_MOVED_TEMP);\n        URL url2 = someUrlToZipFile(con2);\n        String someUrl = url2.toExternalForm();\n        when(con.getHeaderField(\"Location\")).thenReturn(someUrl);\n        when(urlFactory.newURL(someUrl)).thenReturn(url2);\n        when(con2.getResponseCode()).thenReturn(HttpURLConnection.HTTP_OK);\n        when(con2.getInputStream()).thenReturn(someZippedContent());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        String message = \"going ahead\";\n        assertTrue(d.installIfNecessaryFrom(url, new StreamTaskListener(baos), message));\n    }\n","realPath":"core/src/test/java/hudson/FilePathTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":651,"status":"M"}],"commitId":"35a1cb0a3ee5edbe1107ffcac9f319db02871f53","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2019-09-23 21:33:40","modifiedFileCount":"150","status":"M","submitter":"Daniel Beck"}]
