[{"authorTime":"2017-01-24 03:26:10","codes":[{"authorDate":"2017-01-24 03:26:10","commitOrder":1,"curCode":"    public void testXmlLoad() throws Exception {\n        File exploitFile = f.newFile();\n        try {\n            \r\n            if (exploitFile.exists() && !exploitFile.delete()) {\n                throw new IllegalStateException(\"file exists and cannot be deleted\");\n            }\n            File tempJobDir = new File(j.jenkins.getRootDir(), \"security383\");\n\n            String exploitXml = IOUtils.toString(\n                    XStream2Security383Test.class.getResourceAsStream(\n                            \"/hudson/util/XStream2Security383Test/config.xml\"), \"UTF-8\");\n\n            exploitXml = exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());\n\n            FileUtils.write(new File(tempJobDir, \"config.xml\"), exploitXml);\n\n            try {\n                Items.load(j.jenkins, tempJobDir);\n            } catch (Exception e) {\n                \r\n            }\n            assertFalse(\"no file should be created here\", exploitFile.exists());\n        } finally {\n            exploitFile.delete();\n        }\n    }\n","date":"2017-01-24 03:26:10","endLine":73,"groupId":"2711","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testXmlLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/7e/089e4cc48b8c5937d90135c9b5858ccf1adb51.src","preCode":"    public void testXmlLoad() throws Exception {\n        File exploitFile = f.newFile();\n        try {\n            \r\n            if (exploitFile.exists() && !exploitFile.delete()) {\n                throw new IllegalStateException(\"file exists and cannot be deleted\");\n            }\n            File tempJobDir = new File(j.jenkins.getRootDir(), \"security383\");\n\n            String exploitXml = IOUtils.toString(\n                    XStream2Security383Test.class.getResourceAsStream(\n                            \"/hudson/util/XStream2Security383Test/config.xml\"), \"UTF-8\");\n\n            exploitXml = exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());\n\n            FileUtils.write(new File(tempJobDir, \"config.xml\"), exploitXml);\n\n            try {\n                Items.load(j.jenkins, tempJobDir);\n            } catch (Exception e) {\n                \r\n            }\n            assertFalse(\"no file should be created here\", exploitFile.exists());\n        } finally {\n            exploitFile.delete();\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/XStream2Security383Test.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"},{"authorDate":"2017-01-24 03:26:10","commitOrder":1,"curCode":"    public void testPostJobXml() throws Exception {\n        File exploitFile = f.newFile();\n        try {\n            \r\n            if (exploitFile.exists() && !exploitFile.delete()) {\n                throw new IllegalStateException(\"file exists and cannot be deleted\");\n            }\n            File tempJobDir = new File(j.jenkins.getRootDir(), \"security383\");\n\n            String exploitXml = IOUtils.toString(\n                    XStream2Security383Test.class.getResourceAsStream(\n                            \"/hudson/util/XStream2Security383Test/config.xml\"), \"UTF-8\");\n\n            exploitXml = exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());\n\n            when(req.getMethod()).thenReturn(\"POST\");\n            when(req.getInputStream()).thenReturn(new Stream(IOUtils.toInputStream(exploitXml)));\n            when(req.getContentType()).thenReturn(\"application/xml\");\n            when(req.getParameter(\"name\")).thenReturn(\"foo\");\n\n            try {\n                j.jenkins.doCreateItem(req, rsp);\n            } catch (Exception e) {\n                \r\n            }\n\n            assertFalse(\"no file should be created here\", exploitFile.exists());\n        } finally {\n            exploitFile.delete();\n        }\n    }\n","date":"2017-01-24 03:26:10","endLine":107,"groupId":"2713","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPostJobXml","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/7e/089e4cc48b8c5937d90135c9b5858ccf1adb51.src","preCode":"    public void testPostJobXml() throws Exception {\n        File exploitFile = f.newFile();\n        try {\n            \r\n            if (exploitFile.exists() && !exploitFile.delete()) {\n                throw new IllegalStateException(\"file exists and cannot be deleted\");\n            }\n            File tempJobDir = new File(j.jenkins.getRootDir(), \"security383\");\n\n            String exploitXml = IOUtils.toString(\n                    XStream2Security383Test.class.getResourceAsStream(\n                            \"/hudson/util/XStream2Security383Test/config.xml\"), \"UTF-8\");\n\n            exploitXml = exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());\n\n            when(req.getMethod()).thenReturn(\"POST\");\n            when(req.getInputStream()).thenReturn(new Stream(IOUtils.toInputStream(exploitXml)));\n            when(req.getContentType()).thenReturn(\"application/xml\");\n            when(req.getParameter(\"name\")).thenReturn(\"foo\");\n\n            try {\n                j.jenkins.doCreateItem(req, rsp);\n            } catch (Exception e) {\n                \r\n            }\n\n            assertFalse(\"no file should be created here\", exploitFile.exists());\n        } finally {\n            exploitFile.delete();\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/XStream2Security383Test.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"}],"commitId":"06327a2db6d3facb56e2c2d0f1506c1a77fece5c","commitMessage":"@@@Merge branch 'security-stable-2.32' into security-master\n","date":"2017-01-24 03:26:10","modifiedFileCount":"15","status":"B","submitter":"Jesse Glick"},{"authorTime":"2018-01-13 06:39:05","codes":[{"authorDate":"2018-01-13 06:39:05","commitOrder":2,"curCode":"    public void testXmlLoad() throws Exception {\n        File exploitFile = f.newFile();\n        try {\n            \r\n            if (exploitFile.exists() && !exploitFile.delete()) {\n                throw new IllegalStateException(\"file exists and cannot be deleted\");\n            }\n            File tempJobDir = new File(j.jenkins.getRootDir(), \"security383\");\n\n            String exploitXml = IOUtils.toString(\n                    XStream2Security383Test.class.getResourceAsStream(\n                            \"/hudson/util/XStream2Security383Test/config.xml\"), \"UTF-8\");\n\n            exploitXml = exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());\n\n            FileUtils.write(new File(tempJobDir, \"config.xml\"), exploitXml);\n\n            try {\n                Items.load(j.jenkins, tempJobDir);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            assertFalse(\"no file should be created here\", exploitFile.exists());\n        } finally {\n            exploitFile.delete();\n        }\n    }\n","date":"2018-01-13 06:39:05","endLine":79,"groupId":"2711","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testXmlLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/46/862eb8b146d181034762e03b85b3e8da9f8cd9.src","preCode":"    public void testXmlLoad() throws Exception {\n        File exploitFile = f.newFile();\n        try {\n            \r\n            if (exploitFile.exists() && !exploitFile.delete()) {\n                throw new IllegalStateException(\"file exists and cannot be deleted\");\n            }\n            File tempJobDir = new File(j.jenkins.getRootDir(), \"security383\");\n\n            String exploitXml = IOUtils.toString(\n                    XStream2Security383Test.class.getResourceAsStream(\n                            \"/hudson/util/XStream2Security383Test/config.xml\"), \"UTF-8\");\n\n            exploitXml = exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());\n\n            FileUtils.write(new File(tempJobDir, \"config.xml\"), exploitXml);\n\n            try {\n                Items.load(j.jenkins, tempJobDir);\n            } catch (Exception e) {\n                \r\n            }\n            assertFalse(\"no file should be created here\", exploitFile.exists());\n        } finally {\n            exploitFile.delete();\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/XStream2Security383Test.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2018-01-13 06:39:05","commitOrder":2,"curCode":"    public void testPostJobXml() throws Exception {\n        File exploitFile = f.newFile();\n        try {\n            \r\n            if (exploitFile.exists() && !exploitFile.delete()) {\n                throw new IllegalStateException(\"file exists and cannot be deleted\");\n            }\n            File tempJobDir = new File(j.jenkins.getRootDir(), \"security383\");\n\n            String exploitXml = IOUtils.toString(\n                    XStream2Security383Test.class.getResourceAsStream(\n                            \"/hudson/util/XStream2Security383Test/config.xml\"), \"UTF-8\");\n\n            exploitXml = exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());\n\n            when(req.getMethod()).thenReturn(\"POST\");\n            when(req.getInputStream()).thenReturn(new Stream(IOUtils.toInputStream(exploitXml)));\n            when(req.getContentType()).thenReturn(\"application/xml\");\n            when(req.getParameter(\"name\")).thenReturn(\"foo\");\n\n            try {\n                j.jenkins.doCreateItem(req, rsp);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n            assertFalse(\"no file should be created here\", exploitFile.exists());\n        } finally {\n            exploitFile.delete();\n        }\n    }\n","date":"2018-01-13 06:39:05","endLine":113,"groupId":"2713","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPostJobXml","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/46/862eb8b146d181034762e03b85b3e8da9f8cd9.src","preCode":"    public void testPostJobXml() throws Exception {\n        File exploitFile = f.newFile();\n        try {\n            \r\n            if (exploitFile.exists() && !exploitFile.delete()) {\n                throw new IllegalStateException(\"file exists and cannot be deleted\");\n            }\n            File tempJobDir = new File(j.jenkins.getRootDir(), \"security383\");\n\n            String exploitXml = IOUtils.toString(\n                    XStream2Security383Test.class.getResourceAsStream(\n                            \"/hudson/util/XStream2Security383Test/config.xml\"), \"UTF-8\");\n\n            exploitXml = exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());\n\n            when(req.getMethod()).thenReturn(\"POST\");\n            when(req.getInputStream()).thenReturn(new Stream(IOUtils.toInputStream(exploitXml)));\n            when(req.getContentType()).thenReturn(\"application/xml\");\n            when(req.getParameter(\"name\")).thenReturn(\"foo\");\n\n            try {\n                j.jenkins.doCreateItem(req, rsp);\n            } catch (Exception e) {\n                \r\n            }\n\n            assertFalse(\"no file should be created here\", exploitFile.exists());\n        } finally {\n            exploitFile.delete();\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/XStream2Security383Test.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"cb4903c20e788f015f6210a965a2759009ff24f2","commitMessage":"@@@[JEP-200] [JENKINS-47736] Merged #3120: ClassFilterImpl\n","date":"2018-01-13 06:39:05","modifiedFileCount":"12","status":"M","submitter":"Jesse Glick"},{"authorTime":"2020-08-11 14:52:06","codes":[{"authorDate":"2020-08-11 14:52:06","commitOrder":3,"curCode":"    public void testXmlLoad() throws Exception {\n        File exploitFile = f.newFile();\n        try {\n            \r\n            if (exploitFile.exists() && !exploitFile.delete()) {\n                throw new IllegalStateException(\"file exists and cannot be deleted\");\n            }\n            File tempJobDir = new File(j.jenkins.getRootDir(), \"security383\");\n\n            String exploitXml = IOUtils.toString(\n                    XStream2Security383Test.class.getResourceAsStream(\n                            \"/hudson/util/XStream2Security383Test/config.xml\"), StandardCharsets.UTF_8);\n\n            exploitXml = exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());\n\n            FileUtils.write(new File(tempJobDir, \"config.xml\"), exploitXml, StandardCharsets.UTF_8);\n\n            try {\n                Items.load(j.jenkins, tempJobDir);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            assertFalse(\"no file should be created here\", exploitFile.exists());\n        } finally {\n            exploitFile.delete();\n        }\n    }\n","date":"2020-08-11 14:52:06","endLine":80,"groupId":"1620","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testXmlLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/4d/45da592972e24871078288f074e8716511747f.src","preCode":"    public void testXmlLoad() throws Exception {\n        File exploitFile = f.newFile();\n        try {\n            \r\n            if (exploitFile.exists() && !exploitFile.delete()) {\n                throw new IllegalStateException(\"file exists and cannot be deleted\");\n            }\n            File tempJobDir = new File(j.jenkins.getRootDir(), \"security383\");\n\n            String exploitXml = IOUtils.toString(\n                    XStream2Security383Test.class.getResourceAsStream(\n                            \"/hudson/util/XStream2Security383Test/config.xml\"), \"UTF-8\");\n\n            exploitXml = exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());\n\n            FileUtils.write(new File(tempJobDir, \"config.xml\"), exploitXml);\n\n            try {\n                Items.load(j.jenkins, tempJobDir);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            assertFalse(\"no file should be created here\", exploitFile.exists());\n        } finally {\n            exploitFile.delete();\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/XStream2Security383Test.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2020-08-11 14:52:06","commitOrder":3,"curCode":"    public void testPostJobXml() throws Exception {\n        File exploitFile = f.newFile();\n        try {\n            \r\n            if (exploitFile.exists() && !exploitFile.delete()) {\n                throw new IllegalStateException(\"file exists and cannot be deleted\");\n            }\n            File tempJobDir = new File(j.jenkins.getRootDir(), \"security383\");\n\n            String exploitXml = IOUtils.toString(\n                    XStream2Security383Test.class.getResourceAsStream(\n                            \"/hudson/util/XStream2Security383Test/config.xml\"), StandardCharsets.UTF_8);\n\n            exploitXml = exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());\n\n            when(req.getMethod()).thenReturn(\"POST\");\n            when(req.getInputStream()).thenReturn(new Stream(IOUtils.toInputStream(exploitXml, StandardCharsets.UTF_8)));\n            when(req.getContentType()).thenReturn(\"application/xml\");\n            when(req.getParameter(\"name\")).thenReturn(\"foo\");\n\n            try {\n                j.jenkins.doCreateItem(req, rsp);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n            assertFalse(\"no file should be created here\", exploitFile.exists());\n        } finally {\n            exploitFile.delete();\n        }\n    }\n","date":"2020-08-11 14:52:06","endLine":114,"groupId":"726","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPostJobXml","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/4d/45da592972e24871078288f074e8716511747f.src","preCode":"    public void testPostJobXml() throws Exception {\n        File exploitFile = f.newFile();\n        try {\n            \r\n            if (exploitFile.exists() && !exploitFile.delete()) {\n                throw new IllegalStateException(\"file exists and cannot be deleted\");\n            }\n            File tempJobDir = new File(j.jenkins.getRootDir(), \"security383\");\n\n            String exploitXml = IOUtils.toString(\n                    XStream2Security383Test.class.getResourceAsStream(\n                            \"/hudson/util/XStream2Security383Test/config.xml\"), \"UTF-8\");\n\n            exploitXml = exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());\n\n            when(req.getMethod()).thenReturn(\"POST\");\n            when(req.getInputStream()).thenReturn(new Stream(IOUtils.toInputStream(exploitXml)));\n            when(req.getContentType()).thenReturn(\"application/xml\");\n            when(req.getParameter(\"name\")).thenReturn(\"foo\");\n\n            try {\n                j.jenkins.doCreateItem(req, rsp);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n            assertFalse(\"no file should be created here\", exploitFile.exists());\n        } finally {\n            exploitFile.delete();\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/XStream2Security383Test.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"f91b1f76629611185cb0c9624bfd40e0a2872f4f","commitMessage":"@@@minor test refactoring around StandardCharsets.  simplified JUnit assertions.  removed obsolete throws.  fixed deprecation warnings (#4872)\n\n","date":"2020-08-11 14:52:06","modifiedFileCount":"14","status":"M","submitter":"StefanSpieker"},{"authorTime":"2021-05-26 03:51:14","codes":[{"authorDate":"2021-05-26 03:51:14","commitOrder":4,"curCode":"    public void testXmlLoad() throws Exception {\n        File exploitFile = f.newFile();\n        try {\n            \r\n            if (exploitFile.exists() && !exploitFile.delete()) {\n                throw new IllegalStateException(\"file exists and cannot be deleted\");\n            }\n            File tempJobDir = new File(j.jenkins.getRootDir(), \"security383\");\n\n            String exploitXml = IOUtils.toString(\n                    XStream2Security383Test.class.getResourceAsStream(\n                            \"/hudson/util/XStream2Security383Test/config.xml\"), StandardCharsets.UTF_8);\n\n            exploitXml = exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());\n\n            FileUtils.write(new File(tempJobDir, \"config.xml\"), exploitXml, StandardCharsets.UTF_8);\n\n            assertThrows(IOException.class, () -> Items.load(j.jenkins, tempJobDir));\n            assertFalse(\"no file should be created here\", exploitFile.exists());\n        } finally {\n            exploitFile.delete();\n        }\n    }\n","date":"2021-05-26 03:51:14","endLine":85,"groupId":"10571","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testXmlLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/61/4ddde757cb9e8bb07aecdc4e94f2af703ef6b2.src","preCode":"    public void testXmlLoad() throws Exception {\n        File exploitFile = f.newFile();\n        try {\n            \r\n            if (exploitFile.exists() && !exploitFile.delete()) {\n                throw new IllegalStateException(\"file exists and cannot be deleted\");\n            }\n            File tempJobDir = new File(j.jenkins.getRootDir(), \"security383\");\n\n            String exploitXml = IOUtils.toString(\n                    XStream2Security383Test.class.getResourceAsStream(\n                            \"/hudson/util/XStream2Security383Test/config.xml\"), StandardCharsets.UTF_8);\n\n            exploitXml = exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());\n\n            FileUtils.write(new File(tempJobDir, \"config.xml\"), exploitXml, StandardCharsets.UTF_8);\n\n            try {\n                Items.load(j.jenkins, tempJobDir);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            assertFalse(\"no file should be created here\", exploitFile.exists());\n        } finally {\n            exploitFile.delete();\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/XStream2Security383Test.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2021-05-26 03:51:14","commitOrder":4,"curCode":"    public void testPostJobXml() throws Exception {\n        File exploitFile = f.newFile();\n        try {\n            \r\n            if (exploitFile.exists() && !exploitFile.delete()) {\n                throw new IllegalStateException(\"file exists and cannot be deleted\");\n            }\n            File tempJobDir = new File(j.jenkins.getRootDir(), \"security383\");\n\n            String exploitXml = IOUtils.toString(\n                    XStream2Security383Test.class.getResourceAsStream(\n                            \"/hudson/util/XStream2Security383Test/config.xml\"), StandardCharsets.UTF_8);\n\n            exploitXml = exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());\n\n            when(req.getMethod()).thenReturn(\"POST\");\n            when(req.getInputStream()).thenReturn(new Stream(IOUtils.toInputStream(exploitXml, StandardCharsets.UTF_8)));\n            when(req.getContentType()).thenReturn(\"application/xml\");\n            when(req.getParameter(\"name\")).thenReturn(\"foo\");\n\n            assertThrows(IOException.class, () -> j.jenkins.doCreateItem(req, rsp));\n            assertFalse(\"no file should be created here\", exploitFile.exists());\n        } finally {\n            exploitFile.delete();\n        }\n    }\n","date":"2021-05-26 03:51:14","endLine":114,"groupId":"10571","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPostJobXml","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/61/4ddde757cb9e8bb07aecdc4e94f2af703ef6b2.src","preCode":"    public void testPostJobXml() throws Exception {\n        File exploitFile = f.newFile();\n        try {\n            \r\n            if (exploitFile.exists() && !exploitFile.delete()) {\n                throw new IllegalStateException(\"file exists and cannot be deleted\");\n            }\n            File tempJobDir = new File(j.jenkins.getRootDir(), \"security383\");\n\n            String exploitXml = IOUtils.toString(\n                    XStream2Security383Test.class.getResourceAsStream(\n                            \"/hudson/util/XStream2Security383Test/config.xml\"), StandardCharsets.UTF_8);\n\n            exploitXml = exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());\n\n            when(req.getMethod()).thenReturn(\"POST\");\n            when(req.getInputStream()).thenReturn(new Stream(IOUtils.toInputStream(exploitXml, StandardCharsets.UTF_8)));\n            when(req.getContentType()).thenReturn(\"application/xml\");\n            when(req.getParameter(\"name\")).thenReturn(\"foo\");\n\n            try {\n                j.jenkins.doCreateItem(req, rsp);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n            assertFalse(\"no file should be created here\", exploitFile.exists());\n        } finally {\n            exploitFile.delete();\n        }\n    }\n","realPath":"test/src/test/java/hudson/util/XStream2Security383Test.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"7f382b576e05c58c2e25d9030bbf0aa2b8c08bba","commitMessage":"@@@Fix `CatchAndPrintStackTrace`.  `CatchFail`.  and `EmptyCatch` Error Prone violations in tests (#5522)\n\nCo-authored-by: Daniel Beck <1831569+daniel-beck@users.noreply.github.com>","date":"2021-05-26 03:51:14","modifiedFileCount":"10","status":"M","submitter":"Basil Crow"}]
