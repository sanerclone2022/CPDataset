[{"authorTime":"2016-07-12 15:13:33","codes":[{"authorDate":"2016-07-20 20:30:09","commitOrder":3,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getInstance();\n        final HashSet<String> hs = new HashSet<String>(nodes);\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = jenkins.getComputer(node_s);\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n                computer.cliOffline(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(node_s + \": \" + e.getMessage());\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","date":"2016-07-20 20:30:09","endLine":94,"groupId":"4604","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/b9/2cee59cae8324283eca3cd7848cb4f709e6ff6.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getInstance();\n        final HashSet<String> hs = new HashSet<String>(nodes);\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = jenkins.getComputer(node_s);\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n                computer.cliOffline(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(node_s + \": \" + e.getMessage());\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/OfflineNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"},{"authorDate":"2016-07-12 15:13:33","commitOrder":3,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliDisconnect(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(String.format(node_s + \": \" + e.getMessage()));\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","date":"2016-07-12 15:13:33","endLine":100,"groupId":"3147","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/fd/f9058050f2fe09445afdfb37d69fa586d5bcbb.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliDisconnect(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(String.format(node_s + \": \" + e.getMessage()));\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DisconnectNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"NB"}],"commitId":"fb7458f2e6acbe955fbb4b8f0afd9d352d839181","commitMessage":"@@@[JENKINS-34468] CLI command offline-node extracted from core to CLI (#2392)\n\n* [JENKINS-34468] CLI command offline-node extracted from core to CLI\n\noffline-node extended to accept multiple node names\noffline-node covered by test-cases\n\n* Fixed translation properties\n\n* Fixes based on Oleg's comments\n\n* Fixed HelpCommandTest test-case\n\n* Minor fixes\n\n* Uses Matchers.instanceOf everywhere instead of Java operator instanceof\n","date":"2016-07-20 20:30:09","modifiedFileCount":"2","status":"M","submitter":"Pavel Janousek"},{"authorTime":"2016-10-15 23:34:12","codes":[{"authorDate":"2016-10-15 23:34:12","commitOrder":4,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getInstance();\n        final HashSet<String> hs = new HashSet<String>(nodes);\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = jenkins.getComputer(node_s);\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n                computer.cliOffline(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(node_s + \": \" + e.getMessage());\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2016-10-15 23:34:12","endLine":95,"groupId":"4604","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e0/03a633b28ce80895a5257e74973918c7ee9a2b.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getInstance();\n        final HashSet<String> hs = new HashSet<String>(nodes);\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = jenkins.getComputer(node_s);\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n                computer.cliOffline(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(node_s + \": \" + e.getMessage());\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/OfflineNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2016-10-15 23:34:12","commitOrder":4,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliDisconnect(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(String.format(node_s + \": \" + e.getMessage()));\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2016-10-15 23:34:12","endLine":101,"groupId":"3147","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/91/265879d1235ccc3601433abcfb1423df606093.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliDisconnect(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(String.format(node_s + \": \" + e.getMessage()));\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(\"Error occured while performing this command, see previous stderr output.\");\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DisconnectNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"b50034c9bffb704acfce0bc49d99855b689eace6","commitMessage":"@@@[FIXED JENKINS-38650] - Cleanup spelling in CLi commands + Javadoc updates (#2571)\n\n* [FIXED JENKINS-38650] - Cleanup spelling in CLi commands.\n\nAlso adds some javadoc and since definitions.\n\n* [JENKINS-38650] - Move common warning message to the constant\n\n* [JENKINS-38650] - DeleteViewCommand should also use the constant string\n\n* [JENKINS-38650] - Rename the constant in order to make the name more explicit\n","date":"2016-10-15 23:34:12","modifiedFileCount":"23","status":"M","submitter":"Oleg Nenashev"},{"authorTime":"2019-01-27 21:52:11","codes":[{"authorDate":"2019-01-27 21:52:11","commitOrder":5,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n        final HashSet<String> hs = new HashSet<>(nodes);\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = jenkins.getComputer(node_s);\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n                computer.cliOffline(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(node_s + \": \" + e.getMessage());\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-01-27 21:52:11","endLine":94,"groupId":"4604","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/39/270918dcb8446506a24386a5497c42eef98350.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getInstance();\n        final HashSet<String> hs = new HashSet<String>(nodes);\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = jenkins.getComputer(node_s);\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n                computer.cliOffline(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(node_s + \": \" + e.getMessage());\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/OfflineNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2019-01-27 21:52:11","commitOrder":5,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>();\n        hs.addAll(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliDisconnect(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(String.format(node_s + \": \" + e.getMessage()));\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-01-27 21:52:11","endLine":101,"groupId":"3147","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ad/003521d77a2025ad09eb5f9e16d6cc06e7f3bb.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<String>();\n        hs.addAll(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliDisconnect(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(String.format(node_s + \": \" + e.getMessage()));\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DisconnectNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"86da98c317f6d40e5ffb40e92bfe351c6543d592","commitMessage":"@@@Merge pull request #3208 from oleg-nenashev/cleanup/cli\n\nBulk cleanup of code in hudson.cli.","date":"2019-01-27 21:52:11","modifiedFileCount":"26","status":"M","submitter":"Baptiste Mathus"},{"authorTime":"2019-07-03 01:06:17","codes":[{"authorDate":"2019-01-27 21:52:11","commitOrder":6,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n        final HashSet<String> hs = new HashSet<>(nodes);\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = jenkins.getComputer(node_s);\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n                computer.cliOffline(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(node_s + \": \" + e.getMessage());\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-01-27 21:52:11","endLine":94,"groupId":"4604","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/39/270918dcb8446506a24386a5497c42eef98350.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n        final HashSet<String> hs = new HashSet<>(nodes);\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = jenkins.getComputer(node_s);\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n                computer.cliOffline(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(node_s + \": \" + e.getMessage());\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/OfflineNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2019-07-03 01:06:17","commitOrder":6,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliDisconnect(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(String.format(node_s + \": \" + e.getMessage()));\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-07-03 01:06:17","endLine":100,"groupId":"3147","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/12/097601ddc3bd5507bae1f30e6dedb23e15627d.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>();\n        hs.addAll(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliDisconnect(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(String.format(node_s + \": \" + e.getMessage()));\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DisconnectNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"d72041041acc3f887237e9d0da639a1587142320","commitMessage":"@@@Merge commit '36fa47add280b81c0e54c61dd7b7d015da5307c9' of github.com:jenkinsci/jenkins\n","date":"2019-07-03 01:06:17","modifiedFileCount":"39","status":"M","submitter":"Jeff Thompson"},{"authorTime":"2019-07-03 02:02:48","codes":[{"authorDate":"2019-01-27 21:52:11","commitOrder":7,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n        final HashSet<String> hs = new HashSet<>(nodes);\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = jenkins.getComputer(node_s);\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n                computer.cliOffline(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(node_s + \": \" + e.getMessage());\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-01-27 21:52:11","endLine":94,"groupId":"4604","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/39/270918dcb8446506a24386a5497c42eef98350.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n        final HashSet<String> hs = new HashSet<>(nodes);\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = jenkins.getComputer(node_s);\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n                computer.cliOffline(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(node_s + \": \" + e.getMessage());\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/OfflineNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2019-07-03 02:02:48","commitOrder":7,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliDisconnect(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(String.format(node_s + \": \" + e.getMessage()));\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-07-03 02:02:48","endLine":100,"groupId":"3147","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/34/da7d8cf6c704196dabc3006a6f38b9048d8d61.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer = null;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliDisconnect(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(String.format(node_s + \": \" + e.getMessage()));\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DisconnectNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"494119294fa2f095b4a28db0dd32c0d2092d9fa1","commitMessage":"@@@Merge commit '4404c6e662befe16e8daa1ea7a412df73b370086' of github.com:jenkinsci/jenkins\n","date":"2019-07-03 02:02:48","modifiedFileCount":"292","status":"M","submitter":"Jeff Thompson"},{"authorTime":"2019-09-27 04:40:34","codes":[{"authorDate":"2019-01-27 21:52:11","commitOrder":8,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n        final HashSet<String> hs = new HashSet<>(nodes);\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = jenkins.getComputer(node_s);\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n                computer.cliOffline(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(node_s + \": \" + e.getMessage());\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-01-27 21:52:11","endLine":94,"groupId":"4604","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/39/270918dcb8446506a24386a5497c42eef98350.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n        final HashSet<String> hs = new HashSet<>(nodes);\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = jenkins.getComputer(node_s);\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n                computer.cliOffline(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(node_s + \": \" + e.getMessage());\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/OfflineNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2019-09-27 04:40:34","commitOrder":8,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliDisconnect(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(node_s + \": \" + e.getMessage());\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-09-27 04:40:34","endLine":100,"groupId":"3147","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/51/a02f1afbb286a894bf8af339501b2ae3a1342b.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliDisconnect(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(String.format(node_s + \": \" + e.getMessage()));\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DisconnectNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"36ac586fc013a8b7228175aea49495a8448a9cc4","commitMessage":"@@@removed redundant string.format calls and merged array creation with addAll() calls (#4214)\n\n","date":"2019-09-27 04:40:34","modifiedFileCount":"9","status":"M","submitter":"StefanSpieker"},{"authorTime":"2020-01-20 21:55:10","codes":[{"authorDate":"2019-01-27 21:52:11","commitOrder":9,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n        final HashSet<String> hs = new HashSet<>(nodes);\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = jenkins.getComputer(node_s);\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n                computer.cliOffline(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(node_s + \": \" + e.getMessage());\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2019-01-27 21:52:11","endLine":94,"groupId":"10959","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/39/270918dcb8446506a24386a5497c42eef98350.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n        final HashSet<String> hs = new HashSet<>(nodes);\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            try {\n                Computer computer = jenkins.getComputer(node_s);\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n                computer.cliOffline(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(node_s + \": \" + e.getMessage());\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/OfflineNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2020-01-20 21:55:10","commitOrder":9,"curCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.get();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliDisconnect(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(node_s + \": \" + e.getMessage());\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","date":"2020-01-20 21:55:10","endLine":100,"groupId":"10959","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/61/35c932bc446a5b1aeae2806acff315389f0238.src","preCode":"    protected int run() throws Exception {\n        boolean errorOccurred = false;\n        final Jenkins jenkins = Jenkins.getActiveInstance();\n\n        final HashSet<String> hs = new HashSet<>(nodes);\n\n        List<String> names = null;\n\n        for (String node_s : hs) {\n            Computer computer;\n\n            try {\n                computer = jenkins.getComputer(node_s);\n\n                if (computer == null) {\n                    if (names == null) {\n                        names = ComputerSet.getComputerNames();\n                    }\n                    String adv = EditDistance.findNearest(node_s, names);\n                    throw new IllegalArgumentException(adv == null ?\n                            hudson.model.Messages.Computer_NoSuchSlaveExistsWithoutAdvice(node_s) :\n                            hudson.model.Messages.Computer_NoSuchSlaveExists(node_s, adv));\n                }\n\n                computer.cliDisconnect(cause);\n            } catch (Exception e) {\n                if (hs.size() == 1) {\n                    throw e;\n                }\n\n                stderr.println(node_s + \": \" + e.getMessage());\n                errorOccurred = true;\n                continue;\n            }\n        }\n\n        if (errorOccurred) {\n            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);\n        }\n        return 0;\n    }\n","realPath":"core/src/main/java/hudson/cli/DisconnectNodeCommand.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"574ec6e5bdf2e4ac9394e290fefff5ac1c9a5c96","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2020-01-20 21:55:10","modifiedFileCount":"193","status":"M","submitter":"Wadeck Follonier"}]
