[{"authorTime":"2013-10-08 11:38:34","codes":[{"authorDate":"2013-10-08 11:38:34","commitOrder":2,"curCode":"    @Test public void createNodeShouldFailIfNodeAlreadyExist() throws Exception {\n\n        j.createSlave(\"SlaveFromXML\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result.stderr(), containsString(\"Node 'SlaveFromXML' already exists\"));\n        assertThat(\"No output expected\", result.stdout(), isEmptyString());\n        assertThat(\"Command is expected to fail\", result.returnCode(), equalTo(-1));\n    }\n","date":"2013-10-08 11:38:34","endLine":136,"groupId":"7396","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeShouldFailIfNodeAlreadyExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e4/dbb872681ce61d2c46c01271635cfdac86a1b4.src","preCode":"    @Test public void createNodeShouldFailIfNodeAlreadyExist() throws Exception {\n\n        j.createSlave(\"SlaveFromXML\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result.stderr(), containsString(\"Node 'SlaveFromXML' already exists\"));\n        assertThat(\"No output expected\", result.stdout(), isEmptyString());\n        assertThat(\"Command is expected to fail\", result.returnCode(), equalTo(-1));\n    }\n","realPath":"test/src/test/java/hudson/cli/CreateNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"MB"},{"authorDate":"2013-10-08 11:38:34","commitOrder":2,"curCode":"    @Test public void createNodeShouldFailIfNodeAlreadyExistWhenNameSpecifiedExplicitly() throws Exception {\n\n        j.createSlave(\"ExistingSlave\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"ExistingSlave\")\n        ;\n\n        assertThat(result.stderr(), containsString(\"Node 'ExistingSlave' already exists\"));\n        assertThat(\"No output expected\", result.stdout(), isEmptyString());\n        assertThat(\"Command is expected to fail\", result.returnCode(), equalTo(-1));\n    }\n","date":"2013-10-08 11:38:34","endLine":151,"groupId":"6266","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createNodeShouldFailIfNodeAlreadyExistWhenNameSpecifiedExplicitly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e4/dbb872681ce61d2c46c01271635cfdac86a1b4.src","preCode":"    @Test public void createNodeShouldFailIfNodeAlreadyExistWhenNameSpecifiedExplicitly() throws Exception {\n\n        j.createSlave(\"ExistingSlave\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"ExistingSlave\")\n        ;\n\n        assertThat(result.stderr(), containsString(\"Node 'ExistingSlave' already exists\"));\n        assertThat(\"No output expected\", result.stdout(), isEmptyString());\n        assertThat(\"Command is expected to fail\", result.returnCode(), equalTo(-1));\n    }\n","realPath":"test/src/test/java/hudson/cli/CreateNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"MB"}],"commitId":"8c4288ca59568e9c8d94022de7871e472f019a2f","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into executor-ondemand\n","date":"2013-10-08 11:38:34","modifiedFileCount":"67","status":"M","submitter":"Kohsuke Kawaguchi"},{"authorTime":"2014-01-30 06:21:11","codes":[{"authorDate":"2014-01-30 06:21:11","commitOrder":3,"curCode":"    @Test public void createNodeShouldFailIfNodeAlreadyExist() throws Exception {\n\n        j.createSlave(\"SlaveFromXML\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result.stderr(), containsString(\"Node 'SlaveFromXML' already exists\"));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result, failedWith(-1));\n    }\n","date":"2014-01-30 06:31:49","endLine":135,"groupId":"7396","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeShouldFailIfNodeAlreadyExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ad/207cc0d74efd7315785963480a27711a4b7d25.src","preCode":"    @Test public void createNodeShouldFailIfNodeAlreadyExist() throws Exception {\n\n        j.createSlave(\"SlaveFromXML\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result.stderr(), containsString(\"Node 'SlaveFromXML' already exists\"));\n        assertThat(\"No output expected\", result.stdout(), isEmptyString());\n        assertThat(\"Command is expected to fail\", result.returnCode(), equalTo(-1));\n    }\n","realPath":"test/src/test/java/hudson/cli/CreateNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2014-01-30 06:21:11","commitOrder":3,"curCode":"    @Test public void createNodeShouldFailIfNodeAlreadyExistWhenNameSpecifiedExplicitly() throws Exception {\n\n        j.createSlave(\"ExistingSlave\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"ExistingSlave\")\n        ;\n\n        assertThat(result.stderr(), containsString(\"Node 'ExistingSlave' already exists\"));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result, failedWith(-1));\n    }\n","date":"2014-01-30 06:31:49","endLine":150,"groupId":"6266","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createNodeShouldFailIfNodeAlreadyExistWhenNameSpecifiedExplicitly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ad/207cc0d74efd7315785963480a27711a4b7d25.src","preCode":"    @Test public void createNodeShouldFailIfNodeAlreadyExistWhenNameSpecifiedExplicitly() throws Exception {\n\n        j.createSlave(\"ExistingSlave\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"ExistingSlave\")\n        ;\n\n        assertThat(result.stderr(), containsString(\"Node 'ExistingSlave' already exists\"));\n        assertThat(\"No output expected\", result.stdout(), isEmptyString());\n        assertThat(\"Command is expected to fail\", result.returnCode(), equalTo(-1));\n    }\n","realPath":"test/src/test/java/hudson/cli/CreateNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"3aa812fe1fc0c2b4b9be3c75c17670837266a358","commitMessage":"@@@Refactor CLI tests\n","date":"2014-01-30 06:31:49","modifiedFileCount":"9","status":"M","submitter":"Oliver Gond?a"},{"authorTime":"2016-02-19 22:53:15","codes":[{"authorDate":"2016-02-19 22:53:15","commitOrder":4,"curCode":"    @Test public void createNodeShouldFailIfNodeAlreadyExist() throws Exception {\n\n        j.createSlave(\"SlaveFromXML\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result.stderr(), containsString(\"ERROR: Node 'SlaveFromXML' already exists\"));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result, failedWith(4));\n    }\n","date":"2016-02-19 22:53:15","endLine":135,"groupId":"7396","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeShouldFailIfNodeAlreadyExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/0c/b5dfc6fc695eda7e3650a6f45c9f346a24b8c0.src","preCode":"    @Test public void createNodeShouldFailIfNodeAlreadyExist() throws Exception {\n\n        j.createSlave(\"SlaveFromXML\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result.stderr(), containsString(\"Node 'SlaveFromXML' already exists\"));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result, failedWith(-1));\n    }\n","realPath":"test/src/test/java/hudson/cli/CreateNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2016-02-19 22:53:15","commitOrder":4,"curCode":"    @Test public void createNodeShouldFailIfNodeAlreadyExistWhenNameSpecifiedExplicitly() throws Exception {\n\n        j.createSlave(\"ExistingSlave\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"ExistingSlave\")\n        ;\n\n        assertThat(result.stderr(), containsString(\"ERROR: Node 'ExistingSlave' already exists\"));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result, failedWith(4));\n    }\n","date":"2016-02-19 22:53:15","endLine":150,"groupId":"6266","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createNodeShouldFailIfNodeAlreadyExistWhenNameSpecifiedExplicitly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/0c/b5dfc6fc695eda7e3650a6f45c9f346a24b8c0.src","preCode":"    @Test public void createNodeShouldFailIfNodeAlreadyExistWhenNameSpecifiedExplicitly() throws Exception {\n\n        j.createSlave(\"ExistingSlave\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"ExistingSlave\")\n        ;\n\n        assertThat(result.stderr(), containsString(\"Node 'ExistingSlave' already exists\"));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result, failedWith(-1));\n    }\n","realPath":"test/src/test/java/hudson/cli/CreateNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"fe41dc89ab9801c9d57713f84e650788e172e115","commitMessage":"@@@Merge pull request #1997 from pjanouse/JENKINS-32273\n\n[JENKINS-32273] Unified an issue handling in CLI\n","date":"2016-02-19 22:53:15","modifiedFileCount":"50","status":"M","submitter":"Oliver Gond?a"},{"authorTime":"2021-06-22 13:30:16","codes":[{"authorDate":"2021-06-22 13:30:16","commitOrder":5,"curCode":"    @Test public void createNodeShouldFailIfNodeAlreadyExist() throws Exception {\n\n        j.createSlave(\"AgentFromXML\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result.stderr(), containsString(\"ERROR: Node 'AgentFromXML' already exists\"));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result, failedWith(4));\n    }\n","date":"2021-06-22 13:30:16","endLine":136,"groupId":"10105","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"createNodeShouldFailIfNodeAlreadyExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/bf/b0d0abc29fab5efbe390b37a1bf152a63aa8a7.src","preCode":"    @Test public void createNodeShouldFailIfNodeAlreadyExist() throws Exception {\n\n        j.createSlave(\"SlaveFromXML\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result.stderr(), containsString(\"ERROR: Node 'SlaveFromXML' already exists\"));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result, failedWith(4));\n    }\n","realPath":"test/src/test/java/hudson/cli/CreateNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2021-06-22 13:30:16","commitOrder":5,"curCode":"    @Test public void createNodeShouldFailIfNodeAlreadyExistWhenNameSpecifiedExplicitly() throws Exception {\n\n        j.createSlave(\"ExistingAgent\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"ExistingAgent\")\n        ;\n\n        assertThat(result.stderr(), containsString(\"ERROR: Node 'ExistingAgent' already exists\"));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result, failedWith(4));\n    }\n","date":"2021-06-22 13:30:16","endLine":151,"groupId":"10105","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"createNodeShouldFailIfNodeAlreadyExistWhenNameSpecifiedExplicitly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/bf/b0d0abc29fab5efbe390b37a1bf152a63aa8a7.src","preCode":"    @Test public void createNodeShouldFailIfNodeAlreadyExistWhenNameSpecifiedExplicitly() throws Exception {\n\n        j.createSlave(\"ExistingSlave\", null, null);\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"ExistingSlave\")\n        ;\n\n        assertThat(result.stderr(), containsString(\"ERROR: Node 'ExistingSlave' already exists\"));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result, failedWith(4));\n    }\n","realPath":"test/src/test/java/hudson/cli/CreateNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"f48c5f552f72485658c1c98482b42ae42ed1ee8c","commitMessage":"@@@Merge pull request #5582 from daniel-beck/terminology-internal\n\nTerminology cleanup: Internal and Javadoc changes","date":"2021-06-22 13:30:16","modifiedFileCount":"48","status":"M","submitter":"Daniel Beck"}]
