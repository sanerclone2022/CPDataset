[{"authorTime":"2018-03-29 08:01:34","codes":[{"authorDate":"2018-03-29 08:01:34","commitOrder":1,"curCode":"    private void checkRegularCase(NoInjectionArePossible.DescriptorImpl descriptor) throws Exception {\n        descriptor.paramMethod = \"validateInjection\";\n        descriptor.paramWith = \"a,b\";\n        \n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        HtmlPage p = wc.goTo(\"test\");\n        \n        descriptor.wasCalled = false;\n        HtmlElementUtil.click(getValidateButton(p));\n        assertNotEquals(\"hacked\", p.getTitleText());\n        assertTrue(descriptor.wasCalled);\n    }\n","date":"2018-03-29 08:01:34","endLine":139,"groupId":"2880","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkRegularCase","params":"(NoInjectionArePossible.DescriptorImpldescriptor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f1/f09b4e0a3abbfda0ac1ea04f28b0d263cc038d.src","preCode":"    private void checkRegularCase(NoInjectionArePossible.DescriptorImpl descriptor) throws Exception {\n        descriptor.paramMethod = \"validateInjection\";\n        descriptor.paramWith = \"a,b\";\n        \n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        HtmlPage p = wc.goTo(\"test\");\n        \n        descriptor.wasCalled = false;\n        HtmlElementUtil.click(getValidateButton(p));\n        assertNotEquals(\"hacked\", p.getTitleText());\n        assertTrue(descriptor.wasCalled);\n    }\n","realPath":"test/src/test/java/lib/form/ValidateButtonTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"B"},{"authorDate":"2018-03-29 08:01:34","commitOrder":1,"curCode":"    private void checkInjectionInWith(NoInjectionArePossible.DescriptorImpl descriptor) throws Exception {\n        descriptor.paramMethod = \"validateInjection\";\n        descriptor.paramWith = \"a,b',document.title='hacked'+'\";\n        \n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        HtmlPage p = wc.goTo(\"test\");\n        \n        descriptor.wasCalled = false;\n        HtmlElementUtil.click(getValidateButton(p));\n        assertNotEquals(\"hacked\", p.getTitleText());\n        assertTrue(descriptor.wasCalled);\n    }\n","date":"2018-03-29 08:01:34","endLine":167,"groupId":"2880","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkInjectionInWith","params":"(NoInjectionArePossible.DescriptorImpldescriptor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f1/f09b4e0a3abbfda0ac1ea04f28b0d263cc038d.src","preCode":"    private void checkInjectionInWith(NoInjectionArePossible.DescriptorImpl descriptor) throws Exception {\n        descriptor.paramMethod = \"validateInjection\";\n        descriptor.paramWith = \"a,b',document.title='hacked'+'\";\n        \n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        HtmlPage p = wc.goTo(\"test\");\n        \n        descriptor.wasCalled = false;\n        HtmlElementUtil.click(getValidateButton(p));\n        assertNotEquals(\"hacked\", p.getTitleText());\n        assertTrue(descriptor.wasCalled);\n    }\n","realPath":"test/src/test/java/lib/form/ValidateButtonTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"B"}],"commitId":"bbe96187ab304b0dff54170d176876f14274aa44","commitMessage":"@@@Merge branch 'security-stable-2.107' into security-master\n","date":"2018-03-29 08:01:34","modifiedFileCount":"7","status":"B","submitter":"Daniel Beck"},{"authorTime":"2019-02-08 13:43:50","codes":[{"authorDate":"2019-02-08 13:43:50","commitOrder":2,"curCode":"    private void checkRegularCase(NoInjectionArePossible.DescriptorImpl descriptor) throws Exception {\n        descriptor.paramMethod = \"validateInjection\";\n        descriptor.paramWith = \"a,b\";\n        \n        JenkinsRule.WebClient wc = j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n        HtmlPage p = wc.goTo(\"test\");\n        \n        descriptor.wasCalled = false;\n        HtmlElementUtil.click(getValidateButton(p));\n        assertNotEquals(\"hacked\", p.getTitleText());\n        assertTrue(descriptor.wasCalled);\n    }\n","date":"2019-02-08 13:43:50","endLine":139,"groupId":"1018","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkRegularCase","params":"(NoInjectionArePossible.DescriptorImpldescriptor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a0/3eaf7e1fe6ed9c524271a685bac65a4306b877.src","preCode":"    private void checkRegularCase(NoInjectionArePossible.DescriptorImpl descriptor) throws Exception {\n        descriptor.paramMethod = \"validateInjection\";\n        descriptor.paramWith = \"a,b\";\n        \n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        HtmlPage p = wc.goTo(\"test\");\n        \n        descriptor.wasCalled = false;\n        HtmlElementUtil.click(getValidateButton(p));\n        assertNotEquals(\"hacked\", p.getTitleText());\n        assertTrue(descriptor.wasCalled);\n    }\n","realPath":"test/src/test/java/lib/form/ValidateButtonTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2019-02-08 13:43:50","commitOrder":2,"curCode":"    private void checkInjectionInWith(NoInjectionArePossible.DescriptorImpl descriptor) throws Exception {\n        descriptor.paramMethod = \"validateInjection\";\n        descriptor.paramWith = \"a,b',document.title='hacked'+'\";\n        \n        JenkinsRule.WebClient wc = j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n        HtmlPage p = wc.goTo(\"test\");\n        \n        descriptor.wasCalled = false;\n        HtmlElementUtil.click(getValidateButton(p));\n        assertNotEquals(\"hacked\", p.getTitleText());\n        assertTrue(descriptor.wasCalled);\n    }\n","date":"2019-02-08 13:43:50","endLine":167,"groupId":"1018","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkInjectionInWith","params":"(NoInjectionArePossible.DescriptorImpldescriptor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a0/3eaf7e1fe6ed9c524271a685bac65a4306b877.src","preCode":"    private void checkInjectionInWith(NoInjectionArePossible.DescriptorImpl descriptor) throws Exception {\n        descriptor.paramMethod = \"validateInjection\";\n        descriptor.paramWith = \"a,b',document.title='hacked'+'\";\n        \n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        HtmlPage p = wc.goTo(\"test\");\n        \n        descriptor.wasCalled = false;\n        HtmlElementUtil.click(getValidateButton(p));\n        assertNotEquals(\"hacked\", p.getTitleText());\n        assertTrue(descriptor.wasCalled);\n    }\n","realPath":"test/src/test/java/lib/form/ValidateButtonTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"}],"commitId":"fab166242dd407a08dcafb727abff94fd3ca7dd1","commitMessage":"@@@Merge pull request #3618 from Wadeck/JENKINS-53511_WEBCLIENT_DISCOVERY_IMPROVEMENT\n\n[JENKINS-53511] Improve discovery and readability of WebClient","date":"2019-02-08 13:43:50","modifiedFileCount":"38","status":"M","submitter":"Oleg Nenashev"}]
