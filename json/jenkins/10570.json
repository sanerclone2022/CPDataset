[{"authorTime":"2016-01-11 23:37:26","codes":[{"authorDate":"2016-01-11 23:37:26","commitOrder":1,"curCode":"    public void runBootFailureScript() throws Exception {\n        final File home = tmpDir.newFolder();\n        j.with(new HudsonHomeLoader() {\n            @Override\n            public File allocate() throws Exception {\n                return home;\n            }\n        });\n\n        \r\n        FileUtils.write(new File(home, \"boot-failure.groovy\"), \"hudson.util.BootFailureTest.problem = exception\");\n        File d = new File(home, \"boot-failure.groovy.d\");\n        d.mkdirs();\n        FileUtils.write(new File(d, \"1.groovy\"), \"hudson.util.BootFailureTest.runRecord << '1'\");\n        FileUtils.write(new File(d, \"2.groovy\"), \"hudson.util.BootFailureTest.runRecord << '2'\");\n\n        \r\n        makeBootFail = true;\n        assertNull(j.newHudson());\n        assertEquals(1, bootFailures(home));\n\n        \r\n        problem = null;\n        runRecord = new ArrayList<String>();\n        assertNull(j.newHudson());\n        assertEquals(2, bootFailures(home));\n        assertEquals(Arrays.asList(\"1\", \"2\"), runRecord);\n\n        \r\n        assertEquals(SeriousError.class, problem.getCause().getClass());\n\n        \r\n        makeBootFail = false;\n        assertNotNull(j.newHudson());\n        assertFalse(BootFailure.getBootFailureFile(home).exists());\n    }\n","date":"2016-01-11 23:37:26","endLine":130,"groupId":"8725","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runBootFailureScript","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5a/b16ed0c99a066066c467b842aa5326a4a05994.src","preCode":"    public void runBootFailureScript() throws Exception {\n        final File home = tmpDir.newFolder();\n        j.with(new HudsonHomeLoader() {\n            @Override\n            public File allocate() throws Exception {\n                return home;\n            }\n        });\n\n        \r\n        FileUtils.write(new File(home, \"boot-failure.groovy\"), \"hudson.util.BootFailureTest.problem = exception\");\n        File d = new File(home, \"boot-failure.groovy.d\");\n        d.mkdirs();\n        FileUtils.write(new File(d, \"1.groovy\"), \"hudson.util.BootFailureTest.runRecord << '1'\");\n        FileUtils.write(new File(d, \"2.groovy\"), \"hudson.util.BootFailureTest.runRecord << '2'\");\n\n        \r\n        makeBootFail = true;\n        assertNull(j.newHudson());\n        assertEquals(1, bootFailures(home));\n\n        \r\n        problem = null;\n        runRecord = new ArrayList<String>();\n        assertNull(j.newHudson());\n        assertEquals(2, bootFailures(home));\n        assertEquals(Arrays.asList(\"1\", \"2\"), runRecord);\n\n        \r\n        assertEquals(SeriousError.class, problem.getCause().getClass());\n\n        \r\n        makeBootFail = false;\n        assertNotNull(j.newHudson());\n        assertFalse(BootFailure.getBootFailureFile(home).exists());\n    }\n","realPath":"test/src/test/java/hudson/util/BootFailureTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"},{"authorDate":"2016-01-11 23:37:26","commitOrder":1,"curCode":"    public void interruptedStartup() throws Exception {\n        final File home = tmpDir.newFolder();\n        j.with(new HudsonHomeLoader() {\n            @Override\n            public File allocate() throws Exception {\n                return home;\n            }\n        });\n        File d = new File(home, \"boot-failure.groovy.d\");\n        d.mkdirs();\n        FileUtils.write(new File(d, \"1.groovy\"), \"hudson.util.BootFailureTest.runRecord << '1'\");\n        j.newHudson();\n        assertEquals(Collections.singletonList(\"1\"), runRecord);\n    }\n","date":"2016-01-11 23:37:26","endLine":151,"groupId":"8727","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"interruptedStartup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5a/b16ed0c99a066066c467b842aa5326a4a05994.src","preCode":"    public void interruptedStartup() throws Exception {\n        final File home = tmpDir.newFolder();\n        j.with(new HudsonHomeLoader() {\n            @Override\n            public File allocate() throws Exception {\n                return home;\n            }\n        });\n        File d = new File(home, \"boot-failure.groovy.d\");\n        d.mkdirs();\n        FileUtils.write(new File(d, \"1.groovy\"), \"hudson.util.BootFailureTest.runRecord << '1'\");\n        j.newHudson();\n        assertEquals(Collections.singletonList(\"1\"), runRecord);\n    }\n","realPath":"test/src/test/java/hudson/util/BootFailureTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"B"}],"commitId":"8cfa1e890f598edfb911d5c9591cd2109b4ad509","commitMessage":"@@@Merge pull request #1950 from jglick/WebAppMain.contextDestroyed-logging\n\n[JENKINS-24696] WebAppMain.contextDestroyed produces weird errors","date":"2016-01-11 23:37:26","modifiedFileCount":"4","status":"B","submitter":"Jesse Glick"},{"authorTime":"2016-01-11 23:37:26","codes":[{"authorDate":"2021-01-03 01:20:57","commitOrder":2,"curCode":"    public void runBootFailureScript() throws Exception {\n        final File home = tmpDir.newFolder();\n        j.with(new HudsonHomeLoader() {\n            @Override\n            public File allocate() throws Exception {\n                return home;\n            }\n        });\n\n        \r\n        FileUtils.write(new File(home, \"boot-failure.groovy\"), \"hudson.util.BootFailureTest.problem = exception\");\n        File d = new File(home, \"boot-failure.groovy.d\");\n        d.mkdirs();\n        FileUtils.write(new File(d, \"1.groovy\"), \"hudson.util.BootFailureTest.runRecord << '1'\");\n        FileUtils.write(new File(d, \"2.groovy\"), \"hudson.util.BootFailureTest.runRecord << '2'\");\n\n        \r\n        makeBootFail = true;\n        assertNull(j.newHudson());\n        assertEquals(1, bootFailures(home));\n\n        \r\n        problem = null;\n        runRecord = new ArrayList<>();\n        assertNull(j.newHudson());\n        assertEquals(2, bootFailures(home));\n        assertEquals(Arrays.asList(\"1\", \"2\"), runRecord);\n\n        \r\n        assertEquals(SeriousError.class, problem.getCause().getClass());\n\n        \r\n        makeBootFail = false;\n        assertNotNull(j.newHudson());\n        assertFalse(BootFailure.getBootFailureFile(home).exists());\n    }\n","date":"2021-01-03 01:20:57","endLine":155,"groupId":"8727","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runBootFailureScript","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/b5/5eee37fed760d4d6c850b2879a36bab73d51fa.src","preCode":"    public void runBootFailureScript() throws Exception {\n        final File home = tmpDir.newFolder();\n        j.with(new HudsonHomeLoader() {\n            @Override\n            public File allocate() throws Exception {\n                return home;\n            }\n        });\n\n        \r\n        FileUtils.write(new File(home, \"boot-failure.groovy\"), \"hudson.util.BootFailureTest.problem = exception\");\n        File d = new File(home, \"boot-failure.groovy.d\");\n        d.mkdirs();\n        FileUtils.write(new File(d, \"1.groovy\"), \"hudson.util.BootFailureTest.runRecord << '1'\");\n        FileUtils.write(new File(d, \"2.groovy\"), \"hudson.util.BootFailureTest.runRecord << '2'\");\n\n        \r\n        makeBootFail = true;\n        assertNull(j.newHudson());\n        assertEquals(1, bootFailures(home));\n\n        \r\n        problem = null;\n        runRecord = new ArrayList<String>();\n        assertNull(j.newHudson());\n        assertEquals(2, bootFailures(home));\n        assertEquals(Arrays.asList(\"1\", \"2\"), runRecord);\n\n        \r\n        assertEquals(SeriousError.class, problem.getCause().getClass());\n\n        \r\n        makeBootFail = false;\n        assertNotNull(j.newHudson());\n        assertFalse(BootFailure.getBootFailureFile(home).exists());\n    }\n","realPath":"test/src/test/java/hudson/util/BootFailureTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2016-01-11 23:37:26","commitOrder":2,"curCode":"    public void interruptedStartup() throws Exception {\n        final File home = tmpDir.newFolder();\n        j.with(new HudsonHomeLoader() {\n            @Override\n            public File allocate() throws Exception {\n                return home;\n            }\n        });\n        File d = new File(home, \"boot-failure.groovy.d\");\n        d.mkdirs();\n        FileUtils.write(new File(d, \"1.groovy\"), \"hudson.util.BootFailureTest.runRecord << '1'\");\n        j.newHudson();\n        assertEquals(Collections.singletonList(\"1\"), runRecord);\n    }\n","date":"2016-01-11 23:37:26","endLine":151,"groupId":"8727","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"interruptedStartup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5a/b16ed0c99a066066c467b842aa5326a4a05994.src","preCode":"    public void interruptedStartup() throws Exception {\n        final File home = tmpDir.newFolder();\n        j.with(new HudsonHomeLoader() {\n            @Override\n            public File allocate() throws Exception {\n                return home;\n            }\n        });\n        File d = new File(home, \"boot-failure.groovy.d\");\n        d.mkdirs();\n        FileUtils.write(new File(d, \"1.groovy\"), \"hudson.util.BootFailureTest.runRecord << '1'\");\n        j.newHudson();\n        assertEquals(Collections.singletonList(\"1\"), runRecord);\n    }\n","realPath":"test/src/test/java/hudson/util/BootFailureTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"a9ee90e7fc931445956616ffae4ea3c5ababe41d","commitMessage":"@@@Merge pull request #5134 from basil/improvements\n\nCode cleanup","date":"2021-01-03 01:20:57","modifiedFileCount":"88","status":"M","submitter":"Oleg Nenashev"},{"authorTime":"2021-04-12 01:49:34","codes":[{"authorDate":"2021-04-12 01:49:34","commitOrder":3,"curCode":"    public void runBootFailureScript() throws Exception {\n        final File home = tmpDir.newFolder();\n        j.with(() -> home);\n\n        \r\n        FileUtils.write(new File(home, \"boot-failure.groovy\"), \"hudson.util.BootFailureTest.problem = exception\", StandardCharsets.UTF_8);\n        File d = new File(home, \"boot-failure.groovy.d\");\n        d.mkdirs();\n        FileUtils.write(new File(d, \"1.groovy\"), \"hudson.util.BootFailureTest.runRecord << '1'\", StandardCharsets.UTF_8);\n        FileUtils.write(new File(d, \"2.groovy\"), \"hudson.util.BootFailureTest.runRecord << '2'\", StandardCharsets.UTF_8);\n\n        \r\n        makeBootFail = true;\n        assertNull(j.newHudson());\n        assertEquals(1, bootFailures(home));\n\n        \r\n        problem = null;\n        runRecord = new ArrayList<>();\n        assertNull(j.newHudson());\n        assertEquals(2, bootFailures(home));\n        assertEquals(Arrays.asList(\"1\", \"2\"), runRecord);\n\n        \r\n        assertEquals(SeriousError.class, problem.getCause().getClass());\n\n        \r\n        makeBootFail = false;\n        assertNotNull(j.newHudson());\n        assertFalse(BootFailure.getBootFailureFile(home).exists());\n    }\n","date":"2021-04-12 01:49:34","endLine":150,"groupId":"10570","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"runBootFailureScript","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/4a/2a0f292a97c06c0d3f84cd67bf6db0fcb60b32.src","preCode":"    public void runBootFailureScript() throws Exception {\n        final File home = tmpDir.newFolder();\n        j.with(new HudsonHomeLoader() {\n            @Override\n            public File allocate() throws Exception {\n                return home;\n            }\n        });\n\n        \r\n        FileUtils.write(new File(home, \"boot-failure.groovy\"), \"hudson.util.BootFailureTest.problem = exception\");\n        File d = new File(home, \"boot-failure.groovy.d\");\n        d.mkdirs();\n        FileUtils.write(new File(d, \"1.groovy\"), \"hudson.util.BootFailureTest.runRecord << '1'\");\n        FileUtils.write(new File(d, \"2.groovy\"), \"hudson.util.BootFailureTest.runRecord << '2'\");\n\n        \r\n        makeBootFail = true;\n        assertNull(j.newHudson());\n        assertEquals(1, bootFailures(home));\n\n        \r\n        problem = null;\n        runRecord = new ArrayList<>();\n        assertNull(j.newHudson());\n        assertEquals(2, bootFailures(home));\n        assertEquals(Arrays.asList(\"1\", \"2\"), runRecord);\n\n        \r\n        assertEquals(SeriousError.class, problem.getCause().getClass());\n\n        \r\n        makeBootFail = false;\n        assertNotNull(j.newHudson());\n        assertFalse(BootFailure.getBootFailureFile(home).exists());\n    }\n","realPath":"test/src/test/java/hudson/util/BootFailureTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2021-04-12 01:49:34","commitOrder":3,"curCode":"    public void interruptedStartup() throws Exception {\n        final File home = tmpDir.newFolder();\n        j.with(() -> home);\n        File d = new File(home, \"boot-failure.groovy.d\");\n        d.mkdirs();\n        FileUtils.write(new File(d, \"1.groovy\"), \"hudson.util.BootFailureTest.runRecord << '1'\", StandardCharsets.UTF_8);\n        j.newHudson();\n        assertEquals(Collections.singletonList(\"1\"), runRecord);\n    }\n","date":"2021-04-12 01:49:34","endLine":166,"groupId":"10570","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"interruptedStartup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/4a/2a0f292a97c06c0d3f84cd67bf6db0fcb60b32.src","preCode":"    public void interruptedStartup() throws Exception {\n        final File home = tmpDir.newFolder();\n        j.with(new HudsonHomeLoader() {\n            @Override\n            public File allocate() throws Exception {\n                return home;\n            }\n        });\n        File d = new File(home, \"boot-failure.groovy.d\");\n        d.mkdirs();\n        FileUtils.write(new File(d, \"1.groovy\"), \"hudson.util.BootFailureTest.runRecord << '1'\");\n        j.newHudson();\n        assertEquals(Collections.singletonList(\"1\"), runRecord);\n    }\n","realPath":"test/src/test/java/hudson/util/BootFailureTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"096a1ca6fb92a98a80ca7f1e3589e237285d3aa7","commitMessage":"@@@Merge pull request #5389 from StefanSpieker/minor_deprecation_fixes\n\nfixed some deprecation warnings","date":"2021-04-12 01:49:34","modifiedFileCount":"23","status":"M","submitter":"Mark Waite"}]
