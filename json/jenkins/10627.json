[{"authorTime":"2019-10-11 15:41:32","codes":[{"authorDate":"2019-10-11 15:41:32","commitOrder":1,"curCode":"    public void missingPermissionsCause403() throws Exception {\n        \r\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        \r\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ, Item.WORKSPACE).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        \r\n        HtmlPage page = webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL anonUrl = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", anonUrl.toString().contains(\"/static-files/\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"Response mentions workspace permission\", page.getWebResponse().getStatusMessage().contains(\"Failed permission check: anonymous is missing the Job/Workspace permission\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.DISCOVER).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"Response mentions workspace permission\", page.getWebResponse().getStatusMessage().contains(\"Failed permission check: Please login to access job\"));\n    }\n","date":"2019-10-11 15:41:32","endLine":228,"groupId":"7682","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"missingPermissionsCause403","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/86/333d23d75f71c49fae8a5f777a6cfbc1e21585.src","preCode":"    public void missingPermissionsCause403() throws Exception {\n        \r\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        \r\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ, Item.WORKSPACE).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        \r\n        HtmlPage page = webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL anonUrl = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", anonUrl.toString().contains(\"/static-files/\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"Response mentions workspace permission\", page.getWebResponse().getStatusMessage().contains(\"Failed permission check: anonymous is missing the Job/Workspace permission\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.DISCOVER).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"Response mentions workspace permission\", page.getWebResponse().getStatusMessage().contains(\"Failed permission check: Please login to access job\"));\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"B"},{"authorDate":"2019-10-11 15:41:32","commitOrder":1,"curCode":"    public void projectWasRenamedCauses404() throws Exception {\n        \r\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        \r\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ, Item.READ, Item.WORKSPACE).everywhere().toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        HtmlPage page = webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL url = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", url.toString().contains(\"/static-files/\"));\n\n        project.renameTo(\"new-job-name\"); \r\n\n        Page failedPage = webClient.getPage(url);\n        Assert.assertEquals(\"page is not found\", 404, failedPage.getWebResponse().getStatusCode());\n        Assert.assertEquals(\"page is not found\", \"Not Found\", failedPage.getWebResponse().getStatusMessage()); \r\n    }\n","date":"2019-10-11 15:41:32","endLine":261,"groupId":"7682","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"projectWasRenamedCauses404","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/86/333d23d75f71c49fae8a5f777a6cfbc1e21585.src","preCode":"    public void projectWasRenamedCauses404() throws Exception {\n        \r\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        \r\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ, Item.READ, Item.WORKSPACE).everywhere().toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        HtmlPage page = webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL url = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", url.toString().contains(\"/static-files/\"));\n\n        project.renameTo(\"new-job-name\"); \r\n\n        Page failedPage = webClient.getPage(url);\n        Assert.assertEquals(\"page is not found\", 404, failedPage.getWebResponse().getStatusCode());\n        Assert.assertEquals(\"page is not found\", \"Not Found\", failedPage.getWebResponse().getStatusMessage()); \r\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"B"}],"commitId":"24d0cf90ab82f89aadd2b54c84c7fcab093b0d37","commitMessage":"@@@[JENKINS-41891] Resource domain support (#4239)\n\n* [JENKINS-41891] Resorce domain support\n\n* Rename a few things\n\n* Encapsulate token\n\n* Update documentation based on review feedback\n\n* Rename field and change symbol for friendlier JCasC format\n\n* Be more explicit about expiration and URL sharing\n\n* Allow favicon.ico.  robots.txt; better logging\n\n* Remove TODO from comment\n\n* Consider resource root URL only set if the Jenkins root URL is set\n\n* Improve form validation\n\n* Clean up form validation warnings a bit\n\n* Fix null handling (even though it'll never be called that way)\n\n* Simpler logging statement after code review\n\n* It's nicer to read this way\n\n* Use the proper API for this with less string magic\n\n* Update TODO comments\n\n* Simplify log statement\n\n* Use base64 instead of hexadecimal for shorter URLs\n\n* Open link to Wikipedia in new tab/window\n\n* Serve directory indexes\n\n* Fix target of redirect in admin monitor\n\n* Update TODO comments in test to current implementation\n\n* Include link to parent directory unless in top level directory\n\n* Update validation message when we cannot determine instance identity\n\n* Improve tests\n\n* Fix permission exception.  further improve tests\n\n* Annotation was redundant\n\n* Add test for resource domain monitor activation\n\n* Do not go through hex encoding/decoding\n\n* Address review comments\n\nCo-Authored-By: Jesse Glick <jglick@cloudbees.com>\n\n* Address further review feedback\n\n* Better logging.  handle exception when the user is gone\n\n* Only get the bytes once\n\n* Inline help improvements\n\nCo-Authored-By: Jeff Thompson <jeffret.g@gmail.com>\n","date":"2019-10-11 15:41:32","modifiedFileCount":"2","status":"B","submitter":"Daniel Beck"},{"authorTime":"2019-10-11 15:41:32","codes":[{"authorDate":"2020-01-20 21:55:10","commitOrder":2,"curCode":"    public void missingPermissionsCause403() throws Exception {\n        \r\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        \r\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ, Item.WORKSPACE).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        \r\n        HtmlPage page = webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL anonUrl = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", anonUrl.toString().contains(\"/static-files/\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertThat(\"Response mentions workspace permission\", page.getWebResponse().getContentAsString(), containsString(\"Failed permission check: anonymous is missing the Job/Workspace permission\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.DISCOVER).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertThat(\"Response mentions workspace permission\", page.getWebResponse().getContentAsString(), containsString(\"Failed permission check: Please login to access job\"));\n    }\n","date":"2020-01-20 21:55:10","endLine":235,"groupId":"7682","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"missingPermissionsCause403","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5c/5c335eb2296ccb4dede335bb47cb5f589ccd22.src","preCode":"    public void missingPermissionsCause403() throws Exception {\n        \r\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        \r\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ, Item.WORKSPACE).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        \r\n        HtmlPage page = webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL anonUrl = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", anonUrl.toString().contains(\"/static-files/\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"Response mentions workspace permission\", page.getWebResponse().getStatusMessage().contains(\"Failed permission check: anonymous is missing the Job/Workspace permission\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.DISCOVER).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"Response mentions workspace permission\", page.getWebResponse().getStatusMessage().contains(\"Failed permission check: Please login to access job\"));\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"},{"authorDate":"2019-10-11 15:41:32","commitOrder":2,"curCode":"    public void projectWasRenamedCauses404() throws Exception {\n        \r\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        \r\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ, Item.READ, Item.WORKSPACE).everywhere().toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        HtmlPage page = webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL url = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", url.toString().contains(\"/static-files/\"));\n\n        project.renameTo(\"new-job-name\"); \r\n\n        Page failedPage = webClient.getPage(url);\n        Assert.assertEquals(\"page is not found\", 404, failedPage.getWebResponse().getStatusCode());\n        Assert.assertEquals(\"page is not found\", \"Not Found\", failedPage.getWebResponse().getStatusMessage()); \r\n    }\n","date":"2019-10-11 15:41:32","endLine":261,"groupId":"7682","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"projectWasRenamedCauses404","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/86/333d23d75f71c49fae8a5f777a6cfbc1e21585.src","preCode":"    public void projectWasRenamedCauses404() throws Exception {\n        \r\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        \r\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ, Item.READ, Item.WORKSPACE).everywhere().toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        HtmlPage page = webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL url = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", url.toString().contains(\"/static-files/\"));\n\n        project.renameTo(\"new-job-name\"); \r\n\n        Page failedPage = webClient.getPage(url);\n        Assert.assertEquals(\"page is not found\", 404, failedPage.getWebResponse().getStatusCode());\n        Assert.assertEquals(\"page is not found\", \"Not Found\", failedPage.getWebResponse().getStatusMessage()); \r\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"N"}],"commitId":"574ec6e5bdf2e4ac9394e290fefff5ac1c9a5c96","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2020-01-20 21:55:10","modifiedFileCount":"193","status":"M","submitter":"Wadeck Follonier"},{"authorTime":"2019-10-11 15:41:32","codes":[{"authorDate":"2020-06-30 21:54:47","commitOrder":3,"curCode":"    public void missingPermissionsCause403() throws Exception {\n        \r\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        \r\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ, Item.WORKSPACE).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        \r\n        HtmlPage page = webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL anonUrl = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", anonUrl.toString().contains(\"/static-files/\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        assertThat(\"Response mentions workspace permission\", page.getWebResponse().getContentAsString(), containsString(\"Failed permission check: anonymous is missing the Job/Workspace permission\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.DISCOVER).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        assertThat(\"Response mentions workspace permission\", page.getWebResponse().getContentAsString(), containsString(\"Failed permission check: Please login to access job\"));\n    }\n","date":"2020-06-30 21:54:47","endLine":236,"groupId":"10627","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"missingPermissionsCause403","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5d/90f81f9d491effc52bd5987bec96952d65424d.src","preCode":"    public void missingPermissionsCause403() throws Exception {\n        \r\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        \r\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ, Item.WORKSPACE).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        \r\n        HtmlPage page = webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL anonUrl = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", anonUrl.toString().contains(\"/static-files/\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertThat(\"Response mentions workspace permission\", page.getWebResponse().getContentAsString(), containsString(\"Failed permission check: anonymous is missing the Job/Workspace permission\"));\n\n        \r\n        a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.DISCOVER).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        \r\n        page = webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        Assert.assertThat(\"Response mentions workspace permission\", page.getWebResponse().getContentAsString(), containsString(\"Failed permission check: Please login to access job\"));\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2019-10-11 15:41:32","commitOrder":3,"curCode":"    public void projectWasRenamedCauses404() throws Exception {\n        \r\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        \r\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ, Item.READ, Item.WORKSPACE).everywhere().toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        HtmlPage page = webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL url = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", url.toString().contains(\"/static-files/\"));\n\n        project.renameTo(\"new-job-name\"); \r\n\n        Page failedPage = webClient.getPage(url);\n        Assert.assertEquals(\"page is not found\", 404, failedPage.getWebResponse().getStatusCode());\n        Assert.assertEquals(\"page is not found\", \"Not Found\", failedPage.getWebResponse().getStatusMessage()); \r\n    }\n","date":"2019-10-11 15:41:32","endLine":261,"groupId":"10627","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"projectWasRenamedCauses404","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/86/333d23d75f71c49fae8a5f777a6cfbc1e21585.src","preCode":"    public void projectWasRenamedCauses404() throws Exception {\n        \r\n        FreeStyleProject project = j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"<html><body>the content</body></html>\"));\n        project.save();\n\n        \r\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a = new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ, Item.READ, Item.WORKSPACE).everywhere().toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient = j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        HtmlPage page = webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL url = page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", url.toString().contains(\"/static-files/\"));\n\n        project.renameTo(\"new-job-name\"); \r\n\n        Page failedPage = webClient.getPage(url);\n        Assert.assertEquals(\"page is not found\", 404, failedPage.getWebResponse().getStatusCode());\n        Assert.assertEquals(\"page is not found\", \"Not Found\", failedPage.getWebResponse().getStatusMessage()); \r\n    }\n","realPath":"test/src/test/java/jenkins/security/ResourceDomainTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"N"}],"commitId":"75391b3ad789c8bb8a488b5e677a2dd3d1741d16","commitMessage":"@@@Merge commit 'a1097dfec620bb309d6df4122f96aa22a5288563' of https://github.com/jenkinsci/jenkins\n","date":"2020-06-30 21:54:47","modifiedFileCount":"290","status":"M","submitter":"Wadeck Follonier"}]
