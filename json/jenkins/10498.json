[{"authorTime":"2018-09-27 21:56:48","codes":[{"authorDate":"2020-03-05 02:00:47","commitOrder":2,"curCode":"    private JenkinsRule.WebClient loginAsUser(String userId) throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to(userId));\n        User alice = User.getById(userId, true);\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.login(alice.getId());\n        return wc;\n    }\n","date":"2020-03-05 02:00:47","endLine":342,"groupId":"5180","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"loginAsUser","params":"(StringuserId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f7/a586c02a6bf35cfc12c6136dec378a93941f34.src","preCode":"    private JenkinsRule.WebClient loginAsUser(String userId) throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to(userId));\n        User alice = User.getById(userId, true);\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.login(alice.getId());\n        return wc;\n    }\n","realPath":"test/src/test/java/hudson/model/RSSTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"B"},{"authorDate":"2018-09-27 21:56:48","commitOrder":2,"curCode":"    private void configureSecurity() throws Exception {\n        rr.j.jenkins.setSecurityRealm(rr.j.createDummySecurityRealm());\n        rr.j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.ADMINISTER).everywhere().toEveryone());\n        \n        rr.j.jenkins.save();\n    }\n","date":"2018-09-27 21:56:48","endLine":196,"groupId":"5046","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"configureSecurity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e6/1b7f297cf69f0b88989d0b972c4d45ab5a620f.src","preCode":"    private void configureSecurity() throws Exception {\n        rr.j.jenkins.setSecurityRealm(rr.j.createDummySecurityRealm());\n        rr.j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.ADMINISTER).everywhere().toEveryone());\n        \n        rr.j.jenkins.save();\n    }\n","realPath":"test/src/test/java/jenkins/security/BasicHeaderApiTokenAuthenticatorTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"NB"}],"commitId":"07bcd1fe597250c30397ee0d1e15f00e8fbf7ffc","commitMessage":"@@@Merge commit '7f8de3ce8a8326c83fe85e14489baacab38241ce' of https://github.com/jenkinsci/jenkins\n","date":"2020-03-05 02:00:47","modifiedFileCount":"119","status":"M","submitter":"Daniel Beck"},{"authorTime":"2021-06-03 15:27:51","codes":[{"authorDate":"2020-03-05 02:00:47","commitOrder":3,"curCode":"    private JenkinsRule.WebClient loginAsUser(String userId) throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to(userId));\n        User alice = User.getById(userId, true);\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.login(alice.getId());\n        return wc;\n    }\n","date":"2020-03-05 02:00:47","endLine":342,"groupId":"10498","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"loginAsUser","params":"(StringuserId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f7/a586c02a6bf35cfc12c6136dec378a93941f34.src","preCode":"    private JenkinsRule.WebClient loginAsUser(String userId) throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to(userId));\n        User alice = User.getById(userId, true);\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.login(alice.getId());\n        return wc;\n    }\n","realPath":"test/src/test/java/hudson/model/RSSTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"N"},{"authorDate":"2021-06-03 15:27:51","commitOrder":3,"curCode":"    private static void configureSecurity(JenkinsRule j) throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.ADMINISTER).everywhere().toEveryone());\n        \n        j.jenkins.save();\n    }\n","date":"2021-06-03 15:27:51","endLine":180,"groupId":"10498","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"configureSecurity","params":"(JenkinsRulej)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/66/142606498d0757ddfd128b3530cded1b744f65.src","preCode":"    private void configureSecurity() throws Exception {\n        rr.j.jenkins.setSecurityRealm(rr.j.createDummySecurityRealm());\n        rr.j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.ADMINISTER).everywhere().toEveryone());\n        \n        rr.j.jenkins.save();\n    }\n","realPath":"test/src/test/java/jenkins/security/BasicHeaderApiTokenAuthenticatorTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"}],"commitId":"5e9b451a11926e5b42d4a94612ca566de058f494","commitMessage":"@@@Merge pull request #5544 from basil/JenkinsSessionRule\n\nMigrate from `RestartableJenkinsRule` to `JenkinsSessionRule`","date":"2021-06-03 15:27:51","modifiedFileCount":"8","status":"M","submitter":"Oleg Nenashev"}]
