[{"authorTime":"2012-01-08 19:54:05","codes":[{"authorDate":"2012-01-08 19:54:05","commitOrder":6,"curCode":"    public void testSymlink() throws Exception {\n        if (Functions.isWindows())     return;\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"a\")).touch(0);\n            Util.createSymlink(d,\"a\",\"x\", l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"x\"),l));\n\n            \r\n            StringBuilder buf = new StringBuilder(768);\n            for( int i=0; i<768; i++)\n                buf.append((char)('0'+(i%10)));\n            Util.createSymlink(d,buf.toString(),\"x\", l);\n\n            String log = baos.toString();\n            if (log.length() > 0)\n                System.err.println(\"log output: \" + log);\n\n            assertEquals(buf.toString(),Util.resolveSymlink(new File(d,\"x\"),l));\n            \n            \n            \r\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"a\",\"anotherDir/link\",l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"anotherDir/link\"),l));\n            \n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","date":"2012-01-08 19:54:05","endLine":187,"groupId":"2838","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSymlink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/6c/cd383c1476e3d8bade6ba487aa058ad1d302f8.src","preCode":"    public void testSymlink() throws Exception {\n        if (Functions.isWindows())     return;\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"a\")).touch(0);\n            Util.createSymlink(d,\"a\",\"x\", l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"x\"),l));\n\n            \r\n            StringBuilder buf = new StringBuilder(768);\n            for( int i=0; i<768; i++)\n                buf.append((char)('0'+(i%10)));\n            Util.createSymlink(d,buf.toString(),\"x\", l);\n\n            String log = baos.toString();\n            if (log.length() > 0)\n                System.err.println(\"log output: \" + log);\n\n            assertEquals(buf.toString(),Util.resolveSymlink(new File(d,\"x\"),l));\n            \n            \n            \r\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"a\",\"anotherDir/link\",l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"anotherDir/link\"),l));\n            \n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","realPath":"core/src/test/java/hudson/UtilTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"MB"},{"authorDate":"2012-01-08 19:54:05","commitOrder":6,"curCode":"    public void testIsSymlink() throws IOException, InterruptedException {\n        Assume.assumeTrue(!Functions.isWindows());\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"original\")).touch(0);\n            assertFalse(Util.isSymlink(new File(d, \"original\")));\n            Util.createSymlink(d,\"original\",\"link\", l);\n            \n            assertTrue(Util.isSymlink(new File(d, \"link\")));\n            \n            \r\n            File dir = new File(d,\"dir\");\n            assertTrue(\"Couldn't create \"+dir,dir.mkdir());\n            assertFalse(Util.isSymlink(new File(d,\"dir\")));\n            \n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"dir\",\"anotherDir/symlinkDir\",l);\n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","date":"2012-01-08 19:54:05","endLine":216,"groupId":"995","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsSymlink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/6c/cd383c1476e3d8bade6ba487aa058ad1d302f8.src","preCode":"    public void testIsSymlink() throws IOException, InterruptedException {\n        Assume.assumeTrue(!Functions.isWindows());\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"original\")).touch(0);\n            assertFalse(Util.isSymlink(new File(d, \"original\")));\n            Util.createSymlink(d,\"original\",\"link\", l);\n            \n            assertTrue(Util.isSymlink(new File(d, \"link\")));\n            \n            \r\n            File dir = new File(d,\"dir\");\n            assertTrue(\"Couldn't create \"+dir,dir.mkdir());\n            assertFalse(Util.isSymlink(new File(d,\"dir\")));\n            \n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"dir\",\"anotherDir/symlinkDir\",l);\n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","realPath":"core/src/test/java/hudson/UtilTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"B"}],"commitId":"181d7dab54ede392b312433d0b7b3663ed902ed0","commitMessage":"@@@Create unit test for Util.isSymlink [JENKINS-12331]","date":"2012-01-08 19:54:05","modifiedFileCount":"1","status":"M","submitter":"Christoph Kutzinski"},{"authorTime":"2012-01-08 19:54:05","codes":[{"authorDate":"2012-08-27 05:25:13","commitOrder":7,"curCode":"    public void testSymlink() throws Exception {\n        Assume.assumeTrue(!Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"a\")).touch(0);\n            Util.createSymlink(d,\"a\",\"x\", l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"x\"),l));\n\n            \r\n            StringBuilder buf = new StringBuilder(768);\n            for( int i=0; i<768; i++)\n                buf.append((char)('0'+(i%10)));\n            Util.createSymlink(d,buf.toString(),\"x\", l);\n\n            String log = baos.toString();\n            if (log.length() > 0)\n                System.err.println(\"log output: \" + log);\n\n            assertEquals(buf.toString(),Util.resolveSymlink(new File(d,\"x\"),l));\n            \n            \n            \r\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"a\",\"anotherDir/link\",l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"anotherDir/link\"),l));\n            \n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","date":"2012-08-27 05:25:13","endLine":202,"groupId":"2838","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSymlink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/b3/b46b241aa1baafe913ac837c100fa0328b614a.src","preCode":"    public void testSymlink() throws Exception {\n        if (Functions.isWindows())     return;\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"a\")).touch(0);\n            Util.createSymlink(d,\"a\",\"x\", l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"x\"),l));\n\n            \r\n            StringBuilder buf = new StringBuilder(768);\n            for( int i=0; i<768; i++)\n                buf.append((char)('0'+(i%10)));\n            Util.createSymlink(d,buf.toString(),\"x\", l);\n\n            String log = baos.toString();\n            if (log.length() > 0)\n                System.err.println(\"log output: \" + log);\n\n            assertEquals(buf.toString(),Util.resolveSymlink(new File(d,\"x\"),l));\n            \n            \n            \r\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"a\",\"anotherDir/link\",l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"anotherDir/link\"),l));\n            \n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","realPath":"core/src/test/java/hudson/UtilTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2012-01-08 19:54:05","commitOrder":7,"curCode":"    public void testIsSymlink() throws IOException, InterruptedException {\n        Assume.assumeTrue(!Functions.isWindows());\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"original\")).touch(0);\n            assertFalse(Util.isSymlink(new File(d, \"original\")));\n            Util.createSymlink(d,\"original\",\"link\", l);\n            \n            assertTrue(Util.isSymlink(new File(d, \"link\")));\n            \n            \r\n            File dir = new File(d,\"dir\");\n            assertTrue(\"Couldn't create \"+dir,dir.mkdir());\n            assertFalse(Util.isSymlink(new File(d,\"dir\")));\n            \n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"dir\",\"anotherDir/symlinkDir\",l);\n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","date":"2012-01-08 19:54:05","endLine":216,"groupId":"995","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsSymlink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/6c/cd383c1476e3d8bade6ba487aa058ad1d302f8.src","preCode":"    public void testIsSymlink() throws IOException, InterruptedException {\n        Assume.assumeTrue(!Functions.isWindows());\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"original\")).touch(0);\n            assertFalse(Util.isSymlink(new File(d, \"original\")));\n            Util.createSymlink(d,\"original\",\"link\", l);\n            \n            assertTrue(Util.isSymlink(new File(d, \"link\")));\n            \n            \r\n            File dir = new File(d,\"dir\");\n            assertTrue(\"Couldn't create \"+dir,dir.mkdir());\n            assertFalse(Util.isSymlink(new File(d,\"dir\")));\n            \n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"dir\",\"anotherDir/symlinkDir\",l);\n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","realPath":"core/src/test/java/hudson/UtilTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"N"}],"commitId":"d5017813ecd411a30de12008778955ec3bf051d2","commitMessage":"@@@Converting to JUnit 4 thus fixing [JENKINS-14641] and also fixing test(Html)Escape which didn't ran previously because of wrong case","date":"2012-08-27 05:25:13","modifiedFileCount":"1","status":"M","submitter":"Christoph Kutzinski"},{"authorTime":"2012-01-08 19:54:05","codes":[{"authorDate":"2012-09-09 23:52:59","commitOrder":8,"curCode":"    public void testSymlink() throws Exception {\n        Assume.assumeTrue(!Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"a\")).touch(0);\n            Util.createSymlink(d,\"a\",\"x\", l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"x\")));\n\n            \r\n            StringBuilder buf = new StringBuilder(768);\n            for( int i=0; i<768; i++)\n                buf.append((char)('0'+(i%10)));\n            Util.createSymlink(d,buf.toString(),\"x\", l);\n\n            String log = baos.toString();\n            if (log.length() > 0)\n                System.err.println(\"log output: \" + log);\n\n            assertEquals(buf.toString(),Util.resolveSymlink(new File(d,\"x\")));\n            \n            \n            \r\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"a\",\"anotherDir/link\",l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"anotherDir/link\")));\n            \n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","date":"2012-09-09 23:52:59","endLine":202,"groupId":"2838","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSymlink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/84/61ee2ee7983e012401dff85aed0a3f8163ee7e.src","preCode":"    public void testSymlink() throws Exception {\n        Assume.assumeTrue(!Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"a\")).touch(0);\n            Util.createSymlink(d,\"a\",\"x\", l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"x\"),l));\n\n            \r\n            StringBuilder buf = new StringBuilder(768);\n            for( int i=0; i<768; i++)\n                buf.append((char)('0'+(i%10)));\n            Util.createSymlink(d,buf.toString(),\"x\", l);\n\n            String log = baos.toString();\n            if (log.length() > 0)\n                System.err.println(\"log output: \" + log);\n\n            assertEquals(buf.toString(),Util.resolveSymlink(new File(d,\"x\"),l));\n            \n            \n            \r\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"a\",\"anotherDir/link\",l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"anotherDir/link\"),l));\n            \n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","realPath":"core/src/test/java/hudson/UtilTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2012-01-08 19:54:05","commitOrder":8,"curCode":"    public void testIsSymlink() throws IOException, InterruptedException {\n        Assume.assumeTrue(!Functions.isWindows());\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"original\")).touch(0);\n            assertFalse(Util.isSymlink(new File(d, \"original\")));\n            Util.createSymlink(d,\"original\",\"link\", l);\n            \n            assertTrue(Util.isSymlink(new File(d, \"link\")));\n            \n            \r\n            File dir = new File(d,\"dir\");\n            assertTrue(\"Couldn't create \"+dir,dir.mkdir());\n            assertFalse(Util.isSymlink(new File(d,\"dir\")));\n            \n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"dir\",\"anotherDir/symlinkDir\",l);\n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","date":"2012-01-08 19:54:05","endLine":216,"groupId":"995","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsSymlink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/6c/cd383c1476e3d8bade6ba487aa058ad1d302f8.src","preCode":"    public void testIsSymlink() throws IOException, InterruptedException {\n        Assume.assumeTrue(!Functions.isWindows());\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"original\")).touch(0);\n            assertFalse(Util.isSymlink(new File(d, \"original\")));\n            Util.createSymlink(d,\"original\",\"link\", l);\n            \n            assertTrue(Util.isSymlink(new File(d, \"link\")));\n            \n            \r\n            File dir = new File(d,\"dir\");\n            assertTrue(\"Couldn't create \"+dir,dir.mkdir());\n            assertFalse(Util.isSymlink(new File(d,\"dir\")));\n            \n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"dir\",\"anotherDir/symlinkDir\",l);\n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","realPath":"core/src/test/java/hudson/UtilTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"N"}],"commitId":"6934aa9ee91c737297de5762a25f8860065de0a3","commitMessage":"@@@Remove usage of deprecated API","date":"2012-09-09 23:52:59","modifiedFileCount":"1","status":"M","submitter":"Christoph Kutzinski"},{"authorTime":"2012-01-08 19:54:05","codes":[{"authorDate":"2012-11-17 02:41:22","commitOrder":9,"curCode":"    public void testSymlink() throws Exception {\n        Assume.assumeTrue(!Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"a\")).touch(0);\n            assertNull(Util.resolveSymlink(new File(d, \"a\")));\n            Util.createSymlink(d,\"a\",\"x\", l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"x\")));\n\n            \r\n            StringBuilder buf = new StringBuilder(768);\n            for( int i=0; i<768; i++)\n                buf.append((char)('0'+(i%10)));\n            Util.createSymlink(d,buf.toString(),\"x\", l);\n\n            String log = baos.toString();\n            if (log.length() > 0)\n                System.err.println(\"log output: \" + log);\n\n            assertEquals(buf.toString(),Util.resolveSymlink(new File(d,\"x\")));\n            \n            \n            \r\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"a\",\"anotherDir/link\",l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"anotherDir/link\")));\n            \n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","date":"2012-11-17 02:41:22","endLine":203,"groupId":"2838","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSymlink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/4d/5cb0fee15e349000b3f16fea44f8b37652c1d8.src","preCode":"    public void testSymlink() throws Exception {\n        Assume.assumeTrue(!Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"a\")).touch(0);\n            Util.createSymlink(d,\"a\",\"x\", l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"x\")));\n\n            \r\n            StringBuilder buf = new StringBuilder(768);\n            for( int i=0; i<768; i++)\n                buf.append((char)('0'+(i%10)));\n            Util.createSymlink(d,buf.toString(),\"x\", l);\n\n            String log = baos.toString();\n            if (log.length() > 0)\n                System.err.println(\"log output: \" + log);\n\n            assertEquals(buf.toString(),Util.resolveSymlink(new File(d,\"x\")));\n            \n            \n            \r\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"a\",\"anotherDir/link\",l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"anotherDir/link\")));\n            \n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","realPath":"core/src/test/java/hudson/UtilTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2012-01-08 19:54:05","commitOrder":9,"curCode":"    public void testIsSymlink() throws IOException, InterruptedException {\n        Assume.assumeTrue(!Functions.isWindows());\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"original\")).touch(0);\n            assertFalse(Util.isSymlink(new File(d, \"original\")));\n            Util.createSymlink(d,\"original\",\"link\", l);\n            \n            assertTrue(Util.isSymlink(new File(d, \"link\")));\n            \n            \r\n            File dir = new File(d,\"dir\");\n            assertTrue(\"Couldn't create \"+dir,dir.mkdir());\n            assertFalse(Util.isSymlink(new File(d,\"dir\")));\n            \n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"dir\",\"anotherDir/symlinkDir\",l);\n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","date":"2012-01-08 19:54:05","endLine":216,"groupId":"995","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsSymlink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/6c/cd383c1476e3d8bade6ba487aa058ad1d302f8.src","preCode":"    public void testIsSymlink() throws IOException, InterruptedException {\n        Assume.assumeTrue(!Functions.isWindows());\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"original\")).touch(0);\n            assertFalse(Util.isSymlink(new File(d, \"original\")));\n            Util.createSymlink(d,\"original\",\"link\", l);\n            \n            assertTrue(Util.isSymlink(new File(d, \"link\")));\n            \n            \r\n            File dir = new File(d,\"dir\");\n            assertTrue(\"Couldn't create \"+dir,dir.mkdir());\n            assertFalse(Util.isSymlink(new File(d,\"dir\")));\n            \n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"dir\",\"anotherDir/symlinkDir\",l);\n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","realPath":"core/src/test/java/hudson/UtilTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"N"}],"commitId":"0552f5ad75da1468050f8aa3ffb533bd3c5d4ca8","commitMessage":"@@@[JENKINS-13202] 646154f refinement: resolveSymlink is documented to return null.  not throw an exception.  when called on a regular file.\n","date":"2012-11-17 02:41:22","modifiedFileCount":"2","status":"M","submitter":"Jesse Glick"},{"authorTime":"2012-01-08 19:54:05","codes":[{"authorDate":"2013-03-25 23:59:36","commitOrder":10,"curCode":"    public void testSymlink() throws Exception {\n        Assume.assumeTrue(!Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"a\")).touch(0);\n            assertNull(Util.resolveSymlink(new File(d, \"a\")));\n            Util.createSymlink(d,\"a\",\"x\", l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"x\")));\n\n            \r\n            StringBuilder buf = new StringBuilder(768);\n            for( int i=0; i<768; i++)\n                buf.append((char)('0'+(i%10)));\n            Util.createSymlink(d,buf.toString(),\"x\", l);\n\n            String log = baos.toString();\n            if (log.length() > 0)\n                System.err.println(\"log output: \" + log);\n\n            assertEquals(buf.toString(),Util.resolveSymlink(new File(d,\"x\")));\n            \n            \n            \r\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"a\",\"anotherDir/link\",l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"anotherDir/link\")));\n            \n            \r\n            \r\n\n            File external = File.createTempFile(\"something\", \"\");\n            try {\n                Util.createSymlink(d, external.getAbsolutePath(), \"outside\", l);\n                assertEquals(external.getAbsolutePath(), Util.resolveSymlink(new File(d, \"outside\")));\n            } finally {\n                assertTrue(external.delete());\n            }\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","date":"2013-03-25 23:59:36","endLine":204,"groupId":"2838","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSymlink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/00/883576473ad502cc293c7159f134127c90636e.src","preCode":"    public void testSymlink() throws Exception {\n        Assume.assumeTrue(!Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"a\")).touch(0);\n            assertNull(Util.resolveSymlink(new File(d, \"a\")));\n            Util.createSymlink(d,\"a\",\"x\", l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"x\")));\n\n            \r\n            StringBuilder buf = new StringBuilder(768);\n            for( int i=0; i<768; i++)\n                buf.append((char)('0'+(i%10)));\n            Util.createSymlink(d,buf.toString(),\"x\", l);\n\n            String log = baos.toString();\n            if (log.length() > 0)\n                System.err.println(\"log output: \" + log);\n\n            assertEquals(buf.toString(),Util.resolveSymlink(new File(d,\"x\")));\n            \n            \n            \r\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"a\",\"anotherDir/link\",l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"anotherDir/link\")));\n            \n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","realPath":"core/src/test/java/hudson/UtilTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2012-01-08 19:54:05","commitOrder":10,"curCode":"    public void testIsSymlink() throws IOException, InterruptedException {\n        Assume.assumeTrue(!Functions.isWindows());\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"original\")).touch(0);\n            assertFalse(Util.isSymlink(new File(d, \"original\")));\n            Util.createSymlink(d,\"original\",\"link\", l);\n            \n            assertTrue(Util.isSymlink(new File(d, \"link\")));\n            \n            \r\n            File dir = new File(d,\"dir\");\n            assertTrue(\"Couldn't create \"+dir,dir.mkdir());\n            assertFalse(Util.isSymlink(new File(d,\"dir\")));\n            \n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"dir\",\"anotherDir/symlinkDir\",l);\n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","date":"2012-01-08 19:54:05","endLine":216,"groupId":"995","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsSymlink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/6c/cd383c1476e3d8bade6ba487aa058ad1d302f8.src","preCode":"    public void testIsSymlink() throws IOException, InterruptedException {\n        Assume.assumeTrue(!Functions.isWindows());\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"original\")).touch(0);\n            assertFalse(Util.isSymlink(new File(d, \"original\")));\n            Util.createSymlink(d,\"original\",\"link\", l);\n            \n            assertTrue(Util.isSymlink(new File(d, \"link\")));\n            \n            \r\n            File dir = new File(d,\"dir\");\n            assertTrue(\"Couldn't create \"+dir,dir.mkdir());\n            assertFalse(Util.isSymlink(new File(d,\"dir\")));\n            \n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"dir\",\"anotherDir/symlinkDir\",l);\n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","realPath":"core/src/test/java/hudson/UtilTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"N"}],"commitId":"68716180228138c22203027549b7ecac57a6713b","commitMessage":"@@@Merge branch 'master' into ACL.impersonate\n","date":"2013-03-25 23:59:36","modifiedFileCount":"112","status":"M","submitter":"Jesse Glick"},{"authorTime":"2015-01-08 05:12:18","codes":[{"authorDate":"2015-01-08 05:12:18","commitOrder":11,"curCode":"    public void testSymlink() throws Exception {\n        Assume.assumeTrue(!Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = tmp.getRoot();\n        try {\n            new FilePath(new File(d, \"a\")).touch(0);\n            assertNull(Util.resolveSymlink(new File(d, \"a\")));\n            Util.createSymlink(d,\"a\",\"x\", l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"x\")));\n\n            \r\n            StringBuilder buf = new StringBuilder(768);\n            for( int i=0; i<768; i++)\n                buf.append((char)('0'+(i%10)));\n            Util.createSymlink(d,buf.toString(),\"x\", l);\n\n            String log = baos.toString();\n            if (log.length() > 0)\n                System.err.println(\"log output: \" + log);\n\n            assertEquals(buf.toString(),Util.resolveSymlink(new File(d,\"x\")));\n            \n            \n            \r\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"a\",\"anotherDir/link\",l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"anotherDir/link\")));\n            \n            \r\n            \r\n\n            File external = File.createTempFile(\"something\", \"\");\n            try {\n                Util.createSymlink(d, external.getAbsolutePath(), \"outside\", l);\n                assertEquals(external.getAbsolutePath(), Util.resolveSymlink(new File(d, \"outside\")));\n            } finally {\n                assertTrue(external.delete());\n            }\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","date":"2015-01-08 05:12:18","endLine":215,"groupId":"2838","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSymlink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/78/8be00ca224e19091347bdf7716a7d08a9482fa.src","preCode":"    public void testSymlink() throws Exception {\n        Assume.assumeTrue(!Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"a\")).touch(0);\n            assertNull(Util.resolveSymlink(new File(d, \"a\")));\n            Util.createSymlink(d,\"a\",\"x\", l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"x\")));\n\n            \r\n            StringBuilder buf = new StringBuilder(768);\n            for( int i=0; i<768; i++)\n                buf.append((char)('0'+(i%10)));\n            Util.createSymlink(d,buf.toString(),\"x\", l);\n\n            String log = baos.toString();\n            if (log.length() > 0)\n                System.err.println(\"log output: \" + log);\n\n            assertEquals(buf.toString(),Util.resolveSymlink(new File(d,\"x\")));\n            \n            \n            \r\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"a\",\"anotherDir/link\",l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"anotherDir/link\")));\n            \n            \r\n            \r\n\n            File external = File.createTempFile(\"something\", \"\");\n            try {\n                Util.createSymlink(d, external.getAbsolutePath(), \"outside\", l);\n                assertEquals(external.getAbsolutePath(), Util.resolveSymlink(new File(d, \"outside\")));\n            } finally {\n                assertTrue(external.delete());\n            }\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","realPath":"core/src/test/java/hudson/UtilTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"},{"authorDate":"2015-01-08 05:12:18","commitOrder":11,"curCode":"    public void testIsSymlink() throws IOException, InterruptedException {\n        Assume.assumeTrue(!Functions.isWindows());\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = tmp.getRoot();\n        try {\n            new FilePath(new File(d, \"original\")).touch(0);\n            assertFalse(Util.isSymlink(new File(d, \"original\")));\n            Util.createSymlink(d,\"original\",\"link\", l);\n            \n            assertTrue(Util.isSymlink(new File(d, \"link\")));\n            \n            \r\n            File dir = new File(d,\"dir\");\n            assertTrue(\"Couldn't create \"+dir,dir.mkdir());\n            assertFalse(Util.isSymlink(new File(d,\"dir\")));\n            \n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"dir\",\"anotherDir/symlinkDir\",l);\n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","date":"2015-01-08 05:12:18","endLine":245,"groupId":"995","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsSymlink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/78/8be00ca224e19091347bdf7716a7d08a9482fa.src","preCode":"    public void testIsSymlink() throws IOException, InterruptedException {\n        Assume.assumeTrue(!Functions.isWindows());\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = Util.createTempDir();\n        try {\n            new FilePath(new File(d, \"original\")).touch(0);\n            assertFalse(Util.isSymlink(new File(d, \"original\")));\n            Util.createSymlink(d,\"original\",\"link\", l);\n            \n            assertTrue(Util.isSymlink(new File(d, \"link\")));\n            \n            \r\n            File dir = new File(d,\"dir\");\n            assertTrue(\"Couldn't create \"+dir,dir.mkdir());\n            assertFalse(Util.isSymlink(new File(d,\"dir\")));\n            \n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n            \n            Util.createSymlink(d,\"dir\",\"anotherDir/symlinkDir\",l);\n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","realPath":"core/src/test/java/hudson/UtilTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"}],"commitId":"cd0752432ed718e30281eb4e2732646550996868","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into JENKINS-22811\n\nConflicts:\n\ttest/src/test/java/hudson/model/ItemGroupMixInTest.java\n","date":"2015-01-08 05:12:18","modifiedFileCount":"190","status":"M","submitter":"christ66"},{"authorTime":"2019-01-14 21:08:51","codes":[{"authorDate":"2019-01-14 21:08:51","commitOrder":12,"curCode":"    public void testSymlink() throws Exception {\n        Assume.assumeFalse(Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = tmp.getRoot();\n        try {\n            new FilePath(new File(d, \"a\")).touch(0);\n            assertNull(Util.resolveSymlink(new File(d, \"a\")));\n            Util.createSymlink(d,\"a\",\"x\", l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"x\")));\n\n            \r\n            StringBuilder buf = new StringBuilder(768);\n            for( int i=0; i<768; i++)\n                buf.append((char)('0'+(i%10)));\n            Util.createSymlink(d,buf.toString(),\"x\", l);\n\n            String log = baos.toString();\n            if (log.length() > 0)\n                System.err.println(\"log output: \" + log);\n\n            assertEquals(buf.toString(),Util.resolveSymlink(new File(d,\"x\")));\n\n\n            \r\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n\n            Util.createSymlink(d,\"a\",\"anotherDir/link\",l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"anotherDir/link\")));\n\n            \r\n            \r\n\n            File external = File.createTempFile(\"something\", \"\");\n            try {\n                Util.createSymlink(d, external.getAbsolutePath(), \"outside\", l);\n                assertEquals(external.getAbsolutePath(), Util.resolveSymlink(new File(d, \"outside\")));\n            } finally {\n                assertTrue(external.delete());\n            }\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","date":"2019-01-14 21:08:51","endLine":226,"groupId":"2838","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testSymlink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/36/586408e52c6373a5e7ce55f02f39cc353e06e8.src","preCode":"    public void testSymlink() throws Exception {\n        Assume.assumeTrue(!Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = tmp.getRoot();\n        try {\n            new FilePath(new File(d, \"a\")).touch(0);\n            assertNull(Util.resolveSymlink(new File(d, \"a\")));\n            Util.createSymlink(d,\"a\",\"x\", l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"x\")));\n\n            \r\n            StringBuilder buf = new StringBuilder(768);\n            for( int i=0; i<768; i++)\n                buf.append((char)('0'+(i%10)));\n            Util.createSymlink(d,buf.toString(),\"x\", l);\n\n            String log = baos.toString();\n            if (log.length() > 0)\n                System.err.println(\"log output: \" + log);\n\n            assertEquals(buf.toString(),Util.resolveSymlink(new File(d,\"x\")));\n\n\n            \r\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n\n            Util.createSymlink(d,\"a\",\"anotherDir/link\",l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"anotherDir/link\")));\n\n            \r\n            \r\n\n            File external = File.createTempFile(\"something\", \"\");\n            try {\n                Util.createSymlink(d, external.getAbsolutePath(), \"outside\", l);\n                assertEquals(external.getAbsolutePath(), Util.resolveSymlink(new File(d, \"outside\")));\n            } finally {\n                assertTrue(external.delete());\n            }\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","realPath":"core/src/test/java/hudson/UtilTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2019-01-14 21:08:51","commitOrder":12,"curCode":"    public void testIsSymlink() throws IOException, InterruptedException {\n        Assume.assumeFalse(Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = tmp.getRoot();\n        try {\n            new FilePath(new File(d, \"original\")).touch(0);\n            assertFalse(Util.isSymlink(new File(d, \"original\")));\n            Util.createSymlink(d,\"original\",\"link\", l);\n\n            assertTrue(Util.isSymlink(new File(d, \"link\")));\n\n            \r\n            File dir = new File(d,\"dir\");\n            assertTrue(\"Couldn't create \"+dir,dir.mkdir());\n            assertFalse(Util.isSymlink(new File(d,\"dir\")));\n\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n\n            Util.createSymlink(d,\"dir\",\"anotherDir/symlinkDir\",l);\n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","date":"2019-01-14 21:08:51","endLine":256,"groupId":"995","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsSymlink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/36/586408e52c6373a5e7ce55f02f39cc353e06e8.src","preCode":"    public void testIsSymlink() throws IOException, InterruptedException {\n        Assume.assumeTrue(!Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = tmp.getRoot();\n        try {\n            new FilePath(new File(d, \"original\")).touch(0);\n            assertFalse(Util.isSymlink(new File(d, \"original\")));\n            Util.createSymlink(d,\"original\",\"link\", l);\n\n            assertTrue(Util.isSymlink(new File(d, \"link\")));\n\n            \r\n            File dir = new File(d,\"dir\");\n            assertTrue(\"Couldn't create \"+dir,dir.mkdir());\n            assertFalse(Util.isSymlink(new File(d,\"dir\")));\n\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n\n            Util.createSymlink(d,\"dir\",\"anotherDir/symlinkDir\",l);\n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","realPath":"core/src/test/java/hudson/UtilTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"3210ff57748ebd8f9d10a01db145f9ab3efacaab","commitMessage":"@@@Merge commit '6d2eb679a6fccc53d32708cc23c5927201953248' into security-master\n","date":"2019-01-14 21:08:51","modifiedFileCount":"16","status":"M","submitter":"Wadeck Follonier"},{"authorTime":"2019-01-16 00:25:50","codes":[{"authorDate":"2019-01-16 00:25:50","commitOrder":13,"curCode":"    public void testSymlink() throws Exception {\n        Assume.assumeTrue(!Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = tmp.getRoot();\n        try {\n            new FilePath(new File(d, \"a\")).touch(0);\n            assertNull(Util.resolveSymlink(new File(d, \"a\")));\n            Util.createSymlink(d,\"a\",\"x\", l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"x\")));\n\n            \r\n            StringBuilder buf = new StringBuilder(768);\n            for( int i=0; i<768; i++)\n                buf.append((char)('0'+(i%10)));\n            Util.createSymlink(d,buf.toString(),\"x\", l);\n\n            String log = baos.toString();\n            if (log.length() > 0)\n                System.err.println(\"log output: \" + log);\n\n            assertEquals(buf.toString(),Util.resolveSymlink(new File(d,\"x\")));\n\n\n            \r\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n\n            Util.createSymlink(d,\"a\",\"anotherDir/link\",l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"anotherDir/link\")));\n\n            \r\n            \r\n\n            File external = File.createTempFile(\"something\", \"\");\n            try {\n                Util.createSymlink(d, external.getAbsolutePath(), \"outside\", l);\n                assertEquals(external.getAbsolutePath(), Util.resolveSymlink(new File(d, \"outside\")));\n            } finally {\n                assertTrue(external.delete());\n            }\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","date":"2019-01-16 00:25:50","endLine":239,"groupId":"2838","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testSymlink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/10/02ac70a3d76096f27997fcf33bfa334ec7653b.src","preCode":"    public void testSymlink() throws Exception {\n        Assume.assumeFalse(Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = tmp.getRoot();\n        try {\n            new FilePath(new File(d, \"a\")).touch(0);\n            assertNull(Util.resolveSymlink(new File(d, \"a\")));\n            Util.createSymlink(d,\"a\",\"x\", l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"x\")));\n\n            \r\n            StringBuilder buf = new StringBuilder(768);\n            for( int i=0; i<768; i++)\n                buf.append((char)('0'+(i%10)));\n            Util.createSymlink(d,buf.toString(),\"x\", l);\n\n            String log = baos.toString();\n            if (log.length() > 0)\n                System.err.println(\"log output: \" + log);\n\n            assertEquals(buf.toString(),Util.resolveSymlink(new File(d,\"x\")));\n\n\n            \r\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n\n            Util.createSymlink(d,\"a\",\"anotherDir/link\",l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"anotherDir/link\")));\n\n            \r\n            \r\n\n            File external = File.createTempFile(\"something\", \"\");\n            try {\n                Util.createSymlink(d, external.getAbsolutePath(), \"outside\", l);\n                assertEquals(external.getAbsolutePath(), Util.resolveSymlink(new File(d, \"outside\")));\n            } finally {\n                assertTrue(external.delete());\n            }\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","realPath":"core/src/test/java/hudson/UtilTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2019-01-16 00:25:50","commitOrder":13,"curCode":"    public void testIsSymlink() throws IOException, InterruptedException {\n        Assume.assumeTrue(!Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = tmp.getRoot();\n        try {\n            new FilePath(new File(d, \"original\")).touch(0);\n            assertFalse(Util.isSymlink(new File(d, \"original\")));\n            Util.createSymlink(d,\"original\",\"link\", l);\n\n            assertTrue(Util.isSymlink(new File(d, \"link\")));\n\n            \r\n            File dir = new File(d,\"dir\");\n            assertTrue(\"Couldn't create \"+dir,dir.mkdir());\n            assertFalse(Util.isSymlink(new File(d,\"dir\")));\n\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n\n            Util.createSymlink(d,\"dir\",\"anotherDir/symlinkDir\",l);\n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","date":"2019-01-16 00:25:50","endLine":269,"groupId":"995","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsSymlink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/10/02ac70a3d76096f27997fcf33bfa334ec7653b.src","preCode":"    public void testIsSymlink() throws IOException, InterruptedException {\n        Assume.assumeFalse(Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = tmp.getRoot();\n        try {\n            new FilePath(new File(d, \"original\")).touch(0);\n            assertFalse(Util.isSymlink(new File(d, \"original\")));\n            Util.createSymlink(d,\"original\",\"link\", l);\n\n            assertTrue(Util.isSymlink(new File(d, \"link\")));\n\n            \r\n            File dir = new File(d,\"dir\");\n            assertTrue(\"Couldn't create \"+dir,dir.mkdir());\n            assertFalse(Util.isSymlink(new File(d,\"dir\")));\n\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n\n            Util.createSymlink(d,\"dir\",\"anotherDir/symlinkDir\",l);\n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","realPath":"core/src/test/java/hudson/UtilTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"94765e1a6fbe3cd96b974394a795b35cc6fd497b","commitMessage":"@@@Merge commit '183ca1f95ebc44318194ff53887b876e47d92d34' into security-master\n","date":"2019-01-16 00:25:50","modifiedFileCount":"3","status":"M","submitter":"Matt Sicker"},{"authorTime":"2019-01-19 00:24:19","codes":[{"authorDate":"2019-01-19 00:24:19","commitOrder":14,"curCode":"    public void testSymlink() throws Exception {\n        Assume.assumeFalse(Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = tmp.getRoot();\n        try {\n            new FilePath(new File(d, \"a\")).touch(0);\n            assertNull(Util.resolveSymlink(new File(d, \"a\")));\n            Util.createSymlink(d,\"a\",\"x\", l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"x\")));\n\n            \r\n            StringBuilder buf = new StringBuilder(768);\n            for( int i=0; i<768; i++)\n                buf.append((char)('0'+(i%10)));\n            Util.createSymlink(d,buf.toString(),\"x\", l);\n\n            String log = baos.toString();\n            if (log.length() > 0)\n                System.err.println(\"log output: \" + log);\n\n            assertEquals(buf.toString(),Util.resolveSymlink(new File(d,\"x\")));\n\n\n            \r\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n\n            Util.createSymlink(d,\"a\",\"anotherDir/link\",l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"anotherDir/link\")));\n\n            \r\n            \r\n\n            File external = File.createTempFile(\"something\", \"\");\n            try {\n                Util.createSymlink(d, external.getAbsolutePath(), \"outside\", l);\n                assertEquals(external.getAbsolutePath(), Util.resolveSymlink(new File(d, \"outside\")));\n            } finally {\n                assertTrue(external.delete());\n            }\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","date":"2019-01-19 00:24:19","endLine":229,"groupId":"10731","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testSymlink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/86/62fc5631f4a15630df37cac7a6d3360c07aa6e.src","preCode":"    public void testSymlink() throws Exception {\n        Assume.assumeTrue(!Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = tmp.getRoot();\n        try {\n            new FilePath(new File(d, \"a\")).touch(0);\n            assertNull(Util.resolveSymlink(new File(d, \"a\")));\n            Util.createSymlink(d,\"a\",\"x\", l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"x\")));\n\n            \r\n            StringBuilder buf = new StringBuilder(768);\n            for( int i=0; i<768; i++)\n                buf.append((char)('0'+(i%10)));\n            Util.createSymlink(d,buf.toString(),\"x\", l);\n\n            String log = baos.toString();\n            if (log.length() > 0)\n                System.err.println(\"log output: \" + log);\n\n            assertEquals(buf.toString(),Util.resolveSymlink(new File(d,\"x\")));\n\n\n            \r\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n\n            Util.createSymlink(d,\"a\",\"anotherDir/link\",l);\n            assertEquals(\"a\",Util.resolveSymlink(new File(d,\"anotherDir/link\")));\n\n            \r\n            \r\n\n            File external = File.createTempFile(\"something\", \"\");\n            try {\n                Util.createSymlink(d, external.getAbsolutePath(), \"outside\", l);\n                assertEquals(external.getAbsolutePath(), Util.resolveSymlink(new File(d, \"outside\")));\n            } finally {\n                assertTrue(external.delete());\n            }\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","realPath":"core/src/test/java/hudson/UtilTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"},{"authorDate":"2019-01-19 00:24:19","commitOrder":14,"curCode":"    public void testIsSymlink() throws IOException, InterruptedException {\n        Assume.assumeFalse(Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = tmp.getRoot();\n        try {\n            new FilePath(new File(d, \"original\")).touch(0);\n            assertFalse(Util.isSymlink(new File(d, \"original\")));\n            Util.createSymlink(d,\"original\",\"link\", l);\n\n            assertTrue(Util.isSymlink(new File(d, \"link\")));\n\n            \r\n            File dir = new File(d,\"dir\");\n            assertTrue(\"Couldn't create \"+dir,dir.mkdir());\n            assertFalse(Util.isSymlink(new File(d,\"dir\")));\n\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n\n            Util.createSymlink(d,\"dir\",\"anotherDir/symlinkDir\",l);\n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","date":"2019-01-19 00:24:19","endLine":259,"groupId":"10731","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsSymlink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/86/62fc5631f4a15630df37cac7a6d3360c07aa6e.src","preCode":"    public void testIsSymlink() throws IOException, InterruptedException {\n        Assume.assumeTrue(!Functions.isWindows());\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        StreamTaskListener l = new StreamTaskListener(baos);\n        File d = tmp.getRoot();\n        try {\n            new FilePath(new File(d, \"original\")).touch(0);\n            assertFalse(Util.isSymlink(new File(d, \"original\")));\n            Util.createSymlink(d,\"original\",\"link\", l);\n\n            assertTrue(Util.isSymlink(new File(d, \"link\")));\n\n            \r\n            File dir = new File(d,\"dir\");\n            assertTrue(\"Couldn't create \"+dir,dir.mkdir());\n            assertFalse(Util.isSymlink(new File(d,\"dir\")));\n\n            File anotherDir = new File(d,\"anotherDir\");\n            assertTrue(\"Couldn't create \"+anotherDir,anotherDir.mkdir());\n\n            Util.createSymlink(d,\"dir\",\"anotherDir/symlinkDir\",l);\n            \r\n            \r\n        } finally {\n            Util.deleteRecursive(d);\n        }\n    }\n","realPath":"core/src/test/java/hudson/UtilTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"}],"commitId":"bf3f0fbf7ece8f6577408c579367c199d02dabcb","commitMessage":"@@@Merge pull request #3841 from jvz/util-delete-regression\n\n[JENKINS-55448] Util delete regression","date":"2019-01-19 00:24:19","modifiedFileCount":"5","status":"M","submitter":"Jeff Thompson"}]
