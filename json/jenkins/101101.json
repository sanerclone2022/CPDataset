[{"authorTime":"2010-03-03 05:19:59","codes":[{"authorDate":"2011-09-10 00:35:37","commitOrder":4,"curCode":"    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n        String resolvesTo = reader.getAttribute(\"resolves-to\");\n        if (\"com.google.common.collect.ImmutableList$SerializedForm\".equals(resolvesTo)) {\n            \r\n            List items = new ArrayList();\n            if (reader.hasMoreChildren()) {\n                reader.moveDown();\n\t            \r\n\t            while (reader.hasMoreChildren()) {\n\t                reader.moveDown();\n\t                try {\n\t                    Object item = readItem(reader, context, items);\n\t                    items.add(item);\n\t                } catch (CannotResolveClassException e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                } catch (LinkageError e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                }\n\t                reader.moveUp();\n\t            }\n\n                \r\n                reader.moveUp();\n            }\n            return ImmutableList.copyOf(items);\n        } else {\n            return ImmutableList.copyOf((List)super.unmarshal(reader, context));\n        }\n    }\n","date":"2011-09-24 13:54:55","endLine":94,"groupId":"917","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(HierarchicalStreamReaderreader@UnmarshallingContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/6c/901e008a78389ac874003c192602e5fef60289.src","preCode":"    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n        String resolvesTo = reader.getAttribute(\"resolves-to\");\n        if (\"com.google.common.collect.ImmutableList$SerializedForm\".equals(resolvesTo)) {\n            \r\n            List items = new ArrayList();\n            if (reader.hasMoreChildren()) {\n                reader.moveDown();\n\t            \r\n\t            while (reader.hasMoreChildren()) {\n\t                reader.moveDown();\n\t                try {\n\t                    Object item = readItem(reader, context, items);\n\t                    items.add(item);\n\t                } catch (CannotResolveClassException e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                } catch (LinkageError e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                }\n\t                reader.moveUp();\n\t            }\n\n                \r\n                reader.moveUp();\n            }\n            return ImmutableList.copyOf(items);\n        } else {\n            return ImmutableList.copyOf((List)super.unmarshal(reader, context));\n        }\n    }\n","realPath":"core/src/main/java/hudson/util/xstream/ImmutableListConverter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"},{"authorDate":"2010-03-03 05:19:59","commitOrder":4,"curCode":"    protected void populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection) {\n        while (reader.hasMoreChildren()) {\n            reader.moveDown();\n            try {\n                Object item = readItem(reader, context, collection);\n                collection.add(item);\n            } catch (CannotResolveClassException e) {\n                LOGGER.log(WARNING,\"Failed to resolve class\",e);\n                RobustReflectionConverter.addErrorInContext(context, e);\n            } catch (LinkageError e) {\n                LOGGER.log(WARNING,\"Failed to resolve class\",e);\n                RobustReflectionConverter.addErrorInContext(context, e);\n            }\n            reader.moveUp();\n        }\n    }\n","date":"2010-03-03 05:19:59","endLine":96,"groupId":"826","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"populateCollection","params":"(HierarchicalStreamReaderreader@UnmarshallingContextcontext@Collectioncollection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5d/2e145a8c632211bac63e86d0ca5c60b5265833.src","preCode":"    protected void populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection) {\n        while (reader.hasMoreChildren()) {\n            reader.moveDown();\n            try {\n                Object item = readItem(reader, context, collection);\n                collection.add(item);\n            } catch (CannotResolveClassException e) {\n                LOGGER.log(WARNING,\"Failed to resolve class\",e);\n                RobustReflectionConverter.addErrorInContext(context, e);\n            } catch (LinkageError e) {\n                LOGGER.log(WARNING,\"Failed to resolve class\",e);\n                RobustReflectionConverter.addErrorInContext(context, e);\n            }\n            reader.moveUp();\n        }\n    }\n","realPath":"core/src/main/java/hudson/util/RobustCollectionConverter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"NB"}],"commitId":"f356b78ea03309517b112bb46442287f81a4531d","commitMessage":"@@@[FIXED JENKINS-10903] Canceling a parent multi-configuration build produce a\nbuild.xml that can't be deserialized\n\nHandle resolves-to=\"com.google.common.collect.ImmutableList$SerializedForm\"\nmanually and construct a suitable list. Any subsequent serialization of the\nclass will use the direct form of serialization.\n","date":"2011-09-24 13:54:55","modifiedFileCount":"2","status":"M","submitter":"Richard Mortimer"},{"authorTime":"2013-08-17 04:21:49","codes":[{"authorDate":"2011-09-10 00:35:37","commitOrder":5,"curCode":"    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n        String resolvesTo = reader.getAttribute(\"resolves-to\");\n        if (\"com.google.common.collect.ImmutableList$SerializedForm\".equals(resolvesTo)) {\n            \r\n            List items = new ArrayList();\n            if (reader.hasMoreChildren()) {\n                reader.moveDown();\n\t            \r\n\t            while (reader.hasMoreChildren()) {\n\t                reader.moveDown();\n\t                try {\n\t                    Object item = readItem(reader, context, items);\n\t                    items.add(item);\n\t                } catch (CannotResolveClassException e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                } catch (LinkageError e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                }\n\t                reader.moveUp();\n\t            }\n\n                \r\n                reader.moveUp();\n            }\n            return ImmutableList.copyOf(items);\n        } else {\n            return ImmutableList.copyOf((List)super.unmarshal(reader, context));\n        }\n    }\n","date":"2011-09-24 13:54:55","endLine":94,"groupId":"917","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(HierarchicalStreamReaderreader@UnmarshallingContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/6c/901e008a78389ac874003c192602e5fef60289.src","preCode":"    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n        String resolvesTo = reader.getAttribute(\"resolves-to\");\n        if (\"com.google.common.collect.ImmutableList$SerializedForm\".equals(resolvesTo)) {\n            \r\n            List items = new ArrayList();\n            if (reader.hasMoreChildren()) {\n                reader.moveDown();\n\t            \r\n\t            while (reader.hasMoreChildren()) {\n\t                reader.moveDown();\n\t                try {\n\t                    Object item = readItem(reader, context, items);\n\t                    items.add(item);\n\t                } catch (CannotResolveClassException e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                } catch (LinkageError e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                }\n\t                reader.moveUp();\n\t            }\n\n                \r\n                reader.moveUp();\n            }\n            return ImmutableList.copyOf(items);\n        } else {\n            return ImmutableList.copyOf((List)super.unmarshal(reader, context));\n        }\n    }\n","realPath":"core/src/main/java/hudson/util/xstream/ImmutableListConverter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2013-08-17 04:21:49","commitOrder":5,"curCode":"    protected void populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection) {\n        while (reader.hasMoreChildren()) {\n            reader.moveDown();\n            try {\n                Object item = readItem(reader, context, collection);\n                collection.add(item);\n            } catch (CannotResolveClassException e) {\n                LOGGER.log(FINE, \"Failed to resolve class\", e);\n                RobustReflectionConverter.addErrorInContext(context, e);\n            } catch (LinkageError e) {\n                LOGGER.log(FINE, \"Failed to resolve class\", e);\n                RobustReflectionConverter.addErrorInContext(context, e);\n            }\n            reader.moveUp();\n        }\n    }\n","date":"2013-08-17 04:21:49","endLine":96,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"populateCollection","params":"(HierarchicalStreamReaderreader@UnmarshallingContextcontext@Collectioncollection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/86/e1de7b218bb13148cce4939963a5b157be3b26.src","preCode":"    protected void populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection) {\n        while (reader.hasMoreChildren()) {\n            reader.moveDown();\n            try {\n                Object item = readItem(reader, context, collection);\n                collection.add(item);\n            } catch (CannotResolveClassException e) {\n                LOGGER.log(WARNING,\"Failed to resolve class\",e);\n                RobustReflectionConverter.addErrorInContext(context, e);\n            } catch (LinkageError e) {\n                LOGGER.log(WARNING,\"Failed to resolve class\",e);\n                RobustReflectionConverter.addErrorInContext(context, e);\n            }\n            reader.moveUp();\n        }\n    }\n","realPath":"core/src/main/java/hudson/util/RobustCollectionConverter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"711316a5bed0d388fba00258827ccc9e255a853e","commitMessage":"@@@Log CannotResolveClassException and similar at FINE.  not WARING.\nOldDataMonitor already collates these errors and presents them to the user with a fix.\nPrinting a stack trace for each and every missing class just clutters the log file.\n(Especially when restarting after disabling a widely-used plugin.)","date":"2013-08-17 04:21:49","modifiedFileCount":"3","status":"M","submitter":"Jesse Glick"},{"authorTime":"2013-12-17 04:03:07","codes":[{"authorDate":"2013-12-17 04:03:07","commitOrder":6,"curCode":"    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n        String resolvesTo = reader.getAttribute(\"resolves-to\");\n        if (\"com.google.common.collect.ImmutableList$SerializedForm\".equals(resolvesTo)) {\n            \r\n            List items = new ArrayList();\n            if (reader.hasMoreChildren()) {\n                reader.moveDown();\n\t            \r\n\t            while (reader.hasMoreChildren()) {\n\t                reader.moveDown();\n\t                try {\n\t                    Object item = readItem(reader, context, items);\n\t                    items.add(item);\n\t                } catch (XStreamException e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                } catch (LinkageError e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                }\n\t                reader.moveUp();\n\t            }\n\n                \r\n                reader.moveUp();\n            }\n            return ImmutableList.copyOf(items);\n        } else {\n            return ImmutableList.copyOf((List)super.unmarshal(reader, context));\n        }\n    }\n","date":"2013-12-17 04:03:07","endLine":94,"groupId":"917","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(HierarchicalStreamReaderreader@UnmarshallingContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/18/fd97ec98ada93a66984ac3ed62b68eceac8ed6.src","preCode":"    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n        String resolvesTo = reader.getAttribute(\"resolves-to\");\n        if (\"com.google.common.collect.ImmutableList$SerializedForm\".equals(resolvesTo)) {\n            \r\n            List items = new ArrayList();\n            if (reader.hasMoreChildren()) {\n                reader.moveDown();\n\t            \r\n\t            while (reader.hasMoreChildren()) {\n\t                reader.moveDown();\n\t                try {\n\t                    Object item = readItem(reader, context, items);\n\t                    items.add(item);\n\t                } catch (CannotResolveClassException e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                } catch (LinkageError e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                }\n\t                reader.moveUp();\n\t            }\n\n                \r\n                reader.moveUp();\n            }\n            return ImmutableList.copyOf(items);\n        } else {\n            return ImmutableList.copyOf((List)super.unmarshal(reader, context));\n        }\n    }\n","realPath":"core/src/main/java/hudson/util/xstream/ImmutableListConverter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2013-12-17 04:03:07","commitOrder":6,"curCode":"    protected void populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection) {\n        while (reader.hasMoreChildren()) {\n            reader.moveDown();\n            try {\n                Object item = readItem(reader, context, collection);\n                collection.add(item);\n            } catch (XStreamException e) {\n                RobustReflectionConverter.addErrorInContext(context, e);\n            } catch (LinkageError e) {\n                RobustReflectionConverter.addErrorInContext(context, e);\n            }\n            reader.moveUp();\n        }\n    }\n","date":"2013-12-17 04:03:07","endLine":92,"groupId":"826","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"populateCollection","params":"(HierarchicalStreamReaderreader@UnmarshallingContextcontext@Collectioncollection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/78/dc2b2f2fdf3f85fcde05cea9271628969f4e57.src","preCode":"    protected void populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection) {\n        while (reader.hasMoreChildren()) {\n            reader.moveDown();\n            try {\n                Object item = readItem(reader, context, collection);\n                collection.add(item);\n            } catch (CannotResolveClassException e) {\n                LOGGER.log(FINE, \"Failed to resolve class\", e);\n                RobustReflectionConverter.addErrorInContext(context, e);\n            } catch (LinkageError e) {\n                LOGGER.log(FINE, \"Failed to resolve class\", e);\n                RobustReflectionConverter.addErrorInContext(context, e);\n            }\n            reader.moveUp();\n        }\n    }\n","realPath":"core/src/main/java/hudson/util/RobustCollectionConverter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"c3508113f0e1659f0e6c1064f31cb2ac1caa2ef3","commitMessage":"@@@[FIXED JENKINS-21024] Catch a full range of XStreamException?s during deserialization.  including rethrown exceptions from readResolve.","date":"2013-12-17 04:03:07","modifiedFileCount":"4","status":"M","submitter":"Jesse Glick"},{"authorTime":"2015-08-16 17:38:51","codes":[{"authorDate":"2015-08-16 17:38:51","commitOrder":7,"curCode":"    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n        String resolvesTo = reader.getAttribute(\"resolves-to\");\n        if (\"com.google.common.collect.ImmutableList$SerializedForm\".equals(resolvesTo)) {\n            \r\n            List items = new ArrayList();\n            if (reader.hasMoreChildren()) {\n                reader.moveDown();\n\t            \r\n\t            while (reader.hasMoreChildren()) {\n\t                reader.moveDown();\n\t                try {\n\t                    Object item = readItem(reader, context, items);\n\t                    items.add(item);\n\t                } catch (CriticalXStreamException e) {\n\t                    throw e;\n\t                } catch (XStreamException e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                } catch (LinkageError e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                }\n\t                reader.moveUp();\n\t            }\n\n                \r\n                reader.moveUp();\n            }\n            return ImmutableList.copyOf(items);\n        } else {\n            return ImmutableList.copyOf((List)super.unmarshal(reader, context));\n        }\n    }\n","date":"2015-08-16 17:38:51","endLine":98,"groupId":"917","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(HierarchicalStreamReaderreader@UnmarshallingContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/37/34c472454fa4e4c8fab16d57104c02914c7196.src","preCode":"    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n        String resolvesTo = reader.getAttribute(\"resolves-to\");\n        if (\"com.google.common.collect.ImmutableList$SerializedForm\".equals(resolvesTo)) {\n            \r\n            List items = new ArrayList();\n            if (reader.hasMoreChildren()) {\n                reader.moveDown();\n\t            \r\n\t            while (reader.hasMoreChildren()) {\n\t                reader.moveDown();\n\t                try {\n\t                    Object item = readItem(reader, context, items);\n\t                    items.add(item);\n\t                } catch (XStreamException e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                } catch (LinkageError e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                }\n\t                reader.moveUp();\n\t            }\n\n                \r\n                reader.moveUp();\n            }\n            return ImmutableList.copyOf(items);\n        } else {\n            return ImmutableList.copyOf((List)super.unmarshal(reader, context));\n        }\n    }\n","realPath":"core/src/main/java/hudson/util/xstream/ImmutableListConverter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2015-08-16 17:38:51","commitOrder":7,"curCode":"    protected void populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection) {\n        while (reader.hasMoreChildren()) {\n            reader.moveDown();\n            try {\n                Object item = readItem(reader, context, collection);\n                collection.add(item);\n            } catch (CriticalXStreamException e) {\n                throw e;\n            } catch (XStreamException e) {\n                RobustReflectionConverter.addErrorInContext(context, e);\n            } catch (LinkageError e) {\n                RobustReflectionConverter.addErrorInContext(context, e);\n            }\n            reader.moveUp();\n        }\n    }\n","date":"2015-08-16 17:38:51","endLine":96,"groupId":"826","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"populateCollection","params":"(HierarchicalStreamReaderreader@UnmarshallingContextcontext@Collectioncollection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d0/903ff82b5c9cdc9e15d933bf51202a8ee2962b.src","preCode":"    protected void populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection) {\n        while (reader.hasMoreChildren()) {\n            reader.moveDown();\n            try {\n                Object item = readItem(reader, context, collection);\n                collection.add(item);\n            } catch (XStreamException e) {\n                RobustReflectionConverter.addErrorInContext(context, e);\n            } catch (LinkageError e) {\n                RobustReflectionConverter.addErrorInContext(context, e);\n            }\n            reader.moveUp();\n        }\n    }\n","realPath":"core/src/main/java/hudson/util/RobustCollectionConverter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"e46afb59fd09c9418297a0573252171921a48cea","commitMessage":"@@@Merge pull request #1715 from ikedam/feature/JENKINS-28440_HandleCriticalField\n\n[JENKINS-28440] Reject configurations with errors in critical fields via REST / CLI","date":"2015-08-16 17:38:51","modifiedFileCount":"6","status":"M","submitter":"Daniel Beck"},{"authorTime":"2019-04-08 23:18:26","codes":[{"authorDate":"2019-04-08 23:18:26","commitOrder":8,"curCode":"    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n        String resolvesTo = reader.getAttribute(\"resolves-to\");\n        if (\"com.google.common.collect.ImmutableList$SerializedForm\".equals(resolvesTo)) {\n            \r\n            List items = new ArrayList();\n            if (reader.hasMoreChildren()) {\n                reader.moveDown();\n\t            \r\n\t            while (reader.hasMoreChildren()) {\n\t                reader.moveDown();\n\t                try {\n\t                    Object item = readItem(reader, context, items);\n\t                    items.add(item);\n\t                } catch (CriticalXStreamException e) {\n\t                    throw e;\n\t                } catch (XStreamException | LinkageError e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                }\n                    reader.moveUp();\n\t            }\n\n                \r\n                reader.moveUp();\n            }\n            return ImmutableList.copyOf(items);\n        } else {\n            return ImmutableList.copyOf((List)super.unmarshal(reader, context));\n        }\n    }\n","date":"2019-04-08 23:18:26","endLine":96,"groupId":"917","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"unmarshal","params":"(HierarchicalStreamReaderreader@UnmarshallingContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/fe/06ac74117047d273b30ec0d905b1d4d29a8b15.src","preCode":"    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n        String resolvesTo = reader.getAttribute(\"resolves-to\");\n        if (\"com.google.common.collect.ImmutableList$SerializedForm\".equals(resolvesTo)) {\n            \r\n            List items = new ArrayList();\n            if (reader.hasMoreChildren()) {\n                reader.moveDown();\n\t            \r\n\t            while (reader.hasMoreChildren()) {\n\t                reader.moveDown();\n\t                try {\n\t                    Object item = readItem(reader, context, items);\n\t                    items.add(item);\n\t                } catch (CriticalXStreamException e) {\n\t                    throw e;\n\t                } catch (XStreamException e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                } catch (LinkageError e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                }\n\t                reader.moveUp();\n\t            }\n\n                \r\n                reader.moveUp();\n            }\n            return ImmutableList.copyOf(items);\n        } else {\n            return ImmutableList.copyOf((List)super.unmarshal(reader, context));\n        }\n    }\n","realPath":"core/src/main/java/hudson/util/xstream/ImmutableListConverter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2019-04-08 23:18:26","commitOrder":8,"curCode":"    protected void populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection) {\n        while (reader.hasMoreChildren()) {\n            reader.moveDown();\n            try {\n                Object item = readItem(reader, context, collection);\n                collection.add(item);\n            } catch (CriticalXStreamException e) {\n                throw e;\n            } catch (XStreamException | LinkageError e) {\n                RobustReflectionConverter.addErrorInContext(context, e);\n            }\n            reader.moveUp();\n        }\n    }\n","date":"2019-04-08 23:18:26","endLine":94,"groupId":"826","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"populateCollection","params":"(HierarchicalStreamReaderreader@UnmarshallingContextcontext@Collectioncollection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/7f/95b2e873a4cc651f7755dc5346c48c9ee240a2.src","preCode":"    protected void populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection) {\n        while (reader.hasMoreChildren()) {\n            reader.moveDown();\n            try {\n                Object item = readItem(reader, context, collection);\n                collection.add(item);\n            } catch (CriticalXStreamException e) {\n                throw e;\n            } catch (XStreamException e) {\n                RobustReflectionConverter.addErrorInContext(context, e);\n            } catch (LinkageError e) {\n                RobustReflectionConverter.addErrorInContext(context, e);\n            }\n            reader.moveUp();\n        }\n    }\n","realPath":"core/src/main/java/hudson/util/RobustCollectionConverter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"6b4c6c955d10ade9b78ab02fd2733cc29e0b1ab3","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2019-04-08 23:18:26","modifiedFileCount":"242","status":"M","submitter":"Daniel Beck"},{"authorTime":"2020-11-07 05:03:23","codes":[{"authorDate":"2019-04-08 23:18:26","commitOrder":9,"curCode":"    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n        String resolvesTo = reader.getAttribute(\"resolves-to\");\n        if (\"com.google.common.collect.ImmutableList$SerializedForm\".equals(resolvesTo)) {\n            \r\n            List items = new ArrayList();\n            if (reader.hasMoreChildren()) {\n                reader.moveDown();\n\t            \r\n\t            while (reader.hasMoreChildren()) {\n\t                reader.moveDown();\n\t                try {\n\t                    Object item = readItem(reader, context, items);\n\t                    items.add(item);\n\t                } catch (CriticalXStreamException e) {\n\t                    throw e;\n\t                } catch (XStreamException | LinkageError e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                }\n                    reader.moveUp();\n\t            }\n\n                \r\n                reader.moveUp();\n            }\n            return ImmutableList.copyOf(items);\n        } else {\n            return ImmutableList.copyOf((List)super.unmarshal(reader, context));\n        }\n    }\n","date":"2019-04-08 23:18:26","endLine":96,"groupId":"101101","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"unmarshal","params":"(HierarchicalStreamReaderreader@UnmarshallingContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/fe/06ac74117047d273b30ec0d905b1d4d29a8b15.src","preCode":"    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n        String resolvesTo = reader.getAttribute(\"resolves-to\");\n        if (\"com.google.common.collect.ImmutableList$SerializedForm\".equals(resolvesTo)) {\n            \r\n            List items = new ArrayList();\n            if (reader.hasMoreChildren()) {\n                reader.moveDown();\n\t            \r\n\t            while (reader.hasMoreChildren()) {\n\t                reader.moveDown();\n\t                try {\n\t                    Object item = readItem(reader, context, items);\n\t                    items.add(item);\n\t                } catch (CriticalXStreamException e) {\n\t                    throw e;\n\t                } catch (XStreamException | LinkageError e) {\n\t                    RobustReflectionConverter.addErrorInContext(context, e);\n\t                }\n                    reader.moveUp();\n\t            }\n\n                \r\n                reader.moveUp();\n            }\n            return ImmutableList.copyOf(items);\n        } else {\n            return ImmutableList.copyOf((List)super.unmarshal(reader, context));\n        }\n    }\n","realPath":"core/src/main/java/hudson/util/xstream/ImmutableListConverter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"},{"authorDate":"2020-11-07 05:03:23","commitOrder":9,"curCode":"    protected void populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection) {\n        while (reader.hasMoreChildren()) {\n            reader.moveDown();\n            try {\n                Object item = readBareItem(reader, context, collection);\n                collection.add(item);\n            } catch (CriticalXStreamException e) {\n                throw e;\n            } catch (XStreamException | LinkageError e) {\n                RobustReflectionConverter.addErrorInContext(context, e);\n            }\n            reader.moveUp();\n        }\n    }\n","date":"2020-11-07 05:03:23","endLine":96,"groupId":"101101","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"populateCollection","params":"(HierarchicalStreamReaderreader@UnmarshallingContextcontext@Collectioncollection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/4e/0d01b15c1ff7ca1857468c6259f29101e16aa6.src","preCode":"    protected void populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection) {\n        while (reader.hasMoreChildren()) {\n            reader.moveDown();\n            try {\n                Object item = readItem(reader, context, collection);\n                collection.add(item);\n            } catch (CriticalXStreamException e) {\n                throw e;\n            } catch (XStreamException | LinkageError e) {\n                RobustReflectionConverter.addErrorInContext(context, e);\n            }\n            reader.moveUp();\n        }\n    }\n","realPath":"core/src/main/java/hudson/util/RobustCollectionConverter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"77f24bfb9adc2f154d8121694d456a0cc455a516","commitMessage":"@@@[JEP-228] Unforking XStream (#4944)\n\n* Unforking XStream\n\n* Some overrides missing from MapperDelegate\n\n* [XSTR-762] writeReplace & readResolve must be accessible to be used from subclasses\n\n* DomElement.click overloads changed incompatibly\n\n* Giving up on ToolInstallation being Serializable.\nFixing MavenInstallation accordingly.\nAntInstallation was already fixed: https://github.com/jenkinsci/ant-plugin/commit/c957dca4cd7789e3918e90ae020687aeaeea998e\n\n* Relaxing message assertion in RobustReflectionConverter.randomExceptionsReported\n\n* Picking up https://github.com/jenkinsci/matrix-auth-plugin/pull/89 caught via JobTest\n\n* https://github.com/jenkinsci/jenkins-test-harness/pull/243 released\n\n* Another case forgotten in 0e5aeec4ccc67207c0912ffe471fe5cf2815cf04\n\n* XStream has SecurityMapper.  but we have our own system already.  so suppress warning\n\n* GetMavenVersion was also serializing its outer class\n\n* Trying to make ToolInstallation serializable compatible\n\n* Avoid throwing IOException from PersistedList.inModified for common cases covered by https://github.com/jenkinsci/jenkins-test-harness/pull/243\n\n* Found a way to avoid looking up XStream.converterRegistry by reflection\n\n* XStream2Test.crashXstream now throwing ConversionException.  not ForbiddenClassException\n\n* Noting which version of the parent POM has https://github.com/jenkinsci/jenkins-test-harness/pull/243\n\n* Refreshed Javadoc for XStream2\n\n* The simplest solution to JENKINS-19561 seems to be to stop using autodetectAnnotations\n\n* Fixing some deprecations in Robust*Converter\n\n* Display OldDataMonitor errors from RobustReflectionConverter during functional tests\n\n* Stray digit in test name\n\n* Added XStream2AnnotationTest to clearly document incompatibility\n\n* Picking up release of https://github.com/jenkinsci/matrix-auth-plugin/pull/89\n\nCo-authored-by: Basil Crow <me@basilcrow.com>\n\nCo-authored-by: Basil Crow <me@basilcrow.com>","date":"2020-11-07 05:03:23","modifiedFileCount":"17","status":"M","submitter":"Jesse Glick"}]
