[{"authorTime":"2016-07-12 04:28:56","codes":[{"authorDate":"2016-07-12 04:28:56","commitOrder":2,"curCode":"    public void shouldBeUnableToSeeJobsIfNoPermissions() throws Exception {\n        \r\n        final FreeStyleProject project1 = createAndRunProjectWithPublisher(\"fpProducer\", \"test.txt\");\n        final FreeStyleBuild build = project1.getLastBuild();\n        \n        \r\n        final FreeStyleProject project2 = rule.createFreeStyleProject(\"project2\");\n        project2.getBuildersList().add(new WorkspaceCopyFileBuilder(\"test.txt\", project1.getName(), build.getNumber()));\n        project2.getPublishersList().add(new Fingerprinter(\"test.txt\"));\n        final FreeStyleBuild build2 = rule.buildAndAssertSuccess(project2);\n        \n        \r\n        final Fingerprint fp = getFingerprint(build, \"test.txt\");\n        \n        \r\n        User user1 = User.get(\"user1\"); \r\n        User user2 = User.get(\"user2\"); \r\n        User user3 = User.get(\"user3\"); \r\n          \n        \r\n        setupProjectMatrixAuthStrategy(Jenkins.READ);\n        setJobPermissionsOnce(project1, \"user1\", Item.READ, Item.DISCOVER);\n        setJobPermissionsOnce(project2, \"user2\", Item.READ, Item.DISCOVER);\n\n        try (ACLContext _ = ACL.as(user1)) {\n            Fingerprint.BuildPtr original = fp.getOriginal();\n            assertThat(\"user1 should be able to see the origin\", fp.getOriginal(), notNullValue());\n            assertEquals(\"user1 should be able to see the origin's project name\", project1.getName(), original.getName());\n            assertEquals(\"user1 should be able to see the origin's build number\", build.getNumber(), original.getNumber());\n            assertEquals(\"Only one usage should be visible to user1\", 1, fp._getUsages().size());\n            assertEquals(\"Only project1 should be visible to user1\", project1.getFullName(), fp._getUsages().get(0).name);\n        }\n\n        try (ACLContext _ = ACL.as(user2)) {\n            assertThat(\"user2 should be unable to see the origin\", fp.getOriginal(), nullValue());\n            assertEquals(\"Only one usage should be visible to user2\", 1, fp._getUsages().size());\n            assertEquals(\"Only project2 should be visible to user2\", project2.getFullName(), fp._getUsages().get(0).name);\n        }\n\n        try (ACLContext _ = ACL.as(user3)) {\n            Fingerprint.BuildPtr original = fp.getOriginal();\n            assertThat(\"user3 should be unable to see the origin\", fp.getOriginal(), nullValue());\n            assertEquals(\"All usages should be invisible for user3\", 0, fp._getUsages().size());\n        }\n    }\n","date":"2016-07-12 04:28:56","endLine":165,"groupId":"312","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldBeUnableToSeeJobsIfNoPermissions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5c/b25a258a303e275f24bfc939de901cc96acce0.src","preCode":"    public void shouldBeUnableToSeeJobsIfNoPermissions() throws Exception {\n        \r\n        final FreeStyleProject project1 = createAndRunProjectWithPublisher(\"fpProducer\", \"test.txt\");\n        final FreeStyleBuild build = project1.getLastBuild();\n        \n        \r\n        final FreeStyleProject project2 = rule.createFreeStyleProject(\"project2\");\n        project2.getBuildersList().add(new WorkspaceCopyFileBuilder(\"test.txt\", project1.getName(), build.getNumber()));\n        project2.getPublishersList().add(new Fingerprinter(\"test.txt\"));\n        final FreeStyleBuild build2 = rule.buildAndAssertSuccess(project2);\n        \n        \r\n        final Fingerprint fp = getFingerprint(build, \"test.txt\");\n        \n        \r\n        User user1 = User.get(\"user1\"); \r\n        User user2 = User.get(\"user2\"); \r\n        User user3 = User.get(\"user3\"); \r\n          \n        \r\n        setupProjectMatrixAuthStrategy(Jenkins.READ);\n        setJobPermissionsOnce(project1, \"user1\", Item.READ, Item.DISCOVER);\n        setJobPermissionsOnce(project2, \"user2\", Item.READ, Item.DISCOVER);\n\n        try (ACLContext _ = ACL.as(user1)) {\n            Fingerprint.BuildPtr original = fp.getOriginal();\n            assertThat(\"user1 should be able to see the origin\", fp.getOriginal(), notNullValue());\n            assertEquals(\"user1 should be able to see the origin's project name\", project1.getName(), original.getName());\n            assertEquals(\"user1 should be able to see the origin's build number\", build.getNumber(), original.getNumber());\n            assertEquals(\"Only one usage should be visible to user1\", 1, fp._getUsages().size());\n            assertEquals(\"Only project1 should be visible to user1\", project1.getFullName(), fp._getUsages().get(0).name);\n        }\n\n        try (ACLContext _ = ACL.as(user2)) {\n            assertThat(\"user2 should be unable to see the origin\", fp.getOriginal(), nullValue());\n            assertEquals(\"Only one usage should be visible to user2\", 1, fp._getUsages().size());\n            assertEquals(\"Only project2 should be visible to user2\", project2.getFullName(), fp._getUsages().get(0).name);\n        }\n\n        try (ACLContext _ = ACL.as(user3)) {\n            Fingerprint.BuildPtr original = fp.getOriginal();\n            assertThat(\"user3 should be unable to see the origin\", fp.getOriginal(), nullValue());\n            assertEquals(\"All usages should be invisible for user3\", 0, fp._getUsages().size());\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/FingerprintTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"MB"},{"authorDate":"2016-07-12 04:28:56","commitOrder":2,"curCode":"    public void shouldBeAbleToSeeOriginalWithDiscoverPermissionOnly() throws Exception {\n        \r\n        final FreeStyleProject project = createAndRunProjectWithPublisher(\"project\", \"test.txt\");\n        final FreeStyleBuild build = project.getLastBuild();\n        final Fingerprint fingerprint = getFingerprint(build, \"test.txt\");\n        \n        \r\n        User user1 = User.get(\"user1\");   \n        setupProjectMatrixAuthStrategy(Jenkins.READ, Item.DISCOVER);\n\n        try (ACLContext _ = ACL.as(user1)) {\n            Fingerprint.BuildPtr original = fingerprint.getOriginal();\n            assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());\n            assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());\n            assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());\n            assertEquals(\"Usage ref in fingerprint should be visible to user1\", 1, fingerprint._getUsages().size());\n        }\n    }\n","date":"2016-07-12 04:28:56","endLine":185,"groupId":"313","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldBeAbleToSeeOriginalWithDiscoverPermissionOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5c/b25a258a303e275f24bfc939de901cc96acce0.src","preCode":"    public void shouldBeAbleToSeeOriginalWithDiscoverPermissionOnly() throws Exception {\n        \r\n        final FreeStyleProject project = createAndRunProjectWithPublisher(\"project\", \"test.txt\");\n        final FreeStyleBuild build = project.getLastBuild();\n        final Fingerprint fingerprint = getFingerprint(build, \"test.txt\");\n        \n        \r\n        User user1 = User.get(\"user1\");   \n        setupProjectMatrixAuthStrategy(Jenkins.READ, Item.DISCOVER);\n\n        try (ACLContext _ = ACL.as(user1)) {\n            Fingerprint.BuildPtr original = fingerprint.getOriginal();\n            assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());\n            assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());\n            assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());\n            assertEquals(\"Usage ref in fingerprint should be visible to user1\", 1, fingerprint._getUsages().size());\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/FingerprintTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"MB"}],"commitId":"bb4eb45fb3d90cd1d6f8dd90781c94a50aaf4702","commitMessage":"@@@Merge pull request #2437 from stephenc/jenkins-36494\n\n[FIXED JENKINS-36494] Switch to a try with resources form of impersonation","date":"2016-07-12 04:28:56","modifiedFileCount":"11","status":"M","submitter":"Stephen Connolly"},{"authorTime":"2018-10-08 14:16:41","codes":[{"authorDate":"2018-10-08 14:16:41","commitOrder":3,"curCode":"    public void shouldBeUnableToSeeJobsIfNoPermissions() throws Exception {\n        \r\n        final FreeStyleProject project1 = createAndRunProjectWithPublisher(\"fpProducer\", \"test.txt\");\n        final FreeStyleBuild build = project1.getLastBuild();\n        \n        \r\n        final FreeStyleProject project2 = rule.createFreeStyleProject(\"project2\");\n        project2.getBuildersList().add(new WorkspaceCopyFileBuilder(\"test.txt\", project1.getName(), build.getNumber()));\n        project2.getPublishersList().add(new Fingerprinter(\"test.txt\"));\n        final FreeStyleBuild build2 = rule.buildAndAssertSuccess(project2);\n        \n        \r\n        final Fingerprint fp = getFingerprint(build, \"test.txt\");\n        \n        \r\n        User user1 = User.get(\"user1\"); \r\n        User user2 = User.get(\"user2\"); \r\n        User user3 = User.get(\"user3\"); \r\n          \n        \r\n        setupProjectMatrixAuthStrategy(Jenkins.READ);\n        setJobPermissionsOnce(project1, \"user1\", Item.READ, Item.DISCOVER);\n        setJobPermissionsOnce(project2, \"user2\", Item.READ, Item.DISCOVER);\n\n        try (ACLContext acl = ACL.as(user1)) {\n            Fingerprint.BuildPtr original = fp.getOriginal();\n            assertThat(\"user1 should be able to see the origin\", fp.getOriginal(), notNullValue());\n            assertEquals(\"user1 should be able to see the origin's project name\", project1.getName(), original.getName());\n            assertEquals(\"user1 should be able to see the origin's build number\", build.getNumber(), original.getNumber());\n            assertEquals(\"Only one usage should be visible to user1\", 1, fp._getUsages().size());\n            assertEquals(\"Only project1 should be visible to user1\", project1.getFullName(), fp._getUsages().get(0).name);\n        }\n\n        try (ACLContext acl = ACL.as(user2)) {\n            assertThat(\"user2 should be unable to see the origin\", fp.getOriginal(), nullValue());\n            assertEquals(\"Only one usage should be visible to user2\", 1, fp._getUsages().size());\n            assertEquals(\"Only project2 should be visible to user2\", project2.getFullName(), fp._getUsages().get(0).name);\n        }\n\n        try (ACLContext acl = ACL.as(user3)) {\n            Fingerprint.BuildPtr original = fp.getOriginal();\n            assertThat(\"user3 should be unable to see the origin\", fp.getOriginal(), nullValue());\n            assertEquals(\"All usages should be invisible for user3\", 0, fp._getUsages().size());\n        }\n    }\n","date":"2018-10-08 14:16:41","endLine":183,"groupId":"249","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldBeUnableToSeeJobsIfNoPermissions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a8/a9befece4975ac2ca14d92435e5cc4a5704812.src","preCode":"    public void shouldBeUnableToSeeJobsIfNoPermissions() throws Exception {\n        \r\n        final FreeStyleProject project1 = createAndRunProjectWithPublisher(\"fpProducer\", \"test.txt\");\n        final FreeStyleBuild build = project1.getLastBuild();\n        \n        \r\n        final FreeStyleProject project2 = rule.createFreeStyleProject(\"project2\");\n        project2.getBuildersList().add(new WorkspaceCopyFileBuilder(\"test.txt\", project1.getName(), build.getNumber()));\n        project2.getPublishersList().add(new Fingerprinter(\"test.txt\"));\n        final FreeStyleBuild build2 = rule.buildAndAssertSuccess(project2);\n        \n        \r\n        final Fingerprint fp = getFingerprint(build, \"test.txt\");\n        \n        \r\n        User user1 = User.get(\"user1\"); \r\n        User user2 = User.get(\"user2\"); \r\n        User user3 = User.get(\"user3\"); \r\n          \n        \r\n        setupProjectMatrixAuthStrategy(Jenkins.READ);\n        setJobPermissionsOnce(project1, \"user1\", Item.READ, Item.DISCOVER);\n        setJobPermissionsOnce(project2, \"user2\", Item.READ, Item.DISCOVER);\n\n        try (ACLContext _ = ACL.as(user1)) {\n            Fingerprint.BuildPtr original = fp.getOriginal();\n            assertThat(\"user1 should be able to see the origin\", fp.getOriginal(), notNullValue());\n            assertEquals(\"user1 should be able to see the origin's project name\", project1.getName(), original.getName());\n            assertEquals(\"user1 should be able to see the origin's build number\", build.getNumber(), original.getNumber());\n            assertEquals(\"Only one usage should be visible to user1\", 1, fp._getUsages().size());\n            assertEquals(\"Only project1 should be visible to user1\", project1.getFullName(), fp._getUsages().get(0).name);\n        }\n\n        try (ACLContext _ = ACL.as(user2)) {\n            assertThat(\"user2 should be unable to see the origin\", fp.getOriginal(), nullValue());\n            assertEquals(\"Only one usage should be visible to user2\", 1, fp._getUsages().size());\n            assertEquals(\"Only project2 should be visible to user2\", project2.getFullName(), fp._getUsages().get(0).name);\n        }\n\n        try (ACLContext _ = ACL.as(user3)) {\n            Fingerprint.BuildPtr original = fp.getOriginal();\n            assertThat(\"user3 should be unable to see the origin\", fp.getOriginal(), nullValue());\n            assertEquals(\"All usages should be invisible for user3\", 0, fp._getUsages().size());\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/FingerprintTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2018-10-08 14:16:41","commitOrder":3,"curCode":"    public void shouldBeAbleToSeeOriginalWithDiscoverPermissionOnly() throws Exception {\n        \r\n        final FreeStyleProject project = createAndRunProjectWithPublisher(\"project\", \"test.txt\");\n        final FreeStyleBuild build = project.getLastBuild();\n        final Fingerprint fingerprint = getFingerprint(build, \"test.txt\");\n        \n        \r\n        User user1 = User.get(\"user1\");   \n        setupProjectMatrixAuthStrategy(Jenkins.READ, Item.DISCOVER);\n\n        try (ACLContext acl = ACL.as(user1)) {\n            Fingerprint.BuildPtr original = fingerprint.getOriginal();\n            assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());\n            assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());\n            assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());\n            assertEquals(\"Usage ref in fingerprint should be visible to user1\", 1, fingerprint._getUsages().size());\n        }\n    }\n","date":"2018-10-08 14:16:41","endLine":203,"groupId":"6013","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldBeAbleToSeeOriginalWithDiscoverPermissionOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a8/a9befece4975ac2ca14d92435e5cc4a5704812.src","preCode":"    public void shouldBeAbleToSeeOriginalWithDiscoverPermissionOnly() throws Exception {\n        \r\n        final FreeStyleProject project = createAndRunProjectWithPublisher(\"project\", \"test.txt\");\n        final FreeStyleBuild build = project.getLastBuild();\n        final Fingerprint fingerprint = getFingerprint(build, \"test.txt\");\n        \n        \r\n        User user1 = User.get(\"user1\");   \n        setupProjectMatrixAuthStrategy(Jenkins.READ, Item.DISCOVER);\n\n        try (ACLContext _ = ACL.as(user1)) {\n            Fingerprint.BuildPtr original = fingerprint.getOriginal();\n            assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());\n            assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());\n            assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());\n            assertEquals(\"Usage ref in fingerprint should be visible to user1\", 1, fingerprint._getUsages().size());\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/FingerprintTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"ef5e4a01455f69a02ab589ecdd1c494fe5a3e3b7","commitMessage":"@@@Merge commit 'edd303e91747380043723c1b4c7dc843b91afa51' into security-master\n","date":"2018-10-08 14:16:41","modifiedFileCount":"63","status":"M","submitter":"Daniel Beck"},{"authorTime":"2018-10-08 14:16:41","codes":[{"authorDate":"2021-04-12 01:49:34","commitOrder":4,"curCode":"    public void shouldBeUnableToSeeJobsIfNoPermissions() throws Exception {\n        \r\n        final FreeStyleProject project1 = createAndRunProjectWithPublisher(\"fpProducer\", \"test.txt\");\n        final FreeStyleBuild build = project1.getLastBuild();\n        \n        \r\n        final FreeStyleProject project2 = rule.createFreeStyleProject(\"project2\");\n        project2.getBuildersList().add(new WorkspaceCopyFileBuilder(\"test.txt\", project1.getName(), build.getNumber()));\n        project2.getPublishersList().add(new Fingerprinter(\"test.txt\"));\n        final FreeStyleBuild build2 = rule.buildAndAssertSuccess(project2);\n        \n        \r\n        final Fingerprint fp = getFingerprint(build, \"test.txt\");\n        \n        \r\n        User user1 = User.getOrCreateByIdOrFullName(\"user1\"); \r\n        User user2 = User.getOrCreateByIdOrFullName(\"user2\"); \r\n        User user3 = User.getOrCreateByIdOrFullName(\"user3\"); \r\n          \n        \r\n        setupProjectMatrixAuthStrategy(Jenkins.READ);\n        setJobPermissionsOnce(project1, \"user1\", Item.READ, Item.DISCOVER);\n        setJobPermissionsOnce(project2, \"user2\", Item.READ, Item.DISCOVER);\n\n        try (ACLContext acl = ACL.as(user1)) {\n            Fingerprint.BuildPtr original = fp.getOriginal();\n            assertThat(\"user1 should be able to see the origin\", fp.getOriginal(), notNullValue());\n            assertEquals(\"user1 should be able to see the origin's project name\", project1.getName(), original.getName());\n            assertEquals(\"user1 should be able to see the origin's build number\", build.getNumber(), original.getNumber());\n            assertEquals(\"Only one usage should be visible to user1\", 1, fp._getUsages().size());\n            assertEquals(\"Only project1 should be visible to user1\", project1.getFullName(), fp._getUsages().get(0).name);\n        }\n\n        try (ACLContext acl = ACL.as(user2)) {\n            assertThat(\"user2 should be unable to see the origin\", fp.getOriginal(), nullValue());\n            assertEquals(\"Only one usage should be visible to user2\", 1, fp._getUsages().size());\n            assertEquals(\"Only project2 should be visible to user2\", project2.getFullName(), fp._getUsages().get(0).name);\n        }\n\n        try (ACLContext acl = ACL.as(user3)) {\n            Fingerprint.BuildPtr original = fp.getOriginal();\n            assertThat(\"user3 should be unable to see the origin\", fp.getOriginal(), nullValue());\n            assertEquals(\"All usages should be invisible for user3\", 0, fp._getUsages().size());\n        }\n    }\n","date":"2021-04-12 01:49:34","endLine":250,"groupId":"10447","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldBeUnableToSeeJobsIfNoPermissions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/5d/1299fb2426f42551fe7afbac975ef4f9d7e853.src","preCode":"    public void shouldBeUnableToSeeJobsIfNoPermissions() throws Exception {\n        \r\n        final FreeStyleProject project1 = createAndRunProjectWithPublisher(\"fpProducer\", \"test.txt\");\n        final FreeStyleBuild build = project1.getLastBuild();\n        \n        \r\n        final FreeStyleProject project2 = rule.createFreeStyleProject(\"project2\");\n        project2.getBuildersList().add(new WorkspaceCopyFileBuilder(\"test.txt\", project1.getName(), build.getNumber()));\n        project2.getPublishersList().add(new Fingerprinter(\"test.txt\"));\n        final FreeStyleBuild build2 = rule.buildAndAssertSuccess(project2);\n        \n        \r\n        final Fingerprint fp = getFingerprint(build, \"test.txt\");\n        \n        \r\n        User user1 = User.get(\"user1\"); \r\n        User user2 = User.get(\"user2\"); \r\n        User user3 = User.get(\"user3\"); \r\n          \n        \r\n        setupProjectMatrixAuthStrategy(Jenkins.READ);\n        setJobPermissionsOnce(project1, \"user1\", Item.READ, Item.DISCOVER);\n        setJobPermissionsOnce(project2, \"user2\", Item.READ, Item.DISCOVER);\n\n        try (ACLContext acl = ACL.as(user1)) {\n            Fingerprint.BuildPtr original = fp.getOriginal();\n            assertThat(\"user1 should be able to see the origin\", fp.getOriginal(), notNullValue());\n            assertEquals(\"user1 should be able to see the origin's project name\", project1.getName(), original.getName());\n            assertEquals(\"user1 should be able to see the origin's build number\", build.getNumber(), original.getNumber());\n            assertEquals(\"Only one usage should be visible to user1\", 1, fp._getUsages().size());\n            assertEquals(\"Only project1 should be visible to user1\", project1.getFullName(), fp._getUsages().get(0).name);\n        }\n\n        try (ACLContext acl = ACL.as(user2)) {\n            assertThat(\"user2 should be unable to see the origin\", fp.getOriginal(), nullValue());\n            assertEquals(\"Only one usage should be visible to user2\", 1, fp._getUsages().size());\n            assertEquals(\"Only project2 should be visible to user2\", project2.getFullName(), fp._getUsages().get(0).name);\n        }\n\n        try (ACLContext acl = ACL.as(user3)) {\n            Fingerprint.BuildPtr original = fp.getOriginal();\n            assertThat(\"user3 should be unable to see the origin\", fp.getOriginal(), nullValue());\n            assertEquals(\"All usages should be invisible for user3\", 0, fp._getUsages().size());\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/FingerprintTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"},{"authorDate":"2018-10-08 14:16:41","commitOrder":4,"curCode":"    public void shouldBeAbleToSeeOriginalWithDiscoverPermissionOnly() throws Exception {\n        \r\n        final FreeStyleProject project = createAndRunProjectWithPublisher(\"project\", \"test.txt\");\n        final FreeStyleBuild build = project.getLastBuild();\n        final Fingerprint fingerprint = getFingerprint(build, \"test.txt\");\n        \n        \r\n        User user1 = User.get(\"user1\");   \n        setupProjectMatrixAuthStrategy(Jenkins.READ, Item.DISCOVER);\n\n        try (ACLContext acl = ACL.as(user1)) {\n            Fingerprint.BuildPtr original = fingerprint.getOriginal();\n            assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());\n            assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());\n            assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());\n            assertEquals(\"Usage ref in fingerprint should be visible to user1\", 1, fingerprint._getUsages().size());\n        }\n    }\n","date":"2018-10-08 14:16:41","endLine":203,"groupId":"10447","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldBeAbleToSeeOriginalWithDiscoverPermissionOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a8/a9befece4975ac2ca14d92435e5cc4a5704812.src","preCode":"    public void shouldBeAbleToSeeOriginalWithDiscoverPermissionOnly() throws Exception {\n        \r\n        final FreeStyleProject project = createAndRunProjectWithPublisher(\"project\", \"test.txt\");\n        final FreeStyleBuild build = project.getLastBuild();\n        final Fingerprint fingerprint = getFingerprint(build, \"test.txt\");\n        \n        \r\n        User user1 = User.get(\"user1\");   \n        setupProjectMatrixAuthStrategy(Jenkins.READ, Item.DISCOVER);\n\n        try (ACLContext acl = ACL.as(user1)) {\n            Fingerprint.BuildPtr original = fingerprint.getOriginal();\n            assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());\n            assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());\n            assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());\n            assertEquals(\"Usage ref in fingerprint should be visible to user1\", 1, fingerprint._getUsages().size());\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/FingerprintTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"N"}],"commitId":"096a1ca6fb92a98a80ca7f1e3589e237285d3aa7","commitMessage":"@@@Merge pull request #5389 from StefanSpieker/minor_deprecation_fixes\n\nfixed some deprecation warnings","date":"2021-04-12 01:49:34","modifiedFileCount":"23","status":"M","submitter":"Mark Waite"}]
