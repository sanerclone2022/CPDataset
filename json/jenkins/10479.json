[{"authorTime":"2015-01-08 05:12:18","codes":[{"authorDate":"2015-01-08 05:12:18","commitOrder":1,"curCode":"    @Test public void accessControl() throws Exception {\n        r.configureUserRealm();\n        FreeStyleProject p = r.createFreeStyleProject();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(p.getFullName(), alice)));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                assertEquals(alice,Jenkins.getAuthentication());\n                return true;\n            }\n        });\n        r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n    }\n","date":"2015-01-08 05:12:18","endLine":431,"groupId":"2904","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"accessControl","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/fe/be13d5f248f20431208a6cf098ef26da566ff7.src","preCode":"    @Test public void accessControl() throws Exception {\n        r.configureUserRealm();\n        FreeStyleProject p = r.createFreeStyleProject();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(p.getFullName(), alice)));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                assertEquals(alice,Jenkins.getAuthentication());\n                return true;\n            }\n        });\n        r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n    }\n","realPath":"test/src/test/java/hudson/model/QueueTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"B"},{"authorDate":"2015-01-08 05:12:18","commitOrder":1,"curCode":"    @Test public void permissionSensitiveSlaveAllocations() throws Exception {\n        r.jenkins.setNumExecutors(0); \r\n        DumbSlave s1 = r.createSlave();\n        DumbSlave s2 = r.createSlave();\n\n        r.configureUserRealm();\n        FreeStyleProject p = r.createFreeStyleProject();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(p.getFullName(), alice)));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                assertEquals(alice,Jenkins.getAuthentication());\n                return true;\n            }\n        });\n\n        final FreeStyleBuild b1 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n        final FreeStyleBuild b2 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n\n        \r\n        \r\n\n        \r\n        final SparseACL aliceCantBuild = new SparseACL(null);\n        aliceCantBuild.add(new PrincipalSid(alice), Computer.BUILD, false);\n        aliceCantBuild.add(new PrincipalSid(\"anonymous\"), Jenkins.ADMINISTER, true);\n\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy() {\n            @Override\n            public ACL getACL(Node node) {\n                if (node==b1.getBuiltOn())\n                    return aliceCantBuild;\n                return super.getACL(node);\n            }\n        };\n        auth.add(Jenkins.ADMINISTER,\"anonymous\");\n        r.jenkins.setAuthorizationStrategy(auth);\n\n        \r\n        for (int i=0; i<3; i++) {\n            FreeStyleBuild b3 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n            assertNotSame(b3.getBuiltOnStr(), b1.getBuiltOnStr());\n        }\n    }\n","date":"2015-01-08 05:12:18","endLine":485,"groupId":"2904","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"permissionSensitiveSlaveAllocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/fe/be13d5f248f20431208a6cf098ef26da566ff7.src","preCode":"    @Test public void permissionSensitiveSlaveAllocations() throws Exception {\n        r.jenkins.setNumExecutors(0); \r\n        DumbSlave s1 = r.createSlave();\n        DumbSlave s2 = r.createSlave();\n\n        r.configureUserRealm();\n        FreeStyleProject p = r.createFreeStyleProject();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(p.getFullName(), alice)));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                assertEquals(alice,Jenkins.getAuthentication());\n                return true;\n            }\n        });\n\n        final FreeStyleBuild b1 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n        final FreeStyleBuild b2 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n\n        \r\n        \r\n\n        \r\n        final SparseACL aliceCantBuild = new SparseACL(null);\n        aliceCantBuild.add(new PrincipalSid(alice), Computer.BUILD, false);\n        aliceCantBuild.add(new PrincipalSid(\"anonymous\"), Jenkins.ADMINISTER, true);\n\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy() {\n            @Override\n            public ACL getACL(Node node) {\n                if (node==b1.getBuiltOn())\n                    return aliceCantBuild;\n                return super.getACL(node);\n            }\n        };\n        auth.add(Jenkins.ADMINISTER,\"anonymous\");\n        r.jenkins.setAuthorizationStrategy(auth);\n\n        \r\n        for (int i=0; i<3; i++) {\n            FreeStyleBuild b3 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n            assertNotSame(b3.getBuiltOnStr(), b1.getBuiltOnStr());\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/QueueTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":442,"status":"B"}],"commitId":"cd0752432ed718e30281eb4e2732646550996868","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into JENKINS-22811\n\nConflicts:\n\ttest/src/test/java/hudson/model/ItemGroupMixInTest.java\n","date":"2015-01-08 05:12:18","modifiedFileCount":"190","status":"B","submitter":"christ66"},{"authorTime":"2016-02-28 00:12:15","codes":[{"authorDate":"2016-02-28 00:12:15","commitOrder":2,"curCode":"    @Test public void accessControl() throws Exception {\n        FreeStyleProject p = r.createFreeStyleProject();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(p.getFullName(), alice)));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                assertEquals(alice,Jenkins.getAuthentication());\n                return true;\n            }\n        });\n        r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n    }\n","date":"2016-02-28 00:12:15","endLine":594,"groupId":"2904","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"accessControl","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/2a/91020de226c64a21f9fc89e0dd0a2ef5b5a090.src","preCode":"    @Test public void accessControl() throws Exception {\n        r.configureUserRealm();\n        FreeStyleProject p = r.createFreeStyleProject();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(p.getFullName(), alice)));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                assertEquals(alice,Jenkins.getAuthentication());\n                return true;\n            }\n        });\n        r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n    }\n","realPath":"test/src/test/java/hudson/model/QueueTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":583,"status":"M"},{"authorDate":"2016-02-28 00:12:15","commitOrder":2,"curCode":"    @Test public void permissionSensitiveSlaveAllocations() throws Exception {\n        r.jenkins.setNumExecutors(0); \r\n        DumbSlave s1 = r.createSlave();\n        DumbSlave s2 = r.createSlave();\n\n        FreeStyleProject p = r.createFreeStyleProject();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(p.getFullName(), alice)));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                assertEquals(alice,Jenkins.getAuthentication());\n                return true;\n            }\n        });\n\n        final FreeStyleBuild b1 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n        final FreeStyleBuild b2 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n\n        \r\n        \r\n\n        \r\n        final SparseACL aliceCantBuild = new SparseACL(null);\n        aliceCantBuild.add(new PrincipalSid(alice), Computer.BUILD, false);\n        aliceCantBuild.add(new PrincipalSid(\"anonymous\"), Jenkins.ADMINISTER, true);\n\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy() {\n            @Override\n            public ACL getACL(Node node) {\n                if (node==b1.getBuiltOn())\n                    return aliceCantBuild;\n                return super.getACL(node);\n            }\n        };\n        auth.add(Jenkins.ADMINISTER,\"anonymous\");\n        r.jenkins.setAuthorizationStrategy(auth);\n\n        \r\n        for (int i=0; i<3; i++) {\n            FreeStyleBuild b3 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n            assertNotSame(b3.getBuiltOnStr(), b1.getBuiltOnStr());\n        }\n    }\n","date":"2016-02-28 00:12:15","endLine":647,"groupId":"2904","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"permissionSensitiveSlaveAllocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/2a/91020de226c64a21f9fc89e0dd0a2ef5b5a090.src","preCode":"    @Test public void permissionSensitiveSlaveAllocations() throws Exception {\n        r.jenkins.setNumExecutors(0); \r\n        DumbSlave s1 = r.createSlave();\n        DumbSlave s2 = r.createSlave();\n\n        r.configureUserRealm();\n        FreeStyleProject p = r.createFreeStyleProject();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(p.getFullName(), alice)));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                assertEquals(alice,Jenkins.getAuthentication());\n                return true;\n            }\n        });\n\n        final FreeStyleBuild b1 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n        final FreeStyleBuild b2 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n\n        \r\n        \r\n\n        \r\n        final SparseACL aliceCantBuild = new SparseACL(null);\n        aliceCantBuild.add(new PrincipalSid(alice), Computer.BUILD, false);\n        aliceCantBuild.add(new PrincipalSid(\"anonymous\"), Jenkins.ADMINISTER, true);\n\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy() {\n            @Override\n            public ACL getACL(Node node) {\n                if (node==b1.getBuiltOn())\n                    return aliceCantBuild;\n                return super.getACL(node);\n            }\n        };\n        auth.add(Jenkins.ADMINISTER,\"anonymous\");\n        r.jenkins.setAuthorizationStrategy(auth);\n\n        \r\n        for (int i=0; i<3; i++) {\n            FreeStyleBuild b3 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n            assertNotSame(b3.getBuiltOnStr(), b1.getBuiltOnStr());\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/QueueTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":605,"status":"M"}],"commitId":"e3f7f8266664423a55169258cde346d0c2b741cd","commitMessage":"@@@Merge pull request #2067 from jenkinsci/jetty9.2\n\nIntegrate newer version of test-harness","date":"2016-02-28 00:12:15","modifiedFileCount":"4","status":"M","submitter":"Kohsuke Kawaguchi"},{"authorTime":"2017-03-17 22:41:54","codes":[{"authorDate":"2016-02-28 00:12:15","commitOrder":3,"curCode":"    @Test public void accessControl() throws Exception {\n        FreeStyleProject p = r.createFreeStyleProject();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(p.getFullName(), alice)));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                assertEquals(alice,Jenkins.getAuthentication());\n                return true;\n            }\n        });\n        r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n    }\n","date":"2016-02-28 00:12:15","endLine":594,"groupId":"2904","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"accessControl","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/2a/91020de226c64a21f9fc89e0dd0a2ef5b5a090.src","preCode":"    @Test public void accessControl() throws Exception {\n        FreeStyleProject p = r.createFreeStyleProject();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(p.getFullName(), alice)));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                assertEquals(alice,Jenkins.getAuthentication());\n                return true;\n            }\n        });\n        r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n    }\n","realPath":"test/src/test/java/hudson/model/QueueTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":583,"status":"N"},{"authorDate":"2017-03-17 22:41:54","commitOrder":3,"curCode":"    @Test public void permissionSensitiveSlaveAllocations() throws Exception {\n        r.jenkins.setNumExecutors(0); \r\n        DumbSlave s1 = r.createSlave();\n        DumbSlave s2 = r.createSlave();\n\n        FreeStyleProject p = r.createFreeStyleProject();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(p.getFullName(), alice)));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                assertEquals(alice,Jenkins.getAuthentication());\n                return true;\n            }\n        });\n\n        final FreeStyleBuild b1 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n        final FreeStyleBuild b2 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n\n        \r\n        \r\n\n        r.jenkins.setAuthorizationStrategy(new AliceCannotBuild(b1.getBuiltOnStr()));\n\n        \r\n        for (int i=0; i<3; i++) {\n            FreeStyleBuild b3 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n            assertNotSame(b3.getBuiltOnStr(), b1.getBuiltOnStr());\n        }\n    }\n","date":"2017-03-17 22:41:54","endLine":640,"groupId":"2904","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"permissionSensitiveSlaveAllocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/c1/4011fa0cfab97f76649d51d19df594672b3194.src","preCode":"    @Test public void permissionSensitiveSlaveAllocations() throws Exception {\n        r.jenkins.setNumExecutors(0); \r\n        DumbSlave s1 = r.createSlave();\n        DumbSlave s2 = r.createSlave();\n\n        FreeStyleProject p = r.createFreeStyleProject();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(p.getFullName(), alice)));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                assertEquals(alice,Jenkins.getAuthentication());\n                return true;\n            }\n        });\n\n        final FreeStyleBuild b1 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n        final FreeStyleBuild b2 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n\n        \r\n        \r\n\n        \r\n        final SparseACL aliceCantBuild = new SparseACL(null);\n        aliceCantBuild.add(new PrincipalSid(alice), Computer.BUILD, false);\n        aliceCantBuild.add(new PrincipalSid(\"anonymous\"), Jenkins.ADMINISTER, true);\n\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy() {\n            @Override\n            public ACL getACL(Node node) {\n                if (node==b1.getBuiltOn())\n                    return aliceCantBuild;\n                return super.getACL(node);\n            }\n        };\n        auth.add(Jenkins.ADMINISTER,\"anonymous\");\n        r.jenkins.setAuthorizationStrategy(auth);\n\n        \r\n        for (int i=0; i<3; i++) {\n            FreeStyleBuild b3 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n            assertNotSame(b3.getBuiltOnStr(), b1.getBuiltOnStr());\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/QueueTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":612,"status":"M"}],"commitId":"4fd4bd3a28cf80913baa3632bb3f7f5d0a00c3ed","commitMessage":"@@@Merge pull request #2790 from jglick/security-settings-save\n\nSave after calling setSecurityRealm or setAuthorizationStrategy","date":"2017-03-17 22:41:54","modifiedFileCount":"10","status":"M","submitter":"Jesse Glick"},{"authorTime":"2020-11-07 02:30:25","codes":[{"authorDate":"2020-11-07 02:30:25","commitOrder":4,"curCode":"    @Test public void accessControl() throws Exception {\n        FreeStyleProject p = r.createFreeStyleProject();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(p.getFullName(), alice)));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                assertEquals(alice2, Jenkins.getAuthentication2());\n                return true;\n            }\n        });\n        r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n    }\n","date":"2020-11-07 02:30:25","endLine":670,"groupId":"10479","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"accessControl","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/06/2c13906e98fdf8795f793f293e4ee89bda5bfc.src","preCode":"    @Test public void accessControl() throws Exception {\n        FreeStyleProject p = r.createFreeStyleProject();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(p.getFullName(), alice)));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                assertEquals(alice,Jenkins.getAuthentication());\n                return true;\n            }\n        });\n        r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n    }\n","realPath":"test/src/test/java/hudson/model/QueueTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":659,"status":"M"},{"authorDate":"2020-11-07 02:30:25","commitOrder":4,"curCode":"    @Test public void permissionSensitiveSlaveAllocations() throws Exception {\n        r.jenkins.setNumExecutors(0); \r\n        DumbSlave s1 = r.createSlave();\n        DumbSlave s2 = r.createSlave();\n\n        FreeStyleProject p = r.createFreeStyleProject();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(p.getFullName(), alice)));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                assertEquals(alice2, Jenkins.getAuthentication2());\n                return true;\n            }\n        });\n\n        final FreeStyleBuild b1 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n        final FreeStyleBuild b2 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n\n        \r\n        \r\n\n        r.jenkins.setAuthorizationStrategy(new AliceCannotBuild(b1.getBuiltOnStr()));\n\n        \r\n        for (int i=0; i<3; i++) {\n            FreeStyleBuild b3 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n            assertNotSame(b3.getBuiltOnStr(), b1.getBuiltOnStr());\n        }\n    }\n","date":"2020-11-07 02:30:25","endLine":710,"groupId":"10479","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"permissionSensitiveSlaveAllocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/06/2c13906e98fdf8795f793f293e4ee89bda5bfc.src","preCode":"    @Test public void permissionSensitiveSlaveAllocations() throws Exception {\n        r.jenkins.setNumExecutors(0); \r\n        DumbSlave s1 = r.createSlave();\n        DumbSlave s2 = r.createSlave();\n\n        FreeStyleProject p = r.createFreeStyleProject();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(p.getFullName(), alice)));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                assertEquals(alice,Jenkins.getAuthentication());\n                return true;\n            }\n        });\n\n        final FreeStyleBuild b1 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n        final FreeStyleBuild b2 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n\n        \r\n        \r\n\n        r.jenkins.setAuthorizationStrategy(new AliceCannotBuild(b1.getBuiltOnStr()));\n\n        \r\n        for (int i=0; i<3; i++) {\n            FreeStyleBuild b3 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));\n            assertNotSame(b3.getBuiltOnStr(), b1.getBuiltOnStr());\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/QueueTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":682,"status":"M"}],"commitId":"a9ca5ef3d4c97937636bf3c585f4232514279b14","commitMessage":"@@@[JEP-227] Replace Acegi Security with Spring Security & upgrade Spring Framework (#4848)\n\nReplacing Acegi Security with Spring Security\n\nCo-authored-by: Tim Jacomb <timjacomb1+github@gmail.com>\nCo-authored-by: James Nord <jtnord@users.noreply.github.com>","date":"2020-11-07 02:30:25","modifiedFileCount":"149","status":"M","submitter":"Jesse Glick"}]
