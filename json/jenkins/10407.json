[{"authorTime":"2013-07-17 12:48:01","codes":[{"authorDate":"2013-07-17 12:48:01","commitOrder":1,"curCode":"    public void testContains() throws IOException, Exception{\n        \n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);\n        User user = User.get(\"User1\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        rule.jenkins.addView(view);\n        auth.add(Job.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contain job \" + job.getDisplayName(), view.contains(job));\n        auth.add(Job.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" contain job \" + job.getDisplayName(), view.contains(job));\n    }\n","date":"2013-07-17 12:48:01","endLine":60,"groupId":"6968","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testContains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d2/cc2a7be0688a64916058bf85f892ddbf1db699.src","preCode":"    public void testContains() throws IOException, Exception{\n        \n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);\n        User user = User.get(\"User1\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        rule.jenkins.addView(view);\n        auth.add(Job.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contain job \" + job.getDisplayName(), view.contains(job));\n        auth.add(Job.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" contain job \" + job.getDisplayName(), view.contains(job));\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"},{"authorDate":"2013-07-17 12:48:01","commitOrder":1,"curCode":"    public void testGetItems() throws IOException, InterruptedException{\n        User user = User.get(\"User1\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);   \n        FreeStyleProject job2 = rule.createFreeStyleProject(\"job2\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        auth.add(Job.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job2.getDisplayName(), view.getItems().contains(job2));\n        auth.add(Job.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" should contains job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertTrue(\"View \" + view.getDisplayName() + \" should contains job \" + job2.getDisplayName(), view.getItems().contains(job2));\n    }\n","date":"2013-07-17 12:48:01","endLine":89,"groupId":"6705","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetItems","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d2/cc2a7be0688a64916058bf85f892ddbf1db699.src","preCode":"    public void testGetItems() throws IOException, InterruptedException{\n        User user = User.get(\"User1\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);   \n        FreeStyleProject job2 = rule.createFreeStyleProject(\"job2\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        auth.add(Job.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job2.getDisplayName(), view.getItems().contains(job2));\n        auth.add(Job.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" should contains job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertTrue(\"View \" + view.getDisplayName() + \" should contains job \" + job2.getDisplayName(), view.getItems().contains(job2));\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"}],"commitId":"602afda2ea41f0de72105b1da701ecad31a7f616","commitMessage":"@@@Merge pull request #830 from lvotypko/myViewTest\n\nAdd tests for MyViewTest class","date":"2013-07-17 12:48:01","modifiedFileCount":"0","status":"B","submitter":"Kohsuke Kawaguchi"},{"authorTime":"2017-02-12 18:38:30","codes":[{"authorDate":"2013-07-17 12:48:01","commitOrder":2,"curCode":"    public void testContains() throws IOException, Exception{\n        \n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);\n        User user = User.get(\"User1\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        rule.jenkins.addView(view);\n        auth.add(Job.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contain job \" + job.getDisplayName(), view.contains(job));\n        auth.add(Job.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" contain job \" + job.getDisplayName(), view.contains(job));\n    }\n","date":"2013-07-17 12:48:01","endLine":60,"groupId":"6968","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testContains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d2/cc2a7be0688a64916058bf85f892ddbf1db699.src","preCode":"    public void testContains() throws IOException, Exception{\n        \n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);\n        User user = User.get(\"User1\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        rule.jenkins.addView(view);\n        auth.add(Job.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contain job \" + job.getDisplayName(), view.contains(job));\n        auth.add(Job.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" contain job \" + job.getDisplayName(), view.contains(job));\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"},{"authorDate":"2017-02-12 18:38:30","commitOrder":2,"curCode":"    public void testGetItems() throws IOException, InterruptedException{\n        User user = User.get(\"User1\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);   \n        FreeStyleProject job2 = rule.createFreeStyleProject(\"job2\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        auth.add(Job.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job2.getDisplayName(), view.getItems().contains(job2));\n        auth.add(Job.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job2.getDisplayName(), view.getItems().contains(job2));\n    }\n","date":"2017-02-12 18:38:30","endLine":106,"groupId":"6705","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetItems","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/72/3e58029f60724ad79d967e97d9b1371c90b50f.src","preCode":"    public void testGetItems() throws IOException, InterruptedException{\n        User user = User.get(\"User1\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);   \n        FreeStyleProject job2 = rule.createFreeStyleProject(\"job2\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        auth.add(Job.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job2.getDisplayName(), view.getItems().contains(job2));\n        auth.add(Job.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" should contains job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertTrue(\"View \" + view.getDisplayName() + \" should contains job \" + job2.getDisplayName(), view.getItems().contains(job2));\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"496703d0fe133445e10c7d8d07fa7afd351c8854","commitMessage":"@@@Spelling fixes in changelogs.  Javadoc.  logs and UI (#2718)\n\n* spelling: abstract\n\n* spelling: about\n\n* spelling: absolute\n\n* spelling: across\n\n* spelling: activity\n\n* spelling: actually\n\n* spelling: addition\n\n* spelling: allocating\n\n* spelling: ambiguous\n\n* spelling: analyzes\n\n* spelling: analysis\n\n* spelling: another\n\n* spelling: appear\n\n* spelling: arbitrary\n\n* spelling: artifact\n\n* spelling: assignment\n\n* spelling: associated\n\n* spelling: augment\n\n* spelling: authentication\n\n* spelling: automatically\n\n* spelling: available\n\n* spelling: availability\n\n* spelling: because\n\n* spelling: background\n\n* spelling: beginning\n\n* spelling: boolean\n\n* spelling: browsers\n\n* spelling: building\n\n* spelling: calculation\n\n* spelling: channel\n\n* spelling: column\n\n* spelling: concatenation\n\n* spelling: connect\n\n* spelling: contribute\n\n* spelling: convert\n\n* spelling: copied\n\n* spelling: couldn't\n\n* spelling: scrambled\n\n* spelling: creates-a\n\n* spelling: curr-entry\n\n* spelling: customize\n\n* spelling: diagnostic\n\n* spelling: contain\n\n* spelling: default\n\n* spelling: delimiter\n\n* spelling: descriptor\n\n* spelling: disambiguates\n\n* spelling: different\n\n* spelling: diligently\n\n* spelling: disabled\n\n* spelling: discovered\n\n* spelling: display\n\n* spelling: doesn't\n\n* spelling: dollar\n\n* spelling: downstream\n\n* spelling: dynamically\n\n* spelling: preemptively\n\n* spelling: encrypt\n\n* spelling: erroneous\n\n* spelling: examine\n\n* spelling: existence\n\n* spelling: value\n\n* spelling: february\n\n* spelling: handling\n\n* spelling: hostname\n\n* spelling: convenient\n\n* spelling: identify\n\n* spelling: implementation\n\n* spelling: incorrect\n\n* spelling: individual\n\n* spelling: initialization\n\n* spelling: initialized\n\n* spelling: inputstream\n\n* spelling: instantiated\n\n* spelling: instantiation\n\n* spelling: intended\n\n* spelling: interpreted\n\n* spelling: interrupted\n\n* spelling: invocations\n\n* spelling: kern\n\n* spelling: localization\n\n* spelling: logger\n\n* spelling: malfunctioning\n\n* spelling: methods\n\n* spelling: monitor\n\n* spelling: mutator\n\n* spelling: multiple\n\n* spelling: object\n\n* spelling: configured\n\n* spelling: optionally\n\n* spelling: option\n\n* spelling: overridden\n\n* spelling: parameterized\n\n* spelling: parent\n\n* spelling: permissions\n\n* spelling: plugin\n\n* spelling: potentially\n\n* spelling: preferable\n\n* spelling: problems like\n\n* spelling: programmatically\n\n* spelling: property\n\n* spelling: reallocate\n\n* spelling: recommended\n\n* spelling: redirected\n\n* spelling: registered\n\n* spelling: reliable\n\n* spelling: remember\n\n* spelling: recurrence\n\n* spelling: repeatable\n\n* spelling: repeated\n\n* spelling: resource\n\n* spelling: retrieve\n\n* spelling: returned\n\n* spelling: revision\n\n* spelling: sandwich\n\n* spelling: separator\n\n* spelling: serialization\n\n* spelling: settings\n\n* spelling: shadow\n\n* spelling: should\n\n* spelling: someone\n\n* spelling: source\n\n* spelling: specified\n\n* spelling: style\n\n* spelling: subversion\n\n* spelling: sufficient\n\n* spelling: supplementary\n\n* spelling: suppressing\n\n* spelling: synchronization\n\n* spelling: synchronized\n\n* spelling: this\n\n* spelling: transitioning\n\n* spelling: termination\n\n* spelling: trying\n\n* spelling: truncatable\n\n* spelling: unknown\n\n* spelling: undeployed\n\n* spelling: unnecessary\n\n* spelling: unparseable\n\n* spelling: update\n\n* spelling: upper\n\n* spelling: verify\n\n* spelling: visible\n\n* spelling: warning\n\n* spelling: we're\n\n* spelling: whitespace\n\n* spelling: wide\n\n* spelling: with\n\n* spelling: workspace\n\n* spelling: yielding\n\n* spelling: to\n\n* spelling: by\n\n* spelling: the\n\n* spelling: hours\n","date":"2017-02-12 18:38:30","modifiedFileCount":"110","status":"M","submitter":"Josh Soref"},{"authorTime":"2020-10-05 18:29:39","codes":[{"authorDate":"2020-10-05 18:29:39","commitOrder":3,"curCode":"    public void testContains() throws IOException, Exception{\n        \n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);\n        User user = User.getOrCreateByIdOrFullName(\"User1\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        rule.jenkins.addView(view);\n        auth.add(Job.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contain job \" + job.getDisplayName(), view.contains(job));\n        auth.add(Job.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" contain job \" + job.getDisplayName(), view.contains(job));\n    }\n","date":"2020-10-05 18:29:39","endLine":75,"groupId":"6968","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testContains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/6d/db7aa2f3b6c0d6c734f9cb0f38943f4cf94f24.src","preCode":"    public void testContains() throws IOException, Exception{\n        \n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);\n        User user = User.get(\"User1\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        rule.jenkins.addView(view);\n        auth.add(Job.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contain job \" + job.getDisplayName(), view.contains(job));\n        auth.add(Job.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" contain job \" + job.getDisplayName(), view.contains(job));\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2020-10-05 18:29:39","commitOrder":3,"curCode":"    public void testGetItems() throws IOException, InterruptedException{\n        User user = User.getOrCreateByIdOrFullName(\"User1\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);   \n        FreeStyleProject job2 = rule.createFreeStyleProject(\"job2\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        auth.add(Job.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job2.getDisplayName(), view.getItems().contains(job2));\n        auth.add(Job.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job2.getDisplayName(), view.getItems().contains(job2));\n    }\n","date":"2020-10-05 18:29:39","endLine":111,"groupId":"6705","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetItems","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/6d/db7aa2f3b6c0d6c734f9cb0f38943f4cf94f24.src","preCode":"    public void testGetItems() throws IOException, InterruptedException{\n        User user = User.get(\"User1\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);   \n        FreeStyleProject job2 = rule.createFreeStyleProject(\"job2\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        auth.add(Job.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job2.getDisplayName(), view.getItems().contains(job2));\n        auth.add(Job.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job2.getDisplayName(), view.getItems().contains(job2));\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"c76d55a42780abdab8e748e8ca41846f0f5aca7c","commitMessage":"@@@Improve performance of MyView (#4954)\n\nCo-authored-by: res0nance <res0nance@users.noreply.github.com>","date":"2020-10-05 18:29:39","modifiedFileCount":"2","status":"M","submitter":"Raihaan Shouhell"},{"authorTime":"2020-11-07 02:30:25","codes":[{"authorDate":"2020-11-07 02:30:25","commitOrder":4,"curCode":"    public void testContains() throws IOException, Exception{\n        \n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);\n        User user = User.getOrCreateByIdOrFullName(\"User1\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        rule.jenkins.addView(view);\n        auth.add(Job.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contain job \" + job.getDisplayName(), view.contains(job));\n        auth.add(Job.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" contain job \" + job.getDisplayName(), view.contains(job));\n    }\n","date":"2020-11-07 02:30:25","endLine":75,"groupId":"6968","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testContains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e2/9162c0e30df9148ec14ae9b731783efe538fe9.src","preCode":"    public void testContains() throws IOException, Exception{\n        \n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);\n        User user = User.getOrCreateByIdOrFullName(\"User1\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        rule.jenkins.addView(view);\n        auth.add(Job.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contain job \" + job.getDisplayName(), view.contains(job));\n        auth.add(Job.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" contain job \" + job.getDisplayName(), view.contains(job));\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2020-11-07 02:30:25","commitOrder":4,"curCode":"    public void testGetItems() throws IOException, InterruptedException{\n        User user = User.getOrCreateByIdOrFullName(\"User1\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);   \n        FreeStyleProject job2 = rule.createFreeStyleProject(\"job2\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        auth.add(Job.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job2.getDisplayName(), view.getItems().contains(job2));\n        auth.add(Job.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job2.getDisplayName(), view.getItems().contains(job2));\n    }\n","date":"2020-11-07 02:30:25","endLine":111,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetItems","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e2/9162c0e30df9148ec14ae9b731783efe538fe9.src","preCode":"    public void testGetItems() throws IOException, InterruptedException{\n        User user = User.getOrCreateByIdOrFullName(\"User1\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);   \n        FreeStyleProject job2 = rule.createFreeStyleProject(\"job2\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        auth.add(Job.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job2.getDisplayName(), view.getItems().contains(job2));\n        auth.add(Job.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job2.getDisplayName(), view.getItems().contains(job2));\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"a9ca5ef3d4c97937636bf3c585f4232514279b14","commitMessage":"@@@[JEP-227] Replace Acegi Security with Spring Security & upgrade Spring Framework (#4848)\n\nReplacing Acegi Security with Spring Security\n\nCo-authored-by: Tim Jacomb <timjacomb1+github@gmail.com>\nCo-authored-by: James Nord <jtnord@users.noreply.github.com>","date":"2020-11-07 02:30:25","modifiedFileCount":"149","status":"M","submitter":"Jesse Glick"},{"authorTime":"2021-04-20 04:54:17","codes":[{"authorDate":"2021-04-20 04:54:17","commitOrder":5,"curCode":"    public void testContains() throws IOException, Exception{\n        \n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);\n        User user = User.getOrCreateByIdOrFullName(\"User1\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        rule.jenkins.addView(view);\n        auth.add(Item.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contain job \" + job.getDisplayName(), view.contains(job));\n        auth.add(Item.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" contain job \" + job.getDisplayName(), view.contains(job));\n    }\n","date":"2021-04-20 04:54:17","endLine":75,"groupId":"6585","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testContains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/45/4c38cb640e3d9baf07d757fef4b678a8e5b6dc.src","preCode":"    public void testContains() throws IOException, Exception{\n        \n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);\n        User user = User.getOrCreateByIdOrFullName(\"User1\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        rule.jenkins.addView(view);\n        auth.add(Job.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contain job \" + job.getDisplayName(), view.contains(job));\n        auth.add(Job.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" contain job \" + job.getDisplayName(), view.contains(job));\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2021-04-20 04:54:17","commitOrder":5,"curCode":"    public void testGetItems() throws IOException, InterruptedException{\n        User user = User.getOrCreateByIdOrFullName(\"User1\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);   \n        FreeStyleProject job2 = rule.createFreeStyleProject(\"job2\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        auth.add(Item.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job2.getDisplayName(), view.getItems().contains(job2));\n        auth.add(Item.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job2.getDisplayName(), view.getItems().contains(job2));\n    }\n","date":"2021-04-20 04:54:17","endLine":111,"groupId":"9295","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetItems","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/45/4c38cb640e3d9baf07d757fef4b678a8e5b6dc.src","preCode":"    public void testGetItems() throws IOException, InterruptedException{\n        User user = User.getOrCreateByIdOrFullName(\"User1\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);   \n        FreeStyleProject job2 = rule.createFreeStyleProject(\"job2\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        auth.add(Job.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job2.getDisplayName(), view.getItems().contains(job2));\n        auth.add(Job.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job2.getDisplayName(), view.getItems().contains(job2));\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"0fd55bd6b50fcdf27368c6b771fb3d8363a24f83","commitMessage":"@@@Merge pull request #5419 from basil/subtypes\n\nUse declaring class as qualifier","date":"2021-04-20 04:54:17","modifiedFileCount":"43","status":"M","submitter":"Oleg Nenashev"},{"authorTime":"2021-04-20 04:54:17","codes":[{"authorDate":"2021-08-19 14:56:57","commitOrder":6,"curCode":"    public void testContains() throws Exception{\n        \n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);\n        User user = User.getOrCreateByIdOrFullName(\"User1\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        rule.jenkins.addView(view);\n        auth.add(Item.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contain job \" + job.getDisplayName(), view.contains(job));\n        auth.add(Item.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" contain job \" + job.getDisplayName(), view.contains(job));\n    }\n","date":"2021-08-19 14:56:57","endLine":77,"groupId":"10407","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testContains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/83/9dafede2d79f51ce3bd61cd61c16c9060609e9.src","preCode":"    public void testContains() throws IOException, Exception{\n        \n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);\n        User user = User.getOrCreateByIdOrFullName(\"User1\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        rule.jenkins.addView(view);\n        auth.add(Item.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contain job \" + job.getDisplayName(), view.contains(job));\n        auth.add(Item.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" contain job \" + job.getDisplayName(), view.contains(job));\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2021-04-20 04:54:17","commitOrder":6,"curCode":"    public void testGetItems() throws IOException, InterruptedException{\n        User user = User.getOrCreateByIdOrFullName(\"User1\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);   \n        FreeStyleProject job2 = rule.createFreeStyleProject(\"job2\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        auth.add(Item.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job2.getDisplayName(), view.getItems().contains(job2));\n        auth.add(Item.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job2.getDisplayName(), view.getItems().contains(job2));\n    }\n","date":"2021-04-20 04:54:17","endLine":111,"groupId":"10407","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetItems","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/45/4c38cb640e3d9baf07d757fef4b678a8e5b6dc.src","preCode":"    public void testGetItems() throws IOException, InterruptedException{\n        User user = User.getOrCreateByIdOrFullName(\"User1\");\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   \n        rule.jenkins.setAuthorizationStrategy(auth);   \n        FreeStyleProject job2 = rule.createFreeStyleProject(\"job2\");\n        FreeStyleProject job = rule.createFreeStyleProject(\"job\");\n        MyView view = new MyView(\"My\", rule.jenkins);\n        auth.add(Item.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job2.getDisplayName(), view.getItems().contains(job2));\n        auth.add(Item.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job2.getDisplayName(), view.getItems().contains(job2));\n    }\n","realPath":"test/src/test/java/hudson/model/MyViewTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"N"}],"commitId":"3c8dd1664fcc2818a78a06950d47a7b7c54ad981","commitMessage":"@@@Some test code clean-up (#5669)\n\nCo-authored-by: Tim Jacomb <timjacomb1+github@gmail.com>","date":"2021-08-19 14:56:57","modifiedFileCount":"12","status":"M","submitter":"offa"}]
