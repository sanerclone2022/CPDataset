[{"authorTime":"2014-04-02 01:27:29","codes":[{"authorDate":"2011-08-20 02:50:42","commitOrder":5,"curCode":"    public void restart() throws IOException, InterruptedException {\n        Jenkins h = Jenkins.getInstance();\n        if (h != null)\n            h.cleanUp();\n\n        \r\n        int sz = LIBC.getdtablesize();\n        for(int i=3; i<sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if(flags<0) continue;\n            LIBC.fcntl(i, F_SETFD,flags| FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\"+exe+\"' \"+LIBC.strerror(Native.getLastError()));\n    }\n","date":"2011-08-24 05:12:09","endLine":82,"groupId":"8974","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"restart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/c7/892c9ccade869e8854684e5d0c8d3ae6fadb77.src","preCode":"    public void restart() throws IOException, InterruptedException {\n        Jenkins h = Jenkins.getInstance();\n        if (h != null)\n            h.cleanUp();\n\n        \r\n        int sz = LIBC.getdtablesize();\n        for(int i=3; i<sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if(flags<0) continue;\n            LIBC.fcntl(i, F_SETFD,flags| FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\"+exe+\"' \"+LIBC.strerror(Native.getLastError()));\n    }\n","realPath":"core/src/main/java/hudson/lifecycle/UnixLifecycle.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"NB"},{"authorDate":"2014-04-02 01:27:29","commitOrder":5,"curCode":"    public void restart() throws Exception {\n        \r\n        int sz = LIBC.getdtablesize();\n        for (int i = 3; i < sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if (flags < 0) continue;\n            LIBC.fcntl(i, F_SETFD, flags | FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\" + exe + \"' \" + LIBC.strerror(Native.getLastError()));\n    }\n","date":"2014-04-02 07:49:52","endLine":65,"groupId":"8974","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"restart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/15/72c2301b3e01585dd33cb6ff318c3f45cb035e.src","preCode":"    public void restart() throws Exception {\n        \r\n        int sz = LIBC.getdtablesize();\n        for (int i = 3; i < sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if (flags < 0) continue;\n            LIBC.fcntl(i, F_SETFD, flags | FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\" + exe + \"' \" + LIBC.strerror(Native.getLastError()));\n    }\n","realPath":"core/src/main/java/jenkins/slaves/restarter/UnixSlaveRestarter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"}],"commitId":"78154778c8f84062432900645efc09f77b712479","commitMessage":"@@@[JENKINS-19055]\n\nAdding extension point so that the master can install code that restarts JNLP slaves.\n","date":"2014-04-02 07:49:52","modifiedFileCount":"0","status":"M","submitter":"Kohsuke Kawaguchi"},{"authorTime":"2014-04-02 01:27:29","codes":[{"authorDate":"2014-04-16 22:49:42","commitOrder":6,"curCode":"    public void restart() throws IOException, InterruptedException {\n        Jenkins h = Jenkins.getInstance();\n        if (h != null)\n            h.cleanUp();\n\n        \r\n        int sz = LIBC.getdtablesize();\n        for(int i=3; i<sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if(flags<0) continue;\n            LIBC.fcntl(i, F_SETFD,flags| FD_CLOEXEC);\n        }\n\n        \r\n        String exe = args.get(0);\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\"+exe+\"' \"+LIBC.strerror(Native.getLastError()));\n    }\n","date":"2014-04-16 22:49:42","endLine":85,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"restart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/88/c584675ac078bd22266286342b9377124c10b6.src","preCode":"    public void restart() throws IOException, InterruptedException {\n        Jenkins h = Jenkins.getInstance();\n        if (h != null)\n            h.cleanUp();\n\n        \r\n        int sz = LIBC.getdtablesize();\n        for(int i=3; i<sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if(flags<0) continue;\n            LIBC.fcntl(i, F_SETFD,flags| FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\"+exe+\"' \"+LIBC.strerror(Native.getLastError()));\n    }\n","realPath":"core/src/main/java/hudson/lifecycle/UnixLifecycle.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2014-04-02 01:27:29","commitOrder":6,"curCode":"    public void restart() throws Exception {\n        \r\n        int sz = LIBC.getdtablesize();\n        for (int i = 3; i < sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if (flags < 0) continue;\n            LIBC.fcntl(i, F_SETFD, flags | FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\" + exe + \"' \" + LIBC.strerror(Native.getLastError()));\n    }\n","date":"2014-04-02 07:49:52","endLine":65,"groupId":"8974","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"restart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/15/72c2301b3e01585dd33cb6ff318c3f45cb035e.src","preCode":"    public void restart() throws Exception {\n        \r\n        int sz = LIBC.getdtablesize();\n        for (int i = 3; i < sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if (flags < 0) continue;\n            LIBC.fcntl(i, F_SETFD, flags | FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\" + exe + \"' \" + LIBC.strerror(Native.getLastError()));\n    }\n","realPath":"core/src/main/java/jenkins/slaves/restarter/UnixSlaveRestarter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"}],"commitId":"16143d03259372fabc3121d9e00e9bd91f6fca7d","commitMessage":"@@@Merge pull request #1192 from ydubreuil/fix-restart-after-jre-system-update\n\nFix jenkins restart on Linux after a JRE system update","date":"2014-04-16 22:49:42","modifiedFileCount":"1","status":"M","submitter":"Nicolas De loof"},{"authorTime":"2014-04-02 01:27:29","codes":[{"authorDate":"2014-05-14 17:38:17","commitOrder":7,"curCode":"    public void restart() throws IOException, InterruptedException {\n        Jenkins h = Jenkins.getInstance();\n        if (h != null)\n            h.cleanUp();\n\n        \r\n        int sz = LIBC.getdtablesize();\n        for(int i=3; i<sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if(flags<0) continue;\n            LIBC.fcntl(i, F_SETFD,flags| FD_CLOEXEC);\n        }\n\n        \r\n        String exe = args.get(0);\n        LIBC.execvp(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\"+exe+\"' \"+LIBC.strerror(Native.getLastError()));\n    }\n","date":"2014-05-28 17:00:25","endLine":85,"groupId":"5165","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"restart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/6a/558594532ca65ad95372afecb3cd692c3ea835.src","preCode":"    public void restart() throws IOException, InterruptedException {\n        Jenkins h = Jenkins.getInstance();\n        if (h != null)\n            h.cleanUp();\n\n        \r\n        int sz = LIBC.getdtablesize();\n        for(int i=3; i<sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if(flags<0) continue;\n            LIBC.fcntl(i, F_SETFD,flags| FD_CLOEXEC);\n        }\n\n        \r\n        String exe = args.get(0);\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\"+exe+\"' \"+LIBC.strerror(Native.getLastError()));\n    }\n","realPath":"core/src/main/java/hudson/lifecycle/UnixLifecycle.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2014-04-02 01:27:29","commitOrder":7,"curCode":"    public void restart() throws Exception {\n        \r\n        int sz = LIBC.getdtablesize();\n        for (int i = 3; i < sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if (flags < 0) continue;\n            LIBC.fcntl(i, F_SETFD, flags | FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\" + exe + \"' \" + LIBC.strerror(Native.getLastError()));\n    }\n","date":"2014-04-02 07:49:52","endLine":65,"groupId":"8974","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"restart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/15/72c2301b3e01585dd33cb6ff318c3f45cb035e.src","preCode":"    public void restart() throws Exception {\n        \r\n        int sz = LIBC.getdtablesize();\n        for (int i = 3; i < sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if (flags < 0) continue;\n            LIBC.fcntl(i, F_SETFD, flags | FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\" + exe + \"' \" + LIBC.strerror(Native.getLastError()));\n    }\n","realPath":"core/src/main/java/jenkins/slaves/restarter/UnixSlaveRestarter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"}],"commitId":"3ddd2b0c0876239316b5cfc6bca497821bd200b8","commitMessage":"@@@[FIX JENKINS-22818] fix jenkins restart on Linux after plugin update if the java executable running Jenkins is started without its full path\n\nThe patch uses 'execvp' instead of 'execv' to lookup the java executable filename in the PATH if the specified filename does not contain a slash (/) character.\nRegression introduced in 547d4ed8d35de6be4b2788e4816019bb8cc94902\n","date":"2014-05-28 17:00:25","modifiedFileCount":"2","status":"M","submitter":"Yoann Dubreuil"},{"authorTime":"2014-04-02 01:27:29","codes":[{"authorDate":"2016-03-08 06:08:36","commitOrder":8,"curCode":"    public void restart() throws IOException, InterruptedException {\n        Jenkins h = Jenkins.getInstanceOrNull();\n        if (h != null)\n            h.cleanUp();\n\n        \r\n        int sz = LIBC.getdtablesize();\n        for(int i=3; i<sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if(flags<0) continue;\n            LIBC.fcntl(i, F_SETFD,flags| FD_CLOEXEC);\n        }\n\n        \r\n        String exe = args.get(0);\n        LIBC.execvp(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\"+exe+\"' \"+LIBC.strerror(Native.getLastError()));\n    }\n","date":"2016-03-08 06:08:36","endLine":84,"groupId":"5165","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"restart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/15/cb5699b46aae450caf490c0ab844be753ba925.src","preCode":"    public void restart() throws IOException, InterruptedException {\n        Jenkins h = Jenkins.getInstance();\n        if (h != null)\n            h.cleanUp();\n\n        \r\n        int sz = LIBC.getdtablesize();\n        for(int i=3; i<sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if(flags<0) continue;\n            LIBC.fcntl(i, F_SETFD,flags| FD_CLOEXEC);\n        }\n\n        \r\n        String exe = args.get(0);\n        LIBC.execvp(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\"+exe+\"' \"+LIBC.strerror(Native.getLastError()));\n    }\n","realPath":"core/src/main/java/hudson/lifecycle/UnixLifecycle.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2014-04-02 01:27:29","commitOrder":8,"curCode":"    public void restart() throws Exception {\n        \r\n        int sz = LIBC.getdtablesize();\n        for (int i = 3; i < sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if (flags < 0) continue;\n            LIBC.fcntl(i, F_SETFD, flags | FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\" + exe + \"' \" + LIBC.strerror(Native.getLastError()));\n    }\n","date":"2014-04-02 07:49:52","endLine":65,"groupId":"8974","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"restart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/15/72c2301b3e01585dd33cb6ff318c3f45cb035e.src","preCode":"    public void restart() throws Exception {\n        \r\n        int sz = LIBC.getdtablesize();\n        for (int i = 3; i < sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if (flags < 0) continue;\n            LIBC.fcntl(i, F_SETFD, flags | FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\" + exe + \"' \" + LIBC.strerror(Native.getLastError()));\n    }\n","realPath":"core/src/main/java/jenkins/slaves/restarter/UnixSlaveRestarter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"}],"commitId":"bb7c8fcedbcc9b51c5b1bb5b32810af5ac6b1ffb","commitMessage":"@@@Jenkins.getInstance() should be non-null\n\n- It is never too late to do the right thing.\n- The vast majority of usages of `Jenkins.getInstance()` in core currently assume that its return value is non-null\n- This commit changes those that are written to correctly check for non-null values will call `Jenkins.getInstanceOrNull()`\n- We deprecate the `Jenkins.getActiveInstance()` madness\n- I checked with @kohsuke who said not to bother with a PR and just commit this strongly opinionated change direct to master as a PR will just degrade into a bikeshedding.\n","date":"2016-03-08 06:08:36","modifiedFileCount":"42","status":"M","submitter":"Stephen Connolly"},{"authorTime":"2014-04-02 01:27:29","codes":[{"authorDate":"2016-03-09 05:09:28","commitOrder":9,"curCode":"    public void restart() throws IOException, InterruptedException {\n        Jenkins h = Jenkins.getInstance();\n        if (h != null)\n            h.cleanUp();\n\n        \r\n        int sz = LIBC.getdtablesize();\n        for(int i=3; i<sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if(flags<0) continue;\n            LIBC.fcntl(i, F_SETFD,flags| FD_CLOEXEC);\n        }\n\n        \r\n        String exe = args.get(0);\n        LIBC.execvp(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\"+exe+\"' \"+LIBC.strerror(Native.getLastError()));\n    }\n","date":"2016-03-09 05:09:28","endLine":84,"groupId":"5165","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"restart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/0e/489277e50ad2d9d486e1ca5ac2212d3673f04d.src","preCode":"    public void restart() throws IOException, InterruptedException {\n        Jenkins h = Jenkins.getInstanceOrNull();\n        if (h != null)\n            h.cleanUp();\n\n        \r\n        int sz = LIBC.getdtablesize();\n        for(int i=3; i<sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if(flags<0) continue;\n            LIBC.fcntl(i, F_SETFD,flags| FD_CLOEXEC);\n        }\n\n        \r\n        String exe = args.get(0);\n        LIBC.execvp(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\"+exe+\"' \"+LIBC.strerror(Native.getLastError()));\n    }\n","realPath":"core/src/main/java/hudson/lifecycle/UnixLifecycle.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2014-04-02 01:27:29","commitOrder":9,"curCode":"    public void restart() throws Exception {\n        \r\n        int sz = LIBC.getdtablesize();\n        for (int i = 3; i < sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if (flags < 0) continue;\n            LIBC.fcntl(i, F_SETFD, flags | FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\" + exe + \"' \" + LIBC.strerror(Native.getLastError()));\n    }\n","date":"2014-04-02 07:49:52","endLine":65,"groupId":"8974","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"restart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/15/72c2301b3e01585dd33cb6ff318c3f45cb035e.src","preCode":"    public void restart() throws Exception {\n        \r\n        int sz = LIBC.getdtablesize();\n        for (int i = 3; i < sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if (flags < 0) continue;\n            LIBC.fcntl(i, F_SETFD, flags | FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\" + exe + \"' \" + LIBC.strerror(Native.getLastError()));\n    }\n","realPath":"core/src/main/java/jenkins/slaves/restarter/UnixSlaveRestarter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"}],"commitId":"d1dfbd2bafd49a743cbc7adcd03a75139ed0ff9f","commitMessage":"@@@Revert \"Jenkins.getInstance() should be non-null\"\n\nThis reverts commit bb7c8fcedbcc9b51c5b1bb5b32810af5ac6b1ffb.\n\nCloses #2090.  I'll redo this as a PR... though if that PR is subject to multiple rounds of review before being merged then I will take that of evidence of the exact problem that committing directly was supposed to resolve... namely exponentially multiplying the effort required to make actual improvements to the code base.\n","date":"2016-03-09 05:09:28","modifiedFileCount":"42","status":"M","submitter":"Stephen Connolly"},{"authorTime":"2014-04-02 01:27:29","codes":[{"authorDate":"2016-03-10 17:07:14","commitOrder":10,"curCode":"    public void restart() throws IOException, InterruptedException {\n        Jenkins h = Jenkins.getInstanceOrNull();\n        if (h != null)\n            h.cleanUp();\n\n        \r\n        int sz = LIBC.getdtablesize();\n        for(int i=3; i<sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if(flags<0) continue;\n            LIBC.fcntl(i, F_SETFD,flags| FD_CLOEXEC);\n        }\n\n        \r\n        String exe = args.get(0);\n        LIBC.execvp(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\"+exe+\"' \"+LIBC.strerror(Native.getLastError()));\n    }\n","date":"2016-03-10 17:07:14","endLine":84,"groupId":"5165","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"restart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/15/cb5699b46aae450caf490c0ab844be753ba925.src","preCode":"    public void restart() throws IOException, InterruptedException {\n        Jenkins h = Jenkins.getInstance();\n        if (h != null)\n            h.cleanUp();\n\n        \r\n        int sz = LIBC.getdtablesize();\n        for(int i=3; i<sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if(flags<0) continue;\n            LIBC.fcntl(i, F_SETFD,flags| FD_CLOEXEC);\n        }\n\n        \r\n        String exe = args.get(0);\n        LIBC.execvp(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\"+exe+\"' \"+LIBC.strerror(Native.getLastError()));\n    }\n","realPath":"core/src/main/java/hudson/lifecycle/UnixLifecycle.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2014-04-02 01:27:29","commitOrder":10,"curCode":"    public void restart() throws Exception {\n        \r\n        int sz = LIBC.getdtablesize();\n        for (int i = 3; i < sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if (flags < 0) continue;\n            LIBC.fcntl(i, F_SETFD, flags | FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\" + exe + \"' \" + LIBC.strerror(Native.getLastError()));\n    }\n","date":"2014-04-02 07:49:52","endLine":65,"groupId":"8974","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"restart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/15/72c2301b3e01585dd33cb6ff318c3f45cb035e.src","preCode":"    public void restart() throws Exception {\n        \r\n        int sz = LIBC.getdtablesize();\n        for (int i = 3; i < sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if (flags < 0) continue;\n            LIBC.fcntl(i, F_SETFD, flags | FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\" + exe + \"' \" + LIBC.strerror(Native.getLastError()));\n    }\n","realPath":"core/src/main/java/jenkins/slaves/restarter/UnixSlaveRestarter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"}],"commitId":"4107d86328e907a34e23b09f21cd86340ae137ea","commitMessage":"@@@Merge pull request #2094 from stephenc/alt-pr-2090\n\nFix Jenkins.getInstance() to make life easier for plugin authors","date":"2016-03-10 17:07:14","modifiedFileCount":"40","status":"M","submitter":"Stephen Connolly"},{"authorTime":"2014-04-02 01:27:29","codes":[{"authorDate":"2017-02-19 04:54:38","commitOrder":11,"curCode":"    public void restart() throws IOException, InterruptedException {\n        Jenkins jenkins = Jenkins.getInstanceOrNull(); \r\n        try {\n            if (jenkins != null) {\n                jenkins.cleanUp();\n            }\n        } catch (Exception e) {\n            LOGGER.log(Level.SEVERE, \"Failed to clean up. Restart will continue.\", e);\n        }\n\n        \r\n        int sz = LIBC.getdtablesize();\n        for(int i=3; i<sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if(flags<0) continue;\n            LIBC.fcntl(i, F_SETFD,flags| FD_CLOEXEC);\n        }\n\n        \r\n        String exe = args.get(0);\n        LIBC.execvp(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\"+exe+\"' \"+LIBC.strerror(Native.getLastError()));\n    }\n","date":"2017-02-19 04:54:38","endLine":91,"groupId":"5165","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"restart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/1a/f9c131558926666e3f2693d9ff14ae2311fa0f.src","preCode":"    public void restart() throws IOException, InterruptedException {\n        Jenkins h = Jenkins.getInstanceOrNull(); \r\n        if (h != null)\n            h.cleanUp();\n\n        \r\n        int sz = LIBC.getdtablesize();\n        for(int i=3; i<sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if(flags<0) continue;\n            LIBC.fcntl(i, F_SETFD,flags| FD_CLOEXEC);\n        }\n\n        \r\n        String exe = args.get(0);\n        LIBC.execvp(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\"+exe+\"' \"+LIBC.strerror(Native.getLastError()));\n    }\n","realPath":"core/src/main/java/hudson/lifecycle/UnixLifecycle.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2014-04-02 01:27:29","commitOrder":11,"curCode":"    public void restart() throws Exception {\n        \r\n        int sz = LIBC.getdtablesize();\n        for (int i = 3; i < sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if (flags < 0) continue;\n            LIBC.fcntl(i, F_SETFD, flags | FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\" + exe + \"' \" + LIBC.strerror(Native.getLastError()));\n    }\n","date":"2014-04-02 07:49:52","endLine":65,"groupId":"8974","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"restart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/15/72c2301b3e01585dd33cb6ff318c3f45cb035e.src","preCode":"    public void restart() throws Exception {\n        \r\n        int sz = LIBC.getdtablesize();\n        for (int i = 3; i < sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if (flags < 0) continue;\n            LIBC.fcntl(i, F_SETFD, flags | FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\" + exe + \"' \" + LIBC.strerror(Native.getLastError()));\n    }\n","realPath":"core/src/main/java/jenkins/slaves/restarter/UnixSlaveRestarter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"}],"commitId":"4ab693846ca7a4aa112959a2e92688c3fb9122c3","commitMessage":"@@@Merge pull request #2746 from oleg-nenashev/bug/JENKINS-32820\n\n[JENKINS-32820.  JENKINS-42164] - Windows service restart does not retain the build queue","date":"2017-02-19 04:54:38","modifiedFileCount":"4","status":"M","submitter":"Oleg Nenashev"},{"authorTime":"2019-04-08 23:18:26","codes":[{"authorDate":"2019-04-08 23:18:26","commitOrder":12,"curCode":"    public void restart() throws IOException, InterruptedException {\n        Jenkins jenkins = Jenkins.getInstanceOrNull(); \r\n        try {\n            if (jenkins != null) {\n                jenkins.cleanUp();\n            }\n        } catch (Exception e) {\n            LOGGER.log(Level.SEVERE, \"Failed to clean up. Restart will continue.\", e);\n        }\n\n        \r\n        int sz = LIBC.getdtablesize();\n        for(int i=3; i<sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if(flags<0) continue;\n            LIBC.fcntl(i, F_SETFD,flags| FD_CLOEXEC);\n        }\n\n        \r\n        String exe = args.get(0);\n        LIBC.execvp(exe, new StringArray(args.toArray(new String[0])));\n        throw new IOException(\"Failed to exec '\"+exe+\"' \"+LIBC.strerror(Native.getLastError()));\n    }\n","date":"2019-04-08 23:18:26","endLine":88,"groupId":"10985","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"restart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a1/7c898ab365f6c7b148cfd86a777981be18d011.src","preCode":"    public void restart() throws IOException, InterruptedException {\n        Jenkins jenkins = Jenkins.getInstanceOrNull(); \r\n        try {\n            if (jenkins != null) {\n                jenkins.cleanUp();\n            }\n        } catch (Exception e) {\n            LOGGER.log(Level.SEVERE, \"Failed to clean up. Restart will continue.\", e);\n        }\n\n        \r\n        int sz = LIBC.getdtablesize();\n        for(int i=3; i<sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if(flags<0) continue;\n            LIBC.fcntl(i, F_SETFD,flags| FD_CLOEXEC);\n        }\n\n        \r\n        String exe = args.get(0);\n        LIBC.execvp(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\"+exe+\"' \"+LIBC.strerror(Native.getLastError()));\n    }\n","realPath":"core/src/main/java/hudson/lifecycle/UnixLifecycle.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2019-04-08 23:18:26","commitOrder":12,"curCode":"    public void restart() throws Exception {\n        \r\n        int sz = LIBC.getdtablesize();\n        for (int i = 3; i < sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if (flags < 0) continue;\n            LIBC.fcntl(i, F_SETFD, flags | FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[0])));\n        throw new IOException(\"Failed to exec '\" + exe + \"' \" + LIBC.strerror(Native.getLastError()));\n    }\n","date":"2019-04-08 23:18:26","endLine":59,"groupId":"10985","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"restart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/0a/487628911f8ebb6f9e8a309af94bad850b497f.src","preCode":"    public void restart() throws Exception {\n        \r\n        int sz = LIBC.getdtablesize();\n        for (int i = 3; i < sz; i++) {\n            int flags = LIBC.fcntl(i, F_GETFD);\n            if (flags < 0) continue;\n            LIBC.fcntl(i, F_SETFD, flags | FD_CLOEXEC);\n        }\n\n        \r\n        String exe = Daemon.getCurrentExecutable();\n        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));\n        throw new IOException(\"Failed to exec '\" + exe + \"' \" + LIBC.strerror(Native.getLastError()));\n    }\n","realPath":"core/src/main/java/jenkins/slaves/restarter/UnixSlaveRestarter.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"6b4c6c955d10ade9b78ab02fd2733cc29e0b1ab3","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2019-04-08 23:18:26","modifiedFileCount":"242","status":"M","submitter":"Daniel Beck"}]
