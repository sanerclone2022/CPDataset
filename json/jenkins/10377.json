[{"authorTime":"2020-03-05 02:00:47","codes":[{"authorDate":"2020-03-05 02:00:47","commitOrder":1,"curCode":"    public void checkAnyPermissionThrowsIfPermissionIsMissing() throws Exception {\n        Jenkins jenkins = r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n\n        expectedException.expectMessage(\"manager is missing the Overall/Administer permission\");\n        expectedException.expect(AccessDeniedException.class);\n        try (ACLContext ignored = ACL.as(manager.impersonate())) {\n            jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER);\n        }\n    }\n","date":"2020-03-05 02:00:47","endLine":93,"groupId":"6106","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkAnyPermissionThrowsIfPermissionIsMissing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/fb/5906441025eb75716b102da08c8b1d5a20e034.src","preCode":"    public void checkAnyPermissionThrowsIfPermissionIsMissing() throws Exception {\n        Jenkins jenkins = r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n\n        expectedException.expectMessage(\"manager is missing the Overall/Administer permission\");\n        expectedException.expect(AccessDeniedException.class);\n        try (ACLContext ignored = ACL.as(manager.impersonate())) {\n            jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER);\n        }\n    }\n","realPath":"test/src/test/java/hudson/security/ACLTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"},{"authorDate":"2020-03-05 02:00:47","commitOrder":1,"curCode":"    public void checkAnyPermissionThrowsIfMissingMoreThanOne() throws Exception {\n        Jenkins jenkins = r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n\n        expectedException.expectMessage(\"manager is missing a permission, one of Overall/Administer, Overall/Read is required\");\n        expectedException.expect(AccessDeniedException.class);\n        try (ACLContext ignored = ACL.as(manager.impersonate())) {\n            jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER, Jenkins.READ);\n        }\n    }\n","date":"2020-03-05 02:00:47","endLine":110,"groupId":"6108","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkAnyPermissionThrowsIfMissingMoreThanOne","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/fb/5906441025eb75716b102da08c8b1d5a20e034.src","preCode":"    public void checkAnyPermissionThrowsIfMissingMoreThanOne() throws Exception {\n        Jenkins jenkins = r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n\n        expectedException.expectMessage(\"manager is missing a permission, one of Overall/Administer, Overall/Read is required\");\n        expectedException.expect(AccessDeniedException.class);\n        try (ACLContext ignored = ACL.as(manager.impersonate())) {\n            jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER, Jenkins.READ);\n        }\n    }\n","realPath":"test/src/test/java/hudson/security/ACLTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"}],"commitId":"07bcd1fe597250c30397ee0d1e15f00e8fbf7ffc","commitMessage":"@@@Merge commit '7f8de3ce8a8326c83fe85e14489baacab38241ce' of https://github.com/jenkinsci/jenkins\n","date":"2020-03-05 02:00:47","modifiedFileCount":"119","status":"B","submitter":"Daniel Beck"},{"authorTime":"2020-08-11 14:52:06","codes":[{"authorDate":"2020-08-11 14:52:06","commitOrder":2,"curCode":"    public void checkAnyPermissionThrowsIfPermissionIsMissing() {\n        Jenkins jenkins = r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n\n        expectedException.expectMessage(\"manager is missing the Overall/Administer permission\");\n        expectedException.expect(AccessDeniedException.class);\n        try (ACLContext ignored = ACL.as(manager.impersonate())) {\n            jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER);\n        }\n    }\n","date":"2020-08-11 14:52:06","endLine":102,"groupId":"6106","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkAnyPermissionThrowsIfPermissionIsMissing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/25/a905f00ddb5c242dc5847f1d34b09c87eeeb14.src","preCode":"    public void checkAnyPermissionThrowsIfPermissionIsMissing() throws Exception {\n        Jenkins jenkins = r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n\n        expectedException.expectMessage(\"manager is missing the Overall/Administer permission\");\n        expectedException.expect(AccessDeniedException.class);\n        try (ACLContext ignored = ACL.as(manager.impersonate())) {\n            jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER);\n        }\n    }\n","realPath":"test/src/test/java/hudson/security/ACLTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2020-08-11 14:52:06","commitOrder":2,"curCode":"    public void checkAnyPermissionThrowsIfMissingMoreThanOne() {\n        Jenkins jenkins = r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n\n        expectedException.expectMessage(\"manager is missing a permission, one of Overall/Administer, Overall/Read is required\");\n        expectedException.expect(AccessDeniedException.class);\n        try (ACLContext ignored = ACL.as(manager.impersonate())) {\n            jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER, Jenkins.READ);\n        }\n    }\n","date":"2020-08-11 14:52:06","endLine":119,"groupId":"6108","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkAnyPermissionThrowsIfMissingMoreThanOne","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/25/a905f00ddb5c242dc5847f1d34b09c87eeeb14.src","preCode":"    public void checkAnyPermissionThrowsIfMissingMoreThanOne() throws Exception {\n        Jenkins jenkins = r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n\n        expectedException.expectMessage(\"manager is missing a permission, one of Overall/Administer, Overall/Read is required\");\n        expectedException.expect(AccessDeniedException.class);\n        try (ACLContext ignored = ACL.as(manager.impersonate())) {\n            jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER, Jenkins.READ);\n        }\n    }\n","realPath":"test/src/test/java/hudson/security/ACLTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"f91b1f76629611185cb0c9624bfd40e0a2872f4f","commitMessage":"@@@minor test refactoring around StandardCharsets.  simplified JUnit assertions.  removed obsolete throws.  fixed deprecation warnings (#4872)\n\n","date":"2020-08-11 14:52:06","modifiedFileCount":"14","status":"M","submitter":"StefanSpieker"},{"authorTime":"2020-11-07 02:30:25","codes":[{"authorDate":"2020-11-07 02:30:25","commitOrder":3,"curCode":"    public void checkAnyPermissionThrowsIfPermissionIsMissing() {\n        Jenkins jenkins = r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n\n        expectedException.expectMessage(\"manager is missing the Overall/Administer permission\");\n        expectedException.expect(AccessDeniedException.class);\n        try (ACLContext ignored = ACL.as2(manager.impersonate2())) {\n            jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER);\n        }\n    }\n","date":"2020-11-07 02:30:25","endLine":102,"groupId":"6106","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkAnyPermissionThrowsIfPermissionIsMissing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/25/b81c49a2b2dac610a174338608765760ca4547.src","preCode":"    public void checkAnyPermissionThrowsIfPermissionIsMissing() {\n        Jenkins jenkins = r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n\n        expectedException.expectMessage(\"manager is missing the Overall/Administer permission\");\n        expectedException.expect(AccessDeniedException.class);\n        try (ACLContext ignored = ACL.as(manager.impersonate())) {\n            jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER);\n        }\n    }\n","realPath":"test/src/test/java/hudson/security/ACLTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2020-11-07 02:30:25","commitOrder":3,"curCode":"    public void checkAnyPermissionThrowsIfMissingMoreThanOne() {\n        Jenkins jenkins = r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n\n        expectedException.expectMessage(\"manager is missing a permission, one of Overall/Administer, Overall/Read is required\");\n        expectedException.expect(AccessDeniedException.class);\n        try (ACLContext ignored = ACL.as2(manager.impersonate2())) {\n            jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER, Jenkins.READ);\n        }\n    }\n","date":"2020-11-07 02:30:25","endLine":119,"groupId":"6108","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkAnyPermissionThrowsIfMissingMoreThanOne","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/25/b81c49a2b2dac610a174338608765760ca4547.src","preCode":"    public void checkAnyPermissionThrowsIfMissingMoreThanOne() {\n        Jenkins jenkins = r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n\n        expectedException.expectMessage(\"manager is missing a permission, one of Overall/Administer, Overall/Read is required\");\n        expectedException.expect(AccessDeniedException.class);\n        try (ACLContext ignored = ACL.as(manager.impersonate())) {\n            jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER, Jenkins.READ);\n        }\n    }\n","realPath":"test/src/test/java/hudson/security/ACLTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"a9ca5ef3d4c97937636bf3c585f4232514279b14","commitMessage":"@@@[JEP-227] Replace Acegi Security with Spring Security & upgrade Spring Framework (#4848)\n\nReplacing Acegi Security with Spring Security\n\nCo-authored-by: Tim Jacomb <timjacomb1+github@gmail.com>\nCo-authored-by: James Nord <jtnord@users.noreply.github.com>","date":"2020-11-07 02:30:25","modifiedFileCount":"149","status":"M","submitter":"Jesse Glick"},{"authorTime":"2020-12-08 08:51:40","codes":[{"authorDate":"2020-12-08 08:51:40","commitOrder":4,"curCode":"    public void checkAnyPermissionThrowsIfPermissionIsMissing() {\n        Jenkins jenkins = r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n\n        try (ACLContext ignored = ACL.as2(manager.impersonate2())) {\n            Exception e = Assert.assertThrows(AccessDeniedException.class,\n                    () -> jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER));\n            Assert.assertEquals(\"manager is missing the Overall/Administer permission\", e.getMessage());\n        }\n    }\n","date":"2020-12-08 08:51:40","endLine":99,"groupId":"10377","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"checkAnyPermissionThrowsIfPermissionIsMissing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/b1/0ff07aa8835cf28697069f47071d402b765699.src","preCode":"    public void checkAnyPermissionThrowsIfPermissionIsMissing() {\n        Jenkins jenkins = r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n\n        expectedException.expectMessage(\"manager is missing the Overall/Administer permission\");\n        expectedException.expect(AccessDeniedException.class);\n        try (ACLContext ignored = ACL.as2(manager.impersonate2())) {\n            jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER);\n        }\n    }\n","realPath":"test/src/test/java/hudson/security/ACLTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-12-08 08:51:40","commitOrder":4,"curCode":"    public void checkAnyPermissionThrowsIfMissingMoreThanOne() {\n        Jenkins jenkins = r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n\n        try (ACLContext ignored = ACL.as2(manager.impersonate2())) {\n            Exception e = Assert.assertThrows(AccessDeniedException.class,\n                    () -> jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER, Jenkins.READ));\n            Assert.assertEquals(\"manager is missing a permission, one of Overall/Administer, Overall/Read is required\", e.getMessage());\n        }\n    }\n","date":"2020-12-08 08:51:40","endLine":116,"groupId":"10377","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"checkAnyPermissionThrowsIfMissingMoreThanOne","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/b1/0ff07aa8835cf28697069f47071d402b765699.src","preCode":"    public void checkAnyPermissionThrowsIfMissingMoreThanOne() {\n        Jenkins jenkins = r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n\n        expectedException.expectMessage(\"manager is missing a permission, one of Overall/Administer, Overall/Read is required\");\n        expectedException.expect(AccessDeniedException.class);\n        try (ACLContext ignored = ACL.as2(manager.impersonate2())) {\n            jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER, Jenkins.READ);\n        }\n    }\n","realPath":"test/src/test/java/hudson/security/ACLTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"9b4632f3536586eedaa626704967119f1bc89aba","commitMessage":"@@@Merge pull request #5101 from StefanSpieker/exception_none\n\nReplaced deprecated Exception.none with assertThrows","date":"2020-12-08 08:51:40","modifiedFileCount":"3","status":"M","submitter":"Oleg Nenashev"}]
