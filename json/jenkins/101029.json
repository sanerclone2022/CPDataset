[{"authorTime":"2012-09-21 08:10:06","codes":[{"authorDate":"2008-12-31 05:34:23","commitOrder":2,"curCode":"        public static boolean isApplicable(Collection<? extends Item> items) {\n            for (Item item : items) {\n                for (Job job : item.getAllJobs()) {\n                    if (job instanceof AbstractProject) {\n                        AbstractProject<?,?> p = (AbstractProject) job;\n                        for (AbstractBuild<?,?> build : p.getBuilds()) {\n                            for (Entry entry : build.getChangeSet()) {\n                                User user = entry.getAuthor();\n                                if(user!=null)\n                                    return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n","date":"2008-12-31 05:34:23","endLine":381,"groupId":"7716","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"isApplicable","params":"(Collection<?extendsItem>items)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d1/aeb914af76541207698de823addde3aa1f4ea2.src","preCode":"        public static boolean isApplicable(Collection<? extends Item> items) {\n            for (Item item : items) {\n                for (Job job : item.getAllJobs()) {\n                    if (job instanceof AbstractProject) {\n                        AbstractProject<?,?> p = (AbstractProject) job;\n                        for (AbstractBuild<?,?> build : p.getBuilds()) {\n                            for (Entry entry : build.getChangeSet()) {\n                                User user = entry.getAuthor();\n                                if(user!=null)\n                                    return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n","realPath":"core/src/main/java/hudson/model/View.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"NB"},{"authorDate":"2012-09-21 08:10:06","commitOrder":2,"curCode":"        @Override protected void compute() throws Exception {\n            int itemCount = 0;\n            for (Item item : items) {\n                for (Job<?,?> job : item.getAllJobs()) {\n                    if (job instanceof AbstractProject) {\n                        AbstractProject<?,?> p = (AbstractProject) job;\n                        RunList<? extends AbstractBuild<?,?>> builds = p.getBuilds();\n                        int buildCount = 0;\n                        for (AbstractBuild<?,?> build : builds) {\n                            if (canceled()) {\n                                return;\n                            }\n                            for (ChangeLogSet.Entry entry : build.getChangeSet()) {\n                                User user = entry.getAuthor();\n                                synchronized (this) {\n                                    UserInfo info = users.get(user);\n                                    if (info == null) {\n                                        users.put(user, new UserInfo(user, p, build.getTimestamp()));\n                                        modified.add(user);\n                                    } else if (info.getLastChange().before(build.getTimestamp())) {\n                                        info.project = p;\n                                        info.lastChange = build.getTimestamp();\n                                        modified.add(user);\n                                    }\n                                }\n                            }\n                            buildCount++;\n                            progress((itemCount + 1.0 * buildCount / builds.size()) / (items.size() + 1));\n                        }\n                    }\n                }\n                itemCount++;\n                progress(1.0 * itemCount / (items.size() + 1));\n            }\n            if (unknown != null) {\n                if (canceled()) {\n                    return;\n                }\n                for (User u : User.getAll()) { \r\n                    if (u == unknown) {\n                        continue;\n                    }\n                    if (!users.containsKey(u)) {\n                        synchronized (this) {\n                            users.put(u, new UserInfo(u, null, null));\n                            modified.add(u);\n                        }\n                    }\n                }\n            }\n        }\n","date":"2012-09-21 08:10:06","endLine":814,"groupId":"1843","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"compute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e3/8d2be684db86b44aac7b3938154e99cc2f75ee.src","preCode":"        @Override protected void compute() throws Exception {\n            int itemCount = 0;\n            for (Item item : items) {\n                for (Job<?,?> job : item.getAllJobs()) {\n                    if (job instanceof AbstractProject) {\n                        AbstractProject<?,?> p = (AbstractProject) job;\n                        RunList<? extends AbstractBuild<?,?>> builds = p.getBuilds();\n                        int buildCount = 0;\n                        for (AbstractBuild<?,?> build : builds) {\n                            if (canceled()) {\n                                return;\n                            }\n                            for (ChangeLogSet.Entry entry : build.getChangeSet()) {\n                                User user = entry.getAuthor();\n                                synchronized (this) {\n                                    UserInfo info = users.get(user);\n                                    if (info == null) {\n                                        users.put(user, new UserInfo(user, p, build.getTimestamp()));\n                                        modified.add(user);\n                                    } else if (info.getLastChange().before(build.getTimestamp())) {\n                                        info.project = p;\n                                        info.lastChange = build.getTimestamp();\n                                        modified.add(user);\n                                    }\n                                }\n                            }\n                            buildCount++;\n                            progress((itemCount + 1.0 * buildCount / builds.size()) / (items.size() + 1));\n                        }\n                    }\n                }\n                itemCount++;\n                progress(1.0 * itemCount / (items.size() + 1));\n            }\n            if (unknown != null) {\n                if (canceled()) {\n                    return;\n                }\n                for (User u : User.getAll()) { \r\n                    if (u == unknown) {\n                        continue;\n                    }\n                    if (!users.containsKey(u)) {\n                        synchronized (this) {\n                            users.put(u, new UserInfo(u, null, null));\n                            modified.add(u);\n                        }\n                    }\n                }\n            }\n        }\n","realPath":"core/src/main/java/hudson/model/View.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":764,"status":"B"}],"commitId":"454d0f2b874fbd104b0326520dd0a336bcfeacf7","commitMessage":"@@@Merge branch 'pull-570'\n","date":"2012-09-21 08:10:06","modifiedFileCount":"2","status":"M","submitter":"Kohsuke Kawaguchi"},{"authorTime":"2013-01-16 03:34:40","codes":[{"authorDate":"2008-12-31 05:34:23","commitOrder":3,"curCode":"        public static boolean isApplicable(Collection<? extends Item> items) {\n            for (Item item : items) {\n                for (Job job : item.getAllJobs()) {\n                    if (job instanceof AbstractProject) {\n                        AbstractProject<?,?> p = (AbstractProject) job;\n                        for (AbstractBuild<?,?> build : p.getBuilds()) {\n                            for (Entry entry : build.getChangeSet()) {\n                                User user = entry.getAuthor();\n                                if(user!=null)\n                                    return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n","date":"2008-12-31 05:34:23","endLine":381,"groupId":"7716","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"isApplicable","params":"(Collection<?extendsItem>items)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d1/aeb914af76541207698de823addde3aa1f4ea2.src","preCode":"        public static boolean isApplicable(Collection<? extends Item> items) {\n            for (Item item : items) {\n                for (Job job : item.getAllJobs()) {\n                    if (job instanceof AbstractProject) {\n                        AbstractProject<?,?> p = (AbstractProject) job;\n                        for (AbstractBuild<?,?> build : p.getBuilds()) {\n                            for (Entry entry : build.getChangeSet()) {\n                                User user = entry.getAuthor();\n                                if(user!=null)\n                                    return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n","realPath":"core/src/main/java/hudson/model/View.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"N"},{"authorDate":"2013-01-16 03:34:40","commitOrder":3,"curCode":"        @Override protected void compute() throws Exception {\n            int itemCount = 0;\n            for (Item item : items) {\n                for (Job<?,?> job : item.getAllJobs()) {\n                    if (job instanceof AbstractProject) {\n                        AbstractProject<?,?> p = (AbstractProject) job;\n                        RunList<? extends AbstractBuild<?,?>> builds = p.getBuilds();\n                        int buildCount = 0;\n                        for (AbstractBuild<?,?> build : builds) {\n                            if (canceled()) {\n                                return;\n                            }\n                            for (ChangeLogSet.Entry entry : build.getChangeSet()) {\n                                User user = entry.getAuthor();\n                                UserInfo info = users.get(user);\n                                if (info == null) {\n                                    UserInfo userInfo = new UserInfo(user, p, build.getTimestamp());\n                                    userInfo.avatar = UserAvatarResolver.resolve(user, iconSize);\n                                    synchronized (this) {\n                                        users.put(user, userInfo);\n                                        modified.add(user);\n                                    }\n                                } else if (info.getLastChange().before(build.getTimestamp())) {\n                                    synchronized (this) {\n                                        info.project = p;\n                                        info.lastChange = build.getTimestamp();\n                                        modified.add(user);\n                                    }\n                                }\n                            }\n                            \r\n                            buildCount++;\n                            progress((itemCount + 1.0 * buildCount / builds.size()) / (items.size() + 1));\n                        }\n                    }\n                }\n                itemCount++;\n                progress(1.0 * itemCount / (items.size() + 1));\n            }\n            if (unknown != null) {\n                if (canceled()) {\n                    return;\n                }\n                for (User u : User.getAll()) { \r\n                    if (u == unknown) {\n                        continue;\n                    }\n                    if (!users.containsKey(u)) {\n                        UserInfo userInfo = new UserInfo(u, null, null);\n                        userInfo.avatar = UserAvatarResolver.resolve(u, iconSize);\n                        synchronized (this) {\n                            users.put(u, userInfo);\n                            modified.add(u);\n                        }\n                    }\n                }\n            }\n        }\n","date":"2013-01-16 03:34:40","endLine":828,"groupId":"1843","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"compute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e1/4897450da54d2ac4744c68a1041c2a44842591.src","preCode":"        @Override protected void compute() throws Exception {\n            int itemCount = 0;\n            for (Item item : items) {\n                for (Job<?,?> job : item.getAllJobs()) {\n                    if (job instanceof AbstractProject) {\n                        AbstractProject<?,?> p = (AbstractProject) job;\n                        RunList<? extends AbstractBuild<?,?>> builds = p.getBuilds();\n                        int buildCount = 0;\n                        for (AbstractBuild<?,?> build : builds) {\n                            if (canceled()) {\n                                return;\n                            }\n                            for (ChangeLogSet.Entry entry : build.getChangeSet()) {\n                                User user = entry.getAuthor();\n                                synchronized (this) {\n                                    UserInfo info = users.get(user);\n                                    if (info == null) {\n                                        users.put(user, new UserInfo(user, p, build.getTimestamp()));\n                                        modified.add(user);\n                                    } else if (info.getLastChange().before(build.getTimestamp())) {\n                                        info.project = p;\n                                        info.lastChange = build.getTimestamp();\n                                        modified.add(user);\n                                    }\n                                }\n                            }\n                            \r\n                            buildCount++;\n                            progress((itemCount + 1.0 * buildCount / builds.size()) / (items.size() + 1));\n                        }\n                    }\n                }\n                itemCount++;\n                progress(1.0 * itemCount / (items.size() + 1));\n            }\n            if (unknown != null) {\n                if (canceled()) {\n                    return;\n                }\n                for (User u : User.getAll()) { \r\n                    if (u == unknown) {\n                        continue;\n                    }\n                    if (!users.containsKey(u)) {\n                        synchronized (this) {\n                            users.put(u, new UserInfo(u, null, null));\n                            modified.add(u);\n                        }\n                    }\n                }\n            }\n        }\n","realPath":"core/src/main/java/hudson/model/View.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":771,"status":"M"}],"commitId":"c757e65431ad1aec9a3bebe81ac919577e51ac58","commitMessage":"@@@[JENKINS-16342] Improving responsiveness of asynchPeople when Gravatar plugin is in use.\nThis change does not necessarily improve total performance.  since the avatar is still computed.\nBut (1) the computation is correctly done in the work thread.  not in the HTTP response thread;\n(2) the computation is done just once for a given User.  which could reduce load when many AJAX checks are done.","date":"2013-01-16 03:34:40","modifiedFileCount":"1","status":"M","submitter":"Jesse Glick"},{"authorTime":"2013-05-29 00:23:55","codes":[{"authorDate":"2008-12-31 05:34:23","commitOrder":4,"curCode":"        public static boolean isApplicable(Collection<? extends Item> items) {\n            for (Item item : items) {\n                for (Job job : item.getAllJobs()) {\n                    if (job instanceof AbstractProject) {\n                        AbstractProject<?,?> p = (AbstractProject) job;\n                        for (AbstractBuild<?,?> build : p.getBuilds()) {\n                            for (Entry entry : build.getChangeSet()) {\n                                User user = entry.getAuthor();\n                                if(user!=null)\n                                    return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n","date":"2008-12-31 05:34:23","endLine":381,"groupId":"7716","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"isApplicable","params":"(Collection<?extendsItem>items)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d1/aeb914af76541207698de823addde3aa1f4ea2.src","preCode":"        public static boolean isApplicable(Collection<? extends Item> items) {\n            for (Item item : items) {\n                for (Job job : item.getAllJobs()) {\n                    if (job instanceof AbstractProject) {\n                        AbstractProject<?,?> p = (AbstractProject) job;\n                        for (AbstractBuild<?,?> build : p.getBuilds()) {\n                            for (Entry entry : build.getChangeSet()) {\n                                User user = entry.getAuthor();\n                                if(user!=null)\n                                    return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n","realPath":"core/src/main/java/hudson/model/View.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"N"},{"authorDate":"2013-05-29 00:23:55","commitOrder":4,"curCode":"        @Override protected void compute() throws Exception {\n            int itemCount = 0;\n            for (Item item : items) {\n                for (Job<?,?> job : item.getAllJobs()) {\n                    if (job instanceof AbstractProject) {\n                        AbstractProject<?,?> p = (AbstractProject) job;\n                        RunList<? extends AbstractBuild<?,?>> builds = p.getBuilds();\n                        int buildCount = 0;\n                        for (AbstractBuild<?,?> build : builds) {\n                            if (canceled()) {\n                                return;\n                            }\n                            for (ChangeLogSet.Entry entry : build.getChangeSet()) {\n                                User user = entry.getAuthor();\n                                UserInfo info = users.get(user);\n                                if (info == null) {\n                                    UserInfo userInfo = new UserInfo(user, p, build.getTimestamp());\n                                    userInfo.avatar = UserAvatarResolver.resolveOrNull(user, iconSize);\n                                    synchronized (this) {\n                                        users.put(user, userInfo);\n                                        modified.add(user);\n                                    }\n                                } else if (info.getLastChange().before(build.getTimestamp())) {\n                                    synchronized (this) {\n                                        info.project = p;\n                                        info.lastChange = build.getTimestamp();\n                                        modified.add(user);\n                                    }\n                                }\n                            }\n                            \r\n                            buildCount++;\n                            progress((itemCount + 1.0 * buildCount / builds.size()) / (items.size() + 1));\n                        }\n                    }\n                }\n                itemCount++;\n                progress(1.0 * itemCount / (items.size() + 1));\n            }\n            if (unknown != null) {\n                if (canceled()) {\n                    return;\n                }\n                for (User u : User.getAll()) { \r\n                    if (u == unknown) {\n                        continue;\n                    }\n                    if (!users.containsKey(u)) {\n                        UserInfo userInfo = new UserInfo(u, null, null);\n                        userInfo.avatar = UserAvatarResolver.resolveOrNull(u, iconSize);\n                        synchronized (this) {\n                            users.put(u, userInfo);\n                            modified.add(u);\n                        }\n                    }\n                }\n            }\n        }\n","date":"2013-05-29 00:23:55","endLine":835,"groupId":"1843","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"compute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f3/94eb220bbc16434272a1b3f86360249441f02c.src","preCode":"        @Override protected void compute() throws Exception {\n            int itemCount = 0;\n            for (Item item : items) {\n                for (Job<?,?> job : item.getAllJobs()) {\n                    if (job instanceof AbstractProject) {\n                        AbstractProject<?,?> p = (AbstractProject) job;\n                        RunList<? extends AbstractBuild<?,?>> builds = p.getBuilds();\n                        int buildCount = 0;\n                        for (AbstractBuild<?,?> build : builds) {\n                            if (canceled()) {\n                                return;\n                            }\n                            for (ChangeLogSet.Entry entry : build.getChangeSet()) {\n                                User user = entry.getAuthor();\n                                UserInfo info = users.get(user);\n                                if (info == null) {\n                                    UserInfo userInfo = new UserInfo(user, p, build.getTimestamp());\n                                    userInfo.avatar = UserAvatarResolver.resolve(user, iconSize);\n                                    synchronized (this) {\n                                        users.put(user, userInfo);\n                                        modified.add(user);\n                                    }\n                                } else if (info.getLastChange().before(build.getTimestamp())) {\n                                    synchronized (this) {\n                                        info.project = p;\n                                        info.lastChange = build.getTimestamp();\n                                        modified.add(user);\n                                    }\n                                }\n                            }\n                            \r\n                            buildCount++;\n                            progress((itemCount + 1.0 * buildCount / builds.size()) / (items.size() + 1));\n                        }\n                    }\n                }\n                itemCount++;\n                progress(1.0 * itemCount / (items.size() + 1));\n            }\n            if (unknown != null) {\n                if (canceled()) {\n                    return;\n                }\n                for (User u : User.getAll()) { \r\n                    if (u == unknown) {\n                        continue;\n                    }\n                    if (!users.containsKey(u)) {\n                        UserInfo userInfo = new UserInfo(u, null, null);\n                        userInfo.avatar = UserAvatarResolver.resolve(u, iconSize);\n                        synchronized (this) {\n                            users.put(u, userInfo);\n                            modified.add(u);\n                        }\n                    }\n                }\n            }\n        }\n","realPath":"core/src/main/java/hudson/model/View.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":778,"status":"M"}],"commitId":"8549e7b32debae32827cca4cd6e7aa69858140b0","commitMessage":"@@@[FIXED JENKINS-18118] Introduced UserAvatarResolver.resolveOrNull to properly produce fallback icon URL.","date":"2013-05-29 00:23:55","modifiedFileCount":"2","status":"M","submitter":"Jesse Glick"},{"authorTime":"2013-12-07 07:06:16","codes":[{"authorDate":"2008-12-31 05:34:23","commitOrder":5,"curCode":"        public static boolean isApplicable(Collection<? extends Item> items) {\n            for (Item item : items) {\n                for (Job job : item.getAllJobs()) {\n                    if (job instanceof AbstractProject) {\n                        AbstractProject<?,?> p = (AbstractProject) job;\n                        for (AbstractBuild<?,?> build : p.getBuilds()) {\n                            for (Entry entry : build.getChangeSet()) {\n                                User user = entry.getAuthor();\n                                if(user!=null)\n                                    return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n","date":"2008-12-31 05:34:23","endLine":381,"groupId":"7716","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"isApplicable","params":"(Collection<?extendsItem>items)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d1/aeb914af76541207698de823addde3aa1f4ea2.src","preCode":"        public static boolean isApplicable(Collection<? extends Item> items) {\n            for (Item item : items) {\n                for (Job job : item.getAllJobs()) {\n                    if (job instanceof AbstractProject) {\n                        AbstractProject<?,?> p = (AbstractProject) job;\n                        for (AbstractBuild<?,?> build : p.getBuilds()) {\n                            for (Entry entry : build.getChangeSet()) {\n                                User user = entry.getAuthor();\n                                if(user!=null)\n                                    return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n","realPath":"core/src/main/java/hudson/model/View.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"N"},{"authorDate":"2013-12-07 07:06:16","commitOrder":5,"curCode":"        @Override protected void compute() throws Exception {\n            int itemCount = 0;\n            for (Item item : items) {\n                for (Job<?,?> job : item.getAllJobs()) {\n                    if (job instanceof AbstractProject) {\n                        AbstractProject<?,?> p = (AbstractProject) job;\n                        RunList<? extends AbstractBuild<?,?>> builds = p.getBuilds();\n                        int buildCount = 0;\n                        for (AbstractBuild<?,?> build : builds) {\n                            if (canceled()) {\n                                return;\n                            }\n                            for (ChangeLogSet.Entry entry : build.getChangeSet()) {\n                                User user = entry.getAuthor();\n                                UserInfo info = users.get(user);\n                                if (info == null) {\n                                    UserInfo userInfo = new UserInfo(user, p, build.getTimestamp());\n                                    userInfo.avatar = UserAvatarResolver.resolveOrNull(user, iconSize);\n                                    synchronized (this) {\n                                        users.put(user, userInfo);\n                                        modified.add(user);\n                                    }\n                                } else if (info.getLastChange().before(build.getTimestamp())) {\n                                    synchronized (this) {\n                                        info.project = p;\n                                        info.lastChange = build.getTimestamp();\n                                        modified.add(user);\n                                    }\n                                }\n                            }\n                            \r\n                            buildCount++;\n                            \r\n                            \r\n                            progress((itemCount + 1.0 * buildCount / builds.size()) / (items.size() + 1));\n                        }\n                    }\n                }\n                itemCount++;\n                progress(1.0 * itemCount / (items.size() + 1));\n            }\n            if (unknown != null) {\n                if (canceled()) {\n                    return;\n                }\n                for (User u : User.getAll()) { \r\n                    if (canceled()) {\n                        return;\n                    }\n                    if (u == unknown) {\n                        continue;\n                    }\n                    if (!users.containsKey(u)) {\n                        UserInfo userInfo = new UserInfo(u, null, null);\n                        userInfo.avatar = UserAvatarResolver.resolveOrNull(u, iconSize);\n                        synchronized (this) {\n                            users.put(u, userInfo);\n                            modified.add(u);\n                        }\n                    }\n                }\n            }\n        }\n","date":"2013-12-07 07:06:16","endLine":864,"groupId":"1843","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"compute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/0a/418e131014a95a12ab1be9e594f8fcd3cbcdce.src","preCode":"        @Override protected void compute() throws Exception {\n            int itemCount = 0;\n            for (Item item : items) {\n                for (Job<?,?> job : item.getAllJobs()) {\n                    if (job instanceof AbstractProject) {\n                        AbstractProject<?,?> p = (AbstractProject) job;\n                        RunList<? extends AbstractBuild<?,?>> builds = p.getBuilds();\n                        int buildCount = 0;\n                        for (AbstractBuild<?,?> build : builds) {\n                            if (canceled()) {\n                                return;\n                            }\n                            for (ChangeLogSet.Entry entry : build.getChangeSet()) {\n                                User user = entry.getAuthor();\n                                UserInfo info = users.get(user);\n                                if (info == null) {\n                                    UserInfo userInfo = new UserInfo(user, p, build.getTimestamp());\n                                    userInfo.avatar = UserAvatarResolver.resolveOrNull(user, iconSize);\n                                    synchronized (this) {\n                                        users.put(user, userInfo);\n                                        modified.add(user);\n                                    }\n                                } else if (info.getLastChange().before(build.getTimestamp())) {\n                                    synchronized (this) {\n                                        info.project = p;\n                                        info.lastChange = build.getTimestamp();\n                                        modified.add(user);\n                                    }\n                                }\n                            }\n                            \r\n                            buildCount++;\n                            \r\n                            \r\n                            progress((itemCount + 1.0 * buildCount / builds.size()) / (items.size() + 1));\n                        }\n                    }\n                }\n                itemCount++;\n                progress(1.0 * itemCount / (items.size() + 1));\n            }\n            if (unknown != null) {\n                if (canceled()) {\n                    return;\n                }\n                for (User u : User.getAll()) { \r\n                    if (u == unknown) {\n                        continue;\n                    }\n                    if (!users.containsKey(u)) {\n                        UserInfo userInfo = new UserInfo(u, null, null);\n                        userInfo.avatar = UserAvatarResolver.resolveOrNull(u, iconSize);\n                        synchronized (this) {\n                            users.put(u, userInfo);\n                            modified.add(u);\n                        }\n                    }\n                }\n            }\n        }\n","realPath":"core/src/main/java/hudson/model/View.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":802,"status":"M"}],"commitId":"bcb39b413a1a053eafdc8e1e3fdfc1ea10894f77","commitMessage":"@@@In /asynchPeople.  check progressive rendering cancelation status between each user; UserAvatarResolver could be slow.","date":"2013-12-07 07:06:16","modifiedFileCount":"1","status":"M","submitter":"Jesse Glick"},{"authorTime":"2017-05-10 22:21:24","codes":[{"authorDate":"2017-05-10 22:21:24","commitOrder":6,"curCode":"        public static boolean isApplicable(Collection<? extends Item> items) {\n            for (Item item : items) {\n                for (Job job : item.getAllJobs()) {\n                    RunList<? extends Run<?, ?>> runs = job.getBuilds();\n\n                    for (Run<?,?> r : runs) {\n                        if (r instanceof RunWithSCM) {\n                            RunWithSCM<?,?> runWithSCM = (RunWithSCM<?,?>) r;\n                            for (ChangeLogSet<? extends Entry> c : runWithSCM.getChangeSets()) {\n                                for (Entry entry : c) {\n                                    User user = entry.getAuthor();\n                                    if (user != null)\n                                        return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n","date":"2017-05-10 22:21:24","endLine":792,"groupId":"7091","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"isApplicable","params":"(Collection<?extendsItem>items)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/89/5585bb3353d86d5688757479325f57fa2699e4.src","preCode":"        public static boolean isApplicable(Collection<? extends Item> items) {\n            for (Item item : items) {\n                for (Job job : item.getAllJobs()) {\n                    if (job instanceof AbstractProject) {\n                        AbstractProject<?,?> p = (AbstractProject) job;\n                        for (AbstractBuild<?,?> build : p.getBuilds()) {\n                            for (Entry entry : build.getChangeSet()) {\n                                User user = entry.getAuthor();\n                                if(user!=null)\n                                    return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n","realPath":"core/src/main/java/hudson/model/View.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":772,"status":"M"},{"authorDate":"2017-05-10 22:21:24","commitOrder":6,"curCode":"        @Override protected void compute() throws Exception {\n            int itemCount = 0;\n            for (Item item : items) {\n                for (Job<?,?> job : item.getAllJobs()) {\n                    RunList<? extends Run<?, ?>> builds = job.getBuilds();\n                    int buildCount = 0;\n                    for (Run<?, ?> r : builds) {\n                        if (canceled()) {\n                            return;\n                        }\n                        if (!(r instanceof RunWithSCM)) {\n                            continue;\n                        }\n\n                        RunWithSCM<?, ?> runWithSCM = (RunWithSCM<?, ?>) r;\n                        for (ChangeLogSet<? extends ChangeLogSet.Entry> c : runWithSCM.getChangeSets()) {\n                            for (ChangeLogSet.Entry entry : c) {\n                                User user = entry.getAuthor();\n                                UserInfo info = users.get(user);\n                                if (info == null) {\n                                    UserInfo userInfo = new UserInfo(user, job, r.getTimestamp());\n                                    userInfo.avatar = UserAvatarResolver.resolveOrNull(user, iconSize);\n                                    synchronized (this) {\n                                        users.put(user, userInfo);\n                                        modified.add(user);\n                                    }\n                                } else if (info.getLastChange().before(r.getTimestamp())) {\n                                    synchronized (this) {\n                                        info.project = job;\n                                        info.lastChange = r.getTimestamp();\n                                        modified.add(user);\n                                    }\n                                }\n                            }\n                        }\n                        \r\n                        buildCount++;\n                        \r\n                        \r\n                        progress((itemCount + 1.0 * buildCount / builds.size()) / (items.size() + 1));\n                    }\n                }\n                itemCount++;\n                progress(1.0 * itemCount / (items.size() + 1));\n            }\n            if (unknown != null) {\n                if (canceled()) {\n                    return;\n                }\n                for (User u : User.getAll()) { \r\n                    if (canceled()) {\n                        return;\n                    }\n                    if (u == unknown) {\n                        continue;\n                    }\n                    if (!users.containsKey(u)) {\n                        UserInfo userInfo = new UserInfo(u, null, null);\n                        userInfo.avatar = UserAvatarResolver.resolveOrNull(u, iconSize);\n                        synchronized (this) {\n                            users.put(u, userInfo);\n                            modified.add(u);\n                        }\n                    }\n                }\n            }\n        }\n","date":"2017-05-10 22:21:24","endLine":893,"groupId":"4160","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"compute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/89/5585bb3353d86d5688757479325f57fa2699e4.src","preCode":"        @Override protected void compute() throws Exception {\n            int itemCount = 0;\n            for (Item item : items) {\n                for (Job<?,?> job : item.getAllJobs()) {\n                    if (job instanceof AbstractProject) {\n                        AbstractProject<?,?> p = (AbstractProject) job;\n                        RunList<? extends AbstractBuild<?,?>> builds = p.getBuilds();\n                        int buildCount = 0;\n                        for (AbstractBuild<?,?> build : builds) {\n                            if (canceled()) {\n                                return;\n                            }\n                            for (ChangeLogSet.Entry entry : build.getChangeSet()) {\n                                User user = entry.getAuthor();\n                                UserInfo info = users.get(user);\n                                if (info == null) {\n                                    UserInfo userInfo = new UserInfo(user, p, build.getTimestamp());\n                                    userInfo.avatar = UserAvatarResolver.resolveOrNull(user, iconSize);\n                                    synchronized (this) {\n                                        users.put(user, userInfo);\n                                        modified.add(user);\n                                    }\n                                } else if (info.getLastChange().before(build.getTimestamp())) {\n                                    synchronized (this) {\n                                        info.project = p;\n                                        info.lastChange = build.getTimestamp();\n                                        modified.add(user);\n                                    }\n                                }\n                            }\n                            \r\n                            buildCount++;\n                            \r\n                            \r\n                            progress((itemCount + 1.0 * buildCount / builds.size()) / (items.size() + 1));\n                        }\n                    }\n                }\n                itemCount++;\n                progress(1.0 * itemCount / (items.size() + 1));\n            }\n            if (unknown != null) {\n                if (canceled()) {\n                    return;\n                }\n                for (User u : User.getAll()) { \r\n                    if (canceled()) {\n                        return;\n                    }\n                    if (u == unknown) {\n                        continue;\n                    }\n                    if (!users.containsKey(u)) {\n                        UserInfo userInfo = new UserInfo(u, null, null);\n                        userInfo.avatar = UserAvatarResolver.resolveOrNull(u, iconSize);\n                        synchronized (this) {\n                            users.put(u, userInfo);\n                            modified.add(u);\n                        }\n                    }\n                }\n            }\n        }\n","realPath":"core/src/main/java/hudson/model/View.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":827,"status":"M"}],"commitId":"2f5ca1a7a167be27aab5d5c69f71a02ee5507ba6","commitMessage":"@@@Merge pull request #2730 from abayer/jenkins-24141\n\n[JENKINS-24141] Pull ChangeLogSet-related logic out of AbstractBuild","date":"2017-05-10 22:21:24","modifiedFileCount":"7","status":"M","submitter":"Andrew Bayer"},{"authorTime":"2017-05-10 22:21:24","codes":[{"authorDate":"2021-06-01 13:02:48","commitOrder":7,"curCode":"        public static boolean isApplicable(Collection<? extends Item> items) {\n            for (Item item : items) {\n                for (Job job : item.getAllJobs()) {\n                    RunList<? extends Run<?, ?>> runs = job.getBuilds();\n\n                    for (Run<?,?> r : runs) {\n                        if (r instanceof RunWithSCM) {\n                            RunWithSCM<?,?> runWithSCM = (RunWithSCM<?,?>) r;\n                            for (ChangeLogSet<? extends ChangeLogSet.Entry> c : runWithSCM.getChangeSets()) {\n                                for (ChangeLogSet.Entry entry : c) {\n                                    User user = entry.getAuthor();\n                                    if (user != null)\n                                        return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n","date":"2021-06-01 13:02:48","endLine":813,"groupId":"101029","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"isApplicable","params":"(Collection<?extendsItem>items)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/d4/ed464b0f4816c61c934af8d5cd1bada7f04b98.src","preCode":"        public static boolean isApplicable(Collection<? extends Item> items) {\n            for (Item item : items) {\n                for (Job job : item.getAllJobs()) {\n                    RunList<? extends Run<?, ?>> runs = job.getBuilds();\n\n                    for (Run<?,?> r : runs) {\n                        if (r instanceof RunWithSCM) {\n                            RunWithSCM<?,?> runWithSCM = (RunWithSCM<?,?>) r;\n                            for (ChangeLogSet<? extends Entry> c : runWithSCM.getChangeSets()) {\n                                for (Entry entry : c) {\n                                    User user = entry.getAuthor();\n                                    if (user != null)\n                                        return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n","realPath":"core/src/main/java/hudson/model/View.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":793,"status":"M"},{"authorDate":"2017-05-10 22:21:24","commitOrder":7,"curCode":"        @Override protected void compute() throws Exception {\n            int itemCount = 0;\n            for (Item item : items) {\n                for (Job<?,?> job : item.getAllJobs()) {\n                    RunList<? extends Run<?, ?>> builds = job.getBuilds();\n                    int buildCount = 0;\n                    for (Run<?, ?> r : builds) {\n                        if (canceled()) {\n                            return;\n                        }\n                        if (!(r instanceof RunWithSCM)) {\n                            continue;\n                        }\n\n                        RunWithSCM<?, ?> runWithSCM = (RunWithSCM<?, ?>) r;\n                        for (ChangeLogSet<? extends ChangeLogSet.Entry> c : runWithSCM.getChangeSets()) {\n                            for (ChangeLogSet.Entry entry : c) {\n                                User user = entry.getAuthor();\n                                UserInfo info = users.get(user);\n                                if (info == null) {\n                                    UserInfo userInfo = new UserInfo(user, job, r.getTimestamp());\n                                    userInfo.avatar = UserAvatarResolver.resolveOrNull(user, iconSize);\n                                    synchronized (this) {\n                                        users.put(user, userInfo);\n                                        modified.add(user);\n                                    }\n                                } else if (info.getLastChange().before(r.getTimestamp())) {\n                                    synchronized (this) {\n                                        info.project = job;\n                                        info.lastChange = r.getTimestamp();\n                                        modified.add(user);\n                                    }\n                                }\n                            }\n                        }\n                        \r\n                        buildCount++;\n                        \r\n                        \r\n                        progress((itemCount + 1.0 * buildCount / builds.size()) / (items.size() + 1));\n                    }\n                }\n                itemCount++;\n                progress(1.0 * itemCount / (items.size() + 1));\n            }\n            if (unknown != null) {\n                if (canceled()) {\n                    return;\n                }\n                for (User u : User.getAll()) { \r\n                    if (canceled()) {\n                        return;\n                    }\n                    if (u == unknown) {\n                        continue;\n                    }\n                    if (!users.containsKey(u)) {\n                        UserInfo userInfo = new UserInfo(u, null, null);\n                        userInfo.avatar = UserAvatarResolver.resolveOrNull(u, iconSize);\n                        synchronized (this) {\n                            users.put(u, userInfo);\n                            modified.add(u);\n                        }\n                    }\n                }\n            }\n        }\n","date":"2017-05-10 22:21:24","endLine":893,"groupId":"101029","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"compute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/89/5585bb3353d86d5688757479325f57fa2699e4.src","preCode":"        @Override protected void compute() throws Exception {\n            int itemCount = 0;\n            for (Item item : items) {\n                for (Job<?,?> job : item.getAllJobs()) {\n                    RunList<? extends Run<?, ?>> builds = job.getBuilds();\n                    int buildCount = 0;\n                    for (Run<?, ?> r : builds) {\n                        if (canceled()) {\n                            return;\n                        }\n                        if (!(r instanceof RunWithSCM)) {\n                            continue;\n                        }\n\n                        RunWithSCM<?, ?> runWithSCM = (RunWithSCM<?, ?>) r;\n                        for (ChangeLogSet<? extends ChangeLogSet.Entry> c : runWithSCM.getChangeSets()) {\n                            for (ChangeLogSet.Entry entry : c) {\n                                User user = entry.getAuthor();\n                                UserInfo info = users.get(user);\n                                if (info == null) {\n                                    UserInfo userInfo = new UserInfo(user, job, r.getTimestamp());\n                                    userInfo.avatar = UserAvatarResolver.resolveOrNull(user, iconSize);\n                                    synchronized (this) {\n                                        users.put(user, userInfo);\n                                        modified.add(user);\n                                    }\n                                } else if (info.getLastChange().before(r.getTimestamp())) {\n                                    synchronized (this) {\n                                        info.project = job;\n                                        info.lastChange = r.getTimestamp();\n                                        modified.add(user);\n                                    }\n                                }\n                            }\n                        }\n                        \r\n                        buildCount++;\n                        \r\n                        \r\n                        progress((itemCount + 1.0 * buildCount / builds.size()) / (items.size() + 1));\n                    }\n                }\n                itemCount++;\n                progress(1.0 * itemCount / (items.size() + 1));\n            }\n            if (unknown != null) {\n                if (canceled()) {\n                    return;\n                }\n                for (User u : User.getAll()) { \r\n                    if (canceled()) {\n                        return;\n                    }\n                    if (u == unknown) {\n                        continue;\n                    }\n                    if (!users.containsKey(u)) {\n                        UserInfo userInfo = new UserInfo(u, null, null);\n                        userInfo.avatar = UserAvatarResolver.resolveOrNull(u, iconSize);\n                        synchronized (this) {\n                            users.put(u, userInfo);\n                            modified.add(u);\n                        }\n                    }\n                }\n            }\n        }\n","realPath":"core/src/main/java/hudson/model/View.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":827,"status":"N"}],"commitId":"9f9ed7b60db1bc67210f1f4368f8ace218a5b9c0","commitMessage":"@@@Fix `BadImport` Error Prone violations (#5510)\n\n* Fix `BadImport` Error Prone violations\n\n* Fix Javadoc","date":"2021-06-01 13:02:48","modifiedFileCount":"39","status":"M","submitter":"Basil Crow"}]
