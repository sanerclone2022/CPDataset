[{"authorTime":"2016-11-27 14:38:38","codes":[{"authorDate":"2016-11-27 14:38:38","commitOrder":1,"curCode":"    @Test public void laziness() throws Exception {\n        FreeStyleProject p = r.createFreeStyleProject();\n        \r\n        assertNull(p.getAction(FoldableAction.class));\n        assertEquals(0, LazyFactory.count);\n        assertNotNull(p.getAction(ProminentProjectAction.class));\n        assertEquals(1, LazyFactory.count);\n        assertNotNull(p.getAction(MyProminentProjectAction.class));\n        assertEquals(2, LazyFactory.count);\n        LazyFactory.count = 0;\n        \r\n        List<? extends Action> allActions = p.getAllActions();\n        assertEquals(1, LazyFactory.count);\n        assertThat(Util.filter(allActions, FoldableAction.class), Matchers.<FoldableAction>iterableWithSize(0));\n        assertThat(Util.filter(allActions, ProminentProjectAction.class), Matchers.<ProminentProjectAction>iterableWithSize(1));\n        assertThat(Util.filter(allActions, MyProminentProjectAction.class), Matchers.<MyProminentProjectAction>iterableWithSize(1));\n        LazyFactory.count = 0;\n        \r\n        assertThat(p.getActions(FoldableAction.class), Matchers.<FoldableAction>iterableWithSize(0));\n        assertEquals(0, LazyFactory.count);\n        assertThat(p.getActions(ProminentProjectAction.class), Matchers.<ProminentProjectAction>iterableWithSize(1));\n        assertEquals(1, LazyFactory.count);\n        assertThat(p.getActions(MyProminentProjectAction.class), Matchers.<MyProminentProjectAction>iterableWithSize(1));\n        assertEquals(2, LazyFactory.count);\n        LazyFactory.count = 0;\n        \r\n        MockFolder d = r.createFolder(\"d\");\n        assertNull(d.getAction(FoldableAction.class));\n        assertNull(d.getAction(ProminentProjectAction.class));\n        allActions = d.getAllActions();\n        assertThat(Util.filter(allActions, FoldableAction.class), Matchers.<FoldableAction>iterableWithSize(0));\n        assertThat(Util.filter(allActions, ProminentProjectAction.class), Matchers.<ProminentProjectAction>iterableWithSize(0));\n        assertThat(d.getActions(FoldableAction.class), Matchers.<FoldableAction>iterableWithSize(0));\n        assertThat(d.getActions(ProminentProjectAction.class), Matchers.<ProminentProjectAction>iterableWithSize(0));\n        assertEquals(0, LazyFactory.count);\n    }\n","date":"2016-11-27 14:38:38","endLine":109,"groupId":"1906","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"laziness","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/57/37fb5d18749e75371430ca9bd5abbaad7cd40b.src","preCode":"    @Test public void laziness() throws Exception {\n        FreeStyleProject p = r.createFreeStyleProject();\n        \r\n        assertNull(p.getAction(FoldableAction.class));\n        assertEquals(0, LazyFactory.count);\n        assertNotNull(p.getAction(ProminentProjectAction.class));\n        assertEquals(1, LazyFactory.count);\n        assertNotNull(p.getAction(MyProminentProjectAction.class));\n        assertEquals(2, LazyFactory.count);\n        LazyFactory.count = 0;\n        \r\n        List<? extends Action> allActions = p.getAllActions();\n        assertEquals(1, LazyFactory.count);\n        assertThat(Util.filter(allActions, FoldableAction.class), Matchers.<FoldableAction>iterableWithSize(0));\n        assertThat(Util.filter(allActions, ProminentProjectAction.class), Matchers.<ProminentProjectAction>iterableWithSize(1));\n        assertThat(Util.filter(allActions, MyProminentProjectAction.class), Matchers.<MyProminentProjectAction>iterableWithSize(1));\n        LazyFactory.count = 0;\n        \r\n        assertThat(p.getActions(FoldableAction.class), Matchers.<FoldableAction>iterableWithSize(0));\n        assertEquals(0, LazyFactory.count);\n        assertThat(p.getActions(ProminentProjectAction.class), Matchers.<ProminentProjectAction>iterableWithSize(1));\n        assertEquals(1, LazyFactory.count);\n        assertThat(p.getActions(MyProminentProjectAction.class), Matchers.<MyProminentProjectAction>iterableWithSize(1));\n        assertEquals(2, LazyFactory.count);\n        LazyFactory.count = 0;\n        \r\n        MockFolder d = r.createFolder(\"d\");\n        assertNull(d.getAction(FoldableAction.class));\n        assertNull(d.getAction(ProminentProjectAction.class));\n        allActions = d.getAllActions();\n        assertThat(Util.filter(allActions, FoldableAction.class), Matchers.<FoldableAction>iterableWithSize(0));\n        assertThat(Util.filter(allActions, ProminentProjectAction.class), Matchers.<ProminentProjectAction>iterableWithSize(0));\n        assertThat(d.getActions(FoldableAction.class), Matchers.<FoldableAction>iterableWithSize(0));\n        assertThat(d.getActions(ProminentProjectAction.class), Matchers.<ProminentProjectAction>iterableWithSize(0));\n        assertEquals(0, LazyFactory.count);\n    }\n","realPath":"test/src/test/java/jenkins/model/TransientActionFactoryTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"},{"authorDate":"2016-11-27 14:38:38","commitOrder":1,"curCode":"    @Test public void compatibility() throws Exception {\n        FreeStyleProject p = r.createFreeStyleProject();\n        \r\n        assertNull(p.getAction(FoldableAction.class));\n        assertEquals(1, OldFactory.count);\n        assertNotNull(p.getAction(ProminentProjectAction.class));\n        assertEquals(2, OldFactory.count);\n        OldFactory.count = 0;\n        \r\n        List<? extends Action> allActions = p.getAllActions();\n        assertEquals(1, OldFactory.count);\n        assertThat(Util.filter(allActions, FoldableAction.class), Matchers.<FoldableAction>iterableWithSize(0));\n        assertThat(Util.filter(allActions, ProminentProjectAction.class), Matchers.<ProminentProjectAction>iterableWithSize(1));\n        OldFactory.count = 0;\n        \r\n        assertThat(p.getActions(FoldableAction.class), Matchers.<FoldableAction>iterableWithSize(0));\n        assertEquals(1, OldFactory.count);\n        assertThat(p.getActions(ProminentProjectAction.class), Matchers.<ProminentProjectAction>iterableWithSize(1));\n        assertEquals(2, OldFactory.count);\n    }\n","date":"2016-11-27 14:38:38","endLine":140,"groupId":"1905","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"compatibility","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/57/37fb5d18749e75371430ca9bd5abbaad7cd40b.src","preCode":"    @Test public void compatibility() throws Exception {\n        FreeStyleProject p = r.createFreeStyleProject();\n        \r\n        assertNull(p.getAction(FoldableAction.class));\n        assertEquals(1, OldFactory.count);\n        assertNotNull(p.getAction(ProminentProjectAction.class));\n        assertEquals(2, OldFactory.count);\n        OldFactory.count = 0;\n        \r\n        List<? extends Action> allActions = p.getAllActions();\n        assertEquals(1, OldFactory.count);\n        assertThat(Util.filter(allActions, FoldableAction.class), Matchers.<FoldableAction>iterableWithSize(0));\n        assertThat(Util.filter(allActions, ProminentProjectAction.class), Matchers.<ProminentProjectAction>iterableWithSize(1));\n        OldFactory.count = 0;\n        \r\n        assertThat(p.getActions(FoldableAction.class), Matchers.<FoldableAction>iterableWithSize(0));\n        assertEquals(1, OldFactory.count);\n        assertThat(p.getActions(ProminentProjectAction.class), Matchers.<ProminentProjectAction>iterableWithSize(1));\n        assertEquals(2, OldFactory.count);\n    }\n","realPath":"test/src/test/java/jenkins/model/TransientActionFactoryTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"B"}],"commitId":"6360b96464f6c2498fe91a089a21992411b2ec34","commitMessage":"@@@[JENKINS-38867] Optimize performance of Actionable.getAllActions (#2582)\n\n* Optimize Actionable.getAllActions.\n\n* Also need to invalidate the cache when new plugins are installed.\n\n* Various improvements to TransientActionFactory caching.\n? Move the cache code to TransientActionFactory itself.  for better encapsulation.\n? Optimize getAction(Class) to not need to call getAllActions; avoids copying lists.  and can avoid calling TransientActionFactory at all.\n? Ensure that we maintain a separate cache per ExtensionList instance.  so that static state is not leaked across Jenkins restarts.\n\n* Updated TransientActionFactory to specify what kinds of actions it could produce.\n\n* It turns out that changing type parameters for an extension.  while generally binary-compatible.  breaks reflective code in Jenkins and so this is not an option.\n? hudson.ExtensionFinder$GuiceFinder$SezpozModule configure\nWARNING: Failed to load com.cloudbees.hudson.plugins.folder.relocate.RelocationAction$TransientActionFactoryImpl\njava.lang.LinkageError: Failed to resolve class com.cloudbees.hudson.plugins.folder.relocate.RelocationAction$TransientActionFactoryImpl\n\tat hudson.ExtensionFinder$GuiceFinder$SezpozModule.resolve(ExtensionFinder.java:489)\n\tat hudson.ExtensionFinder$GuiceFinder$SezpozModule.configure(ExtensionFinder.java:506)\n\tat ?\n\tat hudson.ExtensionFinder$GuiceFinder.<init>(ExtensionFinder.java:280)\n\tat ?\n\tat hudson.ClassicPluginStrategy.findComponents(ClassicPluginStrategy.java:472)\n\tat hudson.ExtensionList.load(ExtensionList.java:349)\n\tat hudson.ExtensionList.ensureLoaded(ExtensionList.java:287)\n\tat hudson.ExtensionList.getComponents(ExtensionList.java:167)\n\tat jenkins.model.Jenkins$8.onInitMilestoneAttained(Jenkins.java:1082)\n\tat jenkins.InitReactorRunner$1.onAttained(InitReactorRunner.java:82)\n\tat org.jvnet.hudson.reactor.ReactorListener$Aggregator.onAttained(ReactorListener.java:104)\n\tat org.jvnet.hudson.reactor.Reactor$1.run(Reactor.java:176)\n\tat org.jvnet.hudson.reactor.Reactor$Node.run(Reactor.java:117)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.reflect.MalformedParameterizedTypeException\n\tat sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.validateConstructorArguments(ParameterizedTypeImpl.java:58)\n\tat sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.<init>(ParameterizedTypeImpl.java:51)\n\tat sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.make(ParameterizedTypeImpl.java:92)\n\tat sun.reflect.generics.factory.CoreReflectionFactory.makeParameterizedType(CoreReflectionFactory.java:105)\n\tat sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:140)\n\tat sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:49)\n\tat sun.reflect.generics.repository.ClassRepository.getSuperclass(ClassRepository.java:90)\n\tat java.lang.Class.getGenericSuperclass(Class.java:777)\n\tat hudson.ExtensionFinder$GuiceFinder$SezpozModule.resolve(ExtensionFinder.java:470)\n\t... 29 more\n\n* Remove actionType override to make for a simpler diff.\n\n* Strengthened test to cover accesses to unrelated context types.\n\n* Strengthening tests in a couple of ways.\n\n* Javadoc improvements suggested by @oleg-nenashev.\n","date":"2016-11-27 14:38:38","modifiedFileCount":"3","status":"B","submitter":"Jesse Glick"},{"authorTime":"2020-12-20 03:51:40","codes":[{"authorDate":"2020-12-20 03:51:40","commitOrder":2,"curCode":"    @Test public void laziness() throws Exception {\n        FreeStyleProject p = r.createFreeStyleProject();\n        \r\n        assertNull(p.getAction(FoldableAction.class));\n        assertEquals(0, LazyFactory.count);\n        assertNotNull(p.getAction(ProminentProjectAction.class));\n        assertEquals(1, LazyFactory.count);\n        assertNotNull(p.getAction(MyProminentProjectAction.class));\n        assertEquals(2, LazyFactory.count);\n        LazyFactory.count = 0;\n        \r\n        List<? extends Action> allActions = p.getAllActions();\n        assertEquals(1, LazyFactory.count);\n        assertThat(Util.filter(allActions, FoldableAction.class), Matchers.iterableWithSize(0));\n        assertThat(Util.filter(allActions, ProminentProjectAction.class), Matchers.iterableWithSize(1));\n        assertThat(Util.filter(allActions, MyProminentProjectAction.class), Matchers.iterableWithSize(1));\n        LazyFactory.count = 0;\n        \r\n        assertThat(p.getActions(FoldableAction.class), Matchers.iterableWithSize(0));\n        assertEquals(0, LazyFactory.count);\n        assertThat(p.getActions(ProminentProjectAction.class), Matchers.iterableWithSize(1));\n        assertEquals(1, LazyFactory.count);\n        assertThat(p.getActions(MyProminentProjectAction.class), Matchers.iterableWithSize(1));\n        assertEquals(2, LazyFactory.count);\n        LazyFactory.count = 0;\n        \r\n        MockFolder d = r.createFolder(\"d\");\n        assertNull(d.getAction(FoldableAction.class));\n        assertNull(d.getAction(ProminentProjectAction.class));\n        allActions = d.getAllActions();\n        assertThat(Util.filter(allActions, FoldableAction.class), Matchers.iterableWithSize(0));\n        assertThat(Util.filter(allActions, ProminentProjectAction.class), Matchers.iterableWithSize(0));\n        assertThat(d.getActions(FoldableAction.class), Matchers.iterableWithSize(0));\n        assertThat(d.getActions(ProminentProjectAction.class), Matchers.iterableWithSize(0));\n        assertEquals(0, LazyFactory.count);\n    }\n","date":"2020-12-20 03:51:40","endLine":125,"groupId":"10696","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"laziness","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/46/9823ccc04d2f3122f91e65c4a4f77dbe44c643.src","preCode":"    @Test public void laziness() throws Exception {\n        FreeStyleProject p = r.createFreeStyleProject();\n        \r\n        assertNull(p.getAction(FoldableAction.class));\n        assertEquals(0, LazyFactory.count);\n        assertNotNull(p.getAction(ProminentProjectAction.class));\n        assertEquals(1, LazyFactory.count);\n        assertNotNull(p.getAction(MyProminentProjectAction.class));\n        assertEquals(2, LazyFactory.count);\n        LazyFactory.count = 0;\n        \r\n        List<? extends Action> allActions = p.getAllActions();\n        assertEquals(1, LazyFactory.count);\n        assertThat(Util.filter(allActions, FoldableAction.class), Matchers.<FoldableAction>iterableWithSize(0));\n        assertThat(Util.filter(allActions, ProminentProjectAction.class), Matchers.<ProminentProjectAction>iterableWithSize(1));\n        assertThat(Util.filter(allActions, MyProminentProjectAction.class), Matchers.<MyProminentProjectAction>iterableWithSize(1));\n        LazyFactory.count = 0;\n        \r\n        assertThat(p.getActions(FoldableAction.class), Matchers.<FoldableAction>iterableWithSize(0));\n        assertEquals(0, LazyFactory.count);\n        assertThat(p.getActions(ProminentProjectAction.class), Matchers.<ProminentProjectAction>iterableWithSize(1));\n        assertEquals(1, LazyFactory.count);\n        assertThat(p.getActions(MyProminentProjectAction.class), Matchers.<MyProminentProjectAction>iterableWithSize(1));\n        assertEquals(2, LazyFactory.count);\n        LazyFactory.count = 0;\n        \r\n        MockFolder d = r.createFolder(\"d\");\n        assertNull(d.getAction(FoldableAction.class));\n        assertNull(d.getAction(ProminentProjectAction.class));\n        allActions = d.getAllActions();\n        assertThat(Util.filter(allActions, FoldableAction.class), Matchers.<FoldableAction>iterableWithSize(0));\n        assertThat(Util.filter(allActions, ProminentProjectAction.class), Matchers.<ProminentProjectAction>iterableWithSize(0));\n        assertThat(d.getActions(FoldableAction.class), Matchers.<FoldableAction>iterableWithSize(0));\n        assertThat(d.getActions(ProminentProjectAction.class), Matchers.<ProminentProjectAction>iterableWithSize(0));\n        assertEquals(0, LazyFactory.count);\n    }\n","realPath":"test/src/test/java/jenkins/model/TransientActionFactoryTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2020-12-20 03:51:40","commitOrder":2,"curCode":"    @Test public void compatibility() throws Exception {\n        FreeStyleProject p = r.createFreeStyleProject();\n        \r\n        assertNull(p.getAction(FoldableAction.class));\n        assertEquals(1, OldFactory.count);\n        assertNotNull(p.getAction(ProminentProjectAction.class));\n        assertEquals(2, OldFactory.count);\n        OldFactory.count = 0;\n        \r\n        List<? extends Action> allActions = p.getAllActions();\n        assertEquals(1, OldFactory.count);\n        assertThat(Util.filter(allActions, FoldableAction.class), Matchers.iterableWithSize(0));\n        assertThat(Util.filter(allActions, ProminentProjectAction.class), Matchers.iterableWithSize(1));\n        OldFactory.count = 0;\n        \r\n        assertThat(p.getActions(FoldableAction.class), Matchers.iterableWithSize(0));\n        assertEquals(1, OldFactory.count);\n        assertThat(p.getActions(ProminentProjectAction.class), Matchers.iterableWithSize(1));\n        assertEquals(2, OldFactory.count);\n    }\n","date":"2020-12-20 03:51:40","endLine":156,"groupId":"10696","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"compatibility","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/46/9823ccc04d2f3122f91e65c4a4f77dbe44c643.src","preCode":"    @Test public void compatibility() throws Exception {\n        FreeStyleProject p = r.createFreeStyleProject();\n        \r\n        assertNull(p.getAction(FoldableAction.class));\n        assertEquals(1, OldFactory.count);\n        assertNotNull(p.getAction(ProminentProjectAction.class));\n        assertEquals(2, OldFactory.count);\n        OldFactory.count = 0;\n        \r\n        List<? extends Action> allActions = p.getAllActions();\n        assertEquals(1, OldFactory.count);\n        assertThat(Util.filter(allActions, FoldableAction.class), Matchers.<FoldableAction>iterableWithSize(0));\n        assertThat(Util.filter(allActions, ProminentProjectAction.class), Matchers.<ProminentProjectAction>iterableWithSize(1));\n        OldFactory.count = 0;\n        \r\n        assertThat(p.getActions(FoldableAction.class), Matchers.<FoldableAction>iterableWithSize(0));\n        assertEquals(1, OldFactory.count);\n        assertThat(p.getActions(ProminentProjectAction.class), Matchers.<ProminentProjectAction>iterableWithSize(1));\n        assertEquals(2, OldFactory.count);\n    }\n","realPath":"test/src/test/java/jenkins/model/TransientActionFactoryTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"152682c1574c5b763616158f8e650e78b84023a1","commitMessage":"@@@Merge pull request #5109 from basil/improvements\n\nCode cleanup","date":"2020-12-20 03:51:40","modifiedFileCount":"47","status":"M","submitter":"Oleg Nenashev"}]
