[{"authorTime":"2019-04-10 22:48:55","codes":[{"authorDate":"2019-04-10 22:48:55","commitOrder":1,"curCode":"    public void symlink_outsideWorkspace_areNotAllowed() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (Functions.isWindows()) {\n            \r\n            \r\n\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    containsString(\"to_secrets1\"),\n                    containsString(\"to_secrets_goal1\"),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    containsString(\"to_secrets2\"),\n                    containsString(\"to_secrets_goal2\")\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\")\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    p.getName() + \"/intermediateFolder/public2.key\",\n                    p.getName() + \"/public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));\n        }\n    }\n","date":"2019-04-10 22:48:55","endLine":527,"groupId":"3487","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"symlink_outsideWorkspace_areNotAllowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/8e/f6d80574bea235e64c19901f849ce5156ea6f1.src","preCode":"    public void symlink_outsideWorkspace_areNotAllowed() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (Functions.isWindows()) {\n            \r\n            \r\n\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    containsString(\"to_secrets1\"),\n                    containsString(\"to_secrets_goal1\"),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    containsString(\"to_secrets2\"),\n                    containsString(\"to_secrets_goal2\")\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\")\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    p.getName() + \"/intermediateFolder/public2.key\",\n                    p.getName() + \"/public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/DirectoryBrowserSupportTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":413,"status":"B"},{"authorDate":"2019-04-10 22:48:55","commitOrder":1,"curCode":"    public void junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction() throws Exception {\n        Assume.assumeTrue(Functions.isWindows());\n\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        String script = loadContentFromResource(\"outsideWorkspaceStructureWithJunctions.bat\");\n        p.getBuildersList().add(new BatchFile(script));\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    containsString(\"to_secrets1j\"),\n                    containsString(\"to_secrets1s\"),\n                    containsString(\"to_secrets_goal1\"),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1s/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1j/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    containsString(\"to_secrets2s\"),\n                    containsString(\"to_secrets2j\"),\n                    containsString(\"to_secrets_goal2\")\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"otherFolder\")),\n                    not(containsString(\"to_secrets3j\")),\n                    not(containsString(\"to_secrets3s\")),\n                    not(containsString(\"to_secrets2j\")),\n                    not(containsString(\"to_secrets2s\")),\n                    not(containsString(\"to_secrets1j\")),\n                    not(containsString(\"to_secrets1s\"))\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    p.getName() + \"/intermediateFolder/public2.key\",\n                    p.getName() + \"/public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));\n        }\n    }\n","date":"2019-04-10 22:48:55","endLine":750,"groupId":"1311","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/8e/f6d80574bea235e64c19901f849ce5156ea6f1.src","preCode":"    public void junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction() throws Exception {\n        Assume.assumeTrue(Functions.isWindows());\n\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        String script = loadContentFromResource(\"outsideWorkspaceStructureWithJunctions.bat\");\n        p.getBuildersList().add(new BatchFile(script));\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    containsString(\"to_secrets1j\"),\n                    containsString(\"to_secrets1s\"),\n                    containsString(\"to_secrets_goal1\"),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1s/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1j/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    containsString(\"to_secrets2s\"),\n                    containsString(\"to_secrets2j\"),\n                    containsString(\"to_secrets_goal2\")\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"otherFolder\")),\n                    not(containsString(\"to_secrets3j\")),\n                    not(containsString(\"to_secrets3s\")),\n                    not(containsString(\"to_secrets2j\")),\n                    not(containsString(\"to_secrets2s\")),\n                    not(containsString(\"to_secrets1j\")),\n                    not(containsString(\"to_secrets1s\"))\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    p.getName() + \"/intermediateFolder/public2.key\",\n                    p.getName() + \"/public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/DirectoryBrowserSupportTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":617,"status":"B"}],"commitId":"86e17f90f6d9d8c5495c55278648d2f89d45ce04","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2019-04-10 22:48:55","modifiedFileCount":"22","status":"B","submitter":"Kohsuke Kawaguchi"},{"authorTime":"2020-07-21 11:16:06","codes":[{"authorDate":"2020-07-21 11:16:06","commitOrder":2,"curCode":"    public void symlink_outsideWorkspace_areNotAllowed() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent, StandardCharsets.UTF_8);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (Functions.isWindows()) {\n            \r\n            \r\n\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    containsString(\"to_secrets1\"),\n                    containsString(\"to_secrets_goal1\"),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    containsString(\"to_secrets2\"),\n                    containsString(\"to_secrets_goal2\")\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\")\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    p.getName() + \"/intermediateFolder/public2.key\",\n                    p.getName() + \"/public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));\n        }\n    }\n","date":"2020-07-21 11:16:06","endLine":540,"groupId":"3487","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"symlink_outsideWorkspace_areNotAllowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/be/06571c4a6e33ffc83f2ec8357e5577558a840d.src","preCode":"    public void symlink_outsideWorkspace_areNotAllowed() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (Functions.isWindows()) {\n            \r\n            \r\n\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    containsString(\"to_secrets1\"),\n                    containsString(\"to_secrets_goal1\"),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    containsString(\"to_secrets2\"),\n                    containsString(\"to_secrets_goal2\")\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\")\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    p.getName() + \"/intermediateFolder/public2.key\",\n                    p.getName() + \"/public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/DirectoryBrowserSupportTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"M"},{"authorDate":"2020-07-21 11:16:06","commitOrder":2,"curCode":"    public void junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction() throws Exception {\n        Assume.assumeTrue(Functions.isWindows());\n\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent, StandardCharsets.UTF_8);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        String script = loadContentFromResource(\"outsideWorkspaceStructureWithJunctions.bat\");\n        p.getBuildersList().add(new BatchFile(script));\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    containsString(\"to_secrets1j\"),\n                    containsString(\"to_secrets1s\"),\n                    containsString(\"to_secrets_goal1\"),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1s/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1j/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    containsString(\"to_secrets2s\"),\n                    containsString(\"to_secrets2j\"),\n                    containsString(\"to_secrets_goal2\")\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"otherFolder\")),\n                    not(containsString(\"to_secrets3j\")),\n                    not(containsString(\"to_secrets3s\")),\n                    not(containsString(\"to_secrets2j\")),\n                    not(containsString(\"to_secrets2s\")),\n                    not(containsString(\"to_secrets1j\")),\n                    not(containsString(\"to_secrets1s\"))\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    p.getName() + \"/intermediateFolder/public2.key\",\n                    p.getName() + \"/public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));\n        }\n    }\n","date":"2020-07-21 11:16:06","endLine":763,"groupId":"1311","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/be/06571c4a6e33ffc83f2ec8357e5577558a840d.src","preCode":"    public void junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction() throws Exception {\n        Assume.assumeTrue(Functions.isWindows());\n\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        String script = loadContentFromResource(\"outsideWorkspaceStructureWithJunctions.bat\");\n        p.getBuildersList().add(new BatchFile(script));\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    containsString(\"to_secrets1j\"),\n                    containsString(\"to_secrets1s\"),\n                    containsString(\"to_secrets_goal1\"),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1s/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1j/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    containsString(\"to_secrets2s\"),\n                    containsString(\"to_secrets2j\"),\n                    containsString(\"to_secrets_goal2\")\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"otherFolder\")),\n                    not(containsString(\"to_secrets3j\")),\n                    not(containsString(\"to_secrets3s\")),\n                    not(containsString(\"to_secrets2j\")),\n                    not(containsString(\"to_secrets2s\")),\n                    not(containsString(\"to_secrets1j\")),\n                    not(containsString(\"to_secrets1s\"))\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    p.getName() + \"/intermediateFolder/public2.key\",\n                    p.getName() + \"/public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/DirectoryBrowserSupportTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":630,"status":"M"}],"commitId":"eb636e252161d8952b9536214dd8a0ec439a3ad7","commitMessage":"@@@Merge pull request #4851 from StefanSpieker/test_refactorings_2\n\nTests: Refactoring of various things","date":"2020-07-21 11:16:06","modifiedFileCount":"19","status":"M","submitter":"Tim Jacomb"},{"authorTime":"2021-01-13 22:41:47","codes":[{"authorDate":"2021-01-13 22:41:47","commitOrder":3,"curCode":"    public void symlink_outsideWorkspace_areNotAllowed() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent, StandardCharsets.UTF_8);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (Functions.isWindows()) {\n            \r\n            \r\n\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\")\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    \"intermediateFolder/public2.key\",\n                    \"public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"public2.key\"));\n        }\n    }\n","date":"2021-01-13 22:41:47","endLine":540,"groupId":"3487","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"symlink_outsideWorkspace_areNotAllowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/c8/8adf0d4862f5dc2cc4168bbef733d4e2c98c20.src","preCode":"    public void symlink_outsideWorkspace_areNotAllowed() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent, StandardCharsets.UTF_8);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (Functions.isWindows()) {\n            \r\n            \r\n\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    containsString(\"to_secrets1\"),\n                    containsString(\"to_secrets_goal1\"),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    containsString(\"to_secrets2\"),\n                    containsString(\"to_secrets_goal2\")\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\")\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    p.getName() + \"/intermediateFolder/public2.key\",\n                    p.getName() + \"/public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/DirectoryBrowserSupportTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"M"},{"authorDate":"2021-01-13 22:41:47","commitOrder":3,"curCode":"    public void junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction() throws Exception {\n        Assume.assumeTrue(Functions.isWindows());\n\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent, StandardCharsets.UTF_8);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        String script = loadContentFromResource(\"outsideWorkspaceStructureWithJunctions.bat\");\n        p.getBuildersList().add(new BatchFile(script));\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"to_secrets1j\")),\n                    not(containsString(\"to_secrets1s\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1s/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1j/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2s\")),\n                    not(containsString(\"to_secrets2j\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"otherFolder\")),\n                    not(containsString(\"to_secrets3j\")),\n                    not(containsString(\"to_secrets3s\")),\n                    not(containsString(\"to_secrets2j\")),\n                    not(containsString(\"to_secrets2s\")),\n                    not(containsString(\"to_secrets1j\")),\n                    not(containsString(\"to_secrets1s\"))\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                     \"intermediateFolder/public2.key\",\n                    \"public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"public2.key\"));\n        }\n    }\n","date":"2021-01-13 22:41:47","endLine":753,"groupId":"3487","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/c8/8adf0d4862f5dc2cc4168bbef733d4e2c98c20.src","preCode":"    public void junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction() throws Exception {\n        Assume.assumeTrue(Functions.isWindows());\n\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent, StandardCharsets.UTF_8);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        String script = loadContentFromResource(\"outsideWorkspaceStructureWithJunctions.bat\");\n        p.getBuildersList().add(new BatchFile(script));\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    containsString(\"to_secrets1j\"),\n                    containsString(\"to_secrets1s\"),\n                    containsString(\"to_secrets_goal1\"),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1s/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1j/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    containsString(\"to_secrets2s\"),\n                    containsString(\"to_secrets2j\"),\n                    containsString(\"to_secrets_goal2\")\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"otherFolder\")),\n                    not(containsString(\"to_secrets3j\")),\n                    not(containsString(\"to_secrets3s\")),\n                    not(containsString(\"to_secrets2j\")),\n                    not(containsString(\"to_secrets2s\")),\n                    not(containsString(\"to_secrets1j\")),\n                    not(containsString(\"to_secrets1s\"))\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    p.getName() + \"/intermediateFolder/public2.key\",\n                    p.getName() + \"/public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/DirectoryBrowserSupportTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":620,"status":"M"}],"commitId":"82688811faeb81a6286e72bf6edd569e40826c7f","commitMessage":"@@@Merge branch 'security-master' into master\n","date":"2021-01-13 22:41:47","modifiedFileCount":"21","status":"M","submitter":"Daniel Beck"},{"authorTime":"2021-01-19 17:11:30","codes":[{"authorDate":"2021-01-19 17:11:30","commitOrder":4,"curCode":"    public void symlink_outsideWorkspace_areNotAllowed() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent, StandardCharsets.UTF_8);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (Functions.isWindows()) {\n            \r\n            \r\n\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\")\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    p.getName() + \"/intermediateFolder/public2.key\",\n                    p.getName() + \"/public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/**/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    \"intermediateFolder/public2.key\",\n                    \"public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/**/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"public2.key\"));\n        }\n    }\n","date":"2021-01-19 17:11:30","endLine":557,"groupId":"10534","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"symlink_outsideWorkspace_areNotAllowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/db/59c696fb745c2816cc207176d1543c4dd3cf90.src","preCode":"    public void symlink_outsideWorkspace_areNotAllowed() throws Exception {\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent, StandardCharsets.UTF_8);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (Functions.isWindows()) {\n            \r\n            \r\n\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script = loadContentFromResource(\"outsideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\")\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    \"intermediateFolder/public2.key\",\n                    \"public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"public2.key\"));\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/DirectoryBrowserSupportTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"M"},{"authorDate":"2021-01-19 17:11:30","commitOrder":4,"curCode":"    public void junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction() throws Exception {\n        Assume.assumeTrue(Functions.isWindows());\n\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent, StandardCharsets.UTF_8);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        String script = loadContentFromResource(\"outsideWorkspaceStructureWithJunctions.bat\");\n        p.getBuildersList().add(new BatchFile(script));\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"to_secrets1j\")),\n                    not(containsString(\"to_secrets1s\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1s/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1j/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2s\")),\n                    not(containsString(\"to_secrets2j\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"otherFolder\")),\n                    not(containsString(\"to_secrets3j\")),\n                    not(containsString(\"to_secrets3s\")),\n                    not(containsString(\"to_secrets2j\")),\n                    not(containsString(\"to_secrets2s\")),\n                    not(containsString(\"to_secrets1j\")),\n                    not(containsString(\"to_secrets1s\"))\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    p.getName() + \"/intermediateFolder/public2.key\",\n                    p.getName() + \"/public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));\n        }\n    }\n","date":"2021-01-19 17:11:30","endLine":770,"groupId":"10534","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/db/59c696fb745c2816cc207176d1543c4dd3cf90.src","preCode":"    public void junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction() throws Exception {\n        Assume.assumeTrue(Functions.isWindows());\n\n        FreeStyleProject p = j.createFreeStyleProject();\n\n        File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget = new File(secretsFolder, \"goal.txt\");\n        String secretContent = \"secret\";\n        FileUtils.write(secretTarget, secretContent, StandardCharsets.UTF_8);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        String script = loadContentFromResource(\"outsideWorkspaceStructureWithJunctions.bat\");\n        p.getBuildersList().add(new BatchFile(script));\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"to_secrets1j\")),\n                    not(containsString(\"to_secrets1s\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1s/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1j/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2s\")),\n                    not(containsString(\"to_secrets2j\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { \r\n            Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n\n        \r\n        { \r\n            \r\n            Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent = page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"otherFolder\")),\n                    not(containsString(\"to_secrets3j\")),\n                    not(containsString(\"to_secrets3s\")),\n                    not(containsString(\"to_secrets2j\")),\n                    not(containsString(\"to_secrets2s\")),\n                    not(containsString(\"to_secrets1j\")),\n                    not(containsString(\"to_secrets1s\"))\n            ));\n        }\n\n        \r\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                     \"intermediateFolder/public2.key\",\n                    \"public1.key\"\n            ));\n        }\n        { \r\n            Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"public2.key\"));\n        }\n    }\n","realPath":"test/src/test/java/hudson/model/DirectoryBrowserSupportTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":637,"status":"M"}],"commitId":"ecf309536208cdf847732f3f0a0a7a2a0e1fa2c1","commitMessage":"@@@[JENKINS-64621] Fix zip regression (#5187)\n\n","date":"2021-01-19 17:11:30","modifiedFileCount":"7","status":"M","submitter":"Wadeck Follonier"}]
