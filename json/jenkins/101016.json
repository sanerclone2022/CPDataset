[{"authorTime":"2010-03-03 23:37:55","codes":[{"authorDate":"2011-04-29 00:04:42","commitOrder":4,"curCode":"    public final void doAperiodicRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(Level.INFO, name+\" thread is still running. Execution aborted.\");\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(Level.INFO, \"Started \"+name);\n                    long startTime = System.currentTimeMillis();\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        SecurityContextHolder.getContext().setAuthentication(ACL.SYSTEM);\n                        \n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        l.closeQuietly();\n                    }\n\n                    logger.log(Level.INFO, \"Finished \"+name+\". \"+\n                        (System.currentTimeMillis()-startTime)+\" ms\");\n                }\n            },name+\" thread\");\n            thread.start(); \n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","date":"2011-04-29 00:04:42","endLine":91,"groupId":"519","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doAperiodicRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/53/b2451059c5e179d5d3e0ec71805d87b95b016f.src","preCode":"    public final void doAperiodicRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(Level.INFO, name+\" thread is still running. Execution aborted.\");\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(Level.INFO, \"Started \"+name);\n                    long startTime = System.currentTimeMillis();\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        SecurityContextHolder.getContext().setAuthentication(ACL.SYSTEM);\n                        \n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        l.closeQuietly();\n                    }\n\n                    logger.log(Level.INFO, \"Finished \"+name+\". \"+\n                        (System.currentTimeMillis()-startTime)+\" ms\");\n                }\n            },name+\" thread\");\n            thread.start(); \n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","realPath":"core/src/main/java/hudson/model/AsyncAperiodicWork.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"},{"authorDate":"2010-03-03 23:37:55","commitOrder":4,"curCode":"    public final void doRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(Level.INFO, name+\" thread is still running. Execution aborted.\");\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(Level.INFO, \"Started \"+name);\n                    long startTime = System.currentTimeMillis();\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        SecurityContextHolder.getContext().setAuthentication(ACL.SYSTEM);\n                        \n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        l.closeQuietly();\n                    }\n\n                    logger.log(Level.INFO, \"Finished \"+name+\". \"+\n                        (System.currentTimeMillis()-startTime)+\" ms\");\n                }\n            },name+\" thread\");\n            thread.start();\n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","date":"2010-03-03 23:37:55","endLine":68,"groupId":"519","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/be/84e3772773ade99aaa4603947feefce2be9039.src","preCode":"    public final void doRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(Level.INFO, name+\" thread is still running. Execution aborted.\");\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(Level.INFO, \"Started \"+name);\n                    long startTime = System.currentTimeMillis();\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        SecurityContextHolder.getContext().setAuthentication(ACL.SYSTEM);\n                        \n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        l.closeQuietly();\n                    }\n\n                    logger.log(Level.INFO, \"Finished \"+name+\". \"+\n                        (System.currentTimeMillis()-startTime)+\" ms\");\n                }\n            },name+\" thread\");\n            thread.start();\n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","realPath":"core/src/main/java/hudson/model/AsyncPeriodicWork.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"NB"}],"commitId":"fdf96b3a2cd1ab46307a78cd92dee58e1e645ddf","commitMessage":"@@@Merge remote branch 'origin/master'\n","date":"2011-04-29 00:04:42","modifiedFileCount":"44","status":"M","submitter":"rseguy"},{"authorTime":"2012-04-13 05:36:11","codes":[{"authorDate":"2012-04-13 05:36:11","commitOrder":5,"curCode":"    public final void doAperiodicRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(Level.INFO, name+\" thread is still running. Execution aborted.\");\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(Level.INFO, \"Started \"+name);\n                    long startTime = System.currentTimeMillis();\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        l.closeQuietly();\n                    }\n\n                    logger.log(Level.INFO, \"Finished \"+name+\". \"+\n                        (System.currentTimeMillis()-startTime)+\" ms\");\n                }\n            },name+\" thread\");\n            thread.start(); \n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","date":"2012-04-13 05:41:17","endLine":93,"groupId":"4055","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doAperiodicRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f4/6dd33b61d835eec945fec60f76975809d9c3de.src","preCode":"    public final void doAperiodicRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(Level.INFO, name+\" thread is still running. Execution aborted.\");\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(Level.INFO, \"Started \"+name);\n                    long startTime = System.currentTimeMillis();\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        SecurityContextHolder.getContext().setAuthentication(ACL.SYSTEM);\n                        \n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        l.closeQuietly();\n                    }\n\n                    logger.log(Level.INFO, \"Finished \"+name+\". \"+\n                        (System.currentTimeMillis()-startTime)+\" ms\");\n                }\n            },name+\" thread\");\n            thread.start(); \n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","realPath":"core/src/main/java/hudson/model/AsyncAperiodicWork.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2012-04-13 05:36:11","commitOrder":5,"curCode":"    public final void doRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(Level.INFO, name+\" thread is still running. Execution aborted.\");\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(Level.INFO, \"Started \"+name);\n                    long startTime = System.currentTimeMillis();\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        l.closeQuietly();\n                    }\n\n                    logger.log(Level.INFO, \"Finished \"+name+\". \"+\n                        (System.currentTimeMillis()-startTime)+\" ms\");\n                }\n            },name+\" thread\");\n            thread.start();\n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","date":"2012-04-13 05:41:17","endLine":70,"groupId":"4055","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/52/fdb148a1b703e4c44d3036592b824826a4271b.src","preCode":"    public final void doRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(Level.INFO, name+\" thread is still running. Execution aborted.\");\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(Level.INFO, \"Started \"+name);\n                    long startTime = System.currentTimeMillis();\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        SecurityContextHolder.getContext().setAuthentication(ACL.SYSTEM);\n                        \n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        l.closeQuietly();\n                    }\n\n                    logger.log(Level.INFO, \"Finished \"+name+\". \"+\n                        (System.currentTimeMillis()-startTime)+\" ms\");\n                }\n            },name+\" thread\");\n            thread.start();\n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","realPath":"core/src/main/java/hudson/model/AsyncPeriodicWork.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"}],"commitId":"8886bea1fb463b8a6c5ade36c6a6850155b7543e","commitMessage":"@@@fixed a concurrency bug in the impersonation code\n","date":"2012-04-13 05:41:17","modifiedFileCount":"13","status":"M","submitter":"Kohsuke Kawaguchi"},{"authorTime":"2014-02-03 23:24:17","codes":[{"authorDate":"2012-04-13 05:36:11","commitOrder":6,"curCode":"    public final void doAperiodicRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(Level.INFO, name+\" thread is still running. Execution aborted.\");\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(Level.INFO, \"Started \"+name);\n                    long startTime = System.currentTimeMillis();\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        l.closeQuietly();\n                    }\n\n                    logger.log(Level.INFO, \"Finished \"+name+\". \"+\n                        (System.currentTimeMillis()-startTime)+\" ms\");\n                }\n            },name+\" thread\");\n            thread.start(); \n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","date":"2012-04-13 05:41:17","endLine":93,"groupId":"4055","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doAperiodicRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f4/6dd33b61d835eec945fec60f76975809d9c3de.src","preCode":"    public final void doAperiodicRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(Level.INFO, name+\" thread is still running. Execution aborted.\");\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(Level.INFO, \"Started \"+name);\n                    long startTime = System.currentTimeMillis();\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        l.closeQuietly();\n                    }\n\n                    logger.log(Level.INFO, \"Finished \"+name+\". \"+\n                        (System.currentTimeMillis()-startTime)+\" ms\");\n                }\n            },name+\" thread\");\n            thread.start(); \n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","realPath":"core/src/main/java/hudson/model/AsyncAperiodicWork.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2014-02-03 23:24:17","commitOrder":6,"curCode":"    public final void doRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(this.getNormalLoggingLevel(), name+\" thread is still running. Execution aborted.\");\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(getNormalLoggingLevel(), \"Started \"+name);\n                    long startTime = System.currentTimeMillis();\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        l.closeQuietly();\n                    }\n\n                    logger.log(getNormalLoggingLevel(), \"Finished \"+name+\". \"+\n                        (System.currentTimeMillis()-startTime)+\" ms\");\n                }\n            },name+\" thread\");\n            thread.start();\n        } catch (Throwable t) {\n            logger.log(this.getErrorLoggingLevel(), name+\" thread failed with error\", t);\n        }\n    }\n","date":"2014-02-03 23:24:17","endLine":70,"groupId":"342","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ab/e863afb21a2b40bf659bd802921368ec0f4312.src","preCode":"    public final void doRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(Level.INFO, name+\" thread is still running. Execution aborted.\");\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(Level.INFO, \"Started \"+name);\n                    long startTime = System.currentTimeMillis();\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        l.closeQuietly();\n                    }\n\n                    logger.log(Level.INFO, \"Finished \"+name+\". \"+\n                        (System.currentTimeMillis()-startTime)+\" ms\");\n                }\n            },name+\" thread\");\n            thread.start();\n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","realPath":"core/src/main/java/hudson/model/AsyncPeriodicWork.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"}],"commitId":"8d74b3cd5e7c2eaa5e2e6328edbb6403168bf4aa","commitMessage":"@@@Added logging level methods to AsyncPeriodicWork.\n","date":"2014-02-03 23:24:17","modifiedFileCount":"1","status":"M","submitter":"boev"},{"authorTime":"2014-05-15 18:48:37","codes":[{"authorDate":"2012-04-13 05:36:11","commitOrder":7,"curCode":"    public final void doAperiodicRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(Level.INFO, name+\" thread is still running. Execution aborted.\");\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(Level.INFO, \"Started \"+name);\n                    long startTime = System.currentTimeMillis();\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        l.closeQuietly();\n                    }\n\n                    logger.log(Level.INFO, \"Finished \"+name+\". \"+\n                        (System.currentTimeMillis()-startTime)+\" ms\");\n                }\n            },name+\" thread\");\n            thread.start(); \n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","date":"2012-04-13 05:41:17","endLine":93,"groupId":"4055","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doAperiodicRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f4/6dd33b61d835eec945fec60f76975809d9c3de.src","preCode":"    public final void doAperiodicRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(Level.INFO, name+\" thread is still running. Execution aborted.\");\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(Level.INFO, \"Started \"+name);\n                    long startTime = System.currentTimeMillis();\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        l.closeQuietly();\n                    }\n\n                    logger.log(Level.INFO, \"Finished \"+name+\". \"+\n                        (System.currentTimeMillis()-startTime)+\" ms\");\n                }\n            },name+\" thread\");\n            thread.start(); \n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","realPath":"core/src/main/java/hudson/model/AsyncAperiodicWork.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2014-05-15 18:48:37","commitOrder":7,"curCode":"    public final void doRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(this.getSlowLoggingLevel(), \"{0} thread is still running. Execution aborted.\", name);\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(getNormalLoggingLevel(), \"Started {0}\", name);\n                    long startTime = System.currentTimeMillis();\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        l.closeQuietly();\n                    }\n\n                    logger.log(getNormalLoggingLevel(), \"Finished {0}. {1,number} ms\",\n                            new Object[]{name, (System.currentTimeMillis()-startTime)});\n                }\n            },name+\" thread\");\n            thread.start();\n        } catch (Throwable t) {\n            LogRecord lr = new LogRecord(this.getErrorLoggingLevel(), \"{0} thread failed with error\");\n            lr.setThrown(t);\n            lr.setParameters(new Object[]{name});\n            logger.log(lr);\n        }\n    }\n","date":"2014-05-15 18:48:37","endLine":74,"groupId":"6085","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/3a/02b56b0d5e20bad10e924c81d626e059dd2972.src","preCode":"    public final void doRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(this.getNormalLoggingLevel(), name+\" thread is still running. Execution aborted.\");\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(getNormalLoggingLevel(), \"Started \"+name);\n                    long startTime = System.currentTimeMillis();\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        l.closeQuietly();\n                    }\n\n                    logger.log(getNormalLoggingLevel(), \"Finished \"+name+\". \"+\n                        (System.currentTimeMillis()-startTime)+\" ms\");\n                }\n            },name+\" thread\");\n            thread.start();\n        } catch (Throwable t) {\n            logger.log(this.getErrorLoggingLevel(), name+\" thread failed with error\", t);\n        }\n    }\n","realPath":"core/src/main/java/hudson/model/AsyncPeriodicWork.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"}],"commitId":"1a4e83124ea59e71e376a9a10e4ce46e3c3dfa87","commitMessage":"@@@Use logging API correctly and introduce the ability to differentiate between the logging level for task execution taking too long\n","date":"2014-05-15 18:48:37","modifiedFileCount":"1","status":"M","submitter":"Stephen Connolly"},{"authorTime":"2016-02-25 17:33:48","codes":[{"authorDate":"2016-02-25 17:33:48","commitOrder":8,"curCode":"    public final void doAperiodicRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(getSlowLoggingLevel(), \"{0} thread is still running. Execution aborted.\", name);\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(getNormalLoggingLevel(), \"Started {0}\", name);\n                    long startTime = System.currentTimeMillis();\n                    long stopTime;\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        l.getLogger().printf(\"Started at %tc%n\", new Date(startTime));\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        stopTime = System.currentTimeMillis();\n                        try {\n                            l.getLogger().printf(\"Finished at %tc. %dms%n\", new Date(stopTime), stopTime - startTime);\n                        } finally {\n                            l.closeQuietly();\n                        }\n                    }\n\n                    logger.log(getNormalLoggingLevel(), \"Finished {0}. {1,number} ms\",\n                            new Object[]{name, stopTime - startTime});\n                }\n            },name+\" thread\");\n            thread.start(); \n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","date":"2016-02-25 17:33:48","endLine":141,"groupId":"9394","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doAperiodicRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/85/87f925c361e010ed118e2a1b9f663f9965faf1.src","preCode":"    public final void doAperiodicRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(Level.INFO, name+\" thread is still running. Execution aborted.\");\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(Level.INFO, \"Started \"+name);\n                    long startTime = System.currentTimeMillis();\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        l.closeQuietly();\n                    }\n\n                    logger.log(Level.INFO, \"Finished \"+name+\". \"+\n                        (System.currentTimeMillis()-startTime)+\" ms\");\n                }\n            },name+\" thread\");\n            thread.start(); \n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","realPath":"core/src/main/java/hudson/model/AsyncAperiodicWork.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2016-02-25 17:33:48","commitOrder":8,"curCode":"    public final void doRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(this.getSlowLoggingLevel(), \"{0} thread is still running. Execution aborted.\", name);\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(getNormalLoggingLevel(), \"Started {0}\", name);\n                    long startTime = System.currentTimeMillis();\n                    long stopTime;\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        l.getLogger().printf(\"Started at %tc%n\", new Date(startTime));\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        stopTime = System.currentTimeMillis();\n                        try {\n                            l.getLogger().printf(\"Finished at %tc. %dms%n\", new Date(stopTime), stopTime - startTime);\n                        } finally {\n                            l.closeQuietly();\n                        }\n                    }\n\n                    logger.log(getNormalLoggingLevel(), \"Finished {0}. {1,number} ms\",\n                            new Object[]{name, stopTime - startTime});\n                }\n            },name+\" thread\");\n            thread.start();\n        } catch (Throwable t) {\n            LogRecord lr = new LogRecord(this.getErrorLoggingLevel(), \"{0} thread failed with error\");\n            lr.setThrown(t);\n            lr.setParameters(new Object[]{name});\n            logger.log(lr);\n        }\n    }\n","date":"2016-02-25 17:33:48","endLine":124,"groupId":"9394","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/39/2f90abcb7d2ab06c2ebdcac2df18bd8b1cc9ad.src","preCode":"    public final void doRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(this.getSlowLoggingLevel(), \"{0} thread is still running. Execution aborted.\", name);\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(getNormalLoggingLevel(), \"Started {0}\", name);\n                    long startTime = System.currentTimeMillis();\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        l.closeQuietly();\n                    }\n\n                    logger.log(getNormalLoggingLevel(), \"Finished {0}. {1,number} ms\",\n                            new Object[]{name, (System.currentTimeMillis()-startTime)});\n                }\n            },name+\" thread\");\n            thread.start();\n        } catch (Throwable t) {\n            LogRecord lr = new LogRecord(this.getErrorLoggingLevel(), \"{0} thread failed with error\");\n            lr.setThrown(t);\n            lr.setParameters(new Object[]{name});\n            logger.log(lr);\n        }\n    }\n","realPath":"core/src/main/java/hudson/model/AsyncPeriodicWork.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"c6b2d011c400fda77cedcde643e09b979638940b","commitMessage":"@@@Merge pull request #2047 from stephenc/jenkins-33068\n\n[JENKINS-33068] AsyncPeriodicWork/AsyncAperiodicWork log files rotation","date":"2016-02-25 17:33:48","modifiedFileCount":"3","status":"M","submitter":"Stephen Connolly"},{"authorTime":"2017-01-30 22:20:32","codes":[{"authorDate":"2017-01-30 22:20:32","commitOrder":9,"curCode":"    public final void doAperiodicRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(getSlowLoggingLevel(), \"{0} thread is still running. Execution aborted.\", name);\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(getNormalLoggingLevel(), \"Started {0}\", name);\n                    long startTime = System.currentTimeMillis();\n                    long stopTime;\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        l.getLogger().printf(\"Started at %tc%n\", new Date(startTime));\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        Functions.printStackTrace(e, l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        Functions.printStackTrace(e, l.fatalError(\"aborted\"));\n                    } finally {\n                        stopTime = System.currentTimeMillis();\n                        try {\n                            l.getLogger().printf(\"Finished at %tc. %dms%n\", new Date(stopTime), stopTime - startTime);\n                        } finally {\n                            l.closeQuietly();\n                        }\n                    }\n\n                    logger.log(getNormalLoggingLevel(), \"Finished {0}. {1,number} ms\",\n                            new Object[]{name, stopTime - startTime});\n                }\n            },name+\" thread\");\n            thread.start(); \n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","date":"2017-01-30 22:20:32","endLine":143,"groupId":"3983","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"doAperiodicRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/1d/295fa7161db0abcdaffbb957773954b2ec7307.src","preCode":"    public final void doAperiodicRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(getSlowLoggingLevel(), \"{0} thread is still running. Execution aborted.\", name);\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(getNormalLoggingLevel(), \"Started {0}\", name);\n                    long startTime = System.currentTimeMillis();\n                    long stopTime;\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        l.getLogger().printf(\"Started at %tc%n\", new Date(startTime));\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        stopTime = System.currentTimeMillis();\n                        try {\n                            l.getLogger().printf(\"Finished at %tc. %dms%n\", new Date(stopTime), stopTime - startTime);\n                        } finally {\n                            l.closeQuietly();\n                        }\n                    }\n\n                    logger.log(getNormalLoggingLevel(), \"Finished {0}. {1,number} ms\",\n                            new Object[]{name, stopTime - startTime});\n                }\n            },name+\" thread\");\n            thread.start(); \n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","realPath":"core/src/main/java/hudson/model/AsyncAperiodicWork.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2017-01-30 22:20:32","commitOrder":9,"curCode":"    public final void doRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(this.getSlowLoggingLevel(), \"{0} thread is still running. Execution aborted.\", name);\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(getNormalLoggingLevel(), \"Started {0}\", name);\n                    long startTime = System.currentTimeMillis();\n                    long stopTime;\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        l.getLogger().printf(\"Started at %tc%n\", new Date(startTime));\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        Functions.printStackTrace(e, l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        Functions.printStackTrace(e, l.fatalError(\"aborted\"));\n                    } finally {\n                        stopTime = System.currentTimeMillis();\n                        try {\n                            l.getLogger().printf(\"Finished at %tc. %dms%n\", new Date(stopTime), stopTime - startTime);\n                        } finally {\n                            l.closeQuietly();\n                        }\n                    }\n\n                    logger.log(getNormalLoggingLevel(), \"Finished {0}. {1,number} ms\",\n                            new Object[]{name, stopTime - startTime});\n                }\n            },name+\" thread\");\n            thread.start();\n        } catch (Throwable t) {\n            LogRecord lr = new LogRecord(this.getErrorLoggingLevel(), \"{0} thread failed with error\");\n            lr.setThrown(t);\n            lr.setParameters(new Object[]{name});\n            logger.log(lr);\n        }\n    }\n","date":"2017-01-30 22:20:32","endLine":126,"groupId":"3983","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"doRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f3/ffcc64976a4fa0cbe9892f8c19a3d21a364c1b.src","preCode":"    public final void doRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(this.getSlowLoggingLevel(), \"{0} thread is still running. Execution aborted.\", name);\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(getNormalLoggingLevel(), \"Started {0}\", name);\n                    long startTime = System.currentTimeMillis();\n                    long stopTime;\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        l.getLogger().printf(\"Started at %tc%n\", new Date(startTime));\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        e.printStackTrace(l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        e.printStackTrace(l.fatalError(\"aborted\"));\n                    } finally {\n                        stopTime = System.currentTimeMillis();\n                        try {\n                            l.getLogger().printf(\"Finished at %tc. %dms%n\", new Date(stopTime), stopTime - startTime);\n                        } finally {\n                            l.closeQuietly();\n                        }\n                    }\n\n                    logger.log(getNormalLoggingLevel(), \"Finished {0}. {1,number} ms\",\n                            new Object[]{name, stopTime - startTime});\n                }\n            },name+\" thread\");\n            thread.start();\n        } catch (Throwable t) {\n            LogRecord lr = new LogRecord(this.getErrorLoggingLevel(), \"{0} thread failed with error\");\n            lr.setThrown(t);\n            lr.setParameters(new Object[]{name});\n            logger.log(lr);\n        }\n    }\n","realPath":"core/src/main/java/hudson/model/AsyncPeriodicWork.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"8b2f795dc8fa4cb9c8d3e1faf1f2a735802873e0","commitMessage":"@@@Merge commit 'e612721e0bab49af3965a8c7761b9596ab4a4964' into security-master\n","date":"2017-01-30 22:20:32","modifiedFileCount":"35","status":"M","submitter":"Jesse Glick"},{"authorTime":"2019-10-23 05:57:49","codes":[{"authorDate":"2019-10-23 05:57:49","commitOrder":10,"curCode":"    public final void doAperiodicRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(getSlowLoggingLevel(), \"{0} thread is still running. Execution aborted.\", name);\n                return;\n            }\n            thread = new Thread(() -> {\n                logger.log(getNormalLoggingLevel(), \"Started {0}\", name);\n                long startTime = System.currentTimeMillis();\n                long stopTime;\n\n                StreamTaskListener l = createListener();\n                try (ACLContext ctx = ACL.as(ACL.SYSTEM)) {\n                    l.getLogger().printf(\"Started at %tc%n\", new Date(startTime));\n                        execute(l);\n                } catch (IOException e) {\n                    Functions.printStackTrace(e, l.fatalError(e.getMessage()));\n                } catch (InterruptedException e) {\n                    Functions.printStackTrace(e, l.fatalError(\"aborted\"));\n                } finally {\n                    stopTime = System.currentTimeMillis();\n                    try {\n                        l.getLogger().printf(\"Finished at %tc. %dms%n\", new Date(stopTime), stopTime - startTime);\n                    } finally {\n                        l.closeQuietly();\n                    }\n                }\n\n                logger.log(getNormalLoggingLevel(), \"Finished {0}. {1,number} ms\",\n                        new Object[]{name, stopTime - startTime});\n            },name+\" thread\");\n            thread.start(); \n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","date":"2019-10-23 05:57:49","endLine":140,"groupId":"17","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"doAperiodicRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/80/4f12b4a4edb03699c9cad1bc26ffcb39075067.src","preCode":"    public final void doAperiodicRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(getSlowLoggingLevel(), \"{0} thread is still running. Execution aborted.\", name);\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(getNormalLoggingLevel(), \"Started {0}\", name);\n                    long startTime = System.currentTimeMillis();\n                    long stopTime;\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        l.getLogger().printf(\"Started at %tc%n\", new Date(startTime));\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        Functions.printStackTrace(e, l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        Functions.printStackTrace(e, l.fatalError(\"aborted\"));\n                    } finally {\n                        stopTime = System.currentTimeMillis();\n                        try {\n                            l.getLogger().printf(\"Finished at %tc. %dms%n\", new Date(stopTime), stopTime - startTime);\n                        } finally {\n                            l.closeQuietly();\n                        }\n                    }\n\n                    logger.log(getNormalLoggingLevel(), \"Finished {0}. {1,number} ms\",\n                            new Object[]{name, stopTime - startTime});\n                }\n            },name+\" thread\");\n            thread.start(); \n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","realPath":"core/src/main/java/hudson/model/AsyncAperiodicWork.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2019-10-23 05:57:49","commitOrder":10,"curCode":"    public final void doRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(this.getSlowLoggingLevel(), \"{0} thread is still running. Execution aborted.\", name);\n                return;\n            }\n            thread = new Thread(() -> {\n                logger.log(getNormalLoggingLevel(), \"Started {0}\", name);\n                long startTime = System.currentTimeMillis();\n                long stopTime;\n\n                StreamTaskListener l = createListener();\n                try {\n                    l.getLogger().printf(\"Started at %tc%n\", new Date(startTime));\n                    try (ACLContext ctx = ACL.as(ACL.SYSTEM)) {\n                        execute(l);\n                    }\n                } catch (IOException e) {\n                    Functions.printStackTrace(e, l.fatalError(e.getMessage()));\n                } catch (InterruptedException e) {\n                    Functions.printStackTrace(e, l.fatalError(\"aborted\"));\n                } finally {\n                    stopTime = System.currentTimeMillis();\n                    try {\n                        l.getLogger().printf(\"Finished at %tc. %dms%n\", new Date(stopTime), stopTime - startTime);\n                    } finally {\n                        l.closeQuietly();\n                    }\n                }\n\n                logger.log(getNormalLoggingLevel(), \"Finished {0}. {1,number} ms\",\n                        new Object[]{name, stopTime - startTime});\n            },name+\" thread\");\n            thread.start();\n        } catch (Throwable t) {\n            LogRecord lr = new LogRecord(this.getErrorLoggingLevel(), \"{0} thread failed with error\");\n            lr.setThrown(t);\n            lr.setParameters(new Object[]{name});\n            logger.log(lr);\n        }\n    }\n","date":"2019-10-23 05:57:49","endLine":125,"groupId":"6274","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"doRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e4/560d9d0c2606ef9ef5d5710226c121dfe0f1fc.src","preCode":"    public final void doRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(this.getSlowLoggingLevel(), \"{0} thread is still running. Execution aborted.\", name);\n                return;\n            }\n            thread = new Thread(new Runnable() {\n                public void run() {\n                    logger.log(getNormalLoggingLevel(), \"Started {0}\", name);\n                    long startTime = System.currentTimeMillis();\n                    long stopTime;\n\n                    StreamTaskListener l = createListener();\n                    try {\n                        l.getLogger().printf(\"Started at %tc%n\", new Date(startTime));\n                        ACL.impersonate(ACL.SYSTEM);\n\n                        execute(l);\n                    } catch (IOException e) {\n                        Functions.printStackTrace(e, l.fatalError(e.getMessage()));\n                    } catch (InterruptedException e) {\n                        Functions.printStackTrace(e, l.fatalError(\"aborted\"));\n                    } finally {\n                        stopTime = System.currentTimeMillis();\n                        try {\n                            l.getLogger().printf(\"Finished at %tc. %dms%n\", new Date(stopTime), stopTime - startTime);\n                        } finally {\n                            l.closeQuietly();\n                        }\n                    }\n\n                    logger.log(getNormalLoggingLevel(), \"Finished {0}. {1,number} ms\",\n                            new Object[]{name, stopTime - startTime});\n                }\n            },name+\" thread\");\n            thread.start();\n        } catch (Throwable t) {\n            LogRecord lr = new LogRecord(this.getErrorLoggingLevel(), \"{0} thread failed with error\");\n            lr.setThrown(t);\n            lr.setParameters(new Object[]{name});\n            logger.log(lr);\n        }\n    }\n","realPath":"core/src/main/java/hudson/model/AsyncPeriodicWork.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"06f4c89121533fd669a102c97b514534ef1ebcb7","commitMessage":"@@@Replace ACL.impersonate with ACL.as (#4253)\n\n* Replace ACL.impersonate with ACL.as\n\n* Fix based on suggestions\n\n* :facepalm: accidentally removed a line\n","date":"2019-10-23 05:57:49","modifiedFileCount":"14","status":"M","submitter":"Raihaan Shouhell"},{"authorTime":"2020-11-07 02:30:25","codes":[{"authorDate":"2020-11-07 02:30:25","commitOrder":11,"curCode":"    public final void doAperiodicRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(getSlowLoggingLevel(), \"{0} thread is still running. Execution aborted.\", name);\n                return;\n            }\n            thread = new Thread(() -> {\n                logger.log(getNormalLoggingLevel(), \"Started {0}\", name);\n                long startTime = System.currentTimeMillis();\n                long stopTime;\n\n                StreamTaskListener l = createListener();\n                try (ACLContext ctx = ACL.as2(ACL.SYSTEM2)) {\n                    l.getLogger().printf(\"Started at %tc%n\", new Date(startTime));\n                        execute(l);\n                } catch (IOException e) {\n                    Functions.printStackTrace(e, l.fatalError(e.getMessage()));\n                } catch (InterruptedException e) {\n                    Functions.printStackTrace(e, l.fatalError(\"aborted\"));\n                } finally {\n                    stopTime = System.currentTimeMillis();\n                    try {\n                        l.getLogger().printf(\"Finished at %tc. %dms%n\", new Date(stopTime), stopTime - startTime);\n                    } finally {\n                        l.closeQuietly();\n                    }\n                }\n\n                logger.log(getNormalLoggingLevel(), \"Finished {0}. {1,number} ms\",\n                        new Object[]{name, stopTime - startTime});\n            },name+\" thread\");\n            thread.start(); \n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","date":"2020-11-07 02:30:25","endLine":140,"groupId":"101016","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"doAperiodicRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/b9/b705d8bc0bcddc652a5280aadd0bb03d407259.src","preCode":"    public final void doAperiodicRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(getSlowLoggingLevel(), \"{0} thread is still running. Execution aborted.\", name);\n                return;\n            }\n            thread = new Thread(() -> {\n                logger.log(getNormalLoggingLevel(), \"Started {0}\", name);\n                long startTime = System.currentTimeMillis();\n                long stopTime;\n\n                StreamTaskListener l = createListener();\n                try (ACLContext ctx = ACL.as(ACL.SYSTEM)) {\n                    l.getLogger().printf(\"Started at %tc%n\", new Date(startTime));\n                        execute(l);\n                } catch (IOException e) {\n                    Functions.printStackTrace(e, l.fatalError(e.getMessage()));\n                } catch (InterruptedException e) {\n                    Functions.printStackTrace(e, l.fatalError(\"aborted\"));\n                } finally {\n                    stopTime = System.currentTimeMillis();\n                    try {\n                        l.getLogger().printf(\"Finished at %tc. %dms%n\", new Date(stopTime), stopTime - startTime);\n                    } finally {\n                        l.closeQuietly();\n                    }\n                }\n\n                logger.log(getNormalLoggingLevel(), \"Finished {0}. {1,number} ms\",\n                        new Object[]{name, stopTime - startTime});\n            },name+\" thread\");\n            thread.start(); \n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, name+\" thread failed with error\", t);\n        }\n    }\n","realPath":"core/src/main/java/hudson/model/AsyncAperiodicWork.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2020-11-07 02:30:25","commitOrder":11,"curCode":"    public final void doRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(this.getSlowLoggingLevel(), \"{0} thread is still running. Execution aborted.\", name);\n                return;\n            }\n            thread = new Thread(() -> {\n                logger.log(getNormalLoggingLevel(), \"Started {0}\", name);\n                long startTime = System.currentTimeMillis();\n                long stopTime;\n\n                StreamTaskListener l = createListener();\n                try {\n                    l.getLogger().printf(\"Started at %tc%n\", new Date(startTime));\n                    try (ACLContext ctx = ACL.as2(ACL.SYSTEM2)) {\n                        execute(l);\n                    }\n                } catch (IOException e) {\n                    Functions.printStackTrace(e, l.fatalError(e.getMessage()));\n                } catch (InterruptedException e) {\n                    Functions.printStackTrace(e, l.fatalError(\"aborted\"));\n                } finally {\n                    stopTime = System.currentTimeMillis();\n                    try {\n                        l.getLogger().printf(\"Finished at %tc. %dms%n\", new Date(stopTime), stopTime - startTime);\n                    } finally {\n                        l.closeQuietly();\n                    }\n                }\n\n                logger.log(getNormalLoggingLevel(), \"Finished {0}. {1,number} ms\",\n                        new Object[]{name, stopTime - startTime});\n            },name+\" thread\");\n            thread.start();\n        } catch (Throwable t) {\n            LogRecord lr = new LogRecord(this.getErrorLoggingLevel(), \"{0} thread failed with error\");\n            lr.setThrown(t);\n            lr.setParameters(new Object[]{name});\n            logger.log(lr);\n        }\n    }\n","date":"2020-11-07 02:30:25","endLine":125,"groupId":"101016","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"doRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/c0/ae6eb5c18f0963cf1bc3b5818d96de780194fd.src","preCode":"    public final void doRun() {\n        try {\n            if(thread!=null && thread.isAlive()) {\n                logger.log(this.getSlowLoggingLevel(), \"{0} thread is still running. Execution aborted.\", name);\n                return;\n            }\n            thread = new Thread(() -> {\n                logger.log(getNormalLoggingLevel(), \"Started {0}\", name);\n                long startTime = System.currentTimeMillis();\n                long stopTime;\n\n                StreamTaskListener l = createListener();\n                try {\n                    l.getLogger().printf(\"Started at %tc%n\", new Date(startTime));\n                    try (ACLContext ctx = ACL.as(ACL.SYSTEM)) {\n                        execute(l);\n                    }\n                } catch (IOException e) {\n                    Functions.printStackTrace(e, l.fatalError(e.getMessage()));\n                } catch (InterruptedException e) {\n                    Functions.printStackTrace(e, l.fatalError(\"aborted\"));\n                } finally {\n                    stopTime = System.currentTimeMillis();\n                    try {\n                        l.getLogger().printf(\"Finished at %tc. %dms%n\", new Date(stopTime), stopTime - startTime);\n                    } finally {\n                        l.closeQuietly();\n                    }\n                }\n\n                logger.log(getNormalLoggingLevel(), \"Finished {0}. {1,number} ms\",\n                        new Object[]{name, stopTime - startTime});\n            },name+\" thread\");\n            thread.start();\n        } catch (Throwable t) {\n            LogRecord lr = new LogRecord(this.getErrorLoggingLevel(), \"{0} thread failed with error\");\n            lr.setThrown(t);\n            lr.setParameters(new Object[]{name});\n            logger.log(lr);\n        }\n    }\n","realPath":"core/src/main/java/hudson/model/AsyncPeriodicWork.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"a9ca5ef3d4c97937636bf3c585f4232514279b14","commitMessage":"@@@[JEP-227] Replace Acegi Security with Spring Security & upgrade Spring Framework (#4848)\n\nReplacing Acegi Security with Spring Security\n\nCo-authored-by: Tim Jacomb <timjacomb1+github@gmail.com>\nCo-authored-by: James Nord <jtnord@users.noreply.github.com>","date":"2020-11-07 02:30:25","modifiedFileCount":"149","status":"M","submitter":"Jesse Glick"}]
