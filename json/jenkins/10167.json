[{"authorTime":"2016-07-20 20:30:09","codes":[{"authorDate":"2016-05-12 02:46:30","commitOrder":2,"curCode":"    public void disconnectNodeManyShouldFailIfANodeDoesNotExist() throws Exception {\n        DumbSlave slave1 = j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 = j.createSlave(\"aNode2\", \"\", null);\n        slave1.toComputer().waitUntilOnline();\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), equalTo(null));\n        slave2.toComputer().waitUntilOnline();\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"never_created\", \"-m\", \"aCause\");\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such agent \\\"never_created\\\" exists. Did you mean \\\"aNode1\\\"?\"));\n        assertThat(result.stderr(), containsString(\"ERROR: Error occured while performing this command, see previous stderr output.\"));\n        assertThat(slave1.toComputer().isOffline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n        assertThat(slave2.toComputer().isOffline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave2.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n    }\n","date":"2016-05-12 02:46:30","endLine":243,"groupId":"482","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"disconnectNodeManyShouldFailIfANodeDoesNotExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/85/8a3c9ec0d799c3fde276eff42c9aced40dfd6c.src","preCode":"    public void disconnectNodeManyShouldFailIfANodeDoesNotExist() throws Exception {\n        DumbSlave slave1 = j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 = j.createSlave(\"aNode2\", \"\", null);\n        slave1.toComputer().waitUntilOnline();\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), equalTo(null));\n        slave2.toComputer().waitUntilOnline();\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"never_created\", \"-m\", \"aCause\");\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such agent \\\"never_created\\\" exists. Did you mean \\\"aNode1\\\"?\"));\n        assertThat(result.stderr(), containsString(\"ERROR: Error occured while performing this command, see previous stderr output.\"));\n        assertThat(slave1.toComputer().isOffline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n        assertThat(slave2.toComputer().isOffline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave2.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/DisconnectNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"NB"},{"authorDate":"2016-07-20 20:30:09","commitOrder":2,"curCode":"    public void offlineNodeManyShouldFailIfANodeDoesNotExistWithCause() throws Exception {\n        DumbSlave slave1 = j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 = j.createSlave(\"aNode2\", \"\", null);\n        slave1.toComputer().waitUntilOnline();\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), equalTo(null));\n        slave2.toComputer().waitUntilOnline();\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"never_created\", \"-m\", \"aCause\");\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such agent \\\"never_created\\\" exists. Did you mean \\\"aNode1\\\"?\"));\n        assertThat(result.stderr(), containsString(\"ERROR: Error occured while performing this command, see previous stderr output.\"));\n        assertThat(slave1.toComputer().isOffline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n        assertThat(slave2.toComputer().isOffline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave2.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n    }\n","date":"2016-07-20 20:30:09","endLine":407,"groupId":"482","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"offlineNodeManyShouldFailIfANodeDoesNotExistWithCause","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/a1/623f853b5190d376ae61aa2a07f6d5cfcd2c9d.src","preCode":"    public void offlineNodeManyShouldFailIfANodeDoesNotExistWithCause() throws Exception {\n        DumbSlave slave1 = j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 = j.createSlave(\"aNode2\", \"\", null);\n        slave1.toComputer().waitUntilOnline();\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), equalTo(null));\n        slave2.toComputer().waitUntilOnline();\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"never_created\", \"-m\", \"aCause\");\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such agent \\\"never_created\\\" exists. Did you mean \\\"aNode1\\\"?\"));\n        assertThat(result.stderr(), containsString(\"ERROR: Error occured while performing this command, see previous stderr output.\"));\n        assertThat(slave1.toComputer().isOffline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n        assertThat(slave2.toComputer().isOffline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave2.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/OfflineNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"B"}],"commitId":"fb7458f2e6acbe955fbb4b8f0afd9d352d839181","commitMessage":"@@@[JENKINS-34468] CLI command offline-node extracted from core to CLI (#2392)\n\n* [JENKINS-34468] CLI command offline-node extracted from core to CLI\n\noffline-node extended to accept multiple node names\noffline-node covered by test-cases\n\n* Fixed translation properties\n\n* Fixes based on Oleg's comments\n\n* Fixed HelpCommandTest test-case\n\n* Minor fixes\n\n* Uses Matchers.instanceOf everywhere instead of Java operator instanceof\n","date":"2016-07-20 20:30:09","modifiedFileCount":"2","status":"M","submitter":"Pavel Janousek"},{"authorTime":"2016-10-15 23:34:12","codes":[{"authorDate":"2016-10-15 23:34:12","commitOrder":3,"curCode":"    public void disconnectNodeManyShouldFailIfANodeDoesNotExist() throws Exception {\n        DumbSlave slave1 = j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 = j.createSlave(\"aNode2\", \"\", null);\n        slave1.toComputer().waitUntilOnline();\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), equalTo(null));\n        slave2.toComputer().waitUntilOnline();\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"never_created\", \"-m\", \"aCause\");\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such agent \\\"never_created\\\" exists. Did you mean \\\"aNode1\\\"?\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n        assertThat(slave1.toComputer().isOffline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n        assertThat(slave2.toComputer().isOffline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave2.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n    }\n","date":"2016-10-15 23:34:12","endLine":243,"groupId":"10167","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"disconnectNodeManyShouldFailIfANodeDoesNotExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/53/4ef0f0b0122bc9bd5e35f0a29a57fe5f01ab04.src","preCode":"    public void disconnectNodeManyShouldFailIfANodeDoesNotExist() throws Exception {\n        DumbSlave slave1 = j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 = j.createSlave(\"aNode2\", \"\", null);\n        slave1.toComputer().waitUntilOnline();\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), equalTo(null));\n        slave2.toComputer().waitUntilOnline();\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"never_created\", \"-m\", \"aCause\");\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such agent \\\"never_created\\\" exists. Did you mean \\\"aNode1\\\"?\"));\n        assertThat(result.stderr(), containsString(\"ERROR: Error occured while performing this command, see previous stderr output.\"));\n        assertThat(slave1.toComputer().isOffline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n        assertThat(slave2.toComputer().isOffline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave2.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/DisconnectNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"},{"authorDate":"2016-10-15 23:34:12","commitOrder":3,"curCode":"    public void offlineNodeManyShouldFailIfANodeDoesNotExistWithCause() throws Exception {\n        DumbSlave slave1 = j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 = j.createSlave(\"aNode2\", \"\", null);\n        slave1.toComputer().waitUntilOnline();\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), equalTo(null));\n        slave2.toComputer().waitUntilOnline();\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"never_created\", \"-m\", \"aCause\");\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such agent \\\"never_created\\\" exists. Did you mean \\\"aNode1\\\"?\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n        assertThat(slave1.toComputer().isOffline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n        assertThat(slave2.toComputer().isOffline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave2.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n    }\n","date":"2016-10-15 23:34:12","endLine":407,"groupId":"10167","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"offlineNodeManyShouldFailIfANodeDoesNotExistWithCause","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/0d/ae4a56576469fb2172b56d38d5560e267e40cc.src","preCode":"    public void offlineNodeManyShouldFailIfANodeDoesNotExistWithCause() throws Exception {\n        DumbSlave slave1 = j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 = j.createSlave(\"aNode2\", \"\", null);\n        slave1.toComputer().waitUntilOnline();\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), equalTo(null));\n        slave2.toComputer().waitUntilOnline();\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"never_created\", \"-m\", \"aCause\");\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such agent \\\"never_created\\\" exists. Did you mean \\\"aNode1\\\"?\"));\n        assertThat(result.stderr(), containsString(\"ERROR: Error occured while performing this command, see previous stderr output.\"));\n        assertThat(slave1.toComputer().isOffline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n        assertThat(slave2.toComputer().isOffline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave2.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/OfflineNodeCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"}],"commitId":"b50034c9bffb704acfce0bc49d99855b689eace6","commitMessage":"@@@[FIXED JENKINS-38650] - Cleanup spelling in CLi commands + Javadoc updates (#2571)\n\n* [FIXED JENKINS-38650] - Cleanup spelling in CLi commands.\n\nAlso adds some javadoc and since definitions.\n\n* [JENKINS-38650] - Move common warning message to the constant\n\n* [JENKINS-38650] - DeleteViewCommand should also use the constant string\n\n* [JENKINS-38650] - Rename the constant in order to make the name more explicit\n","date":"2016-10-15 23:34:12","modifiedFileCount":"23","status":"M","submitter":"Oleg Nenashev"}]
