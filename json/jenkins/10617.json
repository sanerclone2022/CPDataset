[{"authorTime":"2017-12-17 21:26:51","codes":[{"authorDate":"2017-12-17 21:26:51","commitOrder":1,"curCode":"    public void upgradeFromJenkins1() throws IOException {\n        VersionNumber since = new VersionNumber(\"1.550\");\n        rr.then(r -> {\n            List<DetachedPlugin> detachedPlugins = ClassicPluginStrategy.getDetachedPlugins(since);\n            assertThat(\"Plugins have been detached since the pre-upgrade version\",\n                    detachedPlugins.size(), greaterThan(4));\n            assertThat(\"Plugins detached between the pre-upgrade version and the current version should be installed\",\n                    getInstalledDetachedPlugins(r, detachedPlugins).size(), equalTo(detachedPlugins.size()));\n            assertNoFailedPlugins(r);\n        });\n    }\n","date":"2017-12-17 21:26:51","endLine":67,"groupId":"437","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"upgradeFromJenkins1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ee/cc1e2b4909e631705950c0abe0d4f0a42e4c88.src","preCode":"    public void upgradeFromJenkins1() throws IOException {\n        VersionNumber since = new VersionNumber(\"1.550\");\n        rr.then(r -> {\n            List<DetachedPlugin> detachedPlugins = ClassicPluginStrategy.getDetachedPlugins(since);\n            assertThat(\"Plugins have been detached since the pre-upgrade version\",\n                    detachedPlugins.size(), greaterThan(4));\n            assertThat(\"Plugins detached between the pre-upgrade version and the current version should be installed\",\n                    getInstalledDetachedPlugins(r, detachedPlugins).size(), equalTo(detachedPlugins.size()));\n            assertNoFailedPlugins(r);\n        });\n    }\n","realPath":"test/src/test/java/jenkins/install/LoadDetachedPluginsTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"},{"authorDate":"2017-12-17 21:26:51","commitOrder":1,"curCode":"    public void upgradeFromJenkins2() {\n        VersionNumber since = new VersionNumber(\"2.0\");\n        rr.then(r -> {\n            List<DetachedPlugin> detachedPlugins = ClassicPluginStrategy.getDetachedPlugins(since);\n            assertThat(\"Plugins have been detached since the pre-upgrade version\",\n                    detachedPlugins.size(), greaterThan(1));\n            assertThat(\"Plugins detached between the pre-upgrade version and the current version should be installed\",\n                    getInstalledDetachedPlugins(r, detachedPlugins).size(), equalTo(detachedPlugins.size()));\n            assertNoFailedPlugins(r);\n        });\n    }\n","date":"2017-12-17 21:26:51","endLine":82,"groupId":"437","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"upgradeFromJenkins2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ee/cc1e2b4909e631705950c0abe0d4f0a42e4c88.src","preCode":"    public void upgradeFromJenkins2() {\n        VersionNumber since = new VersionNumber(\"2.0\");\n        rr.then(r -> {\n            List<DetachedPlugin> detachedPlugins = ClassicPluginStrategy.getDetachedPlugins(since);\n            assertThat(\"Plugins have been detached since the pre-upgrade version\",\n                    detachedPlugins.size(), greaterThan(1));\n            assertThat(\"Plugins detached between the pre-upgrade version and the current version should be installed\",\n                    getInstalledDetachedPlugins(r, detachedPlugins).size(), equalTo(detachedPlugins.size()));\n            assertNoFailedPlugins(r);\n        });\n    }\n","realPath":"test/src/test/java/jenkins/install/LoadDetachedPluginsTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"}],"commitId":"968b6adf007523ca7726e8161be65c9753c4df43","commitMessage":"@@@Merge pull request #3193 from dwnusbaum/JENKINS-48365\n\n[JENKINS-48365] Install detached plugins when upgrading Jenkins past the version the plugins were detached","date":"2017-12-17 21:26:51","modifiedFileCount":"3","status":"B","submitter":"Oleg Nenashev"},{"authorTime":"2019-02-03 17:56:26","codes":[{"authorDate":"2019-02-03 17:56:26","commitOrder":2,"curCode":"    public void upgradeFromJenkins1() throws IOException {\n        VersionNumber since = new VersionNumber(\"1.550\");\n        rr.then(r -> {\n            List<DetachedPlugin> detachedPlugins = DetachedPluginsUtil.getDetachedPlugins(since);\n            assertThat(\"Plugins have been detached since the pre-upgrade version\",\n                    detachedPlugins.size(), greaterThan(4));\n            assertThat(\"Plugins detached between the pre-upgrade version and the current version should be installed\",\n                    getInstalledDetachedPlugins(r, detachedPlugins).size(), equalTo(detachedPlugins.size()));\n            assertNoFailedPlugins(r);\n        });\n    }\n","date":"2019-02-03 17:56:26","endLine":73,"groupId":"10617","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"upgradeFromJenkins1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/2c/181cdb4da7ff5fe5527105e4e042c78ce5abbb.src","preCode":"    public void upgradeFromJenkins1() throws IOException {\n        VersionNumber since = new VersionNumber(\"1.550\");\n        rr.then(r -> {\n            List<DetachedPlugin> detachedPlugins = ClassicPluginStrategy.getDetachedPlugins(since);\n            assertThat(\"Plugins have been detached since the pre-upgrade version\",\n                    detachedPlugins.size(), greaterThan(4));\n            assertThat(\"Plugins detached between the pre-upgrade version and the current version should be installed\",\n                    getInstalledDetachedPlugins(r, detachedPlugins).size(), equalTo(detachedPlugins.size()));\n            assertNoFailedPlugins(r);\n        });\n    }\n","realPath":"test/src/test/java/jenkins/install/LoadDetachedPluginsTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2019-02-03 17:56:26","commitOrder":2,"curCode":"    public void upgradeFromJenkins2() {\n        VersionNumber since = new VersionNumber(\"2.0\");\n        rr.then(r -> {\n            List<DetachedPlugin> detachedPlugins = DetachedPluginsUtil.getDetachedPlugins(since);\n            assertThat(\"Plugins have been detached since the pre-upgrade version\",\n                    detachedPlugins.size(), greaterThan(1));\n            assertThat(\"Plugins detached between the pre-upgrade version and the current version should be installed\",\n                    getInstalledDetachedPlugins(r, detachedPlugins).size(), equalTo(detachedPlugins.size()));\n            assertNoFailedPlugins(r);\n        });\n    }\n","date":"2019-02-03 17:56:26","endLine":88,"groupId":"10617","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"upgradeFromJenkins2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/2c/181cdb4da7ff5fe5527105e4e042c78ce5abbb.src","preCode":"    public void upgradeFromJenkins2() {\n        VersionNumber since = new VersionNumber(\"2.0\");\n        rr.then(r -> {\n            List<DetachedPlugin> detachedPlugins = ClassicPluginStrategy.getDetachedPlugins(since);\n            assertThat(\"Plugins have been detached since the pre-upgrade version\",\n                    detachedPlugins.size(), greaterThan(1));\n            assertThat(\"Plugins detached between the pre-upgrade version and the current version should be installed\",\n                    getInstalledDetachedPlugins(r, detachedPlugins).size(), equalTo(detachedPlugins.size()));\n            assertNoFailedPlugins(r);\n        });\n    }\n","realPath":"test/src/test/java/jenkins/install/LoadDetachedPluginsTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"a78312ea0f4ba28f8bc81220c6d7c0dfa72a67df","commitMessage":"@@@[JENKINS-55681] - Make JAXB a detached plugin only on Java 11 (#3865)\n\n* Move detached plugins logic into a dedicated class\n\nClassicPluginStrategy is already long enough.  so trying to make things a\nbit more focused before adding Java 11 logic. (and even if not.  the change\nstill splits a class that is almost 1k lines).\n\n* Install jaxb as detached only on Java 11+\n\n* Remove duplicate @Restricted\n\nGiven the enclosing class already has it.\n\n* Use 1.5 release\n\n* Add more test coverage\n\n* getMinJavaVersion => getMinimumJavaVersion\n\n* Rename DetachedPluginsManager as DetachedPluginsUtil\n\nas requested by Oleg and Jesse. Mainly because of the misleading\nrelationship (there's no inheritance) with the existing `PluginManager`\nclass.\n\n* :facepalm: adjust to 1.5 release method renaming\n\n* Clarify minimum Java version column\n\nCo-Authored-By: batmat <bmathus@gmail.com>\n\n* Update to 2.3.0 version of the jaxb plugin\n\n* Bump minimum core version to next expected release version\n\n* Add preventive cycle breaks for jaxb while waiting for JENKINS-28942\n\nAs requested by Oleg.\n\n* Add test to fail fast on wrong format for split-plugins.txt\n","date":"2019-02-03 17:56:26","modifiedFileCount":"5","status":"M","submitter":"Baptiste Mathus"}]
