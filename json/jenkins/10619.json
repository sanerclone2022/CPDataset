[{"authorTime":"2018-09-27 21:26:44","codes":[{"authorDate":"2018-09-27 21:26:44","commitOrder":1,"curCode":"    public void checkSanitizationIsApplied_inDescriptor() throws Exception {\n        logging.record(\"/jenkins\", Level.ALL).capture(1);\n        \n        j.jenkins.setCrumbIssuer(null);\n        \n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page = wc.goTo(\"testDescribable\");\n        String secret = \"s3cr3t\";\n        ((HtmlInput) page.getElementById(\"password\")).setValueAttribute(secret);\n        \n        HtmlForm form = page.getFormByName(\"config\");\n        Page formSubmitPage = j.submit(form);\n        assertThat(formSubmitPage.getWebResponse().getContentAsString(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        \r\n        Throwable thrown = logging.getRecords().get(0).getThrown();\n        \r\n        assertThat(thrown.getCause().getMessage(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        \r\n        assertThat(thrown.getCause().getCause().getMessage(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        StringWriter buffer = new StringWriter();\n        thrown.printStackTrace(new PrintWriter(buffer));\n        String fullStack = buffer.getBuffer().toString();\n        assertThat(fullStack, allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n    }\n","date":"2018-09-27 21:26:44","endLine":188,"groupId":"4883","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkSanitizationIsApplied_inDescriptor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/3a/09f1aa80f64a8309b44ef532d5b74b2032c93f.src","preCode":"    public void checkSanitizationIsApplied_inDescriptor() throws Exception {\n        logging.record(\"/jenkins\", Level.ALL).capture(1);\n        \n        j.jenkins.setCrumbIssuer(null);\n        \n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page = wc.goTo(\"testDescribable\");\n        String secret = \"s3cr3t\";\n        ((HtmlInput) page.getElementById(\"password\")).setValueAttribute(secret);\n        \n        HtmlForm form = page.getFormByName(\"config\");\n        Page formSubmitPage = j.submit(form);\n        assertThat(formSubmitPage.getWebResponse().getContentAsString(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        \r\n        Throwable thrown = logging.getRecords().get(0).getThrown();\n        \r\n        assertThat(thrown.getCause().getMessage(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        \r\n        assertThat(thrown.getCause().getCause().getMessage(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        StringWriter buffer = new StringWriter();\n        thrown.printStackTrace(new PrintWriter(buffer));\n        String fullStack = buffer.getBuffer().toString();\n        assertThat(fullStack, allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n    }\n","realPath":"test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"},{"authorDate":"2018-09-27 21:26:44","commitOrder":1,"curCode":"    public void checkSanitizationIsApplied_inStapler() throws Exception {\n        logging.record(\"/jenkins\", Level.ALL).capture(1);\n        \n        j.jenkins.setCrumbIssuer(null);\n        \n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page = wc.goTo(\"testStapler\");\n        String secret = \"s3cr3t\";\n        ((HtmlInput) page.getElementById(\"password\")).setValueAttribute(secret);\n        \n        HtmlForm form = page.getFormByName(\"config\");\n        Page formSubmitPage = j.submit(form);\n        assertThat(formSubmitPage.getWebResponse().getContentAsString(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        \r\n        Throwable thrown = logging.getRecords().get(0).getThrown();\n        \r\n        assertThat(thrown.getCause().getMessage(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        StringWriter buffer = new StringWriter();\n        thrown.printStackTrace(new PrintWriter(buffer));\n        String fullStack = buffer.getBuffer().toString();\n        assertThat(fullStack, allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n    }\n","date":"2018-09-27 21:26:44","endLine":225,"groupId":"4883","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkSanitizationIsApplied_inStapler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/3a/09f1aa80f64a8309b44ef532d5b74b2032c93f.src","preCode":"    public void checkSanitizationIsApplied_inStapler() throws Exception {\n        logging.record(\"/jenkins\", Level.ALL).capture(1);\n        \n        j.jenkins.setCrumbIssuer(null);\n        \n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page = wc.goTo(\"testStapler\");\n        String secret = \"s3cr3t\";\n        ((HtmlInput) page.getElementById(\"password\")).setValueAttribute(secret);\n        \n        HtmlForm form = page.getFormByName(\"config\");\n        Page formSubmitPage = j.submit(form);\n        assertThat(formSubmitPage.getWebResponse().getContentAsString(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        \r\n        Throwable thrown = logging.getRecords().get(0).getThrown();\n        \r\n        assertThat(thrown.getCause().getMessage(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        StringWriter buffer = new StringWriter();\n        thrown.printStackTrace(new PrintWriter(buffer));\n        String fullStack = buffer.getBuffer().toString();\n        assertThat(fullStack, allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n    }\n","realPath":"test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"B"}],"commitId":"5ddb847d2a55dadc30a84f4f62e2d254780ab30e","commitMessage":"@@@Merge branch 'security-stable-2.138' into security-master\n","date":"2018-09-27 21:26:44","modifiedFileCount":"10","status":"B","submitter":"Daniel Beck"},{"authorTime":"2018-09-27 23:44:30","codes":[{"authorDate":"2018-09-27 23:44:30","commitOrder":2,"curCode":"    public void checkSanitizationIsApplied_inDescriptor() throws Exception {\n        logging.record(\"\", Level.WARNING).capture(100);\n        \n        j.jenkins.setCrumbIssuer(null);\n        \n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page = wc.goTo(\"testDescribable\");\n        String secret = \"s3cr3t\";\n        ((HtmlInput) page.getElementById(\"password\")).setValueAttribute(secret);\n        \n        HtmlForm form = page.getFormByName(\"config\");\n        Page formSubmitPage = j.submit(form);\n        assertThat(formSubmitPage.getWebResponse().getContentAsString(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        \r\n        Throwable thrown = logging.getRecords().stream().filter(r -> r.getMessage().contains(\"Error while serving\")).findAny().get().getThrown();\n        \r\n        assertThat(thrown.getCause().getMessage(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        \r\n        assertThat(thrown.getCause().getCause().getMessage(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        StringWriter buffer = new StringWriter();\n        thrown.printStackTrace(new PrintWriter(buffer));\n        String fullStack = buffer.getBuffer().toString();\n        assertThat(fullStack, allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n    }\n","date":"2018-09-27 23:44:30","endLine":188,"groupId":"10619","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkSanitizationIsApplied_inDescriptor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/1f/6edd39454fa4506640f52a75446ab98fde81e8.src","preCode":"    public void checkSanitizationIsApplied_inDescriptor() throws Exception {\n        logging.record(\"/jenkins\", Level.ALL).capture(1);\n        \n        j.jenkins.setCrumbIssuer(null);\n        \n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page = wc.goTo(\"testDescribable\");\n        String secret = \"s3cr3t\";\n        ((HtmlInput) page.getElementById(\"password\")).setValueAttribute(secret);\n        \n        HtmlForm form = page.getFormByName(\"config\");\n        Page formSubmitPage = j.submit(form);\n        assertThat(formSubmitPage.getWebResponse().getContentAsString(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        \r\n        Throwable thrown = logging.getRecords().get(0).getThrown();\n        \r\n        assertThat(thrown.getCause().getMessage(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        \r\n        assertThat(thrown.getCause().getCause().getMessage(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        StringWriter buffer = new StringWriter();\n        thrown.printStackTrace(new PrintWriter(buffer));\n        String fullStack = buffer.getBuffer().toString();\n        assertThat(fullStack, allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n    }\n","realPath":"test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2018-09-27 23:44:30","commitOrder":2,"curCode":"    public void checkSanitizationIsApplied_inStapler() throws Exception {\n        logging.record(\"\", Level.WARNING).capture(100);\n        \n        j.jenkins.setCrumbIssuer(null);\n        \n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page = wc.goTo(\"testStapler\");\n        String secret = \"s3cr3t\";\n        ((HtmlInput) page.getElementById(\"password\")).setValueAttribute(secret);\n        \n        HtmlForm form = page.getFormByName(\"config\");\n        Page formSubmitPage = j.submit(form);\n        assertThat(formSubmitPage.getWebResponse().getContentAsString(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        \r\n        Throwable thrown = logging.getRecords().stream().filter(r -> r.getMessage().contains(\"Error while serving\")).findAny().get().getThrown();\n        \r\n        assertThat(thrown.getCause().getMessage(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        StringWriter buffer = new StringWriter();\n        thrown.printStackTrace(new PrintWriter(buffer));\n        String fullStack = buffer.getBuffer().toString();\n        assertThat(fullStack, allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n    }\n","date":"2018-09-27 23:44:30","endLine":225,"groupId":"10619","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkSanitizationIsApplied_inStapler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/1f/6edd39454fa4506640f52a75446ab98fde81e8.src","preCode":"    public void checkSanitizationIsApplied_inStapler() throws Exception {\n        logging.record(\"/jenkins\", Level.ALL).capture(1);\n        \n        j.jenkins.setCrumbIssuer(null);\n        \n        JenkinsRule.WebClient wc = j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page = wc.goTo(\"testStapler\");\n        String secret = \"s3cr3t\";\n        ((HtmlInput) page.getElementById(\"password\")).setValueAttribute(secret);\n        \n        HtmlForm form = page.getFormByName(\"config\");\n        Page formSubmitPage = j.submit(form);\n        assertThat(formSubmitPage.getWebResponse().getContentAsString(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        \r\n        Throwable thrown = logging.getRecords().get(0).getThrown();\n        \r\n        assertThat(thrown.getCause().getMessage(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n        \n        StringWriter buffer = new StringWriter();\n        thrown.printStackTrace(new PrintWriter(buffer));\n        String fullStack = buffer.getBuffer().toString();\n        assertThat(fullStack, allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n    }\n","realPath":"test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"}],"commitId":"920ecb1b015442495b94762126f7b0ddd8a037f1","commitMessage":"@@@Merge branch 'security-stable-2.138' into security-master\n","date":"2018-09-27 23:44:30","modifiedFileCount":"1","status":"M","submitter":"Daniel Beck"}]
