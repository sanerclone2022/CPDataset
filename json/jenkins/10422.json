[{"authorTime":"2016-12-17 07:54:25","codes":[{"authorDate":"2014-06-12 04:48:36","commitOrder":2,"curCode":"    @Test public void getAllItems() throws Exception {\n        MockFolder d = r.createFolder(\"d\");\n        MockFolder sub2 = d.createProject(MockFolder.class, \"sub2\");\n        MockFolder sub2a = sub2.createProject(MockFolder.class, \"a\");\n        MockFolder sub2c = sub2.createProject(MockFolder.class, \"c\");\n        MockFolder sub2b = sub2.createProject(MockFolder.class, \"b\");\n        MockFolder sub1 = d.createProject(MockFolder.class, \"sub1\");\n        FreeStyleProject root = r.createFreeStyleProject(\"root\");\n        FreeStyleProject dp = d.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub1q = sub1.createProject(FreeStyleProject.class, \"q\");\n        FreeStyleProject sub1p = sub1.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2ap = sub2a.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2bp = sub2b.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2cp = sub2c.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2alpha = sub2.createProject(FreeStyleProject.class, \"alpha\");\n        FreeStyleProject sub2BRAVO = sub2.createProject(FreeStyleProject.class, \"BRAVO\");\n        FreeStyleProject sub2charlie = sub2.createProject(FreeStyleProject.class, \"charlie\");\n        assertEquals(Arrays.asList(dp, sub1p, sub1q, sub2ap, sub2alpha, sub2bp, sub2BRAVO, sub2cp, sub2charlie), Items.getAllItems(d, FreeStyleProject.class));\n        assertEquals(Arrays.<Item>asList(sub2a, sub2ap, sub2alpha, sub2b, sub2bp, sub2BRAVO, sub2c, sub2cp, sub2charlie), Items.getAllItems(sub2, Item.class));\n    }\n","date":"2014-06-12 04:48:36","endLine":57,"groupId":"5590","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getAllItems","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/8e/969013ade346edc16d39b567142ee4682fef84.src","preCode":"    @Test public void getAllItems() throws Exception {\n        MockFolder d = r.createFolder(\"d\");\n        MockFolder sub2 = d.createProject(MockFolder.class, \"sub2\");\n        MockFolder sub2a = sub2.createProject(MockFolder.class, \"a\");\n        MockFolder sub2c = sub2.createProject(MockFolder.class, \"c\");\n        MockFolder sub2b = sub2.createProject(MockFolder.class, \"b\");\n        MockFolder sub1 = d.createProject(MockFolder.class, \"sub1\");\n        FreeStyleProject root = r.createFreeStyleProject(\"root\");\n        FreeStyleProject dp = d.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub1q = sub1.createProject(FreeStyleProject.class, \"q\");\n        FreeStyleProject sub1p = sub1.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2ap = sub2a.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2bp = sub2b.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2cp = sub2c.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2alpha = sub2.createProject(FreeStyleProject.class, \"alpha\");\n        FreeStyleProject sub2BRAVO = sub2.createProject(FreeStyleProject.class, \"BRAVO\");\n        FreeStyleProject sub2charlie = sub2.createProject(FreeStyleProject.class, \"charlie\");\n        assertEquals(Arrays.asList(dp, sub1p, sub1q, sub2ap, sub2alpha, sub2bp, sub2BRAVO, sub2cp, sub2charlie), Items.getAllItems(d, FreeStyleProject.class));\n        assertEquals(Arrays.<Item>asList(sub2a, sub2ap, sub2alpha, sub2b, sub2bp, sub2BRAVO, sub2c, sub2cp, sub2charlie), Items.getAllItems(sub2, Item.class));\n    }\n","realPath":"test/src/test/java/hudson/model/ItemsTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"NB"},{"authorDate":"2016-12-17 07:54:25","commitOrder":2,"curCode":"    public void allItems() throws Exception {\n        MockFolder d = r.createFolder(\"d\");\n        MockFolder sub2 = d.createProject(MockFolder.class, \"sub2\");\n        MockFolder sub2a = sub2.createProject(MockFolder.class, \"a\");\n        MockFolder sub2c = sub2.createProject(MockFolder.class, \"c\");\n        MockFolder sub2b = sub2.createProject(MockFolder.class, \"b\");\n        MockFolder sub1 = d.createProject(MockFolder.class, \"sub1\");\n        FreeStyleProject root = r.createFreeStyleProject(\"root\");\n        FreeStyleProject dp = d.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub1q = sub1.createProject(FreeStyleProject.class, \"q\");\n        FreeStyleProject sub1p = sub1.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2ap = sub2a.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2bp = sub2b.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2cp = sub2c.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2alpha = sub2.createProject(FreeStyleProject.class, \"alpha\");\n        FreeStyleProject sub2BRAVO = sub2.createProject(FreeStyleProject.class, \"BRAVO\");\n        FreeStyleProject sub2charlie = sub2.createProject(FreeStyleProject.class, \"charlie\");\n        assertThat(Items.allItems(d, FreeStyleProject.class), containsInAnyOrder(dp, sub1p, sub1q, sub2ap, sub2alpha,\n                sub2bp, sub2BRAVO, sub2cp, sub2charlie));\n        assertThat(Items.allItems(sub2, Item.class), containsInAnyOrder((Item)sub2a, sub2ap, sub2alpha, sub2b, sub2bp,\n                sub2BRAVO, sub2c, sub2cp, sub2charlie));\n    }\n","date":"2016-12-17 07:54:25","endLine":89,"groupId":"5590","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"allItems","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/e3/defc19a2e40aec3b9a167fd082a3c43da6d380.src","preCode":"    public void allItems() throws Exception {\n        MockFolder d = r.createFolder(\"d\");\n        MockFolder sub2 = d.createProject(MockFolder.class, \"sub2\");\n        MockFolder sub2a = sub2.createProject(MockFolder.class, \"a\");\n        MockFolder sub2c = sub2.createProject(MockFolder.class, \"c\");\n        MockFolder sub2b = sub2.createProject(MockFolder.class, \"b\");\n        MockFolder sub1 = d.createProject(MockFolder.class, \"sub1\");\n        FreeStyleProject root = r.createFreeStyleProject(\"root\");\n        FreeStyleProject dp = d.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub1q = sub1.createProject(FreeStyleProject.class, \"q\");\n        FreeStyleProject sub1p = sub1.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2ap = sub2a.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2bp = sub2b.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2cp = sub2c.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2alpha = sub2.createProject(FreeStyleProject.class, \"alpha\");\n        FreeStyleProject sub2BRAVO = sub2.createProject(FreeStyleProject.class, \"BRAVO\");\n        FreeStyleProject sub2charlie = sub2.createProject(FreeStyleProject.class, \"charlie\");\n        assertThat(Items.allItems(d, FreeStyleProject.class), containsInAnyOrder(dp, sub1p, sub1q, sub2ap, sub2alpha,\n                sub2bp, sub2BRAVO, sub2cp, sub2charlie));\n        assertThat(Items.allItems(sub2, Item.class), containsInAnyOrder((Item)sub2a, sub2ap, sub2alpha, sub2b, sub2bp,\n                sub2BRAVO, sub2c, sub2cp, sub2charlie));\n    }\n","realPath":"test/src/test/java/hudson/model/ItemsTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"}],"commitId":"673cc13ffb6575cb2aeef6c725f4aaf6407fc57f","commitMessage":"@@@Merge pull request #2665 from stephenc/jenkins-40252\n\n[FIXED JENKINS-40252] Add an Iterable<T> that returns all items unsorted","date":"2016-12-17 07:54:25","modifiedFileCount":"20","status":"M","submitter":"Stephen Connolly"},{"authorTime":"2017-12-14 01:53:14","codes":[{"authorDate":"2017-12-14 01:53:14","commitOrder":3,"curCode":"    @Test public void getAllItems() throws Exception {\n        MockFolder d = r.createFolder(\"d\");\n        MockFolder sub2 = d.createProject(MockFolder.class, \"sub2\");\n        MockFolder sub2a = sub2.createProject(MockFolder.class, \"a\");\n        MockFolder sub2c = sub2.createProject(MockFolder.class, \"c\");\n        MockFolder sub2b = sub2.createProject(MockFolder.class, \"b\");\n        MockFolder sub1 = d.createProject(MockFolder.class, \"sub1\");\n        FreeStyleProject root = r.createFreeStyleProject(\"root\");\n        FreeStyleProject dp = d.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub1q = sub1.createProject(FreeStyleProject.class, \"q\");\n        FreeStyleProject sub1p = sub1.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2ap = sub2a.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2bp = sub2b.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2cp = sub2c.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2alpha = sub2.createProject(FreeStyleProject.class, \"alpha\");\n        FreeStyleProject sub2BRAVO = sub2.createProject(FreeStyleProject.class, \"BRAVO\");\n        FreeStyleProject sub2charlie = sub2.createProject(FreeStyleProject.class, \"charlie\");\n        assertEquals(Arrays.asList(dp, sub1p, sub1q, sub2ap, sub2alpha, sub2bp, sub2BRAVO, sub2cp, sub2charlie), d.getAllItems(FreeStyleProject.class));\n        assertEquals(Arrays.<Item>asList(sub2a, sub2ap, sub2alpha, sub2b, sub2bp, sub2BRAVO, sub2c, sub2cp, sub2charlie), sub2.getAllItems(Item.class));\n    }\n","date":"2017-12-14 01:53:14","endLine":83,"groupId":"10422","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getAllItems","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/32/ec8e6e4755be9d196cba8d70e2be769862c671.src","preCode":"    @Test public void getAllItems() throws Exception {\n        MockFolder d = r.createFolder(\"d\");\n        MockFolder sub2 = d.createProject(MockFolder.class, \"sub2\");\n        MockFolder sub2a = sub2.createProject(MockFolder.class, \"a\");\n        MockFolder sub2c = sub2.createProject(MockFolder.class, \"c\");\n        MockFolder sub2b = sub2.createProject(MockFolder.class, \"b\");\n        MockFolder sub1 = d.createProject(MockFolder.class, \"sub1\");\n        FreeStyleProject root = r.createFreeStyleProject(\"root\");\n        FreeStyleProject dp = d.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub1q = sub1.createProject(FreeStyleProject.class, \"q\");\n        FreeStyleProject sub1p = sub1.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2ap = sub2a.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2bp = sub2b.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2cp = sub2c.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2alpha = sub2.createProject(FreeStyleProject.class, \"alpha\");\n        FreeStyleProject sub2BRAVO = sub2.createProject(FreeStyleProject.class, \"BRAVO\");\n        FreeStyleProject sub2charlie = sub2.createProject(FreeStyleProject.class, \"charlie\");\n        assertEquals(Arrays.asList(dp, sub1p, sub1q, sub2ap, sub2alpha, sub2bp, sub2BRAVO, sub2cp, sub2charlie), Items.getAllItems(d, FreeStyleProject.class));\n        assertEquals(Arrays.<Item>asList(sub2a, sub2ap, sub2alpha, sub2b, sub2bp, sub2BRAVO, sub2c, sub2cp, sub2charlie), Items.getAllItems(sub2, Item.class));\n    }\n","realPath":"test/src/test/java/hudson/model/ItemsTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2017-12-14 01:53:14","commitOrder":3,"curCode":"    public void allItems() throws Exception {\n        MockFolder d = r.createFolder(\"d\");\n        MockFolder sub2 = d.createProject(MockFolder.class, \"sub2\");\n        MockFolder sub2a = sub2.createProject(MockFolder.class, \"a\");\n        MockFolder sub2c = sub2.createProject(MockFolder.class, \"c\");\n        MockFolder sub2b = sub2.createProject(MockFolder.class, \"b\");\n        MockFolder sub1 = d.createProject(MockFolder.class, \"sub1\");\n        FreeStyleProject root = r.createFreeStyleProject(\"root\");\n        FreeStyleProject dp = d.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub1q = sub1.createProject(FreeStyleProject.class, \"q\");\n        FreeStyleProject sub1p = sub1.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2ap = sub2a.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2bp = sub2b.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2cp = sub2c.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2alpha = sub2.createProject(FreeStyleProject.class, \"alpha\");\n        FreeStyleProject sub2BRAVO = sub2.createProject(FreeStyleProject.class, \"BRAVO\");\n        FreeStyleProject sub2charlie = sub2.createProject(FreeStyleProject.class, \"charlie\");\n        assertThat(d.allItems(FreeStyleProject.class), containsInAnyOrder(dp, sub1p, sub1q, sub2ap, sub2alpha,\n                sub2bp, sub2BRAVO, sub2cp, sub2charlie));\n        assertThat(sub2.allItems(Item.class), containsInAnyOrder((Item)sub2a, sub2ap, sub2alpha, sub2b, sub2bp,\n                sub2BRAVO, sub2c, sub2cp, sub2charlie));\n    }\n","date":"2017-12-14 01:53:14","endLine":108,"groupId":"10422","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"allItems","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/32/ec8e6e4755be9d196cba8d70e2be769862c671.src","preCode":"    public void allItems() throws Exception {\n        MockFolder d = r.createFolder(\"d\");\n        MockFolder sub2 = d.createProject(MockFolder.class, \"sub2\");\n        MockFolder sub2a = sub2.createProject(MockFolder.class, \"a\");\n        MockFolder sub2c = sub2.createProject(MockFolder.class, \"c\");\n        MockFolder sub2b = sub2.createProject(MockFolder.class, \"b\");\n        MockFolder sub1 = d.createProject(MockFolder.class, \"sub1\");\n        FreeStyleProject root = r.createFreeStyleProject(\"root\");\n        FreeStyleProject dp = d.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub1q = sub1.createProject(FreeStyleProject.class, \"q\");\n        FreeStyleProject sub1p = sub1.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2ap = sub2a.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2bp = sub2b.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2cp = sub2c.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2alpha = sub2.createProject(FreeStyleProject.class, \"alpha\");\n        FreeStyleProject sub2BRAVO = sub2.createProject(FreeStyleProject.class, \"BRAVO\");\n        FreeStyleProject sub2charlie = sub2.createProject(FreeStyleProject.class, \"charlie\");\n        assertThat(Items.allItems(d, FreeStyleProject.class), containsInAnyOrder(dp, sub1p, sub1q, sub2ap, sub2alpha,\n                sub2bp, sub2BRAVO, sub2cp, sub2charlie));\n        assertThat(Items.allItems(sub2, Item.class), containsInAnyOrder((Item)sub2a, sub2ap, sub2alpha, sub2b, sub2bp,\n                sub2BRAVO, sub2c, sub2cp, sub2charlie));\n    }\n","realPath":"test/src/test/java/hudson/model/ItemsTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"c0ba0527eece7e1fbcb2fc037f8e25542bc8dd45","commitMessage":"@@@Merge commit '78adf02addc47ccb2629c9bb9101a8dd630b22a5'\n","date":"2017-12-14 01:53:14","modifiedFileCount":"66","status":"M","submitter":"Jesse Glick"}]
