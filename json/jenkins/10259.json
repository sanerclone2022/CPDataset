[{"authorTime":"2016-03-14 23:52:59","codes":[{"authorDate":"2016-03-14 23:52:59","commitOrder":1,"curCode":"    @Test public void consoleShouldFailWhenRequestedBuildDoesNotExist() throws Exception {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Job.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\", \"1\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such build #1\"));\n    }\n","date":"2016-03-14 23:52:59","endLine":130,"groupId":"3907","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"consoleShouldFailWhenRequestedBuildDoesNotExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f4/8f0fe1ed9b4b78cec0c7bcc0f23507c3dabd8c.src","preCode":"    @Test public void consoleShouldFailWhenRequestedBuildDoesNotExist() throws Exception {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Job.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\", \"1\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such build #1\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ConsoleCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"},{"authorDate":"2016-03-14 23:52:59","commitOrder":1,"curCode":"    @Test public void consoleShouldFailIfTheBuildIsStuckInTheQueue() throws Exception {\n\n        FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(new Shell(\"echo 1\\nsleep 10s\"));\n        project.setAssignedLabel(new LabelAtom(\"never_created\"));\n\n        assertThat(\"Job wasn't scheduled properly\", project.scheduleBuild(0), equalTo(true));\n        Thread.sleep(1000);\n        assertThat(\"Job wasn't scheduled properly - it isn't in the queue\", project.isInQueue(), equalTo(true));\n        assertThat(\"Job wasn't scheduled properly - it is running on non-exist node\", project.isBuilding(), equalTo(false));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Job.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\", \"1\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such build #1\"));\n    }\n","date":"2016-03-14 23:52:59","endLine":304,"groupId":"3907","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"consoleShouldFailIfTheBuildIsStuckInTheQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/f4/8f0fe1ed9b4b78cec0c7bcc0f23507c3dabd8c.src","preCode":"    @Test public void consoleShouldFailIfTheBuildIsStuckInTheQueue() throws Exception {\n\n        FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(new Shell(\"echo 1\\nsleep 10s\"));\n        project.setAssignedLabel(new LabelAtom(\"never_created\"));\n\n        assertThat(\"Job wasn't scheduled properly\", project.scheduleBuild(0), equalTo(true));\n        Thread.sleep(1000);\n        assertThat(\"Job wasn't scheduled properly - it isn't in the queue\", project.isInQueue(), equalTo(true));\n        assertThat(\"Job wasn't scheduled properly - it is running on non-exist node\", project.isBuilding(), equalTo(false));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Job.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\", \"1\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such build #1\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ConsoleCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"B"}],"commitId":"5a6c1ebb03b1a3418f7c43f0b26b4cfb089e8493","commitMessage":"@@@Merge pull request #2118 from pjanouse/JENKINS-32684\n\n[JENKINS-32684] Improved test coverage of CLI command 'console'","date":"2016-03-14 23:52:59","modifiedFileCount":"0","status":"B","submitter":"Daniel Beck"},{"authorTime":"2021-04-20 04:54:17","codes":[{"authorDate":"2021-04-20 04:54:17","commitOrder":2,"curCode":"    @Test public void consoleShouldFailWhenRequestedBuildDoesNotExist() throws Exception {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Item.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\", \"1\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such build #1\"));\n    }\n","date":"2021-04-20 04:54:17","endLine":132,"groupId":"10259","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"consoleShouldFailWhenRequestedBuildDoesNotExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/81/922f42fdde1d3982ae8b212a0c8f63de445592.src","preCode":"    @Test public void consoleShouldFailWhenRequestedBuildDoesNotExist() throws Exception {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Job.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\", \"1\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such build #1\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ConsoleCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2021-04-20 04:54:17","commitOrder":2,"curCode":"    @Test public void consoleShouldFailIfTheBuildIsStuckInTheQueue() throws Exception {\n\n        FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(new Shell(\"echo 1\\nsleep 10s\"));\n        project.setAssignedLabel(new LabelAtom(\"never_created\"));\n\n        assertThat(\"Job wasn't scheduled properly\", project.scheduleBuild(0), equalTo(true));\n        Thread.sleep(1000);\n        assertThat(\"Job wasn't scheduled properly - it isn't in the queue\", project.isInQueue(), equalTo(true));\n        assertThat(\"Job wasn't scheduled properly - it is running on non-exist node\", project.isBuilding(), equalTo(false));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Item.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\", \"1\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such build #1\"));\n    }\n","date":"2021-04-20 04:54:17","endLine":330,"groupId":"10259","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"consoleShouldFailIfTheBuildIsStuckInTheQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/81/922f42fdde1d3982ae8b212a0c8f63de445592.src","preCode":"    @Test public void consoleShouldFailIfTheBuildIsStuckInTheQueue() throws Exception {\n\n        FreeStyleProject project = j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(new Shell(\"echo 1\\nsleep 10s\"));\n        project.setAssignedLabel(new LabelAtom(\"never_created\"));\n\n        assertThat(\"Job wasn't scheduled properly\", project.scheduleBuild(0), equalTo(true));\n        Thread.sleep(1000);\n        assertThat(\"Job wasn't scheduled properly - it isn't in the queue\", project.isInQueue(), equalTo(true));\n        assertThat(\"Job wasn't scheduled properly - it is running on non-exist node\", project.isBuilding(), equalTo(false));\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, Job.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\", \"1\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such build #1\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ConsoleCommandTest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"M"}],"commitId":"0fd55bd6b50fcdf27368c6b771fb3d8363a24f83","commitMessage":"@@@Merge pull request #5419 from basil/subtypes\n\nUse declaring class as qualifier","date":"2021-04-20 04:54:17","modifiedFileCount":"43","status":"M","submitter":"Oleg Nenashev"}]
