[{"authorTime":"2017-06-30 02:15:57","codes":[{"authorDate":"2017-06-30 02:15:57","commitOrder":1,"curCode":"    public void reportNotJenkins() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        String url = r.getURL().toExternalForm() + \"not-jenkins/\";\n        for (String transport : Arrays.asList(\"-remoting\", \"-http\", \"-ssh\")) {\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            assertThat(baos.toString(), containsString(\"There's no Jenkins running at\"));\n            assertNotEquals(0, ret);\n        }\n    }\n","date":"2017-06-30 02:15:57","endLine":196,"groupId":"8743","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"reportNotJenkins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/41/d6756a32ae628a357591ff053edb18d5747f1e.src","preCode":"    public void reportNotJenkins() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        String url = r.getURL().toExternalForm() + \"not-jenkins/\";\n        for (String transport : Arrays.asList(\"-remoting\", \"-http\", \"-ssh\")) {\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            assertThat(baos.toString(), containsString(\"There's no Jenkins running at\"));\n            assertNotEquals(0, ret);\n        }\n    }\n","realPath":"test/src/test/java/hudson/cli/CLITest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"B"},{"authorDate":"2017-06-30 02:15:57","commitOrder":1,"curCode":"    public void redirectToEndpointShouldBeFollowed() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        \r\n        SSHD sshd = GlobalConfiguration.all().get(SSHD.class);\n        sshd.setPort(0); \r\n        sshd.start();\n\n        \r\n        JenkinsRule.WebClient wc = r.createWebClient();\n        wc.getOptions().setRedirectEnabled(false);\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        WebResponse rsp = wc.goTo(\"cli-proxy/\").getWebResponse();\n        assertEquals(rsp.getContentAsString(), 302, rsp.getStatusCode());\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-Jenkins\"));\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-Jenkins-CLI-Port\"));\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-SSH-Endpoint\"));\n\n        for (String transport: Arrays.asList(\"-remoting\", \"-http\", \"-ssh\")) {\n\n            String url = r.getURL().toString() + \"cli-proxy/\";\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            \r\n            assertThat(baos.toString(), containsString(\"Authenticated as: anonymous\"));\n            assertEquals(0, ret);\n        }\n    }\n","date":"2017-06-30 02:15:57","endLine":260,"groupId":"9673","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"redirectToEndpointShouldBeFollowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/41/d6756a32ae628a357591ff053edb18d5747f1e.src","preCode":"    public void redirectToEndpointShouldBeFollowed() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        \r\n        SSHD sshd = GlobalConfiguration.all().get(SSHD.class);\n        sshd.setPort(0); \r\n        sshd.start();\n\n        \r\n        JenkinsRule.WebClient wc = r.createWebClient();\n        wc.getOptions().setRedirectEnabled(false);\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        WebResponse rsp = wc.goTo(\"cli-proxy/\").getWebResponse();\n        assertEquals(rsp.getContentAsString(), 302, rsp.getStatusCode());\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-Jenkins\"));\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-Jenkins-CLI-Port\"));\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-SSH-Endpoint\"));\n\n        for (String transport: Arrays.asList(\"-remoting\", \"-http\", \"-ssh\")) {\n\n            String url = r.getURL().toString() + \"cli-proxy/\";\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            \r\n            assertThat(baos.toString(), containsString(\"Authenticated as: anonymous\"));\n            assertEquals(0, ret);\n        }\n    }\n","realPath":"test/src/test/java/hudson/cli/CLITest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"B"}],"commitId":"b7ec53423e49ba41790202793513aa2d7c3276e2","commitMessage":"@@@Merge pull request #2897 from olivergondza/JENKINS-44361\n\n[FIXED JENKINS-44361] Follow HTTP redirects while initiating CLI connection","date":"2017-06-30 02:15:57","modifiedFileCount":"4","status":"B","submitter":"Oliver Gond?a"},{"authorTime":"2019-02-08 13:43:50","codes":[{"authorDate":"2017-06-30 02:15:57","commitOrder":2,"curCode":"    public void reportNotJenkins() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        String url = r.getURL().toExternalForm() + \"not-jenkins/\";\n        for (String transport : Arrays.asList(\"-remoting\", \"-http\", \"-ssh\")) {\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            assertThat(baos.toString(), containsString(\"There's no Jenkins running at\"));\n            assertNotEquals(0, ret);\n        }\n    }\n","date":"2017-06-30 02:15:57","endLine":196,"groupId":"8743","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"reportNotJenkins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/41/d6756a32ae628a357591ff053edb18d5747f1e.src","preCode":"    public void reportNotJenkins() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        String url = r.getURL().toExternalForm() + \"not-jenkins/\";\n        for (String transport : Arrays.asList(\"-remoting\", \"-http\", \"-ssh\")) {\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            assertThat(baos.toString(), containsString(\"There's no Jenkins running at\"));\n            assertNotEquals(0, ret);\n        }\n    }\n","realPath":"test/src/test/java/hudson/cli/CLITest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"N"},{"authorDate":"2019-02-08 13:43:50","commitOrder":2,"curCode":"    public void redirectToEndpointShouldBeFollowed() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        \r\n        SSHD sshd = GlobalConfiguration.all().get(SSHD.class);\n        sshd.setPort(0); \r\n        sshd.start();\n\n        \r\n        JenkinsRule.WebClient wc = r.createWebClient()\n                .withRedirectEnabled(false)\n                .withThrowExceptionOnFailingStatusCode(false);\n        \n        WebResponse rsp = wc.goTo(\"cli-proxy/\").getWebResponse();\n        assertEquals(rsp.getContentAsString(), HttpURLConnection.HTTP_MOVED_TEMP, rsp.getStatusCode());\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-Jenkins\"));\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-Jenkins-CLI-Port\"));\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-SSH-Endpoint\"));\n\n        for (String transport: Arrays.asList(\"-remoting\", \"-http\", \"-ssh\")) {\n\n            String url = r.getURL().toString() + \"cli-proxy/\";\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            \r\n            assertThat(baos.toString(), containsString(\"Authenticated as: anonymous\"));\n            assertEquals(0, ret);\n        }\n    }\n","date":"2019-02-08 13:43:50","endLine":260,"groupId":"8744","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"redirectToEndpointShouldBeFollowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/19/4277ef8b88afd59e8441c8e5e52f7143f006a1.src","preCode":"    public void redirectToEndpointShouldBeFollowed() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        \r\n        SSHD sshd = GlobalConfiguration.all().get(SSHD.class);\n        sshd.setPort(0); \r\n        sshd.start();\n\n        \r\n        JenkinsRule.WebClient wc = r.createWebClient();\n        wc.getOptions().setRedirectEnabled(false);\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        WebResponse rsp = wc.goTo(\"cli-proxy/\").getWebResponse();\n        assertEquals(rsp.getContentAsString(), 302, rsp.getStatusCode());\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-Jenkins\"));\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-Jenkins-CLI-Port\"));\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-SSH-Endpoint\"));\n\n        for (String transport: Arrays.asList(\"-remoting\", \"-http\", \"-ssh\")) {\n\n            String url = r.getURL().toString() + \"cli-proxy/\";\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            \r\n            assertThat(baos.toString(), containsString(\"Authenticated as: anonymous\"));\n            assertEquals(0, ret);\n        }\n    }\n","realPath":"test/src/test/java/hudson/cli/CLITest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"fab166242dd407a08dcafb727abff94fd3ca7dd1","commitMessage":"@@@Merge pull request #3618 from Wadeck/JENKINS-53511_WEBCLIENT_DISCOVERY_IMPROVEMENT\n\n[JENKINS-53511] Improve discovery and readability of WebClient","date":"2019-02-08 13:43:50","modifiedFileCount":"38","status":"M","submitter":"Oleg Nenashev"},{"authorTime":"2019-02-15 11:42:31","codes":[{"authorDate":"2019-02-15 11:42:31","commitOrder":3,"curCode":"    public void reportNotJenkins() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        String url = r.getURL().toExternalForm() + \"not-jenkins/\";\n        for (String transport : Arrays.asList(\"-http\", \"-ssh\")) {\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            assertThat(baos.toString(), containsString(\"There's no Jenkins running at\"));\n            assertNotEquals(0, ret);\n        }\n    }\n","date":"2019-02-15 11:42:31","endLine":194,"groupId":"8743","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"reportNotJenkins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/14/ff043c68133cb57be1f078dd99b99946ea43c8.src","preCode":"    public void reportNotJenkins() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        String url = r.getURL().toExternalForm() + \"not-jenkins/\";\n        for (String transport : Arrays.asList(\"-remoting\", \"-http\", \"-ssh\")) {\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            assertThat(baos.toString(), containsString(\"There's no Jenkins running at\"));\n            assertNotEquals(0, ret);\n        }\n    }\n","realPath":"test/src/test/java/hudson/cli/CLITest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"},{"authorDate":"2019-02-15 11:42:31","commitOrder":3,"curCode":"    public void redirectToEndpointShouldBeFollowed() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        \r\n        SSHD sshd = GlobalConfiguration.all().get(SSHD.class);\n        sshd.setPort(0); \r\n        sshd.start();\n\n        \r\n        JenkinsRule.WebClient wc = r.createWebClient()\n                .withRedirectEnabled(false)\n                .withThrowExceptionOnFailingStatusCode(false);\n        \n        WebResponse rsp = wc.goTo(\"cli-proxy/\").getWebResponse();\n        assertEquals(rsp.getContentAsString(), HttpURLConnection.HTTP_MOVED_TEMP, rsp.getStatusCode());\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-Jenkins\"));\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-Jenkins-CLI-Port\"));\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-SSH-Endpoint\"));\n\n        for (String transport: Arrays.asList(\"-http\", \"-ssh\")) {\n\n            String url = r.getURL().toString() + \"cli-proxy/\";\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            \r\n            assertThat(baos.toString(), containsString(\"Authenticated as: anonymous\"));\n            assertEquals(0, ret);\n        }\n    }\n","date":"2019-02-15 11:42:31","endLine":259,"groupId":"8744","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"redirectToEndpointShouldBeFollowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/14/ff043c68133cb57be1f078dd99b99946ea43c8.src","preCode":"    public void redirectToEndpointShouldBeFollowed() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        \r\n        SSHD sshd = GlobalConfiguration.all().get(SSHD.class);\n        sshd.setPort(0); \r\n        sshd.start();\n\n        \r\n        JenkinsRule.WebClient wc = r.createWebClient()\n                .withRedirectEnabled(false)\n                .withThrowExceptionOnFailingStatusCode(false);\n        \n        WebResponse rsp = wc.goTo(\"cli-proxy/\").getWebResponse();\n        assertEquals(rsp.getContentAsString(), HttpURLConnection.HTTP_MOVED_TEMP, rsp.getStatusCode());\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-Jenkins\"));\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-Jenkins-CLI-Port\"));\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-SSH-Endpoint\"));\n\n        for (String transport: Arrays.asList(\"-remoting\", \"-http\", \"-ssh\")) {\n\n            String url = r.getURL().toString() + \"cli-proxy/\";\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            \r\n            assertThat(baos.toString(), containsString(\"Authenticated as: anonymous\"));\n            assertEquals(0, ret);\n        }\n    }\n","realPath":"test/src/test/java/hudson/cli/CLITest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"}],"commitId":"cc964ef664250b6737e471ef546a46a37421cb4f","commitMessage":"@@@Merge pull request #3838 from jglick/remotingCLI\n\nRemoving code to support the Remoting-based CLI","date":"2019-02-15 11:42:31","modifiedFileCount":"24","status":"M","submitter":"Jesse Glick"},{"authorTime":"2020-01-20 21:55:10","codes":[{"authorDate":"2019-02-15 11:42:31","commitOrder":4,"curCode":"    public void reportNotJenkins() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        String url = r.getURL().toExternalForm() + \"not-jenkins/\";\n        for (String transport : Arrays.asList(\"-http\", \"-ssh\")) {\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            assertThat(baos.toString(), containsString(\"There's no Jenkins running at\"));\n            assertNotEquals(0, ret);\n        }\n    }\n","date":"2019-02-15 11:42:31","endLine":194,"groupId":"8743","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"reportNotJenkins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/14/ff043c68133cb57be1f078dd99b99946ea43c8.src","preCode":"    public void reportNotJenkins() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        String url = r.getURL().toExternalForm() + \"not-jenkins/\";\n        for (String transport : Arrays.asList(\"-http\", \"-ssh\")) {\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            assertThat(baos.toString(), containsString(\"There's no Jenkins running at\"));\n            assertNotEquals(0, ret);\n        }\n    }\n","realPath":"test/src/test/java/hudson/cli/CLITest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"N"},{"authorDate":"2020-01-20 21:55:10","commitOrder":4,"curCode":"    public void redirectToEndpointShouldBeFollowed() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        \r\n        SSHD sshd = GlobalConfiguration.all().get(SSHD.class);\n        sshd.setPort(0); \r\n        sshd.start();\n\n        \r\n        JenkinsRule.WebClient wc = r.createWebClient()\n                .withRedirectEnabled(false)\n                .withThrowExceptionOnFailingStatusCode(false);\n        \n        WebResponse rsp = wc.goTo(\"cli-proxy/\").getWebResponse();\n        assertEquals(rsp.getContentAsString(), HttpURLConnection.HTTP_MOVED_TEMP, rsp.getStatusCode());\n        assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue(\"X-Jenkins\"));\n        assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue(\"X-Jenkins-CLI-Port\"));\n        assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue(\"X-SSH-Endpoint\"));\n\n        for (String transport: Arrays.asList(\"-http\", \"-ssh\")) {\n\n            String url = r.getURL().toString() + \"cli-proxy/\";\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            \r\n            assertThat(baos.toString(), containsString(\"Authenticated as: anonymous\"));\n            assertEquals(0, ret);\n        }\n    }\n","date":"2020-01-20 21:55:10","endLine":259,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"redirectToEndpointShouldBeFollowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/9f/62ebb996ee73dde2891984e6f1211a746797f6.src","preCode":"    public void redirectToEndpointShouldBeFollowed() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        \r\n        SSHD sshd = GlobalConfiguration.all().get(SSHD.class);\n        sshd.setPort(0); \r\n        sshd.start();\n\n        \r\n        JenkinsRule.WebClient wc = r.createWebClient()\n                .withRedirectEnabled(false)\n                .withThrowExceptionOnFailingStatusCode(false);\n        \n        WebResponse rsp = wc.goTo(\"cli-proxy/\").getWebResponse();\n        assertEquals(rsp.getContentAsString(), HttpURLConnection.HTTP_MOVED_TEMP, rsp.getStatusCode());\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-Jenkins\"));\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-Jenkins-CLI-Port\"));\n        assertEquals(rsp.getContentAsString(), null, rsp.getResponseHeaderValue(\"X-SSH-Endpoint\"));\n\n        for (String transport: Arrays.asList(\"-http\", \"-ssh\")) {\n\n            String url = r.getURL().toString() + \"cli-proxy/\";\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            \r\n            assertThat(baos.toString(), containsString(\"Authenticated as: anonymous\"));\n            assertEquals(0, ret);\n        }\n    }\n","realPath":"test/src/test/java/hudson/cli/CLITest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"}],"commitId":"574ec6e5bdf2e4ac9394e290fefff5ac1c9a5c96","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2020-01-20 21:55:10","modifiedFileCount":"193","status":"M","submitter":"Wadeck Follonier"},{"authorTime":"2020-01-28 04:36:19","codes":[{"authorDate":"2019-02-15 11:42:31","commitOrder":5,"curCode":"    public void reportNotJenkins() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        String url = r.getURL().toExternalForm() + \"not-jenkins/\";\n        for (String transport : Arrays.asList(\"-http\", \"-ssh\")) {\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            assertThat(baos.toString(), containsString(\"There's no Jenkins running at\"));\n            assertNotEquals(0, ret);\n        }\n    }\n","date":"2019-02-15 11:42:31","endLine":194,"groupId":"8743","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"reportNotJenkins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/14/ff043c68133cb57be1f078dd99b99946ea43c8.src","preCode":"    public void reportNotJenkins() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        String url = r.getURL().toExternalForm() + \"not-jenkins/\";\n        for (String transport : Arrays.asList(\"-http\", \"-ssh\")) {\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            assertThat(baos.toString(), containsString(\"There's no Jenkins running at\"));\n            assertNotEquals(0, ret);\n        }\n    }\n","realPath":"test/src/test/java/hudson/cli/CLITest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"N"},{"authorDate":"2020-01-28 04:36:19","commitOrder":5,"curCode":"    public void redirectToEndpointShouldBeFollowed() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        \r\n        SSHD sshd = GlobalConfiguration.all().get(SSHD.class);\n        sshd.setPort(0); \r\n        sshd.start();\n\n        \r\n        JenkinsRule.WebClient wc = r.createWebClient()\n                .withRedirectEnabled(false)\n                .withThrowExceptionOnFailingStatusCode(false);\n        \n        WebResponse rsp = wc.goTo(\"cli-proxy/\").getWebResponse();\n        assertEquals(rsp.getContentAsString(), HttpURLConnection.HTTP_MOVED_TEMP, rsp.getStatusCode());\n        assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue(\"X-Jenkins\"));\n        assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue(\"X-Jenkins-CLI-Port\"));\n        assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue(\"X-SSH-Endpoint\"));\n\n        for (String transport: Arrays.asList(\"-http\", \"-ssh\", \"-webSocket\")) {\n\n            String url = r.getURL().toString() + \"cli-proxy/\";\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            \r\n            assertThat(baos.toString(), containsString(\"Authenticated as: anonymous\"));\n            assertEquals(0, ret);\n        }\n    }\n","date":"2020-01-28 04:36:19","endLine":261,"groupId":"7023","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"redirectToEndpointShouldBeFollowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/ce/26c49fb8bb74d1331a6dbfa0d452161e219eea.src","preCode":"    public void redirectToEndpointShouldBeFollowed() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        \r\n        SSHD sshd = GlobalConfiguration.all().get(SSHD.class);\n        sshd.setPort(0); \r\n        sshd.start();\n\n        \r\n        JenkinsRule.WebClient wc = r.createWebClient()\n                .withRedirectEnabled(false)\n                .withThrowExceptionOnFailingStatusCode(false);\n        \n        WebResponse rsp = wc.goTo(\"cli-proxy/\").getWebResponse();\n        assertEquals(rsp.getContentAsString(), HttpURLConnection.HTTP_MOVED_TEMP, rsp.getStatusCode());\n        assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue(\"X-Jenkins\"));\n        assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue(\"X-Jenkins-CLI-Port\"));\n        assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue(\"X-SSH-Endpoint\"));\n\n        for (String transport: Arrays.asList(\"-http\", \"-ssh\")) {\n\n            String url = r.getURL().toString() + \"cli-proxy/\";\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            \r\n            assertThat(baos.toString(), containsString(\"Authenticated as: anonymous\"));\n            assertEquals(0, ret);\n        }\n    }\n","realPath":"test/src/test/java/hudson/cli/CLITest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"c365300f99e286bed71c0f014ae2a6fb248aa5e2","commitMessage":"@@@Merge branch 'master' into security-master\n","date":"2020-01-28 04:36:19","modifiedFileCount":"45","status":"M","submitter":"Jeff Thompson"},{"authorTime":"2021-03-04 06:09:17","codes":[{"authorDate":"2021-03-04 06:09:17","commitOrder":6,"curCode":"    public void reportNotJenkins() throws Exception {\n        grabCliJar();\n\n        String url = r.getURL().toExternalForm() + \"not-jenkins/\";\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                \"java\", \"-jar\", jar.getAbsolutePath(), \"-s\", url, \"-http\", \"-user\", \"asdf\", \"who-am-i\"\n        ).stdout(baos).stderr(baos).join();\n\n        assertThat(baos.toString(), containsString(\"There's no Jenkins running at\"));\n        assertNotEquals(0, ret);\n        \r\n    }\n","date":"2021-03-04 06:09:17","endLine":134,"groupId":"8743","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"reportNotJenkins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/22/d14abbbcd7c983bd83f9a1f86a9ce406c326cd.src","preCode":"    public void reportNotJenkins() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        String url = r.getURL().toExternalForm() + \"not-jenkins/\";\n        for (String transport : Arrays.asList(\"-http\", \"-ssh\")) {\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            assertThat(baos.toString(), containsString(\"There's no Jenkins running at\"));\n            assertNotEquals(0, ret);\n        }\n        \r\n    }\n","realPath":"test/src/test/java/hudson/cli/CLITest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2021-03-04 06:09:17","commitOrder":6,"curCode":"    public void redirectToEndpointShouldBeFollowed() throws Exception {\n        grabCliJar();\n\n        \r\n        JenkinsRule.WebClient wc = r.createWebClient()\n                .withRedirectEnabled(false)\n                .withThrowExceptionOnFailingStatusCode(false);\n        \n        WebResponse rsp = wc.goTo(\"cli-proxy/\").getWebResponse();\n        assertEquals(rsp.getContentAsString(), HttpURLConnection.HTTP_MOVED_TEMP, rsp.getStatusCode());\n        assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue(\"X-Jenkins\"));\n        assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue(\"X-Jenkins-CLI-Port\"));\n\n        for (String transport: Arrays.asList(\"-http\", \"-webSocket\")) {\n\n            String url = r.getURL().toString() + \"cli-proxy/\";\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            \r\n            assertThat(baos.toString(), containsString(\"Authenticated as: anonymous\"));\n            assertEquals(0, ret);\n        }\n    }\n","date":"2021-03-04 06:09:17","endLine":192,"groupId":"2973","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"redirectToEndpointShouldBeFollowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/22/d14abbbcd7c983bd83f9a1f86a9ce406c326cd.src","preCode":"    public void redirectToEndpointShouldBeFollowed() throws Exception {\n        home = tempHome();\n        grabCliJar();\n\n        \r\n        SSHD sshd = GlobalConfiguration.all().get(SSHD.class);\n        sshd.setPort(0); \r\n        sshd.start();\n\n        \r\n        JenkinsRule.WebClient wc = r.createWebClient()\n                .withRedirectEnabled(false)\n                .withThrowExceptionOnFailingStatusCode(false);\n        \n        WebResponse rsp = wc.goTo(\"cli-proxy/\").getWebResponse();\n        assertEquals(rsp.getContentAsString(), HttpURLConnection.HTTP_MOVED_TEMP, rsp.getStatusCode());\n        assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue(\"X-Jenkins\"));\n        assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue(\"X-Jenkins-CLI-Port\"));\n        assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue(\"X-SSH-Endpoint\"));\n\n        for (String transport: Arrays.asList(\"-http\", \"-ssh\", \"-webSocket\")) {\n\n            String url = r.getURL().toString() + \"cli-proxy/\";\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-Duser.home=\" + home, \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            \r\n            assertThat(baos.toString(), containsString(\"Authenticated as: anonymous\"));\n            assertEquals(0, ret);\n        }\n    }\n","realPath":"test/src/test/java/hudson/cli/CLITest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"c73ad5d922a0d02101ca392b85b5dc358b766e98","commitMessage":"@@@Delete SSH-specific scenarios from CLITest (#5327)\n\n","date":"2021-03-04 06:09:17","modifiedFileCount":"1","status":"M","submitter":"Jesse Glick"},{"authorTime":"2021-05-04 06:02:42","codes":[{"authorDate":"2021-03-04 06:09:17","commitOrder":7,"curCode":"    public void reportNotJenkins() throws Exception {\n        grabCliJar();\n\n        String url = r.getURL().toExternalForm() + \"not-jenkins/\";\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                \"java\", \"-jar\", jar.getAbsolutePath(), \"-s\", url, \"-http\", \"-user\", \"asdf\", \"who-am-i\"\n        ).stdout(baos).stderr(baos).join();\n\n        assertThat(baos.toString(), containsString(\"There's no Jenkins running at\"));\n        assertNotEquals(0, ret);\n        \r\n    }\n","date":"2021-03-04 06:09:17","endLine":134,"groupId":"10195","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"reportNotJenkins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/22/d14abbbcd7c983bd83f9a1f86a9ce406c326cd.src","preCode":"    public void reportNotJenkins() throws Exception {\n        grabCliJar();\n\n        String url = r.getURL().toExternalForm() + \"not-jenkins/\";\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                \"java\", \"-jar\", jar.getAbsolutePath(), \"-s\", url, \"-http\", \"-user\", \"asdf\", \"who-am-i\"\n        ).stdout(baos).stderr(baos).join();\n\n        assertThat(baos.toString(), containsString(\"There's no Jenkins running at\"));\n        assertNotEquals(0, ret);\n        \r\n    }\n","realPath":"test/src/test/java/hudson/cli/CLITest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"N"},{"authorDate":"2021-05-04 06:02:42","commitOrder":7,"curCode":"    public void redirectToEndpointShouldBeFollowed() throws Exception {\n        grabCliJar();\n\n        \r\n        JenkinsRule.WebClient wc = r.createWebClient()\n                .withRedirectEnabled(false)\n                .withThrowExceptionOnFailingStatusCode(false);\n        \n        WebResponse rsp = wc.goTo(\"cli-proxy/\").getWebResponse();\n        assertEquals(rsp.getContentAsString(), HttpURLConnection.HTTP_MOVED_TEMP, rsp.getStatusCode());\n        assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue(\"X-Jenkins\"));\n\n        for (String transport: Arrays.asList(\"-http\", \"-webSocket\")) {\n\n            String url = r.getURL().toString() + \"cli-proxy/\";\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            \r\n            assertThat(baos.toString(), containsString(\"Authenticated as: anonymous\"));\n            assertEquals(0, ret);\n        }\n    }\n","date":"2021-05-04 06:02:42","endLine":192,"groupId":"10195","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"redirectToEndpointShouldBeFollowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/1d/f171d10b80ced3439a612b85ffb7bd9b68a116.src","preCode":"    public void redirectToEndpointShouldBeFollowed() throws Exception {\n        grabCliJar();\n\n        \r\n        JenkinsRule.WebClient wc = r.createWebClient()\n                .withRedirectEnabled(false)\n                .withThrowExceptionOnFailingStatusCode(false);\n        \n        WebResponse rsp = wc.goTo(\"cli-proxy/\").getWebResponse();\n        assertEquals(rsp.getContentAsString(), HttpURLConnection.HTTP_MOVED_TEMP, rsp.getStatusCode());\n        assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue(\"X-Jenkins\"));\n        assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue(\"X-Jenkins-CLI-Port\"));\n\n        for (String transport: Arrays.asList(\"-http\", \"-webSocket\")) {\n\n            String url = r.getURL().toString() + \"cli-proxy/\";\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int ret = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            \r\n            assertThat(baos.toString(), containsString(\"Authenticated as: anonymous\"));\n            assertEquals(0, ret);\n        }\n    }\n","realPath":"test/src/test/java/hudson/cli/CLITest.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"}],"commitId":"68711c1fc9e6e04b31b8276895b906e9898feed2","commitMessage":"@@@Remove HTTP response headers for the remoting-based CLI (#5452)\n\n* Remove HTTP response headers for the remoting-based CLI\n\n* Remove reference to obsolete header as requested in review\n\nCo-authored-by: Daniel Beck <daniel-beck@users.noreply.github.com>","date":"2021-05-04 06:02:42","modifiedFileCount":"2","status":"M","submitter":"Daniel Beck"}]
