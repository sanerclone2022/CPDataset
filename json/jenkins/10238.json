[{"authorTime":"2016-04-09 02:55:20","codes":[{"authorDate":"2016-04-09 02:55:20","commitOrder":1,"curCode":"    @Test public void jobViewManipulationShouldFailWithJenkinsReadPermissionOnly() throws IOException {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aView\", \"aProject\");\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the View/Read permission\"));\n    }\n","date":"2016-04-09 02:55:20","endLine":72,"groupId":"8891","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"jobViewManipulationShouldFailWithJenkinsReadPermissionOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/dc/d7012656a07d8d9d065441ddad8f511a0f22ba.src","preCode":"    @Test public void jobViewManipulationShouldFailWithJenkinsReadPermissionOnly() throws IOException {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aView\", \"aProject\");\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the View/Read permission\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ViewManipulationTestBase.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"},{"authorDate":"2016-04-09 02:55:20","commitOrder":1,"curCode":"    @Test public void jobViewManipulationShouldFailWithViewReadPermissionOnly() throws IOException {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, View.READ)\n                .invokeWithArgs(\"aView\", \"aProject\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job 'aProject'\"));\n    }\n","date":"2016-04-09 02:55:20","endLine":86,"groupId":"8892","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"jobViewManipulationShouldFailWithViewReadPermissionOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/dc/d7012656a07d8d9d065441ddad8f511a0f22ba.src","preCode":"    @Test public void jobViewManipulationShouldFailWithViewReadPermissionOnly() throws IOException {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, View.READ)\n                .invokeWithArgs(\"aView\", \"aProject\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job 'aProject'\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ViewManipulationTestBase.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"ae82f8e93f57b59fe04b0479b26f310409e64f86","commitMessage":"@@@Merge pull request #2202 from pjanouse/JENKINS-32535\n\n[JENKINS-32535] Improved test coverage 'add-job-to-view' and 'remove-job-from-view'","date":"2016-04-09 02:55:20","modifiedFileCount":"0","status":"B","submitter":"Daniel Beck"},{"authorTime":"2021-09-05 22:13:34","codes":[{"authorDate":"2021-09-05 22:13:34","commitOrder":2,"curCode":"    @Test public void jobViewManipulationShouldFailWithJenkinsReadPermissionOnly() throws IOException {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        j.createFreeStyleProject(\"aProject\");\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result = command\n                .invokeWithArgs(\"aView\", \"aProject\");\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the View/Read permission\"));\n    }\n","date":"2021-09-05 22:13:34","endLine":74,"groupId":"10238","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"jobViewManipulationShouldFailWithJenkinsReadPermissionOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/20/ce4bb793d1c5f90d5a6cc5a48a769d4d04be63.src","preCode":"    @Test public void jobViewManipulationShouldFailWithJenkinsReadPermissionOnly() throws IOException {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aView\", \"aProject\");\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the View/Read permission\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ViewManipulationTestBase.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2021-09-05 22:13:34","commitOrder":2,"curCode":"    @Test public void jobViewManipulationShouldFailWithViewReadPermissionOnly() throws IOException {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        j.createFreeStyleProject(\"aProject\");\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ, View.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result = command\n                .invokeWithArgs(\"aView\", \"aProject\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job 'aProject'\"));\n    }\n","date":"2021-09-05 22:13:34","endLine":88,"groupId":"10238","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"jobViewManipulationShouldFailWithViewReadPermissionOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jenkins-10-0.7/blobInfo/CC_OUT/blobs/20/ce4bb793d1c5f90d5a6cc5a48a769d4d04be63.src","preCode":"    @Test public void jobViewManipulationShouldFailWithViewReadPermissionOnly() throws IOException {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result = command\n                .authorizedTo(Jenkins.READ, View.READ)\n                .invokeWithArgs(\"aView\", \"aProject\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job 'aProject'\"));\n    }\n","realPath":"test/src/test/java/hudson/cli/ViewManipulationTestBase.java","repoName":"jenkins","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"d7604cfb08cd82449e0d79f25432a196fa04bc2a","commitMessage":"@@@Merge pull request #5701 from jglick/anonymous-to-lambda\n\nReplace some anonymous classes with lambdas","date":"2021-09-05 22:13:34","modifiedFileCount":"32","status":"M","submitter":"Raihaan Shouhell"}]
