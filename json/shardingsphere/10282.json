[{"authorTime":"2021-07-03 16:36:59","codes":[{"authorDate":"2021-07-02 23:18:54","commitOrder":2,"curCode":"    private Collection<String> getToBeCreatedDuplicateRuleNames(final CreateDatabaseDiscoveryRuleStatement sqlStatement) {\n        return sqlStatement.getRules().stream()\n                .collect(Collectors.toMap(DatabaseDiscoveryRuleSegment::getName, e -> 1, Integer::sum))\n                .entrySet().stream()\n                .filter(entry -> entry.getValue() > 1)\n                .map(Entry::getKey)\n                .collect(Collectors.toSet());\n    }\n","date":"2021-07-02 23:18:54","endLine":76,"groupId":"1703","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getToBeCreatedDuplicateRuleNames","params":"(finalCreateDatabaseDiscoveryRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bb/d1cce4617e4c82ee796a4043f71ab987cd3500.src","preCode":"    private Collection<String> getToBeCreatedDuplicateRuleNames(final CreateDatabaseDiscoveryRuleStatement sqlStatement) {\n        return sqlStatement.getRules().stream()\n                .collect(Collectors.toMap(DatabaseDiscoveryRuleSegment::getName, e -> 1, Integer::sum))\n                .entrySet().stream()\n                .filter(entry -> entry.getValue() > 1)\n                .map(Entry::getKey)\n                .collect(Collectors.toSet());\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/CreateDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"NB"},{"authorDate":"2021-07-03 16:36:59","commitOrder":2,"curCode":"    private void checkDuplicateTables(final CreateShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) {\n        Collection<String> shardingTableNames = null == currentRuleConfig ? Collections.emptyList() : getShardingTables(currentRuleConfig);\n        Set<String> duplicateTableNames = sqlStatement.getRules().stream().collect(Collectors.toMap(TableRuleSegment::getLogicTable, each -> 1, Integer::sum))\n                .entrySet().stream().filter(entry -> entry.getValue() > 1).map(Entry::getKey).collect(Collectors.toSet());\n        duplicateTableNames.addAll(sqlStatement.getRules().stream().map(TableRuleSegment::getLogicTable).filter(shardingTableNames::contains).collect(Collectors.toSet()));\n        if (!duplicateTableNames.isEmpty()) {\n            throw new DuplicateTablesException(duplicateTableNames);\n        }\n    }\n","date":"2021-07-03 16:36:59","endLine":88,"groupId":"213","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkDuplicateTables","params":"(finalCreateShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e5/1d75470ee0b17a10d7452afe4333a6dcd8c87f.src","preCode":"    private void checkDuplicateTables(final CreateShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) {\n        Collection<String> shardingTableNames = null == currentRuleConfig ? Collections.emptyList() : getShardingTables(currentRuleConfig);\n        Set<String> duplicateTableNames = sqlStatement.getRules().stream().collect(Collectors.toMap(TableRuleSegment::getLogicTable, each -> 1, Integer::sum))\n                .entrySet().stream().filter(entry -> entry.getValue() > 1).map(Entry::getKey).collect(Collectors.toSet());\n        duplicateTableNames.addAll(sqlStatement.getRules().stream().map(TableRuleSegment::getLogicTable).filter(shardingTableNames::contains).collect(Collectors.toSet()));\n        if (!duplicateTableNames.isEmpty()) {\n            throw new DuplicateTablesException(duplicateTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/CreateShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"}],"commitId":"70149d383a75b5b9986818226f18abd449e5ae80","commitMessage":"@@@Add shardingsphere-sharding-distsql-handler module (#11125)\n\n* Add shardingsphere-sharding-distsql-handler module\n\n* Fix test cases\n\n* Fix test cases\n\n* Fix test cases","date":"2021-07-03 16:36:59","modifiedFileCount":"1","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 01:26:11","codes":[{"authorDate":"2021-07-02 23:18:54","commitOrder":3,"curCode":"    private Collection<String> getToBeCreatedDuplicateRuleNames(final CreateDatabaseDiscoveryRuleStatement sqlStatement) {\n        return sqlStatement.getRules().stream()\n                .collect(Collectors.toMap(DatabaseDiscoveryRuleSegment::getName, e -> 1, Integer::sum))\n                .entrySet().stream()\n                .filter(entry -> entry.getValue() > 1)\n                .map(Entry::getKey)\n                .collect(Collectors.toSet());\n    }\n","date":"2021-07-02 23:18:54","endLine":76,"groupId":"1703","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getToBeCreatedDuplicateRuleNames","params":"(finalCreateDatabaseDiscoveryRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bb/d1cce4617e4c82ee796a4043f71ab987cd3500.src","preCode":"    private Collection<String> getToBeCreatedDuplicateRuleNames(final CreateDatabaseDiscoveryRuleStatement sqlStatement) {\n        return sqlStatement.getRules().stream()\n                .collect(Collectors.toMap(DatabaseDiscoveryRuleSegment::getName, e -> 1, Integer::sum))\n                .entrySet().stream()\n                .filter(entry -> entry.getValue() > 1)\n                .map(Entry::getKey)\n                .collect(Collectors.toSet());\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/CreateDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"},{"authorDate":"2021-07-04 01:26:11","commitOrder":3,"curCode":"    private void checkDuplicateTables(final CreateShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws DuplicateTablesException {\n        Collection<String> shardingTableNames = null == currentRuleConfig ? Collections.emptyList() : getShardingTables(currentRuleConfig);\n        Set<String> duplicateTableNames = sqlStatement.getRules().stream().collect(Collectors.toMap(TableRuleSegment::getLogicTable, each -> 1, Integer::sum))\n                .entrySet().stream().filter(entry -> entry.getValue() > 1).map(Entry::getKey).collect(Collectors.toSet());\n        duplicateTableNames.addAll(sqlStatement.getRules().stream().map(TableRuleSegment::getLogicTable).filter(shardingTableNames::contains).collect(Collectors.toSet()));\n        if (!duplicateTableNames.isEmpty()) {\n            throw new DuplicateTablesException(duplicateTableNames);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":89,"groupId":"213","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkDuplicateTables","params":"(finalCreateShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7a/d6dafc95f371f48033b501ca8152df1a6e8eac.src","preCode":"    private void checkDuplicateTables(final CreateShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) {\n        Collection<String> shardingTableNames = null == currentRuleConfig ? Collections.emptyList() : getShardingTables(currentRuleConfig);\n        Set<String> duplicateTableNames = sqlStatement.getRules().stream().collect(Collectors.toMap(TableRuleSegment::getLogicTable, each -> 1, Integer::sum))\n                .entrySet().stream().filter(entry -> entry.getValue() > 1).map(Entry::getKey).collect(Collectors.toSet());\n        duplicateTableNames.addAll(sqlStatement.getRules().stream().map(TableRuleSegment::getLogicTable).filter(shardingTableNames::contains).collect(Collectors.toSet()));\n        if (!duplicateTableNames.isEmpty()) {\n            throw new DuplicateTablesException(duplicateTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/CreateShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"18ab59a5ac8de3a2c2d2c1dac39de3041b9c36f3","commitMessage":"@@@Refactor RuleDefinitionViolationException to extend SQLException (#11129)\n\n* Refactor RDLBackendHandler\n\n* Refactor RuleDefinitionViolationException to extend SQLException","date":"2021-07-04 01:26:11","modifiedFileCount":"66","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 14:16:58","codes":[{"authorDate":"2021-07-02 23:18:54","commitOrder":4,"curCode":"    private Collection<String> getToBeCreatedDuplicateRuleNames(final CreateDatabaseDiscoveryRuleStatement sqlStatement) {\n        return sqlStatement.getRules().stream()\n                .collect(Collectors.toMap(DatabaseDiscoveryRuleSegment::getName, e -> 1, Integer::sum))\n                .entrySet().stream()\n                .filter(entry -> entry.getValue() > 1)\n                .map(Entry::getKey)\n                .collect(Collectors.toSet());\n    }\n","date":"2021-07-02 23:18:54","endLine":76,"groupId":"1703","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getToBeCreatedDuplicateRuleNames","params":"(finalCreateDatabaseDiscoveryRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bb/d1cce4617e4c82ee796a4043f71ab987cd3500.src","preCode":"    private Collection<String> getToBeCreatedDuplicateRuleNames(final CreateDatabaseDiscoveryRuleStatement sqlStatement) {\n        return sqlStatement.getRules().stream()\n                .collect(Collectors.toMap(DatabaseDiscoveryRuleSegment::getName, e -> 1, Integer::sum))\n                .entrySet().stream()\n                .filter(entry -> entry.getValue() > 1)\n                .map(Entry::getKey)\n                .collect(Collectors.toSet());\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/CreateDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"},{"authorDate":"2021-07-04 14:16:58","commitOrder":4,"curCode":"    private void checkDuplicateTables(final String schemaName, final CreateShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws RuleDuplicatedException {\n        Collection<String> shardingTableNames = null == currentRuleConfig ? Collections.emptyList() : getShardingTables(currentRuleConfig);\n        Set<String> duplicateTableNames = sqlStatement.getRules().stream().collect(Collectors.toMap(TableRuleSegment::getLogicTable, each -> 1, Integer::sum))\n                .entrySet().stream().filter(entry -> entry.getValue() > 1).map(Entry::getKey).collect(Collectors.toSet());\n        duplicateTableNames.addAll(sqlStatement.getRules().stream().map(TableRuleSegment::getLogicTable).filter(shardingTableNames::contains).collect(Collectors.toSet()));\n        if (!duplicateTableNames.isEmpty()) {\n            throw new RuleDuplicatedException(\"sharding\", schemaName, duplicateTableNames);\n        }\n    }\n","date":"2021-07-04 14:16:58","endLine":88,"groupId":"213","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkDuplicateTables","params":"(finalStringschemaName@finalCreateShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e8/b2943dca2dac29076a3b22f61c959fc5d10efd.src","preCode":"    private void checkDuplicateTables(final CreateShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws DuplicateTablesException {\n        Collection<String> shardingTableNames = null == currentRuleConfig ? Collections.emptyList() : getShardingTables(currentRuleConfig);\n        Set<String> duplicateTableNames = sqlStatement.getRules().stream().collect(Collectors.toMap(TableRuleSegment::getLogicTable, each -> 1, Integer::sum))\n                .entrySet().stream().filter(entry -> entry.getValue() > 1).map(Entry::getKey).collect(Collectors.toSet());\n        duplicateTableNames.addAll(sqlStatement.getRules().stream().map(TableRuleSegment::getLogicTable).filter(shardingTableNames::contains).collect(Collectors.toSet()));\n        if (!duplicateTableNames.isEmpty()) {\n            throw new DuplicateTablesException(duplicateTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/CreateShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"f470823871a18135ec464481217395cbaf8f6e90","commitMessage":"@@@Use DuplicateResourceException to refine Exception of current rule validation (#11134)\n\n* Rename RuleDuplicatedException\n\n* Remove DuplicateTablesException\n\n* Remove DuplicateBindingTablesException","date":"2021-07-04 14:16:58","modifiedFileCount":"14","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 15:02:59","codes":[{"authorDate":"2021-07-02 23:18:54","commitOrder":5,"curCode":"    private Collection<String> getToBeCreatedDuplicateRuleNames(final CreateDatabaseDiscoveryRuleStatement sqlStatement) {\n        return sqlStatement.getRules().stream()\n                .collect(Collectors.toMap(DatabaseDiscoveryRuleSegment::getName, e -> 1, Integer::sum))\n                .entrySet().stream()\n                .filter(entry -> entry.getValue() > 1)\n                .map(Entry::getKey)\n                .collect(Collectors.toSet());\n    }\n","date":"2021-07-02 23:18:54","endLine":76,"groupId":"10282","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getToBeCreatedDuplicateRuleNames","params":"(finalCreateDatabaseDiscoveryRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bb/d1cce4617e4c82ee796a4043f71ab987cd3500.src","preCode":"    private Collection<String> getToBeCreatedDuplicateRuleNames(final CreateDatabaseDiscoveryRuleStatement sqlStatement) {\n        return sqlStatement.getRules().stream()\n                .collect(Collectors.toMap(DatabaseDiscoveryRuleSegment::getName, e -> 1, Integer::sum))\n                .entrySet().stream()\n                .filter(entry -> entry.getValue() > 1)\n                .map(Entry::getKey)\n                .collect(Collectors.toSet());\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/CreateDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"},{"authorDate":"2021-07-04 15:02:59","commitOrder":5,"curCode":"    private void checkDuplicateTables(final String schemaName, final CreateShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws DuplicateRuleException {\n        Collection<String> shardingTableNames = null == currentRuleConfig ? Collections.emptyList() : getShardingTables(currentRuleConfig);\n        Set<String> duplicateTableNames = sqlStatement.getRules().stream().collect(Collectors.toMap(TableRuleSegment::getLogicTable, each -> 1, Integer::sum))\n                .entrySet().stream().filter(entry -> entry.getValue() > 1).map(Entry::getKey).collect(Collectors.toSet());\n        duplicateTableNames.addAll(sqlStatement.getRules().stream().map(TableRuleSegment::getLogicTable).filter(shardingTableNames::contains).collect(Collectors.toSet()));\n        if (!duplicateTableNames.isEmpty()) {\n            throw new DuplicateRuleException(\"sharding\", schemaName, duplicateTableNames);\n        }\n    }\n","date":"2021-07-04 15:02:59","endLine":88,"groupId":"10282","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"checkDuplicateTables","params":"(finalStringschemaName@finalCreateShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5c/6804c0767cd5bba5401389f738bb7519ed8718.src","preCode":"    private void checkDuplicateTables(final String schemaName, final CreateShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws RuleDuplicatedException {\n        Collection<String> shardingTableNames = null == currentRuleConfig ? Collections.emptyList() : getShardingTables(currentRuleConfig);\n        Set<String> duplicateTableNames = sqlStatement.getRules().stream().collect(Collectors.toMap(TableRuleSegment::getLogicTable, each -> 1, Integer::sum))\n                .entrySet().stream().filter(entry -> entry.getValue() > 1).map(Entry::getKey).collect(Collectors.toSet());\n        duplicateTableNames.addAll(sqlStatement.getRules().stream().map(TableRuleSegment::getLogicTable).filter(shardingTableNames::contains).collect(Collectors.toSet()));\n        if (!duplicateTableNames.isEmpty()) {\n            throw new RuleDuplicatedException(\"sharding\", schemaName, duplicateTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/CreateShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"83216cb8e0d277c40d499d8c6ad41413990dc1b5","commitMessage":"@@@Add ResourceDefinitionViolationException (#11136)\n\n* Add ResourceDefinitionViolationException\n\n* Add ResourceDefinitionViolationException\n\n* Rename DuplicateRuleException\n\n* Rename RequiredRuleMissedException\n\n* Rename RequiredResourceMissedException","date":"2021-07-04 15:02:59","modifiedFileCount":"35","status":"M","submitter":"Liang Zhang"}]
