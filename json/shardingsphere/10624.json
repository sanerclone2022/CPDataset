[{"authorTime":"2021-06-04 22:49:49","codes":[{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertIsShardingColumnForDefaultDatabaseShardingStrategy() {\n        ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();\n        shardingRuleConfig.getTables().add(createTableRuleConfigWithAllStrategies());\n        shardingRuleConfig.setDefaultDatabaseShardingStrategy(new StandardShardingStrategyConfiguration(\"column\", \"STANDARD_TEST\"));\n        shardingRuleConfig.getShardingAlgorithms().put(\"standard\", new ShardingSphereAlgorithmConfiguration(\"STANDARD_TEST\", new Properties()));\n        assertTrue(new ShardingRule(shardingRuleConfig, mock(DatabaseType.class), createDataSourceMap()).isShardingColumn(\"column\", \"LOGIC_TABLE\"));\n    }\n","date":"2021-06-04 22:49:49","endLine":206,"groupId":"75","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIsShardingColumnForDefaultDatabaseShardingStrategy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4c/2b2c2838ddb8b74d7a4ef34c6a426d53bebf54.src","preCode":"    public void assertIsShardingColumnForDefaultDatabaseShardingStrategy() {\n        ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();\n        shardingRuleConfig.getTables().add(createTableRuleConfigWithAllStrategies());\n        shardingRuleConfig.setDefaultDatabaseShardingStrategy(new StandardShardingStrategyConfiguration(\"column\", \"STANDARD_TEST\"));\n        shardingRuleConfig.getShardingAlgorithms().put(\"standard\", new ShardingSphereAlgorithmConfiguration(\"STANDARD_TEST\", new Properties()));\n        assertTrue(new ShardingRule(shardingRuleConfig, mock(DatabaseType.class), createDataSourceMap()).isShardingColumn(\"column\", \"LOGIC_TABLE\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rule/ShardingRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"B"},{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertIsShardingColumnForDefaultTableShardingStrategy() {\n        ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();\n        shardingRuleConfig.getTables().add(createTableRuleConfigWithAllStrategies());\n        shardingRuleConfig.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"column\", \"STANDARD_TEST\"));\n        shardingRuleConfig.getShardingAlgorithms().put(\"standard\", new ShardingSphereAlgorithmConfiguration(\"STANDARD_TEST\", new Properties()));\n        assertTrue(new ShardingRule(shardingRuleConfig, mock(DatabaseType.class), createDataSourceMap()).isShardingColumn(\"column\", \"LOGIC_TABLE\"));\n    }\n","date":"2021-06-04 22:49:49","endLine":215,"groupId":"75","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertIsShardingColumnForDefaultTableShardingStrategy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4c/2b2c2838ddb8b74d7a4ef34c6a426d53bebf54.src","preCode":"    public void assertIsShardingColumnForDefaultTableShardingStrategy() {\n        ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();\n        shardingRuleConfig.getTables().add(createTableRuleConfigWithAllStrategies());\n        shardingRuleConfig.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"column\", \"STANDARD_TEST\"));\n        shardingRuleConfig.getShardingAlgorithms().put(\"standard\", new ShardingSphereAlgorithmConfiguration(\"STANDARD_TEST\", new Properties()));\n        assertTrue(new ShardingRule(shardingRuleConfig, mock(DatabaseType.class), createDataSourceMap()).isShardingColumn(\"column\", \"LOGIC_TABLE\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rule/ShardingRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"B"}],"commitId":"6b157b44d0336e4d9c61f940b0ec19c26758af84","commitMessage":"@@@Merge sharding feature to core module (#10662)\n\n* Merge dependencies\n\n* Merge sharding feature to api module\n\n* Merge sharding feature to core module","date":"2021-06-04 22:49:49","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-07-20 19:26:57","codes":[{"authorDate":"2021-07-20 19:26:57","commitOrder":2,"curCode":"    public void assertIsShardingColumnForDefaultDatabaseShardingStrategy() {\n        ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();\n        shardingRuleConfig.getTables().add(createTableRuleConfigWithAllStrategies());\n        shardingRuleConfig.setDefaultDatabaseShardingStrategy(new StandardShardingStrategyConfiguration(\"column\", \"STANDARD_TEST\"));\n        shardingRuleConfig.getShardingAlgorithms().put(\"standard\", new ShardingSphereAlgorithmConfiguration(\"STANDARD_TEST\", new Properties()));\n        assertTrue(new ShardingRule(shardingRuleConfig, createDataSourceMap()).isShardingColumn(\"column\", \"LOGIC_TABLE\"));\n    }\n","date":"2021-07-20 19:26:57","endLine":206,"groupId":"75","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIsShardingColumnForDefaultDatabaseShardingStrategy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/75/ef282d42d32c835730eae18a23bfb6190d6cd1.src","preCode":"    public void assertIsShardingColumnForDefaultDatabaseShardingStrategy() {\n        ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();\n        shardingRuleConfig.getTables().add(createTableRuleConfigWithAllStrategies());\n        shardingRuleConfig.setDefaultDatabaseShardingStrategy(new StandardShardingStrategyConfiguration(\"column\", \"STANDARD_TEST\"));\n        shardingRuleConfig.getShardingAlgorithms().put(\"standard\", new ShardingSphereAlgorithmConfiguration(\"STANDARD_TEST\", new Properties()));\n        assertTrue(new ShardingRule(shardingRuleConfig, mock(DatabaseType.class), createDataSourceMap()).isShardingColumn(\"column\", \"LOGIC_TABLE\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rule/ShardingRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"},{"authorDate":"2021-07-20 19:26:57","commitOrder":2,"curCode":"    public void assertIsShardingColumnForDefaultTableShardingStrategy() {\n        ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();\n        shardingRuleConfig.getTables().add(createTableRuleConfigWithAllStrategies());\n        shardingRuleConfig.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"column\", \"STANDARD_TEST\"));\n        shardingRuleConfig.getShardingAlgorithms().put(\"standard\", new ShardingSphereAlgorithmConfiguration(\"STANDARD_TEST\", new Properties()));\n        assertTrue(new ShardingRule(shardingRuleConfig, createDataSourceMap()).isShardingColumn(\"column\", \"LOGIC_TABLE\"));\n    }\n","date":"2021-07-20 19:26:57","endLine":215,"groupId":"75","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertIsShardingColumnForDefaultTableShardingStrategy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/75/ef282d42d32c835730eae18a23bfb6190d6cd1.src","preCode":"    public void assertIsShardingColumnForDefaultTableShardingStrategy() {\n        ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();\n        shardingRuleConfig.getTables().add(createTableRuleConfigWithAllStrategies());\n        shardingRuleConfig.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"column\", \"STANDARD_TEST\"));\n        shardingRuleConfig.getShardingAlgorithms().put(\"standard\", new ShardingSphereAlgorithmConfiguration(\"STANDARD_TEST\", new Properties()));\n        assertTrue(new ShardingRule(shardingRuleConfig, mock(DatabaseType.class), createDataSourceMap()).isShardingColumn(\"column\", \"LOGIC_TABLE\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rule/ShardingRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"}],"commitId":"512cec6beb35cb3fedb2f0e282eb5394b553a479","commitMessage":"@@@optimize single table rule & router load logic (#11402)\n\n* optimize single table rule & router load logic\n\n* modify encrypt proxy config file\n\n* optimize single table route logic\n\n* fix integrate test error\n\n* remove useless param & rename getExcludedTables\n\n* remove useless param in test case\n\n* fix checkstyle","date":"2021-07-20 19:26:57","modifiedFileCount":"44","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-07-21 18:15:49","codes":[{"authorDate":"2021-07-21 18:15:49","commitOrder":3,"curCode":"    public void assertIsShardingColumnForDefaultDatabaseShardingStrategy() {\n        ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();\n        shardingRuleConfig.getTables().add(createTableRuleConfigWithAllStrategies());\n        shardingRuleConfig.setDefaultDatabaseShardingStrategy(new StandardShardingStrategyConfiguration(\"column\", \"STANDARD_TEST\"));\n        shardingRuleConfig.getShardingAlgorithms().put(\"standard\", new ShardingSphereAlgorithmConfiguration(\"STANDARD_TEST\", new Properties()));\n        assertTrue(new ShardingRule(shardingRuleConfig, createDataSourceMap(), Sets.newHashSet()).isShardingColumn(\"column\", \"LOGIC_TABLE\"));\n    }\n","date":"2021-07-21 18:15:49","endLine":207,"groupId":"75","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIsShardingColumnForDefaultDatabaseShardingStrategy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/93/bb095b63f4e8ac2efbd452a2da9479ff1e62b8.src","preCode":"    public void assertIsShardingColumnForDefaultDatabaseShardingStrategy() {\n        ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();\n        shardingRuleConfig.getTables().add(createTableRuleConfigWithAllStrategies());\n        shardingRuleConfig.setDefaultDatabaseShardingStrategy(new StandardShardingStrategyConfiguration(\"column\", \"STANDARD_TEST\"));\n        shardingRuleConfig.getShardingAlgorithms().put(\"standard\", new ShardingSphereAlgorithmConfiguration(\"STANDARD_TEST\", new Properties()));\n        assertTrue(new ShardingRule(shardingRuleConfig, createDataSourceMap()).isShardingColumn(\"column\", \"LOGIC_TABLE\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rule/ShardingRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"},{"authorDate":"2021-07-21 18:15:49","commitOrder":3,"curCode":"    public void assertIsShardingColumnForDefaultTableShardingStrategy() {\n        ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();\n        shardingRuleConfig.getTables().add(createTableRuleConfigWithAllStrategies());\n        shardingRuleConfig.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"column\", \"STANDARD_TEST\"));\n        shardingRuleConfig.getShardingAlgorithms().put(\"standard\", new ShardingSphereAlgorithmConfiguration(\"STANDARD_TEST\", new Properties()));\n        assertTrue(new ShardingRule(shardingRuleConfig, createDataSourceMap(), Sets.newHashSet()).isShardingColumn(\"column\", \"LOGIC_TABLE\"));\n    }\n","date":"2021-07-21 18:15:49","endLine":216,"groupId":"75","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertIsShardingColumnForDefaultTableShardingStrategy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/93/bb095b63f4e8ac2efbd452a2da9479ff1e62b8.src","preCode":"    public void assertIsShardingColumnForDefaultTableShardingStrategy() {\n        ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();\n        shardingRuleConfig.getTables().add(createTableRuleConfigWithAllStrategies());\n        shardingRuleConfig.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"column\", \"STANDARD_TEST\"));\n        shardingRuleConfig.getShardingAlgorithms().put(\"standard\", new ShardingSphereAlgorithmConfiguration(\"STANDARD_TEST\", new Properties()));\n        assertTrue(new ShardingRule(shardingRuleConfig, createDataSourceMap()).isShardingColumn(\"column\", \"LOGIC_TABLE\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rule/ShardingRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"}],"commitId":"1ea833bd9d9b26f80f34e8442b726ca9a2752a6f","commitMessage":"@@@remove create table and drop table event (#11423)\n\n* remove create table and drop table event\n\n* fix encrypt test case\n\n* optimize single table route logic\n\n* update param name","date":"2021-07-21 18:15:49","modifiedFileCount":"44","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-07-22 21:13:29","codes":[{"authorDate":"2021-07-22 21:13:29","commitOrder":4,"curCode":"    public void assertIsShardingColumnForDefaultDatabaseShardingStrategy() {\n        ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();\n        shardingRuleConfig.getTables().add(createTableRuleConfigWithAllStrategies());\n        shardingRuleConfig.setDefaultDatabaseShardingStrategy(new StandardShardingStrategyConfiguration(\"column\", \"STANDARD_TEST\"));\n        shardingRuleConfig.getShardingAlgorithms().put(\"standard\", new ShardingSphereAlgorithmConfiguration(\"STANDARD_TEST\", new Properties()));\n        assertTrue(new ShardingRule(shardingRuleConfig, createDataSourceMap()).isShardingColumn(\"column\", \"LOGIC_TABLE\"));\n    }\n","date":"2021-07-22 21:13:29","endLine":206,"groupId":"10624","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIsShardingColumnForDefaultDatabaseShardingStrategy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/75/ef282d42d32c835730eae18a23bfb6190d6cd1.src","preCode":"    public void assertIsShardingColumnForDefaultDatabaseShardingStrategy() {\n        ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();\n        shardingRuleConfig.getTables().add(createTableRuleConfigWithAllStrategies());\n        shardingRuleConfig.setDefaultDatabaseShardingStrategy(new StandardShardingStrategyConfiguration(\"column\", \"STANDARD_TEST\"));\n        shardingRuleConfig.getShardingAlgorithms().put(\"standard\", new ShardingSphereAlgorithmConfiguration(\"STANDARD_TEST\", new Properties()));\n        assertTrue(new ShardingRule(shardingRuleConfig, createDataSourceMap(), Sets.newHashSet()).isShardingColumn(\"column\", \"LOGIC_TABLE\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rule/ShardingRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"},{"authorDate":"2021-07-22 21:13:29","commitOrder":4,"curCode":"    public void assertIsShardingColumnForDefaultTableShardingStrategy() {\n        ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();\n        shardingRuleConfig.getTables().add(createTableRuleConfigWithAllStrategies());\n        shardingRuleConfig.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"column\", \"STANDARD_TEST\"));\n        shardingRuleConfig.getShardingAlgorithms().put(\"standard\", new ShardingSphereAlgorithmConfiguration(\"STANDARD_TEST\", new Properties()));\n        assertTrue(new ShardingRule(shardingRuleConfig, createDataSourceMap()).isShardingColumn(\"column\", \"LOGIC_TABLE\"));\n    }\n","date":"2021-07-22 21:13:29","endLine":215,"groupId":"10624","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertIsShardingColumnForDefaultTableShardingStrategy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/75/ef282d42d32c835730eae18a23bfb6190d6cd1.src","preCode":"    public void assertIsShardingColumnForDefaultTableShardingStrategy() {\n        ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();\n        shardingRuleConfig.getTables().add(createTableRuleConfigWithAllStrategies());\n        shardingRuleConfig.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"column\", \"STANDARD_TEST\"));\n        shardingRuleConfig.getShardingAlgorithms().put(\"standard\", new ShardingSphereAlgorithmConfiguration(\"STANDARD_TEST\", new Properties()));\n        assertTrue(new ShardingRule(shardingRuleConfig, createDataSourceMap(), Sets.newHashSet()).isShardingColumn(\"column\", \"LOGIC_TABLE\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rule/ShardingRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"}],"commitId":"ed1da8e16b69f8d961b960f291b2962860deee3e","commitMessage":"@@@aggregate datasource for single table rule (#11456)\n\n* aggregate datasource for single table rule\n\n* Adjust rule load order\n\n* fix test case\n\n* fix federate statement test error\n\n* fix governance test\n\n* fix test case\n\n* fix test case\n\n* fix integrate test with single table conflict","date":"2021-07-22 21:13:29","modifiedFileCount":"40","status":"M","submitter":"Zhengqiang Duan"}]
