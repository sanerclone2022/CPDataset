[{"authorTime":"2021-07-12 16:49:41","codes":[{"authorDate":"2021-07-12 16:49:41","commitOrder":2,"curCode":"    public void assertRegister() {\n        String statementId = \"stat-id\";\n        String sql = \"select * from t_order\";\n        PostgreSQLBinaryStatementRegistry.getInstance().register(1);\n        PostgreSQLBinaryStatementRegistry.getInstance().register(1, statementId, sql, mock(SQLStatement.class), Collections.emptyList());\n        PostgreSQLBinaryStatement binaryStatement = PostgreSQLBinaryStatementRegistry.getInstance().get(1, statementId);\n        assertThat(binaryStatement.getSql(), is(sql));\n        assertThat(binaryStatement.getColumnTypes().size(), is(0));\n    }\n","date":"2021-07-12 16:49:41","endLine":44,"groupId":"2861","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRegister","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b3/5a53a6a6f309f8faebca7d7cbb8bd5e56f5f0c.src","preCode":"    public void assertRegister() {\n        String statementId = \"stat-id\";\n        String sql = \"select * from t_order\";\n        PostgreSQLBinaryStatementRegistry.getInstance().register(1);\n        PostgreSQLBinaryStatementRegistry.getInstance().register(1, statementId, sql, mock(SQLStatement.class), Collections.emptyList());\n        PostgreSQLBinaryStatement binaryStatement = PostgreSQLBinaryStatementRegistry.getInstance().get(1, statementId);\n        assertThat(binaryStatement.getSql(), is(sql));\n        assertThat(binaryStatement.getColumnTypes().size(), is(0));\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/command/query/binary/PostgreSQLBinaryStatementRegistryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"MB"},{"authorDate":"2021-07-12 16:49:41","commitOrder":2,"curCode":"    public void assertUnregister() {\n        String statementId = \"stat-id\";\n        String sql = \"select * from t_order\";\n        PostgreSQLBinaryStatementRegistry.getInstance().register(1, statementId, sql, mock(SQLStatement.class), Collections.emptyList());\n        PostgreSQLBinaryStatement binaryStatement = PostgreSQLBinaryStatementRegistry.getInstance().get(1, statementId);\n        assertNotNull(binaryStatement);\n        PostgreSQLBinaryStatementRegistry.getInstance().unregister(1, statementId);\n        binaryStatement = PostgreSQLBinaryStatementRegistry.getInstance().get(1, \"stat-no-exists\");\n        assertThat(binaryStatement.getSqlStatement(), instanceOf(EmptyStatement.class));\n    }\n","date":"2021-07-12 16:49:41","endLine":63,"groupId":"2863","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertUnregister","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b3/5a53a6a6f309f8faebca7d7cbb8bd5e56f5f0c.src","preCode":"    public void assertUnregister() {\n        String statementId = \"stat-id\";\n        String sql = \"select * from t_order\";\n        PostgreSQLBinaryStatementRegistry.getInstance().register(1, statementId, sql, mock(SQLStatement.class), Collections.emptyList());\n        PostgreSQLBinaryStatement binaryStatement = PostgreSQLBinaryStatementRegistry.getInstance().get(1, statementId);\n        assertNotNull(binaryStatement);\n        PostgreSQLBinaryStatementRegistry.getInstance().unregister(1, statementId);\n        binaryStatement = PostgreSQLBinaryStatementRegistry.getInstance().get(1, \"stat-no-exists\");\n        assertThat(binaryStatement.getSqlStatement(), instanceOf(EmptyStatement.class));\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/command/query/binary/PostgreSQLBinaryStatementRegistryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"MB"}],"commitId":"89b2506156a91b18a14942608169db9feec2839e","commitMessage":"@@@Revert handling for unregister of PostgreSQLBinaryStatementRegistry (#11278)\n\n* Revert handling for unregister of PostgreSQLBinaryStatementRegistry\n\n* fix tests\n\n* remove redundant line\n\n* remove redundant line","date":"2021-07-12 16:49:41","modifiedFileCount":"15","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-07-12 16:49:41","codes":[{"authorDate":"2021-07-27 13:57:46","commitOrder":3,"curCode":"    public void assertRegister() {\n        String statementId = \"stat-id\";\n        String sql = \"select * from t_order\";\n        PostgreSQLBinaryStatementRegistry.getInstance().register(1);\n        PostgreSQLBinaryStatementRegistry.getInstance().register(1, statementId, sql, mock(SQLStatement.class), Collections.emptyList());\n        PostgreSQLBinaryStatement binaryStatement = PostgreSQLBinaryStatementRegistry.getInstance().get(1, statementId);\n        assertThat(binaryStatement.getSql(), is(sql));\n        assertTrue(binaryStatement.getColumnTypes().isEmpty());\n    }\n","date":"2021-07-27 13:57:46","endLine":45,"groupId":"101212","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertRegister","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/76/51e91d24afaf0d218d064ce6cdfdc18aa74ab9.src","preCode":"    public void assertRegister() {\n        String statementId = \"stat-id\";\n        String sql = \"select * from t_order\";\n        PostgreSQLBinaryStatementRegistry.getInstance().register(1);\n        PostgreSQLBinaryStatementRegistry.getInstance().register(1, statementId, sql, mock(SQLStatement.class), Collections.emptyList());\n        PostgreSQLBinaryStatement binaryStatement = PostgreSQLBinaryStatementRegistry.getInstance().get(1, statementId);\n        assertThat(binaryStatement.getSql(), is(sql));\n        assertThat(binaryStatement.getColumnTypes().size(), is(0));\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/command/query/binary/PostgreSQLBinaryStatementRegistryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2021-07-12 16:49:41","commitOrder":3,"curCode":"    public void assertUnregister() {\n        String statementId = \"stat-id\";\n        String sql = \"select * from t_order\";\n        PostgreSQLBinaryStatementRegistry.getInstance().register(1, statementId, sql, mock(SQLStatement.class), Collections.emptyList());\n        PostgreSQLBinaryStatement binaryStatement = PostgreSQLBinaryStatementRegistry.getInstance().get(1, statementId);\n        assertNotNull(binaryStatement);\n        PostgreSQLBinaryStatementRegistry.getInstance().unregister(1, statementId);\n        binaryStatement = PostgreSQLBinaryStatementRegistry.getInstance().get(1, \"stat-no-exists\");\n        assertThat(binaryStatement.getSqlStatement(), instanceOf(EmptyStatement.class));\n    }\n","date":"2021-07-12 16:49:41","endLine":63,"groupId":"101212","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertUnregister","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b3/5a53a6a6f309f8faebca7d7cbb8bd5e56f5f0c.src","preCode":"    public void assertUnregister() {\n        String statementId = \"stat-id\";\n        String sql = \"select * from t_order\";\n        PostgreSQLBinaryStatementRegistry.getInstance().register(1, statementId, sql, mock(SQLStatement.class), Collections.emptyList());\n        PostgreSQLBinaryStatement binaryStatement = PostgreSQLBinaryStatementRegistry.getInstance().get(1, statementId);\n        assertNotNull(binaryStatement);\n        PostgreSQLBinaryStatementRegistry.getInstance().unregister(1, statementId);\n        binaryStatement = PostgreSQLBinaryStatementRegistry.getInstance().get(1, \"stat-no-exists\");\n        assertThat(binaryStatement.getSqlStatement(), instanceOf(EmptyStatement.class));\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/command/query/binary/PostgreSQLBinaryStatementRegistryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"}],"commitId":"a2a03362cd71d2e11d4067f9215ca2bd344b5a5d","commitMessage":"@@@Use assertTrue(xxx.isEmpty()) to instead of assertThat(xxx.size().  is(0)) (#11531)\n\n","date":"2021-07-27 13:57:46","modifiedFileCount":"21","status":"M","submitter":"Liang Zhang"}]
