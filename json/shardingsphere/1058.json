[{"authorTime":"2021-01-06 16:11:47","codes":[{"authorDate":"2021-01-06 16:11:47","commitOrder":1,"curCode":"    public void assertMethod() {\n        MockTargetObject targetObject = new MockTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertThat(spans.get(0).logEntries().size(), is(0));\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-01-06 16:11:47","endLine":89,"groupId":"11704","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/17/139439b52b2635dad91bd44bc58b2dacec31b5.src","preCode":"    public void assertMethod() {\n        MockTargetObject targetObject = new MockTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertThat(spans.get(0).logEntries().size(), is(0));\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-opentracing/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/opentracing/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"},{"authorDate":"2021-01-06 16:11:47","commitOrder":1,"curCode":"    public void assertExceptionHandle() {\n        MockTargetObject targetObject = new MockTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.onThrowing(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new IOException());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-01-06 16:11:47","endLine":114,"groupId":"11788","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExceptionHandle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/17/139439b52b2635dad91bd44bc58b2dacec31b5.src","preCode":"    public void assertExceptionHandle() {\n        MockTargetObject targetObject = new MockTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.onThrowing(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new IOException());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-opentracing/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/opentracing/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"}],"commitId":"190d66495ea798024b782d96fe4ca71a9d007797","commitMessage":"@@@add agent tracing test (#8910)\n\n","date":"2021-01-06 16:11:47","modifiedFileCount":"7","status":"B","submitter":"xiaoyu"},{"authorTime":"2021-01-12 10:35:24","codes":[{"authorDate":"2021-01-12 10:35:24","commitOrder":2,"curCode":"    public void assertMethod() {\n        MockAdviceTargetObject targetObject = new MockAdviceTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertThat(spans.get(0).logEntries().size(), is(0));\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-01-12 10:35:24","endLine":89,"groupId":"11704","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/73/dac277bd9924f6fda24b8b803af225abb5b1c9.src","preCode":"    public void assertMethod() {\n        MockTargetObject targetObject = new MockTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertThat(spans.get(0).logEntries().size(), is(0));\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-opentracing/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/opentracing/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2021-01-12 10:35:24","commitOrder":2,"curCode":"    public void assertExceptionHandle() {\n        MockAdviceTargetObject targetObject = new MockAdviceTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.onThrowing(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new IOException());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-01-12 10:35:24","endLine":114,"groupId":"11788","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExceptionHandle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/73/dac277bd9924f6fda24b8b803af225abb5b1c9.src","preCode":"    public void assertExceptionHandle() {\n        MockTargetObject targetObject = new MockTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.onThrowing(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new IOException());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-opentracing/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/opentracing/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"c75652dbf13f60b4572abc2f7a68c24bb84e6bd4","commitMessage":"@@@support to instrument the same method repeatedly (#8986)\n\n* support to instrument the same method repeatedly\n\n* fix wrong hand","date":"2021-01-12 10:35:24","modifiedFileCount":"32","status":"M","submitter":"Daming"},{"authorTime":"2021-07-27 07:22:30","codes":[{"authorDate":"2021-07-27 07:22:30","commitOrder":3,"curCode":"    public void assertMethod() {\n        MockAdviceTargetObject targetObject = new MockAdviceTargetObject();\n        Map<String, Object> extraMap = Collections.singletonMap(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertThat(spans.get(0).logEntries().size(), is(0));\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-07-27 07:22:30","endLine":89,"groupId":"11704","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/01/c4def6d648bb57971bab67aebb4a5c640d531c.src","preCode":"    public void assertMethod() {\n        MockAdviceTargetObject targetObject = new MockAdviceTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertThat(spans.get(0).logEntries().size(), is(0));\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-opentracing/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/opentracing/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2021-07-27 07:22:30","commitOrder":3,"curCode":"    public void assertExceptionHandle() {\n        MockAdviceTargetObject targetObject = new MockAdviceTargetObject();\n        Map<String, Object> extraMap = Collections.singletonMap(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.onThrowing(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new IOException());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-07-27 07:22:30","endLine":113,"groupId":"11788","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExceptionHandle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/01/c4def6d648bb57971bab67aebb4a5c640d531c.src","preCode":"    public void assertExceptionHandle() {\n        MockAdviceTargetObject targetObject = new MockAdviceTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.onThrowing(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new IOException());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-opentracing/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/opentracing/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"6d7e3fe33533f8d8dd098e81d667ce57aabd625a","commitMessage":"@@@Use raw new HashMap to instead of guava (#11517)\n\n* Use raw new HashMap to instead of guava\n\n* Use raw new HashMap to instead of guava","date":"2021-07-27 07:22:30","modifiedFileCount":"69","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-27 07:22:30","codes":[{"authorDate":"2021-07-27 13:57:46","commitOrder":4,"curCode":"    public void assertMethod() {\n        MockAdviceTargetObject targetObject = new MockAdviceTargetObject();\n        Map<String, Object> extraMap = Collections.singletonMap(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertTrue(spans.get(0).logEntries().isEmpty());\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-07-27 13:57:46","endLine":90,"groupId":"11704","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/00/4938cfb29952836ed7794c5bceba6746e41852.src","preCode":"    public void assertMethod() {\n        MockAdviceTargetObject targetObject = new MockAdviceTargetObject();\n        Map<String, Object> extraMap = Collections.singletonMap(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertThat(spans.get(0).logEntries().size(), is(0));\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-opentracing/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/opentracing/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2021-07-27 07:22:30","commitOrder":4,"curCode":"    public void assertExceptionHandle() {\n        MockAdviceTargetObject targetObject = new MockAdviceTargetObject();\n        Map<String, Object> extraMap = Collections.singletonMap(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.onThrowing(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new IOException());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-07-27 07:22:30","endLine":113,"groupId":"11788","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExceptionHandle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/01/c4def6d648bb57971bab67aebb4a5c640d531c.src","preCode":"    public void assertExceptionHandle() {\n        MockAdviceTargetObject targetObject = new MockAdviceTargetObject();\n        Map<String, Object> extraMap = Collections.singletonMap(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.onThrowing(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new IOException());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-opentracing/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/opentracing/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"}],"commitId":"a2a03362cd71d2e11d4067f9215ca2bd344b5a5d","commitMessage":"@@@Use assertTrue(xxx.isEmpty()) to instead of assertThat(xxx.size().  is(0)) (#11531)\n\n","date":"2021-07-27 13:57:46","modifiedFileCount":"21","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-29 01:03:53","codes":[{"authorDate":"2021-07-29 01:03:53","commitOrder":5,"curCode":"    public void assertMethod() {\n        MockAdviceTargetObject targetObject = new MockAdviceTargetObject();\n        Map<String, Object> extraMap = Collections.singletonMap(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Collections.emptyList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertTrue(spans.get(0).logEntries().isEmpty());\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-07-29 01:03:53","endLine":89,"groupId":"1058","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"assertMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d0/0dde2845bac664062ac4755d251cb844c16b22.src","preCode":"    public void assertMethod() {\n        MockAdviceTargetObject targetObject = new MockAdviceTargetObject();\n        Map<String, Object> extraMap = Collections.singletonMap(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertTrue(spans.get(0).logEntries().isEmpty());\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-opentracing/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/opentracing/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2021-07-29 01:03:53","commitOrder":5,"curCode":"    public void assertExceptionHandle() {\n        MockAdviceTargetObject targetObject = new MockAdviceTargetObject();\n        Map<String, Object> extraMap = Collections.singletonMap(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Collections.emptyList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.onThrowing(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new IOException());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-07-29 01:03:53","endLine":113,"groupId":"1058","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"assertExceptionHandle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d0/0dde2845bac664062ac4755d251cb844c16b22.src","preCode":"    public void assertExceptionHandle() {\n        MockAdviceTargetObject targetObject = new MockAdviceTargetObject();\n        Map<String, Object> extraMap = Collections.singletonMap(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.onThrowing(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new IOException());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-opentracing/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/opentracing/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"6d2d2ba7b05c29bce74525f0437e04b22a556f66","commitMessage":"@@@Use java raw new List/Set/Map to instead of guava (#11561)\n\n* Use java raw new Map to instead of guava\n\n* Use java raw new List to instead of guava\n\n* Use java raw new Set to instead of guava","date":"2021-07-29 01:03:53","modifiedFileCount":"78","status":"M","submitter":"Liang Zhang"}]
