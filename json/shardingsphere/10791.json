[{"authorTime":"2021-07-05 13:20:27","codes":[{"authorDate":"2021-09-03 18:48:47","commitOrder":2,"curCode":"    private void prepareMock() {\n        Field field = OpenGaussFrontendEngine.class.getDeclaredField(\"postgreSQLFrontendEngine\");\n        field.setAccessible(true);\n        Field modifiers = Field.class.getDeclaredField(\"modifiers\");\n        modifiers.setAccessible(true);\n        modifiers.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n        field.set(openGaussFrontendEngine, mockPostgreSQLFrontendEngine);\n    }\n","date":"2021-09-03 18:48:47","endLine":61,"groupId":"9495","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"prepareMock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/16/285e7e1fcf546d9caf2faa6de8d9eaad92d792.src","preCode":"    private void prepareMock() {\n        Field field = OpenGaussFrontendEngine.class.getDeclaredField(\"postgreSQLFrontendEngine\");\n        field.setAccessible(true);\n        Field modifiers = Field.class.getDeclaredField(\"modifiers\");\n        modifiers.setAccessible(true);\n        modifiers.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n        field.set(openGaussFrontendEngine, mockPostgreSQLFrontendEngine);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-opengauss/src/test/java/org/apache/shardingsphere/proxy/frontend/opengauss/OpenGaussFrontendEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2021-07-05 13:20:27","commitOrder":2,"curCode":"    public void assertParse() throws NoSuchFieldException, IllegalAccessException {\n        SQLParserExecutor sqlParserExecutor = mock(SQLParserExecutor.class);\n        when(sqlParserExecutor.parse(SQL)).thenReturn(mock(ParseTree.class));\n        SQLParserEngine sqlParserEngine = new SQLParserEngine(\"H2\");\n        Field sqlParserExecutorFiled = sqlParserEngine.getClass().getDeclaredField(\"sqlParserExecutor\");\n        Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n        modifiersField.setAccessible(true);\n        modifiersField.setInt(sqlParserExecutorFiled, sqlParserExecutorFiled.getModifiers() & ~Modifier.FINAL);\n        Field modifiersField2 = Field.class.getDeclaredField(\"modifiers\");\n        modifiersField2.setAccessible(true);\n        Field parseTreeCacheField = sqlParserEngine.getClass().getDeclaredField(\"parseTreeCache\");\n        modifiersField2.setInt(parseTreeCacheField, sqlParserExecutorFiled.getModifiers() & ~Modifier.FINAL);\n        sqlParserExecutorFiled.setAccessible(true);\n        parseTreeCacheField.setAccessible(true);\n        sqlParserExecutorFiled.set(sqlParserEngine, sqlParserExecutor);\n        LoadingCache<String, ParseTree> parseTreeCache = CacheBuilder.newBuilder().softValues().initialCapacity(128)\n                .maximumSize(1024).concurrencyLevel(4).build(new CacheLoader<String, ParseTree>() {\n                    @ParametersAreNonnullByDefault\n                    @Override\n                    public ParseTree load(final String sql) {\n                        return sqlParserExecutor.parse(sql);\n                    }\n                });\n        parseTreeCacheField.set(sqlParserEngine, parseTreeCache);\n        sqlParserEngine.parse(SQL, true);\n        verify(sqlParserExecutor, times(1)).parse(SQL);\n        sqlParserEngine.parse(SQL, true);\n        verify(sqlParserExecutor, times(1)).parse(SQL);\n        sqlParserEngine.parse(SQL, false);\n        verify(sqlParserExecutor, times(2)).parse(SQL);\n    }\n","date":"2021-07-05 13:20:27","endLine":72,"groupId":"9694","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertParse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b2/4da02d735c9fad359849de02551aea820245e7.src","preCode":"    public void assertParse() throws NoSuchFieldException, IllegalAccessException {\n        SQLParserExecutor sqlParserExecutor = mock(SQLParserExecutor.class);\n        when(sqlParserExecutor.parse(SQL)).thenReturn(mock(ParseTree.class));\n        SQLParserEngine sqlParserEngine = new SQLParserEngine(\"H2\");\n        Field sqlParserExecutorFiled = sqlParserEngine.getClass().getDeclaredField(\"sqlParserExecutor\");\n        Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n        modifiersField.setAccessible(true);\n        modifiersField.setInt(sqlParserExecutorFiled, sqlParserExecutorFiled.getModifiers() & ~Modifier.FINAL);\n        Field modifiersField2 = Field.class.getDeclaredField(\"modifiers\");\n        modifiersField2.setAccessible(true);\n        Field parseTreeCacheField = sqlParserEngine.getClass().getDeclaredField(\"parseTreeCache\");\n        modifiersField2.setInt(parseTreeCacheField, sqlParserExecutorFiled.getModifiers() & ~Modifier.FINAL);\n        sqlParserExecutorFiled.setAccessible(true);\n        parseTreeCacheField.setAccessible(true);\n        sqlParserExecutorFiled.set(sqlParserEngine, sqlParserExecutor);\n        LoadingCache<String, ParseTree> parseTreeCache = CacheBuilder.newBuilder().softValues().initialCapacity(128)\n                .maximumSize(1024).concurrencyLevel(4).build(new CacheLoader<String, ParseTree>() {\n                    @ParametersAreNonnullByDefault\n                    @Override\n                    public ParseTree load(final String sql) {\n                        return sqlParserExecutor.parse(sql);\n                    }\n                });\n        parseTreeCacheField.set(sqlParserEngine, parseTreeCache);\n        sqlParserEngine.parse(SQL, true);\n        verify(sqlParserExecutor, times(1)).parse(SQL);\n        sqlParserEngine.parse(SQL, true);\n        verify(sqlParserExecutor, times(1)).parse(SQL);\n        sqlParserEngine.parse(SQL, false);\n        verify(sqlParserExecutor, times(2)).parse(SQL);\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-engine/src/test/java/org/apache/shardingsphere/sql/parser/api/SQLParserEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"NB"}],"commitId":"14c6902a2221b0743b224504191f59b04eb950c5","commitMessage":"@@@Adds support for openGauss (#12149)\n\n* ShardingSphere Proxy supports openGauss\n\n* Add openGauss into OptimizeContextFactory\n\n* Add openGauss XA\n\n* Add openGauss SQL parser dialect\n\n* Unify letter case for openGauss\n\n* Update javadoc for openGauss\n\n* Update proxy distribution for openGauss\n\n* Update kunpeng repository\n\n* Adapt openGauss PSQLException\n\n* Add default errorcode in OpenGaussErrorResponsePacket\n\n* Update javadoc for OpenGaussComBatchBindPacket\n\n* Complete unit tests in transaction-xa-core\n\n* Complete unit tests in proxy-backend\n\n* Add todo unit tests for openGauss\n\n* Rename constants in OpenGaussErrorResponsePacket\n\n* Complete unit tests for db-protocol-opengauss\n\n* Remove redundant @Getter in OpenGaussFrontendEngine\n\n* Fix checkstyle in OpenGaussErrorResponsePacketTest\n\n* Decouple openGauss dependency from transaction-xa-core\n\n* Decouple openGauss dependency\n\n* Fix checkstyle in transaction-xa-core\n\n* Remove unused properties in pom.xml\n\n* Remove unused OpenGaussIdentifierPacket\n\n* Revert changes in proxy-distribution pom\n\n* Remove OpenGaussErrorPacketFactoryTest\n\n* Fix OpenGaussErrorResponsePacketTest\n\n* Fix OpenGaussComBatchBindExecutor\n\n* Remove unused throws","date":"2021-09-03 18:48:47","modifiedFileCount":"4","status":"M","submitter":"???"},{"authorTime":"2021-09-16 19:04:46","codes":[{"authorDate":"2021-09-03 18:48:47","commitOrder":3,"curCode":"    private void prepareMock() {\n        Field field = OpenGaussFrontendEngine.class.getDeclaredField(\"postgreSQLFrontendEngine\");\n        field.setAccessible(true);\n        Field modifiers = Field.class.getDeclaredField(\"modifiers\");\n        modifiers.setAccessible(true);\n        modifiers.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n        field.set(openGaussFrontendEngine, mockPostgreSQLFrontendEngine);\n    }\n","date":"2021-09-03 18:48:47","endLine":61,"groupId":"10791","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"prepareMock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/16/285e7e1fcf546d9caf2faa6de8d9eaad92d792.src","preCode":"    private void prepareMock() {\n        Field field = OpenGaussFrontendEngine.class.getDeclaredField(\"postgreSQLFrontendEngine\");\n        field.setAccessible(true);\n        Field modifiers = Field.class.getDeclaredField(\"modifiers\");\n        modifiers.setAccessible(true);\n        modifiers.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n        field.set(openGaussFrontendEngine, mockPostgreSQLFrontendEngine);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-opengauss/src/test/java/org/apache/shardingsphere/proxy/frontend/opengauss/OpenGaussFrontendEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"},{"authorDate":"2021-09-16 19:04:46","commitOrder":3,"curCode":"    public void assertParse() throws NoSuchFieldException, IllegalAccessException {\n        SQLParserExecutor sqlParserExecutor = mock(SQLParserExecutor.class);\n        when(sqlParserExecutor.parse(SQL)).thenReturn(mock(ParseContext.class));\n        SQLParserEngine sqlParserEngine = new SQLParserEngine(\"H2\", false);\n        Field sqlParserExecutorFiled = sqlParserEngine.getClass().getDeclaredField(\"sqlParserExecutor\");\n        Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n        modifiersField.setAccessible(true);\n        modifiersField.setInt(sqlParserExecutorFiled, sqlParserExecutorFiled.getModifiers() & ~Modifier.FINAL);\n        Field modifiersField2 = Field.class.getDeclaredField(\"modifiers\");\n        modifiersField2.setAccessible(true);\n        Field parseTreeCacheField = sqlParserEngine.getClass().getDeclaredField(\"parseTreeCache\");\n        modifiersField2.setInt(parseTreeCacheField, sqlParserExecutorFiled.getModifiers() & ~Modifier.FINAL);\n        sqlParserExecutorFiled.setAccessible(true);\n        parseTreeCacheField.setAccessible(true);\n        sqlParserExecutorFiled.set(sqlParserEngine, sqlParserExecutor);\n        LoadingCache<String, ParseContext> parseTreeCache = CacheBuilder.newBuilder().softValues().initialCapacity(128)\n                .maximumSize(1024).concurrencyLevel(4).build(new CacheLoader<String, ParseContext>() {\n                    @ParametersAreNonnullByDefault\n                    @Override\n                    public ParseContext load(final String sql) {\n                        return sqlParserExecutor.parse(sql);\n                    }\n                });\n        parseTreeCacheField.set(sqlParserEngine, parseTreeCache);\n        sqlParserEngine.parse(SQL, true);\n        verify(sqlParserExecutor, times(1)).parse(SQL);\n        sqlParserEngine.parse(SQL, true);\n        verify(sqlParserExecutor, times(1)).parse(SQL);\n        sqlParserEngine.parse(SQL, false);\n        verify(sqlParserExecutor, times(2)).parse(SQL);\n    }\n","date":"2021-09-16 19:04:46","endLine":72,"groupId":"10791","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertParse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d4/7ebeed1046045b1861e4da6dee833dfd5416fb.src","preCode":"    public void assertParse() throws NoSuchFieldException, IllegalAccessException {\n        SQLParserExecutor sqlParserExecutor = mock(SQLParserExecutor.class);\n        when(sqlParserExecutor.parse(SQL)).thenReturn(mock(ParseTree.class));\n        SQLParserEngine sqlParserEngine = new SQLParserEngine(\"H2\");\n        Field sqlParserExecutorFiled = sqlParserEngine.getClass().getDeclaredField(\"sqlParserExecutor\");\n        Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n        modifiersField.setAccessible(true);\n        modifiersField.setInt(sqlParserExecutorFiled, sqlParserExecutorFiled.getModifiers() & ~Modifier.FINAL);\n        Field modifiersField2 = Field.class.getDeclaredField(\"modifiers\");\n        modifiersField2.setAccessible(true);\n        Field parseTreeCacheField = sqlParserEngine.getClass().getDeclaredField(\"parseTreeCache\");\n        modifiersField2.setInt(parseTreeCacheField, sqlParserExecutorFiled.getModifiers() & ~Modifier.FINAL);\n        sqlParserExecutorFiled.setAccessible(true);\n        parseTreeCacheField.setAccessible(true);\n        sqlParserExecutorFiled.set(sqlParserEngine, sqlParserExecutor);\n        LoadingCache<String, ParseTree> parseTreeCache = CacheBuilder.newBuilder().softValues().initialCapacity(128)\n                .maximumSize(1024).concurrencyLevel(4).build(new CacheLoader<String, ParseTree>() {\n                    @ParametersAreNonnullByDefault\n                    @Override\n                    public ParseTree load(final String sql) {\n                        return sqlParserExecutor.parse(sql);\n                    }\n                });\n        parseTreeCacheField.set(sqlParserEngine, parseTreeCache);\n        sqlParserEngine.parse(SQL, true);\n        verify(sqlParserExecutor, times(1)).parse(SQL);\n        sqlParserEngine.parse(SQL, true);\n        verify(sqlParserExecutor, times(1)).parse(SQL);\n        sqlParserEngine.parse(SQL, false);\n        verify(sqlParserExecutor, times(2)).parse(SQL);\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-engine/src/test/java/org/apache/shardingsphere/sql/parser/api/SQLParserEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"ac7987451dd9e7fbde62c5add0224ba740bb20c9","commitMessage":"@@@Support sql annotation analysis (#12280)\n\n* Sql comments parse.\n\n* Add test case.\n\n* Add empty line.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* Add switch for sql comment parsing.\n\n* fix properties error.\n\n* fix properties error.\n\n* Revert \"fix properties error.\"\n\nThis reverts commit 2b50a4ef\n\n* Revert \"fix properties error.\"\n\nThis reverts commit 2ca3ca86\n\n* Revert \"Add switch for sql comment parsing.\"\n\nThis reverts commit 70ed1039\n\n* add switch for sql comment parse\n\n* add switch for sql comment parse\n\n* add switch for sql comment parse\n\n* add switch for sql comment parse\n\n* fix review suggestions\n\n* fix review suggestions","date":"2021-09-16 19:04:46","modifiedFileCount":"57","status":"M","submitter":"tuichenchuxin"}]
