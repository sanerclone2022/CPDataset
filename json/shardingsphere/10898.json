[{"authorTime":"2020-12-04 15:20:12","codes":[{"authorDate":"2020-11-04 18:35:25","commitOrder":2,"curCode":"    private Map<String, ShardingSphereMetaData> createMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            result.put(String.format(SCHEMA_PATTERN, i), mock(ShardingSphereMetaData.class));\n        }\n        return result;\n    }\n","date":"2020-11-04 18:35:25","endLine":117,"groupId":"11785","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/35/c56ca128ea62880e044d1d37afb10f33120c22.src","preCode":"    private Map<String, ShardingSphereMetaData> createMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            result.put(String.format(SCHEMA_PATTERN, i), mock(ShardingSphereMetaData.class));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/context/ProxyContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"NB"},{"authorDate":"2020-12-04 15:20:12","commitOrder":2,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2020-12-04 15:20:12","endLine":95,"groupId":"3497","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/55/eca63944f9aef15da7dee08b47852c523713ce.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/UnicastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"B"}],"commitId":"cb6b0622bf268a3d509e7f52876246cc31fecbcb","commitMessage":"@@@Fixes #8488. (#8499)\n\n* add DatabaseBackendHandlerTest\n\n* add UnitTest for DatabaseBackendHandlerFactory. SchemaAssignedDatabaseBackendHandler. UnicastDatabaseBackendHandler\n\n* adjust code style","date":"2020-12-04 15:20:12","modifiedFileCount":"0","status":"M","submitter":"arthasking123"},{"authorTime":"2020-12-04 15:20:12","codes":[{"authorDate":"2020-12-21 19:41:50","commitOrder":3,"curCode":"    private Map<String, ShardingSphereMetaData> createMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2020-12-21 19:41:50","endLine":141,"groupId":"2329","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0e/9fdd03d32a25e1d9714d09ca99d31b12d5c191.src","preCode":"    private Map<String, ShardingSphereMetaData> createMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            result.put(String.format(SCHEMA_PATTERN, i), mock(ShardingSphereMetaData.class));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/context/ProxyContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2020-12-04 15:20:12","commitOrder":3,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2020-12-04 15:20:12","endLine":95,"groupId":"3497","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/55/eca63944f9aef15da7dee08b47852c523713ce.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/UnicastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"}],"commitId":"3ee15900a04d687e85528a831f68883a12b8e82e","commitMessage":"@@@add CalciteContextFactory to MetaDataContexts (#8701)\n\n* add CalciteContextFactory to MetaDataContexts\n\n* fix uts\n\n* use new instead of exception\n\n* support replica query rule for CalciteSchema\n\n* fix loading metadata\n\n* check style\n\n* fix tests","date":"2020-12-21 19:41:50","modifiedFileCount":"16","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-01-07 22:10:53","codes":[{"authorDate":"2020-12-21 19:41:50","commitOrder":4,"curCode":"    private Map<String, ShardingSphereMetaData> createMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2020-12-21 19:41:50","endLine":141,"groupId":"2329","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0e/9fdd03d32a25e1d9714d09ca99d31b12d5c191.src","preCode":"    private Map<String, ShardingSphereMetaData> createMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/context/ProxyContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"N"},{"authorDate":"2021-01-07 22:10:53","commitOrder":4,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-01-07 22:10:53","endLine":97,"groupId":"3497","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fc/066bafdad631bce779fae07fa69bd39d3a04bd.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/UnicastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"064e4867c8fb55da9761dc9c9784e51452c9046d","commitMessage":"@@@Support different Database types for Query optimization and fixed some bugs (#8918)\n\n* Support different Database types for Query optimization and fix some bugs\n\n* Support different Database types for Query optimization and fix some bugs\n\n* fix some problem\n\n* fixed some related problems\n\n* fixed some related problems\n\n* fixed some related problems\n\n* maked more clear\n\n* fixed some problems\n\n* fixed some problems\n\n* fixed some problems","date":"2021-01-07 22:10:53","modifiedFileCount":"15","status":"M","submitter":"Jieker"},{"authorTime":"2021-01-07 22:10:53","codes":[{"authorDate":"2021-06-24 15:39:40","commitOrder":5,"curCode":"    private Map<String, ShardingSphereMetaData> createMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            when(metaData.getSchema()).thenReturn(schema);\n            when(schema.getTables()).thenReturn(new HashMap<>());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-06-24 15:39:40","endLine":130,"groupId":"12363","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c8/cc8e8e5ca81fa762a99df3ac6ba5aa78b0c9c2.src","preCode":"    private Map<String, ShardingSphereMetaData> createMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/context/ProxyContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2021-01-07 22:10:53","commitOrder":5,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-01-07 22:10:53","endLine":97,"groupId":"3497","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fc/066bafdad631bce779fae07fa69bd39d3a04bd.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/UnicastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"b72ab3242674b4b64e61a3d4e1dd5c603c5bfcaa","commitMessage":"@@@Improve the initialization of OptimizeContextFactory for issue#10678 (#10840)\n\n* fixed 10678\n\n* fixed code\n\n* fixed 10678\n\n* test\n\n* fixed 10678\n\n* update test case\n\n* update test case\n\n* update test case\n\n* fix method error\n\n* checkstyle\n\n* fix ci and checkstyle\n\n* checkstyle\n\n* fix ci error\n\n* fix load table\n\n* Update StandardMetaDataContexts.java\n\n* Update dql-integration-test-cases.xml\n\n* Update FederateTableMetadata.java\n\n* Update OptimizeContextFactory.java\n\n* Update SchemaBuilder.java\n\n* Update FederateSchemaMetadatas.java","date":"2021-06-24 15:39:40","modifiedFileCount":"20","status":"M","submitter":"totalo"},{"authorTime":"2021-01-07 22:10:53","codes":[{"authorDate":"2021-07-27 07:22:30","commitOrder":6,"curCode":"    private Map<String, ShardingSphereMetaData> createMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            result.put(String.format(SCHEMA_PATTERN, i), mock(ShardingSphereMetaData.class));\n        }\n        return result;\n    }\n","date":"2021-07-27 07:22:30","endLine":121,"groupId":"11785","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ee/7e9005b1e55a75d060de3aa4da7448f8d8c0f5.src","preCode":"    private Map<String, ShardingSphereMetaData> createMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            when(metaData.getSchema()).thenReturn(schema);\n            when(schema.getTables()).thenReturn(new HashMap<>());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/context/ProxyContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2021-01-07 22:10:53","commitOrder":6,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-01-07 22:10:53","endLine":97,"groupId":"3497","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fc/066bafdad631bce779fae07fa69bd39d3a04bd.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/UnicastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"6d7e3fe33533f8d8dd098e81d667ce57aabd625a","commitMessage":"@@@Use raw new HashMap to instead of guava (#11517)\n\n* Use raw new HashMap to instead of guava\n\n* Use raw new HashMap to instead of guava","date":"2021-07-27 07:22:30","modifiedFileCount":"69","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-05 15:36:01","codes":[{"authorDate":"2021-07-27 07:22:30","commitOrder":7,"curCode":"    private Map<String, ShardingSphereMetaData> createMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            result.put(String.format(SCHEMA_PATTERN, i), mock(ShardingSphereMetaData.class));\n        }\n        return result;\n    }\n","date":"2021-07-27 07:22:30","endLine":121,"groupId":"11785","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ee/7e9005b1e55a75d060de3aa4da7448f8d8c0f5.src","preCode":"    private Map<String, ShardingSphereMetaData> createMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            result.put(String.format(SCHEMA_PATTERN, i), mock(ShardingSphereMetaData.class));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/context/ProxyContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"N"},{"authorDate":"2021-08-05 15:36:01","commitOrder":7,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-08-05 15:36:01","endLine":98,"groupId":"3497","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/77/807084aa5df147561fcf9940d5fb07670df749.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/UnicastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"d6daa411a55ec225fb40ac205046f6a47d532fb2","commitMessage":"@@@Check the initial capacity of HashMap (#11544)\n\n","date":"2021-08-05 15:36:01","modifiedFileCount":"12","status":"M","submitter":"yx9o"},{"authorTime":"2021-08-30 15:26:41","codes":[{"authorDate":"2021-07-27 07:22:30","commitOrder":8,"curCode":"    private Map<String, ShardingSphereMetaData> createMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            result.put(String.format(SCHEMA_PATTERN, i), mock(ShardingSphereMetaData.class));\n        }\n        return result;\n    }\n","date":"2021-07-27 07:22:30","endLine":121,"groupId":"10898","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ee/7e9005b1e55a75d060de3aa4da7448f8d8c0f5.src","preCode":"    private Map<String, ShardingSphereMetaData> createMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            result.put(String.format(SCHEMA_PATTERN, i), mock(ShardingSphereMetaData.class));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/context/ProxyContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"N"},{"authorDate":"2021-08-30 15:26:41","commitOrder":8,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.hasDataSource()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-08-30 15:26:41","endLine":102,"groupId":"10898","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fe/b53cc03a2a3972a991a481397df88d8c10e218.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/UnicastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"8f15bee1b425f7057f3a54ebcb84959efbaa7a58","commitMessage":"@@@Modify the judgment conditions of `BroadcastDatabaseBackendHandler.java` and `UnicastDatabaseBackendHandler.java` (#12098)\n\n* Modify the schema judgment condition.  there may be an empty schema.\n\n* Modify the schema judgment condition.  there may be an empty schema.","date":"2021-08-30 15:26:41","modifiedFileCount":"5","status":"M","submitter":"lanchengx"}]
