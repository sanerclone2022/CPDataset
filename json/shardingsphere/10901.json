[{"authorTime":"2020-12-04 15:20:12","codes":[{"authorDate":"2020-12-03 17:11:05","commitOrder":2,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2020-12-03 17:11:05","endLine":100,"groupId":"3497","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/30/368c1be21111e0efdc434987f5f162c08b0104.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/BroadcastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"NB"},{"authorDate":"2020-12-04 15:20:12","commitOrder":2,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2020-12-04 15:20:12","endLine":95,"groupId":"3497","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/55/eca63944f9aef15da7dee08b47852c523713ce.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/UnicastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"B"}],"commitId":"cb6b0622bf268a3d509e7f52876246cc31fecbcb","commitMessage":"@@@Fixes #8488. (#8499)\n\n* add DatabaseBackendHandlerTest\n\n* add UnitTest for DatabaseBackendHandlerFactory. SchemaAssignedDatabaseBackendHandler. UnicastDatabaseBackendHandler\n\n* adjust code style","date":"2020-12-04 15:20:12","modifiedFileCount":"0","status":"M","submitter":"arthasking123"},{"authorTime":"2021-01-07 22:10:53","codes":[{"authorDate":"2021-01-07 22:10:53","commitOrder":3,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-01-07 22:10:53","endLine":103,"groupId":"3497","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/00/6ce63ea567c60f5ef42dfd7bc22ebff4fa45ec.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/BroadcastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2021-01-07 22:10:53","commitOrder":3,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-01-07 22:10:53","endLine":97,"groupId":"3497","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fc/066bafdad631bce779fae07fa69bd39d3a04bd.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/UnicastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"064e4867c8fb55da9761dc9c9784e51452c9046d","commitMessage":"@@@Support different Database types for Query optimization and fixed some bugs (#8918)\n\n* Support different Database types for Query optimization and fix some bugs\n\n* Support different Database types for Query optimization and fix some bugs\n\n* fix some problem\n\n* fixed some related problems\n\n* fixed some related problems\n\n* fixed some related problems\n\n* maked more clear\n\n* fixed some problems\n\n* fixed some problems\n\n* fixed some problems","date":"2021-01-07 22:10:53","modifiedFileCount":"15","status":"M","submitter":"Jieker"},{"authorTime":"2021-08-05 15:36:01","codes":[{"authorDate":"2021-08-05 15:36:01","commitOrder":4,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-08-05 15:36:01","endLine":106,"groupId":"3497","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ef/2ebd2effe865915d9eb973cf21a773af7081e0.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/BroadcastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2021-08-05 15:36:01","commitOrder":4,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-08-05 15:36:01","endLine":98,"groupId":"3497","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/77/807084aa5df147561fcf9940d5fb07670df749.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/UnicastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"d6daa411a55ec225fb40ac205046f6a47d532fb2","commitMessage":"@@@Check the initial capacity of HashMap (#11544)\n\n","date":"2021-08-05 15:36:01","modifiedFileCount":"12","status":"M","submitter":"yx9o"},{"authorTime":"2021-08-30 15:26:41","codes":[{"authorDate":"2021-08-30 15:26:41","commitOrder":5,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.hasDataSource()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-08-30 15:26:41","endLine":110,"groupId":"10901","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/79/b23a07de5c44cf31a072de62d242221f29ffc8.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/BroadcastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2021-08-30 15:26:41","commitOrder":5,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.hasDataSource()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-08-30 15:26:41","endLine":102,"groupId":"10901","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fe/b53cc03a2a3972a991a481397df88d8c10e218.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/UnicastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"8f15bee1b425f7057f3a54ebcb84959efbaa7a58","commitMessage":"@@@Modify the judgment conditions of `BroadcastDatabaseBackendHandler.java` and `UnicastDatabaseBackendHandler.java` (#12098)\n\n* Modify the schema judgment condition.  there may be an empty schema.\n\n* Modify the schema judgment condition.  there may be an empty schema.","date":"2021-08-30 15:26:41","modifiedFileCount":"5","status":"M","submitter":"lanchengx"}]
