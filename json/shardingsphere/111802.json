[{"authorTime":"2020-08-03 18:11:18","codes":[{"authorDate":"2020-08-03 18:11:18","commitOrder":1,"curCode":"    private MergedResult decorate(final MergedResult mergedResult, final SQLStatementContext<?> sqlStatementContext) throws SQLException {\n        MergedResult result = null;\n        for (Entry<ShardingSphereRule, ResultProcessEngine> entry : engines.entrySet()) {\n            if (entry.getValue() instanceof ResultDecoratorEngine) {\n                ResultDecorator resultDecorator = ((ResultDecoratorEngine) entry.getValue()).newInstance(databaseType, schemaMetaData, entry.getKey(), props, sqlStatementContext);\n                result = null == result ? resultDecorator.decorate(mergedResult, sqlStatementContext, schemaMetaData) : resultDecorator.decorate(result, sqlStatementContext, schemaMetaData);\n            }\n        }\n        return null == result ? mergedResult : result;\n    }\n","date":"2020-08-03 18:11:18","endLine":102,"groupId":"9087","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"decorate","params":"(finalMergedResultmergedResult@finalSQLStatementContext<?>sqlStatementContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/91/4f90b2542444512eeab80f3fadc462cf44d118.src","preCode":"    private MergedResult decorate(final MergedResult mergedResult, final SQLStatementContext<?> sqlStatementContext) throws SQLException {\n        MergedResult result = null;\n        for (Entry<ShardingSphereRule, ResultProcessEngine> entry : engines.entrySet()) {\n            if (entry.getValue() instanceof ResultDecoratorEngine) {\n                ResultDecorator resultDecorator = ((ResultDecoratorEngine) entry.getValue()).newInstance(databaseType, schemaMetaData, entry.getKey(), props, sqlStatementContext);\n                result = null == result ? resultDecorator.decorate(mergedResult, sqlStatementContext, schemaMetaData) : resultDecorator.decorate(result, sqlStatementContext, schemaMetaData);\n            }\n        }\n        return null == result ? mergedResult : result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-merge/src/main/java/org/apache/shardingsphere/infra/merge/MergeEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"},{"authorDate":"2020-08-03 18:11:18","commitOrder":1,"curCode":"    private Optional<MergedResult> decorate(final QueryResult queryResult, final SQLStatementContext<?> sqlStatementContext) throws SQLException {\n        MergedResult result = null;\n        for (Entry<ShardingSphereRule, ResultProcessEngine> entry : engines.entrySet()) {\n            if (entry.getValue() instanceof ResultDecoratorEngine) {\n                ResultDecorator resultDecorator = ((ResultDecoratorEngine) entry.getValue()).newInstance(databaseType, schemaMetaData, entry.getKey(), props, sqlStatementContext);\n                result = null == result ? resultDecorator.decorate(queryResult, sqlStatementContext, schemaMetaData) : resultDecorator.decorate(result, sqlStatementContext, schemaMetaData);\n            }\n        }\n        return Optional.ofNullable(result);\n    }\n","date":"2020-08-03 18:11:18","endLine":114,"groupId":"9087","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"decorate","params":"(finalQueryResultqueryResult@finalSQLStatementContext<?>sqlStatementContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/91/4f90b2542444512eeab80f3fadc462cf44d118.src","preCode":"    private Optional<MergedResult> decorate(final QueryResult queryResult, final SQLStatementContext<?> sqlStatementContext) throws SQLException {\n        MergedResult result = null;\n        for (Entry<ShardingSphereRule, ResultProcessEngine> entry : engines.entrySet()) {\n            if (entry.getValue() instanceof ResultDecoratorEngine) {\n                ResultDecorator resultDecorator = ((ResultDecoratorEngine) entry.getValue()).newInstance(databaseType, schemaMetaData, entry.getKey(), props, sqlStatementContext);\n                result = null == result ? resultDecorator.decorate(queryResult, sqlStatementContext, schemaMetaData) : resultDecorator.decorate(result, sqlStatementContext, schemaMetaData);\n            }\n        }\n        return Optional.ofNullable(result);\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-merge/src/main/java/org/apache/shardingsphere/infra/merge/MergeEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"B"}],"commitId":"fd2604e5b51b615adec55b8d90b68edc91fb68b7","commitMessage":"@@@Add ShardingSphereThreadFactoryBuilderTest (#6599)\n\n* Add ShardingSphereThreadFactoryBuilderTest\n\n* Add ShardingSphereThreadFactoryBuilderTest","date":"2020-08-03 18:11:18","modifiedFileCount":"3","status":"B","submitter":"Liang Zhang"},{"authorTime":"2020-11-09 17:01:30","codes":[{"authorDate":"2020-11-09 17:01:30","commitOrder":2,"curCode":"    private MergedResult decorate(final MergedResult mergedResult, final SQLStatementContext<?> sqlStatementContext) throws SQLException {\n        MergedResult result = null;\n        for (Entry<ShardingSphereRule, ResultProcessEngine> entry : engines.entrySet()) {\n            if (entry.getValue() instanceof ResultDecoratorEngine) {\n                ResultDecorator resultDecorator = ((ResultDecoratorEngine) entry.getValue()).newInstance(databaseType, schema, entry.getKey(), props, sqlStatementContext);\n                result = null == result ? resultDecorator.decorate(mergedResult, sqlStatementContext, schema) : resultDecorator.decorate(result, sqlStatementContext, schema);\n            }\n        }\n        return null == result ? mergedResult : result;\n    }\n","date":"2020-11-09 17:01:30","endLine":103,"groupId":"4398","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"decorate","params":"(finalMergedResultmergedResult@finalSQLStatementContext<?>sqlStatementContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e1/79529efbbd06188af23b6aabefe82afbb768f7.src","preCode":"    private MergedResult decorate(final MergedResult mergedResult, final SQLStatementContext<?> sqlStatementContext) throws SQLException {\n        MergedResult result = null;\n        for (Entry<ShardingSphereRule, ResultProcessEngine> entry : engines.entrySet()) {\n            if (entry.getValue() instanceof ResultDecoratorEngine) {\n                ResultDecorator resultDecorator = ((ResultDecoratorEngine) entry.getValue()).newInstance(databaseType, schemaMetaData, entry.getKey(), props, sqlStatementContext);\n                result = null == result ? resultDecorator.decorate(mergedResult, sqlStatementContext, schemaMetaData) : resultDecorator.decorate(result, sqlStatementContext, schemaMetaData);\n            }\n        }\n        return null == result ? mergedResult : result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-merge/src/main/java/org/apache/shardingsphere/infra/merge/MergeEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2020-11-09 17:01:30","commitOrder":2,"curCode":"    private Optional<MergedResult> decorate(final QueryResult queryResult, final SQLStatementContext<?> sqlStatementContext) throws SQLException {\n        MergedResult result = null;\n        for (Entry<ShardingSphereRule, ResultProcessEngine> entry : engines.entrySet()) {\n            if (entry.getValue() instanceof ResultDecoratorEngine) {\n                ResultDecorator resultDecorator = ((ResultDecoratorEngine) entry.getValue()).newInstance(databaseType, schema, entry.getKey(), props, sqlStatementContext);\n                result = null == result ? resultDecorator.decorate(queryResult, sqlStatementContext, schema) : resultDecorator.decorate(result, sqlStatementContext, schema);\n            }\n        }\n        return Optional.ofNullable(result);\n    }\n","date":"2020-11-09 17:01:30","endLine":115,"groupId":"4398","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"decorate","params":"(finalQueryResultqueryResult@finalSQLStatementContext<?>sqlStatementContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e1/79529efbbd06188af23b6aabefe82afbb768f7.src","preCode":"    private Optional<MergedResult> decorate(final QueryResult queryResult, final SQLStatementContext<?> sqlStatementContext) throws SQLException {\n        MergedResult result = null;\n        for (Entry<ShardingSphereRule, ResultProcessEngine> entry : engines.entrySet()) {\n            if (entry.getValue() instanceof ResultDecoratorEngine) {\n                ResultDecorator resultDecorator = ((ResultDecoratorEngine) entry.getValue()).newInstance(databaseType, schemaMetaData, entry.getKey(), props, sqlStatementContext);\n                result = null == result ? resultDecorator.decorate(queryResult, sqlStatementContext, schemaMetaData) : resultDecorator.decorate(result, sqlStatementContext, schemaMetaData);\n            }\n        }\n        return Optional.ofNullable(result);\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-merge/src/main/java/org/apache/shardingsphere/infra/merge/MergeEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"09281f69a6dd01c12dd73dcc6675397062498f90","commitMessage":"@@@Rename PhysicalSchemaMetaData to ShardingSphereSchema (#8094)\n\n* Rename PhysicalSchemaMetaData to ShardingSphereSchema\n\n* Fix checkstyle","date":"2020-11-09 17:01:30","modifiedFileCount":"153","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-12 07:07:11","codes":[{"authorDate":"2020-11-12 07:07:11","commitOrder":3,"curCode":"    private MergedResult decorate(final MergedResult mergedResult, final SQLStatementContext<?> sqlStatementContext) throws SQLException {\n        MergedResult result = null;\n        for (Entry<ShardingSphereRule, ResultProcessEngine> entry : engines.entrySet()) {\n            if (entry.getValue() instanceof ResultDecoratorEngine) {\n                ResultDecorator resultDecorator = ((ResultDecoratorEngine) entry.getValue()).newInstance(databaseType, schema, entry.getKey(), props, sqlStatementContext);\n                result = null == result ? resultDecorator.decorate(mergedResult, sqlStatementContext, entry.getKey()) : resultDecorator.decorate(result, sqlStatementContext, entry.getKey());\n            }\n        }\n        return null == result ? mergedResult : result;\n    }\n","date":"2020-11-12 07:07:11","endLine":103,"groupId":"111802","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"decorate","params":"(finalMergedResultmergedResult@finalSQLStatementContext<?>sqlStatementContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/eb/4bf4d8015891d5ad5ff380bf382952d19efa54.src","preCode":"    private MergedResult decorate(final MergedResult mergedResult, final SQLStatementContext<?> sqlStatementContext) throws SQLException {\n        MergedResult result = null;\n        for (Entry<ShardingSphereRule, ResultProcessEngine> entry : engines.entrySet()) {\n            if (entry.getValue() instanceof ResultDecoratorEngine) {\n                ResultDecorator resultDecorator = ((ResultDecoratorEngine) entry.getValue()).newInstance(databaseType, schema, entry.getKey(), props, sqlStatementContext);\n                result = null == result ? resultDecorator.decorate(mergedResult, sqlStatementContext, schema) : resultDecorator.decorate(result, sqlStatementContext, schema);\n            }\n        }\n        return null == result ? mergedResult : result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-merge/src/main/java/org/apache/shardingsphere/infra/merge/MergeEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2020-11-12 07:07:11","commitOrder":3,"curCode":"    private Optional<MergedResult> decorate(final QueryResult queryResult, final SQLStatementContext<?> sqlStatementContext) throws SQLException {\n        MergedResult result = null;\n        for (Entry<ShardingSphereRule, ResultProcessEngine> entry : engines.entrySet()) {\n            if (entry.getValue() instanceof ResultDecoratorEngine) {\n                ResultDecorator resultDecorator = ((ResultDecoratorEngine) entry.getValue()).newInstance(databaseType, schema, entry.getKey(), props, sqlStatementContext);\n                result = null == result ? resultDecorator.decorate(queryResult, sqlStatementContext, entry.getKey()) : resultDecorator.decorate(result, sqlStatementContext, entry.getKey());\n            }\n        }\n        return Optional.ofNullable(result);\n    }\n","date":"2020-11-12 07:07:11","endLine":115,"groupId":"111802","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"decorate","params":"(finalQueryResultqueryResult@finalSQLStatementContext<?>sqlStatementContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/eb/4bf4d8015891d5ad5ff380bf382952d19efa54.src","preCode":"    private Optional<MergedResult> decorate(final QueryResult queryResult, final SQLStatementContext<?> sqlStatementContext) throws SQLException {\n        MergedResult result = null;\n        for (Entry<ShardingSphereRule, ResultProcessEngine> entry : engines.entrySet()) {\n            if (entry.getValue() instanceof ResultDecoratorEngine) {\n                ResultDecorator resultDecorator = ((ResultDecoratorEngine) entry.getValue()).newInstance(databaseType, schema, entry.getKey(), props, sqlStatementContext);\n                result = null == result ? resultDecorator.decorate(queryResult, sqlStatementContext, schema) : resultDecorator.decorate(result, sqlStatementContext, schema);\n            }\n        }\n        return Optional.ofNullable(result);\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-merge/src/main/java/org/apache/shardingsphere/infra/merge/MergeEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"ab325a0ff50bedc37a1bef92d2ef8c13ad2d3237","commitMessage":"@@@Remove EncryptColumnMetaData (#8140)\n\n* Decouple EncryptColumnMetaData\n\n* Remove EncryptColumnMetaData","date":"2020-11-12 07:07:11","modifiedFileCount":"17","status":"M","submitter":"Liang Zhang"}]
