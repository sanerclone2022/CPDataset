[{"authorTime":"2021-07-01 17:47:55","codes":[{"authorDate":"2021-07-01 17:47:55","commitOrder":1,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final DataSourceSegment actual, final ExpectedDataSource expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual dataSource should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), CoreMatchers.is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getHostName(), CoreMatchers.is(expected.getHostName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPort(), CoreMatchers.is(expected.getPort()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getDb(), CoreMatchers.is(expected.getDb()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getUser(), CoreMatchers.is(expected.getUser()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPassword(), CoreMatchers.is(expected.getPassword()));\n        }\n    }\n","date":"2021-07-01 17:47:55","endLine":62,"groupId":"4158","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalDataSourceSegmentactual@finalExpectedDataSourceexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e1/6c4ba2b70bf6fd1ae84bec8fab55bd1dd6c8d5.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final DataSourceSegment actual, final ExpectedDataSource expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual dataSource should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), CoreMatchers.is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getHostName(), CoreMatchers.is(expected.getHostName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPort(), CoreMatchers.is(expected.getPort()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getDb(), CoreMatchers.is(expected.getDb()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getUser(), CoreMatchers.is(expected.getUser()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPassword(), CoreMatchers.is(expected.getPassword()));\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/DataSourceAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2021-07-01 17:47:55","commitOrder":1,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final ReadwriteSplittingRuleSegment actual, final ExceptedReadwriteSplittingRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exit.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exit.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getAutoAwareResource(), is(expected.getAutoAwareResource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getWriteDataSource(), is(expected.getWriteDataSource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getReadDataSources(), is(expected.getReadDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getLoadBalancer(), is(expected.getLoadBalancer()));\n            PropertiesAssert.assertIs(assertContext, actual.getProps(), expected.getProps());\n        }\n    }\n","date":"2021-07-01 17:47:55","endLine":62,"groupId":"3137","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalReadwriteSplittingRuleSegmentactual@finalExceptedReadwriteSplittingRuleexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b3/66c6c1800e7020818fd31bead279e3bab08781.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final ReadwriteSplittingRuleSegment actual, final ExceptedReadwriteSplittingRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exit.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exit.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getAutoAwareResource(), is(expected.getAutoAwareResource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getWriteDataSource(), is(expected.getWriteDataSource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getReadDataSources(), is(expected.getReadDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getLoadBalancer(), is(expected.getLoadBalancer()));\n            PropertiesAssert.assertIs(assertContext, actual.getProps(), expected.getProps());\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/rdl/ReadwriteSplittingRuleAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"}],"commitId":"71c18596a4427b83e98bd0cb6b32319e297d1373","commitMessage":"@@@add new parser test module (#11083)\n\n","date":"2021-07-01 17:47:55","modifiedFileCount":"0","status":"B","submitter":"totalo"},{"authorTime":"2021-07-01 17:47:55","codes":[{"authorDate":"2021-07-08 16:05:03","commitOrder":2,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final DataSourceSegment actual, final ExpectedDataSource expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual dataSource should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), CoreMatchers.is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getUrl(), CoreMatchers.is(expected.getUrl()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getHostName(), CoreMatchers.is(expected.getHostName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPort(), CoreMatchers.is(expected.getPort()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getDb(), CoreMatchers.is(expected.getDb()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getUser(), CoreMatchers.is(expected.getUser()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPassword(), CoreMatchers.is(expected.getPassword()));\n        }\n    }\n","date":"2021-07-08 16:05:03","endLine":64,"groupId":"4158","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalDataSourceSegmentactual@finalExpectedDataSourceexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7f/65c71fc9ce6f8a391a2c3f6473df871a682d3d.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final DataSourceSegment actual, final ExpectedDataSource expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual dataSource should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), CoreMatchers.is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getHostName(), CoreMatchers.is(expected.getHostName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPort(), CoreMatchers.is(expected.getPort()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getDb(), CoreMatchers.is(expected.getDb()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getUser(), CoreMatchers.is(expected.getUser()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPassword(), CoreMatchers.is(expected.getPassword()));\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/DataSourceAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2021-07-01 17:47:55","commitOrder":2,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final ReadwriteSplittingRuleSegment actual, final ExceptedReadwriteSplittingRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exit.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exit.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getAutoAwareResource(), is(expected.getAutoAwareResource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getWriteDataSource(), is(expected.getWriteDataSource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getReadDataSources(), is(expected.getReadDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getLoadBalancer(), is(expected.getLoadBalancer()));\n            PropertiesAssert.assertIs(assertContext, actual.getProps(), expected.getProps());\n        }\n    }\n","date":"2021-07-01 17:47:55","endLine":62,"groupId":"3137","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalReadwriteSplittingRuleSegmentactual@finalExceptedReadwriteSplittingRuleexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b3/66c6c1800e7020818fd31bead279e3bab08781.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final ReadwriteSplittingRuleSegment actual, final ExceptedReadwriteSplittingRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exit.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exit.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getAutoAwareResource(), is(expected.getAutoAwareResource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getWriteDataSource(), is(expected.getWriteDataSource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getReadDataSources(), is(expected.getReadDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getLoadBalancer(), is(expected.getLoadBalancer()));\n            PropertiesAssert.assertIs(assertContext, actual.getProps(), expected.getProps());\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/rdl/ReadwriteSplittingRuleAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"}],"commitId":"82b5f7cfcb9538197f2c59c935e75f65513738ca","commitMessage":"@@@For #11100.  change 'add reource' syntax and  allow custom properties for connection pool. (#11185)\n\n* For #11100.  add URL item to `add resoutce` syntax.\n\n* delete unused parameter `databaseType`\n\n* optimize setter logic for connection pool and jdbc param.\n\n* add default value for 'useSSL' and 'serverTimezone'.  add test case.\n\n* fix ci.\n\n* fix checktStyle.\n\n* allow SIMPLE or URL configuration for `Add Resource`.\n\n* fix style and add test cases.\n\n* fix merge conflicts.\n\n* replace 'indexOf' to 'URI.getQuery' to find url properties.\n\n* replace 'URI.getQuery' to 'regular' to find jdbc url properties.\n\n* optimize parser & add tast cases.","date":"2021-07-08 16:05:03","modifiedFileCount":"16","status":"M","submitter":"Raigor"},{"authorTime":"2021-07-01 17:47:55","codes":[{"authorDate":"2021-07-24 17:38:12","commitOrder":3,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final DataSourceSegment actual, final ExpectedDataSource expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual dataSource should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), CoreMatchers.is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getUrl(), CoreMatchers.is(expected.getUrl()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getHostName(), CoreMatchers.is(expected.getHostName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPort(), CoreMatchers.is(expected.getPort()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getDb(), CoreMatchers.is(expected.getDb()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getUser(), CoreMatchers.is(expected.getUser()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPassword(), CoreMatchers.is(expected.getPassword()));\n            PropertiesAssert.assertIs(assertContext, actual.getProperties(), expected.getProps());\n        }\n    }\n","date":"2021-07-24 17:38:12","endLine":65,"groupId":"4158","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalDataSourceSegmentactual@finalExpectedDataSourceexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/00/a55c99c8737f500f2aea3363fa4f9623c0cb09.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final DataSourceSegment actual, final ExpectedDataSource expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual dataSource should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), CoreMatchers.is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getUrl(), CoreMatchers.is(expected.getUrl()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getHostName(), CoreMatchers.is(expected.getHostName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPort(), CoreMatchers.is(expected.getPort()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getDb(), CoreMatchers.is(expected.getDb()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getUser(), CoreMatchers.is(expected.getUser()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPassword(), CoreMatchers.is(expected.getPassword()));\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/DataSourceAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2021-07-01 17:47:55","commitOrder":3,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final ReadwriteSplittingRuleSegment actual, final ExceptedReadwriteSplittingRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exit.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exit.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getAutoAwareResource(), is(expected.getAutoAwareResource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getWriteDataSource(), is(expected.getWriteDataSource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getReadDataSources(), is(expected.getReadDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getLoadBalancer(), is(expected.getLoadBalancer()));\n            PropertiesAssert.assertIs(assertContext, actual.getProps(), expected.getProps());\n        }\n    }\n","date":"2021-07-01 17:47:55","endLine":62,"groupId":"3137","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalReadwriteSplittingRuleSegmentactual@finalExceptedReadwriteSplittingRuleexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b3/66c6c1800e7020818fd31bead279e3bab08781.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final ReadwriteSplittingRuleSegment actual, final ExceptedReadwriteSplittingRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exit.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exit.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getAutoAwareResource(), is(expected.getAutoAwareResource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getWriteDataSource(), is(expected.getWriteDataSource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getReadDataSources(), is(expected.getReadDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getLoadBalancer(), is(expected.getLoadBalancer()));\n            PropertiesAssert.assertIs(assertContext, actual.getProps(), expected.getProps());\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/rdl/ReadwriteSplittingRuleAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"}],"commitId":"ee40c42d72b817015c19af8c9b7825b9c8f9a959","commitMessage":"@@@merge distsql parser test. (#11460)\n\n","date":"2021-07-24 17:38:12","modifiedFileCount":"4","status":"M","submitter":"totalo"},{"authorTime":"2021-08-13 18:15:48","codes":[{"authorDate":"2021-07-24 17:38:12","commitOrder":4,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final DataSourceSegment actual, final ExpectedDataSource expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual dataSource should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), CoreMatchers.is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getUrl(), CoreMatchers.is(expected.getUrl()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getHostName(), CoreMatchers.is(expected.getHostName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPort(), CoreMatchers.is(expected.getPort()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getDb(), CoreMatchers.is(expected.getDb()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getUser(), CoreMatchers.is(expected.getUser()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPassword(), CoreMatchers.is(expected.getPassword()));\n            PropertiesAssert.assertIs(assertContext, actual.getProperties(), expected.getProps());\n        }\n    }\n","date":"2021-07-24 17:38:12","endLine":65,"groupId":"4158","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalDataSourceSegmentactual@finalExpectedDataSourceexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/00/a55c99c8737f500f2aea3363fa4f9623c0cb09.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final DataSourceSegment actual, final ExpectedDataSource expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual dataSource should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), CoreMatchers.is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getUrl(), CoreMatchers.is(expected.getUrl()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getHostName(), CoreMatchers.is(expected.getHostName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPort(), CoreMatchers.is(expected.getPort()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getDb(), CoreMatchers.is(expected.getDb()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getUser(), CoreMatchers.is(expected.getUser()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPassword(), CoreMatchers.is(expected.getPassword()));\n            PropertiesAssert.assertIs(assertContext, actual.getProperties(), expected.getProps());\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/DataSourceAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"},{"authorDate":"2021-08-13 18:15:48","commitOrder":4,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final ReadwriteSplittingRuleSegment actual, final ExceptedReadwriteSplittingRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual readwrite splitting rule should not exit.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual readwrite splitting rule should exit.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getAutoAwareResource(), is(expected.getAutoAwareResource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getWriteDataSource(), is(expected.getWriteDataSource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getReadDataSources(), is(expected.getReadDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getLoadBalancer(), is(expected.getLoadBalancer()));\n            PropertiesAssert.assertIs(assertContext, actual.getProps(), expected.getProps());\n        }\n    }\n","date":"2021-08-13 18:15:48","endLine":62,"groupId":"3137","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalReadwriteSplittingRuleSegmentactual@finalExceptedReadwriteSplittingRuleexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c9/f90f996275a11fcf93a1d608b18a2c379b3f57.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final ReadwriteSplittingRuleSegment actual, final ExceptedReadwriteSplittingRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exit.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exit.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getAutoAwareResource(), is(expected.getAutoAwareResource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getWriteDataSource(), is(expected.getWriteDataSource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getReadDataSources(), is(expected.getReadDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getLoadBalancer(), is(expected.getLoadBalancer()));\n            PropertiesAssert.assertIs(assertContext, actual.getProps(), expected.getProps());\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/rdl/ReadwriteSplittingRuleAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"933ebab23d2431213c8fc9b01d9d096115eca4f8","commitMessage":"@@@Add advancedDistSQLStatement.  and implement 'preview sql'. (#11802)\n\n* Add advancedDistSQLStatement.  and implement 'preview sql'.\n\n* fix `Actual should not exist` syntax problem.","date":"2021-08-13 18:15:48","modifiedFileCount":"29","status":"M","submitter":"Raigor"},{"authorTime":"2021-08-13 18:15:48","codes":[{"authorDate":"2021-08-19 18:15:13","commitOrder":5,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final DataSourceSegment actual, final ExpectedDataSource expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual dataSource should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getUrl(), is(expected.getUrl()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getHostName(), is(expected.getHostName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPort(), is(expected.getPort()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getDb(), is(expected.getDb()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getUser(), is(expected.getUser()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPassword(), is(expected.getPassword()));\n            PropertiesAssert.assertIs(assertContext, actual.getProperties(), expected.getProps());\n        }\n    }\n","date":"2021-08-19 18:15:13","endLine":65,"groupId":"102064","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalDataSourceSegmentactual@finalExpectedDataSourceexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a8/eb2e847546dfbedbbb56a2d2aecd7d31b00a17.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final DataSourceSegment actual, final ExpectedDataSource expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual dataSource should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), CoreMatchers.is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getUrl(), CoreMatchers.is(expected.getUrl()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getHostName(), CoreMatchers.is(expected.getHostName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPort(), CoreMatchers.is(expected.getPort()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getDb(), CoreMatchers.is(expected.getDb()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getUser(), CoreMatchers.is(expected.getUser()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getPassword(), CoreMatchers.is(expected.getPassword()));\n            PropertiesAssert.assertIs(assertContext, actual.getProperties(), expected.getProps());\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/DataSourceAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2021-08-13 18:15:48","commitOrder":5,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final ReadwriteSplittingRuleSegment actual, final ExceptedReadwriteSplittingRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual readwrite splitting rule should not exit.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual readwrite splitting rule should exit.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getAutoAwareResource(), is(expected.getAutoAwareResource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getWriteDataSource(), is(expected.getWriteDataSource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getReadDataSources(), is(expected.getReadDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getLoadBalancer(), is(expected.getLoadBalancer()));\n            PropertiesAssert.assertIs(assertContext, actual.getProps(), expected.getProps());\n        }\n    }\n","date":"2021-08-13 18:15:48","endLine":62,"groupId":"102064","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalReadwriteSplittingRuleSegmentactual@finalExceptedReadwriteSplittingRuleexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c9/f90f996275a11fcf93a1d608b18a2c379b3f57.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final ReadwriteSplittingRuleSegment actual, final ExceptedReadwriteSplittingRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual readwrite splitting rule should not exit.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual readwrite splitting rule should exit.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getAutoAwareResource(), is(expected.getAutoAwareResource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getWriteDataSource(), is(expected.getWriteDataSource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getReadDataSources(), is(expected.getReadDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getLoadBalancer(), is(expected.getLoadBalancer()));\n            PropertiesAssert.assertIs(assertContext, actual.getProps(), expected.getProps());\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/rdl/ReadwriteSplittingRuleAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"}],"commitId":"69ae7c0e8eabb175812e05acdac163eec24286f3","commitMessage":"@@@Modify the comment and assertion description (#11896)\n\n* Modify the comment and assertion description\n\n* update dataSource","date":"2021-08-19 18:15:13","modifiedFileCount":"2","status":"M","submitter":"yx9o"}]
