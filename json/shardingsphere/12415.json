[{"authorTime":"2021-06-05 15:56:59","codes":[{"authorDate":"2021-07-28 18:17:05","commitOrder":2,"curCode":"    private void generateRemoveTokenForShadow(final InsertColumnsSegment insertColumnsSegment, final Collection<RemoveToken> removeTokens) {\n        List<ColumnSegment> columnSegments = (LinkedList<ColumnSegment>) insertColumnsSegment.getColumns();\n        String shadowColumn = getShadowColumn();\n        for (int i = 0; i < columnSegments.size(); i++) {\n            ColumnSegment columnSegment = columnSegments.get(i);\n            if (shadowColumn.equals(columnSegment.getIdentifier().getValue())) {\n                RemoveToken removeToken = i == 0 ? new RemoveToken(columnSegments.get(i).getStartIndex(), columnSegments.get(i + 1).getStartIndex() - 1)\n                        : new RemoveToken(columnSegments.get(i - 1).getStopIndex() + 1, columnSegments.get(i).getStopIndex());\n                removeTokens.add(removeToken);\n            }\n        }\n    }\n","date":"2021-07-28 18:17:05","endLine":68,"groupId":"6687","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"generateRemoveTokenForShadow","params":"(finalInsertColumnsSegmentinsertColumnsSegment@finalCollection<RemoveToken>removeTokens)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2b/c32eb0c91449770fc2fe9459d06f219a0452f3.src","preCode":"    private void generateRemoveTokenForShadow(final InsertColumnsSegment insertColumnsSegment, final Collection<RemoveToken> removeTokens) {\n        List<ColumnSegment> columnSegments = (LinkedList<ColumnSegment>) insertColumnsSegment.getColumns();\n        String shadowColumn = getShadowColumn();\n        for (int i = 0; i < columnSegments.size(); i++) {\n            ColumnSegment columnSegment = columnSegments.get(i);\n            if (shadowColumn.equals(columnSegment.getIdentifier().getValue())) {\n                RemoveToken removeToken = i == 0 ? new RemoveToken(columnSegments.get(i).getStartIndex(), columnSegments.get(i + 1).getStartIndex() - 1)\n                        : new RemoveToken(columnSegments.get(i - 1).getStopIndex() + 1, columnSegments.get(i).getStopIndex());\n                removeTokens.add(removeToken);\n            }\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-shadow/shardingsphere-shadow-core/src/main/java/org/apache/shardingsphere/shadow/rewrite/token/generator/impl/ShadowInsertColumnTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"},{"authorDate":"2021-06-05 15:56:59","commitOrder":2,"curCode":"    private Collection<SQLToken> generateSQLTokens(final WhereSegment whereSegment, final AndPredicate andPredicate) {\n        Collection<SQLToken> result = new LinkedList<>();\n        List<ExpressionSegment> predicates = (LinkedList<ExpressionSegment>) andPredicate.getPredicates();\n        for (int i = 0; i < predicates.size(); i++) {\n            ExpressionSegment expression = predicates.get(i);\n            Optional<ColumnSegment> column = ColumnExtractor.extract(expression);\n            if (!column.isPresent()) {\n                continue;\n            }\n            if (!getShadowRule().getColumn().equals(column.get().getIdentifier().getValue())) {\n                continue;\n            }\n            if (1 == predicates.size()) {\n                int startIndex = whereSegment.getStartIndex();\n                int stopIndex = whereSegment.getStopIndex();\n                result.add(new RemoveToken(startIndex, stopIndex));\n                return result;\n            }\n            if (i == 0) {\n                int startIndex = predicates.get(0).getStartIndex();\n                int stopIndex = predicates.get(i + 1).getStartIndex() - 1;\n                result.add(new RemoveToken(startIndex, stopIndex));\n                return result;\n            }\n            int startIndex = predicates.get(i - 1).getStopIndex() + 1;\n            int stopIndex = predicates.get(i).getStopIndex();\n            result.add(new RemoveToken(startIndex, stopIndex));\n            return result;\n        }\n        return result;\n    }\n","date":"2021-06-05 15:56:59","endLine":94,"groupId":"11379","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"generateSQLTokens","params":"(finalWhereSegmentwhereSegment@finalAndPredicateandPredicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/47/707f2d44ead6df975d53095dbf5e05c86c1d8f.src","preCode":"    private Collection<SQLToken> generateSQLTokens(final WhereSegment whereSegment, final AndPredicate andPredicate) {\n        Collection<SQLToken> result = new LinkedList<>();\n        List<ExpressionSegment> predicates = (LinkedList<ExpressionSegment>) andPredicate.getPredicates();\n        for (int i = 0; i < predicates.size(); i++) {\n            ExpressionSegment expression = predicates.get(i);\n            Optional<ColumnSegment> column = ColumnExtractor.extract(expression);\n            if (!column.isPresent()) {\n                continue;\n            }\n            if (!getShadowRule().getColumn().equals(column.get().getIdentifier().getValue())) {\n                continue;\n            }\n            if (1 == predicates.size()) {\n                int startIndex = whereSegment.getStartIndex();\n                int stopIndex = whereSegment.getStopIndex();\n                result.add(new RemoveToken(startIndex, stopIndex));\n                return result;\n            }\n            if (i == 0) {\n                int startIndex = predicates.get(0).getStartIndex();\n                int stopIndex = predicates.get(i + 1).getStartIndex() - 1;\n                result.add(new RemoveToken(startIndex, stopIndex));\n                return result;\n            }\n            int startIndex = predicates.get(i - 1).getStopIndex() + 1;\n            int stopIndex = predicates.get(i).getStopIndex();\n            result.add(new RemoveToken(startIndex, stopIndex));\n            return result;\n        }\n        return result;\n    }\n","realPath":"shardingsphere-features/shardingsphere-shadow/shardingsphere-shadow-core/src/main/java/org/apache/shardingsphere/shadow/rewrite/token/generator/impl/ShadowPredicateColumnTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"NB"}],"commitId":"57277f8db1d748f02206c61b9820879e97b0eab4","commitMessage":"@@@Fix shadow update (#11549)\n\n* Optimize the code structure and modify the class name.\n\n* Add update statement sql rewrite implementation.\n\n* Add ut.\n\n* Remove spaces.","date":"2021-07-28 18:17:05","modifiedFileCount":"6","status":"M","submitter":"gin"},{"authorTime":"2021-06-05 15:56:59","codes":[{"authorDate":"2021-08-15 18:55:38","commitOrder":3,"curCode":"    private void generateRemoveTokenForShadow(final InsertColumnsSegment insertColumnsSegment, final Collection<RemoveToken> removeTokens) {\n        List<ColumnSegment> columnSegments = (LinkedList<ColumnSegment>) insertColumnsSegment.getColumns();\n        String shadowColumn = getShadowColumn();\n        int index = 0;\n        for (ColumnSegment each : columnSegments) {\n            if (shadowColumn.equals(each.getIdentifier().getValue())) {\n                removeTokens.add(createShadowColumnRemoveToken(columnSegments, index));\n            }\n            index++;\n        }\n    }\n","date":"2021-08-15 18:55:38","endLine":67,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"generateRemoveTokenForShadow","params":"(finalInsertColumnsSegmentinsertColumnsSegment@finalCollection<RemoveToken>removeTokens)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f7/41e4b6e6a8d283266ee4c9ad3a6f5474d813d5.src","preCode":"    private void generateRemoveTokenForShadow(final InsertColumnsSegment insertColumnsSegment, final Collection<RemoveToken> removeTokens) {\n        List<ColumnSegment> columnSegments = (LinkedList<ColumnSegment>) insertColumnsSegment.getColumns();\n        String shadowColumn = getShadowColumn();\n        for (int i = 0; i < columnSegments.size(); i++) {\n            ColumnSegment columnSegment = columnSegments.get(i);\n            if (shadowColumn.equals(columnSegment.getIdentifier().getValue())) {\n                RemoveToken removeToken = i == 0 ? new RemoveToken(columnSegments.get(i).getStartIndex(), columnSegments.get(i + 1).getStartIndex() - 1)\n                        : new RemoveToken(columnSegments.get(i - 1).getStopIndex() + 1, columnSegments.get(i).getStopIndex());\n                removeTokens.add(removeToken);\n            }\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-shadow/shardingsphere-shadow-core/src/main/java/org/apache/shardingsphere/shadow/rewrite/token/generator/impl/ShadowInsertColumnTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2021-06-05 15:56:59","commitOrder":3,"curCode":"    private Collection<SQLToken> generateSQLTokens(final WhereSegment whereSegment, final AndPredicate andPredicate) {\n        Collection<SQLToken> result = new LinkedList<>();\n        List<ExpressionSegment> predicates = (LinkedList<ExpressionSegment>) andPredicate.getPredicates();\n        for (int i = 0; i < predicates.size(); i++) {\n            ExpressionSegment expression = predicates.get(i);\n            Optional<ColumnSegment> column = ColumnExtractor.extract(expression);\n            if (!column.isPresent()) {\n                continue;\n            }\n            if (!getShadowRule().getColumn().equals(column.get().getIdentifier().getValue())) {\n                continue;\n            }\n            if (1 == predicates.size()) {\n                int startIndex = whereSegment.getStartIndex();\n                int stopIndex = whereSegment.getStopIndex();\n                result.add(new RemoveToken(startIndex, stopIndex));\n                return result;\n            }\n            if (i == 0) {\n                int startIndex = predicates.get(0).getStartIndex();\n                int stopIndex = predicates.get(i + 1).getStartIndex() - 1;\n                result.add(new RemoveToken(startIndex, stopIndex));\n                return result;\n            }\n            int startIndex = predicates.get(i - 1).getStopIndex() + 1;\n            int stopIndex = predicates.get(i).getStopIndex();\n            result.add(new RemoveToken(startIndex, stopIndex));\n            return result;\n        }\n        return result;\n    }\n","date":"2021-06-05 15:56:59","endLine":94,"groupId":"11379","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"generateSQLTokens","params":"(finalWhereSegmentwhereSegment@finalAndPredicateandPredicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/47/707f2d44ead6df975d53095dbf5e05c86c1d8f.src","preCode":"    private Collection<SQLToken> generateSQLTokens(final WhereSegment whereSegment, final AndPredicate andPredicate) {\n        Collection<SQLToken> result = new LinkedList<>();\n        List<ExpressionSegment> predicates = (LinkedList<ExpressionSegment>) andPredicate.getPredicates();\n        for (int i = 0; i < predicates.size(); i++) {\n            ExpressionSegment expression = predicates.get(i);\n            Optional<ColumnSegment> column = ColumnExtractor.extract(expression);\n            if (!column.isPresent()) {\n                continue;\n            }\n            if (!getShadowRule().getColumn().equals(column.get().getIdentifier().getValue())) {\n                continue;\n            }\n            if (1 == predicates.size()) {\n                int startIndex = whereSegment.getStartIndex();\n                int stopIndex = whereSegment.getStopIndex();\n                result.add(new RemoveToken(startIndex, stopIndex));\n                return result;\n            }\n            if (i == 0) {\n                int startIndex = predicates.get(0).getStartIndex();\n                int stopIndex = predicates.get(i + 1).getStartIndex() - 1;\n                result.add(new RemoveToken(startIndex, stopIndex));\n                return result;\n            }\n            int startIndex = predicates.get(i - 1).getStopIndex() + 1;\n            int stopIndex = predicates.get(i).getStopIndex();\n            result.add(new RemoveToken(startIndex, stopIndex));\n            return result;\n        }\n        return result;\n    }\n","realPath":"shardingsphere-features/shardingsphere-shadow/shardingsphere-shadow-core/src/main/java/org/apache/shardingsphere/shadow/rewrite/token/generator/impl/ShadowPredicateColumnTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"0f3a77f920f880165c83f017b06d6d3144000536","commitMessage":"@@@Refactor use iterator to visit LinkedList. (#11829)\n\n","date":"2021-08-15 18:55:38","modifiedFileCount":"1","status":"M","submitter":"gin"},{"authorTime":"2021-08-24 19:12:39","codes":[{"authorDate":"2021-08-24 19:12:39","commitOrder":4,"curCode":"    private void generateRemoveTokenForShadow(final InsertColumnsSegment insertColumnsSegment, final Collection<RemoveToken> removeTokens) {\n        Collection<ColumnSegment> columnSegments = insertColumnsSegment.getColumns();\n        String shadowColumn = getShadowColumn();\n        int index = 0;\n        int previousElementStopIndex = 0;\n        Iterator<ColumnSegment> iterator = columnSegments.iterator();\n        while (iterator.hasNext()) {\n            ColumnSegment each = iterator.next();\n            if (shadowColumn.equals(each.getIdentifier().getValue())) {\n                removeTokens.add(isFirstElement(index) ? new RemoveToken(each.getStartIndex(), iterator.next().getStartIndex() - 1)\n                        : new RemoveToken(previousElementStopIndex + 1, each.getStopIndex()));\n            }\n            previousElementStopIndex = each.getStopIndex();\n            index++;\n        }\n    }\n","date":"2021-08-24 19:12:39","endLine":72,"groupId":"12415","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"generateRemoveTokenForShadow","params":"(finalInsertColumnsSegmentinsertColumnsSegment@finalCollection<RemoveToken>removeTokens)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1e/0a3e1ac00d7836c148d230396eb52ed0e28152.src","preCode":"    private void generateRemoveTokenForShadow(final InsertColumnsSegment insertColumnsSegment, final Collection<RemoveToken> removeTokens) {\n        List<ColumnSegment> columnSegments = (LinkedList<ColumnSegment>) insertColumnsSegment.getColumns();\n        String shadowColumn = getShadowColumn();\n        int index = 0;\n        for (ColumnSegment each : columnSegments) {\n            if (shadowColumn.equals(each.getIdentifier().getValue())) {\n                removeTokens.add(createShadowColumnRemoveToken(columnSegments, index));\n            }\n            index++;\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-shadow/shardingsphere-shadow-core/src/main/java/org/apache/shardingsphere/shadow/rewrite/token/generator/impl/ShadowInsertColumnTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2021-08-24 19:12:39","commitOrder":4,"curCode":"    private Collection<SQLToken> generateSQLTokens(final WhereSegment whereSegment, final AndPredicate andPredicate) {\n        Collection<SQLToken> result = new LinkedList<>();\n        Collection<ExpressionSegment> predicates = andPredicate.getPredicates();\n        int index = 0;\n        int previousElementStopIndex = 0;\n        Iterator<ExpressionSegment> iterator = predicates.iterator();\n        while (iterator.hasNext()) {\n            ExpressionSegment each = iterator.next();\n            Optional<ColumnSegment> column = ColumnExtractor.extract(each);\n            if (column.isPresent() && getShadowRule().getColumn().equals(column.get().getIdentifier().getValue())) {\n                if (1 == predicates.size()) {\n                    result.add(new RemoveToken(whereSegment.getStartIndex(), whereSegment.getStopIndex()));\n                    return result;\n                }\n                result.add(isFirstElement(index) ? new RemoveToken(each.getStartIndex(), iterator.next().getStartIndex() - 1)\n                        : new RemoveToken(previousElementStopIndex + 1, each.getStopIndex()));\n                return result;\n            }\n            previousElementStopIndex = each.getStopIndex();\n            index++;\n        }\n        return result;\n    }\n","date":"2021-08-24 19:12:39","endLine":88,"groupId":"12415","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"generateSQLTokens","params":"(finalWhereSegmentwhereSegment@finalAndPredicateandPredicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e5/eba4f2130295297e38234835a914023b1b521f.src","preCode":"    private Collection<SQLToken> generateSQLTokens(final WhereSegment whereSegment, final AndPredicate andPredicate) {\n        Collection<SQLToken> result = new LinkedList<>();\n        List<ExpressionSegment> predicates = (LinkedList<ExpressionSegment>) andPredicate.getPredicates();\n        for (int i = 0; i < predicates.size(); i++) {\n            ExpressionSegment expression = predicates.get(i);\n            Optional<ColumnSegment> column = ColumnExtractor.extract(expression);\n            if (!column.isPresent()) {\n                continue;\n            }\n            if (!getShadowRule().getColumn().equals(column.get().getIdentifier().getValue())) {\n                continue;\n            }\n            if (1 == predicates.size()) {\n                int startIndex = whereSegment.getStartIndex();\n                int stopIndex = whereSegment.getStopIndex();\n                result.add(new RemoveToken(startIndex, stopIndex));\n                return result;\n            }\n            if (i == 0) {\n                int startIndex = predicates.get(0).getStartIndex();\n                int stopIndex = predicates.get(i + 1).getStartIndex() - 1;\n                result.add(new RemoveToken(startIndex, stopIndex));\n                return result;\n            }\n            int startIndex = predicates.get(i - 1).getStopIndex() + 1;\n            int stopIndex = predicates.get(i).getStopIndex();\n            result.add(new RemoveToken(startIndex, stopIndex));\n            return result;\n        }\n        return result;\n    }\n","realPath":"shardingsphere-features/shardingsphere-shadow/shardingsphere-shadow-core/src/main/java/org/apache/shardingsphere/shadow/rewrite/token/generator/impl/ShadowPredicateColumnTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"f6c1ef8a11b73e018100603cf0cb179e33d4323c","commitMessage":"@@@Refactor use iterator to visit LinkedList in shadow project. (#11904)\n\n* Refactor use iterator to visit LinkedList in shadow project.\n\n* Fix the conflict files.","date":"2021-08-24 19:12:39","modifiedFileCount":"3","status":"M","submitter":"gin"}]
