[{"authorTime":"2021-03-26 12:52:46","codes":[{"authorDate":"2021-03-26 12:52:46","commitOrder":1,"curCode":"    private Map<String, Collection<String>> loadTablePrimaryKeys(final Connection connection, final Collection<String> tableNames) throws SQLException {\n        Map<String, Collection<String>> result = new HashMap<>();\n        try (PreparedStatement preparedStatement = connection.prepareStatement(getPrimaryKeyMetaDataSQL(tableNames))) {\n            preparedStatement.setString(1, connection.getCatalog());\n            preparedStatement.setString(2, \"PUBLIC\");\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String columnName = resultSet.getString(\"COLUMN_NAME\");\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    result.computeIfAbsent(tableName, k -> new LinkedList<>()).add(columnName);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-03-26 12:52:46","endLine":163,"groupId":"10988","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"loadTablePrimaryKeys","params":"(finalConnectionconnection@finalCollection<String>tableNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/cf/828e12e21a248dd498b85c75781571c1b0407f.src","preCode":"    private Map<String, Collection<String>> loadTablePrimaryKeys(final Connection connection, final Collection<String> tableNames) throws SQLException {\n        Map<String, Collection<String>> result = new HashMap<>();\n        try (PreparedStatement preparedStatement = connection.prepareStatement(getPrimaryKeyMetaDataSQL(tableNames))) {\n            preparedStatement.setString(1, connection.getCatalog());\n            preparedStatement.setString(2, \"PUBLIC\");\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String columnName = resultSet.getString(\"COLUMN_NAME\");\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    result.computeIfAbsent(tableName, k -> new LinkedList<>()).add(columnName);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/H2TableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"},{"authorDate":"2021-03-26 12:52:46","commitOrder":1,"curCode":"    private Map<String, Map<String, Boolean>> loadTableGenerated(final Connection connection, final Collection<String> tableNames) throws SQLException {\n        Map<String, Map<String, Boolean>> result = new HashMap<>();\n        try (PreparedStatement preparedStatement = connection.prepareStatement(getGeneratedInfoSQL(tableNames))) {\n            preparedStatement.setString(1, connection.getCatalog());\n            preparedStatement.setString(2, \"PUBLIC\");\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String columnName = resultSet.getString(\"COLUMN_NAME\");\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    boolean generated = resultSet.getBoolean(\"IS_GENERATED\");\n                    result.computeIfAbsent(tableName, k -> new HashMap<>()).put(columnName, generated);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-03-26 12:52:46","endLine":185,"groupId":"10988","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadTableGenerated","params":"(finalConnectionconnection@finalCollection<String>tableNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/cf/828e12e21a248dd498b85c75781571c1b0407f.src","preCode":"    private Map<String, Map<String, Boolean>> loadTableGenerated(final Connection connection, final Collection<String> tableNames) throws SQLException {\n        Map<String, Map<String, Boolean>> result = new HashMap<>();\n        try (PreparedStatement preparedStatement = connection.prepareStatement(getGeneratedInfoSQL(tableNames))) {\n            preparedStatement.setString(1, connection.getCatalog());\n            preparedStatement.setString(2, \"PUBLIC\");\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String columnName = resultSet.getString(\"COLUMN_NAME\");\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    boolean generated = resultSet.getBoolean(\"IS_GENERATED\");\n                    result.computeIfAbsent(tableName, k -> new HashMap<>()).put(columnName, generated);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/H2TableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"B"}],"commitId":"0fed3eb5552d88f030a62362f5ec26d1315a2b5f","commitMessage":"@@@support table metadata loading for H2 dialect (#9757)\n\n* table metadata loading for H2 dialect\n\n* ignore testcase\n\n* fix testcase\n\n* fix testcase\n\n* fix review advice\n\n* fix review\n\n* reuse connection\n\n* Update H2TableMetaDataLoaderTest.java\n\n* Update RawSQLExecutorCallback.java\n\nremove useless @slf4j","date":"2021-03-26 12:52:46","modifiedFileCount":"0","status":"B","submitter":"zz"},{"authorTime":"2021-08-17 15:06:22","codes":[{"authorDate":"2021-08-17 15:06:22","commitOrder":2,"curCode":"    private Map<String, Collection<String>> loadTablePrimaryKeys(final Connection connection, final Collection<String> tableNames, final boolean isExclude) throws SQLException {\n        Map<String, Collection<String>> result = new HashMap<>();\n        try (PreparedStatement preparedStatement = connection.prepareStatement(getPrimaryKeyMetaDataSQL(tableNames, isExclude))) {\n            preparedStatement.setString(1, connection.getCatalog());\n            preparedStatement.setString(2, \"PUBLIC\");\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String columnName = resultSet.getString(\"COLUMN_NAME\");\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    result.computeIfAbsent(tableName, k -> new LinkedList<>()).add(columnName);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-08-17 15:06:22","endLine":182,"groupId":"10988","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"loadTablePrimaryKeys","params":"(finalConnectionconnection@finalCollection<String>tableNames@finalbooleanisExclude)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/95/4887b25a16c25417370b37f298d4aa04ff4cfa.src","preCode":"    private Map<String, Collection<String>> loadTablePrimaryKeys(final Connection connection, final Collection<String> tableNames) throws SQLException {\n        Map<String, Collection<String>> result = new HashMap<>();\n        try (PreparedStatement preparedStatement = connection.prepareStatement(getPrimaryKeyMetaDataSQL(tableNames))) {\n            preparedStatement.setString(1, connection.getCatalog());\n            preparedStatement.setString(2, \"PUBLIC\");\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String columnName = resultSet.getString(\"COLUMN_NAME\");\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    result.computeIfAbsent(tableName, k -> new LinkedList<>()).add(columnName);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/H2TableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"},{"authorDate":"2021-08-17 15:06:22","commitOrder":2,"curCode":"    private Map<String, Map<String, Boolean>> loadTableGenerated(final Connection connection, final Collection<String> tableNames, final boolean isExclude) throws SQLException {\n        Map<String, Map<String, Boolean>> result = new HashMap<>();\n        try (PreparedStatement preparedStatement = connection.prepareStatement(getGeneratedInfoSQL(tableNames, isExclude))) {\n            preparedStatement.setString(1, connection.getCatalog());\n            preparedStatement.setString(2, \"PUBLIC\");\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String columnName = resultSet.getString(\"COLUMN_NAME\");\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    boolean generated = resultSet.getBoolean(\"IS_GENERATED\");\n                    result.computeIfAbsent(tableName, k -> new HashMap<>()).put(columnName, generated);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-08-17 15:06:22","endLine":208,"groupId":"10988","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadTableGenerated","params":"(finalConnectionconnection@finalCollection<String>tableNames@finalbooleanisExclude)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/95/4887b25a16c25417370b37f298d4aa04ff4cfa.src","preCode":"    private Map<String, Map<String, Boolean>> loadTableGenerated(final Connection connection, final Collection<String> tableNames) throws SQLException {\n        Map<String, Map<String, Boolean>> result = new HashMap<>();\n        try (PreparedStatement preparedStatement = connection.prepareStatement(getGeneratedInfoSQL(tableNames))) {\n            preparedStatement.setString(1, connection.getCatalog());\n            preparedStatement.setString(2, \"PUBLIC\");\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String columnName = resultSet.getString(\"COLUMN_NAME\");\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    boolean generated = resultSet.getBoolean(\"IS_GENERATED\");\n                    result.computeIfAbsent(tableName, k -> new HashMap<>()).put(columnName, generated);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/H2TableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"605e05c907bb4bd4e14bb682c01e6f46e562a87b","commitMessage":"@@@improve metadata load performance (#11767)\n\n* improve metadata load performance\n\n* improve metadata load performance\n\n* metaDataImprove test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove fix index\n\n* metaDataImprove optimize review\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions","date":"2021-08-17 15:06:22","modifiedFileCount":"16","status":"M","submitter":"tuichenchuxin"},{"authorTime":"2021-08-20 15:52:50","codes":[{"authorDate":"2021-08-20 15:52:50","commitOrder":3,"curCode":"    private Map<String, Collection<String>> loadTablePrimaryKeys(final Connection connection, final Collection<String> tableNames) throws SQLException {\n        Map<String, Collection<String>> result = new HashMap<>();\n        try (PreparedStatement preparedStatement = connection.prepareStatement(getPrimaryKeyMetaDataSQL(tableNames))) {\n            preparedStatement.setString(1, connection.getCatalog());\n            preparedStatement.setString(2, \"PUBLIC\");\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String columnName = resultSet.getString(\"COLUMN_NAME\");\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    result.computeIfAbsent(tableName, k -> new LinkedList<>()).add(columnName);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-08-20 15:52:50","endLine":160,"groupId":"101935","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"loadTablePrimaryKeys","params":"(finalConnectionconnection@finalCollection<String>tableNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/91/260a9172acc9dc7ed602c4cf7aac9fb287b468.src","preCode":"    private Map<String, Collection<String>> loadTablePrimaryKeys(final Connection connection, final Collection<String> tableNames, final boolean isExclude) throws SQLException {\n        Map<String, Collection<String>> result = new HashMap<>();\n        try (PreparedStatement preparedStatement = connection.prepareStatement(getPrimaryKeyMetaDataSQL(tableNames, isExclude))) {\n            preparedStatement.setString(1, connection.getCatalog());\n            preparedStatement.setString(2, \"PUBLIC\");\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String columnName = resultSet.getString(\"COLUMN_NAME\");\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    result.computeIfAbsent(tableName, k -> new LinkedList<>()).add(columnName);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/H2TableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2021-08-20 15:52:50","commitOrder":3,"curCode":"    private Map<String, Map<String, Boolean>> loadTableGenerated(final Connection connection, final Collection<String> tableNames) throws SQLException {\n        Map<String, Map<String, Boolean>> result = new HashMap<>();\n        try (PreparedStatement preparedStatement = connection.prepareStatement(getGeneratedInfoSQL(tableNames))) {\n            preparedStatement.setString(1, connection.getCatalog());\n            preparedStatement.setString(2, \"PUBLIC\");\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String columnName = resultSet.getString(\"COLUMN_NAME\");\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    boolean generated = resultSet.getBoolean(\"IS_GENERATED\");\n                    result.computeIfAbsent(tableName, k -> new HashMap<>()).put(columnName, generated);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-08-20 15:52:50","endLine":182,"groupId":"101935","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"loadTableGenerated","params":"(finalConnectionconnection@finalCollection<String>tableNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/91/260a9172acc9dc7ed602c4cf7aac9fb287b468.src","preCode":"    private Map<String, Map<String, Boolean>> loadTableGenerated(final Connection connection, final Collection<String> tableNames, final boolean isExclude) throws SQLException {\n        Map<String, Map<String, Boolean>> result = new HashMap<>();\n        try (PreparedStatement preparedStatement = connection.prepareStatement(getGeneratedInfoSQL(tableNames, isExclude))) {\n            preparedStatement.setString(1, connection.getCatalog());\n            preparedStatement.setString(2, \"PUBLIC\");\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String columnName = resultSet.getString(\"COLUMN_NAME\");\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    boolean generated = resultSet.getBoolean(\"IS_GENERATED\");\n                    result.computeIfAbsent(tableName, k -> new HashMap<>()).put(columnName, generated);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/H2TableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"632b7c777ea43f7de3dfd2f13bc866814b882eaa","commitMessage":"@@@Refactor single table meta data load (#11895)\n\n","date":"2021-08-20 15:52:50","modifiedFileCount":"31","status":"M","submitter":"tuichenchuxin"}]
