[{"authorTime":"2020-05-16 19:36:14","codes":[{"authorDate":"2020-05-16 19:36:14","commitOrder":1,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), connection.getRuntimeContext(), \n                new SQLExecutor(connection.getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction()));\n    }\n","date":"2020-05-16 19:36:14","endLine":101,"groupId":"11736","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/14/2afd7467df56faab40fd96f3fe3c239d732611.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), connection.getRuntimeContext(), \n                new SQLExecutor(connection.getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction()));\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"},{"authorDate":"2020-05-16 19:36:14","commitOrder":1,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        RuntimeContext runtimeContext = connection.getRuntimeContext();\n        sqlStatement = runtimeContext.getSqlParserEngine().parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(connection.getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), connection.getRuntimeContext(), sqlExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(connection.getRuntimeContext(), sqlExecutor);\n    }\n","date":"2020-05-16 19:36:14","endLine":133,"groupId":"6984","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/24/e493a78233b6181090ff615c62656011d74611.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        RuntimeContext runtimeContext = connection.getRuntimeContext();\n        sqlStatement = runtimeContext.getSqlParserEngine().parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(connection.getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), connection.getRuntimeContext(), sqlExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(connection.getRuntimeContext(), sqlExecutor);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"}],"commitId":"468e4540f107bacea98e9785b7312b2e5bad0c7e","commitMessage":"@@@Rename sharding-jdbc to shardingsphere-jdbc (#5641)\n\n* Rename sharding-jdbc to shardingsphere-jdbc\n\n* rename org.apache.shardingsphere.shardingjdbc to org.apache.shardingsphere.driver\n\n* rename org.apache.shardingsphere.shardingjdbc to org.apache.shardingsphere.driver","date":"2020-05-16 19:36:14","modifiedFileCount":"32","status":"B","submitter":"Liang Zhang"},{"authorTime":"2020-05-19 16:48:33","codes":[{"authorDate":"2020-05-19 16:48:33","commitOrder":2,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, \n                new SQLExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction()));\n    }\n","date":"2020-05-19 16:48:33","endLine":105,"groupId":"6690","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ad/b1210f8b40e99f4706aa4b166aeea9d7f00762.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), connection.getRuntimeContext(), \n                new SQLExecutor(connection.getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction()));\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2020-05-19 16:48:33","commitOrder":2,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        sqlStatement = schemaContexts.getDefaultSchemaContext().getRuntimeContext().getSqlParserEngine().parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n    }\n","date":"2020-05-19 16:48:33","endLine":136,"groupId":"8980","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/07/bb4dafdc09aa5084d980b335fd2a981ee4d003.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        RuntimeContext runtimeContext = connection.getRuntimeContext();\n        sqlStatement = runtimeContext.getSqlParserEngine().parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(connection.getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), connection.getRuntimeContext(), sqlExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(connection.getRuntimeContext(), sqlExecutor);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"a2b81549f5c64bf7313ffc8d6d18cc5389683228","commitMessage":"@@@Delete RuntimeContext (#5686)\n\n","date":"2020-05-19 16:48:33","modifiedFileCount":"47","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2020-05-25 17:29:03","codes":[{"authorDate":"2020-05-25 17:29:03","commitOrder":3,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, \n                new SQLExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction()));\n        rawSQLExecutor = new RawSQLExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction());\n    }\n","date":"2020-05-25 17:29:03","endLine":115,"groupId":"6690","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c4/ab14894c97013c39c4de1e35258ef64ae7cd0c.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, \n                new SQLExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction()));\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2020-05-25 17:29:03","commitOrder":3,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        sqlStatement = schemaContexts.getDefaultSchemaContext().getRuntimeContext().getSqlParserEngine().parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        rawSQLExecutor = new RawSQLExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n    }\n","date":"2020-05-25 17:29:03","endLine":146,"groupId":"8980","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/05/cfd78795b340b44819936ce6f40c29bbbeb22d.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        sqlStatement = schemaContexts.getDefaultSchemaContext().getRuntimeContext().getSqlParserEngine().parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"85a86adeff6373fe4ab6e74453bc76ca8cb428cd","commitMessage":"@@@Add RawSQLExecutor (#5781)\n\n* add todo\n\n* finish ReplicaExecuteExecutorCallback\n\n* finish ReplicaExecuteBatchExecutorCallback\n\n* rename getSQLUnitGroups\n\n* add AbstractExecuteGroupEngine\n\n* rename ResourceManagedExecuteGroupEngine & ResourceUnmanagedExecuteGroupEngine\n\n* Add RawSQLExecutor\n\n* rename ResourceUnmanagedExecuteGroupEngineExecuteGroupEngine to RawExecuteGroupEngineExecuteGroupEngine\n\n* rename RawExecuteGroupEngine\n\n* Add RawSQLExecutor\n\n* refactor ShardingSpherePreparedStatement\n\n* Add ProxyRawSQLExecutorCallback\n\n* Add ProxyRawSQLExecutorCallback","date":"2020-05-25 17:29:03","modifiedFileCount":"16","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-05-26 10:22:28","codes":[{"authorDate":"2020-05-26 10:22:28","commitOrder":4,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, \n                new SQLExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction());\n    }\n","date":"2020-05-26 10:22:28","endLine":113,"groupId":"6690","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/23/6f529fd1668f920df1eea86306f2e05306c3b4.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, \n                new SQLExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction()));\n        rawSQLExecutor = new RawSQLExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2020-05-26 10:22:28","commitOrder":4,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        sqlStatement = schemaContexts.getDefaultSchemaContext().getRuntimeContext().getSqlParserEngine().parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n    }\n","date":"2020-05-26 10:22:28","endLine":144,"groupId":"8980","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/04/2f5bacfb2bbbe3683eee69d3399a2f07a581c9.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        sqlStatement = schemaContexts.getDefaultSchemaContext().getRuntimeContext().getSqlParserEngine().parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        rawSQLExecutor = new RawSQLExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"c5558b3218181bc53c2b3f80a1fa5a0943d00834","commitMessage":"@@@Add RawSQLExecutorCallback (#5793)\n\n* add DefaultRawSQLExecutorCallback\n\n* remove useless callback\n\n* add RawProxyExecutor\n\n* refactor ShardingSphereStatement & ShardingSpherePreparedStatement\n\n* add QueryHeaderBuilder\n\n* merge QueryHeader and ExecuteQueryHeader\n\n* merge ExecuteResponse and ExecuteResult\n\n* rename ExecuteResponse to ExecuteResult\n\n* rename ExecuteResponse to ExecuteResult\n\n* refactor org.apache.shardingsphere.infra.executor.sql.raw.execute.result\n\n* remove DefaultRawSQLExecutorCallback\n\n* refactor UpdateResponse","date":"2020-05-26 10:22:28","modifiedFileCount":"20","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-02 18:49:45","codes":[{"authorDate":"2020-10-02 18:49:45","commitOrder":5,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n    }\n","date":"2020-10-02 18:49:45","endLine":112,"groupId":"6690","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f3/ed29762d34cae321991c999b17efb980e57196.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, \n                new SQLExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2020-10-02 18:49:45","commitOrder":5,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        sqlStatement = schemaContexts.getSqlParserEngine().parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n    }\n","date":"2020-10-02 18:49:45","endLine":144,"groupId":"12584","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5c/2834157ca8f0f67be9def209044b8a53ebc40a.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        sqlStatement = schemaContexts.getDefaultSchemaContext().getRuntimeContext().getSqlParserEngine().parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getDefaultSchemaContext().getRuntimeContext().getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"794a35521634f921ecdd823d5a3f6833a8860df1","commitMessage":"@@@Simplify SchemaContexts (#7686)\n\n* Add SchemaContexts.getExecutorKernel()\n\n* Use SchemaContexts.getExecutorKernel()\n\n* Remove RuntimeContext.executorKernel\n\n* Remove RuntimeContext.executorKernel\n\n* Add SchemaContexts.getSQLParserEngine\n\n* Use SchemaContexts.getSQLParserEngine\n\n* Remove RuntimeContext.sqlParserEngine\n\n* Remove RuntimeContext\n\n* Refactor MySQLComStmtPrepareExecutor\n\n* Refactor SchemaContexts\n\n* Remove SchemaContext\n\n* Refactor SchemaContextsBuilder","date":"2020-10-02 18:49:45","modifiedFileCount":"73","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-11 14:01:16","codes":[{"authorDate":"2020-10-11 14:01:16","commitOrder":6,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-10-11 14:01:16","endLine":115,"groupId":"6690","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4c/40c137a433be319164cc58fb1de8568350d2c0.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2020-10-11 14:01:16","commitOrder":6,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        sqlStatement = schemaContexts.getSqlParserEngine().parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-10-11 14:01:16","endLine":147,"groupId":"12584","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/51/f72df23626a478b824484dc381bb756c98385b.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        sqlStatement = schemaContexts.getSqlParserEngine().parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"99ee934fa6684a07e23d4acebb500b36b0c538e7","commitMessage":"@@@Pull up kernelProcessor into class field (#7741)\n\n* Pull up kernelProcessor into class field\n\n* Revise SQLExecutor","date":"2020-10-11 14:01:16","modifiedFileCount":"6","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-18 17:03:19","codes":[{"authorDate":"2020-10-11 14:01:16","commitOrder":7,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-10-11 14:01:16","endLine":115,"groupId":"6690","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4c/40c137a433be319164cc58fb1de8568350d2c0.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"},{"authorDate":"2020-10-18 17:03:19","commitOrder":7,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypes.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-10-18 17:03:19","endLine":150,"groupId":"0","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ec/968c1d7394fb851ed5524d19aa367bab89b920.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        sqlStatement = schemaContexts.getSqlParserEngine().parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"8131f34f9307a0c6a7011a6f86ae6c9ce4fb3352","commitMessage":"@@@Remove ShardingSphereSQLParserEngine from SchemaContexts (#7832)\n\n* Remove ShardingSphereSQLParserEngineFactory\n\n* Remove ShardingSphereSQLParserEngineFactory\n\n* Remove ShardingSphereSQLParserEngine from SchemaContextsBuilder\n\n* Remove ShardingSphereSQLParserEngine from SchemaContexts\n\n* Delete DALStatement.interp\n\n* Delete DALStatement.tokens\n\n* Delete DALStatementLexer.tokens\n\n* Delete DALStatementLexer.interp\n\n* Delete DALStatementVisitor.java\n\n* Delete DALStatementParser.java\n\n* Delete DALStatementListener.java\n\n* Delete DALStatementLexer.java\n\n* Delete DALStatementBaseVisitor.java\n\n* Delete DALStatementBaseListener.java","date":"2020-10-18 17:03:19","modifiedFileCount":"35","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-18 18:03:07","codes":[{"authorDate":"2020-10-11 14:01:16","commitOrder":8,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-10-11 14:01:16","endLine":115,"groupId":"6690","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4c/40c137a433be319164cc58fb1de8568350d2c0.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"},{"authorDate":"2020-10-18 18:03:07","commitOrder":8,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-10-18 18:03:07","endLine":150,"groupId":"7925","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/79/ac64868b855a29ced3ac1fe95053b2d152632f.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypes.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"c82441ba41bc9913a997147b70dbcc9dbb47ae60","commitMessage":"@@@Rename DatabaseTypes to DatabaseTypeRegistry (#7834)\n\n","date":"2020-10-18 18:03:07","modifiedFileCount":"76","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-26 16:18:47","codes":[{"authorDate":"2020-10-11 14:01:16","commitOrder":9,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-10-11 14:01:16","endLine":115,"groupId":"6690","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4c/40c137a433be319164cc58fb1de8568350d2c0.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"},{"authorDate":"2020-10-26 16:18:47","commitOrder":9,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        sqlStatement = sqlParserEngine.parseToSQLStatement(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-10-26 16:18:47","endLine":150,"groupId":"0","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a5/6abb56a405c9f84d8f2c543f2992fb682e3eed.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"f6df19f78739ea12f50177a1f35c7f8b57e925d1","commitMessage":"@@@Refactor StandardSQLParserEngine and cacheEngine (#7914)\n\n* Rename to getVisitorFacadeFactoryClass() in SQLParserConfiguration\n\n* Refactor StandardSQLParserEngine and cacheEngine\n\n* modify SQLParserEngine\n\n* check style\n\n* java doc","date":"2020-10-26 16:18:47","modifiedFileCount":"20","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2020-10-27 15:59:49","codes":[{"authorDate":"2020-10-11 14:01:16","commitOrder":10,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-10-11 14:01:16","endLine":115,"groupId":"6690","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4c/40c137a433be319164cc58fb1de8568350d2c0.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"},{"authorDate":"2020-10-27 15:59:49","commitOrder":10,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLStatementParserEngine sqlStatementParserEngine = new ShardingSphereSQLStatementParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        sqlStatement = sqlStatementParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-10-27 15:59:49","endLine":150,"groupId":"7925","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/cf/c748306d7f33932d27cb49822e25861312d81e.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        sqlStatement = sqlParserEngine.parseToSQLStatement(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"9d07ef739f72a9128c4bba5ada19d0be0699641c","commitMessage":"@@@Refactor parser engine module structure (#7930)\n\n* Split SQLVisitorFactory\n\n* Add SQLStatementParserEngine\n\n* Rename SQLParserEngine\n\n* Rename ShardingSphereSQLStatementParserEngine\n\n* Refactor SQLParserEngine\n\n* Refactor SQLParsedResultCache\n\n* Add StandardSQLStatementParserEngineFactory\n\n* Refactor StandardSQLStatementParserEngine\n\n* Remove useless SQLParsedResultCache\n\n* For code format","date":"2020-10-27 15:59:49","modifiedFileCount":"17","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-30 01:03:36","codes":[{"authorDate":"2020-10-11 14:01:16","commitOrder":11,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-10-11 14:01:16","endLine":115,"groupId":"6690","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4c/40c137a433be319164cc58fb1de8568350d2c0.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"},{"authorDate":"2020-10-30 01:03:36","commitOrder":11,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        sqlStatement = sqlStatementParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-10-30 01:03:36","endLine":150,"groupId":"7925","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/76/8cfb93d034649fe9c6317e9f96866b1b794ae2.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLStatementParserEngine sqlStatementParserEngine = new ShardingSphereSQLStatementParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        sqlStatement = sqlStatementParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"eb86a693685f6d65bf3c9cf7e16ce3b6a08e960f","commitMessage":"@@@Move ShardingSphereSQLParserEngine to infra-parser module (#7965)\n\n* Decouple SQLStatementParserEngine\n\n* Remove SQLStatementParserEngine\n\n* Rename SQLStatementParserEngine\n\n* For code format\n\n* Move ShardingSphereSQLParserEngine to infra\n\n* Add DistSQLParserFactory\n\n* Fix checkstyle\n\n* Update java doc","date":"2020-10-30 01:03:36","modifiedFileCount":"14","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-09 20:30:31","codes":[{"authorDate":"2020-11-09 20:30:31","commitOrder":12,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), metaDataContexts, new SQLExecutor(metaDataContexts.getExecutorKernel(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(metaDataContexts.getExecutorKernel(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-11-09 20:30:31","endLine":117,"groupId":"6690","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/df/3b37c8e772f9a2f8d6a3063716ef8967d562ef.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), schemaContexts, new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2020-11-09 20:30:31","commitOrder":12,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDatabaseType()));\n        sqlStatement = sqlStatementParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(metaDataContexts.getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), metaDataContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(metaDataContexts.getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, sqlExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-11-09 20:30:31","endLine":150,"groupId":"7925","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2d/8ff5a6d334f3b08650d8690333b800033b8be4.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        schemaContexts = connection.getSchemaContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        sqlStatement = sqlStatementParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), schemaContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(schemaContexts.getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(schemaContexts, sqlExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"a6b2375ce66834335447254a0309cba2b3f71510","commitMessage":"@@@Rename MetaDataContexts (#8101)\n\n* Rename MetaDataContexts\n\n* Rename package name","date":"2020-11-09 20:30:31","modifiedFileCount":"92","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-21 17:20:14","codes":[{"authorDate":"2020-11-21 17:20:14","commitOrder":13,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), metaDataContexts, new SQLExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-11-21 17:20:14","endLine":117,"groupId":"6690","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1b/c66a896c7c2db8da8bdd0f4a2eb86da7eae8c8.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), metaDataContexts, new SQLExecutor(metaDataContexts.getExecutorKernel(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(metaDataContexts.getExecutorKernel(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2020-11-21 17:20:14","commitOrder":13,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDatabaseType()));\n        sqlStatement = sqlStatementParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), metaDataContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, sqlExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-11-21 17:20:14","endLine":150,"groupId":"12698","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1a/237ac2958214dc96ff7857e92babc965ca44c5.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDatabaseType()));\n        sqlStatement = sqlStatementParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(metaDataContexts.getExecutorKernel(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), metaDataContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(metaDataContexts.getExecutorKernel(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, sqlExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"dc3af42b1328348d884e19281e4aae5a8b1cbd42","commitMessage":"@@@Refactor executor.kernel's domain (#8266)\n\n* Rename ExecutorServiceManager\n\n* Rename ExecutorThreadFactoryBuilder\n\n* Rename package to kernel.thread\n\n* Add kernel.model package\n\n* Rename ExecutorEngine","date":"2020-11-21 17:20:14","modifiedFileCount":"64","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-22 16:46:11","codes":[{"authorDate":"2020-11-22 16:46:11","commitOrder":14,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), metaDataContexts, new SQLExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction()));\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-11-22 16:46:11","endLine":117,"groupId":"6690","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2b/4f049c0d061e696397674609769ed16a2f7ddb.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), metaDataContexts, new SQLExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction()));\n        rawExecutor = new RawJDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2020-11-22 16:46:11","commitOrder":14,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDatabaseType()));\n        sqlStatement = sqlStatementParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), metaDataContexts, sqlExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, sqlExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-11-22 16:46:11","endLine":150,"groupId":"12698","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1a/8d6e74fd2406dbcf54051e9528e929f88cb57b.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDatabaseType()));\n        sqlStatement = sqlStatementParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), metaDataContexts, sqlExecutor);\n        rawExecutor = new RawJDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, sqlExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"8845e227dac086b123280fddbad070c8009f7c03","commitMessage":"@@@Add result.query and result.update packages (#8288)\n\n* For code style\n\n* Rename RawExecutor\n\n* Add result.query and result.update packages","date":"2020-11-22 16:46:11","modifiedFileCount":"77","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-22 18:26:20","codes":[{"authorDate":"2020-11-22 18:26:20","commitOrder":15,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), metaDataContexts, new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction()));\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-11-22 18:26:20","endLine":117,"groupId":"6690","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/43/382a3995ddd161d34951485f12ce852b4574db.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), metaDataContexts, new SQLExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction()));\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2020-11-22 18:26:20","commitOrder":15,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDatabaseType()));\n        sqlStatement = sqlStatementParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-11-22 18:26:20","endLine":150,"groupId":"12698","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/28/78aea03cabc4d6787eeeb2f60b78142c422995.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDatabaseType()));\n        sqlStatement = sqlStatementParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        SQLExecutor sqlExecutor = new SQLExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), metaDataContexts, sqlExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, sqlExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"aa0956454c826e007e3db6173282c86fe3e1ac61","commitMessage":"@@@Rename JDBCExecutor (#8291)\n\n* Move SQLExecutionUnit and ConnectionMode to engine package\n\n* Add jdbc.callback package\n\n* Move ExecutorExceptionHandler to engine package\n\n* Rename JDBCExecutor\n\n* Rename DefaultJDBCExecutorCallback\n\n* Rename ProxySQLExecutorCallback\n\n* Rename JDBCExecutorCallback","date":"2020-11-22 18:26:20","modifiedFileCount":"30","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-12-07 16:31:33","codes":[{"authorDate":"2020-12-07 16:31:33","commitOrder":16,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-12-07 16:31:33","endLine":125,"groupId":"13555","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/01/38efd774e7028efeb8685fd9bfa470f5ea991c.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), metaDataContexts, new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction()));\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2020-12-07 16:31:33","commitOrder":16,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDatabaseType()));\n        sqlStatement = sqlStatementParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), metaDataContexts, jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-12-07 16:31:33","endLine":157,"groupId":"11926","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/00/d4626a6c57f752d4ae92e135a9debbf8b80754.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDatabaseType()));\n        sqlStatement = sqlStatementParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"b198e6a99b80bc95e8322012bfbae9a45f26c787","commitMessage":"@@@Use callback instead of execute query (#8519)\n\n* Refactor ProxyJDBCExecutorCallback\n\n* Refactor AbstractStatementExecutor\n\n* Add DriverJDBCExecutorCallback\n\n* Adjust param sequence for ProxyJDBCExecutorCallback\n\n* Adjust param sequence for Updater\n\n* Adjust param sequence for Executor\n\n* Add DriverStatementExecutorCallback and DriverPreparedStatementExecutorCallback\n\n* Rename JDBCExecuteQueryCallback\n\n* Use callback instead of execute query","date":"2020-12-07 16:31:33","modifiedFileCount":"10","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-12-08 11:31:00","codes":[{"authorDate":"2020-12-08 11:31:00","commitOrder":17,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        jdbcStatementExecutor = new DriverJDBCExecutor(connection.getDataSourceMap(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-12-08 11:31:00","endLine":127,"groupId":"7539","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ad/7fb3f65d2e4bae23406794c42778ae347db9d5.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        statementExecutor = new StatementExecutor(connection.getDataSourceMap(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2020-12-08 11:31:00","commitOrder":17,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDatabaseType()));\n        sqlStatement = sqlStatementParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        jdbcStatementExecutor = new DriverJDBCExecutor(connection.getDataSourceMap(), metaDataContexts, jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-12-08 11:31:00","endLine":156,"groupId":"12698","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/75/8e4a7bdc4d4383b493330f8f012b0951add11e.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDatabaseType()));\n        sqlStatement = sqlStatementParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        preparedStatementExecutor = new PreparedStatementExecutor(connection.getDataSourceMap(), metaDataContexts, jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"458151d1d14f247f308010e3a0264bcb2f975660","commitMessage":"@@@Refactor Driver JDBC executor (#8523)\n\n* Refactor AbstractStatementExecutor.executeUpdate\n\n* Refactor AbstractStatementExecutor\n\n* Refactor AbstractStatementExecutor.execute\n\n* Remove PreparedStatementExecutor\n\n* Remove StatementExecutor\n\n* Rename JDBCStatementExecutor\n\n* Rename ExecuteCallback\n\n* Rename ExecuteUpdateCallback\n\n* Add back execute query to JDBCStatementExecutor\n\n* Rename DriverJDBCExecutor\n\n* Rename DriverJDBCExecutor","date":"2020-12-08 11:31:00","modifiedFileCount":"2","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-12-08 17:53:28","codes":[{"authorDate":"2020-12-08 17:53:28","commitOrder":18,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(connection.getDataSourceMap(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-12-08 17:53:28","endLine":129,"groupId":"7539","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7b/ae993423680614a544879c9f1293ef149b5d51.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        jdbcStatementExecutor = new DriverJDBCExecutor(connection.getDataSourceMap(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2020-12-08 17:53:28","commitOrder":18,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(connection.getDataSourceMap(), metaDataContexts, jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-12-08 17:53:28","endLine":158,"groupId":"12698","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c8/df8edff3afb6ba7548b2ec2c1e221a9db08bd7.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDatabaseType()));\n        sqlStatement = sqlStatementParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        jdbcStatementExecutor = new DriverJDBCExecutor(connection.getDataSourceMap(), metaDataContexts, jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"}],"commitId":"bc1c3aeae02a91d54a0d65c635d0be0d2390943a","commitMessage":"@@@Merge RawExecutor and ProxyRawExecutor (#8532)\n\n* Remove useless getter of DriverJDBCExecutor\n\n* Rename driverJDBCExecutor\n\n* Refactor ShardingSphereStatement.executeQuery\n\n* Remove useless todo\n\n* Merge RawExecutor and ProxyRawExecutor","date":"2020-12-08 17:53:28","modifiedFileCount":"5","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-12-12 23:20:10","codes":[{"authorDate":"2020-12-08 17:53:28","commitOrder":19,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(connection.getDataSourceMap(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-12-08 17:53:28","endLine":129,"groupId":"7539","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7b/ae993423680614a544879c9f1293ef149b5d51.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(connection.getDataSourceMap(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"N"},{"authorDate":"2020-12-12 23:20:10","commitOrder":19,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(connection.getDataSourceMap(), metaDataContexts, jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2020-12-12 23:20:10","endLine":158,"groupId":"6857","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d8/b29cd82f5f3c4a19b5507f2033b9c42f2460f0.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(connection.getDataSourceMap(), metaDataContexts, jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"efdd25f4b72a85c3040d089ff58f418141cc72b2","commitMessage":"@@@Split backend database type from same one to multiple with each schema (#8596)\n\n* Use database type map instead of single database type\n\n* Add MetaDataContexts.getAllSchemas\n\n* Remove MetaDataContexts.getDatabaseTypes()\n\n* Add ShardingSphereResource.databaseType\n\n* Remove MetaDataContexts.getDatabaseType()\n\n* Remove StandardMetaDataContexts.databaseTypes\n\n* Use MetaDataContexts.getDefaultMetaData\n\n* Use MetaDataContexts.getDefaultMetaData\n\n* Add MetaDataContexts.getMetaData(String schemaName)\n\n* Remove MetaDataContexts.getMetaDataMap()\n\n* refactor MetaDataContextsBuilder","date":"2020-12-12 23:20:10","modifiedFileCount":"59","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-04-01 17:33:10","codes":[{"authorDate":"2021-04-01 17:33:10","commitOrder":20,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2021-04-01 17:33:10","endLine":139,"groupId":"6857","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1e/f5cfb193ef86dd433734d7e7f207f202f87b79.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(connection.getDataSourceMap(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2021-04-01 17:33:10","commitOrder":20,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(metaDataContexts, jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2021-04-01 17:33:10","endLine":172,"groupId":"6857","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/97/a74d44ec36cffd160e12b520709e7ad5a8852b.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(connection.getDataSourceMap(), metaDataContexts, jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"b85ecda284aa6f866887ea54b6583c7ff5215382","commitMessage":"@@@Add lock engine for jdbc (#9905)\n\n* Add lock engine for jdbc\n\n* Add lock engine for jdbc","date":"2021-04-01 17:33:10","modifiedFileCount":"3","status":"M","submitter":"Haoran Meng"},{"authorTime":"2021-05-30 15:29:51","codes":[{"authorDate":"2021-05-30 15:29:51","commitOrder":21,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2021-05-30 15:29:51","endLine":140,"groupId":"6857","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/88/32265919a01565c13f60e2a883b1c3f1aa9c19.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2021-05-30 15:29:51","commitOrder":21,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        driverJDBCExecutor = new DriverJDBCExecutor(metaDataContexts, jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2021-05-30 15:29:51","endLine":173,"groupId":"6857","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a5/f47fb8c290982915135166ce3393e4008a0369.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(metaDataContexts, jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"c7c30b5737ebb9119837c902b007b6eb3761ec40","commitMessage":"@@@Add show-process-list-enabled switch for execution process (#10541)\n\n* Prepare ConfigurationProperties for evaluate\n\n* Add show-process-list-enabled\n\n* Add show-process-list-enabled","date":"2021-05-30 15:29:51","modifiedFileCount":"10","status":"M","submitter":"sandynz"},{"authorTime":"2021-06-08 20:50:10","codes":[{"authorDate":"2021-06-08 20:50:10","commitOrder":22,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        \r\n        federateExecutor = new FederateJDBCExecutor(DefaultSchema.LOGIC_NAME, metaDataContexts.getOptimizeContextFactory(), metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules(),\n                metaDataContexts.getProps(), connection, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2021-06-08 20:50:10","endLine":140,"groupId":"6857","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c5/c489b8ea213b889060272623e8dbad33a28e87.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2021-06-08 20:50:10","commitOrder":22,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        \r\n        federateExecutor = new FederateJDBCExecutor(DefaultSchema.LOGIC_NAME, metaDataContexts.getOptimizeContextFactory(), metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules(),\n                metaDataContexts.getProps(), connection, jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2021-06-08 20:50:10","endLine":173,"groupId":"6857","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bc/334af556d455feb710bf04fabd188598b7983c.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        driverJDBCExecutor = new DriverJDBCExecutor(metaDataContexts, jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"407e320d16eba1aacbd4d9f3d0e457790bf23b8d","commitMessage":"@@@Retrieve federated execution from jdbc statement and proxy statement. (#10720)\n\n* Retrieve federated execution from jdbc statement and proxy statement.\n\n* reverse\n\n* fix close()\n\n* get results","date":"2021-06-08 20:50:10","modifiedFileCount":"8","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-06-09 17:24:02","codes":[{"authorDate":"2021-06-09 17:24:02","commitOrder":23,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        \r\n        federateExecutor = new FederateJDBCExecutor(DefaultSchema.LOGIC_NAME, metaDataContexts.getOptimizeContextFactory(), metaDataContexts.getProps(), jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2021-06-09 17:24:02","endLine":139,"groupId":"6857","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/aa/14e2dd3804816097a46b5009350ac161867d93.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        \r\n        federateExecutor = new FederateJDBCExecutor(DefaultSchema.LOGIC_NAME, metaDataContexts.getOptimizeContextFactory(), metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules(),\n                metaDataContexts.getProps(), connection, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2021-06-09 17:24:02","commitOrder":23,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        \r\n        federateExecutor = new FederateJDBCExecutor(DefaultSchema.LOGIC_NAME, metaDataContexts.getOptimizeContextFactory(), metaDataContexts.getProps(), jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2021-06-09 17:24:02","endLine":171,"groupId":"6857","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/12/d0f8b6f89660dcce740bb8d6cb27a1552fc4bd.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        \r\n        federateExecutor = new FederateJDBCExecutor(DefaultSchema.LOGIC_NAME, metaDataContexts.getOptimizeContextFactory(), metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules(),\n                metaDataContexts.getProps(), connection, jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"7ba3f1dd7ed39dce8ae00521f9a9b484e359744a","commitMessage":"@@@optimize calcite parameter pass (#10731)\n\n","date":"2021-06-09 17:24:02","modifiedFileCount":"7","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-08-09 16:45:36","codes":[{"authorDate":"2021-08-09 16:45:36","commitOrder":24,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(connection.getSchemaName(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        \r\n        federateExecutor = new FederateJDBCExecutor(connection.getSchemaName(), metaDataContexts.getOptimizeContextFactory(), metaDataContexts.getProps(), jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2021-08-09 16:45:36","endLine":136,"groupId":"1181","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d2/e584707f24bd62d48cc852cbeea49da6462e7e.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        \r\n        federateExecutor = new FederateJDBCExecutor(DefaultSchema.LOGIC_NAME, metaDataContexts.getOptimizeContextFactory(), metaDataContexts.getProps(), jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2021-08-09 16:45:36","commitOrder":24,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getMetaData(connection.getSchemaName()).getResource().getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(connection.getSchemaName(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        \r\n        federateExecutor = new FederateJDBCExecutor(connection.getSchemaName(), metaDataContexts.getOptimizeContextFactory(), metaDataContexts.getProps(), jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor, connection.getSchemaName());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2021-08-09 16:45:36","endLine":168,"groupId":"6552","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/50/baeaf18c596da58f3517bd1589948bda40a605.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        \r\n        federateExecutor = new FederateJDBCExecutor(DefaultSchema.LOGIC_NAME, metaDataContexts.getOptimizeContextFactory(), metaDataContexts.getProps(), jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"}],"commitId":"222aeb59cc07d5eb3edc858c68b9d95cc903bcec","commitMessage":"@@@JDBC-core module delete getDefaultMetaData() (#11714)\n\n* jdbc-core module delete getDefaultMetaData()\n\n* update\n\n* optimization","date":"2021-08-09 16:45:36","modifiedFileCount":"22","status":"M","submitter":"zhaojinchao"},{"authorTime":"2021-08-15 02:33:31","codes":[{"authorDate":"2021-08-15 02:33:31","commitOrder":25,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getContextManager().getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(connection.getSchemaName(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        \r\n        federateExecutor = new FederateJDBCExecutor(connection.getSchemaName(), metaDataContexts.getOptimizeContextFactory(), metaDataContexts.getProps(), jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2021-08-15 02:33:31","endLine":137,"groupId":"1181","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8b/d585370bf14d55dfa4087e74893c4391ad4345.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(connection.getSchemaName(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        \r\n        federateExecutor = new FederateJDBCExecutor(connection.getSchemaName(), metaDataContexts.getOptimizeContextFactory(), metaDataContexts.getProps(), jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2021-08-15 02:33:31","commitOrder":25,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getContextManager().getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getMetaData(connection.getSchemaName()).getResource().getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(connection.getSchemaName(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        \r\n        federateExecutor = new FederateJDBCExecutor(connection.getSchemaName(), metaDataContexts.getOptimizeContextFactory(), metaDataContexts.getProps(), jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor, connection.getSchemaName());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2021-08-15 02:33:31","endLine":168,"groupId":"6552","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ff/40411cec6b8aa055e0699267c2a41668066dd8.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getMetaData(connection.getSchemaName()).getResource().getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(connection.getSchemaName(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        \r\n        federateExecutor = new FederateJDBCExecutor(connection.getSchemaName(), metaDataContexts.getOptimizeContextFactory(), metaDataContexts.getProps(), jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor, connection.getSchemaName());\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"}],"commitId":"d6e424ba68c64ea1835a42b0f4b0fb7f69c95323","commitMessage":"@@@Add ContextManager (#11822)\n\n* Add ContextManager\n\n* Use ContextManager on GovernanceShardingSphereDataSource\n\n* Use ContextManager on ShardingSphereDataSource\n\n* Use ContextManager on ShardingSphereConnection\n\n* Use ContextManager on ShardingSphereConnection\n\n* Refactor AbstractBaseExecutorTest\n\n* Use ContextManager on proxy\n\n* Fix test case","date":"2021-08-15 02:33:31","modifiedFileCount":"118","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-09-16 19:04:46","codes":[{"authorDate":"2021-08-15 02:33:31","commitOrder":26,"curCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getContextManager().getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(connection.getSchemaName(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        \r\n        federateExecutor = new FederateJDBCExecutor(connection.getSchemaName(), metaDataContexts.getOptimizeContextFactory(), metaDataContexts.getProps(), jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2021-08-15 02:33:31","endLine":137,"groupId":"101177","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"ShardingSphereStatement","params":"(finalShardingSphereConnectionconnection@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8b/d585370bf14d55dfa4087e74893c4391ad4345.src","preCode":"    public ShardingSphereStatement(final ShardingSphereConnection connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {\n        super(Statement.class);\n        this.connection = connection;\n        metaDataContexts = connection.getContextManager().getMetaDataContexts();\n        statements = new LinkedList<>();\n        statementOption = new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(connection.getSchemaName(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        \r\n        federateExecutor = new FederateJDBCExecutor(connection.getSchemaName(), metaDataContexts.getOptimizeContextFactory(), metaDataContexts.getProps(), jdbcExecutor);\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"N"},{"authorDate":"2021-09-16 19:04:46","commitOrder":26,"curCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getContextManager().getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getMetaData(connection.getSchemaName()).getResource().getDatabaseType()), metaDataContexts.getProps());\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(connection.getSchemaName(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        \r\n        federateExecutor = new FederateJDBCExecutor(connection.getSchemaName(), metaDataContexts.getOptimizeContextFactory(), metaDataContexts.getProps(), jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor, connection.getSchemaName());\n        kernelProcessor = new KernelProcessor();\n    }\n","date":"2021-09-16 19:04:46","endLine":168,"groupId":"101177","id":52,"instanceNumber":2,"isCurCommit":1,"methodName":"ShardingSpherePreparedStatement","params":"(finalShardingSphereConnectionconnection@finalStringsql@finalintresultSetType@finalintresultSetConcurrency@finalintresultSetHoldability@finalbooleanreturnGeneratedKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/db/40832b7e5f4fdf661c2642b3a393e2e7a07ddc.src","preCode":"    private ShardingSpherePreparedStatement(final ShardingSphereConnection connection, final String sql,\n                                            final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability, final boolean returnGeneratedKeys) throws SQLException {\n        if (Strings.isNullOrEmpty(sql)) {\n            throw new SQLException(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);\n        }\n        this.connection = connection;\n        metaDataContexts = connection.getContextManager().getMetaDataContexts();\n        this.sql = sql;\n        statements = new ArrayList<>();\n        parameterSets = new ArrayList<>();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getMetaData(connection.getSchemaName()).getResource().getDatabaseType()));\n        sqlStatement = sqlParserEngine.parse(sql, true);\n        parameterMetaData = new ShardingSphereParameterMetaData(sqlStatement);\n        statementOption = returnGeneratedKeys ? new StatementOption(true) : new StatementOption(resultSetType, resultSetConcurrency, resultSetHoldability);\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction());\n        driverJDBCExecutor = new DriverJDBCExecutor(connection.getSchemaName(), metaDataContexts, jdbcExecutor);\n        rawExecutor = new RawExecutor(metaDataContexts.getExecutorEngine(), connection.isHoldTransaction(), metaDataContexts.getProps());\n        \r\n        federateExecutor = new FederateJDBCExecutor(connection.getSchemaName(), metaDataContexts.getOptimizeContextFactory(), metaDataContexts.getProps(), jdbcExecutor);\n        batchPreparedStatementExecutor = new BatchPreparedStatementExecutor(metaDataContexts, jdbcExecutor, connection.getSchemaName());\n        kernelProcessor = new KernelProcessor();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"}],"commitId":"ac7987451dd9e7fbde62c5add0224ba740bb20c9","commitMessage":"@@@Support sql annotation analysis (#12280)\n\n* Sql comments parse.\n\n* Add test case.\n\n* Add empty line.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* Add switch for sql comment parsing.\n\n* fix properties error.\n\n* fix properties error.\n\n* Revert \"fix properties error.\"\n\nThis reverts commit 2b50a4ef\n\n* Revert \"fix properties error.\"\n\nThis reverts commit 2ca3ca86\n\n* Revert \"Add switch for sql comment parsing.\"\n\nThis reverts commit 70ed1039\n\n* add switch for sql comment parse\n\n* add switch for sql comment parse\n\n* add switch for sql comment parse\n\n* add switch for sql comment parse\n\n* fix review suggestions\n\n* fix review suggestions","date":"2021-09-16 19:04:46","modifiedFileCount":"57","status":"M","submitter":"tuichenchuxin"}]
