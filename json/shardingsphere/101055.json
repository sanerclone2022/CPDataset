[{"authorTime":"2021-02-25 16:39:55","codes":[{"authorDate":"2021-06-29 21:48:56","commitOrder":7,"curCode":"    public static Optional<TextProtocolBackendHandler> newInstance(final DatabaseType databaseType, final SQLStatement sqlStatement, final BackendConnection backendConnection) throws SQLException {\n        if (sqlStatement instanceof RQLStatement) {\n            return Optional.of(RQLBackendHandlerFactory.newInstance((RQLStatement) sqlStatement, backendConnection));\n        }\n        if (sqlStatement instanceof RDLStatement) {\n            return Optional.of(RDLBackendHandlerFactory.newInstance(databaseType, sqlStatement, backendConnection));\n        }\n        return RALBackendHandlerFactory.newInstance(sqlStatement);\n    }\n","date":"2021-06-29 21:48:56","endLine":58,"groupId":"3679","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"newInstance","params":"(finalDatabaseTypedatabaseType@finalSQLStatementsqlStatement@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/62/2e96a36cd786749f78f83161e98778e3b0eb57.src","preCode":"    public static Optional<TextProtocolBackendHandler> newInstance(final DatabaseType databaseType, final SQLStatement sqlStatement, final BackendConnection backendConnection) throws SQLException {\n        if (sqlStatement instanceof RQLStatement) {\n            return Optional.of(RQLBackendHandlerFactory.newInstance((RQLStatement) sqlStatement, backendConnection));\n        }\n        if (sqlStatement instanceof RDLStatement) {\n            return Optional.of(RDLBackendHandlerFactory.newInstance(databaseType, sqlStatement, backendConnection));\n        }\n        return RALBackendHandlerFactory.newInstance(sqlStatement);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/distsql/DistSQLBackendHandlerFactory.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"MB"},{"authorDate":"2021-02-25 16:39:55","commitOrder":7,"curCode":"    public static Optional<TextProtocolBackendHandler> newInstance(final SQLStatement sqlStatement) {\n        if (sqlStatement instanceof ShowScalingJobListStatement) {\n            return Optional.of(new ShowScalingJobListBackendHandler());\n        }\n        if (sqlStatement instanceof ShowScalingJobStatusStatement) {\n            return Optional.of(new ShowScalingJobStatusBackendHandler((ShowScalingJobStatusStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof StartScalingJobStatement) {\n            return Optional.of(new StartScalingJobBackendHandler((StartScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof StopScalingJobStatement) {\n            return Optional.of(new StopScalingJobBackendHandler((StopScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof DropScalingJobStatement) {\n            return Optional.of(new DropScalingJobBackendHandler((DropScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof ResetScalingJobStatement) {\n            return Optional.of(new ResetScalingJobBackendHandler((ResetScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof CheckScalingJobStatement) {\n            return Optional.of(new CheckScalingJobBackendHandler((CheckScalingJobStatement) sqlStatement));\n        }\n        return Optional.empty();\n    }\n","date":"2021-02-25 16:39:55","endLine":76,"groupId":"5945","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"newInstance","params":"(finalSQLStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9b/ab535fc47ae1914af0bbe15e12ca499d1cd9eb.src","preCode":"    public static Optional<TextProtocolBackendHandler> newInstance(final SQLStatement sqlStatement) {\n        if (sqlStatement instanceof ShowScalingJobListStatement) {\n            return Optional.of(new ShowScalingJobListBackendHandler());\n        }\n        if (sqlStatement instanceof ShowScalingJobStatusStatement) {\n            return Optional.of(new ShowScalingJobStatusBackendHandler((ShowScalingJobStatusStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof StartScalingJobStatement) {\n            return Optional.of(new StartScalingJobBackendHandler((StartScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof StopScalingJobStatement) {\n            return Optional.of(new StopScalingJobBackendHandler((StopScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof DropScalingJobStatement) {\n            return Optional.of(new DropScalingJobBackendHandler((DropScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof ResetScalingJobStatement) {\n            return Optional.of(new ResetScalingJobBackendHandler((ResetScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof CheckScalingJobStatement) {\n            return Optional.of(new CheckScalingJobBackendHandler((CheckScalingJobStatement) sqlStatement));\n        }\n        return Optional.empty();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/distsql/ral/RALBackendHandlerFactory.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"NB"}],"commitId":"38a9175d648543c2cb47017f78dec2ed4eaa376d","commitMessage":"@@@Refactor RDLBackendHandlerFactory (#11062)\n\n","date":"2021-06-29 21:48:56","modifiedFileCount":"3","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-02-25 16:39:55","codes":[{"authorDate":"2021-07-01 23:54:28","commitOrder":8,"curCode":"    public static Optional<TextProtocolBackendHandler> newInstance(final DatabaseType databaseType, final SQLStatement sqlStatement, final BackendConnection backendConnection) throws SQLException {\n        if (sqlStatement instanceof RQLStatement) {\n            return Optional.of(RQLBackendHandlerFactory.newInstance((RQLStatement) sqlStatement, backendConnection));\n        }\n        if (sqlStatement instanceof RDLStatement || sqlStatement instanceof CreateDatabaseStatement || sqlStatement instanceof DropDatabaseStatement) {\n            return Optional.of(RDLBackendHandlerFactory.newInstance(databaseType, sqlStatement, backendConnection));\n        }\n        return RALBackendHandlerFactory.newInstance(sqlStatement);\n    }\n","date":"2021-07-01 23:54:28","endLine":60,"groupId":"3679","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"newInstance","params":"(finalDatabaseTypedatabaseType@finalSQLStatementsqlStatement@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/36/8e8fa46b9a72d3b043a6a9e000a57758ac5527.src","preCode":"    public static Optional<TextProtocolBackendHandler> newInstance(final DatabaseType databaseType, final SQLStatement sqlStatement, final BackendConnection backendConnection) throws SQLException {\n        if (sqlStatement instanceof RQLStatement) {\n            return Optional.of(RQLBackendHandlerFactory.newInstance((RQLStatement) sqlStatement, backendConnection));\n        }\n        if (sqlStatement instanceof RDLStatement) {\n            return Optional.of(RDLBackendHandlerFactory.newInstance(databaseType, sqlStatement, backendConnection));\n        }\n        return RALBackendHandlerFactory.newInstance(sqlStatement);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/distsql/DistSQLBackendHandlerFactory.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2021-02-25 16:39:55","commitOrder":8,"curCode":"    public static Optional<TextProtocolBackendHandler> newInstance(final SQLStatement sqlStatement) {\n        if (sqlStatement instanceof ShowScalingJobListStatement) {\n            return Optional.of(new ShowScalingJobListBackendHandler());\n        }\n        if (sqlStatement instanceof ShowScalingJobStatusStatement) {\n            return Optional.of(new ShowScalingJobStatusBackendHandler((ShowScalingJobStatusStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof StartScalingJobStatement) {\n            return Optional.of(new StartScalingJobBackendHandler((StartScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof StopScalingJobStatement) {\n            return Optional.of(new StopScalingJobBackendHandler((StopScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof DropScalingJobStatement) {\n            return Optional.of(new DropScalingJobBackendHandler((DropScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof ResetScalingJobStatement) {\n            return Optional.of(new ResetScalingJobBackendHandler((ResetScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof CheckScalingJobStatement) {\n            return Optional.of(new CheckScalingJobBackendHandler((CheckScalingJobStatement) sqlStatement));\n        }\n        return Optional.empty();\n    }\n","date":"2021-02-25 16:39:55","endLine":76,"groupId":"5945","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"newInstance","params":"(finalSQLStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9b/ab535fc47ae1914af0bbe15e12ca499d1cd9eb.src","preCode":"    public static Optional<TextProtocolBackendHandler> newInstance(final SQLStatement sqlStatement) {\n        if (sqlStatement instanceof ShowScalingJobListStatement) {\n            return Optional.of(new ShowScalingJobListBackendHandler());\n        }\n        if (sqlStatement instanceof ShowScalingJobStatusStatement) {\n            return Optional.of(new ShowScalingJobStatusBackendHandler((ShowScalingJobStatusStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof StartScalingJobStatement) {\n            return Optional.of(new StartScalingJobBackendHandler((StartScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof StopScalingJobStatement) {\n            return Optional.of(new StopScalingJobBackendHandler((StopScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof DropScalingJobStatement) {\n            return Optional.of(new DropScalingJobBackendHandler((DropScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof ResetScalingJobStatement) {\n            return Optional.of(new ResetScalingJobBackendHandler((ResetScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof CheckScalingJobStatement) {\n            return Optional.of(new CheckScalingJobBackendHandler((CheckScalingJobStatement) sqlStatement));\n        }\n        return Optional.empty();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/distsql/ral/RALBackendHandlerFactory.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"}],"commitId":"115e97a280dfcb2e3cd0e426f2b292a115cc3ca6","commitMessage":"@@@Move RDLUpdater to related modules (#11098)\n\n* Add RuleDefinitionViolationException\n\n* For code format\n\n* Add CustomizedErrorCode\n\n* Move related RDLUpdater to db discovery modules\n\n* Move related RDLUpdater to db sharding modules\n\n* Move exception package\n\n* For code format\n\n* Refactor DistSQLBackendHandlerFactory","date":"2021-07-01 23:54:28","modifiedFileCount":"8","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-05 18:43:03","codes":[{"authorDate":"2021-07-05 18:43:03","commitOrder":9,"curCode":"    public static TextProtocolBackendHandler newInstance(final DatabaseType databaseType, final DistSQLStatement sqlStatement, final BackendConnection backendConnection) throws SQLException {\n        if (sqlStatement instanceof RQLStatement) {\n            return RQLBackendHandlerFactory.newInstance((RQLStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof RDLStatement) {\n            return RDLBackendHandlerFactory.newInstance(databaseType, (RDLStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof RALStatement) {\n            return RALBackendHandlerFactory.newInstance((RALStatement) sqlStatement);\n        }\n        throw new UnsupportedTypeException(sqlStatement.getClass().getCanonicalName());\n    }\n","date":"2021-07-05 18:43:03","endLine":62,"groupId":"4449","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"newInstance","params":"(finalDatabaseTypedatabaseType@finalDistSQLStatementsqlStatement@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7f/f6dfcfa9e09829ddeecdd0270437f853a96142.src","preCode":"    public static Optional<TextProtocolBackendHandler> newInstance(final DatabaseType databaseType, final SQLStatement sqlStatement, final BackendConnection backendConnection) throws SQLException {\n        if (sqlStatement instanceof RQLStatement) {\n            return Optional.of(RQLBackendHandlerFactory.newInstance((RQLStatement) sqlStatement, backendConnection));\n        }\n        if (sqlStatement instanceof RDLStatement || sqlStatement instanceof CreateDatabaseStatement || sqlStatement instanceof DropDatabaseStatement) {\n            return Optional.of(RDLBackendHandlerFactory.newInstance(databaseType, sqlStatement, backendConnection));\n        }\n        return RALBackendHandlerFactory.newInstance(sqlStatement);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/distsql/DistSQLBackendHandlerFactory.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2021-07-05 18:43:03","commitOrder":9,"curCode":"    public static TextProtocolBackendHandler newInstance(final RALStatement sqlStatement) {\n        if (sqlStatement instanceof ShowScalingJobListStatement) {\n            return new ShowScalingJobListBackendHandler();\n        }\n        if (sqlStatement instanceof ShowScalingJobStatusStatement) {\n            return new ShowScalingJobStatusBackendHandler((ShowScalingJobStatusStatement) sqlStatement);\n        }\n        if (sqlStatement instanceof StartScalingJobStatement) {\n            return new StartScalingJobBackendHandler((StartScalingJobStatement) sqlStatement);\n        }\n        if (sqlStatement instanceof StopScalingJobStatement) {\n            return new StopScalingJobBackendHandler((StopScalingJobStatement) sqlStatement);\n        }\n        if (sqlStatement instanceof DropScalingJobStatement) {\n            return new DropScalingJobBackendHandler((DropScalingJobStatement) sqlStatement);\n        }\n        if (sqlStatement instanceof ResetScalingJobStatement) {\n            return new ResetScalingJobBackendHandler((ResetScalingJobStatement) sqlStatement);\n        }\n        if (sqlStatement instanceof CheckScalingJobStatement) {\n            return new CheckScalingJobBackendHandler((CheckScalingJobStatement) sqlStatement);\n        }\n        throw new UnsupportedOperationException(sqlStatement.getClass().getCanonicalName());\n    }\n","date":"2021-07-05 18:43:03","endLine":74,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"newInstance","params":"(finalRALStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/98/1afef164992c9cb961d66def3f1e9a9956f75b.src","preCode":"    public static Optional<TextProtocolBackendHandler> newInstance(final SQLStatement sqlStatement) {\n        if (sqlStatement instanceof ShowScalingJobListStatement) {\n            return Optional.of(new ShowScalingJobListBackendHandler());\n        }\n        if (sqlStatement instanceof ShowScalingJobStatusStatement) {\n            return Optional.of(new ShowScalingJobStatusBackendHandler((ShowScalingJobStatusStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof StartScalingJobStatement) {\n            return Optional.of(new StartScalingJobBackendHandler((StartScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof StopScalingJobStatement) {\n            return Optional.of(new StopScalingJobBackendHandler((StopScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof DropScalingJobStatement) {\n            return Optional.of(new DropScalingJobBackendHandler((DropScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof ResetScalingJobStatement) {\n            return Optional.of(new ResetScalingJobBackendHandler((ResetScalingJobStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof CheckScalingJobStatement) {\n            return Optional.of(new CheckScalingJobBackendHandler((CheckScalingJobStatement) sqlStatement));\n        }\n        return Optional.empty();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/distsql/ral/RALBackendHandlerFactory.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"bb2dea16923bec61e505f4e237ec477a7744aa45","commitMessage":"@@@Split DatabaseOperateBackendHandlerFactory from RDLBackendHandlerFactory (#11163)\n\n* Add DatabaseOperateBackendHandlerFactory\n\n* Refactor DistSQLBackendHandlerFactory\n\n* Add dboperate package\n\n* Move dboperate package\n\n* Move test case","date":"2021-07-05 18:43:03","modifiedFileCount":"6","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-06 19:01:37","codes":[{"authorDate":"2021-07-06 19:01:37","commitOrder":10,"curCode":"    public static TextProtocolBackendHandler newInstance(final DatabaseType databaseType, final DistSQLStatement sqlStatement, final BackendConnection backendConnection) throws SQLException {\n        if (sqlStatement instanceof RQLStatement) {\n            return RQLBackendHandlerFactory.newInstance((RQLStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof RDLStatement) {\n            return RDLBackendHandlerFactory.newInstance(databaseType, (RDLStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof RALStatement) {\n            return RALBackendHandlerFactory.newInstance((RALStatement) sqlStatement, backendConnection);\n        }\n        throw new UnsupportedTypeException(sqlStatement.getClass().getCanonicalName());\n    }\n","date":"2021-07-06 19:01:37","endLine":62,"groupId":"4449","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"newInstance","params":"(finalDatabaseTypedatabaseType@finalDistSQLStatementsqlStatement@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/69/a4700988a70d9c708925f47cd108618087af2c.src","preCode":"    public static TextProtocolBackendHandler newInstance(final DatabaseType databaseType, final DistSQLStatement sqlStatement, final BackendConnection backendConnection) throws SQLException {\n        if (sqlStatement instanceof RQLStatement) {\n            return RQLBackendHandlerFactory.newInstance((RQLStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof RDLStatement) {\n            return RDLBackendHandlerFactory.newInstance(databaseType, (RDLStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof RALStatement) {\n            return RALBackendHandlerFactory.newInstance((RALStatement) sqlStatement);\n        }\n        throw new UnsupportedTypeException(sqlStatement.getClass().getCanonicalName());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/distsql/DistSQLBackendHandlerFactory.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2021-07-06 19:01:37","commitOrder":10,"curCode":"    public static TextProtocolBackendHandler newInstance(final RALStatement sqlStatement, final BackendConnection backendConnection) {\n        if (sqlStatement instanceof QueryableRALStatement) {\n            return QueryableRALBackendHandlerFactory.newInstance((QueryableRALStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof UpdatableRALStatement) {\n            return UpdatableRALBackendHandlerFactory.newInstance((UpdatableRALStatement) sqlStatement);\n        }\n        throw new UnsupportedOperationException(sqlStatement.getClass().getCanonicalName());\n    }\n","date":"2021-07-06 19:01:37","endLine":49,"groupId":"4449","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"newInstance","params":"(finalRALStatementsqlStatement@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ed/9c50b757a0171f1bfdc8e8e1b9705487f65eda.src","preCode":"    public static TextProtocolBackendHandler newInstance(final RALStatement sqlStatement) {\n        if (sqlStatement instanceof ShowScalingJobListStatement) {\n            return new ShowScalingJobListBackendHandler();\n        }\n        if (sqlStatement instanceof ShowScalingJobStatusStatement) {\n            return new ShowScalingJobStatusBackendHandler((ShowScalingJobStatusStatement) sqlStatement);\n        }\n        if (sqlStatement instanceof StartScalingJobStatement) {\n            return new StartScalingJobBackendHandler((StartScalingJobStatement) sqlStatement);\n        }\n        if (sqlStatement instanceof StopScalingJobStatement) {\n            return new StopScalingJobBackendHandler((StopScalingJobStatement) sqlStatement);\n        }\n        if (sqlStatement instanceof DropScalingJobStatement) {\n            return new DropScalingJobBackendHandler((DropScalingJobStatement) sqlStatement);\n        }\n        if (sqlStatement instanceof ResetScalingJobStatement) {\n            return new ResetScalingJobBackendHandler((ResetScalingJobStatement) sqlStatement);\n        }\n        if (sqlStatement instanceof CheckScalingJobStatement) {\n            return new CheckScalingJobBackendHandler((CheckScalingJobStatement) sqlStatement);\n        }\n        throw new UnsupportedOperationException(sqlStatement.getClass().getCanonicalName());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/distsql/ral/RALBackendHandlerFactory.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"}],"commitId":"f637dd5384e8fb247dda2c24da2c7547133fe67e","commitMessage":"@@@Use SPI to refactor RALBackendHandlerFactory (#11178)\n\n* Abstract ShowRulesStatement\n\n* Add CheckScalingJobQueryResultSet\n\n* Refactor CheckScalingJobQueryResultSet\n\n* Add ShowScalingJobListQueryResultSet\n\n* Add ShowScalingJobStatusQueryResultSet\n\n* Refactor RALBackendHandlerFactory\n\n* Add UpdatableRALBackendHandlerFactory\n\n* Move RALUpdater to infra module","date":"2021-07-06 19:01:37","modifiedFileCount":"10","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-12 14:25:57","codes":[{"authorDate":"2021-07-06 19:01:37","commitOrder":11,"curCode":"    public static TextProtocolBackendHandler newInstance(final DatabaseType databaseType, final DistSQLStatement sqlStatement, final BackendConnection backendConnection) throws SQLException {\n        if (sqlStatement instanceof RQLStatement) {\n            return RQLBackendHandlerFactory.newInstance((RQLStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof RDLStatement) {\n            return RDLBackendHandlerFactory.newInstance(databaseType, (RDLStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof RALStatement) {\n            return RALBackendHandlerFactory.newInstance((RALStatement) sqlStatement, backendConnection);\n        }\n        throw new UnsupportedTypeException(sqlStatement.getClass().getCanonicalName());\n    }\n","date":"2021-07-06 19:01:37","endLine":62,"groupId":"4449","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"newInstance","params":"(finalDatabaseTypedatabaseType@finalDistSQLStatementsqlStatement@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/69/a4700988a70d9c708925f47cd108618087af2c.src","preCode":"    public static TextProtocolBackendHandler newInstance(final DatabaseType databaseType, final DistSQLStatement sqlStatement, final BackendConnection backendConnection) throws SQLException {\n        if (sqlStatement instanceof RQLStatement) {\n            return RQLBackendHandlerFactory.newInstance((RQLStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof RDLStatement) {\n            return RDLBackendHandlerFactory.newInstance(databaseType, (RDLStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof RALStatement) {\n            return RALBackendHandlerFactory.newInstance((RALStatement) sqlStatement, backendConnection);\n        }\n        throw new UnsupportedTypeException(sqlStatement.getClass().getCanonicalName());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/distsql/DistSQLBackendHandlerFactory.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2021-08-12 14:25:57","commitOrder":11,"curCode":"    public static TextProtocolBackendHandler newInstance(final RALStatement sqlStatement, final BackendConnection backendConnection) throws SQLException {\n        if (sqlStatement instanceof QueryableRALStatement) {\n            return QueryableRALBackendHandlerFactory.newInstance((QueryableRALStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof UpdatableRALStatement) {\n            return UpdatableRALBackendHandlerFactory.newInstance((UpdatableRALStatement) sqlStatement);\n        }\n        if (sqlStatement instanceof CommonDistSQLStatement) {\n            return CommonDistSQLBackendHandlerFactory.newInstance((CommonDistSQLStatement) sqlStatement, backendConnection);\n        }\n        throw new UnsupportedOperationException(sqlStatement.getClass().getCanonicalName());\n    }\n","date":"2021-08-12 14:25:57","endLine":59,"groupId":"4449","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"newInstance","params":"(finalRALStatementsqlStatement@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3e/33646dbd314e136337b148d404425cb78de1aa.src","preCode":"    public static TextProtocolBackendHandler newInstance(final RALStatement sqlStatement, final BackendConnection backendConnection) {\n        if (sqlStatement instanceof QueryableRALStatement) {\n            return QueryableRALBackendHandlerFactory.newInstance((QueryableRALStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof UpdatableRALStatement) {\n            return UpdatableRALBackendHandlerFactory.newInstance((UpdatableRALStatement) sqlStatement);\n        }\n        throw new UnsupportedOperationException(sqlStatement.getClass().getCanonicalName());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/distsql/ral/RALBackendHandlerFactory.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"b09b437527f2c87801e8f5edefc21fba955aeec3","commitMessage":"@@@Main structure code of processing SCTL dist SQL. (#11742)\n\n* Add SCTL syntax definition for ANTLR\n\n* fix mistake\n\n* Parse SCTL according to the DistSQL process and implement `set readwrite_splitting hint source` syntax.\n\n* Rollback yaml file.\n\n* Delete blank line.\n\n* Improve comments.\n\n* fix set syntax\n\n* add TODO comment.\n\n* Fix indent of new line.  move sharding and readwrite hint syntax to feature distsql package.\n\n* add final to param.\n\n* Rename ResourceStatement.g4 to CommonDistSQLStatement.g4\n\n* Rename SCTL to commonDistSQL","date":"2021-08-12 14:25:57","modifiedFileCount":"5","status":"M","submitter":"Raigor"},{"authorTime":"2021-08-13 18:15:48","codes":[{"authorDate":"2021-07-06 19:01:37","commitOrder":12,"curCode":"    public static TextProtocolBackendHandler newInstance(final DatabaseType databaseType, final DistSQLStatement sqlStatement, final BackendConnection backendConnection) throws SQLException {\n        if (sqlStatement instanceof RQLStatement) {\n            return RQLBackendHandlerFactory.newInstance((RQLStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof RDLStatement) {\n            return RDLBackendHandlerFactory.newInstance(databaseType, (RDLStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof RALStatement) {\n            return RALBackendHandlerFactory.newInstance((RALStatement) sqlStatement, backendConnection);\n        }\n        throw new UnsupportedTypeException(sqlStatement.getClass().getCanonicalName());\n    }\n","date":"2021-07-06 19:01:37","endLine":62,"groupId":"101055","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"newInstance","params":"(finalDatabaseTypedatabaseType@finalDistSQLStatementsqlStatement@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/69/a4700988a70d9c708925f47cd108618087af2c.src","preCode":"    public static TextProtocolBackendHandler newInstance(final DatabaseType databaseType, final DistSQLStatement sqlStatement, final BackendConnection backendConnection) throws SQLException {\n        if (sqlStatement instanceof RQLStatement) {\n            return RQLBackendHandlerFactory.newInstance((RQLStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof RDLStatement) {\n            return RDLBackendHandlerFactory.newInstance(databaseType, (RDLStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof RALStatement) {\n            return RALBackendHandlerFactory.newInstance((RALStatement) sqlStatement, backendConnection);\n        }\n        throw new UnsupportedTypeException(sqlStatement.getClass().getCanonicalName());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/distsql/DistSQLBackendHandlerFactory.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2021-08-13 18:15:48","commitOrder":12,"curCode":"    public static TextProtocolBackendHandler newInstance(final RALStatement sqlStatement, final BackendConnection backendConnection) throws SQLException {\n        if (sqlStatement instanceof QueryableRALStatement) {\n            return QueryableRALBackendHandlerFactory.newInstance((QueryableRALStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof UpdatableRALStatement) {\n            return UpdatableRALBackendHandlerFactory.newInstance((UpdatableRALStatement) sqlStatement);\n        }\n        if (sqlStatement instanceof CommonDistSQLStatement) {\n            return CommonDistSQLBackendHandlerFactory.newInstance((CommonDistSQLStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof AdvancedDistSQLStatement) {\n            return AdvancedDistSQLBackendHandlerFactory.newInstance((AdvancedDistSQLStatement) sqlStatement, backendConnection);\n        }\n        throw new UnsupportedOperationException(sqlStatement.getClass().getCanonicalName());\n    }\n","date":"2021-08-13 18:15:48","endLine":64,"groupId":"101055","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"newInstance","params":"(finalRALStatementsqlStatement@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/cf/98704f9b2818891435516de1990178773ffe57.src","preCode":"    public static TextProtocolBackendHandler newInstance(final RALStatement sqlStatement, final BackendConnection backendConnection) throws SQLException {\n        if (sqlStatement instanceof QueryableRALStatement) {\n            return QueryableRALBackendHandlerFactory.newInstance((QueryableRALStatement) sqlStatement, backendConnection);\n        }\n        if (sqlStatement instanceof UpdatableRALStatement) {\n            return UpdatableRALBackendHandlerFactory.newInstance((UpdatableRALStatement) sqlStatement);\n        }\n        if (sqlStatement instanceof CommonDistSQLStatement) {\n            return CommonDistSQLBackendHandlerFactory.newInstance((CommonDistSQLStatement) sqlStatement, backendConnection);\n        }\n        throw new UnsupportedOperationException(sqlStatement.getClass().getCanonicalName());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/distsql/ral/RALBackendHandlerFactory.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"933ebab23d2431213c8fc9b01d9d096115eca4f8","commitMessage":"@@@Add advancedDistSQLStatement.  and implement 'preview sql'. (#11802)\n\n* Add advancedDistSQLStatement.  and implement 'preview sql'.\n\n* fix `Actual should not exist` syntax problem.","date":"2021-08-13 18:15:48","modifiedFileCount":"29","status":"M","submitter":"Raigor"}]
