[{"authorTime":"2021-05-06 23:57:29","codes":[{"authorDate":"2021-05-01 18:10:08","commitOrder":2,"curCode":"    public void assertHARuleConfiguration() {\n        assertThat(config.getDataSources().size(), is(1));\n        assertTrue(config.getDataSources().stream().findFirst().isPresent());\n        DatabaseDiscoveryDataSourceRuleConfiguration dataSourceRuleConfig = config.getDataSources().stream().findFirst().get();\n        assertThat(dataSourceRuleConfig.getName(), is(\"pr_ds\"));\n        assertThat(dataSourceRuleConfig.getDataSourceNames().size(), is(2));\n        assertTrue(config.getDataSources().contains(dataSourceRuleConfig));\n    }\n","date":"2021-05-01 18:10:08","endLine":52,"groupId":"3838","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertHARuleConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d7/1975af4e124735c6b6d1beb7e28feed3663544.src","preCode":"    public void assertHARuleConfiguration() {\n        assertThat(config.getDataSources().size(), is(1));\n        assertTrue(config.getDataSources().stream().findFirst().isPresent());\n        DatabaseDiscoveryDataSourceRuleConfiguration dataSourceRuleConfig = config.getDataSources().stream().findFirst().get();\n        assertThat(dataSourceRuleConfig.getName(), is(\"pr_ds\"));\n        assertThat(dataSourceRuleConfig.getDataSourceNames().size(), is(2));\n        assertTrue(config.getDataSources().contains(dataSourceRuleConfig));\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-spring/shardingsphere-db-discovery-spring-boot-starter/src/test/java/org/apache/shardingsphere/dbdiscovery/spring/boot/DatabaseDiscoverySpringBootStarterTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"NB"},{"authorDate":"2021-05-06 23:57:29","commitOrder":2,"curCode":"    public void assertReadwriteSplittingRuleConfiguration() {\n        assertThat(config.getDataSources().size(), is(1));\n        assertTrue(config.getDataSources().stream().findFirst().isPresent());\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = config.getDataSources().stream().findFirst().get();\n        assertThat(dataSourceRuleConfig.getName(), is(\"pr_ds\"));\n        assertThat(dataSourceRuleConfig.getWriteDataSourceName(), is(\"write_ds\"));\n        assertThat(dataSourceRuleConfig.getLoadBalancerName(), is(\"random\"));\n        assertThat(dataSourceRuleConfig.getReadDataSourceNames().size(), is(2));\n        assertTrue(config.getDataSources().contains(dataSourceRuleConfig));\n        assertThat(config.getLoadBalanceAlgorithms().size(), is(1));\n        assertTrue(config.getLoadBalanceAlgorithms().containsKey(\"random\"));\n    }\n","date":"2021-05-06 23:57:29","endLine":65,"groupId":"1274","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertReadwriteSplittingRuleConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/cb/d0cc248f92521d4f41dadf965d3dba2b2391ca.src","preCode":"    public void assertReadwriteSplittingRuleConfiguration() {\n        assertThat(config.getDataSources().size(), is(1));\n        assertTrue(config.getDataSources().stream().findFirst().isPresent());\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = config.getDataSources().stream().findFirst().get();\n        assertThat(dataSourceRuleConfig.getName(), is(\"pr_ds\"));\n        assertThat(dataSourceRuleConfig.getWriteDataSourceName(), is(\"write_ds\"));\n        assertThat(dataSourceRuleConfig.getLoadBalancerName(), is(\"random\"));\n        assertThat(dataSourceRuleConfig.getReadDataSourceNames().size(), is(2));\n        assertTrue(config.getDataSources().contains(dataSourceRuleConfig));\n        assertThat(config.getLoadBalanceAlgorithms().size(), is(1));\n        assertTrue(config.getLoadBalanceAlgorithms().containsKey(\"random\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-spring/shardingsphere-readwrite-splitting-spring-boot-starter/src/test/java/org/apache/shardingsphere/readwritesplitting/spring/boot/ReadwriteSplittingSpringBootStarterTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"}],"commitId":"c0a66492b6656ca15aac8cd880350a91c1e45bb0","commitMessage":"@@@Rename ReadWrite to Readwrite (#10261)\n\n* Rename ReadWriteSplittingRule\n\n* Rename ReadwriteSplittingDataSourceRuleConfiguration\n\n* Rename ReadwriteSplittingSQLRouter\n\n* Rename ReadwriteSplittingDataSourceRouter\n\n* Rename ReadwriteSplittingRule\n\n* Rename ReadwriteSplittingDataSourceRule\n\n* Rename AlgorithmProvidedReadwriteSplittingRuleBuilder\n\n* Rename ReadwriteSplittingRuleBuilder\n\n* rename ReadwriteSplittingOrder\n\n* Rename AlgorithmProvidedReadwriteSplittingRuleConfiguration\n\n* Rename YamlReadwriteSplittingRuleConfiguration\n\n* Rename YamlReadwriteSplittingDataSourceRuleConfiguration\n\n* Rename AlterReadwriteSplittingRuleStatementConverter\n\n* Rename CreateReadwriteSplittingRuleStatementConverter\n\n* Rename ReadwriteSplittingRuleAlgorithmProviderConfigurationYamlSwapper\n\n* Rename ReadwriteSplittingRuleConfigurationYamlSwapper\n\n* Rename ReadwriteSplittingAlgorithmProvidedBeanRegistry\n\n* Rename ReadwriteSplittingSpringBootCondition\n\n* Rename YamlReadwriteSplittingRuleSpringBootConfiguration\n\n* Rename ReadwriteSplittingRuleSpringbootConfiguration\n\n* Rename ReadwriteSplittingSpringBootStarterTest\n\n* Rename YamlGovernanceReadwriteSplittingIntegrateTest\n\n* Rename CreateReadwriteSplittingRuleStatement\n\n* Rename ReadwriteSplittingRuleSegment\n\n* Rename GovernanceSpringBootRegistryReadwriteSplittingTest\n\n* Rename AlterReadwriteSplittingRuleStatement\n\n* Rename ReadwriteSplittingRuleConfigurationChecker\n\n* Rename LocalShardingReadwriteSplittingConfiguration\n\n* Rename ReadwriteSplittingRuleNotExistedException\n\n* Rename ReadwriteSplittingRuleCreateExistsException\n\n* Rename AddReadwriteSplittingRuleDataSourcesExistedException\n\n* Rename ReadwriteSplittingRuleDataSourcesNotExistedException\n\n* Rename ReadwriteSplittingRuleQueryBackendHandler\n\n* Rename DropReadwriteSplittingRuleBackendHandler\n\n* Rename GovernanceSpringBootReadwriteSplittingTest\n\n* Rename AlterReadwriteSplittingRuleBackendHandler\n\n* Rename CreateReadwriteSplittingRuleBackendHandler\n\n* Rename GovernanceShardingReadwriteSplittingNamespaceTest\n\n* Rename YamlGovernanceShardingWithReadwriteSplittingIntegrateTest\n\n* Rename CloudReadwriteSplittingConfiguration\n\n* Rename ShardingReadwriteSplittingConfigurationPrecise\n\n* Rename AbstractShardingSphereDataSourceForReadwriteSplittingTest\n\n* Rename AlgorithmProvidedReadwriteSplittingRuleConfigurationChecker\n\n* Rename ReadwriteSplittingSpringNamespaceTest\n\n* Rename ReadwriteSplittingRuleBeanDefinitionTag\n\n* Rename AbstractReadwriteSplittingRuleConfigurationChecker\n\n* Rename ReadwriteSplittingNamespaceHandler\n\n* Rename ReadwriteSplittingRuleBeanDefinitionParser\n\n* Rename ReadWrite to Readwrite with java class\n\n* Rename ReadWrite to Readwrite with docs","date":"2021-05-06 23:57:29","modifiedFileCount":"20","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-09-05 19:00:52","codes":[{"authorDate":"2021-05-01 18:10:08","commitOrder":3,"curCode":"    public void assertHARuleConfiguration() {\n        assertThat(config.getDataSources().size(), is(1));\n        assertTrue(config.getDataSources().stream().findFirst().isPresent());\n        DatabaseDiscoveryDataSourceRuleConfiguration dataSourceRuleConfig = config.getDataSources().stream().findFirst().get();\n        assertThat(dataSourceRuleConfig.getName(), is(\"pr_ds\"));\n        assertThat(dataSourceRuleConfig.getDataSourceNames().size(), is(2));\n        assertTrue(config.getDataSources().contains(dataSourceRuleConfig));\n    }\n","date":"2021-05-01 18:10:08","endLine":52,"groupId":"10281","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertHARuleConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d7/1975af4e124735c6b6d1beb7e28feed3663544.src","preCode":"    public void assertHARuleConfiguration() {\n        assertThat(config.getDataSources().size(), is(1));\n        assertTrue(config.getDataSources().stream().findFirst().isPresent());\n        DatabaseDiscoveryDataSourceRuleConfiguration dataSourceRuleConfig = config.getDataSources().stream().findFirst().get();\n        assertThat(dataSourceRuleConfig.getName(), is(\"pr_ds\"));\n        assertThat(dataSourceRuleConfig.getDataSourceNames().size(), is(2));\n        assertTrue(config.getDataSources().contains(dataSourceRuleConfig));\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-spring/shardingsphere-db-discovery-spring-boot-starter/src/test/java/org/apache/shardingsphere/dbdiscovery/spring/boot/DatabaseDiscoverySpringBootStarterTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"},{"authorDate":"2021-09-05 19:00:52","commitOrder":3,"curCode":"    public void assertReadwriteSplittingRuleConfiguration() {\n        assertThat(config.getDataSources().size(), is(1));\n        assertTrue(config.getDataSources().stream().findFirst().isPresent());\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = config.getDataSources().stream().findFirst().get();\n        assertThat(dataSourceRuleConfig.getName(), is(\"pr_ds\"));\n        assertThat(dataSourceRuleConfig.getWriteDataSourceName(), is(\"write_ds\"));\n        assertThat(dataSourceRuleConfig.getLoadBalancerName(), is(\"random\"));\n        assertThat(dataSourceRuleConfig.getReadDataSourceNames().size(), is(2));\n        assertFalse(dataSourceRuleConfig.isQueryConsistent());\n        assertTrue(config.getDataSources().contains(dataSourceRuleConfig));\n        assertThat(config.getLoadBalanceAlgorithms().size(), is(1));\n        assertTrue(config.getLoadBalanceAlgorithms().containsKey(\"random\"));\n    }\n","date":"2021-09-05 19:00:52","endLine":67,"groupId":"10281","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertReadwriteSplittingRuleConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b4/d349ee94a7b19a7285c7c726d2642d9252a230.src","preCode":"    public void assertReadwriteSplittingRuleConfiguration() {\n        assertThat(config.getDataSources().size(), is(1));\n        assertTrue(config.getDataSources().stream().findFirst().isPresent());\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = config.getDataSources().stream().findFirst().get();\n        assertThat(dataSourceRuleConfig.getName(), is(\"pr_ds\"));\n        assertThat(dataSourceRuleConfig.getWriteDataSourceName(), is(\"write_ds\"));\n        assertThat(dataSourceRuleConfig.getLoadBalancerName(), is(\"random\"));\n        assertThat(dataSourceRuleConfig.getReadDataSourceNames().size(), is(2));\n        assertTrue(config.getDataSources().contains(dataSourceRuleConfig));\n        assertThat(config.getLoadBalanceAlgorithms().size(), is(1));\n        assertTrue(config.getLoadBalanceAlgorithms().containsKey(\"random\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-spring/shardingsphere-readwrite-splitting-spring-boot-starter/src/test/java/org/apache/shardingsphere/readwritesplitting/spring/boot/ReadwriteSplittingSpringBootStarterTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"b25419ae9f4af7a98255740bc603c34d82f34e97","commitMessage":"@@@Fixes #12158.  add configuration for whether enable consistent routing for readwrite splitting. (#12209)\n\n* For #12158.  Add the consistencyEnabled configuration for readwrite-splitting API & core.\n\n* For #12158.  Add the consistencyEnabled default value for DistSQL handler.\n\n* Add consistencyEnabled configuration and parser for Spring Namespace.\n\n* Add consistencyEnabled configuration for examples.\n\n* update documents of readwrite splitting.\n\n* fix CI.\n\n* update more test cases.\n\n* Change `consistencyEnabled` to `queryConsistent`.\n\n* revert blank line.","date":"2021-09-05 19:00:52","modifiedFileCount":"30","status":"M","submitter":"Raigor"}]
