[{"authorTime":"2021-04-12 18:54:17","codes":[{"authorDate":"2021-04-12 18:54:17","commitOrder":1,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-04-12 18:54:17","endLine":150,"groupId":"2329","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/19/6c0485c642475823e074b4cdddd100e020ffeb.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/authentication/MySQLAuthenticationHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"B"},{"authorDate":"2021-04-12 18:54:17","commitOrder":1,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-04-12 18:54:17","endLine":132,"groupId":"2329","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6a/c3bb61b6e075c5c4affef1377fd19af9a1e98d.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/authentication/PostgreSQLAuthenticationHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"}],"commitId":"20af443ee6670aac77a9a3fcb1ee9dbc1c3c28df","commitMessage":"@@@Rename auth to authentication or authenticated for meaningful and clear reason (#10050)\n\n","date":"2021-04-12 18:54:17","modifiedFileCount":"17","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-06-24 15:39:40","codes":[{"authorDate":"2021-06-24 15:39:40","commitOrder":2,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            when(metaData.getSchema()).thenReturn(schema);\n            when(schema.getTables()).thenReturn(new HashMap<>());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-06-24 15:39:40","endLine":157,"groupId":"12363","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/49/8f56aac45a1368e311fa50f654cd4e31b22adb.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/authentication/MySQLAuthenticationHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"},{"authorDate":"2021-06-24 15:39:40","commitOrder":2,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            when(metaData.getSchema()).thenReturn(schema);\n            when(schema.getTables()).thenReturn(new HashMap<>());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-06-24 15:39:40","endLine":147,"groupId":"12363","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/26/1a352130122231e4b83321375d4aa4aa22d4e6.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/authentication/PostgreSQLAuthenticationHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"}],"commitId":"b72ab3242674b4b64e61a3d4e1dd5c603c5bfcaa","commitMessage":"@@@Improve the initialization of OptimizeContextFactory for issue#10678 (#10840)\n\n* fixed 10678\n\n* fixed code\n\n* fixed 10678\n\n* test\n\n* fixed 10678\n\n* update test case\n\n* update test case\n\n* update test case\n\n* fix method error\n\n* checkstyle\n\n* fix ci and checkstyle\n\n* checkstyle\n\n* fix ci error\n\n* fix load table\n\n* Update StandardMetaDataContexts.java\n\n* Update dql-integration-test-cases.xml\n\n* Update FederateTableMetadata.java\n\n* Update OptimizeContextFactory.java\n\n* Update SchemaBuilder.java\n\n* Update FederateSchemaMetadatas.java","date":"2021-06-24 15:39:40","modifiedFileCount":"20","status":"M","submitter":"totalo"},{"authorTime":"2021-07-27 07:22:30","codes":[{"authorDate":"2021-07-27 07:22:30","commitOrder":3,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-07-27 07:22:30","endLine":155,"groupId":"10845","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/cf/ec72fab5b0ad853d8ee4b72c0974bb9a9edf53.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            when(metaData.getSchema()).thenReturn(schema);\n            when(schema.getTables()).thenReturn(new HashMap<>());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/authentication/MySQLAuthenticationHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2021-07-27 07:22:30","commitOrder":3,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            when(metaData.getSchema()).thenReturn(schema);\n            when(schema.getTables()).thenReturn(Collections.emptyMap());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-07-27 07:22:30","endLine":149,"groupId":"10845","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/74/f097b3ae5c6f1e23f33e6afa2c3a9acc7e756c.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            when(metaData.getSchema()).thenReturn(schema);\n            when(schema.getTables()).thenReturn(new HashMap<>());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/authentication/PostgreSQLAuthenticationHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"6d7e3fe33533f8d8dd098e81d667ce57aabd625a","commitMessage":"@@@Use raw new HashMap to instead of guava (#11517)\n\n* Use raw new HashMap to instead of guava\n\n* Use raw new HashMap to instead of guava","date":"2021-07-27 07:22:30","modifiedFileCount":"69","status":"M","submitter":"Liang Zhang"}]
