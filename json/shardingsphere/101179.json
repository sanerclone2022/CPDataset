[{"authorTime":"2021-06-01 17:02:09","codes":[{"authorDate":"2021-06-01 17:02:09","commitOrder":1,"curCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        federateExecutor = createFederateExecutor();\n        SQLUnit sqlUnit = executionContext.getExecutionUnits().iterator().next().getSqlUnit();\n        return federateExecutor.executeQuery(sqlUnit.getSql(), sqlUnit.getParameters());\n    }\n","date":"2021-06-01 17:02:09","endLine":189,"groupId":"5636","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"executeFederatedQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/99/47317085005a8aec8917efaaed8a225afb1a98.src","preCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        federateExecutor = createFederateExecutor();\n        SQLUnit sqlUnit = executionContext.getExecutionUnits().iterator().next().getSqlUnit();\n        return federateExecutor.executeQuery(sqlUnit.getSql(), sqlUnit.getParameters());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"B"},{"authorDate":"2021-06-01 17:02:09","commitOrder":1,"curCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        federateExecutor = createFederateExecutor();\n        SQLUnit sqlUnit = executionContext.getExecutionUnits().iterator().next().getSqlUnit();\n        return federateExecutor.executeQuery(sqlUnit.getSql(), sqlUnit.getParameters());\n    }\n","date":"2021-06-01 17:02:09","endLine":219,"groupId":"5636","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"executeFederatedQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9b/78174a4e852943b0da6cf7cec0c116fb6ec26a.src","preCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        federateExecutor = createFederateExecutor();\n        SQLUnit sqlUnit = executionContext.getExecutionUnits().iterator().next().getSqlUnit();\n        return federateExecutor.executeQuery(sqlUnit.getSql(), sqlUnit.getParameters());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"B"}],"commitId":"7d6c812f359bf41472a62cbc0493b253fdeb5769","commitMessage":"@@@Create new package federate execution (#10603)\n\n","date":"2021-06-01 17:02:09","modifiedFileCount":"16","status":"B","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-06-08 20:50:10","codes":[{"authorDate":"2021-06-08 20:50:10","commitOrder":2,"curCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return federateExecutor.executeQuery(executionContext, callback);\n    }\n","date":"2021-06-08 20:50:10","endLine":189,"groupId":"5637","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"executeFederatedQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c5/c489b8ea213b889060272623e8dbad33a28e87.src","preCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        federateExecutor = createFederateExecutor();\n        SQLUnit sqlUnit = executionContext.getExecutionUnits().iterator().next().getSqlUnit();\n        return federateExecutor.executeQuery(sqlUnit.getSql(), sqlUnit.getParameters());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"},{"authorDate":"2021-06-08 20:50:10","commitOrder":2,"curCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        \r\n        \r\n        \r\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return federateExecutor.executeQuery(executionContext, callback);\n    }\n","date":"2021-06-08 20:50:10","endLine":222,"groupId":"5637","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"executeFederatedQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bc/334af556d455feb710bf04fabd188598b7983c.src","preCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        federateExecutor = createFederateExecutor();\n        SQLUnit sqlUnit = executionContext.getExecutionUnits().iterator().next().getSqlUnit();\n        return federateExecutor.executeQuery(sqlUnit.getSql(), sqlUnit.getParameters());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"}],"commitId":"407e320d16eba1aacbd4d9f3d0e457790bf23b8d","commitMessage":"@@@Retrieve federated execution from jdbc statement and proxy statement. (#10720)\n\n* Retrieve federated execution from jdbc statement and proxy statement.\n\n* reverse\n\n* fix close()\n\n* get results","date":"2021-06-08 20:50:10","modifiedFileCount":"8","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-06-09 14:10:19","codes":[{"authorDate":"2021-06-09 14:10:19","commitOrder":3,"curCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return federateExecutor.executeQuery(executionContext, callback, JDBCDriverType.STATEMENT, statementOption);\n    }\n","date":"2021-06-09 14:10:19","endLine":189,"groupId":"5637","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"executeFederatedQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/39/6ca52d4f5f682acd7fdbc8355ae961f4f2c659.src","preCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return federateExecutor.executeQuery(executionContext, callback);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"},{"authorDate":"2021-06-09 14:10:19","commitOrder":3,"curCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        PreparedStatementExecuteQueryCallback callback = new PreparedStatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), \n                 sqlStatement, SQLExecutorExceptionHandler.isExceptionThrown());\n        return federateExecutor.executeQuery(executionContext, callback, JDBCDriverType.PREPARED_STATEMENT, statementOption);\n    }\n","date":"2021-06-09 14:10:19","endLine":218,"groupId":"5572","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"executeFederatedQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ad/98836edc1bc75aad5824da7abf767cf0499389.src","preCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        \r\n        \r\n        \r\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return federateExecutor.executeQuery(executionContext, callback);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"}],"commitId":"4f9c0e42dc15fd2b879f7f3c93369867499d2159","commitMessage":"@@@fix sql join error with multi unbinding sharding table (#10728)\n\n","date":"2021-06-09 14:10:19","modifiedFileCount":"7","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-06-09 17:24:02","codes":[{"authorDate":"2021-06-09 17:24:02","commitOrder":4,"curCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return federateExecutor.executeQuery(executionContext, callback, createDriverExecutionPrepareEngine());\n    }\n","date":"2021-06-09 17:24:02","endLine":188,"groupId":"5637","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"executeFederatedQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/aa/14e2dd3804816097a46b5009350ac161867d93.src","preCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return federateExecutor.executeQuery(executionContext, callback, JDBCDriverType.STATEMENT, statementOption);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2021-06-09 17:24:02","commitOrder":4,"curCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        PreparedStatementExecuteQueryCallback callback = new PreparedStatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), \n                 sqlStatement, SQLExecutorExceptionHandler.isExceptionThrown());\n        return federateExecutor.executeQuery(executionContext, callback, createDriverExecutionPrepareEngine());\n    }\n","date":"2021-06-09 17:24:02","endLine":217,"groupId":"5572","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"executeFederatedQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/12/d0f8b6f89660dcce740bb8d6cb27a1552fc4bd.src","preCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        PreparedStatementExecuteQueryCallback callback = new PreparedStatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), \n                 sqlStatement, SQLExecutorExceptionHandler.isExceptionThrown());\n        return federateExecutor.executeQuery(executionContext, callback, JDBCDriverType.PREPARED_STATEMENT, statementOption);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"}],"commitId":"7ba3f1dd7ed39dce8ae00521f9a9b484e359744a","commitMessage":"@@@optimize calcite parameter pass (#10731)\n\n","date":"2021-06-09 17:24:02","modifiedFileCount":"7","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-08-09 16:45:36","codes":[{"authorDate":"2021-08-09 16:45:36","commitOrder":5,"curCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getMetaData(connection.getSchemaName()).getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return federateExecutor.executeQuery(executionContext, callback, createDriverExecutionPrepareEngine());\n    }\n","date":"2021-08-09 16:45:36","endLine":185,"groupId":"101179","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"executeFederatedQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d2/e584707f24bd62d48cc852cbeea49da6462e7e.src","preCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return federateExecutor.executeQuery(executionContext, callback, createDriverExecutionPrepareEngine());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2021-08-09 16:45:36","commitOrder":5,"curCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        PreparedStatementExecuteQueryCallback callback = new PreparedStatementExecuteQueryCallback(metaDataContexts.getMetaData(connection.getSchemaName()).getResource().getDatabaseType(),\n                 sqlStatement, SQLExecutorExceptionHandler.isExceptionThrown());\n        return federateExecutor.executeQuery(executionContext, callback, createDriverExecutionPrepareEngine());\n    }\n","date":"2021-08-09 16:45:36","endLine":215,"groupId":"101179","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"executeFederatedQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/50/baeaf18c596da58f3517bd1589948bda40a605.src","preCode":"    private List<QueryResult> executeFederatedQuery() throws SQLException {\n        if (executionContext.getExecutionUnits().isEmpty()) {\n            return Collections.emptyList();\n        }\n        PreparedStatementExecuteQueryCallback callback = new PreparedStatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), \n                 sqlStatement, SQLExecutorExceptionHandler.isExceptionThrown());\n        return federateExecutor.executeQuery(executionContext, callback, createDriverExecutionPrepareEngine());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"}],"commitId":"222aeb59cc07d5eb3edc858c68b9d95cc903bcec","commitMessage":"@@@JDBC-core module delete getDefaultMetaData() (#11714)\n\n* jdbc-core module delete getDefaultMetaData()\n\n* update\n\n* optimization","date":"2021-08-09 16:45:36","modifiedFileCount":"22","status":"M","submitter":"zhaojinchao"}]
