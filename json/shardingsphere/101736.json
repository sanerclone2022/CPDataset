[{"authorTime":"2020-10-11 18:46:54","codes":[{"authorDate":"2020-10-11 18:46:54","commitOrder":1,"curCode":"    private void assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration(final InsertStatement insertStatement) {\n        insertStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl\")));\n        insertStatement.setInsertColumns(new InsertColumnsSegment(0, 0, Collections.singletonList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")))));\n        List<ExpressionSegment> expressionSegments = Collections.singletonList(new LiteralExpressionSegment(0, 0, 1));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, expressionSegments));\n        Optional<GeneratedKeyContext> actual = new GeneratedKeyContextEngine(insertStatement, schemaMetaData)\n                .createGenerateKeyContext(Collections.singletonList(\"id\"), Collections.singletonList(expressionSegments), Collections.singletonList(1));\n        assertTrue(actual.isPresent());\n        assertThat(actual.get().getGeneratedValues().size(), is(1));\n    }\n","date":"2020-10-11 18:46:54","endLine":137,"groupId":"4957","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration","params":"(finalInsertStatementinsertStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1b/c5703f53a9274103db59da6c4c09950bd42e0e.src","preCode":"    private void assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration(final InsertStatement insertStatement) {\n        insertStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl\")));\n        insertStatement.setInsertColumns(new InsertColumnsSegment(0, 0, Collections.singletonList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")))));\n        List<ExpressionSegment> expressionSegments = Collections.singletonList(new LiteralExpressionSegment(0, 0, 1));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, expressionSegments));\n        Optional<GeneratedKeyContext> actual = new GeneratedKeyContextEngine(insertStatement, schemaMetaData)\n                .createGenerateKeyContext(Collections.singletonList(\"id\"), Collections.singletonList(expressionSegments), Collections.singletonList(1));\n        assertTrue(actual.isPresent());\n        assertThat(actual.get().getGeneratedValues().size(), is(1));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/segment/insert/keygen/engine/GeneratedKeyContextEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"},{"authorDate":"2020-10-11 18:46:54","commitOrder":1,"curCode":"    private void assertCreateGenerateKeyContextWhenFind(final InsertStatement insertStatement) {\n        insertStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl\")));\n        insertStatement.setInsertColumns(new InsertColumnsSegment(0, 0, Collections.singletonList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new ParameterMarkerExpressionSegment(1, 2, 0))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new LiteralExpressionSegment(1, 2, 100))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new LiteralExpressionSegment(1, 2, \"value\"))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new CommonExpressionSegment(1, 2, \"ignored value\"))));\n        List<List<ExpressionSegment>> valueExpressions = insertStatement.getValues().stream().map(InsertValuesSegment::getValues).collect(Collectors.toList());\n        Optional<GeneratedKeyContext> actual = new GeneratedKeyContextEngine(insertStatement, schemaMetaData)\n                .createGenerateKeyContext(Collections.singletonList(\"id\"), valueExpressions, Collections.singletonList(1));\n        assertTrue(actual.isPresent());\n        assertThat(actual.get().getGeneratedValues().size(), is(3));\n        Iterator<Comparable<?>> generatedValuesIterator = actual.get().getGeneratedValues().iterator();\n        assertThat(generatedValuesIterator.next(), is((Comparable) 1));\n        assertThat(generatedValuesIterator.next(), is((Comparable) 100));\n        assertThat(generatedValuesIterator.next(), is((Comparable) \"value\"));\n        assertTrue(new GeneratedKeyContextEngine(insertStatement, schemaMetaData).createGenerateKeyContext(Collections.emptyList(), \n                Collections.emptyList(), Collections.singletonList(1)).isPresent());\n    }\n","date":"2020-10-11 18:46:54","endLine":182,"groupId":"4959","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertCreateGenerateKeyContextWhenFind","params":"(finalInsertStatementinsertStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1b/c5703f53a9274103db59da6c4c09950bd42e0e.src","preCode":"    private void assertCreateGenerateKeyContextWhenFind(final InsertStatement insertStatement) {\n        insertStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl\")));\n        insertStatement.setInsertColumns(new InsertColumnsSegment(0, 0, Collections.singletonList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new ParameterMarkerExpressionSegment(1, 2, 0))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new LiteralExpressionSegment(1, 2, 100))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new LiteralExpressionSegment(1, 2, \"value\"))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new CommonExpressionSegment(1, 2, \"ignored value\"))));\n        List<List<ExpressionSegment>> valueExpressions = insertStatement.getValues().stream().map(InsertValuesSegment::getValues).collect(Collectors.toList());\n        Optional<GeneratedKeyContext> actual = new GeneratedKeyContextEngine(insertStatement, schemaMetaData)\n                .createGenerateKeyContext(Collections.singletonList(\"id\"), valueExpressions, Collections.singletonList(1));\n        assertTrue(actual.isPresent());\n        assertThat(actual.get().getGeneratedValues().size(), is(3));\n        Iterator<Comparable<?>> generatedValuesIterator = actual.get().getGeneratedValues().iterator();\n        assertThat(generatedValuesIterator.next(), is((Comparable) 1));\n        assertThat(generatedValuesIterator.next(), is((Comparable) 100));\n        assertThat(generatedValuesIterator.next(), is((Comparable) \"value\"));\n        assertTrue(new GeneratedKeyContextEngine(insertStatement, schemaMetaData).createGenerateKeyContext(Collections.emptyList(), \n                Collections.emptyList(), Collections.singletonList(1)).isPresent());\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/segment/insert/keygen/engine/GeneratedKeyContextEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"B"}],"commitId":"cc40a511b9a93c556bd4ec53665239bd8c6790af","commitMessage":"@@@Move shardingsphere-infra-binder to infra module and rename (#7744)\n\n* Move shardingsphere-infra-binder to infra module and rename\n\n* Move shardingsphere-infra-binder to infra module and rename\n\n* rename package name","date":"2020-10-11 18:46:54","modifiedFileCount":"224","status":"B","submitter":"Liang Zhang"},{"authorTime":"2020-11-09 17:01:30","codes":[{"authorDate":"2020-11-09 17:01:30","commitOrder":2,"curCode":"    private void assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration(final InsertStatement insertStatement) {\n        insertStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl\")));\n        insertStatement.setInsertColumns(new InsertColumnsSegment(0, 0, Collections.singletonList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")))));\n        List<ExpressionSegment> expressionSegments = Collections.singletonList(new LiteralExpressionSegment(0, 0, 1));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, expressionSegments));\n        Optional<GeneratedKeyContext> actual = new GeneratedKeyContextEngine(insertStatement, schema)\n                .createGenerateKeyContext(Collections.singletonList(\"id\"), Collections.singletonList(expressionSegments), Collections.singletonList(1));\n        assertTrue(actual.isPresent());\n        assertThat(actual.get().getGeneratedValues().size(), is(1));\n    }\n","date":"2020-11-09 17:01:30","endLine":137,"groupId":"4957","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration","params":"(finalInsertStatementinsertStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/73/5a9aa473b60c90fe581b1ae04269270683020a.src","preCode":"    private void assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration(final InsertStatement insertStatement) {\n        insertStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl\")));\n        insertStatement.setInsertColumns(new InsertColumnsSegment(0, 0, Collections.singletonList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")))));\n        List<ExpressionSegment> expressionSegments = Collections.singletonList(new LiteralExpressionSegment(0, 0, 1));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, expressionSegments));\n        Optional<GeneratedKeyContext> actual = new GeneratedKeyContextEngine(insertStatement, schemaMetaData)\n                .createGenerateKeyContext(Collections.singletonList(\"id\"), Collections.singletonList(expressionSegments), Collections.singletonList(1));\n        assertTrue(actual.isPresent());\n        assertThat(actual.get().getGeneratedValues().size(), is(1));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/segment/insert/keygen/engine/GeneratedKeyContextEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2020-11-09 17:01:30","commitOrder":2,"curCode":"    private void assertCreateGenerateKeyContextWhenFind(final InsertStatement insertStatement) {\n        insertStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl\")));\n        insertStatement.setInsertColumns(new InsertColumnsSegment(0, 0, Collections.singletonList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new ParameterMarkerExpressionSegment(1, 2, 0))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new LiteralExpressionSegment(1, 2, 100))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new LiteralExpressionSegment(1, 2, \"value\"))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new CommonExpressionSegment(1, 2, \"ignored value\"))));\n        List<List<ExpressionSegment>> valueExpressions = insertStatement.getValues().stream().map(InsertValuesSegment::getValues).collect(Collectors.toList());\n        Optional<GeneratedKeyContext> actual = new GeneratedKeyContextEngine(insertStatement, schema)\n                .createGenerateKeyContext(Collections.singletonList(\"id\"), valueExpressions, Collections.singletonList(1));\n        assertTrue(actual.isPresent());\n        assertThat(actual.get().getGeneratedValues().size(), is(3));\n        Iterator<Comparable<?>> generatedValuesIterator = actual.get().getGeneratedValues().iterator();\n        assertThat(generatedValuesIterator.next(), is((Comparable) 1));\n        assertThat(generatedValuesIterator.next(), is((Comparable) 100));\n        assertThat(generatedValuesIterator.next(), is((Comparable) \"value\"));\n        assertTrue(new GeneratedKeyContextEngine(insertStatement, schema).createGenerateKeyContext(Collections.emptyList(), Collections.emptyList(), Collections.singletonList(1)).isPresent());\n    }\n","date":"2020-11-09 17:01:30","endLine":181,"groupId":"4959","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertCreateGenerateKeyContextWhenFind","params":"(finalInsertStatementinsertStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/73/5a9aa473b60c90fe581b1ae04269270683020a.src","preCode":"    private void assertCreateGenerateKeyContextWhenFind(final InsertStatement insertStatement) {\n        insertStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl\")));\n        insertStatement.setInsertColumns(new InsertColumnsSegment(0, 0, Collections.singletonList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new ParameterMarkerExpressionSegment(1, 2, 0))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new LiteralExpressionSegment(1, 2, 100))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new LiteralExpressionSegment(1, 2, \"value\"))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new CommonExpressionSegment(1, 2, \"ignored value\"))));\n        List<List<ExpressionSegment>> valueExpressions = insertStatement.getValues().stream().map(InsertValuesSegment::getValues).collect(Collectors.toList());\n        Optional<GeneratedKeyContext> actual = new GeneratedKeyContextEngine(insertStatement, schemaMetaData)\n                .createGenerateKeyContext(Collections.singletonList(\"id\"), valueExpressions, Collections.singletonList(1));\n        assertTrue(actual.isPresent());\n        assertThat(actual.get().getGeneratedValues().size(), is(3));\n        Iterator<Comparable<?>> generatedValuesIterator = actual.get().getGeneratedValues().iterator();\n        assertThat(generatedValuesIterator.next(), is((Comparable) 1));\n        assertThat(generatedValuesIterator.next(), is((Comparable) 100));\n        assertThat(generatedValuesIterator.next(), is((Comparable) \"value\"));\n        assertTrue(new GeneratedKeyContextEngine(insertStatement, schemaMetaData).createGenerateKeyContext(Collections.emptyList(), \n                Collections.emptyList(), Collections.singletonList(1)).isPresent());\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/segment/insert/keygen/engine/GeneratedKeyContextEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"09281f69a6dd01c12dd73dcc6675397062498f90","commitMessage":"@@@Rename PhysicalSchemaMetaData to ShardingSphereSchema (#8094)\n\n* Rename PhysicalSchemaMetaData to ShardingSphereSchema\n\n* Fix checkstyle","date":"2020-11-09 17:01:30","modifiedFileCount":"153","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-05 14:48:43","codes":[{"authorDate":"2021-07-05 14:48:43","commitOrder":3,"curCode":"    private void assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration(final InsertStatement insertStatement) {\n        insertStatement.setTable(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl\"))));\n        insertStatement.setInsertColumns(new InsertColumnsSegment(0, 0, Collections.singletonList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")))));\n        List<ExpressionSegment> expressionSegments = Collections.singletonList(new LiteralExpressionSegment(0, 0, 1));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, expressionSegments));\n        Optional<GeneratedKeyContext> actual = new GeneratedKeyContextEngine(insertStatement, schema)\n                .createGenerateKeyContext(Collections.singletonList(\"id\"), Collections.singletonList(expressionSegments), Collections.singletonList(1));\n        assertTrue(actual.isPresent());\n        assertThat(actual.get().getGeneratedValues().size(), is(1));\n    }\n","date":"2021-07-05 14:48:43","endLine":138,"groupId":"101736","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration","params":"(finalInsertStatementinsertStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bb/375ec28723051537e7a98694b75cd5d0366045.src","preCode":"    private void assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration(final InsertStatement insertStatement) {\n        insertStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl\")));\n        insertStatement.setInsertColumns(new InsertColumnsSegment(0, 0, Collections.singletonList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")))));\n        List<ExpressionSegment> expressionSegments = Collections.singletonList(new LiteralExpressionSegment(0, 0, 1));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, expressionSegments));\n        Optional<GeneratedKeyContext> actual = new GeneratedKeyContextEngine(insertStatement, schema)\n                .createGenerateKeyContext(Collections.singletonList(\"id\"), Collections.singletonList(expressionSegments), Collections.singletonList(1));\n        assertTrue(actual.isPresent());\n        assertThat(actual.get().getGeneratedValues().size(), is(1));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/segment/insert/keygen/engine/GeneratedKeyContextEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2021-07-05 14:48:43","commitOrder":3,"curCode":"    private void assertCreateGenerateKeyContextWhenFind(final InsertStatement insertStatement) {\n        insertStatement.setTable(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl\"))));\n        insertStatement.setInsertColumns(new InsertColumnsSegment(0, 0, Collections.singletonList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new ParameterMarkerExpressionSegment(1, 2, 0))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new LiteralExpressionSegment(1, 2, 100))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new LiteralExpressionSegment(1, 2, \"value\"))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new CommonExpressionSegment(1, 2, \"ignored value\"))));\n        List<List<ExpressionSegment>> valueExpressions = insertStatement.getValues().stream().map(InsertValuesSegment::getValues).collect(Collectors.toList());\n        Optional<GeneratedKeyContext> actual = new GeneratedKeyContextEngine(insertStatement, schema)\n                .createGenerateKeyContext(Collections.singletonList(\"id\"), valueExpressions, Collections.singletonList(1));\n        assertTrue(actual.isPresent());\n        assertThat(actual.get().getGeneratedValues().size(), is(3));\n        Iterator<Comparable<?>> generatedValuesIterator = actual.get().getGeneratedValues().iterator();\n        assertThat(generatedValuesIterator.next(), is((Comparable) 1));\n        assertThat(generatedValuesIterator.next(), is((Comparable) 100));\n        assertThat(generatedValuesIterator.next(), is((Comparable) \"value\"));\n        assertTrue(new GeneratedKeyContextEngine(insertStatement, schema).createGenerateKeyContext(Collections.emptyList(), Collections.emptyList(), Collections.singletonList(1)).isPresent());\n    }\n","date":"2021-07-05 14:48:43","endLine":182,"groupId":"101736","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"assertCreateGenerateKeyContextWhenFind","params":"(finalInsertStatementinsertStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bb/375ec28723051537e7a98694b75cd5d0366045.src","preCode":"    private void assertCreateGenerateKeyContextWhenFind(final InsertStatement insertStatement) {\n        insertStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl\")));\n        insertStatement.setInsertColumns(new InsertColumnsSegment(0, 0, Collections.singletonList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new ParameterMarkerExpressionSegment(1, 2, 0))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new LiteralExpressionSegment(1, 2, 100))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new LiteralExpressionSegment(1, 2, \"value\"))));\n        insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new CommonExpressionSegment(1, 2, \"ignored value\"))));\n        List<List<ExpressionSegment>> valueExpressions = insertStatement.getValues().stream().map(InsertValuesSegment::getValues).collect(Collectors.toList());\n        Optional<GeneratedKeyContext> actual = new GeneratedKeyContextEngine(insertStatement, schema)\n                .createGenerateKeyContext(Collections.singletonList(\"id\"), valueExpressions, Collections.singletonList(1));\n        assertTrue(actual.isPresent());\n        assertThat(actual.get().getGeneratedValues().size(), is(3));\n        Iterator<Comparable<?>> generatedValuesIterator = actual.get().getGeneratedValues().iterator();\n        assertThat(generatedValuesIterator.next(), is((Comparable) 1));\n        assertThat(generatedValuesIterator.next(), is((Comparable) 100));\n        assertThat(generatedValuesIterator.next(), is((Comparable) \"value\"));\n        assertTrue(new GeneratedKeyContextEngine(insertStatement, schema).createGenerateKeyContext(Collections.emptyList(), Collections.emptyList(), Collections.singletonList(1)).isPresent());\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/segment/insert/keygen/engine/GeneratedKeyContextEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"bd4980624aaa0c9fb3c9c87e260177715f835ede","commitMessage":"@@@support sql with schema for all features (#11150)\n\n* support sql with schema for all features\n\n* optimize logic\n\n* fix test case\n\n* fix multi remove token rewrite error\n\n* correct some test case param\n\n* optimize remove token generate\n\n* optimize remove token generate","date":"2021-07-05 14:48:43","modifiedFileCount":"64","status":"M","submitter":"Zhengqiang Duan"}]
