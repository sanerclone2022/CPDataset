[{"authorTime":"2021-06-05 21:57:24","codes":[{"authorDate":"2021-06-05 21:57:24","commitOrder":1,"curCode":"    public void assertDecorateRouteContextToPrimaryDataSource() {\n        RouteContext actual = mockRouteContext();\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"\", Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\",\n                mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.singleton(rule)), mock(ShardingSphereSchema.class));\n        sqlRouter.decorateRouteContext(actual, logicSQL, metaData, rule, new ConfigurationProperties(new Properties()));\n        Iterator<String> routedDataSourceNames = actual.getActualDataSourceNames().iterator();\n        assertThat(routedDataSourceNames.next(), is(NONE_DB_DISCOVERY_DATASOURCE_NAME));\n        assertThat(routedDataSourceNames.next(), is(PRIMARY_DATASOURCE));\n    }\n","date":"2021-06-05 21:57:24","endLine":104,"groupId":"14295","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertDecorateRouteContextToPrimaryDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/21/b3205b272a1f4aa5629f457bcb7931884699f9.src","preCode":"    public void assertDecorateRouteContextToPrimaryDataSource() {\n        RouteContext actual = mockRouteContext();\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"\", Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\",\n                mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.singleton(rule)), mock(ShardingSphereSchema.class));\n        sqlRouter.decorateRouteContext(actual, logicSQL, metaData, rule, new ConfigurationProperties(new Properties()));\n        Iterator<String> routedDataSourceNames = actual.getActualDataSourceNames().iterator();\n        assertThat(routedDataSourceNames.next(), is(NONE_DB_DISCOVERY_DATASOURCE_NAME));\n        assertThat(routedDataSourceNames.next(), is(PRIMARY_DATASOURCE));\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-core/src/test/java/org/apache/shardingsphere/dbdiscovery/route/DatabaseDiscoverySQLRouterTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"},{"authorDate":"2021-06-05 21:57:24","commitOrder":1,"curCode":"    public void assertDecorateRouteContextToPrimaryDataSourceWithLock() {\n        RouteContext actual = mockRouteContext();\n        LogicSQL logicSQL = new LogicSQL(sqlStatementContext, \"\", Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\",\n                mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.singleton(rule)), mock(ShardingSphereSchema.class));\n        sqlRouter.decorateRouteContext(actual, logicSQL, metaData, rule, new ConfigurationProperties(new Properties()));\n        Iterator<String> routedDataSourceNames = actual.getActualDataSourceNames().iterator();\n        assertThat(routedDataSourceNames.next(), is(NONE_DB_DISCOVERY_DATASOURCE_NAME));\n        assertThat(routedDataSourceNames.next(), is(PRIMARY_DATASOURCE));\n    }\n","date":"2021-06-05 21:57:24","endLine":126,"groupId":"14295","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertDecorateRouteContextToPrimaryDataSourceWithLock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/21/b3205b272a1f4aa5629f457bcb7931884699f9.src","preCode":"    public void assertDecorateRouteContextToPrimaryDataSourceWithLock() {\n        RouteContext actual = mockRouteContext();\n        LogicSQL logicSQL = new LogicSQL(sqlStatementContext, \"\", Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\",\n                mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.singleton(rule)), mock(ShardingSphereSchema.class));\n        sqlRouter.decorateRouteContext(actual, logicSQL, metaData, rule, new ConfigurationProperties(new Properties()));\n        Iterator<String> routedDataSourceNames = actual.getActualDataSourceNames().iterator();\n        assertThat(routedDataSourceNames.next(), is(NONE_DB_DISCOVERY_DATASOURCE_NAME));\n        assertThat(routedDataSourceNames.next(), is(PRIMARY_DATASOURCE));\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-core/src/test/java/org/apache/shardingsphere/dbdiscovery/route/DatabaseDiscoverySQLRouterTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"}],"commitId":"a62db753229d2d9d86f255f4ce4b600b2d4b898a","commitMessage":"@@@Merge db-discovery module (#10670)\n\n* Rename common package\n\n* Update pom\n\n* Merge db-discovery module","date":"2021-06-05 21:57:24","modifiedFileCount":"6","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-08-28 11:58:56","codes":[{"authorDate":"2021-08-28 11:58:56","commitOrder":2,"curCode":"    public void assertDecorateRouteContextToPrimaryDataSource() {\n        RouteContext actual = mockRouteContext();\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"\", Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\",\n                mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.singleton(rule)), mock(ShardingSphereSchema.class));\n        sqlRouter.decorateRouteContext(actual, logicSQL, metaData, rule, new ConfigurationProperties(new Properties()));\n        Iterator<String> routedDataSourceNames = actual.getActualDataSourceNames().iterator();\n        assertThat(routedDataSourceNames.next(), is(NONE_DB_DISCOVERY_DATA_SOURCE_NAME));\n        assertThat(routedDataSourceNames.next(), is(PRIMARY_DATA_SOURCE));\n    }\n","date":"2021-08-28 11:58:56","endLine":105,"groupId":"10243","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertDecorateRouteContextToPrimaryDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ec/69fc8454f2e8b2eb2d7d3898dc8ec09a77e79c.src","preCode":"    public void assertDecorateRouteContextToPrimaryDataSource() {\n        RouteContext actual = mockRouteContext();\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"\", Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\",\n                mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.singleton(rule)), mock(ShardingSphereSchema.class));\n        sqlRouter.decorateRouteContext(actual, logicSQL, metaData, rule, new ConfigurationProperties(new Properties()));\n        Iterator<String> routedDataSourceNames = actual.getActualDataSourceNames().iterator();\n        assertThat(routedDataSourceNames.next(), is(NONE_DB_DISCOVERY_DATASOURCE_NAME));\n        assertThat(routedDataSourceNames.next(), is(PRIMARY_DATASOURCE));\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-core/src/test/java/org/apache/shardingsphere/dbdiscovery/route/DatabaseDiscoverySQLRouterTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2021-08-28 11:58:56","commitOrder":2,"curCode":"    public void assertDecorateRouteContextToPrimaryDataSourceWithLock() {\n        RouteContext actual = mockRouteContext();\n        LogicSQL logicSQL = new LogicSQL(sqlStatementContext, \"\", Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\",\n                mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.singleton(rule)), mock(ShardingSphereSchema.class));\n        sqlRouter.decorateRouteContext(actual, logicSQL, metaData, rule, new ConfigurationProperties(new Properties()));\n        Iterator<String> routedDataSourceNames = actual.getActualDataSourceNames().iterator();\n        assertThat(routedDataSourceNames.next(), is(NONE_DB_DISCOVERY_DATA_SOURCE_NAME));\n        assertThat(routedDataSourceNames.next(), is(PRIMARY_DATA_SOURCE));\n    }\n","date":"2021-08-28 11:58:56","endLine":127,"groupId":"10243","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertDecorateRouteContextToPrimaryDataSourceWithLock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ec/69fc8454f2e8b2eb2d7d3898dc8ec09a77e79c.src","preCode":"    public void assertDecorateRouteContextToPrimaryDataSourceWithLock() {\n        RouteContext actual = mockRouteContext();\n        LogicSQL logicSQL = new LogicSQL(sqlStatementContext, \"\", Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\",\n                mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.singleton(rule)), mock(ShardingSphereSchema.class));\n        sqlRouter.decorateRouteContext(actual, logicSQL, metaData, rule, new ConfigurationProperties(new Properties()));\n        Iterator<String> routedDataSourceNames = actual.getActualDataSourceNames().iterator();\n        assertThat(routedDataSourceNames.next(), is(NONE_DB_DISCOVERY_DATASOURCE_NAME));\n        assertThat(routedDataSourceNames.next(), is(PRIMARY_DATASOURCE));\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-core/src/test/java/org/apache/shardingsphere/dbdiscovery/route/DatabaseDiscoverySQLRouterTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"8f4d55cfb1c346c0864d320c6b6e9bdaae3b38c4","commitMessage":"@@@Enhance of TypedSPI and RequiredSPI (#12074)\n\n","date":"2021-08-28 11:58:56","modifiedFileCount":"15","status":"M","submitter":"Liang Zhang"}]
