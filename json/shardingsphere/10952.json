[{"authorTime":"2021-06-23 18:27:05","codes":[{"authorDate":"2021-06-23 18:27:05","commitOrder":1,"curCode":"    public void assertCloseCorrectly() throws SQLException {\n        DatabaseCommunicationEngine engine =\n                DatabaseCommunicationEngineFactory.getInstance().newBinaryProtocolInstance(mock(MySQLStatement.class), \"schemaName\", Collections.emptyList(), backendConnection);\n        Collection<ResultSet> cachedResultSets = getField(engine, \"cachedResultSets\");\n        cachedResultSets.add(resultSet);\n        Collection<Statement> cachedStatements = getField(engine, \"cachedStatements\");\n        cachedStatements.add(statement);\n        engine.close();\n        verify(resultSet).close();\n        verify(statement).close();\n        assertTrue(cachedResultSets.isEmpty());\n        assertTrue(cachedStatements.isEmpty());\n    }\n","date":"2021-06-23 18:27:05","endLine":195,"groupId":"3158","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertCloseCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e2/768a480c312f6d3e1fa6662dd97371b8033526.src","preCode":"    public void assertCloseCorrectly() throws SQLException {\n        DatabaseCommunicationEngine engine =\n                DatabaseCommunicationEngineFactory.getInstance().newBinaryProtocolInstance(mock(MySQLStatement.class), \"schemaName\", Collections.emptyList(), backendConnection);\n        Collection<ResultSet> cachedResultSets = getField(engine, \"cachedResultSets\");\n        cachedResultSets.add(resultSet);\n        Collection<Statement> cachedStatements = getField(engine, \"cachedStatements\");\n        cachedStatements.add(statement);\n        engine.close();\n        verify(resultSet).close();\n        verify(statement).close();\n        assertTrue(cachedResultSets.isEmpty());\n        assertTrue(cachedStatements.isEmpty());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/DatabaseCommunicationEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"B"},{"authorDate":"2021-06-23 18:27:05","commitOrder":1,"curCode":"    public void assertCloseResultSetsWithExceptionThrown() throws SQLException {\n        DatabaseCommunicationEngine engine =\n                DatabaseCommunicationEngineFactory.getInstance().newBinaryProtocolInstance(mock(MySQLStatement.class), \"schemaName\", Collections.emptyList(), backendConnection);\n        Collection<ResultSet> cachedResultSets = getField(engine, \"cachedResultSets\");\n        SQLException sqlExceptionByResultSet = new SQLException(\"ResultSet\");\n        doThrow(sqlExceptionByResultSet).when(resultSet).close();\n        cachedResultSets.add(resultSet);\n        Collection<Statement> cachedStatements = getField(engine, \"cachedStatements\");\n        SQLException sqlExceptionByStatement = new SQLException(\"Statement\");\n        doThrow(sqlExceptionByStatement).when(statement).close();\n        cachedStatements.add(statement);\n        SQLException actual = null;\n        try {\n            engine.close();\n        } catch (final SQLException ex) {\n            actual = ex;\n        }\n        verify(resultSet).close();\n        verify(statement).close();\n        assertTrue(cachedResultSets.isEmpty());\n        assertTrue(cachedStatements.isEmpty());\n        assertThat(actual.getNextException(), is(sqlExceptionByResultSet));\n        assertThat(actual.getNextException().getNextException(), is(sqlExceptionByStatement));\n    }\n","date":"2021-06-23 18:27:05","endLine":221,"groupId":"3158","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertCloseResultSetsWithExceptionThrown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e2/768a480c312f6d3e1fa6662dd97371b8033526.src","preCode":"    public void assertCloseResultSetsWithExceptionThrown() throws SQLException {\n        DatabaseCommunicationEngine engine =\n                DatabaseCommunicationEngineFactory.getInstance().newBinaryProtocolInstance(mock(MySQLStatement.class), \"schemaName\", Collections.emptyList(), backendConnection);\n        Collection<ResultSet> cachedResultSets = getField(engine, \"cachedResultSets\");\n        SQLException sqlExceptionByResultSet = new SQLException(\"ResultSet\");\n        doThrow(sqlExceptionByResultSet).when(resultSet).close();\n        cachedResultSets.add(resultSet);\n        Collection<Statement> cachedStatements = getField(engine, \"cachedStatements\");\n        SQLException sqlExceptionByStatement = new SQLException(\"Statement\");\n        doThrow(sqlExceptionByStatement).when(statement).close();\n        cachedStatements.add(statement);\n        SQLException actual = null;\n        try {\n            engine.close();\n        } catch (final SQLException ex) {\n            actual = ex;\n        }\n        verify(resultSet).close();\n        verify(statement).close();\n        assertTrue(cachedResultSets.isEmpty());\n        assertTrue(cachedStatements.isEmpty());\n        assertThat(actual.getNextException(), is(sqlExceptionByResultSet));\n        assertThat(actual.getNextException().getNextException(), is(sqlExceptionByStatement));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/DatabaseCommunicationEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"B"}],"commitId":"ba6414447a80ac5a98a2ac30464b1964b6d7c5b4","commitMessage":"@@@Move cached statements and result sets into DatabaseCommunicationEngine (#10932)\n\n* Move cached statements and result sets into DatabaseCommunicationEngine\n\n* Complete tests for DatabaseCommunicationEngine\n\n* Close TextProtocolBackendHandler correctly\n\n* Add DatabaseCommunicationEngine to BackendConnection","date":"2021-06-23 18:27:05","modifiedFileCount":"22","status":"B","submitter":"???"},{"authorTime":"2021-07-02 20:44:49","codes":[{"authorDate":"2021-07-02 20:44:49","commitOrder":2,"curCode":"    public void assertCloseCorrectly() throws SQLException {\n        DatabaseCommunicationEngine engine =\n                DatabaseCommunicationEngineFactory.getInstance().newBinaryProtocolInstance(mock(SQLStatementContext.class), \"schemaName\", Collections.emptyList(), backendConnection);\n        Collection<ResultSet> cachedResultSets = getField(engine, \"cachedResultSets\");\n        cachedResultSets.add(resultSet);\n        Collection<Statement> cachedStatements = getField(engine, \"cachedStatements\");\n        cachedStatements.add(statement);\n        engine.close();\n        verify(resultSet).close();\n        verify(statement).close();\n        assertTrue(cachedResultSets.isEmpty());\n        assertTrue(cachedStatements.isEmpty());\n    }\n","date":"2021-07-02 20:44:49","endLine":203,"groupId":"10952","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertCloseCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b6/8d083db121b54de0e728c5dde0c46eab11318a.src","preCode":"    public void assertCloseCorrectly() throws SQLException {\n        DatabaseCommunicationEngine engine =\n                DatabaseCommunicationEngineFactory.getInstance().newBinaryProtocolInstance(mock(MySQLStatement.class), \"schemaName\", Collections.emptyList(), backendConnection);\n        Collection<ResultSet> cachedResultSets = getField(engine, \"cachedResultSets\");\n        cachedResultSets.add(resultSet);\n        Collection<Statement> cachedStatements = getField(engine, \"cachedStatements\");\n        cachedStatements.add(statement);\n        engine.close();\n        verify(resultSet).close();\n        verify(statement).close();\n        assertTrue(cachedResultSets.isEmpty());\n        assertTrue(cachedStatements.isEmpty());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/DatabaseCommunicationEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"},{"authorDate":"2021-07-02 20:44:49","commitOrder":2,"curCode":"    public void assertCloseResultSetsWithExceptionThrown() throws SQLException {\n        DatabaseCommunicationEngine engine =\n                DatabaseCommunicationEngineFactory.getInstance().newBinaryProtocolInstance(mock(SQLStatementContext.class), \"schemaName\", Collections.emptyList(), backendConnection);\n        Collection<ResultSet> cachedResultSets = getField(engine, \"cachedResultSets\");\n        SQLException sqlExceptionByResultSet = new SQLException(\"ResultSet\");\n        doThrow(sqlExceptionByResultSet).when(resultSet).close();\n        cachedResultSets.add(resultSet);\n        Collection<Statement> cachedStatements = getField(engine, \"cachedStatements\");\n        SQLException sqlExceptionByStatement = new SQLException(\"Statement\");\n        doThrow(sqlExceptionByStatement).when(statement).close();\n        cachedStatements.add(statement);\n        SQLException actual = null;\n        try {\n            engine.close();\n        } catch (final SQLException ex) {\n            actual = ex;\n        }\n        verify(resultSet).close();\n        verify(statement).close();\n        assertTrue(cachedResultSets.isEmpty());\n        assertTrue(cachedStatements.isEmpty());\n        assertThat(actual.getNextException(), is(sqlExceptionByResultSet));\n        assertThat(actual.getNextException().getNextException(), is(sqlExceptionByStatement));\n    }\n","date":"2021-07-02 20:44:49","endLine":229,"groupId":"10952","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertCloseResultSetsWithExceptionThrown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b6/8d083db121b54de0e728c5dde0c46eab11318a.src","preCode":"    public void assertCloseResultSetsWithExceptionThrown() throws SQLException {\n        DatabaseCommunicationEngine engine =\n                DatabaseCommunicationEngineFactory.getInstance().newBinaryProtocolInstance(mock(MySQLStatement.class), \"schemaName\", Collections.emptyList(), backendConnection);\n        Collection<ResultSet> cachedResultSets = getField(engine, \"cachedResultSets\");\n        SQLException sqlExceptionByResultSet = new SQLException(\"ResultSet\");\n        doThrow(sqlExceptionByResultSet).when(resultSet).close();\n        cachedResultSets.add(resultSet);\n        Collection<Statement> cachedStatements = getField(engine, \"cachedStatements\");\n        SQLException sqlExceptionByStatement = new SQLException(\"Statement\");\n        doThrow(sqlExceptionByStatement).when(statement).close();\n        cachedStatements.add(statement);\n        SQLException actual = null;\n        try {\n            engine.close();\n        } catch (final SQLException ex) {\n            actual = ex;\n        }\n        verify(resultSet).close();\n        verify(statement).close();\n        assertTrue(cachedResultSets.isEmpty());\n        assertTrue(cachedStatements.isEmpty());\n        assertThat(actual.getNextException(), is(sqlExceptionByResultSet));\n        assertThat(actual.getNextException().getNextException(), is(sqlExceptionByStatement));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/DatabaseCommunicationEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"}],"commitId":"bfb784c9a0e47fd147c8a654c2f0b2a1e86c2c27","commitMessage":"@@@extract SchemaAvailable interface & add validate for SelectStatement (#11091)\n\n* refactor SchemaAvailable interface & add validate for SelectStatement\n\n* add final for InsertStatementContext field\n\n* fix test case error\n\n* fix rewrite test case error\n\n* refactor context new instance method\n\n* optimize test case\n\n* fix test case\n\n* optimize logic\n\n* fix test case\n\n* fix checkstyle","date":"2021-07-02 20:44:49","modifiedFileCount":"44","status":"M","submitter":"Zhengqiang Duan"}]
