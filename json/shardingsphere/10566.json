[{"authorTime":"2021-08-17 15:06:22","codes":[{"authorDate":"2021-08-17 15:06:22","commitOrder":1,"curCode":"    public void assertLoadTablesOracle() throws SQLException {\n        Collection<ShardingSphereRule> rules = Collections.singletonList(shardingRule);\n        final ShardingTableMetaDataBuilder loader = (ShardingTableMetaDataBuilder) OrderedSPIRegistry.getRegisteredServices(RuleBasedTableMetaDataBuilder.class, rules).get(shardingRule);\n        when(props.getValue(ConfigurationPropertyKey.CHECK_TABLE_METADATA_ENABLED)).thenReturn(false);\n        when(databaseType.getName()).thenReturn(\"Oracle\");\n        Collection<String> tableNames = new LinkedList<>();\n        tableNames.add(TABLE_NAME);\n        Map<String, TableMetaData> actual = loader.load(tableNames, shardingRule, new SchemaBuilderMaterials(databaseType, Collections.singletonMap(\"ds\", dataSource), rules, props),\n                new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors() * 2, Runtime.getRuntime().availableProcessors() * 2,\n                        0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"ShardingSphere-SchemaBuilder-%d\").build()));\n        assertResult(actual);\n    }\n","date":"2021-08-17 15:06:22","endLine":256,"groupId":"13713","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertLoadTablesOracle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e4/ba81f6892c4d651f3f9549435029b80256ad67.src","preCode":"    public void assertLoadTablesOracle() throws SQLException {\n        Collection<ShardingSphereRule> rules = Collections.singletonList(shardingRule);\n        final ShardingTableMetaDataBuilder loader = (ShardingTableMetaDataBuilder) OrderedSPIRegistry.getRegisteredServices(RuleBasedTableMetaDataBuilder.class, rules).get(shardingRule);\n        when(props.getValue(ConfigurationPropertyKey.CHECK_TABLE_METADATA_ENABLED)).thenReturn(false);\n        when(databaseType.getName()).thenReturn(\"Oracle\");\n        Collection<String> tableNames = new LinkedList<>();\n        tableNames.add(TABLE_NAME);\n        Map<String, TableMetaData> actual = loader.load(tableNames, shardingRule, new SchemaBuilderMaterials(databaseType, Collections.singletonMap(\"ds\", dataSource), rules, props),\n                new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors() * 2, Runtime.getRuntime().availableProcessors() * 2,\n                        0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"ShardingSphere-SchemaBuilder-%d\").build()));\n        assertResult(actual);\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/metadata/ShardingTableMetaDataBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"B"},{"authorDate":"2021-08-17 15:06:22","commitOrder":1,"curCode":"    private void assertResult(final Map<String, TableMetaData> actual) {\n        TableMetaData tableMetaData = actual.values().iterator().next();\n        assertThat(tableMetaData.getColumnMetaData(0).getName(), is(\"id\"));\n        assertThat(tableMetaData.getColumnMetaData(1).getName(), is(\"pwd_cipher\"));\n        assertThat(tableMetaData.getColumnMetaData(2).getName(), is(\"pwd_plain\"));\n        IndexMetaData indexMetaData = tableMetaData.getIndexes().values().iterator().next();\n        assertThat(indexMetaData.getName(), is(\"order_index_t_order_t_order_0\"));\n    }\n","date":"2021-08-17 15:06:22","endLine":293,"groupId":"13714","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertResult","params":"(finalMap<String@TableMetaData>actual)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e4/ba81f6892c4d651f3f9549435029b80256ad67.src","preCode":"    private void assertResult(final Map<String, TableMetaData> actual) {\n        TableMetaData tableMetaData = actual.values().iterator().next();\n        assertThat(tableMetaData.getColumnMetaData(0).getName(), is(\"id\"));\n        assertThat(tableMetaData.getColumnMetaData(1).getName(), is(\"pwd_cipher\"));\n        assertThat(tableMetaData.getColumnMetaData(2).getName(), is(\"pwd_plain\"));\n        IndexMetaData indexMetaData = tableMetaData.getIndexes().values().iterator().next();\n        assertThat(indexMetaData.getName(), is(\"order_index_t_order_t_order_0\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/metadata/ShardingTableMetaDataBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"B"}],"commitId":"605e05c907bb4bd4e14bb682c01e6f46e562a87b","commitMessage":"@@@improve metadata load performance (#11767)\n\n* improve metadata load performance\n\n* improve metadata load performance\n\n* metaDataImprove test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove fix index\n\n* metaDataImprove optimize review\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions","date":"2021-08-17 15:06:22","modifiedFileCount":"16","status":"B","submitter":"tuichenchuxin"},{"authorTime":"2021-08-17 15:06:22","codes":[{"authorDate":"2021-08-20 15:52:50","commitOrder":2,"curCode":"    public void assertLoadTablesOracle() throws SQLException {\n        Collection<ShardingSphereRule> rules = Collections.singletonList(shardingRule);\n        final ShardingTableMetaDataBuilder loader = (ShardingTableMetaDataBuilder) OrderedSPIRegistry.getRegisteredServices(RuleBasedTableMetaDataBuilder.class, rules).get(shardingRule);\n        when(props.getValue(ConfigurationPropertyKey.CHECK_TABLE_METADATA_ENABLED)).thenReturn(false);\n        when(databaseType.getName()).thenReturn(\"Oracle\");\n        Collection<String> tableNames = new LinkedList<>();\n        tableNames.add(TABLE_NAME);\n        Map<String, TableMetaData> actual = loader.load(tableNames, shardingRule, new SchemaBuilderMaterials(databaseType, Collections.singletonMap(\"ds\", dataSource), rules, props));\n        assertResult(actual);\n    }\n","date":"2021-08-20 15:52:50","endLine":244,"groupId":"13713","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertLoadTablesOracle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/de/d9d1e95a0f1c5646007a1ac0aed02475a89ddf.src","preCode":"    public void assertLoadTablesOracle() throws SQLException {\n        Collection<ShardingSphereRule> rules = Collections.singletonList(shardingRule);\n        final ShardingTableMetaDataBuilder loader = (ShardingTableMetaDataBuilder) OrderedSPIRegistry.getRegisteredServices(RuleBasedTableMetaDataBuilder.class, rules).get(shardingRule);\n        when(props.getValue(ConfigurationPropertyKey.CHECK_TABLE_METADATA_ENABLED)).thenReturn(false);\n        when(databaseType.getName()).thenReturn(\"Oracle\");\n        Collection<String> tableNames = new LinkedList<>();\n        tableNames.add(TABLE_NAME);\n        Map<String, TableMetaData> actual = loader.load(tableNames, shardingRule, new SchemaBuilderMaterials(databaseType, Collections.singletonMap(\"ds\", dataSource), rules, props),\n                new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors() * 2, Runtime.getRuntime().availableProcessors() * 2,\n                        0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"ShardingSphere-SchemaBuilder-%d\").build()));\n        assertResult(actual);\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/metadata/ShardingTableMetaDataBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"},{"authorDate":"2021-08-17 15:06:22","commitOrder":2,"curCode":"    private void assertResult(final Map<String, TableMetaData> actual) {\n        TableMetaData tableMetaData = actual.values().iterator().next();\n        assertThat(tableMetaData.getColumnMetaData(0).getName(), is(\"id\"));\n        assertThat(tableMetaData.getColumnMetaData(1).getName(), is(\"pwd_cipher\"));\n        assertThat(tableMetaData.getColumnMetaData(2).getName(), is(\"pwd_plain\"));\n        IndexMetaData indexMetaData = tableMetaData.getIndexes().values().iterator().next();\n        assertThat(indexMetaData.getName(), is(\"order_index_t_order_t_order_0\"));\n    }\n","date":"2021-08-17 15:06:22","endLine":293,"groupId":"13714","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertResult","params":"(finalMap<String@TableMetaData>actual)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e4/ba81f6892c4d651f3f9549435029b80256ad67.src","preCode":"    private void assertResult(final Map<String, TableMetaData> actual) {\n        TableMetaData tableMetaData = actual.values().iterator().next();\n        assertThat(tableMetaData.getColumnMetaData(0).getName(), is(\"id\"));\n        assertThat(tableMetaData.getColumnMetaData(1).getName(), is(\"pwd_cipher\"));\n        assertThat(tableMetaData.getColumnMetaData(2).getName(), is(\"pwd_plain\"));\n        IndexMetaData indexMetaData = tableMetaData.getIndexes().values().iterator().next();\n        assertThat(indexMetaData.getName(), is(\"order_index_t_order_t_order_0\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/metadata/ShardingTableMetaDataBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"N"}],"commitId":"632b7c777ea43f7de3dfd2f13bc866814b882eaa","commitMessage":"@@@Refactor single table meta data load (#11895)\n\n","date":"2021-08-20 15:52:50","modifiedFileCount":"31","status":"M","submitter":"tuichenchuxin"},{"authorTime":"2021-08-17 15:06:22","codes":[{"authorDate":"2021-09-02 17:34:21","commitOrder":3,"curCode":"    public void assertLoadTablesOracle() throws SQLException {\n        ShardingRule shardingRule = createShardingRuleForOracle();\n        Collection<ShardingSphereRule> rules = Collections.singletonList(shardingRule);\n        ShardingTableMetaDataBuilder loader = (ShardingTableMetaDataBuilder) OrderedSPIRegistry.getRegisteredServices(RuleBasedTableMetaDataBuilder.class, rules).get(shardingRule);\n        when(props.getValue(ConfigurationPropertyKey.CHECK_TABLE_METADATA_ENABLED)).thenReturn(false);\n        DatabaseType databaseType = mock(OracleDatabaseType.class);\n        when(databaseType.getName()).thenReturn(\"Oracle\");\n        Map<String, TableMetaData> actual = loader.load(Collections.singletonList(TABLE_NAME), shardingRule, \n                new SchemaBuilderMaterials(databaseType, Collections.singletonMap(\"ds\", dataSource), rules, props));\n        assertThat(actual.keySet().iterator().next(), is(\"t_order\"));\n        TableMetaData tableMetaData = actual.values().iterator().next();\n        assertThat(tableMetaData.getColumnMetaData(0).getName(), is(\"ID\"));\n        assertThat(tableMetaData.getColumnMetaData(1).getName(), is(\"PWD_CIPHER\"));\n        assertThat(tableMetaData.getColumnMetaData(2).getName(), is(\"PWD_PLAIN\"));\n        assertThat(tableMetaData.getIndexes().values().iterator().next().getName(), is(\"ORDER_INDEX_T_ORDER_T_ORDER_0\"));\n    }\n","date":"2021-09-02 17:34:21","endLine":280,"groupId":"10566","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"assertLoadTablesOracle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6a/ce14213aae049cfaa8c25ea43d859ed5c2cb0c.src","preCode":"    public void assertLoadTablesOracle() throws SQLException {\n        Collection<ShardingSphereRule> rules = Collections.singletonList(shardingRule);\n        final ShardingTableMetaDataBuilder loader = (ShardingTableMetaDataBuilder) OrderedSPIRegistry.getRegisteredServices(RuleBasedTableMetaDataBuilder.class, rules).get(shardingRule);\n        when(props.getValue(ConfigurationPropertyKey.CHECK_TABLE_METADATA_ENABLED)).thenReturn(false);\n        when(databaseType.getName()).thenReturn(\"Oracle\");\n        Collection<String> tableNames = new LinkedList<>();\n        tableNames.add(TABLE_NAME);\n        Map<String, TableMetaData> actual = loader.load(tableNames, shardingRule, new SchemaBuilderMaterials(databaseType, Collections.singletonMap(\"ds\", dataSource), rules, props));\n        assertResult(actual);\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/metadata/ShardingTableMetaDataBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"},{"authorDate":"2021-08-17 15:06:22","commitOrder":3,"curCode":"    private void assertResult(final Map<String, TableMetaData> actual) {\n        TableMetaData tableMetaData = actual.values().iterator().next();\n        assertThat(tableMetaData.getColumnMetaData(0).getName(), is(\"id\"));\n        assertThat(tableMetaData.getColumnMetaData(1).getName(), is(\"pwd_cipher\"));\n        assertThat(tableMetaData.getColumnMetaData(2).getName(), is(\"pwd_plain\"));\n        IndexMetaData indexMetaData = tableMetaData.getIndexes().values().iterator().next();\n        assertThat(indexMetaData.getName(), is(\"order_index_t_order_t_order_0\"));\n    }\n","date":"2021-08-17 15:06:22","endLine":293,"groupId":"10566","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertResult","params":"(finalMap<String@TableMetaData>actual)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e4/ba81f6892c4d651f3f9549435029b80256ad67.src","preCode":"    private void assertResult(final Map<String, TableMetaData> actual) {\n        TableMetaData tableMetaData = actual.values().iterator().next();\n        assertThat(tableMetaData.getColumnMetaData(0).getName(), is(\"id\"));\n        assertThat(tableMetaData.getColumnMetaData(1).getName(), is(\"pwd_cipher\"));\n        assertThat(tableMetaData.getColumnMetaData(2).getName(), is(\"pwd_plain\"));\n        IndexMetaData indexMetaData = tableMetaData.getIndexes().values().iterator().next();\n        assertThat(indexMetaData.getName(), is(\"order_index_t_order_t_order_0\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/metadata/ShardingTableMetaDataBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"N"}],"commitId":"1301a41807eda152b17ef78fe084bc2d4e9d368e","commitMessage":"@@@fix calcite exception when user execute sql with lowercase (#12125)\n\n* fix calcite execute error with oracle statement\n\n* add test case\n\n* modify map to case insensitive\n\n* fix test case\n\n* add test case for federate refresh test\n\n* optimize code\n\n* optimize code\n\n* optimize test case\n\n* optimize test case\n\n* optimize federate logic\n\n* optimize code","date":"2021-09-02 17:34:21","modifiedFileCount":"18","status":"M","submitter":"Zhengqiang Duan"}]
