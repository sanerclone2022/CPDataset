[{"authorTime":"2021-06-01 17:02:09","codes":[{"authorDate":"2021-01-25 20:14:29","commitOrder":2,"curCode":"    public void initTable() {\n        try {\n            ShardingSphereConnection conn = dataSource.getConnection();\n            RunScript.execute(conn, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/jdbc_data.sql\"))));\n            conn.close();\n        } catch (final SQLException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n","date":"2021-01-25 20:14:29","endLine":74,"groupId":"9424","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"initTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/80/f635b074d819b6fe93103d6cd0537c930ec81a.src","preCode":"    public void initTable() {\n        try {\n            ShardingSphereConnection conn = dataSource.getConnection();\n            RunScript.execute(conn, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/jdbc_data.sql\"))));\n            conn.close();\n        } catch (final SQLException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/base/AbstractShardingSphereDataSourceForShardingTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"NB"},{"authorDate":"2021-06-01 17:02:09","commitOrder":2,"curCode":"    public void initTable() {\n        try {\n            ShardingSphereConnection conn = dataSource.getConnection();\n            Map<String, DataSource> dataSourceMap = conn.getDataSourceMap();\n            Connection database0 = dataSourceMap.get(\"calcite_jdbc_0\").getConnection();\n            Connection database1 = dataSourceMap.get(\"calcite_jdbc_1\").getConnection();\n            Connection database2 = dataSourceMap.get(\"calcite_jdbc_2\").getConnection();\n            RunScript.execute(database0, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/calcite_data_0.sql\"))));\n            RunScript.execute(database1, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/calcite_data_1.sql\"))));\n            RunScript.execute(database2, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/calcite_data_2.sql\"))));\n            conn.close();\n        } catch (final SQLException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n","date":"2021-06-01 17:02:09","endLine":76,"groupId":"9424","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"initTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4d/9243ae3f48106efe1b2a96b191d0b36a8c88c4.src","preCode":"    public void initTable() {\n        try {\n            ShardingSphereConnection conn = dataSource.getConnection();\n            Map<String, DataSource> dataSourceMap = conn.getDataSourceMap();\n            Connection database0 = dataSourceMap.get(\"calcite_jdbc_0\").getConnection();\n            Connection database1 = dataSourceMap.get(\"calcite_jdbc_1\").getConnection();\n            Connection database2 = dataSourceMap.get(\"calcite_jdbc_2\").getConnection();\n            RunScript.execute(database0, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/calcite_data_0.sql\"))));\n            RunScript.execute(database1, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/calcite_data_1.sql\"))));\n            RunScript.execute(database2, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/calcite_data_2.sql\"))));\n            conn.close();\n        } catch (final SQLException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/base/AbstractShardingSphereDataSourceForFederateTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"}],"commitId":"7d6c812f359bf41472a62cbc0493b253fdeb5769","commitMessage":"@@@Create new package federate execution (#10603)\n\n","date":"2021-06-01 17:02:09","modifiedFileCount":"16","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-06-01 23:28:18","codes":[{"authorDate":"2021-01-25 20:14:29","commitOrder":3,"curCode":"    public void initTable() {\n        try {\n            ShardingSphereConnection conn = dataSource.getConnection();\n            RunScript.execute(conn, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/jdbc_data.sql\"))));\n            conn.close();\n        } catch (final SQLException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n","date":"2021-01-25 20:14:29","endLine":74,"groupId":"9424","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"initTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/80/f635b074d819b6fe93103d6cd0537c930ec81a.src","preCode":"    public void initTable() {\n        try {\n            ShardingSphereConnection conn = dataSource.getConnection();\n            RunScript.execute(conn, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/jdbc_data.sql\"))));\n            conn.close();\n        } catch (final SQLException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/base/AbstractShardingSphereDataSourceForShardingTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2021-06-01 23:28:18","commitOrder":3,"curCode":"    public void initTable() {\n        try {\n            ShardingSphereConnection conn = dataSource.getConnection();\n            Map<String, DataSource> dataSourceMap = conn.getDataSourceMap();\n            Connection database0 = dataSourceMap.get(\"federate_jdbc_0\").getConnection();\n            Connection database1 = dataSourceMap.get(\"federate_jdbc_1\").getConnection();\n            Connection database2 = dataSourceMap.get(\"federate_jdbc_2\").getConnection();\n            RunScript.execute(database0, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/federate_data_0.sql\"))));\n            RunScript.execute(database1, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/federate_data_1.sql\"))));\n            RunScript.execute(database2, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/federate_data_2.sql\"))));\n            conn.close();\n        } catch (final SQLException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n","date":"2021-06-01 23:28:18","endLine":76,"groupId":"9424","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"initTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1e/3d919312769c7836d1061bfb53c250aefc11f3.src","preCode":"    public void initTable() {\n        try {\n            ShardingSphereConnection conn = dataSource.getConnection();\n            Map<String, DataSource> dataSourceMap = conn.getDataSourceMap();\n            Connection database0 = dataSourceMap.get(\"calcite_jdbc_0\").getConnection();\n            Connection database1 = dataSourceMap.get(\"calcite_jdbc_1\").getConnection();\n            Connection database2 = dataSourceMap.get(\"calcite_jdbc_2\").getConnection();\n            RunScript.execute(database0, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/calcite_data_0.sql\"))));\n            RunScript.execute(database1, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/calcite_data_1.sql\"))));\n            RunScript.execute(database2, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/calcite_data_2.sql\"))));\n            conn.close();\n        } catch (final SQLException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/base/AbstractShardingSphereDataSourceForFederateTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"91534e545f7c62f23b9e84ba797530a721beb8d5","commitMessage":"@@@## Fix [Issue10604](https://github.com/apache/shardingsphere/issues/10604) (#10613)\n\nchanges related to replacement of keyword calcite to federate.","date":"2021-06-01 23:28:18","modifiedFileCount":"4","status":"M","submitter":"Abhishek Karkamkar"},{"authorTime":"2021-08-19 20:45:22","codes":[{"authorDate":"2021-08-19 20:45:22","commitOrder":4,"curCode":"    public void initTable() {\n        try {\n            Connection conn = dataSource.getConnection();\n            RunScript.execute(conn, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/jdbc_data.sql\"))));\n            conn.close();\n        } catch (final SQLException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n","date":"2021-08-19 20:45:22","endLine":74,"groupId":"101073","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"initTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2a/b45fd76e8b6e915b8caf0c8db26549d21a19c4.src","preCode":"    public void initTable() {\n        try {\n            ShardingSphereConnection conn = dataSource.getConnection();\n            RunScript.execute(conn, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/jdbc_data.sql\"))));\n            conn.close();\n        } catch (final SQLException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/base/AbstractShardingSphereDataSourceForShardingTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2021-08-19 20:45:22","commitOrder":4,"curCode":"    public void initTable() {\n        try {\n            ShardingSphereConnection conn = (ShardingSphereConnection) dataSource.getConnection();\n            Map<String, DataSource> dataSourceMap = conn.getDataSourceMap();\n            Connection database0 = dataSourceMap.get(\"federate_jdbc_0\").getConnection();\n            Connection database1 = dataSourceMap.get(\"federate_jdbc_1\").getConnection();\n            Connection database2 = dataSourceMap.get(\"federate_jdbc_2\").getConnection();\n            RunScript.execute(database0, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/federate_data_0.sql\"))));\n            RunScript.execute(database1, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/federate_data_1.sql\"))));\n            RunScript.execute(database2, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/federate_data_2.sql\"))));\n            conn.close();\n        } catch (final SQLException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n","date":"2021-08-19 20:45:22","endLine":79,"groupId":"101073","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"initTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9b/65e896363fbe96978c4c0999d7856d9fd8eb1f.src","preCode":"    public void initTable() {\n        try {\n            ShardingSphereConnection conn = dataSource.getConnection();\n            Map<String, DataSource> dataSourceMap = conn.getDataSourceMap();\n            Connection database0 = dataSourceMap.get(\"federate_jdbc_0\").getConnection();\n            Connection database1 = dataSourceMap.get(\"federate_jdbc_1\").getConnection();\n            Connection database2 = dataSourceMap.get(\"federate_jdbc_2\").getConnection();\n            RunScript.execute(database0, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/federate_data_0.sql\"))));\n            RunScript.execute(database1, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/federate_data_1.sql\"))));\n            RunScript.execute(database2, new InputStreamReader(Objects.requireNonNull(AbstractSQLTest.class.getClassLoader().getResourceAsStream(\"sql/federate_data_2.sql\"))));\n            conn.close();\n        } catch (final SQLException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/base/AbstractShardingSphereDataSourceForFederateTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"c2df0553596ccd24646fafe1ab11b63baa81c8d3","commitMessage":"@@@Use SPI for DriverStateContext (#11905)\n\n* private ShardingSphereDataSource.getDataSourceMap()\n\n* private ShardingSphereDataSource.getDataSourceMap()\n\n* Remove StateType\n\n* Use SPI for DriverStateContext\n\n* Use SPI for DriverStateContext\n\n* Unify ShardingSphereDataSource and GovernanceShardingSphereDataSource","date":"2021-08-19 20:45:22","modifiedFileCount":"13","status":"M","submitter":"Liang Zhang"}]
