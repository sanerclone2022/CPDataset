[{"authorTime":"2020-08-24 22:16:34","codes":[{"authorDate":"2020-08-24 22:16:34","commitOrder":7,"curCode":"    public void assertIsQueryResponse() throws NoSuchFieldException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchema()).thenReturn(\"schema\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(mock(MySQLComStmtExecutePacket.class), backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new QueryResponse(Collections.singletonList(mock(QueryHeader.class))));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.isQueryResponse(), is(true));\n    }\n","date":"2020-08-24 22:16:34","endLine":88,"groupId":"4977","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIsQueryResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ca/cc06e830ba22fc879a724b5ff4a604fc1f0bce.src","preCode":"    public void assertIsQueryResponse() throws NoSuchFieldException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchema()).thenReturn(\"schema\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(mock(MySQLComStmtExecutePacket.class), backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new QueryResponse(Collections.singletonList(mock(QueryHeader.class))));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.isQueryResponse(), is(true));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"},{"authorDate":"2020-08-24 22:16:34","commitOrder":7,"curCode":"    public void assertIsUpdateResponse() throws NoSuchFieldException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchema()).thenReturn(\"schema\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(mock(MySQLComStmtExecutePacket.class), backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponse());\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.isUpdateResponse(), is(true));\n    }\n","date":"2020-08-24 22:16:34","endLine":99,"groupId":"4977","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertIsUpdateResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ca/cc06e830ba22fc879a724b5ff4a604fc1f0bce.src","preCode":"    public void assertIsUpdateResponse() throws NoSuchFieldException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchema()).thenReturn(\"schema\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(mock(MySQLComStmtExecutePacket.class), backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponse());\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.isUpdateResponse(), is(true));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"MB"}],"commitId":"c6ea1adee26db09e743ec1ae9aec32b371fd7621","commitMessage":"@@@ Refactor BackendResponse judge sequence of QueryCommandExecutor (#7042)\n\n* Decouple AuthenticationEngine and BackendConnection\n\n* Decouple AuthenticationEngine and BackendConnection\n\n* Refactor BackendResponse judge sequence of MySQLComQueryPacketExecutor\n\n* Refactor BackendResponse judge sequence of MySQLComStmtExecuteExecutor\n\n* Refactor BackendResponse judge sequence of PostgreSQLComBindExecutor\n\n* Refactor BackendResponse judge sequence of PostgreSQLComQueryExecutor\n\n* Refactor MySQLComQueryPacketExecutor\n\n* Refactor MySQLComStmtExecuteExecutor\n\n* Refactor PostgreSQLComBindExecutor\n\n* Refactor PostgreSQLComQueryExecutor","date":"2020-08-24 22:16:34","modifiedFileCount":"8","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-09-09 17:02:15","codes":[{"authorDate":"2020-09-09 17:02:15","commitOrder":8,"curCode":"    public void assertIsQueryResponse() throws NoSuchFieldException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchema()).thenReturn(\"schema\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(mock(MySQLComStmtExecutePacket.class), backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new QueryResponse(Collections.singletonList(mock(QueryHeader.class))));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.QUERY));\n    }\n","date":"2020-09-09 17:02:15","endLine":89,"groupId":"4977","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIsQueryResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e1/df5bf0952fd0b79e57c6fd321f6ba81cc2c8e4.src","preCode":"    public void assertIsQueryResponse() throws NoSuchFieldException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchema()).thenReturn(\"schema\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(mock(MySQLComStmtExecutePacket.class), backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new QueryResponse(Collections.singletonList(mock(QueryHeader.class))));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.isQueryResponse(), is(true));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2020-09-09 17:02:15","commitOrder":8,"curCode":"    public void assertIsUpdateResponse() throws NoSuchFieldException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchema()).thenReturn(\"schema\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(mock(MySQLComStmtExecutePacket.class), backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponse());\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.UPDATE));\n    }\n","date":"2020-09-09 17:02:15","endLine":100,"groupId":"4977","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertIsUpdateResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e1/df5bf0952fd0b79e57c6fd321f6ba81cc2c8e4.src","preCode":"    public void assertIsUpdateResponse() throws NoSuchFieldException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchema()).thenReturn(\"schema\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(mock(MySQLComStmtExecutePacket.class), backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponse());\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.isUpdateResponse(), is(true));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"d126a9ccd713c028a7544530c5a991e297d2b34b","commitMessage":"@@@Merge pull request #7352 from terrymanu/dev\n\nUse ResponseType to refactor QueryCommandExecutor","date":"2020-09-09 17:02:15","modifiedFileCount":"12","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2020-09-10 00:45:15","codes":[{"authorDate":"2020-09-10 00:45:15","commitOrder":9,"curCode":"    public void assertIsQueryResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchema()).thenReturn(\"schema\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(mock(MySQLComStmtExecutePacket.class), backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new QueryResponse(Collections.singletonList(mock(QueryHeader.class))));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.QUERY));\n    }\n","date":"2020-09-10 00:45:15","endLine":85,"groupId":"4977","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIsQueryResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e4/a965a4df027f39b2817fb422df44245780c91a.src","preCode":"    public void assertIsQueryResponse() throws NoSuchFieldException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchema()).thenReturn(\"schema\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(mock(MySQLComStmtExecutePacket.class), backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new QueryResponse(Collections.singletonList(mock(QueryHeader.class))));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.QUERY));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2020-09-10 00:45:15","commitOrder":9,"curCode":"    public void assertIsUpdateResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchema()).thenReturn(\"schema\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(mock(MySQLComStmtExecutePacket.class), backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponse());\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.UPDATE));\n    }\n","date":"2020-09-10 00:45:15","endLine":96,"groupId":"4977","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertIsUpdateResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e4/a965a4df027f39b2817fb422df44245780c91a.src","preCode":"    public void assertIsUpdateResponse() throws NoSuchFieldException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchema()).thenReturn(\"schema\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(mock(MySQLComStmtExecutePacket.class), backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponse());\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.UPDATE));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"31db55e7d3e8f736ace1e56c58e63544786156d0","commitMessage":"@@@Remove ErrorResponse (#7369)\n\n* Refactor MySQLComStmtExecuteExecutor\n\n* Refactor MySQLComStmtExecuteExecutor\n\n* Use protocol framework to process internal COM_QUERY exception\n\n* Use protocol framework to process internal COM_QUERY exception\n\n* Refactor PostgreSQLComBindExecutor\n\n* Refactor PostgreSQLComQueryExecutor\n\n* Remove ErrorResponse\n\n* Revise PostgreSQLCommandExecuteEngine","date":"2020-09-10 00:45:15","modifiedFileCount":"33","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-09-10 15:04:10","codes":[{"authorDate":"2020-09-10 15:04:10","commitOrder":10,"curCode":"    public void assertIsQueryResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchemaName()).thenReturn(\"schema\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(mock(MySQLComStmtExecutePacket.class), backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new QueryResponse(Collections.singletonList(mock(QueryHeader.class))));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.QUERY));\n    }\n","date":"2020-09-10 15:04:10","endLine":85,"groupId":"4977","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIsQueryResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0d/a41f3c3328789f5e094fcb3db8e423d7b0e738.src","preCode":"    public void assertIsQueryResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchema()).thenReturn(\"schema\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(mock(MySQLComStmtExecutePacket.class), backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new QueryResponse(Collections.singletonList(mock(QueryHeader.class))));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.QUERY));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2020-09-10 15:04:10","commitOrder":10,"curCode":"    public void assertIsUpdateResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchemaName()).thenReturn(\"schema\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(mock(MySQLComStmtExecutePacket.class), backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponse());\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.UPDATE));\n    }\n","date":"2020-09-10 15:04:10","endLine":96,"groupId":"4977","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertIsUpdateResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0d/a41f3c3328789f5e094fcb3db8e423d7b0e738.src","preCode":"    public void assertIsUpdateResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchema()).thenReturn(\"schema\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(mock(MySQLComStmtExecutePacket.class), backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponse());\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.UPDATE));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"12086584a0658bb3530fc6625077f5520494d35b","commitMessage":"@@@Merge pull request #7378 from terrymanu/dev\n\nRename ResourceSynchronizer to ResourceLock","date":"2020-09-10 15:04:10","modifiedFileCount":"34","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2020-10-18 17:03:19","codes":[{"authorDate":"2020-10-18 17:03:19","commitOrder":11,"curCode":"    public void assertIsQueryResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        MySQLComStmtExecutePacket packet = mock(MySQLComStmtExecutePacket.class);\n        when(packet.getSql()).thenReturn(\"SELECT 1\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(packet, backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new QueryResponse(Collections.singletonList(mock(QueryHeader.class))));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.QUERY));\n    }\n","date":"2020-10-18 17:03:19","endLine":79,"groupId":"2936","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIsQueryResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/95/bb61f8da4879c3352cab5eecc621e6f235bdb5.src","preCode":"    public void assertIsQueryResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchemaName()).thenReturn(\"schema\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(mock(MySQLComStmtExecutePacket.class), backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new QueryResponse(Collections.singletonList(mock(QueryHeader.class))));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.QUERY));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2020-10-18 17:03:19","commitOrder":11,"curCode":"    public void assertIsUpdateResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        MySQLComStmtExecutePacket packet = mock(MySQLComStmtExecutePacket.class);\n        when(packet.getSql()).thenReturn(\"SELECT 1\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(packet, backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponse());\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.UPDATE));\n    }\n","date":"2020-10-18 17:03:19","endLine":92,"groupId":"2936","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"assertIsUpdateResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/95/bb61f8da4879c3352cab5eecc621e6f235bdb5.src","preCode":"    public void assertIsUpdateResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchemaName()).thenReturn(\"schema\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(mock(MySQLComStmtExecutePacket.class), backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponse());\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.UPDATE));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"8131f34f9307a0c6a7011a6f86ae6c9ce4fb3352","commitMessage":"@@@Remove ShardingSphereSQLParserEngine from SchemaContexts (#7832)\n\n* Remove ShardingSphereSQLParserEngineFactory\n\n* Remove ShardingSphereSQLParserEngineFactory\n\n* Remove ShardingSphereSQLParserEngine from SchemaContextsBuilder\n\n* Remove ShardingSphereSQLParserEngine from SchemaContexts\n\n* Delete DALStatement.interp\n\n* Delete DALStatement.tokens\n\n* Delete DALStatementLexer.tokens\n\n* Delete DALStatementLexer.interp\n\n* Delete DALStatementVisitor.java\n\n* Delete DALStatementParser.java\n\n* Delete DALStatementListener.java\n\n* Delete DALStatementLexer.java\n\n* Delete DALStatementBaseVisitor.java\n\n* Delete DALStatementBaseListener.java","date":"2020-10-18 17:03:19","modifiedFileCount":"35","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-30 21:51:39","codes":[{"authorDate":"2020-11-30 21:51:39","commitOrder":12,"curCode":"    public void assertIsQueryResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        MySQLComStmtExecutePacket packet = mock(MySQLComStmtExecutePacket.class);\n        when(packet.getSql()).thenReturn(\"SELECT 1\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(packet, backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new QueryResponseHeader(Collections.singletonList(mock(QueryHeader.class))));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.QUERY));\n    }\n","date":"2020-11-30 21:51:39","endLine":79,"groupId":"2936","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIsQueryResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/68/a00130a58a1d102e8557cbd39de4b536894fc4.src","preCode":"    public void assertIsQueryResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        MySQLComStmtExecutePacket packet = mock(MySQLComStmtExecutePacket.class);\n        when(packet.getSql()).thenReturn(\"SELECT 1\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(packet, backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new QueryResponse(Collections.singletonList(mock(QueryHeader.class))));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.QUERY));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2020-11-30 21:51:39","commitOrder":12,"curCode":"    public void assertIsUpdateResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        MySQLComStmtExecutePacket packet = mock(MySQLComStmtExecutePacket.class);\n        when(packet.getSql()).thenReturn(\"SELECT 1\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(packet, backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponseHeader());\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.UPDATE));\n    }\n","date":"2020-11-30 21:51:39","endLine":92,"groupId":"2936","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"assertIsUpdateResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/68/a00130a58a1d102e8557cbd39de4b536894fc4.src","preCode":"    public void assertIsUpdateResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        MySQLComStmtExecutePacket packet = mock(MySQLComStmtExecutePacket.class);\n        when(packet.getSql()).thenReturn(\"SELECT 1\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(packet, backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponse());\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.UPDATE));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"af024df142e89e7c2f44d523b66946be0748993f","commitMessage":"@@@Rename ResponseHeader and QueryResponseData (#8426)\n\n* Refactor JDBCDatabaseCommunicationEngine\n\n* Rename ResponseHeader\n\n* Rename QueryResponseData","date":"2020-11-30 21:51:39","modifiedFileCount":"47","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-12-01 15:06:07","codes":[{"authorDate":"2020-11-30 21:51:39","commitOrder":13,"curCode":"    public void assertIsQueryResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        MySQLComStmtExecutePacket packet = mock(MySQLComStmtExecutePacket.class);\n        when(packet.getSql()).thenReturn(\"SELECT 1\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(packet, backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new QueryResponseHeader(Collections.singletonList(mock(QueryHeader.class))));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.QUERY));\n    }\n","date":"2020-11-30 21:51:39","endLine":79,"groupId":"2936","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIsQueryResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/68/a00130a58a1d102e8557cbd39de4b536894fc4.src","preCode":"    public void assertIsQueryResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        MySQLComStmtExecutePacket packet = mock(MySQLComStmtExecutePacket.class);\n        when(packet.getSql()).thenReturn(\"SELECT 1\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(packet, backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new QueryResponseHeader(Collections.singletonList(mock(QueryHeader.class))));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.QUERY));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"},{"authorDate":"2020-12-01 15:06:07","commitOrder":13,"curCode":"    public void assertIsUpdateResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        MySQLComStmtExecutePacket packet = mock(MySQLComStmtExecutePacket.class);\n        when(packet.getSql()).thenReturn(\"SELECT 1\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(packet, backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponseHeader(mock(SQLStatement.class)));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.UPDATE));\n    }\n","date":"2020-12-01 15:06:07","endLine":93,"groupId":"2936","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"assertIsUpdateResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/09/a1f693d8b44680ea7afd1a468e9155a950ac58.src","preCode":"    public void assertIsUpdateResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        MySQLComStmtExecutePacket packet = mock(MySQLComStmtExecutePacket.class);\n        when(packet.getSql()).thenReturn(\"SELECT 1\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(packet, backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponseHeader());\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.UPDATE));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"d238cc336bed2f0a777d1b7709fea1e9e4965fad","commitMessage":"@@@Use PostgreSQLCommand decouple UpdateResponseHeader.type (#8437)\n\n* Add PostgreSQLCommand\n\n* Remove useless UpdateResponseHeader.type\n\n* Refactor UpdateResponseHeader\n\n* Refactor UpdateResponseHeader\n\n* Resolve conflict","date":"2020-12-01 15:06:07","modifiedFileCount":"19","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-02 20:44:49","codes":[{"authorDate":"2021-07-02 20:44:49","commitOrder":14,"curCode":"    public void assertIsQueryResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        when(backendConnection.getDefaultSchemaName()).thenReturn(\"logic_db\");\n        MySQLComStmtExecutePacket packet = mock(MySQLComStmtExecutePacket.class);\n        when(packet.getSql()).thenReturn(\"SELECT 1\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(packet, backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new QueryResponseHeader(Collections.singletonList(mock(QueryHeader.class))));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.QUERY));\n    }\n","date":"2021-07-02 20:44:49","endLine":99,"groupId":"10821","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIsQueryResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8a/e0dd04ee9cf6701590fff55d9d378d9c3dc24e.src","preCode":"    public void assertIsQueryResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        MySQLComStmtExecutePacket packet = mock(MySQLComStmtExecutePacket.class);\n        when(packet.getSql()).thenReturn(\"SELECT 1\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(packet, backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new QueryResponseHeader(Collections.singletonList(mock(QueryHeader.class))));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.QUERY));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2021-07-02 20:44:49","commitOrder":14,"curCode":"    public void assertIsUpdateResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        when(backendConnection.getDefaultSchemaName()).thenReturn(\"logic_db\");\n        MySQLComStmtExecutePacket packet = mock(MySQLComStmtExecutePacket.class);\n        when(packet.getSql()).thenReturn(\"SELECT 1\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(packet, backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponseHeader(mock(SQLStatement.class)));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.UPDATE));\n    }\n","date":"2021-07-02 20:44:49","endLine":113,"groupId":"10821","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"assertIsUpdateResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8a/e0dd04ee9cf6701590fff55d9d378d9c3dc24e.src","preCode":"    public void assertIsUpdateResponse() throws NoSuchFieldException, SQLException {\n        BackendConnection backendConnection = mock(BackendConnection.class);\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        MySQLComStmtExecutePacket packet = mock(MySQLComStmtExecutePacket.class);\n        when(packet.getSql()).thenReturn(\"SELECT 1\");\n        MySQLComStmtExecuteExecutor mysqlComStmtExecuteExecutor = new MySQLComStmtExecuteExecutor(packet, backendConnection);\n        FieldSetter.setField(mysqlComStmtExecuteExecutor, MySQLComStmtExecuteExecutor.class.getDeclaredField(\"databaseCommunicationEngine\"), databaseCommunicationEngine);\n        when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponseHeader(mock(SQLStatement.class)));\n        mysqlComStmtExecuteExecutor.execute();\n        assertThat(mysqlComStmtExecuteExecutor.getResponseType(), is(ResponseType.UPDATE));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"bfb784c9a0e47fd147c8a654c2f0b2a1e86c2c27","commitMessage":"@@@extract SchemaAvailable interface & add validate for SelectStatement (#11091)\n\n* refactor SchemaAvailable interface & add validate for SelectStatement\n\n* add final for InsertStatementContext field\n\n* fix test case error\n\n* fix rewrite test case error\n\n* refactor context new instance method\n\n* optimize test case\n\n* fix test case\n\n* optimize logic\n\n* fix test case\n\n* fix checkstyle","date":"2021-07-02 20:44:49","modifiedFileCount":"44","status":"M","submitter":"Zhengqiang Duan"}]
