[{"authorTime":"2021-06-04 22:49:49","codes":[{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    private void assertValidateDeleteModifyMultiTables(final DeleteStatement sqlStatement) {\n        DeleteMultiTableSegment tableSegment = new DeleteMultiTableSegment();\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(0, 0, new IdentifierValue(\"user\")));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(0, 0, new IdentifierValue(\"order\")));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(0, 0, new IdentifierValue(\"order_item\")));\n        sqlStatement.setTableSegment(tableSegment);\n        DeleteStatementContext sqlStatementContext = new DeleteStatementContext(sqlStatement);\n        Collection<String> shardingTableNames = Lists.newArrayList(\"order\", \"order_item\");\n        when(shardingRule.getShardingLogicTableNames(sqlStatementContext.getTablesContext().getTableNames())).thenReturn(shardingTableNames);\n        when(shardingRule.isAllBindingTables(shardingTableNames)).thenReturn(true);\n        new ShardingDeleteStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","date":"2021-06-04 22:49:49","endLine":88,"groupId":"6695","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertValidateDeleteModifyMultiTables","params":"(finalDeleteStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/41/44bbb1f051e599757012f815f0d4085a08b640.src","preCode":"    private void assertValidateDeleteModifyMultiTables(final DeleteStatement sqlStatement) {\n        DeleteMultiTableSegment tableSegment = new DeleteMultiTableSegment();\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(0, 0, new IdentifierValue(\"user\")));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(0, 0, new IdentifierValue(\"order\")));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(0, 0, new IdentifierValue(\"order_item\")));\n        sqlStatement.setTableSegment(tableSegment);\n        DeleteStatementContext sqlStatementContext = new DeleteStatementContext(sqlStatement);\n        Collection<String> shardingTableNames = Lists.newArrayList(\"order\", \"order_item\");\n        when(shardingRule.getShardingLogicTableNames(sqlStatementContext.getTablesContext().getTableNames())).thenReturn(shardingTableNames);\n        when(shardingRule.isAllBindingTables(shardingTableNames)).thenReturn(true);\n        new ShardingDeleteStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDeleteStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertValidateUpdateModifyMultiTables() {\n        UpdateStatement updateStatement = createUpdateStatement();\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(new SimpleTableSegment(0, 0, new IdentifierValue(\"user\")));\n        joinTableSegment.setRight(new SimpleTableSegment(0, 0, new IdentifierValue(\"order\")));\n        updateStatement.setTableSegment(joinTableSegment);\n        SQLStatementContext<UpdateStatement> sqlStatementContext = new UpdateStatementContext(updateStatement);\n        Collection<String> tableNames = Lists.newArrayList(\"order\", \"order_item\");\n        when(shardingRule.getShardingLogicTableNames(sqlStatementContext.getTablesContext().getTableNames())).thenReturn(tableNames);\n        when(shardingRule.isAllBindingTables(tableNames)).thenReturn(true);\n        new ShardingUpdateStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","date":"2021-06-04 22:49:49","endLine":70,"groupId":"4059","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertValidateUpdateModifyMultiTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f7/9b6c8d0358496a92b13f42c7f8240389873937.src","preCode":"    public void assertValidateUpdateModifyMultiTables() {\n        UpdateStatement updateStatement = createUpdateStatement();\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(new SimpleTableSegment(0, 0, new IdentifierValue(\"user\")));\n        joinTableSegment.setRight(new SimpleTableSegment(0, 0, new IdentifierValue(\"order\")));\n        updateStatement.setTableSegment(joinTableSegment);\n        SQLStatementContext<UpdateStatement> sqlStatementContext = new UpdateStatementContext(updateStatement);\n        Collection<String> tableNames = Lists.newArrayList(\"order\", \"order_item\");\n        when(shardingRule.getShardingLogicTableNames(sqlStatementContext.getTablesContext().getTableNames())).thenReturn(tableNames);\n        when(shardingRule.isAllBindingTables(tableNames)).thenReturn(true);\n        new ShardingUpdateStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingUpdateStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"}],"commitId":"6b157b44d0336e4d9c61f940b0ec19c26758af84","commitMessage":"@@@Merge sharding feature to core module (#10662)\n\n* Merge dependencies\n\n* Merge sharding feature to api module\n\n* Merge sharding feature to core module","date":"2021-06-04 22:49:49","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-07-05 14:48:43","codes":[{"authorDate":"2021-07-05 14:48:43","commitOrder":2,"curCode":"    private void assertValidateDeleteModifyMultiTables(final DeleteStatement sqlStatement) {\n        DeleteMultiTableSegment tableSegment = new DeleteMultiTableSegment();\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"user\"))));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order\"))));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order_item\"))));\n        sqlStatement.setTableSegment(tableSegment);\n        DeleteStatementContext sqlStatementContext = new DeleteStatementContext(sqlStatement);\n        Collection<String> shardingTableNames = Lists.newArrayList(\"order\", \"order_item\");\n        when(shardingRule.getShardingLogicTableNames(sqlStatementContext.getTablesContext().getTableNames())).thenReturn(shardingTableNames);\n        when(shardingRule.isAllBindingTables(shardingTableNames)).thenReturn(true);\n        new ShardingDeleteStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","date":"2021-07-05 14:48:43","endLine":89,"groupId":"6695","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertValidateDeleteModifyMultiTables","params":"(finalDeleteStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ff/b376ae10f86e05181537f2c6b4635fdfc7af68.src","preCode":"    private void assertValidateDeleteModifyMultiTables(final DeleteStatement sqlStatement) {\n        DeleteMultiTableSegment tableSegment = new DeleteMultiTableSegment();\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(0, 0, new IdentifierValue(\"user\")));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(0, 0, new IdentifierValue(\"order\")));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(0, 0, new IdentifierValue(\"order_item\")));\n        sqlStatement.setTableSegment(tableSegment);\n        DeleteStatementContext sqlStatementContext = new DeleteStatementContext(sqlStatement);\n        Collection<String> shardingTableNames = Lists.newArrayList(\"order\", \"order_item\");\n        when(shardingRule.getShardingLogicTableNames(sqlStatementContext.getTablesContext().getTableNames())).thenReturn(shardingTableNames);\n        when(shardingRule.isAllBindingTables(shardingTableNames)).thenReturn(true);\n        new ShardingDeleteStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDeleteStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2021-07-05 14:48:43","commitOrder":2,"curCode":"    public void assertValidateUpdateModifyMultiTables() {\n        UpdateStatement updateStatement = createUpdateStatement();\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"user\"))));\n        joinTableSegment.setRight(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order\"))));\n        updateStatement.setTableSegment(joinTableSegment);\n        SQLStatementContext<UpdateStatement> sqlStatementContext = new UpdateStatementContext(updateStatement);\n        Collection<String> tableNames = Lists.newArrayList(\"order\", \"order_item\");\n        when(shardingRule.getShardingLogicTableNames(sqlStatementContext.getTablesContext().getTableNames())).thenReturn(tableNames);\n        when(shardingRule.isAllBindingTables(tableNames)).thenReturn(true);\n        new ShardingUpdateStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","date":"2021-07-05 14:48:43","endLine":71,"groupId":"6695","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertValidateUpdateModifyMultiTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/45/5437f3622efc668cfcf6bd2d9339578afeceea.src","preCode":"    public void assertValidateUpdateModifyMultiTables() {\n        UpdateStatement updateStatement = createUpdateStatement();\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(new SimpleTableSegment(0, 0, new IdentifierValue(\"user\")));\n        joinTableSegment.setRight(new SimpleTableSegment(0, 0, new IdentifierValue(\"order\")));\n        updateStatement.setTableSegment(joinTableSegment);\n        SQLStatementContext<UpdateStatement> sqlStatementContext = new UpdateStatementContext(updateStatement);\n        Collection<String> tableNames = Lists.newArrayList(\"order\", \"order_item\");\n        when(shardingRule.getShardingLogicTableNames(sqlStatementContext.getTablesContext().getTableNames())).thenReturn(tableNames);\n        when(shardingRule.isAllBindingTables(tableNames)).thenReturn(true);\n        new ShardingUpdateStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingUpdateStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"bd4980624aaa0c9fb3c9c87e260177715f835ede","commitMessage":"@@@support sql with schema for all features (#11150)\n\n* support sql with schema for all features\n\n* optimize logic\n\n* fix test case\n\n* fix multi remove token rewrite error\n\n* correct some test case param\n\n* optimize remove token generate\n\n* optimize remove token generate","date":"2021-07-05 14:48:43","modifiedFileCount":"64","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-07-29 01:03:53","codes":[{"authorDate":"2021-07-29 01:03:53","commitOrder":3,"curCode":"    private void assertValidateDeleteModifyMultiTables(final DeleteStatement sqlStatement) {\n        DeleteMultiTableSegment tableSegment = new DeleteMultiTableSegment();\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"user\"))));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order\"))));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order_item\"))));\n        sqlStatement.setTableSegment(tableSegment);\n        DeleteStatementContext sqlStatementContext = new DeleteStatementContext(sqlStatement);\n        Collection<String> shardingTableNames = Arrays.asList(\"order\", \"order_item\");\n        when(shardingRule.getShardingLogicTableNames(sqlStatementContext.getTablesContext().getTableNames())).thenReturn(shardingTableNames);\n        when(shardingRule.isAllBindingTables(shardingTableNames)).thenReturn(true);\n        new ShardingDeleteStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","date":"2021-07-29 01:03:53","endLine":89,"groupId":"6695","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertValidateDeleteModifyMultiTables","params":"(finalDeleteStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/66/36a8de6f4f16fe995ceea01d2774b07b7d3026.src","preCode":"    private void assertValidateDeleteModifyMultiTables(final DeleteStatement sqlStatement) {\n        DeleteMultiTableSegment tableSegment = new DeleteMultiTableSegment();\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"user\"))));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order\"))));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order_item\"))));\n        sqlStatement.setTableSegment(tableSegment);\n        DeleteStatementContext sqlStatementContext = new DeleteStatementContext(sqlStatement);\n        Collection<String> shardingTableNames = Lists.newArrayList(\"order\", \"order_item\");\n        when(shardingRule.getShardingLogicTableNames(sqlStatementContext.getTablesContext().getTableNames())).thenReturn(shardingTableNames);\n        when(shardingRule.isAllBindingTables(shardingTableNames)).thenReturn(true);\n        new ShardingDeleteStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDeleteStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2021-07-29 01:03:53","commitOrder":3,"curCode":"    public void assertValidateUpdateModifyMultiTables() {\n        UpdateStatement updateStatement = createUpdateStatement();\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"user\"))));\n        joinTableSegment.setRight(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order\"))));\n        updateStatement.setTableSegment(joinTableSegment);\n        SQLStatementContext<UpdateStatement> sqlStatementContext = new UpdateStatementContext(updateStatement);\n        Collection<String> tableNames = Arrays.asList(\"order\", \"order_item\");\n        when(shardingRule.getShardingLogicTableNames(sqlStatementContext.getTablesContext().getTableNames())).thenReturn(tableNames);\n        when(shardingRule.isAllBindingTables(tableNames)).thenReturn(true);\n        new ShardingUpdateStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","date":"2021-07-29 01:03:53","endLine":70,"groupId":"6695","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertValidateUpdateModifyMultiTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0c/f50671d2389058d5f18652905d2056a7bfb765.src","preCode":"    public void assertValidateUpdateModifyMultiTables() {\n        UpdateStatement updateStatement = createUpdateStatement();\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"user\"))));\n        joinTableSegment.setRight(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order\"))));\n        updateStatement.setTableSegment(joinTableSegment);\n        SQLStatementContext<UpdateStatement> sqlStatementContext = new UpdateStatementContext(updateStatement);\n        Collection<String> tableNames = Lists.newArrayList(\"order\", \"order_item\");\n        when(shardingRule.getShardingLogicTableNames(sqlStatementContext.getTablesContext().getTableNames())).thenReturn(tableNames);\n        when(shardingRule.isAllBindingTables(tableNames)).thenReturn(true);\n        new ShardingUpdateStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingUpdateStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"6d2d2ba7b05c29bce74525f0437e04b22a556f66","commitMessage":"@@@Use java raw new List/Set/Map to instead of guava (#11561)\n\n* Use java raw new Map to instead of guava\n\n* Use java raw new List to instead of guava\n\n* Use java raw new Set to instead of guava","date":"2021-07-29 01:03:53","modifiedFileCount":"78","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-16 22:15:52","codes":[{"authorDate":"2021-08-16 22:15:52","commitOrder":4,"curCode":"    private void assertValidateDeleteModifyMultiTables(final DeleteStatement sqlStatement) {\n        DeleteMultiTableSegment tableSegment = new DeleteMultiTableSegment();\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"user\"))));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order\"))));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order_item\"))));\n        sqlStatement.setTableSegment(tableSegment);\n        DeleteStatementContext sqlStatementContext = new DeleteStatementContext(sqlStatement);\n        Collection<String> tableNames = new HashSet<>(Arrays.asList(\"user\", \"order\", \"order_item\"));\n        when(shardingRule.isAllShardingTables(tableNames)).thenReturn(false);\n        when(shardingRule.tableRuleExists(tableNames)).thenReturn(true);\n        new ShardingDeleteStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","date":"2021-08-16 22:15:52","endLine":90,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertValidateDeleteModifyMultiTables","params":"(finalDeleteStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c2/f43ab46fd997f8116dc9d9d0d6fbeb008d5cb7.src","preCode":"    private void assertValidateDeleteModifyMultiTables(final DeleteStatement sqlStatement) {\n        DeleteMultiTableSegment tableSegment = new DeleteMultiTableSegment();\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"user\"))));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order\"))));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order_item\"))));\n        sqlStatement.setTableSegment(tableSegment);\n        DeleteStatementContext sqlStatementContext = new DeleteStatementContext(sqlStatement);\n        Collection<String> shardingTableNames = Arrays.asList(\"order\", \"order_item\");\n        when(shardingRule.getShardingLogicTableNames(sqlStatementContext.getTablesContext().getTableNames())).thenReturn(shardingTableNames);\n        when(shardingRule.isAllBindingTables(shardingTableNames)).thenReturn(true);\n        new ShardingDeleteStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDeleteStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2021-08-16 22:15:52","commitOrder":4,"curCode":"    public void assertValidateUpdateModifyMultiTables() {\n        UpdateStatement updateStatement = createUpdateStatement();\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"user\"))));\n        joinTableSegment.setRight(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order\"))));\n        updateStatement.setTableSegment(joinTableSegment);\n        SQLStatementContext<UpdateStatement> sqlStatementContext = new UpdateStatementContext(updateStatement);\n        Collection<String> tableNames = sqlStatementContext.getTablesContext().getTableNames();\n        when(shardingRule.isAllShardingTables(tableNames)).thenReturn(false);\n        when(shardingRule.tableRuleExists(tableNames)).thenReturn(true);\n        new ShardingUpdateStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","date":"2021-08-16 22:15:52","endLine":70,"groupId":"9006","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertValidateUpdateModifyMultiTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/19/a314126f2ecd97278d1cde29b4e599ad5e2785.src","preCode":"    public void assertValidateUpdateModifyMultiTables() {\n        UpdateStatement updateStatement = createUpdateStatement();\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"user\"))));\n        joinTableSegment.setRight(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order\"))));\n        updateStatement.setTableSegment(joinTableSegment);\n        SQLStatementContext<UpdateStatement> sqlStatementContext = new UpdateStatementContext(updateStatement);\n        Collection<String> tableNames = Arrays.asList(\"order\", \"order_item\");\n        when(shardingRule.getShardingLogicTableNames(sqlStatementContext.getTablesContext().getTableNames())).thenReturn(tableNames);\n        when(shardingRule.isAllBindingTables(tableNames)).thenReturn(true);\n        new ShardingUpdateStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingUpdateStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"35ff1665fc69ac520be3481278a124eadab9d5ee","commitMessage":"@@@optimize performance for delete.  update and insert statement (#11847)\n\n* optimize performance for delete.  update and insert statement\n\n* optimize multi tables check logic\n\n* fix test case","date":"2021-08-16 22:15:52","modifiedFileCount":"11","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-09-15 16:43:12","codes":[{"authorDate":"2021-09-15 16:43:12","commitOrder":5,"curCode":"    private void assertValidateDeleteModifyMultiTables(final DeleteStatement sqlStatement) {\n        DeleteMultiTableSegment tableSegment = new DeleteMultiTableSegment();\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"user\"))));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order\"))));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order_item\"))));\n        sqlStatement.setTableSegment(tableSegment);\n        DeleteStatementContext sqlStatementContext = new DeleteStatementContext(sqlStatement, DefaultSchema.LOGIC_NAME);\n        Collection<String> tableNames = new HashSet<>(Arrays.asList(\"user\", \"order\", \"order_item\"));\n        when(shardingRule.isAllShardingTables(tableNames)).thenReturn(false);\n        when(shardingRule.tableRuleExists(tableNames)).thenReturn(true);\n        new ShardingDeleteStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","date":"2021-09-15 16:43:12","endLine":91,"groupId":"10509","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"assertValidateDeleteModifyMultiTables","params":"(finalDeleteStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/03/79dc2c16cc8bbdc30e7849f38d9920ce2cd6fd.src","preCode":"    private void assertValidateDeleteModifyMultiTables(final DeleteStatement sqlStatement) {\n        DeleteMultiTableSegment tableSegment = new DeleteMultiTableSegment();\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"user\"))));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order\"))));\n        tableSegment.getActualDeleteTables().add(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order_item\"))));\n        sqlStatement.setTableSegment(tableSegment);\n        DeleteStatementContext sqlStatementContext = new DeleteStatementContext(sqlStatement);\n        Collection<String> tableNames = new HashSet<>(Arrays.asList(\"user\", \"order\", \"order_item\"));\n        when(shardingRule.isAllShardingTables(tableNames)).thenReturn(false);\n        when(shardingRule.tableRuleExists(tableNames)).thenReturn(true);\n        new ShardingDeleteStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDeleteStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2021-09-15 16:43:12","commitOrder":5,"curCode":"    public void assertValidateUpdateModifyMultiTables() {\n        UpdateStatement updateStatement = createUpdateStatement();\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"user\"))));\n        joinTableSegment.setRight(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order\"))));\n        updateStatement.setTableSegment(joinTableSegment);\n        SQLStatementContext<UpdateStatement> sqlStatementContext = new UpdateStatementContext(updateStatement, DefaultSchema.LOGIC_NAME);\n        Collection<String> tableNames = sqlStatementContext.getTablesContext().getTableNames();\n        when(shardingRule.isAllShardingTables(tableNames)).thenReturn(false);\n        when(shardingRule.tableRuleExists(tableNames)).thenReturn(true);\n        new ShardingUpdateStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","date":"2021-09-15 16:43:12","endLine":73,"groupId":"10509","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"assertValidateUpdateModifyMultiTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f2/036d9942e2c2ff75dc17cf71e2847ae8f01363.src","preCode":"    public void assertValidateUpdateModifyMultiTables() {\n        UpdateStatement updateStatement = createUpdateStatement();\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"user\"))));\n        joinTableSegment.setRight(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"order\"))));\n        updateStatement.setTableSegment(joinTableSegment);\n        SQLStatementContext<UpdateStatement> sqlStatementContext = new UpdateStatementContext(updateStatement);\n        Collection<String> tableNames = sqlStatementContext.getTablesContext().getTableNames();\n        when(shardingRule.isAllShardingTables(tableNames)).thenReturn(false);\n        when(shardingRule.tableRuleExists(tableNames)).thenReturn(true);\n        new ShardingUpdateStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingUpdateStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"619b0a53d69772fe1035482275430e1baa9d7743","commitMessage":"@@@using SchemaAvailable & EncryptPropertiesBuilder to pass schema. owner. table. column value into EncryptAlgorithm (#12372)\n\n* modify .gitignore to ignore .factorypath\n\n* using SchemaAvailable & EncryptPropertiesBuilder to pass schema. owner. table. column value into EncryptAlgorithm\n\n* fix testcase of EncryptAlgorithmMetaDataTest\n\n* refactor on process multiple tables\n\n* revert on process multiple tables\n\n* revert changes on EncryptProjectionTokenGenerator\n\n* remove unused imports\n\n* fix bug: properties override while set props in findEncryptor\n\n* fix bug: properties override while set props in findEncryptor\n\n* remove unused imports\n\n* fix bug: properties override while set props in findEncryptor\n\n* revoke pass schemaName on ddl statement\n\n* using simplify new properties to set schema.  owner.  table and column\n\n* fix to match develop rule\n\n* change method name to simpilify\n\n* implements schemaAvailable from DMLStatementContext\n\n* performance improvement and rat fix\n\n* revert schemaName on create and alter table statement\n\n* remove unused import","date":"2021-09-15 16:43:12","modifiedFileCount":"29","status":"M","submitter":"cheese8"}]
