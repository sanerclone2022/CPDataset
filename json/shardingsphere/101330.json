[{"authorTime":"2020-12-10 11:24:08","codes":[{"authorDate":"2020-12-10 11:24:08","commitOrder":1,"curCode":"    public void assertSqlFormat() {\n        CodePointBuffer buffer = CodePointBuffer.withChars(CharBuffer.wrap(inputSql.toCharArray()));\n        MySQLLexer lexer = new MySQLLexer(CodePointCharStream.fromBuffer(buffer));\n        MySQLParser parser = new MySQLParser(new CommonTokenStream(lexer));\n        ParseTree tree = ((ParseASTNode) parser.parse()).getRootNode();\n        MySQLFormatSQLVisitor visitor = new MySQLDMLFormatSQLVisitor();\n        visitor.setParameterized(false);\n        String result = visitor.visit(tree);\n        assertTrue(\"SQL format error\", expectFormartedSql.equals(result));\n    }\n","date":"2020-12-10 11:24:08","endLine":131,"groupId":"3936","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertSqlFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8d/12c2c9f21e08f2c2bc50a24022c85cab5ef9fa.src","preCode":"    public void assertSqlFormat() {\n        CodePointBuffer buffer = CodePointBuffer.withChars(CharBuffer.wrap(inputSql.toCharArray()));\n        MySQLLexer lexer = new MySQLLexer(CodePointCharStream.fromBuffer(buffer));\n        MySQLParser parser = new MySQLParser(new CommonTokenStream(lexer));\n        ParseTree tree = ((ParseASTNode) parser.parse()).getRootNode();\n        MySQLFormatSQLVisitor visitor = new MySQLDMLFormatSQLVisitor();\n        visitor.setParameterized(false);\n        String result = visitor.visit(tree);\n        assertTrue(\"SQL format error\", expectFormartedSql.equals(result));\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/test/java/org/apache/shardingsphere/sql/parser/mysql/MySQLFormatTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"},{"authorDate":"2020-12-10 11:24:08","commitOrder":1,"curCode":"    public void assertSqlFormat() {\n        CodePointBuffer buffer = CodePointBuffer.withChars(CharBuffer.wrap(inputSql.toCharArray()));\n        MySQLLexer lexer = new MySQLLexer(CodePointCharStream.fromBuffer(buffer));\n        MySQLParser parser = new MySQLParser(new CommonTokenStream(lexer));\n        ParseTree tree = ((ParseASTNode) parser.parse()).getRootNode();\n        MySQLFormatSQLVisitor visitor = new MySQLDMLFormatSQLVisitor();\n        String result = visitor.visit(tree);\n        assertTrue(\"SQL format error\", expectFormartedSql.equals(result));\n    }\n","date":"2020-12-10 11:24:08","endLine":130,"groupId":"3936","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertSqlFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/04/660c28908edc8a5e267d2b0bafb47ab70293d4.src","preCode":"    public void assertSqlFormat() {\n        CodePointBuffer buffer = CodePointBuffer.withChars(CharBuffer.wrap(inputSql.toCharArray()));\n        MySQLLexer lexer = new MySQLLexer(CodePointCharStream.fromBuffer(buffer));\n        MySQLParser parser = new MySQLParser(new CommonTokenStream(lexer));\n        ParseTree tree = ((ParseASTNode) parser.parse()).getRootNode();\n        MySQLFormatSQLVisitor visitor = new MySQLDMLFormatSQLVisitor();\n        String result = visitor.visit(tree);\n        assertTrue(\"SQL format error\", expectFormartedSql.equals(result));\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/test/java/org/apache/shardingsphere/sql/parser/mysql/MySQLParameterizedTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"}],"commitId":"bb63a4a8f07a55999525731ec3abd2bb4f585d6b","commitMessage":"@@@make parameterized output of SQL is configurable (#8546)\n\n","date":"2020-12-10 11:24:08","modifiedFileCount":"1","status":"B","submitter":"JingShang Lu"},{"authorTime":"2021-02-05 18:17:20","codes":[{"authorDate":"2021-02-05 18:17:20","commitOrder":2,"curCode":"    public void assertSQLFormat() {\n        CodePointBuffer buffer = CodePointBuffer.withChars(CharBuffer.wrap(inputSql.toCharArray()));\n        MySQLLexer lexer = new MySQLLexer(CodePointCharStream.fromBuffer(buffer));\n        MySQLParser parser = new MySQLParser(new CommonTokenStream(lexer));\n        ParseTree tree = ((ParseASTNode) parser.parse()).getRootNode();\n        MySQLFormatSQLVisitor visitor = new MySQLDMLFormatSQLVisitor();\n        visitor.setParameterized(false);\n        assertThat(\"SQL format error\", expectFormattedSQL, is(visitor.visit(tree)));\n    }\n","date":"2021-02-05 18:17:20","endLine":159,"groupId":"101330","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertSQLFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ca/fd78385b2b3845b3037923838ddfc72dd90922.src","preCode":"    public void assertSqlFormat() {\n        CodePointBuffer buffer = CodePointBuffer.withChars(CharBuffer.wrap(inputSql.toCharArray()));\n        MySQLLexer lexer = new MySQLLexer(CodePointCharStream.fromBuffer(buffer));\n        MySQLParser parser = new MySQLParser(new CommonTokenStream(lexer));\n        ParseTree tree = ((ParseASTNode) parser.parse()).getRootNode();\n        MySQLFormatSQLVisitor visitor = new MySQLDMLFormatSQLVisitor();\n        visitor.setParameterized(false);\n        String result = visitor.visit(tree);\n        assertTrue(\"SQL format error\", expectFormartedSql.equals(result));\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/test/java/org/apache/shardingsphere/sql/parser/mysql/MySQLFormatTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2021-02-05 18:17:20","commitOrder":2,"curCode":"    public void assertSQLFormat() {\n        CodePointBuffer buffer = CodePointBuffer.withChars(CharBuffer.wrap(inputSql.toCharArray()));\n        MySQLLexer lexer = new MySQLLexer(CodePointCharStream.fromBuffer(buffer));\n        MySQLParser parser = new MySQLParser(new CommonTokenStream(lexer));\n        ParseTree tree = ((ParseASTNode) parser.parse()).getRootNode();\n        MySQLFormatSQLVisitor visitor = new MySQLDMLFormatSQLVisitor();\n        assertThat(\"SQL format error\", expectFormattedSQL, is(visitor.visit(tree)));\n    }\n","date":"2021-02-05 18:17:20","endLine":126,"groupId":"101330","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertSQLFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/41/c77c8d3bcfa4637dcec34b870c51bbe4354325.src","preCode":"    public void assertSqlFormat() {\n        CodePointBuffer buffer = CodePointBuffer.withChars(CharBuffer.wrap(inputSql.toCharArray()));\n        MySQLLexer lexer = new MySQLLexer(CodePointCharStream.fromBuffer(buffer));\n        MySQLParser parser = new MySQLParser(new CommonTokenStream(lexer));\n        ParseTree tree = ((ParseASTNode) parser.parse()).getRootNode();\n        MySQLFormatSQLVisitor visitor = new MySQLDMLFormatSQLVisitor();\n        String result = visitor.visit(tree);\n        assertTrue(\"SQL format error\", expectFormartedSql.equals(result));\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/test/java/org/apache/shardingsphere/sql/parser/mysql/MySQLParameterizedTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"78c9ec39e2b8aabeb6c050e02b06b202dbbf899e","commitMessage":"@@@For code format of MySQL format test (#9354)\n\n* Fix #9240\n\n* Fix test case\n\n* For code format of MySQL format test","date":"2021-02-05 18:17:20","modifiedFileCount":"2","status":"M","submitter":"Liang Zhang"}]
