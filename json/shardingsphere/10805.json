[{"authorTime":"2021-08-15 02:33:31","codes":[{"authorDate":"2021-09-03 18:48:47","commitOrder":3,"curCode":"    private SQLStatement parseSql(final String sql, final String schemaName) {\n        if (sql.isEmpty()) {\n            return new EmptyStatement();\n        }\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getContextManager().getMetaDataContexts().getMetaData(schemaName).getResource().getDatabaseType()));\n        return sqlStatementParserEngine.parse(sql, true);\n    }\n","date":"2021-09-03 18:48:47","endLine":109,"groupId":"6743","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"parseSql","params":"(finalStringsql@finalStringschemaName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/55/ad2d16bf4e1cbfea394117811672bef414a6ea.src","preCode":"    private SQLStatement parseSql(final String sql, final String schemaName) {\n        if (sql.isEmpty()) {\n            return new EmptyStatement();\n        }\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getContextManager().getMetaDataContexts().getMetaData(schemaName).getResource().getDatabaseType()));\n        return sqlStatementParserEngine.parse(sql, true);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-opengauss/src/main/java/org/apache/shardingsphere/proxy/frontend/opengauss/command/query/binary/bind/OpenGaussComBatchBindExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"},{"authorDate":"2021-08-15 02:33:31","commitOrder":3,"curCode":"    private SQLStatement parseSql(final String sql, final String schemaName) {\n        if (sql.isEmpty()) {\n            return new EmptyStatement();\n        }\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getContextManager().getMetaDataContexts().getMetaData(schemaName).getResource().getDatabaseType()));\n        return sqlStatementParserEngine.parse(sql, true);\n    }\n","date":"2021-08-15 02:33:31","endLine":53,"groupId":"6743","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"parseSql","params":"(finalStringsql@finalStringschemaName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/29/228179df013c3ef61f58975873da34e2233028.src","preCode":"    private SQLStatement parseSql(final String sql, final String schemaName) {\n        if (sql.isEmpty()) {\n            return new EmptyStatement();\n        }\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getContextManager().getMetaDataContexts().getMetaData(schemaName).getResource().getDatabaseType()));\n        return sqlStatementParserEngine.parse(sql, true);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/query/binary/parse/PostgreSQLComParseExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"NB"}],"commitId":"14c6902a2221b0743b224504191f59b04eb950c5","commitMessage":"@@@Adds support for openGauss (#12149)\n\n* ShardingSphere Proxy supports openGauss\n\n* Add openGauss into OptimizeContextFactory\n\n* Add openGauss XA\n\n* Add openGauss SQL parser dialect\n\n* Unify letter case for openGauss\n\n* Update javadoc for openGauss\n\n* Update proxy distribution for openGauss\n\n* Update kunpeng repository\n\n* Adapt openGauss PSQLException\n\n* Add default errorcode in OpenGaussErrorResponsePacket\n\n* Update javadoc for OpenGaussComBatchBindPacket\n\n* Complete unit tests in transaction-xa-core\n\n* Complete unit tests in proxy-backend\n\n* Add todo unit tests for openGauss\n\n* Rename constants in OpenGaussErrorResponsePacket\n\n* Complete unit tests for db-protocol-opengauss\n\n* Remove redundant @Getter in OpenGaussFrontendEngine\n\n* Fix checkstyle in OpenGaussErrorResponsePacketTest\n\n* Decouple openGauss dependency from transaction-xa-core\n\n* Decouple openGauss dependency\n\n* Fix checkstyle in transaction-xa-core\n\n* Remove unused properties in pom.xml\n\n* Remove unused OpenGaussIdentifierPacket\n\n* Revert changes in proxy-distribution pom\n\n* Remove OpenGaussErrorPacketFactoryTest\n\n* Fix OpenGaussErrorResponsePacketTest\n\n* Fix OpenGaussComBatchBindExecutor\n\n* Remove unused throws","date":"2021-09-03 18:48:47","modifiedFileCount":"4","status":"M","submitter":"???"},{"authorTime":"2021-09-16 19:04:46","codes":[{"authorDate":"2021-09-16 19:04:46","commitOrder":4,"curCode":"    private SQLStatement parseSql(final String sql, final String schemaName) {\n        if (sql.isEmpty()) {\n            return new EmptyStatement();\n        }\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getContextManager().getMetaDataContexts().getMetaData(schemaName).getResource().getDatabaseType()),\n                ProxyContext.getInstance().getContextManager().getMetaDataContexts().getProps());\n        return sqlStatementParserEngine.parse(sql, true);\n    }\n","date":"2021-09-16 19:04:46","endLine":110,"groupId":"10805","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"parseSql","params":"(finalStringsql@finalStringschemaName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/39/84b9dd6ca3af6a34e64724a2461fb43517818d.src","preCode":"    private SQLStatement parseSql(final String sql, final String schemaName) {\n        if (sql.isEmpty()) {\n            return new EmptyStatement();\n        }\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getContextManager().getMetaDataContexts().getMetaData(schemaName).getResource().getDatabaseType()));\n        return sqlStatementParserEngine.parse(sql, true);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-opengauss/src/main/java/org/apache/shardingsphere/proxy/frontend/opengauss/command/query/binary/bind/OpenGaussComBatchBindExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2021-09-16 19:04:46","commitOrder":4,"curCode":"    private SQLStatement parseSql(final String sql, final String schemaName) {\n        if (sql.isEmpty()) {\n            return new EmptyStatement();\n        }\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getContextManager().getMetaDataContexts().getMetaData(schemaName).getResource().getDatabaseType()),\n                ProxyContext.getInstance().getContextManager().getMetaDataContexts().getProps());\n        return sqlStatementParserEngine.parse(sql, true);\n    }\n","date":"2021-09-16 19:04:46","endLine":54,"groupId":"10805","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"parseSql","params":"(finalStringsql@finalStringschemaName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/07/a4eb1c99373a3fb0174914ccd8666587436a66.src","preCode":"    private SQLStatement parseSql(final String sql, final String schemaName) {\n        if (sql.isEmpty()) {\n            return new EmptyStatement();\n        }\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getContextManager().getMetaDataContexts().getMetaData(schemaName).getResource().getDatabaseType()));\n        return sqlStatementParserEngine.parse(sql, true);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/query/binary/parse/PostgreSQLComParseExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"ac7987451dd9e7fbde62c5add0224ba740bb20c9","commitMessage":"@@@Support sql annotation analysis (#12280)\n\n* Sql comments parse.\n\n* Add test case.\n\n* Add empty line.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* Add switch for sql comment parsing.\n\n* fix properties error.\n\n* fix properties error.\n\n* Revert \"fix properties error.\"\n\nThis reverts commit 2b50a4ef\n\n* Revert \"fix properties error.\"\n\nThis reverts commit 2ca3ca86\n\n* Revert \"Add switch for sql comment parsing.\"\n\nThis reverts commit 70ed1039\n\n* add switch for sql comment parse\n\n* add switch for sql comment parse\n\n* add switch for sql comment parse\n\n* add switch for sql comment parse\n\n* fix review suggestions\n\n* fix review suggestions","date":"2021-09-16 19:04:46","modifiedFileCount":"57","status":"M","submitter":"tuichenchuxin"}]
