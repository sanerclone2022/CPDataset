[{"authorTime":"2021-06-07 00:07:00","codes":[{"authorDate":"2021-06-07 00:07:00","commitOrder":1,"curCode":"    public void assertGenerateOptionalSQLToken() {\n        SQLRewriteContext sqlRewriteContext = new SQLRewriteContext(schema, sqlStatementContext, \"INSERT INTO tbl VALUES (?)\", Collections.singletonList(1));\n        sqlRewriteContext.addSQLTokenGenerators(Lists.newArrayList(optionalSQLTokenGenerator));\n        sqlRewriteContext.generateSQLTokens();\n        assertFalse(sqlRewriteContext.getSqlTokens().isEmpty());\n        assertThat(sqlRewriteContext.getSqlTokens().get(0), instanceOf(SQLToken.class));\n    }\n","date":"2021-06-07 00:07:00","endLine":91,"groupId":"4872","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertGenerateOptionalSQLToken","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/35/8c9bad5d0e78d68fcc8fc2ef42058b358c7337.src","preCode":"    public void assertGenerateOptionalSQLToken() {\n        SQLRewriteContext sqlRewriteContext = new SQLRewriteContext(schema, sqlStatementContext, \"INSERT INTO tbl VALUES (?)\", Collections.singletonList(1));\n        sqlRewriteContext.addSQLTokenGenerators(Lists.newArrayList(optionalSQLTokenGenerator));\n        sqlRewriteContext.generateSQLTokens();\n        assertFalse(sqlRewriteContext.getSqlTokens().isEmpty());\n        assertThat(sqlRewriteContext.getSqlTokens().get(0), instanceOf(SQLToken.class));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-rewrite/src/test/java/org/apache/shardingsphere/infra/rewrite/context/SQLRewriteContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"},{"authorDate":"2021-06-07 00:07:00","commitOrder":1,"curCode":"    public void assertGenerateCollectionSQLToken() {\n        SQLRewriteContext sqlRewriteContext = new SQLRewriteContext(schema, sqlStatementContext, \"INSERT INTO tbl VALUES (?)\", Collections.singletonList(1));\n        sqlRewriteContext.addSQLTokenGenerators(Lists.newArrayList(collectionSQLTokenGenerator));\n        sqlRewriteContext.generateSQLTokens();\n        assertFalse(sqlRewriteContext.getSqlTokens().isEmpty());\n        assertThat(sqlRewriteContext.getSqlTokens().get(0), instanceOf(SQLToken.class));\n    }\n","date":"2021-06-07 00:07:00","endLine":100,"groupId":"4872","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertGenerateCollectionSQLToken","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/35/8c9bad5d0e78d68fcc8fc2ef42058b358c7337.src","preCode":"    public void assertGenerateCollectionSQLToken() {\n        SQLRewriteContext sqlRewriteContext = new SQLRewriteContext(schema, sqlStatementContext, \"INSERT INTO tbl VALUES (?)\", Collections.singletonList(1));\n        sqlRewriteContext.addSQLTokenGenerators(Lists.newArrayList(collectionSQLTokenGenerator));\n        sqlRewriteContext.generateSQLTokens();\n        assertFalse(sqlRewriteContext.getSqlTokens().isEmpty());\n        assertThat(sqlRewriteContext.getSqlTokens().get(0), instanceOf(SQLToken.class));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-rewrite/src/test/java/org/apache/shardingsphere/infra/rewrite/context/SQLRewriteContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"}],"commitId":"066934256dd6f2247f5cbb5c92a7fe8ef2dfcfdc","commitMessage":"@@@Merge shardingsphere-infra-rewrite and shardingsphere-infra-rewrite-engine module (#10684)\n\n* Merge shardingsphere-infra-rewrite and shardingsphere-infra-rewrite-engine module\n\n* Merge shardingsphere-infra-rewrite and shardingsphere-infra-rewrite-engine module","date":"2021-06-07 00:07:00","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-07-29 01:03:53","codes":[{"authorDate":"2021-07-29 01:03:53","commitOrder":2,"curCode":"    public void assertGenerateOptionalSQLToken() {\n        SQLRewriteContext sqlRewriteContext = new SQLRewriteContext(schema, sqlStatementContext, \"INSERT INTO tbl VALUES (?)\", Collections.singletonList(1));\n        sqlRewriteContext.addSQLTokenGenerators(Collections.singleton(optionalSQLTokenGenerator));\n        sqlRewriteContext.generateSQLTokens();\n        assertFalse(sqlRewriteContext.getSqlTokens().isEmpty());\n        assertThat(sqlRewriteContext.getSqlTokens().get(0), instanceOf(SQLToken.class));\n    }\n","date":"2021-07-29 01:03:53","endLine":90,"groupId":"101730","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertGenerateOptionalSQLToken","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ca/9c85147eee0c441a7b26655945af91f5588c0f.src","preCode":"    public void assertGenerateOptionalSQLToken() {\n        SQLRewriteContext sqlRewriteContext = new SQLRewriteContext(schema, sqlStatementContext, \"INSERT INTO tbl VALUES (?)\", Collections.singletonList(1));\n        sqlRewriteContext.addSQLTokenGenerators(Lists.newArrayList(optionalSQLTokenGenerator));\n        sqlRewriteContext.generateSQLTokens();\n        assertFalse(sqlRewriteContext.getSqlTokens().isEmpty());\n        assertThat(sqlRewriteContext.getSqlTokens().get(0), instanceOf(SQLToken.class));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-rewrite/src/test/java/org/apache/shardingsphere/infra/rewrite/context/SQLRewriteContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2021-07-29 01:03:53","commitOrder":2,"curCode":"    public void assertGenerateCollectionSQLToken() {\n        SQLRewriteContext sqlRewriteContext = new SQLRewriteContext(schema, sqlStatementContext, \"INSERT INTO tbl VALUES (?)\", Collections.singletonList(1));\n        sqlRewriteContext.addSQLTokenGenerators(Collections.singleton(collectionSQLTokenGenerator));\n        sqlRewriteContext.generateSQLTokens();\n        assertFalse(sqlRewriteContext.getSqlTokens().isEmpty());\n        assertThat(sqlRewriteContext.getSqlTokens().get(0), instanceOf(SQLToken.class));\n    }\n","date":"2021-07-29 01:03:53","endLine":99,"groupId":"101730","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertGenerateCollectionSQLToken","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ca/9c85147eee0c441a7b26655945af91f5588c0f.src","preCode":"    public void assertGenerateCollectionSQLToken() {\n        SQLRewriteContext sqlRewriteContext = new SQLRewriteContext(schema, sqlStatementContext, \"INSERT INTO tbl VALUES (?)\", Collections.singletonList(1));\n        sqlRewriteContext.addSQLTokenGenerators(Lists.newArrayList(collectionSQLTokenGenerator));\n        sqlRewriteContext.generateSQLTokens();\n        assertFalse(sqlRewriteContext.getSqlTokens().isEmpty());\n        assertThat(sqlRewriteContext.getSqlTokens().get(0), instanceOf(SQLToken.class));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-rewrite/src/test/java/org/apache/shardingsphere/infra/rewrite/context/SQLRewriteContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"6d2d2ba7b05c29bce74525f0437e04b22a556f66","commitMessage":"@@@Use java raw new List/Set/Map to instead of guava (#11561)\n\n* Use java raw new Map to instead of guava\n\n* Use java raw new List to instead of guava\n\n* Use java raw new Set to instead of guava","date":"2021-07-29 01:03:53","modifiedFileCount":"78","status":"M","submitter":"Liang Zhang"}]
