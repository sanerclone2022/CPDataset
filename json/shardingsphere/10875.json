[{"authorTime":"2021-05-03 18:07:22","codes":[{"authorDate":"2021-05-03 18:07:22","commitOrder":1,"curCode":"    public void assertWriteQueryDataWithInactiveChannel() throws SQLException {\n        PostgreSQLCommandExecuteEngine commandExecuteEngine = new PostgreSQLCommandExecuteEngine();\n        when(queryCommandExecutor.getResponseType()).thenReturn(ResponseType.QUERY);\n        when(channel.isActive()).thenReturn(false);\n        commandExecuteEngine.writeQueryData(channelHandlerContext, backendConnection, queryCommandExecutor, 0);\n        verify(channelHandlerContext).write(isA(PostgreSQLCommandCompletePacket.class));\n    }\n","date":"2021-05-03 18:07:22","endLine":89,"groupId":"9220","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertWriteQueryDataWithInactiveChannel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/12/443ac0b11867a1dbc162434f7df61ab2e4ed95.src","preCode":"    public void assertWriteQueryDataWithInactiveChannel() throws SQLException {\n        PostgreSQLCommandExecuteEngine commandExecuteEngine = new PostgreSQLCommandExecuteEngine();\n        when(queryCommandExecutor.getResponseType()).thenReturn(ResponseType.QUERY);\n        when(channel.isActive()).thenReturn(false);\n        commandExecuteEngine.writeQueryData(channelHandlerContext, backendConnection, queryCommandExecutor, 0);\n        verify(channelHandlerContext).write(isA(PostgreSQLCommandCompletePacket.class));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/PostgreSQLCommandExecuteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"},{"authorDate":"2021-05-03 18:07:22","commitOrder":1,"curCode":"    public void assertWriteQueryDataWithHasNextResult() throws SQLException {\n        PostgreSQLComQueryExecutor queryCommandExecutor = mock(PostgreSQLComQueryExecutor.class);\n        when(queryCommandExecutor.getResponseType()).thenReturn(ResponseType.QUERY);\n        when(channel.isActive()).thenReturn(true);\n        when(queryCommandExecutor.next()).thenReturn(true, false);\n        when(channel.isWritable()).thenReturn(false, true);\n        ResourceLock resourceLock = mock(ResourceLock.class);\n        when(backendConnection.getResourceLock()).thenReturn(resourceLock);\n        PostgreSQLPacket packet = mock(PostgreSQLPacket.class);\n        when(queryCommandExecutor.getQueryRowPacket()).thenReturn(packet);\n        PostgreSQLCommandExecuteEngine commandExecuteEngine = new PostgreSQLCommandExecuteEngine();\n        commandExecuteEngine.writeQueryData(channelHandlerContext, backendConnection, queryCommandExecutor, 0);\n        verify(resourceLock).doAwait();\n        verify(channelHandlerContext).write(packet);\n        verify(channelHandlerContext).write(isA(PostgreSQLCommandCompletePacket.class));\n        verify(channelHandlerContext).flush();\n        verify(channelHandlerContext).write(isA(PostgreSQLReadyForQueryPacket.class));\n    }\n","date":"2021-05-03 18:07:22","endLine":109,"groupId":"9221","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertWriteQueryDataWithHasNextResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/12/443ac0b11867a1dbc162434f7df61ab2e4ed95.src","preCode":"    public void assertWriteQueryDataWithHasNextResult() throws SQLException {\n        PostgreSQLComQueryExecutor queryCommandExecutor = mock(PostgreSQLComQueryExecutor.class);\n        when(queryCommandExecutor.getResponseType()).thenReturn(ResponseType.QUERY);\n        when(channel.isActive()).thenReturn(true);\n        when(queryCommandExecutor.next()).thenReturn(true, false);\n        when(channel.isWritable()).thenReturn(false, true);\n        ResourceLock resourceLock = mock(ResourceLock.class);\n        when(backendConnection.getResourceLock()).thenReturn(resourceLock);\n        PostgreSQLPacket packet = mock(PostgreSQLPacket.class);\n        when(queryCommandExecutor.getQueryRowPacket()).thenReturn(packet);\n        PostgreSQLCommandExecuteEngine commandExecuteEngine = new PostgreSQLCommandExecuteEngine();\n        commandExecuteEngine.writeQueryData(channelHandlerContext, backendConnection, queryCommandExecutor, 0);\n        verify(resourceLock).doAwait();\n        verify(channelHandlerContext).write(packet);\n        verify(channelHandlerContext).write(isA(PostgreSQLCommandCompletePacket.class));\n        verify(channelHandlerContext).flush();\n        verify(channelHandlerContext).write(isA(PostgreSQLReadyForQueryPacket.class));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/PostgreSQLCommandExecuteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"}],"commitId":"79afd7d55be376bf5d61a970ec734b090918755e","commitMessage":"@@@Complete testcases for PostgreSQLCommandExecuteEngineTest (#10249)\n\n","date":"2021-05-03 18:07:22","modifiedFileCount":"1","status":"B","submitter":"???"},{"authorTime":"2021-06-04 20:50:53","codes":[{"authorDate":"2021-06-04 20:50:53","commitOrder":2,"curCode":"    public void assertWriteQueryDataWithInactiveChannel() throws SQLException {\n        PostgreSQLCommandExecuteEngine commandExecuteEngine = new PostgreSQLCommandExecuteEngine();\n        when(queryCommandExecutor.getResponseType()).thenReturn(ResponseType.QUERY);\n        when(channel.isActive()).thenReturn(false);\n        boolean actual = commandExecuteEngine.writeQueryData(channelHandlerContext, backendConnection, queryCommandExecutor, 0);\n        assertTrue(actual);\n        verify(channelHandlerContext).write(isA(PostgreSQLCommandCompletePacket.class));\n    }\n","date":"2021-06-04 20:50:53","endLine":98,"groupId":"10875","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertWriteQueryDataWithInactiveChannel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3d/26671322acc1509df7f0931a416211bb2a5914.src","preCode":"    public void assertWriteQueryDataWithInactiveChannel() throws SQLException {\n        PostgreSQLCommandExecuteEngine commandExecuteEngine = new PostgreSQLCommandExecuteEngine();\n        when(queryCommandExecutor.getResponseType()).thenReturn(ResponseType.QUERY);\n        when(channel.isActive()).thenReturn(false);\n        commandExecuteEngine.writeQueryData(channelHandlerContext, backendConnection, queryCommandExecutor, 0);\n        verify(channelHandlerContext).write(isA(PostgreSQLCommandCompletePacket.class));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/PostgreSQLCommandExecuteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2021-06-04 20:50:53","commitOrder":2,"curCode":"    public void assertWriteQueryDataWithHasNextResult() throws SQLException {\n        PostgreSQLComQueryExecutor queryCommandExecutor = mock(PostgreSQLComQueryExecutor.class);\n        when(queryCommandExecutor.getResponseType()).thenReturn(ResponseType.QUERY);\n        when(channel.isActive()).thenReturn(true);\n        when(queryCommandExecutor.next()).thenReturn(true, false);\n        when(channel.isWritable()).thenReturn(false, true);\n        ResourceLock resourceLock = mock(ResourceLock.class);\n        when(backendConnection.getResourceLock()).thenReturn(resourceLock);\n        PostgreSQLPacket packet = mock(PostgreSQLPacket.class);\n        when(queryCommandExecutor.getQueryRowPacket()).thenReturn(packet);\n        PostgreSQLCommandExecuteEngine commandExecuteEngine = new PostgreSQLCommandExecuteEngine();\n        boolean actual = commandExecuteEngine.writeQueryData(channelHandlerContext, backendConnection, queryCommandExecutor, 0);\n        assertTrue(actual);\n        verify(resourceLock).doAwait();\n        verify(channelHandlerContext).write(packet);\n        verify(channelHandlerContext).write(isA(PostgreSQLCommandCompletePacket.class));\n        verify(channelHandlerContext).flush();\n        verify(channelHandlerContext).write(isA(PostgreSQLReadyForQueryPacket.class));\n    }\n","date":"2021-06-04 20:50:53","endLine":119,"groupId":"10875","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertWriteQueryDataWithHasNextResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3d/26671322acc1509df7f0931a416211bb2a5914.src","preCode":"    public void assertWriteQueryDataWithHasNextResult() throws SQLException {\n        PostgreSQLComQueryExecutor queryCommandExecutor = mock(PostgreSQLComQueryExecutor.class);\n        when(queryCommandExecutor.getResponseType()).thenReturn(ResponseType.QUERY);\n        when(channel.isActive()).thenReturn(true);\n        when(queryCommandExecutor.next()).thenReturn(true, false);\n        when(channel.isWritable()).thenReturn(false, true);\n        ResourceLock resourceLock = mock(ResourceLock.class);\n        when(backendConnection.getResourceLock()).thenReturn(resourceLock);\n        PostgreSQLPacket packet = mock(PostgreSQLPacket.class);\n        when(queryCommandExecutor.getQueryRowPacket()).thenReturn(packet);\n        PostgreSQLCommandExecuteEngine commandExecuteEngine = new PostgreSQLCommandExecuteEngine();\n        commandExecuteEngine.writeQueryData(channelHandlerContext, backendConnection, queryCommandExecutor, 0);\n        verify(resourceLock).doAwait();\n        verify(channelHandlerContext).write(packet);\n        verify(channelHandlerContext).write(isA(PostgreSQLCommandCompletePacket.class));\n        verify(channelHandlerContext).flush();\n        verify(channelHandlerContext).write(isA(PostgreSQLReadyForQueryPacket.class));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/PostgreSQLCommandExecuteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"4afff9c5ea8bfd8458d37a51526798d2bd50da11","commitMessage":"@@@Determine whether to flush by CommandExecuteEngine (#10661)\n\n* Determine whether to flush by CommandExecuteEngine\n\n* Fix test case","date":"2021-06-04 20:50:53","modifiedFileCount":"6","status":"M","submitter":"???"}]
