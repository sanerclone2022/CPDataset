[{"authorTime":"2021-06-05 16:48:03","codes":[{"authorDate":"2021-06-05 16:48:03","commitOrder":1,"curCode":"    private void addPlainColumn(final InsertValue insertValueToken, final int columnIndex,\n                                final String tableName, final String columnName, final InsertValueContext insertValueContext, final Object originalValue) {\n        if (getEncryptRule().findPlainColumn(tableName, columnName).isPresent()) {\n            DerivedSimpleExpressionSegment derivedExpressionSegment = isAddLiteralExpressionSegment(insertValueContext, columnIndex)\n                    ? new DerivedLiteralExpressionSegment(originalValue) : new DerivedParameterMarkerExpressionSegment(getParameterIndexCount(insertValueToken));\n            insertValueToken.getValues().add(columnIndex + 1, derivedExpressionSegment);\n        }\n    }\n","date":"2021-06-05 16:48:03","endLine":140,"groupId":"8150","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addPlainColumn","params":"(finalInsertValueinsertValueToken@finalintcolumnIndex@finalStringtableName@finalStringcolumnName@finalInsertValueContextinsertValueContext@finalObjectoriginalValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b8/0cca13bd055352b9fe1c6ce20e695ce987a457.src","preCode":"    private void addPlainColumn(final InsertValue insertValueToken, final int columnIndex,\n                                final String tableName, final String columnName, final InsertValueContext insertValueContext, final Object originalValue) {\n        if (getEncryptRule().findPlainColumn(tableName, columnName).isPresent()) {\n            DerivedSimpleExpressionSegment derivedExpressionSegment = isAddLiteralExpressionSegment(insertValueContext, columnIndex)\n                    ? new DerivedLiteralExpressionSegment(originalValue) : new DerivedParameterMarkerExpressionSegment(getParameterIndexCount(insertValueToken));\n            insertValueToken.getValues().add(columnIndex + 1, derivedExpressionSegment);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptInsertValuesTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"B"},{"authorDate":"2021-06-05 16:48:03","commitOrder":1,"curCode":"    private void addAssistedQueryColumn(final InsertValue insertValueToken, final EncryptAlgorithm encryptAlgorithm, final int columnIndex,\n                                        final String tableName, final String columnName, final InsertValueContext insertValueContext, final Object originalValue) {\n        if (getEncryptRule().findAssistedQueryColumn(tableName, columnName).isPresent()) {\n            DerivedSimpleExpressionSegment derivedExpressionSegment = isAddLiteralExpressionSegment(insertValueContext, columnIndex)\n                    ? new DerivedLiteralExpressionSegment(((QueryAssistedEncryptAlgorithm) encryptAlgorithm).queryAssistedEncrypt(null == originalValue ? null : originalValue.toString()))\n                    : new DerivedParameterMarkerExpressionSegment(getParameterIndexCount(insertValueToken));\n            insertValueToken.getValues().add(columnIndex + 1, derivedExpressionSegment);\n        }\n    }\n","date":"2021-06-05 16:48:03","endLine":150,"groupId":"8152","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addAssistedQueryColumn","params":"(finalInsertValueinsertValueToken@finalEncryptAlgorithmencryptAlgorithm@finalintcolumnIndex@finalStringtableName@finalStringcolumnName@finalInsertValueContextinsertValueContext@finalObjectoriginalValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b8/0cca13bd055352b9fe1c6ce20e695ce987a457.src","preCode":"    private void addAssistedQueryColumn(final InsertValue insertValueToken, final EncryptAlgorithm encryptAlgorithm, final int columnIndex,\n                                        final String tableName, final String columnName, final InsertValueContext insertValueContext, final Object originalValue) {\n        if (getEncryptRule().findAssistedQueryColumn(tableName, columnName).isPresent()) {\n            DerivedSimpleExpressionSegment derivedExpressionSegment = isAddLiteralExpressionSegment(insertValueContext, columnIndex)\n                    ? new DerivedLiteralExpressionSegment(((QueryAssistedEncryptAlgorithm) encryptAlgorithm).queryAssistedEncrypt(null == originalValue ? null : originalValue.toString()))\n                    : new DerivedParameterMarkerExpressionSegment(getParameterIndexCount(insertValueToken));\n            insertValueToken.getValues().add(columnIndex + 1, derivedExpressionSegment);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptInsertValuesTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"B"}],"commitId":"78da9d03eb0ae28c28d4d8f4f45f84303a69986e","commitMessage":"@@@Merge encrypt feature to core module (#10667)\n\n* Merge encrypt feature to core module\n\n* Merge encrypt feature to core module\n\n* Merge encrypt feature to core module","date":"2021-06-05 16:48:03","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-09-14 07:49:20","codes":[{"authorDate":"2021-06-05 16:48:03","commitOrder":2,"curCode":"    private void addPlainColumn(final InsertValue insertValueToken, final int columnIndex,\n                                final String tableName, final String columnName, final InsertValueContext insertValueContext, final Object originalValue) {\n        if (getEncryptRule().findPlainColumn(tableName, columnName).isPresent()) {\n            DerivedSimpleExpressionSegment derivedExpressionSegment = isAddLiteralExpressionSegment(insertValueContext, columnIndex)\n                    ? new DerivedLiteralExpressionSegment(originalValue) : new DerivedParameterMarkerExpressionSegment(getParameterIndexCount(insertValueToken));\n            insertValueToken.getValues().add(columnIndex + 1, derivedExpressionSegment);\n        }\n    }\n","date":"2021-06-05 16:48:03","endLine":140,"groupId":"10151","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addPlainColumn","params":"(finalInsertValueinsertValueToken@finalintcolumnIndex@finalStringtableName@finalStringcolumnName@finalInsertValueContextinsertValueContext@finalObjectoriginalValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b8/0cca13bd055352b9fe1c6ce20e695ce987a457.src","preCode":"    private void addPlainColumn(final InsertValue insertValueToken, final int columnIndex,\n                                final String tableName, final String columnName, final InsertValueContext insertValueContext, final Object originalValue) {\n        if (getEncryptRule().findPlainColumn(tableName, columnName).isPresent()) {\n            DerivedSimpleExpressionSegment derivedExpressionSegment = isAddLiteralExpressionSegment(insertValueContext, columnIndex)\n                    ? new DerivedLiteralExpressionSegment(originalValue) : new DerivedParameterMarkerExpressionSegment(getParameterIndexCount(insertValueToken));\n            insertValueToken.getValues().add(columnIndex + 1, derivedExpressionSegment);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptInsertValuesTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"},{"authorDate":"2021-09-14 07:49:20","commitOrder":2,"curCode":"    private void addAssistedQueryColumn(final InsertValue insertValueToken, final EncryptAlgorithm encryptAlgorithm, final int columnIndex,\n                                        final String tableName, final String columnName, final InsertValueContext insertValueContext, final Object originalValue) {\n        if (getEncryptRule().findAssistedQueryColumn(tableName, columnName).isPresent()) {\n            DerivedSimpleExpressionSegment derivedExpressionSegment = isAddLiteralExpressionSegment(insertValueContext, columnIndex)\n                    ? new DerivedLiteralExpressionSegment(((QueryAssistedEncryptAlgorithm) encryptAlgorithm).queryAssistedEncrypt(null == originalValue ? null : originalValue))\n                    : new DerivedParameterMarkerExpressionSegment(getParameterIndexCount(insertValueToken));\n            insertValueToken.getValues().add(columnIndex + 1, derivedExpressionSegment);\n        }\n    }\n","date":"2021-09-14 07:49:20","endLine":150,"groupId":"10151","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addAssistedQueryColumn","params":"(finalInsertValueinsertValueToken@finalEncryptAlgorithmencryptAlgorithm@finalintcolumnIndex@finalStringtableName@finalStringcolumnName@finalInsertValueContextinsertValueContext@finalObjectoriginalValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5c/4d608b18aa4a6b234a8bb503b641ca6ed03ffb.src","preCode":"    private void addAssistedQueryColumn(final InsertValue insertValueToken, final EncryptAlgorithm encryptAlgorithm, final int columnIndex,\n                                        final String tableName, final String columnName, final InsertValueContext insertValueContext, final Object originalValue) {\n        if (getEncryptRule().findAssistedQueryColumn(tableName, columnName).isPresent()) {\n            DerivedSimpleExpressionSegment derivedExpressionSegment = isAddLiteralExpressionSegment(insertValueContext, columnIndex)\n                    ? new DerivedLiteralExpressionSegment(((QueryAssistedEncryptAlgorithm) encryptAlgorithm).queryAssistedEncrypt(null == originalValue ? null : originalValue.toString()))\n                    : new DerivedParameterMarkerExpressionSegment(getParameterIndexCount(insertValueToken));\n            insertValueToken.getValues().add(columnIndex + 1, derivedExpressionSegment);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptInsertValuesTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"}],"commitId":"73cee3614c582a14b77b3f6b1cda6049dee5da67","commitMessage":"@@@modify QueryAssistedEncryptAlgorithm queryAssistedEncrypt method para? (#12409)\n\n* modify QueryAssistedEncryptAlgorithm queryAssistedEncrypt method parameter to enable user decide how use plainText\n\n* modify method parameter type","date":"2021-09-14 07:49:20","modifiedFileCount":"9","status":"M","submitter":"CodingBingo"}]
