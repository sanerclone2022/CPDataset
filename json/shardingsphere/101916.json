[{"authorTime":"2021-07-21 18:15:49","codes":[{"authorDate":"2021-07-21 18:15:49","commitOrder":1,"curCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> routeDataSourceNames, final DropViewStatement sqlStatement, final SchemaBuilderMaterials materials) {\n        sqlStatement.getViews().forEach(each -> schema.remove(each.getTableName().getIdentifier().getValue()));\n        Optional<SingleTableRule> singleTableRule = materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each -> (SingleTableRule) each).findFirst();\n        for (SimpleTableSegment each : sqlStatement.getViews()) {\n            singleTableRule.ifPresent(rule -> rule.dropSingleTableDataNode(each.getTableName().getIdentifier().getValue()));\n        }\n    }\n","date":"2021-07-21 18:15:49","endLine":42,"groupId":"8419","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"refresh","params":"(finalShardingSphereSchemaschema@finalCollection<String>routeDataSourceNames@finalDropViewStatementsqlStatement@finalSchemaBuilderMaterialsmaterials)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/93/9919c8353f3115552d97b654337397e60a6d13.src","preCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> routeDataSourceNames, final DropViewStatement sqlStatement, final SchemaBuilderMaterials materials) {\n        sqlStatement.getViews().forEach(each -> schema.remove(each.getTableName().getIdentifier().getValue()));\n        Optional<SingleTableRule> singleTableRule = materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each -> (SingleTableRule) each).findFirst();\n        for (SimpleTableSegment each : sqlStatement.getViews()) {\n            singleTableRule.ifPresent(rule -> rule.dropSingleTableDataNode(each.getTableName().getIdentifier().getValue()));\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/DropViewStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"B"},{"authorDate":"2021-07-21 18:15:49","commitOrder":1,"curCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> routeDataSourceNames, final DropTableStatement sqlStatement, final SchemaBuilderMaterials materials) {\n        sqlStatement.getTables().forEach(each -> schema.remove(each.getTableName().getIdentifier().getValue()));\n        Optional<SingleTableRule> singleTableRule = materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each -> (SingleTableRule) each).findFirst();\n        for (SimpleTableSegment each : sqlStatement.getTables()) {\n            singleTableRule.ifPresent(rule -> rule.dropSingleTableDataNode(each.getTableName().getIdentifier().getValue()));\n        }\n    }\n","date":"2021-07-21 18:15:49","endLine":42,"groupId":"8419","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"refresh","params":"(finalShardingSphereSchemaschema@finalCollection<String>routeDataSourceNames@finalDropTableStatementsqlStatement@finalSchemaBuilderMaterialsmaterials)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/26/ca09654f6cdc319ee4dcfc2f765fa4acd9677d.src","preCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> routeDataSourceNames, final DropTableStatement sqlStatement, final SchemaBuilderMaterials materials) {\n        sqlStatement.getTables().forEach(each -> schema.remove(each.getTableName().getIdentifier().getValue()));\n        Optional<SingleTableRule> singleTableRule = materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each -> (SingleTableRule) each).findFirst();\n        for (SimpleTableSegment each : sqlStatement.getTables()) {\n            singleTableRule.ifPresent(rule -> rule.dropSingleTableDataNode(each.getTableName().getIdentifier().getValue()));\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/DropTableStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"B"}],"commitId":"1ea833bd9d9b26f80f34e8442b726ca9a2752a6f","commitMessage":"@@@remove create table and drop table event (#11423)\n\n* remove create table and drop table event\n\n* fix encrypt test case\n\n* optimize single table route logic\n\n* update param name","date":"2021-07-21 18:15:49","modifiedFileCount":"44","status":"B","submitter":"Zhengqiang Duan"},{"authorTime":"2021-08-02 18:32:21","codes":[{"authorDate":"2021-08-02 18:32:21","commitOrder":2,"curCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, final DropViewStatement sqlStatement, final SchemaBuilderMaterials materials) {\n        sqlStatement.getViews().forEach(each -> schema.remove(each.getTableName().getIdentifier().getValue()));\n        Optional<SingleTableRule> singleTableRule = materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each -> (SingleTableRule) each).findFirst();\n        for (SimpleTableSegment each : sqlStatement.getViews()) {\n            singleTableRule.ifPresent(rule -> rule.dropSingleTableDataNode(each.getTableName().getIdentifier().getValue()));\n        }\n    }\n","date":"2021-08-02 18:32:21","endLine":42,"groupId":"8419","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"refresh","params":"(finalShardingSphereSchemaschema@finalCollection<String>logicDataSourceNames@finalDropViewStatementsqlStatement@finalSchemaBuilderMaterialsmaterials)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/dd/bf3b2c34c83bdd3715590c6e5c687f7ec92212.src","preCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> routeDataSourceNames, final DropViewStatement sqlStatement, final SchemaBuilderMaterials materials) {\n        sqlStatement.getViews().forEach(each -> schema.remove(each.getTableName().getIdentifier().getValue()));\n        Optional<SingleTableRule> singleTableRule = materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each -> (SingleTableRule) each).findFirst();\n        for (SimpleTableSegment each : sqlStatement.getViews()) {\n            singleTableRule.ifPresent(rule -> rule.dropSingleTableDataNode(each.getTableName().getIdentifier().getValue()));\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/DropViewStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2021-08-02 18:32:21","commitOrder":2,"curCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, final DropTableStatement sqlStatement, final SchemaBuilderMaterials materials) {\n        sqlStatement.getTables().forEach(each -> schema.remove(each.getTableName().getIdentifier().getValue()));\n        Optional<SingleTableRule> singleTableRule = materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each -> (SingleTableRule) each).findFirst();\n        for (SimpleTableSegment each : sqlStatement.getTables()) {\n            singleTableRule.ifPresent(rule -> rule.dropSingleTableDataNode(each.getTableName().getIdentifier().getValue()));\n        }\n    }\n","date":"2021-08-02 18:32:21","endLine":42,"groupId":"8419","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"refresh","params":"(finalShardingSphereSchemaschema@finalCollection<String>logicDataSourceNames@finalDropTableStatementsqlStatement@finalSchemaBuilderMaterialsmaterials)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d1/4e6c4a156192467b40f88b892cd7555627b248.src","preCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> routeDataSourceNames, final DropTableStatement sqlStatement, final SchemaBuilderMaterials materials) {\n        sqlStatement.getTables().forEach(each -> schema.remove(each.getTableName().getIdentifier().getValue()));\n        Optional<SingleTableRule> singleTableRule = materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each -> (SingleTableRule) each).findFirst();\n        for (SimpleTableSegment each : sqlStatement.getTables()) {\n            singleTableRule.ifPresent(rule -> rule.dropSingleTableDataNode(each.getTableName().getIdentifier().getValue()));\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/DropTableStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"f840cb7cd1b4e100795c60026953bd991d29a501","commitMessage":"@@@fix single table metadata refresh when use readwrite-splitting rule (#11598)\n\n* fix single table metadata refresh when use readwrite-splitting rule\n\n* rename test case method","date":"2021-08-02 18:32:21","modifiedFileCount":"16","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-08-07 22:01:40","codes":[{"authorDate":"2021-08-07 22:01:40","commitOrder":3,"curCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, final DropViewStatement sqlStatement, final SchemaBuilderMaterials materials) {\n        sqlStatement.getViews().forEach(each -> schema.remove(each.getTableName().getIdentifier().getValue()));\n        Collection<SingleTableRule> rules = findShardingSphereRulesByClass(materials.getRules(), SingleTableRule.class);\n        for (SimpleTableSegment each : sqlStatement.getViews()) {\n            rules.forEach(rule -> rule.dropSingleTableDataNode(each.getTableName().getIdentifier().getValue()));\n        }\n    }\n","date":"2021-08-07 22:01:40","endLine":41,"groupId":"8158","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"refresh","params":"(finalShardingSphereSchemaschema@finalCollection<String>logicDataSourceNames@finalDropViewStatementsqlStatement@finalSchemaBuilderMaterialsmaterials)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bb/259d6655dbf3f9935e3668d6776068b1d4f739.src","preCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, final DropViewStatement sqlStatement, final SchemaBuilderMaterials materials) {\n        sqlStatement.getViews().forEach(each -> schema.remove(each.getTableName().getIdentifier().getValue()));\n        Optional<SingleTableRule> singleTableRule = materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each -> (SingleTableRule) each).findFirst();\n        for (SimpleTableSegment each : sqlStatement.getViews()) {\n            singleTableRule.ifPresent(rule -> rule.dropSingleTableDataNode(each.getTableName().getIdentifier().getValue()));\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/DropViewStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2021-08-07 22:01:40","commitOrder":3,"curCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, final DropTableStatement sqlStatement, final SchemaBuilderMaterials materials) {\n        sqlStatement.getTables().forEach(each -> schema.remove(each.getTableName().getIdentifier().getValue()));\n        Collection<SingleTableRule> rules = findShardingSphereRulesByClass(materials.getRules(), SingleTableRule.class);\n        for (SimpleTableSegment each : sqlStatement.getTables()) {\n            rules.forEach(rule -> rule.dropSingleTableDataNode(each.getTableName().getIdentifier().getValue()));\n        }\n    }\n","date":"2021-08-07 22:01:40","endLine":41,"groupId":"8158","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"refresh","params":"(finalShardingSphereSchemaschema@finalCollection<String>logicDataSourceNames@finalDropTableStatementsqlStatement@finalSchemaBuilderMaterialsmaterials)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e9/ecd99f8d6d3a89ba3413b048d1f93f6af2a5f2.src","preCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, final DropTableStatement sqlStatement, final SchemaBuilderMaterials materials) {\n        sqlStatement.getTables().forEach(each -> schema.remove(each.getTableName().getIdentifier().getValue()));\n        Optional<SingleTableRule> singleTableRule = materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each -> (SingleTableRule) each).findFirst();\n        for (SimpleTableSegment each : sqlStatement.getTables()) {\n            singleTableRule.ifPresent(rule -> rule.dropSingleTableDataNode(each.getTableName().getIdentifier().getValue()));\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/DropTableStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"b52b1685636439b550223fca13e81f521ba4258e","commitMessage":"@@@correct wrong result when metadata refresh with encrypt in multi dataSources (#11688)\n\n* correct wrong result when metadata refresh with encrypt in multi dataSources\n\n* add test case","date":"2021-08-07 22:01:40","modifiedFileCount":"12","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-09-04 18:58:22","codes":[{"authorDate":"2021-09-04 18:58:22","commitOrder":4,"curCode":"    public void refresh(final ShardingSphereMetaData schemaMetaData, final Collection<String> logicDataSourceNames, final DropViewStatement sqlStatement, final ConfigurationProperties props) {\n        sqlStatement.getViews().forEach(each -> schemaMetaData.getSchema().remove(each.getTableName().getIdentifier().getValue()));\n        Collection<MutableDataNodeRule> rules = schemaMetaData.getRuleMetaData().findRules(MutableDataNodeRule.class);\n        for (SimpleTableSegment each : sqlStatement.getViews()) {\n            rules.forEach(rule -> rule.dropDataNode(each.getTableName().getIdentifier().getValue()));\n        }\n    }\n","date":"2021-09-04 18:58:22","endLine":41,"groupId":"101916","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"refresh","params":"(finalShardingSphereMetaDataschemaMetaData@finalCollection<String>logicDataSourceNames@finalDropViewStatementsqlStatement@finalConfigurationPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/31/69b58f8e5617be5f1986461b106db30647d0ea.src","preCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, final DropViewStatement sqlStatement, final SchemaBuilderMaterials materials) {\n        sqlStatement.getViews().forEach(each -> schema.remove(each.getTableName().getIdentifier().getValue()));\n        Collection<SingleTableRule> rules = findShardingSphereRulesByClass(materials.getRules(), SingleTableRule.class);\n        for (SimpleTableSegment each : sqlStatement.getViews()) {\n            rules.forEach(rule -> rule.dropSingleTableDataNode(each.getTableName().getIdentifier().getValue()));\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/DropViewStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2021-09-04 18:58:22","commitOrder":4,"curCode":"    public void refresh(final ShardingSphereMetaData schemaMetaData, final Collection<String> logicDataSourceNames, final DropTableStatement sqlStatement, final ConfigurationProperties props) {\n        sqlStatement.getTables().forEach(each -> schemaMetaData.getSchema().remove(each.getTableName().getIdentifier().getValue()));\n        Collection<MutableDataNodeRule> rules = schemaMetaData.getRuleMetaData().findRules(MutableDataNodeRule.class);\n        for (SimpleTableSegment each : sqlStatement.getTables()) {\n            rules.forEach(rule -> rule.dropDataNode(each.getTableName().getIdentifier().getValue()));\n        }\n    }\n","date":"2021-09-04 18:58:22","endLine":41,"groupId":"101916","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"refresh","params":"(finalShardingSphereMetaDataschemaMetaData@finalCollection<String>logicDataSourceNames@finalDropTableStatementsqlStatement@finalConfigurationPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1c/77c5415e80b2746dc8726b40b3097168e41fd5.src","preCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, final DropTableStatement sqlStatement, final SchemaBuilderMaterials materials) {\n        sqlStatement.getTables().forEach(each -> schema.remove(each.getTableName().getIdentifier().getValue()));\n        Collection<SingleTableRule> rules = findShardingSphereRulesByClass(materials.getRules(), SingleTableRule.class);\n        for (SimpleTableSegment each : sqlStatement.getTables()) {\n            rules.forEach(rule -> rule.dropSingleTableDataNode(each.getTableName().getIdentifier().getValue()));\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/DropTableStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"a8c655eaf51f230c724274dc0c1d6ba775c73d40","commitMessage":"@@@Add shardingsphere-single-table into kernel module (#12210)\n\n* Rename SchemaRulesBuilderMaterials\n\n* Add shardingsphere-single-table\n\n* Add shardingsphere-single-table\n\n* Revise javadoc\n\n* Move MetadataRefresher.findShardingSphereRulesByClass to ShardingSphereSchema\n\n* Add MutableDataNodeRule\n\n* Add SingleTableSchemaBuilderTest\n\n* Move single table rule\n\n* Move single table configuration\n\n* Revise java doc","date":"2021-09-04 18:58:22","modifiedFileCount":"54","status":"M","submitter":"Liang Zhang"}]
