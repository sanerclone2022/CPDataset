[{"authorTime":"2021-02-02 18:17:03","codes":[{"authorDate":"2021-02-02 18:17:03","commitOrder":1,"curCode":"    private synchronized boolean executeInventoryTask() {\n        if (ScalingTaskUtil.allInventoryTasksFinished(jobContext.getInventoryTasks())) {\n            log.info(\"All inventory tasks finished.\");\n            return true;\n        }\n        log.info(\"-------------- Start inventory task --------------\");\n        jobContext.setStatus(JobStatus.EXECUTE_INVENTORY_TASK);\n        ExecuteCallback inventoryTaskCallback = createInventoryTaskCallback();\n        for (ScalingTask each : jobContext.getInventoryTasks()) {\n            ScalingContext.getInstance().getInventoryDumperExecuteEngine().submit(each, inventoryTaskCallback);\n        }\n        return false;\n    }\n","date":"2021-02-02 18:17:03","endLine":84,"groupId":"5596","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"executeInventoryTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0f/865d9355d567bee564bd196fe41d78154dd9db.src","preCode":"    private synchronized boolean executeInventoryTask() {\n        if (ScalingTaskUtil.allInventoryTasksFinished(jobContext.getInventoryTasks())) {\n            log.info(\"All inventory tasks finished.\");\n            return true;\n        }\n        log.info(\"-------------- Start inventory task --------------\");\n        jobContext.setStatus(JobStatus.EXECUTE_INVENTORY_TASK);\n        ExecuteCallback inventoryTaskCallback = createInventoryTaskCallback();\n        for (ScalingTask each : jobContext.getInventoryTasks()) {\n            ScalingContext.getInstance().getInventoryDumperExecuteEngine().submit(each, inventoryTaskCallback);\n        }\n        return false;\n    }\n","realPath":"shardingsphere-scaling/shardingsphere-scaling-core/src/main/java/org/apache/shardingsphere/scaling/core/job/schedule/JobScheduler.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"},{"authorDate":"2021-02-02 18:17:03","commitOrder":1,"curCode":"    private synchronized void executeIncrementalTask() {\n        if (JobStatus.EXECUTE_INCREMENTAL_TASK.equals(jobContext.getStatus())) {\n            return;\n        }\n        log.info(\"-------------- Start incremental task --------------\");\n        jobContext.setStatus(JobStatus.EXECUTE_INCREMENTAL_TASK);\n        ExecuteCallback incrementalTaskCallback = createIncrementalTaskCallback();\n        for (ScalingTask each : jobContext.getIncrementalTasks()) {\n            ScalingContext.getInstance().getIncrementalDumperExecuteEngine().submit(each, incrementalTaskCallback);\n        }\n    }\n","date":"2021-02-02 18:17:03","endLine":116,"groupId":"5596","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"executeIncrementalTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0f/865d9355d567bee564bd196fe41d78154dd9db.src","preCode":"    private synchronized void executeIncrementalTask() {\n        if (JobStatus.EXECUTE_INCREMENTAL_TASK.equals(jobContext.getStatus())) {\n            return;\n        }\n        log.info(\"-------------- Start incremental task --------------\");\n        jobContext.setStatus(JobStatus.EXECUTE_INCREMENTAL_TASK);\n        ExecuteCallback incrementalTaskCallback = createIncrementalTaskCallback();\n        for (ScalingTask each : jobContext.getIncrementalTasks()) {\n            ScalingContext.getInstance().getIncrementalDumperExecuteEngine().submit(each, incrementalTaskCallback);\n        }\n    }\n","realPath":"shardingsphere-scaling/shardingsphere-scaling-core/src/main/java/org/apache/shardingsphere/scaling/core/job/schedule/JobScheduler.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"}],"commitId":"36b8ad9eff5b10802c5e751a0159f3d80c3d5a93","commitMessage":"@@@Optimize scaling package (#9272)\n\n* move package schedule to job\n\n* rename ScalingTaskScheduler to JobScheduler\n\n* remove useless function\n\n* merge package metadata into datasource\n\n* create internal package\n\nCo-authored-by: qiulu3 <Lucas209910>","date":"2021-02-02 18:17:03","modifiedFileCount":"59","status":"B","submitter":"?? Lucas"},{"authorTime":"2021-02-06 00:37:52","codes":[{"authorDate":"2021-02-02 18:17:03","commitOrder":2,"curCode":"    private synchronized boolean executeInventoryTask() {\n        if (ScalingTaskUtil.allInventoryTasksFinished(jobContext.getInventoryTasks())) {\n            log.info(\"All inventory tasks finished.\");\n            return true;\n        }\n        log.info(\"-------------- Start inventory task --------------\");\n        jobContext.setStatus(JobStatus.EXECUTE_INVENTORY_TASK);\n        ExecuteCallback inventoryTaskCallback = createInventoryTaskCallback();\n        for (ScalingTask each : jobContext.getInventoryTasks()) {\n            ScalingContext.getInstance().getInventoryDumperExecuteEngine().submit(each, inventoryTaskCallback);\n        }\n        return false;\n    }\n","date":"2021-02-02 18:17:03","endLine":84,"groupId":"102003","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"executeInventoryTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0f/865d9355d567bee564bd196fe41d78154dd9db.src","preCode":"    private synchronized boolean executeInventoryTask() {\n        if (ScalingTaskUtil.allInventoryTasksFinished(jobContext.getInventoryTasks())) {\n            log.info(\"All inventory tasks finished.\");\n            return true;\n        }\n        log.info(\"-------------- Start inventory task --------------\");\n        jobContext.setStatus(JobStatus.EXECUTE_INVENTORY_TASK);\n        ExecuteCallback inventoryTaskCallback = createInventoryTaskCallback();\n        for (ScalingTask each : jobContext.getInventoryTasks()) {\n            ScalingContext.getInstance().getInventoryDumperExecuteEngine().submit(each, inventoryTaskCallback);\n        }\n        return false;\n    }\n","realPath":"shardingsphere-scaling/shardingsphere-scaling-core/src/main/java/org/apache/shardingsphere/scaling/core/job/schedule/JobScheduler.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"},{"authorDate":"2021-02-06 00:37:52","commitOrder":2,"curCode":"    private synchronized void executeIncrementalTask() {\n        if (JobStatus.EXECUTE_INCREMENTAL_TASK == jobContext.getStatus()) {\n            return;\n        }\n        log.info(\"-------------- Start incremental task --------------\");\n        jobContext.setStatus(JobStatus.EXECUTE_INCREMENTAL_TASK);\n        ExecuteCallback incrementalTaskCallback = createIncrementalTaskCallback();\n        for (ScalingTask each : jobContext.getIncrementalTasks()) {\n            ScalingContext.getInstance().getIncrementalDumperExecuteEngine().submit(each, incrementalTaskCallback);\n        }\n    }\n","date":"2021-02-06 00:37:52","endLine":116,"groupId":"102003","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"executeIncrementalTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0d/d86c80e1ed4266c3c7870a2acf17cc0f3a58bc.src","preCode":"    private synchronized void executeIncrementalTask() {\n        if (JobStatus.EXECUTE_INCREMENTAL_TASK.equals(jobContext.getStatus())) {\n            return;\n        }\n        log.info(\"-------------- Start incremental task --------------\");\n        jobContext.setStatus(JobStatus.EXECUTE_INCREMENTAL_TASK);\n        ExecuteCallback incrementalTaskCallback = createIncrementalTaskCallback();\n        for (ScalingTask each : jobContext.getIncrementalTasks()) {\n            ScalingContext.getInstance().getIncrementalDumperExecuteEngine().submit(each, incrementalTaskCallback);\n        }\n    }\n","realPath":"shardingsphere-scaling/shardingsphere-scaling-core/src/main/java/org/apache/shardingsphere/scaling/core/job/schedule/JobScheduler.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"9424b261f6a125a06890c706bf56f7dd410423f3","commitMessage":"@@@For code style (#9355)\n\n* Remove useless codes\n\n* For code style\n\n* For code style\n\n* For code style","date":"2021-02-06 00:37:52","modifiedFileCount":"77","status":"M","submitter":"Liang Zhang"}]
