[{"authorTime":"2020-05-16 19:36:14","codes":[{"authorDate":"2020-05-16 19:36:14","commitOrder":1,"curCode":"    public void assertGetDatabaseProductNameWhenDataBaseProductNameDifferent() throws SQLException {\n        DataSource dataSource1 = mockDataSource(DatabaseTypes.getActualDatabaseType(\"MySQL\"));\n        DataSource dataSource2 = mockDataSource(DatabaseTypes.getActualDatabaseType(\"H2\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds1\", dataSource1);\n        dataSourceMap.put(\"ds2\", dataSource2);\n        assertDatabaseProductName(dataSourceMap, dataSource1.getConnection(), dataSource2.getConnection());\n    }\n","date":"2020-05-16 19:36:14","endLine":71,"groupId":"13660","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertGetDatabaseProductNameWhenDataBaseProductNameDifferent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a9/41f9c3f2ca7b65881be2678173328fd43d627b.src","preCode":"    public void assertGetDatabaseProductNameWhenDataBaseProductNameDifferent() throws SQLException {\n        DataSource dataSource1 = mockDataSource(DatabaseTypes.getActualDatabaseType(\"MySQL\"));\n        DataSource dataSource2 = mockDataSource(DatabaseTypes.getActualDatabaseType(\"H2\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds1\", dataSource1);\n        dataSourceMap.put(\"ds2\", dataSource2);\n        assertDatabaseProductName(dataSourceMap, dataSource1.getConnection(), dataSource2.getConnection());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/datasource/ShardingSphereDataSourceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"},{"authorDate":"2020-05-16 19:36:14","commitOrder":1,"curCode":"    public void assertGetDatabaseProductName() throws SQLException {\n        DataSource dataSource1 = mockDataSource(DatabaseTypes.getActualDatabaseType(\"H2\"));\n        DataSource dataSource2 = mockDataSource(DatabaseTypes.getActualDatabaseType(\"H2\"));\n        DataSource dataSource3 = mockDataSource(DatabaseTypes.getActualDatabaseType(\"H2\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(3, 1);\n        dataSourceMap.put(\"ds1\", dataSource1);\n        dataSourceMap.put(\"ds2\", dataSource2);\n        dataSourceMap.put(\"ds3\", dataSource3);\n        assertDatabaseProductName(dataSourceMap, dataSource1.getConnection(), dataSource2.getConnection(), dataSource3.getConnection());\n    }\n","date":"2020-05-16 19:36:14","endLine":83,"groupId":"1171","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertGetDatabaseProductName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a9/41f9c3f2ca7b65881be2678173328fd43d627b.src","preCode":"    public void assertGetDatabaseProductName() throws SQLException {\n        DataSource dataSource1 = mockDataSource(DatabaseTypes.getActualDatabaseType(\"H2\"));\n        DataSource dataSource2 = mockDataSource(DatabaseTypes.getActualDatabaseType(\"H2\"));\n        DataSource dataSource3 = mockDataSource(DatabaseTypes.getActualDatabaseType(\"H2\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(3, 1);\n        dataSourceMap.put(\"ds1\", dataSource1);\n        dataSourceMap.put(\"ds2\", dataSource2);\n        dataSourceMap.put(\"ds3\", dataSource3);\n        assertDatabaseProductName(dataSourceMap, dataSource1.getConnection(), dataSource2.getConnection(), dataSource3.getConnection());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/datasource/ShardingSphereDataSourceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"468e4540f107bacea98e9785b7312b2e5bad0c7e","commitMessage":"@@@Rename sharding-jdbc to shardingsphere-jdbc (#5641)\n\n* Rename sharding-jdbc to shardingsphere-jdbc\n\n* rename org.apache.shardingsphere.shardingjdbc to org.apache.shardingsphere.driver\n\n* rename org.apache.shardingsphere.shardingjdbc to org.apache.shardingsphere.driver","date":"2020-05-16 19:36:14","modifiedFileCount":"32","status":"B","submitter":"Liang Zhang"},{"authorTime":"2020-10-18 18:03:07","codes":[{"authorDate":"2020-10-18 18:03:07","commitOrder":2,"curCode":"    public void assertGetDatabaseProductNameWhenDataBaseProductNameDifferent() throws SQLException {\n        DataSource dataSource1 = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        DataSource dataSource2 = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"H2\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds1\", dataSource1);\n        dataSourceMap.put(\"ds2\", dataSource2);\n        assertDatabaseProductName(dataSourceMap, dataSource1.getConnection(), dataSource2.getConnection());\n    }\n","date":"2020-10-18 18:03:07","endLine":72,"groupId":"101111","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertGetDatabaseProductNameWhenDataBaseProductNameDifferent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1f/484dc00b91350944ea5c77d088894fb2800e4b.src","preCode":"    public void assertGetDatabaseProductNameWhenDataBaseProductNameDifferent() throws SQLException {\n        DataSource dataSource1 = mockDataSource(DatabaseTypes.getActualDatabaseType(\"MySQL\"));\n        DataSource dataSource2 = mockDataSource(DatabaseTypes.getActualDatabaseType(\"H2\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds1\", dataSource1);\n        dataSourceMap.put(\"ds2\", dataSource2);\n        assertDatabaseProductName(dataSourceMap, dataSource1.getConnection(), dataSource2.getConnection());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/datasource/ShardingSphereDataSourceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2020-10-18 18:03:07","commitOrder":2,"curCode":"    public void assertGetDatabaseProductName() throws SQLException {\n        DataSource dataSource1 = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"H2\"));\n        DataSource dataSource2 = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"H2\"));\n        DataSource dataSource3 = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"H2\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(3, 1);\n        dataSourceMap.put(\"ds1\", dataSource1);\n        dataSourceMap.put(\"ds2\", dataSource2);\n        dataSourceMap.put(\"ds3\", dataSource3);\n        assertDatabaseProductName(dataSourceMap, dataSource1.getConnection(), dataSource2.getConnection(), dataSource3.getConnection());\n    }\n","date":"2020-10-18 18:03:07","endLine":84,"groupId":"101111","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertGetDatabaseProductName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1f/484dc00b91350944ea5c77d088894fb2800e4b.src","preCode":"    public void assertGetDatabaseProductName() throws SQLException {\n        DataSource dataSource1 = mockDataSource(DatabaseTypes.getActualDatabaseType(\"H2\"));\n        DataSource dataSource2 = mockDataSource(DatabaseTypes.getActualDatabaseType(\"H2\"));\n        DataSource dataSource3 = mockDataSource(DatabaseTypes.getActualDatabaseType(\"H2\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(3, 1);\n        dataSourceMap.put(\"ds1\", dataSource1);\n        dataSourceMap.put(\"ds2\", dataSource2);\n        dataSourceMap.put(\"ds3\", dataSource3);\n        assertDatabaseProductName(dataSourceMap, dataSource1.getConnection(), dataSource2.getConnection(), dataSource3.getConnection());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/datasource/ShardingSphereDataSourceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"c82441ba41bc9913a997147b70dbcc9dbb47ae60","commitMessage":"@@@Rename DatabaseTypes to DatabaseTypeRegistry (#7834)\n\n","date":"2020-10-18 18:03:07","modifiedFileCount":"76","status":"M","submitter":"Liang Zhang"}]
