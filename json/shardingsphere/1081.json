[{"authorTime":"2021-06-05 16:48:03","codes":[{"authorDate":"2021-06-05 16:48:03","commitOrder":1,"curCode":"    private Optional<EncryptAssignmentToken> generateSQLToken(final String tableName, final AssignmentSegment assignmentSegment) {\n        if (assignmentSegment.getValue() instanceof ParameterMarkerExpressionSegment) {\n            return Optional.of(generateParameterSQLToken(tableName, assignmentSegment));\n        }\n        if (assignmentSegment.getValue() instanceof LiteralExpressionSegment) {\n            return Optional.of(generateLiteralSQLToken(tableName, assignmentSegment));\n        }\n        return Optional.empty();\n    }\n","date":"2021-06-05 16:48:03","endLine":78,"groupId":"6769","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"generateSQLToken","params":"(finalStringtableName@finalAssignmentSegmentassignmentSegment)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ce/9f614430300cb622a6a52131be7464f95992f5.src","preCode":"    private Optional<EncryptAssignmentToken> generateSQLToken(final String tableName, final AssignmentSegment assignmentSegment) {\n        if (assignmentSegment.getValue() instanceof ParameterMarkerExpressionSegment) {\n            return Optional.of(generateParameterSQLToken(tableName, assignmentSegment));\n        }\n        if (assignmentSegment.getValue() instanceof LiteralExpressionSegment) {\n            return Optional.of(generateLiteralSQLToken(tableName, assignmentSegment));\n        }\n        return Optional.empty();\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptInsertOnUpdateTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2021-06-05 16:48:03","commitOrder":1,"curCode":"    private Optional<EncryptAssignmentToken> generateSQLToken(final String tableName, final AssignmentSegment assignmentSegment) {\n        if (assignmentSegment.getValue() instanceof ParameterMarkerExpressionSegment) {\n            return Optional.of(generateParameterSQLToken(tableName, assignmentSegment));\n        }\n        if (assignmentSegment.getValue() instanceof LiteralExpressionSegment) {\n            return Optional.of(generateLiteralSQLToken(tableName, assignmentSegment));\n        }\n        return Optional.empty();\n    }\n","date":"2021-06-05 16:48:03","endLine":84,"groupId":"6769","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"generateSQLToken","params":"(finalStringtableName@finalAssignmentSegmentassignmentSegment)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/55/931b678fe1a3b8c793c12d3187b47fc07f9fcf.src","preCode":"    private Optional<EncryptAssignmentToken> generateSQLToken(final String tableName, final AssignmentSegment assignmentSegment) {\n        if (assignmentSegment.getValue() instanceof ParameterMarkerExpressionSegment) {\n            return Optional.of(generateParameterSQLToken(tableName, assignmentSegment));\n        }\n        if (assignmentSegment.getValue() instanceof LiteralExpressionSegment) {\n            return Optional.of(generateLiteralSQLToken(tableName, assignmentSegment));\n        }\n        return Optional.empty();\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptAssignmentTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"}],"commitId":"78da9d03eb0ae28c28d4d8f4f45f84303a69986e","commitMessage":"@@@Merge encrypt feature to core module (#10667)\n\n* Merge encrypt feature to core module\n\n* Merge encrypt feature to core module\n\n* Merge encrypt feature to core module","date":"2021-06-05 16:48:03","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-09-15 16:43:12","codes":[{"authorDate":"2021-09-15 16:43:12","commitOrder":2,"curCode":"    private Optional<EncryptAssignmentToken> generateSQLToken(final String schemaName, final String tableName, final AssignmentSegment assignmentSegment) {\n        if (assignmentSegment.getValue() instanceof ParameterMarkerExpressionSegment) {\n            return Optional.of(generateParameterSQLToken(tableName, assignmentSegment));\n        }\n        if (assignmentSegment.getValue() instanceof LiteralExpressionSegment) {\n            return Optional.of(generateLiteralSQLToken(schemaName, tableName, assignmentSegment));\n        }\n        return Optional.empty();\n    }\n","date":"2021-09-15 16:43:12","endLine":79,"groupId":"1081","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"generateSQLToken","params":"(finalStringschemaName@finalStringtableName@finalAssignmentSegmentassignmentSegment)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/24/4b27f136b97525a32bdc1de9d2b69e547341a0.src","preCode":"    private Optional<EncryptAssignmentToken> generateSQLToken(final String tableName, final AssignmentSegment assignmentSegment) {\n        if (assignmentSegment.getValue() instanceof ParameterMarkerExpressionSegment) {\n            return Optional.of(generateParameterSQLToken(tableName, assignmentSegment));\n        }\n        if (assignmentSegment.getValue() instanceof LiteralExpressionSegment) {\n            return Optional.of(generateLiteralSQLToken(tableName, assignmentSegment));\n        }\n        return Optional.empty();\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptInsertOnUpdateTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2021-09-15 16:43:12","commitOrder":2,"curCode":"    private Optional<EncryptAssignmentToken> generateSQLToken(final String schemaName, final String tableName, final AssignmentSegment assignmentSegment) {\n        if (assignmentSegment.getValue() instanceof ParameterMarkerExpressionSegment) {\n            return Optional.of(generateParameterSQLToken(tableName, assignmentSegment));\n        }\n        if (assignmentSegment.getValue() instanceof LiteralExpressionSegment) {\n            return Optional.of(generateLiteralSQLToken(schemaName, tableName, assignmentSegment));\n        }\n        return Optional.empty();\n    }\n","date":"2021-09-15 16:43:12","endLine":86,"groupId":"1081","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"generateSQLToken","params":"(finalStringschemaName@finalStringtableName@finalAssignmentSegmentassignmentSegment)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/20/3cc51d5690f552dfa1dfc7d2d8de9da6c2a31c.src","preCode":"    private Optional<EncryptAssignmentToken> generateSQLToken(final String tableName, final AssignmentSegment assignmentSegment) {\n        if (assignmentSegment.getValue() instanceof ParameterMarkerExpressionSegment) {\n            return Optional.of(generateParameterSQLToken(tableName, assignmentSegment));\n        }\n        if (assignmentSegment.getValue() instanceof LiteralExpressionSegment) {\n            return Optional.of(generateLiteralSQLToken(tableName, assignmentSegment));\n        }\n        return Optional.empty();\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptAssignmentTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"619b0a53d69772fe1035482275430e1baa9d7743","commitMessage":"@@@using SchemaAvailable & EncryptPropertiesBuilder to pass schema. owner. table. column value into EncryptAlgorithm (#12372)\n\n* modify .gitignore to ignore .factorypath\n\n* using SchemaAvailable & EncryptPropertiesBuilder to pass schema. owner. table. column value into EncryptAlgorithm\n\n* fix testcase of EncryptAlgorithmMetaDataTest\n\n* refactor on process multiple tables\n\n* revert on process multiple tables\n\n* revert changes on EncryptProjectionTokenGenerator\n\n* remove unused imports\n\n* fix bug: properties override while set props in findEncryptor\n\n* fix bug: properties override while set props in findEncryptor\n\n* remove unused imports\n\n* fix bug: properties override while set props in findEncryptor\n\n* revoke pass schemaName on ddl statement\n\n* using simplify new properties to set schema.  owner.  table and column\n\n* fix to match develop rule\n\n* change method name to simpilify\n\n* implements schemaAvailable from DMLStatementContext\n\n* performance improvement and rat fix\n\n* revert schemaName on create and alter table statement\n\n* remove unused import","date":"2021-09-15 16:43:12","modifiedFileCount":"29","status":"M","submitter":"cheese8"}]
