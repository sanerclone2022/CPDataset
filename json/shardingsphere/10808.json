[{"authorTime":"2020-09-08 14:09:28","codes":[{"authorDate":"2020-09-08 14:09:28","commitOrder":1,"curCode":"    public void assertAuthWhenLoginFailure() {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ProxyUser proxyUser = new ProxyUser(\"error\", Collections.singleton(\"db1\"));\n        setAuthentication(proxyUser);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(\"localhost\", 3307));\n        when(context.channel()).thenReturn(channel);\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(isA(MySQLErrPacket.class));\n    }\n","date":"2020-09-08 14:09:28","endLine":129,"groupId":"8095","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertAuthWhenLoginFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/46/5b4614397b3461eee56d6725e8605c33ebba62.src","preCode":"    public void assertAuthWhenLoginFailure() {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ProxyUser proxyUser = new ProxyUser(\"error\", Collections.singleton(\"db1\"));\n        setAuthentication(proxyUser);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(\"localhost\", 3307));\n        when(context.channel()).thenReturn(channel);\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(isA(MySQLErrPacket.class));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLFrontendEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"},{"authorDate":"2020-09-08 14:09:28","commitOrder":1,"curCode":"    public void assertErrorMsgWhenLoginFailure() throws UnknownHostException {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ProxyUser proxyUser = new ProxyUser(\"error\", Collections.singleton(\"db1\"));\n        setAuthentication(proxyUser);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(context.channel()).thenReturn(channel);\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(InetAddress.getByAddress(new byte[] {(byte) 192, (byte) 168, (byte) 0, (byte) 102}), 3307));\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(argThat((ArgumentMatcher<MySQLErrPacket>) argument -> \"Access denied for user 'root'@'192.168.0.102' (using password: YES)\".equals(argument.getErrorMessage())));\n    }\n","date":"2020-09-08 14:09:28","endLine":145,"groupId":"12680","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertErrorMsgWhenLoginFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/46/5b4614397b3461eee56d6725e8605c33ebba62.src","preCode":"    public void assertErrorMsgWhenLoginFailure() throws UnknownHostException {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ProxyUser proxyUser = new ProxyUser(\"error\", Collections.singleton(\"db1\"));\n        setAuthentication(proxyUser);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(context.channel()).thenReturn(channel);\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(InetAddress.getByAddress(new byte[] {(byte) 192, (byte) 168, (byte) 0, (byte) 102}), 3307));\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(argThat((ArgumentMatcher<MySQLErrPacket>) argument -> \"Access denied for user 'root'@'192.168.0.102' (using password: YES)\".equals(argument.getErrorMessage())));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLFrontendEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"B"}],"commitId":"7d0fa79f5b410280a56d17fed084157153dd0fca","commitMessage":"@@@Rename ${DB}ProtocolFrontendEngine to ${DB}FrontendEngine (#7314)\n\n","date":"2020-09-08 14:09:28","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2020-12-10 18:13:34","codes":[{"authorDate":"2020-12-10 18:13:34","commitOrder":2,"curCode":"    public void assertAuthWhenLoginFailure() {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ShardingSphereUser user = new ShardingSphereUser(\"error\", Collections.singleton(\"db1\"));\n        setAuthentication(user);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(\"localhost\", 3307));\n        when(context.channel()).thenReturn(channel);\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(isA(MySQLErrPacket.class));\n    }\n","date":"2020-12-10 18:13:34","endLine":128,"groupId":"8095","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertAuthWhenLoginFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b4/68b08776e3932a1c52e0f750aa1f20468583cb.src","preCode":"    public void assertAuthWhenLoginFailure() {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ProxyUser proxyUser = new ProxyUser(\"error\", Collections.singleton(\"db1\"));\n        setAuthentication(proxyUser);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(\"localhost\", 3307));\n        when(context.channel()).thenReturn(channel);\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(isA(MySQLErrPacket.class));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLFrontendEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2020-12-10 18:13:34","commitOrder":2,"curCode":"    public void assertErrorMsgWhenLoginFailure() throws UnknownHostException {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ShardingSphereUser user = new ShardingSphereUser(\"error\", Collections.singleton(\"db1\"));\n        setAuthentication(user);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(context.channel()).thenReturn(channel);\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(InetAddress.getByAddress(new byte[] {(byte) 192, (byte) 168, (byte) 0, (byte) 102}), 3307));\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(argThat((ArgumentMatcher<MySQLErrPacket>) argument -> \"Access denied for user 'root'@'192.168.0.102' (using password: YES)\".equals(argument.getErrorMessage())));\n    }\n","date":"2020-12-10 18:13:34","endLine":144,"groupId":"12680","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertErrorMsgWhenLoginFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b4/68b08776e3932a1c52e0f750aa1f20468583cb.src","preCode":"    public void assertErrorMsgWhenLoginFailure() throws UnknownHostException {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ProxyUser proxyUser = new ProxyUser(\"error\", Collections.singleton(\"db1\"));\n        setAuthentication(proxyUser);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(context.channel()).thenReturn(channel);\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(InetAddress.getByAddress(new byte[] {(byte) 192, (byte) 168, (byte) 0, (byte) 102}), 3307));\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(argThat((ArgumentMatcher<MySQLErrPacket>) argument -> \"Access denied for user 'root'@'192.168.0.102' (using password: YES)\".equals(argument.getErrorMessage())));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLFrontendEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"2a8002c9bac5ce9dd96a7cb1b8a3d3a395ba401a","commitMessage":"@@@Rename ShardingSphereUser (#8563)\n\n","date":"2020-12-10 18:13:34","modifiedFileCount":"23","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-01-31 13:58:22","codes":[{"authorDate":"2021-01-31 13:58:22","commitOrder":3,"curCode":"    public void assertAuthWhenLoginFailure() {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ShardingSphereUser user = new ShardingSphereUser(\"error\", \"\", Collections.singleton(\"db1\"));\n        setAuthentication(user);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(\"localhost\", 3307));\n        when(context.channel()).thenReturn(channel);\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(isA(MySQLErrPacket.class));\n    }\n","date":"2021-01-31 13:58:22","endLine":133,"groupId":"8095","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertAuthWhenLoginFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c3/3c49591da9b155e79e41786c48f71e3bc26f91.src","preCode":"    public void assertAuthWhenLoginFailure() {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ShardingSphereUser user = new ShardingSphereUser(\"error\", Collections.singleton(\"db1\"));\n        setAuthentication(user);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(\"localhost\", 3307));\n        when(context.channel()).thenReturn(channel);\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(isA(MySQLErrPacket.class));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLFrontendEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2021-01-31 13:58:22","commitOrder":3,"curCode":"    public void assertErrorMsgWhenLoginFailure() throws UnknownHostException {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ShardingSphereUser user = new ShardingSphereUser(\"error\", \"\", Collections.singleton(\"db1\"));\n        setAuthentication(user);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(context.channel()).thenReturn(channel);\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(InetAddress.getByAddress(new byte[]{(byte) 192, (byte) 168, (byte) 0, (byte) 102}), 3307));\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(argThat((ArgumentMatcher<MySQLErrPacket>) argument -> \"Access denied for user 'root'@'192.168.0.102' (using password: YES)\".equals(argument.getErrorMessage())));\n    }\n","date":"2021-01-31 13:58:22","endLine":149,"groupId":"12680","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertErrorMsgWhenLoginFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c3/3c49591da9b155e79e41786c48f71e3bc26f91.src","preCode":"    public void assertErrorMsgWhenLoginFailure() throws UnknownHostException {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ShardingSphereUser user = new ShardingSphereUser(\"error\", Collections.singleton(\"db1\"));\n        setAuthentication(user);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(context.channel()).thenReturn(channel);\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(InetAddress.getByAddress(new byte[]{(byte) 192, (byte) 168, (byte) 0, (byte) 102}), 3307));\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(argThat((ArgumentMatcher<MySQLErrPacket>) argument -> \"Access denied for user 'root'@'192.168.0.102' (using password: YES)\".equals(argument.getErrorMessage())));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLFrontendEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"}],"commitId":"a21d173551d1f38832312f501cf2e27b7ac2edbe","commitMessage":"@@@New Privileges feature (#9232)\n\n* Privileges function.\n\n* revert\n\n* Remove this class\n\n* fix ut\n\n* fix ut\n\n* fix ut\n\n* bug fix\n\n* bug fix\n\n* bug fix","date":"2021-01-31 13:58:22","modifiedFileCount":"36","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-02-01 14:06:59","codes":[{"authorDate":"2021-02-01 14:06:59","commitOrder":4,"curCode":"    public void assertAuthWhenLoginFailure() {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ShardingSphereUser user = new ShardingSphereUser(\"root\", \"error\", \"\", Collections.singleton(\"db1\"));\n        setAuthentication(user);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(\"localhost\", 3307));\n        when(context.channel()).thenReturn(channel);\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(isA(MySQLErrPacket.class));\n    }\n","date":"2021-02-01 14:06:59","endLine":133,"groupId":"8095","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertAuthWhenLoginFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/82/dac2373deda1bea1157b3cd7774dacf6fbaa43.src","preCode":"    public void assertAuthWhenLoginFailure() {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ShardingSphereUser user = new ShardingSphereUser(\"error\", \"\", Collections.singleton(\"db1\"));\n        setAuthentication(user);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(\"localhost\", 3307));\n        when(context.channel()).thenReturn(channel);\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(isA(MySQLErrPacket.class));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLFrontendEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2021-02-01 14:06:59","commitOrder":4,"curCode":"    public void assertErrorMsgWhenLoginFailure() throws UnknownHostException {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ShardingSphereUser user = new ShardingSphereUser(\"root\", \"error\", \"\", Collections.singleton(\"db1\"));\n        setAuthentication(user);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(context.channel()).thenReturn(channel);\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(InetAddress.getByAddress(new byte[]{(byte) 192, (byte) 168, (byte) 0, (byte) 102}), 3307));\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(argThat((ArgumentMatcher<MySQLErrPacket>) argument -> \"Access denied for user 'root'@'192.168.0.102' (using password: YES)\".equals(argument.getErrorMessage())));\n    }\n","date":"2021-02-01 14:06:59","endLine":149,"groupId":"12680","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertErrorMsgWhenLoginFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/82/dac2373deda1bea1157b3cd7774dacf6fbaa43.src","preCode":"    public void assertErrorMsgWhenLoginFailure() throws UnknownHostException {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ShardingSphereUser user = new ShardingSphereUser(\"error\", \"\", Collections.singleton(\"db1\"));\n        setAuthentication(user);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(context.channel()).thenReturn(channel);\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(InetAddress.getByAddress(new byte[]{(byte) 192, (byte) 168, (byte) 0, (byte) 102}), 3307));\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(argThat((ArgumentMatcher<MySQLErrPacket>) argument -> \"Access denied for user 'root'@'192.168.0.102' (using password: YES)\".equals(argument.getErrorMessage())));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLFrontendEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"}],"commitId":"03727070b7e6a8b8cece126f227c39a721895d50","commitMessage":"@@@Refactor sharding sphere user (#9241)\n\n* fill SchemaPrivilege\n\n* revert\n\n* typo\n\n* typo\n\n* typo\n\n* Refactor AuthenticationYamlSwapper","date":"2021-02-01 14:06:59","modifiedFileCount":"13","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-02-04 00:39:10","codes":[{"authorDate":"2021-02-04 00:39:10","commitOrder":5,"curCode":"    public void assertAuthWhenLoginFailure() {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ShardingSphereUser user = new ShardingSphereUser(\"root\", \"error\", \"\");\n        setAuthentication(user);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(\"localhost\", 3307));\n        when(context.channel()).thenReturn(channel);\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(isA(MySQLErrPacket.class));\n    }\n","date":"2021-02-04 00:39:10","endLine":134,"groupId":"8095","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"assertAuthWhenLoginFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/12/47705cfc5b4cf70d4864c7b020265acc8c4e1c.src","preCode":"    public void assertAuthWhenLoginFailure() {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ShardingSphereUser user = new ShardingSphereUser(\"root\", \"error\", \"\", Collections.singleton(\"db1\"));\n        setAuthentication(user);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(\"localhost\", 3307));\n        when(context.channel()).thenReturn(channel);\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(isA(MySQLErrPacket.class));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLFrontendEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2021-02-04 00:39:10","commitOrder":5,"curCode":"    public void assertErrorMsgWhenLoginFailure() throws UnknownHostException {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ShardingSphereUser user = new ShardingSphereUser(\"root\", \"error\", \"\");\n        setAuthentication(user);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(context.channel()).thenReturn(channel);\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(InetAddress.getByAddress(new byte[]{(byte) 192, (byte) 168, (byte) 0, (byte) 102}), 3307));\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(argThat((ArgumentMatcher<MySQLErrPacket>) argument -> \"Access denied for user 'root'@'192.168.0.102' (using password: YES)\".equals(argument.getErrorMessage())));\n    }\n","date":"2021-02-04 00:39:10","endLine":150,"groupId":"12680","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"assertErrorMsgWhenLoginFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/12/47705cfc5b4cf70d4864c7b020265acc8c4e1c.src","preCode":"    public void assertErrorMsgWhenLoginFailure() throws UnknownHostException {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ShardingSphereUser user = new ShardingSphereUser(\"root\", \"error\", \"\", Collections.singleton(\"db1\"));\n        setAuthentication(user);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(context.channel()).thenReturn(channel);\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(InetAddress.getByAddress(new byte[]{(byte) 192, (byte) 168, (byte) 0, (byte) 102}), 3307));\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(argThat((ArgumentMatcher<MySQLErrPacket>) argument -> \"Access denied for user 'root'@'192.168.0.102' (using password: YES)\".equals(argument.getErrorMessage())));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLFrontendEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"9d537bac95c5015f771d074f0d6387149c84eefc","commitMessage":"@@@Delete authorizedSchemas configuration (#9300)\n\n","date":"2021-02-04 00:39:10","modifiedFileCount":"26","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-04-05 22:26:23","codes":[{"authorDate":"2021-04-05 22:26:23","commitOrder":6,"curCode":"    public void assertAuthWhenLoginFailure() {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        initProxyContext(new ShardingSphereUser(\"root\", \"error\", \"\"));\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(\"localhost\", 3307));\n        when(context.channel()).thenReturn(channel);\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(isA(MySQLErrPacket.class));\n    }\n","date":"2021-04-05 22:26:23","endLine":131,"groupId":"8095","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"assertAuthWhenLoginFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/19/86a719293b75715983f9d112ceac824a6fd508.src","preCode":"    public void assertAuthWhenLoginFailure() {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ShardingSphereUser user = new ShardingSphereUser(\"root\", \"error\", \"\");\n        setAuthentication(user);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(\"localhost\", 3307));\n        when(context.channel()).thenReturn(channel);\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(isA(MySQLErrPacket.class));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLFrontendEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2021-04-05 22:26:23","commitOrder":6,"curCode":"    public void assertErrorMsgWhenLoginFailure() throws UnknownHostException {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        initProxyContext(new ShardingSphereUser(\"root\", \"error\", \"\"));\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(context.channel()).thenReturn(channel);\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(InetAddress.getByAddress(new byte[]{(byte) 192, (byte) 168, (byte) 0, (byte) 102}), 3307));\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(argThat((ArgumentMatcher<MySQLErrPacket>) argument -> \"Access denied for user 'root'@'192.168.0.102' (using password: YES)\".equals(argument.getErrorMessage())));\n    }\n","date":"2021-04-05 22:26:23","endLine":146,"groupId":"12680","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"assertErrorMsgWhenLoginFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/19/86a719293b75715983f9d112ceac824a6fd508.src","preCode":"    public void assertErrorMsgWhenLoginFailure() throws UnknownHostException {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        ShardingSphereUser user = new ShardingSphereUser(\"root\", \"error\", \"\");\n        setAuthentication(user);\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(context.channel()).thenReturn(channel);\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(InetAddress.getByAddress(new byte[]{(byte) 192, (byte) 168, (byte) 0, (byte) 102}), 3307));\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(argThat((ArgumentMatcher<MySQLErrPacket>) argument -> \"Access denied for user 'root'@'192.168.0.102' (using password: YES)\".equals(argument.getErrorMessage())));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLFrontendEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"dff26ac5dc7dab8fc3ad06d8cd106b26c3c022f6","commitMessage":"@@@Move AuthorityChecker to shardingsphere-authority-common module (#9941)\n\n* Move AuthorityChecker to shardingsphere-authority-common module\n\n* Refactor AuthorityChecker\n\n* Refactor SQLCheckEngine\n\n* Fix test cases","date":"2021-04-05 22:26:23","modifiedFileCount":"13","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-04-12 18:54:17","codes":[{"authorDate":"2021-04-12 18:54:17","commitOrder":7,"curCode":"    public void assertAuthWhenLoginFailure() {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        initProxyContext(new ShardingSphereUser(\"root\", \"error\", \"\"));\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(\"localhost\", 3307));\n        when(context.channel()).thenReturn(channel);\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthenticationEngine().authenticate(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(isA(MySQLErrPacket.class));\n    }\n","date":"2021-04-12 18:54:17","endLine":131,"groupId":"10808","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"assertAuthWhenLoginFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9e/f9a79e98a28183d9abcbf6ded3ae99b9cde38f.src","preCode":"    public void assertAuthWhenLoginFailure() {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        initProxyContext(new ShardingSphereUser(\"root\", \"error\", \"\"));\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(\"localhost\", 3307));\n        when(context.channel()).thenReturn(channel);\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(isA(MySQLErrPacket.class));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLFrontendEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2021-04-12 18:54:17","commitOrder":7,"curCode":"    public void assertErrorMsgWhenLoginFailure() throws UnknownHostException {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        initProxyContext(new ShardingSphereUser(\"root\", \"error\", \"\"));\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(context.channel()).thenReturn(channel);\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(InetAddress.getByAddress(new byte[]{(byte) 192, (byte) 168, (byte) 0, (byte) 102}), 3307));\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthenticationEngine().authenticate(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(argThat((ArgumentMatcher<MySQLErrPacket>) argument -> \"Access denied for user 'root'@'192.168.0.102' (using password: YES)\".equals(argument.getErrorMessage())));\n    }\n","date":"2021-04-12 18:54:17","endLine":146,"groupId":"10808","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"assertErrorMsgWhenLoginFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9e/f9a79e98a28183d9abcbf6ded3ae99b9cde38f.src","preCode":"    public void assertErrorMsgWhenLoginFailure() throws UnknownHostException {\n        setConnectionPhase(MySQLConnectionPhase.AUTH_PHASE_FAST_PATH);\n        initProxyContext(new ShardingSphereUser(\"root\", \"error\", \"\"));\n        when(payload.readStringNul()).thenReturn(\"root\");\n        when(payload.readStringNulByBytes()).thenReturn(\"root\".getBytes());\n        when(context.channel()).thenReturn(channel);\n        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(InetAddress.getByAddress(new byte[]{(byte) 192, (byte) 168, (byte) 0, (byte) 102}), 3307));\n        AuthenticationResult actual = mysqlFrontendEngine.getAuthEngine().auth(context, payload);\n        assertThat(actual.getUsername(), is(\"root\"));\n        assertNull(actual.getDatabase());\n        assertTrue(actual.isFinished());\n        verify(context).writeAndFlush(argThat((ArgumentMatcher<MySQLErrPacket>) argument -> \"Access denied for user 'root'@'192.168.0.102' (using password: YES)\".equals(argument.getErrorMessage())));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLFrontendEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"20af443ee6670aac77a9a3fcb1ee9dbc1c3c28df","commitMessage":"@@@Rename auth to authentication or authenticated for meaningful and clear reason (#10050)\n\n","date":"2021-04-12 18:54:17","modifiedFileCount":"17","status":"M","submitter":"Liang Zhang"}]
