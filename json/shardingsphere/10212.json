[{"authorTime":"2021-07-03 15:12:51","codes":[{"authorDate":"2021-07-03 01:31:24","commitOrder":2,"curCode":"    public void assertGetRowData() {\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getRuleMetaData().getConfigurations()).thenReturn(Collections.singleton(getRuleConfiguration()));\n        RQLResultSet resultSet = new EncryptRuleQueryResultSet();\n        resultSet.init(metaData, mock(ShowEncryptRulesStatement.class));\n        Collection<Object> actual = resultSet.getRowData();\n        assertThat(actual.size(), is(6));\n        assertTrue(actual.contains(\"t_encrypt\"));\n        assertTrue(actual.contains(\"user_id\"));\n        assertTrue(actual.contains(\"user_cipher\"));\n        assertTrue(actual.contains(\"user_plain\"));\n        assertTrue(actual.contains(\"md5\"));\n    }\n","date":"2021-07-03 01:31:24","endLine":58,"groupId":"3712","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertGetRowData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/42/94887a0e9d36260f0ea703fcf5d67075d31f3d.src","preCode":"    public void assertGetRowData() {\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getRuleMetaData().getConfigurations()).thenReturn(Collections.singleton(getRuleConfiguration()));\n        RQLResultSet resultSet = new EncryptRuleQueryResultSet();\n        resultSet.init(metaData, mock(ShowEncryptRulesStatement.class));\n        Collection<Object> actual = resultSet.getRowData();\n        assertThat(actual.size(), is(6));\n        assertTrue(actual.contains(\"t_encrypt\"));\n        assertTrue(actual.contains(\"user_id\"));\n        assertTrue(actual.contains(\"user_cipher\"));\n        assertTrue(actual.contains(\"user_plain\"));\n        assertTrue(actual.contains(\"md5\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-distsql/shardingsphere-encrypt-distsql-handler/src/test/java/org/apache/shardingsphere/encrypt/distsql/handler/query/EncryptRuleQueryResultSetTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"NB"},{"authorDate":"2021-07-03 15:12:51","commitOrder":2,"curCode":"    public void assertGetRowData() {\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getRuleMetaData().getConfigurations()).thenReturn(Collections.singleton(createRuleConfiguration()));\n        ReadwriteSplittingRuleQueryResultSet resultSet = new ReadwriteSplittingRuleQueryResultSet();\n        resultSet.init(metaData, mock(ShowReadwriteSplittingRulesStatement.class));\n        Collection<Object> actual = resultSet.getRowData();\n        assertThat(actual.size(), is(6));\n        assertTrue(actual.contains(\"pr_ds\"));\n        assertTrue(actual.contains(\"ms_group\"));\n        assertTrue(actual.contains(\"ds_primary\"));\n        assertTrue(actual.contains(\"ds_slave_0,ds_slave_1\"));\n        assertTrue(actual.contains(\"random\"));\n        assertTrue(actual.contains(\"read_weight=2:1\"));\n    }\n","date":"2021-07-03 15:12:51","endLine":58,"groupId":"3712","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertGetRowData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9e/a97822b456740dfa3e8cb3797c69d5590a86dd.src","preCode":"    public void assertGetRowData() {\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getRuleMetaData().getConfigurations()).thenReturn(Collections.singleton(createRuleConfiguration()));\n        ReadwriteSplittingRuleQueryResultSet resultSet = new ReadwriteSplittingRuleQueryResultSet();\n        resultSet.init(metaData, mock(ShowReadwriteSplittingRulesStatement.class));\n        Collection<Object> actual = resultSet.getRowData();\n        assertThat(actual.size(), is(6));\n        assertTrue(actual.contains(\"pr_ds\"));\n        assertTrue(actual.contains(\"ms_group\"));\n        assertTrue(actual.contains(\"ds_primary\"));\n        assertTrue(actual.contains(\"ds_slave_0,ds_slave_1\"));\n        assertTrue(actual.contains(\"random\"));\n        assertTrue(actual.contains(\"read_weight=2:1\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-distsql/shardingsphere-readwrite-splitting-distsql-handler/src/test/java/org/apache/shardingsphere/readwritesplitting/distsql/handler/query/ReadwriteSplittingRuleQueryResultSetTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"}],"commitId":"2f7f7f5e0627c094d508f37554ec49c87874bb9e","commitMessage":"@@@Add shardingsphere-readwrite-splitting-distsql-handler module (#11124)\n\n","date":"2021-07-03 15:12:51","modifiedFileCount":"2","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-03 15:12:51","codes":[{"authorDate":"2021-07-06 20:43:56","commitOrder":3,"curCode":"    public void assertGetRowData() {\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getRuleMetaData().getConfigurations()).thenReturn(Collections.singleton(getRuleConfiguration()));\n        DistSQLResultSet resultSet = new EncryptRuleQueryResultSet();\n        resultSet.init(metaData, mock(ShowEncryptRulesStatement.class));\n        Collection<Object> actual = resultSet.getRowData();\n        assertThat(actual.size(), is(6));\n        assertTrue(actual.contains(\"t_encrypt\"));\n        assertTrue(actual.contains(\"user_id\"));\n        assertTrue(actual.contains(\"user_cipher\"));\n        assertTrue(actual.contains(\"user_plain\"));\n        assertTrue(actual.contains(\"md5\"));\n    }\n","date":"2021-07-06 20:43:56","endLine":58,"groupId":"10212","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertGetRowData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/81/17a2233ff20c9557bcac158be83aaef1105d0a.src","preCode":"    public void assertGetRowData() {\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getRuleMetaData().getConfigurations()).thenReturn(Collections.singleton(getRuleConfiguration()));\n        RQLResultSet resultSet = new EncryptRuleQueryResultSet();\n        resultSet.init(metaData, mock(ShowEncryptRulesStatement.class));\n        Collection<Object> actual = resultSet.getRowData();\n        assertThat(actual.size(), is(6));\n        assertTrue(actual.contains(\"t_encrypt\"));\n        assertTrue(actual.contains(\"user_id\"));\n        assertTrue(actual.contains(\"user_cipher\"));\n        assertTrue(actual.contains(\"user_plain\"));\n        assertTrue(actual.contains(\"md5\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-distsql/shardingsphere-encrypt-distsql-handler/src/test/java/org/apache/shardingsphere/encrypt/distsql/handler/query/EncryptRuleQueryResultSetTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2021-07-03 15:12:51","commitOrder":3,"curCode":"    public void assertGetRowData() {\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getRuleMetaData().getConfigurations()).thenReturn(Collections.singleton(createRuleConfiguration()));\n        ReadwriteSplittingRuleQueryResultSet resultSet = new ReadwriteSplittingRuleQueryResultSet();\n        resultSet.init(metaData, mock(ShowReadwriteSplittingRulesStatement.class));\n        Collection<Object> actual = resultSet.getRowData();\n        assertThat(actual.size(), is(6));\n        assertTrue(actual.contains(\"pr_ds\"));\n        assertTrue(actual.contains(\"ms_group\"));\n        assertTrue(actual.contains(\"ds_primary\"));\n        assertTrue(actual.contains(\"ds_slave_0,ds_slave_1\"));\n        assertTrue(actual.contains(\"random\"));\n        assertTrue(actual.contains(\"read_weight=2:1\"));\n    }\n","date":"2021-07-03 15:12:51","endLine":58,"groupId":"10212","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertGetRowData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9e/a97822b456740dfa3e8cb3797c69d5590a86dd.src","preCode":"    public void assertGetRowData() {\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getRuleMetaData().getConfigurations()).thenReturn(Collections.singleton(createRuleConfiguration()));\n        ReadwriteSplittingRuleQueryResultSet resultSet = new ReadwriteSplittingRuleQueryResultSet();\n        resultSet.init(metaData, mock(ShowReadwriteSplittingRulesStatement.class));\n        Collection<Object> actual = resultSet.getRowData();\n        assertThat(actual.size(), is(6));\n        assertTrue(actual.contains(\"pr_ds\"));\n        assertTrue(actual.contains(\"ms_group\"));\n        assertTrue(actual.contains(\"ds_primary\"));\n        assertTrue(actual.contains(\"ds_slave_0,ds_slave_1\"));\n        assertTrue(actual.contains(\"random\"));\n        assertTrue(actual.contains(\"read_weight=2:1\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-distsql/shardingsphere-readwrite-splitting-distsql-handler/src/test/java/org/apache/shardingsphere/readwritesplitting/distsql/handler/query/ReadwriteSplittingRuleQueryResultSetTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"}],"commitId":"b3dfa8782cbddbc87346be8117d8d11694fe1aea","commitMessage":"@@@Rename DistSQLResultSet (#11181)\n\n","date":"2021-07-06 20:43:56","modifiedFileCount":"18","status":"M","submitter":"Liang Zhang"}]
