[{"authorTime":"2021-07-25 15:25:18","codes":[{"authorDate":"2021-07-24 22:50:31","commitOrder":2,"curCode":"    private MetaDataContexts mockMetaDataContexts() {\n        MetaDataContexts result = mock(MetaDataContexts.class, RETURNS_DEEP_STUBS);\n        when(result.getAllSchemaNames()).thenReturn(Collections.singletonList(\"schema\"));\n        when(result.getMetaData(\"schema\").getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        when(result.getMetaData(\"schema\").getResource().getDataSources()).thenReturn(Collections.emptyMap());\n        when(result.getMetaData(\"schema\").getResource().getNotExistedResources(any())).thenReturn(Collections.emptyList());\n        return result;\n    }\n","date":"2021-07-24 22:50:31","endLine":190,"groupId":"13447","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mockMetaDataContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1f/71c7db1540d5d10d4fcb80b01041acdcc82919.src","preCode":"    private MetaDataContexts mockMetaDataContexts() {\n        MetaDataContexts result = mock(MetaDataContexts.class, RETURNS_DEEP_STUBS);\n        when(result.getAllSchemaNames()).thenReturn(Collections.singletonList(\"schema\"));\n        when(result.getMetaData(\"schema\").getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        when(result.getMetaData(\"schema\").getResource().getDataSources()).thenReturn(Collections.emptyMap());\n        when(result.getMetaData(\"schema\").getResource().getNotExistedResources(any())).thenReturn(Collections.emptyList());\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/distsql/DistSQLBackendHandlerFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"NB"},{"authorDate":"2021-07-25 15:25:18","commitOrder":2,"curCode":"    private MetaDataContexts mockMetaDataContexts() {\n        MetaDataContexts result = mock(MetaDataContexts.class, RETURNS_DEEP_STUBS);\n        when(result.getAllSchemaNames()).thenReturn(Collections.singletonList(\"schema\"));\n        when(result.getMetaData(\"schema\").getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        when(result.getMetaData(\"schema\").getResource().getDataSources()).thenReturn(Collections.emptyMap());\n        when(result.getMetaData(\"schema\").getResource().getNotExistedResources(any())).thenReturn(Collections.emptyList());\n        return result;\n    }\n","date":"2021-07-25 15:25:18","endLine":164,"groupId":"13447","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mockMetaDataContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/cf/a353d096bba1b880875ad61ab630fad7d08261.src","preCode":"    private MetaDataContexts mockMetaDataContexts() {\n        MetaDataContexts result = mock(MetaDataContexts.class, RETURNS_DEEP_STUBS);\n        when(result.getAllSchemaNames()).thenReturn(Collections.singletonList(\"schema\"));\n        when(result.getMetaData(\"schema\").getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        when(result.getMetaData(\"schema\").getResource().getDataSources()).thenReturn(Collections.emptyMap());\n        when(result.getMetaData(\"schema\").getResource().getNotExistedResources(any())).thenReturn(Collections.emptyList());\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/DatabaseOperateBackendHandlerFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"B"}],"commitId":"57388a1e456ba1c5ea1114fb5f53c49e38aa562c","commitMessage":"@@@Use direct call to instead of event post on DropDatabaseBackendHandler (#11494)\n\n* Use direct call to instead of event post on DropDatabaseBackendHandler\n\n* Fix test case","date":"2021-07-25 15:25:18","modifiedFileCount":"5","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-15 02:33:31","codes":[{"authorDate":"2021-08-15 02:33:31","commitOrder":3,"curCode":"    private StandardMetaDataContexts mockMetaDataContexts() {\n        StandardMetaDataContexts result = mock(StandardMetaDataContexts.class, RETURNS_DEEP_STUBS);\n        when(result.getAllSchemaNames()).thenReturn(Collections.singletonList(\"schema\"));\n        when(result.getMetaData(\"schema\").getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        when(result.getMetaData(\"schema\").getResource().getDataSources()).thenReturn(Collections.emptyMap());\n        when(result.getMetaData(\"schema\").getResource().getNotExistedResources(any())).thenReturn(Collections.emptyList());\n        return result;\n    }\n","date":"2021-08-15 02:33:31","endLine":195,"groupId":"13447","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mockMetaDataContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4f/70e7a841df1abefcfa361c2b805d6ee20ecd4c.src","preCode":"    private MetaDataContexts mockMetaDataContexts() {\n        MetaDataContexts result = mock(MetaDataContexts.class, RETURNS_DEEP_STUBS);\n        when(result.getAllSchemaNames()).thenReturn(Collections.singletonList(\"schema\"));\n        when(result.getMetaData(\"schema\").getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        when(result.getMetaData(\"schema\").getResource().getDataSources()).thenReturn(Collections.emptyMap());\n        when(result.getMetaData(\"schema\").getResource().getNotExistedResources(any())).thenReturn(Collections.emptyList());\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/distsql/DistSQLBackendHandlerFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2021-08-15 02:33:31","commitOrder":3,"curCode":"    private StandardMetaDataContexts mockMetaDataContexts() {\n        StandardMetaDataContexts result = mock(StandardMetaDataContexts.class, RETURNS_DEEP_STUBS);\n        when(result.getAllSchemaNames()).thenReturn(Collections.singletonList(\"schema\"));\n        when(result.getMetaData(\"schema\").getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        when(result.getMetaData(\"schema\").getResource().getDataSources()).thenReturn(Collections.emptyMap());\n        when(result.getMetaData(\"schema\").getResource().getNotExistedResources(any())).thenReturn(Collections.emptyList());\n        return result;\n    }\n","date":"2021-08-15 02:33:31","endLine":165,"groupId":"13447","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"mockMetaDataContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6d/1c37d149b69cfec549a7e90bc0bcad45c03c39.src","preCode":"    private MetaDataContexts mockMetaDataContexts() {\n        MetaDataContexts result = mock(MetaDataContexts.class, RETURNS_DEEP_STUBS);\n        when(result.getAllSchemaNames()).thenReturn(Collections.singletonList(\"schema\"));\n        when(result.getMetaData(\"schema\").getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        when(result.getMetaData(\"schema\").getResource().getDataSources()).thenReturn(Collections.emptyMap());\n        when(result.getMetaData(\"schema\").getResource().getNotExistedResources(any())).thenReturn(Collections.emptyList());\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/DatabaseOperateBackendHandlerFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"d6e424ba68c64ea1835a42b0f4b0fb7f69c95323","commitMessage":"@@@Add ContextManager (#11822)\n\n* Add ContextManager\n\n* Use ContextManager on GovernanceShardingSphereDataSource\n\n* Use ContextManager on ShardingSphereDataSource\n\n* Use ContextManager on ShardingSphereConnection\n\n* Use ContextManager on ShardingSphereConnection\n\n* Refactor AbstractBaseExecutorTest\n\n* Use ContextManager on proxy\n\n* Fix test case","date":"2021-08-15 02:33:31","modifiedFileCount":"118","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-15 11:55:34","codes":[{"authorDate":"2021-08-15 11:55:34","commitOrder":4,"curCode":"    private MetaDataContexts mockMetaDataContexts() {\n        MetaDataContexts result = mock(MetaDataContexts.class, RETURNS_DEEP_STUBS);\n        when(result.getAllSchemaNames()).thenReturn(Collections.singletonList(\"schema\"));\n        when(result.getMetaData(\"schema\").getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        when(result.getMetaData(\"schema\").getResource().getDataSources()).thenReturn(Collections.emptyMap());\n        when(result.getMetaData(\"schema\").getResource().getNotExistedResources(any())).thenReturn(Collections.emptyList());\n        return result;\n    }\n","date":"2021-08-15 11:55:34","endLine":195,"groupId":"10995","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"mockMetaDataContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f3/c4f06a3c707e334d122dfd5d987958bda2c173.src","preCode":"    private StandardMetaDataContexts mockMetaDataContexts() {\n        StandardMetaDataContexts result = mock(StandardMetaDataContexts.class, RETURNS_DEEP_STUBS);\n        when(result.getAllSchemaNames()).thenReturn(Collections.singletonList(\"schema\"));\n        when(result.getMetaData(\"schema\").getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        when(result.getMetaData(\"schema\").getResource().getDataSources()).thenReturn(Collections.emptyMap());\n        when(result.getMetaData(\"schema\").getResource().getNotExistedResources(any())).thenReturn(Collections.emptyList());\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/distsql/DistSQLBackendHandlerFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2021-08-15 11:55:34","commitOrder":4,"curCode":"    private MetaDataContexts mockMetaDataContexts() {\n        MetaDataContexts result = mock(MetaDataContexts.class, RETURNS_DEEP_STUBS);\n        when(result.getAllSchemaNames()).thenReturn(Collections.singletonList(\"schema\"));\n        when(result.getMetaData(\"schema\").getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        when(result.getMetaData(\"schema\").getResource().getDataSources()).thenReturn(Collections.emptyMap());\n        when(result.getMetaData(\"schema\").getResource().getNotExistedResources(any())).thenReturn(Collections.emptyList());\n        return result;\n    }\n","date":"2021-08-15 11:55:34","endLine":165,"groupId":"10995","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"mockMetaDataContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d1/8b1ea9d3ba9e054f61faf37f83a3dc6458aafe.src","preCode":"    private StandardMetaDataContexts mockMetaDataContexts() {\n        StandardMetaDataContexts result = mock(StandardMetaDataContexts.class, RETURNS_DEEP_STUBS);\n        when(result.getAllSchemaNames()).thenReturn(Collections.singletonList(\"schema\"));\n        when(result.getMetaData(\"schema\").getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        when(result.getMetaData(\"schema\").getResource().getDataSources()).thenReturn(Collections.emptyMap());\n        when(result.getMetaData(\"schema\").getResource().getNotExistedResources(any())).thenReturn(Collections.emptyList());\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/DatabaseOperateBackendHandlerFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"21a22f867f1709d878330ac64794a8a8880a116c","commitMessage":"@@@Merge StandardContexts and Contexts interface (#11826)\n\n","date":"2021-08-15 11:55:34","modifiedFileCount":"53","status":"M","submitter":"Liang Zhang"}]
