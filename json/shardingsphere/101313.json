[{"authorTime":"2020-05-16 14:46:06","codes":[{"authorDate":"2020-05-16 14:46:06","commitOrder":1,"curCode":"    public void assertNewWithPayload() {\n        when(payload.readInt1()).thenReturn(0, MySQLServerInfo.PROTOCOL_VERSION, MySQLServerInfo.CHARSET, 0);\n        when(payload.readStringNul()).thenReturn(MySQLServerInfo.SERVER_VERSION);\n        when(payload.readStringNulByBytes()).thenReturn(part1, part2);\n        when(payload.readInt4()).thenReturn(1000);\n        when(payload.readInt2()).thenReturn(\n                MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsLower(), MySQLStatusFlag.SERVER_STATUS_AUTOCOMMIT.getValue(), MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsUpper());\n        MySQLHandshakePacket actual = new MySQLHandshakePacket(payload);\n        assertThat(actual.getSequenceId(), is(0));\n        assertThat(actual.getServerVersion(), is(MySQLServerInfo.SERVER_VERSION));\n        assertThat(actual.getCapabilityFlagsLower(), is(MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsLower()));\n        assertThat(actual.getConnectionId(), is(1000));\n        assertThat(actual.getCharacterSet(), is(MySQLServerInfo.CHARSET));\n        assertThat(actual.getStatusFlag(), is(MySQLStatusFlag.SERVER_STATUS_AUTOCOMMIT));\n        assertThat(actual.getCapabilityFlagsUpper(), is(MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsUpper()));\n        assertThat(actual.getAuthPluginData().getAuthPluginDataPart1(), is(part1));\n        assertThat(actual.getAuthPluginData().getAuthPluginDataPart2(), is(part2));\n        verify(payload).skipReserved(10);\n    }\n","date":"2020-05-16 14:46:06","endLine":64,"groupId":"14150","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertNewWithPayload","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/cd/c9bbabe94093e6b9d77bb2eabb2427215ae1a1.src","preCode":"    public void assertNewWithPayload() {\n        when(payload.readInt1()).thenReturn(0, MySQLServerInfo.PROTOCOL_VERSION, MySQLServerInfo.CHARSET, 0);\n        when(payload.readStringNul()).thenReturn(MySQLServerInfo.SERVER_VERSION);\n        when(payload.readStringNulByBytes()).thenReturn(part1, part2);\n        when(payload.readInt4()).thenReturn(1000);\n        when(payload.readInt2()).thenReturn(\n                MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsLower(), MySQLStatusFlag.SERVER_STATUS_AUTOCOMMIT.getValue(), MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsUpper());\n        MySQLHandshakePacket actual = new MySQLHandshakePacket(payload);\n        assertThat(actual.getSequenceId(), is(0));\n        assertThat(actual.getServerVersion(), is(MySQLServerInfo.SERVER_VERSION));\n        assertThat(actual.getCapabilityFlagsLower(), is(MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsLower()));\n        assertThat(actual.getConnectionId(), is(1000));\n        assertThat(actual.getCharacterSet(), is(MySQLServerInfo.CHARSET));\n        assertThat(actual.getStatusFlag(), is(MySQLStatusFlag.SERVER_STATUS_AUTOCOMMIT));\n        assertThat(actual.getCapabilityFlagsUpper(), is(MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsUpper()));\n        assertThat(actual.getAuthPluginData().getAuthPluginDataPart1(), is(part1));\n        assertThat(actual.getAuthPluginData().getAuthPluginDataPart2(), is(part2));\n        verify(payload).skipReserved(10);\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/handshake/MySQLHandshakePacketTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2020-05-16 14:46:06","commitOrder":1,"curCode":"    public void assertNewWithClientPluginAuthPayload() {\n        when(payload.readInt1()).thenReturn(0, MySQLServerInfo.PROTOCOL_VERSION, MySQLServerInfo.CHARSET, 0);\n        when(payload.readStringNul()).thenReturn(MySQLServerInfo.SERVER_VERSION, MySQLAuthenticationMethod.SECURE_PASSWORD_AUTHENTICATION.getMethodName());\n        when(payload.readStringNulByBytes()).thenReturn(part1, part2);\n        when(payload.readInt4()).thenReturn(1000);\n        when(payload.readInt2()).thenReturn(\n            MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsLower(), MySQLStatusFlag.SERVER_STATUS_AUTOCOMMIT.getValue(), MySQLCapabilityFlag.CLIENT_PLUGIN_AUTH.getValue() >> 16);\n        MySQLHandshakePacket actual = new MySQLHandshakePacket(payload);\n        assertThat(actual.getSequenceId(), is(0));\n        assertThat(actual.getServerVersion(), is(MySQLServerInfo.SERVER_VERSION));\n        assertThat(actual.getCapabilityFlagsLower(), is(MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsLower()));\n        assertThat(actual.getConnectionId(), is(1000));\n        assertThat(actual.getCharacterSet(), is(MySQLServerInfo.CHARSET));\n        assertThat(actual.getStatusFlag(), is(MySQLStatusFlag.SERVER_STATUS_AUTOCOMMIT));\n        assertThat(actual.getCapabilityFlagsUpper(), is(MySQLCapabilityFlag.CLIENT_PLUGIN_AUTH.getValue() >> 16));\n        assertThat(actual.getAuthPluginData().getAuthPluginDataPart1(), is(part1));\n        assertThat(actual.getAuthPluginData().getAuthPluginDataPart2(), is(part2));\n        verify(payload).skipReserved(10);\n        assertThat(actual.getAuthPluginName(), is(MySQLAuthenticationMethod.SECURE_PASSWORD_AUTHENTICATION.getMethodName()));\n    }\n","date":"2020-05-16 14:46:06","endLine":86,"groupId":"11317","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertNewWithClientPluginAuthPayload","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/cd/c9bbabe94093e6b9d77bb2eabb2427215ae1a1.src","preCode":"    public void assertNewWithClientPluginAuthPayload() {\n        when(payload.readInt1()).thenReturn(0, MySQLServerInfo.PROTOCOL_VERSION, MySQLServerInfo.CHARSET, 0);\n        when(payload.readStringNul()).thenReturn(MySQLServerInfo.SERVER_VERSION, MySQLAuthenticationMethod.SECURE_PASSWORD_AUTHENTICATION.getMethodName());\n        when(payload.readStringNulByBytes()).thenReturn(part1, part2);\n        when(payload.readInt4()).thenReturn(1000);\n        when(payload.readInt2()).thenReturn(\n            MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsLower(), MySQLStatusFlag.SERVER_STATUS_AUTOCOMMIT.getValue(), MySQLCapabilityFlag.CLIENT_PLUGIN_AUTH.getValue() >> 16);\n        MySQLHandshakePacket actual = new MySQLHandshakePacket(payload);\n        assertThat(actual.getSequenceId(), is(0));\n        assertThat(actual.getServerVersion(), is(MySQLServerInfo.SERVER_VERSION));\n        assertThat(actual.getCapabilityFlagsLower(), is(MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsLower()));\n        assertThat(actual.getConnectionId(), is(1000));\n        assertThat(actual.getCharacterSet(), is(MySQLServerInfo.CHARSET));\n        assertThat(actual.getStatusFlag(), is(MySQLStatusFlag.SERVER_STATUS_AUTOCOMMIT));\n        assertThat(actual.getCapabilityFlagsUpper(), is(MySQLCapabilityFlag.CLIENT_PLUGIN_AUTH.getValue() >> 16));\n        assertThat(actual.getAuthPluginData().getAuthPluginDataPart1(), is(part1));\n        assertThat(actual.getAuthPluginData().getAuthPluginDataPart2(), is(part2));\n        verify(payload).skipReserved(10);\n        assertThat(actual.getAuthPluginName(), is(MySQLAuthenticationMethod.SECURE_PASSWORD_AUTHENTICATION.getMethodName()));\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/handshake/MySQLHandshakePacketTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"}],"commitId":"d928165ea4f6ecf2983b2a3a8670ff66ffe63647","commitMessage":"@@@Rename shardingsphere-database-protocol to shardingsphere-db-protocol (#5637)\n\n* rename shardingsphere-database-protocol to shardingsphere-db-protocol\n\n* rename package org.apache.shardingsphere.database to org.apache.shardingsphere.db","date":"2020-05-16 14:46:06","modifiedFileCount":"60","status":"B","submitter":"Liang Zhang"},{"authorTime":"2020-07-06 15:11:20","codes":[{"authorDate":"2020-07-06 15:11:20","commitOrder":2,"curCode":"    public void assertNewWithPayload() {\n        when(payload.readInt1()).thenReturn(0, MySQLServerInfo.PROTOCOL_VERSION, MySQLServerInfo.CHARSET, 0);\n        when(payload.readStringNul()).thenReturn(MySQLServerInfo.getServerVersion());\n        when(payload.readStringNulByBytes()).thenReturn(part1, part2);\n        when(payload.readInt4()).thenReturn(1000);\n        when(payload.readInt2()).thenReturn(\n                MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsLower(), MySQLStatusFlag.SERVER_STATUS_AUTOCOMMIT.getValue(), MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsUpper());\n        MySQLHandshakePacket actual = new MySQLHandshakePacket(payload);\n        assertThat(actual.getSequenceId(), is(0));\n        assertThat(actual.getServerVersion(), is(MySQLServerInfo.getServerVersion()));\n        assertThat(actual.getCapabilityFlagsLower(), is(MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsLower()));\n        assertThat(actual.getConnectionId(), is(1000));\n        assertThat(actual.getCharacterSet(), is(MySQLServerInfo.CHARSET));\n        assertThat(actual.getStatusFlag(), is(MySQLStatusFlag.SERVER_STATUS_AUTOCOMMIT));\n        assertThat(actual.getCapabilityFlagsUpper(), is(MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsUpper()));\n        assertThat(actual.getAuthPluginData().getAuthPluginDataPart1(), is(part1));\n        assertThat(actual.getAuthPluginData().getAuthPluginDataPart2(), is(part2));\n        verify(payload).skipReserved(10);\n    }\n","date":"2020-07-06 15:11:20","endLine":64,"groupId":"101313","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertNewWithPayload","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/70/3571066263f1a3c01b6194d2c052e2c3a0a706.src","preCode":"    public void assertNewWithPayload() {\n        when(payload.readInt1()).thenReturn(0, MySQLServerInfo.PROTOCOL_VERSION, MySQLServerInfo.CHARSET, 0);\n        when(payload.readStringNul()).thenReturn(MySQLServerInfo.SERVER_VERSION);\n        when(payload.readStringNulByBytes()).thenReturn(part1, part2);\n        when(payload.readInt4()).thenReturn(1000);\n        when(payload.readInt2()).thenReturn(\n                MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsLower(), MySQLStatusFlag.SERVER_STATUS_AUTOCOMMIT.getValue(), MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsUpper());\n        MySQLHandshakePacket actual = new MySQLHandshakePacket(payload);\n        assertThat(actual.getSequenceId(), is(0));\n        assertThat(actual.getServerVersion(), is(MySQLServerInfo.SERVER_VERSION));\n        assertThat(actual.getCapabilityFlagsLower(), is(MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsLower()));\n        assertThat(actual.getConnectionId(), is(1000));\n        assertThat(actual.getCharacterSet(), is(MySQLServerInfo.CHARSET));\n        assertThat(actual.getStatusFlag(), is(MySQLStatusFlag.SERVER_STATUS_AUTOCOMMIT));\n        assertThat(actual.getCapabilityFlagsUpper(), is(MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsUpper()));\n        assertThat(actual.getAuthPluginData().getAuthPluginDataPart1(), is(part1));\n        assertThat(actual.getAuthPluginData().getAuthPluginDataPart2(), is(part2));\n        verify(payload).skipReserved(10);\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/handshake/MySQLHandshakePacketTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2020-07-06 15:11:20","commitOrder":2,"curCode":"    public void assertNewWithClientPluginAuthPayload() {\n        when(payload.readInt1()).thenReturn(0, MySQLServerInfo.PROTOCOL_VERSION, MySQLServerInfo.CHARSET, 0);\n        when(payload.readStringNul()).thenReturn(MySQLServerInfo.getServerVersion(), MySQLAuthenticationMethod.SECURE_PASSWORD_AUTHENTICATION.getMethodName());\n        when(payload.readStringNulByBytes()).thenReturn(part1, part2);\n        when(payload.readInt4()).thenReturn(1000);\n        when(payload.readInt2()).thenReturn(\n            MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsLower(), MySQLStatusFlag.SERVER_STATUS_AUTOCOMMIT.getValue(), MySQLCapabilityFlag.CLIENT_PLUGIN_AUTH.getValue() >> 16);\n        MySQLHandshakePacket actual = new MySQLHandshakePacket(payload);\n        assertThat(actual.getSequenceId(), is(0));\n        assertThat(actual.getServerVersion(), is(MySQLServerInfo.getServerVersion()));\n        assertThat(actual.getCapabilityFlagsLower(), is(MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsLower()));\n        assertThat(actual.getConnectionId(), is(1000));\n        assertThat(actual.getCharacterSet(), is(MySQLServerInfo.CHARSET));\n        assertThat(actual.getStatusFlag(), is(MySQLStatusFlag.SERVER_STATUS_AUTOCOMMIT));\n        assertThat(actual.getCapabilityFlagsUpper(), is(MySQLCapabilityFlag.CLIENT_PLUGIN_AUTH.getValue() >> 16));\n        assertThat(actual.getAuthPluginData().getAuthPluginDataPart1(), is(part1));\n        assertThat(actual.getAuthPluginData().getAuthPluginDataPart2(), is(part2));\n        verify(payload).skipReserved(10);\n        assertThat(actual.getAuthPluginName(), is(MySQLAuthenticationMethod.SECURE_PASSWORD_AUTHENTICATION.getMethodName()));\n    }\n","date":"2020-07-06 15:11:20","endLine":86,"groupId":"101313","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertNewWithClientPluginAuthPayload","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/70/3571066263f1a3c01b6194d2c052e2c3a0a706.src","preCode":"    public void assertNewWithClientPluginAuthPayload() {\n        when(payload.readInt1()).thenReturn(0, MySQLServerInfo.PROTOCOL_VERSION, MySQLServerInfo.CHARSET, 0);\n        when(payload.readStringNul()).thenReturn(MySQLServerInfo.SERVER_VERSION, MySQLAuthenticationMethod.SECURE_PASSWORD_AUTHENTICATION.getMethodName());\n        when(payload.readStringNulByBytes()).thenReturn(part1, part2);\n        when(payload.readInt4()).thenReturn(1000);\n        when(payload.readInt2()).thenReturn(\n            MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsLower(), MySQLStatusFlag.SERVER_STATUS_AUTOCOMMIT.getValue(), MySQLCapabilityFlag.CLIENT_PLUGIN_AUTH.getValue() >> 16);\n        MySQLHandshakePacket actual = new MySQLHandshakePacket(payload);\n        assertThat(actual.getSequenceId(), is(0));\n        assertThat(actual.getServerVersion(), is(MySQLServerInfo.SERVER_VERSION));\n        assertThat(actual.getCapabilityFlagsLower(), is(MySQLCapabilityFlag.calculateHandshakeCapabilityFlagsLower()));\n        assertThat(actual.getConnectionId(), is(1000));\n        assertThat(actual.getCharacterSet(), is(MySQLServerInfo.CHARSET));\n        assertThat(actual.getStatusFlag(), is(MySQLStatusFlag.SERVER_STATUS_AUTOCOMMIT));\n        assertThat(actual.getCapabilityFlagsUpper(), is(MySQLCapabilityFlag.CLIENT_PLUGIN_AUTH.getValue() >> 16));\n        assertThat(actual.getAuthPluginData().getAuthPluginDataPart1(), is(part1));\n        assertThat(actual.getAuthPluginData().getAuthPluginDataPart2(), is(part2));\n        verify(payload).skipReserved(10);\n        assertThat(actual.getAuthPluginName(), is(MySQLAuthenticationMethod.SECURE_PASSWORD_AUTHENTICATION.getMethodName()));\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/handshake/MySQLHandshakePacketTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"7809caa085355a81f81544f7101aab42a01d37fa","commitMessage":"@@@Fix 6239 (#6270)\n\n* add usage for proxy startup command\n\n* dynamic set server version when proxy startup\n\n* fix check style\n\n* fix code review suggestions\n\n* fix code review suggestions\n\n* fix code review suggestions","date":"2020-07-06 15:11:20","modifiedFileCount":"5","status":"M","submitter":"xbkaishui"}]
