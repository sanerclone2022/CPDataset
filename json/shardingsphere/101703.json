[{"authorTime":"2020-10-02 00:04:38","codes":[{"authorDate":"2020-10-02 00:04:38","commitOrder":8,"curCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(mock(DataSourcesMetaData.class), buildRuleSchemaMetaData(), mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","date":"2020-10-02 00:04:38","endLine":83,"groupId":"1873","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7c/99a22795a43270154ce8352ce60bb34e61bb54.src","preCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(mock(DataSourcesMetaData.class), buildRuleSchemaMetaData(), mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"MB"},{"authorDate":"2020-10-02 00:04:38","commitOrder":8,"curCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        RuleSchemaMetaData ruleSchemaMetaData = buildRuleSchemaMetaDataWithoutPrimaryKey();\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(mock(DataSourcesMetaData.class), ruleSchemaMetaData, mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","date":"2020-10-02 00:04:38","endLine":99,"groupId":"7273","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7c/99a22795a43270154ce8352ce60bb34e61bb54.src","preCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        RuleSchemaMetaData ruleSchemaMetaData = buildRuleSchemaMetaDataWithoutPrimaryKey();\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(mock(DataSourcesMetaData.class), ruleSchemaMetaData, mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"MB"}],"commitId":"7a4e7ceb2c756ab37f7729457bdc52f402788e15","commitMessage":"@@@Move cachedDatabaseMetaData from RuntimeContext to ShardingSphereMetaData (#7683)\n\n* Move CachedDatabaseMetaData to infra-common module\n\n* Move cachedDatabaseMetaData from RuntimeContext to ShardingSphereMetaData","date":"2020-10-02 00:04:38","modifiedFileCount":"15","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-15 12:48:21","codes":[{"authorDate":"2020-10-15 12:48:21","commitOrder":9,"curCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(mock(DataSourcesMetaData.class), buildLogicSchemaMetaData(), mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","date":"2020-10-15 12:48:21","endLine":83,"groupId":"1873","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6a/e052210f44eb69a7455e66dea88c487c33acac.src","preCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(mock(DataSourcesMetaData.class), buildRuleSchemaMetaData(), mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-10-15 12:48:21","commitOrder":9,"curCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        LogicSchemaMetaData logicSchemaMetaData = buildLogicSchemaMetaDataWithoutPrimaryKey();\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(mock(DataSourcesMetaData.class), logicSchemaMetaData, mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","date":"2020-10-15 12:48:21","endLine":99,"groupId":"7273","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6a/e052210f44eb69a7455e66dea88c487c33acac.src","preCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        RuleSchemaMetaData ruleSchemaMetaData = buildRuleSchemaMetaDataWithoutPrimaryKey();\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(mock(DataSourcesMetaData.class), ruleSchemaMetaData, mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"8cecd8c4d55cff0d47237a725fadbd81e58bfcec","commitMessage":"@@@Rename RuleSchemaMetaData to LogicSchemaMetaData (#7795)\n\n","date":"2020-10-15 12:48:21","modifiedFileCount":"59","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-17 13:57:19","codes":[{"authorDate":"2020-10-17 13:57:19","commitOrder":10,"curCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\n                mock(DataSourcesMetaData.class), buildLogicSchemaMetaData(), mock(TableAddressingMetaData.class), mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","date":"2020-10-17 13:57:19","endLine":85,"groupId":"1873","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6c/2f08a05da1b99877144c219a3883fdcb6110e3.src","preCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(mock(DataSourcesMetaData.class), buildLogicSchemaMetaData(), mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-10-17 13:57:19","commitOrder":10,"curCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        LogicSchemaMetaData logicSchemaMetaData = buildLogicSchemaMetaDataWithoutPrimaryKey();\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(mock(DataSourcesMetaData.class), logicSchemaMetaData, mock(TableAddressingMetaData.class), mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","date":"2020-10-17 13:57:19","endLine":101,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6c/2f08a05da1b99877144c219a3883fdcb6110e3.src","preCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        LogicSchemaMetaData logicSchemaMetaData = buildLogicSchemaMetaDataWithoutPrimaryKey();\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(mock(DataSourcesMetaData.class), logicSchemaMetaData, mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"41176536a49bb112118213c1e1f57135cd56a0a6","commitMessage":"@@@Add TableAddressingMetaData for prepare refactor metadata (#7818)\n\n* Add TableAddressingMetaData\n\n* Add TableAddressingMetaDataDecorator\n\n* Add TableAddressingMetaDataLoader\n\n* Update TableAddressingMetaDataLoader\n\n* Add ShardingTableAddressingMetaDataDecorator\n\n* Add PrimaryReplicaReplicationTableAddressingMetaDataDecorator\n\n* Fix test case","date":"2020-10-17 13:57:19","modifiedFileCount":"14","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-04 15:26:32","codes":[{"authorDate":"2020-11-04 15:26:32","commitOrder":11,"curCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\n                mock(DataSourcesMetaData.class), mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaData(), mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","date":"2020-11-04 15:26:32","endLine":84,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/69/00a7e6064439068cec8217ad9fe58818dd06ee.src","preCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\n                mock(DataSourcesMetaData.class), buildLogicSchemaMetaData(), mock(TableAddressingMetaData.class), mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-11-04 15:26:32","commitOrder":11,"curCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\n                mock(DataSourcesMetaData.class), mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaDataWithoutPrimaryKey(), mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","date":"2020-11-04 15:26:32","endLine":100,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/69/00a7e6064439068cec8217ad9fe58818dd06ee.src","preCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        LogicSchemaMetaData logicSchemaMetaData = buildLogicSchemaMetaDataWithoutPrimaryKey();\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(mock(DataSourcesMetaData.class), logicSchemaMetaData, mock(TableAddressingMetaData.class), mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"a87ef49a5bafc77e2c38da74870870555dcddbfb","commitMessage":"@@@Remove LogicSchemaMetaData.unconfiguredSchemaMetaDataMap (#8023)\n\n* Adjust seq of ShardingSphereMetaData's constructor\n\n* Remove LogicSchemaMetaData.unconfiguredSchemaMetaDataMap\n\n* Remove LogicSchemaMetaData\n\n* Rename LogicSchemaMetaDataLoader\n\n* Add metadata.schema package\n\n* Fix spi\n\n* Rename SchemaMetaDataLoader\n\n* Rename SchemaMetaDataNotifier","date":"2020-11-04 15:26:32","modifiedFileCount":"156","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-04 18:35:25","codes":[{"authorDate":"2020-11-04 18:35:25","commitOrder":12,"curCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereSchema schema = new ShardingSphereSchema(\n                mock(DataSourcesMetaData.class), mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaData(), mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(schema, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","date":"2020-11-04 18:35:25","endLine":84,"groupId":"12914","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/db/ae80318c73a16a41fee945c3deb8f719339be5.src","preCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\n                mock(DataSourcesMetaData.class), mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaData(), mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-11-04 18:35:25","commitOrder":12,"curCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereSchema schema = new ShardingSphereSchema(\n                mock(DataSourcesMetaData.class), mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaDataWithoutPrimaryKey(), mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(schema, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","date":"2020-11-04 18:35:25","endLine":100,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/db/ae80318c73a16a41fee945c3deb8f719339be5.src","preCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\n                mock(DataSourcesMetaData.class), mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaDataWithoutPrimaryKey(), mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"d06c68303f2628c99ac5aa6e4a22d8e73bb07d7d","commitMessage":"@@@Switch class name of ShardingSphereMetaData and ShardingSphereSchema (#8026)\n\n* Remove useless ReplicaQueryTableAddressingMetaDataDecorator\n\n* Switch class name of ShardingSphereMetaData and ShardingSphereSchema","date":"2020-11-04 18:35:25","modifiedFileCount":"223","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-05 14:05:55","codes":[{"authorDate":"2020-11-05 14:05:55","commitOrder":13,"curCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereSchema schema = new ShardingSphereSchema(\n                mock(DataSourcesMetaData.class), mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaData(), mock(CachedDatabaseMetaData.class));\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", Collections.emptyList(), Collections.emptyList(), resource, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","date":"2020-11-05 14:05:55","endLine":90,"groupId":"12628","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/27/ab273dfe0c5df3b573af27829340728bfe0b41.src","preCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereSchema schema = new ShardingSphereSchema(\n                mock(DataSourcesMetaData.class), mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaData(), mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(schema, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-11-05 14:05:55","commitOrder":13,"curCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereSchema schema = new ShardingSphereSchema(\n                mock(DataSourcesMetaData.class), mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaDataWithoutPrimaryKey(), mock(CachedDatabaseMetaData.class));\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", Collections.emptyList(), Collections.emptyList(), resource, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","date":"2020-11-05 14:05:55","endLine":108,"groupId":"12629","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/27/ab273dfe0c5df3b573af27829340728bfe0b41.src","preCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereSchema schema = new ShardingSphereSchema(\n                mock(DataSourcesMetaData.class), mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaDataWithoutPrimaryKey(), mock(CachedDatabaseMetaData.class));\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(schema, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"11b49d2df51c6b1606f483dfdb9efa8e8147ed12","commitMessage":"@@@Add ShardingSphereResource (#8033)\n\n* Add ShardingSphereResource\n\n* Use ShardingSphereResource.dataSourcesMetaData instead of ShardingSphereSchema.dataSourcesMetaData","date":"2020-11-05 14:05:55","modifiedFileCount":"34","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-05 21:44:47","codes":[{"authorDate":"2020-11-05 21:44:47","commitOrder":14,"curCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereSchema schema = new ShardingSphereSchema(\n                mock(DataSourcesMetaData.class), mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaData());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", Collections.emptyList(), Collections.emptyList(), resource, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","date":"2020-11-05 21:44:47","endLine":90,"groupId":"12628","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/59/b56711ef84e668210ae51377f25d791f6f9d3b.src","preCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereSchema schema = new ShardingSphereSchema(\n                mock(DataSourcesMetaData.class), mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaData(), mock(CachedDatabaseMetaData.class));\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", Collections.emptyList(), Collections.emptyList(), resource, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-11-05 21:44:47","commitOrder":14,"curCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereSchema schema = new ShardingSphereSchema(mock(DataSourcesMetaData.class), mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaDataWithoutPrimaryKey());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", Collections.emptyList(), Collections.emptyList(), resource, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","date":"2020-11-05 21:44:47","endLine":107,"groupId":"12629","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/59/b56711ef84e668210ae51377f25d791f6f9d3b.src","preCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereSchema schema = new ShardingSphereSchema(\n                mock(DataSourcesMetaData.class), mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaDataWithoutPrimaryKey(), mock(CachedDatabaseMetaData.class));\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", Collections.emptyList(), Collections.emptyList(), resource, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"37651f3aca8e05042be192ce7a08bbaa31fee6d8","commitMessage":"@@@Remove ShardingSphereSchema.cachedDatabaseMetaData (#8040)\n\n","date":"2020-11-05 21:44:47","modifiedFileCount":"12","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-06 13:20:44","codes":[{"authorDate":"2020-11-06 13:20:44","commitOrder":15,"curCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereSchema schema = new ShardingSphereSchema(mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaData());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", Collections.emptyList(), Collections.emptyList(), resource, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","date":"2020-11-06 13:20:44","endLine":89,"groupId":"12628","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6a/a83fa6140df37edf3589070e3208723c244a72.src","preCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereSchema schema = new ShardingSphereSchema(\n                mock(DataSourcesMetaData.class), mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaData());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", Collections.emptyList(), Collections.emptyList(), resource, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-11-06 13:20:44","commitOrder":15,"curCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereSchema schema = new ShardingSphereSchema(mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaDataWithoutPrimaryKey());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", Collections.emptyList(), Collections.emptyList(), resource, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","date":"2020-11-06 13:20:44","endLine":106,"groupId":"12629","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6a/a83fa6140df37edf3589070e3208723c244a72.src","preCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereSchema schema = new ShardingSphereSchema(mock(DataSourcesMetaData.class), mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaDataWithoutPrimaryKey());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", Collections.emptyList(), Collections.emptyList(), resource, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"3d25a5ee54707126ee4af4903fe463c3c330a03b","commitMessage":"@@@Remove ShardingSphereSchema.dataSourcesMetaData (#8042)\n\n* Refactor ShardingSphereDatabaseMetaData\n\n* Decouple usage of ShardingSphereSchema.dataSourcesMetaData\n\n* Remove ShardingSphereSchema.dataSourcesMetaData","date":"2020-11-06 13:20:44","modifiedFileCount":"15","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-06 18:32:42","codes":[{"authorDate":"2020-11-06 18:32:42","commitOrder":16,"curCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaData());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","date":"2020-11-06 18:32:42","endLine":92,"groupId":"11605","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7c/ecbd7f93f034f997f0b0b7fc98fc62fd066188.src","preCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereSchema schema = new ShardingSphereSchema(mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaData());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", Collections.emptyList(), Collections.emptyList(), resource, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-11-06 18:32:42","commitOrder":16,"curCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaDataWithoutPrimaryKey());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","date":"2020-11-06 18:32:42","endLine":110,"groupId":"11606","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7c/ecbd7f93f034f997f0b0b7fc98fc62fd066188.src","preCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereSchema schema = new ShardingSphereSchema(mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaDataWithoutPrimaryKey());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", Collections.emptyList(), Collections.emptyList(), resource, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"8fe8182627e16ed381175cb2fd2f514ceefdd414","commitMessage":"@@@Add ShardingSphereRuleMetaData (#8054)\n\n* Add ShardingSphereRuleMetaData\n\n* Fix test cases","date":"2020-11-06 18:32:42","modifiedFileCount":"45","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-09 07:16:02","codes":[{"authorDate":"2020-11-09 07:16:02","commitOrder":17,"curCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(buildPhysicalSchemaMetaData());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","date":"2020-11-09 07:16:02","endLine":91,"groupId":"0","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/53/84bc294cbfc9b08ef7aa74b608106c72a9f048.src","preCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaData());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-11-09 07:16:02","commitOrder":17,"curCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(buildPhysicalSchemaMetaDataWithoutPrimaryKey());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","date":"2020-11-09 07:16:02","endLine":109,"groupId":"0","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/53/84bc294cbfc9b08ef7aa74b608106c72a9f048.src","preCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(mock(TableAddressingMetaData.class), buildPhysicalSchemaMetaDataWithoutPrimaryKey());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"cd192e5416649e50bb5cc1cdeb4023e89f83277e","commitMessage":"@@@Move ShardingSphereSchema.tableAddressingMetaData to PhysicalTableMetaData (#8080)\n\n* Add PhysicalTableMetaData.addressingDataSources\n\n* Refactor AllSQLRouteExecutor\n\n* Refactor ShardingDDLStatementValidator\n\n* Refactor ShardingDDLStatementValidator\n\n* Refactor SingleTableRoutingEngine\n\n* Refactor MetaDataRefreshStrategy\n\n* Remove ShardingSphereSchema.tableAddressingMetaData","date":"2020-11-09 07:16:02","modifiedFileCount":"24","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-09 14:26:45","codes":[{"authorDate":"2020-11-09 14:26:45","commitOrder":18,"curCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, buildPhysicalSchemaMetaData());\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","date":"2020-11-09 14:26:45","endLine":88,"groupId":"12914","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f1/c03963a6e9524d71800aaed3df1a4f3dd5a32e.src","preCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(buildPhysicalSchemaMetaData());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2020-11-09 14:26:45","commitOrder":18,"curCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, buildPhysicalSchemaMetaDataWithoutPrimaryKey());\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","date":"2020-11-09 14:26:45","endLine":105,"groupId":"4785","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f1/c03963a6e9524d71800aaed3df1a4f3dd5a32e.src","preCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(buildPhysicalSchemaMetaDataWithoutPrimaryKey());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, schema);\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"9c7b070da8feb0a6c6ba2966c047233ef2d3e7e4","commitMessage":"@@@Use PhysicalSchemaMetaData instead of ShardingSphereSchema (#8087)\n\n","date":"2020-11-09 14:26:45","modifiedFileCount":"67","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-09 17:01:30","codes":[{"authorDate":"2020-11-09 17:01:30","commitOrder":19,"curCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, buildSchema());\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","date":"2020-11-09 17:01:30","endLine":88,"groupId":"4783","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b1/f27f6db57343d251b9276d161da1f92cec3958.src","preCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, buildPhysicalSchemaMetaData());\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2020-11-09 17:01:30","commitOrder":19,"curCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, buildSchemaWithoutPrimaryKey());\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","date":"2020-11-09 17:01:30","endLine":105,"groupId":"4785","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b1/f27f6db57343d251b9276d161da1f92cec3958.src","preCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, buildPhysicalSchemaMetaDataWithoutPrimaryKey());\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"09281f69a6dd01c12dd73dcc6675397062498f90","commitMessage":"@@@Rename PhysicalSchemaMetaData to ShardingSphereSchema (#8094)\n\n* Rename PhysicalSchemaMetaData to ShardingSphereSchema\n\n* Fix checkstyle","date":"2020-11-09 17:01:30","modifiedFileCount":"153","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-25 12:18:14","codes":[{"authorDate":"2020-11-25 12:18:14","commitOrder":20,"curCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, buildSchema());\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n    }\n","date":"2020-11-25 12:18:14","endLine":87,"groupId":"4783","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d6/8711d24b653a9725ba578a43191f92c96f72de.src","preCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, buildSchema());\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(1));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2020-11-25 12:18:14","commitOrder":20,"curCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, buildSchemaWithoutPrimaryKey());\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n    }\n","date":"2020-11-25 12:18:14","endLine":103,"groupId":"4785","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d6/8711d24b653a9725ba578a43191f92c96f72de.src","preCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, buildSchemaWithoutPrimaryKey());\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n        assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(), is(0));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"cfd0a4199904e5a25e7ca8da69595351b56d0dd4","commitMessage":"@@@Refactor the SQL runtime context: (#8327)\n\n1. Add routing mapping attributes to the table\n2. Remove redundant attributes\n3. Move from the generic domain to the RAW domain\n4. The rollback metadata is constructed through the RAW executor.  and is now set to the RAW SQL runtime context by extending the route","date":"2020-11-25 12:18:14","modifiedFileCount":"9","status":"M","submitter":"AlphaPo"},{"authorTime":"2020-12-12 23:20:10","codes":[{"authorDate":"2020-12-12 23:20:10","commitOrder":21,"curCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class), mock(DatabaseType.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, buildSchema());\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n    }\n","date":"2020-12-12 23:20:10","endLine":88,"groupId":"101703","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c5/82abf64b4ea59b72221f7578da06dedfae0660.src","preCode":"    public void assertBuildRouteSQLRewriteResult() {\n        RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\", \"actualName1\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\", Collections.singletonList(\"parameter1\"));\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName1\", \"actualName1\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit1, sqlRewriteUnit1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, buildSchema());\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\", new SQLUnit(\"sql1\", Collections.singletonList(\"parameter1\")));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(2, 1);\n        expected.add(expectedUnit1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-12-12 23:20:10","commitOrder":21,"curCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class), mock(DatabaseType.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, buildSchemaWithoutPrimaryKey());\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n    }\n","date":"2020-12-12 23:20:10","endLine":104,"groupId":"101703","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c5/82abf64b4ea59b72221f7578da06dedfae0660.src","preCode":"    public void assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta() {\n        RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\", \"actualName2\"), Collections.singletonList(new RouteMapper(\"logicName2\", \"actualName2\")));\n        SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\", Collections.singletonList(\"parameter2\"));\n        Map<RouteUnit, SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2, 1);\n        sqlRewriteUnits.put(routeUnit2, sqlRewriteUnit2);\n        ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(), mock(DataSourcesMetaData.class), mock(CachedDatabaseMetaData.class));\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\", resource, ruleMetaData, buildSchemaWithoutPrimaryKey());\n        Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData, new RouteSQLRewriteResult(sqlRewriteUnits), mock(SQLStatementContext.class));\n        ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\", new SQLUnit(\"sql2\", Collections.singletonList(\"parameter2\")));\n        Collection<ExecutionUnit> expected = new LinkedHashSet<>(1, 1);\n        expected.add(expectedUnit2);\n        assertThat(actual, is(expected));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"efdd25f4b72a85c3040d089ff58f418141cc72b2","commitMessage":"@@@Split backend database type from same one to multiple with each schema (#8596)\n\n* Use database type map instead of single database type\n\n* Add MetaDataContexts.getAllSchemas\n\n* Remove MetaDataContexts.getDatabaseTypes()\n\n* Add ShardingSphereResource.databaseType\n\n* Remove MetaDataContexts.getDatabaseType()\n\n* Remove StandardMetaDataContexts.databaseTypes\n\n* Use MetaDataContexts.getDefaultMetaData\n\n* Use MetaDataContexts.getDefaultMetaData\n\n* Add MetaDataContexts.getMetaData(String schemaName)\n\n* Remove MetaDataContexts.getMetaDataMap()\n\n* refactor MetaDataContextsBuilder","date":"2020-12-12 23:20:10","modifiedFileCount":"59","status":"M","submitter":"Liang Zhang"}]
