[{"authorTime":"2020-05-16 19:36:14","codes":[{"authorDate":"2020-05-16 19:36:14","commitOrder":1,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups(\n                    connection.getRuntimeContext().getProperties().<Integer>getValue(ConfigurationPropertyKey.MAX_CONNECTIONS_SIZE_PER_QUERY));\n            cacheStatements(inputGroups);\n            return statementExecutor.executeUpdate(inputGroups, executionContext.getSqlStatementContext(), columnNames);\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2020-05-16 19:36:14","endLine":179,"groupId":"2662","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/14/2afd7467df56faab40fd96f3fe3c239d732611.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups(\n                    connection.getRuntimeContext().getProperties().<Integer>getValue(ConfigurationPropertyKey.MAX_CONNECTIONS_SIZE_PER_QUERY));\n            cacheStatements(inputGroups);\n            return statementExecutor.executeUpdate(inputGroups, executionContext.getSqlStatementContext(), columnNames);\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"B"},{"authorDate":"2020-05-16 19:36:14","commitOrder":1,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            PreparedStatementExecuteGroupEngine executeGroupEngine = new PreparedStatementExecuteGroupEngine(\n                    connection.getRuntimeContext().getProperties().<Integer>getValue(ConfigurationPropertyKey.MAX_CONNECTIONS_SIZE_PER_QUERY), getConnection().getRuntimeContext().getRules());\n            Collection<InputGroup<StatementExecuteUnit>> inputGroups = executeGroupEngine.generate(executionContext.getExecutionUnits(), connection, statementOption);\n            cacheStatements(inputGroups);\n            reply();\n            return preparedStatementExecutor.execute(inputGroups, executionContext.getSqlStatementContext());\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2020-05-16 19:36:14","endLine":185,"groupId":"11895","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/24/e493a78233b6181090ff615c62656011d74611.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            PreparedStatementExecuteGroupEngine executeGroupEngine = new PreparedStatementExecuteGroupEngine(\n                    connection.getRuntimeContext().getProperties().<Integer>getValue(ConfigurationPropertyKey.MAX_CONNECTIONS_SIZE_PER_QUERY), getConnection().getRuntimeContext().getRules());\n            Collection<InputGroup<StatementExecuteUnit>> inputGroups = executeGroupEngine.generate(executionContext.getExecutionUnits(), connection, statementOption);\n            cacheStatements(inputGroups);\n            reply();\n            return preparedStatementExecutor.execute(inputGroups, executionContext.getSqlStatementContext());\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"B"}],"commitId":"468e4540f107bacea98e9785b7312b2e5bad0c7e","commitMessage":"@@@Rename sharding-jdbc to shardingsphere-jdbc (#5641)\n\n* Rename sharding-jdbc to shardingsphere-jdbc\n\n* rename org.apache.shardingsphere.shardingjdbc to org.apache.shardingsphere.driver\n\n* rename org.apache.shardingsphere.shardingjdbc to org.apache.shardingsphere.driver","date":"2020-05-16 19:36:14","modifiedFileCount":"32","status":"B","submitter":"Liang Zhang"},{"authorTime":"2020-05-19 16:48:33","codes":[{"authorDate":"2020-05-19 16:48:33","commitOrder":2,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups(\n                    schemaContexts.getProperties().<Integer>getValue(ConfigurationPropertyKey.MAX_CONNECTIONS_SIZE_PER_QUERY));\n            cacheStatements(inputGroups);\n            return statementExecutor.executeUpdate(inputGroups, executionContext.getSqlStatementContext(), columnNames);\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2020-05-19 16:48:33","endLine":183,"groupId":"2662","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ad/b1210f8b40e99f4706aa4b166aeea9d7f00762.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups(\n                    connection.getRuntimeContext().getProperties().<Integer>getValue(ConfigurationPropertyKey.MAX_CONNECTIONS_SIZE_PER_QUERY));\n            cacheStatements(inputGroups);\n            return statementExecutor.executeUpdate(inputGroups, executionContext.getSqlStatementContext(), columnNames);\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"},{"authorDate":"2020-05-19 16:48:33","commitOrder":2,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            PreparedStatementExecuteGroupEngine executeGroupEngine = new PreparedStatementExecuteGroupEngine(\n                    schemaContexts.getProperties().<Integer>getValue(ConfigurationPropertyKey.MAX_CONNECTIONS_SIZE_PER_QUERY), schemaContexts.getDefaultSchemaContext().getSchema().getRules());\n            Collection<InputGroup<StatementExecuteUnit>> inputGroups = executeGroupEngine.generate(executionContext.getExecutionUnits(), connection, statementOption);\n            cacheStatements(inputGroups);\n            reply();\n            return preparedStatementExecutor.execute(inputGroups, executionContext.getSqlStatementContext());\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2020-05-19 16:48:33","endLine":188,"groupId":"11895","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/07/bb4dafdc09aa5084d980b335fd2a981ee4d003.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            PreparedStatementExecuteGroupEngine executeGroupEngine = new PreparedStatementExecuteGroupEngine(\n                    connection.getRuntimeContext().getProperties().<Integer>getValue(ConfigurationPropertyKey.MAX_CONNECTIONS_SIZE_PER_QUERY), getConnection().getRuntimeContext().getRules());\n            Collection<InputGroup<StatementExecuteUnit>> inputGroups = executeGroupEngine.generate(executionContext.getExecutionUnits(), connection, statementOption);\n            cacheStatements(inputGroups);\n            reply();\n            return preparedStatementExecutor.execute(inputGroups, executionContext.getSqlStatementContext());\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"}],"commitId":"a2b81549f5c64bf7313ffc8d6d18cc5389683228","commitMessage":"@@@Delete RuntimeContext (#5686)\n\n","date":"2020-05-19 16:48:33","modifiedFileCount":"47","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2020-05-25 17:29:03","codes":[{"authorDate":"2020-05-25 17:29:03","commitOrder":3,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                return statementExecutor.executeUpdate(inputGroups, executionContext.getSqlStatementContext(), columnNames);\n            } else {\n                return rawSQLExecutor.executeUpdate(getRawInputGroups(), new RawSQLExecuteUpdateExecutorCallback());\n            }\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2020-05-25 17:29:03","endLine":209,"groupId":"676","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c4/ab14894c97013c39c4de1e35258ef64ae7cd0c.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups(schemaContexts.getProperties().<Integer>getValue(ConfigurationPropertyKey.MAX_CONNECTIONS_SIZE_PER_QUERY));\n            cacheStatements(inputGroups);\n            return statementExecutor.executeUpdate(inputGroups, executionContext.getSqlStatementContext(), columnNames);\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"},{"authorDate":"2020-05-25 17:29:03","commitOrder":3,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                reply();\n                return preparedStatementExecutor.execute(inputGroups, executionContext.getSqlStatementContext());\n            } else {\n                \r\n                return rawSQLExecutor.execute(getRawInputGroups(), new RawSQLExecuteExecutorCallback());\n            }\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2020-05-25 17:29:03","endLine":207,"groupId":"13996","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/05/cfd78795b340b44819936ce6f40c29bbbeb22d.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            PreparedStatementExecuteGroupEngine executeGroupEngine = new PreparedStatementExecuteGroupEngine(\n                    schemaContexts.getProperties().<Integer>getValue(ConfigurationPropertyKey.MAX_CONNECTIONS_SIZE_PER_QUERY), schemaContexts.getDefaultSchemaContext().getSchema().getRules());\n            Collection<InputGroup<StatementExecuteUnit>> inputGroups = executeGroupEngine.generate(executionContext.getExecutionUnits(), connection, statementOption);\n            cacheStatements(inputGroups);\n            reply();\n            return preparedStatementExecutor.execute(inputGroups, executionContext.getSqlStatementContext());\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"}],"commitId":"85a86adeff6373fe4ab6e74453bc76ca8cb428cd","commitMessage":"@@@Add RawSQLExecutor (#5781)\n\n* add todo\n\n* finish ReplicaExecuteExecutorCallback\n\n* finish ReplicaExecuteBatchExecutorCallback\n\n* rename getSQLUnitGroups\n\n* add AbstractExecuteGroupEngine\n\n* rename ResourceManagedExecuteGroupEngine & ResourceUnmanagedExecuteGroupEngine\n\n* Add RawSQLExecutor\n\n* rename ResourceUnmanagedExecuteGroupEngineExecuteGroupEngine to RawExecuteGroupEngineExecuteGroupEngine\n\n* rename RawExecuteGroupEngine\n\n* Add RawSQLExecutor\n\n* refactor ShardingSpherePreparedStatement\n\n* Add ProxyRawSQLExecutorCallback\n\n* Add ProxyRawSQLExecutorCallback","date":"2020-05-25 17:29:03","modifiedFileCount":"16","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-05-26 10:22:28","codes":[{"authorDate":"2020-05-26 10:22:28","commitOrder":4,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                return statementExecutor.executeUpdate(inputGroups, executionContext.getSqlStatementContext(), columnNames);\n            } else {\n                return rawExecutor.executeUpdate(getRawInputGroups(), new DefaultRawSQLExecutorCallback());\n            }\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2020-05-26 10:22:28","endLine":207,"groupId":"676","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/23/6f529fd1668f920df1eea86306f2e05306c3b4.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                return statementExecutor.executeUpdate(inputGroups, executionContext.getSqlStatementContext(), columnNames);\n            } else {\n                return rawSQLExecutor.executeUpdate(getRawInputGroups(), new RawSQLExecuteUpdateExecutorCallback());\n            }\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"},{"authorDate":"2020-05-26 10:22:28","commitOrder":4,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                reply();\n                return preparedStatementExecutor.execute(inputGroups, executionContext.getSqlStatementContext());\n            } else {\n                \r\n                return rawExecutor.execute(getRawInputGroups(), new DefaultRawSQLExecutorCallback());\n            }\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2020-05-26 10:22:28","endLine":205,"groupId":"13996","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/04/2f5bacfb2bbbe3683eee69d3399a2f07a581c9.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                reply();\n                return preparedStatementExecutor.execute(inputGroups, executionContext.getSqlStatementContext());\n            } else {\n                \r\n                return rawSQLExecutor.execute(getRawInputGroups(), new RawSQLExecuteExecutorCallback());\n            }\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"c5558b3218181bc53c2b3f80a1fa5a0943d00834","commitMessage":"@@@Add RawSQLExecutorCallback (#5793)\n\n* add DefaultRawSQLExecutorCallback\n\n* remove useless callback\n\n* add RawProxyExecutor\n\n* refactor ShardingSphereStatement & ShardingSpherePreparedStatement\n\n* add QueryHeaderBuilder\n\n* merge QueryHeader and ExecuteQueryHeader\n\n* merge ExecuteResponse and ExecuteResult\n\n* rename ExecuteResponse to ExecuteResult\n\n* rename ExecuteResponse to ExecuteResult\n\n* refactor org.apache.shardingsphere.infra.executor.sql.raw.execute.result\n\n* remove DefaultRawSQLExecutorCallback\n\n* refactor UpdateResponse","date":"2020-05-26 10:22:28","modifiedFileCount":"20","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-05-26 10:45:09","codes":[{"authorDate":"2020-05-26 10:45:09","commitOrder":5,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                return statementExecutor.executeUpdate(inputGroups, executionContext.getSqlStatementContext(), columnNames);\n            } else {\n                return rawExecutor.executeUpdate(getRawInputGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2020-05-26 10:45:09","endLine":207,"groupId":"676","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ef/33a46cb7a684f44cc1306a32ffda8d9a1c7d58.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                return statementExecutor.executeUpdate(inputGroups, executionContext.getSqlStatementContext(), columnNames);\n            } else {\n                return rawExecutor.executeUpdate(getRawInputGroups(), new DefaultRawSQLExecutorCallback());\n            }\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"},{"authorDate":"2020-05-26 10:45:09","commitOrder":5,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                reply();\n                return preparedStatementExecutor.execute(inputGroups, executionContext.getSqlStatementContext());\n            } else {\n                \r\n                return rawExecutor.execute(getRawInputGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2020-05-26 10:45:09","endLine":205,"groupId":"13996","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8d/62eefed719eeb8c9ba675e2aa1f8ce3c1de23d.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                reply();\n                return preparedStatementExecutor.execute(inputGroups, executionContext.getSqlStatementContext());\n            } else {\n                \r\n                return rawExecutor.execute(getRawInputGroups(), new DefaultRawSQLExecutorCallback());\n            }\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"31f793ae8dc222a6eb2d7d9cd4ae25e3b561284b","commitMessage":"@@@fix compile error (#5794)\n\n","date":"2020-05-26 10:45:09","modifiedFileCount":"2","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-12 00:30:52","codes":[{"authorDate":"2020-05-26 10:45:09","commitOrder":6,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                return statementExecutor.executeUpdate(inputGroups, executionContext.getSqlStatementContext(), columnNames);\n            } else {\n                return rawExecutor.executeUpdate(getRawInputGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2020-05-26 10:45:09","endLine":207,"groupId":"676","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ef/33a46cb7a684f44cc1306a32ffda8d9a1c7d58.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                return statementExecutor.executeUpdate(inputGroups, executionContext.getSqlStatementContext(), columnNames);\n            } else {\n                return rawExecutor.executeUpdate(getRawInputGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"N"},{"authorDate":"2020-10-12 00:30:52","commitOrder":6,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                reply();\n                return preparedStatementExecutor.execute(inputGroups, executionContext.getSqlStatementContext().getSqlStatement());\n            } else {\n                \r\n                return rawExecutor.execute(getRawInputGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2020-10-12 00:30:52","endLine":208,"groupId":"11148","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/26/5626cdc38ace12632f4a1ef4d05f8bd5456bf2.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                reply();\n                return preparedStatementExecutor.execute(inputGroups, executionContext.getSqlStatementContext());\n            } else {\n                \r\n                return rawExecutor.execute(getRawInputGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"}],"commitId":"858cee60d6664938ec520b9e5d5c91fc0a079a65","commitMessage":"@@@Decouple SQLStatementContext and MetaDataRefreshStrategy (#7745)\n\n* Use SQLStatement for MetaDataRefreshStrategy\n\n* Use SQLStatement for MetaDataRefreshStrategyFactory","date":"2020-10-12 00:30:52","modifiedFileCount":"21","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-18 21:52:59","codes":[{"authorDate":"2020-10-18 21:52:59","commitOrder":7,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                return statementExecutor.executeUpdate(inputGroups, executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), columnNames);\n            } else {\n                return rawExecutor.executeUpdate(getRawInputGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2020-10-18 21:52:59","endLine":211,"groupId":"450","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fb/775746d20a87cb63db3c1fe1246587db9b8946.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                return statementExecutor.executeUpdate(inputGroups, executionContext.getSqlStatementContext(), columnNames);\n            } else {\n                return rawExecutor.executeUpdate(getRawInputGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"},{"authorDate":"2020-10-18 21:52:59","commitOrder":7,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                reply();\n                return preparedStatementExecutor.execute(inputGroups, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits());\n            } else {\n                \r\n                return rawExecutor.execute(getRawInputGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2020-10-18 21:52:59","endLine":211,"groupId":"11148","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/48/38d8c532caa7646a2ce2e01238a3b27781212b.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                reply();\n                return preparedStatementExecutor.execute(inputGroups, executionContext.getSqlStatementContext().getSqlStatement());\n            } else {\n                \r\n                return rawExecutor.execute(getRawInputGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"8c41e756b58cf10b38a6916106dc347a4c34d82d","commitMessage":"@@@support create table without rule configuration (#7831)\n\n","date":"2020-10-18 21:52:59","modifiedFileCount":"22","status":"M","submitter":"DuanZhengqiang"},{"authorTime":"2020-11-21 16:51:36","codes":[{"authorDate":"2020-11-21 16:51:36","commitOrder":8,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<ExecutionGroup<StatementExecuteUnit>> executionGroups = createExecutionGroups();\n                cacheStatements(executionGroups);\n                return statementExecutor.executeUpdate(executionGroups, executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), columnNames);\n            } else {\n                return rawExecutor.executeUpdate(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2020-11-21 16:51:36","endLine":211,"groupId":"450","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f8/d457ee880e10c20d539303ec372d2ad0e21a70.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                return statementExecutor.executeUpdate(inputGroups, executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), columnNames);\n            } else {\n                return rawExecutor.executeUpdate(getRawInputGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"},{"authorDate":"2020-11-21 16:51:36","commitOrder":8,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<ExecutionGroup<StatementExecuteUnit>> executionGroups = createExecutionGroups();\n                cacheStatements(executionGroups);\n                reply();\n                return preparedStatementExecutor.execute(executionGroups, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits());\n            } else {\n                \r\n                return rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2020-11-21 16:51:36","endLine":211,"groupId":"11148","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/49/2589f69b9f2e17bac606d9f9917bc779250704.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<InputGroup<StatementExecuteUnit>> inputGroups = getInputGroups();\n                cacheStatements(inputGroups);\n                reply();\n                return preparedStatementExecutor.execute(inputGroups, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits());\n            } else {\n                \r\n                return rawExecutor.execute(getRawInputGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"3fb6cb96c05e25ea14f8f039d28e1a8fead64250","commitMessage":"@@@Scandalize of executor's class names  (#8265)\n\n* Move GroupEngine to same package\n\n* Rename ExecuteGroupEngine to ExecutionGroupEngine\n\n* Rename InputGroup to ExecutionGroup","date":"2020-11-21 16:51:36","modifiedFileCount":"17","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-21 22:35:04","codes":[{"authorDate":"2020-11-21 22:35:04","commitOrder":9,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n                cacheStatements(executionGroups);\n                return statementExecutor.executeUpdate(executionGroups, executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), columnNames);\n            } else {\n                return rawExecutor.executeUpdate(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2020-11-21 22:35:04","endLine":211,"groupId":"450","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/76/e6ed26d0159d83191f0d119d70900b852a154f.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<ExecutionGroup<StatementExecuteUnit>> executionGroups = createExecutionGroups();\n                cacheStatements(executionGroups);\n                return statementExecutor.executeUpdate(executionGroups, executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), columnNames);\n            } else {\n                return rawExecutor.executeUpdate(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"},{"authorDate":"2020-11-21 22:35:04","commitOrder":9,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n                cacheStatements(executionGroups);\n                reply();\n                return preparedStatementExecutor.execute(executionGroups, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits());\n            } else {\n                \r\n                return rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2020-11-21 22:35:04","endLine":211,"groupId":"11148","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ab/c3079075ff70202dd2ecd6e7abd3437daf4167.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<ExecutionGroup<StatementExecuteUnit>> executionGroups = createExecutionGroups();\n                cacheStatements(executionGroups);\n                reply();\n                return preparedStatementExecutor.execute(executionGroups, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits());\n            } else {\n                \r\n                return rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"2b7c3822f58959937a6afb716ff75ff1015d4b31","commitMessage":"@@@Rename ExecutionConnection to ExecutorDriverManager (#8274)\n\n* Rename execute.driver\n\n* Add SQLExecutionUnit\n\n* Rename RawSQLExecutionUnit\n\n* Rename DriverExecutionUnit\n\n* Rename JDBCExecutionUnit\n\n* Refactor RawExecutionGroupEngine\n\n* Rename DriverExecutorManager\n\n* Rename ExecutorDriverManager\n\n* Move ExecutorJDBCManager's package","date":"2020-11-21 22:35:04","modifiedFileCount":"27","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-23 18:48:40","codes":[{"authorDate":"2020-11-23 18:48:40","commitOrder":10,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n                cacheStatements(executionGroups);\n                return statementExecutor.executeUpdate(executionGroups, executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), columnNames);\n            } else {\n                return rawExecutor.executeUpdate(createRawExecutionGroups(), new RawSQLExecutorCallback(metaDataContexts.getDefaultMetaData()));\n            }\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2020-11-23 18:48:40","endLine":211,"groupId":"450","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fd/1c243d80945f29b4b64c25e01f38209750b34a.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n                cacheStatements(executionGroups);\n                return statementExecutor.executeUpdate(executionGroups, executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), columnNames);\n            } else {\n                return rawExecutor.executeUpdate(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"},{"authorDate":"2020-11-23 18:48:40","commitOrder":10,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n                cacheStatements(executionGroups);\n                reply();\n                return preparedStatementExecutor.execute(executionGroups, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits());\n            } else {\n                \r\n                return rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback(metaDataContexts.getDefaultMetaData()));\n            }\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2020-11-23 18:48:40","endLine":211,"groupId":"11148","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fa/e1a48632fc5b9c6c5be035f0ea24688d65564e.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n                cacheStatements(executionGroups);\n                reply();\n                return preparedStatementExecutor.execute(executionGroups, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits());\n            } else {\n                \r\n                return rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"c038bddaa6806812c05824ff596f4cc4d72fb6cf","commitMessage":"@@@Refactor the constructor of RawSQLExecutorCallback.  adding an ShardingSphereMetaData argument to the constructor and passing the argument to the RAW executor (#8305)\n\n","date":"2020-11-23 18:48:40","modifiedFileCount":"4","status":"M","submitter":"AlphaPo"},{"authorTime":"2020-11-25 12:18:14","codes":[{"authorDate":"2020-11-25 12:18:14","commitOrder":11,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n                cacheStatements(executionGroups);\n                return statementExecutor.executeUpdate(executionGroups, executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), columnNames);\n            } else {\n                return rawExecutor.executeUpdate(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2020-11-25 12:18:14","endLine":212,"groupId":"450","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1f/27e714b3327226e67ccf47edca37b47ec7b792.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n                cacheStatements(executionGroups);\n                return statementExecutor.executeUpdate(executionGroups, executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), columnNames);\n            } else {\n                return rawExecutor.executeUpdate(createRawExecutionGroups(), new RawSQLExecutorCallback(metaDataContexts.getDefaultMetaData()));\n            }\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"},{"authorDate":"2020-11-25 12:18:14","commitOrder":11,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n                cacheStatements(executionGroups);\n                reply();\n                return preparedStatementExecutor.execute(executionGroups, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits());\n            } else {\n                \r\n                return rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2020-11-25 12:18:14","endLine":212,"groupId":"11148","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/88/bdfda6c61ff4701f50f6bd4eec06df41af87e7.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n                cacheStatements(executionGroups);\n                reply();\n                return preparedStatementExecutor.execute(executionGroups, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits());\n            } else {\n                \r\n                return rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback(metaDataContexts.getDefaultMetaData()));\n            }\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"cfd0a4199904e5a25e7ca8da69595351b56d0dd4","commitMessage":"@@@Refactor the SQL runtime context: (#8327)\n\n1. Add routing mapping attributes to the table\n2. Remove redundant attributes\n3. Move from the generic domain to the RAW domain\n4. The rollback metadata is constructed through the RAW executor.  and is now set to the RAW SQL runtime context by extending the route","date":"2020-11-25 12:18:14","modifiedFileCount":"9","status":"M","submitter":"AlphaPo"},{"authorTime":"2020-11-25 19:39:50","codes":[{"authorDate":"2020-11-25 19:39:50","commitOrder":12,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return rawExecutor.executeUpdate(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n            Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n            cacheStatements(executionGroups);\n            return statementExecutor.executeUpdate(executionGroups, executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), columnNames);\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2020-11-25 19:39:50","endLine":209,"groupId":"3723","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/88/76dc707e274c6272e592a2a5c57dd278790e38.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n                cacheStatements(executionGroups);\n                return statementExecutor.executeUpdate(executionGroups, executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), columnNames);\n            } else {\n                return rawExecutor.executeUpdate(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"},{"authorDate":"2020-11-25 19:39:50","commitOrder":12,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                return rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n            Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n            cacheStatements(executionGroups);\n            reply();\n            return preparedStatementExecutor.execute(executionGroups, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2020-11-25 19:39:50","endLine":211,"groupId":"8122","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2d/4b7c591d9863987dc4feb2a1e02958318ddb55.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (ExecutorConstant.MANAGED_RESOURCE) {\n                Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n                cacheStatements(executionGroups);\n                reply();\n                return preparedStatementExecutor.execute(executionGroups, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits());\n            } else {\n                \r\n                return rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"c57febdf22a79684b5d6b61c5e9ef771e96e6bfd","commitMessage":"@@@Add RawExecutionRule instead of ExecutorConstant to dynamic judge using raw or jdbc executor engine (#8340)\n\n* Move JDBCExecutionUnitBuilder to builder package\n\n* Add generic type for ExecutorDriverManager\n\n* Add RawExecutionRule instead of ExecutorConstant to dynamic judge using raw or jdbc executor engine","date":"2020-11-25 19:39:50","modifiedFileCount":"6","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-12-08 11:31:00","codes":[{"authorDate":"2020-12-08 11:31:00","commitOrder":13,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return rawExecutor.executeUpdate(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n            Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n            cacheStatements(executionGroups);\n            return executeUpdate(executionGroups,\n                (actualSQL, statement) -> statement.executeUpdate(actualSQL, columnNames), executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2020-12-08 11:31:00","endLine":222,"groupId":"3723","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ad/7fb3f65d2e4bae23406794c42778ae347db9d5.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return rawExecutor.executeUpdate(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n            Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n            cacheStatements(executionGroups);\n            return statementExecutor.executeUpdate(executionGroups, executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), columnNames);\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"},{"authorDate":"2020-12-08 11:31:00","commitOrder":13,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                return rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n            Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n            cacheStatements(executionGroups);\n            reply();\n            return jdbcStatementExecutor.execute(\n                    executionGroups, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits(), createExecuteCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2020-12-08 11:31:00","endLine":229,"groupId":"8122","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/75/8e4a7bdc4d4383b493330f8f012b0951add11e.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                return rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n            Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n            cacheStatements(executionGroups);\n            reply();\n            return preparedStatementExecutor.execute(executionGroups, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"458151d1d14f247f308010e3a0264bcb2f975660","commitMessage":"@@@Refactor Driver JDBC executor (#8523)\n\n* Refactor AbstractStatementExecutor.executeUpdate\n\n* Refactor AbstractStatementExecutor\n\n* Refactor AbstractStatementExecutor.execute\n\n* Remove PreparedStatementExecutor\n\n* Remove StatementExecutor\n\n* Rename JDBCStatementExecutor\n\n* Rename ExecuteCallback\n\n* Rename ExecuteUpdateCallback\n\n* Add back execute query to JDBCStatementExecutor\n\n* Rename DriverJDBCExecutor\n\n* Rename DriverJDBCExecutor","date":"2020-12-08 11:31:00","modifiedFileCount":"2","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-12-08 17:53:28","codes":[{"authorDate":"2020-12-08 17:53:28","commitOrder":14,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return accumulate(rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback()));\n            }\n            Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n            cacheStatements(executionGroups);\n            return executeUpdate(executionGroups,\n                (actualSQL, statement) -> statement.executeUpdate(actualSQL, columnNames), executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2020-12-08 17:53:28","endLine":225,"groupId":"13664","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7b/ae993423680614a544879c9f1293ef149b5d51.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return rawExecutor.executeUpdate(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n            Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n            cacheStatements(executionGroups);\n            return executeUpdate(executionGroups,\n                (actualSQL, statement) -> statement.executeUpdate(actualSQL, columnNames), executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"},{"authorDate":"2020-12-08 17:53:28","commitOrder":14,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback());\n                return executeResults.iterator().next() instanceof QueryResult;\n            }\n            Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n            cacheStatements(executionGroups);\n            reply();\n            return driverJDBCExecutor.execute(\n                    executionGroups, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits(), createExecuteCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2020-12-08 17:53:28","endLine":242,"groupId":"8136","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c8/df8edff3afb6ba7548b2ec2c1e221a9db08bd7.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                return rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback());\n            }\n            Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n            cacheStatements(executionGroups);\n            reply();\n            return jdbcStatementExecutor.execute(\n                    executionGroups, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits(), createExecuteCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"}],"commitId":"bc1c3aeae02a91d54a0d65c635d0be0d2390943a","commitMessage":"@@@Merge RawExecutor and ProxyRawExecutor (#8532)\n\n* Remove useless getter of DriverJDBCExecutor\n\n* Rename driverJDBCExecutor\n\n* Refactor ShardingSphereStatement.executeQuery\n\n* Remove useless todo\n\n* Merge RawExecutor and ProxyRawExecutor","date":"2020-12-08 17:53:28","modifiedFileCount":"5","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-12-09 16:02:33","codes":[{"authorDate":"2020-12-08 17:53:28","commitOrder":15,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return accumulate(rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback()));\n            }\n            Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n            cacheStatements(executionGroups);\n            return executeUpdate(executionGroups,\n                (actualSQL, statement) -> statement.executeUpdate(actualSQL, columnNames), executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2020-12-08 17:53:28","endLine":225,"groupId":"13664","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7b/ae993423680614a544879c9f1293ef149b5d51.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return accumulate(rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback()));\n            }\n            Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n            cacheStatements(executionGroups);\n            return executeUpdate(executionGroups,\n                (actualSQL, statement) -> statement.executeUpdate(actualSQL, columnNames), executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"N"},{"authorDate":"2020-12-09 16:02:33","commitOrder":15,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback());\n                return executeResults.iterator().next() instanceof QueryResult;\n            }\n            Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n            cacheStatements(executionGroups);\n            return driverJDBCExecutor.execute(\n                    executionGroups, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits(), createExecuteCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2020-12-09 16:02:33","endLine":238,"groupId":"8136","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a8/b922dc163f571cd3355b70a4a57e0b7a04182d.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback());\n                return executeResults.iterator().next() instanceof QueryResult;\n            }\n            Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n            cacheStatements(executionGroups);\n            reply();\n            return driverJDBCExecutor.execute(\n                    executionGroups, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits(), createExecuteCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"0bf45cfda37c9e0e73ef9fcdf1ae15941db3af2a","commitMessage":"@@@Move logSQL to KernelProcessor (#8545)\n\n* Refactor ShardingSphereStatement and ShardingSpherePreparedStatement\n\n* Move logSQL to KernelProcessor","date":"2020-12-09 16:02:33","modifiedFileCount":"4","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-03-12 17:12:30","codes":[{"authorDate":"2021-03-12 17:12:30","commitOrder":16,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return accumulate(rawExecutor.execute(createRawExecutionContext(), new RawSQLExecutorCallback()));\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return executeUpdate(executionGroupContext,\n                (actualSQL, statement) -> statement.executeUpdate(actualSQL, columnNames), executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2021-03-12 17:12:30","endLine":266,"groupId":"13664","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4a/814962e038809b0d5641d34b1a556c19148dff.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return accumulate(rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback()));\n            }\n            Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n            cacheStatements(executionGroups);\n            return executeUpdate(executionGroups,\n                (actualSQL, statement) -> statement.executeUpdate(actualSQL, columnNames), executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2021-03-12 17:12:30","commitOrder":16,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroupContext(), new RawSQLExecutorCallback());\n                return executeResults.iterator().next() instanceof QueryResult;\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return driverJDBCExecutor.execute(executionGroupContext,\n                    executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits(), createExecuteCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2021-03-12 17:12:30","endLine":288,"groupId":"11350","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b4/fcefae0d94d26f1cb372a92605ceabddf8f0d9.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback());\n                return executeResults.iterator().next() instanceof QueryResult;\n            }\n            Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n            cacheStatements(executionGroups);\n            return driverJDBCExecutor.execute(\n                    executionGroups, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits(), createExecuteCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"}],"commitId":"30ebff26e8734ce0809baf9be78cd2513ee1ae98","commitMessage":"@@@Create executionGroup context (#9643)\n\n* Show ddl/dml process\n\n* fix unit test\n\n* fix java doc","date":"2021-03-12 17:12:30","modifiedFileCount":"15","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-03-16 18:29:46","codes":[{"authorDate":"2021-03-12 17:12:30","commitOrder":17,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return accumulate(rawExecutor.execute(createRawExecutionContext(), new RawSQLExecutorCallback()));\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return executeUpdate(executionGroupContext,\n                (actualSQL, statement) -> statement.executeUpdate(actualSQL, columnNames), executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2021-03-12 17:12:30","endLine":266,"groupId":"13664","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4a/814962e038809b0d5641d34b1a556c19148dff.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return accumulate(rawExecutor.execute(createRawExecutionContext(), new RawSQLExecutorCallback()));\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return executeUpdate(executionGroupContext,\n                (actualSQL, statement) -> statement.executeUpdate(actualSQL, columnNames), executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"N"},{"authorDate":"2021-03-16 18:29:46","commitOrder":17,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroupContext(), new RawSQLExecutorCallback());\n                return executeResults.iterator().next() instanceof QueryResult;\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return driverJDBCExecutor.execute(executionGroupContext,\n                    executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), createExecuteCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2021-03-16 18:29:46","endLine":288,"groupId":"11350","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8d/8542db375ad5c70f8cdbf2467118ea84193dfd.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroupContext(), new RawSQLExecutorCallback());\n                return executeResults.iterator().next() instanceof QueryResult;\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return driverJDBCExecutor.execute(executionGroupContext,\n                    executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits(), createExecuteCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"}],"commitId":"9130c5154708e33e1963223719c7b84394147145","commitMessage":"@@@import ExecuteProcessEngine (#9691)\n\n","date":"2021-03-16 18:29:46","modifiedFileCount":"9","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-04-04 18:16:18","codes":[{"authorDate":"2021-04-04 18:16:18","commitOrder":18,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return accumulate(rawExecutor.execute(createRawExecutionContext(), executionContext.getSqlStatementContext(), new RawSQLExecutorCallback()));\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return executeUpdate(executionGroupContext,\n                (actualSQL, statement) -> statement.executeUpdate(actualSQL, columnNames), executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2021-04-04 18:16:18","endLine":267,"groupId":"13664","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/13/e4a9590dc44f7a78191909f2dbeafd7dc6d748.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return accumulate(rawExecutor.execute(createRawExecutionContext(), new RawSQLExecutorCallback()));\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return executeUpdate(executionGroupContext,\n                (actualSQL, statement) -> statement.executeUpdate(actualSQL, columnNames), executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"},{"authorDate":"2021-04-04 18:16:18","commitOrder":18,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getSqlStatementContext(), new RawSQLExecutorCallback());\n                return executeResults.iterator().next() instanceof QueryResult;\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return driverJDBCExecutor.execute(executionGroupContext,\n                    executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), createExecuteCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2021-04-04 18:16:18","endLine":289,"groupId":"9029","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/12/e08b0dc65176e884b04ce8c9b25f4f373ed891.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroupContext(), new RawSQLExecutorCallback());\n                return executeResults.iterator().next() instanceof QueryResult;\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return driverJDBCExecutor.execute(executionGroupContext,\n                    executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), createExecuteCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"}],"commitId":"138905deb34ea0c38feec0cf1436b145196b8d2e","commitMessage":"@@@import ExecuteProcessEngine for RawExecutor (#9925)\n\n* import ExecuteProcessEngine for RawExecutor\n\n* import ExecuteProcessEngine for DriverJDBCExecutor","date":"2021-04-04 18:16:18","modifiedFileCount":"5","status":"M","submitter":"sandynz"},{"authorTime":"2021-06-11 13:29:00","codes":[{"authorDate":"2021-04-04 18:16:18","commitOrder":19,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return accumulate(rawExecutor.execute(createRawExecutionContext(), executionContext.getSqlStatementContext(), new RawSQLExecutorCallback()));\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return executeUpdate(executionGroupContext,\n                (actualSQL, statement) -> statement.executeUpdate(actualSQL, columnNames), executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2021-04-04 18:16:18","endLine":267,"groupId":"13664","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/13/e4a9590dc44f7a78191909f2dbeafd7dc6d748.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return accumulate(rawExecutor.execute(createRawExecutionContext(), executionContext.getSqlStatementContext(), new RawSQLExecutorCallback()));\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return executeUpdate(executionGroupContext,\n                (actualSQL, statement) -> statement.executeUpdate(actualSQL, columnNames), executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"N"},{"authorDate":"2021-06-11 13:29:00","commitOrder":19,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getSqlStatementContext(), new RawSQLExecutorCallback());\n                return executeResults.iterator().next() instanceof QueryResult;\n            }\n            if (executionContext.getRouteContext().isFederated()) {\n                List<QueryResult> queryResults = executeFederatedQuery();\n                return !queryResults.isEmpty();\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return driverJDBCExecutor.execute(executionGroupContext,\n                    executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), createExecuteCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2021-06-11 13:29:00","endLine":288,"groupId":"3931","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4c/922fc78821bfa48bd6888ebe08b8e61bab37c8.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getSqlStatementContext(), new RawSQLExecutorCallback());\n                return executeResults.iterator().next() instanceof QueryResult;\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return driverJDBCExecutor.execute(executionGroupContext,\n                    executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), createExecuteCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"}],"commitId":"99166c491f1e3005946dc7324094a08e812121af","commitMessage":"@@@fix calcite select result merge error when call execute method (#10758)\n\n* fix calcite select result merge error when call execute method\n\n* fix test case","date":"2021-06-11 13:29:00","modifiedFileCount":"8","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-06-25 16:56:56","codes":[{"authorDate":"2021-06-25 16:56:56","commitOrder":20,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return accumulate(rawExecutor.execute(createRawExecutionContext(), executionContext.getLogicSQL(), new RawSQLExecutorCallback()));\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return executeUpdate(executionGroupContext,\n                (actualSQL, statement) -> statement.executeUpdate(actualSQL, columnNames), executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2021-06-25 16:56:56","endLine":262,"groupId":"13664","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/78/e40cf78edce2e2a429b3a21d5461f6041f4a18.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return accumulate(rawExecutor.execute(createRawExecutionContext(), executionContext.getSqlStatementContext(), new RawSQLExecutorCallback()));\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return executeUpdate(executionGroupContext,\n                (actualSQL, statement) -> statement.executeUpdate(actualSQL, columnNames), executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"},{"authorDate":"2021-06-25 16:56:56","commitOrder":20,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getLogicSQL(), new RawSQLExecutorCallback());\n                return executeResults.iterator().next() instanceof QueryResult;\n            }\n            if (executionContext.getRouteContext().isFederated()) {\n                List<QueryResult> queryResults = executeFederatedQuery();\n                return !queryResults.isEmpty();\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return driverJDBCExecutor.execute(executionGroupContext,\n                    executionContext.getLogicSQL(), executionContext.getRouteContext().getRouteUnits(), createExecuteCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2021-06-25 16:56:56","endLine":287,"groupId":"13401","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c4/81f13b7340f2a1b8b98d61f126aa884f3461a4.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getSqlStatementContext(), new RawSQLExecutorCallback());\n                return executeResults.iterator().next() instanceof QueryResult;\n            }\n            if (executionContext.getRouteContext().isFederated()) {\n                List<QueryResult> queryResults = executeFederatedQuery();\n                return !queryResults.isEmpty();\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return driverJDBCExecutor.execute(executionGroupContext,\n                    executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), createExecuteCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"}],"commitId":"2fa8d9de63960f5a160b64306418d9007a7ed528","commitMessage":"@@@Show logic SQL in execution process list Info column (#11006)\n\n* Prepare LogicSQL for ExecuteProcessReporter\n\n* Persist logic SQL and show in Info column","date":"2021-06-25 16:56:56","modifiedFileCount":"17","status":"M","submitter":"sandynz"},{"authorTime":"2021-08-09 16:45:36","codes":[{"authorDate":"2021-08-09 16:45:36","commitOrder":21,"curCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getMetaData(connection.getSchemaName()).getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return accumulate(rawExecutor.execute(createRawExecutionContext(), executionContext.getLogicSQL(), new RawSQLExecutorCallback()));\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return executeUpdate(executionGroupContext,\n                (actualSQL, statement) -> statement.executeUpdate(actualSQL, columnNames), executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2021-08-09 16:45:36","endLine":260,"groupId":"121197","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"executeUpdate","params":"(finalStringsql@finalString[]columnNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d2/e584707f24bd62d48cc852cbeea49da6462e7e.src","preCode":"    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {\n        returnGeneratedKeys = true;\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                return accumulate(rawExecutor.execute(createRawExecutionContext(), executionContext.getLogicSQL(), new RawSQLExecutorCallback()));\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return executeUpdate(executionGroupContext,\n                (actualSQL, statement) -> statement.executeUpdate(actualSQL, columnNames), executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"},{"authorDate":"2021-08-09 16:45:36","commitOrder":21,"curCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getMetaData(connection.getSchemaName()).getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getLogicSQL(), new RawSQLExecutorCallback());\n                return executeResults.iterator().next() instanceof QueryResult;\n            }\n            if (executionContext.getRouteContext().isFederated()) {\n                List<QueryResult> queryResults = executeFederatedQuery();\n                return !queryResults.isEmpty();\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return driverJDBCExecutor.execute(executionGroupContext,\n                    executionContext.getLogicSQL(), executionContext.getRouteContext().getRouteUnits(), createExecuteCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2021-08-09 16:45:36","endLine":286,"groupId":"121197","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/50/baeaf18c596da58f3517bd1589948bda40a605.src","preCode":"    public boolean execute() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getLogicSQL(), new RawSQLExecutorCallback());\n                return executeResults.iterator().next() instanceof QueryResult;\n            }\n            if (executionContext.getRouteContext().isFederated()) {\n                List<QueryResult> queryResults = executeFederatedQuery();\n                return !queryResults.isEmpty();\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return driverJDBCExecutor.execute(executionGroupContext,\n                    executionContext.getLogicSQL(), executionContext.getRouteContext().getRouteUnits(), createExecuteCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"}],"commitId":"222aeb59cc07d5eb3edc858c68b9d95cc903bcec","commitMessage":"@@@JDBC-core module delete getDefaultMetaData() (#11714)\n\n* jdbc-core module delete getDefaultMetaData()\n\n* update\n\n* optimization","date":"2021-08-09 16:45:36","modifiedFileCount":"22","status":"M","submitter":"zhaojinchao"}]
