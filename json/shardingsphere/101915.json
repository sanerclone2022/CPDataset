[{"authorTime":"2020-05-16 16:30:07","codes":[{"authorDate":"2020-05-16 16:30:07","commitOrder":1,"curCode":"    public OracleDataSourceMetaData(final String url, final String username) {\n        Matcher matcher = pattern.matcher(url);\n        if (!matcher.find()) {\n            throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n        }\n        hostName = matcher.group(3);\n        port = Strings.isNullOrEmpty(matcher.group(4)) ? DEFAULT_PORT : Integer.valueOf(matcher.group(4));\n        catalog = matcher.group(5);\n        schema = username;\n    }\n","date":"2020-05-16 16:30:07","endLine":55,"groupId":"12303","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"OracleDataSourceMetaData","params":"(finalStringurl@finalStringusername)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/96/7d8d167119fe4131718eef19ec119839c0f776.src","preCode":"    public OracleDataSourceMetaData(final String url, final String username) {\n        Matcher matcher = pattern.matcher(url);\n        if (!matcher.find()) {\n            throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n        }\n        hostName = matcher.group(3);\n        port = Strings.isNullOrEmpty(matcher.group(4)) ? DEFAULT_PORT : Integer.valueOf(matcher.group(4));\n        catalog = matcher.group(5);\n        schema = username;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/database/metadata/dialect/OracleDataSourceMetaData.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2020-05-16 16:30:07","commitOrder":1,"curCode":"    public MySQLDataSourceMetaData(final String url) {\n        Matcher matcher = pattern.matcher(url);\n        if (!matcher.find()) {\n            throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n        }\n        hostName = matcher.group(4);\n        port = Strings.isNullOrEmpty(matcher.group(5)) ? DEFAULT_PORT : Integer.valueOf(matcher.group(5));\n        catalog = matcher.group(6);\n        schema = null;\n    }\n","date":"2020-05-16 16:30:07","endLine":55,"groupId":"12303","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"MySQLDataSourceMetaData","params":"(finalStringurl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4e/48a4fc876de176fec2e9c14043d11cc18a9dd5.src","preCode":"    public MySQLDataSourceMetaData(final String url) {\n        Matcher matcher = pattern.matcher(url);\n        if (!matcher.find()) {\n            throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n        }\n        hostName = matcher.group(4);\n        port = Strings.isNullOrEmpty(matcher.group(5)) ? DEFAULT_PORT : Integer.valueOf(matcher.group(5));\n        catalog = matcher.group(6);\n        schema = null;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/database/metadata/dialect/MySQLDataSourceMetaData.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"}],"commitId":"60b82df2df371512c4a2d40f562a6ffa1349c2e1","commitMessage":"@@@Rename shardingsphere-underlying to shardingsphere-infra (#5638)\n\n* Rename shardingsphere-underlying to shardingsphere-infra\n\n* Rename shardingsphere-infra's subprojects\n\n* Rename shardingsphere-infra's subprojects\n\n* rename package from org.apache.shardingsphere.underlying.common to org.apache.shardingsphere.infra\n\n* rename package from org.apache.shardingsphere.underlying.executor to org.apache.shardingsphere.infra.executor\n\n* rename package from org.apache.shardingsphere.underlying.merge to org.apache.shardingsphere.infra.merge\n\n* rename package from org.apache.shardingsphere.underlying.route to org.apache.shardingsphere.infra.route\n\n* rename package from org.apache.shardingsphere.underlying.rewrite to org.apache.shardingsphere.infra.rewrite","date":"2020-05-16 16:30:07","modifiedFileCount":"488","status":"B","submitter":"Liang Zhang"},{"authorTime":"2020-07-23 08:02:58","codes":[{"authorDate":"2020-07-23 08:02:58","commitOrder":2,"curCode":"    public OracleDataSourceMetaData(final String url, final String username) {\n        Matcher matcher = pattern.matcher(url);\n        if (!matcher.find()) {\n            throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n        }\n        hostName = matcher.group(3);\n        port = Strings.isNullOrEmpty(matcher.group(4)) ? DEFAULT_PORT : Integer.parseInt(matcher.group(4));\n        catalog = matcher.group(5);\n        schema = username;\n    }\n","date":"2020-07-23 08:02:58","endLine":55,"groupId":"12303","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"OracleDataSourceMetaData","params":"(finalStringurl@finalStringusername)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a3/5d47d57414b9ee3f66d772387dab28ae9c2cf4.src","preCode":"    public OracleDataSourceMetaData(final String url, final String username) {\n        Matcher matcher = pattern.matcher(url);\n        if (!matcher.find()) {\n            throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n        }\n        hostName = matcher.group(3);\n        port = Strings.isNullOrEmpty(matcher.group(4)) ? DEFAULT_PORT : Integer.valueOf(matcher.group(4));\n        catalog = matcher.group(5);\n        schema = username;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/database/metadata/dialect/OracleDataSourceMetaData.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2020-07-23 08:02:58","commitOrder":2,"curCode":"    public MySQLDataSourceMetaData(final String url) {\n        Matcher matcher = pattern.matcher(url);\n        if (!matcher.find()) {\n            throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n        }\n        hostName = matcher.group(4);\n        port = Strings.isNullOrEmpty(matcher.group(5)) ? DEFAULT_PORT : Integer.parseInt(matcher.group(5));\n        catalog = matcher.group(6);\n        schema = null;\n    }\n","date":"2020-07-23 08:02:58","endLine":55,"groupId":"12303","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"MySQLDataSourceMetaData","params":"(finalStringurl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3b/77e49bc5fbf767fe6c79396e9de9b652655a41.src","preCode":"    public MySQLDataSourceMetaData(final String url) {\n        Matcher matcher = pattern.matcher(url);\n        if (!matcher.find()) {\n            throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n        }\n        hostName = matcher.group(4);\n        port = Strings.isNullOrEmpty(matcher.group(5)) ? DEFAULT_PORT : Integer.valueOf(matcher.group(5));\n        catalog = matcher.group(6);\n        schema = null;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/database/metadata/dialect/MySQLDataSourceMetaData.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"6b69fa1b79e36135634e9728a8a342401d14c1cc","commitMessage":"@@@Merge pull request #6407 from terrymanu/dev\n\nClean up codes","date":"2020-07-23 08:02:58","modifiedFileCount":"75","status":"M","submitter":"Haoran Meng"},{"authorTime":"2020-07-23 08:02:58","codes":[{"authorDate":"2020-09-11 19:07:27","commitOrder":3,"curCode":"    public OracleDataSourceMetaData(final String url, final String username) {\n        List<Matcher> matcherList = Arrays.asList(thinUrlPattern.matcher(url), connectDescriptorUrlPattern.matcher(url));\n        Optional<Matcher> matcherOptional = matcherList.stream().filter(matcher -> matcher.find()).findAny();\n        if (!matcherOptional.isPresent()) {\n            throw new UnrecognizedDatabaseURLException(url, thinUrlPattern.pattern());\n        }\n        Matcher matcher = matcherOptional.get();\n        int groupCount = matcher.groupCount();\n        if (groupCount == THIN_MATCH_GROUP_COUNT) {\n            hostName = matcher.group(3);\n            port = Strings.isNullOrEmpty(matcher.group(4)) ? DEFAULT_PORT : Integer.parseInt(matcher.group(4));\n            catalog = matcher.group(5);\n            schema = username;\n        } else {\n            hostName = matcher.group(2);\n            port = Integer.parseInt(matcher.group(7));\n            catalog = matcher.group(8);\n            schema = username;\n        }\n    }\n","date":"2020-09-11 19:07:27","endLine":73,"groupId":"12303","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"OracleDataSourceMetaData","params":"(finalStringurl@finalStringusername)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f7/15f0eba7eb942a49b4c1e6f71cbd3f45d83e2b.src","preCode":"    public OracleDataSourceMetaData(final String url, final String username) {\n        Matcher matcher = pattern.matcher(url);\n        if (!matcher.find()) {\n            throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n        }\n        hostName = matcher.group(3);\n        port = Strings.isNullOrEmpty(matcher.group(4)) ? DEFAULT_PORT : Integer.parseInt(matcher.group(4));\n        catalog = matcher.group(5);\n        schema = username;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/database/metadata/dialect/OracleDataSourceMetaData.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2020-07-23 08:02:58","commitOrder":3,"curCode":"    public MySQLDataSourceMetaData(final String url) {\n        Matcher matcher = pattern.matcher(url);\n        if (!matcher.find()) {\n            throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n        }\n        hostName = matcher.group(4);\n        port = Strings.isNullOrEmpty(matcher.group(5)) ? DEFAULT_PORT : Integer.parseInt(matcher.group(5));\n        catalog = matcher.group(6);\n        schema = null;\n    }\n","date":"2020-07-23 08:02:58","endLine":55,"groupId":"12303","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"MySQLDataSourceMetaData","params":"(finalStringurl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3b/77e49bc5fbf767fe6c79396e9de9b652655a41.src","preCode":"    public MySQLDataSourceMetaData(final String url) {\n        Matcher matcher = pattern.matcher(url);\n        if (!matcher.find()) {\n            throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n        }\n        hostName = matcher.group(4);\n        port = Strings.isNullOrEmpty(matcher.group(5)) ? DEFAULT_PORT : Integer.parseInt(matcher.group(5));\n        catalog = matcher.group(6);\n        schema = null;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/database/metadata/dialect/MySQLDataSourceMetaData.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"}],"commitId":"5d8fdd4d29e082f5db4e13ff6e1195d146e3613c","commitMessage":"@@@Merge pull request #7367 from xbkaishui/oracle-support-rac\n\nSupport oracle connect descriptor url","date":"2020-09-11 19:07:27","modifiedFileCount":"2","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2020-07-23 08:02:58","codes":[{"authorDate":"2020-09-17 08:59:11","commitOrder":4,"curCode":"    public OracleDataSourceMetaData(final String url, final String username) {\n        List<Matcher> matcherList = Arrays.asList(thinUrlPattern.matcher(url), connectDescriptorUrlPattern.matcher(url));\n        Optional<Matcher> matcherOptional = matcherList.stream().filter(Matcher::find).findAny();\n        if (!matcherOptional.isPresent()) {\n            throw new UnrecognizedDatabaseURLException(url, thinUrlPattern.pattern());\n        }\n        Matcher matcher = matcherOptional.get();\n        int groupCount = matcher.groupCount();\n        if (THIN_MATCH_GROUP_COUNT == groupCount) {\n            hostName = matcher.group(3);\n            port = Strings.isNullOrEmpty(matcher.group(4)) ? DEFAULT_PORT : Integer.parseInt(matcher.group(4));\n            catalog = matcher.group(5);\n            schema = username;\n        } else {\n            hostName = matcher.group(2);\n            port = Integer.parseInt(matcher.group(7));\n            catalog = matcher.group(8);\n            schema = username;\n        }\n    }\n","date":"2020-09-17 08:59:11","endLine":73,"groupId":"101915","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"OracleDataSourceMetaData","params":"(finalStringurl@finalStringusername)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0f/73ef1b3401fdff0f86b8ddfc528ed8b4fe5a78.src","preCode":"    public OracleDataSourceMetaData(final String url, final String username) {\n        List<Matcher> matcherList = Arrays.asList(thinUrlPattern.matcher(url), connectDescriptorUrlPattern.matcher(url));\n        Optional<Matcher> matcherOptional = matcherList.stream().filter(matcher -> matcher.find()).findAny();\n        if (!matcherOptional.isPresent()) {\n            throw new UnrecognizedDatabaseURLException(url, thinUrlPattern.pattern());\n        }\n        Matcher matcher = matcherOptional.get();\n        int groupCount = matcher.groupCount();\n        if (groupCount == THIN_MATCH_GROUP_COUNT) {\n            hostName = matcher.group(3);\n            port = Strings.isNullOrEmpty(matcher.group(4)) ? DEFAULT_PORT : Integer.parseInt(matcher.group(4));\n            catalog = matcher.group(5);\n            schema = username;\n        } else {\n            hostName = matcher.group(2);\n            port = Integer.parseInt(matcher.group(7));\n            catalog = matcher.group(8);\n            schema = username;\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/database/metadata/dialect/OracleDataSourceMetaData.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2020-07-23 08:02:58","commitOrder":4,"curCode":"    public MySQLDataSourceMetaData(final String url) {\n        Matcher matcher = pattern.matcher(url);\n        if (!matcher.find()) {\n            throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n        }\n        hostName = matcher.group(4);\n        port = Strings.isNullOrEmpty(matcher.group(5)) ? DEFAULT_PORT : Integer.parseInt(matcher.group(5));\n        catalog = matcher.group(6);\n        schema = null;\n    }\n","date":"2020-07-23 08:02:58","endLine":55,"groupId":"101915","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"MySQLDataSourceMetaData","params":"(finalStringurl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3b/77e49bc5fbf767fe6c79396e9de9b652655a41.src","preCode":"    public MySQLDataSourceMetaData(final String url) {\n        Matcher matcher = pattern.matcher(url);\n        if (!matcher.find()) {\n            throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n        }\n        hostName = matcher.group(4);\n        port = Strings.isNullOrEmpty(matcher.group(5)) ? DEFAULT_PORT : Integer.parseInt(matcher.group(5));\n        catalog = matcher.group(6);\n        schema = null;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/database/metadata/dialect/MySQLDataSourceMetaData.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"}],"commitId":"e8297b02c37bfbfb188ee8f4af9ad7a6b78a1ce2","commitMessage":"@@@For checkstyle (#7495)\n\n* For checkstyle\n\n* Remove redundant suppression\n\n* For checkstyle\n\n* For checkstyle\n\n* For checkstyle\n\n* For checkstyle\n\n* For checkstyle\n\n* For checkstyle\n\n* For checkstyle\n\n* Add final for classes which not design for extension\n\n* Rename return value to result\n\n* Rename exception variable name","date":"2020-09-17 08:59:11","modifiedFileCount":"139","status":"M","submitter":"Liang Zhang"}]
