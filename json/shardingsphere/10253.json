[{"authorTime":"2021-08-18 12:34:35","codes":[{"authorDate":"2021-08-18 12:34:35","commitOrder":7,"curCode":"    public void assertBuild() {\n        DatabaseDiscoveryRuleConfiguration ruleConfig = mock(DatabaseDiscoveryRuleConfiguration.class);\n        DatabaseDiscoveryDataSourceRuleConfiguration dataSourceRuleConfig = new DatabaseDiscoveryDataSourceRuleConfiguration(\"name\", Collections.singletonList(\"name\"), \"discoveryTypeName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(ruleConfig)).get(ruleConfig);\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"primaryDataSourceName\", mock(DataSource.class));\n        assertThat(builder.build(new ShardingSphereRulesBuilderMaterials(\"test_schema\", Collections.emptyList(), mock(DatabaseType.class),\n                dataSourceMap, new ConfigurationProperties(new Properties())), ruleConfig, Collections.emptyList()), instanceOf(DatabaseDiscoveryRule.class));\n    }\n","date":"2021-08-18 12:34:35","endLine":59,"groupId":"7196","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f0/f9b669b5d3b2f104b42fdf99e949c557cd1bcb.src","preCode":"    public void assertBuild() {\n        DatabaseDiscoveryRuleConfiguration ruleConfig = mock(DatabaseDiscoveryRuleConfiguration.class);\n        DatabaseDiscoveryDataSourceRuleConfiguration dataSourceRuleConfig = new DatabaseDiscoveryDataSourceRuleConfiguration(\"name\", Collections.singletonList(\"name\"), \"discoveryTypeName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(ruleConfig)).get(ruleConfig);\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"primaryDataSourceName\", mock(DataSource.class));\n        assertThat(builder.build(new ShardingSphereRulesBuilderMaterials(\"test_schema\", Collections.emptyList(), mock(DatabaseType.class),\n                dataSourceMap, new ConfigurationProperties(new Properties())), ruleConfig, Collections.emptyList()), instanceOf(DatabaseDiscoveryRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-core/src/test/java/org/apache/shardingsphere/dbdiscovery/rule/builder/DatabaseDiscoveryRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"MB"},{"authorDate":"2021-08-18 12:34:35","commitOrder":7,"curCode":"    public void assertBuild() {\n        AlgorithmProvidedShardingRuleConfiguration ruleConfig = mock(AlgorithmProvidedShardingRuleConfiguration.class);\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(ruleConfig)).get(ruleConfig);\n        assertThat(builder.build(new ShardingSphereRulesBuilderMaterials(\"test_schema\", Collections.emptyList(), \n                mock(DatabaseType.class), Collections.singletonMap(\"name\", mock(DataSource.class, RETURNS_DEEP_STUBS)), \n                new ConfigurationProperties(new Properties())), ruleConfig, Collections.emptyList()), instanceOf(ShardingRule.class));\n    }\n","date":"2021-08-18 12:34:35","endLine":53,"groupId":"918","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4f/c2ff16fdd468c5081991af129c407d953daa61.src","preCode":"    public void assertBuild() {\n        AlgorithmProvidedShardingRuleConfiguration ruleConfig = mock(AlgorithmProvidedShardingRuleConfiguration.class);\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(ruleConfig)).get(ruleConfig);\n        assertThat(builder.build(new ShardingSphereRulesBuilderMaterials(\"test_schema\", Collections.emptyList(), \n                mock(DatabaseType.class), Collections.singletonMap(\"name\", mock(DataSource.class, RETURNS_DEEP_STUBS)), \n                new ConfigurationProperties(new Properties())), ruleConfig, Collections.emptyList()), instanceOf(ShardingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rule/builder/AlgorithmProvidedShardingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"}],"commitId":"d9bdb6a6a04767539ed477581bcd21105dbf515d","commitMessage":"@@@add single table conflict check option (#11860)\n\n* add single table conflict check option\n\n* add test case for single table load\n\n* fix checkstyle\n\n* optimize code\n\n* fix checkstyle\n\n* fix checkstyle\n\n* rename properties key\n\n* rename properties key","date":"2021-08-18 12:34:35","modifiedFileCount":"34","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-08-18 12:34:35","codes":[{"authorDate":"2021-08-28 11:58:56","commitOrder":8,"curCode":"    public void assertBuild() {\n        DatabaseDiscoveryDataSourceRuleConfiguration dataSourceConfig = new DatabaseDiscoveryDataSourceRuleConfiguration(\"name\", Collections.singletonList(\"name\"), \"TEST\");\n        DatabaseDiscoveryRuleConfiguration config = new DatabaseDiscoveryRuleConfiguration(\n                Collections.singleton(dataSourceConfig), Collections.singletonMap(\"TEST\", new ShardingSphereAlgorithmConfiguration(\"TEST\", new Properties())));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(config)).get(config);\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"primaryDataSourceName\", mock(DataSource.class));\n        assertThat(builder.build(new ShardingSphereRulesBuilderMaterials(\"test_schema\", Collections.emptyList(), mock(DatabaseType.class),\n                dataSourceMap, new ConfigurationProperties(new Properties())), config, Collections.emptyList()), instanceOf(DatabaseDiscoveryRule.class));\n    }\n","date":"2021-08-28 11:58:56","endLine":59,"groupId":"7196","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/38/b0bfb183a2406611719499c019a585b4dcfb86.src","preCode":"    public void assertBuild() {\n        DatabaseDiscoveryRuleConfiguration ruleConfig = mock(DatabaseDiscoveryRuleConfiguration.class);\n        DatabaseDiscoveryDataSourceRuleConfiguration dataSourceRuleConfig = new DatabaseDiscoveryDataSourceRuleConfiguration(\"name\", Collections.singletonList(\"name\"), \"discoveryTypeName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(ruleConfig)).get(ruleConfig);\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"primaryDataSourceName\", mock(DataSource.class));\n        assertThat(builder.build(new ShardingSphereRulesBuilderMaterials(\"test_schema\", Collections.emptyList(), mock(DatabaseType.class),\n                dataSourceMap, new ConfigurationProperties(new Properties())), ruleConfig, Collections.emptyList()), instanceOf(DatabaseDiscoveryRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-core/src/test/java/org/apache/shardingsphere/dbdiscovery/rule/builder/DatabaseDiscoveryRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2021-08-18 12:34:35","commitOrder":8,"curCode":"    public void assertBuild() {\n        AlgorithmProvidedShardingRuleConfiguration ruleConfig = mock(AlgorithmProvidedShardingRuleConfiguration.class);\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(ruleConfig)).get(ruleConfig);\n        assertThat(builder.build(new ShardingSphereRulesBuilderMaterials(\"test_schema\", Collections.emptyList(), \n                mock(DatabaseType.class), Collections.singletonMap(\"name\", mock(DataSource.class, RETURNS_DEEP_STUBS)), \n                new ConfigurationProperties(new Properties())), ruleConfig, Collections.emptyList()), instanceOf(ShardingRule.class));\n    }\n","date":"2021-08-18 12:34:35","endLine":53,"groupId":"918","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4f/c2ff16fdd468c5081991af129c407d953daa61.src","preCode":"    public void assertBuild() {\n        AlgorithmProvidedShardingRuleConfiguration ruleConfig = mock(AlgorithmProvidedShardingRuleConfiguration.class);\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(ruleConfig)).get(ruleConfig);\n        assertThat(builder.build(new ShardingSphereRulesBuilderMaterials(\"test_schema\", Collections.emptyList(), \n                mock(DatabaseType.class), Collections.singletonMap(\"name\", mock(DataSource.class, RETURNS_DEEP_STUBS)), \n                new ConfigurationProperties(new Properties())), ruleConfig, Collections.emptyList()), instanceOf(ShardingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rule/builder/AlgorithmProvidedShardingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"}],"commitId":"8f4d55cfb1c346c0864d320c6b6e9bdaae3b38c4","commitMessage":"@@@Enhance of TypedSPI and RequiredSPI (#12074)\n\n","date":"2021-08-28 11:58:56","modifiedFileCount":"15","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-09-04 18:58:22","codes":[{"authorDate":"2021-09-04 18:58:22","commitOrder":9,"curCode":"    public void assertBuild() {\n        DatabaseDiscoveryDataSourceRuleConfiguration dataSourceConfig = new DatabaseDiscoveryDataSourceRuleConfiguration(\"name\", Collections.singletonList(\"name\"), \"TEST\");\n        DatabaseDiscoveryRuleConfiguration config = new DatabaseDiscoveryRuleConfiguration(\n                Collections.singleton(dataSourceConfig), Collections.singletonMap(\"TEST\", new ShardingSphereAlgorithmConfiguration(\"TEST\", new Properties())));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(config)).get(config);\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"primaryDataSourceName\", mock(DataSource.class));\n        assertThat(builder.build(new SchemaRulesBuilderMaterials(\"test_schema\", Collections.emptyList(), mock(DatabaseType.class),\n                dataSourceMap, new ConfigurationProperties(new Properties())), config, Collections.emptyList()), instanceOf(DatabaseDiscoveryRule.class));\n    }\n","date":"2021-09-04 18:58:22","endLine":59,"groupId":"10253","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c7/ca39175a7822d690d0bf9a486f8d2dd7fb62e3.src","preCode":"    public void assertBuild() {\n        DatabaseDiscoveryDataSourceRuleConfiguration dataSourceConfig = new DatabaseDiscoveryDataSourceRuleConfiguration(\"name\", Collections.singletonList(\"name\"), \"TEST\");\n        DatabaseDiscoveryRuleConfiguration config = new DatabaseDiscoveryRuleConfiguration(\n                Collections.singleton(dataSourceConfig), Collections.singletonMap(\"TEST\", new ShardingSphereAlgorithmConfiguration(\"TEST\", new Properties())));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(config)).get(config);\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"primaryDataSourceName\", mock(DataSource.class));\n        assertThat(builder.build(new ShardingSphereRulesBuilderMaterials(\"test_schema\", Collections.emptyList(), mock(DatabaseType.class),\n                dataSourceMap, new ConfigurationProperties(new Properties())), config, Collections.emptyList()), instanceOf(DatabaseDiscoveryRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-core/src/test/java/org/apache/shardingsphere/dbdiscovery/rule/builder/DatabaseDiscoveryRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2021-09-04 18:58:22","commitOrder":9,"curCode":"    public void assertBuild() {\n        AlgorithmProvidedShardingRuleConfiguration ruleConfig = mock(AlgorithmProvidedShardingRuleConfiguration.class);\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(ruleConfig)).get(ruleConfig);\n        assertThat(builder.build(new SchemaRulesBuilderMaterials(\"test_schema\", Collections.emptyList(), \n                mock(DatabaseType.class), Collections.singletonMap(\"name\", mock(DataSource.class, RETURNS_DEEP_STUBS)), \n                new ConfigurationProperties(new Properties())), ruleConfig, Collections.emptyList()), instanceOf(ShardingRule.class));\n    }\n","date":"2021-09-04 18:58:22","endLine":53,"groupId":"10253","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8e/59eb1bfa73607e6a8dff5aee55d7eb50aeb23d.src","preCode":"    public void assertBuild() {\n        AlgorithmProvidedShardingRuleConfiguration ruleConfig = mock(AlgorithmProvidedShardingRuleConfiguration.class);\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(ruleConfig)).get(ruleConfig);\n        assertThat(builder.build(new ShardingSphereRulesBuilderMaterials(\"test_schema\", Collections.emptyList(), \n                mock(DatabaseType.class), Collections.singletonMap(\"name\", mock(DataSource.class, RETURNS_DEEP_STUBS)), \n                new ConfigurationProperties(new Properties())), ruleConfig, Collections.emptyList()), instanceOf(ShardingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rule/builder/AlgorithmProvidedShardingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"a8c655eaf51f230c724274dc0c1d6ba775c73d40","commitMessage":"@@@Add shardingsphere-single-table into kernel module (#12210)\n\n* Rename SchemaRulesBuilderMaterials\n\n* Add shardingsphere-single-table\n\n* Add shardingsphere-single-table\n\n* Revise javadoc\n\n* Move MetadataRefresher.findShardingSphereRulesByClass to ShardingSphereSchema\n\n* Add MutableDataNodeRule\n\n* Add SingleTableSchemaBuilderTest\n\n* Move single table rule\n\n* Move single table configuration\n\n* Revise java doc","date":"2021-09-04 18:58:22","modifiedFileCount":"54","status":"M","submitter":"Liang Zhang"}]
