[{"authorTime":"2021-06-04 22:49:49","codes":[{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertNextForSkipAll() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(new MySQLSelectStatement(), \n                new GroupByContext(Collections.emptyList()), new OrderByContext(Collections.emptyList(), false),\n                new ProjectionsContext(0, 0, false, Collections.emptyList()), \n                new PaginationContext(new NumberLiteralLimitValueSegment(0, 0, Integer.MAX_VALUE), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(Arrays.asList(mockQueryResult(), mockQueryResult(), mockQueryResult(), mockQueryResult()), selectStatementContext, null);\n        assertFalse(actual.next());\n    }\n","date":"2021-06-04 22:49:49","endLine":54,"groupId":"10435","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertNextForSkipAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/eb/75260c293e7825115e2e04f1b2d97a09f0ba12.src","preCode":"    public void assertNextForSkipAll() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(new MySQLSelectStatement(), \n                new GroupByContext(Collections.emptyList()), new OrderByContext(Collections.emptyList(), false),\n                new ProjectionsContext(0, 0, false, Collections.emptyList()), \n                new PaginationContext(new NumberLiteralLimitValueSegment(0, 0, Integer.MAX_VALUE), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(Arrays.asList(mockQueryResult(), mockQueryResult(), mockQueryResult(), mockQueryResult()), selectStatementContext, null);\n        assertFalse(actual.next());\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/pagination/LimitDecoratorMergedResultTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertNextWithoutRowCount() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(new MySQLSelectStatement(), \n                new GroupByContext(Collections.emptyList()), new OrderByContext(Collections.emptyList(), false),\n                new ProjectionsContext(0, 0, false, Collections.emptyList()), \n                new PaginationContext(new NumberLiteralLimitValueSegment(0, 0, 2), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(Arrays.asList(mockQueryResult(), mockQueryResult(), mockQueryResult(), mockQueryResult()), selectStatementContext, null);\n        for (int i = 0; i < 6; i++) {\n            assertTrue(actual.next());\n        }\n        assertFalse(actual.next());\n    }\n","date":"2021-06-04 22:49:49","endLine":68,"groupId":"5391","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertNextWithoutRowCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/eb/75260c293e7825115e2e04f1b2d97a09f0ba12.src","preCode":"    public void assertNextWithoutRowCount() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(new MySQLSelectStatement(), \n                new GroupByContext(Collections.emptyList()), new OrderByContext(Collections.emptyList(), false),\n                new ProjectionsContext(0, 0, false, Collections.emptyList()), \n                new PaginationContext(new NumberLiteralLimitValueSegment(0, 0, 2), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(Arrays.asList(mockQueryResult(), mockQueryResult(), mockQueryResult(), mockQueryResult()), selectStatementContext, null);\n        for (int i = 0; i < 6; i++) {\n            assertTrue(actual.next());\n        }\n        assertFalse(actual.next());\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/pagination/LimitDecoratorMergedResultTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"}],"commitId":"6b157b44d0336e4d9c61f940b0ec19c26758af84","commitMessage":"@@@Merge sharding feature to core module (#10662)\n\n* Merge dependencies\n\n* Merge sharding feature to api module\n\n* Merge sharding feature to core module","date":"2021-06-04 22:49:49","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-08-06 15:37:24","codes":[{"authorDate":"2021-08-06 15:37:24","commitOrder":2,"curCode":"    public void assertNextForSkipAll() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n        MySQLSelectStatement selectStatement = new MySQLSelectStatement();\n        selectStatement.setProjections(new ProjectionsSegment(0, 0));\n        selectStatement.setLimit(new LimitSegment(0, 0, new NumberLiteralLimitValueSegment(0, 0, Integer.MAX_VALUE), null));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(Collections.singletonMap(DefaultSchema.LOGIC_NAME, metaData),\n                Collections.emptyList(), selectStatement, DefaultSchema.LOGIC_NAME);\n        MergedResult actual = resultMerger.merge(Arrays.asList(mockQueryResult(), mockQueryResult(), mockQueryResult(), mockQueryResult()), selectStatementContext, null);\n        assertFalse(actual.next());\n    }\n","date":"2021-08-06 15:37:24","endLine":56,"groupId":"10644","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertNextForSkipAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e7/5e020926aad03e1593d79612981c2a3e7ca357.src","preCode":"    public void assertNextForSkipAll() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(new MySQLSelectStatement(), \n                new GroupByContext(Collections.emptyList()), new OrderByContext(Collections.emptyList(), false),\n                new ProjectionsContext(0, 0, false, Collections.emptyList()), \n                new PaginationContext(new NumberLiteralLimitValueSegment(0, 0, Integer.MAX_VALUE), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(Arrays.asList(mockQueryResult(), mockQueryResult(), mockQueryResult(), mockQueryResult()), selectStatementContext, null);\n        assertFalse(actual.next());\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/pagination/LimitDecoratorMergedResultTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2021-08-06 15:37:24","commitOrder":2,"curCode":"    public void assertNextWithoutRowCount() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n        MySQLSelectStatement selectStatement = new MySQLSelectStatement();\n        selectStatement.setProjections(new ProjectionsSegment(0, 0));\n        selectStatement.setLimit(new LimitSegment(0, 0, new NumberLiteralLimitValueSegment(0, 0, 2), null));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(Collections.singletonMap(DefaultSchema.LOGIC_NAME, metaData), Collections.emptyList(),\n                selectStatement, DefaultSchema.LOGIC_NAME);\n        MergedResult actual = resultMerger.merge(Arrays.asList(mockQueryResult(), mockQueryResult(), mockQueryResult(), mockQueryResult()), selectStatementContext, null);\n        for (int i = 0; i < 6; i++) {\n            assertTrue(actual.next());\n        }\n        assertFalse(actual.next());\n    }\n","date":"2021-08-06 15:37:24","endLine":72,"groupId":"10644","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertNextWithoutRowCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e7/5e020926aad03e1593d79612981c2a3e7ca357.src","preCode":"    public void assertNextWithoutRowCount() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(new MySQLSelectStatement(), \n                new GroupByContext(Collections.emptyList()), new OrderByContext(Collections.emptyList(), false),\n                new ProjectionsContext(0, 0, false, Collections.emptyList()), \n                new PaginationContext(new NumberLiteralLimitValueSegment(0, 0, 2), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(Arrays.asList(mockQueryResult(), mockQueryResult(), mockQueryResult(), mockQueryResult()), selectStatementContext, null);\n        for (int i = 0; i < 6; i++) {\n            assertTrue(actual.next());\n        }\n        assertFalse(actual.next());\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/pagination/LimitDecoratorMergedResultTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"2843f408e67d98d3e62485c8ed89dbe08e9cb202","commitMessage":"@@@Remove test only constructor of SelectStatementContext (#11675)\n\n* TopAndRowNumberDecoratorMergedResultTest use SelectStatementContext's second constructor\n\n* PreparedShadowDataSourceRouterTest use SelectStatementContext's second constructor\n\n* GroupByMemoryMergedResultTest use SelectStatementContext's second constructor\n\n* GroupByRowComparatorTest use SelectStatementContext's second constructor\n\n* ShardingResultMergerEngineTest use SelectStatementContext's second constructor\n\n* ShardingDQLResultMergerTest use SelectStatementContext's second constructor\n\n* ShardingDQLResultMergerTest use SelectStatementContext's second constructor2\n\n* GroupByStreamMergedResultTest use SelectStatementContext's second constructor\n\n* IteratorStreamMergedResultTest use SelectStatementContext's second constructor\n\n* OrderByStreamMergedResultTest use SelectStatementContext's second constructor\n\n* SelectStatementContextTest use SelectStatementContext's second constructor\n\n* LimitDecoratorMergedResultTest use SelectStatementContext's second constructor\n\n* RowNumberDecoratorMergedResultTest use SelectStatementContext's second constructor\n\n* OrderByValueTest use SelectStatementContext's second constructor\n\n* code style\n\n* merge code","date":"2021-08-06 15:37:24","modifiedFileCount":"14","status":"M","submitter":"liguoping"}]
