[{"authorTime":"2020-10-22 20:53:42","codes":[{"authorDate":"2020-10-22 20:53:42","commitOrder":1,"curCode":"    public final ASTNode visitExpr(final ExprContext ctx) {\n        if (null != ctx.booleanPrimary()) {\n            return visit(ctx.booleanPrimary());\n        }\n        if (null != ctx.XOR()) {\n            ExpressionSegment left = (ExpressionSegment) visit(ctx.expr(0));\n            ExpressionSegment right = (ExpressionSegment) visit(ctx.expr(1));\n            String operator = \"XOR\";\n            String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(), ctx.stop.getStopIndex()));\n            BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), left, right, operator, text);\n    \n            return result;\n        }\n        if (null != ctx.logicalOperator()) {\n            String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(), ctx.stop.getStopIndex()));\n            BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), (ExpressionSegment) visit(ctx.expr(0)),\n                    (ExpressionSegment) visit(ctx.expr(1)), ctx.logicalOperator().getText(), text);\n    \n            return result;\n        }\n        NotExpression result = new NotExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), (ExpressionSegment) visit(ctx.expr(0)));\n        return result;\n    }\n","date":"2020-10-22 20:53:42","endLine":322,"groupId":"3290","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"visitExpr","params":"(finalExprContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0a/89cc0e02e2670f6f8473ef3801a86053637eba.src","preCode":"    public final ASTNode visitExpr(final ExprContext ctx) {\n        if (null != ctx.booleanPrimary()) {\n            return visit(ctx.booleanPrimary());\n        }\n        if (null != ctx.XOR()) {\n            ExpressionSegment left = (ExpressionSegment) visit(ctx.expr(0));\n            ExpressionSegment right = (ExpressionSegment) visit(ctx.expr(1));\n            String operator = \"XOR\";\n            String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(), ctx.stop.getStopIndex()));\n            BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), left, right, operator, text);\n    \n            return result;\n        }\n        if (null != ctx.logicalOperator()) {\n            String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(), ctx.stop.getStopIndex()));\n            BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), (ExpressionSegment) visit(ctx.expr(0)),\n                    (ExpressionSegment) visit(ctx.expr(1)), ctx.logicalOperator().getText(), text);\n    \n            return result;\n        }\n        NotExpression result = new NotExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), (ExpressionSegment) visit(ctx.expr(0)));\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"B"},{"authorDate":"2020-10-22 20:53:42","commitOrder":1,"curCode":"    public final ASTNode visitExpr(final ExprContext ctx) {\n        if (null != ctx.booleanPrimary()) {\n            return visit(ctx.booleanPrimary());\n        }\n        if (null != ctx.LP_()) {\n            return visit(ctx.expr(0));\n        }\n        if (null != ctx.logicalOperator()) {\n            ExpressionSegment left = (ExpressionSegment) visit(ctx.expr(0));\n            ExpressionSegment right = (ExpressionSegment) visit(ctx.expr(1));\n            String operator = ctx.logicalOperator().getText();\n            String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(), ctx.stop.getStopIndex()));\n            BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), left, right, operator, text);\n            return result;\n        }\n        NotExpression result = new NotExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), (ExpressionSegment) visit(ctx.expr(0)));\n        return result;\n    }\n","date":"2020-10-22 20:53:42","endLine":257,"groupId":"9622","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"visitExpr","params":"(finalExprContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d2/e15c503fad699f0ee0c02d397eedfdb12b8071.src","preCode":"    public final ASTNode visitExpr(final ExprContext ctx) {\n        if (null != ctx.booleanPrimary()) {\n            return visit(ctx.booleanPrimary());\n        }\n        if (null != ctx.LP_()) {\n            return visit(ctx.expr(0));\n        }\n        if (null != ctx.logicalOperator()) {\n            ExpressionSegment left = (ExpressionSegment) visit(ctx.expr(0));\n            ExpressionSegment right = (ExpressionSegment) visit(ctx.expr(1));\n            String operator = ctx.logicalOperator().getText();\n            String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(), ctx.stop.getStopIndex()));\n            BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), left, right, operator, text);\n            return result;\n        }\n        NotExpression result = new NotExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), (ExpressionSegment) visit(ctx.expr(0)));\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/statement/impl/SQLServerStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"B"}],"commitId":"07d1a8f96418e776a4e44de6610500f428d2c30b","commitMessage":"@@@refactor SQLVisitorFacadeFactory (#7891)\n\n","date":"2020-10-22 20:53:42","modifiedFileCount":"21","status":"B","submitter":"Juan Pan(Trista)"},{"authorTime":"2020-11-01 14:32:14","codes":[{"authorDate":"2020-11-01 14:32:14","commitOrder":2,"curCode":"    public final ASTNode visitExpr(final ExprContext ctx) {\n        if (null != ctx.booleanPrimary()) {\n            return visit(ctx.booleanPrimary());\n        }\n        if (null != ctx.XOR()) {\n            ExpressionSegment left = (ExpressionSegment) visit(ctx.expr(0));\n            ExpressionSegment right = (ExpressionSegment) visit(ctx.expr(1));\n            String operator = \"XOR\";\n            String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(), ctx.stop.getStopIndex()));\n            return new BinaryOperationExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), left, right, operator, text);\n        }\n        if (null != ctx.logicalOperator()) {\n            String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(), ctx.stop.getStopIndex()));\n            return new BinaryOperationExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), (ExpressionSegment) visit(ctx.expr(0)),\n                    (ExpressionSegment) visit(ctx.expr(1)), ctx.logicalOperator().getText(), text);\n        }\n        return new NotExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), (ExpressionSegment) visit(ctx.expr(0)));\n    }\n","date":"2020-11-01 14:32:14","endLine":317,"groupId":"3290","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"visitExpr","params":"(finalExprContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/21/d30c68bccd585500d3b25952c4d250f3bc9d2c.src","preCode":"    public final ASTNode visitExpr(final ExprContext ctx) {\n        if (null != ctx.booleanPrimary()) {\n            return visit(ctx.booleanPrimary());\n        }\n        if (null != ctx.XOR()) {\n            ExpressionSegment left = (ExpressionSegment) visit(ctx.expr(0));\n            ExpressionSegment right = (ExpressionSegment) visit(ctx.expr(1));\n            String operator = \"XOR\";\n            String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(), ctx.stop.getStopIndex()));\n            BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), left, right, operator, text);\n    \n            return result;\n        }\n        if (null != ctx.logicalOperator()) {\n            String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(), ctx.stop.getStopIndex()));\n            BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), (ExpressionSegment) visit(ctx.expr(0)),\n                    (ExpressionSegment) visit(ctx.expr(1)), ctx.logicalOperator().getText(), text);\n    \n            return result;\n        }\n        NotExpression result = new NotExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), (ExpressionSegment) visit(ctx.expr(0)));\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"},{"authorDate":"2020-11-01 14:32:14","commitOrder":2,"curCode":"    public final ASTNode visitExpr(final ExprContext ctx) {\n        if (null != ctx.booleanPrimary()) {\n            return visit(ctx.booleanPrimary());\n        }\n        if (null != ctx.LP_()) {\n            return visit(ctx.expr(0));\n        }\n        if (null != ctx.logicalOperator()) {\n            ExpressionSegment left = (ExpressionSegment) visit(ctx.expr(0));\n            ExpressionSegment right = (ExpressionSegment) visit(ctx.expr(1));\n            String operator = ctx.logicalOperator().getText();\n            String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(), ctx.stop.getStopIndex()));\n            return new BinaryOperationExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), left, right, operator, text);\n        }\n        return new NotExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), (ExpressionSegment) visit(ctx.expr(0)));\n    }\n","date":"2020-11-01 14:32:14","endLine":255,"groupId":"12280","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"visitExpr","params":"(finalExprContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/aa/fade47bfb9b4768bf12e30db28682f53f7750f.src","preCode":"    public final ASTNode visitExpr(final ExprContext ctx) {\n        if (null != ctx.booleanPrimary()) {\n            return visit(ctx.booleanPrimary());\n        }\n        if (null != ctx.LP_()) {\n            return visit(ctx.expr(0));\n        }\n        if (null != ctx.logicalOperator()) {\n            ExpressionSegment left = (ExpressionSegment) visit(ctx.expr(0));\n            ExpressionSegment right = (ExpressionSegment) visit(ctx.expr(1));\n            String operator = ctx.logicalOperator().getText();\n            String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(), ctx.stop.getStopIndex()));\n            BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), left, right, operator, text);\n            return result;\n        }\n        NotExpression result = new NotExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), (ExpressionSegment) visit(ctx.expr(0)));\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/statement/impl/SQLServerStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"}],"commitId":"5d7ca41942d298dad2cc0d8efc5fc5c6872e2aec","commitMessage":"@@@Fix checkstyle (#8001)\n\n","date":"2020-11-01 14:32:14","modifiedFileCount":"16","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-25 16:59:50","codes":[{"authorDate":"2021-08-25 16:59:50","commitOrder":3,"curCode":"    public final ASTNode visitExpr(final ExprContext ctx) {\n        if (null != ctx.booleanPrimary()) {\n            return visit(ctx.booleanPrimary());\n        }\n        if (null != ctx.XOR()) {\n            return createBinaryOperationExpression(ctx, \"XOR\");\n        }\n        if (null != ctx.andOperator()) {\n            return createBinaryOperationExpression(ctx, ctx.andOperator().getText());\n        }\n        if (null != ctx.orOperator()) {\n            return createBinaryOperationExpression(ctx, ctx.orOperator().getText());\n        }\n        return new NotExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), (ExpressionSegment) visit(ctx.expr(0)));\n    }\n","date":"2021-08-25 16:59:50","endLine":366,"groupId":"101592","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"visitExpr","params":"(finalExprContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/eb/5264e974686c6281fbfb6f38546497d383aa46.src","preCode":"    public final ASTNode visitExpr(final ExprContext ctx) {\n        if (null != ctx.booleanPrimary()) {\n            return visit(ctx.booleanPrimary());\n        }\n        if (null != ctx.XOR()) {\n            ExpressionSegment left = (ExpressionSegment) visit(ctx.expr(0));\n            ExpressionSegment right = (ExpressionSegment) visit(ctx.expr(1));\n            String operator = \"XOR\";\n            String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(), ctx.stop.getStopIndex()));\n            return new BinaryOperationExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), left, right, operator, text);\n        }\n        if (null != ctx.logicalOperator()) {\n            String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(), ctx.stop.getStopIndex()));\n            return new BinaryOperationExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), (ExpressionSegment) visit(ctx.expr(0)),\n                    (ExpressionSegment) visit(ctx.expr(1)), ctx.logicalOperator().getText(), text);\n        }\n        return new NotExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), (ExpressionSegment) visit(ctx.expr(0)));\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"M"},{"authorDate":"2021-08-25 16:59:50","commitOrder":3,"curCode":"    public final ASTNode visitExpr(final ExprContext ctx) {\n        if (null != ctx.booleanPrimary()) {\n            return visit(ctx.booleanPrimary());\n        }\n        if (null != ctx.LP_()) {\n            return visit(ctx.expr(0));\n        }\n        if (null != ctx.andOperator()) {\n            return createBinaryOperationExpression(ctx, ctx.andOperator().getText());\n        }\n        if (null != ctx.orOperator()) {\n            return createBinaryOperationExpression(ctx, ctx.orOperator().getText());\n        }\n        return new NotExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), (ExpressionSegment) visit(ctx.expr(0)));\n    }\n","date":"2021-08-25 16:59:50","endLine":267,"groupId":"101592","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"visitExpr","params":"(finalExprContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d2/9ebb940edbd1550cafdde211d4ef78dc0291a8.src","preCode":"    public final ASTNode visitExpr(final ExprContext ctx) {\n        if (null != ctx.booleanPrimary()) {\n            return visit(ctx.booleanPrimary());\n        }\n        if (null != ctx.LP_()) {\n            return visit(ctx.expr(0));\n        }\n        if (null != ctx.logicalOperator()) {\n            ExpressionSegment left = (ExpressionSegment) visit(ctx.expr(0));\n            ExpressionSegment right = (ExpressionSegment) visit(ctx.expr(1));\n            String operator = ctx.logicalOperator().getText();\n            String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(), ctx.stop.getStopIndex()));\n            return new BinaryOperationExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), left, right, operator, text);\n        }\n        return new NotExpression(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), (ExpressionSegment) visit(ctx.expr(0)));\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/statement/impl/SQLServerStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"}],"commitId":"327e282038ba350fca335b33cb3e979e179b7cf8","commitMessage":"@@@optimize and or condition parse and extract logic (#11996)\n\n* optimize and or condition parse and extract logic\n\n* fix checkstyle\n\n* optimize extract logic","date":"2021-08-25 16:59:50","modifiedFileCount":"14","status":"M","submitter":"Zhengqiang Duan"}]
