[{"authorTime":"2021-06-04 22:49:49","codes":[{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    private void assertCompareToForAscWithGroupByItems(final SelectStatement selectStatement) throws SQLException {\n        SelectStatementContext selectStatementContext = new SelectStatementContext(selectStatement, \n                new GroupByContext(Arrays.asList(\n                        createOrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.ASC)),\n                        createOrderByItem(new IndexOrderByItemSegment(0, 0, 2, OrderDirection.ASC, OrderDirection.ASC)))), new OrderByContext(Collections.emptyList(), false),\n                new ProjectionsContext(0, 0, false, Collections.emptyList()), new PaginationContext(null, null, Collections.emptyList()));\n        GroupByRowComparator groupByRowComparator = new GroupByRowComparator(selectStatementContext, caseSensitives);\n        MemoryQueryResultRow o1 = new MemoryQueryResultRow(mockQueryResult(\"1\", \"2\"));\n        MemoryQueryResultRow o2 = new MemoryQueryResultRow(mockQueryResult(\"3\", \"4\"));\n        assertTrue(groupByRowComparator.compare(o1, o2) < 0);\n    }\n","date":"2021-06-04 22:49:49","endLine":212,"groupId":"13760","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertCompareToForAscWithGroupByItems","params":"(finalSelectStatementselectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/24/e2db1b92e48434f14c72691f286810240bdc8f.src","preCode":"    private void assertCompareToForAscWithGroupByItems(final SelectStatement selectStatement) throws SQLException {\n        SelectStatementContext selectStatementContext = new SelectStatementContext(selectStatement, \n                new GroupByContext(Arrays.asList(\n                        createOrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.ASC)),\n                        createOrderByItem(new IndexOrderByItemSegment(0, 0, 2, OrderDirection.ASC, OrderDirection.ASC)))), new OrderByContext(Collections.emptyList(), false),\n                new ProjectionsContext(0, 0, false, Collections.emptyList()), new PaginationContext(null, null, Collections.emptyList()));\n        GroupByRowComparator groupByRowComparator = new GroupByRowComparator(selectStatementContext, caseSensitives);\n        MemoryQueryResultRow o1 = new MemoryQueryResultRow(mockQueryResult(\"1\", \"2\"));\n        MemoryQueryResultRow o2 = new MemoryQueryResultRow(mockQueryResult(\"3\", \"4\"));\n        assertTrue(groupByRowComparator.compare(o1, o2) < 0);\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/groupby/GroupByRowComparatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"B"},{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    private void assertCompareToForEqualWithGroupByItems(final SelectStatement selectStatement) throws SQLException {\n        SelectStatementContext selectStatementContext = new SelectStatementContext(selectStatement, \n                new GroupByContext(Arrays.asList(\n                        createOrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.ASC)),\n                        createOrderByItem(new IndexOrderByItemSegment(0, 0, 2, OrderDirection.DESC, OrderDirection.ASC)))), new OrderByContext(Collections.emptyList(), false),\n                new ProjectionsContext(0, 0, false, Collections.emptyList()), new PaginationContext(null, null, Collections.emptyList()));\n        GroupByRowComparator groupByRowComparator = new GroupByRowComparator(selectStatementContext, caseSensitives);\n        MemoryQueryResultRow o1 = new MemoryQueryResultRow(mockQueryResult(\"1\", \"2\"));\n        MemoryQueryResultRow o2 = new MemoryQueryResultRow(mockQueryResult(\"1\", \"2\"));\n        assertThat(groupByRowComparator.compare(o1, o2), is(0));\n    }\n","date":"2021-06-04 22:49:49","endLine":286,"groupId":"13760","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertCompareToForEqualWithGroupByItems","params":"(finalSelectStatementselectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/24/e2db1b92e48434f14c72691f286810240bdc8f.src","preCode":"    private void assertCompareToForEqualWithGroupByItems(final SelectStatement selectStatement) throws SQLException {\n        SelectStatementContext selectStatementContext = new SelectStatementContext(selectStatement, \n                new GroupByContext(Arrays.asList(\n                        createOrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.ASC)),\n                        createOrderByItem(new IndexOrderByItemSegment(0, 0, 2, OrderDirection.DESC, OrderDirection.ASC)))), new OrderByContext(Collections.emptyList(), false),\n                new ProjectionsContext(0, 0, false, Collections.emptyList()), new PaginationContext(null, null, Collections.emptyList()));\n        GroupByRowComparator groupByRowComparator = new GroupByRowComparator(selectStatementContext, caseSensitives);\n        MemoryQueryResultRow o1 = new MemoryQueryResultRow(mockQueryResult(\"1\", \"2\"));\n        MemoryQueryResultRow o2 = new MemoryQueryResultRow(mockQueryResult(\"1\", \"2\"));\n        assertThat(groupByRowComparator.compare(o1, o2), is(0));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/groupby/GroupByRowComparatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"B"}],"commitId":"6b157b44d0336e4d9c61f940b0ec19c26758af84","commitMessage":"@@@Merge sharding feature to core module (#10662)\n\n* Merge dependencies\n\n* Merge sharding feature to api module\n\n* Merge sharding feature to core module","date":"2021-06-04 22:49:49","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-08-06 15:37:24","codes":[{"authorDate":"2021-08-06 15:37:24","commitOrder":2,"curCode":"    private void assertCompareToForAscWithGroupByItems(final SelectStatement selectStatement) throws SQLException {\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n        when(metaData.getSchema()).thenReturn(mock(ShardingSphereSchema.class));\n        selectStatement.setGroupBy(new GroupBySegment(0, 0, Arrays.asList(\n                new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.ASC),\n                new IndexOrderByItemSegment(0, 0, 2, OrderDirection.ASC, OrderDirection.ASC))));\n        selectStatement.setOrderBy(new OrderBySegment(0, 0, Collections.emptyList()));\n        selectStatement.setProjections(new ProjectionsSegment(0, 0));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(Collections.singletonMap(DefaultSchema.LOGIC_NAME, metaData), Collections.emptyList(),\n                selectStatement, DefaultSchema.LOGIC_NAME);\n        GroupByRowComparator groupByRowComparator = new GroupByRowComparator(selectStatementContext, caseSensitives);\n        MemoryQueryResultRow o1 = new MemoryQueryResultRow(mockQueryResult(\"1\", \"2\"));\n        MemoryQueryResultRow o2 = new MemoryQueryResultRow(mockQueryResult(\"3\", \"4\"));\n        assertTrue(groupByRowComparator.compare(o1, o2) < 0);\n    }\n","date":"2021-08-06 15:37:24","endLine":228,"groupId":"10681","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertCompareToForAscWithGroupByItems","params":"(finalSelectStatementselectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9c/dfa1fbe29d2fca2dbe70e6cc8f477a34542e0e.src","preCode":"    private void assertCompareToForAscWithGroupByItems(final SelectStatement selectStatement) throws SQLException {\n        SelectStatementContext selectStatementContext = new SelectStatementContext(selectStatement, \n                new GroupByContext(Arrays.asList(\n                        createOrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.ASC)),\n                        createOrderByItem(new IndexOrderByItemSegment(0, 0, 2, OrderDirection.ASC, OrderDirection.ASC)))), new OrderByContext(Collections.emptyList(), false),\n                new ProjectionsContext(0, 0, false, Collections.emptyList()), new PaginationContext(null, null, Collections.emptyList()));\n        GroupByRowComparator groupByRowComparator = new GroupByRowComparator(selectStatementContext, caseSensitives);\n        MemoryQueryResultRow o1 = new MemoryQueryResultRow(mockQueryResult(\"1\", \"2\"));\n        MemoryQueryResultRow o2 = new MemoryQueryResultRow(mockQueryResult(\"3\", \"4\"));\n        assertTrue(groupByRowComparator.compare(o1, o2) < 0);\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/groupby/GroupByRowComparatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2021-08-06 15:37:24","commitOrder":2,"curCode":"    private void assertCompareToForEqualWithGroupByItems(final SelectStatement selectStatement) throws SQLException {\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n        when(metaData.getSchema()).thenReturn(mock(ShardingSphereSchema.class));\n        selectStatement.setGroupBy(new GroupBySegment(0, 0, Arrays.asList(\n                new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.ASC),\n                new IndexOrderByItemSegment(0, 0, 2, OrderDirection.DESC, OrderDirection.ASC))));\n        selectStatement.setOrderBy(new OrderBySegment(0, 0, Collections.emptyList()));\n        selectStatement.setProjections(new ProjectionsSegment(0, 0));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(Collections.singletonMap(DefaultSchema.LOGIC_NAME, metaData), Collections.emptyList(),\n                selectStatement, DefaultSchema.LOGIC_NAME);\n        GroupByRowComparator groupByRowComparator = new GroupByRowComparator(selectStatementContext, caseSensitives);\n        MemoryQueryResultRow o1 = new MemoryQueryResultRow(mockQueryResult(\"1\", \"2\"));\n        MemoryQueryResultRow o2 = new MemoryQueryResultRow(mockQueryResult(\"1\", \"2\"));\n        assertThat(groupByRowComparator.compare(o1, o2), is(0));\n    }\n","date":"2021-08-06 15:37:24","endLine":310,"groupId":"10681","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertCompareToForEqualWithGroupByItems","params":"(finalSelectStatementselectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9c/dfa1fbe29d2fca2dbe70e6cc8f477a34542e0e.src","preCode":"    private void assertCompareToForEqualWithGroupByItems(final SelectStatement selectStatement) throws SQLException {\n        SelectStatementContext selectStatementContext = new SelectStatementContext(selectStatement, \n                new GroupByContext(Arrays.asList(\n                        createOrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.ASC)),\n                        createOrderByItem(new IndexOrderByItemSegment(0, 0, 2, OrderDirection.DESC, OrderDirection.ASC)))), new OrderByContext(Collections.emptyList(), false),\n                new ProjectionsContext(0, 0, false, Collections.emptyList()), new PaginationContext(null, null, Collections.emptyList()));\n        GroupByRowComparator groupByRowComparator = new GroupByRowComparator(selectStatementContext, caseSensitives);\n        MemoryQueryResultRow o1 = new MemoryQueryResultRow(mockQueryResult(\"1\", \"2\"));\n        MemoryQueryResultRow o2 = new MemoryQueryResultRow(mockQueryResult(\"1\", \"2\"));\n        assertThat(groupByRowComparator.compare(o1, o2), is(0));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/groupby/GroupByRowComparatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"M"}],"commitId":"2843f408e67d98d3e62485c8ed89dbe08e9cb202","commitMessage":"@@@Remove test only constructor of SelectStatementContext (#11675)\n\n* TopAndRowNumberDecoratorMergedResultTest use SelectStatementContext's second constructor\n\n* PreparedShadowDataSourceRouterTest use SelectStatementContext's second constructor\n\n* GroupByMemoryMergedResultTest use SelectStatementContext's second constructor\n\n* GroupByRowComparatorTest use SelectStatementContext's second constructor\n\n* ShardingResultMergerEngineTest use SelectStatementContext's second constructor\n\n* ShardingDQLResultMergerTest use SelectStatementContext's second constructor\n\n* ShardingDQLResultMergerTest use SelectStatementContext's second constructor2\n\n* GroupByStreamMergedResultTest use SelectStatementContext's second constructor\n\n* IteratorStreamMergedResultTest use SelectStatementContext's second constructor\n\n* OrderByStreamMergedResultTest use SelectStatementContext's second constructor\n\n* SelectStatementContextTest use SelectStatementContext's second constructor\n\n* LimitDecoratorMergedResultTest use SelectStatementContext's second constructor\n\n* RowNumberDecoratorMergedResultTest use SelectStatementContext's second constructor\n\n* OrderByValueTest use SelectStatementContext's second constructor\n\n* code style\n\n* merge code","date":"2021-08-06 15:37:24","modifiedFileCount":"14","status":"M","submitter":"liguoping"}]
