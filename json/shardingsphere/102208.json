[{"authorTime":"2021-01-12 10:35:24","codes":[{"authorDate":"2021-01-12 10:35:24","commitOrder":1,"curCode":"    public Object intercept(@This final Object target, @Origin final Method method, @AllArguments final Object[] args, @SuperCall final Callable<?> callable) {\n        AdviceTargetObject instance = (AdviceTargetObject) target;\n        MethodInvocationResult methodResult = new MethodInvocationResult();\n        Object result;\n        try {\n            instanceMethodAroundAdvice.beforeMethod(instance, method, args, methodResult);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            log.error(\"Failed to execute the pre-method of method[{}] in class[{}].\", method.getName(), target.getClass(), ex);\n        }\n        try {\n            if (methodResult.isRebased()) {\n                result = methodResult.getResult();\n            } else {\n                result = callable.call();\n            }\n            methodResult.rebase(result);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            try {\n                instanceMethodAroundAdvice.onThrowing(instance, method, args, ex);\n                \r\n            } catch (final Throwable ignored) {\n                \r\n                log.error(\"Failed to execute the error handler of method[{}] in class[{}].\", method.getName(), target.getClass(), ex);\n            }\n            throw ex;\n        } finally {\n            try {\n                instanceMethodAroundAdvice.afterMethod(instance, method, args, methodResult);\n                \r\n            } catch (final Throwable ex) {\n                \r\n                log.error(\"Failed to execute the post-method of method[{}] in class[{}].\", method.getName(), target.getClass(), ex);\n            }\n        }\n        return result;\n    }\n","date":"2021-01-12 10:35:24","endLine":95,"groupId":"1668","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"intercept","params":"(@ThisfinalObjecttarget@@OriginfinalMethodmethod@@AllArgumentsfinalObject[]args@@SuperCallfinalCallable<?>callable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d6/e10f377a80f9f472e408ec2adb857f30c0c610.src","preCode":"    public Object intercept(@This final Object target, @Origin final Method method, @AllArguments final Object[] args, @SuperCall final Callable<?> callable) {\n        AdviceTargetObject instance = (AdviceTargetObject) target;\n        MethodInvocationResult methodResult = new MethodInvocationResult();\n        Object result;\n        try {\n            instanceMethodAroundAdvice.beforeMethod(instance, method, args, methodResult);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            log.error(\"Failed to execute the pre-method of method[{}] in class[{}].\", method.getName(), target.getClass(), ex);\n        }\n        try {\n            if (methodResult.isRebased()) {\n                result = methodResult.getResult();\n            } else {\n                result = callable.call();\n            }\n            methodResult.rebase(result);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            try {\n                instanceMethodAroundAdvice.onThrowing(instance, method, args, ex);\n                \r\n            } catch (final Throwable ignored) {\n                \r\n                log.error(\"Failed to execute the error handler of method[{}] in class[{}].\", method.getName(), target.getClass(), ex);\n            }\n            throw ex;\n        } finally {\n            try {\n                instanceMethodAroundAdvice.afterMethod(instance, method, args, methodResult);\n                \r\n            } catch (final Throwable ex) {\n                \r\n                log.error(\"Failed to execute the post-method of method[{}] in class[{}].\", method.getName(), target.getClass(), ex);\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/interceptor/InstanceMethodAroundInterceptor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"},{"authorDate":"2021-01-12 10:35:24","commitOrder":1,"curCode":"    public Object intercept(@Origin final Class<?> klass, @Origin final Method method, @AllArguments final Object[] args, @SuperCall final Callable<?> callable) {\n        MethodInvocationResult invocationResult = new MethodInvocationResult();\n        Object result;\n        try {\n            classStaticMethodAroundAdvice.beforeMethod(klass, method, args, invocationResult);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            log.error(\"Failed to execute the pre-method of method[{}] in class[{}].\", method.getName(), klass, ex);\n        }\n        try {\n            if (invocationResult.isRebased()) {\n                result = invocationResult.getResult();\n            } else {\n                result = callable.call();\n            }\n            invocationResult.rebase(result);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            try {\n                classStaticMethodAroundAdvice.onThrowing(klass, method, args, ex);\n                \r\n            } catch (final Throwable ignored) {\n                \r\n                log.error(\"Failed to execute the error handler of method[{}] in class[{}].\", method.getName(), klass, ex);\n            }\n            throw ex;\n        } finally {\n            try {\n                classStaticMethodAroundAdvice.afterMethod(klass, method, args, invocationResult);\n                \r\n            } catch (final Throwable ex) {\n                \r\n                log.error(\"Failed to execute the post-method of method[{}] in class[{}].\", method.getName(), klass, ex);\n            }\n        }\n        return result;\n    }\n","date":"2021-01-12 10:35:24","endLine":92,"groupId":"7409","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"intercept","params":"(@OriginfinalClass<?>klass@@OriginfinalMethodmethod@@AllArgumentsfinalObject[]args@@SuperCallfinalCallable<?>callable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1e/c6cc3ed21f2c17fed89e68d53327772af35b93.src","preCode":"    public Object intercept(@Origin final Class<?> klass, @Origin final Method method, @AllArguments final Object[] args, @SuperCall final Callable<?> callable) {\n        MethodInvocationResult invocationResult = new MethodInvocationResult();\n        Object result;\n        try {\n            classStaticMethodAroundAdvice.beforeMethod(klass, method, args, invocationResult);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            log.error(\"Failed to execute the pre-method of method[{}] in class[{}].\", method.getName(), klass, ex);\n        }\n        try {\n            if (invocationResult.isRebased()) {\n                result = invocationResult.getResult();\n            } else {\n                result = callable.call();\n            }\n            invocationResult.rebase(result);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            try {\n                classStaticMethodAroundAdvice.onThrowing(klass, method, args, ex);\n                \r\n            } catch (final Throwable ignored) {\n                \r\n                log.error(\"Failed to execute the error handler of method[{}] in class[{}].\", method.getName(), klass, ex);\n            }\n            throw ex;\n        } finally {\n            try {\n                classStaticMethodAroundAdvice.afterMethod(klass, method, args, invocationResult);\n                \r\n            } catch (final Throwable ex) {\n                \r\n                log.error(\"Failed to execute the post-method of method[{}] in class[{}].\", method.getName(), klass, ex);\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/interceptor/ClassStaticMethodAroundInterceptor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"}],"commitId":"c75652dbf13f60b4572abc2f7a68c24bb84e6bd4","commitMessage":"@@@support to instrument the same method repeatedly (#8986)\n\n* support to instrument the same method repeatedly\n\n* fix wrong hand","date":"2021-01-12 10:35:24","modifiedFileCount":"32","status":"B","submitter":"Daming"},{"authorTime":"2021-07-28 10:08:32","codes":[{"authorDate":"2021-07-28 10:08:32","commitOrder":2,"curCode":"    public Object intercept(@This final Object target, @Origin final Method method, @AllArguments final Object[] args, @SuperCall final Callable<?> callable) {\n        AdviceTargetObject instance = (AdviceTargetObject) target;\n        MethodInvocationResult methodResult = new MethodInvocationResult();\n        Object result;\n        try {\n            instanceMethodAroundAdvice.beforeMethod(instance, method, args, methodResult);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            log.error(\"Failed to execute the pre-method of method[{}] in class[{}]\", method.getName(), target.getClass(), ex);\n        }\n        try {\n            if (methodResult.isRebased()) {\n                result = methodResult.getResult();\n            } else {\n                result = callable.call();\n            }\n            methodResult.rebase(result);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            try {\n                instanceMethodAroundAdvice.onThrowing(instance, method, args, ex);\n                \r\n            } catch (final Throwable ignored) {\n                \r\n                log.error(\"Failed to execute the error handler of method[{}] in class[{}]\", method.getName(), target.getClass(), ex);\n            }\n            throw ex;\n        } finally {\n            try {\n                instanceMethodAroundAdvice.afterMethod(instance, method, args, methodResult);\n                \r\n            } catch (final Throwable ex) {\n                \r\n                log.error(\"Failed to execute the post-method of method[{}] in class[{}]\", method.getName(), target.getClass(), ex);\n            }\n        }\n        return result;\n    }\n","date":"2021-07-28 10:08:32","endLine":95,"groupId":"1668","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"intercept","params":"(@ThisfinalObjecttarget@@OriginfinalMethodmethod@@AllArgumentsfinalObject[]args@@SuperCallfinalCallable<?>callable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/26/9b0d136c358faf17a787151cd5943d06fc8a16.src","preCode":"    public Object intercept(@This final Object target, @Origin final Method method, @AllArguments final Object[] args, @SuperCall final Callable<?> callable) {\n        AdviceTargetObject instance = (AdviceTargetObject) target;\n        MethodInvocationResult methodResult = new MethodInvocationResult();\n        Object result;\n        try {\n            instanceMethodAroundAdvice.beforeMethod(instance, method, args, methodResult);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            log.error(\"Failed to execute the pre-method of method[{}] in class[{}].\", method.getName(), target.getClass(), ex);\n        }\n        try {\n            if (methodResult.isRebased()) {\n                result = methodResult.getResult();\n            } else {\n                result = callable.call();\n            }\n            methodResult.rebase(result);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            try {\n                instanceMethodAroundAdvice.onThrowing(instance, method, args, ex);\n                \r\n            } catch (final Throwable ignored) {\n                \r\n                log.error(\"Failed to execute the error handler of method[{}] in class[{}].\", method.getName(), target.getClass(), ex);\n            }\n            throw ex;\n        } finally {\n            try {\n                instanceMethodAroundAdvice.afterMethod(instance, method, args, methodResult);\n                \r\n            } catch (final Throwable ex) {\n                \r\n                log.error(\"Failed to execute the post-method of method[{}] in class[{}].\", method.getName(), target.getClass(), ex);\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/interceptor/InstanceMethodAroundInterceptor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2021-07-28 10:08:32","commitOrder":2,"curCode":"    public Object intercept(@Origin final Class<?> klass, @Origin final Method method, @AllArguments final Object[] args, @SuperCall final Callable<?> callable) {\n        MethodInvocationResult invocationResult = new MethodInvocationResult();\n        Object result;\n        try {\n            classStaticMethodAroundAdvice.beforeMethod(klass, method, args, invocationResult);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            log.error(\"Failed to execute the pre-method of method[{}] in class[{}]\", method.getName(), klass, ex);\n        }\n        try {\n            if (invocationResult.isRebased()) {\n                result = invocationResult.getResult();\n            } else {\n                result = callable.call();\n            }\n            invocationResult.rebase(result);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            try {\n                classStaticMethodAroundAdvice.onThrowing(klass, method, args, ex);\n                \r\n            } catch (final Throwable ignored) {\n                \r\n                log.error(\"Failed to execute the error handler of method[{}] in class[{}]\", method.getName(), klass, ex);\n            }\n            throw ex;\n        } finally {\n            try {\n                classStaticMethodAroundAdvice.afterMethod(klass, method, args, invocationResult);\n                \r\n            } catch (final Throwable ex) {\n                \r\n                log.error(\"Failed to execute the post-method of method[{}] in class[{}]\", method.getName(), klass, ex);\n            }\n        }\n        return result;\n    }\n","date":"2021-07-28 10:08:32","endLine":92,"groupId":"7409","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"intercept","params":"(@OriginfinalClass<?>klass@@OriginfinalMethodmethod@@AllArgumentsfinalObject[]args@@SuperCallfinalCallable<?>callable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b8/fee6d76030d013cdf6669ce359b5e5228b073f.src","preCode":"    public Object intercept(@Origin final Class<?> klass, @Origin final Method method, @AllArguments final Object[] args, @SuperCall final Callable<?> callable) {\n        MethodInvocationResult invocationResult = new MethodInvocationResult();\n        Object result;\n        try {\n            classStaticMethodAroundAdvice.beforeMethod(klass, method, args, invocationResult);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            log.error(\"Failed to execute the pre-method of method[{}] in class[{}].\", method.getName(), klass, ex);\n        }\n        try {\n            if (invocationResult.isRebased()) {\n                result = invocationResult.getResult();\n            } else {\n                result = callable.call();\n            }\n            invocationResult.rebase(result);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            try {\n                classStaticMethodAroundAdvice.onThrowing(klass, method, args, ex);\n                \r\n            } catch (final Throwable ignored) {\n                \r\n                log.error(\"Failed to execute the error handler of method[{}] in class[{}].\", method.getName(), klass, ex);\n            }\n            throw ex;\n        } finally {\n            try {\n                classStaticMethodAroundAdvice.afterMethod(klass, method, args, invocationResult);\n                \r\n            } catch (final Throwable ex) {\n                \r\n                log.error(\"Failed to execute the post-method of method[{}] in class[{}].\", method.getName(), klass, ex);\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/interceptor/ClassStaticMethodAroundInterceptor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"37c09802782831977b7a0bde05c9183b874242a2","commitMessage":"@@@Refactor advice loading.  add request error metrics and remove '.' in logs (#11538)\n\n* Refactor advice loading.  add request error metrics and remove '.' in logs\n\n* Fix test case.\n\n* Fix test case and unused code\n\n* Fix new lne of yaml file\n\n* Add new line of yaml file\n\n* mark final for class\n\n* set the right new line in yaml file","date":"2021-07-28 10:08:32","modifiedFileCount":"13","status":"M","submitter":"Dachuan J"},{"authorTime":"2021-09-10 17:43:47","codes":[{"authorDate":"2021-09-10 17:43:47","commitOrder":3,"curCode":"    public Object intercept(@This final Object target, @Origin final Method method, @AllArguments final Object[] args, @SuperCall final Callable<?> callable) {\n        AdviceTargetObject instance = (AdviceTargetObject) target;\n        MethodInvocationResult methodResult = new MethodInvocationResult();\n        Object result;\n        needCall = instanceMethodAroundAdvice.disableCheck() || PluginContext.isPluginEnabled();\n        try {\n            if (needCall) {\n                instanceMethodAroundAdvice.beforeMethod(instance, method, args, methodResult);\n            }\n            \r\n        } catch (final Throwable ex) {\n            \r\n            log.error(\"Failed to execute the pre-method of method[{}] in class[{}]\", method.getName(), target.getClass(), ex);\n        }\n        try {\n            if (methodResult.isRebased()) {\n                result = methodResult.getResult();\n            } else {\n                result = callable.call();\n            }\n            methodResult.rebase(result);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            try {\n                if (needCall) {\n                    instanceMethodAroundAdvice.onThrowing(instance, method, args, ex);\n                }\n                \r\n            } catch (final Throwable ignored) {\n                \r\n                log.error(\"Failed to execute the error handler of method[{}] in class[{}]\", method.getName(), target.getClass(), ex);\n            }\n            throw ex;\n        } finally {\n            try {\n                if (needCall) {\n                    instanceMethodAroundAdvice.afterMethod(instance, method, args, methodResult);\n                }\n                \r\n            } catch (final Throwable ex) {\n                \r\n                log.error(\"Failed to execute the post-method of method[{}] in class[{}]\", method.getName(), target.getClass(), ex);\n            }\n        }\n        return result;\n    }\n","date":"2021-09-10 17:43:47","endLine":105,"groupId":"1668","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"intercept","params":"(@ThisfinalObjecttarget@@OriginfinalMethodmethod@@AllArgumentsfinalObject[]args@@SuperCallfinalCallable<?>callable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/40/5e8683c04dff372c8be8cf739618712952585b.src","preCode":"    public Object intercept(@This final Object target, @Origin final Method method, @AllArguments final Object[] args, @SuperCall final Callable<?> callable) {\n        AdviceTargetObject instance = (AdviceTargetObject) target;\n        MethodInvocationResult methodResult = new MethodInvocationResult();\n        Object result;\n        try {\n            instanceMethodAroundAdvice.beforeMethod(instance, method, args, methodResult);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            log.error(\"Failed to execute the pre-method of method[{}] in class[{}]\", method.getName(), target.getClass(), ex);\n        }\n        try {\n            if (methodResult.isRebased()) {\n                result = methodResult.getResult();\n            } else {\n                result = callable.call();\n            }\n            methodResult.rebase(result);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            try {\n                instanceMethodAroundAdvice.onThrowing(instance, method, args, ex);\n                \r\n            } catch (final Throwable ignored) {\n                \r\n                log.error(\"Failed to execute the error handler of method[{}] in class[{}]\", method.getName(), target.getClass(), ex);\n            }\n            throw ex;\n        } finally {\n            try {\n                instanceMethodAroundAdvice.afterMethod(instance, method, args, methodResult);\n                \r\n            } catch (final Throwable ex) {\n                \r\n                log.error(\"Failed to execute the post-method of method[{}] in class[{}]\", method.getName(), target.getClass(), ex);\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/interceptor/InstanceMethodAroundInterceptor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2021-09-10 17:43:47","commitOrder":3,"curCode":"    public Object intercept(@Origin final Class<?> klass, @Origin final Method method, @AllArguments final Object[] args, @SuperCall final Callable<?> callable) {\n        MethodInvocationResult invocationResult = new MethodInvocationResult();\n        Object result;\n        needCall = classStaticMethodAroundAdvice.disableCheck() || PluginContext.isPluginEnabled();\n        try {\n            if (needCall) {\n                classStaticMethodAroundAdvice.beforeMethod(klass, method, args, invocationResult);\n            }\n            \r\n        } catch (final Throwable ex) {\n            \r\n            log.error(\"Failed to execute the pre-method of method[{}] in class[{}]\", method.getName(), klass, ex);\n        }\n        try {\n            if (invocationResult.isRebased()) {\n                result = invocationResult.getResult();\n            } else {\n                result = callable.call();\n            }\n            invocationResult.rebase(result);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            try {\n                if (needCall) {\n                    classStaticMethodAroundAdvice.onThrowing(klass, method, args, ex);\n                }\n                \r\n            } catch (final Throwable ignored) {\n                \r\n                log.error(\"Failed to execute the error handler of method[{}] in class[{}]\", method.getName(), klass, ex);\n            }\n            throw ex;\n        } finally {\n            try {\n                if (needCall) {\n                    classStaticMethodAroundAdvice.afterMethod(klass, method, args, invocationResult);\n                }\n                \r\n            } catch (final Throwable ex) {\n                \r\n                log.error(\"Failed to execute the post-method of method[{}] in class[{}]\", method.getName(), klass, ex);\n            }\n        }\n        return result;\n    }\n","date":"2021-09-10 17:43:47","endLine":102,"groupId":"7409","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"intercept","params":"(@OriginfinalClass<?>klass@@OriginfinalMethodmethod@@AllArgumentsfinalObject[]args@@SuperCallfinalCallable<?>callable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/43/1894952a8d8350c7ab47cf0f5130e1e907b8f9.src","preCode":"    public Object intercept(@Origin final Class<?> klass, @Origin final Method method, @AllArguments final Object[] args, @SuperCall final Callable<?> callable) {\n        MethodInvocationResult invocationResult = new MethodInvocationResult();\n        Object result;\n        try {\n            classStaticMethodAroundAdvice.beforeMethod(klass, method, args, invocationResult);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            log.error(\"Failed to execute the pre-method of method[{}] in class[{}]\", method.getName(), klass, ex);\n        }\n        try {\n            if (invocationResult.isRebased()) {\n                result = invocationResult.getResult();\n            } else {\n                result = callable.call();\n            }\n            invocationResult.rebase(result);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            try {\n                classStaticMethodAroundAdvice.onThrowing(klass, method, args, ex);\n                \r\n            } catch (final Throwable ignored) {\n                \r\n                log.error(\"Failed to execute the error handler of method[{}] in class[{}]\", method.getName(), klass, ex);\n            }\n            throw ex;\n        } finally {\n            try {\n                classStaticMethodAroundAdvice.afterMethod(klass, method, args, invocationResult);\n                \r\n            } catch (final Throwable ex) {\n                \r\n                log.error(\"Failed to execute the post-method of method[{}] in class[{}]\", method.getName(), klass, ex);\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/interceptor/ClassStaticMethodAroundInterceptor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"eedc09a6670e775d2c02572ff82e83251bec2267","commitMessage":"@@@Add plugin enabled check (#12308)\n\n* Add plugin enabled check\n\n* Refactor code\n\n* Format code style\n\n* Rename and format code style","date":"2021-09-10 17:43:47","modifiedFileCount":"6","status":"M","submitter":"Dachuan J"},{"authorTime":"2021-09-16 19:09:56","codes":[{"authorDate":"2021-09-16 19:09:56","commitOrder":4,"curCode":"    public Object intercept(@This final Object target, @Origin final Method method, @AllArguments final Object[] args, @SuperCall final Callable<?> callable) {\n        AdviceTargetObject instance = (AdviceTargetObject) target;\n        MethodInvocationResult methodResult = new MethodInvocationResult();\n        Object result;\n        needCall = instanceMethodAroundAdvice.disableCheck() || PluginContext.isPluginEnabled();\n        try {\n            if (needCall) {\n                instanceMethodAroundAdvice.beforeMethod(instance, method, args, methodResult);\n            }\n            \r\n        } catch (final Throwable ex) {\n            \r\n            log.error(\"Failed to execute the pre-method of method[{}] in class[{}]\", method.getName(), target.getClass(), ex);\n        }\n        try {\n            if (methodResult.isRebased()) {\n                result = methodResult.getResult();\n            } else {\n                result = callable.call();\n            }\n            methodResult.rebase(result);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            try {\n                if (needCall) {\n                    instanceMethodAroundAdvice.onThrowing(instance, method, args, ex);\n                }\n                \r\n            } catch (final Throwable ignored) {\n                \r\n                log.error(\"Failed to execute the error handler of method[{}] in class[{}]\", method.getName(), target.getClass(), ex);\n            }\n            throw ex;\n        } finally {\n            try {\n                if (needCall) {\n                    instanceMethodAroundAdvice.afterMethod(instance, method, args, methodResult);\n                }\n                \r\n            } catch (final Throwable ex) {\n                \r\n                log.error(\"Failed to execute the post-method of method[{}] in class[{}]\", method.getName(), target.getClass(), ex);\n            }\n        }\n        return methodResult.isRebased() ? methodResult.getResult() : result;\n    }\n","date":"2021-09-16 19:09:56","endLine":105,"groupId":"102208","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"intercept","params":"(@ThisfinalObjecttarget@@OriginfinalMethodmethod@@AllArgumentsfinalObject[]args@@SuperCallfinalCallable<?>callable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/73/0ad57b4633cf71025a88d4dfa7b1dda07a572e.src","preCode":"    public Object intercept(@This final Object target, @Origin final Method method, @AllArguments final Object[] args, @SuperCall final Callable<?> callable) {\n        AdviceTargetObject instance = (AdviceTargetObject) target;\n        MethodInvocationResult methodResult = new MethodInvocationResult();\n        Object result;\n        needCall = instanceMethodAroundAdvice.disableCheck() || PluginContext.isPluginEnabled();\n        try {\n            if (needCall) {\n                instanceMethodAroundAdvice.beforeMethod(instance, method, args, methodResult);\n            }\n            \r\n        } catch (final Throwable ex) {\n            \r\n            log.error(\"Failed to execute the pre-method of method[{}] in class[{}]\", method.getName(), target.getClass(), ex);\n        }\n        try {\n            if (methodResult.isRebased()) {\n                result = methodResult.getResult();\n            } else {\n                result = callable.call();\n            }\n            methodResult.rebase(result);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            try {\n                if (needCall) {\n                    instanceMethodAroundAdvice.onThrowing(instance, method, args, ex);\n                }\n                \r\n            } catch (final Throwable ignored) {\n                \r\n                log.error(\"Failed to execute the error handler of method[{}] in class[{}]\", method.getName(), target.getClass(), ex);\n            }\n            throw ex;\n        } finally {\n            try {\n                if (needCall) {\n                    instanceMethodAroundAdvice.afterMethod(instance, method, args, methodResult);\n                }\n                \r\n            } catch (final Throwable ex) {\n                \r\n                log.error(\"Failed to execute the post-method of method[{}] in class[{}]\", method.getName(), target.getClass(), ex);\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/interceptor/InstanceMethodAroundInterceptor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2021-09-16 19:09:56","commitOrder":4,"curCode":"    public Object intercept(@Origin final Class<?> klass, @Origin final Method method, @AllArguments final Object[] args, @SuperCall final Callable<?> callable) {\n        MethodInvocationResult methodResult = new MethodInvocationResult();\n        Object result;\n        needCall = classStaticMethodAroundAdvice.disableCheck() || PluginContext.isPluginEnabled();\n        try {\n            if (needCall) {\n                classStaticMethodAroundAdvice.beforeMethod(klass, method, args, methodResult);\n            }\n            \r\n        } catch (final Throwable ex) {\n            \r\n            log.error(\"Failed to execute the pre-method of method[{}] in class[{}]\", method.getName(), klass, ex);\n        }\n        try {\n            if (methodResult.isRebased()) {\n                result = methodResult.getResult();\n            } else {\n                result = callable.call();\n            }\n            methodResult.rebase(result);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            try {\n                if (needCall) {\n                    classStaticMethodAroundAdvice.onThrowing(klass, method, args, ex);\n                }\n                \r\n            } catch (final Throwable ignored) {\n                \r\n                log.error(\"Failed to execute the error handler of method[{}] in class[{}]\", method.getName(), klass, ex);\n            }\n            throw ex;\n        } finally {\n            try {\n                if (needCall) {\n                    classStaticMethodAroundAdvice.afterMethod(klass, method, args, methodResult);\n                }\n                \r\n            } catch (final Throwable ex) {\n                \r\n                log.error(\"Failed to execute the post-method of method[{}] in class[{}]\", method.getName(), klass, ex);\n            }\n        }\n        return methodResult.isRebased() ? methodResult.getResult() : result;\n    }\n","date":"2021-09-16 19:09:56","endLine":102,"groupId":"102208","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"intercept","params":"(@OriginfinalClass<?>klass@@OriginfinalMethodmethod@@AllArgumentsfinalObject[]args@@SuperCallfinalCallable<?>callable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9d/ad705e067070bab4845f0834e27e668a80542e.src","preCode":"    public Object intercept(@Origin final Class<?> klass, @Origin final Method method, @AllArguments final Object[] args, @SuperCall final Callable<?> callable) {\n        MethodInvocationResult invocationResult = new MethodInvocationResult();\n        Object result;\n        needCall = classStaticMethodAroundAdvice.disableCheck() || PluginContext.isPluginEnabled();\n        try {\n            if (needCall) {\n                classStaticMethodAroundAdvice.beforeMethod(klass, method, args, invocationResult);\n            }\n            \r\n        } catch (final Throwable ex) {\n            \r\n            log.error(\"Failed to execute the pre-method of method[{}] in class[{}]\", method.getName(), klass, ex);\n        }\n        try {\n            if (invocationResult.isRebased()) {\n                result = invocationResult.getResult();\n            } else {\n                result = callable.call();\n            }\n            invocationResult.rebase(result);\n            \r\n        } catch (final Throwable ex) {\n            \r\n            try {\n                if (needCall) {\n                    classStaticMethodAroundAdvice.onThrowing(klass, method, args, ex);\n                }\n                \r\n            } catch (final Throwable ignored) {\n                \r\n                log.error(\"Failed to execute the error handler of method[{}] in class[{}]\", method.getName(), klass, ex);\n            }\n            throw ex;\n        } finally {\n            try {\n                if (needCall) {\n                    classStaticMethodAroundAdvice.afterMethod(klass, method, args, invocationResult);\n                }\n                \r\n            } catch (final Throwable ex) {\n                \r\n                log.error(\"Failed to execute the post-method of method[{}] in class[{}]\", method.getName(), klass, ex);\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/interceptor/ClassStaticMethodAroundInterceptor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"e8cef3fe3d275f22b3ed74bfd9b76c66718042c1","commitMessage":"@@@Refactor plugin loader (#12448)\n\n* Refactor plugin loader\n\n* Refactor code\n\n* Rename variable\n\n* Rename advice parameter name\n\n* Adjust class name\n\n* Fix checkstyle","date":"2021-09-16 19:09:56","modifiedFileCount":"11","status":"M","submitter":"Dachuan J"}]
