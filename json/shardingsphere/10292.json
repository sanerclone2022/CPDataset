[{"authorTime":"2021-07-02 23:18:54","codes":[{"authorDate":"2021-07-02 23:18:54","commitOrder":1,"curCode":"    private void checkToBeCreatedDiscoverTypes(final CreateDatabaseDiscoveryRuleStatement sqlStatement) {\n        Collection<String> notExistedDiscoveryTypes = sqlStatement.getRules().stream().map(DatabaseDiscoveryRuleSegment::getDiscoveryTypeName).distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(DatabaseDiscoveryType.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedDiscoveryTypes.isEmpty()) {\n            throw new InvalidDatabaseDiscoveryTypesException(notExistedDiscoveryTypes);\n        }\n    }\n","date":"2021-07-02 23:18:54","endLine":93,"groupId":"8745","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeCreatedDiscoverTypes","params":"(finalCreateDatabaseDiscoveryRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bb/d1cce4617e4c82ee796a4043f71ab987cd3500.src","preCode":"    private void checkToBeCreatedDiscoverTypes(final CreateDatabaseDiscoveryRuleStatement sqlStatement) {\n        Collection<String> notExistedDiscoveryTypes = sqlStatement.getRules().stream().map(DatabaseDiscoveryRuleSegment::getDiscoveryTypeName).distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(DatabaseDiscoveryType.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedDiscoveryTypes.isEmpty()) {\n            throw new InvalidDatabaseDiscoveryTypesException(notExistedDiscoveryTypes);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/CreateDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"B"},{"authorDate":"2021-07-02 23:18:54","commitOrder":1,"curCode":"    private void checkToBeAlteredDiscoveryType(final AlterDatabaseDiscoveryRuleStatement sqlStatement) {\n        Collection<String> notExistedDiscoveryTypes = getToBeAlteredDiscoveryTypeNames(sqlStatement).stream()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(DatabaseDiscoveryType.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedDiscoveryTypes.isEmpty()) {\n            throw new InvalidDatabaseDiscoveryTypesException(notExistedDiscoveryTypes);\n        }\n    }\n","date":"2021-07-02 23:18:54","endLine":97,"groupId":"8745","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkToBeAlteredDiscoveryType","params":"(finalAlterDatabaseDiscoveryRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/24/dc7f99b48fb9dbd840fda1cd2cf8aec24824af.src","preCode":"    private void checkToBeAlteredDiscoveryType(final AlterDatabaseDiscoveryRuleStatement sqlStatement) {\n        Collection<String> notExistedDiscoveryTypes = getToBeAlteredDiscoveryTypeNames(sqlStatement).stream()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(DatabaseDiscoveryType.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedDiscoveryTypes.isEmpty()) {\n            throw new InvalidDatabaseDiscoveryTypesException(notExistedDiscoveryTypes);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/AlterDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"}],"commitId":"7299303904bf3f1748fa4c3519c2624db59adde6","commitMessage":"@@@Add shardingsphere-db-discovery-distsql-handler module (#11114)\n\n* Add shardingsphere-db-discovery-distsql-handler module\n\n* Add shardingsphere-db-discovery-distsql-handler module","date":"2021-07-02 23:18:54","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 01:26:11","codes":[{"authorDate":"2021-07-04 01:26:11","commitOrder":2,"curCode":"    private void checkToBeCreatedDiscoverTypes(final CreateDatabaseDiscoveryRuleStatement sqlStatement) throws InvalidDatabaseDiscoveryTypesException {\n        Collection<String> notExistedDiscoveryTypes = sqlStatement.getRules().stream().map(DatabaseDiscoveryRuleSegment::getDiscoveryTypeName).distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(DatabaseDiscoveryType.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedDiscoveryTypes.isEmpty()) {\n            throw new InvalidDatabaseDiscoveryTypesException(notExistedDiscoveryTypes);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":95,"groupId":"8745","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeCreatedDiscoverTypes","params":"(finalCreateDatabaseDiscoveryRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/01/d511de26e4c1faf0f5e784a5326808df144fae.src","preCode":"    private void checkToBeCreatedDiscoverTypes(final CreateDatabaseDiscoveryRuleStatement sqlStatement) {\n        Collection<String> notExistedDiscoveryTypes = sqlStatement.getRules().stream().map(DatabaseDiscoveryRuleSegment::getDiscoveryTypeName).distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(DatabaseDiscoveryType.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedDiscoveryTypes.isEmpty()) {\n            throw new InvalidDatabaseDiscoveryTypesException(notExistedDiscoveryTypes);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/CreateDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2021-07-04 01:26:11","commitOrder":2,"curCode":"    private void checkToBeAlteredDiscoveryType(final AlterDatabaseDiscoveryRuleStatement sqlStatement) throws InvalidDatabaseDiscoveryTypesException {\n        Collection<String> notExistedDiscoveryTypes = getToBeAlteredDiscoveryTypeNames(sqlStatement).stream()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(DatabaseDiscoveryType.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedDiscoveryTypes.isEmpty()) {\n            throw new InvalidDatabaseDiscoveryTypesException(notExistedDiscoveryTypes);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":100,"groupId":"8745","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkToBeAlteredDiscoveryType","params":"(finalAlterDatabaseDiscoveryRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/19/696d2d4d124d33dab10da1ce89823d04f84f58.src","preCode":"    private void checkToBeAlteredDiscoveryType(final AlterDatabaseDiscoveryRuleStatement sqlStatement) {\n        Collection<String> notExistedDiscoveryTypes = getToBeAlteredDiscoveryTypeNames(sqlStatement).stream()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(DatabaseDiscoveryType.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedDiscoveryTypes.isEmpty()) {\n            throw new InvalidDatabaseDiscoveryTypesException(notExistedDiscoveryTypes);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/AlterDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"18ab59a5ac8de3a2c2d2c1dac39de3041b9c36f3","commitMessage":"@@@Refactor RuleDefinitionViolationException to extend SQLException (#11129)\n\n* Refactor RDLBackendHandler\n\n* Refactor RuleDefinitionViolationException to extend SQLException","date":"2021-07-04 01:26:11","modifiedFileCount":"66","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 12:43:06","codes":[{"authorDate":"2021-07-04 12:43:06","commitOrder":3,"curCode":"    private void checkToBeCreatedDiscoverTypes(final CreateDatabaseDiscoveryRuleStatement sqlStatement) throws InvalidAlgorithmConfigurationException {\n        Collection<String> notExistedDiscoveryTypes = sqlStatement.getRules().stream().map(DatabaseDiscoveryRuleSegment::getDiscoveryTypeName).distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(DatabaseDiscoveryType.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedDiscoveryTypes.isEmpty()) {\n            throw new InvalidAlgorithmConfigurationException(\"database discover\", notExistedDiscoveryTypes);\n        }\n    }\n","date":"2021-07-04 12:43:06","endLine":95,"groupId":"10292","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeCreatedDiscoverTypes","params":"(finalCreateDatabaseDiscoveryRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6e/61618667d999af95a5140ec589a8d5c0e3ca97.src","preCode":"    private void checkToBeCreatedDiscoverTypes(final CreateDatabaseDiscoveryRuleStatement sqlStatement) throws InvalidDatabaseDiscoveryTypesException {\n        Collection<String> notExistedDiscoveryTypes = sqlStatement.getRules().stream().map(DatabaseDiscoveryRuleSegment::getDiscoveryTypeName).distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(DatabaseDiscoveryType.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedDiscoveryTypes.isEmpty()) {\n            throw new InvalidDatabaseDiscoveryTypesException(notExistedDiscoveryTypes);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/CreateDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2021-07-04 12:43:06","commitOrder":3,"curCode":"    private void checkToBeAlteredDiscoveryType(final AlterDatabaseDiscoveryRuleStatement sqlStatement) throws InvalidAlgorithmConfigurationException {\n        Collection<String> notExistedDiscoveryTypes = getToBeAlteredDiscoveryTypeNames(sqlStatement).stream()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(DatabaseDiscoveryType.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedDiscoveryTypes.isEmpty()) {\n            throw new InvalidAlgorithmConfigurationException(\"database discover\", notExistedDiscoveryTypes);\n        }\n    }\n","date":"2021-07-04 12:43:06","endLine":99,"groupId":"10292","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkToBeAlteredDiscoveryType","params":"(finalAlterDatabaseDiscoveryRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/82/6ec16f9432e90910ec3a62ea497aeb8f0a2450.src","preCode":"    private void checkToBeAlteredDiscoveryType(final AlterDatabaseDiscoveryRuleStatement sqlStatement) throws InvalidDatabaseDiscoveryTypesException {\n        Collection<String> notExistedDiscoveryTypes = getToBeAlteredDiscoveryTypeNames(sqlStatement).stream()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(DatabaseDiscoveryType.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedDiscoveryTypes.isEmpty()) {\n            throw new InvalidDatabaseDiscoveryTypesException(notExistedDiscoveryTypes);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/AlterDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"3ddeaf7ab2e64f7ff1a935c0ed598227a3ddf765","commitMessage":"@@@Add CurrentRuleNotExistedException to refine Exception of current rule validation (#11133)\n\n* Remove InvalidDatabaseDiscoveryTypesException\n\n* Remove InvalidDatabaseDiscoveryTypesException\n\n* Remove InvalidEncryptorsException\n\n* Remove InvalidLoadBalancersException\n\n* Remove InvalidShardingAlgorithmsException\n\n* Remove InvalidKeyGeneratorsException","date":"2021-07-04 12:43:06","modifiedFileCount":"16","status":"M","submitter":"Liang Zhang"}]
