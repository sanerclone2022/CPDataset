[{"authorTime":"2020-10-04 15:31:28","codes":[{"authorDate":"2021-03-12 12:16:05","commitOrder":5,"curCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>(4, 1);\n        dataSourceMap.put(\"write_ds\", DataSourceUtil.createDataSource(\"demo_write_ds\"));\n        dataSourceMap.put(\"read_ds\", DataSourceUtil.createDataSource(\"demo_read_ds\"));\n        dataSourceMap.put(\"shadow_write_ds\", DataSourceUtil.createDataSource(\"demo_shadow_write_ds\"));\n        dataSourceMap.put(\"shadow_read_ds\", DataSourceUtil.createDataSource(\"demo_shadow_read_ds\"));\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Arrays.asList(\"write_ds\", \"read_ds\"), Arrays.asList(\"shadow_write_ds\", \"shadow_read_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfig, getReadWriteSplittingRuleConfiguration()), null);\n    }\n","date":"2021-03-12 12:16:05","endLine":45,"groupId":"10404","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3d/5e92ff141658b737d3f4a3f318732d633d82b5.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>(4, 1);\n        dataSourceMap.put(\"write_ds\", DataSourceUtil.createDataSource(\"demo_write_ds\"));\n        dataSourceMap.put(\"read_ds\", DataSourceUtil.createDataSource(\"demo_read_ds\"));\n        dataSourceMap.put(\"shadow_write_ds\", DataSourceUtil.createDataSource(\"demo_shadow_write_ds\"));\n        dataSourceMap.put(\"shadow_read_ds\", DataSourceUtil.createDataSource(\"demo_shadow_read_ds\"));\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Arrays.asList(\"write_ds\", \"read_ds\"), Arrays.asList(\"shadow_write_ds\", \"shadow_read_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfig, getReadWriteSplittingRuleConfiguration()), null);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ReadWriteSplittingShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"},{"authorDate":"2020-10-04 15:31:28","commitOrder":5,"curCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfig), null);\n    }\n","date":"2020-10-04 15:31:28","endLine":40,"groupId":"1737","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c8/51209ec779b563d6f2752f858b5aebcf651b89.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfig), null);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"NB"}],"commitId":"1c1016d1b98fd3dd8cd95b08d22a3c6b1a688a40","commitMessage":"@@@Merge pull request #9638 from yu199195/rename-replica-query\n\nrefactor replica query to read-write-splitting","date":"2021-03-12 12:16:05","modifiedFileCount":"54","status":"M","submitter":"Zhang Yonglun"},{"authorTime":"2020-10-04 15:31:28","codes":[{"authorDate":"2021-05-06 23:57:29","commitOrder":6,"curCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>(4, 1);\n        dataSourceMap.put(\"write_ds\", DataSourceUtil.createDataSource(\"demo_write_ds\"));\n        dataSourceMap.put(\"read_ds\", DataSourceUtil.createDataSource(\"demo_read_ds\"));\n        dataSourceMap.put(\"shadow_write_ds\", DataSourceUtil.createDataSource(\"demo_shadow_write_ds\"));\n        dataSourceMap.put(\"shadow_read_ds\", DataSourceUtil.createDataSource(\"demo_shadow_read_ds\"));\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Arrays.asList(\"write_ds\", \"read_ds\"), Arrays.asList(\"shadow_write_ds\", \"shadow_read_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfig, getReadwriteSplittingRuleConfiguration()), null);\n    }\n","date":"2021-05-06 23:57:29","endLine":45,"groupId":"10404","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/91/237847b49f9eb86c31a64a70fbd49711cf62bf.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>(4, 1);\n        dataSourceMap.put(\"write_ds\", DataSourceUtil.createDataSource(\"demo_write_ds\"));\n        dataSourceMap.put(\"read_ds\", DataSourceUtil.createDataSource(\"demo_read_ds\"));\n        dataSourceMap.put(\"shadow_write_ds\", DataSourceUtil.createDataSource(\"demo_shadow_write_ds\"));\n        dataSourceMap.put(\"shadow_read_ds\", DataSourceUtil.createDataSource(\"demo_shadow_read_ds\"));\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Arrays.asList(\"write_ds\", \"read_ds\"), Arrays.asList(\"shadow_write_ds\", \"shadow_read_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfig, getReadWriteSplittingRuleConfiguration()), null);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ReadwriteSplittingShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2020-10-04 15:31:28","commitOrder":6,"curCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfig), null);\n    }\n","date":"2020-10-04 15:31:28","endLine":40,"groupId":"1737","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c8/51209ec779b563d6f2752f858b5aebcf651b89.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfig), null);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"c0a66492b6656ca15aac8cd880350a91c1e45bb0","commitMessage":"@@@Rename ReadWrite to Readwrite (#10261)\n\n* Rename ReadWriteSplittingRule\n\n* Rename ReadwriteSplittingDataSourceRuleConfiguration\n\n* Rename ReadwriteSplittingSQLRouter\n\n* Rename ReadwriteSplittingDataSourceRouter\n\n* Rename ReadwriteSplittingRule\n\n* Rename ReadwriteSplittingDataSourceRule\n\n* Rename AlgorithmProvidedReadwriteSplittingRuleBuilder\n\n* Rename ReadwriteSplittingRuleBuilder\n\n* rename ReadwriteSplittingOrder\n\n* Rename AlgorithmProvidedReadwriteSplittingRuleConfiguration\n\n* Rename YamlReadwriteSplittingRuleConfiguration\n\n* Rename YamlReadwriteSplittingDataSourceRuleConfiguration\n\n* Rename AlterReadwriteSplittingRuleStatementConverter\n\n* Rename CreateReadwriteSplittingRuleStatementConverter\n\n* Rename ReadwriteSplittingRuleAlgorithmProviderConfigurationYamlSwapper\n\n* Rename ReadwriteSplittingRuleConfigurationYamlSwapper\n\n* Rename ReadwriteSplittingAlgorithmProvidedBeanRegistry\n\n* Rename ReadwriteSplittingSpringBootCondition\n\n* Rename YamlReadwriteSplittingRuleSpringBootConfiguration\n\n* Rename ReadwriteSplittingRuleSpringbootConfiguration\n\n* Rename ReadwriteSplittingSpringBootStarterTest\n\n* Rename YamlGovernanceReadwriteSplittingIntegrateTest\n\n* Rename CreateReadwriteSplittingRuleStatement\n\n* Rename ReadwriteSplittingRuleSegment\n\n* Rename GovernanceSpringBootRegistryReadwriteSplittingTest\n\n* Rename AlterReadwriteSplittingRuleStatement\n\n* Rename ReadwriteSplittingRuleConfigurationChecker\n\n* Rename LocalShardingReadwriteSplittingConfiguration\n\n* Rename ReadwriteSplittingRuleNotExistedException\n\n* Rename ReadwriteSplittingRuleCreateExistsException\n\n* Rename AddReadwriteSplittingRuleDataSourcesExistedException\n\n* Rename ReadwriteSplittingRuleDataSourcesNotExistedException\n\n* Rename ReadwriteSplittingRuleQueryBackendHandler\n\n* Rename DropReadwriteSplittingRuleBackendHandler\n\n* Rename GovernanceSpringBootReadwriteSplittingTest\n\n* Rename AlterReadwriteSplittingRuleBackendHandler\n\n* Rename CreateReadwriteSplittingRuleBackendHandler\n\n* Rename GovernanceShardingReadwriteSplittingNamespaceTest\n\n* Rename YamlGovernanceShardingWithReadwriteSplittingIntegrateTest\n\n* Rename CloudReadwriteSplittingConfiguration\n\n* Rename ShardingReadwriteSplittingConfigurationPrecise\n\n* Rename AbstractShardingSphereDataSourceForReadwriteSplittingTest\n\n* Rename AlgorithmProvidedReadwriteSplittingRuleConfigurationChecker\n\n* Rename ReadwriteSplittingSpringNamespaceTest\n\n* Rename ReadwriteSplittingRuleBeanDefinitionTag\n\n* Rename AbstractReadwriteSplittingRuleConfigurationChecker\n\n* Rename ReadwriteSplittingNamespaceHandler\n\n* Rename ReadwriteSplittingRuleBeanDefinitionParser\n\n* Rename ReadWrite to Readwrite with java class\n\n* Rename ReadWrite to Readwrite with docs","date":"2021-05-06 23:57:29","modifiedFileCount":"20","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-05 15:11:16","codes":[{"authorDate":"2021-05-06 23:57:29","commitOrder":7,"curCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>(4, 1);\n        dataSourceMap.put(\"write_ds\", DataSourceUtil.createDataSource(\"demo_write_ds\"));\n        dataSourceMap.put(\"read_ds\", DataSourceUtil.createDataSource(\"demo_read_ds\"));\n        dataSourceMap.put(\"shadow_write_ds\", DataSourceUtil.createDataSource(\"demo_shadow_write_ds\"));\n        dataSourceMap.put(\"shadow_read_ds\", DataSourceUtil.createDataSource(\"demo_shadow_read_ds\"));\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Arrays.asList(\"write_ds\", \"read_ds\"), Arrays.asList(\"shadow_write_ds\", \"shadow_read_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfig, getReadwriteSplittingRuleConfiguration()), null);\n    }\n","date":"2021-05-06 23:57:29","endLine":45,"groupId":"10404","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/91/237847b49f9eb86c31a64a70fbd49711cf62bf.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>(4, 1);\n        dataSourceMap.put(\"write_ds\", DataSourceUtil.createDataSource(\"demo_write_ds\"));\n        dataSourceMap.put(\"read_ds\", DataSourceUtil.createDataSource(\"demo_read_ds\"));\n        dataSourceMap.put(\"shadow_write_ds\", DataSourceUtil.createDataSource(\"demo_shadow_write_ds\"));\n        dataSourceMap.put(\"shadow_read_ds\", DataSourceUtil.createDataSource(\"demo_shadow_read_ds\"));\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Arrays.asList(\"write_ds\", \"read_ds\"), Arrays.asList(\"shadow_write_ds\", \"shadow_read_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfig, getReadwriteSplittingRuleConfiguration()), null);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ReadwriteSplittingShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"N"},{"authorDate":"2021-08-05 15:11:16","commitOrder":7,"curCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfig), null, DefaultSchema.LOGIC_NAME);\n    }\n","date":"2021-08-05 15:11:16","endLine":41,"groupId":"1737","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/06/334679f8e3c499e9c9055b356e6e2d9a694d51.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfig), null);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"c5c5aaa7261d172f7f7bb65512c2b0f9b3155015","commitMessage":"@@@Schema name properties xml jdbc (#11655)\n\n* shardingsphere-jdbc-core yml config add schemaName\n\n* update\n\n* modify todo\n\n* update\n\n* properties and xml add schema name\n\n* reset code\n\n* add final\n\n* first letter capitalized","date":"2021-08-05 15:11:16","modifiedFileCount":"8","status":"M","submitter":"zhaojinchao"},{"authorTime":"2021-08-09 00:30:18","codes":[{"authorDate":"2021-05-06 23:57:29","commitOrder":8,"curCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>(4, 1);\n        dataSourceMap.put(\"write_ds\", DataSourceUtil.createDataSource(\"demo_write_ds\"));\n        dataSourceMap.put(\"read_ds\", DataSourceUtil.createDataSource(\"demo_read_ds\"));\n        dataSourceMap.put(\"shadow_write_ds\", DataSourceUtil.createDataSource(\"demo_shadow_write_ds\"));\n        dataSourceMap.put(\"shadow_read_ds\", DataSourceUtil.createDataSource(\"demo_shadow_read_ds\"));\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Arrays.asList(\"write_ds\", \"read_ds\"), Arrays.asList(\"shadow_write_ds\", \"shadow_read_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfig, getReadwriteSplittingRuleConfiguration()), null);\n    }\n","date":"2021-05-06 23:57:29","endLine":45,"groupId":"10206","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/91/237847b49f9eb86c31a64a70fbd49711cf62bf.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>(4, 1);\n        dataSourceMap.put(\"write_ds\", DataSourceUtil.createDataSource(\"demo_write_ds\"));\n        dataSourceMap.put(\"read_ds\", DataSourceUtil.createDataSource(\"demo_read_ds\"));\n        dataSourceMap.put(\"shadow_write_ds\", DataSourceUtil.createDataSource(\"demo_shadow_write_ds\"));\n        dataSourceMap.put(\"shadow_read_ds\", DataSourceUtil.createDataSource(\"demo_shadow_read_ds\"));\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Arrays.asList(\"write_ds\", \"read_ds\"), Arrays.asList(\"shadow_write_ds\", \"shadow_read_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfig, getReadwriteSplittingRuleConfiguration()), null);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ReadwriteSplittingShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"N"},{"authorDate":"2021-08-09 00:30:18","commitOrder":8,"curCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfig), null);\n    }\n","date":"2021-08-09 00:30:18","endLine":40,"groupId":"10206","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/13/ebaf8b581ce11f981ff7cce8f37cba4ee904eb.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfig), null, DefaultSchema.LOGIC_NAME);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"}],"commitId":"1df6c3bf0e0938e9a15500dd5fa2447492cb9d4a","commitMessage":"@@@Fix compile error for example (#11707)\n\n","date":"2021-08-09 00:30:18","modifiedFileCount":"1","status":"M","submitter":"Liang Zhang"}]
