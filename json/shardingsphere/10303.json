[{"authorTime":"2021-07-03 16:36:59","codes":[{"authorDate":"2021-07-03 01:31:24","commitOrder":2,"curCode":"    private void checkToBeAlteredRules(final String schemaName, final AlterEncryptRuleStatement sqlStatement, final EncryptRuleConfiguration currentRuleConfig) {\n        Collection<String> currentEncryptTableNames = currentRuleConfig.getTables().stream().map(EncryptTableRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistEncryptTableNames = getToBeAlteredEncryptTableNames(sqlStatement).stream().filter(each -> !currentEncryptTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistEncryptTableNames.isEmpty()) {\n            throw new EncryptRuleNotExistedException(schemaName, notExistEncryptTableNames);\n        }\n    }\n","date":"2021-07-03 01:31:24","endLine":69,"groupId":"7105","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeAlteredRules","params":"(finalStringschemaName@finalAlterEncryptRuleStatementsqlStatement@finalEncryptRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d7/1c35c973103cc1f8e06c6e2bfa083f2b55c92f.src","preCode":"    private void checkToBeAlteredRules(final String schemaName, final AlterEncryptRuleStatement sqlStatement, final EncryptRuleConfiguration currentRuleConfig) {\n        Collection<String> currentEncryptTableNames = currentRuleConfig.getTables().stream().map(EncryptTableRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistEncryptTableNames = getToBeAlteredEncryptTableNames(sqlStatement).stream().filter(each -> !currentEncryptTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistEncryptTableNames.isEmpty()) {\n            throw new EncryptRuleNotExistedException(schemaName, notExistEncryptTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-distsql/shardingsphere-encrypt-distsql-handler/src/main/java/org/apache/shardingsphere/encrypt/distsql/handler/update/AlterEncryptRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"NB"},{"authorDate":"2021-07-03 16:36:59","commitOrder":2,"curCode":"    private void checkToBeAlteredShardingTables(final String schemaName, final AlterShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) {\n        Collection<String> currentShardingTables = getCurrentShardingTables(currentRuleConfig);\n        Collection<String> notExistedShardingTables = getToBeAlteredTableNames(sqlStatement).stream().filter(each -> !currentShardingTables.contains(each)).collect(Collectors.toList());\n        if (!notExistedShardingTables.isEmpty()) {\n            throw new ShardingTableRuleNotExistedException(schemaName, notExistedShardingTables);\n        }\n    }\n","date":"2021-07-03 16:36:59","endLine":98,"groupId":"7105","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkToBeAlteredShardingTables","params":"(finalStringschemaName@finalAlterShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3a/d21f14675c4df963c42625a8f181b2c2df11d7.src","preCode":"    private void checkToBeAlteredShardingTables(final String schemaName, final AlterShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) {\n        Collection<String> currentShardingTables = getCurrentShardingTables(currentRuleConfig);\n        Collection<String> notExistedShardingTables = getToBeAlteredTableNames(sqlStatement).stream().filter(each -> !currentShardingTables.contains(each)).collect(Collectors.toList());\n        if (!notExistedShardingTables.isEmpty()) {\n            throw new ShardingTableRuleNotExistedException(schemaName, notExistedShardingTables);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/AlterShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"}],"commitId":"70149d383a75b5b9986818226f18abd449e5ae80","commitMessage":"@@@Add shardingsphere-sharding-distsql-handler module (#11125)\n\n* Add shardingsphere-sharding-distsql-handler module\n\n* Fix test cases\n\n* Fix test cases\n\n* Fix test cases","date":"2021-07-03 16:36:59","modifiedFileCount":"1","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 01:26:11","codes":[{"authorDate":"2021-07-04 01:26:11","commitOrder":3,"curCode":"    private void checkToBeAlteredRules(final String schemaName, final AlterEncryptRuleStatement sqlStatement, final EncryptRuleConfiguration currentRuleConfig) throws EncryptRuleNotExistedException {\n        Collection<String> currentEncryptTableNames = currentRuleConfig.getTables().stream().map(EncryptTableRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistEncryptTableNames = getToBeAlteredEncryptTableNames(sqlStatement).stream().filter(each -> !currentEncryptTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistEncryptTableNames.isEmpty()) {\n            throw new EncryptRuleNotExistedException(schemaName, notExistEncryptTableNames);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":72,"groupId":"7105","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeAlteredRules","params":"(finalStringschemaName@finalAlterEncryptRuleStatementsqlStatement@finalEncryptRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/65/30cfa8259985d4a3bb8ad8158eb44ec16671a8.src","preCode":"    private void checkToBeAlteredRules(final String schemaName, final AlterEncryptRuleStatement sqlStatement, final EncryptRuleConfiguration currentRuleConfig) {\n        Collection<String> currentEncryptTableNames = currentRuleConfig.getTables().stream().map(EncryptTableRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistEncryptTableNames = getToBeAlteredEncryptTableNames(sqlStatement).stream().filter(each -> !currentEncryptTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistEncryptTableNames.isEmpty()) {\n            throw new EncryptRuleNotExistedException(schemaName, notExistEncryptTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-distsql/shardingsphere-encrypt-distsql-handler/src/main/java/org/apache/shardingsphere/encrypt/distsql/handler/update/AlterEncryptRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2021-07-04 01:26:11","commitOrder":3,"curCode":"    private void checkToBeAlteredShardingTables(final String schemaName, final AlterShardingTableRuleStatement sqlStatement, \n                                                final ShardingRuleConfiguration currentRuleConfig) throws ShardingTableRuleNotExistedException {\n        Collection<String> currentShardingTables = getCurrentShardingTables(currentRuleConfig);\n        Collection<String> notExistedShardingTables = getToBeAlteredTableNames(sqlStatement).stream().filter(each -> !currentShardingTables.contains(each)).collect(Collectors.toList());\n        if (!notExistedShardingTables.isEmpty()) {\n            throw new ShardingTableRuleNotExistedException(schemaName, notExistedShardingTables);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":101,"groupId":"7105","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkToBeAlteredShardingTables","params":"(finalStringschemaName@finalAlterShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b8/14b42c6f504fbfe98e2bc41079432f563fb8c2.src","preCode":"    private void checkToBeAlteredShardingTables(final String schemaName, final AlterShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) {\n        Collection<String> currentShardingTables = getCurrentShardingTables(currentRuleConfig);\n        Collection<String> notExistedShardingTables = getToBeAlteredTableNames(sqlStatement).stream().filter(each -> !currentShardingTables.contains(each)).collect(Collectors.toList());\n        if (!notExistedShardingTables.isEmpty()) {\n            throw new ShardingTableRuleNotExistedException(schemaName, notExistedShardingTables);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/AlterShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"18ab59a5ac8de3a2c2d2c1dac39de3041b9c36f3","commitMessage":"@@@Refactor RuleDefinitionViolationException to extend SQLException (#11129)\n\n* Refactor RDLBackendHandler\n\n* Refactor RuleDefinitionViolationException to extend SQLException","date":"2021-07-04 01:26:11","modifiedFileCount":"66","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 11:58:35","codes":[{"authorDate":"2021-07-04 11:58:35","commitOrder":4,"curCode":"    private void checkToBeAlteredRules(final String schemaName, final AlterEncryptRuleStatement sqlStatement, final EncryptRuleConfiguration currentRuleConfig) throws CurrentRuleNotExistedException {\n        Collection<String> currentEncryptTableNames = currentRuleConfig.getTables().stream().map(EncryptTableRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistEncryptTableNames = getToBeAlteredEncryptTableNames(sqlStatement).stream().filter(each -> !currentEncryptTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistEncryptTableNames.isEmpty()) {\n            throw new CurrentRuleNotExistedException(\"Encrypt\", schemaName, notExistEncryptTableNames);\n        }\n    }\n","date":"2021-07-04 11:58:35","endLine":71,"groupId":"7105","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeAlteredRules","params":"(finalStringschemaName@finalAlterEncryptRuleStatementsqlStatement@finalEncryptRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8b/29bf525e605d1a7b45d5ab4e50ba2e8d6e81df.src","preCode":"    private void checkToBeAlteredRules(final String schemaName, final AlterEncryptRuleStatement sqlStatement, final EncryptRuleConfiguration currentRuleConfig) throws EncryptRuleNotExistedException {\n        Collection<String> currentEncryptTableNames = currentRuleConfig.getTables().stream().map(EncryptTableRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistEncryptTableNames = getToBeAlteredEncryptTableNames(sqlStatement).stream().filter(each -> !currentEncryptTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistEncryptTableNames.isEmpty()) {\n            throw new EncryptRuleNotExistedException(schemaName, notExistEncryptTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-distsql/shardingsphere-encrypt-distsql-handler/src/main/java/org/apache/shardingsphere/encrypt/distsql/handler/update/AlterEncryptRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2021-07-04 11:58:35","commitOrder":4,"curCode":"    private void checkToBeAlteredShardingTables(final String schemaName, final AlterShardingTableRuleStatement sqlStatement, \n                                                final ShardingRuleConfiguration currentRuleConfig) throws CurrentRuleNotExistedException {\n        Collection<String> currentShardingTables = getCurrentShardingTables(currentRuleConfig);\n        Collection<String> notExistedShardingTables = getToBeAlteredTableNames(sqlStatement).stream().filter(each -> !currentShardingTables.contains(each)).collect(Collectors.toList());\n        if (!notExistedShardingTables.isEmpty()) {\n            throw new CurrentRuleNotExistedException(\"Sharding\", schemaName, notExistedShardingTables);\n        }\n    }\n","date":"2021-07-04 11:58:35","endLine":100,"groupId":"7105","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkToBeAlteredShardingTables","params":"(finalStringschemaName@finalAlterShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b0/066e4ef8f0accc0fbd2977a672ddab8b63f874.src","preCode":"    private void checkToBeAlteredShardingTables(final String schemaName, final AlterShardingTableRuleStatement sqlStatement, \n                                                final ShardingRuleConfiguration currentRuleConfig) throws ShardingTableRuleNotExistedException {\n        Collection<String> currentShardingTables = getCurrentShardingTables(currentRuleConfig);\n        Collection<String> notExistedShardingTables = getToBeAlteredTableNames(sqlStatement).stream().filter(each -> !currentShardingTables.contains(each)).collect(Collectors.toList());\n        if (!notExistedShardingTables.isEmpty()) {\n            throw new ShardingTableRuleNotExistedException(schemaName, notExistedShardingTables);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/AlterShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"2ae025c4f44535945a3c18f31ab3d8ca7cd8a298","commitMessage":"@@@Add CurrentRuleNotExistedException to refine Exception of current rule validation  (#11131)\n\n* Remove DatabaseDiscoveryRuleNotExistedException\n\n* Remove ReadwriteSplittingRuleNotExistedException\n\n* Remove EncryptRuleNotExistedException\n\n* Add CurrentRuleNotExistedException to refine Exception of current rule validation","date":"2021-07-04 11:58:35","modifiedFileCount":"19","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 15:02:59","codes":[{"authorDate":"2021-07-04 15:02:59","commitOrder":5,"curCode":"    private void checkToBeAlteredRules(final String schemaName, final AlterEncryptRuleStatement sqlStatement, final EncryptRuleConfiguration currentRuleConfig) throws RequiredRuleMissedException {\n        Collection<String> currentEncryptTableNames = currentRuleConfig.getTables().stream().map(EncryptTableRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistEncryptTableNames = getToBeAlteredEncryptTableNames(sqlStatement).stream().filter(each -> !currentEncryptTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistEncryptTableNames.isEmpty()) {\n            throw new RequiredRuleMissedException(\"Encrypt\", schemaName, notExistEncryptTableNames);\n        }\n    }\n","date":"2021-07-04 15:02:59","endLine":71,"groupId":"10303","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeAlteredRules","params":"(finalStringschemaName@finalAlterEncryptRuleStatementsqlStatement@finalEncryptRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bb/23db0830bea3af9e0bd3038e4b4815ef9d798b.src","preCode":"    private void checkToBeAlteredRules(final String schemaName, final AlterEncryptRuleStatement sqlStatement, final EncryptRuleConfiguration currentRuleConfig) throws CurrentRuleNotExistedException {\n        Collection<String> currentEncryptTableNames = currentRuleConfig.getTables().stream().map(EncryptTableRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistEncryptTableNames = getToBeAlteredEncryptTableNames(sqlStatement).stream().filter(each -> !currentEncryptTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistEncryptTableNames.isEmpty()) {\n            throw new CurrentRuleNotExistedException(\"Encrypt\", schemaName, notExistEncryptTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-distsql/shardingsphere-encrypt-distsql-handler/src/main/java/org/apache/shardingsphere/encrypt/distsql/handler/update/AlterEncryptRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2021-07-04 15:02:59","commitOrder":5,"curCode":"    private void checkToBeAlteredShardingTables(final String schemaName, final AlterShardingTableRuleStatement sqlStatement, \n                                                final ShardingRuleConfiguration currentRuleConfig) throws RequiredRuleMissedException {\n        Collection<String> currentShardingTables = getCurrentShardingTables(currentRuleConfig);\n        Collection<String> notExistedShardingTables = getToBeAlteredTableNames(sqlStatement).stream().filter(each -> !currentShardingTables.contains(each)).collect(Collectors.toList());\n        if (!notExistedShardingTables.isEmpty()) {\n            throw new RequiredRuleMissedException(\"Sharding\", schemaName, notExistedShardingTables);\n        }\n    }\n","date":"2021-07-04 15:02:59","endLine":99,"groupId":"10303","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"checkToBeAlteredShardingTables","params":"(finalStringschemaName@finalAlterShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0f/6feb5b938b4e20986b78cc46d17d35a8378e60.src","preCode":"    private void checkToBeAlteredShardingTables(final String schemaName, final AlterShardingTableRuleStatement sqlStatement, \n                                                final ShardingRuleConfiguration currentRuleConfig) throws CurrentRuleNotExistedException {\n        Collection<String> currentShardingTables = getCurrentShardingTables(currentRuleConfig);\n        Collection<String> notExistedShardingTables = getToBeAlteredTableNames(sqlStatement).stream().filter(each -> !currentShardingTables.contains(each)).collect(Collectors.toList());\n        if (!notExistedShardingTables.isEmpty()) {\n            throw new CurrentRuleNotExistedException(\"Sharding\", schemaName, notExistedShardingTables);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/AlterShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"83216cb8e0d277c40d499d8c6ad41413990dc1b5","commitMessage":"@@@Add ResourceDefinitionViolationException (#11136)\n\n* Add ResourceDefinitionViolationException\n\n* Add ResourceDefinitionViolationException\n\n* Rename DuplicateRuleException\n\n* Rename RequiredRuleMissedException\n\n* Rename RequiredResourceMissedException","date":"2021-07-04 15:02:59","modifiedFileCount":"35","status":"M","submitter":"Liang Zhang"}]
