[{"authorTime":"2020-10-16 14:40:38","codes":[{"authorDate":"2020-10-16 14:40:38","commitOrder":1,"curCode":"    public void assertSelectReadWrite() {\n        String sqlCommand = \"SELECT\";\n        long rowCount = 1;\n        String expectedString = sqlCommand + \" \" + rowCount;\n        int expectedStringLength = expectedString.length();\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(ByteBufTestUtils.createByteBuf(expectedStringLength + 1));\n        PostgreSQLCommandCompletePacket packet = new PostgreSQLCommandCompletePacket(sqlCommand, rowCount);\n        assertThat(packet.getMessageType(), is(PostgreSQLCommandPacketType.COMMAND_COMPLETE.getValue()));\n        packet.write(payload);\n        assertThat(payload.readStringNul(), is(expectedString));\n    }\n","date":"2020-10-16 14:40:38","endLine":41,"groupId":"8102","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertSelectReadWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e5/ce8ddeb13a1d227121873624a5b012bef71067.src","preCode":"    public void assertSelectReadWrite() {\n        String sqlCommand = \"SELECT\";\n        long rowCount = 1;\n        String expectedString = sqlCommand + \" \" + rowCount;\n        int expectedStringLength = expectedString.length();\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(ByteBufTestUtils.createByteBuf(expectedStringLength + 1));\n        PostgreSQLCommandCompletePacket packet = new PostgreSQLCommandCompletePacket(sqlCommand, rowCount);\n        assertThat(packet.getMessageType(), is(PostgreSQLCommandPacketType.COMMAND_COMPLETE.getValue()));\n        packet.write(payload);\n        assertThat(payload.readStringNul(), is(expectedString));\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/generic/PostgreSQLCommandCompletePacketTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"B"},{"authorDate":"2020-10-16 14:40:38","commitOrder":1,"curCode":"    public void assertInsertReadWrite() {\n        String sqlCommand = \"INSERT\";\n        long rowCount = 1;\n        String expectedString = sqlCommand + \" 0 \" + rowCount;\n        int expectedStringLength = expectedString.length();\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(ByteBufTestUtils.createByteBuf(expectedStringLength + 1));\n        PostgreSQLCommandCompletePacket packet = new PostgreSQLCommandCompletePacket(sqlCommand, rowCount);\n        assertThat(packet.getMessageType(), is(PostgreSQLCommandPacketType.COMMAND_COMPLETE.getValue()));\n        packet.write(payload);\n        assertThat(payload.readStringNul(), is(expectedString));\n    }\n","date":"2020-10-16 14:40:38","endLine":54,"groupId":"8102","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertInsertReadWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e5/ce8ddeb13a1d227121873624a5b012bef71067.src","preCode":"    public void assertInsertReadWrite() {\n        String sqlCommand = \"INSERT\";\n        long rowCount = 1;\n        String expectedString = sqlCommand + \" 0 \" + rowCount;\n        int expectedStringLength = expectedString.length();\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(ByteBufTestUtils.createByteBuf(expectedStringLength + 1));\n        PostgreSQLCommandCompletePacket packet = new PostgreSQLCommandCompletePacket(sqlCommand, rowCount);\n        assertThat(packet.getMessageType(), is(PostgreSQLCommandPacketType.COMMAND_COMPLETE.getValue()));\n        packet.write(payload);\n        assertThat(payload.readStringNul(), is(expectedString));\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/generic/PostgreSQLCommandCompletePacketTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"}],"commitId":"b8302dece09bc43f45220f26b2b26bdbc51298c0","commitMessage":"@@@#7792.  fix postgresql insert statement result (#7804)\n\n","date":"2020-10-16 14:40:38","modifiedFileCount":"2","status":"B","submitter":"Zhang Yonglun"},{"authorTime":"2021-04-13 17:47:26","codes":[{"authorDate":"2021-04-13 17:47:26","commitOrder":2,"curCode":"    public void assertSelectReadWrite() {\n        String sqlCommand = \"SELECT\";\n        long rowCount = 1;\n        String expectedString = sqlCommand + \" \" + rowCount;\n        int expectedStringLength = expectedString.length();\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(ByteBufTestUtils.createByteBuf(expectedStringLength + 1));\n        PostgreSQLCommandCompletePacket packet = new PostgreSQLCommandCompletePacket(sqlCommand, rowCount);\n        assertThat(packet.getIdentifier(), is(PostgreSQLCommandPacketType.COMMAND_COMPLETE.getValue()));\n        packet.write(payload);\n        assertThat(payload.readStringNul(), is(expectedString));\n    }\n","date":"2021-04-13 17:47:26","endLine":41,"groupId":"1605","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertSelectReadWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7e/015017af768fcc23ac279af0b9e9f77be30443.src","preCode":"    public void assertSelectReadWrite() {\n        String sqlCommand = \"SELECT\";\n        long rowCount = 1;\n        String expectedString = sqlCommand + \" \" + rowCount;\n        int expectedStringLength = expectedString.length();\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(ByteBufTestUtils.createByteBuf(expectedStringLength + 1));\n        PostgreSQLCommandCompletePacket packet = new PostgreSQLCommandCompletePacket(sqlCommand, rowCount);\n        assertThat(packet.getMessageType(), is(PostgreSQLCommandPacketType.COMMAND_COMPLETE.getValue()));\n        packet.write(payload);\n        assertThat(payload.readStringNul(), is(expectedString));\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/generic/PostgreSQLCommandCompletePacketTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"M"},{"authorDate":"2021-04-13 17:47:26","commitOrder":2,"curCode":"    public void assertInsertReadWrite() {\n        String sqlCommand = \"INSERT\";\n        long rowCount = 1;\n        String expectedString = sqlCommand + \" 0 \" + rowCount;\n        int expectedStringLength = expectedString.length();\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(ByteBufTestUtils.createByteBuf(expectedStringLength + 1));\n        PostgreSQLCommandCompletePacket packet = new PostgreSQLCommandCompletePacket(sqlCommand, rowCount);\n        assertThat(packet.getIdentifier(), is(PostgreSQLCommandPacketType.COMMAND_COMPLETE.getValue()));\n        packet.write(payload);\n        assertThat(payload.readStringNul(), is(expectedString));\n    }\n","date":"2021-04-13 17:47:26","endLine":54,"groupId":"1605","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertInsertReadWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7e/015017af768fcc23ac279af0b9e9f77be30443.src","preCode":"    public void assertInsertReadWrite() {\n        String sqlCommand = \"INSERT\";\n        long rowCount = 1;\n        String expectedString = sqlCommand + \" 0 \" + rowCount;\n        int expectedStringLength = expectedString.length();\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(ByteBufTestUtils.createByteBuf(expectedStringLength + 1));\n        PostgreSQLCommandCompletePacket packet = new PostgreSQLCommandCompletePacket(sqlCommand, rowCount);\n        assertThat(packet.getMessageType(), is(PostgreSQLCommandPacketType.COMMAND_COMPLETE.getValue()));\n        packet.write(payload);\n        assertThat(payload.readStringNul(), is(expectedString));\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/generic/PostgreSQLCommandCompletePacketTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"029a9f8a8336794cff5d8fc8db0f0cd04a7cc694","commitMessage":"@@@Rename PostgreSQLIdentifierPacket.getMessageType() to PostgreSQLIdentifierPacket.getIdentifier() (#10072)\n\n","date":"2021-04-13 17:47:26","modifiedFileCount":"41","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-04-13 18:57:42","codes":[{"authorDate":"2021-04-13 18:57:42","commitOrder":3,"curCode":"    public void assertSelectReadWrite() {\n        String sqlCommand = \"SELECT\";\n        long rowCount = 1;\n        String expectedString = sqlCommand + \" \" + rowCount;\n        int expectedStringLength = expectedString.length();\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(ByteBufTestUtils.createByteBuf(expectedStringLength + 1));\n        PostgreSQLCommandCompletePacket packet = new PostgreSQLCommandCompletePacket(sqlCommand, rowCount);\n        assertThat(packet.getIdentifier(), is(PostgreSQLMessagePacketType.COMMAND_COMPLETE.getValue()));\n        packet.write(payload);\n        assertThat(payload.readStringNul(), is(expectedString));\n    }\n","date":"2021-04-13 18:57:42","endLine":41,"groupId":"1605","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertSelectReadWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4e/75c5b50e789d043a0559152334348c3578c85a.src","preCode":"    public void assertSelectReadWrite() {\n        String sqlCommand = \"SELECT\";\n        long rowCount = 1;\n        String expectedString = sqlCommand + \" \" + rowCount;\n        int expectedStringLength = expectedString.length();\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(ByteBufTestUtils.createByteBuf(expectedStringLength + 1));\n        PostgreSQLCommandCompletePacket packet = new PostgreSQLCommandCompletePacket(sqlCommand, rowCount);\n        assertThat(packet.getIdentifier(), is(PostgreSQLCommandPacketType.COMMAND_COMPLETE.getValue()));\n        packet.write(payload);\n        assertThat(payload.readStringNul(), is(expectedString));\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/generic/PostgreSQLCommandCompletePacketTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"M"},{"authorDate":"2021-04-13 18:57:42","commitOrder":3,"curCode":"    public void assertInsertReadWrite() {\n        String sqlCommand = \"INSERT\";\n        long rowCount = 1;\n        String expectedString = sqlCommand + \" 0 \" + rowCount;\n        int expectedStringLength = expectedString.length();\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(ByteBufTestUtils.createByteBuf(expectedStringLength + 1));\n        PostgreSQLCommandCompletePacket packet = new PostgreSQLCommandCompletePacket(sqlCommand, rowCount);\n        assertThat(packet.getIdentifier(), is(PostgreSQLMessagePacketType.COMMAND_COMPLETE.getValue()));\n        packet.write(payload);\n        assertThat(payload.readStringNul(), is(expectedString));\n    }\n","date":"2021-04-13 18:57:42","endLine":54,"groupId":"1605","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertInsertReadWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4e/75c5b50e789d043a0559152334348c3578c85a.src","preCode":"    public void assertInsertReadWrite() {\n        String sqlCommand = \"INSERT\";\n        long rowCount = 1;\n        String expectedString = sqlCommand + \" 0 \" + rowCount;\n        int expectedStringLength = expectedString.length();\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(ByteBufTestUtils.createByteBuf(expectedStringLength + 1));\n        PostgreSQLCommandCompletePacket packet = new PostgreSQLCommandCompletePacket(sqlCommand, rowCount);\n        assertThat(packet.getIdentifier(), is(PostgreSQLCommandPacketType.COMMAND_COMPLETE.getValue()));\n        packet.write(payload);\n        assertThat(payload.readStringNul(), is(expectedString));\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/generic/PostgreSQLCommandCompletePacketTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"3e6e98d04869bbedf5b080ae46e21428ee7bf598","commitMessage":"@@@Split PostgreSQLCommandPacketType to PostgreSQLMessagePacketType and PostgreSQLCommandPacketType (#10074)\n\n* Split PostgreSQLCommandPacketType to PostgreSQLIdentifierTagType and PostgreSQLCommandPacketType\n\n* Add identifier package\n\n* Rename PostgreSQLMessagePacketType\n\n* Add PostgreSQLIdentifierTag.getValue()\n\n* Fix test case","date":"2021-04-13 18:57:42","modifiedFileCount":"29","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-04-13 21:54:27","codes":[{"authorDate":"2021-04-13 21:54:27","commitOrder":4,"curCode":"    public void assertSelectReadWrite() {\n        String sqlCommand = \"SELECT\";\n        long rowCount = 1;\n        String expectedString = sqlCommand + \" \" + rowCount;\n        int expectedStringLength = expectedString.length();\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(ByteBufTestUtils.createByteBuf(expectedStringLength + 1));\n        PostgreSQLCommandCompletePacket packet = new PostgreSQLCommandCompletePacket(sqlCommand, rowCount);\n        assertThat(packet.getIdentifier(), is(PostgreSQLMessagePacketType.COMMAND_COMPLETE));\n        packet.write(payload);\n        assertThat(payload.readStringNul(), is(expectedString));\n    }\n","date":"2021-04-13 21:54:27","endLine":41,"groupId":"101252","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"assertSelectReadWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/15/14c1d90950e22a129237bedd749f10068a79d7.src","preCode":"    public void assertSelectReadWrite() {\n        String sqlCommand = \"SELECT\";\n        long rowCount = 1;\n        String expectedString = sqlCommand + \" \" + rowCount;\n        int expectedStringLength = expectedString.length();\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(ByteBufTestUtils.createByteBuf(expectedStringLength + 1));\n        PostgreSQLCommandCompletePacket packet = new PostgreSQLCommandCompletePacket(sqlCommand, rowCount);\n        assertThat(packet.getIdentifier(), is(PostgreSQLMessagePacketType.COMMAND_COMPLETE.getValue()));\n        packet.write(payload);\n        assertThat(payload.readStringNul(), is(expectedString));\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/generic/PostgreSQLCommandCompletePacketTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"M"},{"authorDate":"2021-04-13 21:54:27","commitOrder":4,"curCode":"    public void assertInsertReadWrite() {\n        String sqlCommand = \"INSERT\";\n        long rowCount = 1;\n        String expectedString = sqlCommand + \" 0 \" + rowCount;\n        int expectedStringLength = expectedString.length();\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(ByteBufTestUtils.createByteBuf(expectedStringLength + 1));\n        PostgreSQLCommandCompletePacket packet = new PostgreSQLCommandCompletePacket(sqlCommand, rowCount);\n        assertThat(packet.getIdentifier(), is(PostgreSQLMessagePacketType.COMMAND_COMPLETE));\n        packet.write(payload);\n        assertThat(payload.readStringNul(), is(expectedString));\n    }\n","date":"2021-04-13 21:54:27","endLine":54,"groupId":"101252","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"assertInsertReadWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/15/14c1d90950e22a129237bedd749f10068a79d7.src","preCode":"    public void assertInsertReadWrite() {\n        String sqlCommand = \"INSERT\";\n        long rowCount = 1;\n        String expectedString = sqlCommand + \" 0 \" + rowCount;\n        int expectedStringLength = expectedString.length();\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(ByteBufTestUtils.createByteBuf(expectedStringLength + 1));\n        PostgreSQLCommandCompletePacket packet = new PostgreSQLCommandCompletePacket(sqlCommand, rowCount);\n        assertThat(packet.getIdentifier(), is(PostgreSQLMessagePacketType.COMMAND_COMPLETE.getValue()));\n        packet.write(payload);\n        assertThat(payload.readStringNul(), is(expectedString));\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/generic/PostgreSQLCommandCompletePacketTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"7bfc288fbe10baf38500285456c4cb66d6da46ff","commitMessage":"@@@Refactor PostgreSQLIdentifierPacket (#10078)\n\n","date":"2021-04-13 21:54:27","modifiedFileCount":"42","status":"M","submitter":"Liang Zhang"}]
