[{"authorTime":"2021-08-26 17:04:53","codes":[{"authorDate":"2020-12-23 00:59:04","commitOrder":2,"curCode":"    public Optional<DatabaseAdminExecutor> newInstance(final SQLStatement sqlStatement) {\n        if (sqlStatement instanceof MySQLUseStatement) {\n            return Optional.of(new UseDatabaseExecutor((MySQLUseStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof MySQLShowDatabasesStatement) {\n            return Optional.of(new ShowDatabasesExecutor());\n        }\n        if (sqlStatement instanceof MySQLShowTablesStatement) {\n            return Optional.of(new ShowTablesExecutor());\n        }\n        if (sqlStatement instanceof SelectStatement) {\n            ProjectionSegment firstProjection = ((SelectStatement) sqlStatement).getProjections().getProjections().iterator().next();\n            if (firstProjection instanceof ExpressionProjectionSegment\n                    && ShowCurrentDatabaseExecutor.FUNCTION_NAME.equalsIgnoreCase(((ExpressionProjectionSegment) firstProjection).getText())) {\n                return Optional.of(new ShowCurrentDatabaseExecutor());\n            }\n        }\n        return Optional.empty();\n    }\n","date":"2020-12-23 00:59:04","endLine":60,"groupId":"11074","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"newInstance","params":"(finalSQLStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0a/2bbcda69efabcda544e16c285603dbcd47aafc.src","preCode":"    public Optional<DatabaseAdminExecutor> newInstance(final SQLStatement sqlStatement) {\n        if (sqlStatement instanceof MySQLUseStatement) {\n            return Optional.of(new UseDatabaseExecutor((MySQLUseStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof MySQLShowDatabasesStatement) {\n            return Optional.of(new ShowDatabasesExecutor());\n        }\n        if (sqlStatement instanceof MySQLShowTablesStatement) {\n            return Optional.of(new ShowTablesExecutor());\n        }\n        if (sqlStatement instanceof SelectStatement) {\n            ProjectionSegment firstProjection = ((SelectStatement) sqlStatement).getProjections().getProjections().iterator().next();\n            if (firstProjection instanceof ExpressionProjectionSegment\n                    && ShowCurrentDatabaseExecutor.FUNCTION_NAME.equalsIgnoreCase(((ExpressionProjectionSegment) firstProjection).getText())) {\n                return Optional.of(new ShowCurrentDatabaseExecutor());\n            }\n        }\n        return Optional.empty();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/MySQLAdminExecutorFactory.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"NB"},{"authorDate":"2021-08-26 17:04:53","commitOrder":2,"curCode":"    public Optional<DatabaseAdminExecutor> newInstance(final SQLStatement sqlStatement, final String sql) {\n        if (sqlStatement instanceof UseStatement) {\n            return Optional.of(new UseDatabaseExecutor((UseStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof MySQLShowDatabasesStatement) {\n            return Optional.of(new ShowDatabasesExecutor());\n        }\n        if (sqlStatement instanceof MySQLShowProcessListStatement) {\n            return Optional.of(new ShowProcessListExecutor());\n        }\n        if (sqlStatement instanceof SelectStatement) {\n            if (isShowCurrentDatabaseStatement((SelectStatement) sqlStatement)) {\n                return Optional.of(new ShowCurrentDatabaseExecutor());\n            }\n            if (isQueryInformationSchema((SelectStatement) sqlStatement)) {\n                return Optional.of(MySQLInformationSchemaExecutorFactory.newInstance((SelectStatement) sqlStatement, sql));\n            }\n            if (isQueryPerformanceSchema((SelectStatement) sqlStatement)) {\n                \r\n                return Optional.empty();\n            }\n        }\n        return Optional.empty();\n    }\n","date":"2021-08-26 17:04:53","endLine":81,"groupId":"9832","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"newInstance","params":"(finalSQLStatementsqlStatement@finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ba/b31995b07f3072037d1be8cd403b3532eabba1.src","preCode":"    public Optional<DatabaseAdminExecutor> newInstance(final SQLStatement sqlStatement, final String sql) {\n        if (sqlStatement instanceof UseStatement) {\n            return Optional.of(new UseDatabaseExecutor((UseStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof MySQLShowDatabasesStatement) {\n            return Optional.of(new ShowDatabasesExecutor());\n        }\n        if (sqlStatement instanceof MySQLShowProcessListStatement) {\n            return Optional.of(new ShowProcessListExecutor());\n        }\n        if (sqlStatement instanceof SelectStatement) {\n            if (isShowCurrentDatabaseStatement((SelectStatement) sqlStatement)) {\n                return Optional.of(new ShowCurrentDatabaseExecutor());\n            }\n            if (isQueryInformationSchema((SelectStatement) sqlStatement)) {\n                return Optional.of(MySQLInformationSchemaExecutorFactory.newInstance((SelectStatement) sqlStatement, sql));\n            }\n            if (isQueryPerformanceSchema((SelectStatement) sqlStatement)) {\n                \r\n                return Optional.empty();\n            }\n        }\n        return Optional.empty();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/MySQLAdminExecutorFactory.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"}],"commitId":"aabeaf14e5017a1c3f3cd6152f1f10ab3c08e1ff","commitMessage":"@@@Support information_schema.schemata query (#12011)\n\n* feature : Adapt navicat connection to query the schemata table in the information schema.\n\n* Adjust comments and name.\n\n* Add unit test\n\n* Add unit test\n\n* Rename method.\n\n* Rename method.\n\n* Rename method.\n\n* remove import\n\n* reimport package\n\n* resolve comment\n\n* reformat","date":"2021-08-26 17:04:53","modifiedFileCount":"7","status":"M","submitter":"lanchengx"},{"authorTime":"2021-08-29 12:10:58","codes":[{"authorDate":"2020-12-23 00:59:04","commitOrder":3,"curCode":"    public Optional<DatabaseAdminExecutor> newInstance(final SQLStatement sqlStatement) {\n        if (sqlStatement instanceof MySQLUseStatement) {\n            return Optional.of(new UseDatabaseExecutor((MySQLUseStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof MySQLShowDatabasesStatement) {\n            return Optional.of(new ShowDatabasesExecutor());\n        }\n        if (sqlStatement instanceof MySQLShowTablesStatement) {\n            return Optional.of(new ShowTablesExecutor());\n        }\n        if (sqlStatement instanceof SelectStatement) {\n            ProjectionSegment firstProjection = ((SelectStatement) sqlStatement).getProjections().getProjections().iterator().next();\n            if (firstProjection instanceof ExpressionProjectionSegment\n                    && ShowCurrentDatabaseExecutor.FUNCTION_NAME.equalsIgnoreCase(((ExpressionProjectionSegment) firstProjection).getText())) {\n                return Optional.of(new ShowCurrentDatabaseExecutor());\n            }\n        }\n        return Optional.empty();\n    }\n","date":"2020-12-23 00:59:04","endLine":60,"groupId":"11074","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"newInstance","params":"(finalSQLStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0a/2bbcda69efabcda544e16c285603dbcd47aafc.src","preCode":"    public Optional<DatabaseAdminExecutor> newInstance(final SQLStatement sqlStatement) {\n        if (sqlStatement instanceof MySQLUseStatement) {\n            return Optional.of(new UseDatabaseExecutor((MySQLUseStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof MySQLShowDatabasesStatement) {\n            return Optional.of(new ShowDatabasesExecutor());\n        }\n        if (sqlStatement instanceof MySQLShowTablesStatement) {\n            return Optional.of(new ShowTablesExecutor());\n        }\n        if (sqlStatement instanceof SelectStatement) {\n            ProjectionSegment firstProjection = ((SelectStatement) sqlStatement).getProjections().getProjections().iterator().next();\n            if (firstProjection instanceof ExpressionProjectionSegment\n                    && ShowCurrentDatabaseExecutor.FUNCTION_NAME.equalsIgnoreCase(((ExpressionProjectionSegment) firstProjection).getText())) {\n                return Optional.of(new ShowCurrentDatabaseExecutor());\n            }\n        }\n        return Optional.empty();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/MySQLAdminExecutorFactory.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"},{"authorDate":"2021-08-29 12:10:58","commitOrder":3,"curCode":"    public Optional<DatabaseAdminExecutor> newInstance(final SQLStatement sqlStatement, final String sql) {\n        if (sqlStatement instanceof UseStatement) {\n            return Optional.of(new UseDatabaseExecutor((UseStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof MySQLShowDatabasesStatement) {\n            return Optional.of(new ShowDatabasesExecutor((MySQLShowDatabasesStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof MySQLShowProcessListStatement) {\n            return Optional.of(new ShowProcessListExecutor());\n        }\n        if (sqlStatement instanceof SelectStatement) {\n            if (isShowCurrentDatabaseStatement((SelectStatement) sqlStatement)) {\n                return Optional.of(new ShowCurrentDatabaseExecutor());\n            }\n            if (isQueryInformationSchema((SelectStatement) sqlStatement)) {\n                return Optional.of(MySQLInformationSchemaExecutorFactory.newInstance((SelectStatement) sqlStatement, sql));\n            }\n            if (isQueryPerformanceSchema((SelectStatement) sqlStatement)) {\n                \r\n                return Optional.empty();\n            }\n        }\n        return Optional.empty();\n    }\n","date":"2021-08-29 12:10:58","endLine":81,"groupId":"9832","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"newInstance","params":"(finalSQLStatementsqlStatement@finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/94/af55e832b1693b477ab9bf3de6385a49521b72.src","preCode":"    public Optional<DatabaseAdminExecutor> newInstance(final SQLStatement sqlStatement, final String sql) {\n        if (sqlStatement instanceof UseStatement) {\n            return Optional.of(new UseDatabaseExecutor((UseStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof MySQLShowDatabasesStatement) {\n            return Optional.of(new ShowDatabasesExecutor());\n        }\n        if (sqlStatement instanceof MySQLShowProcessListStatement) {\n            return Optional.of(new ShowProcessListExecutor());\n        }\n        if (sqlStatement instanceof SelectStatement) {\n            if (isShowCurrentDatabaseStatement((SelectStatement) sqlStatement)) {\n                return Optional.of(new ShowCurrentDatabaseExecutor());\n            }\n            if (isQueryInformationSchema((SelectStatement) sqlStatement)) {\n                return Optional.of(MySQLInformationSchemaExecutorFactory.newInstance((SelectStatement) sqlStatement, sql));\n            }\n            if (isQueryPerformanceSchema((SelectStatement) sqlStatement)) {\n                \r\n                return Optional.empty();\n            }\n        }\n        return Optional.empty();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/MySQLAdminExecutorFactory.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"d219e790fa4869f8d330f5692d2c6f91560723de","commitMessage":"@@@Fixes #11980.  make 'show databases' support 'like'. (#12014)\n\n* Fixes #11980.  make 'show databases' support 'like'.\n\n* add test cases.","date":"2021-08-29 12:10:58","modifiedFileCount":"5","status":"M","submitter":"Raigor"},{"authorTime":"2021-09-07 17:56:49","codes":[{"authorDate":"2021-09-07 17:56:49","commitOrder":4,"curCode":"    public Optional<DatabaseAdminExecutor> newInstance(final SQLStatement sqlStatement) {\n        if (sqlStatement instanceof MySQLShowTablesStatement) {\n            return Optional.of(new ShowTablesExecutor((MySQLShowTablesStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof MySQLShowTableStatusStatement) {\n            return Optional.of(new ShowTablesStatusExecutor((MySQLShowTableStatusStatement) sqlStatement));\n        }\n        return Optional.empty();\n    }\n","date":"2021-09-07 17:56:49","endLine":65,"groupId":"111067","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"newInstance","params":"(finalSQLStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0f/dd6a7b68fa0b8a6fbf624ac983d9217f6852da.src","preCode":"    public Optional<DatabaseAdminExecutor> newInstance(final SQLStatement sqlStatement) {\n        if (sqlStatement instanceof MySQLUseStatement) {\n            return Optional.of(new UseDatabaseExecutor((MySQLUseStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof MySQLShowDatabasesStatement) {\n            return Optional.of(new ShowDatabasesExecutor());\n        }\n        if (sqlStatement instanceof MySQLShowTablesStatement) {\n            return Optional.of(new ShowTablesExecutor());\n        }\n        if (sqlStatement instanceof SelectStatement) {\n            ProjectionSegment firstProjection = ((SelectStatement) sqlStatement).getProjections().getProjections().iterator().next();\n            if (firstProjection instanceof ExpressionProjectionSegment\n                    && ShowCurrentDatabaseExecutor.FUNCTION_NAME.equalsIgnoreCase(((ExpressionProjectionSegment) firstProjection).getText())) {\n                return Optional.of(new ShowCurrentDatabaseExecutor());\n            }\n        }\n        return Optional.empty();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/MySQLAdminExecutorFactory.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2021-09-07 17:56:49","commitOrder":4,"curCode":"    public Optional<DatabaseAdminExecutor> newInstance(final SQLStatement sqlStatement, final String sql) {\n        if (sqlStatement instanceof UseStatement) {\n            return Optional.of(new UseDatabaseExecutor((UseStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof MySQLShowDatabasesStatement) {\n            return Optional.of(new ShowDatabasesExecutor((MySQLShowDatabasesStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof MySQLShowProcessListStatement) {\n            return Optional.of(new ShowProcessListExecutor());\n        }\n        if (sqlStatement instanceof MySQLShowCreateDatabaseStatement) {\n            return Optional.of(new ShowCreateDatabaseExecutor((MySQLShowCreateDatabaseStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof SelectStatement) {\n            if (isShowSpecialFunction((SelectStatement) sqlStatement, ShowConnectionIdExecutor.FUNCTION_NAME)) {\n                return Optional.of(new ShowConnectionIdExecutor());\n            }\n            if (isShowSpecialFunction((SelectStatement) sqlStatement, ShowVersionExecutor.FUNCTION_NAME)) {\n                return Optional.of(new ShowVersionExecutor());\n            }\n            if (isShowSpecialFunction((SelectStatement) sqlStatement, ShowCurrentUserExecutor.FUNCTION_NAME)) {\n                return Optional.of(new ShowCurrentUserExecutor());\n            }\n            if (isShowSpecialFunction((SelectStatement) sqlStatement, ShowCurrentDatabaseExecutor.FUNCTION_NAME)) {\n                return Optional.of(new ShowCurrentDatabaseExecutor());\n            }\n            if (isQueryInformationSchema((SelectStatement) sqlStatement)) {\n                return Optional.of(MySQLInformationSchemaExecutorFactory.newInstance((SelectStatement) sqlStatement, sql));\n            }\n            if (isQueryPerformanceSchema((SelectStatement) sqlStatement)) {\n                \r\n                return Optional.empty();\n            }\n        }\n        return Optional.empty();\n    }\n","date":"2021-09-07 17:56:49","endLine":103,"groupId":"111067","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"newInstance","params":"(finalSQLStatementsqlStatement@finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0f/dd6a7b68fa0b8a6fbf624ac983d9217f6852da.src","preCode":"    public Optional<DatabaseAdminExecutor> newInstance(final SQLStatement sqlStatement, final String sql) {\n        if (sqlStatement instanceof UseStatement) {\n            return Optional.of(new UseDatabaseExecutor((UseStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof MySQLShowDatabasesStatement) {\n            return Optional.of(new ShowDatabasesExecutor((MySQLShowDatabasesStatement) sqlStatement));\n        }\n        if (sqlStatement instanceof MySQLShowProcessListStatement) {\n            return Optional.of(new ShowProcessListExecutor());\n        }\n        if (sqlStatement instanceof SelectStatement) {\n            if (isShowCurrentDatabaseStatement((SelectStatement) sqlStatement)) {\n                return Optional.of(new ShowCurrentDatabaseExecutor());\n            }\n            if (isQueryInformationSchema((SelectStatement) sqlStatement)) {\n                return Optional.of(MySQLInformationSchemaExecutorFactory.newInstance((SelectStatement) sqlStatement, sql));\n            }\n            if (isQueryPerformanceSchema((SelectStatement) sqlStatement)) {\n                \r\n                return Optional.empty();\n            }\n        }\n        return Optional.empty();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/MySQLAdminExecutorFactory.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"8c6c41b82a0ecb5c6e2d5925526516765ce46923","commitMessage":"@@@Supplement the supported SQL required by DataGrip & WorkBench (#12239)\n\n* support DataGrip\n\n* support \"PARTITIONS\"\n\n* revert extra commit\n\n* Support workbench without specifying schema connection\n\n* rename","date":"2021-09-07 17:56:49","modifiedFileCount":"3","status":"M","submitter":"lanchengx"}]
