[{"authorTime":"2021-05-26 15:53:47","codes":[{"authorDate":"2021-05-26 15:53:47","commitOrder":4,"curCode":"    private void refresh(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        Map<String, DataSource> dataSourceMap = mock(HashMap.class);\n        when(materials.getDataSourceMap()).thenReturn(dataSourceMap);\n        DataSource dataSource = mock(DataSource.class);\n        when(dataSourceMap.get(eq(\"ds\"))).thenReturn(dataSource);\n        Connection connection = mock(Connection.class);\n        when(dataSource.getConnection()).thenReturn(connection);\n        DatabaseMetaData metaData = mock(DatabaseMetaData.class);\n        when(connection.getMetaData()).thenReturn(metaData);\n        ResultSet resultSet = mock(ResultSet.class);\n        when(metaData.getTables(any(), any(), any(), any())).thenReturn(resultSet);\n        when(resultSet.next()).thenReturn(false);\n        SchemaRefresher<AlterTableStatement> schemaRefresher = new AlterTableStatementSchemaRefresher();\n        ShardingSphereSchema schema = ShardingSphereSchemaBuildUtil.buildSchema();\n        schemaRefresher.refresh(schema, Collections.singletonList(\"ds\"), alterTableStatement, materials);\n        assertTrue(schema.containsTable(\"t_order\"));\n    }\n","date":"2021-05-26 15:53:47","endLine":152,"groupId":"9450","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"refresh","params":"(finalAlterTableStatementalterTableStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/54/fadd11a477c78bacf3cd380f311ce9f286f02f.src","preCode":"    private void refresh(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        Map<String, DataSource> dataSourceMap = mock(HashMap.class);\n        when(materials.getDataSourceMap()).thenReturn(dataSourceMap);\n        DataSource dataSource = mock(DataSource.class);\n        when(dataSourceMap.get(eq(\"ds\"))).thenReturn(dataSource);\n        Connection connection = mock(Connection.class);\n        when(dataSource.getConnection()).thenReturn(connection);\n        DatabaseMetaData metaData = mock(DatabaseMetaData.class);\n        when(connection.getMetaData()).thenReturn(metaData);\n        ResultSet resultSet = mock(ResultSet.class);\n        when(metaData.getTables(any(), any(), any(), any())).thenReturn(resultSet);\n        when(resultSet.next()).thenReturn(false);\n        SchemaRefresher<AlterTableStatement> schemaRefresher = new AlterTableStatementSchemaRefresher();\n        ShardingSphereSchema schema = ShardingSphereSchemaBuildUtil.buildSchema();\n        schemaRefresher.refresh(schema, Collections.singletonList(\"ds\"), alterTableStatement, materials);\n        assertTrue(schema.containsTable(\"t_order\"));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/AlterTableStatementSchemaRefresherTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"MB"},{"authorDate":"2021-05-26 15:53:47","commitOrder":4,"curCode":"    private void refreshWithRenameTable(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        alterTableStatement.setRenameTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order_new\"))));\n        Map<String, DataSource> dataSourceMap = mock(HashMap.class);\n        when(materials.getDataSourceMap()).thenReturn(dataSourceMap);\n        DataSource dataSource = mock(DataSource.class);\n        when(dataSourceMap.get(eq(\"ds\"))).thenReturn(dataSource);\n        Connection connection = mock(Connection.class);\n        when(dataSource.getConnection()).thenReturn(connection);\n        DatabaseMetaData metaData = mock(DatabaseMetaData.class);\n        when(connection.getMetaData()).thenReturn(metaData);\n        ResultSet resultSet = mock(ResultSet.class);\n        when(metaData.getTables(any(), any(), any(), any())).thenReturn(resultSet);\n        when(resultSet.next()).thenReturn(false);\n        SchemaRefresher<AlterTableStatement> schemaRefresher = new AlterTableStatementSchemaRefresher();\n        ShardingSphereSchema schema = ShardingSphereSchemaBuildUtil.buildSchema();\n        schemaRefresher.refresh(schema, Collections.singletonList(\"ds\"), alterTableStatement, materials);\n        assertFalse(schema.containsTable(\"t_order\"));\n        assertTrue(schema.containsTable(\"t_order_new\"));\n    }\n","date":"2021-05-26 15:53:47","endLine":196,"groupId":"9450","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"refreshWithRenameTable","params":"(finalAlterTableStatementalterTableStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/54/fadd11a477c78bacf3cd380f311ce9f286f02f.src","preCode":"    private void refreshWithRenameTable(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        alterTableStatement.setRenameTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order_new\"))));\n        Map<String, DataSource> dataSourceMap = mock(HashMap.class);\n        when(materials.getDataSourceMap()).thenReturn(dataSourceMap);\n        DataSource dataSource = mock(DataSource.class);\n        when(dataSourceMap.get(eq(\"ds\"))).thenReturn(dataSource);\n        Connection connection = mock(Connection.class);\n        when(dataSource.getConnection()).thenReturn(connection);\n        DatabaseMetaData metaData = mock(DatabaseMetaData.class);\n        when(connection.getMetaData()).thenReturn(metaData);\n        ResultSet resultSet = mock(ResultSet.class);\n        when(metaData.getTables(any(), any(), any(), any())).thenReturn(resultSet);\n        when(resultSet.next()).thenReturn(false);\n        SchemaRefresher<AlterTableStatement> schemaRefresher = new AlterTableStatementSchemaRefresher();\n        ShardingSphereSchema schema = ShardingSphereSchemaBuildUtil.buildSchema();\n        schemaRefresher.refresh(schema, Collections.singletonList(\"ds\"), alterTableStatement, materials);\n        assertFalse(schema.containsTable(\"t_order\"));\n        assertTrue(schema.containsTable(\"t_order_new\"));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/AlterTableStatementSchemaRefresherTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"B"}],"commitId":"e527a88d21eb2fd83c985802ff12987a08bc54b1","commitMessage":"@@@support postgresql alter table rename statement (#10462)\n\n* support postgresql alter table rename statement\n\n* fix checkstyle\n\n* modify alter table pre validate logic\n\n* fix checkstyle\n\n* extract getRenameTable method","date":"2021-05-26 15:53:47","modifiedFileCount":"8","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-07-26 22:28:31","codes":[{"authorDate":"2021-07-26 22:28:31","commitOrder":5,"curCode":"    private void refresh(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        DataSource dataSource = mock(DataSource.class, RETURNS_DEEP_STUBS);\n        when(dataSource.getConnection().getMetaData().getTables(any(), any(), any(), any())).thenReturn(mock(ResultSet.class));\n        when(materials.getDataSourceMap()).thenReturn(Collections.singletonMap(\"ds\", dataSource));\n        SchemaRefresher<AlterTableStatement> schemaRefresher = new AlterTableStatementSchemaRefresher();\n        ShardingSphereSchema schema = ShardingSphereSchemaBuildUtil.buildSchema();\n        schemaRefresher.refresh(schema, Collections.singletonList(\"ds\"), alterTableStatement, materials);\n        assertTrue(schema.containsTable(\"t_order\"));\n    }\n","date":"2021-07-26 22:28:31","endLine":137,"groupId":"6409","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"refresh","params":"(finalAlterTableStatementalterTableStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/88/ffd924e2c0761bf78e4d9a24e73f2e174ab3b3.src","preCode":"    private void refresh(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        Map<String, DataSource> dataSourceMap = mock(HashMap.class);\n        when(materials.getDataSourceMap()).thenReturn(dataSourceMap);\n        DataSource dataSource = mock(DataSource.class);\n        when(dataSourceMap.get(eq(\"ds\"))).thenReturn(dataSource);\n        Connection connection = mock(Connection.class);\n        when(dataSource.getConnection()).thenReturn(connection);\n        DatabaseMetaData metaData = mock(DatabaseMetaData.class);\n        when(connection.getMetaData()).thenReturn(metaData);\n        ResultSet resultSet = mock(ResultSet.class);\n        when(metaData.getTables(any(), any(), any(), any())).thenReturn(resultSet);\n        when(resultSet.next()).thenReturn(false);\n        SchemaRefresher<AlterTableStatement> schemaRefresher = new AlterTableStatementSchemaRefresher();\n        ShardingSphereSchema schema = ShardingSphereSchemaBuildUtil.buildSchema();\n        schemaRefresher.refresh(schema, Collections.singletonList(\"ds\"), alterTableStatement, materials);\n        assertTrue(schema.containsTable(\"t_order\"));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/AlterTableStatementSchemaRefresherTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2021-07-26 22:28:31","commitOrder":5,"curCode":"    private void refreshWithRenameTable(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        alterTableStatement.setRenameTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order_new\"))));\n        DataSource dataSource = mock(DataSource.class, RETURNS_DEEP_STUBS);\n        when(dataSource.getConnection().getMetaData().getTables(any(), any(), any(), any())).thenReturn(mock(ResultSet.class));\n        when(materials.getDataSourceMap()).thenReturn(Collections.singletonMap(\"ds\", dataSource));\n        SchemaRefresher<AlterTableStatement> schemaRefresher = new AlterTableStatementSchemaRefresher();\n        ShardingSphereSchema schema = ShardingSphereSchemaBuildUtil.buildSchema();\n        schemaRefresher.refresh(schema, Collections.singletonList(\"ds\"), alterTableStatement, materials);\n        assertFalse(schema.containsTable(\"t_order\"));\n        assertTrue(schema.containsTable(\"t_order_new\"));\n    }\n","date":"2021-07-26 22:28:31","endLine":161,"groupId":"6409","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"refreshWithRenameTable","params":"(finalAlterTableStatementalterTableStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/88/ffd924e2c0761bf78e4d9a24e73f2e174ab3b3.src","preCode":"    private void refreshWithRenameTable(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        alterTableStatement.setRenameTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order_new\"))));\n        Map<String, DataSource> dataSourceMap = mock(HashMap.class);\n        when(materials.getDataSourceMap()).thenReturn(dataSourceMap);\n        DataSource dataSource = mock(DataSource.class);\n        when(dataSourceMap.get(eq(\"ds\"))).thenReturn(dataSource);\n        Connection connection = mock(Connection.class);\n        when(dataSource.getConnection()).thenReturn(connection);\n        DatabaseMetaData metaData = mock(DatabaseMetaData.class);\n        when(connection.getMetaData()).thenReturn(metaData);\n        ResultSet resultSet = mock(ResultSet.class);\n        when(metaData.getTables(any(), any(), any(), any())).thenReturn(resultSet);\n        when(resultSet.next()).thenReturn(false);\n        SchemaRefresher<AlterTableStatement> schemaRefresher = new AlterTableStatementSchemaRefresher();\n        ShardingSphereSchema schema = ShardingSphereSchemaBuildUtil.buildSchema();\n        schemaRefresher.refresh(schema, Collections.singletonList(\"ds\"), alterTableStatement, materials);\n        assertFalse(schema.containsTable(\"t_order\"));\n        assertTrue(schema.containsTable(\"t_order_new\"));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/AlterTableStatementSchemaRefresherTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"e0dbe9f967fac336499ae6a8886f4ece656cbef6","commitMessage":"@@@Remove useless eq and thenReturn(null) for mock  (#11514)\n\n* Remove useless eq with mock\n\n* Remove useless eq with mock\n\n* Remove useless eq with mock\n\n* Remove useless eq with mock\n\n* Remove useless eq with mock\n\n* Remove useless thenReturn(null)","date":"2021-07-26 22:28:31","modifiedFileCount":"17","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-25 17:00:38","codes":[{"authorDate":"2021-08-25 17:00:38","commitOrder":6,"curCode":"    private void refresh(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        DataSource dataSource = mock(DataSource.class, RETURNS_DEEP_STUBS);\n        when(dataSource.getConnection().getMetaData().getTables(any(), any(), any(), any())).thenReturn(mock(ResultSet.class));\n        SchemaRefresher<AlterTableStatement> schemaRefresher = new AlterTableStatementSchemaRefresher();\n        ShardingSphereSchema schema = ShardingSphereSchemaBuildUtil.buildSchema();\n        schemaRefresher.refresh(schema, Collections.singletonList(\"ds\"), alterTableStatement, materials);\n        assertTrue(schema.containsTable(\"t_order\"));\n    }\n","date":"2021-08-25 17:00:38","endLine":93,"groupId":"601","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"refresh","params":"(finalAlterTableStatementalterTableStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4d/743401c54fd63da2263a666deded6eabde6b03.src","preCode":"    private void refresh(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        DataSource dataSource = mock(DataSource.class, RETURNS_DEEP_STUBS);\n        when(dataSource.getConnection().getMetaData().getTables(any(), any(), any(), any())).thenReturn(mock(ResultSet.class));\n        when(materials.getDataSourceMap()).thenReturn(Collections.singletonMap(\"ds\", dataSource));\n        SchemaRefresher<AlterTableStatement> schemaRefresher = new AlterTableStatementSchemaRefresher();\n        ShardingSphereSchema schema = ShardingSphereSchemaBuildUtil.buildSchema();\n        schemaRefresher.refresh(schema, Collections.singletonList(\"ds\"), alterTableStatement, materials);\n        assertTrue(schema.containsTable(\"t_order\"));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/AlterTableStatementSchemaRefresherTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2021-08-25 17:00:38","commitOrder":6,"curCode":"    private void refreshWithRenameTable(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        alterTableStatement.setRenameTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order_new\"))));\n        DataSource dataSource = mock(DataSource.class, RETURNS_DEEP_STUBS);\n        when(dataSource.getConnection().getMetaData().getTables(any(), any(), any(), any())).thenReturn(mock(ResultSet.class));\n        SchemaRefresher<AlterTableStatement> schemaRefresher = new AlterTableStatementSchemaRefresher();\n        ShardingSphereSchema schema = ShardingSphereSchemaBuildUtil.buildSchema();\n        schemaRefresher.refresh(schema, Collections.singletonList(\"ds\"), alterTableStatement, materials);\n        assertFalse(schema.containsTable(\"t_order\"));\n        assertTrue(schema.containsTable(\"t_order_new\"));\n    }\n","date":"2021-08-25 17:00:38","endLine":105,"groupId":"601","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"refreshWithRenameTable","params":"(finalAlterTableStatementalterTableStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4d/743401c54fd63da2263a666deded6eabde6b03.src","preCode":"    private void refreshWithRenameTable(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        alterTableStatement.setRenameTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order_new\"))));\n        DataSource dataSource = mock(DataSource.class, RETURNS_DEEP_STUBS);\n        when(dataSource.getConnection().getMetaData().getTables(any(), any(), any(), any())).thenReturn(mock(ResultSet.class));\n        when(materials.getDataSourceMap()).thenReturn(Collections.singletonMap(\"ds\", dataSource));\n        SchemaRefresher<AlterTableStatement> schemaRefresher = new AlterTableStatementSchemaRefresher();\n        ShardingSphereSchema schema = ShardingSphereSchemaBuildUtil.buildSchema();\n        schemaRefresher.refresh(schema, Collections.singletonList(\"ds\"), alterTableStatement, materials);\n        assertFalse(schema.containsTable(\"t_order\"));\n        assertTrue(schema.containsTable(\"t_order_new\"));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/AlterTableStatementSchemaRefresherTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"1f7af63072392a810297faf3b1e7522704b1f750","commitMessage":"@@@refactor parallel check meta data.  refactor TableMetaDataLoaderEngine. (#11976)\n\n* refactor parallel check meta data.  refactor TableMetaDataLoaderEngine.\n\n* fix review suggestions.\n\n* fix review suggestions.\n\n* fix test failed.\n\n* fix review suggestions.\n\n* fix review suggestions.","date":"2021-08-25 17:00:38","modifiedFileCount":"17","status":"M","submitter":"tuichenchuxin"},{"authorTime":"2021-09-04 18:58:22","codes":[{"authorDate":"2021-09-04 18:58:22","commitOrder":7,"curCode":"    private void refresh(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        DataSource dataSource = mock(DataSource.class, RETURNS_DEEP_STUBS);\n        when(dataSource.getConnection().getMetaData().getTables(any(), any(), any(), any())).thenReturn(mock(ResultSet.class));\n        SchemaRefresher<AlterTableStatement> schemaRefresher = new AlterTableStatementSchemaRefresher();\n        ShardingSphereSchema schema = ShardingSphereSchemaBuildUtil.buildSchema();\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"\", mock(ShardingSphereResource.class), mock(ShardingSphereRuleMetaData.class), schema);\n        schemaRefresher.refresh(metaData, Collections.singletonList(\"ds\"), alterTableStatement, new ConfigurationProperties(new Properties()));\n        assertTrue(schema.containsTable(\"t_order\"));\n    }\n","date":"2021-09-04 18:58:22","endLine":91,"groupId":"101818","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"refresh","params":"(finalAlterTableStatementalterTableStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fa/c2721aa47260a10bb6ba0c76640ae5cd89d864.src","preCode":"    private void refresh(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        DataSource dataSource = mock(DataSource.class, RETURNS_DEEP_STUBS);\n        when(dataSource.getConnection().getMetaData().getTables(any(), any(), any(), any())).thenReturn(mock(ResultSet.class));\n        SchemaRefresher<AlterTableStatement> schemaRefresher = new AlterTableStatementSchemaRefresher();\n        ShardingSphereSchema schema = ShardingSphereSchemaBuildUtil.buildSchema();\n        schemaRefresher.refresh(schema, Collections.singletonList(\"ds\"), alterTableStatement, materials);\n        assertTrue(schema.containsTable(\"t_order\"));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/AlterTableStatementSchemaRefresherTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2021-09-04 18:58:22","commitOrder":7,"curCode":"    private void refreshWithRenameTable(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        alterTableStatement.setRenameTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order_new\"))));\n        DataSource dataSource = mock(DataSource.class, RETURNS_DEEP_STUBS);\n        when(dataSource.getConnection().getMetaData().getTables(any(), any(), any(), any())).thenReturn(mock(ResultSet.class));\n        SchemaRefresher<AlterTableStatement> schemaRefresher = new AlterTableStatementSchemaRefresher();\n        ShardingSphereSchema schema = ShardingSphereSchemaBuildUtil.buildSchema();\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"\", mock(ShardingSphereResource.class), mock(ShardingSphereRuleMetaData.class), schema);\n        schemaRefresher.refresh(metaData, Collections.singletonList(\"ds\"), alterTableStatement, new ConfigurationProperties(new Properties()));\n        assertFalse(schema.containsTable(\"t_order\"));\n        assertTrue(schema.containsTable(\"t_order_new\"));\n    }\n","date":"2021-09-04 18:58:22","endLine":104,"groupId":"101818","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"refreshWithRenameTable","params":"(finalAlterTableStatementalterTableStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fa/c2721aa47260a10bb6ba0c76640ae5cd89d864.src","preCode":"    private void refreshWithRenameTable(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        alterTableStatement.setRenameTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order_new\"))));\n        DataSource dataSource = mock(DataSource.class, RETURNS_DEEP_STUBS);\n        when(dataSource.getConnection().getMetaData().getTables(any(), any(), any(), any())).thenReturn(mock(ResultSet.class));\n        SchemaRefresher<AlterTableStatement> schemaRefresher = new AlterTableStatementSchemaRefresher();\n        ShardingSphereSchema schema = ShardingSphereSchemaBuildUtil.buildSchema();\n        schemaRefresher.refresh(schema, Collections.singletonList(\"ds\"), alterTableStatement, materials);\n        assertFalse(schema.containsTable(\"t_order\"));\n        assertTrue(schema.containsTable(\"t_order_new\"));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/AlterTableStatementSchemaRefresherTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"a8c655eaf51f230c724274dc0c1d6ba775c73d40","commitMessage":"@@@Add shardingsphere-single-table into kernel module (#12210)\n\n* Rename SchemaRulesBuilderMaterials\n\n* Add shardingsphere-single-table\n\n* Add shardingsphere-single-table\n\n* Revise javadoc\n\n* Move MetadataRefresher.findShardingSphereRulesByClass to ShardingSphereSchema\n\n* Add MutableDataNodeRule\n\n* Add SingleTableSchemaBuilderTest\n\n* Move single table rule\n\n* Move single table configuration\n\n* Revise java doc","date":"2021-09-04 18:58:22","modifiedFileCount":"54","status":"M","submitter":"Liang Zhang"}]
