[{"authorTime":"2021-05-01 20:24:48","codes":[{"authorDate":"2020-06-10 17:43:23","commitOrder":5,"curCode":"    private static AbstractBeanDefinition parseEncryptColumnRuleConfiguration(final Element element) {\n        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(EncryptColumnRuleConfiguration.class);\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.LOGIC_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.CIPHER_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.ASSISTED_QUERY_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.PLAIN_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.ENCRYPT_ALGORITHM_REF_ATTRIBUTE));\n        return factory.getBeanDefinition();\n    }\n","date":"2020-06-10 17:43:23","endLine":111,"groupId":"1517","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"parseEncryptColumnRuleConfiguration","params":"(finalElementelement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5e/40667c0a84f43320b1069c6e112372f89a0b55.src","preCode":"    private static AbstractBeanDefinition parseEncryptColumnRuleConfiguration(final Element element) {\n        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(EncryptColumnRuleConfiguration.class);\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.LOGIC_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.CIPHER_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.ASSISTED_QUERY_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.PLAIN_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.ENCRYPT_ALGORITHM_REF_ATTRIBUTE));\n        return factory.getBeanDefinition();\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-spring/shardingsphere-encrypt-spring-namespace/src/main/java/org/apache/shardingsphere/encrypt/spring/namespace/parser/EncryptRuleBeanDefinitionParser.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"NB"},{"authorDate":"2021-05-01 20:24:48","commitOrder":5,"curCode":"    private BeanDefinition parseReadWriteSplittingDataSourceRuleConfiguration(final Element element) {\n        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(ReadWriteSplittingDataSourceRuleConfiguration.class);\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.READ_WRITE_SPLITTING_DATA_SOURCE_ID_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.AUTO_AWARE_DATA_SOURCE_NAME));\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.WRITE_DATA_SOURCE_NAME_ATTRIBUTE));\n        factory.addConstructorArgValue(parseReplicaDataSourcesRef(element));\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.LOAD_BALANCE_ALGORITHM_REF_ATTRIBUTE));\n        return factory.getBeanDefinition();\n    }\n","date":"2021-05-01 20:24:48","endLine":68,"groupId":"4266","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"parseReadWriteSplittingDataSourceRuleConfiguration","params":"(finalElementelement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6e/985bd1470f9a15be5a35198cd2c2cc45b7c564.src","preCode":"    private BeanDefinition parseReadWriteSplittingDataSourceRuleConfiguration(final Element element) {\n        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(ReadWriteSplittingDataSourceRuleConfiguration.class);\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.READ_WRITE_SPLITTING_DATA_SOURCE_ID_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.AUTO_AWARE_DATA_SOURCE_NAME));\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.WRITE_DATA_SOURCE_NAME_ATTRIBUTE));\n        factory.addConstructorArgValue(parseReplicaDataSourcesRef(element));\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.LOAD_BALANCE_ALGORITHM_REF_ATTRIBUTE));\n        return factory.getBeanDefinition();\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-spring/shardingsphere-readwrite-splitting-spring-namespace/src/main/java/org/apache/shardingsphere/readwritesplitting/spring/namespace/parser/ReadWriteSplittingRuleBeanDefinitionParser.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"}],"commitId":"79e410bc4bdd18e0d50879c34137d674e3815e53","commitMessage":"@@@Rename module name from read-write-splitting to readwrite-splitting (#10235)\n\n","date":"2021-05-01 20:24:48","modifiedFileCount":"0","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-05-02 00:11:18","codes":[{"authorDate":"2020-06-10 17:43:23","commitOrder":6,"curCode":"    private static AbstractBeanDefinition parseEncryptColumnRuleConfiguration(final Element element) {\n        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(EncryptColumnRuleConfiguration.class);\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.LOGIC_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.CIPHER_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.ASSISTED_QUERY_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.PLAIN_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.ENCRYPT_ALGORITHM_REF_ATTRIBUTE));\n        return factory.getBeanDefinition();\n    }\n","date":"2020-06-10 17:43:23","endLine":111,"groupId":"1517","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"parseEncryptColumnRuleConfiguration","params":"(finalElementelement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5e/40667c0a84f43320b1069c6e112372f89a0b55.src","preCode":"    private static AbstractBeanDefinition parseEncryptColumnRuleConfiguration(final Element element) {\n        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(EncryptColumnRuleConfiguration.class);\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.LOGIC_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.CIPHER_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.ASSISTED_QUERY_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.PLAIN_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.ENCRYPT_ALGORITHM_REF_ATTRIBUTE));\n        return factory.getBeanDefinition();\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-spring/shardingsphere-encrypt-spring-namespace/src/main/java/org/apache/shardingsphere/encrypt/spring/namespace/parser/EncryptRuleBeanDefinitionParser.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"N"},{"authorDate":"2021-05-02 00:11:18","commitOrder":6,"curCode":"    private BeanDefinition parseReadWriteSplittingDataSourceRuleConfiguration(final Element element) {\n        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(ReadWriteSplittingDataSourceRuleConfiguration.class);\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.READWRITE_SPLITTING_DATA_SOURCE_ID_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.AUTO_AWARE_DATA_SOURCE_NAME));\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.WRITE_DATA_SOURCE_NAME_ATTRIBUTE));\n        factory.addConstructorArgValue(parseReplicaDataSourcesRef(element));\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.LOAD_BALANCE_ALGORITHM_REF_ATTRIBUTE));\n        return factory.getBeanDefinition();\n    }\n","date":"2021-05-02 00:11:18","endLine":68,"groupId":"4266","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"parseReadWriteSplittingDataSourceRuleConfiguration","params":"(finalElementelement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2f/8dbcd5290a9be4d0350aaab09c67322824093d.src","preCode":"    private BeanDefinition parseReadWriteSplittingDataSourceRuleConfiguration(final Element element) {\n        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(ReadWriteSplittingDataSourceRuleConfiguration.class);\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.READ_WRITE_SPLITTING_DATA_SOURCE_ID_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.AUTO_AWARE_DATA_SOURCE_NAME));\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.WRITE_DATA_SOURCE_NAME_ATTRIBUTE));\n        factory.addConstructorArgValue(parseReplicaDataSourcesRef(element));\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.LOAD_BALANCE_ALGORITHM_REF_ATTRIBUTE));\n        return factory.getBeanDefinition();\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-spring/shardingsphere-readwrite-splitting-spring-namespace/src/main/java/org/apache/shardingsphere/readwritesplitting/spring/namespace/parser/ReadWriteSplittingRuleBeanDefinitionParser.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"6e3458eda6daab54143ad794c3b1ad04f7ed95b0","commitMessage":"@@@Rename read-write to readwrite (#10236)\n\n* Update doc\n\n* Rename read-write to readwrite","date":"2021-05-02 00:11:18","modifiedFileCount":"76","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-05-06 23:57:29","codes":[{"authorDate":"2020-06-10 17:43:23","commitOrder":7,"curCode":"    private static AbstractBeanDefinition parseEncryptColumnRuleConfiguration(final Element element) {\n        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(EncryptColumnRuleConfiguration.class);\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.LOGIC_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.CIPHER_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.ASSISTED_QUERY_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.PLAIN_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.ENCRYPT_ALGORITHM_REF_ATTRIBUTE));\n        return factory.getBeanDefinition();\n    }\n","date":"2020-06-10 17:43:23","endLine":111,"groupId":"1517","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"parseEncryptColumnRuleConfiguration","params":"(finalElementelement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5e/40667c0a84f43320b1069c6e112372f89a0b55.src","preCode":"    private static AbstractBeanDefinition parseEncryptColumnRuleConfiguration(final Element element) {\n        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(EncryptColumnRuleConfiguration.class);\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.LOGIC_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.CIPHER_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.ASSISTED_QUERY_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.PLAIN_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.ENCRYPT_ALGORITHM_REF_ATTRIBUTE));\n        return factory.getBeanDefinition();\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-spring/shardingsphere-encrypt-spring-namespace/src/main/java/org/apache/shardingsphere/encrypt/spring/namespace/parser/EncryptRuleBeanDefinitionParser.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"N"},{"authorDate":"2021-05-06 23:57:29","commitOrder":7,"curCode":"    private BeanDefinition parseReadwriteSplittingDataSourceRuleConfiguration(final Element element) {\n        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(ReadwriteSplittingDataSourceRuleConfiguration.class);\n        factory.addConstructorArgValue(element.getAttribute(ReadwriteSplittingRuleBeanDefinitionTag.READWRITE_SPLITTING_DATA_SOURCE_ID_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(ReadwriteSplittingRuleBeanDefinitionTag.AUTO_AWARE_DATA_SOURCE_NAME));\n        factory.addConstructorArgValue(element.getAttribute(ReadwriteSplittingRuleBeanDefinitionTag.WRITE_DATA_SOURCE_NAME_ATTRIBUTE));\n        factory.addConstructorArgValue(parseReadDataSourcesRef(element));\n        factory.addConstructorArgValue(element.getAttribute(ReadwriteSplittingRuleBeanDefinitionTag.LOAD_BALANCE_ALGORITHM_REF_ATTRIBUTE));\n        return factory.getBeanDefinition();\n    }\n","date":"2021-05-06 23:57:29","endLine":68,"groupId":"4266","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"parseReadwriteSplittingDataSourceRuleConfiguration","params":"(finalElementelement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bd/f19e108592691ea921c58eab6276cc1a1af215.src","preCode":"    private BeanDefinition parseReadWriteSplittingDataSourceRuleConfiguration(final Element element) {\n        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(ReadWriteSplittingDataSourceRuleConfiguration.class);\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.READWRITE_SPLITTING_DATA_SOURCE_ID_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.AUTO_AWARE_DATA_SOURCE_NAME));\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.WRITE_DATA_SOURCE_NAME_ATTRIBUTE));\n        factory.addConstructorArgValue(parseReplicaDataSourcesRef(element));\n        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.LOAD_BALANCE_ALGORITHM_REF_ATTRIBUTE));\n        return factory.getBeanDefinition();\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-spring/shardingsphere-readwrite-splitting-spring-namespace/src/main/java/org/apache/shardingsphere/readwritesplitting/spring/namespace/parser/ReadwriteSplittingRuleBeanDefinitionParser.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"c0a66492b6656ca15aac8cd880350a91c1e45bb0","commitMessage":"@@@Rename ReadWrite to Readwrite (#10261)\n\n* Rename ReadWriteSplittingRule\n\n* Rename ReadwriteSplittingDataSourceRuleConfiguration\n\n* Rename ReadwriteSplittingSQLRouter\n\n* Rename ReadwriteSplittingDataSourceRouter\n\n* Rename ReadwriteSplittingRule\n\n* Rename ReadwriteSplittingDataSourceRule\n\n* Rename AlgorithmProvidedReadwriteSplittingRuleBuilder\n\n* Rename ReadwriteSplittingRuleBuilder\n\n* rename ReadwriteSplittingOrder\n\n* Rename AlgorithmProvidedReadwriteSplittingRuleConfiguration\n\n* Rename YamlReadwriteSplittingRuleConfiguration\n\n* Rename YamlReadwriteSplittingDataSourceRuleConfiguration\n\n* Rename AlterReadwriteSplittingRuleStatementConverter\n\n* Rename CreateReadwriteSplittingRuleStatementConverter\n\n* Rename ReadwriteSplittingRuleAlgorithmProviderConfigurationYamlSwapper\n\n* Rename ReadwriteSplittingRuleConfigurationYamlSwapper\n\n* Rename ReadwriteSplittingAlgorithmProvidedBeanRegistry\n\n* Rename ReadwriteSplittingSpringBootCondition\n\n* Rename YamlReadwriteSplittingRuleSpringBootConfiguration\n\n* Rename ReadwriteSplittingRuleSpringbootConfiguration\n\n* Rename ReadwriteSplittingSpringBootStarterTest\n\n* Rename YamlGovernanceReadwriteSplittingIntegrateTest\n\n* Rename CreateReadwriteSplittingRuleStatement\n\n* Rename ReadwriteSplittingRuleSegment\n\n* Rename GovernanceSpringBootRegistryReadwriteSplittingTest\n\n* Rename AlterReadwriteSplittingRuleStatement\n\n* Rename ReadwriteSplittingRuleConfigurationChecker\n\n* Rename LocalShardingReadwriteSplittingConfiguration\n\n* Rename ReadwriteSplittingRuleNotExistedException\n\n* Rename ReadwriteSplittingRuleCreateExistsException\n\n* Rename AddReadwriteSplittingRuleDataSourcesExistedException\n\n* Rename ReadwriteSplittingRuleDataSourcesNotExistedException\n\n* Rename ReadwriteSplittingRuleQueryBackendHandler\n\n* Rename DropReadwriteSplittingRuleBackendHandler\n\n* Rename GovernanceSpringBootReadwriteSplittingTest\n\n* Rename AlterReadwriteSplittingRuleBackendHandler\n\n* Rename CreateReadwriteSplittingRuleBackendHandler\n\n* Rename GovernanceShardingReadwriteSplittingNamespaceTest\n\n* Rename YamlGovernanceShardingWithReadwriteSplittingIntegrateTest\n\n* Rename CloudReadwriteSplittingConfiguration\n\n* Rename ShardingReadwriteSplittingConfigurationPrecise\n\n* Rename AbstractShardingSphereDataSourceForReadwriteSplittingTest\n\n* Rename AlgorithmProvidedReadwriteSplittingRuleConfigurationChecker\n\n* Rename ReadwriteSplittingSpringNamespaceTest\n\n* Rename ReadwriteSplittingRuleBeanDefinitionTag\n\n* Rename AbstractReadwriteSplittingRuleConfigurationChecker\n\n* Rename ReadwriteSplittingNamespaceHandler\n\n* Rename ReadwriteSplittingRuleBeanDefinitionParser\n\n* Rename ReadWrite to Readwrite with java class\n\n* Rename ReadWrite to Readwrite with docs","date":"2021-05-06 23:57:29","modifiedFileCount":"20","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-09-05 19:00:52","codes":[{"authorDate":"2020-06-10 17:43:23","commitOrder":8,"curCode":"    private static AbstractBeanDefinition parseEncryptColumnRuleConfiguration(final Element element) {\n        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(EncryptColumnRuleConfiguration.class);\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.LOGIC_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.CIPHER_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.ASSISTED_QUERY_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.PLAIN_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.ENCRYPT_ALGORITHM_REF_ATTRIBUTE));\n        return factory.getBeanDefinition();\n    }\n","date":"2020-06-10 17:43:23","endLine":111,"groupId":"10786","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"parseEncryptColumnRuleConfiguration","params":"(finalElementelement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5e/40667c0a84f43320b1069c6e112372f89a0b55.src","preCode":"    private static AbstractBeanDefinition parseEncryptColumnRuleConfiguration(final Element element) {\n        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(EncryptColumnRuleConfiguration.class);\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.LOGIC_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.CIPHER_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.ASSISTED_QUERY_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.PLAIN_COLUMN_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(EncryptRuleBeanDefinitionTag.ENCRYPT_ALGORITHM_REF_ATTRIBUTE));\n        return factory.getBeanDefinition();\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-spring/shardingsphere-encrypt-spring-namespace/src/main/java/org/apache/shardingsphere/encrypt/spring/namespace/parser/EncryptRuleBeanDefinitionParser.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"N"},{"authorDate":"2021-09-05 19:00:52","commitOrder":8,"curCode":"    private BeanDefinition parseReadwriteSplittingDataSourceRuleConfiguration(final Element element) {\n        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(ReadwriteSplittingDataSourceRuleConfiguration.class);\n        factory.addConstructorArgValue(element.getAttribute(ReadwriteSplittingRuleBeanDefinitionTag.READWRITE_SPLITTING_DATA_SOURCE_ID_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(ReadwriteSplittingRuleBeanDefinitionTag.AUTO_AWARE_DATA_SOURCE_NAME));\n        factory.addConstructorArgValue(element.getAttribute(ReadwriteSplittingRuleBeanDefinitionTag.WRITE_DATA_SOURCE_NAME_ATTRIBUTE));\n        factory.addConstructorArgValue(parseReadDataSourcesRef(element));\n        factory.addConstructorArgValue(element.getAttribute(ReadwriteSplittingRuleBeanDefinitionTag.LOAD_BALANCE_ALGORITHM_REF_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(ReadwriteSplittingRuleBeanDefinitionTag.QUERY_CONSISTENT));\n        return factory.getBeanDefinition();\n    }\n","date":"2021-09-05 19:00:52","endLine":69,"groupId":"10786","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"parseReadwriteSplittingDataSourceRuleConfiguration","params":"(finalElementelement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a1/11a77e04ceb92edaa3bf274daa5d735f78270d.src","preCode":"    private BeanDefinition parseReadwriteSplittingDataSourceRuleConfiguration(final Element element) {\n        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(ReadwriteSplittingDataSourceRuleConfiguration.class);\n        factory.addConstructorArgValue(element.getAttribute(ReadwriteSplittingRuleBeanDefinitionTag.READWRITE_SPLITTING_DATA_SOURCE_ID_ATTRIBUTE));\n        factory.addConstructorArgValue(element.getAttribute(ReadwriteSplittingRuleBeanDefinitionTag.AUTO_AWARE_DATA_SOURCE_NAME));\n        factory.addConstructorArgValue(element.getAttribute(ReadwriteSplittingRuleBeanDefinitionTag.WRITE_DATA_SOURCE_NAME_ATTRIBUTE));\n        factory.addConstructorArgValue(parseReadDataSourcesRef(element));\n        factory.addConstructorArgValue(element.getAttribute(ReadwriteSplittingRuleBeanDefinitionTag.LOAD_BALANCE_ALGORITHM_REF_ATTRIBUTE));\n        return factory.getBeanDefinition();\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-spring/shardingsphere-readwrite-splitting-spring-namespace/src/main/java/org/apache/shardingsphere/readwritesplitting/spring/namespace/parser/ReadwriteSplittingRuleBeanDefinitionParser.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"b25419ae9f4af7a98255740bc603c34d82f34e97","commitMessage":"@@@Fixes #12158.  add configuration for whether enable consistent routing for readwrite splitting. (#12209)\n\n* For #12158.  Add the consistencyEnabled configuration for readwrite-splitting API & core.\n\n* For #12158.  Add the consistencyEnabled default value for DistSQL handler.\n\n* Add consistencyEnabled configuration and parser for Spring Namespace.\n\n* Add consistencyEnabled configuration for examples.\n\n* update documents of readwrite splitting.\n\n* fix CI.\n\n* update more test cases.\n\n* Change `consistencyEnabled` to `queryConsistent`.\n\n* revert blank line.","date":"2021-09-05 19:00:52","modifiedFileCount":"30","status":"M","submitter":"Raigor"}]
