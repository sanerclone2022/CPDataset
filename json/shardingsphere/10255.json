[{"authorTime":"2021-06-08 11:37:47","codes":[{"authorDate":"2021-06-05 21:57:24","commitOrder":2,"curCode":"    public void assertUpdateRuleStatusWithEnable() {\n        DatabaseDiscoveryRule databaseDiscoveryRule = createHARule();\n        databaseDiscoveryRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"ds_0\", true));\n        assertThat(databaseDiscoveryRule.getSingleDataSourceRule().getDataSourceNames(), is(Collections.singletonList(\"ds_1\")));\n        databaseDiscoveryRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"ds_0\", false));\n        assertThat(databaseDiscoveryRule.getSingleDataSourceRule().getDataSourceNames(), is(Arrays.asList(\"ds_0\", \"ds_1\")));\n    }\n","date":"2021-06-05 21:57:24","endLine":96,"groupId":"1314","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertUpdateRuleStatusWithEnable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/74/4800122c4c065fdf40a6b137f730a61ccec2f4.src","preCode":"    public void assertUpdateRuleStatusWithEnable() {\n        DatabaseDiscoveryRule databaseDiscoveryRule = createHARule();\n        databaseDiscoveryRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"ds_0\", true));\n        assertThat(databaseDiscoveryRule.getSingleDataSourceRule().getDataSourceNames(), is(Collections.singletonList(\"ds_1\")));\n        databaseDiscoveryRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"ds_0\", false));\n        assertThat(databaseDiscoveryRule.getSingleDataSourceRule().getDataSourceNames(), is(Arrays.asList(\"ds_0\", \"ds_1\")));\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-core/src/test/java/org/apache/shardingsphere/dbdiscovery/rule/DatabaseDiscoveryRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"NB"},{"authorDate":"2021-06-08 11:37:47","commitOrder":2,"curCode":"    public void assertUpdateRuleStatusWithEnable() {\n        ReadwriteSplittingRule readwriteSplittingRule = createReadwriteSplittingRule();\n        readwriteSplittingRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"read_ds_0\", true));\n        assertThat(readwriteSplittingRule.getSingleDataSourceRule().getReadDataSourceNames(), is(Collections.singletonList(\"read_ds_1\")));\n        readwriteSplittingRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"read_ds_0\", false));\n        assertThat(readwriteSplittingRule.getSingleDataSourceRule().getReadDataSourceNames(), is(Arrays.asList(\"read_ds_0\", \"read_ds_1\")));\n    }\n","date":"2021-06-08 11:37:47","endLine":92,"groupId":"1314","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertUpdateRuleStatusWithEnable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5d/ce2a0f2ce54424774a0bc425f2224e2fc262d9.src","preCode":"    public void assertUpdateRuleStatusWithEnable() {\n        ReadwriteSplittingRule readwriteSplittingRule = createReadwriteSplittingRule();\n        readwriteSplittingRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"read_ds_0\", true));\n        assertThat(readwriteSplittingRule.getSingleDataSourceRule().getReadDataSourceNames(), is(Collections.singletonList(\"read_ds_1\")));\n        readwriteSplittingRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"read_ds_0\", false));\n        assertThat(readwriteSplittingRule.getSingleDataSourceRule().getReadDataSourceNames(), is(Arrays.asList(\"read_ds_0\", \"read_ds_1\")));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/ReadwriteSplittingRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"064bffe3e00d9db5179d52f81d8d5dad9620a3a5","commitMessage":"@@@Correct packages and generic types (#10710)\n\n","date":"2021-06-08 11:37:47","modifiedFileCount":"0","status":"M","submitter":"???"},{"authorTime":"2021-06-08 11:37:47","codes":[{"authorDate":"2021-08-28 11:58:56","commitOrder":3,"curCode":"    public void assertUpdateRuleStatusWithEnable() {\n        DatabaseDiscoveryRule databaseDiscoveryRule = createRule();\n        databaseDiscoveryRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"ds_0\", true));\n        assertThat(databaseDiscoveryRule.getSingleDataSourceRule().getDataSourceNames(), is(Collections.singletonList(\"ds_1\")));\n        databaseDiscoveryRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"ds_0\", false));\n        assertThat(databaseDiscoveryRule.getSingleDataSourceRule().getDataSourceNames(), is(Arrays.asList(\"ds_0\", \"ds_1\")));\n    }\n","date":"2021-08-28 11:58:56","endLine":88,"groupId":"1314","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertUpdateRuleStatusWithEnable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9d/72fb3579abdd7517ec481a64256907aa78dd0b.src","preCode":"    public void assertUpdateRuleStatusWithEnable() {\n        DatabaseDiscoveryRule databaseDiscoveryRule = createHARule();\n        databaseDiscoveryRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"ds_0\", true));\n        assertThat(databaseDiscoveryRule.getSingleDataSourceRule().getDataSourceNames(), is(Collections.singletonList(\"ds_1\")));\n        databaseDiscoveryRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"ds_0\", false));\n        assertThat(databaseDiscoveryRule.getSingleDataSourceRule().getDataSourceNames(), is(Arrays.asList(\"ds_0\", \"ds_1\")));\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-core/src/test/java/org/apache/shardingsphere/dbdiscovery/rule/DatabaseDiscoveryRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2021-06-08 11:37:47","commitOrder":3,"curCode":"    public void assertUpdateRuleStatusWithEnable() {\n        ReadwriteSplittingRule readwriteSplittingRule = createReadwriteSplittingRule();\n        readwriteSplittingRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"read_ds_0\", true));\n        assertThat(readwriteSplittingRule.getSingleDataSourceRule().getReadDataSourceNames(), is(Collections.singletonList(\"read_ds_1\")));\n        readwriteSplittingRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"read_ds_0\", false));\n        assertThat(readwriteSplittingRule.getSingleDataSourceRule().getReadDataSourceNames(), is(Arrays.asList(\"read_ds_0\", \"read_ds_1\")));\n    }\n","date":"2021-06-08 11:37:47","endLine":92,"groupId":"1314","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertUpdateRuleStatusWithEnable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5d/ce2a0f2ce54424774a0bc425f2224e2fc262d9.src","preCode":"    public void assertUpdateRuleStatusWithEnable() {\n        ReadwriteSplittingRule readwriteSplittingRule = createReadwriteSplittingRule();\n        readwriteSplittingRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"read_ds_0\", true));\n        assertThat(readwriteSplittingRule.getSingleDataSourceRule().getReadDataSourceNames(), is(Collections.singletonList(\"read_ds_1\")));\n        readwriteSplittingRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"read_ds_0\", false));\n        assertThat(readwriteSplittingRule.getSingleDataSourceRule().getReadDataSourceNames(), is(Arrays.asList(\"read_ds_0\", \"read_ds_1\")));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/ReadwriteSplittingRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"N"}],"commitId":"8f4d55cfb1c346c0864d320c6b6e9bdaae3b38c4","commitMessage":"@@@Enhance of TypedSPI and RequiredSPI (#12074)\n\n","date":"2021-08-28 11:58:56","modifiedFileCount":"15","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-09-07 10:38:25","codes":[{"authorDate":"2021-09-07 10:38:25","commitOrder":4,"curCode":"    public void assertUpdateRuleStatusWithEnable() {\n        DatabaseDiscoveryRule databaseDiscoveryRule = createRule();\n        databaseDiscoveryRule.updateStatus(new DataSourceNameDisabledEvent(\"ds_0\", true));\n        assertThat(databaseDiscoveryRule.getSingleDataSourceRule().getDataSourceNames(), is(Collections.singletonList(\"ds_1\")));\n        databaseDiscoveryRule.updateStatus(new DataSourceNameDisabledEvent(\"ds_0\", false));\n        assertThat(databaseDiscoveryRule.getSingleDataSourceRule().getDataSourceNames(), is(Arrays.asList(\"ds_0\", \"ds_1\")));\n    }\n","date":"2021-09-07 10:38:25","endLine":87,"groupId":"10255","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"assertUpdateRuleStatusWithEnable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f8/1e64317ebe0ed5ee96541479c02fb31ceeb8df.src","preCode":"    public void assertUpdateRuleStatusWithEnable() {\n        DatabaseDiscoveryRule databaseDiscoveryRule = createRule();\n        databaseDiscoveryRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"ds_0\", true));\n        assertThat(databaseDiscoveryRule.getSingleDataSourceRule().getDataSourceNames(), is(Collections.singletonList(\"ds_1\")));\n        databaseDiscoveryRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"ds_0\", false));\n        assertThat(databaseDiscoveryRule.getSingleDataSourceRule().getDataSourceNames(), is(Arrays.asList(\"ds_0\", \"ds_1\")));\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-core/src/test/java/org/apache/shardingsphere/dbdiscovery/rule/DatabaseDiscoveryRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2021-09-07 10:38:25","commitOrder":4,"curCode":"    public void assertUpdateRuleStatusWithEnable() {\n        ReadwriteSplittingRule readwriteSplittingRule = createReadwriteSplittingRule();\n        readwriteSplittingRule.updateStatus(new DataSourceNameDisabledEvent(\"read_ds_0\", true));\n        assertThat(readwriteSplittingRule.getSingleDataSourceRule().getReadDataSourceNames(), is(Collections.singletonList(\"read_ds_1\")));\n        readwriteSplittingRule.updateStatus(new DataSourceNameDisabledEvent(\"read_ds_0\", false));\n        assertThat(readwriteSplittingRule.getSingleDataSourceRule().getReadDataSourceNames(), is(Arrays.asList(\"read_ds_0\", \"read_ds_1\")));\n    }\n","date":"2021-09-07 10:38:25","endLine":94,"groupId":"10255","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"assertUpdateRuleStatusWithEnable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ab/31c3d6899e169f6f58331181ad5f4a38bd39c6.src","preCode":"    public void assertUpdateRuleStatusWithEnable() {\n        ReadwriteSplittingRule readwriteSplittingRule = createReadwriteSplittingRule();\n        readwriteSplittingRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"read_ds_0\", true));\n        assertThat(readwriteSplittingRule.getSingleDataSourceRule().getReadDataSourceNames(), is(Collections.singletonList(\"read_ds_1\")));\n        readwriteSplittingRule.updateRuleStatus(new DataSourceNameDisabledEvent(\"read_ds_0\", false));\n        assertThat(readwriteSplittingRule.getSingleDataSourceRule().getReadDataSourceNames(), is(Arrays.asList(\"read_ds_0\", \"read_ds_1\")));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/ReadwriteSplittingRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"82eabb044a954199a5fd22e2c53eddcba53f035f","commitMessage":"@@@Rename RuleChangedEvent to DataSourceStatusChangedEvent (#12251)\n\n","date":"2021-09-07 10:38:25","modifiedFileCount":"9","status":"M","submitter":"Liang Zhang"}]
