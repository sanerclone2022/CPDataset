[{"authorTime":"2021-06-04 22:49:49","codes":[{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertCreateAutoTableRuleWithModAlgorithm() {\n        ShardingSphereServiceLoader.register(KeyGenerateAlgorithm.class);\n        ShardingAutoTableRuleConfiguration tableRuleConfig = new ShardingAutoTableRuleConfiguration(\"LOGIC_TABLE\", \"ds0,ds1\");\n        tableRuleConfig.setShardingStrategy(new StandardShardingStrategyConfiguration(\"col_1\", \"MOD\"));\n        ModShardingAlgorithm shardingAlgorithm = new ModShardingAlgorithm();\n        shardingAlgorithm.getProps().setProperty(\"sharding-count\", \"4\");\n        shardingAlgorithm.init();\n        TableRule actual = new TableRule(tableRuleConfig, Arrays.asList(\"ds0\", \"ds1\", \"ds2\"), shardingAlgorithm, null);\n        assertThat(actual.getLogicTable(), is(\"logic_table\"));\n        assertThat(actual.getActualDataNodes().size(), is(4));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\", \"logic_table_0\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds1\", \"logic_table_1\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\", \"logic_table_2\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds1\", \"logic_table_3\")));\n    }\n","date":"2021-06-04 22:49:49","endLine":94,"groupId":"758","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertCreateAutoTableRuleWithModAlgorithm","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4e/a67fd2586b4225310056d01170cf83f225e9f9.src","preCode":"    public void assertCreateAutoTableRuleWithModAlgorithm() {\n        ShardingSphereServiceLoader.register(KeyGenerateAlgorithm.class);\n        ShardingAutoTableRuleConfiguration tableRuleConfig = new ShardingAutoTableRuleConfiguration(\"LOGIC_TABLE\", \"ds0,ds1\");\n        tableRuleConfig.setShardingStrategy(new StandardShardingStrategyConfiguration(\"col_1\", \"MOD\"));\n        ModShardingAlgorithm shardingAlgorithm = new ModShardingAlgorithm();\n        shardingAlgorithm.getProps().setProperty(\"sharding-count\", \"4\");\n        shardingAlgorithm.init();\n        TableRule actual = new TableRule(tableRuleConfig, Arrays.asList(\"ds0\", \"ds1\", \"ds2\"), shardingAlgorithm, null);\n        assertThat(actual.getLogicTable(), is(\"logic_table\"));\n        assertThat(actual.getActualDataNodes().size(), is(4));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\", \"logic_table_0\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds1\", \"logic_table_1\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\", \"logic_table_2\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds1\", \"logic_table_3\")));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rule/TableRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"},{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertCreateAutoTableRuleWithModAlgorithmWithoutActualDataSources() {\n        ShardingSphereServiceLoader.register(KeyGenerateAlgorithm.class);\n        ShardingAutoTableRuleConfiguration tableRuleConfig = new ShardingAutoTableRuleConfiguration(\"LOGIC_TABLE\", null);\n        tableRuleConfig.setShardingStrategy(new StandardShardingStrategyConfiguration(\"col_1\", \"MOD\"));\n        ModShardingAlgorithm shardingAlgorithm = new ModShardingAlgorithm();\n        shardingAlgorithm.getProps().setProperty(\"sharding-count\", \"4\");\n        shardingAlgorithm.init();\n        TableRule actual = new TableRule(tableRuleConfig, Arrays.asList(\"ds0\", \"ds1\", \"ds2\"), shardingAlgorithm, null);\n        assertThat(actual.getLogicTable(), is(\"logic_table\"));\n        assertThat(actual.getActualDataNodes().size(), is(4));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\", \"logic_table_0\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds1\", \"logic_table_1\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds2\", \"logic_table_2\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\", \"logic_table_3\")));\n    }\n","date":"2021-06-04 22:49:49","endLine":111,"groupId":"758","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertCreateAutoTableRuleWithModAlgorithmWithoutActualDataSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4e/a67fd2586b4225310056d01170cf83f225e9f9.src","preCode":"    public void assertCreateAutoTableRuleWithModAlgorithmWithoutActualDataSources() {\n        ShardingSphereServiceLoader.register(KeyGenerateAlgorithm.class);\n        ShardingAutoTableRuleConfiguration tableRuleConfig = new ShardingAutoTableRuleConfiguration(\"LOGIC_TABLE\", null);\n        tableRuleConfig.setShardingStrategy(new StandardShardingStrategyConfiguration(\"col_1\", \"MOD\"));\n        ModShardingAlgorithm shardingAlgorithm = new ModShardingAlgorithm();\n        shardingAlgorithm.getProps().setProperty(\"sharding-count\", \"4\");\n        shardingAlgorithm.init();\n        TableRule actual = new TableRule(tableRuleConfig, Arrays.asList(\"ds0\", \"ds1\", \"ds2\"), shardingAlgorithm, null);\n        assertThat(actual.getLogicTable(), is(\"logic_table\"));\n        assertThat(actual.getActualDataNodes().size(), is(4));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\", \"logic_table_0\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds1\", \"logic_table_1\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds2\", \"logic_table_2\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\", \"logic_table_3\")));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rule/TableRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"}],"commitId":"6b157b44d0336e4d9c61f940b0ec19c26758af84","commitMessage":"@@@Merge sharding feature to core module (#10662)\n\n* Merge dependencies\n\n* Merge sharding feature to api module\n\n* Merge sharding feature to core module","date":"2021-06-04 22:49:49","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-09-02 17:34:21","codes":[{"authorDate":"2021-09-02 17:34:21","commitOrder":2,"curCode":"    public void assertCreateAutoTableRuleWithModAlgorithm() {\n        ShardingSphereServiceLoader.register(KeyGenerateAlgorithm.class);\n        ShardingAutoTableRuleConfiguration tableRuleConfig = new ShardingAutoTableRuleConfiguration(\"LOGIC_TABLE\", \"ds0,ds1\");\n        tableRuleConfig.setShardingStrategy(new StandardShardingStrategyConfiguration(\"col_1\", \"MOD\"));\n        ModShardingAlgorithm shardingAlgorithm = new ModShardingAlgorithm();\n        shardingAlgorithm.getProps().setProperty(\"sharding-count\", \"4\");\n        shardingAlgorithm.init();\n        TableRule actual = new TableRule(tableRuleConfig, Arrays.asList(\"ds0\", \"ds1\", \"ds2\"), shardingAlgorithm, null);\n        assertThat(actual.getLogicTable(), is(\"LOGIC_TABLE\"));\n        assertThat(actual.getActualDataNodes().size(), is(4));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\", \"logic_table_0\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds1\", \"logic_table_1\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\", \"logic_table_2\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds1\", \"logic_table_3\")));\n    }\n","date":"2021-09-02 17:34:21","endLine":94,"groupId":"10634","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertCreateAutoTableRuleWithModAlgorithm","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ff/acb3c8c57e495e6bb23bd7af776c6a895350a9.src","preCode":"    public void assertCreateAutoTableRuleWithModAlgorithm() {\n        ShardingSphereServiceLoader.register(KeyGenerateAlgorithm.class);\n        ShardingAutoTableRuleConfiguration tableRuleConfig = new ShardingAutoTableRuleConfiguration(\"LOGIC_TABLE\", \"ds0,ds1\");\n        tableRuleConfig.setShardingStrategy(new StandardShardingStrategyConfiguration(\"col_1\", \"MOD\"));\n        ModShardingAlgorithm shardingAlgorithm = new ModShardingAlgorithm();\n        shardingAlgorithm.getProps().setProperty(\"sharding-count\", \"4\");\n        shardingAlgorithm.init();\n        TableRule actual = new TableRule(tableRuleConfig, Arrays.asList(\"ds0\", \"ds1\", \"ds2\"), shardingAlgorithm, null);\n        assertThat(actual.getLogicTable(), is(\"logic_table\"));\n        assertThat(actual.getActualDataNodes().size(), is(4));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\", \"logic_table_0\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds1\", \"logic_table_1\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\", \"logic_table_2\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds1\", \"logic_table_3\")));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rule/TableRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2021-09-02 17:34:21","commitOrder":2,"curCode":"    public void assertCreateAutoTableRuleWithModAlgorithmWithoutActualDataSources() {\n        ShardingSphereServiceLoader.register(KeyGenerateAlgorithm.class);\n        ShardingAutoTableRuleConfiguration tableRuleConfig = new ShardingAutoTableRuleConfiguration(\"LOGIC_TABLE\", null);\n        tableRuleConfig.setShardingStrategy(new StandardShardingStrategyConfiguration(\"col_1\", \"MOD\"));\n        ModShardingAlgorithm shardingAlgorithm = new ModShardingAlgorithm();\n        shardingAlgorithm.getProps().setProperty(\"sharding-count\", \"4\");\n        shardingAlgorithm.init();\n        TableRule actual = new TableRule(tableRuleConfig, Arrays.asList(\"ds0\", \"ds1\", \"ds2\"), shardingAlgorithm, null);\n        assertThat(actual.getLogicTable(), is(\"LOGIC_TABLE\"));\n        assertThat(actual.getActualDataNodes().size(), is(4));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\", \"logic_table_0\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds1\", \"logic_table_1\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds2\", \"logic_table_2\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\", \"logic_table_3\")));\n    }\n","date":"2021-09-02 17:34:21","endLine":111,"groupId":"10634","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertCreateAutoTableRuleWithModAlgorithmWithoutActualDataSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ff/acb3c8c57e495e6bb23bd7af776c6a895350a9.src","preCode":"    public void assertCreateAutoTableRuleWithModAlgorithmWithoutActualDataSources() {\n        ShardingSphereServiceLoader.register(KeyGenerateAlgorithm.class);\n        ShardingAutoTableRuleConfiguration tableRuleConfig = new ShardingAutoTableRuleConfiguration(\"LOGIC_TABLE\", null);\n        tableRuleConfig.setShardingStrategy(new StandardShardingStrategyConfiguration(\"col_1\", \"MOD\"));\n        ModShardingAlgorithm shardingAlgorithm = new ModShardingAlgorithm();\n        shardingAlgorithm.getProps().setProperty(\"sharding-count\", \"4\");\n        shardingAlgorithm.init();\n        TableRule actual = new TableRule(tableRuleConfig, Arrays.asList(\"ds0\", \"ds1\", \"ds2\"), shardingAlgorithm, null);\n        assertThat(actual.getLogicTable(), is(\"logic_table\"));\n        assertThat(actual.getActualDataNodes().size(), is(4));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\", \"logic_table_0\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds1\", \"logic_table_1\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds2\", \"logic_table_2\")));\n        assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\", \"logic_table_3\")));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rule/TableRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"1301a41807eda152b17ef78fe084bc2d4e9d368e","commitMessage":"@@@fix calcite exception when user execute sql with lowercase (#12125)\n\n* fix calcite execute error with oracle statement\n\n* add test case\n\n* modify map to case insensitive\n\n* fix test case\n\n* add test case for federate refresh test\n\n* optimize code\n\n* optimize code\n\n* optimize test case\n\n* optimize test case\n\n* optimize federate logic\n\n* optimize code","date":"2021-09-02 17:34:21","modifiedFileCount":"18","status":"M","submitter":"Zhengqiang Duan"}]
