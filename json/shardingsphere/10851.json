[{"authorTime":"2021-06-09 18:43:06","codes":[{"authorDate":"2021-06-04 20:50:53","commitOrder":17,"curCode":"    public boolean writeQueryData(final ChannelHandlerContext context,\n                                  final BackendConnection backendConnection, final QueryCommandExecutor queryCommandExecutor, final int headerPackagesCount) throws SQLException {\n        if (ResponseType.QUERY != queryCommandExecutor.getResponseType() || !context.channel().isActive()) {\n            return true;\n        }\n        int count = 0;\n        int flushThreshold = ProxyContext.getInstance().getMetaDataContexts().getProps().<Integer>getValue(ConfigurationPropertyKey.PROXY_FRONTEND_FLUSH_THRESHOLD);\n        int currentSequenceId = 0;\n        while (queryCommandExecutor.next()) {\n            count++;\n            while (!context.channel().isWritable() && context.channel().isActive()) {\n                context.flush();\n                backendConnection.getResourceLock().doAwait();\n            }\n            DatabasePacket<?> dataValue = queryCommandExecutor.getQueryRowPacket();\n            context.write(dataValue);\n            if (flushThreshold == count) {\n                context.flush();\n                count = 0;\n            }\n            currentSequenceId++;\n        }\n        context.write(new MySQLEofPacket(++currentSequenceId + headerPackagesCount));\n        return true;\n    }\n","date":"2021-06-04 20:50:53","endLine":98,"groupId":"5508","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"writeQueryData","params":"(finalChannelHandlerContextcontext@finalBackendConnectionbackendConnection@finalQueryCommandExecutorqueryCommandExecutor@finalintheaderPackagesCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/94/95e281dd4924cb55db5124da1d88e3330788c7.src","preCode":"    public boolean writeQueryData(final ChannelHandlerContext context,\n                                  final BackendConnection backendConnection, final QueryCommandExecutor queryCommandExecutor, final int headerPackagesCount) throws SQLException {\n        if (ResponseType.QUERY != queryCommandExecutor.getResponseType() || !context.channel().isActive()) {\n            return true;\n        }\n        int count = 0;\n        int flushThreshold = ProxyContext.getInstance().getMetaDataContexts().getProps().<Integer>getValue(ConfigurationPropertyKey.PROXY_FRONTEND_FLUSH_THRESHOLD);\n        int currentSequenceId = 0;\n        while (queryCommandExecutor.next()) {\n            count++;\n            while (!context.channel().isWritable() && context.channel().isActive()) {\n                context.flush();\n                backendConnection.getResourceLock().doAwait();\n            }\n            DatabasePacket<?> dataValue = queryCommandExecutor.getQueryRowPacket();\n            context.write(dataValue);\n            if (flushThreshold == count) {\n                context.flush();\n                count = 0;\n            }\n            currentSequenceId++;\n        }\n        context.write(new MySQLEofPacket(++currentSequenceId + headerPackagesCount));\n        return true;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecuteEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"NB"},{"authorDate":"2021-06-09 18:43:06","commitOrder":17,"curCode":"    private long writeDataPackets(final ChannelHandlerContext context, final BackendConnection backendConnection, final QueryCommandExecutor queryCommandExecutor) throws SQLException {\n        long dataRows = 0;\n        int flushCount = 0;\n        int proxyFrontendFlushThreshold = ProxyContext.getInstance().getMetaDataContexts().getProps().<Integer>getValue(ConfigurationPropertyKey.PROXY_FRONTEND_FLUSH_THRESHOLD);\n        while (queryCommandExecutor.next()) {\n            flushCount++;\n            while (!context.channel().isWritable() && context.channel().isActive()) {\n                context.flush();\n                backendConnection.getResourceLock().doAwait();\n            }\n            DatabasePacket<?> resultValue = queryCommandExecutor.getQueryRowPacket();\n            context.write(resultValue);\n            if (proxyFrontendFlushThreshold == flushCount) {\n                context.flush();\n                flushCount = 0;\n            }\n            if (resultValue instanceof PostgreSQLDataRowPacket) {\n                dataRows++;\n            }\n        }\n        return dataRows;\n    }\n","date":"2021-06-09 18:43:06","endLine":131,"groupId":"5251","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"writeDataPackets","params":"(finalChannelHandlerContextcontext@finalBackendConnectionbackendConnection@finalQueryCommandExecutorqueryCommandExecutor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b7/3bd9d413a0fb177326f679d7349c8560b3e877.src","preCode":"    private long writeDataPackets(final ChannelHandlerContext context, final BackendConnection backendConnection, final QueryCommandExecutor queryCommandExecutor) throws SQLException {\n        long dataRows = 0;\n        int flushCount = 0;\n        int proxyFrontendFlushThreshold = ProxyContext.getInstance().getMetaDataContexts().getProps().<Integer>getValue(ConfigurationPropertyKey.PROXY_FRONTEND_FLUSH_THRESHOLD);\n        while (queryCommandExecutor.next()) {\n            flushCount++;\n            while (!context.channel().isWritable() && context.channel().isActive()) {\n                context.flush();\n                backendConnection.getResourceLock().doAwait();\n            }\n            DatabasePacket<?> resultValue = queryCommandExecutor.getQueryRowPacket();\n            context.write(resultValue);\n            if (proxyFrontendFlushThreshold == flushCount) {\n                context.flush();\n                flushCount = 0;\n            }\n            if (resultValue instanceof PostgreSQLDataRowPacket) {\n                dataRows++;\n            }\n        }\n        return dataRows;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/PostgreSQLCommandExecuteEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"B"}],"commitId":"be59cca18523e6b2955c665f81a7ce64e834ef08","commitMessage":"@@@Refactor PostgreSQL Proxy (#10736)\n\n* Refactor PostgreSQL Proxy\n\n* Fix empty SQL cause NPE\n\n* Fix empty SQL parsing error\n\n* Fix checkstyle\n\n* Fix PostgreSQLComDescribeExecutorTest\n\n* Refactor PostgreSQL Proxy protocol\n\n* Fix no data packet may be missing\n\n* Fix get Optional class mistake\n\n* Fix SQL command not found\n\n* Fix PostgreSQL frontend test cases\n\n* Add PostgreSQLNoDataPacketTest\n\n* Replace ThreadLocal with ConnectionContextRegistry\n\n* Fix checkstyle\n\n* Fix test case\n\n* Polish test case","date":"2021-06-09 18:43:06","modifiedFileCount":"25","status":"M","submitter":"???"},{"authorTime":"2021-08-15 02:33:31","codes":[{"authorDate":"2021-08-15 02:33:31","commitOrder":18,"curCode":"    public boolean writeQueryData(final ChannelHandlerContext context,\n                                  final BackendConnection backendConnection, final QueryCommandExecutor queryCommandExecutor, final int headerPackagesCount) throws SQLException {\n        if (ResponseType.QUERY != queryCommandExecutor.getResponseType() || !context.channel().isActive()) {\n            return true;\n        }\n        int count = 0;\n        int flushThreshold = ProxyContext.getInstance().getContextManager().getMetaDataContexts().getProps().<Integer>getValue(ConfigurationPropertyKey.PROXY_FRONTEND_FLUSH_THRESHOLD);\n        int currentSequenceId = 0;\n        while (queryCommandExecutor.next()) {\n            count++;\n            while (!context.channel().isWritable() && context.channel().isActive()) {\n                context.flush();\n                backendConnection.getResourceLock().doAwait();\n            }\n            DatabasePacket<?> dataValue = queryCommandExecutor.getQueryRowPacket();\n            context.write(dataValue);\n            if (flushThreshold == count) {\n                context.flush();\n                count = 0;\n            }\n            currentSequenceId++;\n        }\n        context.write(new MySQLEofPacket(++currentSequenceId + headerPackagesCount));\n        return true;\n    }\n","date":"2021-08-15 02:33:31","endLine":98,"groupId":"10851","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"writeQueryData","params":"(finalChannelHandlerContextcontext@finalBackendConnectionbackendConnection@finalQueryCommandExecutorqueryCommandExecutor@finalintheaderPackagesCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ba/4030911a399983e56fe59fd24d4817010c8f4f.src","preCode":"    public boolean writeQueryData(final ChannelHandlerContext context,\n                                  final BackendConnection backendConnection, final QueryCommandExecutor queryCommandExecutor, final int headerPackagesCount) throws SQLException {\n        if (ResponseType.QUERY != queryCommandExecutor.getResponseType() || !context.channel().isActive()) {\n            return true;\n        }\n        int count = 0;\n        int flushThreshold = ProxyContext.getInstance().getMetaDataContexts().getProps().<Integer>getValue(ConfigurationPropertyKey.PROXY_FRONTEND_FLUSH_THRESHOLD);\n        int currentSequenceId = 0;\n        while (queryCommandExecutor.next()) {\n            count++;\n            while (!context.channel().isWritable() && context.channel().isActive()) {\n                context.flush();\n                backendConnection.getResourceLock().doAwait();\n            }\n            DatabasePacket<?> dataValue = queryCommandExecutor.getQueryRowPacket();\n            context.write(dataValue);\n            if (flushThreshold == count) {\n                context.flush();\n                count = 0;\n            }\n            currentSequenceId++;\n        }\n        context.write(new MySQLEofPacket(++currentSequenceId + headerPackagesCount));\n        return true;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecuteEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2021-08-15 02:33:31","commitOrder":18,"curCode":"    private long writeDataPackets(final ChannelHandlerContext context, final BackendConnection backendConnection, final QueryCommandExecutor queryCommandExecutor) throws SQLException {\n        long dataRows = 0;\n        int flushCount = 0;\n        int proxyFrontendFlushThreshold = ProxyContext.getInstance().getContextManager().getMetaDataContexts().getProps().<Integer>getValue(ConfigurationPropertyKey.PROXY_FRONTEND_FLUSH_THRESHOLD);\n        while (queryCommandExecutor.next()) {\n            flushCount++;\n            while (!context.channel().isWritable() && context.channel().isActive()) {\n                context.flush();\n                backendConnection.getResourceLock().doAwait();\n            }\n            DatabasePacket<?> resultValue = queryCommandExecutor.getQueryRowPacket();\n            context.write(resultValue);\n            if (proxyFrontendFlushThreshold == flushCount) {\n                context.flush();\n                flushCount = 0;\n            }\n            if (resultValue instanceof PostgreSQLDataRowPacket) {\n                dataRows++;\n            }\n        }\n        return dataRows;\n    }\n","date":"2021-08-15 02:33:31","endLine":131,"groupId":"10851","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"writeDataPackets","params":"(finalChannelHandlerContextcontext@finalBackendConnectionbackendConnection@finalQueryCommandExecutorqueryCommandExecutor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7a/10125d49656840fa8c4dd28f946a92c37c61e6.src","preCode":"    private long writeDataPackets(final ChannelHandlerContext context, final BackendConnection backendConnection, final QueryCommandExecutor queryCommandExecutor) throws SQLException {\n        long dataRows = 0;\n        int flushCount = 0;\n        int proxyFrontendFlushThreshold = ProxyContext.getInstance().getMetaDataContexts().getProps().<Integer>getValue(ConfigurationPropertyKey.PROXY_FRONTEND_FLUSH_THRESHOLD);\n        while (queryCommandExecutor.next()) {\n            flushCount++;\n            while (!context.channel().isWritable() && context.channel().isActive()) {\n                context.flush();\n                backendConnection.getResourceLock().doAwait();\n            }\n            DatabasePacket<?> resultValue = queryCommandExecutor.getQueryRowPacket();\n            context.write(resultValue);\n            if (proxyFrontendFlushThreshold == flushCount) {\n                context.flush();\n                flushCount = 0;\n            }\n            if (resultValue instanceof PostgreSQLDataRowPacket) {\n                dataRows++;\n            }\n        }\n        return dataRows;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/PostgreSQLCommandExecuteEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"d6e424ba68c64ea1835a42b0f4b0fb7f69c95323","commitMessage":"@@@Add ContextManager (#11822)\n\n* Add ContextManager\n\n* Use ContextManager on GovernanceShardingSphereDataSource\n\n* Use ContextManager on ShardingSphereDataSource\n\n* Use ContextManager on ShardingSphereConnection\n\n* Use ContextManager on ShardingSphereConnection\n\n* Refactor AbstractBaseExecutorTest\n\n* Use ContextManager on proxy\n\n* Fix test case","date":"2021-08-15 02:33:31","modifiedFileCount":"118","status":"M","submitter":"Liang Zhang"}]
