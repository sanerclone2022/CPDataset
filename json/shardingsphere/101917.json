[{"authorTime":"2021-07-22 23:48:43","codes":[{"authorDate":"2021-07-22 23:48:43","commitOrder":10,"curCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> routeDataSourceNames, \n                        final CreateTableStatement sqlStatement, final SchemaBuilderMaterials materials) throws SQLException {\n        String tableName = sqlStatement.getTable().getTableName().getIdentifier().getValue();\n        TableMetaData tableMetaData;\n        if (containsInTableContainedRule(tableName, materials)) {\n            tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        } else {\n            tableMetaData = loadTableMetaData(tableName, routeDataSourceNames, materials);\n        }\n        schema.put(tableName, tableMetaData);\n        if (isSingleTable(tableName, materials)) {\n            materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each \n                -> (SingleTableRule) each).findFirst().ifPresent(rule -> rule.addSingleTableDataNode(tableName, routeDataSourceNames.iterator().next()));\n        }\n    }\n","date":"2021-07-22 23:48:43","endLine":58,"groupId":"11812","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"refresh","params":"(finalShardingSphereSchemaschema@finalCollection<String>routeDataSourceNames@finalCreateTableStatementsqlStatement@finalSchemaBuilderMaterialsmaterials)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/82/b272a2d6a5d84d3efd37c8444bc0a3b37266a4.src","preCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> routeDataSourceNames, \n                        final CreateTableStatement sqlStatement, final SchemaBuilderMaterials materials) throws SQLException {\n        String tableName = sqlStatement.getTable().getTableName().getIdentifier().getValue();\n        TableMetaData tableMetaData;\n        if (containsInTableContainedRule(tableName, materials)) {\n            tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        } else {\n            tableMetaData = loadTableMetaData(tableName, routeDataSourceNames, materials);\n        }\n        schema.put(tableName, tableMetaData);\n        if (isSingleTable(tableName, materials)) {\n            materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each \n                -> (SingleTableRule) each).findFirst().ifPresent(rule -> rule.addSingleTableDataNode(tableName, routeDataSourceNames.iterator().next()));\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/CreateTableStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"MB"},{"authorDate":"2021-07-22 23:48:43","commitOrder":10,"curCode":"    private void putTableMetaData(final ShardingSphereSchema schema, final Collection<String> routeDataSourceNames, \n                                  final SchemaBuilderMaterials materials, final String tableName) throws SQLException {\n        TableMetaData tableMetaData;\n        if (!containsInTableContainedRule(tableName, materials)) {\n            tableMetaData = loadTableMetaData(tableName, routeDataSourceNames, materials);\n        } else {\n            tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        }\n        schema.put(tableName, tableMetaData);\n        if (isSingleTable(tableName, materials)) {\n            materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each \n                -> (SingleTableRule) each).findFirst().ifPresent(rule -> rule.addSingleTableDataNode(tableName, routeDataSourceNames.iterator().next()));   \n        }\n    }\n","date":"2021-07-22 23:48:43","endLine":74,"groupId":"11812","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"putTableMetaData","params":"(finalShardingSphereSchemaschema@finalCollection<String>routeDataSourceNames@finalSchemaBuilderMaterialsmaterials@finalStringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2a/afb7c84d5e9986ffa1e5042d8232a958f79da5.src","preCode":"    private void putTableMetaData(final ShardingSphereSchema schema, final Collection<String> routeDataSourceNames, \n                                  final SchemaBuilderMaterials materials, final String tableName) throws SQLException {\n        TableMetaData tableMetaData;\n        if (!containsInTableContainedRule(tableName, materials)) {\n            tableMetaData = loadTableMetaData(tableName, routeDataSourceNames, materials);\n        } else {\n            tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        }\n        schema.put(tableName, tableMetaData);\n        if (isSingleTable(tableName, materials)) {\n            materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each \n                -> (SingleTableRule) each).findFirst().ifPresent(rule -> rule.addSingleTableDataNode(tableName, routeDataSourceNames.iterator().next()));   \n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/AlterTableStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"MB"}],"commitId":"47bf9f433f5055b461332da8eebee6f95d717049","commitMessage":"@@@Correct usage of Optional and reduce redundant calculations (#11459)\n\n* Correct usage of Optional\n\n* Optimize filter in SingleTableRule","date":"2021-07-22 23:48:43","modifiedFileCount":"13","status":"M","submitter":"???"},{"authorTime":"2021-08-02 18:32:21","codes":[{"authorDate":"2021-08-02 18:32:21","commitOrder":11,"curCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, \n                        final CreateTableStatement sqlStatement, final SchemaBuilderMaterials materials) throws SQLException {\n        String tableName = sqlStatement.getTable().getTableName().getIdentifier().getValue();\n        TableMetaData tableMetaData;\n        if (containsInTableContainedRule(tableName, materials)) {\n            tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        } else {\n            tableMetaData = TableMetaDataLoader.load(tableName, logicDataSourceNames, materials).orElseGet(TableMetaData::new);\n        }\n        schema.put(tableName, tableMetaData);\n        if (isSingleTable(tableName, materials)) {\n            materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each \n                -> (SingleTableRule) each).findFirst().ifPresent(rule -> rule.addSingleTableDataNode(tableName, logicDataSourceNames.iterator().next()));\n        }\n    }\n","date":"2021-08-02 18:32:21","endLine":55,"groupId":"11812","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"refresh","params":"(finalShardingSphereSchemaschema@finalCollection<String>logicDataSourceNames@finalCreateTableStatementsqlStatement@finalSchemaBuilderMaterialsmaterials)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a5/38b3daed2a081b992bf681a2f7578523889381.src","preCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> routeDataSourceNames, \n                        final CreateTableStatement sqlStatement, final SchemaBuilderMaterials materials) throws SQLException {\n        String tableName = sqlStatement.getTable().getTableName().getIdentifier().getValue();\n        TableMetaData tableMetaData;\n        if (containsInTableContainedRule(tableName, materials)) {\n            tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        } else {\n            tableMetaData = loadTableMetaData(tableName, routeDataSourceNames, materials);\n        }\n        schema.put(tableName, tableMetaData);\n        if (isSingleTable(tableName, materials)) {\n            materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each \n                -> (SingleTableRule) each).findFirst().ifPresent(rule -> rule.addSingleTableDataNode(tableName, routeDataSourceNames.iterator().next()));\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/CreateTableStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2021-08-02 18:32:21","commitOrder":11,"curCode":"    private void putTableMetaData(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, \n                                  final SchemaBuilderMaterials materials, final String tableName) throws SQLException {\n        TableMetaData tableMetaData;\n        if (!containsInTableContainedRule(tableName, materials)) {\n            tableMetaData = TableMetaDataLoader.load(tableName, logicDataSourceNames, materials).orElseGet(TableMetaData::new);\n        } else {\n            tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        }\n        schema.put(tableName, tableMetaData);\n        if (isSingleTable(tableName, materials)) {\n            materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each \n                -> (SingleTableRule) each).findFirst().ifPresent(rule -> rule.addSingleTableDataNode(tableName, logicDataSourceNames.iterator().next()));   \n        }\n    }\n","date":"2021-08-02 18:32:21","endLine":71,"groupId":"11812","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"putTableMetaData","params":"(finalShardingSphereSchemaschema@finalCollection<String>logicDataSourceNames@finalSchemaBuilderMaterialsmaterials@finalStringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/17/cb593756ccab1d43086f7341e075b66bc501eb.src","preCode":"    private void putTableMetaData(final ShardingSphereSchema schema, final Collection<String> routeDataSourceNames, \n                                  final SchemaBuilderMaterials materials, final String tableName) throws SQLException {\n        TableMetaData tableMetaData;\n        if (!containsInTableContainedRule(tableName, materials)) {\n            tableMetaData = loadTableMetaData(tableName, routeDataSourceNames, materials);\n        } else {\n            tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        }\n        schema.put(tableName, tableMetaData);\n        if (isSingleTable(tableName, materials)) {\n            materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each \n                -> (SingleTableRule) each).findFirst().ifPresent(rule -> rule.addSingleTableDataNode(tableName, routeDataSourceNames.iterator().next()));   \n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/AlterTableStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"f840cb7cd1b4e100795c60026953bd991d29a501","commitMessage":"@@@fix single table metadata refresh when use readwrite-splitting rule (#11598)\n\n* fix single table metadata refresh when use readwrite-splitting rule\n\n* rename test case method","date":"2021-08-02 18:32:21","modifiedFileCount":"16","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-08-07 22:01:40","codes":[{"authorDate":"2021-08-07 22:01:40","commitOrder":12,"curCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, \n                        final CreateTableStatement sqlStatement, final SchemaBuilderMaterials materials) throws SQLException {\n        String tableName = sqlStatement.getTable().getTableName().getIdentifier().getValue();\n        if (!containsInDataNodeContainedRule(tableName, materials)) {\n            findShardingSphereRulesByClass(materials.getRules(), SingleTableRule.class).forEach(each -> each.addSingleTableDataNode(tableName, logicDataSourceNames.iterator().next()));\n        }\n        TableMetaData tableMetaData;\n        if (containsInTableContainedRule(tableName, materials)) {\n            tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        } else {\n            tableMetaData = TableMetaDataLoader.load(tableName, logicDataSourceNames, materials).orElseGet(TableMetaData::new);\n        }\n        schema.put(tableName, tableMetaData);\n    }\n","date":"2021-08-07 22:01:40","endLine":53,"groupId":"128","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"refresh","params":"(finalShardingSphereSchemaschema@finalCollection<String>logicDataSourceNames@finalCreateTableStatementsqlStatement@finalSchemaBuilderMaterialsmaterials)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c2/988d22379b9d888c5ac52972dc54a517041ce4.src","preCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, \n                        final CreateTableStatement sqlStatement, final SchemaBuilderMaterials materials) throws SQLException {\n        String tableName = sqlStatement.getTable().getTableName().getIdentifier().getValue();\n        TableMetaData tableMetaData;\n        if (containsInTableContainedRule(tableName, materials)) {\n            tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        } else {\n            tableMetaData = TableMetaDataLoader.load(tableName, logicDataSourceNames, materials).orElseGet(TableMetaData::new);\n        }\n        schema.put(tableName, tableMetaData);\n        if (isSingleTable(tableName, materials)) {\n            materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each \n                -> (SingleTableRule) each).findFirst().ifPresent(rule -> rule.addSingleTableDataNode(tableName, logicDataSourceNames.iterator().next()));\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/CreateTableStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2021-08-07 22:01:40","commitOrder":12,"curCode":"    private void putTableMetaData(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, \n                                  final SchemaBuilderMaterials materials, final String tableName) throws SQLException {\n        if (!containsInDataNodeContainedRule(tableName, materials)) {\n            findShardingSphereRulesByClass(materials.getRules(), SingleTableRule.class).forEach(each -> each.addSingleTableDataNode(tableName, logicDataSourceNames.iterator().next()));\n        }\n        TableMetaData tableMetaData;\n        if (!containsInTableContainedRule(tableName, materials)) {\n            tableMetaData = TableMetaDataLoader.load(tableName, logicDataSourceNames, materials).orElseGet(TableMetaData::new);\n        } else {\n            tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        }\n        schema.put(tableName, tableMetaData);\n    }\n","date":"2021-08-07 22:01:40","endLine":68,"groupId":"10460","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"putTableMetaData","params":"(finalShardingSphereSchemaschema@finalCollection<String>logicDataSourceNames@finalSchemaBuilderMaterialsmaterials@finalStringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/cc/0f13b664e042d6135304ccc651cb48b45785c6.src","preCode":"    private void putTableMetaData(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, \n                                  final SchemaBuilderMaterials materials, final String tableName) throws SQLException {\n        TableMetaData tableMetaData;\n        if (!containsInTableContainedRule(tableName, materials)) {\n            tableMetaData = TableMetaDataLoader.load(tableName, logicDataSourceNames, materials).orElseGet(TableMetaData::new);\n        } else {\n            tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        }\n        schema.put(tableName, tableMetaData);\n        if (isSingleTable(tableName, materials)) {\n            materials.getRules().stream().filter(each -> each instanceof SingleTableRule).map(each \n                -> (SingleTableRule) each).findFirst().ifPresent(rule -> rule.addSingleTableDataNode(tableName, logicDataSourceNames.iterator().next()));   \n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/AlterTableStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"b52b1685636439b550223fca13e81f521ba4258e","commitMessage":"@@@correct wrong result when metadata refresh with encrypt in multi dataSources (#11688)\n\n* correct wrong result when metadata refresh with encrypt in multi dataSources\n\n* add test case","date":"2021-08-07 22:01:40","modifiedFileCount":"12","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-08-20 15:52:50","codes":[{"authorDate":"2021-08-20 15:52:50","commitOrder":13,"curCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, \n                        final CreateTableStatement sqlStatement, final SchemaBuilderMaterials materials) throws SQLException {\n        String tableName = sqlStatement.getTable().getTableName().getIdentifier().getValue();\n        if (!containsInDataNodeContainedRule(tableName, materials)) {\n            findShardingSphereRulesByClass(materials.getRules(), SingleTableRule.class).forEach(each -> each.addSingleTableDataNode(tableName, logicDataSourceNames.iterator().next()));\n        }\n        TableMetaData tableMetaData;\n        if (containsInTableContainedRule(tableName, materials)) {\n            tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        } else {\n            tableMetaData = DefaultTableMetaDataLoader.load(tableName, logicDataSourceNames, materials).orElseGet(TableMetaData::new);\n        }\n        schema.put(tableName, tableMetaData);\n    }\n","date":"2021-08-20 15:52:50","endLine":53,"groupId":"128","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"refresh","params":"(finalShardingSphereSchemaschema@finalCollection<String>logicDataSourceNames@finalCreateTableStatementsqlStatement@finalSchemaBuilderMaterialsmaterials)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/44/d0b6b5b49761a87710775aca62cc48e0a3738e.src","preCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, \n                        final CreateTableStatement sqlStatement, final SchemaBuilderMaterials materials) throws SQLException {\n        String tableName = sqlStatement.getTable().getTableName().getIdentifier().getValue();\n        if (!containsInDataNodeContainedRule(tableName, materials)) {\n            findShardingSphereRulesByClass(materials.getRules(), SingleTableRule.class).forEach(each -> each.addSingleTableDataNode(tableName, logicDataSourceNames.iterator().next()));\n        }\n        TableMetaData tableMetaData;\n        if (containsInTableContainedRule(tableName, materials)) {\n            tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        } else {\n            tableMetaData = TableMetaDataLoader.load(tableName, logicDataSourceNames, materials).orElseGet(TableMetaData::new);\n        }\n        schema.put(tableName, tableMetaData);\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/CreateTableStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2021-08-20 15:52:50","commitOrder":13,"curCode":"    private void putTableMetaData(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, \n                                  final SchemaBuilderMaterials materials, final String tableName) throws SQLException {\n        if (!containsInDataNodeContainedRule(tableName, materials)) {\n            findShardingSphereRulesByClass(materials.getRules(), SingleTableRule.class).forEach(each -> each.addSingleTableDataNode(tableName, logicDataSourceNames.iterator().next()));\n        }\n        TableMetaData tableMetaData;\n        if (!containsInTableContainedRule(tableName, materials)) {\n            tableMetaData = DefaultTableMetaDataLoader.load(tableName, logicDataSourceNames, materials).orElseGet(TableMetaData::new);\n        } else {\n            tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        }\n        schema.put(tableName, tableMetaData);\n    }\n","date":"2021-08-20 15:52:50","endLine":68,"groupId":"10460","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"putTableMetaData","params":"(finalShardingSphereSchemaschema@finalCollection<String>logicDataSourceNames@finalSchemaBuilderMaterialsmaterials@finalStringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/51/297bd325c41bad994088cdd7297e6accbb284e.src","preCode":"    private void putTableMetaData(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, \n                                  final SchemaBuilderMaterials materials, final String tableName) throws SQLException {\n        if (!containsInDataNodeContainedRule(tableName, materials)) {\n            findShardingSphereRulesByClass(materials.getRules(), SingleTableRule.class).forEach(each -> each.addSingleTableDataNode(tableName, logicDataSourceNames.iterator().next()));\n        }\n        TableMetaData tableMetaData;\n        if (!containsInTableContainedRule(tableName, materials)) {\n            tableMetaData = TableMetaDataLoader.load(tableName, logicDataSourceNames, materials).orElseGet(TableMetaData::new);\n        } else {\n            tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        }\n        schema.put(tableName, tableMetaData);\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/AlterTableStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"632b7c777ea43f7de3dfd2f13bc866814b882eaa","commitMessage":"@@@Refactor single table meta data load (#11895)\n\n","date":"2021-08-20 15:52:50","modifiedFileCount":"31","status":"M","submitter":"tuichenchuxin"},{"authorTime":"2021-08-25 17:00:38","codes":[{"authorDate":"2021-08-25 17:00:38","commitOrder":14,"curCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, \n                        final CreateTableStatement sqlStatement, final SchemaBuilderMaterials materials) throws SQLException {\n        String tableName = sqlStatement.getTable().getTableName().getIdentifier().getValue();\n        if (!containsInDataNodeContainedRule(tableName, materials)) {\n            findShardingSphereRulesByClass(materials.getRules(), SingleTableRule.class).forEach(each -> each.addSingleTableDataNode(tableName, logicDataSourceNames.iterator().next()));\n        }\n        TableMetaData tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        schema.put(tableName, tableMetaData);\n    }\n","date":"2021-08-25 17:00:38","endLine":46,"groupId":"128","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"refresh","params":"(finalShardingSphereSchemaschema@finalCollection<String>logicDataSourceNames@finalCreateTableStatementsqlStatement@finalSchemaBuilderMaterialsmaterials)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8f/ede299bf7efdd4f70210931303a221166e161e.src","preCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, \n                        final CreateTableStatement sqlStatement, final SchemaBuilderMaterials materials) throws SQLException {\n        String tableName = sqlStatement.getTable().getTableName().getIdentifier().getValue();\n        if (!containsInDataNodeContainedRule(tableName, materials)) {\n            findShardingSphereRulesByClass(materials.getRules(), SingleTableRule.class).forEach(each -> each.addSingleTableDataNode(tableName, logicDataSourceNames.iterator().next()));\n        }\n        TableMetaData tableMetaData;\n        if (containsInTableContainedRule(tableName, materials)) {\n            tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        } else {\n            tableMetaData = DefaultTableMetaDataLoader.load(tableName, logicDataSourceNames, materials).orElseGet(TableMetaData::new);\n        }\n        schema.put(tableName, tableMetaData);\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/CreateTableStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2021-08-25 17:00:38","commitOrder":14,"curCode":"    private void putTableMetaData(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, \n                                  final SchemaBuilderMaterials materials, final String tableName) throws SQLException {\n        if (!containsInDataNodeContainedRule(tableName, materials)) {\n            findShardingSphereRulesByClass(materials.getRules(), SingleTableRule.class).forEach(each -> each.addSingleTableDataNode(tableName, logicDataSourceNames.iterator().next()));\n        }\n        TableMetaData tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        schema.put(tableName, tableMetaData);\n    }\n","date":"2021-08-25 17:00:38","endLine":61,"groupId":"128","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"putTableMetaData","params":"(finalShardingSphereSchemaschema@finalCollection<String>logicDataSourceNames@finalSchemaBuilderMaterialsmaterials@finalStringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/89/21e8c733a3815b4babec181a35879571a11c60.src","preCode":"    private void putTableMetaData(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, \n                                  final SchemaBuilderMaterials materials, final String tableName) throws SQLException {\n        if (!containsInDataNodeContainedRule(tableName, materials)) {\n            findShardingSphereRulesByClass(materials.getRules(), SingleTableRule.class).forEach(each -> each.addSingleTableDataNode(tableName, logicDataSourceNames.iterator().next()));\n        }\n        TableMetaData tableMetaData;\n        if (!containsInTableContainedRule(tableName, materials)) {\n            tableMetaData = DefaultTableMetaDataLoader.load(tableName, logicDataSourceNames, materials).orElseGet(TableMetaData::new);\n        } else {\n            tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        }\n        schema.put(tableName, tableMetaData);\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/AlterTableStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"1f7af63072392a810297faf3b1e7522704b1f750","commitMessage":"@@@refactor parallel check meta data.  refactor TableMetaDataLoaderEngine. (#11976)\n\n* refactor parallel check meta data.  refactor TableMetaDataLoaderEngine.\n\n* fix review suggestions.\n\n* fix review suggestions.\n\n* fix test failed.\n\n* fix review suggestions.\n\n* fix review suggestions.","date":"2021-08-25 17:00:38","modifiedFileCount":"17","status":"M","submitter":"tuichenchuxin"},{"authorTime":"2021-09-04 18:58:22","codes":[{"authorDate":"2021-09-04 18:58:22","commitOrder":15,"curCode":"    public void refresh(final ShardingSphereMetaData schemaMetaData, final Collection<String> logicDataSourceNames,\n                        final CreateTableStatement sqlStatement, final ConfigurationProperties props) throws SQLException {\n        String tableName = sqlStatement.getTable().getTableName().getIdentifier().getValue();\n        if (!containsInDataNodeContainedRule(tableName, schemaMetaData)) {\n            schemaMetaData.getRuleMetaData().findRules(MutableDataNodeRule.class).forEach(each -> each.addDataNode(tableName, logicDataSourceNames.iterator().next()));\n        }\n        SchemaBuilderMaterials materials = new SchemaBuilderMaterials(\n                schemaMetaData.getResource().getDatabaseType(), schemaMetaData.getResource().getDataSources(), schemaMetaData.getRuleMetaData().getRules(), props);\n        TableMetaData tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        schemaMetaData.getSchema().put(tableName, tableMetaData);\n    }\n","date":"2021-09-04 18:58:22","endLine":49,"groupId":"101917","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"refresh","params":"(finalShardingSphereMetaDataschemaMetaData@finalCollection<String>logicDataSourceNames@finalCreateTableStatementsqlStatement@finalConfigurationPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e0/386c9c15c212c3638be2f3ad737d39dc65be5f.src","preCode":"    public void refresh(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, \n                        final CreateTableStatement sqlStatement, final SchemaBuilderMaterials materials) throws SQLException {\n        String tableName = sqlStatement.getTable().getTableName().getIdentifier().getValue();\n        if (!containsInDataNodeContainedRule(tableName, materials)) {\n            findShardingSphereRulesByClass(materials.getRules(), SingleTableRule.class).forEach(each -> each.addSingleTableDataNode(tableName, logicDataSourceNames.iterator().next()));\n        }\n        TableMetaData tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        schema.put(tableName, tableMetaData);\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/CreateTableStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2021-09-04 18:58:22","commitOrder":15,"curCode":"    private void putTableMetaData(final ShardingSphereMetaData schemaMetaData, \n                                  final Collection<String> logicDataSourceNames, final String tableName, final ConfigurationProperties props) throws SQLException {\n        if (!containsInDataNodeContainedRule(tableName, schemaMetaData)) {\n            schemaMetaData.getRuleMetaData().findRules(MutableDataNodeRule.class).forEach(each -> each.addDataNode(tableName, logicDataSourceNames.iterator().next()));\n        }\n        SchemaBuilderMaterials materials = new SchemaBuilderMaterials(\n                schemaMetaData.getResource().getDatabaseType(), schemaMetaData.getResource().getDataSources(), schemaMetaData.getRuleMetaData().getRules(), props);\n        TableMetaData tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        schemaMetaData.getSchema().put(tableName, tableMetaData);\n    }\n","date":"2021-09-04 18:58:22","endLine":64,"groupId":"101917","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"putTableMetaData","params":"(finalShardingSphereMetaDataschemaMetaData@finalCollection<String>logicDataSourceNames@finalStringtableName@finalConfigurationPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2d/765f6535c1a7ad8c7eba3e8c4486e0a0e5f9cd.src","preCode":"    private void putTableMetaData(final ShardingSphereSchema schema, final Collection<String> logicDataSourceNames, \n                                  final SchemaBuilderMaterials materials, final String tableName) throws SQLException {\n        if (!containsInDataNodeContainedRule(tableName, materials)) {\n            findShardingSphereRulesByClass(materials.getRules(), SingleTableRule.class).forEach(each -> each.addSingleTableDataNode(tableName, logicDataSourceNames.iterator().next()));\n        }\n        TableMetaData tableMetaData = TableMetaDataBuilder.build(tableName, materials).orElseGet(TableMetaData::new);\n        schema.put(tableName, tableMetaData);\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/refresher/type/AlterTableStatementSchemaRefresher.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"a8c655eaf51f230c724274dc0c1d6ba775c73d40","commitMessage":"@@@Add shardingsphere-single-table into kernel module (#12210)\n\n* Rename SchemaRulesBuilderMaterials\n\n* Add shardingsphere-single-table\n\n* Add shardingsphere-single-table\n\n* Revise javadoc\n\n* Move MetadataRefresher.findShardingSphereRulesByClass to ShardingSphereSchema\n\n* Add MutableDataNodeRule\n\n* Add SingleTableSchemaBuilderTest\n\n* Move single table rule\n\n* Move single table configuration\n\n* Revise java doc","date":"2021-09-04 18:58:22","modifiedFileCount":"54","status":"M","submitter":"Liang Zhang"}]
