[{"authorTime":"2021-01-03 20:45:49","codes":[{"authorDate":"2021-01-13 14:15:53","commitOrder":7,"curCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isToCalcite()) {\n            return executeQueryByCalcite();\n        }\n        Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n        cacheStatements(executionGroups);\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return driverJDBCExecutor.executeQuery(executionGroups, callback);\n    }\n","date":"2021-01-13 14:15:53","endLine":176,"groupId":"7913","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"executeQuery0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/89/848a674edfa877c303b48b821709d099cb7187.src","preCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isToCalcite()) {\n            return executeQueryByCalcite();\n        }\n        Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n        cacheStatements(executionGroups);\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return driverJDBCExecutor.executeQuery(executionGroups, callback);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"B"},{"authorDate":"2021-01-03 20:45:49","commitOrder":7,"curCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isToCalcite()) {\n            return executeQueryByCalcite();\n        }\n        Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n        cacheStatements(executionGroups);\n        return driverJDBCExecutor.executeQuery(executionGroups, \n                new PreparedStatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, SQLExecutorExceptionHandler.isExceptionThrown()));\n    }\n","date":"2021-01-03 20:45:49","endLine":199,"groupId":"7913","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"executeQuery0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ae/f17db99c4f6b903b9f7feb8b7f2e0448ff0d3d.src","preCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isToCalcite()) {\n            return executeQueryByCalcite();\n        }\n        Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n        cacheStatements(executionGroups);\n        return driverJDBCExecutor.executeQuery(executionGroups, \n                new PreparedStatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, SQLExecutorExceptionHandler.isExceptionThrown()));\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"NB"}],"commitId":"6afd3212e6fdc7c9a5f97d99f0cc689e8b325e13","commitMessage":"@@@get result set from CalciteExecutor (#9009)\n\n","date":"2021-01-13 14:15:53","modifiedFileCount":"5","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-03-12 17:12:30","codes":[{"authorDate":"2021-03-12 17:12:30","commitOrder":8,"curCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionContext(), new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isToCalcite()) {\n            return executeQueryByCalcite();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, callback);\n    }\n","date":"2021-03-12 17:12:30","endLine":178,"groupId":"5637","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"executeQuery0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4a/814962e038809b0d5641d34b1a556c19148dff.src","preCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isToCalcite()) {\n            return executeQueryByCalcite();\n        }\n        Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n        cacheStatements(executionGroups);\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return driverJDBCExecutor.executeQuery(executionGroups, callback);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2021-03-12 17:12:30","commitOrder":8,"curCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionGroupContext(), new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isToCalcite()) {\n            return executeQueryByCalcite();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        return driverJDBCExecutor.executeQuery(executionGroupContext,\n                new PreparedStatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, SQLExecutorExceptionHandler.isExceptionThrown()));\n    }\n","date":"2021-03-12 17:12:30","endLine":208,"groupId":"5637","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"executeQuery0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b4/fcefae0d94d26f1cb372a92605ceabddf8f0d9.src","preCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionGroups(), new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isToCalcite()) {\n            return executeQueryByCalcite();\n        }\n        Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups = createExecutionGroups();\n        cacheStatements(executionGroups);\n        return driverJDBCExecutor.executeQuery(executionGroups, \n                new PreparedStatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, SQLExecutorExceptionHandler.isExceptionThrown()));\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"}],"commitId":"30ebff26e8734ce0809baf9be78cd2513ee1ae98","commitMessage":"@@@Create executionGroup context (#9643)\n\n* Show ddl/dml process\n\n* fix unit test\n\n* fix java doc","date":"2021-03-12 17:12:30","modifiedFileCount":"15","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-03-16 18:29:46","codes":[{"authorDate":"2021-03-16 18:29:46","commitOrder":9,"curCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionContext(), new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isToCalcite()) {\n            return executeQueryByCalcite();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, executionContext.getSqlStatementContext(), callback);\n    }\n","date":"2021-03-16 18:29:46","endLine":178,"groupId":"5637","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"executeQuery0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/cd/fe116348a96142ab379724cece799fdab73e46.src","preCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionContext(), new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isToCalcite()) {\n            return executeQueryByCalcite();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, callback);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2021-03-16 18:29:46","commitOrder":9,"curCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionGroupContext(), new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isToCalcite()) {\n            return executeQueryByCalcite();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, executionContext.getSqlStatementContext(), \n                new PreparedStatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, SQLExecutorExceptionHandler.isExceptionThrown()));\n    }\n","date":"2021-03-16 18:29:46","endLine":208,"groupId":"5637","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"executeQuery0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8d/8542db375ad5c70f8cdbf2467118ea84193dfd.src","preCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionGroupContext(), new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isToCalcite()) {\n            return executeQueryByCalcite();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        return driverJDBCExecutor.executeQuery(executionGroupContext,\n                new PreparedStatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, SQLExecutorExceptionHandler.isExceptionThrown()));\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"}],"commitId":"9130c5154708e33e1963223719c7b84394147145","commitMessage":"@@@import ExecuteProcessEngine (#9691)\n\n","date":"2021-03-16 18:29:46","modifiedFileCount":"9","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-04-04 18:16:18","codes":[{"authorDate":"2021-04-04 18:16:18","commitOrder":10,"curCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionContext(), executionContext.getSqlStatementContext(),\n                    new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isToCalcite()) {\n            return executeQueryByCalcite();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, executionContext.getSqlStatementContext(), callback);\n    }\n","date":"2021-04-04 18:16:18","endLine":179,"groupId":"5637","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"executeQuery0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/13/e4a9590dc44f7a78191909f2dbeafd7dc6d748.src","preCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionContext(), new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isToCalcite()) {\n            return executeQueryByCalcite();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, executionContext.getSqlStatementContext(), callback);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2021-04-04 18:16:18","commitOrder":10,"curCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getSqlStatementContext(),\n                    new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isToCalcite()) {\n            return executeQueryByCalcite();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, executionContext.getSqlStatementContext(), \n                new PreparedStatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, SQLExecutorExceptionHandler.isExceptionThrown()));\n    }\n","date":"2021-04-04 18:16:18","endLine":209,"groupId":"5637","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"executeQuery0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/12/e08b0dc65176e884b04ce8c9b25f4f373ed891.src","preCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionGroupContext(), new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isToCalcite()) {\n            return executeQueryByCalcite();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, executionContext.getSqlStatementContext(), \n                new PreparedStatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, SQLExecutorExceptionHandler.isExceptionThrown()));\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"}],"commitId":"138905deb34ea0c38feec0cf1436b145196b8d2e","commitMessage":"@@@import ExecuteProcessEngine for RawExecutor (#9925)\n\n* import ExecuteProcessEngine for RawExecutor\n\n* import ExecuteProcessEngine for DriverJDBCExecutor","date":"2021-04-04 18:16:18","modifiedFileCount":"5","status":"M","submitter":"sandynz"},{"authorTime":"2021-06-01 17:02:09","codes":[{"authorDate":"2021-06-01 17:02:09","commitOrder":11,"curCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionContext(), executionContext.getSqlStatementContext(),\n                    new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isFederated()) {\n            return executeFederatedQuery();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, executionContext.getSqlStatementContext(), callback);\n    }\n","date":"2021-06-01 17:02:09","endLine":180,"groupId":"7152","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"executeQuery0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/99/47317085005a8aec8917efaaed8a225afb1a98.src","preCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionContext(), executionContext.getSqlStatementContext(),\n                    new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isToCalcite()) {\n            return executeQueryByCalcite();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, executionContext.getSqlStatementContext(), callback);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2021-06-01 17:02:09","commitOrder":11,"curCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getSqlStatementContext(),\n                    new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isFederated()) {\n            return executeFederatedQuery();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, executionContext.getSqlStatementContext(), \n                new PreparedStatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, SQLExecutorExceptionHandler.isExceptionThrown()));\n    }\n","date":"2021-06-01 17:02:09","endLine":210,"groupId":"7152","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"executeQuery0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9b/78174a4e852943b0da6cf7cec0c116fb6ec26a.src","preCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getSqlStatementContext(),\n                    new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isToCalcite()) {\n            return executeQueryByCalcite();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, executionContext.getSqlStatementContext(), \n                new PreparedStatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, SQLExecutorExceptionHandler.isExceptionThrown()));\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"}],"commitId":"7d6c812f359bf41472a62cbc0493b253fdeb5769","commitMessage":"@@@Create new package federate execution (#10603)\n\n","date":"2021-06-01 17:02:09","modifiedFileCount":"16","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-06-25 16:56:56","codes":[{"authorDate":"2021-06-25 16:56:56","commitOrder":12,"curCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionContext(), executionContext.getLogicSQL(),\n                    new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isFederated()) {\n            return executeFederatedQuery();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, executionContext.getLogicSQL(), callback);\n    }\n","date":"2021-06-25 16:56:56","endLine":178,"groupId":"10006","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"executeQuery0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/78/e40cf78edce2e2a429b3a21d5461f6041f4a18.src","preCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionContext(), executionContext.getSqlStatementContext(),\n                    new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isFederated()) {\n            return executeFederatedQuery();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, executionContext.getSqlStatementContext(), callback);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2021-06-25 16:56:56","commitOrder":12,"curCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getLogicSQL(),\n                    new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isFederated()) {\n            return executeFederatedQuery();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, executionContext.getLogicSQL(),\n                new PreparedStatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, SQLExecutorExceptionHandler.isExceptionThrown()));\n    }\n","date":"2021-06-25 16:56:56","endLine":207,"groupId":"10006","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"executeQuery0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c4/81f13b7340f2a1b8b98d61f126aa884f3461a4.src","preCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getSqlStatementContext(),\n                    new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isFederated()) {\n            return executeFederatedQuery();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, executionContext.getSqlStatementContext(), \n                new PreparedStatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, SQLExecutorExceptionHandler.isExceptionThrown()));\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"2fa8d9de63960f5a160b64306418d9007a7ed528","commitMessage":"@@@Show logic SQL in execution process list Info column (#11006)\n\n* Prepare LogicSQL for ExecuteProcessReporter\n\n* Persist logic SQL and show in Info column","date":"2021-06-25 16:56:56","modifiedFileCount":"17","status":"M","submitter":"sandynz"},{"authorTime":"2021-08-09 16:45:36","codes":[{"authorDate":"2021-08-09 16:45:36","commitOrder":13,"curCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getMetaData(connection.getSchemaName()).getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionContext(), executionContext.getLogicSQL(),\n                    new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isFederated()) {\n            return executeFederatedQuery();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getMetaData(connection.getSchemaName()).getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, executionContext.getLogicSQL(), callback);\n    }\n","date":"2021-08-09 16:45:36","endLine":176,"groupId":"101178","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"executeQuery0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d2/e584707f24bd62d48cc852cbeea49da6462e7e.src","preCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionContext(), executionContext.getLogicSQL(),\n                    new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isFederated()) {\n            return executeFederatedQuery();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        StatementExecuteQueryCallback callback = new StatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(),\n                executionContext.getSqlStatementContext().getSqlStatement(), SQLExecutorExceptionHandler.isExceptionThrown());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, executionContext.getLogicSQL(), callback);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"},{"authorDate":"2021-08-09 16:45:36","commitOrder":13,"curCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getMetaData(connection.getSchemaName()).getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getLogicSQL(),\n                    new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isFederated()) {\n            return executeFederatedQuery();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, executionContext.getLogicSQL(),\n                new PreparedStatementExecuteQueryCallback(metaDataContexts.getMetaData(connection.getSchemaName()).getResource().getDatabaseType(), sqlStatement,\n                        SQLExecutorExceptionHandler.isExceptionThrown()));\n    }\n","date":"2021-08-09 16:45:36","endLine":206,"groupId":"101178","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"executeQuery0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/50/baeaf18c596da58f3517bd1589948bda40a605.src","preCode":"    private List<QueryResult> executeQuery0() throws SQLException {\n        if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n            return rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getLogicSQL(),\n                    new RawSQLExecutorCallback()).stream().map(each -> (QueryResult) each).collect(Collectors.toList());\n        }\n        if (executionContext.getRouteContext().isFederated()) {\n            return executeFederatedQuery();\n        }\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n        cacheStatements(executionGroupContext.getInputGroups());\n        return driverJDBCExecutor.executeQuery(executionGroupContext, executionContext.getLogicSQL(),\n                new PreparedStatementExecuteQueryCallback(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, SQLExecutorExceptionHandler.isExceptionThrown()));\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"222aeb59cc07d5eb3edc858c68b9d95cc903bcec","commitMessage":"@@@JDBC-core module delete getDefaultMetaData() (#11714)\n\n* jdbc-core module delete getDefaultMetaData()\n\n* update\n\n* optimization","date":"2021-08-09 16:45:36","modifiedFileCount":"22","status":"M","submitter":"zhaojinchao"}]
