[{"authorTime":"2021-01-05 18:34:28","codes":[{"authorDate":"2020-12-22 17:41:38","commitOrder":3,"curCode":"    public void beforeMethod(final TargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Span root = (Span) ((Map<String, Object>) args[2]).get(\"_root_span_\");\n        Tracer.SpanBuilder builder = GlobalTracer.get().buildSpan(OPERATION_NAME);\n        if ((boolean) args[1]) {\n            builder.asChildOf(root);\n        } else {\n            JDBCExecutionUnit executionUnit = (JDBCExecutionUnit) args[0];\n            ExecutionUnit unit = executionUnit.getExecutionUnit();\n            builder.withTag(Tags.COMPONENT.getKey(), ShardingSphereTags.COMPONENT_NAME)\n                    .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                    .withTag(Tags.DB_TYPE.getKey(), \"sql\")\n                    .withTag(Tags.DB_INSTANCE.getKey(), unit.getDataSourceName())\n                    .withTag(Tags.DB_STATEMENT.getKey(), unit.getSqlUnit().getSql())\n                    .withTag(ShardingSphereTags.DB_BIND_VARIABLES.getKey(), unit.getSqlUnit().getParameters().toString());\n        }\n        target.setAttachment(builder.startActive(true));\n    }\n","date":"2020-12-22 17:41:38","endLine":60,"groupId":"5957","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeMethod","params":"(finalTargetObjecttarget@finalMethodmethod@finalObject[]args@finalMethodInvocationResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ec/d78befb3cffa80e2818e2de271a6610aea7e6e.src","preCode":"    public void beforeMethod(final TargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Span root = (Span) ((Map<String, Object>) args[2]).get(\"_root_span_\");\n        Tracer.SpanBuilder builder = GlobalTracer.get().buildSpan(OPERATION_NAME);\n        if ((boolean) args[1]) {\n            builder.asChildOf(root);\n        } else {\n            JDBCExecutionUnit executionUnit = (JDBCExecutionUnit) args[0];\n            ExecutionUnit unit = executionUnit.getExecutionUnit();\n            builder.withTag(Tags.COMPONENT.getKey(), ShardingSphereTags.COMPONENT_NAME)\n                    .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                    .withTag(Tags.DB_TYPE.getKey(), \"sql\")\n                    .withTag(Tags.DB_INSTANCE.getKey(), unit.getDataSourceName())\n                    .withTag(Tags.DB_STATEMENT.getKey(), unit.getSqlUnit().getSql())\n                    .withTag(ShardingSphereTags.DB_BIND_VARIABLES.getKey(), unit.getSqlUnit().getParameters().toString());\n        }\n        target.setAttachment(builder.startActive(true));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-jaeger/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/jaeger/advice/JDBCExecutorCallbackAdvice.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"NB"},{"authorDate":"2021-01-05 18:34:28","commitOrder":3,"curCode":"    public void beforeMethod(final TargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Scope scope = GlobalTracer.get().buildSpan(OPERATION_NAME)\n                .withTag(Tags.COMPONENT.getKey(), ShardingSphereTags.COMPONENT_NAME)\n                .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                .withTag(Tags.DB_STATEMENT.getKey(), String.valueOf(args[0]))\n                .startActive(true);\n        target.setAttachment(scope);\n    }\n","date":"2021-01-05 18:34:28","endLine":45,"groupId":"12207","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeMethod","params":"(finalTargetObjecttarget@finalMethodmethod@finalObject[]args@finalMethodInvocationResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/99/796c4ccf9145a8392a84138602f4e2fa2415bb.src","preCode":"    public void beforeMethod(final TargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Scope scope = GlobalTracer.get().buildSpan(OPERATION_NAME)\n                .withTag(Tags.COMPONENT.getKey(), ShardingSphereTags.COMPONENT_NAME)\n                .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                .withTag(Tags.DB_STATEMENT.getKey(), String.valueOf(args[0]))\n                .startActive(true);\n        target.setAttachment(scope);\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-opentracing/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/opentracing/advice/SQLParserEngineAdvice.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"B"}],"commitId":"259fdd1d9015774c14f032051ba6943d5adbb9dc","commitMessage":"@@@agent add opentracing plugin (#8895)\n\n* agent add opentracing plugin\n\n* agent add opentracing plugin","date":"2021-01-05 18:34:28","modifiedFileCount":"1","status":"M","submitter":"xiaoyu"},{"authorTime":"2021-01-12 10:35:24","codes":[{"authorDate":"2021-01-12 10:35:24","commitOrder":4,"curCode":"    public void beforeMethod(final AdviceTargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Span root = (Span) ((Map<String, Object>) args[2]).get(\"_root_span_\");\n        Tracer.SpanBuilder builder = GlobalTracer.get().buildSpan(OPERATION_NAME);\n        if ((boolean) args[1]) {\n            builder.asChildOf(root);\n        } else {\n            JDBCExecutionUnit executionUnit = (JDBCExecutionUnit) args[0];\n            ExecutionUnit unit = executionUnit.getExecutionUnit();\n            builder.withTag(Tags.COMPONENT.getKey(), ShardingSphereTags.COMPONENT_NAME)\n                    .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                    .withTag(Tags.DB_TYPE.getKey(), \"sql\")\n                    .withTag(Tags.DB_INSTANCE.getKey(), unit.getDataSourceName())\n                    .withTag(Tags.DB_STATEMENT.getKey(), unit.getSqlUnit().getSql())\n                    .withTag(ShardingSphereTags.DB_BIND_VARIABLES.getKey(), unit.getSqlUnit().getParameters().toString());\n        }\n        target.setAttachment(builder.startActive(true));\n    }\n","date":"2021-01-12 10:35:24","endLine":60,"groupId":"5957","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeMethod","params":"(finalAdviceTargetObjecttarget@finalMethodmethod@finalObject[]args@finalMethodInvocationResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/03/035ba35d99c43d86b2413b495b6ac7e8b1d6f0.src","preCode":"    public void beforeMethod(final TargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Span root = (Span) ((Map<String, Object>) args[2]).get(\"_root_span_\");\n        Tracer.SpanBuilder builder = GlobalTracer.get().buildSpan(OPERATION_NAME);\n        if ((boolean) args[1]) {\n            builder.asChildOf(root);\n        } else {\n            JDBCExecutionUnit executionUnit = (JDBCExecutionUnit) args[0];\n            ExecutionUnit unit = executionUnit.getExecutionUnit();\n            builder.withTag(Tags.COMPONENT.getKey(), ShardingSphereTags.COMPONENT_NAME)\n                    .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                    .withTag(Tags.DB_TYPE.getKey(), \"sql\")\n                    .withTag(Tags.DB_INSTANCE.getKey(), unit.getDataSourceName())\n                    .withTag(Tags.DB_STATEMENT.getKey(), unit.getSqlUnit().getSql())\n                    .withTag(ShardingSphereTags.DB_BIND_VARIABLES.getKey(), unit.getSqlUnit().getParameters().toString());\n        }\n        target.setAttachment(builder.startActive(true));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-jaeger/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/jaeger/advice/JDBCExecutorCallbackAdvice.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2021-01-12 10:35:24","commitOrder":4,"curCode":"    public void beforeMethod(final AdviceTargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Scope scope = GlobalTracer.get().buildSpan(OPERATION_NAME)\n                .withTag(Tags.COMPONENT.getKey(), ShardingSphereTags.COMPONENT_NAME)\n                .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                .withTag(Tags.DB_STATEMENT.getKey(), String.valueOf(args[0]))\n                .startActive(true);\n        target.setAttachment(scope);\n    }\n","date":"2021-01-12 10:35:24","endLine":45,"groupId":"12207","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"beforeMethod","params":"(finalAdviceTargetObjecttarget@finalMethodmethod@finalObject[]args@finalMethodInvocationResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e6/10e5d972d125efc711ad50c9af3847472b67c8.src","preCode":"    public void beforeMethod(final TargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Scope scope = GlobalTracer.get().buildSpan(OPERATION_NAME)\n                .withTag(Tags.COMPONENT.getKey(), ShardingSphereTags.COMPONENT_NAME)\n                .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                .withTag(Tags.DB_STATEMENT.getKey(), String.valueOf(args[0]))\n                .startActive(true);\n        target.setAttachment(scope);\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-opentracing/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/opentracing/advice/SQLParserEngineAdvice.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"}],"commitId":"c75652dbf13f60b4572abc2f7a68c24bb84e6bd4","commitMessage":"@@@support to instrument the same method repeatedly (#8986)\n\n* support to instrument the same method repeatedly\n\n* fix wrong hand","date":"2021-01-12 10:35:24","modifiedFileCount":"32","status":"M","submitter":"Daming"},{"authorTime":"2021-01-12 10:35:24","codes":[{"authorDate":"2021-01-15 10:40:24","commitOrder":5,"curCode":"    public void beforeMethod(final AdviceTargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Span root = (Span) ((Map<String, Object>) args[2]).get(JaegerConstants.ROOT_SPAN);\n        Tracer.SpanBuilder builder = GlobalTracer.get().buildSpan(OPERATION_NAME);\n        if ((boolean) args[1]) {\n            builder.asChildOf(root);\n        } else {\n            final JDBCExecutionUnit executionUnit = (JDBCExecutionUnit) args[0];\n            final ExecutionUnit unit = executionUnit.getExecutionUnit();\n            Method getMetadataMethod = JDBCExecutorCallback.class.getDeclaredMethod(\"getDataSourceMetaData\", DatabaseMetaData.class);\n            getMetadataMethod.setAccessible(true);\n            DataSourceMetaData metaData = (DataSourceMetaData) getMetadataMethod.invoke(target, new Object[]{executionUnit.getStorageResource().getConnection().getMetaData()});\n            builder.withTag(Tags.COMPONENT.getKey(), JaegerConstants.COMPONENT_NAME)\n                    .withTag(Tags.DB_TYPE.getKey(), JaegerConstants.DB_TYPE_VALUE)\n                    .withTag(Tags.DB_INSTANCE.getKey(), unit.getDataSourceName())\n                    .withTag(Tags.PEER_HOSTNAME.getKey(), metaData.getHostName())\n                    .withTag(Tags.PEER_PORT.getKey(), metaData.getPort())\n                    .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                    .withTag(Tags.DB_STATEMENT.getKey(), unit.getSqlUnit().getSql())\n                    .withTag(JaegerConstants.ShardingSphereTags.DB_BIND_VARIABLES.getKey(), unit.getSqlUnit().getParameters().toString());\n        }\n        target.setAttachment(builder.startActive(true));\n    }\n","date":"2021-01-15 10:40:24","endLine":70,"groupId":"6837","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeMethod","params":"(finalAdviceTargetObjecttarget@finalMethodmethod@finalObject[]args@finalMethodInvocationResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a7/52c6491f5bd8d2cb2a8934f0d3e870a3bac010.src","preCode":"    public void beforeMethod(final AdviceTargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Span root = (Span) ((Map<String, Object>) args[2]).get(\"_root_span_\");\n        Tracer.SpanBuilder builder = GlobalTracer.get().buildSpan(OPERATION_NAME);\n        if ((boolean) args[1]) {\n            builder.asChildOf(root);\n        } else {\n            JDBCExecutionUnit executionUnit = (JDBCExecutionUnit) args[0];\n            ExecutionUnit unit = executionUnit.getExecutionUnit();\n            builder.withTag(Tags.COMPONENT.getKey(), ShardingSphereTags.COMPONENT_NAME)\n                    .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                    .withTag(Tags.DB_TYPE.getKey(), \"sql\")\n                    .withTag(Tags.DB_INSTANCE.getKey(), unit.getDataSourceName())\n                    .withTag(Tags.DB_STATEMENT.getKey(), unit.getSqlUnit().getSql())\n                    .withTag(ShardingSphereTags.DB_BIND_VARIABLES.getKey(), unit.getSqlUnit().getParameters().toString());\n        }\n        target.setAttachment(builder.startActive(true));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-jaeger/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/jaeger/advice/JDBCExecutorCallbackAdvice.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2021-01-12 10:35:24","commitOrder":5,"curCode":"    public void beforeMethod(final AdviceTargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Scope scope = GlobalTracer.get().buildSpan(OPERATION_NAME)\n                .withTag(Tags.COMPONENT.getKey(), ShardingSphereTags.COMPONENT_NAME)\n                .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                .withTag(Tags.DB_STATEMENT.getKey(), String.valueOf(args[0]))\n                .startActive(true);\n        target.setAttachment(scope);\n    }\n","date":"2021-01-12 10:35:24","endLine":45,"groupId":"12207","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"beforeMethod","params":"(finalAdviceTargetObjecttarget@finalMethodmethod@finalObject[]args@finalMethodInvocationResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e6/10e5d972d125efc711ad50c9af3847472b67c8.src","preCode":"    public void beforeMethod(final AdviceTargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Scope scope = GlobalTracer.get().buildSpan(OPERATION_NAME)\n                .withTag(Tags.COMPONENT.getKey(), ShardingSphereTags.COMPONENT_NAME)\n                .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                .withTag(Tags.DB_STATEMENT.getKey(), String.valueOf(args[0]))\n                .startActive(true);\n        target.setAttachment(scope);\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-opentracing/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/opentracing/advice/SQLParserEngineAdvice.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"}],"commitId":"3d21ffcaa4b7aeb854496c403f46c0aa4ee6d611","commitMessage":"@@@rrefactor agent tracing plugin test (#9039)\n\n* refactor agent tracing plugin test\n\n* Update CommandExecutorTaskAdviceTest.java\n\nrename method\n\n* add license header","date":"2021-01-15 10:40:24","modifiedFileCount":"15","status":"M","submitter":"Daming"},{"authorTime":"2021-01-12 10:35:24","codes":[{"authorDate":"2021-02-06 00:37:52","commitOrder":6,"curCode":"    public void beforeMethod(final AdviceTargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Span root = (Span) ((Map<String, Object>) args[2]).get(JaegerConstants.ROOT_SPAN);\n        Tracer.SpanBuilder builder = GlobalTracer.get().buildSpan(OPERATION_NAME);\n        if ((boolean) args[1]) {\n            builder.asChildOf(root);\n        } else {\n            JDBCExecutionUnit executionUnit = (JDBCExecutionUnit) args[0];\n            Method getMetadataMethod = JDBCExecutorCallback.class.getDeclaredMethod(\"getDataSourceMetaData\", DatabaseMetaData.class);\n            getMetadataMethod.setAccessible(true);\n            DataSourceMetaData metaData = (DataSourceMetaData) getMetadataMethod.invoke(target, new Object[]{executionUnit.getStorageResource().getConnection().getMetaData()});\n            builder.withTag(Tags.COMPONENT.getKey(), JaegerConstants.COMPONENT_NAME)\n                    .withTag(Tags.DB_TYPE.getKey(), JaegerConstants.DB_TYPE_VALUE)\n                    .withTag(Tags.DB_INSTANCE.getKey(), executionUnit.getExecutionUnit().getDataSourceName())\n                    .withTag(Tags.PEER_HOSTNAME.getKey(), metaData.getHostName())\n                    .withTag(Tags.PEER_PORT.getKey(), metaData.getPort())\n                    .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                    .withTag(Tags.DB_STATEMENT.getKey(), executionUnit.getExecutionUnit().getSqlUnit().getSql())\n                    .withTag(JaegerConstants.ShardingSphereTags.DB_BIND_VARIABLES.getKey(), executionUnit.getExecutionUnit().getSqlUnit().getParameters().toString());\n        }\n        target.setAttachment(builder.startActive(true));\n    }\n","date":"2021-02-06 00:37:52","endLine":68,"groupId":"6837","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeMethod","params":"(finalAdviceTargetObjecttarget@finalMethodmethod@finalObject[]args@finalMethodInvocationResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f8/3db92c3aaa6e424811368a25ed769fbcf7a172.src","preCode":"    public void beforeMethod(final AdviceTargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Span root = (Span) ((Map<String, Object>) args[2]).get(JaegerConstants.ROOT_SPAN);\n        Tracer.SpanBuilder builder = GlobalTracer.get().buildSpan(OPERATION_NAME);\n        if ((boolean) args[1]) {\n            builder.asChildOf(root);\n        } else {\n            final JDBCExecutionUnit executionUnit = (JDBCExecutionUnit) args[0];\n            final ExecutionUnit unit = executionUnit.getExecutionUnit();\n            Method getMetadataMethod = JDBCExecutorCallback.class.getDeclaredMethod(\"getDataSourceMetaData\", DatabaseMetaData.class);\n            getMetadataMethod.setAccessible(true);\n            DataSourceMetaData metaData = (DataSourceMetaData) getMetadataMethod.invoke(target, new Object[]{executionUnit.getStorageResource().getConnection().getMetaData()});\n            builder.withTag(Tags.COMPONENT.getKey(), JaegerConstants.COMPONENT_NAME)\n                    .withTag(Tags.DB_TYPE.getKey(), JaegerConstants.DB_TYPE_VALUE)\n                    .withTag(Tags.DB_INSTANCE.getKey(), unit.getDataSourceName())\n                    .withTag(Tags.PEER_HOSTNAME.getKey(), metaData.getHostName())\n                    .withTag(Tags.PEER_PORT.getKey(), metaData.getPort())\n                    .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                    .withTag(Tags.DB_STATEMENT.getKey(), unit.getSqlUnit().getSql())\n                    .withTag(JaegerConstants.ShardingSphereTags.DB_BIND_VARIABLES.getKey(), unit.getSqlUnit().getParameters().toString());\n        }\n        target.setAttachment(builder.startActive(true));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-jaeger/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/jaeger/advice/JDBCExecutorCallbackAdvice.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2021-01-12 10:35:24","commitOrder":6,"curCode":"    public void beforeMethod(final AdviceTargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Scope scope = GlobalTracer.get().buildSpan(OPERATION_NAME)\n                .withTag(Tags.COMPONENT.getKey(), ShardingSphereTags.COMPONENT_NAME)\n                .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                .withTag(Tags.DB_STATEMENT.getKey(), String.valueOf(args[0]))\n                .startActive(true);\n        target.setAttachment(scope);\n    }\n","date":"2021-01-12 10:35:24","endLine":45,"groupId":"12207","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"beforeMethod","params":"(finalAdviceTargetObjecttarget@finalMethodmethod@finalObject[]args@finalMethodInvocationResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e6/10e5d972d125efc711ad50c9af3847472b67c8.src","preCode":"    public void beforeMethod(final AdviceTargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Scope scope = GlobalTracer.get().buildSpan(OPERATION_NAME)\n                .withTag(Tags.COMPONENT.getKey(), ShardingSphereTags.COMPONENT_NAME)\n                .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                .withTag(Tags.DB_STATEMENT.getKey(), String.valueOf(args[0]))\n                .startActive(true);\n        target.setAttachment(scope);\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-opentracing/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/opentracing/advice/SQLParserEngineAdvice.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"}],"commitId":"9424b261f6a125a06890c706bf56f7dd410423f3","commitMessage":"@@@For code style (#9355)\n\n* Remove useless codes\n\n* For code style\n\n* For code style\n\n* For code style","date":"2021-02-06 00:37:52","modifiedFileCount":"77","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-01-12 10:35:24","codes":[{"authorDate":"2021-03-01 21:25:53","commitOrder":7,"curCode":"    public void beforeMethod(final AdviceTargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Span root = (Span) ((Map<String, Object>) args[2]).get(JaegerConstants.ROOT_SPAN);\n        Tracer.SpanBuilder builder = GlobalTracer.get().buildSpan(OPERATION_NAME);\n        if (null != root) {\n            builder = builder.asChildOf(root);\n        }\n        JDBCExecutionUnit executionUnit = (JDBCExecutionUnit) args[0];\n        Method getMetadataMethod = JDBCExecutorCallback.class.getDeclaredMethod(\"getDataSourceMetaData\", DatabaseMetaData.class);\n        getMetadataMethod.setAccessible(true);\n        DataSourceMetaData metaData = (DataSourceMetaData) getMetadataMethod.invoke(target, new Object[]{executionUnit.getStorageResource().getConnection().getMetaData()});\n        builder.withTag(Tags.COMPONENT.getKey(), JaegerConstants.COMPONENT_NAME)\n                .withTag(Tags.DB_TYPE.getKey(), JaegerConstants.DB_TYPE_VALUE)\n                .withTag(Tags.DB_INSTANCE.getKey(), executionUnit.getExecutionUnit().getDataSourceName())\n                .withTag(Tags.PEER_HOSTNAME.getKey(), metaData.getHostName())\n                .withTag(Tags.PEER_PORT.getKey(), metaData.getPort())\n                .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                .withTag(Tags.DB_STATEMENT.getKey(), executionUnit.getExecutionUnit().getSqlUnit().getSql())\n                .withTag(JaegerConstants.ShardingSphereTags.DB_BIND_VARIABLES.getKey(), executionUnit.getExecutionUnit().getSqlUnit().getParameters().toString());\n        target.setAttachment(builder.startActive(true));\n    }\n","date":"2021-03-01 21:25:53","endLine":68,"groupId":"1024","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"beforeMethod","params":"(finalAdviceTargetObjecttarget@finalMethodmethod@finalObject[]args@finalMethodInvocationResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ff/1c5ca008ef7d285d7606d925dac0a78f99f29b.src","preCode":"    public void beforeMethod(final AdviceTargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Span root = (Span) ((Map<String, Object>) args[2]).get(JaegerConstants.ROOT_SPAN);\n        Tracer.SpanBuilder builder = GlobalTracer.get().buildSpan(OPERATION_NAME);\n        if ((boolean) args[1]) {\n            builder.asChildOf(root);\n        } else {\n            JDBCExecutionUnit executionUnit = (JDBCExecutionUnit) args[0];\n            Method getMetadataMethod = JDBCExecutorCallback.class.getDeclaredMethod(\"getDataSourceMetaData\", DatabaseMetaData.class);\n            getMetadataMethod.setAccessible(true);\n            DataSourceMetaData metaData = (DataSourceMetaData) getMetadataMethod.invoke(target, new Object[]{executionUnit.getStorageResource().getConnection().getMetaData()});\n            builder.withTag(Tags.COMPONENT.getKey(), JaegerConstants.COMPONENT_NAME)\n                    .withTag(Tags.DB_TYPE.getKey(), JaegerConstants.DB_TYPE_VALUE)\n                    .withTag(Tags.DB_INSTANCE.getKey(), executionUnit.getExecutionUnit().getDataSourceName())\n                    .withTag(Tags.PEER_HOSTNAME.getKey(), metaData.getHostName())\n                    .withTag(Tags.PEER_PORT.getKey(), metaData.getPort())\n                    .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                    .withTag(Tags.DB_STATEMENT.getKey(), executionUnit.getExecutionUnit().getSqlUnit().getSql())\n                    .withTag(JaegerConstants.ShardingSphereTags.DB_BIND_VARIABLES.getKey(), executionUnit.getExecutionUnit().getSqlUnit().getParameters().toString());\n        }\n        target.setAttachment(builder.startActive(true));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-jaeger/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/jaeger/advice/JDBCExecutorCallbackAdvice.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2021-01-12 10:35:24","commitOrder":7,"curCode":"    public void beforeMethod(final AdviceTargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Scope scope = GlobalTracer.get().buildSpan(OPERATION_NAME)\n                .withTag(Tags.COMPONENT.getKey(), ShardingSphereTags.COMPONENT_NAME)\n                .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                .withTag(Tags.DB_STATEMENT.getKey(), String.valueOf(args[0]))\n                .startActive(true);\n        target.setAttachment(scope);\n    }\n","date":"2021-01-12 10:35:24","endLine":45,"groupId":"1024","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"beforeMethod","params":"(finalAdviceTargetObjecttarget@finalMethodmethod@finalObject[]args@finalMethodInvocationResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e6/10e5d972d125efc711ad50c9af3847472b67c8.src","preCode":"    public void beforeMethod(final AdviceTargetObject target, final Method method, final Object[] args, final MethodInvocationResult result) {\n        Scope scope = GlobalTracer.get().buildSpan(OPERATION_NAME)\n                .withTag(Tags.COMPONENT.getKey(), ShardingSphereTags.COMPONENT_NAME)\n                .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n                .withTag(Tags.DB_STATEMENT.getKey(), String.valueOf(args[0]))\n                .startActive(true);\n        target.setAttachment(scope);\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-opentracing/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/opentracing/advice/SQLParserEngineAdvice.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"}],"commitId":"ae008ca649e9e1172d1d7a6ae46a0fda79955380","commitMessage":"@@@fix collector sql (#9556)\n\n","date":"2021-03-01 21:25:53","modifiedFileCount":"2","status":"M","submitter":"xiaoyu"}]
