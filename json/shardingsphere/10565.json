[{"authorTime":"2021-08-17 15:06:22","codes":[{"authorDate":"2021-08-17 15:06:22","commitOrder":1,"curCode":"    public void assertLoadTablesMySQL() throws SQLException {\n        Collection<ShardingSphereRule> rules = Collections.singletonList(shardingRule);\n        final ShardingTableMetaDataBuilder loader = (ShardingTableMetaDataBuilder) OrderedSPIRegistry.getRegisteredServices(RuleBasedTableMetaDataBuilder.class, rules).get(shardingRule);\n        when(props.getValue(ConfigurationPropertyKey.CHECK_TABLE_METADATA_ENABLED)).thenReturn(false);\n        when(databaseType.getName()).thenReturn(\"MySQL\");\n        Collection<String> tableNames = new LinkedList<>();\n        tableNames.add(TABLE_NAME);\n        Map<String, TableMetaData> actual = loader.load(tableNames, shardingRule, new SchemaBuilderMaterials(databaseType, Collections.singletonMap(\"ds\", dataSource), rules, props),\n                new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors() * 2, Runtime.getRuntime().availableProcessors() * 2,\n                        0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"ShardingSphere-SchemaBuilder-%d\").build()));\n        assertResult(actual);\n    }\n","date":"2021-08-17 15:06:22","endLine":242,"groupId":"11016","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertLoadTablesMySQL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e4/ba81f6892c4d651f3f9549435029b80256ad67.src","preCode":"    public void assertLoadTablesMySQL() throws SQLException {\n        Collection<ShardingSphereRule> rules = Collections.singletonList(shardingRule);\n        final ShardingTableMetaDataBuilder loader = (ShardingTableMetaDataBuilder) OrderedSPIRegistry.getRegisteredServices(RuleBasedTableMetaDataBuilder.class, rules).get(shardingRule);\n        when(props.getValue(ConfigurationPropertyKey.CHECK_TABLE_METADATA_ENABLED)).thenReturn(false);\n        when(databaseType.getName()).thenReturn(\"MySQL\");\n        Collection<String> tableNames = new LinkedList<>();\n        tableNames.add(TABLE_NAME);\n        Map<String, TableMetaData> actual = loader.load(tableNames, shardingRule, new SchemaBuilderMaterials(databaseType, Collections.singletonMap(\"ds\", dataSource), rules, props),\n                new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors() * 2, Runtime.getRuntime().availableProcessors() * 2,\n                        0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"ShardingSphere-SchemaBuilder-%d\").build()));\n        assertResult(actual);\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/metadata/ShardingTableMetaDataBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"B"},{"authorDate":"2021-08-17 15:06:22","commitOrder":1,"curCode":"    public void assertLoadTablesPGSQL() throws SQLException {\n        Collection<ShardingSphereRule> rules = Collections.singletonList(shardingRule);\n        final ShardingTableMetaDataBuilder loader = (ShardingTableMetaDataBuilder) OrderedSPIRegistry.getRegisteredServices(RuleBasedTableMetaDataBuilder.class, rules).get(shardingRule);\n        when(props.getValue(ConfigurationPropertyKey.CHECK_TABLE_METADATA_ENABLED)).thenReturn(false);\n        when(databaseType.getName()).thenReturn(\"PostgreSQL\");\n        Collection<String> tableNames = new LinkedList<>();\n        tableNames.add(TABLE_NAME);\n        Map<String, TableMetaData> actual = loader.load(tableNames, shardingRule, new SchemaBuilderMaterials(databaseType, Collections.singletonMap(\"ds\", dataSource), rules, props),\n                new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors() * 2, Runtime.getRuntime().availableProcessors() * 2,\n                        0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"ShardingSphere-SchemaBuilder-%d\").build()));\n        assertResult(actual);\n    }\n","date":"2021-08-17 15:06:22","endLine":270,"groupId":"11016","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertLoadTablesPGSQL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e4/ba81f6892c4d651f3f9549435029b80256ad67.src","preCode":"    public void assertLoadTablesPGSQL() throws SQLException {\n        Collection<ShardingSphereRule> rules = Collections.singletonList(shardingRule);\n        final ShardingTableMetaDataBuilder loader = (ShardingTableMetaDataBuilder) OrderedSPIRegistry.getRegisteredServices(RuleBasedTableMetaDataBuilder.class, rules).get(shardingRule);\n        when(props.getValue(ConfigurationPropertyKey.CHECK_TABLE_METADATA_ENABLED)).thenReturn(false);\n        when(databaseType.getName()).thenReturn(\"PostgreSQL\");\n        Collection<String> tableNames = new LinkedList<>();\n        tableNames.add(TABLE_NAME);\n        Map<String, TableMetaData> actual = loader.load(tableNames, shardingRule, new SchemaBuilderMaterials(databaseType, Collections.singletonMap(\"ds\", dataSource), rules, props),\n                new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors() * 2, Runtime.getRuntime().availableProcessors() * 2,\n                        0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"ShardingSphere-SchemaBuilder-%d\").build()));\n        assertResult(actual);\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/metadata/ShardingTableMetaDataBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"B"}],"commitId":"605e05c907bb4bd4e14bb682c01e6f46e562a87b","commitMessage":"@@@improve metadata load performance (#11767)\n\n* improve metadata load performance\n\n* improve metadata load performance\n\n* metaDataImprove test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove fix index\n\n* metaDataImprove optimize review\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions","date":"2021-08-17 15:06:22","modifiedFileCount":"16","status":"B","submitter":"tuichenchuxin"},{"authorTime":"2021-08-20 15:52:50","codes":[{"authorDate":"2021-08-20 15:52:50","commitOrder":2,"curCode":"    public void assertLoadTablesMySQL() throws SQLException {\n        Collection<ShardingSphereRule> rules = Collections.singletonList(shardingRule);\n        final ShardingTableMetaDataBuilder loader = (ShardingTableMetaDataBuilder) OrderedSPIRegistry.getRegisteredServices(RuleBasedTableMetaDataBuilder.class, rules).get(shardingRule);\n        when(props.getValue(ConfigurationPropertyKey.CHECK_TABLE_METADATA_ENABLED)).thenReturn(false);\n        when(databaseType.getName()).thenReturn(\"MySQL\");\n        Collection<String> tableNames = new LinkedList<>();\n        tableNames.add(TABLE_NAME);\n        Map<String, TableMetaData> actual = loader.load(tableNames, shardingRule, new SchemaBuilderMaterials(databaseType, Collections.singletonMap(\"ds\", dataSource), rules, props));\n        assertResult(actual);\n    }\n","date":"2021-08-20 15:52:50","endLine":232,"groupId":"10565","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertLoadTablesMySQL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/de/d9d1e95a0f1c5646007a1ac0aed02475a89ddf.src","preCode":"    public void assertLoadTablesMySQL() throws SQLException {\n        Collection<ShardingSphereRule> rules = Collections.singletonList(shardingRule);\n        final ShardingTableMetaDataBuilder loader = (ShardingTableMetaDataBuilder) OrderedSPIRegistry.getRegisteredServices(RuleBasedTableMetaDataBuilder.class, rules).get(shardingRule);\n        when(props.getValue(ConfigurationPropertyKey.CHECK_TABLE_METADATA_ENABLED)).thenReturn(false);\n        when(databaseType.getName()).thenReturn(\"MySQL\");\n        Collection<String> tableNames = new LinkedList<>();\n        tableNames.add(TABLE_NAME);\n        Map<String, TableMetaData> actual = loader.load(tableNames, shardingRule, new SchemaBuilderMaterials(databaseType, Collections.singletonMap(\"ds\", dataSource), rules, props),\n                new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors() * 2, Runtime.getRuntime().availableProcessors() * 2,\n                        0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"ShardingSphere-SchemaBuilder-%d\").build()));\n        assertResult(actual);\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/metadata/ShardingTableMetaDataBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"},{"authorDate":"2021-08-20 15:52:50","commitOrder":2,"curCode":"    public void assertLoadTablesPGSQL() throws SQLException {\n        Collection<ShardingSphereRule> rules = Collections.singletonList(shardingRule);\n        final ShardingTableMetaDataBuilder loader = (ShardingTableMetaDataBuilder) OrderedSPIRegistry.getRegisteredServices(RuleBasedTableMetaDataBuilder.class, rules).get(shardingRule);\n        when(props.getValue(ConfigurationPropertyKey.CHECK_TABLE_METADATA_ENABLED)).thenReturn(false);\n        when(databaseType.getName()).thenReturn(\"PostgreSQL\");\n        Collection<String> tableNames = new LinkedList<>();\n        tableNames.add(TABLE_NAME);\n        Map<String, TableMetaData> actual = loader.load(tableNames, shardingRule, new SchemaBuilderMaterials(databaseType, Collections.singletonMap(\"ds\", dataSource), rules, props));\n        assertResult(actual);\n    }\n","date":"2021-08-20 15:52:50","endLine":256,"groupId":"10565","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertLoadTablesPGSQL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/de/d9d1e95a0f1c5646007a1ac0aed02475a89ddf.src","preCode":"    public void assertLoadTablesPGSQL() throws SQLException {\n        Collection<ShardingSphereRule> rules = Collections.singletonList(shardingRule);\n        final ShardingTableMetaDataBuilder loader = (ShardingTableMetaDataBuilder) OrderedSPIRegistry.getRegisteredServices(RuleBasedTableMetaDataBuilder.class, rules).get(shardingRule);\n        when(props.getValue(ConfigurationPropertyKey.CHECK_TABLE_METADATA_ENABLED)).thenReturn(false);\n        when(databaseType.getName()).thenReturn(\"PostgreSQL\");\n        Collection<String> tableNames = new LinkedList<>();\n        tableNames.add(TABLE_NAME);\n        Map<String, TableMetaData> actual = loader.load(tableNames, shardingRule, new SchemaBuilderMaterials(databaseType, Collections.singletonMap(\"ds\", dataSource), rules, props),\n                new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors() * 2, Runtime.getRuntime().availableProcessors() * 2,\n                        0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"ShardingSphere-SchemaBuilder-%d\").build()));\n        assertResult(actual);\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/metadata/ShardingTableMetaDataBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"}],"commitId":"632b7c777ea43f7de3dfd2f13bc866814b882eaa","commitMessage":"@@@Refactor single table meta data load (#11895)\n\n","date":"2021-08-20 15:52:50","modifiedFileCount":"31","status":"M","submitter":"tuichenchuxin"}]
