[{"authorTime":"2021-05-11 18:12:40","codes":[{"authorDate":"2021-05-11 18:12:40","commitOrder":1,"curCode":"    public void assertExecuteQueryAndReturnEmptyResult() throws SQLException {\n        QueryResponseHeader queryResponseHeader = mock(QueryResponseHeader.class);\n        when(textProtocolBackendHandler.execute()).thenReturn(queryResponseHeader);\n        Collection<DatabasePacket<?>> actual = queryExecutor.execute();\n        assertTrue(actual.isEmpty());\n        assertNull(queryExecutor.getResponseType());\n        verify(queryResponseHeader).getQueryHeaders();\n    }\n","date":"2021-05-11 18:12:40","endLine":89,"groupId":"9493","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteQueryAndReturnEmptyResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fa/4a07adbb4ad6891ee6704cceac31b21476b9a5.src","preCode":"    public void assertExecuteQueryAndReturnEmptyResult() throws SQLException {\n        QueryResponseHeader queryResponseHeader = mock(QueryResponseHeader.class);\n        when(textProtocolBackendHandler.execute()).thenReturn(queryResponseHeader);\n        Collection<DatabasePacket<?>> actual = queryExecutor.execute();\n        assertTrue(actual.isEmpty());\n        assertNull(queryExecutor.getResponseType());\n        verify(queryResponseHeader).getQueryHeaders();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/query/text/PostgreSQLComQueryExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"B"},{"authorDate":"2021-05-11 18:12:40","commitOrder":1,"curCode":"    public void assertExecuteQueryAndReturnResult() throws SQLException {\n        QueryResponseHeader queryResponseHeader = mock(QueryResponseHeader.class);\n        when(queryResponseHeader.getQueryHeaders()).thenReturn(Collections.singletonList(new QueryHeader(\"schema\", \"table\", \"label\", \"column\", 1, \"type\", 2, 3, true, true, true, true)));\n        when(textProtocolBackendHandler.execute()).thenReturn(queryResponseHeader);\n        Collection<DatabasePacket<?>> actual = queryExecutor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLRowDescriptionPacket.class)));\n        assertThat(queryExecutor.getResponseType(), is(ResponseType.QUERY));\n        verify(queryResponseHeader).getQueryHeaders();\n    }\n","date":"2021-05-11 18:12:40","endLine":101,"groupId":"4939","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteQueryAndReturnResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fa/4a07adbb4ad6891ee6704cceac31b21476b9a5.src","preCode":"    public void assertExecuteQueryAndReturnResult() throws SQLException {\n        QueryResponseHeader queryResponseHeader = mock(QueryResponseHeader.class);\n        when(queryResponseHeader.getQueryHeaders()).thenReturn(Collections.singletonList(new QueryHeader(\"schema\", \"table\", \"label\", \"column\", 1, \"type\", 2, 3, true, true, true, true)));\n        when(textProtocolBackendHandler.execute()).thenReturn(queryResponseHeader);\n        Collection<DatabasePacket<?>> actual = queryExecutor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLRowDescriptionPacket.class)));\n        assertThat(queryExecutor.getResponseType(), is(ResponseType.QUERY));\n        verify(queryResponseHeader).getQueryHeaders();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/query/text/PostgreSQLComQueryExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"}],"commitId":"b87b4e43482e505ee56fa0ce45c5cb5e4709e26b","commitMessage":"@@@Add tests for PostgreSQL Proxy Query/Bind CommandExecutor (#10284)\n\n* Add test for PostgreSQLComBindExecutor\n\n* Add test for PostgreSQLComQueryExecutor","date":"2021-05-11 18:12:40","modifiedFileCount":"0","status":"B","submitter":"???"},{"authorTime":"2021-05-11 18:12:40","codes":[{"authorDate":"2021-06-03 14:10:14","commitOrder":2,"curCode":"    public void assertExecuteQueryAndReturnEmptyResult() throws SQLException {\n        QueryResponseHeader queryResponseHeader = mock(QueryResponseHeader.class);\n        when(textProtocolBackendHandler.execute()).thenReturn(queryResponseHeader);\n        Collection<DatabasePacket<?>> actual = queryExecutor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLRowDescriptionPacket.class)));\n        assertThat(queryExecutor.getResponseType(), is(ResponseType.QUERY));\n        verify(queryResponseHeader).getQueryHeaders();\n    }\n","date":"2021-06-03 14:10:14","endLine":91,"groupId":"10859","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteQueryAndReturnEmptyResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b1/27d89396945f0d079c6b012a128cbce697f663.src","preCode":"    public void assertExecuteQueryAndReturnEmptyResult() throws SQLException {\n        QueryResponseHeader queryResponseHeader = mock(QueryResponseHeader.class);\n        when(textProtocolBackendHandler.execute()).thenReturn(queryResponseHeader);\n        Collection<DatabasePacket<?>> actual = queryExecutor.execute();\n        assertTrue(actual.isEmpty());\n        assertNull(queryExecutor.getResponseType());\n        verify(queryResponseHeader).getQueryHeaders();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/query/text/PostgreSQLComQueryExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2021-05-11 18:12:40","commitOrder":2,"curCode":"    public void assertExecuteQueryAndReturnResult() throws SQLException {\n        QueryResponseHeader queryResponseHeader = mock(QueryResponseHeader.class);\n        when(queryResponseHeader.getQueryHeaders()).thenReturn(Collections.singletonList(new QueryHeader(\"schema\", \"table\", \"label\", \"column\", 1, \"type\", 2, 3, true, true, true, true)));\n        when(textProtocolBackendHandler.execute()).thenReturn(queryResponseHeader);\n        Collection<DatabasePacket<?>> actual = queryExecutor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLRowDescriptionPacket.class)));\n        assertThat(queryExecutor.getResponseType(), is(ResponseType.QUERY));\n        verify(queryResponseHeader).getQueryHeaders();\n    }\n","date":"2021-05-11 18:12:40","endLine":101,"groupId":"10859","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteQueryAndReturnResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fa/4a07adbb4ad6891ee6704cceac31b21476b9a5.src","preCode":"    public void assertExecuteQueryAndReturnResult() throws SQLException {\n        QueryResponseHeader queryResponseHeader = mock(QueryResponseHeader.class);\n        when(queryResponseHeader.getQueryHeaders()).thenReturn(Collections.singletonList(new QueryHeader(\"schema\", \"table\", \"label\", \"column\", 1, \"type\", 2, 3, true, true, true, true)));\n        when(textProtocolBackendHandler.execute()).thenReturn(queryResponseHeader);\n        Collection<DatabasePacket<?>> actual = queryExecutor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLRowDescriptionPacket.class)));\n        assertThat(queryExecutor.getResponseType(), is(ResponseType.QUERY));\n        verify(queryResponseHeader).getQueryHeaders();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/query/text/PostgreSQLComQueryExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"}],"commitId":"a54ae1d11be2a2f651c08470a9890d3d5768d893","commitMessage":"@@@Fix PostgreSQL select no columns cause NPE (#10632)\n\n* Fix PostgreSQL select no columns cause NPE\n\n* Remove unused imports","date":"2021-06-03 14:10:14","modifiedFileCount":"3","status":"M","submitter":"???"}]
