[{"authorTime":"2021-07-01 17:47:55","codes":[{"authorDate":"2021-07-01 17:47:55","commitOrder":1,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final TableRuleSegment actual, final ExpectedTableRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getLogicTable(), CoreMatchers.is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getDataSources(), CoreMatchers.is(expected.getDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getTableStrategyColumn(), CoreMatchers.is(expected.getTableStrategyColumn()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getKeyGenerateStrategyColumn(), CoreMatchers.is(expected.getKeyGenerateStrategyColumn()));\n            AlgorithmAssert.assertIs(assertContext, actual.getTableStrategy(), expected.getTableStrategy());\n            AlgorithmAssert.assertIs(assertContext, actual.getKeyGenerateStrategy(), expected.getKeyGenerateStrategy());\n        }\n    }\n","date":"2021-07-01 17:47:55","endLine":60,"groupId":"10063","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalTableRuleSegmentactual@finalExpectedTableRuleexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/34/be0f64bf99fc09cd0fbe9257c26f11095831d3.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final TableRuleSegment actual, final ExpectedTableRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getLogicTable(), CoreMatchers.is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getDataSources(), CoreMatchers.is(expected.getDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getTableStrategyColumn(), CoreMatchers.is(expected.getTableStrategyColumn()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getKeyGenerateStrategyColumn(), CoreMatchers.is(expected.getKeyGenerateStrategyColumn()));\n            AlgorithmAssert.assertIs(assertContext, actual.getTableStrategy(), expected.getTableStrategy());\n            AlgorithmAssert.assertIs(assertContext, actual.getKeyGenerateStrategy(), expected.getKeyGenerateStrategy());\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/TableRuleAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2021-07-01 17:47:55","commitOrder":1,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final BindingTableRuleSegment actual, final ExpectedShardingBindingTableRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s sharding binding table rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getTableGroups(), is(expected.getTableGroups()));\n        }\n    }\n","date":"2021-07-01 17:47:55","endLine":52,"groupId":"3017","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalBindingTableRuleSegmentactual@finalExpectedShardingBindingTableRuleexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/32/571ffc1f2ef25c1f67747cd6ddafb3aa2bf7e1.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final BindingTableRuleSegment actual, final ExpectedShardingBindingTableRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s sharding binding table rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getTableGroups(), is(expected.getTableGroups()));\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/rdl/ShardingBindingTableRuleAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"}],"commitId":"71c18596a4427b83e98bd0cb6b32319e297d1373","commitMessage":"@@@add new parser test module (#11083)\n\n","date":"2021-07-01 17:47:55","modifiedFileCount":"0","status":"B","submitter":"totalo"},{"authorTime":"2021-08-13 18:15:48","codes":[{"authorDate":"2021-08-13 18:15:48","commitOrder":2,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final TableRuleSegment actual, final ExpectedTableRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual table rule should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual table rule should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getLogicTable(), CoreMatchers.is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getDataSources(), CoreMatchers.is(expected.getDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getTableStrategyColumn(), CoreMatchers.is(expected.getTableStrategyColumn()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getKeyGenerateStrategyColumn(), CoreMatchers.is(expected.getKeyGenerateStrategyColumn()));\n            AlgorithmAssert.assertIs(assertContext, actual.getTableStrategy(), expected.getTableStrategy());\n            AlgorithmAssert.assertIs(assertContext, actual.getKeyGenerateStrategy(), expected.getKeyGenerateStrategy());\n        }\n    }\n","date":"2021-08-13 18:15:48","endLine":60,"groupId":"10063","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalTableRuleSegmentactual@finalExpectedTableRuleexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/81/955ebbb5d506ee03cd5ee20cb491b4cdfbba42.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final TableRuleSegment actual, final ExpectedTableRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getLogicTable(), CoreMatchers.is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getDataSources(), CoreMatchers.is(expected.getDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getTableStrategyColumn(), CoreMatchers.is(expected.getTableStrategyColumn()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getKeyGenerateStrategyColumn(), CoreMatchers.is(expected.getKeyGenerateStrategyColumn()));\n            AlgorithmAssert.assertIs(assertContext, actual.getTableStrategy(), expected.getTableStrategy());\n            AlgorithmAssert.assertIs(assertContext, actual.getKeyGenerateStrategy(), expected.getKeyGenerateStrategy());\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/TableRuleAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2021-08-13 18:15:48","commitOrder":2,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final BindingTableRuleSegment actual, final ExpectedShardingBindingTableRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual sharding binding table rule should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual sharding binding table rule should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s sharding binding table rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getTableGroups(), is(expected.getTableGroups()));\n        }\n    }\n","date":"2021-08-13 18:15:48","endLine":52,"groupId":"3017","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalBindingTableRuleSegmentactual@finalExpectedShardingBindingTableRuleexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4e/5c621ae32c9d087e56ee9cd265b1d1d98f9702.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final BindingTableRuleSegment actual, final ExpectedShardingBindingTableRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s sharding binding table rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getTableGroups(), is(expected.getTableGroups()));\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/rdl/ShardingBindingTableRuleAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"933ebab23d2431213c8fc9b01d9d096115eca4f8","commitMessage":"@@@Add advancedDistSQLStatement.  and implement 'preview sql'. (#11802)\n\n* Add advancedDistSQLStatement.  and implement 'preview sql'.\n\n* fix `Actual should not exist` syntax problem.","date":"2021-08-13 18:15:48","modifiedFileCount":"29","status":"M","submitter":"Raigor"},{"authorTime":"2021-08-13 18:15:48","codes":[{"authorDate":"2021-09-04 06:28:38","commitOrder":3,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final TableRuleSegment actual, final ExpectedTableRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual table rule should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual table rule should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getLogicTable(), is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getDataSources(), is(expected.getDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getTableStrategyColumn(), is(expected.getTableStrategyColumn()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getKeyGenerateStrategyColumn(), is(expected.getKeyGenerateStrategyColumn()));\n            AlgorithmAssert.assertIs(assertContext, actual.getTableStrategy(), expected.getTableStrategy());\n            AlgorithmAssert.assertIs(assertContext, actual.getKeyGenerateStrategy(), expected.getKeyGenerateStrategy());\n        }\n    }\n","date":"2021-09-04 06:28:38","endLine":60,"groupId":"102066","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalTableRuleSegmentactual@finalExpectedTableRuleexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/90/93f50356a360875adcb2f826646bec1fea95a3.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final TableRuleSegment actual, final ExpectedTableRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual table rule should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual table rule should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getLogicTable(), CoreMatchers.is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getDataSources(), CoreMatchers.is(expected.getDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getTableStrategyColumn(), CoreMatchers.is(expected.getTableStrategyColumn()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getKeyGenerateStrategyColumn(), CoreMatchers.is(expected.getKeyGenerateStrategyColumn()));\n            AlgorithmAssert.assertIs(assertContext, actual.getTableStrategy(), expected.getTableStrategy());\n            AlgorithmAssert.assertIs(assertContext, actual.getKeyGenerateStrategy(), expected.getKeyGenerateStrategy());\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/TableRuleAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2021-08-13 18:15:48","commitOrder":3,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final BindingTableRuleSegment actual, final ExpectedShardingBindingTableRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual sharding binding table rule should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual sharding binding table rule should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s sharding binding table rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getTableGroups(), is(expected.getTableGroups()));\n        }\n    }\n","date":"2021-08-13 18:15:48","endLine":52,"groupId":"102066","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalBindingTableRuleSegmentactual@finalExpectedShardingBindingTableRuleexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4e/5c621ae32c9d087e56ee9cd265b1d1d98f9702.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final BindingTableRuleSegment actual, final ExpectedShardingBindingTableRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual sharding binding table rule should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual sharding binding table rule should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s sharding binding table rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getTableGroups(), is(expected.getTableGroups()));\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/rdl/ShardingBindingTableRuleAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"}],"commitId":"5c9bd5ce6bd4794ed6eb01547d38a5cf9046384c","commitMessage":"@@@Fix curatorZookeeperRepositoryTest and code style. (#12203)\n\n* Fix CuratorZookeeperRepositoryTest.\n\n* Fix code style.","date":"2021-09-04 06:28:38","modifiedFileCount":"6","status":"M","submitter":"Guocheng Tang"}]
