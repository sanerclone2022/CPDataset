[{"authorTime":"2021-06-04 22:49:49","codes":[{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertNextForRowCountBoundOpenedFalse() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"Oracle\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(new OracleSelectStatement(), \n                new GroupByContext(Collections.emptyList()), new OrderByContext(Collections.emptyList(), false), \n                new ProjectionsContext(0, 0, false, Collections.emptyList()),\n                new PaginationContext(new NumberLiteralRowNumberValueSegment(0, 0, 2, true), new NumberLiteralRowNumberValueSegment(0, 0, 4, false), Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(Arrays.asList(mockQueryResult(), mockQueryResult(), mockQueryResult(), mockQueryResult()), selectStatementContext, null);\n        assertTrue(actual.next());\n        assertTrue(actual.next());\n        assertFalse(actual.next());\n    }\n","date":"2021-06-04 22:49:49","endLine":80,"groupId":"10398","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertNextForRowCountBoundOpenedFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b4/a196591ab26f08436d1305ac4daf3536cdee8b.src","preCode":"    public void assertNextForRowCountBoundOpenedFalse() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"Oracle\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(new OracleSelectStatement(), \n                new GroupByContext(Collections.emptyList()), new OrderByContext(Collections.emptyList(), false), \n                new ProjectionsContext(0, 0, false, Collections.emptyList()),\n                new PaginationContext(new NumberLiteralRowNumberValueSegment(0, 0, 2, true), new NumberLiteralRowNumberValueSegment(0, 0, 4, false), Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(Arrays.asList(mockQueryResult(), mockQueryResult(), mockQueryResult(), mockQueryResult()), selectStatementContext, null);\n        assertTrue(actual.next());\n        assertTrue(actual.next());\n        assertFalse(actual.next());\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/pagination/RowNumberDecoratorMergedResultTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertNextForRowCountBoundOpenedTrue() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"Oracle\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(new OracleSelectStatement(), \n                new GroupByContext(Collections.emptyList()), new OrderByContext(Collections.emptyList(), false), \n                new ProjectionsContext(0, 0, false, Collections.emptyList()),\n                new PaginationContext(new NumberLiteralRowNumberValueSegment(0, 0, 2, true), new NumberLiteralRowNumberValueSegment(0, 0, 4, true), Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(Arrays.asList(mockQueryResult(), mockQueryResult(), mockQueryResult(), mockQueryResult()), selectStatementContext, null);\n        assertTrue(actual.next());\n        assertTrue(actual.next());\n        assertTrue(actual.next());\n        assertFalse(actual.next());\n    }\n","date":"2021-06-04 22:49:49","endLine":94,"groupId":"3335","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertNextForRowCountBoundOpenedTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b4/a196591ab26f08436d1305ac4daf3536cdee8b.src","preCode":"    public void assertNextForRowCountBoundOpenedTrue() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"Oracle\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(new OracleSelectStatement(), \n                new GroupByContext(Collections.emptyList()), new OrderByContext(Collections.emptyList(), false), \n                new ProjectionsContext(0, 0, false, Collections.emptyList()),\n                new PaginationContext(new NumberLiteralRowNumberValueSegment(0, 0, 2, true), new NumberLiteralRowNumberValueSegment(0, 0, 4, true), Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(Arrays.asList(mockQueryResult(), mockQueryResult(), mockQueryResult(), mockQueryResult()), selectStatementContext, null);\n        assertTrue(actual.next());\n        assertTrue(actual.next());\n        assertTrue(actual.next());\n        assertFalse(actual.next());\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/pagination/RowNumberDecoratorMergedResultTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"}],"commitId":"6b157b44d0336e4d9c61f940b0ec19c26758af84","commitMessage":"@@@Merge sharding feature to core module (#10662)\n\n* Merge dependencies\n\n* Merge sharding feature to api module\n\n* Merge sharding feature to core module","date":"2021-06-04 22:49:49","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-08-06 15:37:24","codes":[{"authorDate":"2021-08-06 15:37:24","commitOrder":2,"curCode":"    public void assertNextForRowCountBoundOpenedFalse() throws SQLException {\n        OracleSelectStatement selectStatement = new OracleSelectStatement();\n        selectStatement.setProjections(new ProjectionsSegment(0, 0));\n        WhereSegment whereSegment = mock(WhereSegment.class);\n        BinaryOperationExpression binaryOperationExpression = mock(BinaryOperationExpression.class);\n        when(binaryOperationExpression.getLeft()).thenReturn(new ColumnSegment(0, 0, new IdentifierValue(\"row_id\")));\n        when(binaryOperationExpression.getRight()).thenReturn(new LiteralExpressionSegment(0, 0, 2));\n        when(binaryOperationExpression.getOperator()).thenReturn(\">=\");\n        when(whereSegment.getExpr()).thenReturn(binaryOperationExpression);\n        SubqueryTableSegment subqueryTableSegment = mock(SubqueryTableSegment.class);\n        SubquerySegment subquerySegment = mock(SubquerySegment.class);\n        SelectStatement subSelectStatement = mock(SelectStatement.class);\n        ProjectionsSegment subProjectionsSegment = mock(ProjectionsSegment.class);\n        TopProjectionSegment topProjectionSegment = mock(TopProjectionSegment.class);\n        when(topProjectionSegment.getAlias()).thenReturn(\"row_id\");\n        when(topProjectionSegment.getTop()).thenReturn(new NumberLiteralRowNumberValueSegment(0, 0, 4, false));\n        when(subProjectionsSegment.getProjections()).thenReturn(Collections.singletonList(topProjectionSegment));\n        when(subSelectStatement.getProjections()).thenReturn(subProjectionsSegment);\n        when(subquerySegment.getSelect()).thenReturn(subSelectStatement);\n        when(subqueryTableSegment.getSubquery()).thenReturn(subquerySegment);\n        selectStatement.setFrom(subqueryTableSegment);\n        selectStatement.setWhere(whereSegment);\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"Oracle\"));\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n        SelectStatementContext selectStatementContext = new SelectStatementContext(Collections.singletonMap(DefaultSchema.LOGIC_NAME, metaData), null, selectStatement, DefaultSchema.LOGIC_NAME);\n        MergedResult actual = resultMerger.merge(Arrays.asList(mockQueryResult(), mockQueryResult(), mockQueryResult(), mockQueryResult()), selectStatementContext, null);\n        assertTrue(actual.next());\n        assertTrue(actual.next());\n        assertFalse(actual.next());\n    }\n","date":"2021-08-06 15:37:24","endLine":126,"groupId":"10639","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertNextForRowCountBoundOpenedFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/eb/ef1168544e56c3c239a9a7ac2a47bac4464696.src","preCode":"    public void assertNextForRowCountBoundOpenedFalse() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"Oracle\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(new OracleSelectStatement(), \n                new GroupByContext(Collections.emptyList()), new OrderByContext(Collections.emptyList(), false), \n                new ProjectionsContext(0, 0, false, Collections.emptyList()),\n                new PaginationContext(new NumberLiteralRowNumberValueSegment(0, 0, 2, true), new NumberLiteralRowNumberValueSegment(0, 0, 4, false), Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(Arrays.asList(mockQueryResult(), mockQueryResult(), mockQueryResult(), mockQueryResult()), selectStatementContext, null);\n        assertTrue(actual.next());\n        assertTrue(actual.next());\n        assertFalse(actual.next());\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/pagination/RowNumberDecoratorMergedResultTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2021-08-06 15:37:24","commitOrder":2,"curCode":"    public void assertNextForRowCountBoundOpenedTrue() throws SQLException {\n        OracleSelectStatement selectStatement = new OracleSelectStatement();\n        selectStatement.setProjections(new ProjectionsSegment(0, 0));\n        WhereSegment whereSegment = mock(WhereSegment.class);\n        BinaryOperationExpression binaryOperationExpression = mock(BinaryOperationExpression.class);\n        when(binaryOperationExpression.getLeft()).thenReturn(new ColumnSegment(0, 0, new IdentifierValue(\"row_id\")));\n        when(binaryOperationExpression.getRight()).thenReturn(new LiteralExpressionSegment(0, 0, 2));\n        when(binaryOperationExpression.getOperator()).thenReturn(\">=\");\n        when(whereSegment.getExpr()).thenReturn(binaryOperationExpression);\n        SubqueryTableSegment subqueryTableSegment = mock(SubqueryTableSegment.class);\n        SubquerySegment subquerySegment = mock(SubquerySegment.class);\n        SelectStatement subSelectStatement = mock(SelectStatement.class);\n        ProjectionsSegment subProjectionsSegment = mock(ProjectionsSegment.class);\n        TopProjectionSegment topProjectionSegment = mock(TopProjectionSegment.class);\n        when(topProjectionSegment.getAlias()).thenReturn(\"row_id\");\n        when(topProjectionSegment.getTop()).thenReturn(new NumberLiteralRowNumberValueSegment(0, 0, 4, true));\n        when(subProjectionsSegment.getProjections()).thenReturn(Collections.singletonList(topProjectionSegment));\n        when(subSelectStatement.getProjections()).thenReturn(subProjectionsSegment);\n        when(subquerySegment.getSelect()).thenReturn(subSelectStatement);\n        when(subqueryTableSegment.getSubquery()).thenReturn(subquerySegment);\n        selectStatement.setFrom(subqueryTableSegment);\n        selectStatement.setWhere(whereSegment);\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"Oracle\"));\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n        SelectStatementContext selectStatementContext = new SelectStatementContext(Collections.singletonMap(DefaultSchema.LOGIC_NAME, metaData), null, selectStatement, DefaultSchema.LOGIC_NAME);\n        MergedResult actual = resultMerger.merge(Arrays.asList(mockQueryResult(), mockQueryResult(), mockQueryResult(), mockQueryResult()), selectStatementContext, null);\n        assertTrue(actual.next());\n        assertTrue(actual.next());\n        assertTrue(actual.next());\n        assertFalse(actual.next());\n    }\n","date":"2021-08-06 15:37:24","endLine":159,"groupId":"10639","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertNextForRowCountBoundOpenedTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/eb/ef1168544e56c3c239a9a7ac2a47bac4464696.src","preCode":"    public void assertNextForRowCountBoundOpenedTrue() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"Oracle\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(new OracleSelectStatement(), \n                new GroupByContext(Collections.emptyList()), new OrderByContext(Collections.emptyList(), false), \n                new ProjectionsContext(0, 0, false, Collections.emptyList()),\n                new PaginationContext(new NumberLiteralRowNumberValueSegment(0, 0, 2, true), new NumberLiteralRowNumberValueSegment(0, 0, 4, true), Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(Arrays.asList(mockQueryResult(), mockQueryResult(), mockQueryResult(), mockQueryResult()), selectStatementContext, null);\n        assertTrue(actual.next());\n        assertTrue(actual.next());\n        assertTrue(actual.next());\n        assertFalse(actual.next());\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/pagination/RowNumberDecoratorMergedResultTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"2843f408e67d98d3e62485c8ed89dbe08e9cb202","commitMessage":"@@@Remove test only constructor of SelectStatementContext (#11675)\n\n* TopAndRowNumberDecoratorMergedResultTest use SelectStatementContext's second constructor\n\n* PreparedShadowDataSourceRouterTest use SelectStatementContext's second constructor\n\n* GroupByMemoryMergedResultTest use SelectStatementContext's second constructor\n\n* GroupByRowComparatorTest use SelectStatementContext's second constructor\n\n* ShardingResultMergerEngineTest use SelectStatementContext's second constructor\n\n* ShardingDQLResultMergerTest use SelectStatementContext's second constructor\n\n* ShardingDQLResultMergerTest use SelectStatementContext's second constructor2\n\n* GroupByStreamMergedResultTest use SelectStatementContext's second constructor\n\n* IteratorStreamMergedResultTest use SelectStatementContext's second constructor\n\n* OrderByStreamMergedResultTest use SelectStatementContext's second constructor\n\n* SelectStatementContextTest use SelectStatementContext's second constructor\n\n* LimitDecoratorMergedResultTest use SelectStatementContext's second constructor\n\n* RowNumberDecoratorMergedResultTest use SelectStatementContext's second constructor\n\n* OrderByValueTest use SelectStatementContext's second constructor\n\n* code style\n\n* merge code","date":"2021-08-06 15:37:24","modifiedFileCount":"14","status":"M","submitter":"liguoping"}]
