[{"authorTime":"2021-07-03 15:12:51","codes":[{"authorDate":"2021-07-03 01:31:24","commitOrder":2,"curCode":"    private void checkToBeAlteredEncryptors(final AlterEncryptRuleStatement sqlStatement) {\n        Collection<String> encryptors = new LinkedHashSet<>();\n        for (EncryptRuleSegment each : sqlStatement.getRules()) {\n            encryptors.addAll(each.getColumns().stream().map(column -> column.getEncryptor().getName()).collect(Collectors.toSet()));\n        }\n        Collection<String> invalidEncryptors = encryptors.stream().filter(\n            each -> !TypedSPIRegistry.findRegisteredService(EncryptAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!invalidEncryptors.isEmpty()) {\n            throw new InvalidEncryptorsException(invalidEncryptors);\n        }\n    }\n","date":"2021-07-03 01:31:24","endLine":85,"groupId":"6637","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeAlteredEncryptors","params":"(finalAlterEncryptRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d7/1c35c973103cc1f8e06c6e2bfa083f2b55c92f.src","preCode":"    private void checkToBeAlteredEncryptors(final AlterEncryptRuleStatement sqlStatement) {\n        Collection<String> encryptors = new LinkedHashSet<>();\n        for (EncryptRuleSegment each : sqlStatement.getRules()) {\n            encryptors.addAll(each.getColumns().stream().map(column -> column.getEncryptor().getName()).collect(Collectors.toSet()));\n        }\n        Collection<String> invalidEncryptors = encryptors.stream().filter(\n            each -> !TypedSPIRegistry.findRegisteredService(EncryptAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!invalidEncryptors.isEmpty()) {\n            throw new InvalidEncryptorsException(invalidEncryptors);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-distsql/shardingsphere-encrypt-distsql-handler/src/main/java/org/apache/shardingsphere/encrypt/distsql/handler/update/AlterEncryptRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"NB"},{"authorDate":"2021-07-03 15:12:51","commitOrder":2,"curCode":"    private void checkToBeCreatedLoadBalancers(final CreateReadwriteSplittingRuleStatement sqlStatement) {\n        Collection<String> notExistedLoadBalancers = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getLoadBalancer).distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(ReplicaLoadBalanceAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedLoadBalancers.isEmpty()) {\n            throw new InvalidLoadBalancersException(notExistedLoadBalancers);\n        }\n    }\n","date":"2021-07-03 15:12:51","endLine":90,"groupId":"213","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkToBeCreatedLoadBalancers","params":"(finalCreateReadwriteSplittingRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/14/a9e22fb0fc5475cdf2e917c4354b61400d339d.src","preCode":"    private void checkToBeCreatedLoadBalancers(final CreateReadwriteSplittingRuleStatement sqlStatement) {\n        Collection<String> notExistedLoadBalancers = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getLoadBalancer).distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(ReplicaLoadBalanceAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedLoadBalancers.isEmpty()) {\n            throw new InvalidLoadBalancersException(notExistedLoadBalancers);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-distsql/shardingsphere-readwrite-splitting-distsql-handler/src/main/java/org/apache/shardingsphere/readwritesplitting/distsql/handler/update/CreateReadwriteSplittingRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"}],"commitId":"2f7f7f5e0627c094d508f37554ec49c87874bb9e","commitMessage":"@@@Add shardingsphere-readwrite-splitting-distsql-handler module (#11124)\n\n","date":"2021-07-03 15:12:51","modifiedFileCount":"2","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 01:26:11","codes":[{"authorDate":"2021-07-04 01:26:11","commitOrder":3,"curCode":"    private void checkToBeAlteredEncryptors(final AlterEncryptRuleStatement sqlStatement) throws InvalidEncryptorsException {\n        Collection<String> encryptors = new LinkedHashSet<>();\n        for (EncryptRuleSegment each : sqlStatement.getRules()) {\n            encryptors.addAll(each.getColumns().stream().map(column -> column.getEncryptor().getName()).collect(Collectors.toSet()));\n        }\n        Collection<String> invalidEncryptors = encryptors.stream().filter(\n            each -> !TypedSPIRegistry.findRegisteredService(EncryptAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!invalidEncryptors.isEmpty()) {\n            throw new InvalidEncryptorsException(invalidEncryptors);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":88,"groupId":"6637","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeAlteredEncryptors","params":"(finalAlterEncryptRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/65/30cfa8259985d4a3bb8ad8158eb44ec16671a8.src","preCode":"    private void checkToBeAlteredEncryptors(final AlterEncryptRuleStatement sqlStatement) {\n        Collection<String> encryptors = new LinkedHashSet<>();\n        for (EncryptRuleSegment each : sqlStatement.getRules()) {\n            encryptors.addAll(each.getColumns().stream().map(column -> column.getEncryptor().getName()).collect(Collectors.toSet()));\n        }\n        Collection<String> invalidEncryptors = encryptors.stream().filter(\n            each -> !TypedSPIRegistry.findRegisteredService(EncryptAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!invalidEncryptors.isEmpty()) {\n            throw new InvalidEncryptorsException(invalidEncryptors);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-distsql/shardingsphere-encrypt-distsql-handler/src/main/java/org/apache/shardingsphere/encrypt/distsql/handler/update/AlterEncryptRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2021-07-04 01:26:11","commitOrder":3,"curCode":"    private void checkToBeCreatedLoadBalancers(final CreateReadwriteSplittingRuleStatement sqlStatement) throws InvalidLoadBalancersException {\n        Collection<String> notExistedLoadBalancers = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getLoadBalancer).distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(ReplicaLoadBalanceAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedLoadBalancers.isEmpty()) {\n            throw new InvalidLoadBalancersException(notExistedLoadBalancers);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":93,"groupId":"213","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkToBeCreatedLoadBalancers","params":"(finalCreateReadwriteSplittingRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/80/d65d5c656fedb4a3e6de7abf36b68e04d980f9.src","preCode":"    private void checkToBeCreatedLoadBalancers(final CreateReadwriteSplittingRuleStatement sqlStatement) {\n        Collection<String> notExistedLoadBalancers = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getLoadBalancer).distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(ReplicaLoadBalanceAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedLoadBalancers.isEmpty()) {\n            throw new InvalidLoadBalancersException(notExistedLoadBalancers);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-distsql/shardingsphere-readwrite-splitting-distsql-handler/src/main/java/org/apache/shardingsphere/readwritesplitting/distsql/handler/update/CreateReadwriteSplittingRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"18ab59a5ac8de3a2c2d2c1dac39de3041b9c36f3","commitMessage":"@@@Refactor RuleDefinitionViolationException to extend SQLException (#11129)\n\n* Refactor RDLBackendHandler\n\n* Refactor RuleDefinitionViolationException to extend SQLException","date":"2021-07-04 01:26:11","modifiedFileCount":"66","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 12:43:06","codes":[{"authorDate":"2021-07-04 12:43:06","commitOrder":4,"curCode":"    private void checkToBeAlteredEncryptors(final AlterEncryptRuleStatement sqlStatement) throws InvalidAlgorithmConfigurationException {\n        Collection<String> encryptors = new LinkedHashSet<>();\n        for (EncryptRuleSegment each : sqlStatement.getRules()) {\n            encryptors.addAll(each.getColumns().stream().map(column -> column.getEncryptor().getName()).collect(Collectors.toSet()));\n        }\n        Collection<String> invalidEncryptors = encryptors.stream().filter(\n            each -> !TypedSPIRegistry.findRegisteredService(EncryptAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!invalidEncryptors.isEmpty()) {\n            throw new InvalidAlgorithmConfigurationException(\"encryptor\", invalidEncryptors);\n        }\n    }\n","date":"2021-07-04 12:43:06","endLine":87,"groupId":"10235","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeAlteredEncryptors","params":"(finalAlterEncryptRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/03/f29a91f19ed0e618f442950f77af6eb6f80b3c.src","preCode":"    private void checkToBeAlteredEncryptors(final AlterEncryptRuleStatement sqlStatement) throws InvalidEncryptorsException {\n        Collection<String> encryptors = new LinkedHashSet<>();\n        for (EncryptRuleSegment each : sqlStatement.getRules()) {\n            encryptors.addAll(each.getColumns().stream().map(column -> column.getEncryptor().getName()).collect(Collectors.toSet()));\n        }\n        Collection<String> invalidEncryptors = encryptors.stream().filter(\n            each -> !TypedSPIRegistry.findRegisteredService(EncryptAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!invalidEncryptors.isEmpty()) {\n            throw new InvalidEncryptorsException(invalidEncryptors);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-distsql/shardingsphere-encrypt-distsql-handler/src/main/java/org/apache/shardingsphere/encrypt/distsql/handler/update/AlterEncryptRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2021-07-04 12:43:06","commitOrder":4,"curCode":"    private void checkToBeCreatedLoadBalancers(final CreateReadwriteSplittingRuleStatement sqlStatement) throws InvalidAlgorithmConfigurationException {\n        Collection<String> notExistedLoadBalancers = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getLoadBalancer).distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(ReplicaLoadBalanceAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedLoadBalancers.isEmpty()) {\n            throw new InvalidAlgorithmConfigurationException(\"Load balancers\", notExistedLoadBalancers);\n        }\n    }\n","date":"2021-07-04 12:43:06","endLine":93,"groupId":"10235","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkToBeCreatedLoadBalancers","params":"(finalCreateReadwriteSplittingRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0f/2aa69ead2b167d670a30a4972178645d404f15.src","preCode":"    private void checkToBeCreatedLoadBalancers(final CreateReadwriteSplittingRuleStatement sqlStatement) throws InvalidLoadBalancersException {\n        Collection<String> notExistedLoadBalancers = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getLoadBalancer).distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(ReplicaLoadBalanceAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedLoadBalancers.isEmpty()) {\n            throw new InvalidLoadBalancersException(notExistedLoadBalancers);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-distsql/shardingsphere-readwrite-splitting-distsql-handler/src/main/java/org/apache/shardingsphere/readwritesplitting/distsql/handler/update/CreateReadwriteSplittingRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"3ddeaf7ab2e64f7ff1a935c0ed598227a3ddf765","commitMessage":"@@@Add CurrentRuleNotExistedException to refine Exception of current rule validation (#11133)\n\n* Remove InvalidDatabaseDiscoveryTypesException\n\n* Remove InvalidDatabaseDiscoveryTypesException\n\n* Remove InvalidEncryptorsException\n\n* Remove InvalidLoadBalancersException\n\n* Remove InvalidShardingAlgorithmsException\n\n* Remove InvalidKeyGeneratorsException","date":"2021-07-04 12:43:06","modifiedFileCount":"16","status":"M","submitter":"Liang Zhang"}]
