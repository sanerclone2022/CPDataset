[{"authorTime":"2021-04-11 23:38:16","codes":[{"authorDate":"2021-04-11 23:38:16","commitOrder":1,"curCode":"    public static boolean check(final String schemaName, final Collection<ShardingSphereRule> rules, final Grantee grantee) {\n        for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(rules, SQLChecker.class).entrySet()) {\n            boolean checkResult = entry.getValue().check(schemaName, grantee, entry.getKey());\n            if (!checkResult) {\n                return false;\n            }\n        }\n        return true;\n    }\n","date":"2021-04-11 23:38:16","endLine":61,"groupId":"2118","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"check","params":"(finalStringschemaName@finalCollection<ShardingSphereRule>rules@finalGranteegrantee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/35/3030029bd593e589450da1f6668ee87b0b333c.src","preCode":"    public static boolean check(final String schemaName, final Collection<ShardingSphereRule> rules, final Grantee grantee) {\n        for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(rules, SQLChecker.class).entrySet()) {\n            boolean checkResult = entry.getValue().check(schemaName, grantee, entry.getKey());\n            if (!checkResult) {\n                return false;\n            }\n        }\n        return true;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/check/SQLCheckEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"},{"authorDate":"2021-04-11 23:38:16","commitOrder":1,"curCode":"    public static void check(final SQLStatement sqlStatement, final List<Object> parameters, final Collection<ShardingSphereRule> rules, \n                             final String currentSchema, final Map<String, ShardingSphereMetaData> metaDataMap, final Grantee grantee) {\n        for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(rules, SQLChecker.class).entrySet()) {\n            SQLCheckResult checkResult = entry.getValue().check(sqlStatement, parameters, grantee, currentSchema, metaDataMap, entry.getKey());\n            if (!checkResult.isPassed()) {\n                throw new SQLCheckException(checkResult.getErrorMessage());\n            }\n        }\n    }\n","date":"2021-04-11 23:38:16","endLine":82,"groupId":"10724","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"check","params":"(finalSQLStatementsqlStatement@finalList<Object>parameters@finalCollection<ShardingSphereRule>rules@finalStringcurrentSchema@finalMap<String@ShardingSphereMetaData>metaDataMap@finalGranteegrantee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/35/3030029bd593e589450da1f6668ee87b0b333c.src","preCode":"    public static void check(final SQLStatement sqlStatement, final List<Object> parameters, final Collection<ShardingSphereRule> rules, \n                             final String currentSchema, final Map<String, ShardingSphereMetaData> metaDataMap, final Grantee grantee) {\n        for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(rules, SQLChecker.class).entrySet()) {\n            SQLCheckResult checkResult = entry.getValue().check(sqlStatement, parameters, grantee, currentSchema, metaDataMap, entry.getKey());\n            if (!checkResult.isPassed()) {\n                throw new SQLCheckException(checkResult.getErrorMessage());\n            }\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/check/SQLCheckEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"2951b7880ddab42eae598f6c32fe8d1c8034f611","commitMessage":"@@@Move check package from infra-common to infra-executor module (#10039)\n\n","date":"2021-04-11 23:38:16","modifiedFileCount":"11","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-08-13 17:32:32","codes":[{"authorDate":"2021-08-13 17:32:32","commitOrder":2,"curCode":"    public static boolean check(final String schemaName, final Collection<ShardingSphereRule> rules, final Grantee grantee) {\n        for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(SQLChecker.class, rules).entrySet()) {\n            boolean checkResult = entry.getValue().check(schemaName, grantee, entry.getKey());\n            if (!checkResult) {\n                return false;\n            }\n        }\n        return true;\n    }\n","date":"2021-08-13 17:32:32","endLine":62,"groupId":"111726","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"check","params":"(finalStringschemaName@finalCollection<ShardingSphereRule>rules@finalGranteegrantee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/91/0d47add13c4d66294e2773dcb5e58e422fc31e.src","preCode":"    public static boolean check(final String schemaName, final Collection<ShardingSphereRule> rules, final Grantee grantee) {\n        for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(rules, SQLChecker.class).entrySet()) {\n            boolean checkResult = entry.getValue().check(schemaName, grantee, entry.getKey());\n            if (!checkResult) {\n                return false;\n            }\n        }\n        return true;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/check/SQLCheckEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2021-08-13 17:32:32","commitOrder":2,"curCode":"    public static void check(final SQLStatement sqlStatement, final List<Object> parameters, final Collection<ShardingSphereRule> rules, \n                             final String currentSchema, final Map<String, ShardingSphereMetaData> metaDataMap, final Grantee grantee) {\n        for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(SQLChecker.class, rules).entrySet()) {\n            SQLCheckResult checkResult = entry.getValue().check(sqlStatement, parameters, grantee, currentSchema, metaDataMap, entry.getKey());\n            if (!checkResult.isPassed()) {\n                throw new SQLCheckException(checkResult.getErrorMessage());\n            }\n        }\n    }\n","date":"2021-08-13 17:32:32","endLine":83,"groupId":"111726","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"check","params":"(finalSQLStatementsqlStatement@finalList<Object>parameters@finalCollection<ShardingSphereRule>rules@finalStringcurrentSchema@finalMap<String@ShardingSphereMetaData>metaDataMap@finalGranteegrantee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/91/0d47add13c4d66294e2773dcb5e58e422fc31e.src","preCode":"    public static void check(final SQLStatement sqlStatement, final List<Object> parameters, final Collection<ShardingSphereRule> rules, \n                             final String currentSchema, final Map<String, ShardingSphereMetaData> metaDataMap, final Grantee grantee) {\n        for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(rules, SQLChecker.class).entrySet()) {\n            SQLCheckResult checkResult = entry.getValue().check(sqlStatement, parameters, grantee, currentSchema, metaDataMap, entry.getKey());\n            if (!checkResult.isPassed()) {\n                throw new SQLCheckException(checkResult.getErrorMessage());\n            }\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/check/SQLCheckEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"3c91473d73cadcb7ea5f7ac6cb0bbc4867454b89","commitMessage":"@@@solve the OrderedServicesCache concurrency exception (#11796)\n\n* solve the OrderedServicesCache concurrency problem\n\n* fix test case\n\n* modify test case return type\n\n* fix review comment\n\n* make OrderedServicesCacheKey as inner class of OrderedServicesCache\n\n* remove generic types in OrderedServicesCache\n\n* simplify inner class name\n\n* adjust order of param","date":"2021-08-13 17:32:32","modifiedFileCount":"38","status":"M","submitter":"Zhengqiang Duan"}]
