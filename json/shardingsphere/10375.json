[{"authorTime":"2021-06-05 15:56:59","codes":[{"authorDate":"2021-06-05 15:56:59","commitOrder":1,"curCode":"    public void isShadowSQL() {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.getAllColumnNames(\"tbl\")).thenReturn(Arrays.asList(\"id\", \"name\", \"shadow\"));\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"shadow_ds\"));\n        ShadowRule shadowRule = new ShadowRule(shadowRuleConfig);\n        InsertStatement insertStatement = new MySQLInsertStatement();\n        insertStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl\")));\n        InsertColumnsSegment insertColumnsSegment = new InsertColumnsSegment(0, 0,\n                Arrays.asList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")), new ColumnSegment(0, 0, new IdentifierValue(\"name\")), new ColumnSegment(0, 0, new IdentifierValue(\"shadow\"))));\n        insertStatement.setInsertColumns(insertColumnsSegment);\n        InsertStatementContext insertStatementContext = new InsertStatementContext(schema, Arrays.asList(1, \"Tom\", 2, \"Jerry\", 3, true), insertStatement);\n        PreparedShadowDataSourceJudgeEngine preparedShadowDataSourceRouter = new PreparedShadowDataSourceJudgeEngine(shadowRule, insertStatementContext, Arrays.asList(1, \"Tom\", true));\n        assertTrue(\"should be shadow\", preparedShadowDataSourceRouter.isShadow());\n    }\n","date":"2021-06-05 15:56:59","endLine":66,"groupId":"2595","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"isShadowSQL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/35/f10a186fada78999a6b57f35a3536f467204b4.src","preCode":"    public void isShadowSQL() {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.getAllColumnNames(\"tbl\")).thenReturn(Arrays.asList(\"id\", \"name\", \"shadow\"));\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"shadow_ds\"));\n        ShadowRule shadowRule = new ShadowRule(shadowRuleConfig);\n        InsertStatement insertStatement = new MySQLInsertStatement();\n        insertStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl\")));\n        InsertColumnsSegment insertColumnsSegment = new InsertColumnsSegment(0, 0,\n                Arrays.asList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")), new ColumnSegment(0, 0, new IdentifierValue(\"name\")), new ColumnSegment(0, 0, new IdentifierValue(\"shadow\"))));\n        insertStatement.setInsertColumns(insertColumnsSegment);\n        InsertStatementContext insertStatementContext = new InsertStatementContext(schema, Arrays.asList(1, \"Tom\", 2, \"Jerry\", 3, true), insertStatement);\n        PreparedShadowDataSourceJudgeEngine preparedShadowDataSourceRouter = new PreparedShadowDataSourceJudgeEngine(shadowRule, insertStatementContext, Arrays.asList(1, \"Tom\", true));\n        assertTrue(\"should be shadow\", preparedShadowDataSourceRouter.isShadow());\n    }\n","realPath":"shardingsphere-features/shardingsphere-shadow/shardingsphere-shadow-core/src/test/java/org/apache/shardingsphere/shadow/route/judge/impl/PreparedShadowDataSourceRouterTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"},{"authorDate":"2021-06-05 15:56:59","commitOrder":1,"curCode":"    private void isShadowSQLInLiteralExpression(final SelectStatement selectStatement) {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.getAllColumnNames(\"tbl\")).thenReturn(Arrays.asList(\"id\", \"name\", \"shadow\"));\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"shadow_ds\"));\n        ShadowRule shadowRule = new ShadowRule(shadowRuleConfig);\n        PreparedShadowDataSourceJudgeEngine preparedShadowDataSourceRouter = new PreparedShadowDataSourceJudgeEngine(shadowRule, \n                selectStatementContext(selectStatement), Arrays.asList(1, \"Tom\", true));\n        assertTrue(\"should be shadow\", preparedShadowDataSourceRouter.isShadow());\n    }\n","date":"2021-06-05 15:56:59","endLine":101,"groupId":"3690","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"isShadowSQLInLiteralExpression","params":"(finalSelectStatementselectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/35/f10a186fada78999a6b57f35a3536f467204b4.src","preCode":"    private void isShadowSQLInLiteralExpression(final SelectStatement selectStatement) {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.getAllColumnNames(\"tbl\")).thenReturn(Arrays.asList(\"id\", \"name\", \"shadow\"));\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"shadow_ds\"));\n        ShadowRule shadowRule = new ShadowRule(shadowRuleConfig);\n        PreparedShadowDataSourceJudgeEngine preparedShadowDataSourceRouter = new PreparedShadowDataSourceJudgeEngine(shadowRule, \n                selectStatementContext(selectStatement), Arrays.asList(1, \"Tom\", true));\n        assertTrue(\"should be shadow\", preparedShadowDataSourceRouter.isShadow());\n    }\n","realPath":"shardingsphere-features/shardingsphere-shadow/shardingsphere-shadow-core/src/test/java/org/apache/shardingsphere/shadow/route/judge/impl/PreparedShadowDataSourceRouterTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"dd4349f723bb3b9ab3107157736e2227cd231429","commitMessage":"@@@Merge shadow feature to core module (#10666)\n\n* Merge shadow feature to core module\n\n* Merge shadow feature to core module","date":"2021-06-05 15:56:59","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-06-05 15:56:59","codes":[{"authorDate":"2021-07-02 20:44:49","commitOrder":2,"curCode":"    public void isShadowSQL() {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.getAllColumnNames(\"tbl\")).thenReturn(Arrays.asList(\"id\", \"name\", \"shadow\"));\n        InsertStatement insertStatement = new MySQLInsertStatement();\n        insertStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl\")));\n        InsertColumnsSegment insertColumnsSegment = new InsertColumnsSegment(0, 0,\n                Arrays.asList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")), new ColumnSegment(0, 0, new IdentifierValue(\"name\")), new ColumnSegment(0, 0, new IdentifierValue(\"shadow\"))));\n        insertStatement.setInsertColumns(insertColumnsSegment);\n        InsertStatementContext insertStatementContext = createInsertStatementContext(Arrays.asList(1, \"Tom\", 2, \"Jerry\", 3, true), insertStatement, schema);\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"shadow_ds\"));\n        ShadowRule shadowRule = new ShadowRule(shadowRuleConfig);\n        PreparedShadowDataSourceJudgeEngine preparedShadowDataSourceRouter = new PreparedShadowDataSourceJudgeEngine(shadowRule, insertStatementContext, Arrays.asList(1, \"Tom\", true));\n        assertTrue(\"should be shadow\", preparedShadowDataSourceRouter.isShadow());\n    }\n","date":"2021-07-02 20:44:49","endLine":71,"groupId":"4643","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"isShadowSQL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/37/caa679a158efda67e57d399be71c7a49ee68da.src","preCode":"    public void isShadowSQL() {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.getAllColumnNames(\"tbl\")).thenReturn(Arrays.asList(\"id\", \"name\", \"shadow\"));\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"shadow_ds\"));\n        ShadowRule shadowRule = new ShadowRule(shadowRuleConfig);\n        InsertStatement insertStatement = new MySQLInsertStatement();\n        insertStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl\")));\n        InsertColumnsSegment insertColumnsSegment = new InsertColumnsSegment(0, 0,\n                Arrays.asList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")), new ColumnSegment(0, 0, new IdentifierValue(\"name\")), new ColumnSegment(0, 0, new IdentifierValue(\"shadow\"))));\n        insertStatement.setInsertColumns(insertColumnsSegment);\n        InsertStatementContext insertStatementContext = new InsertStatementContext(schema, Arrays.asList(1, \"Tom\", 2, \"Jerry\", 3, true), insertStatement);\n        PreparedShadowDataSourceJudgeEngine preparedShadowDataSourceRouter = new PreparedShadowDataSourceJudgeEngine(shadowRule, insertStatementContext, Arrays.asList(1, \"Tom\", true));\n        assertTrue(\"should be shadow\", preparedShadowDataSourceRouter.isShadow());\n    }\n","realPath":"shardingsphere-features/shardingsphere-shadow/shardingsphere-shadow-core/src/test/java/org/apache/shardingsphere/shadow/route/judge/impl/PreparedShadowDataSourceRouterTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2021-06-05 15:56:59","commitOrder":2,"curCode":"    private void isShadowSQLInLiteralExpression(final SelectStatement selectStatement) {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.getAllColumnNames(\"tbl\")).thenReturn(Arrays.asList(\"id\", \"name\", \"shadow\"));\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"shadow_ds\"));\n        ShadowRule shadowRule = new ShadowRule(shadowRuleConfig);\n        PreparedShadowDataSourceJudgeEngine preparedShadowDataSourceRouter = new PreparedShadowDataSourceJudgeEngine(shadowRule, \n                selectStatementContext(selectStatement), Arrays.asList(1, \"Tom\", true));\n        assertTrue(\"should be shadow\", preparedShadowDataSourceRouter.isShadow());\n    }\n","date":"2021-06-05 15:56:59","endLine":101,"groupId":"3690","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"isShadowSQLInLiteralExpression","params":"(finalSelectStatementselectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/35/f10a186fada78999a6b57f35a3536f467204b4.src","preCode":"    private void isShadowSQLInLiteralExpression(final SelectStatement selectStatement) {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.getAllColumnNames(\"tbl\")).thenReturn(Arrays.asList(\"id\", \"name\", \"shadow\"));\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"shadow_ds\"));\n        ShadowRule shadowRule = new ShadowRule(shadowRuleConfig);\n        PreparedShadowDataSourceJudgeEngine preparedShadowDataSourceRouter = new PreparedShadowDataSourceJudgeEngine(shadowRule, \n                selectStatementContext(selectStatement), Arrays.asList(1, \"Tom\", true));\n        assertTrue(\"should be shadow\", preparedShadowDataSourceRouter.isShadow());\n    }\n","realPath":"shardingsphere-features/shardingsphere-shadow/shardingsphere-shadow-core/src/test/java/org/apache/shardingsphere/shadow/route/judge/impl/PreparedShadowDataSourceRouterTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"bfb784c9a0e47fd147c8a654c2f0b2a1e86c2c27","commitMessage":"@@@extract SchemaAvailable interface & add validate for SelectStatement (#11091)\n\n* refactor SchemaAvailable interface & add validate for SelectStatement\n\n* add final for InsertStatementContext field\n\n* fix test case error\n\n* fix rewrite test case error\n\n* refactor context new instance method\n\n* optimize test case\n\n* fix test case\n\n* optimize logic\n\n* fix test case\n\n* fix checkstyle","date":"2021-07-02 20:44:49","modifiedFileCount":"44","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-06-05 15:56:59","codes":[{"authorDate":"2021-07-05 14:48:43","commitOrder":3,"curCode":"    public void isShadowSQL() {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.getAllColumnNames(\"tbl\")).thenReturn(Arrays.asList(\"id\", \"name\", \"shadow\"));\n        InsertStatement insertStatement = new MySQLInsertStatement();\n        insertStatement.setTable(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl\"))));\n        InsertColumnsSegment insertColumnsSegment = new InsertColumnsSegment(0, 0,\n                Arrays.asList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")), new ColumnSegment(0, 0, new IdentifierValue(\"name\")), new ColumnSegment(0, 0, new IdentifierValue(\"shadow\"))));\n        insertStatement.setInsertColumns(insertColumnsSegment);\n        InsertStatementContext insertStatementContext = createInsertStatementContext(Arrays.asList(1, \"Tom\", 2, \"Jerry\", 3, true), insertStatement, schema);\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"shadow_ds\"));\n        ShadowRule shadowRule = new ShadowRule(shadowRuleConfig);\n        PreparedShadowDataSourceJudgeEngine preparedShadowDataSourceRouter = new PreparedShadowDataSourceJudgeEngine(shadowRule, insertStatementContext, Arrays.asList(1, \"Tom\", true));\n        assertTrue(\"should be shadow\", preparedShadowDataSourceRouter.isShadow());\n    }\n","date":"2021-07-05 14:48:43","endLine":72,"groupId":"10375","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"isShadowSQL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3e/df73b4fe01f374fa2baff225a65876d755ae64.src","preCode":"    public void isShadowSQL() {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.getAllColumnNames(\"tbl\")).thenReturn(Arrays.asList(\"id\", \"name\", \"shadow\"));\n        InsertStatement insertStatement = new MySQLInsertStatement();\n        insertStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl\")));\n        InsertColumnsSegment insertColumnsSegment = new InsertColumnsSegment(0, 0,\n                Arrays.asList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")), new ColumnSegment(0, 0, new IdentifierValue(\"name\")), new ColumnSegment(0, 0, new IdentifierValue(\"shadow\"))));\n        insertStatement.setInsertColumns(insertColumnsSegment);\n        InsertStatementContext insertStatementContext = createInsertStatementContext(Arrays.asList(1, \"Tom\", 2, \"Jerry\", 3, true), insertStatement, schema);\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"shadow_ds\"));\n        ShadowRule shadowRule = new ShadowRule(shadowRuleConfig);\n        PreparedShadowDataSourceJudgeEngine preparedShadowDataSourceRouter = new PreparedShadowDataSourceJudgeEngine(shadowRule, insertStatementContext, Arrays.asList(1, \"Tom\", true));\n        assertTrue(\"should be shadow\", preparedShadowDataSourceRouter.isShadow());\n    }\n","realPath":"shardingsphere-features/shardingsphere-shadow/shardingsphere-shadow-core/src/test/java/org/apache/shardingsphere/shadow/route/judge/impl/PreparedShadowDataSourceRouterTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2021-06-05 15:56:59","commitOrder":3,"curCode":"    private void isShadowSQLInLiteralExpression(final SelectStatement selectStatement) {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.getAllColumnNames(\"tbl\")).thenReturn(Arrays.asList(\"id\", \"name\", \"shadow\"));\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"shadow_ds\"));\n        ShadowRule shadowRule = new ShadowRule(shadowRuleConfig);\n        PreparedShadowDataSourceJudgeEngine preparedShadowDataSourceRouter = new PreparedShadowDataSourceJudgeEngine(shadowRule, \n                selectStatementContext(selectStatement), Arrays.asList(1, \"Tom\", true));\n        assertTrue(\"should be shadow\", preparedShadowDataSourceRouter.isShadow());\n    }\n","date":"2021-06-05 15:56:59","endLine":101,"groupId":"10375","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"isShadowSQLInLiteralExpression","params":"(finalSelectStatementselectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/35/f10a186fada78999a6b57f35a3536f467204b4.src","preCode":"    private void isShadowSQLInLiteralExpression(final SelectStatement selectStatement) {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.getAllColumnNames(\"tbl\")).thenReturn(Arrays.asList(\"id\", \"name\", \"shadow\"));\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"shadow_ds\"));\n        ShadowRule shadowRule = new ShadowRule(shadowRuleConfig);\n        PreparedShadowDataSourceJudgeEngine preparedShadowDataSourceRouter = new PreparedShadowDataSourceJudgeEngine(shadowRule, \n                selectStatementContext(selectStatement), Arrays.asList(1, \"Tom\", true));\n        assertTrue(\"should be shadow\", preparedShadowDataSourceRouter.isShadow());\n    }\n","realPath":"shardingsphere-features/shardingsphere-shadow/shardingsphere-shadow-core/src/test/java/org/apache/shardingsphere/shadow/route/judge/impl/PreparedShadowDataSourceRouterTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"bd4980624aaa0c9fb3c9c87e260177715f835ede","commitMessage":"@@@support sql with schema for all features (#11150)\n\n* support sql with schema for all features\n\n* optimize logic\n\n* fix test case\n\n* fix multi remove token rewrite error\n\n* correct some test case param\n\n* optimize remove token generate\n\n* optimize remove token generate","date":"2021-07-05 14:48:43","modifiedFileCount":"64","status":"M","submitter":"Zhengqiang Duan"}]
