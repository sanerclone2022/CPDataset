[{"authorTime":"2021-07-01 17:47:55","codes":[{"authorDate":"2021-07-01 17:47:55","commitOrder":1,"curCode":"    public static void assertExpression(final SQLCaseAssertContext assertContext,\n                                        final ExpressionSegment actual, final ExpectedExpression expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual expression should not exist.\"), actual);\n            return;\n        }\n        assertNotNull(assertContext.getText(\"Actual expression should exist.\"), actual);\n        if (actual instanceof BinaryOperationExpression) {\n            assertBinaryOperationExpression(assertContext,\n                    (BinaryOperationExpression) actual, expected.getBinaryOperationExpression());\n        } else if (actual instanceof SubqueryExpressionSegment) {\n            assertSubqueryExpression(assertContext,\n                    (SubqueryExpressionSegment) actual, expected.getSubquery());\n        } else if (actual instanceof ColumnSegment) {\n            ColumnAssert.assertIs(assertContext,\n                    (ColumnSegment) actual, expected.getColumn());\n        } else if (actual instanceof LiteralExpressionSegment) {\n            assertLiteralExpression(assertContext,\n                    (LiteralExpressionSegment) actual, expected.getLiteralExpression());\n        } else if (actual instanceof ParameterMarkerExpressionSegment) {\n            assertParameterMarkerExpression(assertContext,\n                    (ParameterMarkerExpressionSegment) actual, expected.getParameterMarkerExpression());\n        } else if (actual instanceof ExistsSubqueryExpression) {\n            assertExistsSubqueryExpression(assertContext,\n                    (ExistsSubqueryExpression) actual, expected.getExistsSubquery());\n        } else if (actual instanceof CommonExpressionSegment) {\n            assertCommonExpression(assertContext,\n                    (ComplexExpressionSegment) actual, expected.getCommonExpression());\n        } else if (actual instanceof InExpression) {\n            assertInExpression(assertContext,\n                    (InExpression) actual, expected.getInExpression());\n        } else if (actual instanceof NotExpression) {\n            assertNotExpression(assertContext,\n                    (NotExpression) actual, expected.getNotExpression());\n        } else if (actual instanceof ListExpression) {\n            assertListExpression(assertContext,\n                    (ListExpression) actual, expected.getListExpression());\n        } else if (actual instanceof BetweenExpression) {\n            assertBetweenExpression(assertContext,\n                    (BetweenExpression) actual, expected.getBetweenExpression());\n        } else if (actual instanceof ExpressionProjectionSegment) {\n            ProjectionAssert.assertProjection(assertContext,\n                    (ExpressionProjectionSegment) actual, expected.getExpressionProjection());\n        } else {\n            throw new UnsupportedOperationException(\n                    String.format(\"Unsupported expression  : %s.\", actual.getClass().getName()));\n        }\n    }\n","date":"2021-07-01 17:47:55","endLine":335,"groupId":"8802","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExpression","params":"(finalSQLCaseAssertContextassertContext@finalExpressionSegmentactual@finalExpectedExpressionexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/95/0558c8f14b91bf10abdc74742f2f16f44400e0.src","preCode":"    public static void assertExpression(final SQLCaseAssertContext assertContext,\n                                        final ExpressionSegment actual, final ExpectedExpression expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual expression should not exist.\"), actual);\n            return;\n        }\n        assertNotNull(assertContext.getText(\"Actual expression should exist.\"), actual);\n        if (actual instanceof BinaryOperationExpression) {\n            assertBinaryOperationExpression(assertContext,\n                    (BinaryOperationExpression) actual, expected.getBinaryOperationExpression());\n        } else if (actual instanceof SubqueryExpressionSegment) {\n            assertSubqueryExpression(assertContext,\n                    (SubqueryExpressionSegment) actual, expected.getSubquery());\n        } else if (actual instanceof ColumnSegment) {\n            ColumnAssert.assertIs(assertContext,\n                    (ColumnSegment) actual, expected.getColumn());\n        } else if (actual instanceof LiteralExpressionSegment) {\n            assertLiteralExpression(assertContext,\n                    (LiteralExpressionSegment) actual, expected.getLiteralExpression());\n        } else if (actual instanceof ParameterMarkerExpressionSegment) {\n            assertParameterMarkerExpression(assertContext,\n                    (ParameterMarkerExpressionSegment) actual, expected.getParameterMarkerExpression());\n        } else if (actual instanceof ExistsSubqueryExpression) {\n            assertExistsSubqueryExpression(assertContext,\n                    (ExistsSubqueryExpression) actual, expected.getExistsSubquery());\n        } else if (actual instanceof CommonExpressionSegment) {\n            assertCommonExpression(assertContext,\n                    (ComplexExpressionSegment) actual, expected.getCommonExpression());\n        } else if (actual instanceof InExpression) {\n            assertInExpression(assertContext,\n                    (InExpression) actual, expected.getInExpression());\n        } else if (actual instanceof NotExpression) {\n            assertNotExpression(assertContext,\n                    (NotExpression) actual, expected.getNotExpression());\n        } else if (actual instanceof ListExpression) {\n            assertListExpression(assertContext,\n                    (ListExpression) actual, expected.getListExpression());\n        } else if (actual instanceof BetweenExpression) {\n            assertBetweenExpression(assertContext,\n                    (BetweenExpression) actual, expected.getBetweenExpression());\n        } else if (actual instanceof ExpressionProjectionSegment) {\n            ProjectionAssert.assertProjection(assertContext,\n                    (ExpressionProjectionSegment) actual, expected.getExpressionProjection());\n        } else {\n            throw new UnsupportedOperationException(\n                    String.format(\"Unsupported expression  : %s.\", actual.getClass().getName()));\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/expression/ExpressionAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"B"},{"authorDate":"2021-07-01 17:47:55","commitOrder":1,"curCode":"    private static void assertParameter(final SQLCaseAssertContext assertContext, final ExpressionSegment actual, final ExpectedCallParameter expected) {\n        if (actual instanceof ParameterMarkerExpressionSegment) {\n            ExpressionAssert.assertParameterMarkerExpression(assertContext, (ParameterMarkerExpressionSegment) actual, expected.getParameterMarkerExpression());\n        } else if (actual instanceof LiteralExpressionSegment) {\n            ExpressionAssert.assertLiteralExpression(assertContext, (LiteralExpressionSegment) actual, expected.getLiteralExpression());\n        } else if (actual instanceof CommonExpressionSegment) {\n            ExpressionAssert.assertCommonExpression(assertContext, (CommonExpressionSegment) actual, expected.getCommonExpression());\n        }\n    }\n","date":"2021-07-01 17:47:55","endLine":76,"groupId":"8802","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"assertParameter","params":"(finalSQLCaseAssertContextassertContext@finalExpressionSegmentactual@finalExpectedCallParameterexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/da/76d797c7899422df2e8fa32035ea7a5f2ec41c.src","preCode":"    private static void assertParameter(final SQLCaseAssertContext assertContext, final ExpressionSegment actual, final ExpectedCallParameter expected) {\n        if (actual instanceof ParameterMarkerExpressionSegment) {\n            ExpressionAssert.assertParameterMarkerExpression(assertContext, (ParameterMarkerExpressionSegment) actual, expected.getParameterMarkerExpression());\n        } else if (actual instanceof LiteralExpressionSegment) {\n            ExpressionAssert.assertLiteralExpression(assertContext, (LiteralExpressionSegment) actual, expected.getLiteralExpression());\n        } else if (actual instanceof CommonExpressionSegment) {\n            ExpressionAssert.assertCommonExpression(assertContext, (CommonExpressionSegment) actual, expected.getCommonExpression());\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/dml/impl/CallStatementAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"}],"commitId":"71c18596a4427b83e98bd0cb6b32319e297d1373","commitMessage":"@@@add new parser test module (#11083)\n\n","date":"2021-07-01 17:47:55","modifiedFileCount":"0","status":"B","submitter":"totalo"},{"authorTime":"2021-07-01 17:47:55","codes":[{"authorDate":"2021-07-22 10:02:57","commitOrder":2,"curCode":"    public static void assertExpression(final SQLCaseAssertContext assertContext,\n                                        final ExpressionSegment actual, final ExpectedExpression expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual expression should not exist.\"), actual);\n            return;\n        }\n        assertNotNull(assertContext.getText(\"Actual expression should exist.\"), actual);\n        if (actual instanceof BinaryOperationExpression) {\n            assertBinaryOperationExpression(assertContext,\n                    (BinaryOperationExpression) actual, expected.getBinaryOperationExpression());\n        } else if (actual instanceof SubqueryExpressionSegment) {\n            assertSubqueryExpression(assertContext,\n                    (SubqueryExpressionSegment) actual, expected.getSubquery());\n        } else if (actual instanceof ColumnSegment) {\n            ColumnAssert.assertIs(assertContext,\n                    (ColumnSegment) actual, expected.getColumn());\n        } else if (actual instanceof LiteralExpressionSegment) {\n            assertLiteralExpression(assertContext,\n                    (LiteralExpressionSegment) actual, expected.getLiteralExpression());\n        } else if (actual instanceof ParameterMarkerExpressionSegment) {\n            assertParameterMarkerExpression(assertContext,\n                    (ParameterMarkerExpressionSegment) actual, expected.getParameterMarkerExpression());\n        } else if (actual instanceof ExistsSubqueryExpression) {\n            assertExistsSubqueryExpression(assertContext,\n                    (ExistsSubqueryExpression) actual, expected.getExistsSubquery());\n        } else if (actual instanceof CommonExpressionSegment) {\n            assertCommonExpression(assertContext,\n                    (ComplexExpressionSegment) actual, expected.getCommonExpression());\n        } else if (actual instanceof InExpression) {\n            assertInExpression(assertContext,\n                    (InExpression) actual, expected.getInExpression());\n        } else if (actual instanceof NotExpression) {\n            assertNotExpression(assertContext,\n                    (NotExpression) actual, expected.getNotExpression());\n        } else if (actual instanceof ListExpression) {\n            assertListExpression(assertContext,\n                    (ListExpression) actual, expected.getListExpression());\n        } else if (actual instanceof BetweenExpression) {\n            assertBetweenExpression(assertContext,\n                    (BetweenExpression) actual, expected.getBetweenExpression());\n        } else if (actual instanceof ExpressionProjectionSegment) {\n            ProjectionAssert.assertProjection(assertContext,\n                    (ExpressionProjectionSegment) actual, expected.getExpressionProjection());\n        } else if (actual instanceof AggregationProjectionSegment) {\n            ProjectionAssert.assertProjection(assertContext,\n                    (AggregationProjectionSegment) actual, expected.getAggregationProjection());\n        } else {\n            throw new UnsupportedOperationException(\n                    String.format(\"Unsupported expression  : %s.\", actual.getClass().getName()));\n        }\n    }\n","date":"2021-07-22 10:02:57","endLine":339,"groupId":"102057","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExpression","params":"(finalSQLCaseAssertContextassertContext@finalExpressionSegmentactual@finalExpectedExpressionexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b9/8ee86fc36d9ec545d375a418617c447b8d55a0.src","preCode":"    public static void assertExpression(final SQLCaseAssertContext assertContext,\n                                        final ExpressionSegment actual, final ExpectedExpression expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual expression should not exist.\"), actual);\n            return;\n        }\n        assertNotNull(assertContext.getText(\"Actual expression should exist.\"), actual);\n        if (actual instanceof BinaryOperationExpression) {\n            assertBinaryOperationExpression(assertContext,\n                    (BinaryOperationExpression) actual, expected.getBinaryOperationExpression());\n        } else if (actual instanceof SubqueryExpressionSegment) {\n            assertSubqueryExpression(assertContext,\n                    (SubqueryExpressionSegment) actual, expected.getSubquery());\n        } else if (actual instanceof ColumnSegment) {\n            ColumnAssert.assertIs(assertContext,\n                    (ColumnSegment) actual, expected.getColumn());\n        } else if (actual instanceof LiteralExpressionSegment) {\n            assertLiteralExpression(assertContext,\n                    (LiteralExpressionSegment) actual, expected.getLiteralExpression());\n        } else if (actual instanceof ParameterMarkerExpressionSegment) {\n            assertParameterMarkerExpression(assertContext,\n                    (ParameterMarkerExpressionSegment) actual, expected.getParameterMarkerExpression());\n        } else if (actual instanceof ExistsSubqueryExpression) {\n            assertExistsSubqueryExpression(assertContext,\n                    (ExistsSubqueryExpression) actual, expected.getExistsSubquery());\n        } else if (actual instanceof CommonExpressionSegment) {\n            assertCommonExpression(assertContext,\n                    (ComplexExpressionSegment) actual, expected.getCommonExpression());\n        } else if (actual instanceof InExpression) {\n            assertInExpression(assertContext,\n                    (InExpression) actual, expected.getInExpression());\n        } else if (actual instanceof NotExpression) {\n            assertNotExpression(assertContext,\n                    (NotExpression) actual, expected.getNotExpression());\n        } else if (actual instanceof ListExpression) {\n            assertListExpression(assertContext,\n                    (ListExpression) actual, expected.getListExpression());\n        } else if (actual instanceof BetweenExpression) {\n            assertBetweenExpression(assertContext,\n                    (BetweenExpression) actual, expected.getBetweenExpression());\n        } else if (actual instanceof ExpressionProjectionSegment) {\n            ProjectionAssert.assertProjection(assertContext,\n                    (ExpressionProjectionSegment) actual, expected.getExpressionProjection());\n        } else {\n            throw new UnsupportedOperationException(\n                    String.format(\"Unsupported expression  : %s.\", actual.getClass().getName()));\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/expression/ExpressionAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"},{"authorDate":"2021-07-01 17:47:55","commitOrder":2,"curCode":"    private static void assertParameter(final SQLCaseAssertContext assertContext, final ExpressionSegment actual, final ExpectedCallParameter expected) {\n        if (actual instanceof ParameterMarkerExpressionSegment) {\n            ExpressionAssert.assertParameterMarkerExpression(assertContext, (ParameterMarkerExpressionSegment) actual, expected.getParameterMarkerExpression());\n        } else if (actual instanceof LiteralExpressionSegment) {\n            ExpressionAssert.assertLiteralExpression(assertContext, (LiteralExpressionSegment) actual, expected.getLiteralExpression());\n        } else if (actual instanceof CommonExpressionSegment) {\n            ExpressionAssert.assertCommonExpression(assertContext, (CommonExpressionSegment) actual, expected.getCommonExpression());\n        }\n    }\n","date":"2021-07-01 17:47:55","endLine":76,"groupId":"102057","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertParameter","params":"(finalSQLCaseAssertContextassertContext@finalExpressionSegmentactual@finalExpectedCallParameterexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/da/76d797c7899422df2e8fa32035ea7a5f2ec41c.src","preCode":"    private static void assertParameter(final SQLCaseAssertContext assertContext, final ExpressionSegment actual, final ExpectedCallParameter expected) {\n        if (actual instanceof ParameterMarkerExpressionSegment) {\n            ExpressionAssert.assertParameterMarkerExpression(assertContext, (ParameterMarkerExpressionSegment) actual, expected.getParameterMarkerExpression());\n        } else if (actual instanceof LiteralExpressionSegment) {\n            ExpressionAssert.assertLiteralExpression(assertContext, (LiteralExpressionSegment) actual, expected.getLiteralExpression());\n        } else if (actual instanceof CommonExpressionSegment) {\n            ExpressionAssert.assertCommonExpression(assertContext, (CommonExpressionSegment) actual, expected.getCommonExpression());\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/dml/impl/CallStatementAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"}],"commitId":"ea419c00d1fb9ddf8568f1c0f13d05e9de4af00d","commitMessage":"@@@Proofread Oracle SELECT Hierarchical Query and GroupBy Clause (#11259)\n\n* proofread oracle groupby clause\n\n* add groupby testcase.  add constructors for OrderByItemSegment implementations\n\n* add hierarchical query.  having clause.  assert aggregation projection in expression assert\n\n* modify expressionList rule\n\n* Remove newly added constructors which do not hace OrderDirection","date":"2021-07-22 10:02:57","modifiedFileCount":"3","status":"M","submitter":"Thanoshan MV"}]
