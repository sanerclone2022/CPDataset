[{"authorTime":"2021-08-20 15:52:50","codes":[{"authorDate":"2021-08-20 15:52:50","commitOrder":3,"curCode":"    private void refreshTableWithRule(final CreateTableStatement createTableStatement) throws SQLException {\n        createTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        TableContainedRule rule = mock(TableContainedRule.class);\n        when(materials.getRules()).thenReturn(Collections.singletonList(rule));\n        FederateRefresher<CreateTableStatement> federateRefresher = new CreateTableStatementFederateRefresher();\n        FederateSchemaMetadata schema = buildSchema();\n        federateRefresher.refresh(schema, Collections.singletonList(\"ds\"), createTableStatement, materials);\n        assertTrue(schema.getTables().containsKey(\"t_order\"));\n        assertFalse(schema.getTables().get(\"t_order\").getColumnNames().contains(\"order_id\"));\n    }\n","date":"2021-08-20 15:52:50","endLine":91,"groupId":"6830","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"refreshTableWithRule","params":"(finalCreateTableStatementcreateTableStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e6/ed0e3f222b5ae8c16abec281010bc8e0749f88.src","preCode":"    private void refreshTableWithRule(final CreateTableStatement createTableStatement) throws SQLException {\n        createTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        TableContainedRule rule = mock(TableContainedRule.class);\n        when(materials.getRules()).thenReturn(Collections.singletonList(rule));\n        FederateRefresher<CreateTableStatement> federateRefresher = new CreateTableStatementFederateRefresher();\n        FederateSchemaMetadata schema = buildSchema();\n        federateRefresher.refresh(schema, Collections.singletonList(\"ds\"), createTableStatement, materials);\n        assertTrue(schema.getTables().containsKey(\"t_order\"));\n        assertFalse(schema.getTables().get(\"t_order\").getColumnNames().contains(\"order_id\"));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-optimize/src/test/java/org/apache/shardingsphere/infra/optimize/core/metadata/refresher/CreateTableStatementFederateRefresherTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"MB"},{"authorDate":"2021-08-20 15:52:50","commitOrder":3,"curCode":"    private void refreshTable(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        TableContainedRule rule = mock(TableContainedRule.class);\n        when(materials.getRules()).thenReturn(Collections.singletonList(rule));\n        FederateRefresher<AlterTableStatement> federateRefresher = new AlterTableStatementFederateRefresher();\n        FederateSchemaMetadata schema = buildSchema();\n        federateRefresher.refresh(schema, Collections.singletonList(\"ds\"), alterTableStatement, materials);\n        assertTrue(schema.getTables().containsKey(\"t_order\"));\n    }\n","date":"2021-08-20 15:52:50","endLine":74,"groupId":"6830","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"refreshTable","params":"(finalAlterTableStatementalterTableStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ca/46fce00e7d362bb957945290b0dc4ee11e7327.src","preCode":"    private void refreshTable(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        TableContainedRule rule = mock(TableContainedRule.class);\n        when(materials.getRules()).thenReturn(Collections.singletonList(rule));\n        FederateRefresher<AlterTableStatement> federateRefresher = new AlterTableStatementFederateRefresher();\n        FederateSchemaMetadata schema = buildSchema();\n        federateRefresher.refresh(schema, Collections.singletonList(\"ds\"), alterTableStatement, materials);\n        assertTrue(schema.getTables().containsKey(\"t_order\"));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-optimize/src/test/java/org/apache/shardingsphere/infra/optimize/core/metadata/refresher/AlterTableStatementFederateRefresherTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"}],"commitId":"632b7c777ea43f7de3dfd2f13bc866814b882eaa","commitMessage":"@@@Refactor single table meta data load (#11895)\n\n","date":"2021-08-20 15:52:50","modifiedFileCount":"31","status":"M","submitter":"tuichenchuxin"},{"authorTime":"2021-08-20 15:52:50","codes":[{"authorDate":"2021-09-02 17:34:21","commitOrder":4,"curCode":"    private void refreshTableWithRule(final CreateTableStatement createTableStatement) throws SQLException {\n        createTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        TableContainedRule rule = mock(TableContainedRule.class);\n        when(materials.getRules()).thenReturn(Collections.singletonList(rule));\n        FederateRefresher<CreateTableStatement> federateRefresher = new CreateTableStatementFederateRefresher();\n        FederateSchemaMetadata schema = buildSchema();\n        federateRefresher.refresh(schema, Collections.singletonList(\"ds\"), createTableStatement, materials);\n        assertTrue(schema.getTables().containsKey(\"t_order\"));\n        assertTrue(schema.getTables().get(\"t_order\").getColumnNames().contains(\"order_id\"));\n    }\n","date":"2021-09-02 17:34:21","endLine":90,"groupId":"101803","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"refreshTableWithRule","params":"(finalCreateTableStatementcreateTableStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2b/62352ffe6df2fd5df079132c3a58b908d76ea4.src","preCode":"    private void refreshTableWithRule(final CreateTableStatement createTableStatement) throws SQLException {\n        createTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        TableContainedRule rule = mock(TableContainedRule.class);\n        when(materials.getRules()).thenReturn(Collections.singletonList(rule));\n        FederateRefresher<CreateTableStatement> federateRefresher = new CreateTableStatementFederateRefresher();\n        FederateSchemaMetadata schema = buildSchema();\n        federateRefresher.refresh(schema, Collections.singletonList(\"ds\"), createTableStatement, materials);\n        assertTrue(schema.getTables().containsKey(\"t_order\"));\n        assertFalse(schema.getTables().get(\"t_order\").getColumnNames().contains(\"order_id\"));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-optimize/src/test/java/org/apache/shardingsphere/infra/optimize/core/metadata/refresher/CreateTableStatementFederateRefresherTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2021-08-20 15:52:50","commitOrder":4,"curCode":"    private void refreshTable(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        TableContainedRule rule = mock(TableContainedRule.class);\n        when(materials.getRules()).thenReturn(Collections.singletonList(rule));\n        FederateRefresher<AlterTableStatement> federateRefresher = new AlterTableStatementFederateRefresher();\n        FederateSchemaMetadata schema = buildSchema();\n        federateRefresher.refresh(schema, Collections.singletonList(\"ds\"), alterTableStatement, materials);\n        assertTrue(schema.getTables().containsKey(\"t_order\"));\n    }\n","date":"2021-08-20 15:52:50","endLine":74,"groupId":"101803","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"refreshTable","params":"(finalAlterTableStatementalterTableStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ca/46fce00e7d362bb957945290b0dc4ee11e7327.src","preCode":"    private void refreshTable(final AlterTableStatement alterTableStatement) throws SQLException {\n        alterTableStatement.setTable(new SimpleTableSegment(new TableNameSegment(1, 3, new IdentifierValue(\"t_order\"))));\n        TableContainedRule rule = mock(TableContainedRule.class);\n        when(materials.getRules()).thenReturn(Collections.singletonList(rule));\n        FederateRefresher<AlterTableStatement> federateRefresher = new AlterTableStatementFederateRefresher();\n        FederateSchemaMetadata schema = buildSchema();\n        federateRefresher.refresh(schema, Collections.singletonList(\"ds\"), alterTableStatement, materials);\n        assertTrue(schema.getTables().containsKey(\"t_order\"));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-optimize/src/test/java/org/apache/shardingsphere/infra/optimize/core/metadata/refresher/AlterTableStatementFederateRefresherTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"1301a41807eda152b17ef78fe084bc2d4e9d368e","commitMessage":"@@@fix calcite exception when user execute sql with lowercase (#12125)\n\n* fix calcite execute error with oracle statement\n\n* add test case\n\n* modify map to case insensitive\n\n* fix test case\n\n* add test case for federate refresh test\n\n* optimize code\n\n* optimize code\n\n* optimize test case\n\n* optimize test case\n\n* optimize federate logic\n\n* optimize code","date":"2021-09-02 17:34:21","modifiedFileCount":"18","status":"M","submitter":"Zhengqiang Duan"}]
