[{"authorTime":"2020-10-22 16:47:44","codes":[{"authorDate":"2020-10-22 16:47:44","commitOrder":1,"curCode":"    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n        PostgreSQLAlterTableStatement result = new PostgreSQLAlterTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableNameClause().tableName()));\n        if (null != ctx.alterDefinitionClause()) {\n            for (AlterDefinitionSegment each : ((CollectionValue<AlterDefinitionSegment>) visit(ctx.alterDefinitionClause())).getValue()) {\n                if (each instanceof AddColumnDefinitionSegment) {\n                    result.getAddColumnDefinitions().add((AddColumnDefinitionSegment) each);\n                } else if (each instanceof ModifyColumnDefinitionSegment) {\n                    result.getModifyColumnDefinitions().add((ModifyColumnDefinitionSegment) each);\n                } else if (each instanceof DropColumnDefinitionSegment) {\n                    result.getDropColumnDefinitions().add((DropColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getAddConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":150,"groupId":"10642","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"visitAlterTable","params":"(finalAlterTableContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fd/54293d12a8d03552cd285a0c05745abb148348.src","preCode":"    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n        PostgreSQLAlterTableStatement result = new PostgreSQLAlterTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableNameClause().tableName()));\n        if (null != ctx.alterDefinitionClause()) {\n            for (AlterDefinitionSegment each : ((CollectionValue<AlterDefinitionSegment>) visit(ctx.alterDefinitionClause())).getValue()) {\n                if (each instanceof AddColumnDefinitionSegment) {\n                    result.getAddColumnDefinitions().add((AddColumnDefinitionSegment) each);\n                } else if (each instanceof ModifyColumnDefinitionSegment) {\n                    result.getModifyColumnDefinitions().add((ModifyColumnDefinitionSegment) each);\n                } else if (each instanceof DropColumnDefinitionSegment) {\n                    result.getDropColumnDefinitions().add((DropColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getAddConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/java/org/apache/shardingsphere/sql/parser/postgresql/visitor/statement/impl/PostgreSQLDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"B"},{"authorDate":"2020-10-22 16:47:44","commitOrder":1,"curCode":"    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n        SQL92CreateTableStatement result = new SQL92CreateTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableName()));\n        if (null != ctx.createDefinitionClause()) {\n            CollectionValue<CreateDefinitionSegment> createDefinitions = (CollectionValue<CreateDefinitionSegment>) visit(ctx.createDefinitionClause());\n            for (CreateDefinitionSegment each : createDefinitions.getValue()) {\n                if (each instanceof ColumnDefinitionSegment) {\n                    result.getColumnDefinitions().add((ColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":74,"groupId":"10641","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCreateTable","params":"(finalCreateTableContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1b/c194ae78bfc1366f7e8af008b3f74d41fbcba1.src","preCode":"    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n        SQL92CreateTableStatement result = new SQL92CreateTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableName()));\n        if (null != ctx.createDefinitionClause()) {\n            CollectionValue<CreateDefinitionSegment> createDefinitions = (CollectionValue<CreateDefinitionSegment>) visit(ctx.createDefinitionClause());\n            for (CreateDefinitionSegment each : createDefinitions.getValue()) {\n                if (each instanceof ColumnDefinitionSegment) {\n                    result.getColumnDefinitions().add((ColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sql92/src/main/java/org/apache/shardingsphere/sql/parser/sql92/visitor/statement/impl/SQL92DDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"}],"commitId":"dca1684798205a6efd0d94b91aa1d3f86c8baefb","commitMessage":"@@@Add Statement SQL SQLVisitor (#7885)\n\n","date":"2020-10-22 16:47:44","modifiedFileCount":"7","status":"B","submitter":"Juan Pan(Trista)"},{"authorTime":"2020-10-22 16:47:44","codes":[{"authorDate":"2021-05-26 15:53:47","commitOrder":2,"curCode":"    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n        PostgreSQLAlterTableStatement result = new PostgreSQLAlterTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableNameClause().tableName()));\n        if (null != ctx.alterDefinitionClause()) {\n            for (AlterDefinitionSegment each : ((CollectionValue<AlterDefinitionSegment>) visit(ctx.alterDefinitionClause())).getValue()) {\n                if (each instanceof AddColumnDefinitionSegment) {\n                    result.getAddColumnDefinitions().add((AddColumnDefinitionSegment) each);\n                } else if (each instanceof ModifyColumnDefinitionSegment) {\n                    result.getModifyColumnDefinitions().add((ModifyColumnDefinitionSegment) each);\n                } else if (each instanceof DropColumnDefinitionSegment) {\n                    result.getDropColumnDefinitions().add((DropColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getAddConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n            if (null != ctx.alterDefinitionClause().renameTableSpecification()) {\n                IdentifierContext identifier = ctx.alterDefinitionClause().renameTableSpecification().identifier();\n                result.setRenameTable(new SimpleTableSegment(identifier.start.getStartIndex(), identifier.stop.getStopIndex(), (IdentifierValue) visit(identifier)));\n            }\n        }\n        return result;\n    }\n","date":"2021-05-26 15:53:47","endLine":176,"groupId":"10642","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"visitAlterTable","params":"(finalAlterTableContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/29/8f0cf0103e1ab6220e9ed548ab7ed6734d5c69.src","preCode":"    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n        PostgreSQLAlterTableStatement result = new PostgreSQLAlterTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableNameClause().tableName()));\n        if (null != ctx.alterDefinitionClause()) {\n            for (AlterDefinitionSegment each : ((CollectionValue<AlterDefinitionSegment>) visit(ctx.alterDefinitionClause())).getValue()) {\n                if (each instanceof AddColumnDefinitionSegment) {\n                    result.getAddColumnDefinitions().add((AddColumnDefinitionSegment) each);\n                } else if (each instanceof ModifyColumnDefinitionSegment) {\n                    result.getModifyColumnDefinitions().add((ModifyColumnDefinitionSegment) each);\n                } else if (each instanceof DropColumnDefinitionSegment) {\n                    result.getDropColumnDefinitions().add((DropColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getAddConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/java/org/apache/shardingsphere/sql/parser/postgresql/visitor/statement/impl/PostgreSQLDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"},{"authorDate":"2020-10-22 16:47:44","commitOrder":2,"curCode":"    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n        SQL92CreateTableStatement result = new SQL92CreateTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableName()));\n        if (null != ctx.createDefinitionClause()) {\n            CollectionValue<CreateDefinitionSegment> createDefinitions = (CollectionValue<CreateDefinitionSegment>) visit(ctx.createDefinitionClause());\n            for (CreateDefinitionSegment each : createDefinitions.getValue()) {\n                if (each instanceof ColumnDefinitionSegment) {\n                    result.getColumnDefinitions().add((ColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":74,"groupId":"10641","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCreateTable","params":"(finalCreateTableContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1b/c194ae78bfc1366f7e8af008b3f74d41fbcba1.src","preCode":"    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n        SQL92CreateTableStatement result = new SQL92CreateTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableName()));\n        if (null != ctx.createDefinitionClause()) {\n            CollectionValue<CreateDefinitionSegment> createDefinitions = (CollectionValue<CreateDefinitionSegment>) visit(ctx.createDefinitionClause());\n            for (CreateDefinitionSegment each : createDefinitions.getValue()) {\n                if (each instanceof ColumnDefinitionSegment) {\n                    result.getColumnDefinitions().add((ColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sql92/src/main/java/org/apache/shardingsphere/sql/parser/sql92/visitor/statement/impl/SQL92DDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"}],"commitId":"e527a88d21eb2fd83c985802ff12987a08bc54b1","commitMessage":"@@@support postgresql alter table rename statement (#10462)\n\n* support postgresql alter table rename statement\n\n* fix checkstyle\n\n* modify alter table pre validate logic\n\n* fix checkstyle\n\n* extract getRenameTable method","date":"2021-05-26 15:53:47","modifiedFileCount":"8","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2020-10-22 16:47:44","codes":[{"authorDate":"2021-05-26 17:06:00","commitOrder":3,"curCode":"    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n        PostgreSQLAlterTableStatement result = new PostgreSQLAlterTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableNameClause().tableName()));\n        if (null != ctx.alterDefinitionClause()) {\n            for (AlterDefinitionSegment each : ((CollectionValue<AlterDefinitionSegment>) visit(ctx.alterDefinitionClause())).getValue()) {\n                if (each instanceof AddColumnDefinitionSegment) {\n                    result.getAddColumnDefinitions().add((AddColumnDefinitionSegment) each);\n                } else if (each instanceof ModifyColumnDefinitionSegment) {\n                    result.getModifyColumnDefinitions().add((ModifyColumnDefinitionSegment) each);\n                } else if (each instanceof DropColumnDefinitionSegment) {\n                    result.getDropColumnDefinitions().add((DropColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getAddConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                } else if (each instanceof RenameTableDefinitionSegment) {\n                    result.setRenameTable(((RenameTableDefinitionSegment) each).getRenameTable());\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-05-26 17:06:00","endLine":175,"groupId":"10642","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"visitAlterTable","params":"(finalAlterTableContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/57/711335563f4ad9bf3c4fb9b35e8e33740ba9bc.src","preCode":"    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n        PostgreSQLAlterTableStatement result = new PostgreSQLAlterTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableNameClause().tableName()));\n        if (null != ctx.alterDefinitionClause()) {\n            for (AlterDefinitionSegment each : ((CollectionValue<AlterDefinitionSegment>) visit(ctx.alterDefinitionClause())).getValue()) {\n                if (each instanceof AddColumnDefinitionSegment) {\n                    result.getAddColumnDefinitions().add((AddColumnDefinitionSegment) each);\n                } else if (each instanceof ModifyColumnDefinitionSegment) {\n                    result.getModifyColumnDefinitions().add((ModifyColumnDefinitionSegment) each);\n                } else if (each instanceof DropColumnDefinitionSegment) {\n                    result.getDropColumnDefinitions().add((DropColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getAddConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n            if (null != ctx.alterDefinitionClause().renameTableSpecification()) {\n                IdentifierContext identifier = ctx.alterDefinitionClause().renameTableSpecification().identifier();\n                result.setRenameTable(new SimpleTableSegment(identifier.start.getStartIndex(), identifier.stop.getStopIndex(), (IdentifierValue) visit(identifier)));\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/java/org/apache/shardingsphere/sql/parser/postgresql/visitor/statement/impl/PostgreSQLDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2020-10-22 16:47:44","commitOrder":3,"curCode":"    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n        SQL92CreateTableStatement result = new SQL92CreateTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableName()));\n        if (null != ctx.createDefinitionClause()) {\n            CollectionValue<CreateDefinitionSegment> createDefinitions = (CollectionValue<CreateDefinitionSegment>) visit(ctx.createDefinitionClause());\n            for (CreateDefinitionSegment each : createDefinitions.getValue()) {\n                if (each instanceof ColumnDefinitionSegment) {\n                    result.getColumnDefinitions().add((ColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":74,"groupId":"10641","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCreateTable","params":"(finalCreateTableContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1b/c194ae78bfc1366f7e8af008b3f74d41fbcba1.src","preCode":"    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n        SQL92CreateTableStatement result = new SQL92CreateTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableName()));\n        if (null != ctx.createDefinitionClause()) {\n            CollectionValue<CreateDefinitionSegment> createDefinitions = (CollectionValue<CreateDefinitionSegment>) visit(ctx.createDefinitionClause());\n            for (CreateDefinitionSegment each : createDefinitions.getValue()) {\n                if (each instanceof ColumnDefinitionSegment) {\n                    result.getColumnDefinitions().add((ColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sql92/src/main/java/org/apache/shardingsphere/sql/parser/sql92/visitor/statement/impl/SQL92DDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"}],"commitId":"77debda907c71834b632c7d0ce08b397235bf581","commitMessage":"@@@support mysql alter rename statement (#10487)\n\n* create RenameTableDefinitionSegment to support mysql alter table rename\n\n* add parse test case\n\n* fix test case error","date":"2021-05-26 17:06:00","modifiedFileCount":"4","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2020-10-22 16:47:44","codes":[{"authorDate":"2021-06-01 22:50:29","commitOrder":4,"curCode":"    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n        PostgreSQLAlterTableStatement result = new PostgreSQLAlterTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableNameClause().tableName()));\n        if (null != ctx.alterDefinitionClause()) {\n            for (AlterDefinitionSegment each : ((CollectionValue<AlterDefinitionSegment>) visit(ctx.alterDefinitionClause())).getValue()) {\n                if (each instanceof AddColumnDefinitionSegment) {\n                    result.getAddColumnDefinitions().add((AddColumnDefinitionSegment) each);\n                } else if (each instanceof ModifyColumnDefinitionSegment) {\n                    result.getModifyColumnDefinitions().add((ModifyColumnDefinitionSegment) each);\n                } else if (each instanceof DropColumnDefinitionSegment) {\n                    result.getDropColumnDefinitions().add((DropColumnDefinitionSegment) each);\n                } else if (each instanceof AddConstraintDefinitionSegment) {\n                    result.getAddConstraintDefinitions().add((AddConstraintDefinitionSegment) each);\n                } else if (each instanceof ValidateConstraintDefinitionSegment) {\n                    result.getValidateConstraintDefinitions().add((ValidateConstraintDefinitionSegment) each);\n                } else if (each instanceof ModifyConstraintDefinitionSegment) {\n                    result.getModifyConstraintDefinitions().add((ModifyConstraintDefinitionSegment) each);\n                } else if (each instanceof DropConstraintDefinitionSegment) {\n                    result.getDropConstraintDefinitions().add((DropConstraintDefinitionSegment) each);\n                } else if (each instanceof RenameTableDefinitionSegment) {\n                    result.setRenameTable(((RenameTableDefinitionSegment) each).getRenameTable());\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-06-01 22:50:29","endLine":197,"groupId":"101658","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"visitAlterTable","params":"(finalAlterTableContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/81/c10b491eefd5b663b9266843a1d9fdf76ef1ab.src","preCode":"    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n        PostgreSQLAlterTableStatement result = new PostgreSQLAlterTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableNameClause().tableName()));\n        if (null != ctx.alterDefinitionClause()) {\n            for (AlterDefinitionSegment each : ((CollectionValue<AlterDefinitionSegment>) visit(ctx.alterDefinitionClause())).getValue()) {\n                if (each instanceof AddColumnDefinitionSegment) {\n                    result.getAddColumnDefinitions().add((AddColumnDefinitionSegment) each);\n                } else if (each instanceof ModifyColumnDefinitionSegment) {\n                    result.getModifyColumnDefinitions().add((ModifyColumnDefinitionSegment) each);\n                } else if (each instanceof DropColumnDefinitionSegment) {\n                    result.getDropColumnDefinitions().add((DropColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getAddConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                } else if (each instanceof RenameTableDefinitionSegment) {\n                    result.setRenameTable(((RenameTableDefinitionSegment) each).getRenameTable());\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/java/org/apache/shardingsphere/sql/parser/postgresql/visitor/statement/impl/PostgreSQLDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"},{"authorDate":"2020-10-22 16:47:44","commitOrder":4,"curCode":"    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n        SQL92CreateTableStatement result = new SQL92CreateTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableName()));\n        if (null != ctx.createDefinitionClause()) {\n            CollectionValue<CreateDefinitionSegment> createDefinitions = (CollectionValue<CreateDefinitionSegment>) visit(ctx.createDefinitionClause());\n            for (CreateDefinitionSegment each : createDefinitions.getValue()) {\n                if (each instanceof ColumnDefinitionSegment) {\n                    result.getColumnDefinitions().add((ColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":74,"groupId":"101658","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCreateTable","params":"(finalCreateTableContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1b/c194ae78bfc1366f7e8af008b3f74d41fbcba1.src","preCode":"    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n        SQL92CreateTableStatement result = new SQL92CreateTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableName()));\n        if (null != ctx.createDefinitionClause()) {\n            CollectionValue<CreateDefinitionSegment> createDefinitions = (CollectionValue<CreateDefinitionSegment>) visit(ctx.createDefinitionClause());\n            for (CreateDefinitionSegment each : createDefinitions.getValue()) {\n                if (each instanceof ColumnDefinitionSegment) {\n                    result.getColumnDefinitions().add((ColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sql92/src/main/java/org/apache/shardingsphere/sql/parser/sql92/visitor/statement/impl/SQL92DDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"}],"commitId":"916f1210727781ecea299ea506a03ab8e86c8959","commitMessage":"@@@Rewrite constraints' name in logic SQL (#10606)\n\n* Rewrite constraint name in alter table\n\n* Fix MySQL parser testcases\n\n* Fix MySQL SQL parser\n\n* Fix MySQL add constraint SQL parser\n\n* Fix rewrite testcases\n\n* Remove unused import\n\n* Fix SQLServer parse constraint name\n\n* Fix Oracle SQL parser\n\n* Avoid unnamed constraint cause NPE","date":"2021-06-01 22:50:29","modifiedFileCount":"18","status":"M","submitter":"???"}]
