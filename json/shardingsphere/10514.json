[{"authorTime":"2021-07-02 20:44:49","codes":[{"authorDate":"2021-07-02 20:44:49","commitOrder":2,"curCode":"    public void assertValidateInsertSelectWithKeyGenerateColumn() {\n        when(shardingRule.findGenerateKeyColumnName(\"user\")).thenReturn(Optional.of(\"id\"));\n        when(shardingRule.isGenerateKeyColumn(\"id\", \"user\")).thenReturn(true);\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertSelectStatement());\n        sqlStatementContext.getTablesContext().getTables().addAll(createSingleTablesContext().getTables());\n        new ShardingInsertStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","date":"2021-07-02 20:44:49","endLine":112,"groupId":"3474","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertValidateInsertSelectWithKeyGenerateColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fe/ff6d0a0ddfe4aedefe77ac2c87cdc85dcfed4d.src","preCode":"    public void assertValidateInsertSelectWithKeyGenerateColumn() {\n        when(shardingRule.findGenerateKeyColumnName(\"user\")).thenReturn(Optional.of(\"id\"));\n        when(shardingRule.isGenerateKeyColumn(\"id\", \"user\")).thenReturn(true);\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertSelectStatement());\n        sqlStatementContext.getTablesContext().getTables().addAll(createSingleTablesContext().getTables());\n        new ShardingInsertStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingInsertStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"MB"},{"authorDate":"2021-07-02 20:44:49","commitOrder":2,"curCode":"    public void assertValidateInsertSelectWithBindingTables() {\n        when(shardingRule.findGenerateKeyColumnName(\"user\")).thenReturn(Optional.of(\"id\"));\n        when(shardingRule.isGenerateKeyColumn(\"id\", \"user\")).thenReturn(true);\n        TablesContext multiTablesContext = createMultiTablesContext();\n        when(shardingRule.isAllBindingTables(multiTablesContext.getTableNames())).thenReturn(true);\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertSelectStatement());\n        sqlStatementContext.getTablesContext().getTables().addAll(multiTablesContext.getTables());\n        new ShardingInsertStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","date":"2021-07-02 20:44:49","endLine":134,"groupId":"7989","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertValidateInsertSelectWithBindingTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fe/ff6d0a0ddfe4aedefe77ac2c87cdc85dcfed4d.src","preCode":"    public void assertValidateInsertSelectWithBindingTables() {\n        when(shardingRule.findGenerateKeyColumnName(\"user\")).thenReturn(Optional.of(\"id\"));\n        when(shardingRule.isGenerateKeyColumn(\"id\", \"user\")).thenReturn(true);\n        TablesContext multiTablesContext = createMultiTablesContext();\n        when(shardingRule.isAllBindingTables(multiTablesContext.getTableNames())).thenReturn(true);\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertSelectStatement());\n        sqlStatementContext.getTablesContext().getTables().addAll(multiTablesContext.getTables());\n        new ShardingInsertStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingInsertStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"MB"}],"commitId":"bfb784c9a0e47fd147c8a654c2f0b2a1e86c2c27","commitMessage":"@@@extract SchemaAvailable interface & add validate for SelectStatement (#11091)\n\n* refactor SchemaAvailable interface & add validate for SelectStatement\n\n* add final for InsertStatementContext field\n\n* fix test case error\n\n* fix rewrite test case error\n\n* refactor context new instance method\n\n* optimize test case\n\n* fix test case\n\n* optimize logic\n\n* fix test case\n\n* fix checkstyle","date":"2021-07-02 20:44:49","modifiedFileCount":"44","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-08-16 18:35:28","codes":[{"authorDate":"2021-08-16 18:35:28","commitOrder":3,"curCode":"    public void assertValidateInsertSelectWithKeyGenerateColumn() {\n        when(shardingRule.findGenerateKeyColumnName(\"user\")).thenReturn(Optional.of(\"id\"));\n        when(shardingRule.isGenerateKeyColumn(\"id\", \"user\")).thenReturn(true);\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertSelectStatement());\n        sqlStatementContext.getTablesContext().getTables().addAll(createSingleTablesContext().getTables());\n        new ShardingInsertStatementValidator(shardingConditions).preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","date":"2021-08-16 18:35:28","endLine":118,"groupId":"3474","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertValidateInsertSelectWithKeyGenerateColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/62/880ce2fde13f428dc5e9f608f7cd13ea8faa27.src","preCode":"    public void assertValidateInsertSelectWithKeyGenerateColumn() {\n        when(shardingRule.findGenerateKeyColumnName(\"user\")).thenReturn(Optional.of(\"id\"));\n        when(shardingRule.isGenerateKeyColumn(\"id\", \"user\")).thenReturn(true);\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertSelectStatement());\n        sqlStatementContext.getTablesContext().getTables().addAll(createSingleTablesContext().getTables());\n        new ShardingInsertStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingInsertStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2021-08-16 18:35:28","commitOrder":3,"curCode":"    public void assertValidateInsertSelectWithBindingTables() {\n        when(shardingRule.findGenerateKeyColumnName(\"user\")).thenReturn(Optional.of(\"id\"));\n        when(shardingRule.isGenerateKeyColumn(\"id\", \"user\")).thenReturn(true);\n        TablesContext multiTablesContext = createMultiTablesContext();\n        when(shardingRule.isAllBindingTables(multiTablesContext.getTableNames())).thenReturn(true);\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertSelectStatement());\n        sqlStatementContext.getTablesContext().getTables().addAll(multiTablesContext.getTables());\n        new ShardingInsertStatementValidator(shardingConditions).preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","date":"2021-08-16 18:35:28","endLine":140,"groupId":"7989","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertValidateInsertSelectWithBindingTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/62/880ce2fde13f428dc5e9f608f7cd13ea8faa27.src","preCode":"    public void assertValidateInsertSelectWithBindingTables() {\n        when(shardingRule.findGenerateKeyColumnName(\"user\")).thenReturn(Optional.of(\"id\"));\n        when(shardingRule.isGenerateKeyColumn(\"id\", \"user\")).thenReturn(true);\n        TablesContext multiTablesContext = createMultiTablesContext();\n        when(shardingRule.isAllBindingTables(multiTablesContext.getTableNames())).thenReturn(true);\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertSelectStatement());\n        sqlStatementContext.getTablesContext().getTables().addAll(multiTablesContext.getTables());\n        new ShardingInsertStatementValidator().preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingInsertStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"618115e290001a48aabff2b02c4feb61b16fd0d0","commitMessage":"@@@Reduce the creation of sharding conditions (#11841)\n\n* Reduce the creation of sharding conditions\n\n* optimize code\n\n* optimize code\n\n* fix checkstyle\n\n* optimize code","date":"2021-08-16 18:35:28","modifiedFileCount":"9","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-08-23 16:05:44","codes":[{"authorDate":"2021-08-23 16:05:44","commitOrder":4,"curCode":"    public void assertValidateInsertSelectWithKeyGenerateColumn() {\n        when(shardingRule.findGenerateKeyColumnName(\"user\")).thenReturn(Optional.of(\"id\"));\n        when(shardingRule.isGenerateKeyColumn(\"id\", \"user\")).thenReturn(true);\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertSelectStatement());\n        sqlStatementContext.getTablesContext().getUniqueTables().putAll(createSingleTablesContext().getUniqueTables());\n        new ShardingInsertStatementValidator(shardingConditions).preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","date":"2021-08-23 16:05:44","endLine":118,"groupId":"10514","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertValidateInsertSelectWithKeyGenerateColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/86/604ee4f314243c647edc4ee4acd8e6c3940e0c.src","preCode":"    public void assertValidateInsertSelectWithKeyGenerateColumn() {\n        when(shardingRule.findGenerateKeyColumnName(\"user\")).thenReturn(Optional.of(\"id\"));\n        when(shardingRule.isGenerateKeyColumn(\"id\", \"user\")).thenReturn(true);\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertSelectStatement());\n        sqlStatementContext.getTablesContext().getTables().addAll(createSingleTablesContext().getTables());\n        new ShardingInsertStatementValidator(shardingConditions).preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingInsertStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2021-08-23 16:05:44","commitOrder":4,"curCode":"    public void assertValidateInsertSelectWithBindingTables() {\n        when(shardingRule.findGenerateKeyColumnName(\"user\")).thenReturn(Optional.of(\"id\"));\n        when(shardingRule.isGenerateKeyColumn(\"id\", \"user\")).thenReturn(true);\n        TablesContext multiTablesContext = createMultiTablesContext();\n        when(shardingRule.isAllBindingTables(multiTablesContext.getTableNames())).thenReturn(true);\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertSelectStatement());\n        sqlStatementContext.getTablesContext().getUniqueTables().putAll(multiTablesContext.getUniqueTables());\n        new ShardingInsertStatementValidator(shardingConditions).preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","date":"2021-08-23 16:05:44","endLine":140,"groupId":"10514","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertValidateInsertSelectWithBindingTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/86/604ee4f314243c647edc4ee4acd8e6c3940e0c.src","preCode":"    public void assertValidateInsertSelectWithBindingTables() {\n        when(shardingRule.findGenerateKeyColumnName(\"user\")).thenReturn(Optional.of(\"id\"));\n        when(shardingRule.isGenerateKeyColumn(\"id\", \"user\")).thenReturn(true);\n        TablesContext multiTablesContext = createMultiTablesContext();\n        when(shardingRule.isAllBindingTables(multiTablesContext.getTableNames())).thenReturn(true);\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertSelectStatement());\n        sqlStatementContext.getTablesContext().getTables().addAll(multiTablesContext.getTables());\n        new ShardingInsertStatementValidator(shardingConditions).preValidate(shardingRule, sqlStatementContext, Collections.emptyList(), mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingInsertStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"29b4fabfded8b6ca3e9df1dd8866c32393f2855d","commitMessage":"@@@optimize table context (#11949)\n\n","date":"2021-08-23 16:05:44","modifiedFileCount":"9","status":"M","submitter":"Zhengqiang Duan"}]
