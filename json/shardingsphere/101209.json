[{"authorTime":"2020-05-16 14:46:06","codes":[{"authorDate":"2020-08-24 21:04:02","commitOrder":2,"curCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        \n        PostgreSQLPacket actualMessage = mock(PostgreSQLPacket.class);\n        when(actualMessage.getMessageType()).thenReturn(PostgreSQLCommandPacketType.AUTHENTICATION_OK.getValue());\n        new PostgreSQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeByte(PostgreSQLCommandPacketType.AUTHENTICATION_OK.getValue());\n        verify(byteBuf).writeInt(50 + PostgreSQLPacket.PAYLOAD_LENGTH);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","date":"2020-08-24 21:04:02","endLine":95,"groupId":"7480","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertEncode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e7/8b10ed89549473252e0138aa3696fe0ca35e2c.src","preCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        \n        PostgreSQLPacket actualMessage = mock(PostgreSQLPacket.class);\n        when(actualMessage.getMessageType()).thenReturn(PostgreSQLCommandPacketType.AUTHENTICATION_OK.getValue());\n        new PostgreSQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeByte(PostgreSQLCommandPacketType.AUTHENTICATION_OK.getValue());\n        verify(byteBuf).writeInt(50 + PostgreSQLPacket.PAYLOAD_LENGTH);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/codec/PostgreSQLPacketCodecEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"},{"authorDate":"2020-05-16 14:46:06","commitOrder":2,"curCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        MySQLPacket actualMessage = mock(MySQLPacket.class);\n        when(actualMessage.getSequenceId()).thenReturn(1);\n        new MySQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeMediumLE(50);\n        verify(byteBuf).writeByte(1);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","date":"2020-05-16 14:46:06","endLine":93,"groupId":"9216","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertEncode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ec/fb2bbe730de95ddc30cb45eae39f25d089f5cc.src","preCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        MySQLPacket actualMessage = mock(MySQLPacket.class);\n        when(actualMessage.getSequenceId()).thenReturn(1);\n        new MySQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeMediumLE(50);\n        verify(byteBuf).writeByte(1);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/codec/MySQLPacketCodecEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"NB"}],"commitId":"9d653b7958b840aeb654ea52881cae5dd06bdeda","commitMessage":"@@@Add test case for pg codesc and constants (#7021)\n\n* add test case for pg codesc and constants\n\n* fix check style error check\n\n* fix mockito strict check\n\n* remove un finish test case","date":"2020-08-24 21:04:02","modifiedFileCount":"0","status":"M","submitter":"xbkaishui"},{"authorTime":"2020-05-16 14:46:06","codes":[{"authorDate":"2021-04-12 23:39:54","commitOrder":3,"curCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        PostgreSQLPacket actualMessage = mock(PostgreSQLPacket.class);\n        when(actualMessage.getMessageType()).thenReturn(PostgreSQLCommandPacketType.AUTHENTICATION_REQUEST.getValue());\n        new PostgreSQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeByte(PostgreSQLCommandPacketType.AUTHENTICATION_REQUEST.getValue());\n        verify(byteBuf).writeInt(50 + PostgreSQLPacket.PAYLOAD_LENGTH);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","date":"2021-04-12 23:39:54","endLine":93,"groupId":"7480","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertEncode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5d/c7b9712fec1041337cd44deb854c54a8d55636.src","preCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        PostgreSQLPacket actualMessage = mock(PostgreSQLPacket.class);\n        when(actualMessage.getMessageType()).thenReturn(PostgreSQLCommandPacketType.AUTHENTICATION_OK.getValue());\n        new PostgreSQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeByte(PostgreSQLCommandPacketType.AUTHENTICATION_OK.getValue());\n        verify(byteBuf).writeInt(50 + PostgreSQLPacket.PAYLOAD_LENGTH);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/codec/PostgreSQLPacketCodecEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2020-05-16 14:46:06","commitOrder":3,"curCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        MySQLPacket actualMessage = mock(MySQLPacket.class);\n        when(actualMessage.getSequenceId()).thenReturn(1);\n        new MySQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeMediumLE(50);\n        verify(byteBuf).writeByte(1);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","date":"2020-05-16 14:46:06","endLine":93,"groupId":"9216","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertEncode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ec/fb2bbe730de95ddc30cb45eae39f25d089f5cc.src","preCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        MySQLPacket actualMessage = mock(MySQLPacket.class);\n        when(actualMessage.getSequenceId()).thenReturn(1);\n        new MySQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeMediumLE(50);\n        verify(byteBuf).writeByte(1);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/codec/MySQLPacketCodecEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"}],"commitId":"043408d36d9608a543308b7c49c0c35474afe763","commitMessage":"@@@Refactor PostgreSQLCommandPacketType (#10058)\n\n","date":"2021-04-12 23:39:54","modifiedFileCount":"20","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-05-16 14:46:06","codes":[{"authorDate":"2021-04-13 17:27:57","commitOrder":4,"curCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        PostgreSQLIdentifierPacket actualMessage = mock(PostgreSQLIdentifierPacket.class);\n        when(actualMessage.getMessageType()).thenReturn(PostgreSQLCommandPacketType.AUTHENTICATION_REQUEST.getValue());\n        new PostgreSQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeByte(PostgreSQLCommandPacketType.AUTHENTICATION_REQUEST.getValue());\n        verify(byteBuf).writeInt(54);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","date":"2021-04-13 17:27:57","endLine":93,"groupId":"7480","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertEncode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/89/c9158e4def94ba1108a9aeda8ccc7299684294.src","preCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        PostgreSQLPacket actualMessage = mock(PostgreSQLPacket.class);\n        when(actualMessage.getMessageType()).thenReturn(PostgreSQLCommandPacketType.AUTHENTICATION_REQUEST.getValue());\n        new PostgreSQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeByte(PostgreSQLCommandPacketType.AUTHENTICATION_REQUEST.getValue());\n        verify(byteBuf).writeInt(50 + PostgreSQLPacket.PAYLOAD_LENGTH);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/codec/PostgreSQLPacketCodecEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2020-05-16 14:46:06","commitOrder":4,"curCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        MySQLPacket actualMessage = mock(MySQLPacket.class);\n        when(actualMessage.getSequenceId()).thenReturn(1);\n        new MySQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeMediumLE(50);\n        verify(byteBuf).writeByte(1);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","date":"2020-05-16 14:46:06","endLine":93,"groupId":"9216","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertEncode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ec/fb2bbe730de95ddc30cb45eae39f25d089f5cc.src","preCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        MySQLPacket actualMessage = mock(MySQLPacket.class);\n        when(actualMessage.getSequenceId()).thenReturn(1);\n        new MySQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeMediumLE(50);\n        verify(byteBuf).writeByte(1);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/codec/MySQLPacketCodecEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"}],"commitId":"d29d61f5a8aaa56919289314e389faeccdef01c2","commitMessage":"@@@Add PostgreSQLIdentifierPacket interface (#10069)\n\n* Refactor PostgreSQLCommandPacketType\n\n* Add PostgreSQLIdentifierPacket interface\n\n* Fix checkstyle","date":"2021-04-13 17:27:57","modifiedFileCount":"23","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-05-16 14:46:06","codes":[{"authorDate":"2021-04-13 17:47:26","commitOrder":5,"curCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        PostgreSQLIdentifierPacket actualMessage = mock(PostgreSQLIdentifierPacket.class);\n        when(actualMessage.getIdentifier()).thenReturn(PostgreSQLCommandPacketType.AUTHENTICATION_REQUEST.getValue());\n        new PostgreSQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeByte(PostgreSQLCommandPacketType.AUTHENTICATION_REQUEST.getValue());\n        verify(byteBuf).writeInt(54);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","date":"2021-04-13 17:47:26","endLine":93,"groupId":"8027","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertEncode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e9/db0ad461fe849b06f7f9d8e89c0dccc8045c64.src","preCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        PostgreSQLIdentifierPacket actualMessage = mock(PostgreSQLIdentifierPacket.class);\n        when(actualMessage.getMessageType()).thenReturn(PostgreSQLCommandPacketType.AUTHENTICATION_REQUEST.getValue());\n        new PostgreSQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeByte(PostgreSQLCommandPacketType.AUTHENTICATION_REQUEST.getValue());\n        verify(byteBuf).writeInt(54);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/codec/PostgreSQLPacketCodecEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2020-05-16 14:46:06","commitOrder":5,"curCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        MySQLPacket actualMessage = mock(MySQLPacket.class);\n        when(actualMessage.getSequenceId()).thenReturn(1);\n        new MySQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeMediumLE(50);\n        verify(byteBuf).writeByte(1);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","date":"2020-05-16 14:46:06","endLine":93,"groupId":"9216","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertEncode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ec/fb2bbe730de95ddc30cb45eae39f25d089f5cc.src","preCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        MySQLPacket actualMessage = mock(MySQLPacket.class);\n        when(actualMessage.getSequenceId()).thenReturn(1);\n        new MySQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeMediumLE(50);\n        verify(byteBuf).writeByte(1);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/codec/MySQLPacketCodecEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"}],"commitId":"029a9f8a8336794cff5d8fc8db0f0cd04a7cc694","commitMessage":"@@@Rename PostgreSQLIdentifierPacket.getMessageType() to PostgreSQLIdentifierPacket.getIdentifier() (#10072)\n\n","date":"2021-04-13 17:47:26","modifiedFileCount":"41","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-05-16 14:46:06","codes":[{"authorDate":"2021-04-13 18:57:42","commitOrder":6,"curCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        PostgreSQLIdentifierPacket actualMessage = mock(PostgreSQLIdentifierPacket.class);\n        when(actualMessage.getIdentifier()).thenReturn(PostgreSQLMessagePacketType.AUTHENTICATION_REQUEST.getValue());\n        new PostgreSQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeByte(PostgreSQLMessagePacketType.AUTHENTICATION_REQUEST.getValue());\n        verify(byteBuf).writeInt(54);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","date":"2021-04-13 18:57:42","endLine":93,"groupId":"8027","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"assertEncode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/54/9b57a92525a90dc10cb86360530139303e328e.src","preCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        PostgreSQLIdentifierPacket actualMessage = mock(PostgreSQLIdentifierPacket.class);\n        when(actualMessage.getIdentifier()).thenReturn(PostgreSQLCommandPacketType.AUTHENTICATION_REQUEST.getValue());\n        new PostgreSQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeByte(PostgreSQLCommandPacketType.AUTHENTICATION_REQUEST.getValue());\n        verify(byteBuf).writeInt(54);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/codec/PostgreSQLPacketCodecEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2020-05-16 14:46:06","commitOrder":6,"curCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        MySQLPacket actualMessage = mock(MySQLPacket.class);\n        when(actualMessage.getSequenceId()).thenReturn(1);\n        new MySQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeMediumLE(50);\n        verify(byteBuf).writeByte(1);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","date":"2020-05-16 14:46:06","endLine":93,"groupId":"9216","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"assertEncode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ec/fb2bbe730de95ddc30cb45eae39f25d089f5cc.src","preCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        MySQLPacket actualMessage = mock(MySQLPacket.class);\n        when(actualMessage.getSequenceId()).thenReturn(1);\n        new MySQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeMediumLE(50);\n        verify(byteBuf).writeByte(1);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/codec/MySQLPacketCodecEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"}],"commitId":"3e6e98d04869bbedf5b080ae46e21428ee7bf598","commitMessage":"@@@Split PostgreSQLCommandPacketType to PostgreSQLMessagePacketType and PostgreSQLCommandPacketType (#10074)\n\n* Split PostgreSQLCommandPacketType to PostgreSQLIdentifierTagType and PostgreSQLCommandPacketType\n\n* Add identifier package\n\n* Rename PostgreSQLMessagePacketType\n\n* Add PostgreSQLIdentifierTag.getValue()\n\n* Fix test case","date":"2021-04-13 18:57:42","modifiedFileCount":"29","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-05-16 14:46:06","codes":[{"authorDate":"2021-04-13 21:54:27","commitOrder":7,"curCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        PostgreSQLIdentifierPacket actualMessage = mock(PostgreSQLIdentifierPacket.class);\n        when(actualMessage.getIdentifier()).thenReturn(PostgreSQLMessagePacketType.AUTHENTICATION_REQUEST);\n        new PostgreSQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeByte(PostgreSQLMessagePacketType.AUTHENTICATION_REQUEST.getValue());\n        verify(byteBuf).writeInt(54);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","date":"2021-04-13 21:54:27","endLine":93,"groupId":"101209","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"assertEncode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8b/27440b8f8ff39ddbe260b5f778be75d044d1f1.src","preCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        PostgreSQLIdentifierPacket actualMessage = mock(PostgreSQLIdentifierPacket.class);\n        when(actualMessage.getIdentifier()).thenReturn(PostgreSQLMessagePacketType.AUTHENTICATION_REQUEST.getValue());\n        new PostgreSQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeByte(PostgreSQLMessagePacketType.AUTHENTICATION_REQUEST.getValue());\n        verify(byteBuf).writeInt(54);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/codec/PostgreSQLPacketCodecEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2020-05-16 14:46:06","commitOrder":7,"curCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        MySQLPacket actualMessage = mock(MySQLPacket.class);\n        when(actualMessage.getSequenceId()).thenReturn(1);\n        new MySQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeMediumLE(50);\n        verify(byteBuf).writeByte(1);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","date":"2020-05-16 14:46:06","endLine":93,"groupId":"101209","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"assertEncode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ec/fb2bbe730de95ddc30cb45eae39f25d089f5cc.src","preCode":"    public void assertEncode() {\n        ByteBufAllocator byteBufAllocator = mock(ByteBufAllocator.class);\n        when(context.alloc()).thenReturn(byteBufAllocator);\n        ByteBuf payloadByteBuf = mock(ByteBuf.class);\n        when(byteBufAllocator.buffer()).thenReturn(payloadByteBuf);\n        when(payloadByteBuf.readableBytes()).thenReturn(50);\n        MySQLPacket actualMessage = mock(MySQLPacket.class);\n        when(actualMessage.getSequenceId()).thenReturn(1);\n        new MySQLPacketCodecEngine().encode(context, actualMessage, byteBuf);\n        verify(actualMessage).write(ArgumentMatchers.any());\n        verify(byteBuf).writeMediumLE(50);\n        verify(byteBuf).writeByte(1);\n        verify(byteBuf).writeBytes(payloadByteBuf);\n    }\n","realPath":"shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/codec/MySQLPacketCodecEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"}],"commitId":"7bfc288fbe10baf38500285456c4cb66d6da46ff","commitMessage":"@@@Refactor PostgreSQLIdentifierPacket (#10078)\n\n","date":"2021-04-13 21:54:27","modifiedFileCount":"42","status":"M","submitter":"Liang Zhang"}]
