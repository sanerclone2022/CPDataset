[{"authorTime":"2020-05-16 19:36:14","codes":[{"authorDate":"2020-05-16 19:36:14","commitOrder":1,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        RuntimeContext runtimeContext = connection.getRuntimeContext();\n        SQLStatement sqlStatement = runtimeContext.getSqlParserEngine().parse(sql, false);\n        RouteContext routeContext = new DataNodeRouter(\n                runtimeContext.getMetaData(), runtimeContext.getProperties(), runtimeContext.getRules()).route(sqlStatement, sql, Collections.emptyList());\n        SQLRewriteResult sqlRewriteResult = new SQLRewriteEntry(runtimeContext.getMetaData().getSchema().getConfiguredSchemaMetaData(),\n                runtimeContext.getProperties(), runtimeContext.getRules()).rewrite(sql, Collections.emptyList(), routeContext);\n        ExecutionContext result = new ExecutionContext(routeContext.getSqlStatementContext(), ExecutionContextBuilder.build(runtimeContext.getMetaData(), sqlRewriteResult));\n        logSQL(sql, runtimeContext.getProperties(), result);\n        return result;\n    }\n","date":"2020-05-16 19:36:14","endLine":249,"groupId":"11738","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/14/2afd7467df56faab40fd96f3fe3c239d732611.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        RuntimeContext runtimeContext = connection.getRuntimeContext();\n        SQLStatement sqlStatement = runtimeContext.getSqlParserEngine().parse(sql, false);\n        RouteContext routeContext = new DataNodeRouter(\n                runtimeContext.getMetaData(), runtimeContext.getProperties(), runtimeContext.getRules()).route(sqlStatement, sql, Collections.emptyList());\n        SQLRewriteResult sqlRewriteResult = new SQLRewriteEntry(runtimeContext.getMetaData().getSchema().getConfiguredSchemaMetaData(),\n                runtimeContext.getProperties(), runtimeContext.getRules()).rewrite(sql, Collections.emptyList(), routeContext);\n        ExecutionContext result = new ExecutionContext(routeContext.getSqlStatementContext(), ExecutionContextBuilder.build(runtimeContext.getMetaData(), sqlRewriteResult));\n        logSQL(sql, runtimeContext.getProperties(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"B"},{"authorDate":"2020-05-16 19:36:14","commitOrder":1,"curCode":"    private ExecutionContext createExecutionContext() {\n        RuntimeContext runtimeContext = connection.getRuntimeContext();\n        RouteContext routeContext = new DataNodeRouter(runtimeContext.getMetaData(), runtimeContext.getProperties(), runtimeContext.getRules()).route(sqlStatement, sql, getParameters());\n        SQLRewriteResult sqlRewriteResult = new SQLRewriteEntry(runtimeContext.getMetaData().getSchema().getConfiguredSchemaMetaData(), \n                runtimeContext.getProperties(), runtimeContext.getRules()).rewrite(sql, new ArrayList<>(getParameters()), routeContext);\n        ExecutionContext result = new ExecutionContext(routeContext.getSqlStatementContext(), ExecutionContextBuilder.build(runtimeContext.getMetaData(), sqlRewriteResult));\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.add(generatedKey.getGeneratedValues().getLast()));\n        logSQL(runtimeContext, result);\n        return result;\n    }\n","date":"2020-05-16 19:36:14","endLine":235,"groupId":"10722","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/24/e493a78233b6181090ff615c62656011d74611.src","preCode":"    private ExecutionContext createExecutionContext() {\n        RuntimeContext runtimeContext = connection.getRuntimeContext();\n        RouteContext routeContext = new DataNodeRouter(runtimeContext.getMetaData(), runtimeContext.getProperties(), runtimeContext.getRules()).route(sqlStatement, sql, getParameters());\n        SQLRewriteResult sqlRewriteResult = new SQLRewriteEntry(runtimeContext.getMetaData().getSchema().getConfiguredSchemaMetaData(), \n                runtimeContext.getProperties(), runtimeContext.getRules()).rewrite(sql, new ArrayList<>(getParameters()), routeContext);\n        ExecutionContext result = new ExecutionContext(routeContext.getSqlStatementContext(), ExecutionContextBuilder.build(runtimeContext.getMetaData(), sqlRewriteResult));\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.add(generatedKey.getGeneratedValues().getLast()));\n        logSQL(runtimeContext, result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"B"}],"commitId":"468e4540f107bacea98e9785b7312b2e5bad0c7e","commitMessage":"@@@Rename sharding-jdbc to shardingsphere-jdbc (#5641)\n\n* Rename sharding-jdbc to shardingsphere-jdbc\n\n* rename org.apache.shardingsphere.shardingjdbc to org.apache.shardingsphere.driver\n\n* rename org.apache.shardingsphere.shardingjdbc to org.apache.shardingsphere.driver","date":"2020-05-16 19:36:14","modifiedFileCount":"32","status":"B","submitter":"Liang Zhang"},{"authorTime":"2020-05-19 16:48:33","codes":[{"authorDate":"2020-05-19 16:48:33","commitOrder":2,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        RouteContext routeContext = new DataNodeRouter(\n                schemaContext.getSchema().getMetaData(), schemaContexts.getProperties(), schemaContext.getSchema().getRules()).route(sqlStatement, sql, Collections.emptyList());\n        SQLRewriteResult sqlRewriteResult = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getSchema().getConfiguredSchemaMetaData(),\n                schemaContexts.getProperties(), schemaContext.getSchema().getRules()).rewrite(sql, Collections.emptyList(), routeContext);\n        ExecutionContext result = new ExecutionContext(routeContext.getSqlStatementContext(), ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult));\n        logSQL(sql, schemaContexts.getProperties(), result);\n        return result;\n    }\n","date":"2020-05-19 16:48:33","endLine":253,"groupId":"1382","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ad/b1210f8b40e99f4706aa4b166aeea9d7f00762.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        RuntimeContext runtimeContext = connection.getRuntimeContext();\n        SQLStatement sqlStatement = runtimeContext.getSqlParserEngine().parse(sql, false);\n        RouteContext routeContext = new DataNodeRouter(\n                runtimeContext.getMetaData(), runtimeContext.getProperties(), runtimeContext.getRules()).route(sqlStatement, sql, Collections.emptyList());\n        SQLRewriteResult sqlRewriteResult = new SQLRewriteEntry(runtimeContext.getMetaData().getSchema().getConfiguredSchemaMetaData(),\n                runtimeContext.getProperties(), runtimeContext.getRules()).rewrite(sql, Collections.emptyList(), routeContext);\n        ExecutionContext result = new ExecutionContext(routeContext.getSqlStatementContext(), ExecutionContextBuilder.build(runtimeContext.getMetaData(), sqlRewriteResult));\n        logSQL(sql, runtimeContext.getProperties(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2020-05-19 16:48:33","commitOrder":2,"curCode":"    private ExecutionContext createExecutionContext() {\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        RouteContext routeContext = \n                new DataNodeRouter(schemaContext.getSchema().getMetaData(), schemaContexts.getProperties(), schemaContext.getSchema().getRules()).route(sqlStatement, sql, getParameters());\n        SQLRewriteResult sqlRewriteResult = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getSchema().getConfiguredSchemaMetaData(), \n                schemaContexts.getProperties(), schemaContext.getSchema().getRules()).rewrite(sql, new ArrayList<>(getParameters()), routeContext);\n        ExecutionContext result = new ExecutionContext(routeContext.getSqlStatementContext(), ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult));\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.add(generatedKey.getGeneratedValues().getLast()));\n        logSQL(result);\n        return result;\n    }\n","date":"2020-05-19 16:48:33","endLine":239,"groupId":"13734","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/07/bb4dafdc09aa5084d980b335fd2a981ee4d003.src","preCode":"    private ExecutionContext createExecutionContext() {\n        RuntimeContext runtimeContext = connection.getRuntimeContext();\n        RouteContext routeContext = new DataNodeRouter(runtimeContext.getMetaData(), runtimeContext.getProperties(), runtimeContext.getRules()).route(sqlStatement, sql, getParameters());\n        SQLRewriteResult sqlRewriteResult = new SQLRewriteEntry(runtimeContext.getMetaData().getSchema().getConfiguredSchemaMetaData(), \n                runtimeContext.getProperties(), runtimeContext.getRules()).rewrite(sql, new ArrayList<>(getParameters()), routeContext);\n        ExecutionContext result = new ExecutionContext(routeContext.getSqlStatementContext(), ExecutionContextBuilder.build(runtimeContext.getMetaData(), sqlRewriteResult));\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.add(generatedKey.getGeneratedValues().getLast()));\n        logSQL(runtimeContext, result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"a2b81549f5c64bf7313ffc8d6d18cc5389683228","commitMessage":"@@@Delete RuntimeContext (#5686)\n\n","date":"2020-05-19 16:48:33","modifiedFileCount":"47","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2020-06-13 11:39:32","codes":[{"authorDate":"2020-06-13 11:39:32","commitOrder":3,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        RouteContext routeContext = new DataNodeRouter(\n                schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules()).route(sqlStatement, sql, Collections.emptyList());\n        SQLRewriteResult sqlRewriteResult = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getSchema().getConfiguredSchemaMetaData(),\n                schemaContexts.getProps(), schemaContext.getSchema().getRules()).rewrite(sql, Collections.emptyList(), routeContext);\n        ExecutionContext result = new ExecutionContext(routeContext.getSqlStatementContext(), ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult));\n        logSQL(sql, schemaContexts.getProps(), result);\n        return result;\n    }\n","date":"2020-06-13 11:39:32","endLine":293,"groupId":"1382","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fd/98ea58ef8d9427cab2b423cd45e8e4e2adfe26.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        RouteContext routeContext = new DataNodeRouter(\n                schemaContext.getSchema().getMetaData(), schemaContexts.getProperties(), schemaContext.getSchema().getRules()).route(sqlStatement, sql, Collections.emptyList());\n        SQLRewriteResult sqlRewriteResult = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getSchema().getConfiguredSchemaMetaData(),\n                schemaContexts.getProperties(), schemaContext.getSchema().getRules()).rewrite(sql, Collections.emptyList(), routeContext);\n        ExecutionContext result = new ExecutionContext(routeContext.getSqlStatementContext(), ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult));\n        logSQL(sql, schemaContexts.getProperties(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"},{"authorDate":"2020-06-13 11:39:32","commitOrder":3,"curCode":"    private ExecutionContext createExecutionContext() {\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        RouteContext routeContext = \n                new DataNodeRouter(schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules()).route(sqlStatement, sql, getParameters());\n        SQLRewriteResult sqlRewriteResult = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getSchema().getConfiguredSchemaMetaData(), \n                schemaContexts.getProps(), schemaContext.getSchema().getRules()).rewrite(sql, new ArrayList<>(getParameters()), routeContext);\n        ExecutionContext result = new ExecutionContext(routeContext.getSqlStatementContext(), ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult));\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.add(generatedKey.getGeneratedValues().getLast()));\n        logSQL(result);\n        return result;\n    }\n","date":"2020-06-13 11:39:32","endLine":267,"groupId":"14211","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/21/af3696aa39650200df95dfd4b35ff44ac47564.src","preCode":"    private ExecutionContext createExecutionContext() {\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        RouteContext routeContext = \n                new DataNodeRouter(schemaContext.getSchema().getMetaData(), schemaContexts.getProperties(), schemaContext.getSchema().getRules()).route(sqlStatement, sql, getParameters());\n        SQLRewriteResult sqlRewriteResult = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getSchema().getConfiguredSchemaMetaData(), \n                schemaContexts.getProperties(), schemaContext.getSchema().getRules()).rewrite(sql, new ArrayList<>(getParameters()), routeContext);\n        ExecutionContext result = new ExecutionContext(routeContext.getSqlStatementContext(), ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult));\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.add(generatedKey.getGeneratedValues().getLast()));\n        logSQL(result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"M"}],"commitId":"75824a28d2ffe9387ccaf9849f4fbc91a0037257","commitMessage":"@@@Unify properties and props (#6019)\n\n* Unify properties and props\n\n* Unify properties and props\n\n* Merge branch 'master' into dev\n\n# Conflicts:\n#\tshardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/strategy/algorithm/sharding/ModuloShardingAlgorithm.java\n#\tshardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/type/standard/ShardingStandardRoutingEngine.java\n#\tshardingsphere-proxy/shardingsphere-proxy-bootstrap/src/main/java/org/apache/shardingsphere/proxy/Bootstrap.java","date":"2020-06-13 11:39:32","modifiedFileCount":"243","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-09-09 12:35:32","codes":[{"authorDate":"2020-09-09 12:35:32","commitOrder":4,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        RouteContext routeContext = new DataNodeRouter(\n                schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules()).route(sqlStatement, sql, Collections.emptyList());\n        SQLRewriteResult sqlRewriteResult = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getConfiguredSchemaMetaData(),\n                schemaContexts.getProps(), schemaContext.getSchema().getRules()).rewrite(sql, Collections.emptyList(), routeContext);\n        ExecutionContext result = new ExecutionContext(routeContext.getSqlStatementContext(), ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult));\n        logSQL(sql, schemaContexts.getProps(), result);\n        return result;\n    }\n","date":"2020-09-09 12:35:32","endLine":293,"groupId":"1382","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/26/accfa56f19c764177e709746154a87f71ba5d1.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        RouteContext routeContext = new DataNodeRouter(\n                schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules()).route(sqlStatement, sql, Collections.emptyList());\n        SQLRewriteResult sqlRewriteResult = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getSchema().getConfiguredSchemaMetaData(),\n                schemaContexts.getProps(), schemaContext.getSchema().getRules()).rewrite(sql, Collections.emptyList(), routeContext);\n        ExecutionContext result = new ExecutionContext(routeContext.getSqlStatementContext(), ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult));\n        logSQL(sql, schemaContexts.getProps(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"},{"authorDate":"2020-09-09 12:35:32","commitOrder":4,"curCode":"    private ExecutionContext createExecutionContext() {\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        RouteContext routeContext = \n                new DataNodeRouter(schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules()).route(sqlStatement, sql, getParameters());\n        SQLRewriteResult sqlRewriteResult = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getConfiguredSchemaMetaData(), \n                schemaContexts.getProps(), schemaContext.getSchema().getRules()).rewrite(sql, new ArrayList<>(getParameters()), routeContext);\n        ExecutionContext result = new ExecutionContext(routeContext.getSqlStatementContext(), ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult));\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.add(generatedKey.getGeneratedValues().getLast()));\n        logSQL(result);\n        return result;\n    }\n","date":"2020-09-09 12:35:32","endLine":267,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ee/be9796c16374d8e8a7cbff121d0170d85f1ba3.src","preCode":"    private ExecutionContext createExecutionContext() {\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        RouteContext routeContext = \n                new DataNodeRouter(schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules()).route(sqlStatement, sql, getParameters());\n        SQLRewriteResult sqlRewriteResult = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getSchema().getConfiguredSchemaMetaData(), \n                schemaContexts.getProps(), schemaContext.getSchema().getRules()).rewrite(sql, new ArrayList<>(getParameters()), routeContext);\n        ExecutionContext result = new ExecutionContext(routeContext.getSqlStatementContext(), ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult));\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.add(generatedKey.getGeneratedValues().getLast()));\n        logSQL(result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"M"}],"commitId":"bf1c2a14858a31d04c63854994416c7685e47221","commitMessage":"@@@Merge pull request #7320 from kimmking/dev\n\nrefator ShardingSphereMetaData","date":"2020-09-09 12:35:32","modifiedFileCount":"40","status":"M","submitter":"Haoran Meng"},{"authorTime":"2020-09-10 18:02:38","codes":[{"authorDate":"2020-09-10 18:02:38","commitOrder":5,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        DataNodeRouter dataNodeRouter = new DataNodeRouter(schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        RouteContext routeContext = dataNodeRouter.route(sqlStatement, sql, Collections.emptyList());\n        SQLRewriteEntry sqlRewriteEntry = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getConfiguredSchemaMetaData(),\n                schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        SQLRewriteResult sqlRewriteResult = sqlRewriteEntry.rewrite(sql, Collections.emptyList(), routeContext);\n        SQLStatementContext<?> sqlStatementContext = routeContext.getSqlStatementContext();\n        Collection<ExecutionUnit> executionUnits = ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult, sqlStatementContext);\n        ExecutionContext result = new ExecutionContext(sqlStatementContext, executionUnits, routeContext);\n        logSQL(sql, schemaContexts.getProps(), result);\n        return result;\n    }\n","date":"2020-09-10 18:02:38","endLine":298,"groupId":"12220","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e5/6ec0dd56a85d2e5a2ad6457a88ffad1b7e35df.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        RouteContext routeContext = new DataNodeRouter(\n                schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules()).route(sqlStatement, sql, Collections.emptyList());\n        SQLRewriteResult sqlRewriteResult = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getConfiguredSchemaMetaData(),\n                schemaContexts.getProps(), schemaContext.getSchema().getRules()).rewrite(sql, Collections.emptyList(), routeContext);\n        ExecutionContext result = new ExecutionContext(routeContext.getSqlStatementContext(), ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult));\n        logSQL(sql, schemaContexts.getProps(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"M"},{"authorDate":"2020-09-10 18:02:38","commitOrder":5,"curCode":"    private ExecutionContext createExecutionContext() {\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        DataNodeRouter dataNodeRouter = new DataNodeRouter(schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        RouteContext routeContext = dataNodeRouter.route(sqlStatement, sql, getParameters());\n        SQLRewriteEntry sqlRewriteEntry = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getConfiguredSchemaMetaData(),\n                schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        SQLRewriteResult sqlRewriteResult = sqlRewriteEntry.rewrite(sql, new ArrayList<>(getParameters()), routeContext);\n        SQLStatementContext<?> sqlStatementContext = routeContext.getSqlStatementContext();\n        Collection<ExecutionUnit> executionUnits = ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult, sqlStatementContext);\n        ExecutionContext result = new ExecutionContext(sqlStatementContext, executionUnits, routeContext);\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.add(generatedKey.getGeneratedValues().getLast()));\n        logSQL(result);\n        return result;\n    }\n","date":"2020-09-10 18:02:38","endLine":273,"groupId":"8984","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c0/773dd5a063e1baab73b62291cc8f30a6eb5bed.src","preCode":"    private ExecutionContext createExecutionContext() {\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        RouteContext routeContext = \n                new DataNodeRouter(schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules()).route(sqlStatement, sql, getParameters());\n        SQLRewriteResult sqlRewriteResult = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getConfiguredSchemaMetaData(), \n                schemaContexts.getProps(), schemaContext.getSchema().getRules()).rewrite(sql, new ArrayList<>(getParameters()), routeContext);\n        ExecutionContext result = new ExecutionContext(routeContext.getSqlStatementContext(), ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult));\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.add(generatedKey.getGeneratedValues().getLast()));\n        logSQL(result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"cca800aece30251bf630da1a8910ae9cdd231ba3","commitMessage":"@@@Support multi replica extension (#7355)\n\n* Support multi replica extension\n\n* merge from apache/master\n\n* add a blank line in the end of RawExecutorCallback's SPI META-INF file\nrename primaryKeyColumns as result for return value in ExecutionContextBuilder\nuse a object to define Map<String.  List<String>> structure for primaryKeyColumns\n\n* refactor SQLUnit.  add SQLRuntimeContext\n\n* merge from master\n\nCo-authored-by: yanjiabao <yanjiabao@jd.com>","date":"2020-09-10 18:02:38","modifiedFileCount":"48","status":"M","submitter":"AlphaPo"},{"authorTime":"2020-09-21 20:46:44","codes":[{"authorDate":"2020-09-21 20:46:44","commitOrder":6,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        DataNodeRouter router = new DataNodeRouter(schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        RouteContext routeContext = router.route(sqlStatement, sql, Collections.emptyList());\n        SQLRewriteEntry sqlRewriteEntry = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getConfiguredSchemaMetaData(),\n                schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        SQLRewriteResult sqlRewriteResult = sqlRewriteEntry.rewrite(sql, Collections.emptyList(), routeContext);\n        SQLStatementContext<?> sqlStatementContext = routeContext.getSqlStatementContext();\n        Collection<ExecutionUnit> executionUnits = ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult, sqlStatementContext);\n        ExecutionContext result = new ExecutionContext(sqlStatementContext, executionUnits, routeContext);\n        logSQL(sql, schemaContexts.getProps(), result);\n        return result;\n    }\n","date":"2020-09-21 20:46:44","endLine":298,"groupId":"12220","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a4/0b8d223d3f10e70c65b7b3c1f30ceb6421d161.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        DataNodeRouter dataNodeRouter = new DataNodeRouter(schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        RouteContext routeContext = dataNodeRouter.route(sqlStatement, sql, Collections.emptyList());\n        SQLRewriteEntry sqlRewriteEntry = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getConfiguredSchemaMetaData(),\n                schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        SQLRewriteResult sqlRewriteResult = sqlRewriteEntry.rewrite(sql, Collections.emptyList(), routeContext);\n        SQLStatementContext<?> sqlStatementContext = routeContext.getSqlStatementContext();\n        Collection<ExecutionUnit> executionUnits = ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult, sqlStatementContext);\n        ExecutionContext result = new ExecutionContext(sqlStatementContext, executionUnits, routeContext);\n        logSQL(sql, schemaContexts.getProps(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"M"},{"authorDate":"2020-09-21 20:46:44","commitOrder":6,"curCode":"    private ExecutionContext createExecutionContext() {\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        DataNodeRouter router = new DataNodeRouter(schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        RouteContext routeContext = router.route(sqlStatement, sql, getParameters());\n        SQLRewriteEntry sqlRewriteEntry = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getConfiguredSchemaMetaData(),\n                schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        SQLRewriteResult sqlRewriteResult = sqlRewriteEntry.rewrite(sql, new ArrayList<>(getParameters()), routeContext);\n        SQLStatementContext<?> sqlStatementContext = routeContext.getSqlStatementContext();\n        Collection<ExecutionUnit> executionUnits = ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult, sqlStatementContext);\n        ExecutionContext result = new ExecutionContext(sqlStatementContext, executionUnits, routeContext);\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.add(generatedKey.getGeneratedValues().getLast()));\n        logSQL(result);\n        return result;\n    }\n","date":"2020-09-21 20:46:44","endLine":273,"groupId":"8984","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7d/2fec60b032014d022b732bdd45f4966aa7f2ff.src","preCode":"    private ExecutionContext createExecutionContext() {\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        DataNodeRouter dataNodeRouter = new DataNodeRouter(schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        RouteContext routeContext = dataNodeRouter.route(sqlStatement, sql, getParameters());\n        SQLRewriteEntry sqlRewriteEntry = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getConfiguredSchemaMetaData(),\n                schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        SQLRewriteResult sqlRewriteResult = sqlRewriteEntry.rewrite(sql, new ArrayList<>(getParameters()), routeContext);\n        SQLStatementContext<?> sqlStatementContext = routeContext.getSqlStatementContext();\n        Collection<ExecutionUnit> executionUnits = ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult, sqlStatementContext);\n        ExecutionContext result = new ExecutionContext(sqlStatementContext, executionUnits, routeContext);\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.add(generatedKey.getGeneratedValues().getLast()));\n        logSQL(result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"8bbca110f41c2b625b183915b92d75f20adf8ae6","commitMessage":"@@@Move LogicSQLContext to infra-context package (#7539)\n\n* Move LogicSQLContext to infra-context package\n\n* Refactor ProxyKernelProcessor","date":"2020-09-21 20:46:44","modifiedFileCount":"8","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-09-21 21:20:09","codes":[{"authorDate":"2020-09-21 21:20:09","commitOrder":7,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        DataNodeRouter router = new DataNodeRouter(schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        RouteContext routeContext = router.route(sqlStatement, sql, Collections.emptyList());\n        SQLRewriteEntry rewriteEntry = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getConfiguredSchemaMetaData(),\n                schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        SQLRewriteResult rewriteResult = rewriteEntry.rewrite(sql, Collections.emptyList(), routeContext);\n        SQLStatementContext<?> sqlStatementContext = routeContext.getSqlStatementContext();\n        Collection<ExecutionUnit> executionUnits = ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), rewriteResult, sqlStatementContext);\n        ExecutionContext result = new ExecutionContext(sqlStatementContext, executionUnits, routeContext);\n        logSQL(sql, schemaContexts.getProps(), result);\n        return result;\n    }\n","date":"2020-09-21 21:20:09","endLine":298,"groupId":"12220","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d1/8a4bcf5ad13b1ee722f643c02d3ef9f5901192.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        DataNodeRouter router = new DataNodeRouter(schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        RouteContext routeContext = router.route(sqlStatement, sql, Collections.emptyList());\n        SQLRewriteEntry sqlRewriteEntry = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getConfiguredSchemaMetaData(),\n                schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        SQLRewriteResult sqlRewriteResult = sqlRewriteEntry.rewrite(sql, Collections.emptyList(), routeContext);\n        SQLStatementContext<?> sqlStatementContext = routeContext.getSqlStatementContext();\n        Collection<ExecutionUnit> executionUnits = ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult, sqlStatementContext);\n        ExecutionContext result = new ExecutionContext(sqlStatementContext, executionUnits, routeContext);\n        logSQL(sql, schemaContexts.getProps(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"M"},{"authorDate":"2020-09-21 21:20:09","commitOrder":7,"curCode":"    private ExecutionContext createExecutionContext() {\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        DataNodeRouter router = new DataNodeRouter(schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        RouteContext routeContext = router.route(sqlStatement, sql, getParameters());\n        SQLRewriteEntry rewriteEntry = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getConfiguredSchemaMetaData(),\n                schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        SQLRewriteResult rewriteResult = rewriteEntry.rewrite(sql, new ArrayList<>(getParameters()), routeContext);\n        SQLStatementContext<?> sqlStatementContext = routeContext.getSqlStatementContext();\n        Collection<ExecutionUnit> executionUnits = ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), rewriteResult, sqlStatementContext);\n        ExecutionContext result = new ExecutionContext(sqlStatementContext, executionUnits, routeContext);\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.add(generatedKey.getGeneratedValues().getLast()));\n        logSQL(result);\n        return result;\n    }\n","date":"2020-09-21 21:20:09","endLine":273,"groupId":"8984","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fe/d92403e7c3546a51a580f1c4c930a921ab08af.src","preCode":"    private ExecutionContext createExecutionContext() {\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        DataNodeRouter router = new DataNodeRouter(schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        RouteContext routeContext = router.route(sqlStatement, sql, getParameters());\n        SQLRewriteEntry sqlRewriteEntry = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getConfiguredSchemaMetaData(),\n                schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        SQLRewriteResult sqlRewriteResult = sqlRewriteEntry.rewrite(sql, new ArrayList<>(getParameters()), routeContext);\n        SQLStatementContext<?> sqlStatementContext = routeContext.getSqlStatementContext();\n        Collection<ExecutionUnit> executionUnits = ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), sqlRewriteResult, sqlStatementContext);\n        ExecutionContext result = new ExecutionContext(sqlStatementContext, executionUnits, routeContext);\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.add(generatedKey.getGeneratedValues().getLast()));\n        logSQL(result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"28de2c6a4f7b92a403d5b5d0eadcb6165efc45bd","commitMessage":"@@@Move KernelProcessor to infra-context module (#7540)\n\n","date":"2020-09-21 21:20:09","modifiedFileCount":"4","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-09-21 22:22:25","codes":[{"authorDate":"2020-09-21 22:22:25","commitOrder":8,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        LogicSQLContext logicSQLContext = new LogicSQLContext(schemaContext, sql, Collections.emptyList(), sqlStatement);\n        ExecutionContext result = new KernelProcessor().generateExecutionContext(logicSQLContext, schemaContexts.getProps());\n        logSQL(sql, schemaContexts.getProps(), result);\n        return result;\n    }\n","date":"2020-09-21 22:22:25","endLine":287,"groupId":"0","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3b/880d06b77a9f6987feea4db5bb288642cc29e0.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        DataNodeRouter router = new DataNodeRouter(schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        RouteContext routeContext = router.route(sqlStatement, sql, Collections.emptyList());\n        SQLRewriteEntry rewriteEntry = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getConfiguredSchemaMetaData(),\n                schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        SQLRewriteResult rewriteResult = rewriteEntry.rewrite(sql, Collections.emptyList(), routeContext);\n        SQLStatementContext<?> sqlStatementContext = routeContext.getSqlStatementContext();\n        Collection<ExecutionUnit> executionUnits = ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), rewriteResult, sqlStatementContext);\n        ExecutionContext result = new ExecutionContext(sqlStatementContext, executionUnits, routeContext);\n        logSQL(sql, schemaContexts.getProps(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"},{"authorDate":"2020-09-21 22:22:25","commitOrder":8,"curCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQLContext logicSQLContext = new LogicSQLContext(schemaContexts.getDefaultSchemaContext(), sql, new ArrayList<>(getParameters()), sqlStatement);\n        ExecutionContext result = new KernelProcessor().generateExecutionContext(logicSQLContext, schemaContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.add(generatedKey.getGeneratedValues().getLast()));\n        logSQL(result);\n        return result;\n    }\n","date":"2020-09-21 22:22:25","endLine":261,"groupId":"12521","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/48/a03bca4483302e1a91d5439f947bda05a920bc.src","preCode":"    private ExecutionContext createExecutionContext() {\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        DataNodeRouter router = new DataNodeRouter(schemaContext.getSchema().getMetaData(), schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        RouteContext routeContext = router.route(sqlStatement, sql, getParameters());\n        SQLRewriteEntry rewriteEntry = new SQLRewriteEntry(schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getConfiguredSchemaMetaData(),\n                schemaContexts.getProps(), schemaContext.getSchema().getRules());\n        SQLRewriteResult rewriteResult = rewriteEntry.rewrite(sql, new ArrayList<>(getParameters()), routeContext);\n        SQLStatementContext<?> sqlStatementContext = routeContext.getSqlStatementContext();\n        Collection<ExecutionUnit> executionUnits = ExecutionContextBuilder.build(schemaContext.getSchema().getMetaData(), rewriteResult, sqlStatementContext);\n        ExecutionContext result = new ExecutionContext(sqlStatementContext, executionUnits, routeContext);\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.add(generatedKey.getGeneratedValues().getLast()));\n        logSQL(result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"M"}],"commitId":"7799e5c4d5c13e80e1f675477aa850f3c109181e","commitMessage":"@@@Use KernelProcessor in JDBC (#7542)\n\n","date":"2020-09-21 22:22:25","modifiedFileCount":"4","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-09-22 14:25:33","codes":[{"authorDate":"2020-09-21 22:22:25","commitOrder":9,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        LogicSQLContext logicSQLContext = new LogicSQLContext(schemaContext, sql, Collections.emptyList(), sqlStatement);\n        ExecutionContext result = new KernelProcessor().generateExecutionContext(logicSQLContext, schemaContexts.getProps());\n        logSQL(sql, schemaContexts.getProps(), result);\n        return result;\n    }\n","date":"2020-09-21 22:22:25","endLine":287,"groupId":"0","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3b/880d06b77a9f6987feea4db5bb288642cc29e0.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        LogicSQLContext logicSQLContext = new LogicSQLContext(schemaContext, sql, Collections.emptyList(), sqlStatement);\n        ExecutionContext result = new KernelProcessor().generateExecutionContext(logicSQLContext, schemaContexts.getProps());\n        logSQL(sql, schemaContexts.getProps(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"N"},{"authorDate":"2020-09-22 14:25:33","commitOrder":9,"curCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQLContext logicSQLContext = new LogicSQLContext(schemaContexts.getDefaultSchemaContext(), sql, new ArrayList<>(getParameters()), sqlStatement);\n        ExecutionContext result = new KernelProcessor().generateExecutionContext(logicSQLContext, schemaContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        logSQL(result);\n        return result;\n    }\n","date":"2020-09-22 14:25:33","endLine":261,"groupId":"12521","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/24/b4a680dfe7fdeb665acee649b1299878ef91ac.src","preCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQLContext logicSQLContext = new LogicSQLContext(schemaContexts.getDefaultSchemaContext(), sql, new ArrayList<>(getParameters()), sqlStatement);\n        ExecutionContext result = new KernelProcessor().generateExecutionContext(logicSQLContext, schemaContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.add(generatedKey.getGeneratedValues().getLast()));\n        logSQL(result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"M"}],"commitId":"d5289ddd2b013267b3778dcd1330391100e66df2","commitMessage":"@@@Fix bug for return generated key (#7551)\n\n* Refactor ShardingSpherePreparedStatementTest\n\n* Return all gen key\n\n* Fix bug for return generated key\n\n* Add more test case","date":"2020-09-22 14:25:33","modifiedFileCount":"7","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-01 16:19:47","codes":[{"authorDate":"2020-09-21 22:22:25","commitOrder":10,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        LogicSQLContext logicSQLContext = new LogicSQLContext(schemaContext, sql, Collections.emptyList(), sqlStatement);\n        ExecutionContext result = new KernelProcessor().generateExecutionContext(logicSQLContext, schemaContexts.getProps());\n        logSQL(sql, schemaContexts.getProps(), result);\n        return result;\n    }\n","date":"2020-09-21 22:22:25","endLine":287,"groupId":"0","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3b/880d06b77a9f6987feea4db5bb288642cc29e0.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        LogicSQLContext logicSQLContext = new LogicSQLContext(schemaContext, sql, Collections.emptyList(), sqlStatement);\n        ExecutionContext result = new KernelProcessor().generateExecutionContext(logicSQLContext, schemaContexts.getProps());\n        logSQL(sql, schemaContexts.getProps(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"N"},{"authorDate":"2020-10-01 16:19:47","commitOrder":10,"curCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        ExecutionContext result = new KernelProcessor().generateExecutionContext(logicSQL, schemaContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        logSQL(logicSQL, result);\n        return result;\n    }\n","date":"2020-10-01 16:19:47","endLine":264,"groupId":"10999","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4e/90e88ddfba98a17a07c8aa7f5ca636d41fcd4c.src","preCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQLContext logicSQLContext = new LogicSQLContext(schemaContexts.getDefaultSchemaContext(), sql, new ArrayList<>(getParameters()), sqlStatement);\n        ExecutionContext result = new KernelProcessor().generateExecutionContext(logicSQLContext, schemaContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        logSQL(result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"8e36397e3017dcf1c1cc87a293abaaa525d2cdf6","commitMessage":"@@@Move LogicSQL to infra module (#7677)\n\n* Simplify SchemaContext\n\n* Fix test cases\n\n* Refactor AbstractStatementExecutor\n\n* Use ShardingSphereSchema in LogicSQLContext\n\n* Move ShardingSphereSchema to infra module\n\n* Move LogicSQLContext to infra module\n\n* Use LogicSQLContext on SQLLogger\n\n* Rename LogicSQLContext to LogicSQL\n\n* Use LogicSQL on SQLRouteEngine","date":"2020-10-01 16:19:47","modifiedFileCount":"48","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-11 14:01:16","codes":[{"authorDate":"2020-09-21 22:22:25","commitOrder":11,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        LogicSQLContext logicSQLContext = new LogicSQLContext(schemaContext, sql, Collections.emptyList(), sqlStatement);\n        ExecutionContext result = new KernelProcessor().generateExecutionContext(logicSQLContext, schemaContexts.getProps());\n        logSQL(sql, schemaContexts.getProps(), result);\n        return result;\n    }\n","date":"2020-09-21 22:22:25","endLine":287,"groupId":"0","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3b/880d06b77a9f6987feea4db5bb288642cc29e0.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        LogicSQLContext logicSQLContext = new LogicSQLContext(schemaContext, sql, Collections.emptyList(), sqlStatement);\n        ExecutionContext result = new KernelProcessor().generateExecutionContext(logicSQLContext, schemaContexts.getProps());\n        logSQL(sql, schemaContexts.getProps(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"N"},{"authorDate":"2020-10-11 14:01:16","commitOrder":11,"curCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, schemaContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        logSQL(logicSQL, result);\n        return result;\n    }\n","date":"2020-10-11 14:01:16","endLine":267,"groupId":"10999","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/51/f72df23626a478b824484dc381bb756c98385b.src","preCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        ExecutionContext result = new KernelProcessor().generateExecutionContext(logicSQL, schemaContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        logSQL(logicSQL, result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"99ee934fa6684a07e23d4acebb500b36b0c538e7","commitMessage":"@@@Pull up kernelProcessor into class field (#7741)\n\n* Pull up kernelProcessor into class field\n\n* Revise SQLExecutor","date":"2020-10-11 14:01:16","modifiedFileCount":"6","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-12 16:19:42","codes":[{"authorDate":"2020-10-12 16:19:42","commitOrder":12,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        LogicSQL logicSQL = createLogicSQL(sql);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, schemaContexts.getDefaultSchema(), schemaContexts.getProps());\n        logSQL(logicSQL, schemaContexts.getProps(), result);\n        return result;\n    }\n","date":"2020-10-12 16:19:42","endLine":290,"groupId":"8073","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e9/e967f695db903abdfc4a2b6f8d7a241e2ae28d.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        LogicSQLContext logicSQLContext = new LogicSQLContext(schemaContext, sql, Collections.emptyList(), sqlStatement);\n        ExecutionContext result = new KernelProcessor().generateExecutionContext(logicSQLContext, schemaContexts.getProps());\n        logSQL(sql, schemaContexts.getProps(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"M"},{"authorDate":"2020-10-12 16:19:42","commitOrder":12,"curCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, schemaContexts.getDefaultSchema(), schemaContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        logSQL(logicSQL, result);\n        return result;\n    }\n","date":"2020-10-12 16:19:42","endLine":267,"groupId":"10999","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c3/53af3f0bc609ef0a86beede26d062cc84e46ea.src","preCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, schemaContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        logSQL(logicSQL, result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"61fb19d54071592f0e4e70ea78bc7cd33ff8d1df","commitMessage":"@@@Decouple LogicSQL and schema (#7753)\n\n","date":"2020-10-12 16:19:42","modifiedFileCount":"26","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-04 18:35:25","codes":[{"authorDate":"2020-11-04 18:35:25","commitOrder":13,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        LogicSQL logicSQL = createLogicSQL(sql);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, schemaContexts.getDefaultMetaData(), schemaContexts.getProps());\n        logSQL(logicSQL, schemaContexts.getProps(), result);\n        return result;\n    }\n","date":"2020-11-04 18:35:25","endLine":292,"groupId":"6693","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1d/b13c37a65724ac0a0f64785b15d31ae9109323.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        LogicSQL logicSQL = createLogicSQL(sql);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, schemaContexts.getDefaultSchema(), schemaContexts.getProps());\n        logSQL(logicSQL, schemaContexts.getProps(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"},{"authorDate":"2020-11-04 18:35:25","commitOrder":13,"curCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, schemaContexts.getDefaultMetaData(), schemaContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        logSQL(logicSQL, result);\n        return result;\n    }\n","date":"2020-11-04 18:35:25","endLine":270,"groupId":"10999","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f4/79ec77049f1cb77b536e0b668851638a1bd8e6.src","preCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, schemaContexts.getDefaultSchema(), schemaContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        logSQL(logicSQL, result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"M"}],"commitId":"d06c68303f2628c99ac5aa6e4a22d8e73bb07d7d","commitMessage":"@@@Switch class name of ShardingSphereMetaData and ShardingSphereSchema (#8026)\n\n* Remove useless ReplicaQueryTableAddressingMetaDataDecorator\n\n* Switch class name of ShardingSphereMetaData and ShardingSphereSchema","date":"2020-11-04 18:35:25","modifiedFileCount":"223","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-09 20:30:31","codes":[{"authorDate":"2020-11-09 20:30:31","commitOrder":14,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        LogicSQL logicSQL = createLogicSQL(sql);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        logSQL(logicSQL, metaDataContexts.getProps(), result);\n        return result;\n    }\n","date":"2020-11-09 20:30:31","endLine":292,"groupId":"6693","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/df/3b37c8e772f9a2f8d6a3063716ef8967d562ef.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        LogicSQL logicSQL = createLogicSQL(sql);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, schemaContexts.getDefaultMetaData(), schemaContexts.getProps());\n        logSQL(logicSQL, schemaContexts.getProps(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"},{"authorDate":"2020-11-09 20:30:31","commitOrder":14,"curCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        logSQL(logicSQL, result);\n        return result;\n    }\n","date":"2020-11-09 20:30:31","endLine":270,"groupId":"10999","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2d/8ff5a6d334f3b08650d8690333b800033b8be4.src","preCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, schemaContexts.getDefaultMetaData(), schemaContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        logSQL(logicSQL, result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"M"}],"commitId":"a6b2375ce66834335447254a0309cba2b3f71510","commitMessage":"@@@Rename MetaDataContexts (#8101)\n\n* Rename MetaDataContexts\n\n* Rename package name","date":"2020-11-09 20:30:31","modifiedFileCount":"92","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-02-09 15:32:17","codes":[{"authorDate":"2020-11-09 20:30:31","commitOrder":15,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        LogicSQL logicSQL = createLogicSQL(sql);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        logSQL(logicSQL, metaDataContexts.getProps(), result);\n        return result;\n    }\n","date":"2020-11-09 20:30:31","endLine":292,"groupId":"6693","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/df/3b37c8e772f9a2f8d6a3063716ef8967d562ef.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        LogicSQL logicSQL = createLogicSQL(sql);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        logSQL(logicSQL, metaDataContexts.getProps(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"N"},{"authorDate":"2021-02-09 15:32:17","commitOrder":15,"curCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        SQLCheckEngine.check(logicSQL.getSqlStatementContext().getSqlStatement(), logicSQL.getParameters(), metaDataContexts.getDefaultMetaData(), metaDataContexts.getAuthentication());\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        return result;\n    }\n","date":"2021-02-09 15:32:17","endLine":363,"groupId":"11351","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/49/cbf82a52bbf787055851a5ed0bebb4d3f6c907.src","preCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        logSQL(logicSQL, result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"M"}],"commitId":"02dd36919cbba0ce1da9547a549b7b4f8e676ab1","commitMessage":"@@@Refactor SQLAuditEngine (#9397)\n\n* Adjust packages\n\n* Refactor SQLAuditEngine\n\n* Refactor SQLAuditEngine\n\n* check style","date":"2021-02-09 15:32:17","modifiedFileCount":"6","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-04-01 18:29:09","codes":[{"authorDate":"2020-11-09 20:30:31","commitOrder":16,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        LogicSQL logicSQL = createLogicSQL(sql);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        logSQL(logicSQL, metaDataContexts.getProps(), result);\n        return result;\n    }\n","date":"2020-11-09 20:30:31","endLine":292,"groupId":"6693","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/df/3b37c8e772f9a2f8d6a3063716ef8967d562ef.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        LogicSQL logicSQL = createLogicSQL(sql);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        logSQL(logicSQL, metaDataContexts.getProps(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"N"},{"authorDate":"2021-04-01 18:29:09","commitOrder":16,"curCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        SQLCheckEngine.check(logicSQL.getSqlStatementContext().getSqlStatement(), logicSQL.getParameters(), metaDataContexts.getDefaultMetaData(), null);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        return result;\n    }\n","date":"2021-04-01 18:29:09","endLine":364,"groupId":"10999","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c9/49d2c650eeff0e3fdde1b89e81b4fc5417e551.src","preCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        SQLCheckEngine.check(logicSQL.getSqlStatementContext().getSqlStatement(), logicSQL.getParameters(), metaDataContexts.getDefaultMetaData(), metaDataContexts.getAuthentication());\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"M"}],"commitId":"4954616af3db97b031b8a2005b2e40062b390929","commitMessage":"@@@Add AuthenticationContext and ShardingSphereUsers (#9906)\n\n* Add AuthenticationContext and ShardingSphereUsers\n\n* Remove MetaDataContexts.getAuthentication()\n\n* Fix test case\n\n* Move AuthenticationContext\n\n* Refactor SQLChecker\n\n* Use SQLChecker to check authrity\n\n* Fix compile error","date":"2021-04-01 18:29:09","modifiedFileCount":"53","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-04-10 23:01:34","codes":[{"authorDate":"2020-11-09 20:30:31","commitOrder":17,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        LogicSQL logicSQL = createLogicSQL(sql);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        logSQL(logicSQL, metaDataContexts.getProps(), result);\n        return result;\n    }\n","date":"2020-11-09 20:30:31","endLine":292,"groupId":"6693","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/df/3b37c8e772f9a2f8d6a3063716ef8967d562ef.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        LogicSQL logicSQL = createLogicSQL(sql);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        logSQL(logicSQL, metaDataContexts.getProps(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"N"},{"authorDate":"2021-04-10 23:01:34","commitOrder":17,"curCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        SQLCheckEngine.check(logicSQL.getSqlStatementContext().getSqlStatement(), logicSQL.getParameters(), metaDataContexts.getDefaultMetaData(), metaDataContexts.getGlobalRuleMetaData(), null);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        return result;\n    }\n","date":"2021-04-10 23:01:34","endLine":365,"groupId":"10999","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/23/6d0e1699f175439c8347438c6eca1463d76b44.src","preCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        SQLCheckEngine.check(logicSQL.getSqlStatementContext().getSqlStatement(), logicSQL.getParameters(), metaDataContexts.getDefaultMetaData(), null);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"M"}],"commitId":"c6c8eda9fdca8d6c9af332ee4382189528758a89","commitMessage":"@@@Remove AuthorityContext and refactor SQLCheckEngine (#10032)\n\n* Remove AuthorityContext\n\n* Refactor SQLCheckEngine","date":"2021-04-10 23:01:34","modifiedFileCount":"15","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-04-11 11:43:30","codes":[{"authorDate":"2020-11-09 20:30:31","commitOrder":18,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        LogicSQL logicSQL = createLogicSQL(sql);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        logSQL(logicSQL, metaDataContexts.getProps(), result);\n        return result;\n    }\n","date":"2020-11-09 20:30:31","endLine":292,"groupId":"6693","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/df/3b37c8e772f9a2f8d6a3063716ef8967d562ef.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        LogicSQL logicSQL = createLogicSQL(sql);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        logSQL(logicSQL, metaDataContexts.getProps(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"N"},{"authorDate":"2021-04-11 11:43:30","commitOrder":18,"curCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        SQLCheckEngine.check(logicSQL.getSqlStatementContext().getSqlStatement(), logicSQL.getParameters(), metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules(), null);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        return result;\n    }\n","date":"2021-04-11 11:43:30","endLine":365,"groupId":"0","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/16/76c65455032363e709c1f96d6d3471ecd41bcc.src","preCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        SQLCheckEngine.check(logicSQL.getSqlStatementContext().getSqlStatement(), logicSQL.getParameters(), metaDataContexts.getDefaultMetaData(), metaDataContexts.getGlobalRuleMetaData(), null);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"M"}],"commitId":"30881543fc20d5fd3ebfde523aafaf425cfcb782","commitMessage":"@@@Refactor SQLCheckEngine to rules based (#10034)\n\n","date":"2021-04-11 11:43:30","modifiedFileCount":"12","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-04-11 23:08:40","codes":[{"authorDate":"2021-04-11 23:08:40","commitOrder":19,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        LogicSQL logicSQL = createLogicSQL(sql);\n        SQLCheckEngine.check(logicSQL.getSqlStatementContext().getSqlStatement(), logicSQL.getParameters(), \n                metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules(), DefaultSchema.LOGIC_NAME, metaDataContexts.getMetaDataMap(), null);\n        return kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n    }\n","date":"2021-04-11 23:08:40","endLine":414,"groupId":"6599","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c8/df4b6b7ced3a3fe1ef842f9e3234702f207dca.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        LogicSQL logicSQL = createLogicSQL(sql);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        logSQL(logicSQL, metaDataContexts.getProps(), result);\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"M"},{"authorDate":"2021-04-11 23:08:40","commitOrder":19,"curCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        SQLCheckEngine.check(logicSQL.getSqlStatementContext().getSqlStatement(), logicSQL.getParameters(), \n                metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules(), DefaultSchema.LOGIC_NAME, metaDataContexts.getMetaDataMap(), null);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        return result;\n    }\n","date":"2021-04-11 23:08:40","endLine":366,"groupId":"7153","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/98/f360dbc95b9a0ced8f1bdc2e3bc122fdf97a89.src","preCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        SQLCheckEngine.check(logicSQL.getSqlStatementContext().getSqlStatement(), logicSQL.getParameters(), metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules(), null);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"M"}],"commitId":"a5a1f2c731e6ea2464e7aae2da668bb38d827fd2","commitMessage":"@@@Add currentSchema and metaDataMap for SQLChecker.check() (#10038)\n\n* Update javadoc\n\n* Update javadoc\n\n* For code format\n\n* Refactor StoragePrivilegeBuilder\n\n* Add currentSchema and metaDataMap for SQLChecker.check()","date":"2021-04-11 23:08:40","modifiedFileCount":"8","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-09 16:45:36","codes":[{"authorDate":"2021-08-09 16:45:36","commitOrder":20,"curCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        LogicSQL logicSQL = createLogicSQL(sql);\n        SQLCheckEngine.check(logicSQL.getSqlStatementContext().getSqlStatement(), logicSQL.getParameters(), \n                metaDataContexts.getMetaData(connection.getSchemaName()).getRuleMetaData().getRules(), connection.getSchemaName(), metaDataContexts.getMetaDataMap(), null);\n        return kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getMetaData(connection.getSchemaName()), metaDataContexts.getProps());\n    }\n","date":"2021-08-09 16:45:36","endLine":375,"groupId":"101203","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"createExecutionContext","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d2/e584707f24bd62d48cc852cbeea49da6462e7e.src","preCode":"    private ExecutionContext createExecutionContext(final String sql) throws SQLException {\n        clearStatements();\n        LogicSQL logicSQL = createLogicSQL(sql);\n        SQLCheckEngine.check(logicSQL.getSqlStatementContext().getSqlStatement(), logicSQL.getParameters(), \n                metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules(), DefaultSchema.LOGIC_NAME, metaDataContexts.getMetaDataMap(), null);\n        return kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"M"},{"authorDate":"2021-08-09 16:45:36","commitOrder":20,"curCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        SQLCheckEngine.check(logicSQL.getSqlStatementContext().getSqlStatement(), logicSQL.getParameters(), \n                metaDataContexts.getMetaData(connection.getSchemaName()).getRuleMetaData().getRules(), connection.getSchemaName(), metaDataContexts.getMetaDataMap(), null);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getMetaData(connection.getSchemaName()), metaDataContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        return result;\n    }\n","date":"2021-08-09 16:45:36","endLine":364,"groupId":"101203","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecutionContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/50/baeaf18c596da58f3517bd1589948bda40a605.src","preCode":"    private ExecutionContext createExecutionContext() {\n        LogicSQL logicSQL = createLogicSQL();\n        SQLCheckEngine.check(logicSQL.getSqlStatementContext().getSqlStatement(), logicSQL.getParameters(), \n                metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules(), DefaultSchema.LOGIC_NAME, metaDataContexts.getMetaDataMap(), null);\n        ExecutionContext result = kernelProcessor.generateExecutionContext(logicSQL, metaDataContexts.getDefaultMetaData(), metaDataContexts.getProps());\n        findGeneratedKey(result).ifPresent(generatedKey -> generatedValues.addAll(generatedKey.getGeneratedValues()));\n        return result;\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"M"}],"commitId":"222aeb59cc07d5eb3edc858c68b9d95cc903bcec","commitMessage":"@@@JDBC-core module delete getDefaultMetaData() (#11714)\n\n* jdbc-core module delete getDefaultMetaData()\n\n* update\n\n* optimization","date":"2021-08-09 16:45:36","modifiedFileCount":"22","status":"M","submitter":"zhaojinchao"}]
