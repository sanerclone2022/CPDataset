[{"authorTime":"2020-10-22 20:53:42","codes":[{"authorDate":"2020-10-22 20:53:42","commitOrder":1,"curCode":"    public ASTNode visitAssignmentValue(final MySQLStatementParser.AssignmentValueContext ctx) {\n        ExprContext expr = ctx.expr();\n        if (null != expr) {\n            ASTNode result = visit(expr);\n            if (result instanceof ColumnSegment) {\n                return new CommonExpressionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), ctx.getText());\n            } else {\n                return result;\n            }\n        }\n        return new CommonExpressionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), ctx.getText());\n    }\n","date":"2020-10-22 20:53:42","endLine":911,"groupId":"10393","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"visitAssignmentValue","params":"(finalMySQLStatementParser.AssignmentValueContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0a/89cc0e02e2670f6f8473ef3801a86053637eba.src","preCode":"    public ASTNode visitAssignmentValue(final MySQLStatementParser.AssignmentValueContext ctx) {\n        ExprContext expr = ctx.expr();\n        if (null != expr) {\n            ASTNode result = visit(expr);\n            if (result instanceof ColumnSegment) {\n                return new CommonExpressionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), ctx.getText());\n            } else {\n                return result;\n            }\n        }\n        return new CommonExpressionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), ctx.getText());\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":900,"status":"B"},{"authorDate":"2020-10-22 20:53:42","commitOrder":1,"curCode":"    private ProjectionSegment generateProjectFromFuncApplication(final FuncApplicationContext ctx) {\n        String aggregationType = ctx.funcName().getText();\n        if (AggregationType.isAggregationType(aggregationType)) {\n            return createAggregationSegment(ctx, aggregationType);\n        }\n        return new ExpressionProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), ctx.getText());\n    }\n","date":"2020-10-22 20:53:42","endLine":332,"groupId":"6457","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"generateProjectFromFuncApplication","params":"(finalFuncApplicationContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6c/bed09c6d4c22281d0397805404c0b4f609eb4b.src","preCode":"    private ProjectionSegment generateProjectFromFuncApplication(final FuncApplicationContext ctx) {\n        String aggregationType = ctx.funcName().getText();\n        if (AggregationType.isAggregationType(aggregationType)) {\n            return createAggregationSegment(ctx, aggregationType);\n        }\n        return new ExpressionProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), ctx.getText());\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/java/org/apache/shardingsphere/sql/parser/postgresql/visitor/statement/impl/PostgreSQLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"B"}],"commitId":"07d1a8f96418e776a4e44de6610500f428d2c30b","commitMessage":"@@@refactor SQLVisitorFacadeFactory (#7891)\n\n","date":"2020-10-22 20:53:42","modifiedFileCount":"21","status":"B","submitter":"Juan Pan(Trista)"},{"authorTime":"2020-10-22 20:53:42","codes":[{"authorDate":"2020-11-16 12:59:49","commitOrder":2,"curCode":"    public ASTNode visitAssignmentValue(final AssignmentValueContext ctx) {\n        ExprContext expr = ctx.expr();\n        if (null != expr) {\n            ASTNode result = visit(expr);\n            if (result instanceof ColumnSegment) {\n                return new CommonExpressionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), ctx.getText());\n            } else {\n                return result;\n            }\n        }\n        return new CommonExpressionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), ctx.getText());\n    }\n","date":"2020-11-16 12:59:49","endLine":1010,"groupId":"101466","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"visitAssignmentValue","params":"(finalAssignmentValueContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8f/addd9c26cc0a8ac9e954ca68fb7aae7725a7ea.src","preCode":"    public ASTNode visitAssignmentValue(final MySQLStatementParser.AssignmentValueContext ctx) {\n        ExprContext expr = ctx.expr();\n        if (null != expr) {\n            ASTNode result = visit(expr);\n            if (result instanceof ColumnSegment) {\n                return new CommonExpressionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), ctx.getText());\n            } else {\n                return result;\n            }\n        }\n        return new CommonExpressionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), ctx.getText());\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":999,"status":"M"},{"authorDate":"2020-10-22 20:53:42","commitOrder":2,"curCode":"    private ProjectionSegment generateProjectFromFuncApplication(final FuncApplicationContext ctx) {\n        String aggregationType = ctx.funcName().getText();\n        if (AggregationType.isAggregationType(aggregationType)) {\n            return createAggregationSegment(ctx, aggregationType);\n        }\n        return new ExpressionProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), ctx.getText());\n    }\n","date":"2020-10-22 20:53:42","endLine":332,"groupId":"101466","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"generateProjectFromFuncApplication","params":"(finalFuncApplicationContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6c/bed09c6d4c22281d0397805404c0b4f609eb4b.src","preCode":"    private ProjectionSegment generateProjectFromFuncApplication(final FuncApplicationContext ctx) {\n        String aggregationType = ctx.funcName().getText();\n        if (AggregationType.isAggregationType(aggregationType)) {\n            return createAggregationSegment(ctx, aggregationType);\n        }\n        return new ExpressionProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), ctx.getText());\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/java/org/apache/shardingsphere/sql/parser/postgresql/visitor/statement/impl/PostgreSQLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"N"}],"commitId":"37bee90a59cc18242274e37895d7b22b51356031","commitMessage":"@@@Format input parameters for MySQL and Oracle visitor functions (#8149)\n\n* Format input parameters for msql visitor functions\n\n* Format input parameters for oracle visitor functions\n\n* Delete git\n\ndelete invalid file\n\n* Format input parameters for Oracle visitor functions\n\n* format\n\n* format-add four blank at empty line","date":"2020-11-16 12:59:49","modifiedFileCount":"4","status":"M","submitter":"wenweibin"}]
