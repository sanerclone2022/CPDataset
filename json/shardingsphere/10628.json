[{"authorTime":"2021-08-12 13:09:05","codes":[{"authorDate":"2021-08-12 13:09:05","commitOrder":1,"curCode":"    private BindingTableRule createBindingTableRule() {\n        Map<String, TableRule> tableRules = Stream.of(createTableRule(), createSubTableRule())\n                .collect(Collectors.toMap(TableRule::getLogicTable, Function.identity(), (oldValue, currentValue) -> oldValue, LinkedHashMap::new));\n        BindingTableRule result = new BindingTableRule();\n        result.getTableRules().putAll(tableRules);\n        return result;\n    }\n","date":"2021-08-12 13:09:05","endLine":87,"groupId":"2218","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createBindingTableRule","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/87/9f4eafb092e07413d8a33eba11a9ebc69431cd.src","preCode":"    private BindingTableRule createBindingTableRule() {\n        Map<String, TableRule> tableRules = Stream.of(createTableRule(), createSubTableRule())\n                .collect(Collectors.toMap(TableRule::getLogicTable, Function.identity(), (oldValue, currentValue) -> oldValue, LinkedHashMap::new));\n        BindingTableRule result = new BindingTableRule();\n        result.getTableRules().putAll(tableRules);\n        return result;\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rule/BindingTableRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"},{"authorDate":"2021-08-12 13:09:05","commitOrder":1,"curCode":"    private BindingTableRule createBindingTableRule(final String bindingTableGroup) {\n        Map<String, TableRule> tableRules = Splitter.on(\",\").trimResults().splitToList(bindingTableGroup).stream()\n                .map(this::getTableRule).collect(Collectors.toMap(TableRule::getLogicTable, Function.identity(), (oldValue, currentValue) -> oldValue, LinkedHashMap::new));\n        BindingTableRule result = new BindingTableRule();\n        result.getTableRules().putAll(tableRules);\n        return result;\n    }\n","date":"2021-08-12 13:09:05","endLine":185,"groupId":"2218","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createBindingTableRule","params":"(finalStringbindingTableGroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a9/c2da9add519ff40db14abd6ee9ff6d885ea7a0.src","preCode":"    private BindingTableRule createBindingTableRule(final String bindingTableGroup) {\n        Map<String, TableRule> tableRules = Splitter.on(\",\").trimResults().splitToList(bindingTableGroup).stream()\n                .map(this::getTableRule).collect(Collectors.toMap(TableRule::getLogicTable, Function.identity(), (oldValue, currentValue) -> oldValue, LinkedHashMap::new));\n        BindingTableRule result = new BindingTableRule();\n        result.getTableRules().putAll(tableRules);\n        return result;\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/rule/ShardingRule.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"}],"commitId":"4f55a0a00ecd53843b384a541f8d0e53c5601d1d","commitMessage":"@@@sharding rule performance optimization (#11777)\n\n* sharding rule performance optimization\n\n* minor refactor\n\n* fix test case\n\n* fix test case\n\n* fix checkstyle","date":"2021-08-12 13:09:05","modifiedFileCount":"6","status":"B","submitter":"Zhengqiang Duan"},{"authorTime":"2021-09-02 17:34:21","codes":[{"authorDate":"2021-09-02 17:34:21","commitOrder":2,"curCode":"    private BindingTableRule createBindingTableRule() {\n        Map<String, TableRule> tableRules = Stream.of(createTableRule(), createSubTableRule())\n                .collect(Collectors.toMap(each -> each.getLogicTable().toLowerCase(), Function.identity(), (oldValue, currentValue) -> oldValue, LinkedHashMap::new));\n        BindingTableRule result = new BindingTableRule();\n        result.getTableRules().putAll(tableRules);\n        return result;\n    }\n","date":"2021-09-02 17:34:21","endLine":87,"groupId":"10628","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"createBindingTableRule","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/29/0de14fb999b34c779ba679d5df852a7bc0c102.src","preCode":"    private BindingTableRule createBindingTableRule() {\n        Map<String, TableRule> tableRules = Stream.of(createTableRule(), createSubTableRule())\n                .collect(Collectors.toMap(TableRule::getLogicTable, Function.identity(), (oldValue, currentValue) -> oldValue, LinkedHashMap::new));\n        BindingTableRule result = new BindingTableRule();\n        result.getTableRules().putAll(tableRules);\n        return result;\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rule/BindingTableRuleTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2021-09-02 17:34:21","commitOrder":2,"curCode":"    private BindingTableRule createBindingTableRule(final String bindingTableGroup) {\n        Map<String, TableRule> tableRules = Splitter.on(\",\").trimResults().splitToList(bindingTableGroup).stream()\n                .map(this::getTableRule).collect(Collectors.toMap(each -> each.getLogicTable().toLowerCase(), Function.identity(), (oldValue, currentValue) -> oldValue, LinkedHashMap::new));\n        BindingTableRule result = new BindingTableRule();\n        result.getTableRules().putAll(tableRules);\n        return result;\n    }\n","date":"2021-09-02 17:34:21","endLine":184,"groupId":"10628","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createBindingTableRule","params":"(finalStringbindingTableGroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e6/7b76804f10f3b74a4d06bab6b8aaf7e5e2b6b6.src","preCode":"    private BindingTableRule createBindingTableRule(final String bindingTableGroup) {\n        Map<String, TableRule> tableRules = Splitter.on(\",\").trimResults().splitToList(bindingTableGroup).stream()\n                .map(this::getTableRule).collect(Collectors.toMap(TableRule::getLogicTable, Function.identity(), (oldValue, currentValue) -> oldValue, LinkedHashMap::new));\n        BindingTableRule result = new BindingTableRule();\n        result.getTableRules().putAll(tableRules);\n        return result;\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/rule/ShardingRule.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"}],"commitId":"1301a41807eda152b17ef78fe084bc2d4e9d368e","commitMessage":"@@@fix calcite exception when user execute sql with lowercase (#12125)\n\n* fix calcite execute error with oracle statement\n\n* add test case\n\n* modify map to case insensitive\n\n* fix test case\n\n* add test case for federate refresh test\n\n* optimize code\n\n* optimize code\n\n* optimize test case\n\n* optimize test case\n\n* optimize federate logic\n\n* optimize code","date":"2021-09-02 17:34:21","modifiedFileCount":"18","status":"M","submitter":"Zhengqiang Duan"}]
