[{"authorTime":"2021-01-07 22:10:53","codes":[{"authorDate":"2021-05-01 18:10:08","commitOrder":3,"curCode":"    public void updatePrimaryDataSource() {\n        List<DataSource> dataSources = new LinkedList<>();\n        List<Connection> connections = new LinkedList<>();\n        List<Statement> statements = new LinkedList<>();\n        List<ResultSet> resultSets = new LinkedList<>();\n        List<DatabaseMetaData> databaseMetaData = new LinkedList<>();\n        for (int i = 0; i < 3; i++) {\n            dataSources.add(mock(DataSource.class));\n            connections.add(mock(Connection.class));\n            statements.add(mock(Statement.class));\n            resultSets.add(mock(ResultSet.class));\n            databaseMetaData.add(mock(DatabaseMetaData.class));\n        }\n        String sql = \"SELECT MEMBER_HOST, MEMBER_PORT FROM performance_schema.replication_group_members WHERE MEMBER_ID = \"\n                + \"(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME = 'group_replication_primary_member')\";\n        try {\n            for (int i = 0; i < 3; i++) {\n                when(dataSources.get(i).getConnection()).thenReturn(connections.get(i));\n                when(connections.get(i).createStatement()).thenReturn(statements.get(i));\n                when(statements.get(i).executeQuery(sql)).thenReturn(resultSets.get(i));\n                when(resultSets.get(i).next()).thenReturn(true, false);\n                when(resultSets.get(i).getString(\"MEMBER_HOST\")).thenReturn(\"127.0.0.1\");\n                when(resultSets.get(i).getString(\"MEMBER_PORT\")).thenReturn(Integer.toString(3306 + i));\n                when(connections.get(i).getMetaData()).thenReturn(databaseMetaData.get(i));\n                when(databaseMetaData.get(i).getURL()).thenReturn(\"jdbc:mysql://127.0.0.1:\" + (3306 + i) + \"/ds_0?serverTimezone=UTC&useSSL=false\");\n            }\n        } catch (final SQLException ex) {\n            throw new ShardingSphereException(ex);\n        }\n        Map<String, DataSource> dataSourceMap = new HashMap<>(3, 1);\n        for (int i = 0; i < 3; i++) {\n            dataSourceMap.put(String.format(\"ds_%s\", i), dataSources.get(i));\n        }\n        mgrHaType.getProps().setProperty(\"groupName\", \"group_name\");\n        mgrHaType.updatePrimaryDataSource(dataSourceMap, \"discovery_db\", Collections.emptySet(), \"group_name\", null);\n        assertThat(mgrHaType.getPrimaryDataSource(), is(\"ds_2\"));\n    }\n","date":"2021-05-01 18:10:08","endLine":119,"groupId":"652","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"updatePrimaryDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d3/0fcb124ecc5a5c85afcd655a0c7fb03776a8ea.src","preCode":"    public void updatePrimaryDataSource() {\n        List<DataSource> dataSources = new LinkedList<>();\n        List<Connection> connections = new LinkedList<>();\n        List<Statement> statements = new LinkedList<>();\n        List<ResultSet> resultSets = new LinkedList<>();\n        List<DatabaseMetaData> databaseMetaData = new LinkedList<>();\n        for (int i = 0; i < 3; i++) {\n            dataSources.add(mock(DataSource.class));\n            connections.add(mock(Connection.class));\n            statements.add(mock(Statement.class));\n            resultSets.add(mock(ResultSet.class));\n            databaseMetaData.add(mock(DatabaseMetaData.class));\n        }\n        String sql = \"SELECT MEMBER_HOST, MEMBER_PORT FROM performance_schema.replication_group_members WHERE MEMBER_ID = \"\n                + \"(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME = 'group_replication_primary_member')\";\n        try {\n            for (int i = 0; i < 3; i++) {\n                when(dataSources.get(i).getConnection()).thenReturn(connections.get(i));\n                when(connections.get(i).createStatement()).thenReturn(statements.get(i));\n                when(statements.get(i).executeQuery(sql)).thenReturn(resultSets.get(i));\n                when(resultSets.get(i).next()).thenReturn(true, false);\n                when(resultSets.get(i).getString(\"MEMBER_HOST\")).thenReturn(\"127.0.0.1\");\n                when(resultSets.get(i).getString(\"MEMBER_PORT\")).thenReturn(Integer.toString(3306 + i));\n                when(connections.get(i).getMetaData()).thenReturn(databaseMetaData.get(i));\n                when(databaseMetaData.get(i).getURL()).thenReturn(\"jdbc:mysql://127.0.0.1:\" + (3306 + i) + \"/ds_0?serverTimezone=UTC&useSSL=false\");\n            }\n        } catch (final SQLException ex) {\n            throw new ShardingSphereException(ex);\n        }\n        Map<String, DataSource> dataSourceMap = new HashMap<>(3, 1);\n        for (int i = 0; i < 3; i++) {\n            dataSourceMap.put(String.format(\"ds_%s\", i), dataSources.get(i));\n        }\n        mgrHaType.getProps().setProperty(\"groupName\", \"group_name\");\n        mgrHaType.updatePrimaryDataSource(dataSourceMap, \"discovery_db\", Collections.emptySet(), \"group_name\", null);\n        assertThat(mgrHaType.getPrimaryDataSource(), is(\"ds_2\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-provider/shardingsphere-db-discovery-mgr/src/test/java/org/apache/shardingsphere/dbdiscovery/mgr/MGRDatabaseDiscoveryTypeTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"},{"authorDate":"2021-01-07 22:10:53","commitOrder":3,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-01-07 22:10:53","endLine":97,"groupId":"3497","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fc/066bafdad631bce779fae07fa69bd39d3a04bd.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/UnicastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"NB"}],"commitId":"0c1a59f202af796493b279157538e3e460b4f823","commitMessage":"@@@Rename package name from db.discovery to dbdiscovery (#10232)\n\n","date":"2021-05-01 18:10:08","modifiedFileCount":"4","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-05 15:36:01","codes":[{"authorDate":"2021-05-01 18:10:08","commitOrder":4,"curCode":"    public void updatePrimaryDataSource() {\n        List<DataSource> dataSources = new LinkedList<>();\n        List<Connection> connections = new LinkedList<>();\n        List<Statement> statements = new LinkedList<>();\n        List<ResultSet> resultSets = new LinkedList<>();\n        List<DatabaseMetaData> databaseMetaData = new LinkedList<>();\n        for (int i = 0; i < 3; i++) {\n            dataSources.add(mock(DataSource.class));\n            connections.add(mock(Connection.class));\n            statements.add(mock(Statement.class));\n            resultSets.add(mock(ResultSet.class));\n            databaseMetaData.add(mock(DatabaseMetaData.class));\n        }\n        String sql = \"SELECT MEMBER_HOST, MEMBER_PORT FROM performance_schema.replication_group_members WHERE MEMBER_ID = \"\n                + \"(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME = 'group_replication_primary_member')\";\n        try {\n            for (int i = 0; i < 3; i++) {\n                when(dataSources.get(i).getConnection()).thenReturn(connections.get(i));\n                when(connections.get(i).createStatement()).thenReturn(statements.get(i));\n                when(statements.get(i).executeQuery(sql)).thenReturn(resultSets.get(i));\n                when(resultSets.get(i).next()).thenReturn(true, false);\n                when(resultSets.get(i).getString(\"MEMBER_HOST\")).thenReturn(\"127.0.0.1\");\n                when(resultSets.get(i).getString(\"MEMBER_PORT\")).thenReturn(Integer.toString(3306 + i));\n                when(connections.get(i).getMetaData()).thenReturn(databaseMetaData.get(i));\n                when(databaseMetaData.get(i).getURL()).thenReturn(\"jdbc:mysql://127.0.0.1:\" + (3306 + i) + \"/ds_0?serverTimezone=UTC&useSSL=false\");\n            }\n        } catch (final SQLException ex) {\n            throw new ShardingSphereException(ex);\n        }\n        Map<String, DataSource> dataSourceMap = new HashMap<>(3, 1);\n        for (int i = 0; i < 3; i++) {\n            dataSourceMap.put(String.format(\"ds_%s\", i), dataSources.get(i));\n        }\n        mgrHaType.getProps().setProperty(\"groupName\", \"group_name\");\n        mgrHaType.updatePrimaryDataSource(dataSourceMap, \"discovery_db\", Collections.emptySet(), \"group_name\", null);\n        assertThat(mgrHaType.getPrimaryDataSource(), is(\"ds_2\"));\n    }\n","date":"2021-05-01 18:10:08","endLine":119,"groupId":"652","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"updatePrimaryDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d3/0fcb124ecc5a5c85afcd655a0c7fb03776a8ea.src","preCode":"    public void updatePrimaryDataSource() {\n        List<DataSource> dataSources = new LinkedList<>();\n        List<Connection> connections = new LinkedList<>();\n        List<Statement> statements = new LinkedList<>();\n        List<ResultSet> resultSets = new LinkedList<>();\n        List<DatabaseMetaData> databaseMetaData = new LinkedList<>();\n        for (int i = 0; i < 3; i++) {\n            dataSources.add(mock(DataSource.class));\n            connections.add(mock(Connection.class));\n            statements.add(mock(Statement.class));\n            resultSets.add(mock(ResultSet.class));\n            databaseMetaData.add(mock(DatabaseMetaData.class));\n        }\n        String sql = \"SELECT MEMBER_HOST, MEMBER_PORT FROM performance_schema.replication_group_members WHERE MEMBER_ID = \"\n                + \"(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME = 'group_replication_primary_member')\";\n        try {\n            for (int i = 0; i < 3; i++) {\n                when(dataSources.get(i).getConnection()).thenReturn(connections.get(i));\n                when(connections.get(i).createStatement()).thenReturn(statements.get(i));\n                when(statements.get(i).executeQuery(sql)).thenReturn(resultSets.get(i));\n                when(resultSets.get(i).next()).thenReturn(true, false);\n                when(resultSets.get(i).getString(\"MEMBER_HOST\")).thenReturn(\"127.0.0.1\");\n                when(resultSets.get(i).getString(\"MEMBER_PORT\")).thenReturn(Integer.toString(3306 + i));\n                when(connections.get(i).getMetaData()).thenReturn(databaseMetaData.get(i));\n                when(databaseMetaData.get(i).getURL()).thenReturn(\"jdbc:mysql://127.0.0.1:\" + (3306 + i) + \"/ds_0?serverTimezone=UTC&useSSL=false\");\n            }\n        } catch (final SQLException ex) {\n            throw new ShardingSphereException(ex);\n        }\n        Map<String, DataSource> dataSourceMap = new HashMap<>(3, 1);\n        for (int i = 0; i < 3; i++) {\n            dataSourceMap.put(String.format(\"ds_%s\", i), dataSources.get(i));\n        }\n        mgrHaType.getProps().setProperty(\"groupName\", \"group_name\");\n        mgrHaType.updatePrimaryDataSource(dataSourceMap, \"discovery_db\", Collections.emptySet(), \"group_name\", null);\n        assertThat(mgrHaType.getPrimaryDataSource(), is(\"ds_2\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-provider/shardingsphere-db-discovery-mgr/src/test/java/org/apache/shardingsphere/dbdiscovery/mgr/MGRDatabaseDiscoveryTypeTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"N"},{"authorDate":"2021-08-05 15:36:01","commitOrder":4,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-08-05 15:36:01","endLine":98,"groupId":"3497","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/77/807084aa5df147561fcf9940d5fb07670df749.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/UnicastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"d6daa411a55ec225fb40ac205046f6a47d532fb2","commitMessage":"@@@Check the initial capacity of HashMap (#11544)\n\n","date":"2021-08-05 15:36:01","modifiedFileCount":"12","status":"M","submitter":"yx9o"},{"authorTime":"2021-08-30 15:26:41","codes":[{"authorDate":"2021-05-01 18:10:08","commitOrder":5,"curCode":"    public void updatePrimaryDataSource() {\n        List<DataSource> dataSources = new LinkedList<>();\n        List<Connection> connections = new LinkedList<>();\n        List<Statement> statements = new LinkedList<>();\n        List<ResultSet> resultSets = new LinkedList<>();\n        List<DatabaseMetaData> databaseMetaData = new LinkedList<>();\n        for (int i = 0; i < 3; i++) {\n            dataSources.add(mock(DataSource.class));\n            connections.add(mock(Connection.class));\n            statements.add(mock(Statement.class));\n            resultSets.add(mock(ResultSet.class));\n            databaseMetaData.add(mock(DatabaseMetaData.class));\n        }\n        String sql = \"SELECT MEMBER_HOST, MEMBER_PORT FROM performance_schema.replication_group_members WHERE MEMBER_ID = \"\n                + \"(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME = 'group_replication_primary_member')\";\n        try {\n            for (int i = 0; i < 3; i++) {\n                when(dataSources.get(i).getConnection()).thenReturn(connections.get(i));\n                when(connections.get(i).createStatement()).thenReturn(statements.get(i));\n                when(statements.get(i).executeQuery(sql)).thenReturn(resultSets.get(i));\n                when(resultSets.get(i).next()).thenReturn(true, false);\n                when(resultSets.get(i).getString(\"MEMBER_HOST\")).thenReturn(\"127.0.0.1\");\n                when(resultSets.get(i).getString(\"MEMBER_PORT\")).thenReturn(Integer.toString(3306 + i));\n                when(connections.get(i).getMetaData()).thenReturn(databaseMetaData.get(i));\n                when(databaseMetaData.get(i).getURL()).thenReturn(\"jdbc:mysql://127.0.0.1:\" + (3306 + i) + \"/ds_0?serverTimezone=UTC&useSSL=false\");\n            }\n        } catch (final SQLException ex) {\n            throw new ShardingSphereException(ex);\n        }\n        Map<String, DataSource> dataSourceMap = new HashMap<>(3, 1);\n        for (int i = 0; i < 3; i++) {\n            dataSourceMap.put(String.format(\"ds_%s\", i), dataSources.get(i));\n        }\n        mgrHaType.getProps().setProperty(\"groupName\", \"group_name\");\n        mgrHaType.updatePrimaryDataSource(dataSourceMap, \"discovery_db\", Collections.emptySet(), \"group_name\", null);\n        assertThat(mgrHaType.getPrimaryDataSource(), is(\"ds_2\"));\n    }\n","date":"2021-05-01 18:10:08","endLine":119,"groupId":"652","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"updatePrimaryDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d3/0fcb124ecc5a5c85afcd655a0c7fb03776a8ea.src","preCode":"    public void updatePrimaryDataSource() {\n        List<DataSource> dataSources = new LinkedList<>();\n        List<Connection> connections = new LinkedList<>();\n        List<Statement> statements = new LinkedList<>();\n        List<ResultSet> resultSets = new LinkedList<>();\n        List<DatabaseMetaData> databaseMetaData = new LinkedList<>();\n        for (int i = 0; i < 3; i++) {\n            dataSources.add(mock(DataSource.class));\n            connections.add(mock(Connection.class));\n            statements.add(mock(Statement.class));\n            resultSets.add(mock(ResultSet.class));\n            databaseMetaData.add(mock(DatabaseMetaData.class));\n        }\n        String sql = \"SELECT MEMBER_HOST, MEMBER_PORT FROM performance_schema.replication_group_members WHERE MEMBER_ID = \"\n                + \"(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME = 'group_replication_primary_member')\";\n        try {\n            for (int i = 0; i < 3; i++) {\n                when(dataSources.get(i).getConnection()).thenReturn(connections.get(i));\n                when(connections.get(i).createStatement()).thenReturn(statements.get(i));\n                when(statements.get(i).executeQuery(sql)).thenReturn(resultSets.get(i));\n                when(resultSets.get(i).next()).thenReturn(true, false);\n                when(resultSets.get(i).getString(\"MEMBER_HOST\")).thenReturn(\"127.0.0.1\");\n                when(resultSets.get(i).getString(\"MEMBER_PORT\")).thenReturn(Integer.toString(3306 + i));\n                when(connections.get(i).getMetaData()).thenReturn(databaseMetaData.get(i));\n                when(databaseMetaData.get(i).getURL()).thenReturn(\"jdbc:mysql://127.0.0.1:\" + (3306 + i) + \"/ds_0?serverTimezone=UTC&useSSL=false\");\n            }\n        } catch (final SQLException ex) {\n            throw new ShardingSphereException(ex);\n        }\n        Map<String, DataSource> dataSourceMap = new HashMap<>(3, 1);\n        for (int i = 0; i < 3; i++) {\n            dataSourceMap.put(String.format(\"ds_%s\", i), dataSources.get(i));\n        }\n        mgrHaType.getProps().setProperty(\"groupName\", \"group_name\");\n        mgrHaType.updatePrimaryDataSource(dataSourceMap, \"discovery_db\", Collections.emptySet(), \"group_name\", null);\n        assertThat(mgrHaType.getPrimaryDataSource(), is(\"ds_2\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-provider/shardingsphere-db-discovery-mgr/src/test/java/org/apache/shardingsphere/dbdiscovery/mgr/MGRDatabaseDiscoveryTypeTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"N"},{"authorDate":"2021-08-30 15:26:41","commitOrder":5,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.hasDataSource()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-08-30 15:26:41","endLine":102,"groupId":"6165","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fe/b53cc03a2a3972a991a481397df88d8c10e218.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/UnicastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"8f15bee1b425f7057f3a54ebcb84959efbaa7a58","commitMessage":"@@@Modify the judgment conditions of `BroadcastDatabaseBackendHandler.java` and `UnicastDatabaseBackendHandler.java` (#12098)\n\n* Modify the schema judgment condition.  there may be an empty schema.\n\n* Modify the schema judgment condition.  there may be an empty schema.","date":"2021-08-30 15:26:41","modifiedFileCount":"5","status":"M","submitter":"lanchengx"},{"authorTime":"2021-08-30 15:26:41","codes":[{"authorDate":"2021-09-06 06:30:59","commitOrder":6,"curCode":"    public void updatePrimaryDataSource() {\n        List<DataSource> dataSources = new LinkedList<>();\n        List<Connection> connections = new LinkedList<>();\n        List<Statement> statements = new LinkedList<>();\n        List<ResultSet> resultSets = new LinkedList<>();\n        List<DatabaseMetaData> databaseMetaData = new LinkedList<>();\n        for (int i = 0; i < 3; i++) {\n            dataSources.add(mock(DataSource.class));\n            connections.add(mock(Connection.class));\n            statements.add(mock(Statement.class));\n            resultSets.add(mock(ResultSet.class));\n            databaseMetaData.add(mock(DatabaseMetaData.class));\n        }\n        String sql = \"SELECT MEMBER_HOST, MEMBER_PORT FROM performance_schema.replication_group_members WHERE MEMBER_ID = \"\n                + \"(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME = 'group_replication_primary_member')\";\n        try {\n            for (int i = 0; i < 3; i++) {\n                when(dataSources.get(i).getConnection()).thenReturn(connections.get(i));\n                when(connections.get(i).createStatement()).thenReturn(statements.get(i));\n                when(statements.get(i).executeQuery(sql)).thenReturn(resultSets.get(i));\n                when(resultSets.get(i).next()).thenReturn(true, false);\n                when(resultSets.get(i).getString(\"MEMBER_HOST\")).thenReturn(\"127.0.0.1\");\n                when(resultSets.get(i).getString(\"MEMBER_PORT\")).thenReturn(Integer.toString(3306 + i));\n                when(connections.get(i).getMetaData()).thenReturn(databaseMetaData.get(i));\n                when(databaseMetaData.get(i).getURL()).thenReturn(\"jdbc:mysql://127.0.0.1:\" + (3306 + i) + \"/ds_0?serverTimezone=UTC&useSSL=false\");\n            }\n        } catch (final SQLException ex) {\n            throw new ShardingSphereException(ex);\n        }\n        Map<String, DataSource> dataSourceMap = new HashMap<>(3, 1);\n        for (int i = 0; i < 3; i++) {\n            dataSourceMap.put(String.format(\"ds_%s\", i), dataSources.get(i));\n        }\n        mgrHaType.getProps().setProperty(\"groupName\", \"group_name\");\n        mgrHaType.updatePrimaryDataSource(\"discovery_db\", dataSourceMap, Collections.emptySet(), \"group_name\", null);\n        assertThat(mgrHaType.getPrimaryDataSource(), is(\"ds_2\"));\n    }\n","date":"2021-09-06 06:30:59","endLine":119,"groupId":"10894","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"updatePrimaryDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3b/fb40cc0ebe20bd3588ed733b6428f7930f4f1a.src","preCode":"    public void updatePrimaryDataSource() {\n        List<DataSource> dataSources = new LinkedList<>();\n        List<Connection> connections = new LinkedList<>();\n        List<Statement> statements = new LinkedList<>();\n        List<ResultSet> resultSets = new LinkedList<>();\n        List<DatabaseMetaData> databaseMetaData = new LinkedList<>();\n        for (int i = 0; i < 3; i++) {\n            dataSources.add(mock(DataSource.class));\n            connections.add(mock(Connection.class));\n            statements.add(mock(Statement.class));\n            resultSets.add(mock(ResultSet.class));\n            databaseMetaData.add(mock(DatabaseMetaData.class));\n        }\n        String sql = \"SELECT MEMBER_HOST, MEMBER_PORT FROM performance_schema.replication_group_members WHERE MEMBER_ID = \"\n                + \"(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME = 'group_replication_primary_member')\";\n        try {\n            for (int i = 0; i < 3; i++) {\n                when(dataSources.get(i).getConnection()).thenReturn(connections.get(i));\n                when(connections.get(i).createStatement()).thenReturn(statements.get(i));\n                when(statements.get(i).executeQuery(sql)).thenReturn(resultSets.get(i));\n                when(resultSets.get(i).next()).thenReturn(true, false);\n                when(resultSets.get(i).getString(\"MEMBER_HOST\")).thenReturn(\"127.0.0.1\");\n                when(resultSets.get(i).getString(\"MEMBER_PORT\")).thenReturn(Integer.toString(3306 + i));\n                when(connections.get(i).getMetaData()).thenReturn(databaseMetaData.get(i));\n                when(databaseMetaData.get(i).getURL()).thenReturn(\"jdbc:mysql://127.0.0.1:\" + (3306 + i) + \"/ds_0?serverTimezone=UTC&useSSL=false\");\n            }\n        } catch (final SQLException ex) {\n            throw new ShardingSphereException(ex);\n        }\n        Map<String, DataSource> dataSourceMap = new HashMap<>(3, 1);\n        for (int i = 0; i < 3; i++) {\n            dataSourceMap.put(String.format(\"ds_%s\", i), dataSources.get(i));\n        }\n        mgrHaType.getProps().setProperty(\"groupName\", \"group_name\");\n        mgrHaType.updatePrimaryDataSource(dataSourceMap, \"discovery_db\", Collections.emptySet(), \"group_name\", null);\n        assertThat(mgrHaType.getPrimaryDataSource(), is(\"ds_2\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-provider/shardingsphere-db-discovery-mgr/src/test/java/org/apache/shardingsphere/dbdiscovery/mgr/MGRDatabaseDiscoveryTypeTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2021-08-30 15:26:41","commitOrder":6,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.hasDataSource()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-08-30 15:26:41","endLine":102,"groupId":"10894","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fe/b53cc03a2a3972a991a481397df88d8c10e218.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.hasDataSource()).thenReturn(true);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/data/impl/UnicastDatabaseBackendHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"89f9871ff79d769d22964caf1e6ba2aa91e9c3ec","commitMessage":"@@@Remove databaseType ref of DatabaseDiscoveryRule (#12231)\n\n* Remove databaseType ref of DatabaseDiscoveryRule\n\n* Refactor DatabaseDiscoveryType","date":"2021-09-06 06:30:59","modifiedFileCount":"11","status":"M","submitter":"Liang Zhang"}]
