[{"authorTime":"2020-10-01 16:19:47","codes":[{"authorDate":"2020-10-01 16:19:47","commitOrder":2,"curCode":"    public void assertRouteSuccess() {\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        LogicSQL logicSQL = new LogicSQL(schema, mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(props, Collections.singleton(new RouteRuleFixture()));\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, metaData.getRuleSchemaMetaData().getConfiguredSchemaMetaData());\n    }\n","date":"2020-10-01 16:19:47","endLine":80,"groupId":"6279","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRouteSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/69/27f9dfd6797a2b0de8d3af0b05fd4e4db0823c.src","preCode":"    public void assertRouteSuccess() {\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        LogicSQL logicSQL = new LogicSQL(schema, mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(props, Collections.singleton(new RouteRuleFixture()));\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, metaData.getRuleSchemaMetaData().getConfiguredSchemaMetaData());\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"MB"},{"authorDate":"2020-10-01 16:19:47","commitOrder":2,"curCode":"    public void assertRouteFailure() {\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        LogicSQL logicSQL = new LogicSQL(schema, mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(props, Collections.singleton(new RouteFailureRuleFixture()));\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","date":"2020-10-01 16:19:47","endLine":95,"groupId":"6279","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRouteFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/69/27f9dfd6797a2b0de8d3af0b05fd4e4db0823c.src","preCode":"    public void assertRouteFailure() {\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        LogicSQL logicSQL = new LogicSQL(schema, mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(props, Collections.singleton(new RouteFailureRuleFixture()));\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"MB"}],"commitId":"8e36397e3017dcf1c1cc87a293abaaa525d2cdf6","commitMessage":"@@@Move LogicSQL to infra module (#7677)\n\n* Simplify SchemaContext\n\n* Fix test cases\n\n* Refactor AbstractStatementExecutor\n\n* Use ShardingSphereSchema in LogicSQLContext\n\n* Move ShardingSphereSchema to infra module\n\n* Move LogicSQLContext to infra module\n\n* Use LogicSQLContext on SQLLogger\n\n* Rename LogicSQLContext to LogicSQL\n\n* Use LogicSQL on SQLRouteEngine","date":"2020-10-01 16:19:47","modifiedFileCount":"48","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-12 16:19:42","codes":[{"authorDate":"2020-10-12 16:19:42","commitOrder":3,"curCode":"    public void assertRouteSuccess() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(props, Collections.singleton(new RouteRuleFixture()));\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL, schema);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, metaData.getRuleSchemaMetaData().getConfiguredSchemaMetaData());\n    }\n","date":"2020-10-12 16:19:42","endLine":80,"groupId":"6279","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRouteSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/79/c6cfb825d1c2ed3503409860eb1e4268048e95.src","preCode":"    public void assertRouteSuccess() {\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        LogicSQL logicSQL = new LogicSQL(schema, mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(props, Collections.singleton(new RouteRuleFixture()));\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, metaData.getRuleSchemaMetaData().getConfiguredSchemaMetaData());\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-10-12 16:19:42","commitOrder":3,"curCode":"    public void assertRouteFailure() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(props, Collections.singleton(new RouteFailureRuleFixture()));\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL, schema);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","date":"2020-10-12 16:19:42","endLine":95,"groupId":"13310","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRouteFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/79/c6cfb825d1c2ed3503409860eb1e4268048e95.src","preCode":"    public void assertRouteFailure() {\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        LogicSQL logicSQL = new LogicSQL(schema, mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(props, Collections.singleton(new RouteFailureRuleFixture()));\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"61fb19d54071592f0e4e70ea78bc7cd33ff8d1df","commitMessage":"@@@Decouple LogicSQL and schema (#7753)\n\n","date":"2020-10-12 16:19:42","modifiedFileCount":"26","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-12 16:19:42","codes":[{"authorDate":"2020-10-15 12:48:21","commitOrder":4,"curCode":"    public void assertRouteSuccess() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(props, Collections.singleton(new RouteRuleFixture()));\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL, schema);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, metaData.getSchemaMetaData().getConfiguredSchemaMetaData());\n    }\n","date":"2020-10-15 12:48:21","endLine":80,"groupId":"6279","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRouteSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/25/dbd01cdb1d7fffb9b2f1fc4d1a88b11523d78a.src","preCode":"    public void assertRouteSuccess() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(props, Collections.singleton(new RouteRuleFixture()));\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL, schema);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, metaData.getRuleSchemaMetaData().getConfiguredSchemaMetaData());\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-10-12 16:19:42","commitOrder":4,"curCode":"    public void assertRouteFailure() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(props, Collections.singleton(new RouteFailureRuleFixture()));\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL, schema);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","date":"2020-10-12 16:19:42","endLine":95,"groupId":"13310","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRouteFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/79/c6cfb825d1c2ed3503409860eb1e4268048e95.src","preCode":"    public void assertRouteFailure() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(props, Collections.singleton(new RouteFailureRuleFixture()));\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL, schema);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"N"}],"commitId":"8cecd8c4d55cff0d47237a725fadbd81e58bfcec","commitMessage":"@@@Rename RuleSchemaMetaData to LogicSchemaMetaData (#7795)\n\n","date":"2020-10-15 12:48:21","modifiedFileCount":"59","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-02 18:35:21","codes":[{"authorDate":"2020-11-02 18:35:21","commitOrder":5,"curCode":"    public void assertRouteSuccess() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL, schema);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, metaData.getSchemaMetaData().getConfiguredSchemaMetaData());\n    }\n","date":"2020-11-02 18:35:21","endLine":80,"groupId":"14311","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRouteSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b1/1b10b1b11b14050ab74aec35d72eb1d90ba6fc.src","preCode":"    public void assertRouteSuccess() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(props, Collections.singleton(new RouteRuleFixture()));\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL, schema);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, metaData.getSchemaMetaData().getConfiguredSchemaMetaData());\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-11-02 18:35:21","commitOrder":5,"curCode":"    public void assertRouteFailure() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteFailureRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL, schema);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","date":"2020-11-02 18:35:21","endLine":95,"groupId":"3347","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRouteFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b1/1b10b1b11b14050ab74aec35d72eb1d90ba6fc.src","preCode":"    public void assertRouteFailure() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(props, Collections.singleton(new RouteFailureRuleFixture()));\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL, schema);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"9d3f7e4146ac7cd6610e5b5f22023cc7210acb6b","commitMessage":"@@@Use SQLRouteExecutor to refactor SQL route engine (#8009)\n\n* For code format\n\n* Use SQLRouteExecutor to refactor SQL route engine","date":"2020-11-02 18:35:21","modifiedFileCount":"9","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-02 18:35:21","codes":[{"authorDate":"2020-11-04 15:26:32","commitOrder":6,"curCode":"    public void assertRouteSuccess() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL, schema);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, metaData.getSchemaMetaData());\n    }\n","date":"2020-11-04 15:26:32","endLine":80,"groupId":"14311","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRouteSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/30/bbadf9e430d41283cfa9b16b667155302e2a5b.src","preCode":"    public void assertRouteSuccess() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL, schema);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, metaData.getSchemaMetaData().getConfiguredSchemaMetaData());\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-11-02 18:35:21","commitOrder":6,"curCode":"    public void assertRouteFailure() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteFailureRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL, schema);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","date":"2020-11-02 18:35:21","endLine":95,"groupId":"3347","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRouteFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b1/1b10b1b11b14050ab74aec35d72eb1d90ba6fc.src","preCode":"    public void assertRouteFailure() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteFailureRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL, schema);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"N"}],"commitId":"a87ef49a5bafc77e2c38da74870870555dcddbfb","commitMessage":"@@@Remove LogicSchemaMetaData.unconfiguredSchemaMetaDataMap (#8023)\n\n* Adjust seq of ShardingSphereMetaData's constructor\n\n* Remove LogicSchemaMetaData.unconfiguredSchemaMetaDataMap\n\n* Remove LogicSchemaMetaData\n\n* Rename LogicSchemaMetaDataLoader\n\n* Add metadata.schema package\n\n* Fix spi\n\n* Rename SchemaMetaDataLoader\n\n* Rename SchemaMetaDataNotifier","date":"2020-11-04 15:26:32","modifiedFileCount":"156","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-04 18:35:25","codes":[{"authorDate":"2020-11-04 18:35:25","commitOrder":7,"curCode":"    public void assertRouteSuccess() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), this.schema);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL, metaData);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, this.schema.getSchemaMetaData());\n    }\n","date":"2020-11-04 18:35:25","endLine":80,"groupId":"0","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRouteSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f6/edb65a0908581e1c9be37b42b6833ab75f5c89.src","preCode":"    public void assertRouteSuccess() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL, schema);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, metaData.getSchemaMetaData());\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-11-04 18:35:25","commitOrder":7,"curCode":"    public void assertRouteFailure() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), this.schema);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteFailureRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL, metaData);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","date":"2020-11-04 18:35:25","endLine":95,"groupId":"0","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRouteFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f6/edb65a0908581e1c9be37b42b6833ab75f5c89.src","preCode":"    public void assertRouteFailure() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereSchema schema = new ShardingSphereSchema(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), metaData);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteFailureRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL, schema);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"d06c68303f2628c99ac5aa6e4a22d8e73bb07d7d","commitMessage":"@@@Switch class name of ShardingSphereMetaData and ShardingSphereSchema (#8026)\n\n* Remove useless ReplicaQueryTableAddressingMetaDataDecorator\n\n* Switch class name of ShardingSphereMetaData and ShardingSphereSchema","date":"2020-11-04 18:35:25","modifiedFileCount":"223","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-05 14:05:55","codes":[{"authorDate":"2020-11-05 14:05:55","commitOrder":8,"curCode":"    public void assertRouteSuccess() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\n                \"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), schema);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL, metaData);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, schema.getSchemaMetaData());\n    }\n","date":"2020-11-05 14:05:55","endLine":83,"groupId":"11146","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRouteSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/36/57ca374682341a449d8879be4ddd46e065cd12.src","preCode":"    public void assertRouteSuccess() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), this.schema);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL, metaData);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, this.schema.getSchemaMetaData());\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2020-11-05 14:05:55","commitOrder":8,"curCode":"    public void assertRouteFailure() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\n                \"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), schema);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteFailureRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL, metaData);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","date":"2020-11-05 14:05:55","endLine":99,"groupId":"0","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRouteFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/36/57ca374682341a449d8879be4ddd46e065cd12.src","preCode":"    public void assertRouteFailure() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), Collections.emptyMap(), this.schema);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteFailureRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL, metaData);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"11b49d2df51c6b1606f483dfdb9efa8e8147ed12","commitMessage":"@@@Add ShardingSphereResource (#8033)\n\n* Add ShardingSphereResource\n\n* Use ShardingSphereResource.dataSourcesMetaData instead of ShardingSphereSchema.dataSourcesMetaData","date":"2020-11-05 14:05:55","modifiedFileCount":"34","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-06 18:32:42","codes":[{"authorDate":"2020-11-06 18:32:42","commitOrder":9,"curCode":"    public void assertRouteSuccess() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.singleton(new RouteRuleFixture()));\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\", mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), ruleMetaData, schema);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL, metaData);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, schema.getSchemaMetaData());\n    }\n","date":"2020-11-06 18:32:42","endLine":84,"groupId":"11146","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRouteSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3a/db476e7656ee408e23ca57bf8449ca20481cc5.src","preCode":"    public void assertRouteSuccess() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\n                \"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), schema);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL, metaData);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, schema.getSchemaMetaData());\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-11-06 18:32:42","commitOrder":9,"curCode":"    public void assertRouteFailure() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.singleton(new RouteRuleFixture()));\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\", mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), ruleMetaData, schema);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteFailureRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL, metaData);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","date":"2020-11-06 18:32:42","endLine":100,"groupId":"11146","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRouteFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3a/db476e7656ee408e23ca57bf8449ca20481cc5.src","preCode":"    public void assertRouteFailure() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\n                \"logic_schema\", Collections.emptyList(), Collections.singleton(new RouteRuleFixture()), mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), schema);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteFailureRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL, metaData);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"8fe8182627e16ed381175cb2fd2f514ceefdd414","commitMessage":"@@@Add ShardingSphereRuleMetaData (#8054)\n\n* Add ShardingSphereRuleMetaData\n\n* Fix test cases","date":"2020-11-06 18:32:42","modifiedFileCount":"45","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-06 18:32:42","codes":[{"authorDate":"2020-11-09 14:26:45","commitOrder":10,"curCode":"    public void assertRouteSuccess() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.singleton(new RouteRuleFixture()));\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\", mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), ruleMetaData, schema);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL, metaData);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, schema);\n    }\n","date":"2020-11-09 14:26:45","endLine":75,"groupId":"11146","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRouteSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ce/a43fc7f05e45279bc090650a54125f6106c300.src","preCode":"    public void assertRouteSuccess() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.singleton(new RouteRuleFixture()));\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\", mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), ruleMetaData, schema);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL, metaData);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, schema.getSchemaMetaData());\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2020-11-06 18:32:42","commitOrder":10,"curCode":"    public void assertRouteFailure() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.singleton(new RouteRuleFixture()));\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\", mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), ruleMetaData, schema);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteFailureRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL, metaData);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","date":"2020-11-06 18:32:42","endLine":100,"groupId":"11146","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRouteFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3a/db476e7656ee408e23ca57bf8449ca20481cc5.src","preCode":"    public void assertRouteFailure() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.singleton(new RouteRuleFixture()));\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\", mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), ruleMetaData, schema);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteFailureRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL, metaData);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"}],"commitId":"9c7b070da8feb0a6c6ba2966c047233ef2d3e7e4","commitMessage":"@@@Use PhysicalSchemaMetaData instead of ShardingSphereSchema (#8087)\n\n","date":"2020-11-09 14:26:45","modifiedFileCount":"67","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-02-24 19:38:04","codes":[{"authorDate":"2021-02-24 19:38:04","commitOrder":11,"curCode":"    public void assertRouteSuccess() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.singleton(new RouteRuleFixture()));\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\", mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), ruleMetaData, schema);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteRuleFixture()), props);\n        RouteContext actual = sqlRouteEngine.route(logicSQL, metaData);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n    }\n","date":"2021-02-24 19:38:04","endLine":65,"groupId":"101701","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"assertRouteSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/80/fc0f3f9be8646f1fa236caeb7d8399026ce318.src","preCode":"    public void assertRouteSuccess() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.singleton(new RouteRuleFixture()));\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\", mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), ruleMetaData, schema);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        RouteContext actual = sqlRouteEngine.route(logicSQL, metaData);\n        assertThat(actual.getRouteUnits().size(), is(1));\n        RouteUnit routeUnit = actual.getRouteUnits().iterator().next();\n        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(\"ds\"));\n        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(\"ds_0\"));\n        assertTrue(routeUnit.getTableMappers().isEmpty());\n        verify(routingHook).start(\"SELECT 1\");\n        verify(routingHook).finishSuccess(actual, schema);\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2021-02-24 19:38:04","commitOrder":11,"curCode":"    public void assertRouteFailure() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.singleton(new RouteRuleFixture()));\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\", mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), ruleMetaData, schema);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteFailureRuleFixture()), props);\n        sqlRouteEngine.route(logicSQL, metaData);\n    }\n","date":"2021-02-24 19:38:04","endLine":74,"groupId":"101701","id":20,"instanceNumber":2,"isCurCommit":1,"methodName":"assertRouteFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/80/fc0f3f9be8646f1fa236caeb7d8399026ce318.src","preCode":"    public void assertRouteFailure() {\n        LogicSQL logicSQL = new LogicSQL(mock(SQLStatementContext.class), \"SELECT 1\", Collections.emptyList());\n        ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.singleton(new RouteRuleFixture()));\n        ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"logic_schema\", mock(ShardingSphereResource.class, RETURNS_DEEP_STUBS), ruleMetaData, schema);\n        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(Collections.singleton(new RouteFailureRuleFixture()), props);\n        setSPIRoutingHook(sqlRouteEngine);\n        try {\n            sqlRouteEngine.route(logicSQL, metaData);\n        } catch (final UnsupportedOperationException ex) {\n            verify(routingHook).start(\"SELECT 1\");\n            verify(routingHook).finishFailure(ex);\n            throw ex;\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-route/src/test/java/org/apache/shardingsphere/infra/route/engine/SQLRouteEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"25187f0947fa1a272b8559d1cecfa4d2fc6a2a76","commitMessage":"@@@remove sql router hook (#9491)\n\n* remove sql router hook\n\n* remove sql router hook","date":"2021-02-24 19:38:04","modifiedFileCount":"2","status":"M","submitter":"xiaoyu"}]
