[{"authorTime":"2021-08-11 18:16:19","codes":[{"authorDate":"2021-08-11 18:16:19","commitOrder":1,"curCode":"    public void assertValidateInsertWithRoutingToSingleDataNode() {\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertStatement());\n        when(routeContext.isSingleRouting()).thenReturn(false);\n        when(shardingRule.isBroadcastTable(sqlStatementContext.getSqlStatement().getTable().getTableName().getIdentifier().getValue())).thenReturn(false);\n        when(routeContext.getOriginalDataNodes()).thenReturn(getSingleRouteDataNodes());\n        new ShardingInsertStatementValidator().postValidate(shardingRule, sqlStatementContext, routeContext, mock(ShardingSphereSchema.class));\n    }\n","date":"2021-08-11 18:16:19","endLine":160,"groupId":"7627","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertValidateInsertWithRoutingToSingleDataNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/91/c83219b7af6c32c637f1f413817b6b75826717.src","preCode":"    public void assertValidateInsertWithRoutingToSingleDataNode() {\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertStatement());\n        when(routeContext.isSingleRouting()).thenReturn(false);\n        when(shardingRule.isBroadcastTable(sqlStatementContext.getSqlStatement().getTable().getTableName().getIdentifier().getValue())).thenReturn(false);\n        when(routeContext.getOriginalDataNodes()).thenReturn(getSingleRouteDataNodes());\n        new ShardingInsertStatementValidator().postValidate(shardingRule, sqlStatementContext, routeContext, mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingInsertStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"B"},{"authorDate":"2021-08-11 18:16:19","commitOrder":1,"curCode":"    public void assertValidateInsertWithRoutingToMultipleDataNodes() {\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertStatement());\n        when(routeContext.isSingleRouting()).thenReturn(false);\n        when(shardingRule.isBroadcastTable(sqlStatementContext.getSqlStatement().getTable().getTableName().getIdentifier().getValue())).thenReturn(false);\n        when(routeContext.getOriginalDataNodes()).thenReturn(getMultipleRouteDataNodes());\n        new ShardingInsertStatementValidator().postValidate(shardingRule, sqlStatementContext, routeContext, mock(ShardingSphereSchema.class));\n    }\n","date":"2021-08-11 18:16:19","endLine":169,"groupId":"7627","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertValidateInsertWithRoutingToMultipleDataNodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/91/c83219b7af6c32c637f1f413817b6b75826717.src","preCode":"    public void assertValidateInsertWithRoutingToMultipleDataNodes() {\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertStatement());\n        when(routeContext.isSingleRouting()).thenReturn(false);\n        when(shardingRule.isBroadcastTable(sqlStatementContext.getSqlStatement().getTable().getTableName().getIdentifier().getValue())).thenReturn(false);\n        when(routeContext.getOriginalDataNodes()).thenReturn(getMultipleRouteDataNodes());\n        new ShardingInsertStatementValidator().postValidate(shardingRule, sqlStatementContext, routeContext, mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingInsertStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"B"}],"commitId":"382e6a6a7c3a2363a9522038ab808e861d1353c9","commitMessage":"@@@Insert clause not support routing to multiple dataNodes when is not broadcastTable. #11623 (#11750)\n\n* Insert clause not support routing to multiple dataNodes when is not broadcastTable. #11623\n\n* change exception message and variable name. #11750","date":"2021-08-11 18:16:19","modifiedFileCount":"2","status":"B","submitter":"chengh1"},{"authorTime":"2021-08-16 18:35:28","codes":[{"authorDate":"2021-08-16 18:35:28","commitOrder":2,"curCode":"    public void assertValidateInsertWithRoutingToSingleDataNode() {\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertStatement());\n        when(routeContext.isSingleRouting()).thenReturn(false);\n        when(shardingRule.isBroadcastTable(sqlStatementContext.getSqlStatement().getTable().getTableName().getIdentifier().getValue())).thenReturn(false);\n        when(routeContext.getOriginalDataNodes()).thenReturn(getSingleRouteDataNodes());\n        new ShardingInsertStatementValidator(shardingConditions).postValidate(shardingRule, sqlStatementContext, routeContext, mock(ShardingSphereSchema.class));\n    }\n","date":"2021-08-16 18:35:28","endLine":164,"groupId":"10516","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertValidateInsertWithRoutingToSingleDataNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/62/880ce2fde13f428dc5e9f608f7cd13ea8faa27.src","preCode":"    public void assertValidateInsertWithRoutingToSingleDataNode() {\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertStatement());\n        when(routeContext.isSingleRouting()).thenReturn(false);\n        when(shardingRule.isBroadcastTable(sqlStatementContext.getSqlStatement().getTable().getTableName().getIdentifier().getValue())).thenReturn(false);\n        when(routeContext.getOriginalDataNodes()).thenReturn(getSingleRouteDataNodes());\n        new ShardingInsertStatementValidator().postValidate(shardingRule, sqlStatementContext, routeContext, mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingInsertStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2021-08-16 18:35:28","commitOrder":2,"curCode":"    public void assertValidateInsertWithRoutingToMultipleDataNodes() {\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertStatement());\n        when(routeContext.isSingleRouting()).thenReturn(false);\n        when(shardingRule.isBroadcastTable(sqlStatementContext.getSqlStatement().getTable().getTableName().getIdentifier().getValue())).thenReturn(false);\n        when(routeContext.getOriginalDataNodes()).thenReturn(getMultipleRouteDataNodes());\n        new ShardingInsertStatementValidator(shardingConditions).postValidate(shardingRule, sqlStatementContext, routeContext, mock(ShardingSphereSchema.class));\n    }\n","date":"2021-08-16 18:35:28","endLine":173,"groupId":"10516","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertValidateInsertWithRoutingToMultipleDataNodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/62/880ce2fde13f428dc5e9f608f7cd13ea8faa27.src","preCode":"    public void assertValidateInsertWithRoutingToMultipleDataNodes() {\n        SQLStatementContext<InsertStatement> sqlStatementContext = createInsertStatementContext(Collections.singletonList(1), createInsertStatement());\n        when(routeContext.isSingleRouting()).thenReturn(false);\n        when(shardingRule.isBroadcastTable(sqlStatementContext.getSqlStatement().getTable().getTableName().getIdentifier().getValue())).thenReturn(false);\n        when(routeContext.getOriginalDataNodes()).thenReturn(getMultipleRouteDataNodes());\n        new ShardingInsertStatementValidator().postValidate(shardingRule, sqlStatementContext, routeContext, mock(ShardingSphereSchema.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingInsertStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"618115e290001a48aabff2b02c4feb61b16fd0d0","commitMessage":"@@@Reduce the creation of sharding conditions (#11841)\n\n* Reduce the creation of sharding conditions\n\n* optimize code\n\n* optimize code\n\n* fix checkstyle\n\n* optimize code","date":"2021-08-16 18:35:28","modifiedFileCount":"9","status":"M","submitter":"Zhengqiang Duan"}]
