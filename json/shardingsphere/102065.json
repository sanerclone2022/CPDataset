[{"authorTime":"2021-07-01 17:47:55","codes":[{"authorDate":"2021-07-01 17:47:55","commitOrder":1,"curCode":"    private static void assertDatabaseDiscoveryRule(final SQLCaseAssertContext assertContext, final DatabaseDiscoveryRuleSegment actual, final ExpectedDatabaseDiscoveryRule expected) {\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \", actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \",\n                actual.getClass().getSimpleName())), actual.getDiscoveryTypeName(), is(expected.getDiscoveryTypeName()));\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \", actual.getClass().getSimpleName())), actual.getDataSources(), is(expected.getDataSources()));\n        assertProps(assertContext, actual.getProps(), expected.getProps());\n    }\n","date":"2021-07-01 17:47:55","endLine":63,"groupId":"1408","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertDatabaseDiscoveryRule","params":"(finalSQLCaseAssertContextassertContext@finalDatabaseDiscoveryRuleSegmentactual@finalExpectedDatabaseDiscoveryRuleexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5e/b6f8dfcc5fd7618aeab7cbec759ae170d33923.src","preCode":"    private static void assertDatabaseDiscoveryRule(final SQLCaseAssertContext assertContext, final DatabaseDiscoveryRuleSegment actual, final ExpectedDatabaseDiscoveryRule expected) {\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \", actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \",\n                actual.getClass().getSimpleName())), actual.getDiscoveryTypeName(), is(expected.getDiscoveryTypeName()));\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \", actual.getClass().getSimpleName())), actual.getDataSources(), is(expected.getDataSources()));\n        assertProps(assertContext, actual.getProps(), expected.getProps());\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/rdl/DatabaseDiscoveryRuleAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"},{"authorDate":"2021-07-01 17:47:55","commitOrder":1,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final ReadwriteSplittingRuleSegment actual, final ExceptedReadwriteSplittingRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exit.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exit.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getAutoAwareResource(), is(expected.getAutoAwareResource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getWriteDataSource(), is(expected.getWriteDataSource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getReadDataSources(), is(expected.getReadDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getLoadBalancer(), is(expected.getLoadBalancer()));\n            PropertiesAssert.assertIs(assertContext, actual.getProps(), expected.getProps());\n        }\n    }\n","date":"2021-07-01 17:47:55","endLine":62,"groupId":"3137","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalReadwriteSplittingRuleSegmentactual@finalExceptedReadwriteSplittingRuleexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b3/66c6c1800e7020818fd31bead279e3bab08781.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final ReadwriteSplittingRuleSegment actual, final ExceptedReadwriteSplittingRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exit.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exit.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getAutoAwareResource(), is(expected.getAutoAwareResource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getWriteDataSource(), is(expected.getWriteDataSource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getReadDataSources(), is(expected.getReadDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getLoadBalancer(), is(expected.getLoadBalancer()));\n            PropertiesAssert.assertIs(assertContext, actual.getProps(), expected.getProps());\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/rdl/ReadwriteSplittingRuleAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"}],"commitId":"71c18596a4427b83e98bd0cb6b32319e297d1373","commitMessage":"@@@add new parser test module (#11083)\n\n","date":"2021-07-01 17:47:55","modifiedFileCount":"0","status":"B","submitter":"totalo"},{"authorTime":"2021-08-13 18:15:48","codes":[{"authorDate":"2021-07-01 17:47:55","commitOrder":2,"curCode":"    private static void assertDatabaseDiscoveryRule(final SQLCaseAssertContext assertContext, final DatabaseDiscoveryRuleSegment actual, final ExpectedDatabaseDiscoveryRule expected) {\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \", actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \",\n                actual.getClass().getSimpleName())), actual.getDiscoveryTypeName(), is(expected.getDiscoveryTypeName()));\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \", actual.getClass().getSimpleName())), actual.getDataSources(), is(expected.getDataSources()));\n        assertProps(assertContext, actual.getProps(), expected.getProps());\n    }\n","date":"2021-07-01 17:47:55","endLine":63,"groupId":"102065","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertDatabaseDiscoveryRule","params":"(finalSQLCaseAssertContextassertContext@finalDatabaseDiscoveryRuleSegmentactual@finalExpectedDatabaseDiscoveryRuleexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5e/b6f8dfcc5fd7618aeab7cbec759ae170d33923.src","preCode":"    private static void assertDatabaseDiscoveryRule(final SQLCaseAssertContext assertContext, final DatabaseDiscoveryRuleSegment actual, final ExpectedDatabaseDiscoveryRule expected) {\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \", actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \",\n                actual.getClass().getSimpleName())), actual.getDiscoveryTypeName(), is(expected.getDiscoveryTypeName()));\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \", actual.getClass().getSimpleName())), actual.getDataSources(), is(expected.getDataSources()));\n        assertProps(assertContext, actual.getProps(), expected.getProps());\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/rdl/DatabaseDiscoveryRuleAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"},{"authorDate":"2021-08-13 18:15:48","commitOrder":2,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final ReadwriteSplittingRuleSegment actual, final ExceptedReadwriteSplittingRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual readwrite splitting rule should not exit.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual readwrite splitting rule should exit.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getAutoAwareResource(), is(expected.getAutoAwareResource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getWriteDataSource(), is(expected.getWriteDataSource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getReadDataSources(), is(expected.getReadDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getLoadBalancer(), is(expected.getLoadBalancer()));\n            PropertiesAssert.assertIs(assertContext, actual.getProps(), expected.getProps());\n        }\n    }\n","date":"2021-08-13 18:15:48","endLine":62,"groupId":"102065","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalReadwriteSplittingRuleSegmentactual@finalExceptedReadwriteSplittingRuleexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c9/f90f996275a11fcf93a1d608b18a2c379b3f57.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final ReadwriteSplittingRuleSegment actual, final ExceptedReadwriteSplittingRule expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exit.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exit.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getAutoAwareResource(), is(expected.getAutoAwareResource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getWriteDataSource(), is(expected.getWriteDataSource()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getReadDataSources(), is(expected.getReadDataSources()));\n            assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",\n                    actual.getClass().getSimpleName())), actual.getLoadBalancer(), is(expected.getLoadBalancer()));\n            PropertiesAssert.assertIs(assertContext, actual.getProps(), expected.getProps());\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/rdl/ReadwriteSplittingRuleAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"933ebab23d2431213c8fc9b01d9d096115eca4f8","commitMessage":"@@@Add advancedDistSQLStatement.  and implement 'preview sql'. (#11802)\n\n* Add advancedDistSQLStatement.  and implement 'preview sql'.\n\n* fix `Actual should not exist` syntax problem.","date":"2021-08-13 18:15:48","modifiedFileCount":"29","status":"M","submitter":"Raigor"}]
