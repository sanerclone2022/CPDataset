[{"authorTime":"2021-06-05 16:48:03","codes":[{"authorDate":"2021-06-05 16:48:03","commitOrder":1,"curCode":"    public void rewrite(final ParameterBuilder parameterBuilder, final InsertStatementContext insertStatementContext, final List<Object> parameters) {\n        String tableName = insertStatementContext.getSqlStatement().getTable().getTableName().getIdentifier().getValue();\n        GroupedParameterBuilder groupedParameterBuilder = (GroupedParameterBuilder) parameterBuilder;\n        OnDuplicateUpdateContext onDuplicateKeyUpdateValueContext = insertStatementContext.getOnDuplicateKeyUpdateValueContext();\n        for (int index = 0; index < onDuplicateKeyUpdateValueContext.getValueExpressions().size(); index++) {\n            int columnIndex = index;\n            String encryptLogicColumnName = onDuplicateKeyUpdateValueContext.getColumn(columnIndex).getIdentifier().getValue();\n            Optional<EncryptAlgorithm> encryptorOptional = getEncryptRule().findEncryptor(tableName, encryptLogicColumnName);\n            encryptorOptional.ifPresent(encryptor -> {\n                Object plainColumnValue = onDuplicateKeyUpdateValueContext.getValue(columnIndex);\n                Object cipherColumnValue = encryptorOptional.get().encrypt(plainColumnValue);\n                groupedParameterBuilder.getGenericParameterBuilder().addReplacedParameters(columnIndex, cipherColumnValue);\n                Collection<Object> addedParameters = new LinkedList<>();\n                if (encryptor instanceof QueryAssistedEncryptAlgorithm) {\n                    Optional<String> assistedColumnName = getEncryptRule().findAssistedQueryColumn(tableName, encryptLogicColumnName);\n                    Preconditions.checkArgument(assistedColumnName.isPresent(), \"Can not find assisted query Column Name\");\n                    addedParameters.add(((QueryAssistedEncryptAlgorithm) encryptor).queryAssistedEncrypt(plainColumnValue.toString()));\n                }\n                if (getEncryptRule().findPlainColumn(tableName, encryptLogicColumnName).isPresent()) {\n                    addedParameters.add(plainColumnValue);\n                }\n                if (!addedParameters.isEmpty()) {\n                    if (!groupedParameterBuilder.getGenericParameterBuilder().getAddedIndexAndParameters().containsKey(columnIndex + 1)) {\n                        groupedParameterBuilder.getGenericParameterBuilder().getAddedIndexAndParameters().put(columnIndex + 1, new LinkedList<>());\n                    }\n                    groupedParameterBuilder.getGenericParameterBuilder().getAddedIndexAndParameters().get(columnIndex + 1).addAll(addedParameters);\n                }\n            });\n        }\n    }\n","date":"2021-06-05 16:48:03","endLine":79,"groupId":"11474","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"rewrite","params":"(finalParameterBuilderparameterBuilder@finalInsertStatementContextinsertStatementContext@finalList<Object>parameters)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5b/cd48b2d28c301cb3e8098a7dc6fa6ec6d0c532.src","preCode":"    public void rewrite(final ParameterBuilder parameterBuilder, final InsertStatementContext insertStatementContext, final List<Object> parameters) {\n        String tableName = insertStatementContext.getSqlStatement().getTable().getTableName().getIdentifier().getValue();\n        GroupedParameterBuilder groupedParameterBuilder = (GroupedParameterBuilder) parameterBuilder;\n        OnDuplicateUpdateContext onDuplicateKeyUpdateValueContext = insertStatementContext.getOnDuplicateKeyUpdateValueContext();\n        for (int index = 0; index < onDuplicateKeyUpdateValueContext.getValueExpressions().size(); index++) {\n            int columnIndex = index;\n            String encryptLogicColumnName = onDuplicateKeyUpdateValueContext.getColumn(columnIndex).getIdentifier().getValue();\n            Optional<EncryptAlgorithm> encryptorOptional = getEncryptRule().findEncryptor(tableName, encryptLogicColumnName);\n            encryptorOptional.ifPresent(encryptor -> {\n                Object plainColumnValue = onDuplicateKeyUpdateValueContext.getValue(columnIndex);\n                Object cipherColumnValue = encryptorOptional.get().encrypt(plainColumnValue);\n                groupedParameterBuilder.getGenericParameterBuilder().addReplacedParameters(columnIndex, cipherColumnValue);\n                Collection<Object> addedParameters = new LinkedList<>();\n                if (encryptor instanceof QueryAssistedEncryptAlgorithm) {\n                    Optional<String> assistedColumnName = getEncryptRule().findAssistedQueryColumn(tableName, encryptLogicColumnName);\n                    Preconditions.checkArgument(assistedColumnName.isPresent(), \"Can not find assisted query Column Name\");\n                    addedParameters.add(((QueryAssistedEncryptAlgorithm) encryptor).queryAssistedEncrypt(plainColumnValue.toString()));\n                }\n                if (getEncryptRule().findPlainColumn(tableName, encryptLogicColumnName).isPresent()) {\n                    addedParameters.add(plainColumnValue);\n                }\n                if (!addedParameters.isEmpty()) {\n                    if (!groupedParameterBuilder.getGenericParameterBuilder().getAddedIndexAndParameters().containsKey(columnIndex + 1)) {\n                        groupedParameterBuilder.getGenericParameterBuilder().getAddedIndexAndParameters().put(columnIndex + 1, new LinkedList<>());\n                    }\n                    groupedParameterBuilder.getGenericParameterBuilder().getAddedIndexAndParameters().get(columnIndex + 1).addAll(addedParameters);\n                }\n            });\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/parameter/impl/EncryptInsertOnDuplicateKeyUpdateValueParameterRewriter.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2021-06-05 16:48:03","commitOrder":1,"curCode":"    private void encryptInsertValue(final EncryptAlgorithm encryptAlgorithm, final String tableName, final int parameterIndex,\n                                    final Object originalValue, final StandardParameterBuilder parameterBuilder, final String encryptLogicColumnName) {\n        parameterBuilder.addReplacedParameters(parameterIndex, encryptAlgorithm.encrypt(originalValue));\n        Collection<Object> addedParameters = new LinkedList<>();\n        if (encryptAlgorithm instanceof QueryAssistedEncryptAlgorithm) {\n            Optional<String> assistedColumnName = getEncryptRule().findAssistedQueryColumn(tableName, encryptLogicColumnName);\n            Preconditions.checkArgument(assistedColumnName.isPresent(), \"Can not find assisted query Column Name\");\n            addedParameters.add(((QueryAssistedEncryptAlgorithm) encryptAlgorithm).queryAssistedEncrypt(originalValue.toString()));\n        }\n        if (getEncryptRule().findPlainColumn(tableName, encryptLogicColumnName).isPresent()) {\n            addedParameters.add(originalValue);\n        }\n        if (!addedParameters.isEmpty()) {\n            if (!parameterBuilder.getAddedIndexAndParameters().containsKey(parameterIndex + 1)) {\n                parameterBuilder.getAddedIndexAndParameters().put(parameterIndex + 1, new LinkedList<>());\n            }\n            parameterBuilder.getAddedIndexAndParameters().get(parameterIndex + 1).addAll(addedParameters);\n        }\n    }\n","date":"2021-06-05 16:48:03","endLine":109,"groupId":"2022","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"encryptInsertValue","params":"(finalEncryptAlgorithmencryptAlgorithm@finalStringtableName@finalintparameterIndex@finalObjectoriginalValue@finalStandardParameterBuilderparameterBuilder@finalStringencryptLogicColumnName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/00/529a577eb196b2d2a91a0d16de18c170c3bd5c.src","preCode":"    private void encryptInsertValue(final EncryptAlgorithm encryptAlgorithm, final String tableName, final int parameterIndex,\n                                    final Object originalValue, final StandardParameterBuilder parameterBuilder, final String encryptLogicColumnName) {\n        parameterBuilder.addReplacedParameters(parameterIndex, encryptAlgorithm.encrypt(originalValue));\n        Collection<Object> addedParameters = new LinkedList<>();\n        if (encryptAlgorithm instanceof QueryAssistedEncryptAlgorithm) {\n            Optional<String> assistedColumnName = getEncryptRule().findAssistedQueryColumn(tableName, encryptLogicColumnName);\n            Preconditions.checkArgument(assistedColumnName.isPresent(), \"Can not find assisted query Column Name\");\n            addedParameters.add(((QueryAssistedEncryptAlgorithm) encryptAlgorithm).queryAssistedEncrypt(originalValue.toString()));\n        }\n        if (getEncryptRule().findPlainColumn(tableName, encryptLogicColumnName).isPresent()) {\n            addedParameters.add(originalValue);\n        }\n        if (!addedParameters.isEmpty()) {\n            if (!parameterBuilder.getAddedIndexAndParameters().containsKey(parameterIndex + 1)) {\n                parameterBuilder.getAddedIndexAndParameters().put(parameterIndex + 1, new LinkedList<>());\n            }\n            parameterBuilder.getAddedIndexAndParameters().get(parameterIndex + 1).addAll(addedParameters);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/parameter/impl/EncryptInsertValueParameterRewriter.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"}],"commitId":"78da9d03eb0ae28c28d4d8f4f45f84303a69986e","commitMessage":"@@@Merge encrypt feature to core module (#10667)\n\n* Merge encrypt feature to core module\n\n* Merge encrypt feature to core module\n\n* Merge encrypt feature to core module","date":"2021-06-05 16:48:03","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-09-14 07:49:20","codes":[{"authorDate":"2021-09-14 07:49:20","commitOrder":2,"curCode":"    public void rewrite(final ParameterBuilder parameterBuilder, final InsertStatementContext insertStatementContext, final List<Object> parameters) {\n        String tableName = insertStatementContext.getSqlStatement().getTable().getTableName().getIdentifier().getValue();\n        GroupedParameterBuilder groupedParameterBuilder = (GroupedParameterBuilder) parameterBuilder;\n        OnDuplicateUpdateContext onDuplicateKeyUpdateValueContext = insertStatementContext.getOnDuplicateKeyUpdateValueContext();\n        for (int index = 0; index < onDuplicateKeyUpdateValueContext.getValueExpressions().size(); index++) {\n            int columnIndex = index;\n            String encryptLogicColumnName = onDuplicateKeyUpdateValueContext.getColumn(columnIndex).getIdentifier().getValue();\n            Optional<EncryptAlgorithm> encryptorOptional = getEncryptRule().findEncryptor(tableName, encryptLogicColumnName);\n            encryptorOptional.ifPresent(encryptor -> {\n                Object plainColumnValue = onDuplicateKeyUpdateValueContext.getValue(columnIndex);\n                Object cipherColumnValue = encryptorOptional.get().encrypt(plainColumnValue);\n                groupedParameterBuilder.getGenericParameterBuilder().addReplacedParameters(columnIndex, cipherColumnValue);\n                Collection<Object> addedParameters = new LinkedList<>();\n                if (encryptor instanceof QueryAssistedEncryptAlgorithm) {\n                    Optional<String> assistedColumnName = getEncryptRule().findAssistedQueryColumn(tableName, encryptLogicColumnName);\n                    Preconditions.checkArgument(assistedColumnName.isPresent(), \"Can not find assisted query Column Name\");\n                    addedParameters.add(((QueryAssistedEncryptAlgorithm) encryptor).queryAssistedEncrypt(plainColumnValue));\n                }\n                if (getEncryptRule().findPlainColumn(tableName, encryptLogicColumnName).isPresent()) {\n                    addedParameters.add(plainColumnValue);\n                }\n                if (!addedParameters.isEmpty()) {\n                    if (!groupedParameterBuilder.getGenericParameterBuilder().getAddedIndexAndParameters().containsKey(columnIndex + 1)) {\n                        groupedParameterBuilder.getGenericParameterBuilder().getAddedIndexAndParameters().put(columnIndex + 1, new LinkedList<>());\n                    }\n                    groupedParameterBuilder.getGenericParameterBuilder().getAddedIndexAndParameters().get(columnIndex + 1).addAll(addedParameters);\n                }\n            });\n        }\n    }\n","date":"2021-09-14 07:49:20","endLine":79,"groupId":"2823","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"rewrite","params":"(finalParameterBuilderparameterBuilder@finalInsertStatementContextinsertStatementContext@finalList<Object>parameters)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/23/8c54e9cc93fdac415798e364bee15523754f19.src","preCode":"    public void rewrite(final ParameterBuilder parameterBuilder, final InsertStatementContext insertStatementContext, final List<Object> parameters) {\n        String tableName = insertStatementContext.getSqlStatement().getTable().getTableName().getIdentifier().getValue();\n        GroupedParameterBuilder groupedParameterBuilder = (GroupedParameterBuilder) parameterBuilder;\n        OnDuplicateUpdateContext onDuplicateKeyUpdateValueContext = insertStatementContext.getOnDuplicateKeyUpdateValueContext();\n        for (int index = 0; index < onDuplicateKeyUpdateValueContext.getValueExpressions().size(); index++) {\n            int columnIndex = index;\n            String encryptLogicColumnName = onDuplicateKeyUpdateValueContext.getColumn(columnIndex).getIdentifier().getValue();\n            Optional<EncryptAlgorithm> encryptorOptional = getEncryptRule().findEncryptor(tableName, encryptLogicColumnName);\n            encryptorOptional.ifPresent(encryptor -> {\n                Object plainColumnValue = onDuplicateKeyUpdateValueContext.getValue(columnIndex);\n                Object cipherColumnValue = encryptorOptional.get().encrypt(plainColumnValue);\n                groupedParameterBuilder.getGenericParameterBuilder().addReplacedParameters(columnIndex, cipherColumnValue);\n                Collection<Object> addedParameters = new LinkedList<>();\n                if (encryptor instanceof QueryAssistedEncryptAlgorithm) {\n                    Optional<String> assistedColumnName = getEncryptRule().findAssistedQueryColumn(tableName, encryptLogicColumnName);\n                    Preconditions.checkArgument(assistedColumnName.isPresent(), \"Can not find assisted query Column Name\");\n                    addedParameters.add(((QueryAssistedEncryptAlgorithm) encryptor).queryAssistedEncrypt(plainColumnValue.toString()));\n                }\n                if (getEncryptRule().findPlainColumn(tableName, encryptLogicColumnName).isPresent()) {\n                    addedParameters.add(plainColumnValue);\n                }\n                if (!addedParameters.isEmpty()) {\n                    if (!groupedParameterBuilder.getGenericParameterBuilder().getAddedIndexAndParameters().containsKey(columnIndex + 1)) {\n                        groupedParameterBuilder.getGenericParameterBuilder().getAddedIndexAndParameters().put(columnIndex + 1, new LinkedList<>());\n                    }\n                    groupedParameterBuilder.getGenericParameterBuilder().getAddedIndexAndParameters().get(columnIndex + 1).addAll(addedParameters);\n                }\n            });\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/parameter/impl/EncryptInsertOnDuplicateKeyUpdateValueParameterRewriter.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2021-09-14 07:49:20","commitOrder":2,"curCode":"    private void encryptInsertValue(final EncryptAlgorithm encryptAlgorithm, final String tableName, final int parameterIndex,\n                                    final Object originalValue, final StandardParameterBuilder parameterBuilder, final String encryptLogicColumnName) {\n        parameterBuilder.addReplacedParameters(parameterIndex, encryptAlgorithm.encrypt(originalValue));\n        Collection<Object> addedParameters = new LinkedList<>();\n        if (encryptAlgorithm instanceof QueryAssistedEncryptAlgorithm) {\n            Optional<String> assistedColumnName = getEncryptRule().findAssistedQueryColumn(tableName, encryptLogicColumnName);\n            Preconditions.checkArgument(assistedColumnName.isPresent(), \"Can not find assisted query Column Name\");\n            addedParameters.add(((QueryAssistedEncryptAlgorithm) encryptAlgorithm).queryAssistedEncrypt(originalValue));\n        }\n        if (getEncryptRule().findPlainColumn(tableName, encryptLogicColumnName).isPresent()) {\n            addedParameters.add(originalValue);\n        }\n        if (!addedParameters.isEmpty()) {\n            if (!parameterBuilder.getAddedIndexAndParameters().containsKey(parameterIndex + 1)) {\n                parameterBuilder.getAddedIndexAndParameters().put(parameterIndex + 1, new LinkedList<>());\n            }\n            parameterBuilder.getAddedIndexAndParameters().get(parameterIndex + 1).addAll(addedParameters);\n        }\n    }\n","date":"2021-09-14 07:49:20","endLine":109,"groupId":"6467","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"encryptInsertValue","params":"(finalEncryptAlgorithmencryptAlgorithm@finalStringtableName@finalintparameterIndex@finalObjectoriginalValue@finalStandardParameterBuilderparameterBuilder@finalStringencryptLogicColumnName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/63/a5a6078f803a7944821e4da973f7f2c27d6220.src","preCode":"    private void encryptInsertValue(final EncryptAlgorithm encryptAlgorithm, final String tableName, final int parameterIndex,\n                                    final Object originalValue, final StandardParameterBuilder parameterBuilder, final String encryptLogicColumnName) {\n        parameterBuilder.addReplacedParameters(parameterIndex, encryptAlgorithm.encrypt(originalValue));\n        Collection<Object> addedParameters = new LinkedList<>();\n        if (encryptAlgorithm instanceof QueryAssistedEncryptAlgorithm) {\n            Optional<String> assistedColumnName = getEncryptRule().findAssistedQueryColumn(tableName, encryptLogicColumnName);\n            Preconditions.checkArgument(assistedColumnName.isPresent(), \"Can not find assisted query Column Name\");\n            addedParameters.add(((QueryAssistedEncryptAlgorithm) encryptAlgorithm).queryAssistedEncrypt(originalValue.toString()));\n        }\n        if (getEncryptRule().findPlainColumn(tableName, encryptLogicColumnName).isPresent()) {\n            addedParameters.add(originalValue);\n        }\n        if (!addedParameters.isEmpty()) {\n            if (!parameterBuilder.getAddedIndexAndParameters().containsKey(parameterIndex + 1)) {\n                parameterBuilder.getAddedIndexAndParameters().put(parameterIndex + 1, new LinkedList<>());\n            }\n            parameterBuilder.getAddedIndexAndParameters().get(parameterIndex + 1).addAll(addedParameters);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/parameter/impl/EncryptInsertValueParameterRewriter.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"73cee3614c582a14b77b3f6b1cda6049dee5da67","commitMessage":"@@@modify QueryAssistedEncryptAlgorithm queryAssistedEncrypt method para? (#12409)\n\n* modify QueryAssistedEncryptAlgorithm queryAssistedEncrypt method parameter to enable user decide how use plainText\n\n* modify method parameter type","date":"2021-09-14 07:49:20","modifiedFileCount":"9","status":"M","submitter":"CodingBingo"},{"authorTime":"2021-09-14 07:49:20","codes":[{"authorDate":"2021-09-15 16:43:12","commitOrder":3,"curCode":"    public void rewrite(final ParameterBuilder parameterBuilder, final InsertStatementContext insertStatementContext, final List<Object> parameters) {\n        String tableName = insertStatementContext.getSqlStatement().getTable().getTableName().getIdentifier().getValue();\n        GroupedParameterBuilder groupedParameterBuilder = (GroupedParameterBuilder) parameterBuilder;\n        OnDuplicateUpdateContext onDuplicateKeyUpdateValueContext = insertStatementContext.getOnDuplicateKeyUpdateValueContext();\n        String schemaName = insertStatementContext.getSchemaName();\n        for (int index = 0; index < onDuplicateKeyUpdateValueContext.getValueExpressions().size(); index++) {\n            int columnIndex = index;\n            String encryptLogicColumnName = onDuplicateKeyUpdateValueContext.getColumn(columnIndex).getIdentifier().getValue();\n            Optional<EncryptAlgorithm> encryptorOptional = getEncryptRule().findEncryptor(schemaName, tableName, encryptLogicColumnName);\n            encryptorOptional.ifPresent(encryptor -> {\n                Object plainColumnValue = onDuplicateKeyUpdateValueContext.getValue(columnIndex);\n                Object cipherColumnValue = encryptorOptional.get().encrypt(plainColumnValue);\n                groupedParameterBuilder.getGenericParameterBuilder().addReplacedParameters(columnIndex, cipherColumnValue);\n                Collection<Object> addedParameters = new LinkedList<>();\n                if (encryptor instanceof QueryAssistedEncryptAlgorithm) {\n                    Optional<String> assistedColumnName = getEncryptRule().findAssistedQueryColumn(tableName, encryptLogicColumnName);\n                    Preconditions.checkArgument(assistedColumnName.isPresent(), \"Can not find assisted query Column Name\");\n                    addedParameters.add(((QueryAssistedEncryptAlgorithm) encryptor).queryAssistedEncrypt(plainColumnValue));\n                }\n                if (getEncryptRule().findPlainColumn(tableName, encryptLogicColumnName).isPresent()) {\n                    addedParameters.add(plainColumnValue);\n                }\n                if (!addedParameters.isEmpty()) {\n                    if (!groupedParameterBuilder.getGenericParameterBuilder().getAddedIndexAndParameters().containsKey(columnIndex + 1)) {\n                        groupedParameterBuilder.getGenericParameterBuilder().getAddedIndexAndParameters().put(columnIndex + 1, new LinkedList<>());\n                    }\n                    groupedParameterBuilder.getGenericParameterBuilder().getAddedIndexAndParameters().get(columnIndex + 1).addAll(addedParameters);\n                }\n            });\n        }\n    }\n","date":"2021-09-15 16:43:12","endLine":80,"groupId":"10155","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"rewrite","params":"(finalParameterBuilderparameterBuilder@finalInsertStatementContextinsertStatementContext@finalList<Object>parameters)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/05/568b354234b76b2ac7acb57a0a8f8bd6e059f6.src","preCode":"    public void rewrite(final ParameterBuilder parameterBuilder, final InsertStatementContext insertStatementContext, final List<Object> parameters) {\n        String tableName = insertStatementContext.getSqlStatement().getTable().getTableName().getIdentifier().getValue();\n        GroupedParameterBuilder groupedParameterBuilder = (GroupedParameterBuilder) parameterBuilder;\n        OnDuplicateUpdateContext onDuplicateKeyUpdateValueContext = insertStatementContext.getOnDuplicateKeyUpdateValueContext();\n        for (int index = 0; index < onDuplicateKeyUpdateValueContext.getValueExpressions().size(); index++) {\n            int columnIndex = index;\n            String encryptLogicColumnName = onDuplicateKeyUpdateValueContext.getColumn(columnIndex).getIdentifier().getValue();\n            Optional<EncryptAlgorithm> encryptorOptional = getEncryptRule().findEncryptor(tableName, encryptLogicColumnName);\n            encryptorOptional.ifPresent(encryptor -> {\n                Object plainColumnValue = onDuplicateKeyUpdateValueContext.getValue(columnIndex);\n                Object cipherColumnValue = encryptorOptional.get().encrypt(plainColumnValue);\n                groupedParameterBuilder.getGenericParameterBuilder().addReplacedParameters(columnIndex, cipherColumnValue);\n                Collection<Object> addedParameters = new LinkedList<>();\n                if (encryptor instanceof QueryAssistedEncryptAlgorithm) {\n                    Optional<String> assistedColumnName = getEncryptRule().findAssistedQueryColumn(tableName, encryptLogicColumnName);\n                    Preconditions.checkArgument(assistedColumnName.isPresent(), \"Can not find assisted query Column Name\");\n                    addedParameters.add(((QueryAssistedEncryptAlgorithm) encryptor).queryAssistedEncrypt(plainColumnValue));\n                }\n                if (getEncryptRule().findPlainColumn(tableName, encryptLogicColumnName).isPresent()) {\n                    addedParameters.add(plainColumnValue);\n                }\n                if (!addedParameters.isEmpty()) {\n                    if (!groupedParameterBuilder.getGenericParameterBuilder().getAddedIndexAndParameters().containsKey(columnIndex + 1)) {\n                        groupedParameterBuilder.getGenericParameterBuilder().getAddedIndexAndParameters().put(columnIndex + 1, new LinkedList<>());\n                    }\n                    groupedParameterBuilder.getGenericParameterBuilder().getAddedIndexAndParameters().get(columnIndex + 1).addAll(addedParameters);\n                }\n            });\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/parameter/impl/EncryptInsertOnDuplicateKeyUpdateValueParameterRewriter.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2021-09-14 07:49:20","commitOrder":3,"curCode":"    private void encryptInsertValue(final EncryptAlgorithm encryptAlgorithm, final String tableName, final int parameterIndex,\n                                    final Object originalValue, final StandardParameterBuilder parameterBuilder, final String encryptLogicColumnName) {\n        parameterBuilder.addReplacedParameters(parameterIndex, encryptAlgorithm.encrypt(originalValue));\n        Collection<Object> addedParameters = new LinkedList<>();\n        if (encryptAlgorithm instanceof QueryAssistedEncryptAlgorithm) {\n            Optional<String> assistedColumnName = getEncryptRule().findAssistedQueryColumn(tableName, encryptLogicColumnName);\n            Preconditions.checkArgument(assistedColumnName.isPresent(), \"Can not find assisted query Column Name\");\n            addedParameters.add(((QueryAssistedEncryptAlgorithm) encryptAlgorithm).queryAssistedEncrypt(originalValue));\n        }\n        if (getEncryptRule().findPlainColumn(tableName, encryptLogicColumnName).isPresent()) {\n            addedParameters.add(originalValue);\n        }\n        if (!addedParameters.isEmpty()) {\n            if (!parameterBuilder.getAddedIndexAndParameters().containsKey(parameterIndex + 1)) {\n                parameterBuilder.getAddedIndexAndParameters().put(parameterIndex + 1, new LinkedList<>());\n            }\n            parameterBuilder.getAddedIndexAndParameters().get(parameterIndex + 1).addAll(addedParameters);\n        }\n    }\n","date":"2021-09-14 07:49:20","endLine":109,"groupId":"10155","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"encryptInsertValue","params":"(finalEncryptAlgorithmencryptAlgorithm@finalStringtableName@finalintparameterIndex@finalObjectoriginalValue@finalStandardParameterBuilderparameterBuilder@finalStringencryptLogicColumnName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/63/a5a6078f803a7944821e4da973f7f2c27d6220.src","preCode":"    private void encryptInsertValue(final EncryptAlgorithm encryptAlgorithm, final String tableName, final int parameterIndex,\n                                    final Object originalValue, final StandardParameterBuilder parameterBuilder, final String encryptLogicColumnName) {\n        parameterBuilder.addReplacedParameters(parameterIndex, encryptAlgorithm.encrypt(originalValue));\n        Collection<Object> addedParameters = new LinkedList<>();\n        if (encryptAlgorithm instanceof QueryAssistedEncryptAlgorithm) {\n            Optional<String> assistedColumnName = getEncryptRule().findAssistedQueryColumn(tableName, encryptLogicColumnName);\n            Preconditions.checkArgument(assistedColumnName.isPresent(), \"Can not find assisted query Column Name\");\n            addedParameters.add(((QueryAssistedEncryptAlgorithm) encryptAlgorithm).queryAssistedEncrypt(originalValue));\n        }\n        if (getEncryptRule().findPlainColumn(tableName, encryptLogicColumnName).isPresent()) {\n            addedParameters.add(originalValue);\n        }\n        if (!addedParameters.isEmpty()) {\n            if (!parameterBuilder.getAddedIndexAndParameters().containsKey(parameterIndex + 1)) {\n                parameterBuilder.getAddedIndexAndParameters().put(parameterIndex + 1, new LinkedList<>());\n            }\n            parameterBuilder.getAddedIndexAndParameters().get(parameterIndex + 1).addAll(addedParameters);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/parameter/impl/EncryptInsertValueParameterRewriter.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"N"}],"commitId":"619b0a53d69772fe1035482275430e1baa9d7743","commitMessage":"@@@using SchemaAvailable & EncryptPropertiesBuilder to pass schema. owner. table. column value into EncryptAlgorithm (#12372)\n\n* modify .gitignore to ignore .factorypath\n\n* using SchemaAvailable & EncryptPropertiesBuilder to pass schema. owner. table. column value into EncryptAlgorithm\n\n* fix testcase of EncryptAlgorithmMetaDataTest\n\n* refactor on process multiple tables\n\n* revert on process multiple tables\n\n* revert changes on EncryptProjectionTokenGenerator\n\n* remove unused imports\n\n* fix bug: properties override while set props in findEncryptor\n\n* fix bug: properties override while set props in findEncryptor\n\n* remove unused imports\n\n* fix bug: properties override while set props in findEncryptor\n\n* revoke pass schemaName on ddl statement\n\n* using simplify new properties to set schema.  owner.  table and column\n\n* fix to match develop rule\n\n* change method name to simpilify\n\n* implements schemaAvailable from DMLStatementContext\n\n* performance improvement and rat fix\n\n* revert schemaName on create and alter table statement\n\n* remove unused import","date":"2021-09-15 16:43:12","modifiedFileCount":"29","status":"M","submitter":"cheese8"}]
