[{"authorTime":"2021-01-18 12:38:04","codes":[{"authorDate":"2021-03-12 17:12:30","commitOrder":7,"curCode":"    private boolean execute(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, final ExecuteCallback executor,\n                            final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits) throws SQLException {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        JDBCExecutorCallback<Boolean> jdbcExecutorCallback = new JDBCExecutorCallback<Boolean>(\n                metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return executor.execute(sql, statement);\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.of(sqlStatement instanceof SelectStatement);\n            }\n        };\n        return driverJDBCExecutor.execute(executionGroupContext, sqlStatement, routeUnits, jdbcExecutorCallback);\n    }\n","date":"2021-03-12 17:12:30","endLine":389,"groupId":"10012","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(finalExecutionGroupContext<JDBCExecutionUnit>executionGroupContext@finalExecuteCallbackexecutor@finalSQLStatementsqlStatement@finalCollection<RouteUnit>routeUnits)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4a/814962e038809b0d5641d34b1a556c19148dff.src","preCode":"    private boolean execute(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, final ExecuteCallback executor,\n                            final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits) throws SQLException {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        JDBCExecutorCallback<Boolean> jdbcExecutorCallback = new JDBCExecutorCallback<Boolean>(\n                metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return executor.execute(sql, statement);\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.of(sqlStatement instanceof SelectStatement);\n            }\n        };\n        return driverJDBCExecutor.execute(executionGroupContext, sqlStatement, routeUnits, jdbcExecutorCallback);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":372,"status":"B"},{"authorDate":"2021-01-18 12:38:04","commitOrder":7,"curCode":"    private JDBCExecutorCallback<Boolean> createExecuteCallback() {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        return new JDBCExecutorCallback<Boolean>(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return ((PreparedStatement) statement).execute();\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.of(sqlStatement instanceof SelectStatement);\n            }\n        };\n    }\n","date":"2021-01-18 12:38:04","endLine":315,"groupId":"8135","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecuteCallback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f0/833350716384a185e9f9fcf5847165d841200b.src","preCode":"    private JDBCExecutorCallback<Boolean> createExecuteCallback() {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        return new JDBCExecutorCallback<Boolean>(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return ((PreparedStatement) statement).execute();\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.of(sqlStatement instanceof SelectStatement);\n            }\n        };\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"NB"}],"commitId":"30ebff26e8734ce0809baf9be78cd2513ee1ae98","commitMessage":"@@@Create executionGroup context (#9643)\n\n* Show ddl/dml process\n\n* fix unit test\n\n* fix java doc","date":"2021-03-12 17:12:30","modifiedFileCount":"15","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-01-18 12:38:04","codes":[{"authorDate":"2021-03-16 18:29:46","commitOrder":8,"curCode":"    private boolean execute(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, final ExecuteCallback executor,\n                            final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits) throws SQLException {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        JDBCExecutorCallback<Boolean> jdbcExecutorCallback = new JDBCExecutorCallback<Boolean>(\n                metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return executor.execute(sql, statement);\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.of(sqlStatement instanceof SelectStatement);\n            }\n        };\n        return driverJDBCExecutor.execute(executionGroupContext, executionContext.getSqlStatementContext(), routeUnits, jdbcExecutorCallback);\n    }\n","date":"2021-03-16 18:29:46","endLine":389,"groupId":"10012","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(finalExecutionGroupContext<JDBCExecutionUnit>executionGroupContext@finalExecuteCallbackexecutor@finalSQLStatementsqlStatement@finalCollection<RouteUnit>routeUnits)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/cd/fe116348a96142ab379724cece799fdab73e46.src","preCode":"    private boolean execute(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, final ExecuteCallback executor,\n                            final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits) throws SQLException {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        JDBCExecutorCallback<Boolean> jdbcExecutorCallback = new JDBCExecutorCallback<Boolean>(\n                metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return executor.execute(sql, statement);\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.of(sqlStatement instanceof SelectStatement);\n            }\n        };\n        return driverJDBCExecutor.execute(executionGroupContext, sqlStatement, routeUnits, jdbcExecutorCallback);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":372,"status":"M"},{"authorDate":"2021-01-18 12:38:04","commitOrder":8,"curCode":"    private JDBCExecutorCallback<Boolean> createExecuteCallback() {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        return new JDBCExecutorCallback<Boolean>(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return ((PreparedStatement) statement).execute();\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.of(sqlStatement instanceof SelectStatement);\n            }\n        };\n    }\n","date":"2021-01-18 12:38:04","endLine":315,"groupId":"8135","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecuteCallback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f0/833350716384a185e9f9fcf5847165d841200b.src","preCode":"    private JDBCExecutorCallback<Boolean> createExecuteCallback() {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        return new JDBCExecutorCallback<Boolean>(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return ((PreparedStatement) statement).execute();\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.of(sqlStatement instanceof SelectStatement);\n            }\n        };\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"N"}],"commitId":"9130c5154708e33e1963223719c7b84394147145","commitMessage":"@@@import ExecuteProcessEngine (#9691)\n\n","date":"2021-03-16 18:29:46","modifiedFileCount":"9","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-06-18 15:41:14","codes":[{"authorDate":"2021-06-18 15:41:14","commitOrder":9,"curCode":"    private boolean execute(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, final ExecuteCallback executor,\n                            final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits) throws SQLException {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        JDBCExecutorCallback<Boolean> jdbcExecutorCallback = new JDBCExecutorCallback<Boolean>(\n                metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return executor.execute(sql, statement);\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.empty();\n            }\n        };\n        return driverJDBCExecutor.execute(executionGroupContext, executionContext.getSqlStatementContext(), routeUnits, jdbcExecutorCallback);\n    }\n","date":"2021-06-18 15:41:14","endLine":333,"groupId":"10012","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(finalExecutionGroupContext<JDBCExecutionUnit>executionGroupContext@finalExecuteCallbackexecutor@finalSQLStatementsqlStatement@finalCollection<RouteUnit>routeUnits)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/35/8830f6369103d170a16d6fe2d813aa72017f8a.src","preCode":"    private boolean execute(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, final ExecuteCallback executor,\n                            final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits) throws SQLException {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        JDBCExecutorCallback<Boolean> jdbcExecutorCallback = new JDBCExecutorCallback<Boolean>(\n                metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return executor.execute(sql, statement);\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.of(sqlStatement instanceof SelectStatement);\n            }\n        };\n        return driverJDBCExecutor.execute(executionGroupContext, executionContext.getSqlStatementContext(), routeUnits, jdbcExecutorCallback);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"},{"authorDate":"2021-06-18 15:41:14","commitOrder":9,"curCode":"    private JDBCExecutorCallback<Boolean> createExecuteCallback() {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        return new JDBCExecutorCallback<Boolean>(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return ((PreparedStatement) statement).execute();\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.empty();\n            }\n        };\n    }\n","date":"2021-06-18 15:41:14","endLine":314,"groupId":"8135","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecuteCallback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/82/af5b5d4da7c395eef2253f4c895cfa7af72c87.src","preCode":"    private JDBCExecutorCallback<Boolean> createExecuteCallback() {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        return new JDBCExecutorCallback<Boolean>(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return ((PreparedStatement) statement).execute();\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.of(sqlStatement instanceof SelectStatement);\n            }\n        };\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"}],"commitId":"c029efae30cb0b88006583e51b5ed90c19170531","commitMessage":"@@@For #10844 & #10138.  Fix getSaneResult in ShardingJDBC (#10845)\n\n* For #10844&#10138.  Fix getSaneResult in ShardingJDBC\n\n* Add unit test and fix test error.","date":"2021-06-18 15:41:14","modifiedFileCount":"8","status":"M","submitter":"Raigor"},{"authorTime":"2021-06-18 15:41:14","codes":[{"authorDate":"2021-06-25 16:56:56","commitOrder":10,"curCode":"    private boolean execute(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, final ExecuteCallback executor,\n                            final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits) throws SQLException {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        JDBCExecutorCallback<Boolean> jdbcExecutorCallback = new JDBCExecutorCallback<Boolean>(\n                metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return executor.execute(sql, statement);\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.empty();\n            }\n        };\n        return driverJDBCExecutor.execute(executionGroupContext, executionContext.getLogicSQL(), routeUnits, jdbcExecutorCallback);\n    }\n","date":"2021-06-25 16:56:56","endLine":333,"groupId":"10012","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(finalExecutionGroupContext<JDBCExecutionUnit>executionGroupContext@finalExecuteCallbackexecutor@finalSQLStatementsqlStatement@finalCollection<RouteUnit>routeUnits)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/78/e40cf78edce2e2a429b3a21d5461f6041f4a18.src","preCode":"    private boolean execute(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, final ExecuteCallback executor,\n                            final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits) throws SQLException {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        JDBCExecutorCallback<Boolean> jdbcExecutorCallback = new JDBCExecutorCallback<Boolean>(\n                metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return executor.execute(sql, statement);\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.empty();\n            }\n        };\n        return driverJDBCExecutor.execute(executionGroupContext, executionContext.getSqlStatementContext(), routeUnits, jdbcExecutorCallback);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"},{"authorDate":"2021-06-18 15:41:14","commitOrder":10,"curCode":"    private JDBCExecutorCallback<Boolean> createExecuteCallback() {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        return new JDBCExecutorCallback<Boolean>(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return ((PreparedStatement) statement).execute();\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.empty();\n            }\n        };\n    }\n","date":"2021-06-18 15:41:14","endLine":314,"groupId":"8135","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecuteCallback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/82/af5b5d4da7c395eef2253f4c895cfa7af72c87.src","preCode":"    private JDBCExecutorCallback<Boolean> createExecuteCallback() {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        return new JDBCExecutorCallback<Boolean>(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return ((PreparedStatement) statement).execute();\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.empty();\n            }\n        };\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"N"}],"commitId":"2fa8d9de63960f5a160b64306418d9007a7ed528","commitMessage":"@@@Show logic SQL in execution process list Info column (#11006)\n\n* Prepare LogicSQL for ExecuteProcessReporter\n\n* Persist logic SQL and show in Info column","date":"2021-06-25 16:56:56","modifiedFileCount":"17","status":"M","submitter":"sandynz"},{"authorTime":"2021-08-09 16:45:36","codes":[{"authorDate":"2021-08-09 16:45:36","commitOrder":11,"curCode":"    private boolean execute(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, final ExecuteCallback executor,\n                            final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits) throws SQLException {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        JDBCExecutorCallback<Boolean> jdbcExecutorCallback = new JDBCExecutorCallback<Boolean>(\n                metaDataContexts.getMetaData(connection.getSchemaName()).getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return executor.execute(sql, statement);\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.empty();\n            }\n        };\n        return driverJDBCExecutor.execute(executionGroupContext, executionContext.getLogicSQL(), routeUnits, jdbcExecutorCallback);\n    }\n","date":"2021-08-09 16:45:36","endLine":331,"groupId":"121202","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(finalExecutionGroupContext<JDBCExecutionUnit>executionGroupContext@finalExecuteCallbackexecutor@finalSQLStatementsqlStatement@finalCollection<RouteUnit>routeUnits)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d2/e584707f24bd62d48cc852cbeea49da6462e7e.src","preCode":"    private boolean execute(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, final ExecuteCallback executor,\n                            final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits) throws SQLException {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        JDBCExecutorCallback<Boolean> jdbcExecutorCallback = new JDBCExecutorCallback<Boolean>(\n                metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return executor.execute(sql, statement);\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.empty();\n            }\n        };\n        return driverJDBCExecutor.execute(executionGroupContext, executionContext.getLogicSQL(), routeUnits, jdbcExecutorCallback);\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"M"},{"authorDate":"2021-08-09 16:45:36","commitOrder":11,"curCode":"    private JDBCExecutorCallback<Boolean> createExecuteCallback() {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        return new JDBCExecutorCallback<Boolean>(metaDataContexts.getMetaData(connection.getSchemaName()).getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return ((PreparedStatement) statement).execute();\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.empty();\n            }\n        };\n    }\n","date":"2021-08-09 16:45:36","endLine":313,"groupId":"121202","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createExecuteCallback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/50/baeaf18c596da58f3517bd1589948bda40a605.src","preCode":"    private JDBCExecutorCallback<Boolean> createExecuteCallback() {\n        boolean isExceptionThrown = SQLExecutorExceptionHandler.isExceptionThrown();\n        return new JDBCExecutorCallback<Boolean>(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType(), sqlStatement, isExceptionThrown) {\n            \n            @Override\n            protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                return ((PreparedStatement) statement).execute();\n            }\n            \n            @Override\n            protected Optional<Boolean> getSaneResult(final SQLStatement sqlStatement) {\n                return Optional.empty();\n            }\n        };\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"}],"commitId":"222aeb59cc07d5eb3edc858c68b9d95cc903bcec","commitMessage":"@@@JDBC-core module delete getDefaultMetaData() (#11714)\n\n* jdbc-core module delete getDefaultMetaData()\n\n* update\n\n* optimization","date":"2021-08-09 16:45:36","modifiedFileCount":"22","status":"M","submitter":"zhaojinchao"}]
