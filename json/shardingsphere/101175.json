[{"authorTime":"2020-05-16 19:36:14","codes":[{"authorDate":"2020-05-16 19:36:14","commitOrder":1,"curCode":"    public void assertExecuteBatchForSinglePreparedStatementFailure() throws SQLException {\n        PreparedStatement preparedStatement = getPreparedStatement();\n        SQLException exp = new SQLException();\n        when(preparedStatement.executeBatch()).thenThrow(exp);\n        setExecuteGroups(Collections.singletonList(preparedStatement));\n        assertThat(actual.executeBatch(sqlStatementContext), is(new int[] {0, 0}));\n        verify(preparedStatement).executeBatch();\n    }\n","date":"2020-05-16 19:36:14","endLine":115,"groupId":"14239","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteBatchForSinglePreparedStatementFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/59/ab0a0662843a06eb932ff7bb73af8c8f37b1da.src","preCode":"    public void assertExecuteBatchForSinglePreparedStatementFailure() throws SQLException {\n        PreparedStatement preparedStatement = getPreparedStatement();\n        SQLException exp = new SQLException();\n        when(preparedStatement.executeBatch()).thenThrow(exp);\n        setExecuteGroups(Collections.singletonList(preparedStatement));\n        assertThat(actual.executeBatch(sqlStatementContext), is(new int[] {0, 0}));\n        verify(preparedStatement).executeBatch();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/executor/batch/BatchPreparedStatementExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"},{"authorDate":"2020-05-16 19:36:14","commitOrder":1,"curCode":"    public void assertExecuteBatchForMultiplePreparedStatementsFailure() throws SQLException {\n        PreparedStatement preparedStatement1 = getPreparedStatement();\n        PreparedStatement preparedStatement2 = getPreparedStatement();\n        SQLException exp = new SQLException();\n        when(preparedStatement1.executeBatch()).thenThrow(exp);\n        when(preparedStatement2.executeBatch()).thenThrow(exp);\n        setExecuteGroups(Arrays.asList(preparedStatement1, preparedStatement2));\n        assertThat(actual.executeBatch(sqlStatementContext), is(new int[] {0, 0}));\n        verify(preparedStatement1).executeBatch();\n        verify(preparedStatement2).executeBatch();\n    }\n","date":"2020-05-16 19:36:14","endLine":128,"groupId":"9938","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteBatchForMultiplePreparedStatementsFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/59/ab0a0662843a06eb932ff7bb73af8c8f37b1da.src","preCode":"    public void assertExecuteBatchForMultiplePreparedStatementsFailure() throws SQLException {\n        PreparedStatement preparedStatement1 = getPreparedStatement();\n        PreparedStatement preparedStatement2 = getPreparedStatement();\n        SQLException exp = new SQLException();\n        when(preparedStatement1.executeBatch()).thenThrow(exp);\n        when(preparedStatement2.executeBatch()).thenThrow(exp);\n        setExecuteGroups(Arrays.asList(preparedStatement1, preparedStatement2));\n        assertThat(actual.executeBatch(sqlStatementContext), is(new int[] {0, 0}));\n        verify(preparedStatement1).executeBatch();\n        verify(preparedStatement2).executeBatch();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/executor/batch/BatchPreparedStatementExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"B"}],"commitId":"468e4540f107bacea98e9785b7312b2e5bad0c7e","commitMessage":"@@@Rename sharding-jdbc to shardingsphere-jdbc (#5641)\n\n* Rename sharding-jdbc to shardingsphere-jdbc\n\n* rename org.apache.shardingsphere.shardingjdbc to org.apache.shardingsphere.driver\n\n* rename org.apache.shardingsphere.shardingjdbc to org.apache.shardingsphere.driver","date":"2020-05-16 19:36:14","modifiedFileCount":"32","status":"B","submitter":"Liang Zhang"},{"authorTime":"2020-08-30 13:52:37","codes":[{"authorDate":"2020-08-30 13:52:37","commitOrder":2,"curCode":"    public void assertExecuteBatchForSinglePreparedStatementFailure() throws SQLException {\n        PreparedStatement preparedStatement = getPreparedStatement();\n        SQLException exp = new SQLException(\"\");\n        when(preparedStatement.executeBatch()).thenThrow(exp);\n        setExecuteGroups(Collections.singletonList(preparedStatement));\n        assertThat(actual.executeBatch(sqlStatementContext), is(new int[] {0, 0}));\n        verify(preparedStatement).executeBatch();\n    }\n","date":"2020-08-30 13:52:37","endLine":114,"groupId":"14239","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteBatchForSinglePreparedStatementFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/59/46936314f79c09261ba414f7117d0b868512e7.src","preCode":"    public void assertExecuteBatchForSinglePreparedStatementFailure() throws SQLException {\n        PreparedStatement preparedStatement = getPreparedStatement();\n        SQLException exp = new SQLException();\n        when(preparedStatement.executeBatch()).thenThrow(exp);\n        setExecuteGroups(Collections.singletonList(preparedStatement));\n        assertThat(actual.executeBatch(sqlStatementContext), is(new int[] {0, 0}));\n        verify(preparedStatement).executeBatch();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/executor/batch/BatchPreparedStatementExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-08-30 13:52:37","commitOrder":2,"curCode":"    public void assertExecuteBatchForMultiplePreparedStatementsFailure() throws SQLException {\n        PreparedStatement preparedStatement1 = getPreparedStatement();\n        PreparedStatement preparedStatement2 = getPreparedStatement();\n        SQLException exp = new SQLException(\"\");\n        when(preparedStatement1.executeBatch()).thenThrow(exp);\n        when(preparedStatement2.executeBatch()).thenThrow(exp);\n        setExecuteGroups(Arrays.asList(preparedStatement1, preparedStatement2));\n        assertThat(actual.executeBatch(sqlStatementContext), is(new int[] {0, 0}));\n        verify(preparedStatement1).executeBatch();\n        verify(preparedStatement2).executeBatch();\n    }\n","date":"2020-08-30 13:52:37","endLine":127,"groupId":"9938","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteBatchForMultiplePreparedStatementsFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/59/46936314f79c09261ba414f7117d0b868512e7.src","preCode":"    public void assertExecuteBatchForMultiplePreparedStatementsFailure() throws SQLException {\n        PreparedStatement preparedStatement1 = getPreparedStatement();\n        PreparedStatement preparedStatement2 = getPreparedStatement();\n        SQLException exp = new SQLException();\n        when(preparedStatement1.executeBatch()).thenThrow(exp);\n        when(preparedStatement2.executeBatch()).thenThrow(exp);\n        setExecuteGroups(Arrays.asList(preparedStatement1, preparedStatement2));\n        assertThat(actual.executeBatch(sqlStatementContext), is(new int[] {0, 0}));\n        verify(preparedStatement1).executeBatch();\n        verify(preparedStatement2).executeBatch();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/executor/batch/BatchPreparedStatementExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"5b0d98cb697d4b02fbab09716a55b434244a33e6","commitMessage":"@@@Remove transaction dependency for kernel module (#7145)\n\n* Add DataSourceChangeCompletedEvent\n\n* Add TransactionManagerEngineContexts\n\n* Use TransactionManagerEngineContexts\n\n* Rename TransactionContexts\n\n* Use TransactionContexts\n\n* Remove transaction dependency for kernel module\n\n* Add transaction dependency for orche schema module","date":"2020-08-30 13:52:37","modifiedFileCount":"34","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-09-17 08:59:11","codes":[{"authorDate":"2020-09-17 08:59:11","commitOrder":3,"curCode":"    public void assertExecuteBatchForSinglePreparedStatementFailure() throws SQLException {\n        PreparedStatement preparedStatement = getPreparedStatement();\n        SQLException ex = new SQLException(\"\");\n        when(preparedStatement.executeBatch()).thenThrow(ex);\n        setExecuteGroups(Collections.singletonList(preparedStatement));\n        assertThat(actual.executeBatch(sqlStatementContext), is(new int[] {0, 0}));\n        verify(preparedStatement).executeBatch();\n    }\n","date":"2020-09-17 08:59:11","endLine":114,"groupId":"5901","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteBatchForSinglePreparedStatementFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/cb/c2a57bfcf199d9c87b4f6bca3b61825b3c4a64.src","preCode":"    public void assertExecuteBatchForSinglePreparedStatementFailure() throws SQLException {\n        PreparedStatement preparedStatement = getPreparedStatement();\n        SQLException exp = new SQLException(\"\");\n        when(preparedStatement.executeBatch()).thenThrow(exp);\n        setExecuteGroups(Collections.singletonList(preparedStatement));\n        assertThat(actual.executeBatch(sqlStatementContext), is(new int[] {0, 0}));\n        verify(preparedStatement).executeBatch();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/executor/batch/BatchPreparedStatementExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-09-17 08:59:11","commitOrder":3,"curCode":"    public void assertExecuteBatchForMultiplePreparedStatementsFailure() throws SQLException {\n        PreparedStatement preparedStatement1 = getPreparedStatement();\n        PreparedStatement preparedStatement2 = getPreparedStatement();\n        SQLException ex = new SQLException(\"\");\n        when(preparedStatement1.executeBatch()).thenThrow(ex);\n        when(preparedStatement2.executeBatch()).thenThrow(ex);\n        setExecuteGroups(Arrays.asList(preparedStatement1, preparedStatement2));\n        assertThat(actual.executeBatch(sqlStatementContext), is(new int[] {0, 0}));\n        verify(preparedStatement1).executeBatch();\n        verify(preparedStatement2).executeBatch();\n    }\n","date":"2020-09-17 08:59:11","endLine":127,"groupId":"2707","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteBatchForMultiplePreparedStatementsFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/cb/c2a57bfcf199d9c87b4f6bca3b61825b3c4a64.src","preCode":"    public void assertExecuteBatchForMultiplePreparedStatementsFailure() throws SQLException {\n        PreparedStatement preparedStatement1 = getPreparedStatement();\n        PreparedStatement preparedStatement2 = getPreparedStatement();\n        SQLException exp = new SQLException(\"\");\n        when(preparedStatement1.executeBatch()).thenThrow(exp);\n        when(preparedStatement2.executeBatch()).thenThrow(exp);\n        setExecuteGroups(Arrays.asList(preparedStatement1, preparedStatement2));\n        assertThat(actual.executeBatch(sqlStatementContext), is(new int[] {0, 0}));\n        verify(preparedStatement1).executeBatch();\n        verify(preparedStatement2).executeBatch();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/executor/batch/BatchPreparedStatementExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"e8297b02c37bfbfb188ee8f4af9ad7a6b78a1ce2","commitMessage":"@@@For checkstyle (#7495)\n\n* For checkstyle\n\n* Remove redundant suppression\n\n* For checkstyle\n\n* For checkstyle\n\n* For checkstyle\n\n* For checkstyle\n\n* For checkstyle\n\n* For checkstyle\n\n* For checkstyle\n\n* Add final for classes which not design for extension\n\n* Rename return value to result\n\n* Rename exception variable name","date":"2020-09-17 08:59:11","modifiedFileCount":"139","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-21 16:51:36","codes":[{"authorDate":"2020-11-21 16:51:36","commitOrder":4,"curCode":"    public void assertExecuteBatchForSinglePreparedStatementFailure() throws SQLException {\n        PreparedStatement preparedStatement = getPreparedStatement();\n        SQLException ex = new SQLException(\"\");\n        when(preparedStatement.executeBatch()).thenThrow(ex);\n        setExecutionGroups(Collections.singletonList(preparedStatement));\n        assertThat(actual.executeBatch(sqlStatementContext), is(new int[] {0, 0}));\n        verify(preparedStatement).executeBatch();\n    }\n","date":"2020-11-21 16:51:36","endLine":114,"groupId":"5901","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteBatchForSinglePreparedStatementFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a1/59388f1850d058d10b70b5e32cfb62b731e1db.src","preCode":"    public void assertExecuteBatchForSinglePreparedStatementFailure() throws SQLException {\n        PreparedStatement preparedStatement = getPreparedStatement();\n        SQLException ex = new SQLException(\"\");\n        when(preparedStatement.executeBatch()).thenThrow(ex);\n        setExecuteGroups(Collections.singletonList(preparedStatement));\n        assertThat(actual.executeBatch(sqlStatementContext), is(new int[] {0, 0}));\n        verify(preparedStatement).executeBatch();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/executor/batch/BatchPreparedStatementExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-11-21 16:51:36","commitOrder":4,"curCode":"    public void assertExecuteBatchForMultiplePreparedStatementsFailure() throws SQLException {\n        PreparedStatement preparedStatement1 = getPreparedStatement();\n        PreparedStatement preparedStatement2 = getPreparedStatement();\n        SQLException ex = new SQLException(\"\");\n        when(preparedStatement1.executeBatch()).thenThrow(ex);\n        when(preparedStatement2.executeBatch()).thenThrow(ex);\n        setExecutionGroups(Arrays.asList(preparedStatement1, preparedStatement2));\n        assertThat(actual.executeBatch(sqlStatementContext), is(new int[] {0, 0}));\n        verify(preparedStatement1).executeBatch();\n        verify(preparedStatement2).executeBatch();\n    }\n","date":"2020-11-21 16:51:36","endLine":127,"groupId":"2707","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteBatchForMultiplePreparedStatementsFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a1/59388f1850d058d10b70b5e32cfb62b731e1db.src","preCode":"    public void assertExecuteBatchForMultiplePreparedStatementsFailure() throws SQLException {\n        PreparedStatement preparedStatement1 = getPreparedStatement();\n        PreparedStatement preparedStatement2 = getPreparedStatement();\n        SQLException ex = new SQLException(\"\");\n        when(preparedStatement1.executeBatch()).thenThrow(ex);\n        when(preparedStatement2.executeBatch()).thenThrow(ex);\n        setExecuteGroups(Arrays.asList(preparedStatement1, preparedStatement2));\n        assertThat(actual.executeBatch(sqlStatementContext), is(new int[] {0, 0}));\n        verify(preparedStatement1).executeBatch();\n        verify(preparedStatement2).executeBatch();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/executor/batch/BatchPreparedStatementExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"3fb6cb96c05e25ea14f8f039d28e1a8fead64250","commitMessage":"@@@Scandalize of executor's class names  (#8265)\n\n* Move GroupEngine to same package\n\n* Rename ExecuteGroupEngine to ExecutionGroupEngine\n\n* Rename InputGroup to ExecutionGroup","date":"2020-11-21 16:51:36","modifiedFileCount":"17","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-06-18 15:41:14","codes":[{"authorDate":"2021-06-18 15:41:14","commitOrder":5,"curCode":"    public void assertExecuteBatchForSinglePreparedStatementFailure() throws SQLException {\n        PreparedStatement preparedStatement = getPreparedStatement();\n        SQLException ex = new SQLException(\"\");\n        when(preparedStatement.executeBatch()).thenThrow(ex);\n        setExecutionGroups(Collections.singletonList(preparedStatement));\n        actual.executeBatch(sqlStatementContext);\n        verify(preparedStatement).executeBatch();\n    }\n","date":"2021-06-18 15:41:14","endLine":115,"groupId":"5901","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteBatchForSinglePreparedStatementFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/21/6e7d9812503f232d04bca8fee457e7e33a806f.src","preCode":"    public void assertExecuteBatchForSinglePreparedStatementFailure() throws SQLException {\n        PreparedStatement preparedStatement = getPreparedStatement();\n        SQLException ex = new SQLException(\"\");\n        when(preparedStatement.executeBatch()).thenThrow(ex);\n        setExecutionGroups(Collections.singletonList(preparedStatement));\n        assertThat(actual.executeBatch(sqlStatementContext), is(new int[] {0, 0}));\n        verify(preparedStatement).executeBatch();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/executor/batch/BatchPreparedStatementExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2021-06-18 15:41:14","commitOrder":5,"curCode":"    public void assertExecuteBatchForMultiplePreparedStatementsFailure() throws SQLException {\n        PreparedStatement preparedStatement1 = getPreparedStatement();\n        PreparedStatement preparedStatement2 = getPreparedStatement();\n        SQLException ex = new SQLException(\"\");\n        when(preparedStatement1.executeBatch()).thenThrow(ex);\n        when(preparedStatement2.executeBatch()).thenThrow(ex);\n        setExecutionGroups(Arrays.asList(preparedStatement1, preparedStatement2));\n        actual.executeBatch(sqlStatementContext);\n        verify(preparedStatement1).executeBatch();\n        verify(preparedStatement2).executeBatch();\n    }\n","date":"2021-06-18 15:41:14","endLine":128,"groupId":"2707","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteBatchForMultiplePreparedStatementsFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/21/6e7d9812503f232d04bca8fee457e7e33a806f.src","preCode":"    public void assertExecuteBatchForMultiplePreparedStatementsFailure() throws SQLException {\n        PreparedStatement preparedStatement1 = getPreparedStatement();\n        PreparedStatement preparedStatement2 = getPreparedStatement();\n        SQLException ex = new SQLException(\"\");\n        when(preparedStatement1.executeBatch()).thenThrow(ex);\n        when(preparedStatement2.executeBatch()).thenThrow(ex);\n        setExecutionGroups(Arrays.asList(preparedStatement1, preparedStatement2));\n        assertThat(actual.executeBatch(sqlStatementContext), is(new int[] {0, 0}));\n        verify(preparedStatement1).executeBatch();\n        verify(preparedStatement2).executeBatch();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/executor/batch/BatchPreparedStatementExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"c029efae30cb0b88006583e51b5ed90c19170531","commitMessage":"@@@For #10844 & #10138.  Fix getSaneResult in ShardingJDBC (#10845)\n\n* For #10844&#10138.  Fix getSaneResult in ShardingJDBC\n\n* Add unit test and fix test error.","date":"2021-06-18 15:41:14","modifiedFileCount":"8","status":"M","submitter":"Raigor"},{"authorTime":"2021-08-15 02:33:31","codes":[{"authorDate":"2021-06-18 15:41:14","commitOrder":6,"curCode":"    public void assertExecuteBatchForSinglePreparedStatementFailure() throws SQLException {\n        PreparedStatement preparedStatement = getPreparedStatement();\n        SQLException ex = new SQLException(\"\");\n        when(preparedStatement.executeBatch()).thenThrow(ex);\n        setExecutionGroups(Collections.singletonList(preparedStatement));\n        actual.executeBatch(sqlStatementContext);\n        verify(preparedStatement).executeBatch();\n    }\n","date":"2021-06-18 15:41:14","endLine":115,"groupId":"101175","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteBatchForSinglePreparedStatementFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/21/6e7d9812503f232d04bca8fee457e7e33a806f.src","preCode":"    public void assertExecuteBatchForSinglePreparedStatementFailure() throws SQLException {\n        PreparedStatement preparedStatement = getPreparedStatement();\n        SQLException ex = new SQLException(\"\");\n        when(preparedStatement.executeBatch()).thenThrow(ex);\n        setExecutionGroups(Collections.singletonList(preparedStatement));\n        actual.executeBatch(sqlStatementContext);\n        verify(preparedStatement).executeBatch();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/executor/batch/BatchPreparedStatementExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"N"},{"authorDate":"2021-08-15 02:33:31","commitOrder":6,"curCode":"    public void assertExecuteBatchForMultiplePreparedStatementsFailure() throws SQLException {\n        PreparedStatement preparedStatement1 = getPreparedStatement();\n        PreparedStatement preparedStatement2 = getPreparedStatement();\n        SQLException ex = new SQLException(\"\");\n        when(preparedStatement1.executeBatch()).thenThrow(ex);\n        setExecutionGroups(Arrays.asList(preparedStatement1, preparedStatement2));\n        actual.executeBatch(sqlStatementContext);\n        verify(preparedStatement1).executeBatch();\n        verify(preparedStatement2).executeBatch();\n    }\n","date":"2021-08-15 02:33:31","endLine":128,"groupId":"101175","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"assertExecuteBatchForMultiplePreparedStatementsFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c6/4779b59c1573d9d36d0bbd743d13b2183d1f0e.src","preCode":"    public void assertExecuteBatchForMultiplePreparedStatementsFailure() throws SQLException {\n        PreparedStatement preparedStatement1 = getPreparedStatement();\n        PreparedStatement preparedStatement2 = getPreparedStatement();\n        SQLException ex = new SQLException(\"\");\n        when(preparedStatement1.executeBatch()).thenThrow(ex);\n        when(preparedStatement2.executeBatch()).thenThrow(ex);\n        setExecutionGroups(Arrays.asList(preparedStatement1, preparedStatement2));\n        actual.executeBatch(sqlStatementContext);\n        verify(preparedStatement1).executeBatch();\n        verify(preparedStatement2).executeBatch();\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/executor/batch/BatchPreparedStatementExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"d6e424ba68c64ea1835a42b0f4b0fb7f69c95323","commitMessage":"@@@Add ContextManager (#11822)\n\n* Add ContextManager\n\n* Use ContextManager on GovernanceShardingSphereDataSource\n\n* Use ContextManager on ShardingSphereDataSource\n\n* Use ContextManager on ShardingSphereConnection\n\n* Use ContextManager on ShardingSphereConnection\n\n* Refactor AbstractBaseExecutorTest\n\n* Use ContextManager on proxy\n\n* Fix test case","date":"2021-08-15 02:33:31","modifiedFileCount":"118","status":"M","submitter":"Liang Zhang"}]
