[{"authorTime":"2020-10-22 20:53:42","codes":[{"authorDate":"2020-10-22 20:53:42","commitOrder":1,"curCode":"    private ASTNode createAggregationSegment(final AggregationFunctionContext ctx, final String aggregationType) {\n        AggregationType type = AggregationType.valueOf(aggregationType.toUpperCase());\n        String innerExpression = ctx.start.getInputStream().getText(new Interval(ctx.LP_().getSymbol().getStartIndex(), ctx.stop.getStopIndex()));\n        if (null == ctx.distinct()) {\n            return new AggregationProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), type, innerExpression);\n        }\n        return new AggregationDistinctProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), type, innerExpression, getDistinctExpression(ctx));\n    }\n","date":"2020-10-22 20:53:42","endLine":418,"groupId":"6557","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createAggregationSegment","params":"(finalAggregationFunctionContextctx@finalStringaggregationType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5c/57ffeacf154844f0a67f662de75ac1ba20bb29.src","preCode":"    private ASTNode createAggregationSegment(final AggregationFunctionContext ctx, final String aggregationType) {\n        AggregationType type = AggregationType.valueOf(aggregationType.toUpperCase());\n        String innerExpression = ctx.start.getInputStream().getText(new Interval(ctx.LP_().getSymbol().getStartIndex(), ctx.stop.getStopIndex()));\n        if (null == ctx.distinct()) {\n            return new AggregationProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), type, innerExpression);\n        }\n        return new AggregationDistinctProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), type, innerExpression, getDistinctExpression(ctx));\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-oracle/src/main/java/org/apache/shardingsphere/sql/parser/oracle/visitor/statement/impl/OracleStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"B"},{"authorDate":"2020-10-22 20:53:42","commitOrder":1,"curCode":"    private ASTNode createAggregationSegment(final AggregationFunctionContext ctx, final String aggregationType) {\n        AggregationType type = AggregationType.valueOf(aggregationType.toUpperCase());\n        String innerExpression = ctx.start.getInputStream().getText(new Interval(ctx.LP_().getSymbol().getStartIndex(), ctx.stop.getStopIndex()));\n        if (null == ctx.distinct()) {\n            return new AggregationProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), type, innerExpression);\n        }\n        return new AggregationDistinctProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), type, innerExpression, getDistinctExpression(ctx));\n    }\n","date":"2020-10-22 20:53:42","endLine":418,"groupId":"6557","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createAggregationSegment","params":"(finalAggregationFunctionContextctx@finalStringaggregationType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5e/9a1bb22eb18753b494aa2ff27c231d6d10b250.src","preCode":"    private ASTNode createAggregationSegment(final AggregationFunctionContext ctx, final String aggregationType) {\n        AggregationType type = AggregationType.valueOf(aggregationType.toUpperCase());\n        String innerExpression = ctx.start.getInputStream().getText(new Interval(ctx.LP_().getSymbol().getStartIndex(), ctx.stop.getStopIndex()));\n        if (null == ctx.distinct()) {\n            return new AggregationProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), type, innerExpression);\n        }\n        return new AggregationDistinctProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), type, innerExpression, getDistinctExpression(ctx));\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sql92/src/main/java/org/apache/shardingsphere/sql/parser/sql92/visitor/statement/impl/SQL92StatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"B"}],"commitId":"07d1a8f96418e776a4e44de6610500f428d2c30b","commitMessage":"@@@refactor SQLVisitorFacadeFactory (#7891)\n\n","date":"2020-10-22 20:53:42","modifiedFileCount":"21","status":"B","submitter":"Juan Pan(Trista)"},{"authorTime":"2020-10-22 20:53:42","codes":[{"authorDate":"2021-08-14 09:45:10","commitOrder":2,"curCode":"    private ASTNode createAggregationSegment(final AggregationFunctionContext ctx, final String aggregationType) {\n        AggregationType type = AggregationType.valueOf(aggregationType.toUpperCase());\n        String innerExpression = ctx.start.getInputStream().getText(new Interval(ctx.LP_().get(0).getSymbol().getStartIndex(), ctx.stop.getStopIndex()));\n        if (null == ctx.DISTINCT()) {\n            return new AggregationProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), type, innerExpression);\n        }\n        return new AggregationDistinctProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), type, innerExpression, getDistinctExpression(ctx));\n    }\n","date":"2021-08-14 09:45:10","endLine":445,"groupId":"101381","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createAggregationSegment","params":"(finalAggregationFunctionContextctx@finalStringaggregationType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5c/dd73bfcdfde322bab59f0f5951e7abe20d8f3a.src","preCode":"    private ASTNode createAggregationSegment(final AggregationFunctionContext ctx, final String aggregationType) {\n        AggregationType type = AggregationType.valueOf(aggregationType.toUpperCase());\n        String innerExpression = ctx.start.getInputStream().getText(new Interval(ctx.LP_().getSymbol().getStartIndex(), ctx.stop.getStopIndex()));\n        if (null == ctx.distinct()) {\n            return new AggregationProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), type, innerExpression);\n        }\n        return new AggregationDistinctProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), type, innerExpression, getDistinctExpression(ctx));\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-oracle/src/main/java/org/apache/shardingsphere/sql/parser/oracle/visitor/statement/impl/OracleStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"M"},{"authorDate":"2020-10-22 20:53:42","commitOrder":2,"curCode":"    private ASTNode createAggregationSegment(final AggregationFunctionContext ctx, final String aggregationType) {\n        AggregationType type = AggregationType.valueOf(aggregationType.toUpperCase());\n        String innerExpression = ctx.start.getInputStream().getText(new Interval(ctx.LP_().getSymbol().getStartIndex(), ctx.stop.getStopIndex()));\n        if (null == ctx.distinct()) {\n            return new AggregationProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), type, innerExpression);\n        }\n        return new AggregationDistinctProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), type, innerExpression, getDistinctExpression(ctx));\n    }\n","date":"2020-10-22 20:53:42","endLine":418,"groupId":"101381","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createAggregationSegment","params":"(finalAggregationFunctionContextctx@finalStringaggregationType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5e/9a1bb22eb18753b494aa2ff27c231d6d10b250.src","preCode":"    private ASTNode createAggregationSegment(final AggregationFunctionContext ctx, final String aggregationType) {\n        AggregationType type = AggregationType.valueOf(aggregationType.toUpperCase());\n        String innerExpression = ctx.start.getInputStream().getText(new Interval(ctx.LP_().getSymbol().getStartIndex(), ctx.stop.getStopIndex()));\n        if (null == ctx.distinct()) {\n            return new AggregationProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), type, innerExpression);\n        }\n        return new AggregationDistinctProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), type, innerExpression, getDistinctExpression(ctx));\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sql92/src/main/java/org/apache/shardingsphere/sql/parser/sql92/visitor/statement/impl/SQL92StatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"N"}],"commitId":"682c6d99d5ea9c66fb5e04575978d9f4f2a64177","commitMessage":"@@@Add Oracle Select Model Clause Definition (#11503)\n\n* add oracle select model clause definition\n\n* change modelClause rule\n\n* add modelExpr.  introduce condition.  and remove previous simpleExpr rule\n\n* comment out external source SQLs\n\n* complete condition rule\n\n* uncomment testcases and modify modelExpr to match with uncommented testcases\n\n* define keyword A in Keyword.g4\n\n* capitalize keywords in SQL statements which consist of character A\n\n* remove commented code","date":"2021-08-14 09:45:10","modifiedFileCount":"6","status":"M","submitter":"Thanoshan MV"}]
