[{"authorTime":"2020-05-16 19:36:14","codes":[{"authorDate":"2021-06-01 23:28:18","commitOrder":2,"curCode":"    public void assertQueryWithFederateInSingleAndShardingTableWithAlias() throws SQLException {\n        ShardingSphereStatement preparedStatement = (ShardingSphereStatement) getShardingSphereDataSource().getConnection().createStatement();\n        ResultSet resultSet = preparedStatement.executeQuery(SELECT_SQL_BY_ID_ACROSS_SINGLE_AND_SHARDING_TABLES_ALIAS);\n        assertNotNull(resultSet);\n        assertTrue(resultSet.next());\n        assertThat(resultSet.getInt(1), is(1000));\n        assertThat(resultSet.getInt(2), is(10));\n        assertThat(resultSet.getString(3), is(\"init\"));\n        assertThat(resultSet.getInt(4), is(1000));\n        assertThat(resultSet.getInt(5), is(10000));\n        assertTrue(resultSet.next());\n        assertThat(resultSet.getInt(1), is(1001));\n        assertThat(resultSet.getInt(2), is(11));\n        assertThat(resultSet.getString(3), is(\"init\"));\n        assertThat(resultSet.getInt(4), is(1001));\n        assertThat(resultSet.getInt(5), is(10001));\n        assertFalse(resultSet.next());\n    }\n","date":"2021-06-01 23:28:18","endLine":123,"groupId":"11706","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertQueryWithFederateInSingleAndShardingTableWithAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/57/f25c9e2615765143ccf716c196f571920fa8fd.src","preCode":"    public void assertQueryWithFederateInSingleAndShardingTableWithAlias() throws SQLException {\n        ShardingSphereStatement preparedStatement = (ShardingSphereStatement) getShardingSphereDataSource().getConnection().createStatement();\n        ResultSet resultSet = preparedStatement.executeQuery(SELECT_SQL_BY_ID_ACROSS_SINGLE_AND_SHARDING_TABLES_ALIAS);\n        assertNotNull(resultSet);\n        assertTrue(resultSet.next());\n        assertThat(resultSet.getInt(1), is(1000));\n        assertThat(resultSet.getInt(2), is(10));\n        assertThat(resultSet.getString(3), is(\"init\"));\n        assertThat(resultSet.getInt(4), is(1000));\n        assertThat(resultSet.getInt(5), is(10000));\n        assertTrue(resultSet.next());\n        assertThat(resultSet.getInt(1), is(1001));\n        assertThat(resultSet.getInt(2), is(11));\n        assertThat(resultSet.getString(3), is(\"init\"));\n        assertThat(resultSet.getInt(4), is(1001));\n        assertThat(resultSet.getInt(5), is(10001));\n        assertFalse(resultSet.next());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/statement/FederateStatementTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"},{"authorDate":"2020-05-16 19:36:14","commitOrder":2,"curCode":"    public void assertSelectWithExecuteQuery() throws SQLException {\n        try (Statement statement = getEncryptConnection().createStatement()) {\n            ResultSet resultSet = statement.executeQuery(SELECT_SQL);\n            assertTrue(resultSet.next());\n            assertThat(resultSet.getInt(1), is(1));\n            assertThat(resultSet.getString(2), is(\"decryptValue\"));\n            assertTrue(resultSet.next());\n            assertThat(resultSet.getInt(1), is(5));\n            assertThat(resultSet.getString(2), is(\"decryptValue\"));\n        }\n    }\n","date":"2020-05-16 19:36:14","endLine":114,"groupId":"1673","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertSelectWithExecuteQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1a/42afae1ed0f7e90977d42ebd4425b0f1ea4a4f.src","preCode":"    public void assertSelectWithExecuteQuery() throws SQLException {\n        try (Statement statement = getEncryptConnection().createStatement()) {\n            ResultSet resultSet = statement.executeQuery(SELECT_SQL);\n            assertTrue(resultSet.next());\n            assertThat(resultSet.getInt(1), is(1));\n            assertThat(resultSet.getString(2), is(\"decryptValue\"));\n            assertTrue(resultSet.next());\n            assertThat(resultSet.getInt(1), is(5));\n            assertThat(resultSet.getString(2), is(\"decryptValue\"));\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/statement/EncryptStatementTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"NB"}],"commitId":"91534e545f7c62f23b9e84ba797530a721beb8d5","commitMessage":"@@@## Fix [Issue10604](https://github.com/apache/shardingsphere/issues/10604) (#10613)\n\nchanges related to replacement of keyword calcite to federate.","date":"2021-06-01 23:28:18","modifiedFileCount":"4","status":"M","submitter":"Abhishek Karkamkar"},{"authorTime":"2020-05-16 19:36:14","codes":[{"authorDate":"2021-06-11 13:29:00","commitOrder":3,"curCode":"    private void assertQueryWithFederateInSingleAndShardingTableWithAlias(final boolean executeQuery) throws SQLException {\n        ShardingSphereStatement statement = (ShardingSphereStatement) getShardingSphereDataSource().getConnection().createStatement();\n        ResultSet resultSet = getResultSet(statement, SELECT_SQL_BY_ID_ACROSS_SINGLE_AND_SHARDING_TABLES_ALIAS, executeQuery);\n        assertNotNull(resultSet);\n        assertTrue(resultSet.next());\n        assertThat(resultSet.getInt(1), is(1000));\n        assertThat(resultSet.getInt(2), is(10));\n        assertThat(resultSet.getString(3), is(\"init\"));\n        assertThat(resultSet.getInt(4), is(1000));\n        assertThat(resultSet.getInt(5), is(10000));\n        assertTrue(resultSet.next());\n        assertThat(resultSet.getInt(1), is(1001));\n        assertThat(resultSet.getInt(2), is(11));\n        assertThat(resultSet.getString(3), is(\"init\"));\n        assertThat(resultSet.getInt(4), is(1001));\n        assertThat(resultSet.getInt(5), is(10001));\n        assertFalse(resultSet.next());\n    }\n","date":"2021-06-11 13:29:00","endLine":150,"groupId":"101133","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertQueryWithFederateInSingleAndShardingTableWithAlias","params":"(finalbooleanexecuteQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/55/689b50b177c70358c0cba154f70397f29a0a26.src","preCode":"    public void assertQueryWithFederateInSingleAndShardingTableWithAlias() throws SQLException {\n        ShardingSphereStatement preparedStatement = (ShardingSphereStatement) getShardingSphereDataSource().getConnection().createStatement();\n        ResultSet resultSet = preparedStatement.executeQuery(SELECT_SQL_BY_ID_ACROSS_SINGLE_AND_SHARDING_TABLES_ALIAS);\n        assertNotNull(resultSet);\n        assertTrue(resultSet.next());\n        assertThat(resultSet.getInt(1), is(1000));\n        assertThat(resultSet.getInt(2), is(10));\n        assertThat(resultSet.getString(3), is(\"init\"));\n        assertThat(resultSet.getInt(4), is(1000));\n        assertThat(resultSet.getInt(5), is(10000));\n        assertTrue(resultSet.next());\n        assertThat(resultSet.getInt(1), is(1001));\n        assertThat(resultSet.getInt(2), is(11));\n        assertThat(resultSet.getString(3), is(\"init\"));\n        assertThat(resultSet.getInt(4), is(1001));\n        assertThat(resultSet.getInt(5), is(10001));\n        assertFalse(resultSet.next());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/statement/FederateStatementTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2020-05-16 19:36:14","commitOrder":3,"curCode":"    public void assertSelectWithExecuteQuery() throws SQLException {\n        try (Statement statement = getEncryptConnection().createStatement()) {\n            ResultSet resultSet = statement.executeQuery(SELECT_SQL);\n            assertTrue(resultSet.next());\n            assertThat(resultSet.getInt(1), is(1));\n            assertThat(resultSet.getString(2), is(\"decryptValue\"));\n            assertTrue(resultSet.next());\n            assertThat(resultSet.getInt(1), is(5));\n            assertThat(resultSet.getString(2), is(\"decryptValue\"));\n        }\n    }\n","date":"2020-05-16 19:36:14","endLine":114,"groupId":"101133","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertSelectWithExecuteQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1a/42afae1ed0f7e90977d42ebd4425b0f1ea4a4f.src","preCode":"    public void assertSelectWithExecuteQuery() throws SQLException {\n        try (Statement statement = getEncryptConnection().createStatement()) {\n            ResultSet resultSet = statement.executeQuery(SELECT_SQL);\n            assertTrue(resultSet.next());\n            assertThat(resultSet.getInt(1), is(1));\n            assertThat(resultSet.getString(2), is(\"decryptValue\"));\n            assertTrue(resultSet.next());\n            assertThat(resultSet.getInt(1), is(5));\n            assertThat(resultSet.getString(2), is(\"decryptValue\"));\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/statement/EncryptStatementTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"N"}],"commitId":"99166c491f1e3005946dc7324094a08e812121af","commitMessage":"@@@fix calcite select result merge error when call execute method (#10758)\n\n* fix calcite select result merge error when call execute method\n\n* fix test case","date":"2021-06-11 13:29:00","modifiedFileCount":"8","status":"M","submitter":"Zhengqiang Duan"}]
