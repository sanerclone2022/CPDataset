[{"authorTime":"2021-06-08 11:37:47","codes":[{"authorDate":"2021-06-08 11:37:47","commitOrder":1,"curCode":"    public void assertBuild() {\n        AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(algorithmProvidedRuleConfig), SchemaRuleBuilder.class).get(algorithmProvidedRuleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), algorithmProvidedRuleConfig), instanceOf(ReadwriteSplittingRule.class));\n    }\n","date":"2021-06-08 11:37:47","endLine":51,"groupId":"9254","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/45/5cc33a1a20905f4dd7f979bf7f2eed5d3c1608.src","preCode":"    public void assertBuild() {\n        AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(algorithmProvidedRuleConfig), SchemaRuleBuilder.class).get(algorithmProvidedRuleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), algorithmProvidedRuleConfig), instanceOf(ReadwriteSplittingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/builder/AlgorithmProvidedReadwriteSplittingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2021-06-08 11:37:47","commitOrder":1,"curCode":"    public void assertBuild() {\n        ReadwriteSplittingRuleConfiguration ruleConfig = mock(ReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(ruleConfig), SchemaRuleBuilder.class).get(ruleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), ruleConfig), instanceOf(ReadwriteSplittingRule.class));\n    }\n","date":"2021-06-08 11:37:47","endLine":51,"groupId":"9254","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2b/8f85a7c80468f2ba992bff1f6d4d867f9001b3.src","preCode":"    public void assertBuild() {\n        ReadwriteSplittingRuleConfiguration ruleConfig = mock(ReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(ruleConfig), SchemaRuleBuilder.class).get(ruleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), ruleConfig), instanceOf(ReadwriteSplittingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/builder/ReadwriteSplittingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"}],"commitId":"064bffe3e00d9db5179d52f81d8d5dad9620a3a5","commitMessage":"@@@Correct packages and generic types (#10710)\n\n","date":"2021-06-08 11:37:47","modifiedFileCount":"0","status":"B","submitter":"???"},{"authorTime":"2021-07-21 18:15:49","codes":[{"authorDate":"2021-07-21 18:15:49","commitOrder":2,"curCode":"    public void assertBuild() {\n        AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(algorithmProvidedRuleConfig), SchemaRuleBuilder.class).get(algorithmProvidedRuleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), algorithmProvidedRuleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","date":"2021-07-21 18:15:49","endLine":51,"groupId":"9254","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ac/9121ccd1cf1a067a2e04651cee543e8024b7ab.src","preCode":"    public void assertBuild() {\n        AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(algorithmProvidedRuleConfig), SchemaRuleBuilder.class).get(algorithmProvidedRuleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), algorithmProvidedRuleConfig), instanceOf(ReadwriteSplittingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/builder/AlgorithmProvidedReadwriteSplittingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2021-07-21 18:15:49","commitOrder":2,"curCode":"    public void assertBuild() {\n        ReadwriteSplittingRuleConfiguration ruleConfig = mock(ReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(ruleConfig), SchemaRuleBuilder.class).get(ruleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), ruleConfig, Sets.newHashSet()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","date":"2021-07-21 18:15:49","endLine":52,"groupId":"9254","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0e/41cbfd4526dbe89b7d65d3b0e450b70dddf25e.src","preCode":"    public void assertBuild() {\n        ReadwriteSplittingRuleConfiguration ruleConfig = mock(ReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(ruleConfig), SchemaRuleBuilder.class).get(ruleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), ruleConfig), instanceOf(ReadwriteSplittingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/builder/ReadwriteSplittingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"1ea833bd9d9b26f80f34e8442b726ca9a2752a6f","commitMessage":"@@@remove create table and drop table event (#11423)\n\n* remove create table and drop table event\n\n* fix encrypt test case\n\n* optimize single table route logic\n\n* update param name","date":"2021-07-21 18:15:49","modifiedFileCount":"44","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-07-29 01:03:53","codes":[{"authorDate":"2021-07-21 18:15:49","commitOrder":3,"curCode":"    public void assertBuild() {\n        AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(algorithmProvidedRuleConfig), SchemaRuleBuilder.class).get(algorithmProvidedRuleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), algorithmProvidedRuleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","date":"2021-07-21 18:15:49","endLine":51,"groupId":"9254","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ac/9121ccd1cf1a067a2e04651cee543e8024b7ab.src","preCode":"    public void assertBuild() {\n        AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(algorithmProvidedRuleConfig), SchemaRuleBuilder.class).get(algorithmProvidedRuleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), algorithmProvidedRuleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/builder/AlgorithmProvidedReadwriteSplittingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"},{"authorDate":"2021-07-29 01:03:53","commitOrder":3,"curCode":"    public void assertBuild() {\n        ReadwriteSplittingRuleConfiguration ruleConfig = mock(ReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(ruleConfig), SchemaRuleBuilder.class).get(ruleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), ruleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","date":"2021-07-29 01:03:53","endLine":51,"groupId":"9254","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/00/ed12506a541f0979fa653c944b771ee195d1a6.src","preCode":"    public void assertBuild() {\n        ReadwriteSplittingRuleConfiguration ruleConfig = mock(ReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(ruleConfig), SchemaRuleBuilder.class).get(ruleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), ruleConfig, Sets.newHashSet()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/builder/ReadwriteSplittingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"6d2d2ba7b05c29bce74525f0437e04b22a556f66","commitMessage":"@@@Use java raw new List/Set/Map to instead of guava (#11561)\n\n* Use java raw new Map to instead of guava\n\n* Use java raw new List to instead of guava\n\n* Use java raw new Set to instead of guava","date":"2021-07-29 01:03:53","modifiedFileCount":"78","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-29 16:04:51","codes":[{"authorDate":"2021-07-29 16:04:51","commitOrder":4,"curCode":"    public void assertBuild() {\n        AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(\n                Collections.singletonList(algorithmProvidedRuleConfig), DistributedSchemaRuleBuilder.class).get(algorithmProvidedRuleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), algorithmProvidedRuleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","date":"2021-07-29 16:04:51","endLine":53,"groupId":"9254","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/41/e6ce89ee588ebac1516825f6df83be763388b5.src","preCode":"    public void assertBuild() {\n        AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(algorithmProvidedRuleConfig), SchemaRuleBuilder.class).get(algorithmProvidedRuleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), algorithmProvidedRuleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/builder/AlgorithmProvidedReadwriteSplittingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2021-07-29 16:04:51","commitOrder":4,"curCode":"    public void assertBuild() {\n        ReadwriteSplittingRuleConfiguration ruleConfig = mock(ReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(ruleConfig), DistributedSchemaRuleBuilder.class).get(ruleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), ruleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","date":"2021-07-29 16:04:51","endLine":52,"groupId":"9254","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6a/cc275524bb2fd357727a730ccf7d74e5512593.src","preCode":"    public void assertBuild() {\n        ReadwriteSplittingRuleConfiguration ruleConfig = mock(ReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(ruleConfig), SchemaRuleBuilder.class).get(ruleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), ruleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/builder/ReadwriteSplittingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"87e6b7badaea7beeea805aa5965ddd664457d1a6","commitMessage":"@@@optimize schema rule init logic (#11553)\n\n* optimize rule load logic\n\n* modify test case\n\n* fix checkstyle\n\n* rename param\n\n* rename param","date":"2021-07-29 16:04:51","modifiedFileCount":"30","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-08-04 17:52:02","codes":[{"authorDate":"2021-08-04 17:52:02","commitOrder":5,"curCode":"    public void assertBuild() {\n        AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(\n                Collections.singletonList(algorithmProvidedRuleConfig), SchemaRuleBuilder.class).get(algorithmProvidedRuleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), algorithmProvidedRuleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","date":"2021-08-04 17:52:02","endLine":52,"groupId":"9254","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/60/1840fd30224429809636d746b96181a43365b8.src","preCode":"    public void assertBuild() {\n        AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(\n                Collections.singletonList(algorithmProvidedRuleConfig), DistributedSchemaRuleBuilder.class).get(algorithmProvidedRuleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), algorithmProvidedRuleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/builder/AlgorithmProvidedReadwriteSplittingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2021-08-04 17:52:02","commitOrder":5,"curCode":"    public void assertBuild() {\n        ReadwriteSplittingRuleConfiguration ruleConfig = mock(ReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(ruleConfig), SchemaRuleBuilder.class).get(ruleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), ruleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","date":"2021-08-04 17:52:02","endLine":51,"groupId":"9254","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/00/ed12506a541f0979fa653c944b771ee195d1a6.src","preCode":"    public void assertBuild() {\n        ReadwriteSplittingRuleConfiguration ruleConfig = mock(ReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(ruleConfig), DistributedSchemaRuleBuilder.class).get(ruleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), ruleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/builder/ReadwriteSplittingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"1de0568c36f2eb905b7d51bb72346cf11fb92c49","commitMessage":"@@@remove DistributedSchemaRuleBuilder and EnhancedSchemaRuleBuilder (#11639)\n\n* remove DistributedSchemaRuleBuilder and EnhancedSchemaRuleBuilder\n\n* optimize logic\n\n* fix checkstyle\n\n* fix test case","date":"2021-08-04 17:52:02","modifiedFileCount":"39","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-08-13 17:32:32","codes":[{"authorDate":"2021-08-13 17:32:32","commitOrder":6,"curCode":"    public void assertBuild() {\n        AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(\n                SchemaRuleBuilder.class, Collections.singletonList(algorithmProvidedRuleConfig)).get(algorithmProvidedRuleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), algorithmProvidedRuleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","date":"2021-08-13 17:32:32","endLine":52,"groupId":"12679","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/af/c525ba0e2d99e355aac6be070109eb9b743212.src","preCode":"    public void assertBuild() {\n        AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(\n                Collections.singletonList(algorithmProvidedRuleConfig), SchemaRuleBuilder.class).get(algorithmProvidedRuleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), algorithmProvidedRuleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/builder/AlgorithmProvidedReadwriteSplittingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2021-08-13 17:32:32","commitOrder":6,"curCode":"    public void assertBuild() {\n        ReadwriteSplittingRuleConfiguration ruleConfig = mock(ReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(ruleConfig)).get(ruleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), ruleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","date":"2021-08-13 17:32:32","endLine":51,"groupId":"12679","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c2/3a705440bb138f771602fad72b02167469e4ae.src","preCode":"    public void assertBuild() {\n        ReadwriteSplittingRuleConfiguration ruleConfig = mock(ReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(ruleConfig), SchemaRuleBuilder.class).get(ruleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), ruleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/builder/ReadwriteSplittingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"3c91473d73cadcb7ea5f7ac6cb0bbc4867454b89","commitMessage":"@@@solve the OrderedServicesCache concurrency exception (#11796)\n\n* solve the OrderedServicesCache concurrency problem\n\n* fix test case\n\n* modify test case return type\n\n* fix review comment\n\n* make OrderedServicesCacheKey as inner class of OrderedServicesCache\n\n* remove generic types in OrderedServicesCache\n\n* simplify inner class name\n\n* adjust order of param","date":"2021-08-13 17:32:32","modifiedFileCount":"38","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-08-18 12:34:35","codes":[{"authorDate":"2021-08-18 12:34:35","commitOrder":7,"curCode":"    public void assertBuild() {\n        AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(\n                SchemaRuleBuilder.class, Collections.singletonList(algorithmProvidedRuleConfig)).get(algorithmProvidedRuleConfig);\n        assertThat(builder.build(new ShardingSphereRulesBuilderMaterials(\"\", Collections.emptyList(), mock(DatabaseType.class), \n                Collections.emptyMap(), new ConfigurationProperties(new Properties())), algorithmProvidedRuleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","date":"2021-08-18 12:34:35","endLine":56,"groupId":"12679","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d9/eeea90604edd88aa64c80f744af9f772cbb5c5.src","preCode":"    public void assertBuild() {\n        AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(\n                SchemaRuleBuilder.class, Collections.singletonList(algorithmProvidedRuleConfig)).get(algorithmProvidedRuleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), algorithmProvidedRuleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/builder/AlgorithmProvidedReadwriteSplittingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2021-08-18 12:34:35","commitOrder":7,"curCode":"    public void assertBuild() {\n        ReadwriteSplittingRuleConfiguration ruleConfig = mock(ReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(ruleConfig)).get(ruleConfig);\n        assertThat(builder.build(new ShardingSphereRulesBuilderMaterials(\"\", Collections.emptyList(), mock(DatabaseType.class), \n                Collections.emptyMap(), new ConfigurationProperties(new Properties())), ruleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","date":"2021-08-18 12:34:35","endLine":55,"groupId":"12679","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/18/e587f3fe9083f309b4f4748ab7567b0b3c28d7.src","preCode":"    public void assertBuild() {\n        ReadwriteSplittingRuleConfiguration ruleConfig = mock(ReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(ruleConfig)).get(ruleConfig);\n        assertThat(builder.build(\"\", Collections.emptyMap(), mock(DatabaseType.class), ruleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/builder/ReadwriteSplittingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"d9bdb6a6a04767539ed477581bcd21105dbf515d","commitMessage":"@@@add single table conflict check option (#11860)\n\n* add single table conflict check option\n\n* add test case for single table load\n\n* fix checkstyle\n\n* optimize code\n\n* fix checkstyle\n\n* fix checkstyle\n\n* rename properties key\n\n* rename properties key","date":"2021-08-18 12:34:35","modifiedFileCount":"34","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-09-04 18:58:22","codes":[{"authorDate":"2021-09-04 18:58:22","commitOrder":8,"curCode":"    public void assertBuild() {\n        AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(\n                SchemaRuleBuilder.class, Collections.singletonList(algorithmProvidedRuleConfig)).get(algorithmProvidedRuleConfig);\n        assertThat(builder.build(new SchemaRulesBuilderMaterials(\"\", Collections.emptyList(), mock(DatabaseType.class), \n                Collections.emptyMap(), new ConfigurationProperties(new Properties())), algorithmProvidedRuleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","date":"2021-09-04 18:58:22","endLine":56,"groupId":"12679","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/82/d0b6a9d955abdb719702f755518a5586f846ed.src","preCode":"    public void assertBuild() {\n        AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(\n                SchemaRuleBuilder.class, Collections.singletonList(algorithmProvidedRuleConfig)).get(algorithmProvidedRuleConfig);\n        assertThat(builder.build(new ShardingSphereRulesBuilderMaterials(\"\", Collections.emptyList(), mock(DatabaseType.class), \n                Collections.emptyMap(), new ConfigurationProperties(new Properties())), algorithmProvidedRuleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/builder/AlgorithmProvidedReadwriteSplittingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2021-09-04 18:58:22","commitOrder":8,"curCode":"    public void assertBuild() {\n        ReadwriteSplittingRuleConfiguration ruleConfig = mock(ReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(ruleConfig)).get(ruleConfig);\n        assertThat(builder.build(new SchemaRulesBuilderMaterials(\"\", Collections.emptyList(), mock(DatabaseType.class), \n                Collections.emptyMap(), new ConfigurationProperties(new Properties())), ruleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","date":"2021-09-04 18:58:22","endLine":55,"groupId":"12679","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c9/a77ab340ce863e842c8c757a158c061b31467d.src","preCode":"    public void assertBuild() {\n        ReadwriteSplittingRuleConfiguration ruleConfig = mock(ReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(ruleConfig)).get(ruleConfig);\n        assertThat(builder.build(new ShardingSphereRulesBuilderMaterials(\"\", Collections.emptyList(), mock(DatabaseType.class), \n                Collections.emptyMap(), new ConfigurationProperties(new Properties())), ruleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/builder/ReadwriteSplittingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"a8c655eaf51f230c724274dc0c1d6ba775c73d40","commitMessage":"@@@Add shardingsphere-single-table into kernel module (#12210)\n\n* Rename SchemaRulesBuilderMaterials\n\n* Add shardingsphere-single-table\n\n* Add shardingsphere-single-table\n\n* Revise javadoc\n\n* Move MetadataRefresher.findShardingSphereRulesByClass to ShardingSphereSchema\n\n* Add MutableDataNodeRule\n\n* Add SingleTableSchemaBuilderTest\n\n* Move single table rule\n\n* Move single table configuration\n\n* Revise java doc","date":"2021-09-04 18:58:22","modifiedFileCount":"54","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-09-05 19:00:52","codes":[{"authorDate":"2021-09-05 19:00:52","commitOrder":9,"curCode":"    public void assertBuild() {\n        AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\", false);\n        when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(\n                SchemaRuleBuilder.class, Collections.singletonList(algorithmProvidedRuleConfig)).get(algorithmProvidedRuleConfig);\n        assertThat(builder.build(new SchemaRulesBuilderMaterials(\"\", Collections.emptyList(), mock(DatabaseType.class), \n                Collections.emptyMap(), new ConfigurationProperties(new Properties())), algorithmProvidedRuleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","date":"2021-09-05 19:00:52","endLine":56,"groupId":"10781","id":17,"instanceNumber":1,"isCurCommit":1,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7f/db746bdc901d2e27198500a9996ff7f860eb14.src","preCode":"    public void assertBuild() {\n        AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(\n                SchemaRuleBuilder.class, Collections.singletonList(algorithmProvidedRuleConfig)).get(algorithmProvidedRuleConfig);\n        assertThat(builder.build(new SchemaRulesBuilderMaterials(\"\", Collections.emptyList(), mock(DatabaseType.class), \n                Collections.emptyMap(), new ConfigurationProperties(new Properties())), algorithmProvidedRuleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/builder/AlgorithmProvidedReadwriteSplittingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2021-09-05 19:00:52","commitOrder":9,"curCode":"    public void assertBuild() {\n        ReadwriteSplittingRuleConfiguration ruleConfig = mock(ReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\", false);\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(ruleConfig)).get(ruleConfig);\n        assertThat(builder.build(new SchemaRulesBuilderMaterials(\"\", Collections.emptyList(), mock(DatabaseType.class), \n                Collections.emptyMap(), new ConfigurationProperties(new Properties())), ruleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","date":"2021-09-05 19:00:52","endLine":55,"groupId":"10781","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"assertBuild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3a/485d0cddd5289fedd5b882e070c2425f4a9001.src","preCode":"    public void assertBuild() {\n        ReadwriteSplittingRuleConfiguration ruleConfig = mock(ReadwriteSplittingRuleConfiguration.class);\n        ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\n                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n        when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n        SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(SchemaRuleBuilder.class, Collections.singletonList(ruleConfig)).get(ruleConfig);\n        assertThat(builder.build(new SchemaRulesBuilderMaterials(\"\", Collections.emptyList(), mock(DatabaseType.class), \n                Collections.emptyMap(), new ConfigurationProperties(new Properties())), ruleConfig, Collections.emptyList()), instanceOf(ReadwriteSplittingRule.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-core/src/test/java/org/apache/shardingsphere/readwritesplitting/rule/builder/ReadwriteSplittingRuleBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"b25419ae9f4af7a98255740bc603c34d82f34e97","commitMessage":"@@@Fixes #12158.  add configuration for whether enable consistent routing for readwrite splitting. (#12209)\n\n* For #12158.  Add the consistencyEnabled configuration for readwrite-splitting API & core.\n\n* For #12158.  Add the consistencyEnabled default value for DistSQL handler.\n\n* Add consistencyEnabled configuration and parser for Spring Namespace.\n\n* Add consistencyEnabled configuration for examples.\n\n* update documents of readwrite splitting.\n\n* fix CI.\n\n* update more test cases.\n\n* Change `consistencyEnabled` to `queryConsistent`.\n\n* revert blank line.","date":"2021-09-05 19:00:52","modifiedFileCount":"30","status":"M","submitter":"Raigor"}]
