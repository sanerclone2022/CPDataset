[{"authorTime":"2021-01-07 13:21:40","codes":[{"authorDate":"2021-01-07 13:21:40","commitOrder":1,"curCode":"    public void assertExecuteUpdateWithColumnNames() throws SQLException, ParseException {\n        \r\n        if (\"PostgreSQL\".equals(getDatabaseType().getName()) || \"replica_query\".equals(getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeUpdateForStatementWithColumnNames(connection) : executeUpdateForPreparedStatementWithColumnNames(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","date":"2021-01-07 13:21:40","endLine":125,"groupId":"12257","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteUpdateWithColumnNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c1/909c49ba7f48cf40bb319e1035f293b2f8bce8.src","preCode":"    public void assertExecuteUpdateWithColumnNames() throws SQLException, ParseException {\n        \r\n        if (\"PostgreSQL\".equals(getDatabaseType().getName()) || \"replica_query\".equals(getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeUpdateForStatementWithColumnNames(connection) : executeUpdateForPreparedStatementWithColumnNames(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dml/AdditionalDMLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"},{"authorDate":"2021-01-07 13:21:40","commitOrder":1,"curCode":"    public void assertExecuteWithColumnIndexes() throws SQLException, ParseException {\n        \r\n        if (\"PostgreSQL\".equals(getDatabaseType().getName()) || \"replica_query\".equals(getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeForStatementWithColumnIndexes(connection) : executeForPreparedStatementWithColumnIndexes(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","date":"2021-01-07 13:21:40","endLine":216,"groupId":"12257","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteWithColumnIndexes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c1/909c49ba7f48cf40bb319e1035f293b2f8bce8.src","preCode":"    public void assertExecuteWithColumnIndexes() throws SQLException, ParseException {\n        \r\n        if (\"PostgreSQL\".equals(getDatabaseType().getName()) || \"replica_query\".equals(getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeForStatementWithColumnIndexes(connection) : executeForPreparedStatementWithColumnIndexes(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dml/AdditionalDMLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"B"}],"commitId":"208e7f4ba1bf6fec491812d06b7afa4fbec9879d","commitMessage":"@@@Rename shardingsphere-integration-test-suite and shardingsphere-integration-test-fixture (#8926)\n\n","date":"2021-01-07 13:21:40","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-03-24 18:00:29","codes":[{"authorDate":"2021-03-24 18:00:29","commitOrder":2,"curCode":"    public void assertExecuteUpdateWithColumnNames() throws SQLException, ParseException {\n        \r\n        if (\"PostgreSQL\".equals(getDescription().getDatabaseType().getName()) || \"replica_query\".equals(getDescription().getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeUpdateForStatementWithColumnNames(connection) : executeUpdateForPreparedStatementWithColumnNames(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","date":"2021-03-24 18:00:29","endLine":109,"groupId":"6158","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteUpdateWithColumnNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1d/ce9478b4c4788a97e6426a2f4bd50704282388.src","preCode":"    public void assertExecuteUpdateWithColumnNames() throws SQLException, ParseException {\n        \r\n        if (\"PostgreSQL\".equals(getDatabaseType().getName()) || \"replica_query\".equals(getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeUpdateForStatementWithColumnNames(connection) : executeUpdateForPreparedStatementWithColumnNames(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dml/AdditionalDMLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2021-03-24 18:00:29","commitOrder":2,"curCode":"    public void assertExecuteWithColumnIndexes() throws SQLException, ParseException {\n        \r\n        if (\"PostgreSQL\".equals(getDescription().getDatabaseType().getName()) || \"replica_query\".equals(getDescription().getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeForStatementWithColumnIndexes(connection) : executeForPreparedStatementWithColumnIndexes(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","date":"2021-03-24 18:00:29","endLine":200,"groupId":"6158","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteWithColumnIndexes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1d/ce9478b4c4788a97e6426a2f4bd50704282388.src","preCode":"    public void assertExecuteWithColumnIndexes() throws SQLException, ParseException {\n        \r\n        if (\"PostgreSQL\".equals(getDatabaseType().getName()) || \"replica_query\".equals(getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeForStatementWithColumnIndexes(connection) : executeForPreparedStatementWithColumnIndexes(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dml/AdditionalDMLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"}],"commitId":"70176a68c9d7d55a47f4dde8391fdbb0d52cb231","commitMessage":"@@@refactor: it engine (#9725)\n\n* move packages\n\n* refactor dockerfile\n\n* Refactor IT engine\n\n* fix checkstyle and update it.yaml\n\n* optimize\n\n* fix\n\n* fix ci/it script\n\n* fix null pointer\n\n* fix checkstyle\n\n* fix nullpointer\n\n* code polish\n\n* revert\n\n* make adapter=jdbc available\n\n* fix\n\n* fix\n\n* following reviews\n\n* fix ci\n\n* Compatible with ci\n\n* support parallel\n\n* fix\n\n* fix\n\n* fix\n\n* fix\n\n* disable fail-fast\n\n* polish\n\n* fix health-chek\n\n* fix health-chek\n\n* fix health-chek\n\n* code polish\n\n* code polish\n\n* code polish\n\n* rollback\n\n* fix missing case\n\n* fix\n\n* fix skip dockerfile build\n\n* revert removed profile\n\n* remove dead code\n\nCo-authored-by: root <root@daming.sgp>","date":"2021-03-24 18:00:29","modifiedFileCount":"14","status":"M","submitter":"Daming"},{"authorTime":"2021-03-29 19:40:36","codes":[{"authorDate":"2021-03-29 19:40:36","commitOrder":3,"curCode":"    public void assertExecuteUpdateWithColumnNames() throws SQLException, ParseException {\n        \r\n        if (\"PostgreSQL\".equals(getDatabaseType().getName()) || \"replica_query\".equals(getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeUpdateForStatementWithColumnNames(connection) : executeUpdateForPreparedStatementWithColumnNames(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","date":"2021-03-29 19:40:36","endLine":133,"groupId":"102175","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteUpdateWithColumnNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5f/0141dec753f5e42e0428a7a71c66886c027457.src","preCode":"    public void assertExecuteUpdateWithColumnNames() throws SQLException, ParseException {\n        \r\n        if (\"PostgreSQL\".equals(getDescription().getDatabaseType().getName()) || \"replica_query\".equals(getDescription().getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeUpdateForStatementWithColumnNames(connection) : executeUpdateForPreparedStatementWithColumnNames(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dml/AdditionalDMLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2021-03-29 19:40:36","commitOrder":3,"curCode":"    public void assertExecuteWithColumnIndexes() throws SQLException, ParseException {\n        \r\n        if (\"PostgreSQL\".equals(getDatabaseType().getName()) || \"replica_query\".equals(getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeForStatementWithColumnIndexes(connection) : executeForPreparedStatementWithColumnIndexes(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","date":"2021-03-29 19:40:36","endLine":224,"groupId":"102175","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteWithColumnIndexes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5f/0141dec753f5e42e0428a7a71c66886c027457.src","preCode":"    public void assertExecuteWithColumnIndexes() throws SQLException, ParseException {\n        \r\n        if (\"PostgreSQL\".equals(getDescription().getDatabaseType().getName()) || \"replica_query\".equals(getDescription().getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeForStatementWithColumnIndexes(connection) : executeForPreparedStatementWithColumnIndexes(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dml/AdditionalDMLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"}],"commitId":"f7511d5d36b5cfb2692fa07c5d7e9e278205c1b4","commitMessage":"@@@Refactor: IT framework (#9857)\n\n* refactor it engine\n\n* following reviews and remove dead codes\n\nCo-authored-by: zhuanghaochao <zhuanghaochao@yy.com>","date":"2021-03-29 19:40:36","modifiedFileCount":"33","status":"M","submitter":"Daming"}]
