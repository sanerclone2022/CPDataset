[{"authorTime":"2020-09-10 20:14:30","codes":[{"authorDate":"2020-09-10 20:14:30","commitOrder":1,"curCode":"    private List<Connection> createNewConnections(final String dataSourceName, final int connectionSize, final ConnectionMode connectionMode) throws SQLException {\n        Preconditions.checkNotNull(schemaName, \"Current schema is null.\");\n        List<Connection> result = ProxyContext.getInstance().getBackendDataSource().getConnections(schemaName, dataSourceName, connectionSize, connectionMode);\n        for (Connection each : result) {\n            replayMethodsInvocation(each);\n        }\n        return result;\n    }\n","date":"2020-09-10 20:14:30","endLine":173,"groupId":"6943","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createNewConnections","params":"(finalStringdataSourceName@finalintconnectionSize@finalConnectionModeconnectionMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f8/d4b3487c06518884acbb81f90db7116a182adb.src","preCode":"    private List<Connection> createNewConnections(final String dataSourceName, final int connectionSize, final ConnectionMode connectionMode) throws SQLException {\n        Preconditions.checkNotNull(schemaName, \"Current schema is null.\");\n        List<Connection> result = ProxyContext.getInstance().getBackendDataSource().getConnections(schemaName, dataSourceName, connectionSize, connectionMode);\n        for (Connection each : result) {\n            replayMethodsInvocation(each);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/BackendConnection.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"B"},{"authorDate":"2020-09-10 20:14:30","commitOrder":1,"curCode":"    private List<Connection> getConnectionsWithoutTransaction(final String dataSourceName, final int connectionSize, final ConnectionMode connectionMode) throws SQLException {\n        Preconditions.checkNotNull(schemaName, \"Current schema is null.\");\n        List<Connection> result = ProxyContext.getInstance().getBackendDataSource().getConnections(schemaName, dataSourceName, connectionSize, connectionMode);\n        synchronized (cachedConnections) {\n            cachedConnections.putAll(dataSourceName, result);\n        }\n        return result;\n    }\n","date":"2020-09-10 20:14:30","endLine":182,"groupId":"6943","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getConnectionsWithoutTransaction","params":"(finalStringdataSourceName@finalintconnectionSize@finalConnectionModeconnectionMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f8/d4b3487c06518884acbb81f90db7116a182adb.src","preCode":"    private List<Connection> getConnectionsWithoutTransaction(final String dataSourceName, final int connectionSize, final ConnectionMode connectionMode) throws SQLException {\n        Preconditions.checkNotNull(schemaName, \"Current schema is null.\");\n        List<Connection> result = ProxyContext.getInstance().getBackendDataSource().getConnections(schemaName, dataSourceName, connectionSize, connectionMode);\n        synchronized (cachedConnections) {\n            cachedConnections.putAll(dataSourceName, result);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/BackendConnection.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"B"}],"commitId":"b083cfc30b117ba5b02ae6973edc9da4dbb40c9f","commitMessage":"@@@Refactor ConnectionStatusHandler (#7392)\n\n* Rename ConnectionStateHandler to ConnectionStatusHandler\n\n* Rename ConnectionStatusHandler.changeRunningStatusIfNecessary\n\n* Remove ConnectionStatusHandler.getStatus\n\n* Rename statusHandler\n\n* Rename resourceLock.doAwait()\n\n* Refactor BackendConnection\n\n* Merge ConnectionStatus.INIT and TERMINATED to READY","date":"2020-09-10 20:14:30","modifiedFileCount":"14","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-07-01 16:26:59","codes":[{"authorDate":"2021-07-01 16:26:59","commitOrder":2,"curCode":"    private List<Connection> createNewConnections(final String dataSourceName, final int connectionSize, final ConnectionMode connectionMode) throws SQLException {\n        Preconditions.checkNotNull(getSchemaName(), \"Current schema is null.\");\n        List<Connection> result = ProxyContext.getInstance().getBackendDataSource().getConnections(getSchemaName(), dataSourceName, connectionSize, connectionMode);\n        for (Connection each : result) {\n            replayMethodsInvocation(each);\n        }\n        return result;\n    }\n","date":"2021-07-01 16:26:59","endLine":151,"groupId":"101050","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createNewConnections","params":"(finalStringdataSourceName@finalintconnectionSize@finalConnectionModeconnectionMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5f/9df8f489d989598d0ec13e231142e36c99f717.src","preCode":"    private List<Connection> createNewConnections(final String dataSourceName, final int connectionSize, final ConnectionMode connectionMode) throws SQLException {\n        Preconditions.checkNotNull(schemaName, \"Current schema is null.\");\n        List<Connection> result = ProxyContext.getInstance().getBackendDataSource().getConnections(schemaName, dataSourceName, connectionSize, connectionMode);\n        for (Connection each : result) {\n            replayMethodsInvocation(each);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/BackendConnection.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"},{"authorDate":"2021-07-01 16:26:59","commitOrder":2,"curCode":"    private List<Connection> getConnectionsWithoutTransaction(final String dataSourceName, final int connectionSize, final ConnectionMode connectionMode) throws SQLException {\n        Preconditions.checkNotNull(getSchemaName(), \"Current schema is null.\");\n        List<Connection> result = ProxyContext.getInstance().getBackendDataSource().getConnections(getSchemaName(), dataSourceName, connectionSize, connectionMode);\n        synchronized (cachedConnections) {\n            cachedConnections.putAll(dataSourceName, result);\n        }\n        return result;\n    }\n","date":"2021-07-01 16:26:59","endLine":160,"groupId":"101050","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getConnectionsWithoutTransaction","params":"(finalStringdataSourceName@finalintconnectionSize@finalConnectionModeconnectionMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5f/9df8f489d989598d0ec13e231142e36c99f717.src","preCode":"    private List<Connection> getConnectionsWithoutTransaction(final String dataSourceName, final int connectionSize, final ConnectionMode connectionMode) throws SQLException {\n        Preconditions.checkNotNull(schemaName, \"Current schema is null.\");\n        List<Connection> result = ProxyContext.getInstance().getBackendDataSource().getConnections(schemaName, dataSourceName, connectionSize, connectionMode);\n        synchronized (cachedConnections) {\n            cachedConnections.putAll(dataSourceName, result);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/BackendConnection.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"5452894f2404d7037067b44c1473e8e0de418bb5","commitMessage":"@@@support mysql select statement execute with schema (#11076)\n\n* support mysql select statement execute with schema\n\n* fix rewrite test case\n\n* move sql statement schema holder class\n\n* optimize table token logic\n\n* fix test case error\n\n* add todo for SQLStatementSchemaHolder","date":"2021-07-01 16:26:59","modifiedFileCount":"11","status":"M","submitter":"Zhengqiang Duan"}]
