[{"authorTime":"2021-09-10 16:56:07","codes":[{"authorDate":"2021-09-14 14:24:49","commitOrder":2,"curCode":"    private boolean isShadowColumnAlgorithm(final ShadowDetermineCondition shadowDetermineCondition, final ShadowAlgorithm shadowAlgorithm, final ShadowRule shadowRule, final String tableName) {\n        if (!shadowDetermineCondition.isShadowColumnConditionsInitialized()) {\n            final Optional<Collection<ShadowColumnCondition>> shadowColumnConditions = parseShadowColumnConditions();\n            if (!shadowColumnConditions.isPresent()) {\n                return false;\n            }\n            shadowDetermineCondition.initShadowColumnCondition(shadowColumnConditions.get());\n        }\n        return ShadowDeterminerFactory.newInstance(shadowAlgorithm).isShadow(shadowDetermineCondition, shadowRule, tableName);\n    }\n","date":"2021-09-14 14:24:49","endLine":93,"groupId":"1240","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"isShadowColumnAlgorithm","params":"(finalShadowDetermineConditionshadowDetermineCondition@finalShadowAlgorithmshadowAlgorithm@finalShadowRuleshadowRule@finalStringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2d/43c32a43f60cc967e6eee86326a71c83e1ae41.src","preCode":"    private boolean isShadowColumnAlgorithm(final ShadowDetermineCondition shadowDetermineCondition, final ShadowAlgorithm shadowAlgorithm, final ShadowRule shadowRule, final String tableName) {\n        if (!shadowDetermineCondition.isShadowColumnConditionsInitialized()) {\n            final Optional<Collection<ShadowColumnCondition>> shadowColumnConditions = parseShadowColumnConditions();\n            if (!shadowColumnConditions.isPresent()) {\n                return false;\n            }\n            shadowDetermineCondition.initShadowColumnCondition(shadowColumnConditions.get());\n        }\n        return ShadowDeterminerFactory.newInstance(shadowAlgorithm).isShadow(shadowDetermineCondition, shadowRule, tableName);\n    }\n","realPath":"shardingsphere-features/shardingsphere-shadow/shardingsphere-shadow-core/src/main/java/org/apache/shardingsphere/shadow/route/future/engine/AbstractShadowRouteEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"MB"},{"authorDate":"2021-09-10 16:56:07","commitOrder":2,"curCode":"    private boolean isShadowNoteAlgorithm(final ShadowDetermineCondition shadowDetermineCondition, final ShadowAlgorithm shadowAlgorithm, final ShadowRule shadowRule, final String tableName) {\n        if (!shadowDetermineCondition.isSqlNotesInitialized()) {\n            Optional<Collection<String>> sqlNotes = parseSqlNotes();\n            if (!sqlNotes.isPresent()) {\n                return false;\n            }\n            shadowDetermineCondition.initSqlNotes(sqlNotes.get());\n        }\n        return ShadowDeterminerFactory.newInstance(shadowAlgorithm).isShadow(shadowDetermineCondition, shadowRule, tableName);\n    }\n","date":"2021-09-10 16:56:07","endLine":104,"groupId":"1238","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"isShadowNoteAlgorithm","params":"(finalShadowDetermineConditionshadowDetermineCondition@finalShadowAlgorithmshadowAlgorithm@finalShadowRuleshadowRule@finalStringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1a/335e1bee56d3dc2ac35c869e9926be058c60ee.src","preCode":"    private boolean isShadowNoteAlgorithm(final ShadowDetermineCondition shadowDetermineCondition, final ShadowAlgorithm shadowAlgorithm, final ShadowRule shadowRule, final String tableName) {\n        if (!shadowDetermineCondition.isSqlNotesInitialized()) {\n            Optional<Collection<String>> sqlNotes = parseSqlNotes();\n            if (!sqlNotes.isPresent()) {\n                return false;\n            }\n            shadowDetermineCondition.initSqlNotes(sqlNotes.get());\n        }\n        return ShadowDeterminerFactory.newInstance(shadowAlgorithm).isShadow(shadowDetermineCondition, shadowRule, tableName);\n    }\n","realPath":"shardingsphere-features/shardingsphere-shadow/shardingsphere-shadow-core/src/main/java/org/apache/shardingsphere/shadow/route/future/engine/AbstractShadowRouteEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"NB"}],"commitId":"d19fb027e1c08cc5c430cc1fc7e6ba3ba283e517","commitMessage":"@@@Add shadow delete statement route (#12398)\n\n* Optimize column values type.\n\n* Optimize shadow extractor.\n\n* Add shadow delete statement routing engine.\n\n* Add shadow delete statement routing engine in example.\n\n* Fix ut.\n\n* Add final.","date":"2021-09-14 14:24:49","modifiedFileCount":"15","status":"M","submitter":"gin"},{"authorTime":"2021-09-10 16:56:07","codes":[{"authorDate":"2021-09-16 19:05:45","commitOrder":3,"curCode":"    private boolean isShadowColumnAlgorithm(final ShadowDetermineCondition shadowDetermineCondition, final ShadowAlgorithm shadowAlgorithm, final ShadowRule shadowRule, final String tableName) {\n        if (!shadowDetermineCondition.isShadowColumnConditionsInitialized()) {\n            Optional<Collection<ShadowColumnCondition>> shadowColumnConditions = parseShadowColumnConditions();\n            if (!shadowColumnConditions.isPresent()) {\n                return false;\n            }\n            shadowDetermineCondition.initShadowColumnCondition(shadowColumnConditions.get());\n        }\n        return ShadowDeterminerFactory.newInstance(shadowAlgorithm).isShadow(shadowDetermineCondition, shadowRule, tableName);\n    }\n","date":"2021-09-16 19:05:45","endLine":95,"groupId":"10404","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"isShadowColumnAlgorithm","params":"(finalShadowDetermineConditionshadowDetermineCondition@finalShadowAlgorithmshadowAlgorithm@finalShadowRuleshadowRule@finalStringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ce/b2b3243b3fe25c7527f29e0fc8b943f31888d6.src","preCode":"    private boolean isShadowColumnAlgorithm(final ShadowDetermineCondition shadowDetermineCondition, final ShadowAlgorithm shadowAlgorithm, final ShadowRule shadowRule, final String tableName) {\n        if (!shadowDetermineCondition.isShadowColumnConditionsInitialized()) {\n            final Optional<Collection<ShadowColumnCondition>> shadowColumnConditions = parseShadowColumnConditions();\n            if (!shadowColumnConditions.isPresent()) {\n                return false;\n            }\n            shadowDetermineCondition.initShadowColumnCondition(shadowColumnConditions.get());\n        }\n        return ShadowDeterminerFactory.newInstance(shadowAlgorithm).isShadow(shadowDetermineCondition, shadowRule, tableName);\n    }\n","realPath":"shardingsphere-features/shardingsphere-shadow/shardingsphere-shadow-core/src/main/java/org/apache/shardingsphere/shadow/route/future/engine/AbstractShadowRouteEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2021-09-10 16:56:07","commitOrder":3,"curCode":"    private boolean isShadowNoteAlgorithm(final ShadowDetermineCondition shadowDetermineCondition, final ShadowAlgorithm shadowAlgorithm, final ShadowRule shadowRule, final String tableName) {\n        if (!shadowDetermineCondition.isSqlNotesInitialized()) {\n            Optional<Collection<String>> sqlNotes = parseSqlNotes();\n            if (!sqlNotes.isPresent()) {\n                return false;\n            }\n            shadowDetermineCondition.initSqlNotes(sqlNotes.get());\n        }\n        return ShadowDeterminerFactory.newInstance(shadowAlgorithm).isShadow(shadowDetermineCondition, shadowRule, tableName);\n    }\n","date":"2021-09-10 16:56:07","endLine":104,"groupId":"10404","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"isShadowNoteAlgorithm","params":"(finalShadowDetermineConditionshadowDetermineCondition@finalShadowAlgorithmshadowAlgorithm@finalShadowRuleshadowRule@finalStringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1a/335e1bee56d3dc2ac35c869e9926be058c60ee.src","preCode":"    private boolean isShadowNoteAlgorithm(final ShadowDetermineCondition shadowDetermineCondition, final ShadowAlgorithm shadowAlgorithm, final ShadowRule shadowRule, final String tableName) {\n        if (!shadowDetermineCondition.isSqlNotesInitialized()) {\n            Optional<Collection<String>> sqlNotes = parseSqlNotes();\n            if (!sqlNotes.isPresent()) {\n                return false;\n            }\n            shadowDetermineCondition.initSqlNotes(sqlNotes.get());\n        }\n        return ShadowDeterminerFactory.newInstance(shadowAlgorithm).isShadow(shadowDetermineCondition, shadowRule, tableName);\n    }\n","realPath":"shardingsphere-features/shardingsphere-shadow/shardingsphere-shadow-core/src/main/java/org/apache/shardingsphere/shadow/route/future/engine/AbstractShadowRouteEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"N"}],"commitId":"789d0fd22a0ea346c4d8517ddbf9afd0a5b27e53","commitMessage":"@@@Shadow select statement route (#12481)\n\n* Optimize shadow column condition.\n\n* Optimize shadow extractor.\n\n* Add shadow select statement routing engine.\n\n* Fix ut.\n\n* Optimize column shadow algorithm determiner.\n\n* Add shadow select statement example.\n\n* Optimize class name.","date":"2021-09-16 19:05:45","modifiedFileCount":"13","status":"M","submitter":"gin"}]
