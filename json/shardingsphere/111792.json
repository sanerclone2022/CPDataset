[{"authorTime":"2020-10-11 18:46:54","codes":[{"authorDate":"2020-10-11 18:46:54","commitOrder":1,"curCode":"    private AggregationDistinctProjection createProjection(final AggregationDistinctProjectionSegment projectionSegment) {\n        String innerExpression = projectionSegment.getInnerExpression();\n        String alias = projectionSegment.getAlias().orElse(DerivedColumn.AGGREGATION_DISTINCT_DERIVED.getDerivedColumnAlias(aggregationDistinctDerivedColumnCount++));\n        AggregationDistinctProjection result = new AggregationDistinctProjection(\n                projectionSegment.getStartIndex(), projectionSegment.getStopIndex(), projectionSegment.getType(), innerExpression, alias, projectionSegment.getDistinctExpression());\n        if (AggregationType.AVG == result.getType()) {\n            appendAverageDistinctDerivedProjection(result);\n        }\n        return result;\n    }\n","date":"2020-10-11 18:46:54","endLine":107,"groupId":"7383","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createProjection","params":"(finalAggregationDistinctProjectionSegmentprojectionSegment)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6d/1a94504045bd13e96bbd6a969fc4c11fa91ddc.src","preCode":"    private AggregationDistinctProjection createProjection(final AggregationDistinctProjectionSegment projectionSegment) {\n        String innerExpression = projectionSegment.getInnerExpression();\n        String alias = projectionSegment.getAlias().orElse(DerivedColumn.AGGREGATION_DISTINCT_DERIVED.getDerivedColumnAlias(aggregationDistinctDerivedColumnCount++));\n        AggregationDistinctProjection result = new AggregationDistinctProjection(\n                projectionSegment.getStartIndex(), projectionSegment.getStopIndex(), projectionSegment.getType(), innerExpression, alias, projectionSegment.getDistinctExpression());\n        if (AggregationType.AVG == result.getType()) {\n            appendAverageDistinctDerivedProjection(result);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/main/java/org/apache/shardingsphere/infra/binder/segment/select/projection/engine/ProjectionEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"},{"authorDate":"2020-10-11 18:46:54","commitOrder":1,"curCode":"    private AggregationProjection createProjection(final AggregationProjectionSegment projectionSegment) {\n        String innerExpression = projectionSegment.getInnerExpression();\n        AggregationProjection result = new AggregationProjection(projectionSegment.getType(), innerExpression, projectionSegment.getAlias().orElse(null));\n        if (AggregationType.AVG == result.getType()) {\n            appendAverageDerivedProjection(result);\n            \r\n        }\n        return result;\n    }\n","date":"2020-10-11 18:46:54","endLine":117,"groupId":"12855","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createProjection","params":"(finalAggregationProjectionSegmentprojectionSegment)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6d/1a94504045bd13e96bbd6a969fc4c11fa91ddc.src","preCode":"    private AggregationProjection createProjection(final AggregationProjectionSegment projectionSegment) {\n        String innerExpression = projectionSegment.getInnerExpression();\n        AggregationProjection result = new AggregationProjection(projectionSegment.getType(), innerExpression, projectionSegment.getAlias().orElse(null));\n        if (AggregationType.AVG == result.getType()) {\n            appendAverageDerivedProjection(result);\n            \r\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/main/java/org/apache/shardingsphere/infra/binder/segment/select/projection/engine/ProjectionEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"}],"commitId":"cc40a511b9a93c556bd4ec53665239bd8c6790af","commitMessage":"@@@Move shardingsphere-infra-binder to infra module and rename (#7744)\n\n* Move shardingsphere-infra-binder to infra module and rename\n\n* Move shardingsphere-infra-binder to infra module and rename\n\n* rename package name","date":"2020-10-11 18:46:54","modifiedFileCount":"224","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-08-24 14:50:51","codes":[{"authorDate":"2021-08-24 14:50:51","commitOrder":2,"curCode":"    private AggregationDistinctProjection createProjection(final AggregationDistinctProjectionSegment projectionSegment) {\n        String innerExpression = projectionSegment.getInnerExpression();\n        String alias = projectionSegment.getAlias().orElse(DerivedColumn.AGGREGATION_DISTINCT_DERIVED.getDerivedColumnAlias(aggregationDistinctDerivedColumnCount++));\n        AggregationDistinctProjection result = new AggregationDistinctProjection(\n                projectionSegment.getStartIndex(), projectionSegment.getStopIndex(), projectionSegment.getType(), innerExpression, alias, projectionSegment.getDistinctExpression(), databaseType);\n        if (AggregationType.AVG == result.getType()) {\n            appendAverageDistinctDerivedProjection(result);\n        }\n        return result;\n    }\n","date":"2021-08-24 14:50:51","endLine":119,"groupId":"111792","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createProjection","params":"(finalAggregationDistinctProjectionSegmentprojectionSegment)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/dd/ccea79573b2e8707046aab1032699513ddd761.src","preCode":"    private AggregationDistinctProjection createProjection(final AggregationDistinctProjectionSegment projectionSegment) {\n        String innerExpression = projectionSegment.getInnerExpression();\n        String alias = projectionSegment.getAlias().orElse(DerivedColumn.AGGREGATION_DISTINCT_DERIVED.getDerivedColumnAlias(aggregationDistinctDerivedColumnCount++));\n        AggregationDistinctProjection result = new AggregationDistinctProjection(\n                projectionSegment.getStartIndex(), projectionSegment.getStopIndex(), projectionSegment.getType(), innerExpression, alias, projectionSegment.getDistinctExpression());\n        if (AggregationType.AVG == result.getType()) {\n            appendAverageDistinctDerivedProjection(result);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/main/java/org/apache/shardingsphere/infra/binder/segment/select/projection/engine/ProjectionEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2021-08-24 14:50:51","commitOrder":2,"curCode":"    private AggregationProjection createProjection(final AggregationProjectionSegment projectionSegment) {\n        String innerExpression = projectionSegment.getInnerExpression();\n        AggregationProjection result = new AggregationProjection(projectionSegment.getType(), innerExpression, projectionSegment.getAlias().orElse(null), databaseType);\n        if (AggregationType.AVG == result.getType()) {\n            appendAverageDerivedProjection(result);\n            \r\n        }\n        return result;\n    }\n","date":"2021-08-24 14:50:51","endLine":129,"groupId":"111792","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createProjection","params":"(finalAggregationProjectionSegmentprojectionSegment)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/dd/ccea79573b2e8707046aab1032699513ddd761.src","preCode":"    private AggregationProjection createProjection(final AggregationProjectionSegment projectionSegment) {\n        String innerExpression = projectionSegment.getInnerExpression();\n        AggregationProjection result = new AggregationProjection(projectionSegment.getType(), innerExpression, projectionSegment.getAlias().orElse(null));\n        if (AggregationType.AVG == result.getType()) {\n            appendAverageDerivedProjection(result);\n            \r\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/main/java/org/apache/shardingsphere/infra/binder/segment/select/projection/engine/ProjectionEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"ed71fb20f3fce018a38da050a9a6f68b9df16229","commitMessage":"@@@fix mysql & pg aggregation function set index error (#11971)\n\n* fix mysql & pg aggregation function set index error\n\n* add integrate test case\n\n* fix checkstyle\n\n* optimze code\n\n* fix test case\n\n* remove useless logic\n\n* remove useless logic\n\n* fix checkstyle\n\n* fix typo","date":"2021-08-24 14:50:51","modifiedFileCount":"11","status":"M","submitter":"Zhengqiang Duan"}]
