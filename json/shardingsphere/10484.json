[{"authorTime":"2021-06-04 22:49:49","codes":[{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertPostValidateCreateTableWithSameRouteResultBroadcastTableForPostgreSQL() {\n        PostgreSQLCreateTableStatement sqlStatement = new PostgreSQLCreateTableStatement();\n        sqlStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"t_config\")));\n        when(shardingRule.isBroadcastTable(\"t_config\")).thenReturn(true);\n        when(shardingRule.getTableRule(\"t_config\")).thenReturn(new TableRule(Arrays.asList(\"ds_0\", \"ds_1\"), \"t_config\"));\n        Collection<RouteUnit> routeUnits = new LinkedList<>();\n        routeUnits.add(new RouteUnit(new RouteMapper(\"ds_0\", \"ds_0\"), Collections.singletonList(new RouteMapper(\"t_config\", \"t_config\"))));\n        routeUnits.add(new RouteUnit(new RouteMapper(\"ds_1\", \"ds_1\"), Collections.singletonList(new RouteMapper(\"t_config\", \"t_config\"))));\n        when(routeContext.getRouteUnits()).thenReturn(routeUnits);\n        new ShardingCreateTableStatementValidator().postValidate(shardingRule, new CreateTableStatementContext(sqlStatement), routeContext, schema);\n    }\n","date":"2021-06-04 22:49:49","endLine":166,"groupId":"307","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertPostValidateCreateTableWithSameRouteResultBroadcastTableForPostgreSQL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/54/055f76368611bcb78381c7c28529809f83f573.src","preCode":"    public void assertPostValidateCreateTableWithSameRouteResultBroadcastTableForPostgreSQL() {\n        PostgreSQLCreateTableStatement sqlStatement = new PostgreSQLCreateTableStatement();\n        sqlStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"t_config\")));\n        when(shardingRule.isBroadcastTable(\"t_config\")).thenReturn(true);\n        when(shardingRule.getTableRule(\"t_config\")).thenReturn(new TableRule(Arrays.asList(\"ds_0\", \"ds_1\"), \"t_config\"));\n        Collection<RouteUnit> routeUnits = new LinkedList<>();\n        routeUnits.add(new RouteUnit(new RouteMapper(\"ds_0\", \"ds_0\"), Collections.singletonList(new RouteMapper(\"t_config\", \"t_config\"))));\n        routeUnits.add(new RouteUnit(new RouteMapper(\"ds_1\", \"ds_1\"), Collections.singletonList(new RouteMapper(\"t_config\", \"t_config\"))));\n        when(routeContext.getRouteUnits()).thenReturn(routeUnits);\n        new ShardingCreateTableStatementValidator().postValidate(shardingRule, new CreateTableStatementContext(sqlStatement), routeContext, schema);\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/ddl/ShardingCreateTableStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"},{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertPostValidateDropIndexWithSameRouteResultBroadcastTableIndexForPostgreSQL() {\n        PostgreSQLDropIndexStatement sqlStatement = new PostgreSQLDropIndexStatement();\n        sqlStatement.getIndexes().add(new IndexSegment(0, 0, new IdentifierValue(\"t_config_index\")));\n        sqlStatement.getIndexes().add(new IndexSegment(0, 0, new IdentifierValue(\"t_config_index_new\")));\n        TableMetaData tableMetaData = mock(TableMetaData.class);\n        Map<String, IndexMetaData> indexes = mock(HashMap.class);\n        when(tableMetaData.getIndexes()).thenReturn(indexes);\n        when(schema.getAllTableNames()).thenReturn(Collections.singletonList(\"t_config\"));\n        when(schema.get(\"t_config\")).thenReturn(tableMetaData);\n        when(indexes.containsKey(\"t_config_index\")).thenReturn(true);\n        when(shardingRule.isBroadcastTable(\"t_config\")).thenReturn(true);\n        when(shardingRule.getTableRule(\"t_config\")).thenReturn(new TableRule(Arrays.asList(\"ds_0\", \"ds_1\"), \"t_config\"));\n        Collection<RouteUnit> routeUnits = new LinkedList<>();\n        routeUnits.add(new RouteUnit(new RouteMapper(\"ds_0\", \"ds_0\"), Collections.singletonList(new RouteMapper(\"t_config\", \"t_config\"))));\n        routeUnits.add(new RouteUnit(new RouteMapper(\"ds_1\", \"ds_1\"), Collections.singletonList(new RouteMapper(\"t_config\", \"t_config\"))));\n        when(routeContext.getRouteUnits()).thenReturn(routeUnits);\n        new ShardingDropIndexStatementValidator().postValidate(shardingRule, new DropIndexStatementContext(sqlStatement), routeContext, schema);\n    }\n","date":"2021-06-04 22:49:49","endLine":147,"groupId":"307","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertPostValidateDropIndexWithSameRouteResultBroadcastTableIndexForPostgreSQL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e2/43241f9f465662ea5e319f54a9cfc3a087b619.src","preCode":"    public void assertPostValidateDropIndexWithSameRouteResultBroadcastTableIndexForPostgreSQL() {\n        PostgreSQLDropIndexStatement sqlStatement = new PostgreSQLDropIndexStatement();\n        sqlStatement.getIndexes().add(new IndexSegment(0, 0, new IdentifierValue(\"t_config_index\")));\n        sqlStatement.getIndexes().add(new IndexSegment(0, 0, new IdentifierValue(\"t_config_index_new\")));\n        TableMetaData tableMetaData = mock(TableMetaData.class);\n        Map<String, IndexMetaData> indexes = mock(HashMap.class);\n        when(tableMetaData.getIndexes()).thenReturn(indexes);\n        when(schema.getAllTableNames()).thenReturn(Collections.singletonList(\"t_config\"));\n        when(schema.get(\"t_config\")).thenReturn(tableMetaData);\n        when(indexes.containsKey(\"t_config_index\")).thenReturn(true);\n        when(shardingRule.isBroadcastTable(\"t_config\")).thenReturn(true);\n        when(shardingRule.getTableRule(\"t_config\")).thenReturn(new TableRule(Arrays.asList(\"ds_0\", \"ds_1\"), \"t_config\"));\n        Collection<RouteUnit> routeUnits = new LinkedList<>();\n        routeUnits.add(new RouteUnit(new RouteMapper(\"ds_0\", \"ds_0\"), Collections.singletonList(new RouteMapper(\"t_config\", \"t_config\"))));\n        routeUnits.add(new RouteUnit(new RouteMapper(\"ds_1\", \"ds_1\"), Collections.singletonList(new RouteMapper(\"t_config\", \"t_config\"))));\n        when(routeContext.getRouteUnits()).thenReturn(routeUnits);\n        new ShardingDropIndexStatementValidator().postValidate(shardingRule, new DropIndexStatementContext(sqlStatement), routeContext, schema);\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/ddl/ShardingDropIndexStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"B"}],"commitId":"6b157b44d0336e4d9c61f940b0ec19c26758af84","commitMessage":"@@@Merge sharding feature to core module (#10662)\n\n* Merge dependencies\n\n* Merge sharding feature to api module\n\n* Merge sharding feature to core module","date":"2021-06-04 22:49:49","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-06-04 22:49:49","codes":[{"authorDate":"2021-07-05 14:48:43","commitOrder":2,"curCode":"    public void assertPostValidateCreateTableWithSameRouteResultBroadcastTableForPostgreSQL() {\n        PostgreSQLCreateTableStatement sqlStatement = new PostgreSQLCreateTableStatement();\n        sqlStatement.setTable(new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"t_config\"))));\n        when(shardingRule.isBroadcastTable(\"t_config\")).thenReturn(true);\n        when(shardingRule.getTableRule(\"t_config\")).thenReturn(new TableRule(Arrays.asList(\"ds_0\", \"ds_1\"), \"t_config\"));\n        Collection<RouteUnit> routeUnits = new LinkedList<>();\n        routeUnits.add(new RouteUnit(new RouteMapper(\"ds_0\", \"ds_0\"), Collections.singletonList(new RouteMapper(\"t_config\", \"t_config\"))));\n        routeUnits.add(new RouteUnit(new RouteMapper(\"ds_1\", \"ds_1\"), Collections.singletonList(new RouteMapper(\"t_config\", \"t_config\"))));\n        when(routeContext.getRouteUnits()).thenReturn(routeUnits);\n        new ShardingCreateTableStatementValidator().postValidate(shardingRule, new CreateTableStatementContext(sqlStatement), routeContext, schema);\n    }\n","date":"2021-07-05 14:48:43","endLine":167,"groupId":"10484","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertPostValidateCreateTableWithSameRouteResultBroadcastTableForPostgreSQL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/44/56dd38e029da5ecc71fbf1bb7147c435a6c178.src","preCode":"    public void assertPostValidateCreateTableWithSameRouteResultBroadcastTableForPostgreSQL() {\n        PostgreSQLCreateTableStatement sqlStatement = new PostgreSQLCreateTableStatement();\n        sqlStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"t_config\")));\n        when(shardingRule.isBroadcastTable(\"t_config\")).thenReturn(true);\n        when(shardingRule.getTableRule(\"t_config\")).thenReturn(new TableRule(Arrays.asList(\"ds_0\", \"ds_1\"), \"t_config\"));\n        Collection<RouteUnit> routeUnits = new LinkedList<>();\n        routeUnits.add(new RouteUnit(new RouteMapper(\"ds_0\", \"ds_0\"), Collections.singletonList(new RouteMapper(\"t_config\", \"t_config\"))));\n        routeUnits.add(new RouteUnit(new RouteMapper(\"ds_1\", \"ds_1\"), Collections.singletonList(new RouteMapper(\"t_config\", \"t_config\"))));\n        when(routeContext.getRouteUnits()).thenReturn(routeUnits);\n        new ShardingCreateTableStatementValidator().postValidate(shardingRule, new CreateTableStatementContext(sqlStatement), routeContext, schema);\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/ddl/ShardingCreateTableStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2021-06-04 22:49:49","commitOrder":2,"curCode":"    public void assertPostValidateDropIndexWithSameRouteResultBroadcastTableIndexForPostgreSQL() {\n        PostgreSQLDropIndexStatement sqlStatement = new PostgreSQLDropIndexStatement();\n        sqlStatement.getIndexes().add(new IndexSegment(0, 0, new IdentifierValue(\"t_config_index\")));\n        sqlStatement.getIndexes().add(new IndexSegment(0, 0, new IdentifierValue(\"t_config_index_new\")));\n        TableMetaData tableMetaData = mock(TableMetaData.class);\n        Map<String, IndexMetaData> indexes = mock(HashMap.class);\n        when(tableMetaData.getIndexes()).thenReturn(indexes);\n        when(schema.getAllTableNames()).thenReturn(Collections.singletonList(\"t_config\"));\n        when(schema.get(\"t_config\")).thenReturn(tableMetaData);\n        when(indexes.containsKey(\"t_config_index\")).thenReturn(true);\n        when(shardingRule.isBroadcastTable(\"t_config\")).thenReturn(true);\n        when(shardingRule.getTableRule(\"t_config\")).thenReturn(new TableRule(Arrays.asList(\"ds_0\", \"ds_1\"), \"t_config\"));\n        Collection<RouteUnit> routeUnits = new LinkedList<>();\n        routeUnits.add(new RouteUnit(new RouteMapper(\"ds_0\", \"ds_0\"), Collections.singletonList(new RouteMapper(\"t_config\", \"t_config\"))));\n        routeUnits.add(new RouteUnit(new RouteMapper(\"ds_1\", \"ds_1\"), Collections.singletonList(new RouteMapper(\"t_config\", \"t_config\"))));\n        when(routeContext.getRouteUnits()).thenReturn(routeUnits);\n        new ShardingDropIndexStatementValidator().postValidate(shardingRule, new DropIndexStatementContext(sqlStatement), routeContext, schema);\n    }\n","date":"2021-06-04 22:49:49","endLine":147,"groupId":"10484","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertPostValidateDropIndexWithSameRouteResultBroadcastTableIndexForPostgreSQL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e2/43241f9f465662ea5e319f54a9cfc3a087b619.src","preCode":"    public void assertPostValidateDropIndexWithSameRouteResultBroadcastTableIndexForPostgreSQL() {\n        PostgreSQLDropIndexStatement sqlStatement = new PostgreSQLDropIndexStatement();\n        sqlStatement.getIndexes().add(new IndexSegment(0, 0, new IdentifierValue(\"t_config_index\")));\n        sqlStatement.getIndexes().add(new IndexSegment(0, 0, new IdentifierValue(\"t_config_index_new\")));\n        TableMetaData tableMetaData = mock(TableMetaData.class);\n        Map<String, IndexMetaData> indexes = mock(HashMap.class);\n        when(tableMetaData.getIndexes()).thenReturn(indexes);\n        when(schema.getAllTableNames()).thenReturn(Collections.singletonList(\"t_config\"));\n        when(schema.get(\"t_config\")).thenReturn(tableMetaData);\n        when(indexes.containsKey(\"t_config_index\")).thenReturn(true);\n        when(shardingRule.isBroadcastTable(\"t_config\")).thenReturn(true);\n        when(shardingRule.getTableRule(\"t_config\")).thenReturn(new TableRule(Arrays.asList(\"ds_0\", \"ds_1\"), \"t_config\"));\n        Collection<RouteUnit> routeUnits = new LinkedList<>();\n        routeUnits.add(new RouteUnit(new RouteMapper(\"ds_0\", \"ds_0\"), Collections.singletonList(new RouteMapper(\"t_config\", \"t_config\"))));\n        routeUnits.add(new RouteUnit(new RouteMapper(\"ds_1\", \"ds_1\"), Collections.singletonList(new RouteMapper(\"t_config\", \"t_config\"))));\n        when(routeContext.getRouteUnits()).thenReturn(routeUnits);\n        new ShardingDropIndexStatementValidator().postValidate(shardingRule, new DropIndexStatementContext(sqlStatement), routeContext, schema);\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/ddl/ShardingDropIndexStatementValidatorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"N"}],"commitId":"bd4980624aaa0c9fb3c9c87e260177715f835ede","commitMessage":"@@@support sql with schema for all features (#11150)\n\n* support sql with schema for all features\n\n* optimize logic\n\n* fix test case\n\n* fix multi remove token rewrite error\n\n* correct some test case param\n\n* optimize remove token generate\n\n* optimize remove token generate","date":"2021-07-05 14:48:43","modifiedFileCount":"64","status":"M","submitter":"Zhengqiang Duan"}]
