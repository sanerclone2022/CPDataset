[{"authorTime":"2021-07-03 15:12:51","codes":[{"authorDate":"2021-07-02 23:18:54","commitOrder":2,"curCode":"    private void checkDuplicateRuleNames(final String schemaName, final CreateDatabaseDiscoveryRuleStatement sqlStatement, final DatabaseDiscoveryRuleConfiguration currentRuleConfig) {\n        if (null != currentRuleConfig) {\n            Collection<String> existRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n            Collection<String> duplicateRuleNames = sqlStatement.getRules().stream().map(DatabaseDiscoveryRuleSegment::getName).filter(existRuleNames::contains).collect(Collectors.toSet());\n            duplicateRuleNames.addAll(getToBeCreatedDuplicateRuleNames(sqlStatement));\n            if (!duplicateRuleNames.isEmpty()) {\n                throw new DuplicateRuleNamesException(schemaName, duplicateRuleNames);\n            }\n        }\n    }\n","date":"2021-07-02 23:18:54","endLine":67,"groupId":"5920","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkDuplicateRuleNames","params":"(finalStringschemaName@finalCreateDatabaseDiscoveryRuleStatementsqlStatement@finalDatabaseDiscoveryRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bb/d1cce4617e4c82ee796a4043f71ab987cd3500.src","preCode":"    private void checkDuplicateRuleNames(final String schemaName, final CreateDatabaseDiscoveryRuleStatement sqlStatement, final DatabaseDiscoveryRuleConfiguration currentRuleConfig) {\n        if (null != currentRuleConfig) {\n            Collection<String> existRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n            Collection<String> duplicateRuleNames = sqlStatement.getRules().stream().map(DatabaseDiscoveryRuleSegment::getName).filter(existRuleNames::contains).collect(Collectors.toSet());\n            duplicateRuleNames.addAll(getToBeCreatedDuplicateRuleNames(sqlStatement));\n            if (!duplicateRuleNames.isEmpty()) {\n                throw new DuplicateRuleNamesException(schemaName, duplicateRuleNames);\n            }\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/CreateDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"NB"},{"authorDate":"2021-07-03 15:12:51","commitOrder":2,"curCode":"    private void checkDuplicateRuleNames(final String schemaName, final CreateReadwriteSplittingRuleStatement sqlStatement, final ReadwriteSplittingRuleConfiguration currentRuleConfig) {\n        if (null != currentRuleConfig) {\n            Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(ReadwriteSplittingDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n            Collection<String> duplicateRuleNames = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getName).filter(currentRuleNames::contains).collect(Collectors.toList());\n            if (!duplicateRuleNames.isEmpty()) {\n                throw new DuplicateRuleNamesException(schemaName, duplicateRuleNames);\n            }\n        }\n    }\n","date":"2021-07-03 15:12:51","endLine":66,"groupId":"5920","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkDuplicateRuleNames","params":"(finalStringschemaName@finalCreateReadwriteSplittingRuleStatementsqlStatement@finalReadwriteSplittingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/14/a9e22fb0fc5475cdf2e917c4354b61400d339d.src","preCode":"    private void checkDuplicateRuleNames(final String schemaName, final CreateReadwriteSplittingRuleStatement sqlStatement, final ReadwriteSplittingRuleConfiguration currentRuleConfig) {\n        if (null != currentRuleConfig) {\n            Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(ReadwriteSplittingDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n            Collection<String> duplicateRuleNames = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getName).filter(currentRuleNames::contains).collect(Collectors.toList());\n            if (!duplicateRuleNames.isEmpty()) {\n                throw new DuplicateRuleNamesException(schemaName, duplicateRuleNames);\n            }\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-distsql/shardingsphere-readwrite-splitting-distsql-handler/src/main/java/org/apache/shardingsphere/readwritesplitting/distsql/handler/update/CreateReadwriteSplittingRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"}],"commitId":"2f7f7f5e0627c094d508f37554ec49c87874bb9e","commitMessage":"@@@Add shardingsphere-readwrite-splitting-distsql-handler module (#11124)\n\n","date":"2021-07-03 15:12:51","modifiedFileCount":"2","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 01:26:11","codes":[{"authorDate":"2021-07-04 01:26:11","commitOrder":3,"curCode":"    private void checkDuplicateRuleNames(final String schemaName, final CreateDatabaseDiscoveryRuleStatement sqlStatement, \n                                         final DatabaseDiscoveryRuleConfiguration currentRuleConfig) throws DuplicateRuleNamesException {\n        if (null != currentRuleConfig) {\n            Collection<String> existRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n            Collection<String> duplicateRuleNames = sqlStatement.getRules().stream().map(DatabaseDiscoveryRuleSegment::getName).filter(existRuleNames::contains).collect(Collectors.toSet());\n            duplicateRuleNames.addAll(getToBeCreatedDuplicateRuleNames(sqlStatement));\n            if (!duplicateRuleNames.isEmpty()) {\n                throw new DuplicateRuleNamesException(schemaName, duplicateRuleNames);\n            }\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":69,"groupId":"5920","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkDuplicateRuleNames","params":"(finalStringschemaName@finalCreateDatabaseDiscoveryRuleStatementsqlStatement@finalDatabaseDiscoveryRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/01/d511de26e4c1faf0f5e784a5326808df144fae.src","preCode":"    private void checkDuplicateRuleNames(final String schemaName, final CreateDatabaseDiscoveryRuleStatement sqlStatement, final DatabaseDiscoveryRuleConfiguration currentRuleConfig) {\n        if (null != currentRuleConfig) {\n            Collection<String> existRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n            Collection<String> duplicateRuleNames = sqlStatement.getRules().stream().map(DatabaseDiscoveryRuleSegment::getName).filter(existRuleNames::contains).collect(Collectors.toSet());\n            duplicateRuleNames.addAll(getToBeCreatedDuplicateRuleNames(sqlStatement));\n            if (!duplicateRuleNames.isEmpty()) {\n                throw new DuplicateRuleNamesException(schemaName, duplicateRuleNames);\n            }\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/CreateDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2021-07-04 01:26:11","commitOrder":3,"curCode":"    private void checkDuplicateRuleNames(final String schemaName, final CreateReadwriteSplittingRuleStatement sqlStatement, \n                                         final ReadwriteSplittingRuleConfiguration currentRuleConfig) throws DuplicateRuleNamesException {\n        if (null != currentRuleConfig) {\n            Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(ReadwriteSplittingDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n            Collection<String> duplicateRuleNames = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getName).filter(currentRuleNames::contains).collect(Collectors.toList());\n            if (!duplicateRuleNames.isEmpty()) {\n                throw new DuplicateRuleNamesException(schemaName, duplicateRuleNames);\n            }\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":68,"groupId":"5920","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkDuplicateRuleNames","params":"(finalStringschemaName@finalCreateReadwriteSplittingRuleStatementsqlStatement@finalReadwriteSplittingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/80/d65d5c656fedb4a3e6de7abf36b68e04d980f9.src","preCode":"    private void checkDuplicateRuleNames(final String schemaName, final CreateReadwriteSplittingRuleStatement sqlStatement, final ReadwriteSplittingRuleConfiguration currentRuleConfig) {\n        if (null != currentRuleConfig) {\n            Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(ReadwriteSplittingDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n            Collection<String> duplicateRuleNames = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getName).filter(currentRuleNames::contains).collect(Collectors.toList());\n            if (!duplicateRuleNames.isEmpty()) {\n                throw new DuplicateRuleNamesException(schemaName, duplicateRuleNames);\n            }\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-distsql/shardingsphere-readwrite-splitting-distsql-handler/src/main/java/org/apache/shardingsphere/readwritesplitting/distsql/handler/update/CreateReadwriteSplittingRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"18ab59a5ac8de3a2c2d2c1dac39de3041b9c36f3","commitMessage":"@@@Refactor RuleDefinitionViolationException to extend SQLException (#11129)\n\n* Refactor RDLBackendHandler\n\n* Refactor RuleDefinitionViolationException to extend SQLException","date":"2021-07-04 01:26:11","modifiedFileCount":"66","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 14:16:58","codes":[{"authorDate":"2021-07-04 14:16:58","commitOrder":4,"curCode":"    private void checkDuplicateRuleNames(final String schemaName, final CreateDatabaseDiscoveryRuleStatement sqlStatement, \n                                         final DatabaseDiscoveryRuleConfiguration currentRuleConfig) throws RuleDuplicatedException {\n        if (null != currentRuleConfig) {\n            Collection<String> existRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n            Collection<String> duplicateRuleNames = sqlStatement.getRules().stream().map(DatabaseDiscoveryRuleSegment::getName).filter(existRuleNames::contains).collect(Collectors.toSet());\n            duplicateRuleNames.addAll(getToBeCreatedDuplicateRuleNames(sqlStatement));\n            if (!duplicateRuleNames.isEmpty()) {\n                throw new RuleDuplicatedException(\"database discovery\", schemaName, duplicateRuleNames);\n            }\n        }\n    }\n","date":"2021-07-04 14:16:58","endLine":69,"groupId":"5920","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkDuplicateRuleNames","params":"(finalStringschemaName@finalCreateDatabaseDiscoveryRuleStatementsqlStatement@finalDatabaseDiscoveryRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8d/26fc66b792e9daad2591e18d7b06ad0429b51e.src","preCode":"    private void checkDuplicateRuleNames(final String schemaName, final CreateDatabaseDiscoveryRuleStatement sqlStatement, \n                                         final DatabaseDiscoveryRuleConfiguration currentRuleConfig) throws DuplicateRuleNamesException {\n        if (null != currentRuleConfig) {\n            Collection<String> existRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n            Collection<String> duplicateRuleNames = sqlStatement.getRules().stream().map(DatabaseDiscoveryRuleSegment::getName).filter(existRuleNames::contains).collect(Collectors.toSet());\n            duplicateRuleNames.addAll(getToBeCreatedDuplicateRuleNames(sqlStatement));\n            if (!duplicateRuleNames.isEmpty()) {\n                throw new DuplicateRuleNamesException(schemaName, duplicateRuleNames);\n            }\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/CreateDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2021-07-04 14:16:58","commitOrder":4,"curCode":"    private void checkDuplicateRuleNames(final String schemaName, final CreateReadwriteSplittingRuleStatement sqlStatement, \n                                         final ReadwriteSplittingRuleConfiguration currentRuleConfig) throws RuleDuplicatedException {\n        if (null != currentRuleConfig) {\n            Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(ReadwriteSplittingDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n            Collection<String> duplicateRuleNames = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getName).filter(currentRuleNames::contains).collect(Collectors.toList());\n            if (!duplicateRuleNames.isEmpty()) {\n                throw new RuleDuplicatedException(\"readwrite splitting\", schemaName, duplicateRuleNames);\n            }\n        }\n    }\n","date":"2021-07-04 14:16:58","endLine":68,"groupId":"5920","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkDuplicateRuleNames","params":"(finalStringschemaName@finalCreateReadwriteSplittingRuleStatementsqlStatement@finalReadwriteSplittingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ad/2f86d8d213e215fdc394345c8ac82e2c2bf4ed.src","preCode":"    private void checkDuplicateRuleNames(final String schemaName, final CreateReadwriteSplittingRuleStatement sqlStatement, \n                                         final ReadwriteSplittingRuleConfiguration currentRuleConfig) throws DuplicateRuleNamesException {\n        if (null != currentRuleConfig) {\n            Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(ReadwriteSplittingDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n            Collection<String> duplicateRuleNames = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getName).filter(currentRuleNames::contains).collect(Collectors.toList());\n            if (!duplicateRuleNames.isEmpty()) {\n                throw new DuplicateRuleNamesException(schemaName, duplicateRuleNames);\n            }\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-distsql/shardingsphere-readwrite-splitting-distsql-handler/src/main/java/org/apache/shardingsphere/readwritesplitting/distsql/handler/update/CreateReadwriteSplittingRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"f470823871a18135ec464481217395cbaf8f6e90","commitMessage":"@@@Use DuplicateResourceException to refine Exception of current rule validation (#11134)\n\n* Rename RuleDuplicatedException\n\n* Remove DuplicateTablesException\n\n* Remove DuplicateBindingTablesException","date":"2021-07-04 14:16:58","modifiedFileCount":"14","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 15:02:59","codes":[{"authorDate":"2021-07-04 15:02:59","commitOrder":5,"curCode":"    private void checkDuplicateRuleNames(final String schemaName, final CreateDatabaseDiscoveryRuleStatement sqlStatement, \n                                         final DatabaseDiscoveryRuleConfiguration currentRuleConfig) throws DuplicateRuleException {\n        if (null != currentRuleConfig) {\n            Collection<String> existRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n            Collection<String> duplicateRuleNames = sqlStatement.getRules().stream().map(DatabaseDiscoveryRuleSegment::getName).filter(existRuleNames::contains).collect(Collectors.toSet());\n            duplicateRuleNames.addAll(getToBeCreatedDuplicateRuleNames(sqlStatement));\n            if (!duplicateRuleNames.isEmpty()) {\n                throw new DuplicateRuleException(\"database discovery\", schemaName, duplicateRuleNames);\n            }\n        }\n    }\n","date":"2021-07-04 15:02:59","endLine":69,"groupId":"10226","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"checkDuplicateRuleNames","params":"(finalStringschemaName@finalCreateDatabaseDiscoveryRuleStatementsqlStatement@finalDatabaseDiscoveryRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/22/84bc1b0877f17af2c231954d508504ae61d07a.src","preCode":"    private void checkDuplicateRuleNames(final String schemaName, final CreateDatabaseDiscoveryRuleStatement sqlStatement, \n                                         final DatabaseDiscoveryRuleConfiguration currentRuleConfig) throws RuleDuplicatedException {\n        if (null != currentRuleConfig) {\n            Collection<String> existRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n            Collection<String> duplicateRuleNames = sqlStatement.getRules().stream().map(DatabaseDiscoveryRuleSegment::getName).filter(existRuleNames::contains).collect(Collectors.toSet());\n            duplicateRuleNames.addAll(getToBeCreatedDuplicateRuleNames(sqlStatement));\n            if (!duplicateRuleNames.isEmpty()) {\n                throw new RuleDuplicatedException(\"database discovery\", schemaName, duplicateRuleNames);\n            }\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/CreateDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2021-07-04 15:02:59","commitOrder":5,"curCode":"    private void checkDuplicateRuleNames(final String schemaName, final CreateReadwriteSplittingRuleStatement sqlStatement, \n                                         final ReadwriteSplittingRuleConfiguration currentRuleConfig) throws DuplicateRuleException {\n        if (null != currentRuleConfig) {\n            Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(ReadwriteSplittingDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n            Collection<String> duplicateRuleNames = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getName).filter(currentRuleNames::contains).collect(Collectors.toList());\n            if (!duplicateRuleNames.isEmpty()) {\n                throw new DuplicateRuleException(\"readwrite splitting\", schemaName, duplicateRuleNames);\n            }\n        }\n    }\n","date":"2021-07-04 15:02:59","endLine":68,"groupId":"10226","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"checkDuplicateRuleNames","params":"(finalStringschemaName@finalCreateReadwriteSplittingRuleStatementsqlStatement@finalReadwriteSplittingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a6/898929d2f723f4f12f611bf1d1a5f1ec970c57.src","preCode":"    private void checkDuplicateRuleNames(final String schemaName, final CreateReadwriteSplittingRuleStatement sqlStatement, \n                                         final ReadwriteSplittingRuleConfiguration currentRuleConfig) throws RuleDuplicatedException {\n        if (null != currentRuleConfig) {\n            Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(ReadwriteSplittingDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n            Collection<String> duplicateRuleNames = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getName).filter(currentRuleNames::contains).collect(Collectors.toList());\n            if (!duplicateRuleNames.isEmpty()) {\n                throw new RuleDuplicatedException(\"readwrite splitting\", schemaName, duplicateRuleNames);\n            }\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-distsql/shardingsphere-readwrite-splitting-distsql-handler/src/main/java/org/apache/shardingsphere/readwritesplitting/distsql/handler/update/CreateReadwriteSplittingRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"83216cb8e0d277c40d499d8c6ad41413990dc1b5","commitMessage":"@@@Add ResourceDefinitionViolationException (#11136)\n\n* Add ResourceDefinitionViolationException\n\n* Add ResourceDefinitionViolationException\n\n* Rename DuplicateRuleException\n\n* Rename RequiredRuleMissedException\n\n* Rename RequiredResourceMissedException","date":"2021-07-04 15:02:59","modifiedFileCount":"35","status":"M","submitter":"Liang Zhang"}]
