[{"authorTime":"2021-03-12 17:48:53","codes":[{"authorDate":"2021-03-26 12:10:58","commitOrder":2,"curCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> existedTables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(existedTables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-03-26 12:10:58","endLine":85,"groupId":"10129","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"loadColumnMetaDataMap","params":"(finalDataSourcedataSource@finalCollection<String>existedTables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/23/bb1bd437955d14d1897b2ebe0e128f0847e097.src","preCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> existedTables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(existedTables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/OracleTableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"},{"authorDate":"2021-03-12 17:48:53","commitOrder":2,"curCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> existedTables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(existedTables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-03-12 17:48:53","endLine":81,"groupId":"10129","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadColumnMetaDataMap","params":"(finalDataSourcedataSource@finalCollection<String>existedTables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/33/20128cd9d18975a36d99377c5ee79ef7351c97.src","preCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> existedTables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(existedTables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/MySQLTableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"NB"}],"commitId":"5d380b0f372d289c9158075ba052e85069df6036","commitMessage":"@@@Add OracleTableMetaDataLoader (#9825)\n\n","date":"2021-03-26 12:10:58","modifiedFileCount":"3","status":"M","submitter":"Liangda-w"},{"authorTime":"2021-03-12 17:48:53","codes":[{"authorDate":"2021-04-11 15:08:08","commitOrder":3,"curCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> existedTables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(existedTables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            Map<String, Collection<String>> tablePrimaryKeys = loadTablePrimaryKeys(connection, existedTables);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet, tablePrimaryKeys.getOrDefault(tableName, Collections.emptyList()));\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-04-11 15:08:08","endLine":91,"groupId":"2528","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"loadColumnMetaDataMap","params":"(finalDataSourcedataSource@finalCollection<String>existedTables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/05/99b2119d8ee69813689cb67bd3680719eddf89.src","preCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> existedTables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(existedTables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/OracleTableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2021-03-12 17:48:53","commitOrder":3,"curCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> existedTables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(existedTables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-03-12 17:48:53","endLine":81,"groupId":"10129","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadColumnMetaDataMap","params":"(finalDataSourcedataSource@finalCollection<String>existedTables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/33/20128cd9d18975a36d99377c5ee79ef7351c97.src","preCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> existedTables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(existedTables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/MySQLTableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"09aa12aa52bb62d15ebb9486ab6e7ebeeb21a607","commitMessage":"@@@Fix oracle metadata loader problem (#9985)\n\n* fix oracle metadata loader problem\n\n* fix\n\n* fix","date":"2021-04-11 15:08:08","modifiedFileCount":"2","status":"M","submitter":"Zhu jun"},{"authorTime":"2021-03-12 17:48:53","codes":[{"authorDate":"2021-05-25 11:32:33","commitOrder":4,"curCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> existedTables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (Connection connection = dataSource.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(existedTables, connection.getMetaData()))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            Map<String, Collection<String>> tablePrimaryKeys = loadTablePrimaryKeys(connection, existedTables);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet, tablePrimaryKeys.getOrDefault(tableName, Collections.emptyList()));\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-05-25 11:32:33","endLine":94,"groupId":"2528","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"loadColumnMetaDataMap","params":"(finalDataSourcedataSource@finalCollection<String>existedTables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0d/8f029d4b6802582678efa637a69c8ab068bd37.src","preCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> existedTables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(existedTables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            Map<String, Collection<String>> tablePrimaryKeys = loadTablePrimaryKeys(connection, existedTables);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet, tablePrimaryKeys.getOrDefault(tableName, Collections.emptyList()));\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/OracleTableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2021-03-12 17:48:53","commitOrder":4,"curCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> existedTables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(existedTables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-03-12 17:48:53","endLine":81,"groupId":"10129","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"loadColumnMetaDataMap","params":"(finalDataSourcedataSource@finalCollection<String>existedTables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/33/20128cd9d18975a36d99377c5ee79ef7351c97.src","preCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> existedTables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(existedTables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/MySQLTableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"8cc26a728b048176b98679feee755025253a6b01","commitMessage":"@@@fix oracle meta data load error (#10448)\n\n* fix oracle jdbc start error\n\n* fix checkstyle\n\n* catch exception clause add final","date":"2021-05-25 11:32:33","modifiedFileCount":"4","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-07-21 09:59:32","codes":[{"authorDate":"2021-05-25 11:32:33","commitOrder":5,"curCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> existedTables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (Connection connection = dataSource.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(existedTables, connection.getMetaData()))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            Map<String, Collection<String>> tablePrimaryKeys = loadTablePrimaryKeys(connection, existedTables);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet, tablePrimaryKeys.getOrDefault(tableName, Collections.emptyList()));\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-05-25 11:32:33","endLine":94,"groupId":"2528","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"loadColumnMetaDataMap","params":"(finalDataSourcedataSource@finalCollection<String>existedTables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0d/8f029d4b6802582678efa637a69c8ab068bd37.src","preCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> existedTables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (Connection connection = dataSource.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(existedTables, connection.getMetaData()))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            Map<String, Collection<String>> tablePrimaryKeys = loadTablePrimaryKeys(connection, existedTables);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet, tablePrimaryKeys.getOrDefault(tableName, Collections.emptyList()));\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/OracleTableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"},{"authorDate":"2021-07-21 09:59:32","commitOrder":5,"curCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> existedTables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(existedTables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            dataTypes.putIfAbsent(\"JSON\", -1);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-07-21 09:59:32","endLine":87,"groupId":"7202","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"loadColumnMetaDataMap","params":"(finalDataSourcedataSource@finalCollection<String>existedTables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e3/b684c6fde593fe467862383bf4317eccc08eb4.src","preCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> existedTables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(existedTables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/MySQLTableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"00213e5038f137909de409519f7445d5f7b95fd8","commitMessage":"@@@Add mysql data type with json (#11414)\n\n* add mysql data type\n\n* add ut for json data type","date":"2021-07-21 09:59:32","modifiedFileCount":"2","status":"M","submitter":"zhaojinchao"},{"authorTime":"2021-08-17 15:06:22","codes":[{"authorDate":"2021-08-17 15:06:22","commitOrder":6,"curCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> tables, final boolean isExclude) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (Connection connection = dataSource.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(tables, connection.getMetaData(), isExclude))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            Map<String, Collection<String>> tablePrimaryKeys = loadTablePrimaryKeys(connection, tables, isExclude);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet, tablePrimaryKeys.getOrDefault(tableName, Collections.emptyList()));\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-08-17 15:06:22","endLine":106,"groupId":"2528","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"loadColumnMetaDataMap","params":"(finalDataSourcedataSource@finalCollection<String>tables@finalbooleanisExclude)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/56/062bdc12d06df1655db77071e14842a5076487.src","preCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> existedTables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (Connection connection = dataSource.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(existedTables, connection.getMetaData()))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            Map<String, Collection<String>> tablePrimaryKeys = loadTablePrimaryKeys(connection, existedTables);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet, tablePrimaryKeys.getOrDefault(tableName, Collections.emptyList()));\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/OracleTableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2021-08-17 15:06:22","commitOrder":6,"curCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> tables, final boolean isExclude) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(tables, isExclude))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            dataTypes.putIfAbsent(\"JSON\", -1);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-08-17 15:06:22","endLine":94,"groupId":"7202","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"loadColumnMetaDataMap","params":"(finalDataSourcedataSource@finalCollection<String>tables@finalbooleanisExclude)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/03/6ff840f0de6a04def10c0e6da7f3a4cf734103.src","preCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> existedTables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(existedTables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            dataTypes.putIfAbsent(\"JSON\", -1);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/MySQLTableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"605e05c907bb4bd4e14bb682c01e6f46e562a87b","commitMessage":"@@@improve metadata load performance (#11767)\n\n* improve metadata load performance\n\n* improve metadata load performance\n\n* metaDataImprove test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove add test case\n\n* metaDataImprove fix index\n\n* metaDataImprove optimize review\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions\n\n* metaDataImprove optimize review suggestions","date":"2021-08-17 15:06:22","modifiedFileCount":"16","status":"M","submitter":"tuichenchuxin"},{"authorTime":"2021-08-20 15:52:50","codes":[{"authorDate":"2021-08-20 15:52:50","commitOrder":7,"curCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> tables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (Connection connection = dataSource.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(tables, connection.getMetaData()))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            Map<String, Collection<String>> tablePrimaryKeys = loadTablePrimaryKeys(connection, tables);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet, tablePrimaryKeys.getOrDefault(tableName, Collections.emptyList()));\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-08-20 15:52:50","endLine":92,"groupId":"2528","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"loadColumnMetaDataMap","params":"(finalDataSourcedataSource@finalCollection<String>tables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fb/621a74f58d51f2cb122c0b1226fb76d94fa426.src","preCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> tables, final boolean isExclude) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (Connection connection = dataSource.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(tables, connection.getMetaData(), isExclude))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            Map<String, Collection<String>> tablePrimaryKeys = loadTablePrimaryKeys(connection, tables, isExclude);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet, tablePrimaryKeys.getOrDefault(tableName, Collections.emptyList()));\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/OracleTableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2021-08-20 15:52:50","commitOrder":7,"curCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> tables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(tables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            dataTypes.putIfAbsent(\"JSON\", -1);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-08-20 15:52:50","endLine":82,"groupId":"7202","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"loadColumnMetaDataMap","params":"(finalDataSourcedataSource@finalCollection<String>tables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1f/d8f91603d7bf9b736f3a7242c71d68da15d448.src","preCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> tables, final boolean isExclude) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(tables, isExclude))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            dataTypes.putIfAbsent(\"JSON\", -1);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/MySQLTableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"632b7c777ea43f7de3dfd2f13bc866814b882eaa","commitMessage":"@@@Refactor single table meta data load (#11895)\n\n","date":"2021-08-20 15:52:50","modifiedFileCount":"31","status":"M","submitter":"tuichenchuxin"},{"authorTime":"2021-08-20 15:52:50","codes":[{"authorDate":"2021-08-24 07:46:44","commitOrder":8,"curCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> tables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (Connection connection = dataSource.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(tables, connection.getMetaData()))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            Map<String, Collection<String>> tablePrimaryKeys = loadTablePrimaryKeys(connection, tables);\n            preparedStatement.setString(1, connection.getSchema());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet, tablePrimaryKeys.getOrDefault(tableName, Collections.emptyList()), connection.getMetaData());\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-08-24 07:46:44","endLine":92,"groupId":"2618","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"loadColumnMetaDataMap","params":"(finalDataSourcedataSource@finalCollection<String>tables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/da/b2d0b9b59eca6d85d9ee366b36b9b17b4dd9a2.src","preCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> tables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (Connection connection = dataSource.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(tables, connection.getMetaData()))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            Map<String, Collection<String>> tablePrimaryKeys = loadTablePrimaryKeys(connection, tables);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet, tablePrimaryKeys.getOrDefault(tableName, Collections.emptyList()));\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/OracleTableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2021-08-20 15:52:50","commitOrder":8,"curCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> tables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(tables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            dataTypes.putIfAbsent(\"JSON\", -1);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-08-20 15:52:50","endLine":82,"groupId":"7202","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"loadColumnMetaDataMap","params":"(finalDataSourcedataSource@finalCollection<String>tables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1f/d8f91603d7bf9b736f3a7242c71d68da15d448.src","preCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> tables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(tables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            dataTypes.putIfAbsent(\"JSON\", -1);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/MySQLTableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"580d8c81fbd39a751333abb0bfe3a453cc6a77a9","commitMessage":"@@@Oracle load test (#11956)\n\n","date":"2021-08-24 07:46:44","modifiedFileCount":"2","status":"M","submitter":"tuichenchuxin"},{"authorTime":"2021-08-20 15:52:50","codes":[{"authorDate":"2021-09-02 17:34:21","commitOrder":9,"curCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> tables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (Connection connection = dataSource.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(tables, connection.getMetaData()))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            appendNumberDataType(dataTypes);\n            Map<String, Collection<String>> tablePrimaryKeys = loadTablePrimaryKeys(connection, tables);\n            preparedStatement.setString(1, connection.getSchema());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet, tablePrimaryKeys.getOrDefault(tableName, Collections.emptyList()), connection.getMetaData());\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-09-02 17:34:21","endLine":94,"groupId":"101920","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"loadColumnMetaDataMap","params":"(finalDataSourcedataSource@finalCollection<String>tables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/dc/c2cd05a474403e7fb656e833aa9a454cb2ab68.src","preCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> tables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (Connection connection = dataSource.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(tables, connection.getMetaData()))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            Map<String, Collection<String>> tablePrimaryKeys = loadTablePrimaryKeys(connection, tables);\n            preparedStatement.setString(1, connection.getSchema());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet, tablePrimaryKeys.getOrDefault(tableName, Collections.emptyList()), connection.getMetaData());\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/OracleTableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2021-08-20 15:52:50","commitOrder":9,"curCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> tables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(tables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            dataTypes.putIfAbsent(\"JSON\", -1);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-08-20 15:52:50","endLine":82,"groupId":"101920","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"loadColumnMetaDataMap","params":"(finalDataSourcedataSource@finalCollection<String>tables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1f/d8f91603d7bf9b736f3a7242c71d68da15d448.src","preCode":"    private Map<String, Collection<ColumnMetaData>> loadColumnMetaDataMap(final DataSource dataSource, final Collection<String> tables) throws SQLException {\n        Map<String, Collection<ColumnMetaData>> result = new HashMap<>();\n        try (\n                Connection connection = dataSource.getConnection();\n                PreparedStatement preparedStatement = connection.prepareStatement(getTableMetaDataSQL(tables))) {\n            Map<String, Integer> dataTypes = DataTypeLoader.load(connection.getMetaData());\n            dataTypes.putIfAbsent(\"JSON\", -1);\n            preparedStatement.setString(1, connection.getCatalog());\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    String tableName = resultSet.getString(\"TABLE_NAME\");\n                    ColumnMetaData columnMetaData = loadColumnMetaData(dataTypes, resultSet);\n                    if (!result.containsKey(tableName)) {\n                        result.put(tableName, new LinkedList<>());\n                    }\n                    result.get(tableName).add(columnMetaData);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/schema/builder/loader/dialect/MySQLTableMetaDataLoader.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"1301a41807eda152b17ef78fe084bc2d4e9d368e","commitMessage":"@@@fix calcite exception when user execute sql with lowercase (#12125)\n\n* fix calcite execute error with oracle statement\n\n* add test case\n\n* modify map to case insensitive\n\n* fix test case\n\n* add test case for federate refresh test\n\n* optimize code\n\n* optimize code\n\n* optimize test case\n\n* optimize test case\n\n* optimize federate logic\n\n* optimize code","date":"2021-09-02 17:34:21","modifiedFileCount":"18","status":"M","submitter":"Zhengqiang Duan"}]
