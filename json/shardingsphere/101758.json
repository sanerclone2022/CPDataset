[{"authorTime":"2021-06-24 20:40:38","codes":[{"authorDate":"2021-06-02 17:05:09","commitOrder":3,"curCode":"    private void assertCreateProjectionsContextWithTemporaryTable(final SelectStatement selectStatement, final SelectStatement subquerySelectStatement) {\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        ShorthandProjectionSegment projectionSegment = new ShorthandProjectionSegment(0, 0);\n        projectionSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"d\")));\n        projectionsSegment.getProjections().addAll(Collections.singletonList(projectionSegment));\n        selectStatement.setProjections(projectionsSegment);\n        subquerySelectStatement.setProjections(new ProjectionsSegment(0, 0));\n        SubqueryTableSegment subqueryTableSegment = new SubqueryTableSegment(new SubquerySegment(0, 0, subquerySelectStatement));\n        subqueryTableSegment.setAlias(new AliasSegment(0, 0, new IdentifierValue(\"d\")));\n        selectStatement.setFrom(subqueryTableSegment);\n        ColumnSegment columnSegment = new ColumnSegment(0, 0, new IdentifierValue(\"name\"));\n        columnSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"d\")));\n        OrderByItem groupByItem = new OrderByItem(new ColumnOrderByItemSegment(columnSegment, OrderDirection.ASC));\n        GroupByContext groupByContext = new GroupByContext(Collections.singleton(groupByItem));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(schema, new LinkedList<>(), selectStatement);\n        ProjectionsContext actual = new ProjectionsContextEngine(schema)\n                .createProjectionsContext(selectStatementContext.getFromSimpleTableSegments(), projectionsSegment, groupByContext, new OrderByContext(Collections.emptyList(), false));\n        assertNotNull(actual);\n    }\n","date":"2021-06-02 17:05:09","endLine":393,"groupId":"10666","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertCreateProjectionsContextWithTemporaryTable","params":"(finalSelectStatementselectStatement@finalSelectStatementsubquerySelectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ba/ddbe2bf429d513212f46351b3b959aee425f3c.src","preCode":"    private void assertCreateProjectionsContextWithTemporaryTable(final SelectStatement selectStatement, final SelectStatement subquerySelectStatement) {\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        ShorthandProjectionSegment projectionSegment = new ShorthandProjectionSegment(0, 0);\n        projectionSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"d\")));\n        projectionsSegment.getProjections().addAll(Collections.singletonList(projectionSegment));\n        selectStatement.setProjections(projectionsSegment);\n        subquerySelectStatement.setProjections(new ProjectionsSegment(0, 0));\n        SubqueryTableSegment subqueryTableSegment = new SubqueryTableSegment(new SubquerySegment(0, 0, subquerySelectStatement));\n        subqueryTableSegment.setAlias(new AliasSegment(0, 0, new IdentifierValue(\"d\")));\n        selectStatement.setFrom(subqueryTableSegment);\n        ColumnSegment columnSegment = new ColumnSegment(0, 0, new IdentifierValue(\"name\"));\n        columnSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"d\")));\n        OrderByItem groupByItem = new OrderByItem(new ColumnOrderByItemSegment(columnSegment, OrderDirection.ASC));\n        GroupByContext groupByContext = new GroupByContext(Collections.singleton(groupByItem));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(schema, new LinkedList<>(), selectStatement);\n        ProjectionsContext actual = new ProjectionsContextEngine(schema)\n                .createProjectionsContext(selectStatementContext.getFromSimpleTableSegments(), projectionsSegment, groupByContext, new OrderByContext(Collections.emptyList(), false));\n        assertNotNull(actual);\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/segment/select/projection/engine/ProjectionsContextEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"NB"},{"authorDate":"2021-06-24 20:40:38","commitOrder":3,"curCode":"    private void assertCreateProjectionsContextWhenTableNameOrAliasIgnoreCase(final SelectStatement selectStatement, final SelectStatement subquerySelectStatement) {\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        ShorthandProjectionSegment projectionSegment = new ShorthandProjectionSegment(0, 0);\n        projectionSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"table\")));\n        projectionsSegment.getProjections().addAll(Collections.singletonList(projectionSegment));\n        selectStatement.setProjections(projectionsSegment);\n        subquerySelectStatement.setProjections(new ProjectionsSegment(0, 0));\n        SubqueryTableSegment subqueryTableSegment = new SubqueryTableSegment(new SubquerySegment(0, 0, subquerySelectStatement));\n        subqueryTableSegment.setAlias(new AliasSegment(0, 0, new IdentifierValue(\"TABLE\")));\n        selectStatement.setFrom(subqueryTableSegment);\n        ColumnSegment columnSegment = new ColumnSegment(0, 0, new IdentifierValue(\"name\"));\n        columnSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"TAble\")));\n        OrderByItem groupByItem = new OrderByItem(new ColumnOrderByItemSegment(columnSegment, OrderDirection.ASC));\n        GroupByContext groupByContext = new GroupByContext(Collections.singleton(groupByItem));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(schema, new LinkedList<>(), selectStatement);\n        ProjectionsContext actual = new ProjectionsContextEngine(schema)\n                .createProjectionsContext(selectStatementContext.getFromSimpleTableSegments(), projectionsSegment, groupByContext, new OrderByContext(Collections.emptyList(), false));\n        assertNotNull(actual);\n    }\n","date":"2021-06-24 20:40:38","endLine":438,"groupId":"10667","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertCreateProjectionsContextWhenTableNameOrAliasIgnoreCase","params":"(finalSelectStatementselectStatement@finalSelectStatementsubquerySelectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6d/2c31614ff5dc7797bcffa9930fd463a8f1303d.src","preCode":"    private void assertCreateProjectionsContextWhenTableNameOrAliasIgnoreCase(final SelectStatement selectStatement, final SelectStatement subquerySelectStatement) {\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        ShorthandProjectionSegment projectionSegment = new ShorthandProjectionSegment(0, 0);\n        projectionSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"table\")));\n        projectionsSegment.getProjections().addAll(Collections.singletonList(projectionSegment));\n        selectStatement.setProjections(projectionsSegment);\n        subquerySelectStatement.setProjections(new ProjectionsSegment(0, 0));\n        SubqueryTableSegment subqueryTableSegment = new SubqueryTableSegment(new SubquerySegment(0, 0, subquerySelectStatement));\n        subqueryTableSegment.setAlias(new AliasSegment(0, 0, new IdentifierValue(\"TABLE\")));\n        selectStatement.setFrom(subqueryTableSegment);\n        ColumnSegment columnSegment = new ColumnSegment(0, 0, new IdentifierValue(\"name\"));\n        columnSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"TAble\")));\n        OrderByItem groupByItem = new OrderByItem(new ColumnOrderByItemSegment(columnSegment, OrderDirection.ASC));\n        GroupByContext groupByContext = new GroupByContext(Collections.singleton(groupByItem));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(schema, new LinkedList<>(), selectStatement);\n        ProjectionsContext actual = new ProjectionsContextEngine(schema)\n                .createProjectionsContext(selectStatementContext.getFromSimpleTableSegments(), projectionsSegment, groupByContext, new OrderByContext(Collections.emptyList(), false));\n        assertNotNull(actual);\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/segment/select/projection/engine/ProjectionsContextEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":420,"status":"B"}],"commitId":"b191242e32d54c263100f1d4e2b2008ec99536f5","commitMessage":"@@@fixed #10863 Update tableNameOrAlias to equalsIgnoreCase (#10893)\n\n* update tableNameOrAlias to equalsIgnoreCase\n\n* Update TablesContextTest.java\n\nfixed format TablesContextTest\n\n* Update ProjectionsContextEngineTest.java\n\nfixed format ProjectionsContextEngineTest","date":"2021-06-24 20:40:38","modifiedFileCount":"4","status":"M","submitter":"superchao"},{"authorTime":"2021-07-02 20:44:49","codes":[{"authorDate":"2021-07-02 20:44:49","commitOrder":4,"curCode":"    private void assertCreateProjectionsContextWithTemporaryTable(final SelectStatement selectStatement, final SelectStatement subquerySelectStatement) {\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        ShorthandProjectionSegment projectionSegment = new ShorthandProjectionSegment(0, 0);\n        projectionSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"d\")));\n        projectionsSegment.getProjections().addAll(Collections.singletonList(projectionSegment));\n        selectStatement.setProjections(projectionsSegment);\n        subquerySelectStatement.setProjections(new ProjectionsSegment(0, 0));\n        SubqueryTableSegment subqueryTableSegment = new SubqueryTableSegment(new SubquerySegment(0, 0, subquerySelectStatement));\n        subqueryTableSegment.setAlias(new AliasSegment(0, 0, new IdentifierValue(\"d\")));\n        selectStatement.setFrom(subqueryTableSegment);\n        ColumnSegment columnSegment = new ColumnSegment(0, 0, new IdentifierValue(\"name\"));\n        columnSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"d\")));\n        OrderByItem groupByItem = new OrderByItem(new ColumnOrderByItemSegment(columnSegment, OrderDirection.ASC));\n        GroupByContext groupByContext = new GroupByContext(Collections.singleton(groupByItem));\n        SelectStatementContext selectStatementContext = createSelectStatementContext(selectStatement);\n        ProjectionsContext actual = new ProjectionsContextEngine(schema)\n                .createProjectionsContext(selectStatementContext.getFromSimpleTableSegments(), projectionsSegment, groupByContext, new OrderByContext(Collections.emptyList(), false));\n        assertNotNull(actual);\n    }\n","date":"2021-07-02 20:44:49","endLine":405,"groupId":"10666","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertCreateProjectionsContextWithTemporaryTable","params":"(finalSelectStatementselectStatement@finalSelectStatementsubquerySelectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fd/1e157897eeb1f66d4805cadcd874c9fd4fe96d.src","preCode":"    private void assertCreateProjectionsContextWithTemporaryTable(final SelectStatement selectStatement, final SelectStatement subquerySelectStatement) {\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        ShorthandProjectionSegment projectionSegment = new ShorthandProjectionSegment(0, 0);\n        projectionSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"d\")));\n        projectionsSegment.getProjections().addAll(Collections.singletonList(projectionSegment));\n        selectStatement.setProjections(projectionsSegment);\n        subquerySelectStatement.setProjections(new ProjectionsSegment(0, 0));\n        SubqueryTableSegment subqueryTableSegment = new SubqueryTableSegment(new SubquerySegment(0, 0, subquerySelectStatement));\n        subqueryTableSegment.setAlias(new AliasSegment(0, 0, new IdentifierValue(\"d\")));\n        selectStatement.setFrom(subqueryTableSegment);\n        ColumnSegment columnSegment = new ColumnSegment(0, 0, new IdentifierValue(\"name\"));\n        columnSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"d\")));\n        OrderByItem groupByItem = new OrderByItem(new ColumnOrderByItemSegment(columnSegment, OrderDirection.ASC));\n        GroupByContext groupByContext = new GroupByContext(Collections.singleton(groupByItem));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(schema, new LinkedList<>(), selectStatement);\n        ProjectionsContext actual = new ProjectionsContextEngine(schema)\n                .createProjectionsContext(selectStatementContext.getFromSimpleTableSegments(), projectionsSegment, groupByContext, new OrderByContext(Collections.emptyList(), false));\n        assertNotNull(actual);\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/segment/select/projection/engine/ProjectionsContextEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"M"},{"authorDate":"2021-07-02 20:44:49","commitOrder":4,"curCode":"    private void assertCreateProjectionsContextWhenTableNameOrAliasIgnoreCase(final SelectStatement selectStatement, final SelectStatement subquerySelectStatement) {\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        ShorthandProjectionSegment projectionSegment = new ShorthandProjectionSegment(0, 0);\n        projectionSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"table\")));\n        projectionsSegment.getProjections().addAll(Collections.singletonList(projectionSegment));\n        selectStatement.setProjections(projectionsSegment);\n        subquerySelectStatement.setProjections(new ProjectionsSegment(0, 0));\n        SubqueryTableSegment subqueryTableSegment = new SubqueryTableSegment(new SubquerySegment(0, 0, subquerySelectStatement));\n        subqueryTableSegment.setAlias(new AliasSegment(0, 0, new IdentifierValue(\"TABLE\")));\n        selectStatement.setFrom(subqueryTableSegment);\n        ColumnSegment columnSegment = new ColumnSegment(0, 0, new IdentifierValue(\"name\"));\n        columnSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"TAble\")));\n        OrderByItem groupByItem = new OrderByItem(new ColumnOrderByItemSegment(columnSegment, OrderDirection.ASC));\n        GroupByContext groupByContext = new GroupByContext(Collections.singleton(groupByItem));\n        SelectStatementContext selectStatementContext = createSelectStatementContext(selectStatement);\n        ProjectionsContext actual = new ProjectionsContextEngine(schema)\n                .createProjectionsContext(selectStatementContext.getFromSimpleTableSegments(), projectionsSegment, groupByContext, new OrderByContext(Collections.emptyList(), false));\n        assertNotNull(actual);\n    }\n","date":"2021-07-02 20:44:49","endLine":450,"groupId":"10667","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertCreateProjectionsContextWhenTableNameOrAliasIgnoreCase","params":"(finalSelectStatementselectStatement@finalSelectStatementsubquerySelectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fd/1e157897eeb1f66d4805cadcd874c9fd4fe96d.src","preCode":"    private void assertCreateProjectionsContextWhenTableNameOrAliasIgnoreCase(final SelectStatement selectStatement, final SelectStatement subquerySelectStatement) {\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        ShorthandProjectionSegment projectionSegment = new ShorthandProjectionSegment(0, 0);\n        projectionSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"table\")));\n        projectionsSegment.getProjections().addAll(Collections.singletonList(projectionSegment));\n        selectStatement.setProjections(projectionsSegment);\n        subquerySelectStatement.setProjections(new ProjectionsSegment(0, 0));\n        SubqueryTableSegment subqueryTableSegment = new SubqueryTableSegment(new SubquerySegment(0, 0, subquerySelectStatement));\n        subqueryTableSegment.setAlias(new AliasSegment(0, 0, new IdentifierValue(\"TABLE\")));\n        selectStatement.setFrom(subqueryTableSegment);\n        ColumnSegment columnSegment = new ColumnSegment(0, 0, new IdentifierValue(\"name\"));\n        columnSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"TAble\")));\n        OrderByItem groupByItem = new OrderByItem(new ColumnOrderByItemSegment(columnSegment, OrderDirection.ASC));\n        GroupByContext groupByContext = new GroupByContext(Collections.singleton(groupByItem));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(schema, new LinkedList<>(), selectStatement);\n        ProjectionsContext actual = new ProjectionsContextEngine(schema)\n                .createProjectionsContext(selectStatementContext.getFromSimpleTableSegments(), projectionsSegment, groupByContext, new OrderByContext(Collections.emptyList(), false));\n        assertNotNull(actual);\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/segment/select/projection/engine/ProjectionsContextEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"M"}],"commitId":"bfb784c9a0e47fd147c8a654c2f0b2a1e86c2c27","commitMessage":"@@@extract SchemaAvailable interface & add validate for SelectStatement (#11091)\n\n* refactor SchemaAvailable interface & add validate for SelectStatement\n\n* add final for InsertStatementContext field\n\n* fix test case error\n\n* fix rewrite test case error\n\n* refactor context new instance method\n\n* optimize test case\n\n* fix test case\n\n* optimize logic\n\n* fix test case\n\n* fix checkstyle","date":"2021-07-02 20:44:49","modifiedFileCount":"44","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-08-24 14:50:51","codes":[{"authorDate":"2021-08-24 14:50:51","commitOrder":5,"curCode":"    private void assertCreateProjectionsContextWithTemporaryTable(final SelectStatement selectStatement, final SelectStatement subquerySelectStatement) {\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        ShorthandProjectionSegment projectionSegment = new ShorthandProjectionSegment(0, 0);\n        projectionSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"d\")));\n        projectionsSegment.getProjections().addAll(Collections.singletonList(projectionSegment));\n        selectStatement.setProjections(projectionsSegment);\n        subquerySelectStatement.setProjections(new ProjectionsSegment(0, 0));\n        SubqueryTableSegment subqueryTableSegment = new SubqueryTableSegment(new SubquerySegment(0, 0, subquerySelectStatement));\n        subqueryTableSegment.setAlias(new AliasSegment(0, 0, new IdentifierValue(\"d\")));\n        selectStatement.setFrom(subqueryTableSegment);\n        ColumnSegment columnSegment = new ColumnSegment(0, 0, new IdentifierValue(\"name\"));\n        columnSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"d\")));\n        OrderByItem groupByItem = new OrderByItem(new ColumnOrderByItemSegment(columnSegment, OrderDirection.ASC));\n        GroupByContext groupByContext = new GroupByContext(Collections.singleton(groupByItem));\n        SelectStatementContext selectStatementContext = createSelectStatementContext(selectStatement);\n        ProjectionsContext actual = new ProjectionsContextEngine(schema, selectStatementContext.getDatabaseType())\n                .createProjectionsContext(selectStatementContext.getFromSimpleTableSegments(), projectionsSegment, groupByContext, new OrderByContext(Collections.emptyList(), false));\n        assertNotNull(actual);\n    }\n","date":"2021-08-24 14:50:51","endLine":410,"groupId":"10666","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertCreateProjectionsContextWithTemporaryTable","params":"(finalSelectStatementselectStatement@finalSelectStatementsubquerySelectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a1/d56216e990aaef846ff15e734eb23f391aa98c.src","preCode":"    private void assertCreateProjectionsContextWithTemporaryTable(final SelectStatement selectStatement, final SelectStatement subquerySelectStatement) {\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        ShorthandProjectionSegment projectionSegment = new ShorthandProjectionSegment(0, 0);\n        projectionSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"d\")));\n        projectionsSegment.getProjections().addAll(Collections.singletonList(projectionSegment));\n        selectStatement.setProjections(projectionsSegment);\n        subquerySelectStatement.setProjections(new ProjectionsSegment(0, 0));\n        SubqueryTableSegment subqueryTableSegment = new SubqueryTableSegment(new SubquerySegment(0, 0, subquerySelectStatement));\n        subqueryTableSegment.setAlias(new AliasSegment(0, 0, new IdentifierValue(\"d\")));\n        selectStatement.setFrom(subqueryTableSegment);\n        ColumnSegment columnSegment = new ColumnSegment(0, 0, new IdentifierValue(\"name\"));\n        columnSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"d\")));\n        OrderByItem groupByItem = new OrderByItem(new ColumnOrderByItemSegment(columnSegment, OrderDirection.ASC));\n        GroupByContext groupByContext = new GroupByContext(Collections.singleton(groupByItem));\n        SelectStatementContext selectStatementContext = createSelectStatementContext(selectStatement);\n        ProjectionsContext actual = new ProjectionsContextEngine(schema)\n                .createProjectionsContext(selectStatementContext.getFromSimpleTableSegments(), projectionsSegment, groupByContext, new OrderByContext(Collections.emptyList(), false));\n        assertNotNull(actual);\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/segment/select/projection/engine/ProjectionsContextEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"M"},{"authorDate":"2021-08-24 14:50:51","commitOrder":5,"curCode":"    private void assertCreateProjectionsContextWhenTableNameOrAliasIgnoreCase(final SelectStatement selectStatement, final SelectStatement subquerySelectStatement) {\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        ShorthandProjectionSegment projectionSegment = new ShorthandProjectionSegment(0, 0);\n        projectionSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"table\")));\n        projectionsSegment.getProjections().addAll(Collections.singletonList(projectionSegment));\n        selectStatement.setProjections(projectionsSegment);\n        subquerySelectStatement.setProjections(new ProjectionsSegment(0, 0));\n        SubqueryTableSegment subqueryTableSegment = new SubqueryTableSegment(new SubquerySegment(0, 0, subquerySelectStatement));\n        subqueryTableSegment.setAlias(new AliasSegment(0, 0, new IdentifierValue(\"TABLE\")));\n        selectStatement.setFrom(subqueryTableSegment);\n        ColumnSegment columnSegment = new ColumnSegment(0, 0, new IdentifierValue(\"name\"));\n        columnSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"TAble\")));\n        OrderByItem groupByItem = new OrderByItem(new ColumnOrderByItemSegment(columnSegment, OrderDirection.ASC));\n        GroupByContext groupByContext = new GroupByContext(Collections.singleton(groupByItem));\n        SelectStatementContext selectStatementContext = createSelectStatementContext(selectStatement);\n        ProjectionsContext actual = new ProjectionsContextEngine(schema, selectStatementContext.getDatabaseType())\n                .createProjectionsContext(selectStatementContext.getFromSimpleTableSegments(), projectionsSegment, groupByContext, new OrderByContext(Collections.emptyList(), false));\n        assertNotNull(actual);\n    }\n","date":"2021-08-24 14:50:51","endLine":455,"groupId":"10667","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertCreateProjectionsContextWhenTableNameOrAliasIgnoreCase","params":"(finalSelectStatementselectStatement@finalSelectStatementsubquerySelectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a1/d56216e990aaef846ff15e734eb23f391aa98c.src","preCode":"    private void assertCreateProjectionsContextWhenTableNameOrAliasIgnoreCase(final SelectStatement selectStatement, final SelectStatement subquerySelectStatement) {\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        ShorthandProjectionSegment projectionSegment = new ShorthandProjectionSegment(0, 0);\n        projectionSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"table\")));\n        projectionsSegment.getProjections().addAll(Collections.singletonList(projectionSegment));\n        selectStatement.setProjections(projectionsSegment);\n        subquerySelectStatement.setProjections(new ProjectionsSegment(0, 0));\n        SubqueryTableSegment subqueryTableSegment = new SubqueryTableSegment(new SubquerySegment(0, 0, subquerySelectStatement));\n        subqueryTableSegment.setAlias(new AliasSegment(0, 0, new IdentifierValue(\"TABLE\")));\n        selectStatement.setFrom(subqueryTableSegment);\n        ColumnSegment columnSegment = new ColumnSegment(0, 0, new IdentifierValue(\"name\"));\n        columnSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"TAble\")));\n        OrderByItem groupByItem = new OrderByItem(new ColumnOrderByItemSegment(columnSegment, OrderDirection.ASC));\n        GroupByContext groupByContext = new GroupByContext(Collections.singleton(groupByItem));\n        SelectStatementContext selectStatementContext = createSelectStatementContext(selectStatement);\n        ProjectionsContext actual = new ProjectionsContextEngine(schema)\n                .createProjectionsContext(selectStatementContext.getFromSimpleTableSegments(), projectionsSegment, groupByContext, new OrderByContext(Collections.emptyList(), false));\n        assertNotNull(actual);\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/segment/select/projection/engine/ProjectionsContextEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":437,"status":"M"}],"commitId":"ed71fb20f3fce018a38da050a9a6f68b9df16229","commitMessage":"@@@fix mysql & pg aggregation function set index error (#11971)\n\n* fix mysql & pg aggregation function set index error\n\n* add integrate test case\n\n* fix checkstyle\n\n* optimze code\n\n* fix test case\n\n* remove useless logic\n\n* remove useless logic\n\n* fix checkstyle\n\n* fix typo","date":"2021-08-24 14:50:51","modifiedFileCount":"11","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-09-05 14:15:46","codes":[{"authorDate":"2021-09-05 14:15:46","commitOrder":6,"curCode":"    private void assertCreateProjectionsContextWithTemporaryTable(final SelectStatement selectStatement, final SelectStatement subquerySelectStatement) {\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        ShorthandProjectionSegment projectionSegment = new ShorthandProjectionSegment(0, 0);\n        projectionSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"d\")));\n        projectionsSegment.getProjections().addAll(Collections.singletonList(projectionSegment));\n        selectStatement.setProjections(projectionsSegment);\n        subquerySelectStatement.setProjections(new ProjectionsSegment(0, 0));\n        SubqueryTableSegment subqueryTableSegment = new SubqueryTableSegment(new SubquerySegment(0, 0, subquerySelectStatement));\n        subqueryTableSegment.setAlias(new AliasSegment(0, 0, new IdentifierValue(\"d\")));\n        selectStatement.setFrom(subqueryTableSegment);\n        ColumnSegment columnSegment = new ColumnSegment(0, 0, new IdentifierValue(\"name\"));\n        columnSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"d\")));\n        OrderByItem groupByItem = new OrderByItem(new ColumnOrderByItemSegment(columnSegment, OrderDirection.ASC));\n        GroupByContext groupByContext = new GroupByContext(Collections.singleton(groupByItem));\n        SelectStatementContext selectStatementContext = createSelectStatementContext(selectStatement);\n        ProjectionsContext actual = new ProjectionsContextEngine(schema, selectStatementContext.getDatabaseType())\n                .createProjectionsContext(selectStatement.getFrom(), projectionsSegment, groupByContext, new OrderByContext(Collections.emptyList(), false));\n        assertNotNull(actual);\n    }\n","date":"2021-09-05 14:15:46","endLine":402,"groupId":"101758","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"assertCreateProjectionsContextWithTemporaryTable","params":"(finalSelectStatementselectStatement@finalSelectStatementsubquerySelectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9e/426640c4bd054f8254a4cb7dd0a4d1b28a4ba8.src","preCode":"    private void assertCreateProjectionsContextWithTemporaryTable(final SelectStatement selectStatement, final SelectStatement subquerySelectStatement) {\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        ShorthandProjectionSegment projectionSegment = new ShorthandProjectionSegment(0, 0);\n        projectionSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"d\")));\n        projectionsSegment.getProjections().addAll(Collections.singletonList(projectionSegment));\n        selectStatement.setProjections(projectionsSegment);\n        subquerySelectStatement.setProjections(new ProjectionsSegment(0, 0));\n        SubqueryTableSegment subqueryTableSegment = new SubqueryTableSegment(new SubquerySegment(0, 0, subquerySelectStatement));\n        subqueryTableSegment.setAlias(new AliasSegment(0, 0, new IdentifierValue(\"d\")));\n        selectStatement.setFrom(subqueryTableSegment);\n        ColumnSegment columnSegment = new ColumnSegment(0, 0, new IdentifierValue(\"name\"));\n        columnSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"d\")));\n        OrderByItem groupByItem = new OrderByItem(new ColumnOrderByItemSegment(columnSegment, OrderDirection.ASC));\n        GroupByContext groupByContext = new GroupByContext(Collections.singleton(groupByItem));\n        SelectStatementContext selectStatementContext = createSelectStatementContext(selectStatement);\n        ProjectionsContext actual = new ProjectionsContextEngine(schema, selectStatementContext.getDatabaseType())\n                .createProjectionsContext(selectStatementContext.getFromSimpleTableSegments(), projectionsSegment, groupByContext, new OrderByContext(Collections.emptyList(), false));\n        assertNotNull(actual);\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/segment/select/projection/engine/ProjectionsContextEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"},{"authorDate":"2021-09-05 14:15:46","commitOrder":6,"curCode":"    private void assertCreateProjectionsContextWhenTableNameOrAliasIgnoreCase(final SelectStatement selectStatement, final SelectStatement subquerySelectStatement) {\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        ShorthandProjectionSegment projectionSegment = new ShorthandProjectionSegment(0, 0);\n        projectionSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"table\")));\n        projectionsSegment.getProjections().addAll(Collections.singletonList(projectionSegment));\n        selectStatement.setProjections(projectionsSegment);\n        subquerySelectStatement.setProjections(new ProjectionsSegment(0, 0));\n        SubqueryTableSegment subqueryTableSegment = new SubqueryTableSegment(new SubquerySegment(0, 0, subquerySelectStatement));\n        subqueryTableSegment.setAlias(new AliasSegment(0, 0, new IdentifierValue(\"TABLE\")));\n        selectStatement.setFrom(subqueryTableSegment);\n        ColumnSegment columnSegment = new ColumnSegment(0, 0, new IdentifierValue(\"name\"));\n        columnSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"TAble\")));\n        OrderByItem groupByItem = new OrderByItem(new ColumnOrderByItemSegment(columnSegment, OrderDirection.ASC));\n        GroupByContext groupByContext = new GroupByContext(Collections.singleton(groupByItem));\n        SelectStatementContext selectStatementContext = createSelectStatementContext(selectStatement);\n        ProjectionsContext actual = new ProjectionsContextEngine(schema, selectStatementContext.getDatabaseType())\n                .createProjectionsContext(selectStatement.getFrom(), projectionsSegment, groupByContext, new OrderByContext(Collections.emptyList(), false));\n        assertNotNull(actual);\n    }\n","date":"2021-09-05 14:15:46","endLine":447,"groupId":"101758","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"assertCreateProjectionsContextWhenTableNameOrAliasIgnoreCase","params":"(finalSelectStatementselectStatement@finalSelectStatementsubquerySelectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9e/426640c4bd054f8254a4cb7dd0a4d1b28a4ba8.src","preCode":"    private void assertCreateProjectionsContextWhenTableNameOrAliasIgnoreCase(final SelectStatement selectStatement, final SelectStatement subquerySelectStatement) {\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        ShorthandProjectionSegment projectionSegment = new ShorthandProjectionSegment(0, 0);\n        projectionSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"table\")));\n        projectionsSegment.getProjections().addAll(Collections.singletonList(projectionSegment));\n        selectStatement.setProjections(projectionsSegment);\n        subquerySelectStatement.setProjections(new ProjectionsSegment(0, 0));\n        SubqueryTableSegment subqueryTableSegment = new SubqueryTableSegment(new SubquerySegment(0, 0, subquerySelectStatement));\n        subqueryTableSegment.setAlias(new AliasSegment(0, 0, new IdentifierValue(\"TABLE\")));\n        selectStatement.setFrom(subqueryTableSegment);\n        ColumnSegment columnSegment = new ColumnSegment(0, 0, new IdentifierValue(\"name\"));\n        columnSegment.setOwner(new OwnerSegment(0, 0, new IdentifierValue(\"TAble\")));\n        OrderByItem groupByItem = new OrderByItem(new ColumnOrderByItemSegment(columnSegment, OrderDirection.ASC));\n        GroupByContext groupByContext = new GroupByContext(Collections.singleton(groupByItem));\n        SelectStatementContext selectStatementContext = createSelectStatementContext(selectStatement);\n        ProjectionsContext actual = new ProjectionsContextEngine(schema, selectStatementContext.getDatabaseType())\n                .createProjectionsContext(selectStatementContext.getFromSimpleTableSegments(), projectionsSegment, groupByContext, new OrderByContext(Collections.emptyList(), false));\n        assertNotNull(actual);\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/segment/select/projection/engine/ProjectionsContextEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":429,"status":"M"}],"commitId":"499fc0b734066b1a65a5a28d460fa7d7bc764bf6","commitMessage":"@@@fix oracle pagination wrong result (#12199)\n\n* fix oracle pagination wrong result\n\n* optimize logic\n\n* optimize logic","date":"2021-09-05 14:15:46","modifiedFileCount":"13","status":"M","submitter":"Zhengqiang Duan"}]
