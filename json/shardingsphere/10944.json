[{"authorTime":"2020-11-30 21:51:39","codes":[{"authorDate":"2020-12-29 20:21:22","commitOrder":2,"curCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, \"int\", true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(dataSourcesMetaData.getDataSourceMetaData(\"ds_0\")).thenReturn(mock(DataSourceMetaData.class));\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","date":"2020-12-29 20:21:22","endLine":130,"groupId":"5183","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createMetaData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/44/3afb2525e8a1e7ac277d78d838007323966156.src","preCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, \"int\", true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(dataSourcesMetaData.getDataSourceMetaData(\"ds_0\")).thenReturn(mock(DataSourceMetaData.class));\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/DatabaseCommunicationEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"},{"authorDate":"2020-11-30 21:51:39","commitOrder":2,"curCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, \"int\", true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(dataSourcesMetaData.getDataSourceMetaData(\"ds_0\")).thenReturn(mock(DataSourceMetaData.class));\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","date":"2020-11-30 21:51:39","endLine":141,"groupId":"5183","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createMetaData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/68/eb354b14ec8924b4ddc9f2d7dfce0683c534a4.src","preCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, \"int\", true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(dataSourcesMetaData.getDataSourceMetaData(\"ds_0\")).thenReturn(mock(DataSourceMetaData.class));\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/response/header/query/impl/QueryHeaderBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"NB"}],"commitId":"91ad64e00d152216460d6f79fff5233662e9589e","commitMessage":"@@@Fixed an index out-of-bounds exception when useServerPrepStmts was enabled to get the query response row set (#8810)\n\n","date":"2020-12-29 20:21:22","modifiedFileCount":"1","status":"M","submitter":"AlphaPo"},{"authorTime":"2021-03-11 20:46:43","codes":[{"authorDate":"2021-03-11 20:46:43","commitOrder":3,"curCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(dataSourcesMetaData.getDataSourceMetaData(\"ds_0\")).thenReturn(mock(DataSourceMetaData.class));\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","date":"2021-03-11 20:46:43","endLine":127,"groupId":"5183","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createMetaData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7e/8c144a3f569f14f21981b9110097aed85187a8.src","preCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, \"int\", true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(dataSourcesMetaData.getDataSourceMetaData(\"ds_0\")).thenReturn(mock(DataSourceMetaData.class));\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/DatabaseCommunicationEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2021-03-11 20:46:43","commitOrder":3,"curCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(dataSourcesMetaData.getDataSourceMetaData(\"ds_0\")).thenReturn(mock(DataSourceMetaData.class));\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","date":"2021-03-11 20:46:43","endLine":141,"groupId":"5183","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createMetaData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/40/b90f11c35536e5d7562124e72103d44a24e6e5.src","preCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, \"int\", true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(dataSourcesMetaData.getDataSourceMetaData(\"ds_0\")).thenReturn(mock(DataSourceMetaData.class));\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/response/header/query/impl/QueryHeaderBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"572219c6ee172348d09bf52ebb43cb5e7a96ef3e","commitMessage":"@@@Merge pull request #9639 from terrymanu/dev\n\nRemove ColumnMetaData.dataTypeName","date":"2021-03-11 20:46:43","modifiedFileCount":"25","status":"M","submitter":"Zhang Yonglun"},{"authorTime":"2021-03-11 20:46:43","codes":[{"authorDate":"2021-06-23 18:27:05","commitOrder":4,"curCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","date":"2021-06-23 18:27:05","endLine":146,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createMetaData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e2/768a480c312f6d3e1fa6662dd97371b8033526.src","preCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(dataSourcesMetaData.getDataSourceMetaData(\"ds_0\")).thenReturn(mock(DataSourceMetaData.class));\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/DatabaseCommunicationEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2021-03-11 20:46:43","commitOrder":4,"curCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(dataSourcesMetaData.getDataSourceMetaData(\"ds_0\")).thenReturn(mock(DataSourceMetaData.class));\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","date":"2021-03-11 20:46:43","endLine":141,"groupId":"5183","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createMetaData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/40/b90f11c35536e5d7562124e72103d44a24e6e5.src","preCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(dataSourcesMetaData.getDataSourceMetaData(\"ds_0\")).thenReturn(mock(DataSourceMetaData.class));\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/response/header/query/impl/QueryHeaderBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"N"}],"commitId":"ba6414447a80ac5a98a2ac30464b1964b6d7c5b4","commitMessage":"@@@Move cached statements and result sets into DatabaseCommunicationEngine (#10932)\n\n* Move cached statements and result sets into DatabaseCommunicationEngine\n\n* Complete tests for DatabaseCommunicationEngine\n\n* Close TextProtocolBackendHandler correctly\n\n* Add DatabaseCommunicationEngine to BackendConnection","date":"2021-06-23 18:27:05","modifiedFileCount":"22","status":"M","submitter":"???"},{"authorTime":"2021-07-01 11:29:35","codes":[{"authorDate":"2021-07-01 11:29:35","commitOrder":5,"curCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(\"t_logic_order\", Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","date":"2021-07-01 11:29:35","endLine":155,"groupId":"3350","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createMetaData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3d/1a057891a27829e18df0db5f0b38dcc22caa4b.src","preCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/DatabaseCommunicationEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2021-07-01 11:29:35","commitOrder":5,"curCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(\"t_logic_order\", Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(dataSourcesMetaData.getDataSourceMetaData(\"ds_0\")).thenReturn(mock(DataSourceMetaData.class));\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","date":"2021-07-01 11:29:35","endLine":148,"groupId":"5183","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"createMetaData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0a/b35c171ff9fad4eaeb4ca2d59e596a7017b23f.src","preCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(dataSourcesMetaData.getDataSourceMetaData(\"ds_0\")).thenReturn(mock(DataSourceMetaData.class));\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/response/header/query/impl/QueryHeaderBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"e560dc4352de5abc7caf4fbdc03b747985508961","commitMessage":"@@@improve code for #10840 (#11028)\n\n* improve code style for 10678\n\n* Remove unnecessary submitted code.\n\n* improve code\n\n* improve code\n\n* improve code for 10678","date":"2021-07-01 11:29:35","modifiedFileCount":"61","status":"M","submitter":"totalo"},{"authorTime":"2021-07-01 11:29:35","codes":[{"authorDate":"2021-07-27 07:22:30","commitOrder":6,"curCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, true, false, false);\n        when(result.getSchema().get(\"t_logic_order\")).thenReturn(\n                new TableMetaData(\"t_logic_order\", Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","date":"2021-07-27 07:22:30","endLine":150,"groupId":"10944","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createMetaData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/79/2f3f06fb5ab0b9c6cf47bd9fadec988dac4696.src","preCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(\"t_logic_order\", Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/DatabaseCommunicationEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2021-07-01 11:29:35","commitOrder":6,"curCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(\"t_logic_order\", Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(dataSourcesMetaData.getDataSourceMetaData(\"ds_0\")).thenReturn(mock(DataSourceMetaData.class));\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","date":"2021-07-01 11:29:35","endLine":148,"groupId":"10944","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"createMetaData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0a/b35c171ff9fad4eaeb4ca2d59e596a7017b23f.src","preCode":"    private ShardingSphereMetaData createMetaData() {\n        ShardingSphereMetaData result = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", Types.INTEGER, true, false, false);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        when(schema.get(\"t_logic_order\")).thenReturn(new TableMetaData(\"t_logic_order\", Collections.singletonList(columnMetaData), Collections.singletonList(new IndexMetaData(\"order_id\"))));\n        DataSourcesMetaData dataSourcesMetaData = mock(DataSourcesMetaData.class);\n        when(dataSourcesMetaData.getDataSourceMetaData(\"ds_0\")).thenReturn(mock(DataSourceMetaData.class));\n        when(result.getResource().getDataSourcesMetaData()).thenReturn(dataSourcesMetaData);\n        when(result.getSchema()).thenReturn(schema);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        when(shardingRule.findLogicTableByActualTable(\"t_order\")).thenReturn(Optional.of(\"t_logic_order\"));\n        when(result.getRuleMetaData().getRules()).thenReturn(Collections.singletonList(shardingRule));\n        when(result.getName()).thenReturn(\"sharding_schema\");\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/response/header/query/impl/QueryHeaderBuilderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"N"}],"commitId":"6d7e3fe33533f8d8dd098e81d667ce57aabd625a","commitMessage":"@@@Use raw new HashMap to instead of guava (#11517)\n\n* Use raw new HashMap to instead of guava\n\n* Use raw new HashMap to instead of guava","date":"2021-07-27 07:22:30","modifiedFileCount":"69","status":"M","submitter":"Liang Zhang"}]
