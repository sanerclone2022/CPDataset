[{"authorTime":"2021-06-22 13:27:58","codes":[{"authorDate":"2021-06-22 13:27:58","commitOrder":1,"curCode":"    public void assertExecuteDataSourcesContext() throws SQLException {\n        BackendConnection connection = mock(BackendConnection.class);\n        when(connection.getSchemaName()).thenReturn(\"schema\");\n        try {\n            RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AddResourceStatement.class), connection);\n        } catch (final SQLException ex) {\n            assertThat(ex.getMessage(), is(\"No Registry center to execute `AddResourceStatement` SQL\"));\n        }\n        setGovernanceMetaDataContexts(true);\n        Optional<TextProtocolBackendHandler> rdlBackendHandler = RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AddResourceStatement.class), connection);\n        assertTrue(rdlBackendHandler.isPresent());\n        ResponseHeader response = rdlBackendHandler.get().execute();\n        assertThat(response, instanceOf(UpdateResponseHeader.class));\n    }\n","date":"2021-06-22 13:27:58","endLine":180,"groupId":"8612","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteDataSourcesContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/28/d9275847b53c570fde7cd93fb3541ce1177bca.src","preCode":"    public void assertExecuteDataSourcesContext() throws SQLException {\n        BackendConnection connection = mock(BackendConnection.class);\n        when(connection.getSchemaName()).thenReturn(\"schema\");\n        try {\n            RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AddResourceStatement.class), connection);\n        } catch (final SQLException ex) {\n            assertThat(ex.getMessage(), is(\"No Registry center to execute `AddResourceStatement` SQL\"));\n        }\n        setGovernanceMetaDataContexts(true);\n        Optional<TextProtocolBackendHandler> rdlBackendHandler = RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AddResourceStatement.class), connection);\n        assertTrue(rdlBackendHandler.isPresent());\n        ResponseHeader response = rdlBackendHandler.get().execute();\n        assertThat(response, instanceOf(UpdateResponseHeader.class));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/distsql/DistSQLBackendHandlerFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"B"},{"authorDate":"2021-06-22 13:27:58","commitOrder":1,"curCode":"    public void assertExecuteAlterReadwriteSplittingRuleContext() throws SQLException {\n        BackendConnection connection = mock(BackendConnection.class);\n        when(connection.getSchemaName()).thenReturn(\"schema\");\n        try {\n            RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AlterReadwriteSplittingRuleStatement.class), connection);\n        } catch (final SQLException ex) {\n            assertThat(ex.getMessage(), is(\"No Registry center to execute `AlterReadwriteSplittingRuleStatement` SQL\"));\n        }\n        setGovernanceMetaDataContexts(true);\n        Optional<TextProtocolBackendHandler> rdlBackendHandler = RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AlterReadwriteSplittingRuleStatement.class), connection);\n        assertTrue(rdlBackendHandler.isPresent());\n        ResponseHeader response = rdlBackendHandler.get().execute();\n        assertThat(response, instanceOf(UpdateResponseHeader.class));\n    }\n","date":"2021-06-22 13:27:58","endLine":260,"groupId":"8612","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteAlterReadwriteSplittingRuleContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/28/d9275847b53c570fde7cd93fb3541ce1177bca.src","preCode":"    public void assertExecuteAlterReadwriteSplittingRuleContext() throws SQLException {\n        BackendConnection connection = mock(BackendConnection.class);\n        when(connection.getSchemaName()).thenReturn(\"schema\");\n        try {\n            RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AlterReadwriteSplittingRuleStatement.class), connection);\n        } catch (final SQLException ex) {\n            assertThat(ex.getMessage(), is(\"No Registry center to execute `AlterReadwriteSplittingRuleStatement` SQL\"));\n        }\n        setGovernanceMetaDataContexts(true);\n        Optional<TextProtocolBackendHandler> rdlBackendHandler = RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AlterReadwriteSplittingRuleStatement.class), connection);\n        assertTrue(rdlBackendHandler.isPresent());\n        ResponseHeader response = rdlBackendHandler.get().execute();\n        assertThat(response, instanceOf(UpdateResponseHeader.class));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/distsql/DistSQLBackendHandlerFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"B"}],"commitId":"5c6aa11a2a9cf9488a4447342616136513bb5b81","commitMessage":"@@@Rename RuleQueryResultSet to RQLResultSet (#10906)\n\n","date":"2021-06-22 13:27:58","modifiedFileCount":"11","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-06-29 21:48:56","codes":[{"authorDate":"2021-06-29 21:48:56","commitOrder":2,"curCode":"    public void assertExecuteDataSourcesContext() throws SQLException {\n        BackendConnection connection = mock(BackendConnection.class);\n        when(connection.getSchemaName()).thenReturn(\"schema\");\n        try {\n            RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AddResourceStatement.class), connection);\n        } catch (final SQLException ex) {\n            assertThat(ex.getMessage(), is(\"No Registry center to execute `AddResourceStatement` SQL\"));\n        }\n        setGovernanceMetaDataContexts(true);\n        ResponseHeader response = RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AddResourceStatement.class), connection).execute();\n        assertThat(response, instanceOf(UpdateResponseHeader.class));\n    }\n","date":"2021-06-29 21:48:56","endLine":172,"groupId":"10600","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteDataSourcesContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/37/cc99638c34d1aee3f7ac7c88466b92aeabab12.src","preCode":"    public void assertExecuteDataSourcesContext() throws SQLException {\n        BackendConnection connection = mock(BackendConnection.class);\n        when(connection.getSchemaName()).thenReturn(\"schema\");\n        try {\n            RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AddResourceStatement.class), connection);\n        } catch (final SQLException ex) {\n            assertThat(ex.getMessage(), is(\"No Registry center to execute `AddResourceStatement` SQL\"));\n        }\n        setGovernanceMetaDataContexts(true);\n        Optional<TextProtocolBackendHandler> rdlBackendHandler = RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AddResourceStatement.class), connection);\n        assertTrue(rdlBackendHandler.isPresent());\n        ResponseHeader response = rdlBackendHandler.get().execute();\n        assertThat(response, instanceOf(UpdateResponseHeader.class));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/distsql/DistSQLBackendHandlerFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2021-06-29 21:48:56","commitOrder":2,"curCode":"    public void assertExecuteAlterReadwriteSplittingRuleContext() throws SQLException {\n        BackendConnection connection = mock(BackendConnection.class);\n        when(connection.getSchemaName()).thenReturn(\"schema\");\n        try {\n            RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AlterReadwriteSplittingRuleStatement.class), connection);\n        } catch (final SQLException ex) {\n            assertThat(ex.getMessage(), is(\"No Registry center to execute `AlterReadwriteSplittingRuleStatement` SQL\"));\n        }\n        setGovernanceMetaDataContexts(true);\n        ResponseHeader response = RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AlterReadwriteSplittingRuleStatement.class), connection).execute();\n        assertThat(response, instanceOf(UpdateResponseHeader.class));\n    }\n","date":"2021-06-29 21:48:56","endLine":242,"groupId":"10600","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteAlterReadwriteSplittingRuleContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/37/cc99638c34d1aee3f7ac7c88466b92aeabab12.src","preCode":"    public void assertExecuteAlterReadwriteSplittingRuleContext() throws SQLException {\n        BackendConnection connection = mock(BackendConnection.class);\n        when(connection.getSchemaName()).thenReturn(\"schema\");\n        try {\n            RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AlterReadwriteSplittingRuleStatement.class), connection);\n        } catch (final SQLException ex) {\n            assertThat(ex.getMessage(), is(\"No Registry center to execute `AlterReadwriteSplittingRuleStatement` SQL\"));\n        }\n        setGovernanceMetaDataContexts(true);\n        Optional<TextProtocolBackendHandler> rdlBackendHandler = RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AlterReadwriteSplittingRuleStatement.class), connection);\n        assertTrue(rdlBackendHandler.isPresent());\n        ResponseHeader response = rdlBackendHandler.get().execute();\n        assertThat(response, instanceOf(UpdateResponseHeader.class));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/distsql/DistSQLBackendHandlerFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"}],"commitId":"38a9175d648543c2cb47017f78dec2ed4eaa376d","commitMessage":"@@@Refactor RDLBackendHandlerFactory (#11062)\n\n","date":"2021-06-29 21:48:56","modifiedFileCount":"3","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-15 02:33:31","codes":[{"authorDate":"2021-08-15 02:33:31","commitOrder":3,"curCode":"    public void assertExecuteDataSourcesContext() throws SQLException {\n        BackendConnection connection = mock(BackendConnection.class);\n        when(connection.getSchemaName()).thenReturn(\"schema\");\n        try {\n            RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AddResourceStatement.class), connection);\n        } catch (final SQLException ex) {\n            assertThat(ex.getMessage(), is(\"No Registry center to execute `AddResourceStatement` SQL\"));\n        }\n        setContextManager(true);\n        ResponseHeader response = RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AddResourceStatement.class), connection).execute();\n        assertThat(response, instanceOf(UpdateResponseHeader.class));\n    }\n","date":"2021-08-15 02:33:31","endLine":95,"groupId":"10972","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteDataSourcesContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4f/70e7a841df1abefcfa361c2b805d6ee20ecd4c.src","preCode":"    public void assertExecuteDataSourcesContext() throws SQLException {\n        BackendConnection connection = mock(BackendConnection.class);\n        when(connection.getSchemaName()).thenReturn(\"schema\");\n        try {\n            RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AddResourceStatement.class), connection);\n        } catch (final SQLException ex) {\n            assertThat(ex.getMessage(), is(\"No Registry center to execute `AddResourceStatement` SQL\"));\n        }\n        setGovernanceMetaDataContexts(true);\n        ResponseHeader response = RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AddResourceStatement.class), connection).execute();\n        assertThat(response, instanceOf(UpdateResponseHeader.class));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/distsql/DistSQLBackendHandlerFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2021-08-15 02:33:31","commitOrder":3,"curCode":"    public void assertExecuteAlterReadwriteSplittingRuleContext() throws SQLException {\n        BackendConnection connection = mock(BackendConnection.class);\n        when(connection.getSchemaName()).thenReturn(\"schema\");\n        try {\n            RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AlterReadwriteSplittingRuleStatement.class), connection);\n        } catch (final SQLException ex) {\n            assertThat(ex.getMessage(), is(\"No Registry center to execute `AlterReadwriteSplittingRuleStatement` SQL\"));\n        }\n        setContextManager(true);\n        ResponseHeader response = RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AlterReadwriteSplittingRuleStatement.class), connection).execute();\n        assertThat(response, instanceOf(UpdateResponseHeader.class));\n    }\n","date":"2021-08-15 02:33:31","endLine":165,"groupId":"10972","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteAlterReadwriteSplittingRuleContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4f/70e7a841df1abefcfa361c2b805d6ee20ecd4c.src","preCode":"    public void assertExecuteAlterReadwriteSplittingRuleContext() throws SQLException {\n        BackendConnection connection = mock(BackendConnection.class);\n        when(connection.getSchemaName()).thenReturn(\"schema\");\n        try {\n            RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AlterReadwriteSplittingRuleStatement.class), connection);\n        } catch (final SQLException ex) {\n            assertThat(ex.getMessage(), is(\"No Registry center to execute `AlterReadwriteSplittingRuleStatement` SQL\"));\n        }\n        setGovernanceMetaDataContexts(true);\n        ResponseHeader response = RDLBackendHandlerFactory.newInstance(new MySQLDatabaseType(), mock(AlterReadwriteSplittingRuleStatement.class), connection).execute();\n        assertThat(response, instanceOf(UpdateResponseHeader.class));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/distsql/DistSQLBackendHandlerFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"}],"commitId":"d6e424ba68c64ea1835a42b0f4b0fb7f69c95323","commitMessage":"@@@Add ContextManager (#11822)\n\n* Add ContextManager\n\n* Use ContextManager on GovernanceShardingSphereDataSource\n\n* Use ContextManager on ShardingSphereDataSource\n\n* Use ContextManager on ShardingSphereConnection\n\n* Use ContextManager on ShardingSphereConnection\n\n* Refactor AbstractBaseExecutorTest\n\n* Use ContextManager on proxy\n\n* Fix test case","date":"2021-08-15 02:33:31","modifiedFileCount":"118","status":"M","submitter":"Liang Zhang"}]
