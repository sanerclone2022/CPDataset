[{"authorTime":"2020-04-21 18:46:05","codes":[{"authorDate":"2020-04-21 18:46:05","commitOrder":1,"curCode":"    public Collection<String> doSharding(final Collection<String> tableNames, final RangeShardingValue<Long> shardingValue) {\n        Set<String> result = new LinkedHashSet<>();\n        if (Range.closed(200000000000000000L, 400000000000000000L).encloses(shardingValue.getValueRange())) {\n            for (String each : tableNames) {\n                if (each.endsWith(\"0\")) {\n                    result.add(each);\n                }\n            }\n        } else {\n            throw new UnsupportedOperationException();\n        }\n        return result;\n    }\n","date":"2020-04-21 18:46:05","endLine":55,"groupId":"3329","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doSharding","params":"(finalCollection<String>tableNames@finalRangeShardingValue<Long>shardingValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/20/1bfc33c1625b8486ddc19203184bc5318af2a8.src","preCode":"    public Collection<String> doSharding(final Collection<String> tableNames, final RangeShardingValue<Long> shardingValue) {\n        Set<String> result = new LinkedHashSet<>();\n        if (Range.closed(200000000000000000L, 400000000000000000L).encloses(shardingValue.getValueRange())) {\n            for (String each : tableNames) {\n                if (each.endsWith(\"0\")) {\n                    result.add(each);\n                }\n            }\n        } else {\n            throw new UnsupportedOperationException();\n        }\n        return result;\n    }\n","realPath":"examples/example-core/config-utility/src/main/java/org/apache/shardingsphere/example/algorithm/StandardModuloShardingTableAlgorithm.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"B"},{"authorDate":"2020-04-21 18:46:05","commitOrder":1,"curCode":"    public Collection<String> doSharding(final Collection<String> databaseNames, final RangeShardingValue<Integer> shardingValueRange) {\n        Set<String> result = new LinkedHashSet<>();\n        if (Range.closed(1, 5).encloses(shardingValueRange.getValueRange())) {\n            for (String each : databaseNames) {\n                if (each.endsWith(\"0\")) {\n                    result.add(each);\n                }\n            }\n        } else if (Range.closed(6, 10).encloses(shardingValueRange.getValueRange())) {\n            for (String each : databaseNames) {\n                if (each.endsWith(\"1\")) {\n                    result.add(each);\n                }\n            }\n        } else if (Range.closed(1, 10).encloses(shardingValueRange.getValueRange())) {\n            result.addAll(databaseNames);\n        } else {\n            throw new UnsupportedOperationException();\n        }\n        return result;\n    }\n","date":"2020-04-21 18:46:05","endLine":63,"groupId":"3329","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doSharding","params":"(finalCollection<String>databaseNames@finalRangeShardingValue<Integer>shardingValueRange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d2/e7c793bc0ad86cd147160e5bf1bad8160265e2.src","preCode":"    public Collection<String> doSharding(final Collection<String> databaseNames, final RangeShardingValue<Integer> shardingValueRange) {\n        Set<String> result = new LinkedHashSet<>();\n        if (Range.closed(1, 5).encloses(shardingValueRange.getValueRange())) {\n            for (String each : databaseNames) {\n                if (each.endsWith(\"0\")) {\n                    result.add(each);\n                }\n            }\n        } else if (Range.closed(6, 10).encloses(shardingValueRange.getValueRange())) {\n            for (String each : databaseNames) {\n                if (each.endsWith(\"1\")) {\n                    result.add(each);\n                }\n            }\n        } else if (Range.closed(1, 10).encloses(shardingValueRange.getValueRange())) {\n            result.addAll(databaseNames);\n        } else {\n            throw new UnsupportedOperationException();\n        }\n        return result;\n    }\n","realPath":"examples/example-core/config-utility/src/main/java/org/apache/shardingsphere/example/algorithm/StandardModuloShardingDatabaseAlgorithm.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"B"}],"commitId":"b74b61d94233690b89f64dd3288c20d82c6883c3","commitMessage":"@@@Update examples with new Sharding API (#5251)\n\n","date":"2020-04-21 18:46:05","modifiedFileCount":"15","status":"B","submitter":"Juan Pan(Trista)"},{"authorTime":"2020-09-17 08:59:11","codes":[{"authorDate":"2020-09-17 08:59:11","commitOrder":2,"curCode":"    public Collection<String> doSharding(final Collection<String> tableNames, final RangeShardingValue<Long> shardingValue) {\n        Set<String> result = new LinkedHashSet<>();\n        if (Range.closed(200000000000000000L, 400000000000000000L).encloses(shardingValue.getValueRange())) {\n            for (String each : tableNames) {\n                if (each.endsWith(\"0\")) {\n                    result.add(each);\n                }\n            }\n        } else {\n            throw new UnsupportedOperationException(\"\");\n        }\n        return result;\n    }\n","date":"2020-09-17 08:59:11","endLine":61,"groupId":"1072","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doSharding","params":"(finalCollection<String>tableNames@finalRangeShardingValue<Long>shardingValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f4/91638c15377b7d9bc994f08971b3196cd49f37.src","preCode":"    public Collection<String> doSharding(final Collection<String> tableNames, final RangeShardingValue<Long> shardingValue) {\n        Set<String> result = new LinkedHashSet<>();\n        if (Range.closed(200000000000000000L, 400000000000000000L).encloses(shardingValue.getValueRange())) {\n            for (String each : tableNames) {\n                if (each.endsWith(\"0\")) {\n                    result.add(each);\n                }\n            }\n        } else {\n            throw new UnsupportedOperationException();\n        }\n        return result;\n    }\n","realPath":"examples/example-core/config-utility/src/main/java/org/apache/shardingsphere/example/algorithm/StandardModuloShardingTableAlgorithm.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2020-09-17 08:59:11","commitOrder":2,"curCode":"    public Collection<String> doSharding(final Collection<String> databaseNames, final RangeShardingValue<Integer> shardingValueRange) {\n        Set<String> result = new LinkedHashSet<>();\n        if (Range.closed(1, 5).encloses(shardingValueRange.getValueRange())) {\n            for (String each : databaseNames) {\n                if (each.endsWith(\"0\")) {\n                    result.add(each);\n                }\n            }\n        } else if (Range.closed(6, 10).encloses(shardingValueRange.getValueRange())) {\n            for (String each : databaseNames) {\n                if (each.endsWith(\"1\")) {\n                    result.add(each);\n                }\n            }\n        } else if (Range.closed(1, 10).encloses(shardingValueRange.getValueRange())) {\n            result.addAll(databaseNames);\n        } else {\n            throw new UnsupportedOperationException(\"\");\n        }\n        return result;\n    }\n","date":"2020-09-17 08:59:11","endLine":69,"groupId":"1072","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doSharding","params":"(finalCollection<String>databaseNames@finalRangeShardingValue<Integer>shardingValueRange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/98/e1f1a9c0658d3d9f918beca94f3025578eed09.src","preCode":"    public Collection<String> doSharding(final Collection<String> databaseNames, final RangeShardingValue<Integer> shardingValueRange) {\n        Set<String> result = new LinkedHashSet<>();\n        if (Range.closed(1, 5).encloses(shardingValueRange.getValueRange())) {\n            for (String each : databaseNames) {\n                if (each.endsWith(\"0\")) {\n                    result.add(each);\n                }\n            }\n        } else if (Range.closed(6, 10).encloses(shardingValueRange.getValueRange())) {\n            for (String each : databaseNames) {\n                if (each.endsWith(\"1\")) {\n                    result.add(each);\n                }\n            }\n        } else if (Range.closed(1, 10).encloses(shardingValueRange.getValueRange())) {\n            result.addAll(databaseNames);\n        } else {\n            throw new UnsupportedOperationException();\n        }\n        return result;\n    }\n","realPath":"examples/example-core/config-utility/src/main/java/org/apache/shardingsphere/example/algorithm/StandardModuloShardingDatabaseAlgorithm.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"e8297b02c37bfbfb188ee8f4af9ad7a6b78a1ce2","commitMessage":"@@@For checkstyle (#7495)\n\n* For checkstyle\n\n* Remove redundant suppression\n\n* For checkstyle\n\n* For checkstyle\n\n* For checkstyle\n\n* For checkstyle\n\n* For checkstyle\n\n* For checkstyle\n\n* For checkstyle\n\n* Add final for classes which not design for extension\n\n* Rename return value to result\n\n* Rename exception variable name","date":"2020-09-17 08:59:11","modifiedFileCount":"139","status":"M","submitter":"Liang Zhang"}]
