[{"authorTime":"2021-01-29 16:12:35","codes":[{"authorDate":"2021-01-29 16:12:35","commitOrder":2,"curCode":"    private Collection<ExecuteResult> rawExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, final int maxConnectionsSizePerQuery) throws SQLException {\n        RawExecutionPrepareEngine prepareEngine = new RawExecutionPrepareEngine(maxConnectionsSizePerQuery, rules);\n        Collection<ExecutionGroup<RawSQLExecutionUnit>> executionGroups;\n        try {\n            executionGroups = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        \r\n        return rawExecutor.execute(executionGroups, new RawSQLExecutorCallback());\n    }\n","date":"2021-01-29 16:12:35","endLine":136,"groupId":"5550","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"rawExecute","params":"(finalExecutionContextexecutionContext@finalCollection<ShardingSphereRule>rules@finalintmaxConnectionsSizePerQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1e/53dcf7a5abb77fadbd19edab244006a1af5c1b.src","preCode":"    private Collection<ExecuteResult> rawExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, final int maxConnectionsSizePerQuery) throws SQLException {\n        RawExecutionPrepareEngine prepareEngine = new RawExecutionPrepareEngine(maxConnectionsSizePerQuery, rules);\n        Collection<ExecutionGroup<RawSQLExecutionUnit>> executionGroups;\n        try {\n            executionGroups = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        \r\n        return rawExecutor.execute(executionGroups, new RawSQLExecutorCallback());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/ProxySQLExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"B"},{"authorDate":"2021-01-29 16:12:35","commitOrder":2,"curCode":"    private Collection<ExecuteResult> useDriverToExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, \n                                                         final int maxConnectionsSizePerQuery, final boolean isReturnGeneratedKeys, final boolean isExceptionThrown) throws SQLException {\n        DriverExecutionPrepareEngine<JDBCExecutionUnit, Connection> prepareEngine = new DriverExecutionPrepareEngine<>(\n                type, maxConnectionsSizePerQuery, backendConnection, new StatementOption(isReturnGeneratedKeys), rules);\n        Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups;\n        try {\n            executionGroups = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        return jdbcExecutor.execute(executionContext.getSqlStatementContext().getSqlStatement(), executionGroups, isReturnGeneratedKeys, isExceptionThrown);\n    }\n","date":"2021-01-29 16:12:35","endLine":164,"groupId":"5550","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"useDriverToExecute","params":"(finalExecutionContextexecutionContext@finalCollection<ShardingSphereRule>rules@finalintmaxConnectionsSizePerQuery@finalbooleanisReturnGeneratedKeys@finalbooleanisExceptionThrown)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1e/53dcf7a5abb77fadbd19edab244006a1af5c1b.src","preCode":"    private Collection<ExecuteResult> useDriverToExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, \n                                                         final int maxConnectionsSizePerQuery, final boolean isReturnGeneratedKeys, final boolean isExceptionThrown) throws SQLException {\n        DriverExecutionPrepareEngine<JDBCExecutionUnit, Connection> prepareEngine = new DriverExecutionPrepareEngine<>(\n                type, maxConnectionsSizePerQuery, backendConnection, new StatementOption(isReturnGeneratedKeys), rules);\n        Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups;\n        try {\n            executionGroups = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        return jdbcExecutor.execute(executionContext.getSqlStatementContext().getSqlStatement(), executionGroups, isReturnGeneratedKeys, isExceptionThrown);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/ProxySQLExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"MB"}],"commitId":"18900793d82aea4715ce629dd98892445b75e7ad","commitMessage":"@@@Use sane SQL if connection cannot connect in proxy (#9217)\n\n* Simplify ConnectionAdapterTest\n\n* Use sane SQL if connection cannot connect in proxy","date":"2021-01-29 16:12:35","modifiedFileCount":"1","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-03-12 17:12:30","codes":[{"authorDate":"2021-03-12 17:12:30","commitOrder":3,"curCode":"    private Collection<ExecuteResult> rawExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, final int maxConnectionsSizePerQuery) throws SQLException {\n        RawExecutionPrepareEngine prepareEngine = new RawExecutionPrepareEngine(maxConnectionsSizePerQuery, rules);\n        ExecutionGroupContext<RawSQLExecutionUnit> executionGroupContext;\n        try {\n            executionGroupContext = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        \r\n        return rawExecutor.execute(executionGroupContext, new RawSQLExecutorCallback());\n    }\n","date":"2021-03-12 17:12:30","endLine":136,"groupId":"5550","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"rawExecute","params":"(finalExecutionContextexecutionContext@finalCollection<ShardingSphereRule>rules@finalintmaxConnectionsSizePerQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b5/56504aeba719732287d482c5a9f12c2870d1e5.src","preCode":"    private Collection<ExecuteResult> rawExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, final int maxConnectionsSizePerQuery) throws SQLException {\n        RawExecutionPrepareEngine prepareEngine = new RawExecutionPrepareEngine(maxConnectionsSizePerQuery, rules);\n        Collection<ExecutionGroup<RawSQLExecutionUnit>> executionGroups;\n        try {\n            executionGroups = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        \r\n        return rawExecutor.execute(executionGroups, new RawSQLExecutorCallback());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/ProxySQLExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2021-03-12 17:12:30","commitOrder":3,"curCode":"    private Collection<ExecuteResult> useDriverToExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, \n                                                         final int maxConnectionsSizePerQuery, final boolean isReturnGeneratedKeys, final boolean isExceptionThrown) throws SQLException {\n        DriverExecutionPrepareEngine<JDBCExecutionUnit, Connection> prepareEngine = new DriverExecutionPrepareEngine<>(\n                type, maxConnectionsSizePerQuery, backendConnection, new StatementOption(isReturnGeneratedKeys), rules);\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext;\n        try {\n            executionGroupContext = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        return jdbcExecutor.execute(executionContext.getSqlStatementContext().getSqlStatement(), executionGroupContext, isReturnGeneratedKeys, isExceptionThrown);\n    }\n","date":"2021-03-12 17:12:30","endLine":164,"groupId":"5550","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"useDriverToExecute","params":"(finalExecutionContextexecutionContext@finalCollection<ShardingSphereRule>rules@finalintmaxConnectionsSizePerQuery@finalbooleanisReturnGeneratedKeys@finalbooleanisExceptionThrown)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b5/56504aeba719732287d482c5a9f12c2870d1e5.src","preCode":"    private Collection<ExecuteResult> useDriverToExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, \n                                                         final int maxConnectionsSizePerQuery, final boolean isReturnGeneratedKeys, final boolean isExceptionThrown) throws SQLException {\n        DriverExecutionPrepareEngine<JDBCExecutionUnit, Connection> prepareEngine = new DriverExecutionPrepareEngine<>(\n                type, maxConnectionsSizePerQuery, backendConnection, new StatementOption(isReturnGeneratedKeys), rules);\n        Collection<ExecutionGroup<JDBCExecutionUnit>> executionGroups;\n        try {\n            executionGroups = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        return jdbcExecutor.execute(executionContext.getSqlStatementContext().getSqlStatement(), executionGroups, isReturnGeneratedKeys, isExceptionThrown);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/ProxySQLExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"30ebff26e8734ce0809baf9be78cd2513ee1ae98","commitMessage":"@@@Create executionGroup context (#9643)\n\n* Show ddl/dml process\n\n* fix unit test\n\n* fix java doc","date":"2021-03-12 17:12:30","modifiedFileCount":"15","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-03-16 18:29:46","codes":[{"authorDate":"2021-03-12 17:12:30","commitOrder":4,"curCode":"    private Collection<ExecuteResult> rawExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, final int maxConnectionsSizePerQuery) throws SQLException {\n        RawExecutionPrepareEngine prepareEngine = new RawExecutionPrepareEngine(maxConnectionsSizePerQuery, rules);\n        ExecutionGroupContext<RawSQLExecutionUnit> executionGroupContext;\n        try {\n            executionGroupContext = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        \r\n        return rawExecutor.execute(executionGroupContext, new RawSQLExecutorCallback());\n    }\n","date":"2021-03-12 17:12:30","endLine":136,"groupId":"5550","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"rawExecute","params":"(finalExecutionContextexecutionContext@finalCollection<ShardingSphereRule>rules@finalintmaxConnectionsSizePerQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b5/56504aeba719732287d482c5a9f12c2870d1e5.src","preCode":"    private Collection<ExecuteResult> rawExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, final int maxConnectionsSizePerQuery) throws SQLException {\n        RawExecutionPrepareEngine prepareEngine = new RawExecutionPrepareEngine(maxConnectionsSizePerQuery, rules);\n        ExecutionGroupContext<RawSQLExecutionUnit> executionGroupContext;\n        try {\n            executionGroupContext = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        \r\n        return rawExecutor.execute(executionGroupContext, new RawSQLExecutorCallback());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/ProxySQLExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"N"},{"authorDate":"2021-03-16 18:29:46","commitOrder":4,"curCode":"    private Collection<ExecuteResult> useDriverToExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, \n                                                         final int maxConnectionsSizePerQuery, final boolean isReturnGeneratedKeys, final boolean isExceptionThrown) throws SQLException {\n        DriverExecutionPrepareEngine<JDBCExecutionUnit, Connection> prepareEngine = new DriverExecutionPrepareEngine<>(\n                type, maxConnectionsSizePerQuery, backendConnection, new StatementOption(isReturnGeneratedKeys), rules);\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext;\n        try {\n            executionGroupContext = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        return jdbcExecutor.execute(executionContext.getSqlStatementContext(), executionGroupContext, isReturnGeneratedKeys, isExceptionThrown);\n    }\n","date":"2021-03-16 18:29:46","endLine":164,"groupId":"5550","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"useDriverToExecute","params":"(finalExecutionContextexecutionContext@finalCollection<ShardingSphereRule>rules@finalintmaxConnectionsSizePerQuery@finalbooleanisReturnGeneratedKeys@finalbooleanisExceptionThrown)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/63/864cacad66c6af24a3ba903eaaacd71dc8fb41.src","preCode":"    private Collection<ExecuteResult> useDriverToExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, \n                                                         final int maxConnectionsSizePerQuery, final boolean isReturnGeneratedKeys, final boolean isExceptionThrown) throws SQLException {\n        DriverExecutionPrepareEngine<JDBCExecutionUnit, Connection> prepareEngine = new DriverExecutionPrepareEngine<>(\n                type, maxConnectionsSizePerQuery, backendConnection, new StatementOption(isReturnGeneratedKeys), rules);\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext;\n        try {\n            executionGroupContext = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        return jdbcExecutor.execute(executionContext.getSqlStatementContext().getSqlStatement(), executionGroupContext, isReturnGeneratedKeys, isExceptionThrown);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/ProxySQLExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"9130c5154708e33e1963223719c7b84394147145","commitMessage":"@@@import ExecuteProcessEngine (#9691)\n\n","date":"2021-03-16 18:29:46","modifiedFileCount":"9","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-03-16 18:29:46","codes":[{"authorDate":"2021-04-04 18:16:18","commitOrder":5,"curCode":"    private Collection<ExecuteResult> rawExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, final int maxConnectionsSizePerQuery) throws SQLException {\n        RawExecutionPrepareEngine prepareEngine = new RawExecutionPrepareEngine(maxConnectionsSizePerQuery, rules);\n        ExecutionGroupContext<RawSQLExecutionUnit> executionGroupContext;\n        try {\n            executionGroupContext = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        \r\n        return rawExecutor.execute(executionGroupContext, executionContext.getSqlStatementContext(), new RawSQLExecutorCallback());\n    }\n","date":"2021-04-04 18:16:18","endLine":136,"groupId":"5550","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"rawExecute","params":"(finalExecutionContextexecutionContext@finalCollection<ShardingSphereRule>rules@finalintmaxConnectionsSizePerQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/50/a107cc0dba18b53944fc2ac147f6ec49348271.src","preCode":"    private Collection<ExecuteResult> rawExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, final int maxConnectionsSizePerQuery) throws SQLException {\n        RawExecutionPrepareEngine prepareEngine = new RawExecutionPrepareEngine(maxConnectionsSizePerQuery, rules);\n        ExecutionGroupContext<RawSQLExecutionUnit> executionGroupContext;\n        try {\n            executionGroupContext = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        \r\n        return rawExecutor.execute(executionGroupContext, new RawSQLExecutorCallback());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/ProxySQLExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2021-03-16 18:29:46","commitOrder":5,"curCode":"    private Collection<ExecuteResult> useDriverToExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, \n                                                         final int maxConnectionsSizePerQuery, final boolean isReturnGeneratedKeys, final boolean isExceptionThrown) throws SQLException {\n        DriverExecutionPrepareEngine<JDBCExecutionUnit, Connection> prepareEngine = new DriverExecutionPrepareEngine<>(\n                type, maxConnectionsSizePerQuery, backendConnection, new StatementOption(isReturnGeneratedKeys), rules);\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext;\n        try {\n            executionGroupContext = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        return jdbcExecutor.execute(executionContext.getSqlStatementContext(), executionGroupContext, isReturnGeneratedKeys, isExceptionThrown);\n    }\n","date":"2021-03-16 18:29:46","endLine":164,"groupId":"5550","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"useDriverToExecute","params":"(finalExecutionContextexecutionContext@finalCollection<ShardingSphereRule>rules@finalintmaxConnectionsSizePerQuery@finalbooleanisReturnGeneratedKeys@finalbooleanisExceptionThrown)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/63/864cacad66c6af24a3ba903eaaacd71dc8fb41.src","preCode":"    private Collection<ExecuteResult> useDriverToExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, \n                                                         final int maxConnectionsSizePerQuery, final boolean isReturnGeneratedKeys, final boolean isExceptionThrown) throws SQLException {\n        DriverExecutionPrepareEngine<JDBCExecutionUnit, Connection> prepareEngine = new DriverExecutionPrepareEngine<>(\n                type, maxConnectionsSizePerQuery, backendConnection, new StatementOption(isReturnGeneratedKeys), rules);\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext;\n        try {\n            executionGroupContext = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        return jdbcExecutor.execute(executionContext.getSqlStatementContext(), executionGroupContext, isReturnGeneratedKeys, isExceptionThrown);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/ProxySQLExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"}],"commitId":"138905deb34ea0c38feec0cf1436b145196b8d2e","commitMessage":"@@@import ExecuteProcessEngine for RawExecutor (#9925)\n\n* import ExecuteProcessEngine for RawExecutor\n\n* import ExecuteProcessEngine for DriverJDBCExecutor","date":"2021-04-04 18:16:18","modifiedFileCount":"5","status":"M","submitter":"sandynz"},{"authorTime":"2021-06-25 16:56:56","codes":[{"authorDate":"2021-06-25 16:56:56","commitOrder":6,"curCode":"    private Collection<ExecuteResult> rawExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, final int maxConnectionsSizePerQuery) throws SQLException {\n        RawExecutionPrepareEngine prepareEngine = new RawExecutionPrepareEngine(maxConnectionsSizePerQuery, rules);\n        ExecutionGroupContext<RawSQLExecutionUnit> executionGroupContext;\n        try {\n            executionGroupContext = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        \r\n        return rawExecutor.execute(executionGroupContext, executionContext.getLogicSQL(), new RawSQLExecutorCallback());\n    }\n","date":"2021-06-25 16:56:56","endLine":143,"groupId":"5550","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"rawExecute","params":"(finalExecutionContextexecutionContext@finalCollection<ShardingSphereRule>rules@finalintmaxConnectionsSizePerQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f2/bbf8594b39bb10bdb00aa54c0c231f80bf04bf.src","preCode":"    private Collection<ExecuteResult> rawExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, final int maxConnectionsSizePerQuery) throws SQLException {\n        RawExecutionPrepareEngine prepareEngine = new RawExecutionPrepareEngine(maxConnectionsSizePerQuery, rules);\n        ExecutionGroupContext<RawSQLExecutionUnit> executionGroupContext;\n        try {\n            executionGroupContext = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        \r\n        return rawExecutor.execute(executionGroupContext, executionContext.getSqlStatementContext(), new RawSQLExecutorCallback());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/ProxySQLExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2021-06-25 16:56:56","commitOrder":6,"curCode":"    private Collection<ExecuteResult> useDriverToExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, \n                                                         final int maxConnectionsSizePerQuery, final boolean isReturnGeneratedKeys, final boolean isExceptionThrown) throws SQLException {\n        DriverExecutionPrepareEngine<JDBCExecutionUnit, Connection> prepareEngine = new DriverExecutionPrepareEngine<>(\n                type, maxConnectionsSizePerQuery, backendConnection, new StatementOption(isReturnGeneratedKeys), rules);\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext;\n        try {\n            executionGroupContext = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        return jdbcExecutor.execute(executionContext.getLogicSQL(), executionGroupContext, isReturnGeneratedKeys, isExceptionThrown);\n    }\n","date":"2021-06-25 16:56:56","endLine":174,"groupId":"5550","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"useDriverToExecute","params":"(finalExecutionContextexecutionContext@finalCollection<ShardingSphereRule>rules@finalintmaxConnectionsSizePerQuery@finalbooleanisReturnGeneratedKeys@finalbooleanisExceptionThrown)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f2/bbf8594b39bb10bdb00aa54c0c231f80bf04bf.src","preCode":"    private Collection<ExecuteResult> useDriverToExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, \n                                                         final int maxConnectionsSizePerQuery, final boolean isReturnGeneratedKeys, final boolean isExceptionThrown) throws SQLException {\n        DriverExecutionPrepareEngine<JDBCExecutionUnit, Connection> prepareEngine = new DriverExecutionPrepareEngine<>(\n                type, maxConnectionsSizePerQuery, backendConnection, new StatementOption(isReturnGeneratedKeys), rules);\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext;\n        try {\n            executionGroupContext = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        return jdbcExecutor.execute(executionContext.getSqlStatementContext(), executionGroupContext, isReturnGeneratedKeys, isExceptionThrown);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/ProxySQLExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"2fa8d9de63960f5a160b64306418d9007a7ed528","commitMessage":"@@@Show logic SQL in execution process list Info column (#11006)\n\n* Prepare LogicSQL for ExecuteProcessReporter\n\n* Persist logic SQL and show in Info column","date":"2021-06-25 16:56:56","modifiedFileCount":"17","status":"M","submitter":"sandynz"},{"authorTime":"2021-07-11 17:16:39","codes":[{"authorDate":"2021-07-11 17:16:39","commitOrder":7,"curCode":"    private Collection<ExecuteResult> rawExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, final int maxConnectionsSizePerQuery) throws SQLException {\n        RawExecutionPrepareEngine prepareEngine = new RawExecutionPrepareEngine(maxConnectionsSizePerQuery, rules);\n        ExecutionGroupContext<RawSQLExecutionUnit> executionGroupContext;\n        try {\n            executionGroupContext = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        executionGroupContext.setSchemaName(backendConnection.getSchemaName());\n        executionGroupContext.setGrantee(backendConnection.getGrantee());\n        \r\n        return rawExecutor.execute(executionGroupContext, executionContext.getLogicSQL(), new RawSQLExecutorCallback());\n    }\n","date":"2021-07-11 17:16:39","endLine":145,"groupId":"101051","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"rawExecute","params":"(finalExecutionContextexecutionContext@finalCollection<ShardingSphereRule>rules@finalintmaxConnectionsSizePerQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e6/77f49a585a2b2d3fd74758fe54a1b35d8f6cb8.src","preCode":"    private Collection<ExecuteResult> rawExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, final int maxConnectionsSizePerQuery) throws SQLException {\n        RawExecutionPrepareEngine prepareEngine = new RawExecutionPrepareEngine(maxConnectionsSizePerQuery, rules);\n        ExecutionGroupContext<RawSQLExecutionUnit> executionGroupContext;\n        try {\n            executionGroupContext = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        \r\n        return rawExecutor.execute(executionGroupContext, executionContext.getLogicSQL(), new RawSQLExecutorCallback());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/ProxySQLExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2021-07-11 17:16:39","commitOrder":7,"curCode":"    private Collection<ExecuteResult> useDriverToExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, \n                                                         final int maxConnectionsSizePerQuery, final boolean isReturnGeneratedKeys, final boolean isExceptionThrown) throws SQLException {\n        DriverExecutionPrepareEngine<JDBCExecutionUnit, Connection> prepareEngine = new DriverExecutionPrepareEngine<>(\n                type, maxConnectionsSizePerQuery, backendConnection, new StatementOption(isReturnGeneratedKeys), rules);\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext;\n        try {\n            executionGroupContext = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        executionGroupContext.setSchemaName(backendConnection.getSchemaName());\n        executionGroupContext.setGrantee(backendConnection.getGrantee());\n        return jdbcExecutor.execute(executionContext.getLogicSQL(), executionGroupContext, isReturnGeneratedKeys, isExceptionThrown);\n    }\n","date":"2021-07-11 17:16:39","endLine":178,"groupId":"101051","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"useDriverToExecute","params":"(finalExecutionContextexecutionContext@finalCollection<ShardingSphereRule>rules@finalintmaxConnectionsSizePerQuery@finalbooleanisReturnGeneratedKeys@finalbooleanisExceptionThrown)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e6/77f49a585a2b2d3fd74758fe54a1b35d8f6cb8.src","preCode":"    private Collection<ExecuteResult> useDriverToExecute(final ExecutionContext executionContext, final Collection<ShardingSphereRule> rules, \n                                                         final int maxConnectionsSizePerQuery, final boolean isReturnGeneratedKeys, final boolean isExceptionThrown) throws SQLException {\n        DriverExecutionPrepareEngine<JDBCExecutionUnit, Connection> prepareEngine = new DriverExecutionPrepareEngine<>(\n                type, maxConnectionsSizePerQuery, backendConnection, new StatementOption(isReturnGeneratedKeys), rules);\n        ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext;\n        try {\n            executionGroupContext = prepareEngine.prepare(executionContext.getRouteContext(), executionContext.getExecutionUnits());\n        } catch (final SQLException ex) {\n            return getSaneExecuteResults(executionContext, ex);\n        }\n        return jdbcExecutor.execute(executionContext.getLogicSQL(), executionGroupContext, isReturnGeneratedKeys, isExceptionThrown);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/ProxySQLExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"b874bf714f5499f018161c780fbb1804e44501c0","commitMessage":"@@@Optimize User/Host/db columns for show processlist (#11267)\n\n* Show User/Host/db columns\n\n* Show processlist before use db\n\n* Info maximum length","date":"2021-07-11 17:16:39","modifiedFileCount":"6","status":"M","submitter":"sandynz"}]
