[{"authorTime":"2021-05-18 13:23:30","codes":[{"authorDate":"2021-05-18 13:23:30","commitOrder":1,"curCode":"    public static boolean check(final Grantee user, final Collection<ShardingSphereRule> rules) {\n        if (rules.isEmpty()) {\n            return false;\n        }\n        for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(rules, SQLChecker.class).entrySet()) {\n            boolean checkResult = entry.getValue().check(user, entry.getKey());\n            if (!checkResult) {\n                return false;\n            }\n        }\n        return true;\n    }\n","date":"2021-05-18 13:23:30","endLine":102,"groupId":"2120","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"check","params":"(finalGranteeuser@finalCollection<ShardingSphereRule>rules)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/14/52462af09ede0bb78d0ec4a447abf0a24d30f1.src","preCode":"    public static boolean check(final Grantee user, final Collection<ShardingSphereRule> rules) {\n        if (rules.isEmpty()) {\n            return false;\n        }\n        for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(rules, SQLChecker.class).entrySet()) {\n            boolean checkResult = entry.getValue().check(user, entry.getKey());\n            if (!checkResult) {\n                return false;\n            }\n        }\n        return true;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/check/SQLCheckEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"},{"authorDate":"2021-05-18 13:23:30","commitOrder":1,"curCode":"    public static boolean check(final Grantee user, final BiPredicate<Object, Object> validate, final Object cipher, final Collection<ShardingSphereRule> rules) {\n        if (rules.isEmpty()) {\n            return false;\n        }\n        for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(rules, SQLChecker.class).entrySet()) {\n            boolean checkResult = entry.getValue().check(user, validate, cipher, entry.getKey());\n            if (!checkResult) {\n                return false;\n            }\n        }\n        return true;\n    }\n","date":"2021-05-18 13:23:30","endLine":124,"groupId":"2120","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"check","params":"(finalGranteeuser@finalBiPredicate<Object@Object>validate@finalObjectcipher@finalCollection<ShardingSphereRule>rules)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/14/52462af09ede0bb78d0ec4a447abf0a24d30f1.src","preCode":"    public static boolean check(final Grantee user, final BiPredicate<Object, Object> validate, final Object cipher, final Collection<ShardingSphereRule> rules) {\n        if (rules.isEmpty()) {\n            return false;\n        }\n        for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(rules, SQLChecker.class).entrySet()) {\n            boolean checkResult = entry.getValue().check(user, validate, cipher, entry.getKey());\n            if (!checkResult) {\n                return false;\n            }\n        }\n        return true;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/check/SQLCheckEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"}],"commitId":"fe0ddc8c5d6c106f4f88af39bc42a4038f60b26b","commitMessage":"@@@Users  removed from StandardMetaDataContexts (#10310)\n\n* remove user\n\n* fix review\n\n* trigger ci\n\n* fix code\n\n* fix","date":"2021-05-18 13:23:30","modifiedFileCount":"39","status":"B","submitter":"Zhu jun"},{"authorTime":"2021-08-13 17:32:32","codes":[{"authorDate":"2021-08-13 17:32:32","commitOrder":2,"curCode":"    public static boolean check(final Grantee user, final Collection<ShardingSphereRule> rules) {\n        if (rules.isEmpty()) {\n            return false;\n        }\n        for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(SQLChecker.class, rules).entrySet()) {\n            boolean checkResult = entry.getValue().check(user, entry.getKey());\n            if (!checkResult) {\n                return false;\n            }\n        }\n        return true;\n    }\n","date":"2021-08-13 17:32:32","endLine":103,"groupId":"111727","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"check","params":"(finalGranteeuser@finalCollection<ShardingSphereRule>rules)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/91/0d47add13c4d66294e2773dcb5e58e422fc31e.src","preCode":"    public static boolean check(final Grantee user, final Collection<ShardingSphereRule> rules) {\n        if (rules.isEmpty()) {\n            return false;\n        }\n        for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(rules, SQLChecker.class).entrySet()) {\n            boolean checkResult = entry.getValue().check(user, entry.getKey());\n            if (!checkResult) {\n                return false;\n            }\n        }\n        return true;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/check/SQLCheckEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2021-08-13 17:32:32","commitOrder":2,"curCode":"    public static boolean check(final Grantee user, final BiPredicate<Object, Object> validate, final Object cipher, final Collection<ShardingSphereRule> rules) {\n        if (rules.isEmpty()) {\n            return false;\n        }\n        for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(SQLChecker.class, rules).entrySet()) {\n            boolean checkResult = entry.getValue().check(user, validate, cipher, entry.getKey());\n            if (!checkResult) {\n                return false;\n            }\n        }\n        return true;\n    }\n","date":"2021-08-13 17:32:32","endLine":125,"groupId":"111727","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"check","params":"(finalGranteeuser@finalBiPredicate<Object@Object>validate@finalObjectcipher@finalCollection<ShardingSphereRule>rules)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/91/0d47add13c4d66294e2773dcb5e58e422fc31e.src","preCode":"    public static boolean check(final Grantee user, final BiPredicate<Object, Object> validate, final Object cipher, final Collection<ShardingSphereRule> rules) {\n        if (rules.isEmpty()) {\n            return false;\n        }\n        for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(rules, SQLChecker.class).entrySet()) {\n            boolean checkResult = entry.getValue().check(user, validate, cipher, entry.getKey());\n            if (!checkResult) {\n                return false;\n            }\n        }\n        return true;\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/check/SQLCheckEngine.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"}],"commitId":"3c91473d73cadcb7ea5f7ac6cb0bbc4867454b89","commitMessage":"@@@solve the OrderedServicesCache concurrency exception (#11796)\n\n* solve the OrderedServicesCache concurrency problem\n\n* fix test case\n\n* modify test case return type\n\n* fix review comment\n\n* make OrderedServicesCacheKey as inner class of OrderedServicesCache\n\n* remove generic types in OrderedServicesCache\n\n* simplify inner class name\n\n* adjust order of param","date":"2021-08-13 17:32:32","modifiedFileCount":"38","status":"M","submitter":"Zhengqiang Duan"}]
