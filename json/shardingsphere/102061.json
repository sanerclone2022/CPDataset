[{"authorTime":"2021-07-01 17:47:55","codes":[{"authorDate":"2021-07-01 17:47:55","commitOrder":1,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final AlgorithmSegment actual, final ExpectedAlgorithm expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual dataSource should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s function segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getName(), CoreMatchers.is(expected.getName()));\n            PropertiesAssert.assertIs(assertContext, actual.getProps(), expected.getProps());\n        }\n    }\n","date":"2021-07-01 17:47:55","endLine":53,"groupId":"4158","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalAlgorithmSegmentactual@finalExpectedAlgorithmexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e3/b71c5dc98bfefab3504ca6368625a4f997c61b.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final AlgorithmSegment actual, final ExpectedAlgorithm expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual dataSource should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s function segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getName(), CoreMatchers.is(expected.getName()));\n            PropertiesAssert.assertIs(assertContext, actual.getProps(), expected.getProps());\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/AlgorithmAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2021-07-01 17:47:55","commitOrder":1,"curCode":"    private static void assertDatabaseDiscoveryRule(final SQLCaseAssertContext assertContext, final DatabaseDiscoveryRuleSegment actual, final ExpectedDatabaseDiscoveryRule expected) {\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \", actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \",\n                actual.getClass().getSimpleName())), actual.getDiscoveryTypeName(), is(expected.getDiscoveryTypeName()));\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \", actual.getClass().getSimpleName())), actual.getDataSources(), is(expected.getDataSources()));\n        assertProps(assertContext, actual.getProps(), expected.getProps());\n    }\n","date":"2021-07-01 17:47:55","endLine":63,"groupId":"1408","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertDatabaseDiscoveryRule","params":"(finalSQLCaseAssertContextassertContext@finalDatabaseDiscoveryRuleSegmentactual@finalExpectedDatabaseDiscoveryRuleexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5e/b6f8dfcc5fd7618aeab7cbec759ae170d33923.src","preCode":"    private static void assertDatabaseDiscoveryRule(final SQLCaseAssertContext assertContext, final DatabaseDiscoveryRuleSegment actual, final ExpectedDatabaseDiscoveryRule expected) {\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \", actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \",\n                actual.getClass().getSimpleName())), actual.getDiscoveryTypeName(), is(expected.getDiscoveryTypeName()));\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \", actual.getClass().getSimpleName())), actual.getDataSources(), is(expected.getDataSources()));\n        assertProps(assertContext, actual.getProps(), expected.getProps());\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/rdl/DatabaseDiscoveryRuleAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"}],"commitId":"71c18596a4427b83e98bd0cb6b32319e297d1373","commitMessage":"@@@add new parser test module (#11083)\n\n","date":"2021-07-01 17:47:55","modifiedFileCount":"0","status":"B","submitter":"totalo"},{"authorTime":"2021-07-01 17:47:55","codes":[{"authorDate":"2021-08-19 18:15:13","commitOrder":2,"curCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final AlgorithmSegment actual, final ExpectedAlgorithm expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual algorithm should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual algorithm should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s algorithm segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getName(), is(expected.getName()));\n            PropertiesAssert.assertIs(assertContext, actual.getProps(), expected.getProps());\n        }\n    }\n","date":"2021-08-19 18:15:13","endLine":53,"groupId":"102061","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertIs","params":"(finalSQLCaseAssertContextassertContext@finalAlgorithmSegmentactual@finalExpectedAlgorithmexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/cc/95047e1ff7107e4170d08e88b21e3fda0803bd.src","preCode":"    public static void assertIs(final SQLCaseAssertContext assertContext, final AlgorithmSegment actual, final ExpectedAlgorithm expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual dataSource should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"), actual);\n            assertThat(assertContext.getText(String.format(\"`%s`'s function segment assertion error: \", actual.getClass().getSimpleName())),\n                    actual.getName(), CoreMatchers.is(expected.getName()));\n            PropertiesAssert.assertIs(assertContext, actual.getProps(), expected.getProps());\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/AlgorithmAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2021-07-01 17:47:55","commitOrder":2,"curCode":"    private static void assertDatabaseDiscoveryRule(final SQLCaseAssertContext assertContext, final DatabaseDiscoveryRuleSegment actual, final ExpectedDatabaseDiscoveryRule expected) {\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \", actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \",\n                actual.getClass().getSimpleName())), actual.getDiscoveryTypeName(), is(expected.getDiscoveryTypeName()));\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \", actual.getClass().getSimpleName())), actual.getDataSources(), is(expected.getDataSources()));\n        assertProps(assertContext, actual.getProps(), expected.getProps());\n    }\n","date":"2021-07-01 17:47:55","endLine":63,"groupId":"102061","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertDatabaseDiscoveryRule","params":"(finalSQLCaseAssertContextassertContext@finalDatabaseDiscoveryRuleSegmentactual@finalExpectedDatabaseDiscoveryRuleexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5e/b6f8dfcc5fd7618aeab7cbec759ae170d33923.src","preCode":"    private static void assertDatabaseDiscoveryRule(final SQLCaseAssertContext assertContext, final DatabaseDiscoveryRuleSegment actual, final ExpectedDatabaseDiscoveryRule expected) {\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \", actual.getClass().getSimpleName())), actual.getName(), is(expected.getName()));\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \",\n                actual.getClass().getSimpleName())), actual.getDiscoveryTypeName(), is(expected.getDiscoveryTypeName()));\n        assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \", actual.getClass().getSimpleName())), actual.getDataSources(), is(expected.getDataSources()));\n        assertProps(assertContext, actual.getProps(), expected.getProps());\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/rdl/DatabaseDiscoveryRuleAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"}],"commitId":"69ae7c0e8eabb175812e05acdac163eec24286f3","commitMessage":"@@@Modify the comment and assertion description (#11896)\n\n* Modify the comment and assertion description\n\n* update dataSource","date":"2021-08-19 18:15:13","modifiedFileCount":"2","status":"M","submitter":"yx9o"}]
