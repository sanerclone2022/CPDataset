[{"authorTime":"2020-05-16 19:36:14","codes":[{"authorDate":"2021-06-01 23:28:18","commitOrder":2,"curCode":"    public void assertQueryWithFederateInSingleAndShardingTableWithAlias() throws SQLException {\n        ShardingSpherePreparedStatement preparedStatement = (ShardingSpherePreparedStatement) getShardingSphereDataSource()\n                .getConnection().prepareStatement(SELECT_SQL_BY_ID_ACROSS_SINGLE_AND_SHARDING_TABLES_ALIAS);\n        preparedStatement.setInt(1, 10001);\n        ResultSet resultSet = preparedStatement.executeQuery();\n        assertNotNull(resultSet);\n        assertTrue(resultSet.next());\n        assertThat(resultSet.getInt(1), is(1001));\n        assertThat(resultSet.getInt(2), is(11));\n        assertThat(resultSet.getString(3), is(\"init\"));\n        assertThat(resultSet.getInt(4), is(1001));\n        assertThat(resultSet.getInt(5), is(10001));\n        assertFalse(resultSet.next());\n    }\n","date":"2021-06-01 23:28:18","endLine":114,"groupId":"11706","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertQueryWithFederateInSingleAndShardingTableWithAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b1/f29246da8a9ea1993d1c4249cfdf23efa4db36.src","preCode":"    public void assertQueryWithFederateInSingleAndShardingTableWithAlias() throws SQLException {\n        ShardingSpherePreparedStatement preparedStatement = (ShardingSpherePreparedStatement) getShardingSphereDataSource()\n                .getConnection().prepareStatement(SELECT_SQL_BY_ID_ACROSS_SINGLE_AND_SHARDING_TABLES_ALIAS);\n        preparedStatement.setInt(1, 10001);\n        ResultSet resultSet = preparedStatement.executeQuery();\n        assertNotNull(resultSet);\n        assertTrue(resultSet.next());\n        assertThat(resultSet.getInt(1), is(1001));\n        assertThat(resultSet.getInt(2), is(11));\n        assertThat(resultSet.getString(3), is(\"init\"));\n        assertThat(resultSet.getInt(4), is(1001));\n        assertThat(resultSet.getInt(5), is(10001));\n        assertFalse(resultSet.next());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/statement/FederatePrepareStatementTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"},{"authorDate":"2020-05-16 19:36:14","commitOrder":2,"curCode":"    public void assertSelectWithExecuteQuery() throws SQLException {\n        try (PreparedStatement statement = getEncryptConnection().prepareStatement(SELECT_SQL)) {\n            statement.setObject(1, 'a');\n            ResultSet resultSet = statement.executeQuery();\n            assertTrue(resultSet.next());\n            assertThat(resultSet.getInt(1), is(1));\n            assertThat(resultSet.getString(2), is(\"decryptValue\"));\n            assertTrue(resultSet.next());\n            assertThat(resultSet.getInt(1), is(5));\n            assertThat(resultSet.getString(2), is(\"decryptValue\"));\n        }\n    }\n","date":"2020-05-16 19:36:14","endLine":132,"groupId":"1673","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertSelectWithExecuteQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f3/f46d5385a650d5d3bc5a9bd69aade4786aed3b.src","preCode":"    public void assertSelectWithExecuteQuery() throws SQLException {\n        try (PreparedStatement statement = getEncryptConnection().prepareStatement(SELECT_SQL)) {\n            statement.setObject(1, 'a');\n            ResultSet resultSet = statement.executeQuery();\n            assertTrue(resultSet.next());\n            assertThat(resultSet.getInt(1), is(1));\n            assertThat(resultSet.getString(2), is(\"decryptValue\"));\n            assertTrue(resultSet.next());\n            assertThat(resultSet.getInt(1), is(5));\n            assertThat(resultSet.getString(2), is(\"decryptValue\"));\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/statement/EncryptPreparedStatementTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"NB"}],"commitId":"91534e545f7c62f23b9e84ba797530a721beb8d5","commitMessage":"@@@## Fix [Issue10604](https://github.com/apache/shardingsphere/issues/10604) (#10613)\n\nchanges related to replacement of keyword calcite to federate.","date":"2021-06-01 23:28:18","modifiedFileCount":"4","status":"M","submitter":"Abhishek Karkamkar"},{"authorTime":"2020-05-16 19:36:14","codes":[{"authorDate":"2021-06-11 13:29:00","commitOrder":3,"curCode":"    public void assertQueryWithFederateInSingleAndShardingTableWithAlias(final boolean executeQuery) throws SQLException {\n        ShardingSpherePreparedStatement preparedStatement = (ShardingSpherePreparedStatement) getShardingSphereDataSource()\n                .getConnection().prepareStatement(SELECT_SQL_BY_ID_ACROSS_SINGLE_AND_SHARDING_TABLES_ALIAS);\n        preparedStatement.setInt(1, 10001);\n        ResultSet resultSet = getResultSet(preparedStatement, executeQuery);\n        assertNotNull(resultSet);\n        assertTrue(resultSet.next());\n        assertThat(resultSet.getInt(1), is(1001));\n        assertThat(resultSet.getInt(2), is(11));\n        assertThat(resultSet.getString(3), is(\"init\"));\n        assertThat(resultSet.getInt(4), is(1001));\n        assertThat(resultSet.getInt(5), is(10001));\n        assertFalse(resultSet.next());\n    }\n","date":"2021-06-11 13:29:00","endLine":141,"groupId":"101127","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertQueryWithFederateInSingleAndShardingTableWithAlias","params":"(finalbooleanexecuteQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/42/6ce3af1927baf1bb3faec0313dca7399980e3a.src","preCode":"    public void assertQueryWithFederateInSingleAndShardingTableWithAlias() throws SQLException {\n        ShardingSpherePreparedStatement preparedStatement = (ShardingSpherePreparedStatement) getShardingSphereDataSource()\n                .getConnection().prepareStatement(SELECT_SQL_BY_ID_ACROSS_SINGLE_AND_SHARDING_TABLES_ALIAS);\n        preparedStatement.setInt(1, 10001);\n        ResultSet resultSet = preparedStatement.executeQuery();\n        assertNotNull(resultSet);\n        assertTrue(resultSet.next());\n        assertThat(resultSet.getInt(1), is(1001));\n        assertThat(resultSet.getInt(2), is(11));\n        assertThat(resultSet.getString(3), is(\"init\"));\n        assertThat(resultSet.getInt(4), is(1001));\n        assertThat(resultSet.getInt(5), is(10001));\n        assertFalse(resultSet.next());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/statement/FederatePrepareStatementTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2020-05-16 19:36:14","commitOrder":3,"curCode":"    public void assertSelectWithExecuteQuery() throws SQLException {\n        try (PreparedStatement statement = getEncryptConnection().prepareStatement(SELECT_SQL)) {\n            statement.setObject(1, 'a');\n            ResultSet resultSet = statement.executeQuery();\n            assertTrue(resultSet.next());\n            assertThat(resultSet.getInt(1), is(1));\n            assertThat(resultSet.getString(2), is(\"decryptValue\"));\n            assertTrue(resultSet.next());\n            assertThat(resultSet.getInt(1), is(5));\n            assertThat(resultSet.getString(2), is(\"decryptValue\"));\n        }\n    }\n","date":"2020-05-16 19:36:14","endLine":132,"groupId":"101127","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertSelectWithExecuteQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f3/f46d5385a650d5d3bc5a9bd69aade4786aed3b.src","preCode":"    public void assertSelectWithExecuteQuery() throws SQLException {\n        try (PreparedStatement statement = getEncryptConnection().prepareStatement(SELECT_SQL)) {\n            statement.setObject(1, 'a');\n            ResultSet resultSet = statement.executeQuery();\n            assertTrue(resultSet.next());\n            assertThat(resultSet.getInt(1), is(1));\n            assertThat(resultSet.getString(2), is(\"decryptValue\"));\n            assertTrue(resultSet.next());\n            assertThat(resultSet.getInt(1), is(5));\n            assertThat(resultSet.getString(2), is(\"decryptValue\"));\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/statement/EncryptPreparedStatementTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"}],"commitId":"99166c491f1e3005946dc7324094a08e812121af","commitMessage":"@@@fix calcite select result merge error when call execute method (#10758)\n\n* fix calcite select result merge error when call execute method\n\n* fix test case","date":"2021-06-11 13:29:00","modifiedFileCount":"8","status":"M","submitter":"Zhengqiang Duan"}]
