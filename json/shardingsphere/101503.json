[{"authorTime":"2020-10-22 16:47:44","codes":[{"authorDate":"2021-05-27 15:46:41","commitOrder":2,"curCode":"    public ASTNode visitQueryBlock(final QueryBlockContext ctx) {\n        OracleSelectStatement result = new OracleSelectStatement();\n        result.setProjections((ProjectionsSegment) visit(ctx.projections()));\n        if (null != ctx.duplicateSpecification()) {\n            result.getProjections().setDistinctRow(isDistinct(ctx));\n        }\n        if (null != ctx.fromClause()) {\n            TableSegment tableSegment = (TableSegment) visit(ctx.fromClause());\n            result.setFrom(tableSegment);\n        }\n        if (null != ctx.whereClause()) {\n            result.setWhere((WhereSegment) visit(ctx.whereClause()));\n        }\n        if (null != ctx.groupByClause()) {\n            result.setGroupBy((GroupBySegment) visit(ctx.groupByClause()));\n        }\n        return result;\n    }\n","date":"2021-05-27 15:46:41","endLine":300,"groupId":"6428","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"visitQueryBlock","params":"(finalQueryBlockContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/92/7ce1887f81fb2cd4cc7a57b849feb88d36fc29.src","preCode":"    public ASTNode visitQueryBlock(final QueryBlockContext ctx) {\n        OracleSelectStatement result = new OracleSelectStatement();\n        result.setProjections((ProjectionsSegment) visit(ctx.projections()));\n        if (null != ctx.duplicateSpecification()) {\n            result.getProjections().setDistinctRow(isDistinct(ctx));\n        }\n        if (null != ctx.fromClause()) {\n            TableSegment tableSegment = (TableSegment) visit(ctx.fromClause());\n            result.setFrom(tableSegment);\n        }\n        if (null != ctx.whereClause()) {\n            result.setWhere((WhereSegment) visit(ctx.whereClause()));\n        }\n        if (null != ctx.groupByClause()) {\n            result.setGroupBy((GroupBySegment) visit(ctx.groupByClause()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-oracle/src/main/java/org/apache/shardingsphere/sql/parser/oracle/visitor/statement/impl/OracleDMLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"B"},{"authorDate":"2020-10-22 16:47:44","commitOrder":2,"curCode":"    public ASTNode visitInsertSelectClause(final InsertSelectClauseContext ctx) {\n        SQLServerInsertStatement result = new SQLServerInsertStatement();\n        result.setInsertColumns(createInsertColumns(ctx.columnNames(), ctx.start.getStartIndex()));\n        result.setInsertSelect(createInsertSelectSegment(ctx));\n        if (null != ctx.outputClause()) {\n            result.setOutputSegment((OutputSegment) visit(ctx.outputClause()));\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":215,"groupId":"12291","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"visitInsertSelectClause","params":"(finalInsertSelectClauseContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/54/efae3b1c34c073dd7620e0332712376daf7503.src","preCode":"    public ASTNode visitInsertSelectClause(final InsertSelectClauseContext ctx) {\n        SQLServerInsertStatement result = new SQLServerInsertStatement();\n        result.setInsertColumns(createInsertColumns(ctx.columnNames(), ctx.start.getStartIndex()));\n        result.setInsertSelect(createInsertSelectSegment(ctx));\n        if (null != ctx.outputClause()) {\n            result.setOutputSegment((OutputSegment) visit(ctx.outputClause()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/statement/impl/SQLServerDMLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"NB"}],"commitId":"384bd1d2722e9e40f25c40196ea77515e586df9a","commitMessage":"@@@Proofread Oracle `SELECT` subquery clause (#10381)\n\n* add SQL definition for selectSubquery\n\n* add selectSubquery clause definition\n\n* rename to queryBlock.  modify selectSubquery","date":"2021-05-27 15:46:41","modifiedFileCount":"4","status":"M","submitter":"Thanoshan MV"},{"authorTime":"2020-10-22 16:47:44","codes":[{"authorDate":"2021-06-02 17:05:09","commitOrder":3,"curCode":"    public ASTNode visitQueryBlock(final QueryBlockContext ctx) {\n        OracleSelectStatement result = new OracleSelectStatement();\n        result.setProjections((ProjectionsSegment) visit(ctx.projections()));\n        if (null != ctx.duplicateSpecification()) {\n            result.getProjections().setDistinctRow(isDistinct(ctx));\n        }\n        if (null != ctx.fromClause()) {\n            TableSegment tableSegment = (TableSegment) visit(ctx.fromClause());\n            result.setFrom(tableSegment);\n        }\n        if (null != ctx.whereClause()) {\n            result.setWhere((WhereSegment) visit(ctx.whereClause()));\n        }\n        if (null != ctx.groupByClause()) {\n            result.setGroupBy((GroupBySegment) visit(ctx.groupByClause()));\n        }\n        if (null != ctx.havingClause()) {\n            result.setHaving((HavingSegment) visit(ctx.havingClause()));\n        }\n        return result;\n    }\n","date":"2021-06-02 17:05:09","endLine":305,"groupId":"6428","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"visitQueryBlock","params":"(finalQueryBlockContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/12/28b1b6ad589ef43ee78d1c64410abe1b26f121.src","preCode":"    public ASTNode visitQueryBlock(final QueryBlockContext ctx) {\n        OracleSelectStatement result = new OracleSelectStatement();\n        result.setProjections((ProjectionsSegment) visit(ctx.projections()));\n        if (null != ctx.duplicateSpecification()) {\n            result.getProjections().setDistinctRow(isDistinct(ctx));\n        }\n        if (null != ctx.fromClause()) {\n            TableSegment tableSegment = (TableSegment) visit(ctx.fromClause());\n            result.setFrom(tableSegment);\n        }\n        if (null != ctx.whereClause()) {\n            result.setWhere((WhereSegment) visit(ctx.whereClause()));\n        }\n        if (null != ctx.groupByClause()) {\n            result.setGroupBy((GroupBySegment) visit(ctx.groupByClause()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-oracle/src/main/java/org/apache/shardingsphere/sql/parser/oracle/visitor/statement/impl/OracleDMLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"},{"authorDate":"2020-10-22 16:47:44","commitOrder":3,"curCode":"    public ASTNode visitInsertSelectClause(final InsertSelectClauseContext ctx) {\n        SQLServerInsertStatement result = new SQLServerInsertStatement();\n        result.setInsertColumns(createInsertColumns(ctx.columnNames(), ctx.start.getStartIndex()));\n        result.setInsertSelect(createInsertSelectSegment(ctx));\n        if (null != ctx.outputClause()) {\n            result.setOutputSegment((OutputSegment) visit(ctx.outputClause()));\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":215,"groupId":"12291","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"visitInsertSelectClause","params":"(finalInsertSelectClauseContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/54/efae3b1c34c073dd7620e0332712376daf7503.src","preCode":"    public ASTNode visitInsertSelectClause(final InsertSelectClauseContext ctx) {\n        SQLServerInsertStatement result = new SQLServerInsertStatement();\n        result.setInsertColumns(createInsertColumns(ctx.columnNames(), ctx.start.getStartIndex()));\n        result.setInsertSelect(createInsertSelectSegment(ctx));\n        if (null != ctx.outputClause()) {\n            result.setOutputSegment((OutputSegment) visit(ctx.outputClause()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/statement/impl/SQLServerDMLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"N"}],"commitId":"5e4b14e4feefa5ab01167cfa1408092c1d437055","commitMessage":"@@@fix select with group by rewrite error (#10620)\n\n* fix select order by rewrite error\n\n* support oracle.  sqlserver & sql92\n\n* add sql parse test\n\n* add rewrite test case","date":"2021-06-02 17:05:09","modifiedFileCount":"31","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2020-10-22 16:47:44","codes":[{"authorDate":"2021-06-09 09:25:39","commitOrder":4,"curCode":"    public ASTNode visitQueryBlock(final QueryBlockContext ctx) {\n        OracleSelectStatement result = new OracleSelectStatement();\n        result.setProjections((ProjectionsSegment) visit(ctx.projections()));\n        if (null != ctx.withClause()) {\n            result.setWithSegment((WithSegment) visit(ctx.withClause()));\n        }\n        if (null != ctx.duplicateSpecification()) {\n            result.getProjections().setDistinctRow(isDistinct(ctx));\n        }\n        if (null != ctx.fromClause()) {\n            TableSegment tableSegment = (TableSegment) visit(ctx.fromClause());\n            result.setFrom(tableSegment);\n        }\n        if (null != ctx.whereClause()) {\n            result.setWhere((WhereSegment) visit(ctx.whereClause()));\n        }\n        if (null != ctx.groupByClause()) {\n            result.setGroupBy((GroupBySegment) visit(ctx.groupByClause()));\n        }\n        if (null != ctx.havingClause()) {\n            result.setHaving((HavingSegment) visit(ctx.havingClause()));\n        }\n        return result;\n    }\n","date":"2021-06-09 09:25:39","endLine":313,"groupId":"6428","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"visitQueryBlock","params":"(finalQueryBlockContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2b/0ce33c118d5006352e556c3a7f4a2b6e612fa5.src","preCode":"    public ASTNode visitQueryBlock(final QueryBlockContext ctx) {\n        OracleSelectStatement result = new OracleSelectStatement();\n        result.setProjections((ProjectionsSegment) visit(ctx.projections()));\n        if (null != ctx.duplicateSpecification()) {\n            result.getProjections().setDistinctRow(isDistinct(ctx));\n        }\n        if (null != ctx.fromClause()) {\n            TableSegment tableSegment = (TableSegment) visit(ctx.fromClause());\n            result.setFrom(tableSegment);\n        }\n        if (null != ctx.whereClause()) {\n            result.setWhere((WhereSegment) visit(ctx.whereClause()));\n        }\n        if (null != ctx.groupByClause()) {\n            result.setGroupBy((GroupBySegment) visit(ctx.groupByClause()));\n        }\n        if (null != ctx.havingClause()) {\n            result.setHaving((HavingSegment) visit(ctx.havingClause()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-oracle/src/main/java/org/apache/shardingsphere/sql/parser/oracle/visitor/statement/impl/OracleDMLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"},{"authorDate":"2020-10-22 16:47:44","commitOrder":4,"curCode":"    public ASTNode visitInsertSelectClause(final InsertSelectClauseContext ctx) {\n        SQLServerInsertStatement result = new SQLServerInsertStatement();\n        result.setInsertColumns(createInsertColumns(ctx.columnNames(), ctx.start.getStartIndex()));\n        result.setInsertSelect(createInsertSelectSegment(ctx));\n        if (null != ctx.outputClause()) {\n            result.setOutputSegment((OutputSegment) visit(ctx.outputClause()));\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":215,"groupId":"12291","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"visitInsertSelectClause","params":"(finalInsertSelectClauseContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/54/efae3b1c34c073dd7620e0332712376daf7503.src","preCode":"    public ASTNode visitInsertSelectClause(final InsertSelectClauseContext ctx) {\n        SQLServerInsertStatement result = new SQLServerInsertStatement();\n        result.setInsertColumns(createInsertColumns(ctx.columnNames(), ctx.start.getStartIndex()));\n        result.setInsertSelect(createInsertSelectSegment(ctx));\n        if (null != ctx.outputClause()) {\n            result.setOutputSegment((OutputSegment) visit(ctx.outputClause()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/statement/impl/SQLServerDMLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"N"}],"commitId":"484b9ac2e739a3f4f16e0229cbf807b7e9599eb6","commitMessage":"@@@Add with clause for Oracle `SELECT` statement (#10558)\n\n* add definition for with clause\n\n* add start.  stop indices for subquery segment\n\n* modify alias rule\n\n* add with clause test cases\n\n* add new rule to predicate","date":"2021-06-09 09:25:39","modifiedFileCount":"7","status":"M","submitter":"Thanoshan MV"},{"authorTime":"2020-10-22 16:47:44","codes":[{"authorDate":"2021-07-08 08:30:59","commitOrder":5,"curCode":"    public ASTNode visitQueryBlock(final QueryBlockContext ctx) {\n        OracleSelectStatement result = new OracleSelectStatement();\n        result.setProjections((ProjectionsSegment) visit(ctx.selectList()));\n        if (null != ctx.withClause()) {\n            result.setWithSegment((WithSegment) visit(ctx.withClause()));\n        }\n        if (null != ctx.duplicateSpecification()) {\n            result.getProjections().setDistinctRow(isDistinct(ctx));\n        }\n        if (null != ctx.selectFromClause()) {\n            TableSegment tableSegment = (TableSegment) visit(ctx.selectFromClause());\n            result.setFrom(tableSegment);\n        }\n        if (null != ctx.whereClause()) {\n            result.setWhere((WhereSegment) visit(ctx.whereClause()));\n        }\n        if (null != ctx.groupByClause()) {\n            result.setGroupBy((GroupBySegment) visit(ctx.groupByClause()));\n        }\n        if (null != ctx.havingClause()) {\n            result.setHaving((HavingSegment) visit(ctx.havingClause()));\n        }\n        return result;\n    }\n","date":"2021-07-08 08:30:59","endLine":442,"groupId":"6428","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"visitQueryBlock","params":"(finalQueryBlockContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/30/8bb0edfdfbcb6b94c2fc7c7b72bdb6c6898c5f.src","preCode":"    public ASTNode visitQueryBlock(final QueryBlockContext ctx) {\n        OracleSelectStatement result = new OracleSelectStatement();\n        result.setProjections((ProjectionsSegment) visit(ctx.projections()));\n        if (null != ctx.withClause()) {\n            result.setWithSegment((WithSegment) visit(ctx.withClause()));\n        }\n        if (null != ctx.duplicateSpecification()) {\n            result.getProjections().setDistinctRow(isDistinct(ctx));\n        }\n        if (null != ctx.fromClause()) {\n            TableSegment tableSegment = (TableSegment) visit(ctx.fromClause());\n            result.setFrom(tableSegment);\n        }\n        if (null != ctx.whereClause()) {\n            result.setWhere((WhereSegment) visit(ctx.whereClause()));\n        }\n        if (null != ctx.groupByClause()) {\n            result.setGroupBy((GroupBySegment) visit(ctx.groupByClause()));\n        }\n        if (null != ctx.havingClause()) {\n            result.setHaving((HavingSegment) visit(ctx.havingClause()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-oracle/src/main/java/org/apache/shardingsphere/sql/parser/oracle/visitor/statement/impl/OracleDMLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"M"},{"authorDate":"2020-10-22 16:47:44","commitOrder":5,"curCode":"    public ASTNode visitInsertSelectClause(final InsertSelectClauseContext ctx) {\n        SQLServerInsertStatement result = new SQLServerInsertStatement();\n        result.setInsertColumns(createInsertColumns(ctx.columnNames(), ctx.start.getStartIndex()));\n        result.setInsertSelect(createInsertSelectSegment(ctx));\n        if (null != ctx.outputClause()) {\n            result.setOutputSegment((OutputSegment) visit(ctx.outputClause()));\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":215,"groupId":"12291","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"visitInsertSelectClause","params":"(finalInsertSelectClauseContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/54/efae3b1c34c073dd7620e0332712376daf7503.src","preCode":"    public ASTNode visitInsertSelectClause(final InsertSelectClauseContext ctx) {\n        SQLServerInsertStatement result = new SQLServerInsertStatement();\n        result.setInsertColumns(createInsertColumns(ctx.columnNames(), ctx.start.getStartIndex()));\n        result.setInsertSelect(createInsertSelectSegment(ctx));\n        if (null != ctx.outputClause()) {\n            result.setOutputSegment((OutputSegment) visit(ctx.outputClause()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/statement/impl/SQLServerDMLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"N"}],"commitId":"2563d2466a8baf2665566324aa63c4927ea1f91c","commitMessage":"@@@Add selectList.  fromClause definitions for Oracle Select (#10759)\n\n* add selectList.  fromClause definitions\n\n* remove pivot.  rowPattern clauses and modify others\n\n* move externalTableDataProps rule to DDl\n\n* refactor rules.  add pivot.  rowPattern clauses\n\n* reformat g4 rules.  initial visit of ast\n\n* complete oracle selectList.  fromClause definitions and test cases\n\n* make empty line","date":"2021-07-08 08:30:59","modifiedFileCount":"1","status":"M","submitter":"Thanoshan MV"},{"authorTime":"2020-10-22 16:47:44","codes":[{"authorDate":"2021-07-22 10:02:57","commitOrder":6,"curCode":"    public ASTNode visitQueryBlock(final QueryBlockContext ctx) {\n        OracleSelectStatement result = new OracleSelectStatement();\n        result.setProjections((ProjectionsSegment) visit(ctx.selectList()));\n        if (null != ctx.withClause()) {\n            result.setWithSegment((WithSegment) visit(ctx.withClause()));\n        }\n        if (null != ctx.duplicateSpecification()) {\n            result.getProjections().setDistinctRow(isDistinct(ctx));\n        }\n        if (null != ctx.selectFromClause()) {\n            TableSegment tableSegment = (TableSegment) visit(ctx.selectFromClause());\n            result.setFrom(tableSegment);\n        }\n        if (null != ctx.whereClause()) {\n            result.setWhere((WhereSegment) visit(ctx.whereClause()));\n        }\n        if (null != ctx.groupByClause()) {\n            result.setGroupBy((GroupBySegment) visit(ctx.groupByClause()));\n            if (null != ctx.groupByClause().havingClause()) {\n                result.setHaving((HavingSegment) visit(ctx.groupByClause().havingClause()));\n            }\n        }\n        return result;\n    }\n","date":"2021-07-22 10:02:57","endLine":438,"groupId":"6428","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"visitQueryBlock","params":"(finalQueryBlockContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/53/1004e56a51043c0f1c0122c992e0d05c87f0a5.src","preCode":"    public ASTNode visitQueryBlock(final QueryBlockContext ctx) {\n        OracleSelectStatement result = new OracleSelectStatement();\n        result.setProjections((ProjectionsSegment) visit(ctx.selectList()));\n        if (null != ctx.withClause()) {\n            result.setWithSegment((WithSegment) visit(ctx.withClause()));\n        }\n        if (null != ctx.duplicateSpecification()) {\n            result.getProjections().setDistinctRow(isDistinct(ctx));\n        }\n        if (null != ctx.selectFromClause()) {\n            TableSegment tableSegment = (TableSegment) visit(ctx.selectFromClause());\n            result.setFrom(tableSegment);\n        }\n        if (null != ctx.whereClause()) {\n            result.setWhere((WhereSegment) visit(ctx.whereClause()));\n        }\n        if (null != ctx.groupByClause()) {\n            result.setGroupBy((GroupBySegment) visit(ctx.groupByClause()));\n        }\n        if (null != ctx.havingClause()) {\n            result.setHaving((HavingSegment) visit(ctx.havingClause()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-oracle/src/main/java/org/apache/shardingsphere/sql/parser/oracle/visitor/statement/impl/OracleDMLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":415,"status":"M"},{"authorDate":"2020-10-22 16:47:44","commitOrder":6,"curCode":"    public ASTNode visitInsertSelectClause(final InsertSelectClauseContext ctx) {\n        SQLServerInsertStatement result = new SQLServerInsertStatement();\n        result.setInsertColumns(createInsertColumns(ctx.columnNames(), ctx.start.getStartIndex()));\n        result.setInsertSelect(createInsertSelectSegment(ctx));\n        if (null != ctx.outputClause()) {\n            result.setOutputSegment((OutputSegment) visit(ctx.outputClause()));\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":215,"groupId":"12291","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"visitInsertSelectClause","params":"(finalInsertSelectClauseContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/54/efae3b1c34c073dd7620e0332712376daf7503.src","preCode":"    public ASTNode visitInsertSelectClause(final InsertSelectClauseContext ctx) {\n        SQLServerInsertStatement result = new SQLServerInsertStatement();\n        result.setInsertColumns(createInsertColumns(ctx.columnNames(), ctx.start.getStartIndex()));\n        result.setInsertSelect(createInsertSelectSegment(ctx));\n        if (null != ctx.outputClause()) {\n            result.setOutputSegment((OutputSegment) visit(ctx.outputClause()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/statement/impl/SQLServerDMLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"N"}],"commitId":"ea419c00d1fb9ddf8568f1c0f13d05e9de4af00d","commitMessage":"@@@Proofread Oracle SELECT Hierarchical Query and GroupBy Clause (#11259)\n\n* proofread oracle groupby clause\n\n* add groupby testcase.  add constructors for OrderByItemSegment implementations\n\n* add hierarchical query.  having clause.  assert aggregation projection in expression assert\n\n* modify expressionList rule\n\n* Remove newly added constructors which do not hace OrderDirection","date":"2021-07-22 10:02:57","modifiedFileCount":"3","status":"M","submitter":"Thanoshan MV"},{"authorTime":"2020-10-22 16:47:44","codes":[{"authorDate":"2021-08-14 09:45:10","commitOrder":7,"curCode":"    public ASTNode visitQueryBlock(final QueryBlockContext ctx) {\n        OracleSelectStatement result = new OracleSelectStatement();\n        result.setProjections((ProjectionsSegment) visit(ctx.selectList()));\n        if (null != ctx.withClause()) {\n            result.setWithSegment((WithSegment) visit(ctx.withClause()));\n        }\n        if (null != ctx.duplicateSpecification()) {\n            result.getProjections().setDistinctRow(isDistinct(ctx));\n        }\n        if (null != ctx.selectFromClause()) {\n            TableSegment tableSegment = (TableSegment) visit(ctx.selectFromClause());\n            result.setFrom(tableSegment);\n        }\n        if (null != ctx.whereClause()) {\n            result.setWhere((WhereSegment) visit(ctx.whereClause()));\n        }\n        if (null != ctx.groupByClause()) {\n            result.setGroupBy((GroupBySegment) visit(ctx.groupByClause()));\n            if (null != ctx.groupByClause().havingClause()) {\n                result.setHaving((HavingSegment) visit(ctx.groupByClause().havingClause()));\n            }\n        }\n        if (null != ctx.modelClause()) {\n            result.setModelSegment((ModelSegment) visit(ctx.modelClause()));\n        }\n        return result;\n    }\n","date":"2021-08-14 09:45:10","endLine":449,"groupId":"101503","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"visitQueryBlock","params":"(finalQueryBlockContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0f/6e7d3146dc5a2ed519f3a1da4db7cedf0f4615.src","preCode":"    public ASTNode visitQueryBlock(final QueryBlockContext ctx) {\n        OracleSelectStatement result = new OracleSelectStatement();\n        result.setProjections((ProjectionsSegment) visit(ctx.selectList()));\n        if (null != ctx.withClause()) {\n            result.setWithSegment((WithSegment) visit(ctx.withClause()));\n        }\n        if (null != ctx.duplicateSpecification()) {\n            result.getProjections().setDistinctRow(isDistinct(ctx));\n        }\n        if (null != ctx.selectFromClause()) {\n            TableSegment tableSegment = (TableSegment) visit(ctx.selectFromClause());\n            result.setFrom(tableSegment);\n        }\n        if (null != ctx.whereClause()) {\n            result.setWhere((WhereSegment) visit(ctx.whereClause()));\n        }\n        if (null != ctx.groupByClause()) {\n            result.setGroupBy((GroupBySegment) visit(ctx.groupByClause()));\n            if (null != ctx.groupByClause().havingClause()) {\n                result.setHaving((HavingSegment) visit(ctx.groupByClause().havingClause()));\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-oracle/src/main/java/org/apache/shardingsphere/sql/parser/oracle/visitor/statement/impl/OracleDMLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"M"},{"authorDate":"2020-10-22 16:47:44","commitOrder":7,"curCode":"    public ASTNode visitInsertSelectClause(final InsertSelectClauseContext ctx) {\n        SQLServerInsertStatement result = new SQLServerInsertStatement();\n        result.setInsertColumns(createInsertColumns(ctx.columnNames(), ctx.start.getStartIndex()));\n        result.setInsertSelect(createInsertSelectSegment(ctx));\n        if (null != ctx.outputClause()) {\n            result.setOutputSegment((OutputSegment) visit(ctx.outputClause()));\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":215,"groupId":"101503","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"visitInsertSelectClause","params":"(finalInsertSelectClauseContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/54/efae3b1c34c073dd7620e0332712376daf7503.src","preCode":"    public ASTNode visitInsertSelectClause(final InsertSelectClauseContext ctx) {\n        SQLServerInsertStatement result = new SQLServerInsertStatement();\n        result.setInsertColumns(createInsertColumns(ctx.columnNames(), ctx.start.getStartIndex()));\n        result.setInsertSelect(createInsertSelectSegment(ctx));\n        if (null != ctx.outputClause()) {\n            result.setOutputSegment((OutputSegment) visit(ctx.outputClause()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/statement/impl/SQLServerDMLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"N"}],"commitId":"682c6d99d5ea9c66fb5e04575978d9f4f2a64177","commitMessage":"@@@Add Oracle Select Model Clause Definition (#11503)\n\n* add oracle select model clause definition\n\n* change modelClause rule\n\n* add modelExpr.  introduce condition.  and remove previous simpleExpr rule\n\n* comment out external source SQLs\n\n* complete condition rule\n\n* uncomment testcases and modify modelExpr to match with uncommented testcases\n\n* define keyword A in Keyword.g4\n\n* capitalize keywords in SQL statements which consist of character A\n\n* remove commented code","date":"2021-08-14 09:45:10","modifiedFileCount":"6","status":"M","submitter":"Thanoshan MV"}]
