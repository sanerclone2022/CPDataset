[{"authorTime":"2021-07-03 16:36:59","codes":[{"authorDate":"2021-07-03 01:31:24","commitOrder":2,"curCode":"    private void checkToBeCreatedEncryptors(final CreateEncryptRuleStatement sqlStatement) {\n        Collection<String> encryptors = new LinkedHashSet<>();\n        sqlStatement.getRules().forEach(each -> encryptors.addAll(each.getColumns().stream().map(column -> column.getEncryptor().getName()).collect(Collectors.toSet())));\n        Collection<String> notExistedEncryptors = encryptors.stream().filter(\n            each -> !TypedSPIRegistry.findRegisteredService(EncryptAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedEncryptors.isEmpty()) {\n            throw new InvalidEncryptorsException(notExistedEncryptors);\n        }\n    }\n","date":"2021-07-03 01:31:24","endLine":73,"groupId":"213","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeCreatedEncryptors","params":"(finalCreateEncryptRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/76/cf24564eba134e43be1f1dee296f7e89f827e7.src","preCode":"    private void checkToBeCreatedEncryptors(final CreateEncryptRuleStatement sqlStatement) {\n        Collection<String> encryptors = new LinkedHashSet<>();\n        sqlStatement.getRules().forEach(each -> encryptors.addAll(each.getColumns().stream().map(column -> column.getEncryptor().getName()).collect(Collectors.toSet())));\n        Collection<String> notExistedEncryptors = encryptors.stream().filter(\n            each -> !TypedSPIRegistry.findRegisteredService(EncryptAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedEncryptors.isEmpty()) {\n            throw new InvalidEncryptorsException(notExistedEncryptors);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-distsql/shardingsphere-encrypt-distsql-handler/src/main/java/org/apache/shardingsphere/encrypt/distsql/handler/update/CreateEncryptRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"NB"},{"authorDate":"2021-07-03 16:36:59","commitOrder":2,"curCode":"    private void checkToBeAlteredKeyGenerators(final AlterShardingTableRuleStatement sqlStatement) {\n        Collection<String> notExistedKeyGenerators = getToBeAlteredKeyGenerators(sqlStatement).stream().distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(KeyGenerateAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedKeyGenerators.isEmpty()) {\n            throw new InvalidKeyGeneratorsException(notExistedKeyGenerators);\n        }\n    }\n","date":"2021-07-03 16:36:59","endLine":121,"groupId":"213","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkToBeAlteredKeyGenerators","params":"(finalAlterShardingTableRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3a/d21f14675c4df963c42625a8f181b2c2df11d7.src","preCode":"    private void checkToBeAlteredKeyGenerators(final AlterShardingTableRuleStatement sqlStatement) {\n        Collection<String> notExistedKeyGenerators = getToBeAlteredKeyGenerators(sqlStatement).stream().distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(KeyGenerateAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedKeyGenerators.isEmpty()) {\n            throw new InvalidKeyGeneratorsException(notExistedKeyGenerators);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/AlterShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"}],"commitId":"70149d383a75b5b9986818226f18abd449e5ae80","commitMessage":"@@@Add shardingsphere-sharding-distsql-handler module (#11125)\n\n* Add shardingsphere-sharding-distsql-handler module\n\n* Fix test cases\n\n* Fix test cases\n\n* Fix test cases","date":"2021-07-03 16:36:59","modifiedFileCount":"1","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 01:26:11","codes":[{"authorDate":"2021-07-04 01:26:11","commitOrder":3,"curCode":"    private void checkToBeCreatedEncryptors(final CreateEncryptRuleStatement sqlStatement) throws InvalidEncryptorsException {\n        Collection<String> encryptors = new LinkedHashSet<>();\n        sqlStatement.getRules().forEach(each -> encryptors.addAll(each.getColumns().stream().map(column -> column.getEncryptor().getName()).collect(Collectors.toSet())));\n        Collection<String> notExistedEncryptors = encryptors.stream().filter(\n            each -> !TypedSPIRegistry.findRegisteredService(EncryptAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedEncryptors.isEmpty()) {\n            throw new InvalidEncryptorsException(notExistedEncryptors);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":75,"groupId":"213","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeCreatedEncryptors","params":"(finalCreateEncryptRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/21/5dfe6aee4d8931ac0b834210c50ff6e309da20.src","preCode":"    private void checkToBeCreatedEncryptors(final CreateEncryptRuleStatement sqlStatement) {\n        Collection<String> encryptors = new LinkedHashSet<>();\n        sqlStatement.getRules().forEach(each -> encryptors.addAll(each.getColumns().stream().map(column -> column.getEncryptor().getName()).collect(Collectors.toSet())));\n        Collection<String> notExistedEncryptors = encryptors.stream().filter(\n            each -> !TypedSPIRegistry.findRegisteredService(EncryptAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedEncryptors.isEmpty()) {\n            throw new InvalidEncryptorsException(notExistedEncryptors);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-distsql/shardingsphere-encrypt-distsql-handler/src/main/java/org/apache/shardingsphere/encrypt/distsql/handler/update/CreateEncryptRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2021-07-04 01:26:11","commitOrder":3,"curCode":"    private void checkToBeAlteredKeyGenerators(final AlterShardingTableRuleStatement sqlStatement) throws InvalidKeyGeneratorsException {\n        Collection<String> notExistedKeyGenerators = getToBeAlteredKeyGenerators(sqlStatement).stream().distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(KeyGenerateAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedKeyGenerators.isEmpty()) {\n            throw new InvalidKeyGeneratorsException(notExistedKeyGenerators);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":124,"groupId":"213","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkToBeAlteredKeyGenerators","params":"(finalAlterShardingTableRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b8/14b42c6f504fbfe98e2bc41079432f563fb8c2.src","preCode":"    private void checkToBeAlteredKeyGenerators(final AlterShardingTableRuleStatement sqlStatement) {\n        Collection<String> notExistedKeyGenerators = getToBeAlteredKeyGenerators(sqlStatement).stream().distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(KeyGenerateAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedKeyGenerators.isEmpty()) {\n            throw new InvalidKeyGeneratorsException(notExistedKeyGenerators);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/AlterShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"18ab59a5ac8de3a2c2d2c1dac39de3041b9c36f3","commitMessage":"@@@Refactor RuleDefinitionViolationException to extend SQLException (#11129)\n\n* Refactor RDLBackendHandler\n\n* Refactor RuleDefinitionViolationException to extend SQLException","date":"2021-07-04 01:26:11","modifiedFileCount":"66","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 12:43:06","codes":[{"authorDate":"2021-07-04 12:43:06","commitOrder":4,"curCode":"    private void checkToBeCreatedEncryptors(final CreateEncryptRuleStatement sqlStatement) throws InvalidAlgorithmConfigurationException {\n        Collection<String> encryptors = new LinkedHashSet<>();\n        sqlStatement.getRules().forEach(each -> encryptors.addAll(each.getColumns().stream().map(column -> column.getEncryptor().getName()).collect(Collectors.toSet())));\n        Collection<String> notExistedEncryptors = encryptors.stream().filter(\n            each -> !TypedSPIRegistry.findRegisteredService(EncryptAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedEncryptors.isEmpty()) {\n            throw new InvalidAlgorithmConfigurationException(\"encryptor\", notExistedEncryptors);\n        }\n    }\n","date":"2021-07-04 12:43:06","endLine":75,"groupId":"10229","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeCreatedEncryptors","params":"(finalCreateEncryptRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c5/7b50d108845f9fdf750af5fe0bda7ce8cdec4a.src","preCode":"    private void checkToBeCreatedEncryptors(final CreateEncryptRuleStatement sqlStatement) throws InvalidEncryptorsException {\n        Collection<String> encryptors = new LinkedHashSet<>();\n        sqlStatement.getRules().forEach(each -> encryptors.addAll(each.getColumns().stream().map(column -> column.getEncryptor().getName()).collect(Collectors.toSet())));\n        Collection<String> notExistedEncryptors = encryptors.stream().filter(\n            each -> !TypedSPIRegistry.findRegisteredService(EncryptAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedEncryptors.isEmpty()) {\n            throw new InvalidEncryptorsException(notExistedEncryptors);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-distsql/shardingsphere-encrypt-distsql-handler/src/main/java/org/apache/shardingsphere/encrypt/distsql/handler/update/CreateEncryptRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2021-07-04 12:43:06","commitOrder":4,"curCode":"    private void checkToBeAlteredKeyGenerators(final AlterShardingTableRuleStatement sqlStatement) throws InvalidAlgorithmConfigurationException {\n        Collection<String> notExistedKeyGenerators = getToBeAlteredKeyGenerators(sqlStatement).stream().distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(KeyGenerateAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedKeyGenerators.isEmpty()) {\n            throw new InvalidAlgorithmConfigurationException(\"key generator\", notExistedKeyGenerators);\n        }\n    }\n","date":"2021-07-04 12:43:06","endLine":122,"groupId":"10229","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkToBeAlteredKeyGenerators","params":"(finalAlterShardingTableRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/de/68db11a8e5a1334a633a3ff77667df531c1c8b.src","preCode":"    private void checkToBeAlteredKeyGenerators(final AlterShardingTableRuleStatement sqlStatement) throws InvalidKeyGeneratorsException {\n        Collection<String> notExistedKeyGenerators = getToBeAlteredKeyGenerators(sqlStatement).stream().distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(KeyGenerateAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedKeyGenerators.isEmpty()) {\n            throw new InvalidKeyGeneratorsException(notExistedKeyGenerators);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/AlterShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"3ddeaf7ab2e64f7ff1a935c0ed598227a3ddf765","commitMessage":"@@@Add CurrentRuleNotExistedException to refine Exception of current rule validation (#11133)\n\n* Remove InvalidDatabaseDiscoveryTypesException\n\n* Remove InvalidDatabaseDiscoveryTypesException\n\n* Remove InvalidEncryptorsException\n\n* Remove InvalidLoadBalancersException\n\n* Remove InvalidShardingAlgorithmsException\n\n* Remove InvalidKeyGeneratorsException","date":"2021-07-04 12:43:06","modifiedFileCount":"16","status":"M","submitter":"Liang Zhang"}]
