[{"authorTime":"2021-06-05 16:48:03","codes":[{"authorDate":"2021-06-05 16:48:03","commitOrder":1,"curCode":"    public Collection<EncryptAssignmentToken> generateSQLTokens(final SQLStatementContext sqlStatementContext) {\n        Collection<EncryptAssignmentToken> result = new LinkedList<>();\n        String tableName = ((TableAvailable) sqlStatementContext).getAllTables().iterator().next().getTableName().getIdentifier().getValue();\n        for (AssignmentSegment each : getSetAssignmentSegment(sqlStatementContext.getSqlStatement()).getAssignments()) {\n            if (getEncryptRule().findEncryptor(tableName, each.getColumn().getIdentifier().getValue()).isPresent()) {\n                generateSQLToken(tableName, each).ifPresent(result::add);\n            }\n        }\n        return result;\n    }\n","date":"2021-06-05 16:48:03","endLine":65,"groupId":"13967","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"generateSQLTokens","params":"(finalSQLStatementContextsqlStatementContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/55/931b678fe1a3b8c793c12d3187b47fc07f9fcf.src","preCode":"    public Collection<EncryptAssignmentToken> generateSQLTokens(final SQLStatementContext sqlStatementContext) {\n        Collection<EncryptAssignmentToken> result = new LinkedList<>();\n        String tableName = ((TableAvailable) sqlStatementContext).getAllTables().iterator().next().getTableName().getIdentifier().getValue();\n        for (AssignmentSegment each : getSetAssignmentSegment(sqlStatementContext.getSqlStatement()).getAssignments()) {\n            if (getEncryptRule().findEncryptor(tableName, each.getColumn().getIdentifier().getValue()).isPresent()) {\n                generateSQLToken(tableName, each).ifPresent(result::add);\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptAssignmentTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"},{"authorDate":"2021-06-05 16:48:03","commitOrder":1,"curCode":"    public void rewrite(final ParameterBuilder parameterBuilder, final SQLStatementContext sqlStatementContext, final List<Object> parameters) {\n        String tableName = ((TableAvailable) sqlStatementContext).getAllTables().iterator().next().getTableName().getIdentifier().getValue();\n        for (AssignmentSegment each : getSetAssignmentSegment(sqlStatementContext.getSqlStatement()).getAssignments()) {\n            if (each.getValue() instanceof ParameterMarkerExpressionSegment && getEncryptRule().findEncryptor(tableName, each.getColumn().getIdentifier().getValue()).isPresent()) {\n                StandardParameterBuilder standardParameterBuilder = parameterBuilder instanceof StandardParameterBuilder\n                        ? (StandardParameterBuilder) parameterBuilder : ((GroupedParameterBuilder) parameterBuilder).getParameterBuilders().get(0);\n                encryptParameters(standardParameterBuilder, tableName, each, parameters);\n            }\n        }\n    }\n","date":"2021-06-05 16:48:03","endLine":69,"groupId":"9610","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"rewrite","params":"(finalParameterBuilderparameterBuilder@finalSQLStatementContextsqlStatementContext@finalList<Object>parameters)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/67/62a08df2cd5eba2fbf0d192d7deef430497893.src","preCode":"    public void rewrite(final ParameterBuilder parameterBuilder, final SQLStatementContext sqlStatementContext, final List<Object> parameters) {\n        String tableName = ((TableAvailable) sqlStatementContext).getAllTables().iterator().next().getTableName().getIdentifier().getValue();\n        for (AssignmentSegment each : getSetAssignmentSegment(sqlStatementContext.getSqlStatement()).getAssignments()) {\n            if (each.getValue() instanceof ParameterMarkerExpressionSegment && getEncryptRule().findEncryptor(tableName, each.getColumn().getIdentifier().getValue()).isPresent()) {\n                StandardParameterBuilder standardParameterBuilder = parameterBuilder instanceof StandardParameterBuilder\n                        ? (StandardParameterBuilder) parameterBuilder : ((GroupedParameterBuilder) parameterBuilder).getParameterBuilders().get(0);\n                encryptParameters(standardParameterBuilder, tableName, each, parameters);\n            }\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/parameter/impl/EncryptAssignmentParameterRewriter.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"}],"commitId":"78da9d03eb0ae28c28d4d8f4f45f84303a69986e","commitMessage":"@@@Merge encrypt feature to core module (#10667)\n\n* Merge encrypt feature to core module\n\n* Merge encrypt feature to core module\n\n* Merge encrypt feature to core module","date":"2021-06-05 16:48:03","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-08-22 12:23:28","codes":[{"authorDate":"2021-08-22 12:23:28","commitOrder":2,"curCode":"    public Collection<EncryptAssignmentToken> generateSQLTokens(final SQLStatementContext sqlStatementContext) {\n        Collection<EncryptAssignmentToken> result = new LinkedList<>();\n        String tableName = ((TableAvailable) sqlStatementContext).getAllTables().iterator().next().getTableName().getIdentifier().getValue();\n        for (AssignmentSegment each : getSetAssignmentSegment(sqlStatementContext.getSqlStatement()).getAssignments()) {\n            if (getEncryptRule().findEncryptor(tableName, each.getColumns().get(0).getIdentifier().getValue()).isPresent()) {\n                generateSQLToken(tableName, each).ifPresent(result::add);\n            }\n        }\n        return result;\n    }\n","date":"2021-08-22 12:23:28","endLine":65,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"generateSQLTokens","params":"(finalSQLStatementContextsqlStatementContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c9/898d81ec22062d6a11cc3cbbe98277e064c0a4.src","preCode":"    public Collection<EncryptAssignmentToken> generateSQLTokens(final SQLStatementContext sqlStatementContext) {\n        Collection<EncryptAssignmentToken> result = new LinkedList<>();\n        String tableName = ((TableAvailable) sqlStatementContext).getAllTables().iterator().next().getTableName().getIdentifier().getValue();\n        for (AssignmentSegment each : getSetAssignmentSegment(sqlStatementContext.getSqlStatement()).getAssignments()) {\n            if (getEncryptRule().findEncryptor(tableName, each.getColumn().getIdentifier().getValue()).isPresent()) {\n                generateSQLToken(tableName, each).ifPresent(result::add);\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptAssignmentTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2021-08-22 12:23:28","commitOrder":2,"curCode":"    public void rewrite(final ParameterBuilder parameterBuilder, final SQLStatementContext sqlStatementContext, final List<Object> parameters) {\n        String tableName = ((TableAvailable) sqlStatementContext).getAllTables().iterator().next().getTableName().getIdentifier().getValue();\n        for (AssignmentSegment each : getSetAssignmentSegment(sqlStatementContext.getSqlStatement()).getAssignments()) {\n            if (each.getValue() instanceof ParameterMarkerExpressionSegment && getEncryptRule().findEncryptor(tableName, each.getColumns().get(0).getIdentifier().getValue()).isPresent()) {\n                StandardParameterBuilder standardParameterBuilder = parameterBuilder instanceof StandardParameterBuilder\n                        ? (StandardParameterBuilder) parameterBuilder : ((GroupedParameterBuilder) parameterBuilder).getParameterBuilders().get(0);\n                encryptParameters(standardParameterBuilder, tableName, each, parameters);\n            }\n        }\n    }\n","date":"2021-08-22 12:23:28","endLine":69,"groupId":"9610","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"rewrite","params":"(finalParameterBuilderparameterBuilder@finalSQLStatementContextsqlStatementContext@finalList<Object>parameters)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/68/117a9cf1458337636f36b6c66d007973c304b9.src","preCode":"    public void rewrite(final ParameterBuilder parameterBuilder, final SQLStatementContext sqlStatementContext, final List<Object> parameters) {\n        String tableName = ((TableAvailable) sqlStatementContext).getAllTables().iterator().next().getTableName().getIdentifier().getValue();\n        for (AssignmentSegment each : getSetAssignmentSegment(sqlStatementContext.getSqlStatement()).getAssignments()) {\n            if (each.getValue() instanceof ParameterMarkerExpressionSegment && getEncryptRule().findEncryptor(tableName, each.getColumn().getIdentifier().getValue()).isPresent()) {\n                StandardParameterBuilder standardParameterBuilder = parameterBuilder instanceof StandardParameterBuilder\n                        ? (StandardParameterBuilder) parameterBuilder : ((GroupedParameterBuilder) parameterBuilder).getParameterBuilders().get(0);\n                encryptParameters(standardParameterBuilder, tableName, each, parameters);\n            }\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/parameter/impl/EncryptAssignmentParameterRewriter.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"3c51144dafb300617a9a84558b6d87704f826c6a","commitMessage":"@@@Add Oracle SQL - Update statement (#11692)\n\n* add oracle update definition\n\n* add multi-column in an assignment\n\n* make AssignmentSegment into abstract.  define new ColumnAssignmentSegment and refactor AssignmentSegment related code.\n\n* utilize ColumnAssignmentSegment to create an instance type of AssignmentSegment\n\n* set ColumnAssignmentSegment's columns field to final and uninitialize it\n\n* remove commented code","date":"2021-08-22 12:23:28","modifiedFileCount":"27","status":"M","submitter":"Thanoshan MV"},{"authorTime":"2021-09-15 16:43:12","codes":[{"authorDate":"2021-09-15 16:43:12","commitOrder":3,"curCode":"    public Collection<EncryptAssignmentToken> generateSQLTokens(final SQLStatementContext sqlStatementContext) {\n        Collection<EncryptAssignmentToken> result = new LinkedList<>();\n        String tableName = ((TableAvailable) sqlStatementContext).getAllTables().iterator().next().getTableName().getIdentifier().getValue();\n        String schemaName = DMLStatementContextHelper.getSchemaName(sqlStatementContext);\n        for (AssignmentSegment each : getSetAssignmentSegment(sqlStatementContext.getSqlStatement()).getAssignments()) {\n            if (getEncryptRule().findEncryptor(schemaName, tableName, each.getColumns().get(0).getIdentifier().getValue()).isPresent()) {\n                generateSQLToken(schemaName, tableName, each).ifPresent(result::add);\n            }\n        }\n        return result;\n    }\n","date":"2021-09-15 16:43:12","endLine":67,"groupId":"10148","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"generateSQLTokens","params":"(finalSQLStatementContextsqlStatementContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/20/3cc51d5690f552dfa1dfc7d2d8de9da6c2a31c.src","preCode":"    public Collection<EncryptAssignmentToken> generateSQLTokens(final SQLStatementContext sqlStatementContext) {\n        Collection<EncryptAssignmentToken> result = new LinkedList<>();\n        String tableName = ((TableAvailable) sqlStatementContext).getAllTables().iterator().next().getTableName().getIdentifier().getValue();\n        for (AssignmentSegment each : getSetAssignmentSegment(sqlStatementContext.getSqlStatement()).getAssignments()) {\n            if (getEncryptRule().findEncryptor(tableName, each.getColumns().get(0).getIdentifier().getValue()).isPresent()) {\n                generateSQLToken(tableName, each).ifPresent(result::add);\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptAssignmentTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2021-09-15 16:43:12","commitOrder":3,"curCode":"    public void rewrite(final ParameterBuilder parameterBuilder, final SQLStatementContext sqlStatementContext, final List<Object> parameters) {\n        String tableName = ((TableAvailable) sqlStatementContext).getAllTables().iterator().next().getTableName().getIdentifier().getValue();\n        String schemaName = DMLStatementContextHelper.getSchemaName(sqlStatementContext);\n        for (AssignmentSegment each : getSetAssignmentSegment(sqlStatementContext.getSqlStatement()).getAssignments()) {\n            if (each.getValue() instanceof ParameterMarkerExpressionSegment && getEncryptRule().findEncryptor(schemaName, tableName, each.getColumns().get(0).getIdentifier().getValue()).isPresent()) {\n                StandardParameterBuilder standardParameterBuilder = parameterBuilder instanceof StandardParameterBuilder\n                        ? (StandardParameterBuilder) parameterBuilder : ((GroupedParameterBuilder) parameterBuilder).getParameterBuilders().get(0);\n                encryptParameters(standardParameterBuilder, schemaName, tableName, each, parameters);\n            }\n        }\n    }\n","date":"2021-09-15 16:43:12","endLine":71,"groupId":"10148","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"rewrite","params":"(finalParameterBuilderparameterBuilder@finalSQLStatementContextsqlStatementContext@finalList<Object>parameters)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7f/e15a418846463ded45991956d99d4064aecc16.src","preCode":"    public void rewrite(final ParameterBuilder parameterBuilder, final SQLStatementContext sqlStatementContext, final List<Object> parameters) {\n        String tableName = ((TableAvailable) sqlStatementContext).getAllTables().iterator().next().getTableName().getIdentifier().getValue();\n        for (AssignmentSegment each : getSetAssignmentSegment(sqlStatementContext.getSqlStatement()).getAssignments()) {\n            if (each.getValue() instanceof ParameterMarkerExpressionSegment && getEncryptRule().findEncryptor(tableName, each.getColumns().get(0).getIdentifier().getValue()).isPresent()) {\n                StandardParameterBuilder standardParameterBuilder = parameterBuilder instanceof StandardParameterBuilder\n                        ? (StandardParameterBuilder) parameterBuilder : ((GroupedParameterBuilder) parameterBuilder).getParameterBuilders().get(0);\n                encryptParameters(standardParameterBuilder, tableName, each, parameters);\n            }\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/parameter/impl/EncryptAssignmentParameterRewriter.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"619b0a53d69772fe1035482275430e1baa9d7743","commitMessage":"@@@using SchemaAvailable & EncryptPropertiesBuilder to pass schema. owner. table. column value into EncryptAlgorithm (#12372)\n\n* modify .gitignore to ignore .factorypath\n\n* using SchemaAvailable & EncryptPropertiesBuilder to pass schema. owner. table. column value into EncryptAlgorithm\n\n* fix testcase of EncryptAlgorithmMetaDataTest\n\n* refactor on process multiple tables\n\n* revert on process multiple tables\n\n* revert changes on EncryptProjectionTokenGenerator\n\n* remove unused imports\n\n* fix bug: properties override while set props in findEncryptor\n\n* fix bug: properties override while set props in findEncryptor\n\n* remove unused imports\n\n* fix bug: properties override while set props in findEncryptor\n\n* revoke pass schemaName on ddl statement\n\n* using simplify new properties to set schema.  owner.  table and column\n\n* fix to match develop rule\n\n* change method name to simpilify\n\n* implements schemaAvailable from DMLStatementContext\n\n* performance improvement and rat fix\n\n* revert schemaName on create and alter table statement\n\n* remove unused import","date":"2021-09-15 16:43:12","modifiedFileCount":"29","status":"M","submitter":"cheese8"}]
