[{"authorTime":"2021-06-04 22:49:49","codes":[{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertComplexKeysDoSharding() {\n        ClassBasedShardingAlgorithm shardingAlgorithm = getComplexKeysShardingAlgorithm();\n        assertThat(shardingAlgorithm.getStrategy(), is(ClassBasedShardingAlgorithmStrategyType.COMPLEX));\n        List<String> availableTargetNames = Lists.newArrayList(\"t_order_0\", \"t_order_1\", \"t_order_2\", \"t_order_3\");\n        Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames, new ComplexKeysShardingValue<>(\"t_order\", null, null));\n        assertThat(actual.size(), is(4));\n    }\n","date":"2021-06-04 22:49:49","endLine":107,"groupId":"12138","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertComplexKeysDoSharding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/65/35d9a906e68ef7d20325277af6df09bfd7579b.src","preCode":"    public void assertComplexKeysDoSharding() {\n        ClassBasedShardingAlgorithm shardingAlgorithm = getComplexKeysShardingAlgorithm();\n        assertThat(shardingAlgorithm.getStrategy(), is(ClassBasedShardingAlgorithmStrategyType.COMPLEX));\n        List<String> availableTargetNames = Lists.newArrayList(\"t_order_0\", \"t_order_1\", \"t_order_2\", \"t_order_3\");\n        Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames, new ComplexKeysShardingValue<>(\"t_order\", null, null));\n        assertThat(actual.size(), is(4));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithmTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"},{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertHintDoSharding() {\n        ClassBasedShardingAlgorithm shardingAlgorithm = getHintShardingAlgorithm();\n        assertThat(shardingAlgorithm.getStrategy(), is(ClassBasedShardingAlgorithmStrategyType.HINT));\n        List<String> availableTargetNames = Lists.newArrayList(\"t_order_0\", \"t_order_1\", \"t_order_2\", \"t_order_3\");\n        Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames, new HintShardingValue<>(\"t_order\", \"order_id\", null));\n        assertThat(actual.size(), is(4));\n    }\n","date":"2021-06-04 22:49:49","endLine":116,"groupId":"12139","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertHintDoSharding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/65/35d9a906e68ef7d20325277af6df09bfd7579b.src","preCode":"    public void assertHintDoSharding() {\n        ClassBasedShardingAlgorithm shardingAlgorithm = getHintShardingAlgorithm();\n        assertThat(shardingAlgorithm.getStrategy(), is(ClassBasedShardingAlgorithmStrategyType.HINT));\n        List<String> availableTargetNames = Lists.newArrayList(\"t_order_0\", \"t_order_1\", \"t_order_2\", \"t_order_3\");\n        Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames, new HintShardingValue<>(\"t_order\", \"order_id\", null));\n        assertThat(actual.size(), is(4));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithmTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"B"}],"commitId":"6b157b44d0336e4d9c61f940b0ec19c26758af84","commitMessage":"@@@Merge sharding feature to core module (#10662)\n\n* Merge dependencies\n\n* Merge sharding feature to api module\n\n* Merge sharding feature to core module","date":"2021-06-04 22:49:49","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-07-29 01:03:53","codes":[{"authorDate":"2021-07-29 01:03:53","commitOrder":2,"curCode":"    public void assertComplexKeysDoSharding() {\n        ClassBasedShardingAlgorithm shardingAlgorithm = getComplexKeysShardingAlgorithm();\n        assertThat(shardingAlgorithm.getStrategy(), is(ClassBasedShardingAlgorithmStrategyType.COMPLEX));\n        List<String> availableTargetNames = Arrays.asList(\"t_order_0\", \"t_order_1\", \"t_order_2\", \"t_order_3\");\n        Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames, new ComplexKeysShardingValue<>(\"t_order\", null, null));\n        assertThat(actual.size(), is(4));\n    }\n","date":"2021-07-29 01:03:53","endLine":107,"groupId":"10584","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertComplexKeysDoSharding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/83/17620b73f5aa651f58b052c757e23b2cb56b09.src","preCode":"    public void assertComplexKeysDoSharding() {\n        ClassBasedShardingAlgorithm shardingAlgorithm = getComplexKeysShardingAlgorithm();\n        assertThat(shardingAlgorithm.getStrategy(), is(ClassBasedShardingAlgorithmStrategyType.COMPLEX));\n        List<String> availableTargetNames = Lists.newArrayList(\"t_order_0\", \"t_order_1\", \"t_order_2\", \"t_order_3\");\n        Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames, new ComplexKeysShardingValue<>(\"t_order\", null, null));\n        assertThat(actual.size(), is(4));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithmTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2021-07-29 01:03:53","commitOrder":2,"curCode":"    public void assertHintDoSharding() {\n        ClassBasedShardingAlgorithm shardingAlgorithm = getHintShardingAlgorithm();\n        assertThat(shardingAlgorithm.getStrategy(), is(ClassBasedShardingAlgorithmStrategyType.HINT));\n        List<String> availableTargetNames = Arrays.asList(\"t_order_0\", \"t_order_1\", \"t_order_2\", \"t_order_3\");\n        Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames, new HintShardingValue<>(\"t_order\", \"order_id\", null));\n        assertThat(actual.size(), is(4));\n    }\n","date":"2021-07-29 01:03:53","endLine":116,"groupId":"10584","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertHintDoSharding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/83/17620b73f5aa651f58b052c757e23b2cb56b09.src","preCode":"    public void assertHintDoSharding() {\n        ClassBasedShardingAlgorithm shardingAlgorithm = getHintShardingAlgorithm();\n        assertThat(shardingAlgorithm.getStrategy(), is(ClassBasedShardingAlgorithmStrategyType.HINT));\n        List<String> availableTargetNames = Lists.newArrayList(\"t_order_0\", \"t_order_1\", \"t_order_2\", \"t_order_3\");\n        Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames, new HintShardingValue<>(\"t_order\", \"order_id\", null));\n        assertThat(actual.size(), is(4));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithmTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"6d2d2ba7b05c29bce74525f0437e04b22a556f66","commitMessage":"@@@Use java raw new List/Set/Map to instead of guava (#11561)\n\n* Use java raw new Map to instead of guava\n\n* Use java raw new List to instead of guava\n\n* Use java raw new Set to instead of guava","date":"2021-07-29 01:03:53","modifiedFileCount":"78","status":"M","submitter":"Liang Zhang"}]
