[{"authorTime":"2020-10-01 16:19:47","codes":[{"authorDate":"2020-09-10 15:04:10","commitOrder":6,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        SQLStatement sqlStatement = ProxyContext.getInstance().getSchema(backendConnection.getSchemaName()).getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","date":"2020-09-10 15:04:10","endLine":57,"groupId":"13234","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6d/f970a222775bb9bd6eb8f93a6d238cc79d906a.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        SQLStatement sqlStatement = ProxyContext.getInstance().getSchema(backendConnection.getSchemaName()).getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"NB"},{"authorDate":"2020-10-01 16:19:47","commitOrder":6,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SchemaMetaData schemaMetaData = schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getSchemaMetaData();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(schemaContext.getSchema(), sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2020-10-01 16:19:47","endLine":309,"groupId":"2814","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e2/e06c99091d3f6a7b7ae4ac270e36a9772a4f98.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SchemaMetaData schemaMetaData = schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getSchemaMetaData();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(schemaContext.getSchema(), sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"B"}],"commitId":"8e36397e3017dcf1c1cc87a293abaaa525d2cdf6","commitMessage":"@@@Move LogicSQL to infra module (#7677)\n\n* Simplify SchemaContext\n\n* Fix test cases\n\n* Refactor AbstractStatementExecutor\n\n* Use ShardingSphereSchema in LogicSQLContext\n\n* Move ShardingSphereSchema to infra module\n\n* Move LogicSQLContext to infra module\n\n* Use LogicSQLContext on SQLLogger\n\n* Rename LogicSQLContext to LogicSQL\n\n* Use LogicSQL on SQLRouteEngine","date":"2020-10-01 16:19:47","modifiedFileCount":"48","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-02 18:49:45","codes":[{"authorDate":"2020-10-02 18:49:45","commitOrder":7,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        SQLStatement sqlStatement = ProxyContext.getInstance().getSchemaContexts().getSqlParserEngine().parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","date":"2020-10-02 18:49:45","endLine":57,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9f/958e1fbf694796cf049ef6977f6a8a8e2a479e.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        SQLStatement sqlStatement = ProxyContext.getInstance().getSchema(backendConnection.getSchemaName()).getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-10-02 18:49:45","commitOrder":7,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSchema schema = schemaContexts.getDefaultSchema();\n        SchemaMetaData schemaMetaData = schema.getMetaData().getRuleSchemaMetaData().getSchemaMetaData();\n        SQLStatement sqlStatement = schemaContexts.getSqlParserEngine().parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(schema, sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2020-10-02 18:49:45","endLine":308,"groupId":"13948","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f3/ed29762d34cae321991c999b17efb980e57196.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        SchemaContext schemaContext = schemaContexts.getDefaultSchemaContext();\n        SchemaMetaData schemaMetaData = schemaContext.getSchema().getMetaData().getRuleSchemaMetaData().getSchemaMetaData();\n        SQLStatement sqlStatement = schemaContext.getRuntimeContext().getSqlParserEngine().parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(schemaContext.getSchema(), sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"}],"commitId":"794a35521634f921ecdd823d5a3f6833a8860df1","commitMessage":"@@@Simplify SchemaContexts (#7686)\n\n* Add SchemaContexts.getExecutorKernel()\n\n* Use SchemaContexts.getExecutorKernel()\n\n* Remove RuntimeContext.executorKernel\n\n* Remove RuntimeContext.executorKernel\n\n* Add SchemaContexts.getSQLParserEngine\n\n* Use SchemaContexts.getSQLParserEngine\n\n* Remove RuntimeContext.sqlParserEngine\n\n* Remove RuntimeContext\n\n* Refactor MySQLComStmtPrepareExecutor\n\n* Refactor SchemaContexts\n\n* Remove SchemaContext\n\n* Refactor SchemaContextsBuilder","date":"2020-10-02 18:49:45","modifiedFileCount":"73","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-18 17:03:19","codes":[{"authorDate":"2020-10-18 17:03:19","commitOrder":8,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypes.getTrunkDatabaseTypeName(ProxyContext.getInstance().getSchemaContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","date":"2020-10-18 17:03:19","endLine":60,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0c/e2ba32ded66192f771192d14d816e523c84d4a.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        SQLStatement sqlStatement = ProxyContext.getInstance().getSchemaContexts().getSqlParserEngine().parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-10-18 17:03:19","commitOrder":8,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        PhysicalSchemaMetaData schemaMetaData = schemaContexts.getDefaultSchema().getMetaData().getSchemaMetaData().getSchemaMetaData();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypes.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2020-10-18 17:03:19","endLine":313,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/15/789ff32c73717e086770f2e38c28518c3a580d.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSchema schema = schemaContexts.getDefaultSchema();\n        SchemaMetaData schemaMetaData = schema.getMetaData().getRuleSchemaMetaData().getSchemaMetaData();\n        SQLStatement sqlStatement = schemaContexts.getSqlParserEngine().parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(schema, sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"8131f34f9307a0c6a7011a6f86ae6c9ce4fb3352","commitMessage":"@@@Remove ShardingSphereSQLParserEngine from SchemaContexts (#7832)\n\n* Remove ShardingSphereSQLParserEngineFactory\n\n* Remove ShardingSphereSQLParserEngineFactory\n\n* Remove ShardingSphereSQLParserEngine from SchemaContextsBuilder\n\n* Remove ShardingSphereSQLParserEngine from SchemaContexts\n\n* Delete DALStatement.interp\n\n* Delete DALStatement.tokens\n\n* Delete DALStatementLexer.tokens\n\n* Delete DALStatementLexer.interp\n\n* Delete DALStatementVisitor.java\n\n* Delete DALStatementParser.java\n\n* Delete DALStatementListener.java\n\n* Delete DALStatementLexer.java\n\n* Delete DALStatementBaseVisitor.java\n\n* Delete DALStatementBaseListener.java","date":"2020-10-18 17:03:19","modifiedFileCount":"35","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-18 18:03:07","codes":[{"authorDate":"2020-10-18 18:03:07","commitOrder":9,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getSchemaContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","date":"2020-10-18 18:03:07","endLine":61,"groupId":"4636","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8f/eb8a654f8b90fb790a245a5acd6c11c73ad2c4.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypes.getTrunkDatabaseTypeName(ProxyContext.getInstance().getSchemaContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-10-18 18:03:07","commitOrder":9,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        PhysicalSchemaMetaData schemaMetaData = schemaContexts.getDefaultSchema().getMetaData().getSchemaMetaData().getSchemaMetaData();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2020-10-18 18:03:07","endLine":313,"groupId":"10234","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/37/8e0b3caaf26270fe6f8f2b5b9ab8a8df34d62e.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        PhysicalSchemaMetaData schemaMetaData = schemaContexts.getDefaultSchema().getMetaData().getSchemaMetaData().getSchemaMetaData();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypes.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"c82441ba41bc9913a997147b70dbcc9dbb47ae60","commitMessage":"@@@Rename DatabaseTypes to DatabaseTypeRegistry (#7834)\n\n","date":"2020-10-18 18:03:07","modifiedFileCount":"76","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-26 16:18:47","codes":[{"authorDate":"2020-10-26 16:18:47","commitOrder":10,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getSchemaContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parseToSQLStatement(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","date":"2020-10-26 16:18:47","endLine":61,"groupId":"4636","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5c/c28e447c28542cb450c53934d3bbae12f5ae38.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getSchemaContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-10-26 16:18:47","commitOrder":10,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        PhysicalSchemaMetaData schemaMetaData = schemaContexts.getDefaultSchema().getMetaData().getSchemaMetaData().getSchemaMetaData();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parseToSQLStatement(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2020-10-26 16:18:47","endLine":313,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2b/f8e42d25c3f84e73b880b07708701432f8c144.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        PhysicalSchemaMetaData schemaMetaData = schemaContexts.getDefaultSchema().getMetaData().getSchemaMetaData().getSchemaMetaData();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"f6df19f78739ea12f50177a1f35c7f8b57e925d1","commitMessage":"@@@Refactor StandardSQLParserEngine and cacheEngine (#7914)\n\n* Rename to getVisitorFacadeFactoryClass() in SQLParserConfiguration\n\n* Refactor StandardSQLParserEngine and cacheEngine\n\n* modify SQLParserEngine\n\n* check style\n\n* java doc","date":"2020-10-26 16:18:47","modifiedFileCount":"20","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2020-10-27 15:59:49","codes":[{"authorDate":"2020-10-27 15:59:49","commitOrder":11,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLStatementParserEngine sqlStatementParserEngine = new ShardingSphereSQLStatementParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getSchemaContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","date":"2020-10-27 15:59:49","endLine":61,"groupId":"4636","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b7/d4647143f0444d438a80169fc85c01337f35c8.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getSchemaContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parseToSQLStatement(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-10-27 15:59:49","commitOrder":11,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        PhysicalSchemaMetaData schemaMetaData = schemaContexts.getDefaultSchema().getMetaData().getSchemaMetaData().getSchemaMetaData();\n        ShardingSphereSQLStatementParserEngine sqlStatementParserEngine = new ShardingSphereSQLStatementParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2020-10-27 15:59:49","endLine":313,"groupId":"10234","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4d/6df1b474e32b131a6e08ed85c7dbb476fc7316.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        PhysicalSchemaMetaData schemaMetaData = schemaContexts.getDefaultSchema().getMetaData().getSchemaMetaData().getSchemaMetaData();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parseToSQLStatement(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"9d07ef739f72a9128c4bba5ada19d0be0699641c","commitMessage":"@@@Refactor parser engine module structure (#7930)\n\n* Split SQLVisitorFactory\n\n* Add SQLStatementParserEngine\n\n* Rename SQLParserEngine\n\n* Rename ShardingSphereSQLStatementParserEngine\n\n* Refactor SQLParserEngine\n\n* Refactor SQLParsedResultCache\n\n* Add StandardSQLStatementParserEngineFactory\n\n* Refactor StandardSQLStatementParserEngine\n\n* Remove useless SQLParsedResultCache\n\n* For code format","date":"2020-10-27 15:59:49","modifiedFileCount":"17","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-30 01:03:36","codes":[{"authorDate":"2020-10-30 01:03:36","commitOrder":12,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getSchemaContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","date":"2020-10-30 01:03:36","endLine":61,"groupId":"4636","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0e/a990b0312c7dd7c94a856590693b9b0295bd24.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLStatementParserEngine sqlStatementParserEngine = new ShardingSphereSQLStatementParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getSchemaContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-10-30 01:03:36","commitOrder":12,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        PhysicalSchemaMetaData schemaMetaData = schemaContexts.getDefaultSchema().getMetaData().getSchemaMetaData().getSchemaMetaData();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2020-10-30 01:03:36","endLine":313,"groupId":"10234","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/21/fff586b7ebd7610b109b3944c0dfd19baa80fa.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        PhysicalSchemaMetaData schemaMetaData = schemaContexts.getDefaultSchema().getMetaData().getSchemaMetaData().getSchemaMetaData();\n        ShardingSphereSQLStatementParserEngine sqlStatementParserEngine = new ShardingSphereSQLStatementParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"eb86a693685f6d65bf3c9cf7e16ce3b6a08e960f","commitMessage":"@@@Move ShardingSphereSQLParserEngine to infra-parser module (#7965)\n\n* Decouple SQLStatementParserEngine\n\n* Remove SQLStatementParserEngine\n\n* Rename SQLStatementParserEngine\n\n* For code format\n\n* Move ShardingSphereSQLParserEngine to infra\n\n* Add DistSQLParserFactory\n\n* Fix checkstyle\n\n* Update java doc","date":"2020-10-30 01:03:36","modifiedFileCount":"14","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-04 15:26:32","codes":[{"authorDate":"2020-10-30 01:03:36","commitOrder":13,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getSchemaContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","date":"2020-10-30 01:03:36","endLine":61,"groupId":"4636","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0e/a990b0312c7dd7c94a856590693b9b0295bd24.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getSchemaContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2020-11-04 15:26:32","commitOrder":13,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        PhysicalSchemaMetaData schemaMetaData = schemaContexts.getDefaultSchema().getMetaData().getSchemaMetaData();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2020-11-04 15:26:32","endLine":313,"groupId":"10234","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/07/a98ab5014f306021edd466eb282be8d3e90d29.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        PhysicalSchemaMetaData schemaMetaData = schemaContexts.getDefaultSchema().getMetaData().getSchemaMetaData().getSchemaMetaData();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"a87ef49a5bafc77e2c38da74870870555dcddbfb","commitMessage":"@@@Remove LogicSchemaMetaData.unconfiguredSchemaMetaDataMap (#8023)\n\n* Adjust seq of ShardingSphereMetaData's constructor\n\n* Remove LogicSchemaMetaData.unconfiguredSchemaMetaDataMap\n\n* Remove LogicSchemaMetaData\n\n* Rename LogicSchemaMetaDataLoader\n\n* Add metadata.schema package\n\n* Fix spi\n\n* Rename SchemaMetaDataLoader\n\n* Rename SchemaMetaDataNotifier","date":"2020-11-04 15:26:32","modifiedFileCount":"156","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-04 18:35:25","codes":[{"authorDate":"2020-10-30 01:03:36","commitOrder":14,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getSchemaContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","date":"2020-10-30 01:03:36","endLine":61,"groupId":"4636","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0e/a990b0312c7dd7c94a856590693b9b0295bd24.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getSchemaContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2020-11-04 18:35:25","commitOrder":14,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        PhysicalSchemaMetaData schemaMetaData = schemaContexts.getDefaultMetaData().getSchema().getSchemaMetaData();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2020-11-04 18:35:25","endLine":313,"groupId":"10234","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1d/b13c37a65724ac0a0f64785b15d31ae9109323.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        PhysicalSchemaMetaData schemaMetaData = schemaContexts.getDefaultSchema().getMetaData().getSchemaMetaData();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"d06c68303f2628c99ac5aa6e4a22d8e73bb07d7d","commitMessage":"@@@Switch class name of ShardingSphereMetaData and ShardingSphereSchema (#8026)\n\n* Remove useless ReplicaQueryTableAddressingMetaDataDecorator\n\n* Switch class name of ShardingSphereMetaData and ShardingSphereSchema","date":"2020-11-04 18:35:25","modifiedFileCount":"223","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-09 14:26:45","codes":[{"authorDate":"2020-10-30 01:03:36","commitOrder":15,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getSchemaContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","date":"2020-10-30 01:03:36","endLine":61,"groupId":"4636","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0e/a990b0312c7dd7c94a856590693b9b0295bd24.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getSchemaContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2020-11-09 14:26:45","commitOrder":15,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        PhysicalSchemaMetaData schemaMetaData = schemaContexts.getDefaultMetaData().getSchema();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2020-11-09 14:26:45","endLine":313,"groupId":"10234","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/73/a2e51f7ef22491c3ce1a86d2b9635e323a70fa.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        PhysicalSchemaMetaData schemaMetaData = schemaContexts.getDefaultMetaData().getSchema().getSchemaMetaData();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"9c7b070da8feb0a6c6ba2966c047233ef2d3e7e4","commitMessage":"@@@Use PhysicalSchemaMetaData instead of ShardingSphereSchema (#8087)\n\n","date":"2020-11-09 14:26:45","modifiedFileCount":"67","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-09 17:01:30","codes":[{"authorDate":"2020-10-30 01:03:36","commitOrder":16,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getSchemaContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","date":"2020-10-30 01:03:36","endLine":61,"groupId":"4636","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0e/a990b0312c7dd7c94a856590693b9b0295bd24.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getSchemaContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2020-11-09 17:01:30","commitOrder":16,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSchema schema = schemaContexts.getDefaultMetaData().getSchema();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schema, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2020-11-09 17:01:30","endLine":313,"groupId":"6525","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/36/b2654edca14b572646b9b062a4b1d6994cc993.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        PhysicalSchemaMetaData schemaMetaData = schemaContexts.getDefaultMetaData().getSchema();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schemaMetaData, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"09281f69a6dd01c12dd73dcc6675397062498f90","commitMessage":"@@@Rename PhysicalSchemaMetaData to ShardingSphereSchema (#8094)\n\n* Rename PhysicalSchemaMetaData to ShardingSphereSchema\n\n* Fix checkstyle","date":"2020-11-09 17:01:30","modifiedFileCount":"153","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-09 20:30:31","codes":[{"authorDate":"2020-11-09 20:30:31","commitOrder":17,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getMetaDataContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","date":"2020-11-09 20:30:31","endLine":61,"groupId":"4636","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/87/611d846bb8227d336f12baeabfcefb20e332aa.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getSchemaContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-11-09 20:30:31","commitOrder":17,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSchema schema = metaDataContexts.getDefaultMetaData().getSchema();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schema, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2020-11-09 20:30:31","endLine":313,"groupId":"6525","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/df/3b37c8e772f9a2f8d6a3063716ef8967d562ef.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSchema schema = schemaContexts.getDefaultMetaData().getSchema();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(schemaContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schema, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"a6b2375ce66834335447254a0309cba2b3f71510","commitMessage":"@@@Rename MetaDataContexts (#8101)\n\n* Rename MetaDataContexts\n\n* Rename package name","date":"2020-11-09 20:30:31","modifiedFileCount":"92","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-12-09 16:02:33","codes":[{"authorDate":"2020-11-09 20:30:31","commitOrder":18,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getMetaDataContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","date":"2020-11-09 20:30:31","endLine":61,"groupId":"4636","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/87/611d846bb8227d336f12baeabfcefb20e332aa.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getMetaDataContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2020-12-09 16:02:33","commitOrder":18,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSchema schema = metaDataContexts.getDefaultMetaData().getSchema();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schema, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2020-12-09 16:02:33","endLine":355,"groupId":"6525","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f2/3b22475941bd617d3c9c2f51322ea93a324598.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSchema schema = metaDataContexts.getDefaultMetaData().getSchema();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schema, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"}],"commitId":"0bf45cfda37c9e0e73ef9fcdf1ae15941db3af2a","commitMessage":"@@@Move logSQL to KernelProcessor (#8545)\n\n* Refactor ShardingSphereStatement and ShardingSpherePreparedStatement\n\n* Move logSQL to KernelProcessor","date":"2020-12-09 16:02:33","modifiedFileCount":"4","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-12-12 23:20:10","codes":[{"authorDate":"2020-12-12 23:20:10","commitOrder":19,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getMetaDataContexts().getMetaData(schemaName).getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","date":"2020-12-12 23:20:10","endLine":61,"groupId":"318","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/00/2d24635f8a59e9d7cdc60091d71916b11aa579.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getMetaDataContexts().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-12-12 23:20:10","commitOrder":19,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSchema schema = metaDataContexts.getDefaultMetaData().getSchema();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schema, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2020-12-12 23:20:10","endLine":358,"groupId":"5781","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/72/67d05e82540221e6c02c6b87d0492e0f23f0a6.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSchema schema = metaDataContexts.getDefaultMetaData().getSchema();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schema, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":351,"status":"M"}],"commitId":"efdd25f4b72a85c3040d089ff58f418141cc72b2","commitMessage":"@@@Split backend database type from same one to multiple with each schema (#8596)\n\n* Use database type map instead of single database type\n\n* Add MetaDataContexts.getAllSchemas\n\n* Remove MetaDataContexts.getDatabaseTypes()\n\n* Add ShardingSphereResource.databaseType\n\n* Remove MetaDataContexts.getDatabaseType()\n\n* Remove StandardMetaDataContexts.databaseTypes\n\n* Use MetaDataContexts.getDefaultMetaData\n\n* Use MetaDataContexts.getDefaultMetaData\n\n* Add MetaDataContexts.getMetaData(String schemaName)\n\n* Remove MetaDataContexts.getMetaDataMap()\n\n* refactor MetaDataContextsBuilder","date":"2020-12-12 23:20:10","modifiedFileCount":"59","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-12-12 23:20:10","codes":[{"authorDate":"2021-07-01 16:26:59","commitOrder":20,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getMetaDataContexts().getMetaData(schemaName).getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        \r\n        SQLStatementSchemaHolder.set(SQLUtil.getSchemaFromSQLStatement(sqlStatement));\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","date":"2021-07-01 16:26:59","endLine":65,"groupId":"318","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7b/a98b5f89b199eb292660b40f0d0cfeaec6962d.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getMetaDataContexts().getMetaData(schemaName).getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2020-12-12 23:20:10","commitOrder":20,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSchema schema = metaDataContexts.getDefaultMetaData().getSchema();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schema, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2020-12-12 23:20:10","endLine":358,"groupId":"5781","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/72/67d05e82540221e6c02c6b87d0492e0f23f0a6.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSchema schema = metaDataContexts.getDefaultMetaData().getSchema();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schema, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":351,"status":"N"}],"commitId":"5452894f2404d7037067b44c1473e8e0de418bb5","commitMessage":"@@@support mysql select statement execute with schema (#11076)\n\n* support mysql select statement execute with schema\n\n* fix rewrite test case\n\n* move sql statement schema holder class\n\n* optimize table token logic\n\n* fix test case error\n\n* add todo for SQLStatementSchemaHolder","date":"2021-07-01 16:26:59","modifiedFileCount":"11","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-07-02 20:44:49","codes":[{"authorDate":"2021-07-02 20:44:49","commitOrder":21,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getDefaultSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        MetaDataContexts metaDataContexts = ProxyContext.getInstance().getMetaDataContexts();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getMetaData(schemaName).getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(metaDataContexts.getMetaDataMap(), Collections.emptyList(), sqlStatement, schemaName);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatementContext, sql, backendConnection);\n    }\n","date":"2021-07-02 20:44:49","endLine":67,"groupId":"0","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9e/1bf6d8d6745c41d27306b85f4e2d50780e2db4.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(ProxyContext.getInstance().getMetaDataContexts().getMetaData(schemaName).getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        \r\n        SQLStatementSchemaHolder.set(SQLUtil.getSchemaFromSQLStatement(sqlStatement));\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatement, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2021-07-02 20:44:49","commitOrder":21,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(metaDataContexts.getMetaDataMap(), Collections.emptyList(), sqlStatement, DefaultSchema.LOGIC_NAME);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2021-07-02 20:44:49","endLine":367,"groupId":"10014","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4b/37404100569933b42233362236bb5686ea80e2.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSchema schema = metaDataContexts.getDefaultMetaData().getSchema();\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(schema, Collections.emptyList(), sqlStatement);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"}],"commitId":"bfb784c9a0e47fd147c8a654c2f0b2a1e86c2c27","commitMessage":"@@@extract SchemaAvailable interface & add validate for SelectStatement (#11091)\n\n* refactor SchemaAvailable interface & add validate for SelectStatement\n\n* add final for InsertStatementContext field\n\n* fix test case error\n\n* fix rewrite test case error\n\n* refactor context new instance method\n\n* optimize test case\n\n* fix test case\n\n* optimize logic\n\n* fix test case\n\n* fix checkstyle","date":"2021-07-02 20:44:49","modifiedFileCount":"44","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-08-09 16:45:36","codes":[{"authorDate":"2021-07-02 20:44:49","commitOrder":22,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getDefaultSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        MetaDataContexts metaDataContexts = ProxyContext.getInstance().getMetaDataContexts();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getMetaData(schemaName).getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(metaDataContexts.getMetaDataMap(), Collections.emptyList(), sqlStatement, schemaName);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatementContext, sql, backendConnection);\n    }\n","date":"2021-07-02 20:44:49","endLine":67,"groupId":"0","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9e/1bf6d8d6745c41d27306b85f4e2d50780e2db4.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getDefaultSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        MetaDataContexts metaDataContexts = ProxyContext.getInstance().getMetaDataContexts();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getMetaData(schemaName).getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(metaDataContexts.getMetaDataMap(), Collections.emptyList(), sqlStatement, schemaName);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatementContext, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"},{"authorDate":"2021-08-09 16:45:36","commitOrder":22,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getMetaData(connection.getSchemaName()).getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(metaDataContexts.getMetaDataMap(), Collections.emptyList(), sqlStatement,\n                connection.getSchemaName());\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2021-08-09 16:45:36","endLine":367,"groupId":"6601","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d2/e584707f24bd62d48cc852cbeea49da6462e7e.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getDefaultMetaData().getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(metaDataContexts.getMetaDataMap(), Collections.emptyList(), sqlStatement, DefaultSchema.LOGIC_NAME);\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"M"}],"commitId":"222aeb59cc07d5eb3edc858c68b9d95cc903bcec","commitMessage":"@@@JDBC-core module delete getDefaultMetaData() (#11714)\n\n* jdbc-core module delete getDefaultMetaData()\n\n* update\n\n* optimization","date":"2021-08-09 16:45:36","modifiedFileCount":"22","status":"M","submitter":"zhaojinchao"},{"authorTime":"2021-08-09 16:45:36","codes":[{"authorDate":"2021-08-15 02:33:31","commitOrder":23,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getDefaultSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        MetaDataContexts metaDataContexts = ProxyContext.getInstance().getContextManager().getMetaDataContexts();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getMetaData(schemaName).getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(metaDataContexts.getMetaDataMap(), Collections.emptyList(), sqlStatement, schemaName);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatementContext, sql, backendConnection);\n    }\n","date":"2021-08-15 02:33:31","endLine":67,"groupId":"3021","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/18/5a04a730c1265456f52ede048afeef364198dd.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getDefaultSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        MetaDataContexts metaDataContexts = ProxyContext.getInstance().getMetaDataContexts();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getMetaData(schemaName).getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(metaDataContexts.getMetaDataMap(), Collections.emptyList(), sqlStatement, schemaName);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatementContext, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2021-08-09 16:45:36","commitOrder":23,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getMetaData(connection.getSchemaName()).getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(metaDataContexts.getMetaDataMap(), Collections.emptyList(), sqlStatement,\n                connection.getSchemaName());\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2021-08-09 16:45:36","endLine":367,"groupId":"6601","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d2/e584707f24bd62d48cc852cbeea49da6462e7e.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getMetaData(connection.getSchemaName()).getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(metaDataContexts.getMetaDataMap(), Collections.emptyList(), sqlStatement,\n                connection.getSchemaName());\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"N"}],"commitId":"d6e424ba68c64ea1835a42b0f4b0fb7f69c95323","commitMessage":"@@@Add ContextManager (#11822)\n\n* Add ContextManager\n\n* Use ContextManager on GovernanceShardingSphereDataSource\n\n* Use ContextManager on ShardingSphereDataSource\n\n* Use ContextManager on ShardingSphereConnection\n\n* Use ContextManager on ShardingSphereConnection\n\n* Refactor AbstractBaseExecutorTest\n\n* Use ContextManager on proxy\n\n* Fix test case","date":"2021-08-15 02:33:31","modifiedFileCount":"118","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-09-16 19:04:46","codes":[{"authorDate":"2021-09-16 19:04:46","commitOrder":24,"curCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getDefaultSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        MetaDataContexts metaDataContexts = ProxyContext.getInstance().getContextManager().getMetaDataContexts();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getMetaData(schemaName).getResource().getDatabaseType()), metaDataContexts.getProps());\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(metaDataContexts.getMetaDataMap(), Collections.emptyList(), sqlStatement, schemaName);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatementContext, sql, backendConnection);\n    }\n","date":"2021-09-16 19:04:46","endLine":67,"groupId":"10852","id":37,"instanceNumber":1,"isCurCommit":1,"methodName":"MySQLComFieldListPacketExecutor","params":"(finalMySQLComFieldListPacketpacket@finalBackendConnectionbackendConnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/70/4f4708f06bb268f7c947f75aa5d62d5a57a83e.src","preCode":"    public MySQLComFieldListPacketExecutor(final MySQLComFieldListPacket packet, final BackendConnection backendConnection) {\n        this.packet = packet;\n        schemaName = backendConnection.getDefaultSchemaName();\n        String sql = String.format(SQL, packet.getTable(), schemaName);\n        MetaDataContexts metaDataContexts = ProxyContext.getInstance().getContextManager().getMetaDataContexts();\n        ShardingSphereSQLParserEngine sqlStatementParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getMetaData(schemaName).getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlStatementParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(metaDataContexts.getMetaDataMap(), Collections.emptyList(), sqlStatement, schemaName);\n        databaseCommunicationEngine = DatabaseCommunicationEngineFactory.getInstance().newTextProtocolInstance(sqlStatementContext, sql, backendConnection);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/text/fieldlist/MySQLComFieldListPacketExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2021-09-16 19:04:46","commitOrder":24,"curCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getMetaData(connection.getSchemaName()).getResource().getDatabaseType()), metaDataContexts.getProps());\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(metaDataContexts.getMetaDataMap(), Collections.emptyList(), sqlStatement,\n                connection.getSchemaName());\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","date":"2021-09-16 19:04:46","endLine":368,"groupId":"10852","id":38,"instanceNumber":2,"isCurCommit":1,"methodName":"createLogicSQL","params":"(finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3e/d72c39759071f2e50f6f8976676a23c825d5f0.src","preCode":"    private LogicSQL createLogicSQL(final String sql) {\n        ShardingSphereSQLParserEngine sqlParserEngine = new ShardingSphereSQLParserEngine(\n                DatabaseTypeRegistry.getTrunkDatabaseTypeName(metaDataContexts.getMetaData(connection.getSchemaName()).getResource().getDatabaseType()));\n        SQLStatement sqlStatement = sqlParserEngine.parse(sql, false);\n        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(metaDataContexts.getMetaDataMap(), Collections.emptyList(), sqlStatement,\n                connection.getSchemaName());\n        return new LogicSQL(sqlStatementContext, sql, Collections.emptyList());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"}],"commitId":"ac7987451dd9e7fbde62c5add0224ba740bb20c9","commitMessage":"@@@Support sql annotation analysis (#12280)\n\n* Sql comments parse.\n\n* Add test case.\n\n* Add empty line.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* Add switch for sql comment parsing.\n\n* fix properties error.\n\n* fix properties error.\n\n* Revert \"fix properties error.\"\n\nThis reverts commit 2b50a4ef\n\n* Revert \"fix properties error.\"\n\nThis reverts commit 2ca3ca86\n\n* Revert \"Add switch for sql comment parsing.\"\n\nThis reverts commit 70ed1039\n\n* add switch for sql comment parse\n\n* add switch for sql comment parse\n\n* add switch for sql comment parse\n\n* add switch for sql comment parse\n\n* fix review suggestions\n\n* fix review suggestions","date":"2021-09-16 19:04:46","modifiedFileCount":"57","status":"M","submitter":"tuichenchuxin"}]
