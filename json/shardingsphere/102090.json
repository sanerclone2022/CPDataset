[{"authorTime":"2021-07-01 17:47:55","codes":[{"authorDate":"2021-07-01 17:47:55","commitOrder":1,"curCode":"    private static void assertShardingTableRules(final SQLCaseAssertContext assertContext, final Collection<TableRuleSegment> actual, final List<ExpectedTableRule> expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exist.\"), actual);\n            int count = 0;\n            for (TableRuleSegment tableRuleSegment : actual) {\n                ExpectedTableRule expectedTableRule = expected.get(count);\n                TableRuleAssert.assertIs(assertContext, tableRuleSegment, expectedTableRule);\n                count++;\n            }\n        }\n    }\n","date":"2021-07-01 17:47:55","endLine":69,"groupId":"7868","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertShardingTableRules","params":"(finalSQLCaseAssertContextassertContext@finalCollection<TableRuleSegment>actual@finalList<ExpectedTableRule>expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d0/640c2af29b709b1401aa60ce030a91603a77e1.src","preCode":"    private static void assertShardingTableRules(final SQLCaseAssertContext assertContext, final Collection<TableRuleSegment> actual, final List<ExpectedTableRule> expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exist.\"), actual);\n            int count = 0;\n            for (TableRuleSegment tableRuleSegment : actual) {\n                ExpectedTableRule expectedTableRule = expected.get(count);\n                TableRuleAssert.assertIs(assertContext, tableRuleSegment, expectedTableRule);\n                count++;\n            }\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/distsql/rdl/create/impl/CreateShardingTableRuleStatementAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"},{"authorDate":"2021-07-01 17:47:55","commitOrder":1,"curCode":"    private static void assertShardingTableRules(final SQLCaseAssertContext assertContext, final Collection<TableRuleSegment> actual, final List<ExpectedTableRule> expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exist.\"), actual);\n            int count = 0;\n            for (TableRuleSegment tableRuleSegment : actual) {\n                ExpectedTableRule expectedTableRule = expected.get(count);\n                TableRuleAssert.assertIs(assertContext, tableRuleSegment, expectedTableRule);\n            }\n        }\n    }\n","date":"2021-07-01 17:47:55","endLine":68,"groupId":"7868","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertShardingTableRules","params":"(finalSQLCaseAssertContextassertContext@finalCollection<TableRuleSegment>actual@finalList<ExpectedTableRule>expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ea/6038d80e55fb72ad4c7d5e18c7a827a16467c0.src","preCode":"    private static void assertShardingTableRules(final SQLCaseAssertContext assertContext, final Collection<TableRuleSegment> actual, final List<ExpectedTableRule> expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exist.\"), actual);\n            int count = 0;\n            for (TableRuleSegment tableRuleSegment : actual) {\n                ExpectedTableRule expectedTableRule = expected.get(count);\n                TableRuleAssert.assertIs(assertContext, tableRuleSegment, expectedTableRule);\n            }\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/distsql/rdl/alter/impl/AlterShardingTableRuleStatementAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"}],"commitId":"71c18596a4427b83e98bd0cb6b32319e297d1373","commitMessage":"@@@add new parser test module (#11083)\n\n","date":"2021-07-01 17:47:55","modifiedFileCount":"0","status":"B","submitter":"totalo"},{"authorTime":"2021-08-13 18:15:48","codes":[{"authorDate":"2021-08-13 18:15:48","commitOrder":2,"curCode":"    private static void assertShardingTableRules(final SQLCaseAssertContext assertContext, final Collection<TableRuleSegment> actual, final List<ExpectedTableRule> expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual sharding table rule should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual sharding table rule should exist.\"), actual);\n            int count = 0;\n            for (TableRuleSegment tableRuleSegment : actual) {\n                ExpectedTableRule expectedTableRule = expected.get(count);\n                TableRuleAssert.assertIs(assertContext, tableRuleSegment, expectedTableRule);\n                count++;\n            }\n        }\n    }\n","date":"2021-08-13 18:15:48","endLine":69,"groupId":"102090","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertShardingTableRules","params":"(finalSQLCaseAssertContextassertContext@finalCollection<TableRuleSegment>actual@finalList<ExpectedTableRule>expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2f/222eb0d9dc3170dcc47085f70eaa1214aba4ee.src","preCode":"    private static void assertShardingTableRules(final SQLCaseAssertContext assertContext, final Collection<TableRuleSegment> actual, final List<ExpectedTableRule> expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exist.\"), actual);\n            int count = 0;\n            for (TableRuleSegment tableRuleSegment : actual) {\n                ExpectedTableRule expectedTableRule = expected.get(count);\n                TableRuleAssert.assertIs(assertContext, tableRuleSegment, expectedTableRule);\n                count++;\n            }\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/distsql/rdl/create/impl/CreateShardingTableRuleStatementAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2021-08-13 18:15:48","commitOrder":2,"curCode":"    private static void assertShardingTableRules(final SQLCaseAssertContext assertContext, final Collection<TableRuleSegment> actual, final List<ExpectedTableRule> expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual sharding table rule should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual sharding table rule should exist.\"), actual);\n            int count = 0;\n            for (TableRuleSegment tableRuleSegment : actual) {\n                ExpectedTableRule expectedTableRule = expected.get(count);\n                TableRuleAssert.assertIs(assertContext, tableRuleSegment, expectedTableRule);\n            }\n        }\n    }\n","date":"2021-08-13 18:15:48","endLine":68,"groupId":"102090","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertShardingTableRules","params":"(finalSQLCaseAssertContextassertContext@finalCollection<TableRuleSegment>actual@finalList<ExpectedTableRule>expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/49/d1640668be07272141b987ad9663fb39a99537.src","preCode":"    private static void assertShardingTableRules(final SQLCaseAssertContext assertContext, final Collection<TableRuleSegment> actual, final List<ExpectedTableRule> expected) {\n        if (null == expected) {\n            assertNull(assertContext.getText(\"Actual should not exist.\"), actual);\n        } else {\n            assertNotNull(assertContext.getText(\"Actual should exist.\"), actual);\n            int count = 0;\n            for (TableRuleSegment tableRuleSegment : actual) {\n                ExpectedTableRule expectedTableRule = expected.get(count);\n                TableRuleAssert.assertIs(assertContext, tableRuleSegment, expectedTableRule);\n            }\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/distsql/rdl/alter/impl/AlterShardingTableRuleStatementAssert.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"933ebab23d2431213c8fc9b01d9d096115eca4f8","commitMessage":"@@@Add advancedDistSQLStatement.  and implement 'preview sql'. (#11802)\n\n* Add advancedDistSQLStatement.  and implement 'preview sql'.\n\n* fix `Actual should not exist` syntax problem.","date":"2021-08-13 18:15:48","modifiedFileCount":"29","status":"M","submitter":"Raigor"}]
