[{"authorTime":"2021-08-31 17:26:16","codes":[{"authorDate":"2021-08-31 17:26:16","commitOrder":1,"curCode":"    public void assertSelectSchemataInSchemaWithoutDataSourceExecute() throws SQLException {\n        final String sql = \"SELECT SCHEMA_NAME, DEFAULT_CHARACTER_SET_NAME, DEFAULT_COLLATION_NAME, DEFAULT_ENCRYPTION FROM information_schema.SCHEMATA\";\n        final SQLStatement sqlStatement = new ShardingSphereSQLParserEngine(\"MySQL\").parse(sql, false);\n        Map<String, String> mockResultSetMap = new HashMap<>();\n        mockResultSetMap.put(\"SCHEMA_NAME\", \"demo_ds_0\");\n        mockResultSetMap.put(\"DEFAULT_CHARACTER_SET_NAME\", \"utf8mb4_0900_ai_ci\");\n        mockResultSetMap.put(\"DEFAULT_COLLATION_NAME\", \"utf8mb4\");\n        mockResultSetMap.put(\"DEFAULT_ENCRYPTION\", \"NO\");\n        mockResultSet(mockResultSetMap, false);\n        Map<String, ShardingSphereMetaData> metaDataMap = ProxyContext.getInstance().getContextManager().getMetaDataContexts().getMetaDataMap();\n        metaDataMap.put(\"sharding_db\", mock(ShardingSphereMetaData.class));\n        SelectInformationSchemataExecutor selectSchemataExecutor = new SelectInformationSchemataExecutor((SelectStatement) sqlStatement, sql);\n        selectSchemataExecutor.execute(mock(BackendConnection.class));\n        assertThat(selectSchemataExecutor.getQueryResultMetaData().getColumnCount(), is(mockResultSetMap.size()));\n        while (selectSchemataExecutor.getMergedResult().next()) {\n            assertThat(selectSchemataExecutor.getMergedResult().getValue(1, String.class), is(\"sharding_db\"));\n            assertThat(selectSchemataExecutor.getMergedResult().getValue(2, String.class), is(\"\"));\n            assertThat(selectSchemataExecutor.getMergedResult().getValue(3, String.class), is(\"\"));\n            assertThat(selectSchemataExecutor.getMergedResult().getValue(4, String.class), is(\"\"));\n        }\n    }\n","date":"2021-08-31 17:26:16","endLine":166,"groupId":"3297","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertSelectSchemataInSchemaWithoutDataSourceExecute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d7/8d3443b711c2a6bc3e84f3bb05ff354067f4b3.src","preCode":"    public void assertSelectSchemataInSchemaWithoutDataSourceExecute() throws SQLException {\n        final String sql = \"SELECT SCHEMA_NAME, DEFAULT_CHARACTER_SET_NAME, DEFAULT_COLLATION_NAME, DEFAULT_ENCRYPTION FROM information_schema.SCHEMATA\";\n        final SQLStatement sqlStatement = new ShardingSphereSQLParserEngine(\"MySQL\").parse(sql, false);\n        Map<String, String> mockResultSetMap = new HashMap<>();\n        mockResultSetMap.put(\"SCHEMA_NAME\", \"demo_ds_0\");\n        mockResultSetMap.put(\"DEFAULT_CHARACTER_SET_NAME\", \"utf8mb4_0900_ai_ci\");\n        mockResultSetMap.put(\"DEFAULT_COLLATION_NAME\", \"utf8mb4\");\n        mockResultSetMap.put(\"DEFAULT_ENCRYPTION\", \"NO\");\n        mockResultSet(mockResultSetMap, false);\n        Map<String, ShardingSphereMetaData> metaDataMap = ProxyContext.getInstance().getContextManager().getMetaDataContexts().getMetaDataMap();\n        metaDataMap.put(\"sharding_db\", mock(ShardingSphereMetaData.class));\n        SelectInformationSchemataExecutor selectSchemataExecutor = new SelectInformationSchemataExecutor((SelectStatement) sqlStatement, sql);\n        selectSchemataExecutor.execute(mock(BackendConnection.class));\n        assertThat(selectSchemataExecutor.getQueryResultMetaData().getColumnCount(), is(mockResultSetMap.size()));\n        while (selectSchemataExecutor.getMergedResult().next()) {\n            assertThat(selectSchemataExecutor.getMergedResult().getValue(1, String.class), is(\"sharding_db\"));\n            assertThat(selectSchemataExecutor.getMergedResult().getValue(2, String.class), is(\"\"));\n            assertThat(selectSchemataExecutor.getMergedResult().getValue(3, String.class), is(\"\"));\n            assertThat(selectSchemataExecutor.getMergedResult().getValue(4, String.class), is(\"\"));\n        }\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/information/SelectInformationExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"B"},{"authorDate":"2021-08-31 17:26:16","commitOrder":1,"curCode":"    public void assertDefaultExecute() throws SQLException {\n        final String sql = \"SELECT COUNT(*) AS support_ndb FROM information_schema.ENGINES WHERE Engine = 'ndbcluster'\";\n        Map<String, String> mockMap = new HashMap<>();\n        mockMap.put(\"support_ndb\", \"0\");\n        mockResultSet(mockMap, false);\n        Map<String, ShardingSphereMetaData> metaDataMap = ProxyContext.getInstance().getContextManager().getMetaDataContexts().getMetaDataMap();\n        metaDataMap.put(\"sharding_db\", getMetaData());\n        DefaultSelectInformationExecutor defaultSelectMetadataExecutor = new DefaultSelectInformationExecutor(sql);\n        defaultSelectMetadataExecutor.execute(mock(BackendConnection.class));\n        assertThat(defaultSelectMetadataExecutor.getQueryResultMetaData().getColumnCount(), is(mockMap.size()));\n        while (defaultSelectMetadataExecutor.getMergedResult().next()) {\n            assertThat(defaultSelectMetadataExecutor.getMergedResult().getValue(1, String.class), is(\"0\"));\n        }\n    }\n","date":"2021-08-31 17:26:16","endLine":191,"groupId":"3297","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertDefaultExecute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d7/8d3443b711c2a6bc3e84f3bb05ff354067f4b3.src","preCode":"    public void assertDefaultExecute() throws SQLException {\n        final String sql = \"SELECT COUNT(*) AS support_ndb FROM information_schema.ENGINES WHERE Engine = 'ndbcluster'\";\n        Map<String, String> mockMap = new HashMap<>();\n        mockMap.put(\"support_ndb\", \"0\");\n        mockResultSet(mockMap, false);\n        Map<String, ShardingSphereMetaData> metaDataMap = ProxyContext.getInstance().getContextManager().getMetaDataContexts().getMetaDataMap();\n        metaDataMap.put(\"sharding_db\", getMetaData());\n        DefaultSelectInformationExecutor defaultSelectMetadataExecutor = new DefaultSelectInformationExecutor(sql);\n        defaultSelectMetadataExecutor.execute(mock(BackendConnection.class));\n        assertThat(defaultSelectMetadataExecutor.getQueryResultMetaData().getColumnCount(), is(mockMap.size()));\n        while (defaultSelectMetadataExecutor.getMergedResult().next()) {\n            assertThat(defaultSelectMetadataExecutor.getMergedResult().getValue(1, String.class), is(\"0\"));\n        }\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/information/SelectInformationExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"B"}],"commitId":"f31465dc5ee4c8903ea47b0bf3dc94de293d579e","commitMessage":"@@@Support query of other tables of information_schema in Navicat (#12127)\n\n* Refactor select schemata;\nsupport \"ENGINES\".  \"FILES\".  \"VIEWS\".  \"COLUMNS\".  \"TABLES\".  \"PROFILING\".  \"TRIGGERS\" table\n\n* Rename the class in order to solve the problem that is not intuitive when comparing\n\n* Rename method.\n\n* Edit comment & replace array\n\n* modify table name.\n\n* Delete blank lines.","date":"2021-08-31 17:26:16","modifiedFileCount":"1","status":"B","submitter":"lanchengx"},{"authorTime":"2021-08-31 17:26:16","codes":[{"authorDate":"2021-09-16 19:04:46","commitOrder":2,"curCode":"    public void assertSelectSchemataInSchemaWithoutDataSourceExecute() throws SQLException {\n        final String sql = \"SELECT SCHEMA_NAME, DEFAULT_CHARACTER_SET_NAME, DEFAULT_COLLATION_NAME, DEFAULT_ENCRYPTION FROM information_schema.SCHEMATA\";\n        final SQLStatement sqlStatement = new ShardingSphereSQLParserEngine(\"MySQL\", new ConfigurationProperties(new Properties())).parse(sql, false);\n        Map<String, String> mockResultSetMap = new HashMap<>();\n        mockResultSetMap.put(\"SCHEMA_NAME\", \"demo_ds_0\");\n        mockResultSetMap.put(\"DEFAULT_CHARACTER_SET_NAME\", \"utf8mb4_0900_ai_ci\");\n        mockResultSetMap.put(\"DEFAULT_COLLATION_NAME\", \"utf8mb4\");\n        mockResultSetMap.put(\"DEFAULT_ENCRYPTION\", \"NO\");\n        mockResultSet(mockResultSetMap, false);\n        Map<String, ShardingSphereMetaData> metaDataMap = ProxyContext.getInstance().getContextManager().getMetaDataContexts().getMetaDataMap();\n        metaDataMap.put(\"sharding_db\", mock(ShardingSphereMetaData.class));\n        SelectInformationSchemataExecutor selectSchemataExecutor = new SelectInformationSchemataExecutor((SelectStatement) sqlStatement, sql);\n        selectSchemataExecutor.execute(mock(BackendConnection.class));\n        assertThat(selectSchemataExecutor.getQueryResultMetaData().getColumnCount(), is(mockResultSetMap.size()));\n        while (selectSchemataExecutor.getMergedResult().next()) {\n            assertThat(selectSchemataExecutor.getMergedResult().getValue(1, String.class), is(\"sharding_db\"));\n            assertThat(selectSchemataExecutor.getMergedResult().getValue(2, String.class), is(\"\"));\n            assertThat(selectSchemataExecutor.getMergedResult().getValue(3, String.class), is(\"\"));\n            assertThat(selectSchemataExecutor.getMergedResult().getValue(4, String.class), is(\"\"));\n        }\n    }\n","date":"2021-09-16 19:04:46","endLine":166,"groupId":"101015","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertSelectSchemataInSchemaWithoutDataSourceExecute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a6/1be52db00d332072c06fbce3ca16071ec73e8a.src","preCode":"    public void assertSelectSchemataInSchemaWithoutDataSourceExecute() throws SQLException {\n        final String sql = \"SELECT SCHEMA_NAME, DEFAULT_CHARACTER_SET_NAME, DEFAULT_COLLATION_NAME, DEFAULT_ENCRYPTION FROM information_schema.SCHEMATA\";\n        final SQLStatement sqlStatement = new ShardingSphereSQLParserEngine(\"MySQL\").parse(sql, false);\n        Map<String, String> mockResultSetMap = new HashMap<>();\n        mockResultSetMap.put(\"SCHEMA_NAME\", \"demo_ds_0\");\n        mockResultSetMap.put(\"DEFAULT_CHARACTER_SET_NAME\", \"utf8mb4_0900_ai_ci\");\n        mockResultSetMap.put(\"DEFAULT_COLLATION_NAME\", \"utf8mb4\");\n        mockResultSetMap.put(\"DEFAULT_ENCRYPTION\", \"NO\");\n        mockResultSet(mockResultSetMap, false);\n        Map<String, ShardingSphereMetaData> metaDataMap = ProxyContext.getInstance().getContextManager().getMetaDataContexts().getMetaDataMap();\n        metaDataMap.put(\"sharding_db\", mock(ShardingSphereMetaData.class));\n        SelectInformationSchemataExecutor selectSchemataExecutor = new SelectInformationSchemataExecutor((SelectStatement) sqlStatement, sql);\n        selectSchemataExecutor.execute(mock(BackendConnection.class));\n        assertThat(selectSchemataExecutor.getQueryResultMetaData().getColumnCount(), is(mockResultSetMap.size()));\n        while (selectSchemataExecutor.getMergedResult().next()) {\n            assertThat(selectSchemataExecutor.getMergedResult().getValue(1, String.class), is(\"sharding_db\"));\n            assertThat(selectSchemataExecutor.getMergedResult().getValue(2, String.class), is(\"\"));\n            assertThat(selectSchemataExecutor.getMergedResult().getValue(3, String.class), is(\"\"));\n            assertThat(selectSchemataExecutor.getMergedResult().getValue(4, String.class), is(\"\"));\n        }\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/information/SelectInformationExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2021-08-31 17:26:16","commitOrder":2,"curCode":"    public void assertDefaultExecute() throws SQLException {\n        final String sql = \"SELECT COUNT(*) AS support_ndb FROM information_schema.ENGINES WHERE Engine = 'ndbcluster'\";\n        Map<String, String> mockMap = new HashMap<>();\n        mockMap.put(\"support_ndb\", \"0\");\n        mockResultSet(mockMap, false);\n        Map<String, ShardingSphereMetaData> metaDataMap = ProxyContext.getInstance().getContextManager().getMetaDataContexts().getMetaDataMap();\n        metaDataMap.put(\"sharding_db\", getMetaData());\n        DefaultSelectInformationExecutor defaultSelectMetadataExecutor = new DefaultSelectInformationExecutor(sql);\n        defaultSelectMetadataExecutor.execute(mock(BackendConnection.class));\n        assertThat(defaultSelectMetadataExecutor.getQueryResultMetaData().getColumnCount(), is(mockMap.size()));\n        while (defaultSelectMetadataExecutor.getMergedResult().next()) {\n            assertThat(defaultSelectMetadataExecutor.getMergedResult().getValue(1, String.class), is(\"0\"));\n        }\n    }\n","date":"2021-08-31 17:26:16","endLine":191,"groupId":"101015","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertDefaultExecute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d7/8d3443b711c2a6bc3e84f3bb05ff354067f4b3.src","preCode":"    public void assertDefaultExecute() throws SQLException {\n        final String sql = \"SELECT COUNT(*) AS support_ndb FROM information_schema.ENGINES WHERE Engine = 'ndbcluster'\";\n        Map<String, String> mockMap = new HashMap<>();\n        mockMap.put(\"support_ndb\", \"0\");\n        mockResultSet(mockMap, false);\n        Map<String, ShardingSphereMetaData> metaDataMap = ProxyContext.getInstance().getContextManager().getMetaDataContexts().getMetaDataMap();\n        metaDataMap.put(\"sharding_db\", getMetaData());\n        DefaultSelectInformationExecutor defaultSelectMetadataExecutor = new DefaultSelectInformationExecutor(sql);\n        defaultSelectMetadataExecutor.execute(mock(BackendConnection.class));\n        assertThat(defaultSelectMetadataExecutor.getQueryResultMetaData().getColumnCount(), is(mockMap.size()));\n        while (defaultSelectMetadataExecutor.getMergedResult().next()) {\n            assertThat(defaultSelectMetadataExecutor.getMergedResult().getValue(1, String.class), is(\"0\"));\n        }\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/information/SelectInformationExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"N"}],"commitId":"ac7987451dd9e7fbde62c5add0224ba740bb20c9","commitMessage":"@@@Support sql annotation analysis (#12280)\n\n* Sql comments parse.\n\n* Add test case.\n\n* Add empty line.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* fix review suggestion.\n\n* Add switch for sql comment parsing.\n\n* fix properties error.\n\n* fix properties error.\n\n* Revert \"fix properties error.\"\n\nThis reverts commit 2b50a4ef\n\n* Revert \"fix properties error.\"\n\nThis reverts commit 2ca3ca86\n\n* Revert \"Add switch for sql comment parsing.\"\n\nThis reverts commit 70ed1039\n\n* add switch for sql comment parse\n\n* add switch for sql comment parse\n\n* add switch for sql comment parse\n\n* add switch for sql comment parse\n\n* fix review suggestions\n\n* fix review suggestions","date":"2021-09-16 19:04:46","modifiedFileCount":"57","status":"M","submitter":"tuichenchuxin"}]
