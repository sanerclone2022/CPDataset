[{"authorTime":"2020-10-11 18:46:54","codes":[{"authorDate":"2020-10-11 18:46:54","commitOrder":1,"curCode":"    private void assertNewInstance(final DeleteStatement deleteStatement) {\n        when(whereSegment.getExpr()).thenReturn(mock(ExpressionSegment.class));\n        SimpleTableSegment table1 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_1\"));\n        SimpleTableSegment table2 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_2\"));\n        JoinTableSegment tableSegment = new JoinTableSegment();\n        tableSegment.setLeft(table1);\n        tableSegment.setRight(table2);\n        deleteStatement.setWhere(whereSegment);\n        deleteStatement.setTableSegment(tableSegment);\n        DeleteStatementContext actual = new DeleteStatementContext(deleteStatement);\n        assertTrue(actual.toString().startsWith(String.format(\"%s(super\", DeleteStatementContext.class.getSimpleName())));\n        assertThat(actual.getTablesContext().getTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n    }\n","date":"2020-10-11 18:46:54","endLine":91,"groupId":"8644","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertNewInstance","params":"(finalDeleteStatementdeleteStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/40/25bacd87a6c33da3cc17d931f9ffdc6a047234.src","preCode":"    private void assertNewInstance(final DeleteStatement deleteStatement) {\n        when(whereSegment.getExpr()).thenReturn(mock(ExpressionSegment.class));\n        SimpleTableSegment table1 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_1\"));\n        SimpleTableSegment table2 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_2\"));\n        JoinTableSegment tableSegment = new JoinTableSegment();\n        tableSegment.setLeft(table1);\n        tableSegment.setRight(table2);\n        deleteStatement.setWhere(whereSegment);\n        deleteStatement.setTableSegment(tableSegment);\n        DeleteStatementContext actual = new DeleteStatementContext(deleteStatement);\n        assertTrue(actual.toString().startsWith(String.format(\"%s(super\", DeleteStatementContext.class.getSimpleName())));\n        assertThat(actual.getTablesContext().getTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/statement/dml/DeleteStatementContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2020-10-11 18:46:54","commitOrder":1,"curCode":"    public void assertNewInstance() {\n        when(columnSegment.getOwner()).thenReturn(Optional.of(new OwnerSegment(0, 0, new IdentifierValue(\"tbl_2\"))));\n        BinaryOperationExpression expression = new BinaryOperationExpression(0, 0, columnSegment, null, null, null);\n        when(whereSegment.getExpr()).thenReturn(expression);\n        SimpleTableSegment table1 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_1\"));\n        SimpleTableSegment table2 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_2\"));\n        List<SimpleTableSegment> tables = new LinkedList<>();\n        tables.add(table1);\n        tables.add(table2);\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(table1);\n        joinTableSegment.setRight(table2);\n        UpdateStatement updateStatement = new MySQLUpdateStatement();\n        updateStatement.setWhere(whereSegment);\n        updateStatement.setTableSegment(joinTableSegment);\n        UpdateStatementContext actual = new UpdateStatementContext(updateStatement);\n        assertTrue(actual.toString().startsWith(String.format(\"%s(super\", UpdateStatementContext.class.getSimpleName())));\n        assertThat(actual.getTablesContext().getTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\", \"tbl_2\")));\n    }\n","date":"2020-10-11 18:46:54","endLine":75,"groupId":"8644","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertNewInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8e/1fb38ef6f1df4fe8dd61078b15155cd24a30e8.src","preCode":"    public void assertNewInstance() {\n        when(columnSegment.getOwner()).thenReturn(Optional.of(new OwnerSegment(0, 0, new IdentifierValue(\"tbl_2\"))));\n        BinaryOperationExpression expression = new BinaryOperationExpression(0, 0, columnSegment, null, null, null);\n        when(whereSegment.getExpr()).thenReturn(expression);\n        SimpleTableSegment table1 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_1\"));\n        SimpleTableSegment table2 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_2\"));\n        List<SimpleTableSegment> tables = new LinkedList<>();\n        tables.add(table1);\n        tables.add(table2);\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(table1);\n        joinTableSegment.setRight(table2);\n        UpdateStatement updateStatement = new MySQLUpdateStatement();\n        updateStatement.setWhere(whereSegment);\n        updateStatement.setTableSegment(joinTableSegment);\n        UpdateStatementContext actual = new UpdateStatementContext(updateStatement);\n        assertTrue(actual.toString().startsWith(String.format(\"%s(super\", UpdateStatementContext.class.getSimpleName())));\n        assertThat(actual.getTablesContext().getTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\", \"tbl_2\")));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/statement/dml/UpdateStatementContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"B"}],"commitId":"cc40a511b9a93c556bd4ec53665239bd8c6790af","commitMessage":"@@@Move shardingsphere-infra-binder to infra module and rename (#7744)\n\n* Move shardingsphere-infra-binder to infra module and rename\n\n* Move shardingsphere-infra-binder to infra module and rename\n\n* rename package name","date":"2020-10-11 18:46:54","modifiedFileCount":"224","status":"B","submitter":"Liang Zhang"},{"authorTime":"2020-10-12 14:38:12","codes":[{"authorDate":"2020-10-12 14:38:12","commitOrder":2,"curCode":"    private void assertNewInstance(final DeleteStatement deleteStatement) {\n        when(whereSegment.getExpr()).thenReturn(mock(ExpressionSegment.class));\n        SimpleTableSegment table1 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_1\"));\n        SimpleTableSegment table2 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_2\"));\n        JoinTableSegment tableSegment = new JoinTableSegment();\n        tableSegment.setLeft(table1);\n        tableSegment.setRight(table2);\n        deleteStatement.setWhere(whereSegment);\n        deleteStatement.setTableSegment(tableSegment);\n        DeleteStatementContext actual = new DeleteStatementContext(deleteStatement);\n        assertThat(actual.getTablesContext().getTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n    }\n","date":"2020-10-12 14:38:12","endLine":89,"groupId":"2196","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertNewInstance","params":"(finalDeleteStatementdeleteStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/eb/8e2d0bd0ab27c03f194898380e17bc797d60e8.src","preCode":"    private void assertNewInstance(final DeleteStatement deleteStatement) {\n        when(whereSegment.getExpr()).thenReturn(mock(ExpressionSegment.class));\n        SimpleTableSegment table1 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_1\"));\n        SimpleTableSegment table2 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_2\"));\n        JoinTableSegment tableSegment = new JoinTableSegment();\n        tableSegment.setLeft(table1);\n        tableSegment.setRight(table2);\n        deleteStatement.setWhere(whereSegment);\n        deleteStatement.setTableSegment(tableSegment);\n        DeleteStatementContext actual = new DeleteStatementContext(deleteStatement);\n        assertTrue(actual.toString().startsWith(String.format(\"%s(super\", DeleteStatementContext.class.getSimpleName())));\n        assertThat(actual.getTablesContext().getTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/statement/dml/DeleteStatementContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2020-10-12 14:38:12","commitOrder":2,"curCode":"    public void assertNewInstance() {\n        when(columnSegment.getOwner()).thenReturn(Optional.of(new OwnerSegment(0, 0, new IdentifierValue(\"tbl_2\"))));\n        BinaryOperationExpression expression = new BinaryOperationExpression(0, 0, columnSegment, null, null, null);\n        when(whereSegment.getExpr()).thenReturn(expression);\n        SimpleTableSegment table1 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_1\"));\n        SimpleTableSegment table2 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_2\"));\n        List<SimpleTableSegment> tables = new LinkedList<>();\n        tables.add(table1);\n        tables.add(table2);\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(table1);\n        joinTableSegment.setRight(table2);\n        UpdateStatement updateStatement = new MySQLUpdateStatement();\n        updateStatement.setWhere(whereSegment);\n        updateStatement.setTableSegment(joinTableSegment);\n        UpdateStatementContext actual = new UpdateStatementContext(updateStatement);\n        assertThat(actual.getTablesContext().getTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\", \"tbl_2\")));\n    }\n","date":"2020-10-12 14:38:12","endLine":73,"groupId":"8644","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertNewInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/af/678dd5fa19a6d0bdeac0ab4a6e701f5ec32738.src","preCode":"    public void assertNewInstance() {\n        when(columnSegment.getOwner()).thenReturn(Optional.of(new OwnerSegment(0, 0, new IdentifierValue(\"tbl_2\"))));\n        BinaryOperationExpression expression = new BinaryOperationExpression(0, 0, columnSegment, null, null, null);\n        when(whereSegment.getExpr()).thenReturn(expression);\n        SimpleTableSegment table1 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_1\"));\n        SimpleTableSegment table2 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_2\"));\n        List<SimpleTableSegment> tables = new LinkedList<>();\n        tables.add(table1);\n        tables.add(table2);\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(table1);\n        joinTableSegment.setRight(table2);\n        UpdateStatement updateStatement = new MySQLUpdateStatement();\n        updateStatement.setWhere(whereSegment);\n        updateStatement.setTableSegment(joinTableSegment);\n        UpdateStatementContext actual = new UpdateStatementContext(updateStatement);\n        assertTrue(actual.toString().startsWith(String.format(\"%s(super\", UpdateStatementContext.class.getSimpleName())));\n        assertThat(actual.getTablesContext().getTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\", \"tbl_2\")));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/statement/dml/UpdateStatementContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"1557a8d12cf102dc57d85b9e40615a20abc52737","commitMessage":"@@@Change log SQLStatementContext to SQLStatement (#7748)\n\n* Remove SQLStatementContext.isReadOnly\n\n* Change log SQLStatementContext to SQLStatement","date":"2020-10-12 14:38:12","modifiedFileCount":"14","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-04-13 11:57:44","codes":[{"authorDate":"2020-10-12 14:38:12","commitOrder":3,"curCode":"    private void assertNewInstance(final DeleteStatement deleteStatement) {\n        when(whereSegment.getExpr()).thenReturn(mock(ExpressionSegment.class));\n        SimpleTableSegment table1 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_1\"));\n        SimpleTableSegment table2 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_2\"));\n        JoinTableSegment tableSegment = new JoinTableSegment();\n        tableSegment.setLeft(table1);\n        tableSegment.setRight(table2);\n        deleteStatement.setWhere(whereSegment);\n        deleteStatement.setTableSegment(tableSegment);\n        DeleteStatementContext actual = new DeleteStatementContext(deleteStatement);\n        assertThat(actual.getTablesContext().getTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n    }\n","date":"2020-10-12 14:38:12","endLine":89,"groupId":"2196","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertNewInstance","params":"(finalDeleteStatementdeleteStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/eb/8e2d0bd0ab27c03f194898380e17bc797d60e8.src","preCode":"    private void assertNewInstance(final DeleteStatement deleteStatement) {\n        when(whereSegment.getExpr()).thenReturn(mock(ExpressionSegment.class));\n        SimpleTableSegment table1 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_1\"));\n        SimpleTableSegment table2 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_2\"));\n        JoinTableSegment tableSegment = new JoinTableSegment();\n        tableSegment.setLeft(table1);\n        tableSegment.setRight(table2);\n        deleteStatement.setWhere(whereSegment);\n        deleteStatement.setTableSegment(tableSegment);\n        DeleteStatementContext actual = new DeleteStatementContext(deleteStatement);\n        assertThat(actual.getTablesContext().getTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/statement/dml/DeleteStatementContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"},{"authorDate":"2021-04-13 11:57:44","commitOrder":3,"curCode":"    public void assertNewInstance() {\n        when(columnSegment.getOwner()).thenReturn(Optional.of(new OwnerSegment(0, 0, new IdentifierValue(\"tbl_2\"))));\n        BinaryOperationExpression expression = new BinaryOperationExpression(0, 0, columnSegment, null, null, null);\n        when(whereSegment.getExpr()).thenReturn(expression);\n        SimpleTableSegment table1 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_1\"));\n        SimpleTableSegment table2 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_2\"));\n        List<SimpleTableSegment> tables = new LinkedList<>();\n        tables.add(table1);\n        tables.add(table2);\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(table1);\n        joinTableSegment.setRight(table2);\n        UpdateStatement updateStatement = new MySQLUpdateStatement();\n        updateStatement.setWhere(whereSegment);\n        updateStatement.setTableSegment(joinTableSegment);\n        updateStatement.setSetAssignment(new SetAssignmentSegment(0, 0, Collections.emptyList()));\n        UpdateStatementContext actual = new UpdateStatementContext(updateStatement);\n        assertThat(actual.getTablesContext().getTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\", \"tbl_2\")));\n    }\n","date":"2021-04-13 11:57:44","endLine":76,"groupId":"2727","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertNewInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e8/978dc0b07a8d73577655deb0062ccd3ad80d26.src","preCode":"    public void assertNewInstance() {\n        when(columnSegment.getOwner()).thenReturn(Optional.of(new OwnerSegment(0, 0, new IdentifierValue(\"tbl_2\"))));\n        BinaryOperationExpression expression = new BinaryOperationExpression(0, 0, columnSegment, null, null, null);\n        when(whereSegment.getExpr()).thenReturn(expression);\n        SimpleTableSegment table1 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_1\"));\n        SimpleTableSegment table2 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_2\"));\n        List<SimpleTableSegment> tables = new LinkedList<>();\n        tables.add(table1);\n        tables.add(table2);\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(table1);\n        joinTableSegment.setRight(table2);\n        UpdateStatement updateStatement = new MySQLUpdateStatement();\n        updateStatement.setWhere(whereSegment);\n        updateStatement.setTableSegment(joinTableSegment);\n        UpdateStatementContext actual = new UpdateStatementContext(updateStatement);\n        assertThat(actual.getTablesContext().getTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\", \"tbl_2\")));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/statement/dml/UpdateStatementContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"2c1707039bc16db676f6be54e791af04d4dde41b","commitMessage":"@@@fix wrong table rewrite in UPDATE statement SET clause (#10056)\n\n* fix wrong table rewrite in UPDATE statement SET clause\n\n* improve unit test for update statement","date":"2021-04-13 11:57:44","modifiedFileCount":"2","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-07-05 14:48:43","codes":[{"authorDate":"2021-07-05 14:48:43","commitOrder":4,"curCode":"    private void assertNewInstance(final DeleteStatement deleteStatement) {\n        when(whereSegment.getExpr()).thenReturn(mock(ExpressionSegment.class));\n        SimpleTableSegment table1 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_1\")));\n        SimpleTableSegment table2 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_2\")));\n        JoinTableSegment tableSegment = new JoinTableSegment();\n        tableSegment.setLeft(table1);\n        tableSegment.setRight(table2);\n        deleteStatement.setWhere(whereSegment);\n        deleteStatement.setTableSegment(tableSegment);\n        DeleteStatementContext actual = new DeleteStatementContext(deleteStatement);\n        assertThat(actual.getTablesContext().getTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n    }\n","date":"2021-07-05 14:48:43","endLine":90,"groupId":"2196","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertNewInstance","params":"(finalDeleteStatementdeleteStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9c/54d0db4b15bc770dfc962a2f3f92b2006d56fe.src","preCode":"    private void assertNewInstance(final DeleteStatement deleteStatement) {\n        when(whereSegment.getExpr()).thenReturn(mock(ExpressionSegment.class));\n        SimpleTableSegment table1 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_1\"));\n        SimpleTableSegment table2 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_2\"));\n        JoinTableSegment tableSegment = new JoinTableSegment();\n        tableSegment.setLeft(table1);\n        tableSegment.setRight(table2);\n        deleteStatement.setWhere(whereSegment);\n        deleteStatement.setTableSegment(tableSegment);\n        DeleteStatementContext actual = new DeleteStatementContext(deleteStatement);\n        assertThat(actual.getTablesContext().getTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/statement/dml/DeleteStatementContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2021-07-05 14:48:43","commitOrder":4,"curCode":"    public void assertNewInstance() {\n        when(columnSegment.getOwner()).thenReturn(Optional.of(new OwnerSegment(0, 0, new IdentifierValue(\"tbl_2\"))));\n        BinaryOperationExpression expression = new BinaryOperationExpression(0, 0, columnSegment, null, null, null);\n        when(whereSegment.getExpr()).thenReturn(expression);\n        SimpleTableSegment table1 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_1\")));\n        SimpleTableSegment table2 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_2\")));\n        List<SimpleTableSegment> tables = new LinkedList<>();\n        tables.add(table1);\n        tables.add(table2);\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(table1);\n        joinTableSegment.setRight(table2);\n        UpdateStatement updateStatement = new MySQLUpdateStatement();\n        updateStatement.setWhere(whereSegment);\n        updateStatement.setTableSegment(joinTableSegment);\n        updateStatement.setSetAssignment(new SetAssignmentSegment(0, 0, Collections.emptyList()));\n        UpdateStatementContext actual = new UpdateStatementContext(updateStatement);\n        assertThat(actual.getTablesContext().getTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\", \"tbl_2\")));\n    }\n","date":"2021-07-05 14:48:43","endLine":77,"groupId":"2727","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertNewInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/31/9710e08e3eff2e4b393c4954470d23c82b2d40.src","preCode":"    public void assertNewInstance() {\n        when(columnSegment.getOwner()).thenReturn(Optional.of(new OwnerSegment(0, 0, new IdentifierValue(\"tbl_2\"))));\n        BinaryOperationExpression expression = new BinaryOperationExpression(0, 0, columnSegment, null, null, null);\n        when(whereSegment.getExpr()).thenReturn(expression);\n        SimpleTableSegment table1 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_1\"));\n        SimpleTableSegment table2 = new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl_2\"));\n        List<SimpleTableSegment> tables = new LinkedList<>();\n        tables.add(table1);\n        tables.add(table2);\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(table1);\n        joinTableSegment.setRight(table2);\n        UpdateStatement updateStatement = new MySQLUpdateStatement();\n        updateStatement.setWhere(whereSegment);\n        updateStatement.setTableSegment(joinTableSegment);\n        updateStatement.setSetAssignment(new SetAssignmentSegment(0, 0, Collections.emptyList()));\n        UpdateStatementContext actual = new UpdateStatementContext(updateStatement);\n        assertThat(actual.getTablesContext().getTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\", \"tbl_2\")));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/statement/dml/UpdateStatementContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"bd4980624aaa0c9fb3c9c87e260177715f835ede","commitMessage":"@@@support sql with schema for all features (#11150)\n\n* support sql with schema for all features\n\n* optimize logic\n\n* fix test case\n\n* fix multi remove token rewrite error\n\n* correct some test case param\n\n* optimize remove token generate\n\n* optimize remove token generate","date":"2021-07-05 14:48:43","modifiedFileCount":"64","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-08-23 16:05:44","codes":[{"authorDate":"2021-08-23 16:05:44","commitOrder":5,"curCode":"    private void assertNewInstance(final DeleteStatement deleteStatement) {\n        when(whereSegment.getExpr()).thenReturn(mock(ExpressionSegment.class));\n        SimpleTableSegment table1 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_1\")));\n        SimpleTableSegment table2 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_2\")));\n        JoinTableSegment tableSegment = new JoinTableSegment();\n        tableSegment.setLeft(table1);\n        tableSegment.setRight(table2);\n        deleteStatement.setWhere(whereSegment);\n        deleteStatement.setTableSegment(tableSegment);\n        DeleteStatementContext actual = new DeleteStatementContext(deleteStatement);\n        assertThat(actual.getTablesContext().getTableNames(), is(new HashSet<>(Arrays.asList(\"tbl_1\", \"tbl_2\"))));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n    }\n","date":"2021-08-23 16:05:44","endLine":91,"groupId":"13999","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"assertNewInstance","params":"(finalDeleteStatementdeleteStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f3/aa1b670170ba3e7be1b944ad3df0ca1398c188.src","preCode":"    private void assertNewInstance(final DeleteStatement deleteStatement) {\n        when(whereSegment.getExpr()).thenReturn(mock(ExpressionSegment.class));\n        SimpleTableSegment table1 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_1\")));\n        SimpleTableSegment table2 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_2\")));\n        JoinTableSegment tableSegment = new JoinTableSegment();\n        tableSegment.setLeft(table1);\n        tableSegment.setRight(table2);\n        deleteStatement.setWhere(whereSegment);\n        deleteStatement.setTableSegment(tableSegment);\n        DeleteStatementContext actual = new DeleteStatementContext(deleteStatement);\n        assertThat(actual.getTablesContext().getTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/statement/dml/DeleteStatementContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2021-08-23 16:05:44","commitOrder":5,"curCode":"    public void assertNewInstance() {\n        when(columnSegment.getOwner()).thenReturn(Optional.of(new OwnerSegment(0, 0, new IdentifierValue(\"tbl_2\"))));\n        BinaryOperationExpression expression = new BinaryOperationExpression(0, 0, columnSegment, null, null, null);\n        when(whereSegment.getExpr()).thenReturn(expression);\n        SimpleTableSegment table1 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_1\")));\n        SimpleTableSegment table2 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_2\")));\n        List<SimpleTableSegment> tables = new LinkedList<>();\n        tables.add(table1);\n        tables.add(table2);\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(table1);\n        joinTableSegment.setRight(table2);\n        UpdateStatement updateStatement = new MySQLUpdateStatement();\n        updateStatement.setWhere(whereSegment);\n        updateStatement.setTableSegment(joinTableSegment);\n        updateStatement.setSetAssignment(new SetAssignmentSegment(0, 0, Collections.emptyList()));\n        UpdateStatementContext actual = new UpdateStatementContext(updateStatement);\n        assertThat(actual.getTablesContext().getTableNames(), is(new HashSet<>(Arrays.asList(\"tbl_1\", \"tbl_2\"))));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\", \"tbl_2\")));\n    }\n","date":"2021-08-23 16:05:44","endLine":78,"groupId":"2727","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"assertNewInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/48/cfa4e8704c197217eacfb57ad5e8c8cae460e3.src","preCode":"    public void assertNewInstance() {\n        when(columnSegment.getOwner()).thenReturn(Optional.of(new OwnerSegment(0, 0, new IdentifierValue(\"tbl_2\"))));\n        BinaryOperationExpression expression = new BinaryOperationExpression(0, 0, columnSegment, null, null, null);\n        when(whereSegment.getExpr()).thenReturn(expression);\n        SimpleTableSegment table1 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_1\")));\n        SimpleTableSegment table2 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_2\")));\n        List<SimpleTableSegment> tables = new LinkedList<>();\n        tables.add(table1);\n        tables.add(table2);\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(table1);\n        joinTableSegment.setRight(table2);\n        UpdateStatement updateStatement = new MySQLUpdateStatement();\n        updateStatement.setWhere(whereSegment);\n        updateStatement.setTableSegment(joinTableSegment);\n        updateStatement.setSetAssignment(new SetAssignmentSegment(0, 0, Collections.emptyList()));\n        UpdateStatementContext actual = new UpdateStatementContext(updateStatement);\n        assertThat(actual.getTablesContext().getTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\", \"tbl_2\")));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/statement/dml/UpdateStatementContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"29b4fabfded8b6ca3e9df1dd8866c32393f2855d","commitMessage":"@@@optimize table context (#11949)\n\n","date":"2021-08-23 16:05:44","modifiedFileCount":"9","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-09-15 16:43:12","codes":[{"authorDate":"2021-09-15 16:43:12","commitOrder":6,"curCode":"    private void assertNewInstance(final DeleteStatement deleteStatement) {\n        when(whereSegment.getExpr()).thenReturn(mock(ExpressionSegment.class));\n        SimpleTableSegment table1 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_1\")));\n        SimpleTableSegment table2 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_2\")));\n        JoinTableSegment tableSegment = new JoinTableSegment();\n        tableSegment.setLeft(table1);\n        tableSegment.setRight(table2);\n        deleteStatement.setWhere(whereSegment);\n        deleteStatement.setTableSegment(tableSegment);\n        DeleteStatementContext actual = new DeleteStatementContext(deleteStatement, DefaultSchema.LOGIC_NAME);\n        assertThat(actual.getTablesContext().getTableNames(), is(new HashSet<>(Arrays.asList(\"tbl_1\", \"tbl_2\"))));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n    }\n","date":"2021-09-15 16:43:12","endLine":92,"groupId":"101789","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"assertNewInstance","params":"(finalDeleteStatementdeleteStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8c/05390d5f29193627a545df7367919c461e56bb.src","preCode":"    private void assertNewInstance(final DeleteStatement deleteStatement) {\n        when(whereSegment.getExpr()).thenReturn(mock(ExpressionSegment.class));\n        SimpleTableSegment table1 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_1\")));\n        SimpleTableSegment table2 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_2\")));\n        JoinTableSegment tableSegment = new JoinTableSegment();\n        tableSegment.setLeft(table1);\n        tableSegment.setRight(table2);\n        deleteStatement.setWhere(whereSegment);\n        deleteStatement.setTableSegment(tableSegment);\n        DeleteStatementContext actual = new DeleteStatementContext(deleteStatement);\n        assertThat(actual.getTablesContext().getTableNames(), is(new HashSet<>(Arrays.asList(\"tbl_1\", \"tbl_2\"))));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\")));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/statement/dml/DeleteStatementContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2021-09-15 16:43:12","commitOrder":6,"curCode":"    public void assertNewInstance() {\n        when(columnSegment.getOwner()).thenReturn(Optional.of(new OwnerSegment(0, 0, new IdentifierValue(\"tbl_2\"))));\n        BinaryOperationExpression expression = new BinaryOperationExpression(0, 0, columnSegment, null, null, null);\n        when(whereSegment.getExpr()).thenReturn(expression);\n        SimpleTableSegment table1 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_1\")));\n        SimpleTableSegment table2 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_2\")));\n        List<SimpleTableSegment> tables = new LinkedList<>();\n        tables.add(table1);\n        tables.add(table2);\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(table1);\n        joinTableSegment.setRight(table2);\n        UpdateStatement updateStatement = new MySQLUpdateStatement();\n        updateStatement.setWhere(whereSegment);\n        updateStatement.setTableSegment(joinTableSegment);\n        updateStatement.setSetAssignment(new SetAssignmentSegment(0, 0, Collections.emptyList()));\n        UpdateStatementContext actual = new UpdateStatementContext(updateStatement, DefaultSchema.LOGIC_NAME);\n        assertThat(actual.getTablesContext().getTableNames(), is(new HashSet<>(Arrays.asList(\"tbl_1\", \"tbl_2\"))));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\", \"tbl_2\")));\n    }\n","date":"2021-09-15 16:43:12","endLine":79,"groupId":"101789","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"assertNewInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ec/642775cc09659f5515e73610ce4ff981e0572e.src","preCode":"    public void assertNewInstance() {\n        when(columnSegment.getOwner()).thenReturn(Optional.of(new OwnerSegment(0, 0, new IdentifierValue(\"tbl_2\"))));\n        BinaryOperationExpression expression = new BinaryOperationExpression(0, 0, columnSegment, null, null, null);\n        when(whereSegment.getExpr()).thenReturn(expression);\n        SimpleTableSegment table1 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_1\")));\n        SimpleTableSegment table2 = new SimpleTableSegment(new TableNameSegment(0, 0, new IdentifierValue(\"tbl_2\")));\n        List<SimpleTableSegment> tables = new LinkedList<>();\n        tables.add(table1);\n        tables.add(table2);\n        JoinTableSegment joinTableSegment = new JoinTableSegment();\n        joinTableSegment.setLeft(table1);\n        joinTableSegment.setRight(table2);\n        UpdateStatement updateStatement = new MySQLUpdateStatement();\n        updateStatement.setWhere(whereSegment);\n        updateStatement.setTableSegment(joinTableSegment);\n        updateStatement.setSetAssignment(new SetAssignmentSegment(0, 0, Collections.emptyList()));\n        UpdateStatementContext actual = new UpdateStatementContext(updateStatement);\n        assertThat(actual.getTablesContext().getTableNames(), is(new HashSet<>(Arrays.asList(\"tbl_1\", \"tbl_2\"))));\n        assertThat(actual.getWhere(), is(Optional.of(whereSegment)));\n        assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()), is(Arrays.asList(\"tbl_1\", \"tbl_2\", \"tbl_2\")));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/statement/dml/UpdateStatementContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"619b0a53d69772fe1035482275430e1baa9d7743","commitMessage":"@@@using SchemaAvailable & EncryptPropertiesBuilder to pass schema. owner. table. column value into EncryptAlgorithm (#12372)\n\n* modify .gitignore to ignore .factorypath\n\n* using SchemaAvailable & EncryptPropertiesBuilder to pass schema. owner. table. column value into EncryptAlgorithm\n\n* fix testcase of EncryptAlgorithmMetaDataTest\n\n* refactor on process multiple tables\n\n* revert on process multiple tables\n\n* revert changes on EncryptProjectionTokenGenerator\n\n* remove unused imports\n\n* fix bug: properties override while set props in findEncryptor\n\n* fix bug: properties override while set props in findEncryptor\n\n* remove unused imports\n\n* fix bug: properties override while set props in findEncryptor\n\n* revoke pass schemaName on ddl statement\n\n* using simplify new properties to set schema.  owner.  table and column\n\n* fix to match develop rule\n\n* change method name to simpilify\n\n* implements schemaAvailable from DMLStatementContext\n\n* performance improvement and rat fix\n\n* revert schemaName on create and alter table statement\n\n* remove unused import","date":"2021-09-15 16:43:12","modifiedFileCount":"29","status":"M","submitter":"cheese8"}]
