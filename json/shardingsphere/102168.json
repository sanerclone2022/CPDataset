[{"authorTime":"2021-01-07 20:03:25","codes":[{"authorDate":"2021-01-07 20:03:25","commitOrder":1,"curCode":"    public void assertExecuteUpdate() throws SQLException, ParseException {\n        \r\n        if (\"replica_query\".equals(getScenario())) {\n            return;\n        }\n        \r\n        if (\"shadow\".equals(getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeUpdateForStatement(connection) : executeUpdateForPreparedStatement(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","date":"2021-01-07 20:03:25","endLine":70,"groupId":"12474","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ea/c8a8db040c4892af840f313b98a5ee954676df.src","preCode":"    public void assertExecuteUpdate() throws SQLException, ParseException {\n        \r\n        if (\"replica_query\".equals(getScenario())) {\n            return;\n        }\n        \r\n        if (\"shadow\".equals(getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeUpdateForStatement(connection) : executeUpdateForPreparedStatement(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dml/GeneralDMLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"},{"authorDate":"2021-01-07 20:03:25","commitOrder":1,"curCode":"    public void assertExecute() throws SQLException, ParseException {\n        \r\n        if (\"replica_query\".equals(getScenario())) {\n            return;\n        }\n        \r\n        if (\"shadow\".equals(getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeForStatement(connection) : executeForPreparedStatement(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","date":"2021-01-07 20:03:25","endLine":102,"groupId":"12474","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ea/c8a8db040c4892af840f313b98a5ee954676df.src","preCode":"    public void assertExecute() throws SQLException, ParseException {\n        \r\n        if (\"replica_query\".equals(getScenario())) {\n            return;\n        }\n        \r\n        if (\"shadow\".equals(getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeForStatement(connection) : executeForPreparedStatement(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dml/GeneralDMLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"}],"commitId":"d71f881256c447c7fe6d88f7563a38486d36fbb0","commitMessage":"@@@Add back loss files (#8939)\n\n","date":"2021-01-07 20:03:25","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-02-19 19:18:41","codes":[{"authorDate":"2021-02-19 19:18:41","commitOrder":2,"curCode":"    public void assertExecuteUpdate() throws SQLException, ParseException {\n        \r\n        if (\"replica_query\".equals(getScenario())) {\n            return;\n        }\n        \r\n        if (\"shadow\".equals(getScenario())) {\n            return;\n        }\n        \r\n        if (\"encrypt\".equals(getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeUpdateForStatement(connection) : executeUpdateForPreparedStatement(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","date":"2021-02-19 19:18:41","endLine":79,"groupId":"12474","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/95/c7c28ae2ad0f180c251774a7249dbc0a9dae52.src","preCode":"    public void assertExecuteUpdate() throws SQLException, ParseException {\n        \r\n        if (\"replica_query\".equals(getScenario())) {\n            return;\n        }\n        \r\n        if (\"shadow\".equals(getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeUpdateForStatement(connection) : executeUpdateForPreparedStatement(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dml/GeneralDMLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2021-02-19 19:18:41","commitOrder":2,"curCode":"    public void assertExecute() throws SQLException, ParseException {\n        \r\n        if (\"replica_query\".equals(getScenario())) {\n            return;\n        }\n        \r\n        if (\"shadow\".equals(getScenario())) {\n            return;\n        }\n        \r\n        if (\"encrypt\".equals(getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeForStatement(connection) : executeForPreparedStatement(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","date":"2021-02-19 19:18:41","endLine":115,"groupId":"12474","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/95/c7c28ae2ad0f180c251774a7249dbc0a9dae52.src","preCode":"    public void assertExecute() throws SQLException, ParseException {\n        \r\n        if (\"replica_query\".equals(getScenario())) {\n            return;\n        }\n        \r\n        if (\"shadow\".equals(getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeForStatement(connection) : executeForPreparedStatement(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dml/GeneralDMLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"cdd895a4b9e1fa7c96244318365f80291898e3ac","commitMessage":"@@@add enviroment of encrypt  (#9436)\n\n* add encrypt enviroment\n\n* ports fixed","date":"2021-02-19 19:18:41","modifiedFileCount":"2","status":"M","submitter":"Jieker"},{"authorTime":"2021-03-24 18:00:29","codes":[{"authorDate":"2021-03-24 18:00:29","commitOrder":3,"curCode":"    public void assertExecuteUpdate() throws SQLException, ParseException {\n        switch (getDescription().getScenario()) {\n            case \"replica_query\":\n            case \"shadow\":\n            case \"encrypt\":\n                return;\n            default:\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeUpdateForStatement(connection) : executeUpdateForPreparedStatement(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","date":"2021-03-24 18:00:29","endLine":54,"groupId":"13451","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/be/83a4547d830cd21d33826562a857a963b7846b.src","preCode":"    public void assertExecuteUpdate() throws SQLException, ParseException {\n        \r\n        if (\"replica_query\".equals(getScenario())) {\n            return;\n        }\n        \r\n        if (\"shadow\".equals(getScenario())) {\n            return;\n        }\n        \r\n        if (\"encrypt\".equals(getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeUpdateForStatement(connection) : executeUpdateForPreparedStatement(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dml/GeneralDMLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2021-03-24 18:00:29","commitOrder":3,"curCode":"    public void assertExecute() throws SQLException, ParseException {\n        switch (getDescription().getScenario()) {\n            case \"replica_query\":\n            case \"shadow\":\n            case \"encrypt\":\n                return;\n            default:\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeForStatement(connection) : executeForPreparedStatement(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","date":"2021-03-24 18:00:29","endLine":85,"groupId":"13451","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/be/83a4547d830cd21d33826562a857a963b7846b.src","preCode":"    public void assertExecute() throws SQLException, ParseException {\n        \r\n        if (\"replica_query\".equals(getScenario())) {\n            return;\n        }\n        \r\n        if (\"shadow\".equals(getScenario())) {\n            return;\n        }\n        \r\n        if (\"encrypt\".equals(getScenario())) {\n            return;\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeForStatement(connection) : executeForPreparedStatement(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dml/GeneralDMLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"70176a68c9d7d55a47f4dde8391fdbb0d52cb231","commitMessage":"@@@refactor: it engine (#9725)\n\n* move packages\n\n* refactor dockerfile\n\n* Refactor IT engine\n\n* fix checkstyle and update it.yaml\n\n* optimize\n\n* fix\n\n* fix ci/it script\n\n* fix null pointer\n\n* fix checkstyle\n\n* fix nullpointer\n\n* code polish\n\n* revert\n\n* make adapter=jdbc available\n\n* fix\n\n* fix\n\n* following reviews\n\n* fix ci\n\n* Compatible with ci\n\n* support parallel\n\n* fix\n\n* fix\n\n* fix\n\n* fix\n\n* disable fail-fast\n\n* polish\n\n* fix health-chek\n\n* fix health-chek\n\n* fix health-chek\n\n* code polish\n\n* code polish\n\n* code polish\n\n* rollback\n\n* fix missing case\n\n* fix\n\n* fix skip dockerfile build\n\n* revert removed profile\n\n* remove dead code\n\nCo-authored-by: root <root@daming.sgp>","date":"2021-03-24 18:00:29","modifiedFileCount":"14","status":"M","submitter":"Daming"},{"authorTime":"2021-03-29 19:40:36","codes":[{"authorDate":"2021-03-29 19:40:36","commitOrder":4,"curCode":"    public void assertExecuteUpdate() throws SQLException, ParseException {\n        switch (getScenario()) {\n            case \"replica_query\":\n            case \"shadow\":\n            case \"encrypt\":\n                return;\n            default:\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeUpdateForStatement(connection) : executeUpdateForPreparedStatement(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","date":"2021-03-29 19:40:36","endLine":73,"groupId":"102168","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/86/c9523906437cd6db69a3be4a4fc739e047926c.src","preCode":"    public void assertExecuteUpdate() throws SQLException, ParseException {\n        switch (getDescription().getScenario()) {\n            case \"replica_query\":\n            case \"shadow\":\n            case \"encrypt\":\n                return;\n            default:\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeUpdateForStatement(connection) : executeUpdateForPreparedStatement(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dml/GeneralDMLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2021-03-29 19:40:36","commitOrder":4,"curCode":"    public void assertExecute() throws SQLException, ParseException {\n        switch (getScenario()) {\n            case \"replica_query\":\n            case \"shadow\":\n            case \"encrypt\":\n                return;\n            default:\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeForStatement(connection) : executeForPreparedStatement(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","date":"2021-03-29 19:40:36","endLine":104,"groupId":"102168","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/86/c9523906437cd6db69a3be4a4fc739e047926c.src","preCode":"    public void assertExecute() throws SQLException, ParseException {\n        switch (getDescription().getScenario()) {\n            case \"replica_query\":\n            case \"shadow\":\n            case \"encrypt\":\n                return;\n            default:\n        }\n        int actualUpdateCount;\n        try (Connection connection = getTargetDataSource().getConnection()) {\n            actualUpdateCount = SQLExecuteType.Literal == getSqlExecuteType() ? executeForStatement(connection) : executeForPreparedStatement(connection);\n        }\n        assertDataSet(actualUpdateCount);\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dml/GeneralDMLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"f7511d5d36b5cfb2692fa07c5d7e9e278205c1b4","commitMessage":"@@@Refactor: IT framework (#9857)\n\n* refactor it engine\n\n* following reviews and remove dead codes\n\nCo-authored-by: zhuanghaochao <zhuanghaochao@yy.com>","date":"2021-03-29 19:40:36","modifiedFileCount":"33","status":"M","submitter":"Daming"}]
