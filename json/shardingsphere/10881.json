[{"authorTime":"2020-11-30 21:51:39","codes":[{"authorDate":"2021-09-03 18:48:47","commitOrder":9,"curCode":"    private Collection<PostgreSQLColumnDescription> createColumnDescriptions(final QueryResponseHeader queryResponseHeader) {\n        Collection<PostgreSQLColumnDescription> result = new LinkedList<>();\n        int columnIndex = 0;\n        for (QueryHeader each : queryResponseHeader.getQueryHeaders()) {\n            result.add(new PostgreSQLColumnDescription(each.getColumnName(), ++columnIndex, each.getColumnType(), each.getColumnLength(), each.getColumnTypeName()));\n        }\n        return result;\n    }\n","date":"2021-09-03 18:48:47","endLine":124,"groupId":"9854","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createColumnDescriptions","params":"(finalQueryResponseHeaderqueryResponseHeader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/55/ad2d16bf4e1cbfea394117811672bef414a6ea.src","preCode":"    private Collection<PostgreSQLColumnDescription> createColumnDescriptions(final QueryResponseHeader queryResponseHeader) {\n        Collection<PostgreSQLColumnDescription> result = new LinkedList<>();\n        int columnIndex = 0;\n        for (QueryHeader each : queryResponseHeader.getQueryHeaders()) {\n            result.add(new PostgreSQLColumnDescription(each.getColumnName(), ++columnIndex, each.getColumnType(), each.getColumnLength(), each.getColumnTypeName()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-opengauss/src/main/java/org/apache/shardingsphere/proxy/frontend/opengauss/command/query/binary/bind/OpenGaussComBatchBindExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"},{"authorDate":"2020-11-30 21:51:39","commitOrder":9,"curCode":"    private Collection<PostgreSQLColumnDescription> createColumnDescriptions(final QueryResponseHeader queryResponseHeader) {\n        Collection<PostgreSQLColumnDescription> result = new LinkedList<>();\n        int columnIndex = 0;\n        for (QueryHeader each : queryResponseHeader.getQueryHeaders()) {\n            result.add(new PostgreSQLColumnDescription(each.getColumnName(), ++columnIndex, each.getColumnType(), each.getColumnLength(), each.getColumnTypeName()));\n        }\n        return result;\n    }\n","date":"2020-11-30 21:51:39","endLine":114,"groupId":"9854","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createColumnDescriptions","params":"(finalQueryResponseHeaderqueryResponseHeader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/87/b1ba372f9bc1b5c2be94efdb27b7394ffa3925.src","preCode":"    private Collection<PostgreSQLColumnDescription> createColumnDescriptions(final QueryResponseHeader queryResponseHeader) {\n        Collection<PostgreSQLColumnDescription> result = new LinkedList<>();\n        int columnIndex = 0;\n        for (QueryHeader each : queryResponseHeader.getQueryHeaders()) {\n            result.add(new PostgreSQLColumnDescription(each.getColumnName(), ++columnIndex, each.getColumnType(), each.getColumnLength(), each.getColumnTypeName()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/query/binary/bind/PostgreSQLComBindExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"NB"}],"commitId":"14c6902a2221b0743b224504191f59b04eb950c5","commitMessage":"@@@Adds support for openGauss (#12149)\n\n* ShardingSphere Proxy supports openGauss\n\n* Add openGauss into OptimizeContextFactory\n\n* Add openGauss XA\n\n* Add openGauss SQL parser dialect\n\n* Unify letter case for openGauss\n\n* Update javadoc for openGauss\n\n* Update proxy distribution for openGauss\n\n* Update kunpeng repository\n\n* Adapt openGauss PSQLException\n\n* Add default errorcode in OpenGaussErrorResponsePacket\n\n* Update javadoc for OpenGaussComBatchBindPacket\n\n* Complete unit tests in transaction-xa-core\n\n* Complete unit tests in proxy-backend\n\n* Add todo unit tests for openGauss\n\n* Rename constants in OpenGaussErrorResponsePacket\n\n* Complete unit tests for db-protocol-opengauss\n\n* Remove redundant @Getter in OpenGaussFrontendEngine\n\n* Fix checkstyle in OpenGaussErrorResponsePacketTest\n\n* Decouple openGauss dependency from transaction-xa-core\n\n* Decouple openGauss dependency\n\n* Fix checkstyle in transaction-xa-core\n\n* Remove unused properties in pom.xml\n\n* Remove unused OpenGaussIdentifierPacket\n\n* Revert changes in proxy-distribution pom\n\n* Remove OpenGaussErrorPacketFactoryTest\n\n* Fix OpenGaussErrorResponsePacketTest\n\n* Fix OpenGaussComBatchBindExecutor\n\n* Remove unused throws","date":"2021-09-03 18:48:47","modifiedFileCount":"4","status":"M","submitter":"???"},{"authorTime":"2021-09-09 18:30:14","codes":[{"authorDate":"2021-09-03 18:48:47","commitOrder":10,"curCode":"    private Collection<PostgreSQLColumnDescription> createColumnDescriptions(final QueryResponseHeader queryResponseHeader) {\n        Collection<PostgreSQLColumnDescription> result = new LinkedList<>();\n        int columnIndex = 0;\n        for (QueryHeader each : queryResponseHeader.getQueryHeaders()) {\n            result.add(new PostgreSQLColumnDescription(each.getColumnName(), ++columnIndex, each.getColumnType(), each.getColumnLength(), each.getColumnTypeName()));\n        }\n        return result;\n    }\n","date":"2021-09-03 18:48:47","endLine":124,"groupId":"10881","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createColumnDescriptions","params":"(finalQueryResponseHeaderqueryResponseHeader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/55/ad2d16bf4e1cbfea394117811672bef414a6ea.src","preCode":"    private Collection<PostgreSQLColumnDescription> createColumnDescriptions(final QueryResponseHeader queryResponseHeader) {\n        Collection<PostgreSQLColumnDescription> result = new LinkedList<>();\n        int columnIndex = 0;\n        for (QueryHeader each : queryResponseHeader.getQueryHeaders()) {\n            result.add(new PostgreSQLColumnDescription(each.getColumnName(), ++columnIndex, each.getColumnType(), each.getColumnLength(), each.getColumnTypeName()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-opengauss/src/main/java/org/apache/shardingsphere/proxy/frontend/opengauss/command/query/binary/bind/OpenGaussComBatchBindExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"N"},{"authorDate":"2021-09-09 18:30:14","commitOrder":10,"curCode":"    private Collection<PostgreSQLColumnDescription> createColumnDescriptions(final QueryResponseHeader queryResponseHeader) {\n        Collection<PostgreSQLColumnDescription> result = new LinkedList<>();\n        int columnIndex = 0;\n        for (QueryHeader each : queryResponseHeader.getQueryHeaders()) {\n            result.add(new PostgreSQLColumnDescription(each.getColumnLabel(), ++columnIndex, each.getColumnType(), each.getColumnLength(), each.getColumnTypeName()));\n        }\n        return result;\n    }\n","date":"2021-09-09 18:30:14","endLine":82,"groupId":"10881","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"createColumnDescriptions","params":"(finalQueryResponseHeaderqueryResponseHeader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1c/8ae6541276dc1cd835e778298393800b291fd0.src","preCode":"    private Collection<PostgreSQLColumnDescription> createColumnDescriptions(final QueryResponseHeader queryResponseHeader) {\n        Collection<PostgreSQLColumnDescription> result = new LinkedList<>();\n        int columnIndex = 0;\n        for (QueryHeader each : queryResponseHeader.getQueryHeaders()) {\n            result.add(new PostgreSQLColumnDescription(each.getColumnName(), ++columnIndex, each.getColumnType(), each.getColumnLength(), each.getColumnTypeName()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/query/binary/bind/PostgreSQLComBindExecutor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"6df8cfc80bf338c57d3c941b7dc2364c868215ad","commitMessage":"@@@fix wrong pg field metadata when use column alias (#12313)\n\n","date":"2021-09-09 18:30:14","modifiedFileCount":"2","status":"M","submitter":"Zhengqiang Duan"}]
