[{"authorTime":"2020-10-22 16:47:44","codes":[{"authorDate":"2020-11-08 12:03:55","commitOrder":2,"curCode":"    public ASTNode visitTableConstraintDef(final MySQLStatementParser.TableConstraintDefContext ctx) {\n        ConstraintDefinitionSegment result = new ConstraintDefinitionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n        if (null != ctx.KEY() && null != ctx.PRIMARY()) {\n            result.getPrimaryKeyColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n        }\n        if (null != ctx.FOREIGN()) {\n            result.setReferencedTable((SimpleTableSegment) visit(ctx.referenceDefinition()));\n        }\n        if (null != ctx.UNIQUE()) {\n            result.getIndexColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n            if (null != ctx.indexNameAndType()) {\n                result.setIndexName(new IndexSegment(ctx.indexNameAndType().indexName().start.getStartIndex(), ctx.indexNameAndType().indexName().stop.getStopIndex(),\n                        (IdentifierValue) visit(ctx.indexNameAndType().indexName())));\n            }\n        }\n        return result;\n    }\n","date":"2020-11-08 12:03:55","endLine":358,"groupId":"117","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"visitTableConstraintDef","params":"(finalMySQLStatementParser.TableConstraintDefContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8a/ff090a84a3fdf6447d395fa51043458055a7ec.src","preCode":"    public ASTNode visitTableConstraintDef(final MySQLStatementParser.TableConstraintDefContext ctx) {\n        ConstraintDefinitionSegment result = new ConstraintDefinitionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n        if (null != ctx.KEY() && null != ctx.PRIMARY()) {\n            result.getPrimaryKeyColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n        }\n        if (null != ctx.FOREIGN()) {\n            result.setReferencedTable((SimpleTableSegment) visit(ctx.referenceDefinition()));\n        }\n        if (null != ctx.UNIQUE()) {\n            result.getIndexColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n            if (null != ctx.indexNameAndType()) {\n                result.setIndexName(new IndexSegment(ctx.indexNameAndType().indexName().start.getStartIndex(), ctx.indexNameAndType().indexName().stop.getStopIndex(),\n                        (IdentifierValue) visit(ctx.indexNameAndType().indexName())));\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"B"},{"authorDate":"2020-10-22 16:47:44","commitOrder":2,"curCode":"    public ASTNode visitTableConstraint(final TableConstraintContext ctx) {\n        ConstraintDefinitionSegment result = new ConstraintDefinitionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n        if (null != ctx.tableConstraintOption().primaryKey()) {\n            result.getPrimaryKeyColumns().addAll(((CollectionValue<ColumnSegment>) visit(ctx.tableConstraintOption().columnNames(0))).getValue());\n        }\n        if (null != ctx.tableConstraintOption().FOREIGN()) {\n            result.setReferencedTable((SimpleTableSegment) visit(ctx.tableConstraintOption().tableName()));\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":223,"groupId":"10644","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"visitTableConstraint","params":"(finalTableConstraintContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fd/54293d12a8d03552cd285a0c05745abb148348.src","preCode":"    public ASTNode visitTableConstraint(final TableConstraintContext ctx) {\n        ConstraintDefinitionSegment result = new ConstraintDefinitionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n        if (null != ctx.tableConstraintOption().primaryKey()) {\n            result.getPrimaryKeyColumns().addAll(((CollectionValue<ColumnSegment>) visit(ctx.tableConstraintOption().columnNames(0))).getValue());\n        }\n        if (null != ctx.tableConstraintOption().FOREIGN()) {\n            result.setReferencedTable((SimpleTableSegment) visit(ctx.tableConstraintOption().tableName()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/java/org/apache/shardingsphere/sql/parser/postgresql/visitor/statement/impl/PostgreSQLDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"NB"}],"commitId":"b13473fbea001a4b827ff415d493e556dd64cc98","commitMessage":"@@@Fix mysql grammar (#8052)\n\n* fix mysql g4 file\n\n* fix mysql alterTable grammar\n\n* fix\n\n* fix test\n\n* Update MySQLFormatSQLVisitor.java","date":"2020-11-08 12:03:55","modifiedFileCount":"6","status":"M","submitter":"JingShang Lu"},{"authorTime":"2020-10-22 16:47:44","codes":[{"authorDate":"2020-11-16 12:59:49","commitOrder":3,"curCode":"    public ASTNode visitTableConstraintDef(final TableConstraintDefContext ctx) {\n        ConstraintDefinitionSegment result = new ConstraintDefinitionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n        if (null != ctx.KEY() && null != ctx.PRIMARY()) {\n            result.getPrimaryKeyColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n        }\n        if (null != ctx.FOREIGN()) {\n            result.setReferencedTable((SimpleTableSegment) visit(ctx.referenceDefinition()));\n        }\n        if (null != ctx.UNIQUE()) {\n            result.getIndexColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n            if (null != ctx.indexNameAndType()) {\n                result.setIndexName(new IndexSegment(ctx.indexNameAndType().indexName().start.getStartIndex(), ctx.indexNameAndType().indexName().stop.getStopIndex(),\n                        (IdentifierValue) visit(ctx.indexNameAndType().indexName())));\n            }\n        }\n        return result;\n    }\n","date":"2020-11-16 12:59:49","endLine":364,"groupId":"117","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"visitTableConstraintDef","params":"(finalTableConstraintDefContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2c/7b5d4ab396c8f4a655289324957982602218ad.src","preCode":"    public ASTNode visitTableConstraintDef(final MySQLStatementParser.TableConstraintDefContext ctx) {\n        ConstraintDefinitionSegment result = new ConstraintDefinitionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n        if (null != ctx.KEY() && null != ctx.PRIMARY()) {\n            result.getPrimaryKeyColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n        }\n        if (null != ctx.FOREIGN()) {\n            result.setReferencedTable((SimpleTableSegment) visit(ctx.referenceDefinition()));\n        }\n        if (null != ctx.UNIQUE()) {\n            result.getIndexColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n            if (null != ctx.indexNameAndType()) {\n                result.setIndexName(new IndexSegment(ctx.indexNameAndType().indexName().start.getStartIndex(), ctx.indexNameAndType().indexName().stop.getStopIndex(),\n                        (IdentifierValue) visit(ctx.indexNameAndType().indexName())));\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"M"},{"authorDate":"2020-10-22 16:47:44","commitOrder":3,"curCode":"    public ASTNode visitTableConstraint(final TableConstraintContext ctx) {\n        ConstraintDefinitionSegment result = new ConstraintDefinitionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n        if (null != ctx.tableConstraintOption().primaryKey()) {\n            result.getPrimaryKeyColumns().addAll(((CollectionValue<ColumnSegment>) visit(ctx.tableConstraintOption().columnNames(0))).getValue());\n        }\n        if (null != ctx.tableConstraintOption().FOREIGN()) {\n            result.setReferencedTable((SimpleTableSegment) visit(ctx.tableConstraintOption().tableName()));\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":223,"groupId":"10644","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"visitTableConstraint","params":"(finalTableConstraintContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fd/54293d12a8d03552cd285a0c05745abb148348.src","preCode":"    public ASTNode visitTableConstraint(final TableConstraintContext ctx) {\n        ConstraintDefinitionSegment result = new ConstraintDefinitionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n        if (null != ctx.tableConstraintOption().primaryKey()) {\n            result.getPrimaryKeyColumns().addAll(((CollectionValue<ColumnSegment>) visit(ctx.tableConstraintOption().columnNames(0))).getValue());\n        }\n        if (null != ctx.tableConstraintOption().FOREIGN()) {\n            result.setReferencedTable((SimpleTableSegment) visit(ctx.tableConstraintOption().tableName()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/java/org/apache/shardingsphere/sql/parser/postgresql/visitor/statement/impl/PostgreSQLDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"N"}],"commitId":"37bee90a59cc18242274e37895d7b22b51356031","commitMessage":"@@@Format input parameters for MySQL and Oracle visitor functions (#8149)\n\n* Format input parameters for msql visitor functions\n\n* Format input parameters for oracle visitor functions\n\n* Delete git\n\ndelete invalid file\n\n* Format input parameters for Oracle visitor functions\n\n* format\n\n* format-add four blank at empty line","date":"2020-11-16 12:59:49","modifiedFileCount":"4","status":"M","submitter":"wenweibin"},{"authorTime":"2020-10-22 16:47:44","codes":[{"authorDate":"2020-11-24 22:54:19","commitOrder":4,"curCode":"    public ASTNode visitTableConstraintDef(final TableConstraintDefContext ctx) {\n        ConstraintDefinitionSegment result = new ConstraintDefinitionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n        if (null != ctx.KEY() && null != ctx.PRIMARY()) {\n            result.getPrimaryKeyColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n            return result;\n        }\n        if (null != ctx.FOREIGN()) {\n            result.setReferencedTable((SimpleTableSegment) visit(ctx.referenceDefinition()));\n            return result;\n        }\n        if (null != ctx.UNIQUE()) {\n            result.getIndexColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n            if (null != ctx.indexNameAndType()) {\n                result.setIndexName((IndexSegment) visit(ctx.indexNameAndType().indexName()));\n            }\n            return result;\n        }\n        if (null != ctx.checkConstraint()) {\n            return result;\n        }\n        result.getIndexColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n        if (null != ctx.indexName()) {\n            result.setIndexName((IndexSegment) visit(ctx.indexName()));\n        }\n        if (null != ctx.indexNameAndType()) {\n            result.setIndexName((IndexSegment) visit(ctx.indexNameAndType().indexName()));\n        }\n        return result;\n    }\n","date":"2020-11-24 22:54:19","endLine":376,"groupId":"3041","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"visitTableConstraintDef","params":"(finalTableConstraintDefContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9a/f658c22c984fa592bae01f3ff852deaadda2d4.src","preCode":"    public ASTNode visitTableConstraintDef(final TableConstraintDefContext ctx) {\n        ConstraintDefinitionSegment result = new ConstraintDefinitionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n        if (null != ctx.KEY() && null != ctx.PRIMARY()) {\n            result.getPrimaryKeyColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n        }\n        if (null != ctx.FOREIGN()) {\n            result.setReferencedTable((SimpleTableSegment) visit(ctx.referenceDefinition()));\n        }\n        if (null != ctx.UNIQUE()) {\n            result.getIndexColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n            if (null != ctx.indexNameAndType()) {\n                result.setIndexName(new IndexSegment(ctx.indexNameAndType().indexName().start.getStartIndex(), ctx.indexNameAndType().indexName().stop.getStopIndex(),\n                        (IdentifierValue) visit(ctx.indexNameAndType().indexName())));\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"M"},{"authorDate":"2020-10-22 16:47:44","commitOrder":4,"curCode":"    public ASTNode visitTableConstraint(final TableConstraintContext ctx) {\n        ConstraintDefinitionSegment result = new ConstraintDefinitionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n        if (null != ctx.tableConstraintOption().primaryKey()) {\n            result.getPrimaryKeyColumns().addAll(((CollectionValue<ColumnSegment>) visit(ctx.tableConstraintOption().columnNames(0))).getValue());\n        }\n        if (null != ctx.tableConstraintOption().FOREIGN()) {\n            result.setReferencedTable((SimpleTableSegment) visit(ctx.tableConstraintOption().tableName()));\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":223,"groupId":"10644","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"visitTableConstraint","params":"(finalTableConstraintContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fd/54293d12a8d03552cd285a0c05745abb148348.src","preCode":"    public ASTNode visitTableConstraint(final TableConstraintContext ctx) {\n        ConstraintDefinitionSegment result = new ConstraintDefinitionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n        if (null != ctx.tableConstraintOption().primaryKey()) {\n            result.getPrimaryKeyColumns().addAll(((CollectionValue<ColumnSegment>) visit(ctx.tableConstraintOption().columnNames(0))).getValue());\n        }\n        if (null != ctx.tableConstraintOption().FOREIGN()) {\n            result.setReferencedTable((SimpleTableSegment) visit(ctx.tableConstraintOption().tableName()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/java/org/apache/shardingsphere/sql/parser/postgresql/visitor/statement/impl/PostgreSQLDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"N"}],"commitId":"e69c34703d56a06c77781c703e55459bd2ed0e78","commitMessage":"@@@fix visit of UNIQUNE KEY (#8311)\n\n","date":"2020-11-24 22:54:19","modifiedFileCount":"2","status":"M","submitter":"JingShang Lu"},{"authorTime":"2021-06-01 22:50:29","codes":[{"authorDate":"2021-06-01 22:50:29","commitOrder":5,"curCode":"    public ASTNode visitTableConstraintDef(final TableConstraintDefContext ctx) {\n        ConstraintDefinitionSegment result = new ConstraintDefinitionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n        if (null != ctx.constraintClause() && null != ctx.constraintClause().constraintName()) {\n            result.setConstraintName((ConstraintSegment) visit(ctx.constraintClause().constraintName()));\n        }\n        if (null != ctx.KEY() && null != ctx.PRIMARY()) {\n            result.getPrimaryKeyColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n            return result;\n        }\n        if (null != ctx.FOREIGN()) {\n            result.setReferencedTable((SimpleTableSegment) visit(ctx.referenceDefinition()));\n            return result;\n        }\n        if (null != ctx.UNIQUE()) {\n            result.getIndexColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n            if (null != ctx.indexNameAndType()) {\n                result.setIndexName((IndexSegment) visit(ctx.indexNameAndType().indexName()));\n            }\n            return result;\n        }\n        if (null != ctx.checkConstraint()) {\n            return result;\n        }\n        result.getIndexColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n        if (null != ctx.indexName()) {\n            result.setIndexName((IndexSegment) visit(ctx.indexName()));\n        }\n        if (null != ctx.indexNameAndType()) {\n            result.setIndexName((IndexSegment) visit(ctx.indexNameAndType().indexName()));\n        }\n        return result;\n    }\n","date":"2021-06-01 22:50:29","endLine":445,"groupId":"101336","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"visitTableConstraintDef","params":"(finalTableConstraintDefContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8e/df5a6bd7fe0b39e2e9c89aadc9411566e23212.src","preCode":"    public ASTNode visitTableConstraintDef(final TableConstraintDefContext ctx) {\n        ConstraintDefinitionSegment result = new ConstraintDefinitionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n        if (null != ctx.KEY() && null != ctx.PRIMARY()) {\n            result.getPrimaryKeyColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n            return result;\n        }\n        if (null != ctx.FOREIGN()) {\n            result.setReferencedTable((SimpleTableSegment) visit(ctx.referenceDefinition()));\n            return result;\n        }\n        if (null != ctx.UNIQUE()) {\n            result.getIndexColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n            if (null != ctx.indexNameAndType()) {\n                result.setIndexName((IndexSegment) visit(ctx.indexNameAndType().indexName()));\n            }\n            return result;\n        }\n        if (null != ctx.checkConstraint()) {\n            return result;\n        }\n        result.getIndexColumns().addAll(getKeyColumnsFromKeyListWithExpression(ctx.keyListWithExpression()));\n        if (null != ctx.indexName()) {\n            result.setIndexName((IndexSegment) visit(ctx.indexName()));\n        }\n        if (null != ctx.indexNameAndType()) {\n            result.setIndexName((IndexSegment) visit(ctx.indexNameAndType().indexName()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":414,"status":"M"},{"authorDate":"2021-06-01 22:50:29","commitOrder":5,"curCode":"    public ASTNode visitTableConstraint(final TableConstraintContext ctx) {\n        ConstraintDefinitionSegment result = new ConstraintDefinitionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n        if (null != ctx.constraintClause()) {\n            result.setConstraintName((ConstraintSegment) visit(ctx.constraintClause().constraintName()));\n        }\n        if (null != ctx.tableConstraintOption().primaryKey()) {\n            result.getPrimaryKeyColumns().addAll(((CollectionValue<ColumnSegment>) visit(ctx.tableConstraintOption().columnNames(0))).getValue());\n        }\n        if (null != ctx.tableConstraintOption().FOREIGN()) {\n            result.setReferencedTable((SimpleTableSegment) visit(ctx.tableConstraintOption().tableName()));\n        }\n        return result;\n    }\n","date":"2021-06-01 22:50:29","endLine":324,"groupId":"101336","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"visitTableConstraint","params":"(finalTableConstraintContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/81/c10b491eefd5b663b9266843a1d9fdf76ef1ab.src","preCode":"    public ASTNode visitTableConstraint(final TableConstraintContext ctx) {\n        ConstraintDefinitionSegment result = new ConstraintDefinitionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n        if (null != ctx.tableConstraintOption().primaryKey()) {\n            result.getPrimaryKeyColumns().addAll(((CollectionValue<ColumnSegment>) visit(ctx.tableConstraintOption().columnNames(0))).getValue());\n        }\n        if (null != ctx.tableConstraintOption().FOREIGN()) {\n            result.setReferencedTable((SimpleTableSegment) visit(ctx.tableConstraintOption().tableName()));\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/java/org/apache/shardingsphere/sql/parser/postgresql/visitor/statement/impl/PostgreSQLDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"M"}],"commitId":"916f1210727781ecea299ea506a03ab8e86c8959","commitMessage":"@@@Rewrite constraints' name in logic SQL (#10606)\n\n* Rewrite constraint name in alter table\n\n* Fix MySQL parser testcases\n\n* Fix MySQL SQL parser\n\n* Fix MySQL add constraint SQL parser\n\n* Fix rewrite testcases\n\n* Remove unused import\n\n* Fix SQLServer parse constraint name\n\n* Fix Oracle SQL parser\n\n* Avoid unnamed constraint cause NPE","date":"2021-06-01 22:50:29","modifiedFileCount":"18","status":"M","submitter":"???"}]
