[{"authorTime":"2021-06-01 23:28:18","codes":[{"authorDate":"2020-05-16 19:36:14","commitOrder":2,"curCode":"    public void assertGetInt() {\n        assertTrue(actualResultSet.next());\n        assertThat(actualResultSet.getInt(1), is(1));\n        assertTrue(actualResultSet.next());\n        assertThat(actualResultSet.getInt(\"order_id\"), is(2));\n        assertFalse(actualResultSet.next());\n    }\n","date":"2020-05-16 19:36:14","endLine":109,"groupId":"6071","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertGetInt","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/40/ab19bf3632c18d5f5662a1db306032631d1fb3.src","preCode":"    public void assertGetInt() {\n        assertTrue(actualResultSet.next());\n        assertThat(actualResultSet.getInt(1), is(1));\n        assertTrue(actualResultSet.next());\n        assertThat(actualResultSet.getInt(\"order_id\"), is(2));\n        assertFalse(actualResultSet.next());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/resultset/GeneratedKeysResultSetTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"NB"},{"authorDate":"2021-06-01 23:28:18","commitOrder":2,"curCode":"    public void assertQueryWithFederateInSingleAndShardingTableRewrite() throws SQLException {\n        ShardingSpherePreparedStatement preparedStatement = (ShardingSpherePreparedStatement) getShardingSphereDataSource()\n                .getConnection().prepareStatement(SELECT_SQL_BY_ID_ACROSS_SINGLE_AND_SHARDING_TABLES_REWRITE);\n        preparedStatement.setInt(1, 11);\n        ResultSet resultSet = preparedStatement.executeQuery();\n        assertNotNull(resultSet);\n        assertTrue(resultSet.next());\n        assertThat(resultSet.getInt(1), is(1001));\n        assertThat(resultSet.getInt(2), is(11));\n        assertThat(resultSet.getString(3), is(\"init\"));\n        assertThat(resultSet.getInt(4), is(1001));\n        assertThat(resultSet.getInt(5), is(10001));\n        assertFalse(resultSet.next());\n        preparedStatement.setInt(1, 10);\n        ResultSet resultSet1 = preparedStatement.executeQuery();\n        assertNotNull(resultSet1);\n        assertTrue(resultSet1.next());\n        assertThat(resultSet1.getInt(1), is(1000));\n        assertThat(resultSet1.getInt(2), is(10));\n        assertThat(resultSet1.getString(3), is(\"init\"));\n        assertThat(resultSet1.getInt(4), is(1000));\n        assertThat(resultSet1.getInt(5), is(10000));\n        assertFalse(resultSet1.next());\n    }\n","date":"2021-06-01 23:28:18","endLine":140,"groupId":"11706","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertQueryWithFederateInSingleAndShardingTableRewrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b1/f29246da8a9ea1993d1c4249cfdf23efa4db36.src","preCode":"    public void assertQueryWithFederateInSingleAndShardingTableRewrite() throws SQLException {\n        ShardingSpherePreparedStatement preparedStatement = (ShardingSpherePreparedStatement) getShardingSphereDataSource()\n                .getConnection().prepareStatement(SELECT_SQL_BY_ID_ACROSS_SINGLE_AND_SHARDING_TABLES_REWRITE);\n        preparedStatement.setInt(1, 11);\n        ResultSet resultSet = preparedStatement.executeQuery();\n        assertNotNull(resultSet);\n        assertTrue(resultSet.next());\n        assertThat(resultSet.getInt(1), is(1001));\n        assertThat(resultSet.getInt(2), is(11));\n        assertThat(resultSet.getString(3), is(\"init\"));\n        assertThat(resultSet.getInt(4), is(1001));\n        assertThat(resultSet.getInt(5), is(10001));\n        assertFalse(resultSet.next());\n        preparedStatement.setInt(1, 10);\n        ResultSet resultSet1 = preparedStatement.executeQuery();\n        assertNotNull(resultSet1);\n        assertTrue(resultSet1.next());\n        assertThat(resultSet1.getInt(1), is(1000));\n        assertThat(resultSet1.getInt(2), is(10));\n        assertThat(resultSet1.getString(3), is(\"init\"));\n        assertThat(resultSet1.getInt(4), is(1000));\n        assertThat(resultSet1.getInt(5), is(10000));\n        assertFalse(resultSet1.next());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/statement/FederatePrepareStatementTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"}],"commitId":"91534e545f7c62f23b9e84ba797530a721beb8d5","commitMessage":"@@@## Fix [Issue10604](https://github.com/apache/shardingsphere/issues/10604) (#10613)\n\nchanges related to replacement of keyword calcite to federate.","date":"2021-06-01 23:28:18","modifiedFileCount":"4","status":"M","submitter":"Abhishek Karkamkar"},{"authorTime":"2021-06-11 13:29:00","codes":[{"authorDate":"2020-05-16 19:36:14","commitOrder":3,"curCode":"    public void assertGetInt() {\n        assertTrue(actualResultSet.next());\n        assertThat(actualResultSet.getInt(1), is(1));\n        assertTrue(actualResultSet.next());\n        assertThat(actualResultSet.getInt(\"order_id\"), is(2));\n        assertFalse(actualResultSet.next());\n    }\n","date":"2020-05-16 19:36:14","endLine":109,"groupId":"101118","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertGetInt","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/40/ab19bf3632c18d5f5662a1db306032631d1fb3.src","preCode":"    public void assertGetInt() {\n        assertTrue(actualResultSet.next());\n        assertThat(actualResultSet.getInt(1), is(1));\n        assertTrue(actualResultSet.next());\n        assertThat(actualResultSet.getInt(\"order_id\"), is(2));\n        assertFalse(actualResultSet.next());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/resultset/GeneratedKeysResultSetTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"N"},{"authorDate":"2021-06-11 13:29:00","commitOrder":3,"curCode":"    private void assertQueryWithFederateInSingleAndShardingTableRewrite(final boolean executeQuery) throws SQLException {\n        ShardingSpherePreparedStatement preparedStatement = (ShardingSpherePreparedStatement) getShardingSphereDataSource()\n                .getConnection().prepareStatement(SELECT_SQL_BY_ID_ACROSS_SINGLE_AND_SHARDING_TABLES_REWRITE);\n        preparedStatement.setInt(1, 11);\n        ResultSet resultSet = getResultSet(preparedStatement, executeQuery);\n        assertNotNull(resultSet);\n        assertTrue(resultSet.next());\n        assertThat(resultSet.getInt(1), is(1001));\n        assertThat(resultSet.getInt(2), is(11));\n        assertThat(resultSet.getString(3), is(\"init\"));\n        assertThat(resultSet.getInt(4), is(1001));\n        assertThat(resultSet.getInt(5), is(10001));\n        assertFalse(resultSet.next());\n        preparedStatement.setInt(1, 10);\n        ResultSet resultSet1 = getResultSet(preparedStatement, executeQuery);\n        assertNotNull(resultSet1);\n        assertTrue(resultSet1.next());\n        assertThat(resultSet1.getInt(1), is(1000));\n        assertThat(resultSet1.getInt(2), is(10));\n        assertThat(resultSet1.getString(3), is(\"init\"));\n        assertThat(resultSet1.getInt(4), is(1000));\n        assertThat(resultSet1.getInt(5), is(10000));\n        assertFalse(resultSet1.next());\n    }\n","date":"2021-06-11 13:29:00","endLine":176,"groupId":"101118","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertQueryWithFederateInSingleAndShardingTableRewrite","params":"(finalbooleanexecuteQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/42/6ce3af1927baf1bb3faec0313dca7399980e3a.src","preCode":"    public void assertQueryWithFederateInSingleAndShardingTableRewrite() throws SQLException {\n        ShardingSpherePreparedStatement preparedStatement = (ShardingSpherePreparedStatement) getShardingSphereDataSource()\n                .getConnection().prepareStatement(SELECT_SQL_BY_ID_ACROSS_SINGLE_AND_SHARDING_TABLES_REWRITE);\n        preparedStatement.setInt(1, 11);\n        ResultSet resultSet = preparedStatement.executeQuery();\n        assertNotNull(resultSet);\n        assertTrue(resultSet.next());\n        assertThat(resultSet.getInt(1), is(1001));\n        assertThat(resultSet.getInt(2), is(11));\n        assertThat(resultSet.getString(3), is(\"init\"));\n        assertThat(resultSet.getInt(4), is(1001));\n        assertThat(resultSet.getInt(5), is(10001));\n        assertFalse(resultSet.next());\n        preparedStatement.setInt(1, 10);\n        ResultSet resultSet1 = preparedStatement.executeQuery();\n        assertNotNull(resultSet1);\n        assertTrue(resultSet1.next());\n        assertThat(resultSet1.getInt(1), is(1000));\n        assertThat(resultSet1.getInt(2), is(10));\n        assertThat(resultSet1.getString(3), is(\"init\"));\n        assertThat(resultSet1.getInt(4), is(1000));\n        assertThat(resultSet1.getInt(5), is(10000));\n        assertFalse(resultSet1.next());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/statement/FederatePrepareStatementTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"99166c491f1e3005946dc7324094a08e812121af","commitMessage":"@@@fix calcite select result merge error when call execute method (#10758)\n\n* fix calcite select result merge error when call execute method\n\n* fix test case","date":"2021-06-11 13:29:00","modifiedFileCount":"8","status":"M","submitter":"Zhengqiang Duan"}]
