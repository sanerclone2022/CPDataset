[{"authorTime":"2021-04-12 18:54:17","codes":[{"authorDate":"2021-04-12 18:54:17","commitOrder":1,"curCode":"    public void init() {\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, password, md5Salt.getBytes(StandardCharsets.UTF_8));\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        passwordMessagePacket = new PostgreSQLPasswordMessagePacket(payload);\n    }\n","date":"2021-04-12 18:54:17","endLine":77,"groupId":"813","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6a/c3bb61b6e075c5c4affef1377fd19af9a1e98d.src","preCode":"    public void init() {\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, password, md5Salt.getBytes(StandardCharsets.UTF_8));\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        passwordMessagePacket = new PostgreSQLPasswordMessagePacket(payload);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/authentication/PostgreSQLAuthenticationHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"},{"authorDate":"2021-04-12 18:54:17","commitOrder":1,"curCode":"    private void assertLogin(final String inputPassword) {\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        payload.writeInt4(64);\n        payload.writeInt4(196608);\n        payload.writeStringNul(\"user\");\n        payload.writeStringNul(username);\n        ChannelHandlerContext channelHandlerContext = mock(ChannelHandlerContext.class);\n        PostgreSQLAuthenticationEngine engine = new PostgreSQLAuthenticationEngine();\n        AuthenticationResult actual = engine.authenticate(channelHandlerContext, payload);\n        assertThat(actual.isFinished(), is(false));\n        assertThat(actual.getUsername(), is(username));\n        ArgumentCaptor<PostgreSQLAuthenticationMD5PasswordPacket> argumentCaptor = ArgumentCaptor.forClass(PostgreSQLAuthenticationMD5PasswordPacket.class);\n        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n        PostgreSQLAuthenticationMD5PasswordPacket md5PasswordPacket = argumentCaptor.getValue();\n        byte[] md5Salt = getMd5Salt(md5PasswordPacket);\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, inputPassword, md5Salt);\n        payload.writeInt1('p');\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        StandardMetaDataContexts standardMetaDataContexts = new StandardMetaDataContexts();\n        standardMetaDataContexts.getUsers().getUsers().add(new ShardingSphereUser(username, password, \"\"));\n        ProxyContext.getInstance().init(standardMetaDataContexts, mock(TransactionContexts.class));\n        actual = engine.authenticate(channelHandlerContext, payload);\n        assertThat(actual.isFinished(), is(password.equals(inputPassword)));\n    }\n","date":"2021-04-12 18:54:17","endLine":129,"groupId":"7118","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertLogin","params":"(finalStringinputPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/85/db4a56c11d0c58f3521750fb0a49e0d72ee26f.src","preCode":"    private void assertLogin(final String inputPassword) {\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        payload.writeInt4(64);\n        payload.writeInt4(196608);\n        payload.writeStringNul(\"user\");\n        payload.writeStringNul(username);\n        ChannelHandlerContext channelHandlerContext = mock(ChannelHandlerContext.class);\n        PostgreSQLAuthenticationEngine engine = new PostgreSQLAuthenticationEngine();\n        AuthenticationResult actual = engine.authenticate(channelHandlerContext, payload);\n        assertThat(actual.isFinished(), is(false));\n        assertThat(actual.getUsername(), is(username));\n        ArgumentCaptor<PostgreSQLAuthenticationMD5PasswordPacket> argumentCaptor = ArgumentCaptor.forClass(PostgreSQLAuthenticationMD5PasswordPacket.class);\n        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n        PostgreSQLAuthenticationMD5PasswordPacket md5PasswordPacket = argumentCaptor.getValue();\n        byte[] md5Salt = getMd5Salt(md5PasswordPacket);\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, inputPassword, md5Salt);\n        payload.writeInt1('p');\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        StandardMetaDataContexts standardMetaDataContexts = new StandardMetaDataContexts();\n        standardMetaDataContexts.getUsers().getUsers().add(new ShardingSphereUser(username, password, \"\"));\n        ProxyContext.getInstance().init(standardMetaDataContexts, mock(TransactionContexts.class));\n        actual = engine.authenticate(channelHandlerContext, payload);\n        assertThat(actual.isFinished(), is(password.equals(inputPassword)));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/authentication/PostgreSQLAuthenticationEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"}],"commitId":"20af443ee6670aac77a9a3fcb1ee9dbc1c3c28df","commitMessage":"@@@Rename auth to authentication or authenticated for meaningful and clear reason (#10050)\n\n","date":"2021-04-12 18:54:17","modifiedFileCount":"17","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-05-18 13:23:30","codes":[{"authorDate":"2021-04-12 18:54:17","commitOrder":2,"curCode":"    public void init() {\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, password, md5Salt.getBytes(StandardCharsets.UTF_8));\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        passwordMessagePacket = new PostgreSQLPasswordMessagePacket(payload);\n    }\n","date":"2021-04-12 18:54:17","endLine":77,"groupId":"813","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6a/c3bb61b6e075c5c4affef1377fd19af9a1e98d.src","preCode":"    public void init() {\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, password, md5Salt.getBytes(StandardCharsets.UTF_8));\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        passwordMessagePacket = new PostgreSQLPasswordMessagePacket(payload);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/authentication/PostgreSQLAuthenticationHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2021-05-18 13:23:30","commitOrder":2,"curCode":"    private void assertLogin(final String inputPassword) {\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        payload.writeInt4(64);\n        payload.writeInt4(196608);\n        payload.writeStringNul(\"user\");\n        payload.writeStringNul(username);\n        ChannelHandlerContext channelHandlerContext = mock(ChannelHandlerContext.class);\n        PostgreSQLAuthenticationEngine engine = new PostgreSQLAuthenticationEngine();\n        AuthenticationResult actual = engine.authenticate(channelHandlerContext, payload);\n        assertThat(actual.isFinished(), is(false));\n        assertThat(actual.getUsername(), is(username));\n        ArgumentCaptor<PostgreSQLAuthenticationMD5PasswordPacket> argumentCaptor = ArgumentCaptor.forClass(PostgreSQLAuthenticationMD5PasswordPacket.class);\n        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n        PostgreSQLAuthenticationMD5PasswordPacket md5PasswordPacket = argumentCaptor.getValue();\n        byte[] md5Salt = getMd5Salt(md5PasswordPacket);\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, inputPassword, md5Salt);\n        payload.writeInt1('p');\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        StandardMetaDataContexts standardMetaDataContexts = getMetaDataContexts(new ShardingSphereUser(username, password, \"\"));\n        ProxyContext.getInstance().init(standardMetaDataContexts, mock(TransactionContexts.class));\n        actual = engine.authenticate(channelHandlerContext, payload);\n        assertThat(actual.isFinished(), is(password.equals(inputPassword)));\n    }\n","date":"2021-05-18 13:23:30","endLine":145,"groupId":"7118","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertLogin","params":"(finalStringinputPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ed/2ac534b2d50787b1d6974767bc330070446d70.src","preCode":"    private void assertLogin(final String inputPassword) {\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        payload.writeInt4(64);\n        payload.writeInt4(196608);\n        payload.writeStringNul(\"user\");\n        payload.writeStringNul(username);\n        ChannelHandlerContext channelHandlerContext = mock(ChannelHandlerContext.class);\n        PostgreSQLAuthenticationEngine engine = new PostgreSQLAuthenticationEngine();\n        AuthenticationResult actual = engine.authenticate(channelHandlerContext, payload);\n        assertThat(actual.isFinished(), is(false));\n        assertThat(actual.getUsername(), is(username));\n        ArgumentCaptor<PostgreSQLAuthenticationMD5PasswordPacket> argumentCaptor = ArgumentCaptor.forClass(PostgreSQLAuthenticationMD5PasswordPacket.class);\n        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n        PostgreSQLAuthenticationMD5PasswordPacket md5PasswordPacket = argumentCaptor.getValue();\n        byte[] md5Salt = getMd5Salt(md5PasswordPacket);\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, inputPassword, md5Salt);\n        payload.writeInt1('p');\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        StandardMetaDataContexts standardMetaDataContexts = new StandardMetaDataContexts();\n        standardMetaDataContexts.getUsers().getUsers().add(new ShardingSphereUser(username, password, \"\"));\n        ProxyContext.getInstance().init(standardMetaDataContexts, mock(TransactionContexts.class));\n        actual = engine.authenticate(channelHandlerContext, payload);\n        assertThat(actual.isFinished(), is(password.equals(inputPassword)));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/authentication/PostgreSQLAuthenticationEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"fe0ddc8c5d6c106f4f88af39bc42a4038f60b26b","commitMessage":"@@@Users  removed from StandardMetaDataContexts (#10310)\n\n* remove user\n\n* fix review\n\n* trigger ci\n\n* fix code\n\n* fix","date":"2021-05-18 13:23:30","modifiedFileCount":"39","status":"M","submitter":"Zhu jun"},{"authorTime":"2021-07-27 13:27:26","codes":[{"authorDate":"2021-04-12 18:54:17","commitOrder":3,"curCode":"    public void init() {\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, password, md5Salt.getBytes(StandardCharsets.UTF_8));\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        passwordMessagePacket = new PostgreSQLPasswordMessagePacket(payload);\n    }\n","date":"2021-04-12 18:54:17","endLine":77,"groupId":"813","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6a/c3bb61b6e075c5c4affef1377fd19af9a1e98d.src","preCode":"    public void init() {\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, password, md5Salt.getBytes(StandardCharsets.UTF_8));\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        passwordMessagePacket = new PostgreSQLPasswordMessagePacket(payload);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/authentication/PostgreSQLAuthenticationHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2021-07-27 13:27:26","commitOrder":3,"curCode":"    private void assertLogin(final String inputPassword) {\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        payload.writeInt4(64);\n        payload.writeInt4(196608);\n        payload.writeStringNul(\"user\");\n        payload.writeStringNul(username);\n        ChannelHandlerContext channelHandlerContext = mock(ChannelHandlerContext.class);\n        PostgreSQLAuthenticationEngine engine = new PostgreSQLAuthenticationEngine();\n        AuthenticationResult actual = engine.authenticate(channelHandlerContext, payload);\n        assertFalse(actual.isFinished());\n        assertThat(actual.getUsername(), is(username));\n        ArgumentCaptor<PostgreSQLAuthenticationMD5PasswordPacket> argumentCaptor = ArgumentCaptor.forClass(PostgreSQLAuthenticationMD5PasswordPacket.class);\n        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n        PostgreSQLAuthenticationMD5PasswordPacket md5PasswordPacket = argumentCaptor.getValue();\n        byte[] md5Salt = getMd5Salt(md5PasswordPacket);\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, inputPassword, md5Salt);\n        payload.writeInt1('p');\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        StandardMetaDataContexts standardMetaDataContexts = getMetaDataContexts(new ShardingSphereUser(username, password, \"\"));\n        ProxyContext.getInstance().init(standardMetaDataContexts, mock(TransactionContexts.class));\n        actual = engine.authenticate(channelHandlerContext, payload);\n        assertThat(actual.isFinished(), is(password.equals(inputPassword)));\n    }\n","date":"2021-07-27 13:27:26","endLine":140,"groupId":"9224","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertLogin","params":"(finalStringinputPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/12/8f4f1eddf805743a9b6933d6b6eaf42d227159.src","preCode":"    private void assertLogin(final String inputPassword) {\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        payload.writeInt4(64);\n        payload.writeInt4(196608);\n        payload.writeStringNul(\"user\");\n        payload.writeStringNul(username);\n        ChannelHandlerContext channelHandlerContext = mock(ChannelHandlerContext.class);\n        PostgreSQLAuthenticationEngine engine = new PostgreSQLAuthenticationEngine();\n        AuthenticationResult actual = engine.authenticate(channelHandlerContext, payload);\n        assertThat(actual.isFinished(), is(false));\n        assertThat(actual.getUsername(), is(username));\n        ArgumentCaptor<PostgreSQLAuthenticationMD5PasswordPacket> argumentCaptor = ArgumentCaptor.forClass(PostgreSQLAuthenticationMD5PasswordPacket.class);\n        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n        PostgreSQLAuthenticationMD5PasswordPacket md5PasswordPacket = argumentCaptor.getValue();\n        byte[] md5Salt = getMd5Salt(md5PasswordPacket);\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, inputPassword, md5Salt);\n        payload.writeInt1('p');\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        StandardMetaDataContexts standardMetaDataContexts = getMetaDataContexts(new ShardingSphereUser(username, password, \"\"));\n        ProxyContext.getInstance().init(standardMetaDataContexts, mock(TransactionContexts.class));\n        actual = engine.authenticate(channelHandlerContext, payload);\n        assertThat(actual.isFinished(), is(password.equals(inputPassword)));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/authentication/PostgreSQLAuthenticationEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"9a398fd85fea49169bfae411db0fc5080906a708","commitMessage":"@@@Use assertTrue to instead of assertThat(xxx.  is(true)) (#11528)\n\n","date":"2021-07-27 13:27:26","modifiedFileCount":"22","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-15 02:33:31","codes":[{"authorDate":"2021-04-12 18:54:17","commitOrder":4,"curCode":"    public void init() {\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, password, md5Salt.getBytes(StandardCharsets.UTF_8));\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        passwordMessagePacket = new PostgreSQLPasswordMessagePacket(payload);\n    }\n","date":"2021-04-12 18:54:17","endLine":77,"groupId":"813","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6a/c3bb61b6e075c5c4affef1377fd19af9a1e98d.src","preCode":"    public void init() {\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, password, md5Salt.getBytes(StandardCharsets.UTF_8));\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        passwordMessagePacket = new PostgreSQLPasswordMessagePacket(payload);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/authentication/PostgreSQLAuthenticationHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2021-08-15 02:33:31","commitOrder":4,"curCode":"    private void assertLogin(final String inputPassword) {\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        payload.writeInt4(64);\n        payload.writeInt4(196608);\n        payload.writeStringNul(\"user\");\n        payload.writeStringNul(username);\n        ChannelHandlerContext channelHandlerContext = mock(ChannelHandlerContext.class);\n        PostgreSQLAuthenticationEngine engine = new PostgreSQLAuthenticationEngine();\n        AuthenticationResult actual = engine.authenticate(channelHandlerContext, payload);\n        assertFalse(actual.isFinished());\n        assertThat(actual.getUsername(), is(username));\n        ArgumentCaptor<PostgreSQLAuthenticationMD5PasswordPacket> argumentCaptor = ArgumentCaptor.forClass(PostgreSQLAuthenticationMD5PasswordPacket.class);\n        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n        PostgreSQLAuthenticationMD5PasswordPacket md5PasswordPacket = argumentCaptor.getValue();\n        byte[] md5Salt = getMd5Salt(md5PasswordPacket);\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, inputPassword, md5Salt);\n        payload.writeInt1('p');\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        StandardMetaDataContexts standardMetaDataContexts = getMetaDataContexts(new ShardingSphereUser(username, password, \"\"));\n        ContextManager contextManager = mock(ContextManager.class, RETURNS_DEEP_STUBS);\n        when(contextManager.getMetaDataContexts()).thenReturn(standardMetaDataContexts);\n        ProxyContext.getInstance().init(contextManager);\n        actual = engine.authenticate(channelHandlerContext, payload);\n        assertThat(actual.isFinished(), is(password.equals(inputPassword)));\n    }\n","date":"2021-08-15 02:33:31","endLine":144,"groupId":"9224","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertLogin","params":"(finalStringinputPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/46/a47c3f23b9875efa7803733cbe627d30c10bfa.src","preCode":"    private void assertLogin(final String inputPassword) {\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        payload.writeInt4(64);\n        payload.writeInt4(196608);\n        payload.writeStringNul(\"user\");\n        payload.writeStringNul(username);\n        ChannelHandlerContext channelHandlerContext = mock(ChannelHandlerContext.class);\n        PostgreSQLAuthenticationEngine engine = new PostgreSQLAuthenticationEngine();\n        AuthenticationResult actual = engine.authenticate(channelHandlerContext, payload);\n        assertFalse(actual.isFinished());\n        assertThat(actual.getUsername(), is(username));\n        ArgumentCaptor<PostgreSQLAuthenticationMD5PasswordPacket> argumentCaptor = ArgumentCaptor.forClass(PostgreSQLAuthenticationMD5PasswordPacket.class);\n        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n        PostgreSQLAuthenticationMD5PasswordPacket md5PasswordPacket = argumentCaptor.getValue();\n        byte[] md5Salt = getMd5Salt(md5PasswordPacket);\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, inputPassword, md5Salt);\n        payload.writeInt1('p');\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        StandardMetaDataContexts standardMetaDataContexts = getMetaDataContexts(new ShardingSphereUser(username, password, \"\"));\n        ProxyContext.getInstance().init(standardMetaDataContexts, mock(TransactionContexts.class));\n        actual = engine.authenticate(channelHandlerContext, payload);\n        assertThat(actual.isFinished(), is(password.equals(inputPassword)));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/authentication/PostgreSQLAuthenticationEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"d6e424ba68c64ea1835a42b0f4b0fb7f69c95323","commitMessage":"@@@Add ContextManager (#11822)\n\n* Add ContextManager\n\n* Use ContextManager on GovernanceShardingSphereDataSource\n\n* Use ContextManager on ShardingSphereDataSource\n\n* Use ContextManager on ShardingSphereConnection\n\n* Use ContextManager on ShardingSphereConnection\n\n* Refactor AbstractBaseExecutorTest\n\n* Use ContextManager on proxy\n\n* Fix test case","date":"2021-08-15 02:33:31","modifiedFileCount":"118","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-15 11:55:34","codes":[{"authorDate":"2021-04-12 18:54:17","commitOrder":5,"curCode":"    public void init() {\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, password, md5Salt.getBytes(StandardCharsets.UTF_8));\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        passwordMessagePacket = new PostgreSQLPasswordMessagePacket(payload);\n    }\n","date":"2021-04-12 18:54:17","endLine":77,"groupId":"10876","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6a/c3bb61b6e075c5c4affef1377fd19af9a1e98d.src","preCode":"    public void init() {\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, password, md5Salt.getBytes(StandardCharsets.UTF_8));\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        passwordMessagePacket = new PostgreSQLPasswordMessagePacket(payload);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/authentication/PostgreSQLAuthenticationHandlerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2021-08-15 11:55:34","commitOrder":5,"curCode":"    private void assertLogin(final String inputPassword) {\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        payload.writeInt4(64);\n        payload.writeInt4(196608);\n        payload.writeStringNul(\"user\");\n        payload.writeStringNul(username);\n        ChannelHandlerContext channelHandlerContext = mock(ChannelHandlerContext.class);\n        PostgreSQLAuthenticationEngine engine = new PostgreSQLAuthenticationEngine();\n        AuthenticationResult actual = engine.authenticate(channelHandlerContext, payload);\n        assertFalse(actual.isFinished());\n        assertThat(actual.getUsername(), is(username));\n        ArgumentCaptor<PostgreSQLAuthenticationMD5PasswordPacket> argumentCaptor = ArgumentCaptor.forClass(PostgreSQLAuthenticationMD5PasswordPacket.class);\n        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n        PostgreSQLAuthenticationMD5PasswordPacket md5PasswordPacket = argumentCaptor.getValue();\n        byte[] md5Salt = getMd5Salt(md5PasswordPacket);\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, inputPassword, md5Salt);\n        payload.writeInt1('p');\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        MetaDataContexts metaDataContexts = getMetaDataContexts(new ShardingSphereUser(username, password, \"\"));\n        ContextManager contextManager = mock(ContextManager.class, RETURNS_DEEP_STUBS);\n        when(contextManager.getMetaDataContexts()).thenReturn(metaDataContexts);\n        ProxyContext.getInstance().init(contextManager);\n        actual = engine.authenticate(channelHandlerContext, payload);\n        assertThat(actual.isFinished(), is(password.equals(inputPassword)));\n    }\n","date":"2021-08-15 11:55:34","endLine":144,"groupId":"10876","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"assertLogin","params":"(finalStringinputPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/33/0e6a0a29b93d6a79d24c33735c281429f65539.src","preCode":"    private void assertLogin(final String inputPassword) {\n        PostgreSQLPacketPayload payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        payload.writeInt4(64);\n        payload.writeInt4(196608);\n        payload.writeStringNul(\"user\");\n        payload.writeStringNul(username);\n        ChannelHandlerContext channelHandlerContext = mock(ChannelHandlerContext.class);\n        PostgreSQLAuthenticationEngine engine = new PostgreSQLAuthenticationEngine();\n        AuthenticationResult actual = engine.authenticate(channelHandlerContext, payload);\n        assertFalse(actual.isFinished());\n        assertThat(actual.getUsername(), is(username));\n        ArgumentCaptor<PostgreSQLAuthenticationMD5PasswordPacket> argumentCaptor = ArgumentCaptor.forClass(PostgreSQLAuthenticationMD5PasswordPacket.class);\n        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n        PostgreSQLAuthenticationMD5PasswordPacket md5PasswordPacket = argumentCaptor.getValue();\n        byte[] md5Salt = getMd5Salt(md5PasswordPacket);\n        payload = new PostgreSQLPacketPayload(createByteBuf(16, 128));\n        String md5Digest = md5Encode(username, inputPassword, md5Salt);\n        payload.writeInt1('p');\n        payload.writeInt4(4 + md5Digest.length() + 1);\n        payload.writeStringNul(md5Digest);\n        StandardMetaDataContexts standardMetaDataContexts = getMetaDataContexts(new ShardingSphereUser(username, password, \"\"));\n        ContextManager contextManager = mock(ContextManager.class, RETURNS_DEEP_STUBS);\n        when(contextManager.getMetaDataContexts()).thenReturn(standardMetaDataContexts);\n        ProxyContext.getInstance().init(contextManager);\n        actual = engine.authenticate(channelHandlerContext, payload);\n        assertThat(actual.isFinished(), is(password.equals(inputPassword)));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/authentication/PostgreSQLAuthenticationEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"21a22f867f1709d878330ac64794a8a8880a116c","commitMessage":"@@@Merge StandardContexts and Contexts interface (#11826)\n\n","date":"2021-08-15 11:55:34","modifiedFileCount":"53","status":"M","submitter":"Liang Zhang"}]
