[{"authorTime":"2021-06-04 22:49:49","codes":[{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertBuildOrderByStreamMergedResultWithSQLServerLimit() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"SQLServer\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(\n                buildSelectStatement(new SQLServerSelectStatement()), new GroupByContext(Collections.emptyList()),\n                new OrderByContext(Collections.singletonList(new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC))), false),\n                new ProjectionsContext(0, 0, false, Collections.emptyList()), \n                new PaginationContext(new NumberLiteralRowNumberValueSegment(0, 0, 1, true), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(TopAndRowNumberDecoratorMergedResult.class));\n        assertThat(((TopAndRowNumberDecoratorMergedResult) actual).getMergedResult(), instanceOf(OrderByStreamMergedResult.class));\n    }\n","date":"2021-06-04 22:49:49","endLine":171,"groupId":"9487","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildOrderByStreamMergedResultWithSQLServerLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a7/bca3b50963f7ff9d074f650320fc67b78f00ea.src","preCode":"    public void assertBuildOrderByStreamMergedResultWithSQLServerLimit() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"SQLServer\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(\n                buildSelectStatement(new SQLServerSelectStatement()), new GroupByContext(Collections.emptyList()),\n                new OrderByContext(Collections.singletonList(new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC))), false),\n                new ProjectionsContext(0, 0, false, Collections.emptyList()), \n                new PaginationContext(new NumberLiteralRowNumberValueSegment(0, 0, 1, true), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(TopAndRowNumberDecoratorMergedResult.class));\n        assertThat(((TopAndRowNumberDecoratorMergedResult) actual).getMergedResult(), instanceOf(OrderByStreamMergedResult.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/ShardingDQLResultMergerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"B"},{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertBuildGroupByMemoryMergedResultWithSQLServerLimit() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"SQLServer\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(buildSelectStatement(new SQLServerSelectStatement()),\n                new GroupByContext(Arrays.asList(\n                        new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC)), \n                        new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.ASC)))), new OrderByContext(Collections.emptyList(), false),\n                new ProjectionsContext(0, 0, false, Collections.emptyList()), \n                new PaginationContext(new NumberLiteralRowNumberValueSegment(0, 0, 1, true), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(TopAndRowNumberDecoratorMergedResult.class));\n        assertThat(((TopAndRowNumberDecoratorMergedResult) actual).getMergedResult(), instanceOf(GroupByMemoryMergedResult.class));\n    }\n","date":"2021-06-04 22:49:49","endLine":269,"groupId":"9487","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuildGroupByMemoryMergedResultWithSQLServerLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a7/bca3b50963f7ff9d074f650320fc67b78f00ea.src","preCode":"    public void assertBuildGroupByMemoryMergedResultWithSQLServerLimit() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"SQLServer\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(buildSelectStatement(new SQLServerSelectStatement()),\n                new GroupByContext(Arrays.asList(\n                        new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC)), \n                        new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.ASC)))), new OrderByContext(Collections.emptyList(), false),\n                new ProjectionsContext(0, 0, false, Collections.emptyList()), \n                new PaginationContext(new NumberLiteralRowNumberValueSegment(0, 0, 1, true), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(TopAndRowNumberDecoratorMergedResult.class));\n        assertThat(((TopAndRowNumberDecoratorMergedResult) actual).getMergedResult(), instanceOf(GroupByMemoryMergedResult.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/ShardingDQLResultMergerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"B"}],"commitId":"6b157b44d0336e4d9c61f940b0ec19c26758af84","commitMessage":"@@@Merge sharding feature to core module (#10662)\n\n* Merge dependencies\n\n* Merge sharding feature to api module\n\n* Merge sharding feature to core module","date":"2021-06-04 22:49:49","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-08-06 15:37:24","codes":[{"authorDate":"2021-08-06 15:37:24","commitOrder":2,"curCode":"    public void assertBuildOrderByStreamMergedResultWithSQLServerLimit() throws SQLException {\n        final ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"SQLServer\"));\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n        when(metaData.getSchema()).thenReturn(mock(ShardingSphereSchema.class));\n        SQLServerSelectStatement selectStatement = (SQLServerSelectStatement) buildSelectStatement(new SQLServerSelectStatement());\n        selectStatement.setOrderBy(new OrderBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC))));\n        selectStatement.setProjections(new ProjectionsSegment(0, 0));\n        selectStatement.setLimit(new LimitSegment(0, 0, new NumberLiteralRowNumberValueSegment(0, 0, 1, true), null));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(Collections.singletonMap(DefaultSchema.LOGIC_NAME, metaData), Collections.emptyList(),\n                selectStatement, DefaultSchema.LOGIC_NAME);\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(TopAndRowNumberDecoratorMergedResult.class));\n        assertThat(((TopAndRowNumberDecoratorMergedResult) actual).getMergedResult(), instanceOf(OrderByStreamMergedResult.class));\n    }\n","date":"2021-08-06 15:37:24","endLine":240,"groupId":"10710","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildOrderByStreamMergedResultWithSQLServerLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/91/b157c5938e6bd21ce8cab39304e3baf016c15b.src","preCode":"    public void assertBuildOrderByStreamMergedResultWithSQLServerLimit() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"SQLServer\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(\n                buildSelectStatement(new SQLServerSelectStatement()), new GroupByContext(Collections.emptyList()),\n                new OrderByContext(Collections.singletonList(new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC))), false),\n                new ProjectionsContext(0, 0, false, Collections.emptyList()), \n                new PaginationContext(new NumberLiteralRowNumberValueSegment(0, 0, 1, true), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(TopAndRowNumberDecoratorMergedResult.class));\n        assertThat(((TopAndRowNumberDecoratorMergedResult) actual).getMergedResult(), instanceOf(OrderByStreamMergedResult.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/ShardingDQLResultMergerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"},{"authorDate":"2021-08-06 15:37:24","commitOrder":2,"curCode":"    public void assertBuildGroupByMemoryMergedResultWithSQLServerLimit() throws SQLException {\n        final ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"SQLServer\"));\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n        when(metaData.getSchema()).thenReturn(mock(ShardingSphereSchema.class));\n        SQLServerSelectStatement selectStatement = (SQLServerSelectStatement) buildSelectStatement(new SQLServerSelectStatement());\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        selectStatement.setProjections(projectionsSegment);\n        selectStatement.setGroupBy(new GroupBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC))));\n        selectStatement.setOrderBy(new OrderBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.ASC))));\n        selectStatement.setLimit(new LimitSegment(0, 0, new NumberLiteralRowNumberValueSegment(0, 0, 1, true), null));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(Collections.singletonMap(DefaultSchema.LOGIC_NAME, metaData), Collections.emptyList(),\n                selectStatement, DefaultSchema.LOGIC_NAME);\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(TopAndRowNumberDecoratorMergedResult.class));\n        assertThat(((TopAndRowNumberDecoratorMergedResult) actual).getMergedResult(), instanceOf(GroupByMemoryMergedResult.class));\n    }\n","date":"2021-08-06 15:37:24","endLine":401,"groupId":"10710","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuildGroupByMemoryMergedResultWithSQLServerLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/91/b157c5938e6bd21ce8cab39304e3baf016c15b.src","preCode":"    public void assertBuildGroupByMemoryMergedResultWithSQLServerLimit() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"SQLServer\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(buildSelectStatement(new SQLServerSelectStatement()),\n                new GroupByContext(Arrays.asList(\n                        new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC)), \n                        new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.ASC)))), new OrderByContext(Collections.emptyList(), false),\n                new ProjectionsContext(0, 0, false, Collections.emptyList()), \n                new PaginationContext(new NumberLiteralRowNumberValueSegment(0, 0, 1, true), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(TopAndRowNumberDecoratorMergedResult.class));\n        assertThat(((TopAndRowNumberDecoratorMergedResult) actual).getMergedResult(), instanceOf(GroupByMemoryMergedResult.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/ShardingDQLResultMergerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"}],"commitId":"2843f408e67d98d3e62485c8ed89dbe08e9cb202","commitMessage":"@@@Remove test only constructor of SelectStatementContext (#11675)\n\n* TopAndRowNumberDecoratorMergedResultTest use SelectStatementContext's second constructor\n\n* PreparedShadowDataSourceRouterTest use SelectStatementContext's second constructor\n\n* GroupByMemoryMergedResultTest use SelectStatementContext's second constructor\n\n* GroupByRowComparatorTest use SelectStatementContext's second constructor\n\n* ShardingResultMergerEngineTest use SelectStatementContext's second constructor\n\n* ShardingDQLResultMergerTest use SelectStatementContext's second constructor\n\n* ShardingDQLResultMergerTest use SelectStatementContext's second constructor2\n\n* GroupByStreamMergedResultTest use SelectStatementContext's second constructor\n\n* IteratorStreamMergedResultTest use SelectStatementContext's second constructor\n\n* OrderByStreamMergedResultTest use SelectStatementContext's second constructor\n\n* SelectStatementContextTest use SelectStatementContext's second constructor\n\n* LimitDecoratorMergedResultTest use SelectStatementContext's second constructor\n\n* RowNumberDecoratorMergedResultTest use SelectStatementContext's second constructor\n\n* OrderByValueTest use SelectStatementContext's second constructor\n\n* code style\n\n* merge code","date":"2021-08-06 15:37:24","modifiedFileCount":"14","status":"M","submitter":"liguoping"}]
