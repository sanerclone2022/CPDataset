[{"authorTime":"2020-10-04 15:31:28","codes":[{"authorDate":"2021-05-06 23:57:29","commitOrder":3,"curCode":"    private void assertReadwriteSplittingRuleConfiguration(final YamlProxyRuleConfiguration actual) {\n        assertThat(actual.getSchemaName(), is(\"readwrite_splitting_db\"));\n        assertThat(actual.getDataSources().size(), is(3));\n        assertNull(actual.getDataSource());\n        assertDataSourceParameter(actual.getDataSources().get(\"write_ds\"), \"jdbc:mysql://127.0.0.1:3306/write_ds\");\n        assertDataSourceParameter(actual.getDataSources().get(\"read_ds_0\"), \"jdbc:mysql://127.0.0.1:3306/read_ds_0\");\n        assertDataSourceParameter(actual.getDataSources().get(\"read_ds_1\"), \"jdbc:mysql://127.0.0.1:3306/read_ds_1\");\n        assertFalse(actual.getRules().stream().filter(\n            each -> each instanceof YamlShardingRuleConfiguration).findFirst().map(configuration -> (YamlShardingRuleConfiguration) configuration).isPresent());\n        assertFalse(actual.getRules().stream().filter(\n            each -> each instanceof YamlEncryptRuleConfiguration).findFirst().map(configuration -> (YamlEncryptRuleConfiguration) configuration).isPresent());\n        Optional<YamlReadwriteSplittingRuleConfiguration> ruleConfig = actual.getRules().stream().filter(\n            each -> each instanceof YamlReadwriteSplittingRuleConfiguration).findFirst().map(configuration -> (YamlReadwriteSplittingRuleConfiguration) configuration);\n        assertTrue(ruleConfig.isPresent());\n        for (YamlReadwriteSplittingDataSourceRuleConfiguration each : ruleConfig.get().getDataSources().values()) {\n            assertReadwriteSplittingRuleConfiguration(each);\n        }\n    }\n","date":"2021-05-06 23:57:29","endLine":93,"groupId":"11032","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertReadwriteSplittingRuleConfiguration","params":"(finalYamlProxyRuleConfigurationactual)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/37/33275b66c7fc01553b0605569ae0792c3903f2.src","preCode":"    private void assertReadwriteSplittingRuleConfiguration(final YamlProxyRuleConfiguration actual) {\n        assertThat(actual.getSchemaName(), is(\"readwrite_splitting_db\"));\n        assertThat(actual.getDataSources().size(), is(3));\n        assertNull(actual.getDataSource());\n        assertDataSourceParameter(actual.getDataSources().get(\"write_ds\"), \"jdbc:mysql://127.0.0.1:3306/write_ds\");\n        assertDataSourceParameter(actual.getDataSources().get(\"read_ds_0\"), \"jdbc:mysql://127.0.0.1:3306/read_ds_0\");\n        assertDataSourceParameter(actual.getDataSources().get(\"read_ds_1\"), \"jdbc:mysql://127.0.0.1:3306/read_ds_1\");\n        assertFalse(actual.getRules().stream().filter(\n            each -> each instanceof YamlShardingRuleConfiguration).findFirst().map(configuration -> (YamlShardingRuleConfiguration) configuration).isPresent());\n        assertFalse(actual.getRules().stream().filter(\n            each -> each instanceof YamlEncryptRuleConfiguration).findFirst().map(configuration -> (YamlEncryptRuleConfiguration) configuration).isPresent());\n        Optional<YamlReadwriteSplittingRuleConfiguration> ruleConfig = actual.getRules().stream().filter(\n            each -> each instanceof YamlReadwriteSplittingRuleConfiguration).findFirst().map(configuration -> (YamlReadwriteSplittingRuleConfiguration) configuration);\n        assertTrue(ruleConfig.isPresent());\n        for (YamlReadwriteSplittingDataSourceRuleConfiguration each : ruleConfig.get().getDataSources().values()) {\n            assertReadwriteSplittingRuleConfiguration(each);\n        }\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-common/src/test/java/org/apache/shardingsphere/proxy/config/ProxyConfigurationLoaderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"},{"authorDate":"2020-10-04 15:31:28","commitOrder":3,"curCode":"    private void assertEncryptRuleConfiguration(final YamlProxyRuleConfiguration actual) {\n        assertThat(actual.getSchemaName(), is(\"encrypt_db\"));\n        assertThat(actual.getDataSources().size(), is(1));\n        assertNotNull(actual.getDataSource());\n        assertDataSourceParameter(actual.getDataSources().get(\"dataSource\"), \"jdbc:mysql://127.0.0.1:3306/encrypt_ds\");\n        assertFalse(actual.getRules().stream().filter(\n            each -> each instanceof YamlShardingRuleConfiguration).findFirst().map(configuration -> (YamlShardingRuleConfiguration) configuration).isPresent());\n        Optional<YamlEncryptRuleConfiguration> encryptRuleConfig = actual.getRules().stream().filter(\n            each -> each instanceof YamlEncryptRuleConfiguration).findFirst().map(configuration -> (YamlEncryptRuleConfiguration) configuration);\n        assertTrue(encryptRuleConfig.isPresent());\n        assertEncryptRuleConfiguration(encryptRuleConfig.get());\n    }\n","date":"2020-10-04 15:31:28","endLine":115,"groupId":"6003","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertEncryptRuleConfiguration","params":"(finalYamlProxyRuleConfigurationactual)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3a/06d6734963e1f77a50b61d0089dcfd520ecc48.src","preCode":"    private void assertEncryptRuleConfiguration(final YamlProxyRuleConfiguration actual) {\n        assertThat(actual.getSchemaName(), is(\"encrypt_db\"));\n        assertThat(actual.getDataSources().size(), is(1));\n        assertNotNull(actual.getDataSource());\n        assertDataSourceParameter(actual.getDataSources().get(\"dataSource\"), \"jdbc:mysql://127.0.0.1:3306/encrypt_ds\");\n        assertFalse(actual.getRules().stream().filter(\n            each -> each instanceof YamlShardingRuleConfiguration).findFirst().map(configuration -> (YamlShardingRuleConfiguration) configuration).isPresent());\n        Optional<YamlEncryptRuleConfiguration> encryptRuleConfig = actual.getRules().stream().filter(\n            each -> each instanceof YamlEncryptRuleConfiguration).findFirst().map(configuration -> (YamlEncryptRuleConfiguration) configuration);\n        assertTrue(encryptRuleConfig.isPresent());\n        assertEncryptRuleConfiguration(encryptRuleConfig.get());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-common/src/test/java/org/apache/shardingsphere/proxy/config/ProxyConfigurationLoaderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"NB"}],"commitId":"c0a66492b6656ca15aac8cd880350a91c1e45bb0","commitMessage":"@@@Rename ReadWrite to Readwrite (#10261)\n\n* Rename ReadWriteSplittingRule\n\n* Rename ReadwriteSplittingDataSourceRuleConfiguration\n\n* Rename ReadwriteSplittingSQLRouter\n\n* Rename ReadwriteSplittingDataSourceRouter\n\n* Rename ReadwriteSplittingRule\n\n* Rename ReadwriteSplittingDataSourceRule\n\n* Rename AlgorithmProvidedReadwriteSplittingRuleBuilder\n\n* Rename ReadwriteSplittingRuleBuilder\n\n* rename ReadwriteSplittingOrder\n\n* Rename AlgorithmProvidedReadwriteSplittingRuleConfiguration\n\n* Rename YamlReadwriteSplittingRuleConfiguration\n\n* Rename YamlReadwriteSplittingDataSourceRuleConfiguration\n\n* Rename AlterReadwriteSplittingRuleStatementConverter\n\n* Rename CreateReadwriteSplittingRuleStatementConverter\n\n* Rename ReadwriteSplittingRuleAlgorithmProviderConfigurationYamlSwapper\n\n* Rename ReadwriteSplittingRuleConfigurationYamlSwapper\n\n* Rename ReadwriteSplittingAlgorithmProvidedBeanRegistry\n\n* Rename ReadwriteSplittingSpringBootCondition\n\n* Rename YamlReadwriteSplittingRuleSpringBootConfiguration\n\n* Rename ReadwriteSplittingRuleSpringbootConfiguration\n\n* Rename ReadwriteSplittingSpringBootStarterTest\n\n* Rename YamlGovernanceReadwriteSplittingIntegrateTest\n\n* Rename CreateReadwriteSplittingRuleStatement\n\n* Rename ReadwriteSplittingRuleSegment\n\n* Rename GovernanceSpringBootRegistryReadwriteSplittingTest\n\n* Rename AlterReadwriteSplittingRuleStatement\n\n* Rename ReadwriteSplittingRuleConfigurationChecker\n\n* Rename LocalShardingReadwriteSplittingConfiguration\n\n* Rename ReadwriteSplittingRuleNotExistedException\n\n* Rename ReadwriteSplittingRuleCreateExistsException\n\n* Rename AddReadwriteSplittingRuleDataSourcesExistedException\n\n* Rename ReadwriteSplittingRuleDataSourcesNotExistedException\n\n* Rename ReadwriteSplittingRuleQueryBackendHandler\n\n* Rename DropReadwriteSplittingRuleBackendHandler\n\n* Rename GovernanceSpringBootReadwriteSplittingTest\n\n* Rename AlterReadwriteSplittingRuleBackendHandler\n\n* Rename CreateReadwriteSplittingRuleBackendHandler\n\n* Rename GovernanceShardingReadwriteSplittingNamespaceTest\n\n* Rename YamlGovernanceShardingWithReadwriteSplittingIntegrateTest\n\n* Rename CloudReadwriteSplittingConfiguration\n\n* Rename ShardingReadwriteSplittingConfigurationPrecise\n\n* Rename AbstractShardingSphereDataSourceForReadwriteSplittingTest\n\n* Rename AlgorithmProvidedReadwriteSplittingRuleConfigurationChecker\n\n* Rename ReadwriteSplittingSpringNamespaceTest\n\n* Rename ReadwriteSplittingRuleBeanDefinitionTag\n\n* Rename AbstractReadwriteSplittingRuleConfigurationChecker\n\n* Rename ReadwriteSplittingNamespaceHandler\n\n* Rename ReadwriteSplittingRuleBeanDefinitionParser\n\n* Rename ReadWrite to Readwrite with java class\n\n* Rename ReadWrite to Readwrite with docs","date":"2021-05-06 23:57:29","modifiedFileCount":"20","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-14 11:08:04","codes":[{"authorDate":"2021-07-14 11:08:04","commitOrder":4,"curCode":"    private void assertReadwriteSplittingRuleConfiguration(final YamlProxyRuleConfiguration actual) {\n        assertThat(actual.getSchemaName(), is(\"readwrite_splitting_db\"));\n        assertThat(actual.getDataSources().size(), is(3));\n        assertDataSourceParameter(actual.getDataSources().get(\"write_ds\"), \"jdbc:mysql://127.0.0.1:3306/write_ds\");\n        assertDataSourceParameter(actual.getDataSources().get(\"read_ds_0\"), \"jdbc:mysql://127.0.0.1:3306/read_ds_0\");\n        assertDataSourceParameter(actual.getDataSources().get(\"read_ds_1\"), \"jdbc:mysql://127.0.0.1:3306/read_ds_1\");\n        assertFalse(actual.getRules().stream().filter(\n            each -> each instanceof YamlShardingRuleConfiguration).findFirst().map(configuration -> (YamlShardingRuleConfiguration) configuration).isPresent());\n        assertFalse(actual.getRules().stream().filter(\n            each -> each instanceof YamlEncryptRuleConfiguration).findFirst().map(configuration -> (YamlEncryptRuleConfiguration) configuration).isPresent());\n        Optional<YamlReadwriteSplittingRuleConfiguration> ruleConfig = actual.getRules().stream().filter(\n            each -> each instanceof YamlReadwriteSplittingRuleConfiguration).findFirst().map(configuration -> (YamlReadwriteSplittingRuleConfiguration) configuration);\n        assertTrue(ruleConfig.isPresent());\n        for (YamlReadwriteSplittingDataSourceRuleConfiguration each : ruleConfig.get().getDataSources().values()) {\n            assertReadwriteSplittingRuleConfiguration(each);\n        }\n    }\n","date":"2021-07-14 11:08:04","endLine":91,"groupId":"12884","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertReadwriteSplittingRuleConfiguration","params":"(finalYamlProxyRuleConfigurationactual)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b0/d7345406fb055b04983fead529ec9c5b23d484.src","preCode":"    private void assertReadwriteSplittingRuleConfiguration(final YamlProxyRuleConfiguration actual) {\n        assertThat(actual.getSchemaName(), is(\"readwrite_splitting_db\"));\n        assertThat(actual.getDataSources().size(), is(3));\n        assertNull(actual.getDataSource());\n        assertDataSourceParameter(actual.getDataSources().get(\"write_ds\"), \"jdbc:mysql://127.0.0.1:3306/write_ds\");\n        assertDataSourceParameter(actual.getDataSources().get(\"read_ds_0\"), \"jdbc:mysql://127.0.0.1:3306/read_ds_0\");\n        assertDataSourceParameter(actual.getDataSources().get(\"read_ds_1\"), \"jdbc:mysql://127.0.0.1:3306/read_ds_1\");\n        assertFalse(actual.getRules().stream().filter(\n            each -> each instanceof YamlShardingRuleConfiguration).findFirst().map(configuration -> (YamlShardingRuleConfiguration) configuration).isPresent());\n        assertFalse(actual.getRules().stream().filter(\n            each -> each instanceof YamlEncryptRuleConfiguration).findFirst().map(configuration -> (YamlEncryptRuleConfiguration) configuration).isPresent());\n        Optional<YamlReadwriteSplittingRuleConfiguration> ruleConfig = actual.getRules().stream().filter(\n            each -> each instanceof YamlReadwriteSplittingRuleConfiguration).findFirst().map(configuration -> (YamlReadwriteSplittingRuleConfiguration) configuration);\n        assertTrue(ruleConfig.isPresent());\n        for (YamlReadwriteSplittingDataSourceRuleConfiguration each : ruleConfig.get().getDataSources().values()) {\n            assertReadwriteSplittingRuleConfiguration(each);\n        }\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-common/src/test/java/org/apache/shardingsphere/proxy/config/ProxyConfigurationLoaderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2021-07-14 11:08:04","commitOrder":4,"curCode":"    private void assertEncryptRuleConfiguration(final YamlProxyRuleConfiguration actual) {\n        assertThat(actual.getSchemaName(), is(\"encrypt_db\"));\n        assertThat(actual.getDataSources().size(), is(1));\n        assertDataSourceParameter(actual.getDataSources().get(\"ds_0\"), \"jdbc:mysql://127.0.0.1:3306/encrypt_ds\");\n        assertFalse(actual.getRules().stream().filter(\n            each -> each instanceof YamlShardingRuleConfiguration).findFirst().map(configuration -> (YamlShardingRuleConfiguration) configuration).isPresent());\n        Optional<YamlEncryptRuleConfiguration> encryptRuleConfig = actual.getRules().stream().filter(\n            each -> each instanceof YamlEncryptRuleConfiguration).findFirst().map(configuration -> (YamlEncryptRuleConfiguration) configuration);\n        assertTrue(encryptRuleConfig.isPresent());\n        assertEncryptRuleConfiguration(encryptRuleConfig.get());\n    }\n","date":"2021-07-14 11:08:04","endLine":111,"groupId":"12884","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertEncryptRuleConfiguration","params":"(finalYamlProxyRuleConfigurationactual)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b0/d7345406fb055b04983fead529ec9c5b23d484.src","preCode":"    private void assertEncryptRuleConfiguration(final YamlProxyRuleConfiguration actual) {\n        assertThat(actual.getSchemaName(), is(\"encrypt_db\"));\n        assertThat(actual.getDataSources().size(), is(1));\n        assertNotNull(actual.getDataSource());\n        assertDataSourceParameter(actual.getDataSources().get(\"dataSource\"), \"jdbc:mysql://127.0.0.1:3306/encrypt_ds\");\n        assertFalse(actual.getRules().stream().filter(\n            each -> each instanceof YamlShardingRuleConfiguration).findFirst().map(configuration -> (YamlShardingRuleConfiguration) configuration).isPresent());\n        Optional<YamlEncryptRuleConfiguration> encryptRuleConfig = actual.getRules().stream().filter(\n            each -> each instanceof YamlEncryptRuleConfiguration).findFirst().map(configuration -> (YamlEncryptRuleConfiguration) configuration);\n        assertTrue(encryptRuleConfig.isPresent());\n        assertEncryptRuleConfiguration(encryptRuleConfig.get());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-common/src/test/java/org/apache/shardingsphere/proxy/config/ProxyConfigurationLoaderTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"5784be8b09de36e14e3b24c2d71568145f9063e8","commitMessage":"@@@add default single table rule router (#11324)\n\n* add default single table rule\n\n* optimize single table router logic\n\n* optimize single table router logic\n\n* fix checkstyle\n\n* adjust package\n\n* minor refactor\n\n* adjust test cases\n\n* optimize route code\n\n* remove useless single table test cases\n\n* add test case\n\n* optimize single table route for create table\n\n* fix test case error\n\n* optimize exclude table logic\n\n* optimize exclude table logic","date":"2021-07-14 11:08:04","modifiedFileCount":"38","status":"M","submitter":"Zhengqiang Duan"}]
