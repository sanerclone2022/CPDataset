[{"authorTime":"2020-08-25 16:18:03","codes":[{"authorDate":"2020-08-25 16:18:03","commitOrder":1,"curCode":"    public void assertRunNeedFlushByFalse() {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.EMPTY_LIST);\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStateHandler()).thenReturn(stateHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(stateHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(stateHandler).setRunningStatusIfNecessary();\n    }\n","date":"2020-08-25 16:18:03","endLine":109,"groupId":"8952","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRunNeedFlushByFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/37/0a7a04e67a55dad9717a84965d63c90c4f7d6d.src","preCode":"    public void assertRunNeedFlushByFalse() {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.EMPTY_LIST);\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStateHandler()).thenReturn(stateHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(stateHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(stateHandler).setRunningStatusIfNecessary();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"},{"authorDate":"2020-08-25 16:18:03","commitOrder":1,"curCode":"    public void assertRunByCommandExecutor() {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStateHandler()).thenReturn(stateHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(stateHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(stateHandler).setRunningStatusIfNecessary();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","date":"2020-08-25 16:18:03","endLine":152,"groupId":"8952","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRunByCommandExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/37/0a7a04e67a55dad9717a84965d63c90c4f7d6d.src","preCode":"    public void assertRunByCommandExecutor() {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStateHandler()).thenReturn(stateHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(stateHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(stateHandler).setRunningStatusIfNecessary();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"}],"commitId":"75685800602a69679483b6ffa50f2ac114f6eb3f","commitMessage":"@@@add test test for CommandExecutorTask (#7053)\n\n","date":"2020-08-25 16:18:03","modifiedFileCount":"0","status":"B","submitter":"Yanjie Zhou"},{"authorTime":"2020-08-25 16:18:03","codes":[{"authorDate":"2020-09-07 21:23:58","commitOrder":2,"curCode":"    public void assertRunNeedFlushByFalse() {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStateHandler()).thenReturn(stateHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(stateHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(stateHandler).setRunningStatusIfNecessary();\n    }\n","date":"2020-09-07 21:23:58","endLine":107,"groupId":"8952","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRunNeedFlushByFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4f/9d402fd288e0e282d04d15a8a99b369a309d98.src","preCode":"    public void assertRunNeedFlushByFalse() {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.EMPTY_LIST);\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStateHandler()).thenReturn(stateHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(stateHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(stateHandler).setRunningStatusIfNecessary();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2020-08-25 16:18:03","commitOrder":2,"curCode":"    public void assertRunByCommandExecutor() {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStateHandler()).thenReturn(stateHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(stateHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(stateHandler).setRunningStatusIfNecessary();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","date":"2020-08-25 16:18:03","endLine":152,"groupId":"8952","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRunByCommandExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/37/0a7a04e67a55dad9717a84965d63c90c4f7d6d.src","preCode":"    public void assertRunByCommandExecutor() {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStateHandler()).thenReturn(stateHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(stateHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(stateHandler).setRunningStatusIfNecessary();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"N"}],"commitId":"04cf4f33c2eae18c1f553b8a2475438041dfdaf3","commitMessage":"@@@Move proxy.frontend.command package (#7297)\n\n* Update javadoc\n\n* Update javadoc\n\n* Add generic of MySQLProtocolFrontendEngine\n\n* Add generic of DatabasePacketCodecEngine\n\n* Move proxy.frontend.command package","date":"2020-09-07 21:23:58","modifiedFileCount":"31","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-09-10 15:04:10","codes":[{"authorDate":"2020-09-10 15:04:10","commitOrder":3,"curCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStateHandler()).thenReturn(stateHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(stateHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(stateHandler).setRunningStatusIfNecessary();\n    }\n","date":"2020-09-10 15:04:10","endLine":107,"groupId":"8952","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRunNeedFlushByFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/02/2c65afdb83169a292fc8729e8a07fcbe94a032.src","preCode":"    public void assertRunNeedFlushByFalse() {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStateHandler()).thenReturn(stateHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(stateHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(stateHandler).setRunningStatusIfNecessary();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2020-09-10 15:04:10","commitOrder":3,"curCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStateHandler()).thenReturn(stateHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(stateHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(stateHandler).setRunningStatusIfNecessary();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","date":"2020-09-10 15:04:10","endLine":148,"groupId":"8952","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRunByCommandExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/02/2c65afdb83169a292fc8729e8a07fcbe94a032.src","preCode":"    public void assertRunByCommandExecutor() {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStateHandler()).thenReturn(stateHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(stateHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(stateHandler).setRunningStatusIfNecessary();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"12086584a0658bb3530fc6625077f5520494d35b","commitMessage":"@@@Merge pull request #7378 from terrymanu/dev\n\nRename ResourceSynchronizer to ResourceLock","date":"2020-09-10 15:04:10","modifiedFileCount":"34","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2020-09-10 20:14:30","codes":[{"authorDate":"2020-09-10 20:14:30","commitOrder":4,"curCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStatusHandler()).thenReturn(statusHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(statusHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(statusHandler).switchRunningStatusIfNecessary();\n    }\n","date":"2020-09-10 20:14:30","endLine":107,"groupId":"8952","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRunNeedFlushByFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6d/1ed38a1cf8899ce26f1490487e343ba1ba9086.src","preCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStateHandler()).thenReturn(stateHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(stateHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(stateHandler).setRunningStatusIfNecessary();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2020-09-10 20:14:30","commitOrder":4,"curCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStatusHandler()).thenReturn(statusHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(statusHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(statusHandler).switchRunningStatusIfNecessary();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","date":"2020-09-10 20:14:30","endLine":148,"groupId":"8952","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRunByCommandExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6d/1ed38a1cf8899ce26f1490487e343ba1ba9086.src","preCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStateHandler()).thenReturn(stateHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(stateHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(stateHandler).setRunningStatusIfNecessary();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"b083cfc30b117ba5b02ae6973edc9da4dbb40c9f","commitMessage":"@@@Refactor ConnectionStatusHandler (#7392)\n\n* Rename ConnectionStateHandler to ConnectionStatusHandler\n\n* Rename ConnectionStatusHandler.changeRunningStatusIfNecessary\n\n* Remove ConnectionStatusHandler.getStatus\n\n* Rename statusHandler\n\n* Rename resourceLock.doAwait()\n\n* Refactor BackendConnection\n\n* Merge ConnectionStatus.INIT and TERMINATED to READY","date":"2020-09-10 20:14:30","modifiedFileCount":"14","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-09-11 20:40:18","codes":[{"authorDate":"2020-09-11 20:40:18","commitOrder":5,"curCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStatusHandler()).thenReturn(statusHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(statusHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(statusHandler).switchUsingStatus();\n    }\n","date":"2020-09-11 20:40:18","endLine":107,"groupId":"8952","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRunNeedFlushByFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/33/4bd6ab25b8be7f49b48d58cc9b480adacb6c5e.src","preCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStatusHandler()).thenReturn(statusHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(statusHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(statusHandler).switchRunningStatusIfNecessary();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2020-09-11 20:40:18","commitOrder":5,"curCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStatusHandler()).thenReturn(statusHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(statusHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(statusHandler).switchUsingStatus();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","date":"2020-09-11 20:40:18","endLine":148,"groupId":"8952","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRunByCommandExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/33/4bd6ab25b8be7f49b48d58cc9b480adacb6c5e.src","preCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStatusHandler()).thenReturn(statusHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(statusHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(statusHandler).switchRunningStatusIfNecessary();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"a4c3a7d61d4f5f6d5bb76b7db87edfd9c912d4b9","commitMessage":"@@@Simplify ConnectionStatus's enum (#7413)\n\n* Merge ConnectionStatus.READY to RUNNING\n\n* Rename ConnectionStatus.RELEASE to RELEASED\n\n* Rename ConnectionStatus.RUNNING to USING\n\n* Rename ConnectionStatus.RUNNING to USING\n\n* Fix test cases","date":"2020-09-11 20:40:18","modifiedFileCount":"8","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-09-12 23:51:54","codes":[{"authorDate":"2020-09-12 23:51:54","commitOrder":6,"curCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStatusManager()).thenReturn(statusHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(statusHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(statusHandler).switchToUsing();\n    }\n","date":"2020-09-12 23:51:54","endLine":107,"groupId":"8952","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRunNeedFlushByFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/80/d56bc2b58873ee75fc4018cb6a7609ec062b55.src","preCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStatusHandler()).thenReturn(statusHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(statusHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(statusHandler).switchUsingStatus();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2020-09-12 23:51:54","commitOrder":6,"curCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStatusManager()).thenReturn(statusHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(statusHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(statusHandler).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","date":"2020-09-12 23:51:54","endLine":148,"groupId":"8952","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRunByCommandExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/80/d56bc2b58873ee75fc4018cb6a7609ec062b55.src","preCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStatusHandler()).thenReturn(statusHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(statusHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(statusHandler).switchUsingStatus();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"7f7ff1c458bdebfb3211e3222bd11ee7b332a87d","commitMessage":"@@@Rename to ConnectionStatusManager (#7424)\n\n* Refactor ConnectionStatusHandler\n\n* Rename ConnectionStatusManager\n\n* Move ConnectionStatus to status package","date":"2020-09-12 23:51:54","modifiedFileCount":"10","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-09-14 00:25:33","codes":[{"authorDate":"2020-09-14 00:25:33","commitOrder":7,"curCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatusManager()).thenReturn(statusHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(statusHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(statusHandler).switchToUsing();\n    }\n","date":"2020-09-14 00:25:33","endLine":107,"groupId":"8952","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRunNeedFlushByFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a2/985818a0039b8eb6e5842fd9c75d6f220416fb.src","preCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStatusManager()).thenReturn(statusHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(statusHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(statusHandler).switchToUsing();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2020-09-14 00:25:33","commitOrder":7,"curCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatusManager()).thenReturn(statusHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(statusHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(statusHandler).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","date":"2020-09-14 00:25:33","endLine":148,"groupId":"8952","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRunByCommandExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a2/985818a0039b8eb6e5842fd9c75d6f220416fb.src","preCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getStatusManager()).thenReturn(statusHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(statusHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(statusHandler).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"739d78bb9a32d2696e1c22cfb1b9eddffb406ee7","commitMessage":"@@@Use TransactionStatus to decouple transaction and ConnectionStatus (#7428)\n\n* Add transaction package\n\n* Use TransactionStatus to decouple transaction and ConnectionStatus","date":"2020-09-14 00:25:33","modifiedFileCount":"11","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-09-14 21:03:58","codes":[{"authorDate":"2020-09-14 21:03:58","commitOrder":8,"curCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n    }\n","date":"2020-09-14 21:03:58","endLine":107,"groupId":"8952","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRunNeedFlushByFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b7/08ef591d275eb02fa071e204beb23f3438a3b3.src","preCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatusManager()).thenReturn(statusHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(statusHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(statusHandler).switchToUsing();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2020-09-14 21:03:58","commitOrder":8,"curCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","date":"2020-09-14 21:03:58","endLine":148,"groupId":"8952","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRunByCommandExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b7/08ef591d275eb02fa071e204beb23f3438a3b3.src","preCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatusManager()).thenReturn(statusHandler);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(statusHandler).waitUntilConnectionReleasedIfNecessary();\n        verify(statusHandler).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"ea0413c835e6fe9a4281a543b96484fdc00b285d","commitMessage":"@@@Rename to ConnectionStatus (#7446)\n\n* Refactor ConnectionStatusManager\n\n* Refactor CommandExecutorSelector\n\n* Refactor ConnectionStatusManager\n\n* Rename to ConnectionStatus","date":"2020-09-14 21:03:58","modifiedFileCount":"8","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-09-15 15:52:23","codes":[{"authorDate":"2020-09-15 15:52:23","commitOrder":9,"curCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeResultSets()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeStatements()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n    }\n","date":"2020-09-15 15:52:23","endLine":111,"groupId":"8952","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRunNeedFlushByFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/81/f2611232108f53297c88d1eeadb7582bf0f028.src","preCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2020-09-15 15:52:23","commitOrder":9,"curCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeResultSets()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeStatements()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","date":"2020-09-15 15:52:23","endLine":158,"groupId":"8952","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRunByCommandExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/81/f2611232108f53297c88d1eeadb7582bf0f028.src","preCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"258a11bbfd1bc46de596b785cc59149026593f16","commitMessage":"@@@Refactor transaction process in proxy frontend (#7452)\n\n* Rename BackendConnection.releaseAllResources\n\n* Rename BackendConnection.closeAllResources\n\n* Refactor FrontendChannelInboundHandler\n\n* Refactor CommandExecutorTask\n\n* Remove BackendConnection.close\n\n* Fix test case\n\n* Use dynamic transaction status in CommandExecutorTask","date":"2020-09-15 15:52:23","modifiedFileCount":"8","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-01-04 07:35:04","codes":[{"authorDate":"2021-01-04 07:35:04","commitOrder":10,"curCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeResultSets()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeStatements()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeCalciteExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n    }\n","date":"2021-01-04 07:35:04","endLine":112,"groupId":"8952","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRunNeedFlushByFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b4/05292c8fca88b043d7635bc8e53829146417e4.src","preCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeResultSets()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeStatements()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2021-01-04 07:35:04","commitOrder":10,"curCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeResultSets()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeStatements()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeCalciteExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","date":"2021-01-04 07:35:04","endLine":161,"groupId":"8952","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRunByCommandExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b4/05292c8fca88b043d7635bc8e53829146417e4.src","preCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeResultSets()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeStatements()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"}],"commitId":"50784a276555c593218525c0aa5eed923a3524e1","commitMessage":"@@@Use CalciteInternalExecutor in PROXY (#8869)\n\n* Use CalciteInternalExecutor in PROXY\n\n* check style\n\n* fix ut","date":"2021-01-04 07:35:04","modifiedFileCount":"7","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-01-11 12:48:41","codes":[{"authorDate":"2021-01-11 12:48:41","commitOrder":11,"curCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeResultSets()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeStatements()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeCalciteExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n    }\n","date":"2021-01-11 12:48:41","endLine":111,"groupId":"8952","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRunNeedFlushByFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fe/c0f6ee56fd58192232436237c94270d5760142.src","preCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeResultSets()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeStatements()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeCalciteExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2021-01-11 12:48:41","commitOrder":11,"curCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeResultSets()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeStatements()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeCalciteExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","date":"2021-01-11 12:48:41","endLine":158,"groupId":"8952","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRunByCommandExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fe/c0f6ee56fd58192232436237c94270d5760142.src","preCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(backendConnection.getConnectionSize()).thenReturn(1);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeResultSets()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeStatements()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeCalciteExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"135e61f24a728bc79a560999a293316b02e9dd42","commitMessage":"@@@Remove hook interface  (#8957)\n\n* remove hook interface for OpenTracing","date":"2021-01-11 12:48:41","modifiedFileCount":"6","status":"M","submitter":"xiaoyu"},{"authorTime":"2021-06-01 17:02:09","codes":[{"authorDate":"2021-06-01 17:02:09","commitOrder":12,"curCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeResultSets()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeStatements()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n    }\n","date":"2021-06-01 17:02:09","endLine":111,"groupId":"8952","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRunNeedFlushByFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2f/efd4e2ba52d9c21b0f86fabf58ab3676d1be93.src","preCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeResultSets()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeStatements()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeCalciteExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2021-06-01 17:02:09","commitOrder":12,"curCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeResultSets()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeStatements()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","date":"2021-06-01 17:02:09","endLine":158,"groupId":"8952","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRunByCommandExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2f/efd4e2ba52d9c21b0f86fabf58ab3676d1be93.src","preCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeResultSets()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeStatements()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeCalciteExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"7d6c812f359bf41472a62cbc0493b253fdeb5769","commitMessage":"@@@Create new package federate execution (#10603)\n\n","date":"2021-06-01 17:02:09","modifiedFileCount":"16","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-06-23 18:27:05","codes":[{"authorDate":"2021-06-23 18:27:05","commitOrder":13,"curCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(queryCommandExecutor).close();\n    }\n","date":"2021-06-23 18:27:05","endLine":112,"groupId":"8952","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRunNeedFlushByFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b9/422df63c311ef250f4db35dd10f708c99793f2.src","preCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeResultSets()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeStatements()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2021-06-23 18:27:05","commitOrder":13,"curCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n        verify(commandExecutor).close();\n    }\n","date":"2021-06-23 18:27:05","endLine":158,"groupId":"8952","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRunByCommandExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b9/422df63c311ef250f4db35dd10f708c99793f2.src","preCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeResultSets()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeStatements()).thenReturn(Collections.emptyList());\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"ba6414447a80ac5a98a2ac30464b1964b6d7c5b4","commitMessage":"@@@Move cached statements and result sets into DatabaseCommunicationEngine (#10932)\n\n* Move cached statements and result sets into DatabaseCommunicationEngine\n\n* Complete tests for DatabaseCommunicationEngine\n\n* Close TextProtocolBackendHandler correctly\n\n* Add DatabaseCommunicationEngine to BackendConnection","date":"2021-06-23 18:27:05","modifiedFileCount":"22","status":"M","submitter":"???"},{"authorTime":"2021-06-24 16:53:57","codes":[{"authorDate":"2021-06-24 16:53:57","commitOrder":14,"curCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(queryCommandExecutor).close();\n        verify(backendConnection).closeDatabaseCommunicationEngines();\n    }\n","date":"2021-06-24 16:53:57","endLine":119,"groupId":"8952","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRunNeedFlushByFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/dd/054887799401e44a72ebdbef0ef73a57147139.src","preCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(queryCommandExecutor).close();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2021-06-24 16:53:57","commitOrder":14,"curCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n        verify(commandExecutor).close();\n        verify(backendConnection).closeDatabaseCommunicationEngines();\n    }\n","date":"2021-06-24 16:53:57","endLine":167,"groupId":"8952","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRunByCommandExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/dd/054887799401e44a72ebdbef0ef73a57147139.src","preCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n        verify(commandExecutor).close();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"}],"commitId":"25beea057967e49dd0b347cb2ad8738248a53bc1","commitMessage":"@@@Close resources in BackendConnection when transaction end (#10967)\n\n","date":"2021-06-24 16:53:57","modifiedFileCount":"4","status":"M","submitter":"???"},{"authorTime":"2021-07-02 19:32:50","codes":[{"authorDate":"2021-07-02 19:32:50","commitOrder":15,"curCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(queryCommandExecutor).close();\n        verify(backendConnection).closeDatabaseCommunicationEngines(true);\n    }\n","date":"2021-07-02 19:32:50","endLine":120,"groupId":"8952","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRunNeedFlushByFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/82/6e00ef39456bfbc74539f69aeea0ceb7b1736a.src","preCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(queryCommandExecutor).close();\n        verify(backendConnection).closeDatabaseCommunicationEngines();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2021-07-02 19:32:50","commitOrder":15,"curCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n        verify(commandExecutor).close();\n        verify(backendConnection).closeDatabaseCommunicationEngines(true);\n    }\n","date":"2021-07-02 19:32:50","endLine":168,"groupId":"8952","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRunByCommandExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/82/6e00ef39456bfbc74539f69aeea0ceb7b1736a.src","preCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n        verify(commandExecutor).close();\n        verify(backendConnection).closeDatabaseCommunicationEngines();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"}],"commitId":"69d122fa28d75c6f6111c1cd11ae2801969c5ded","commitMessage":"@@@Close DatabaseCommunicationEngines at the right time (#11109)\n\n* Add resources status in BackendConnection\n\n* Fix test case\n\n* Complete BackendConnectionTest\n\n* Fix checkstyle","date":"2021-07-02 19:32:50","modifiedFileCount":"9","status":"M","submitter":"???"},{"authorTime":"2021-07-26 22:28:31","codes":[{"authorDate":"2021-07-26 22:28:31","commitOrder":16,"curCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(engine.getCommandExecuteEngine().getCommandPacket(payload, commandPacketType, backendConnection)).thenReturn(commandPacket);\n        when(engine.getCommandExecuteEngine().getCommandExecutor(commandPacketType, commandPacket, backendConnection)).thenReturn(queryCommandExecutor);\n        when(engine.getCommandExecuteEngine().getCommandPacketType(payload)).thenReturn(commandPacketType);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(engine.getCodecEngine().createPacketPayload(message)).thenReturn(payload);\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(queryCommandExecutor).close();\n        verify(backendConnection).closeDatabaseCommunicationEngines(true);\n    }\n","date":"2021-07-26 22:28:31","endLine":110,"groupId":"4958","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRunNeedFlushByFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b7/d7b829a015c89c57daaccef7cd5d943debd8d4.src","preCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(queryCommandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(queryCommandExecutor).close();\n        verify(backendConnection).closeDatabaseCommunicationEngines(true);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2021-07-26 22:28:31","commitOrder":16,"curCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(engine.getCommandExecuteEngine().getCommandPacket(payload, commandPacketType, backendConnection)).thenReturn(commandPacket);\n        when(engine.getCommandExecuteEngine().getCommandExecutor(commandPacketType, commandPacket, backendConnection)).thenReturn(commandExecutor);\n        when(engine.getCommandExecuteEngine().getCommandPacketType(payload)).thenReturn(commandPacketType);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(engine.getCodecEngine().createPacketPayload(message)).thenReturn(payload);\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n        verify(commandExecutor).close();\n        verify(backendConnection).closeDatabaseCommunicationEngines(true);\n    }\n","date":"2021-07-26 22:28:31","endLine":154,"groupId":"4958","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRunByCommandExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b7/d7b829a015c89c57daaccef7cd5d943debd8d4.src","preCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(executeEngine.getCommandPacket(eq(payload), eq(commandPacketType), eq(backendConnection))).thenReturn(commandPacket);\n        when(executeEngine.getCommandExecutor(eq(commandPacketType), eq(commandPacket), eq(backendConnection))).thenReturn(commandExecutor);\n        when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType);\n        when(engine.getCommandExecuteEngine()).thenReturn(executeEngine);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload);\n        when(engine.getCodecEngine()).thenReturn(codecEngine);\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n        verify(commandExecutor).close();\n        verify(backendConnection).closeDatabaseCommunicationEngines(true);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"}],"commitId":"e0dbe9f967fac336499ae6a8886f4ece656cbef6","commitMessage":"@@@Remove useless eq and thenReturn(null) for mock  (#11514)\n\n* Remove useless eq with mock\n\n* Remove useless eq with mock\n\n* Remove useless eq with mock\n\n* Remove useless eq with mock\n\n* Remove useless eq with mock\n\n* Remove useless thenReturn(null)","date":"2021-07-26 22:28:31","modifiedFileCount":"17","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-20 19:10:45","codes":[{"authorDate":"2021-08-20 19:10:45","commitOrder":17,"curCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(engine.getCommandExecuteEngine().getCommandPacket(payload, commandPacketType, backendConnection)).thenReturn(commandPacket);\n        when(engine.getCommandExecuteEngine().getCommandExecutor(commandPacketType, commandPacket, backendConnection)).thenReturn(queryCommandExecutor);\n        when(engine.getCommandExecuteEngine().getCommandPacketType(payload)).thenReturn(commandPacketType);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(engine.getCodecEngine().createPacketPayload(message)).thenReturn(payload);\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(connectionStatus).switchToReleased();\n        verify(queryCommandExecutor).close();\n        verify(backendConnection).closeDatabaseCommunicationEngines(true);\n    }\n","date":"2021-08-20 19:10:45","endLine":112,"groupId":"10855","id":33,"instanceNumber":1,"isCurCommit":1,"methodName":"assertRunNeedFlushByFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1e/2f06377351c7de204f8fd0ec1db724a390f5e2.src","preCode":"    public void assertRunNeedFlushByFalse() throws SQLException {\n        when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList());\n        when(engine.getCommandExecuteEngine().getCommandPacket(payload, commandPacketType, backendConnection)).thenReturn(commandPacket);\n        when(engine.getCommandExecuteEngine().getCommandExecutor(commandPacketType, commandPacket, backendConnection)).thenReturn(queryCommandExecutor);\n        when(engine.getCommandExecuteEngine().getCommandPacketType(payload)).thenReturn(commandPacketType);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(engine.getCodecEngine().createPacketPayload(message)).thenReturn(payload);\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(queryCommandExecutor).close();\n        verify(backendConnection).closeDatabaseCommunicationEngines(true);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2021-08-20 19:10:45","commitOrder":17,"curCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(engine.getCommandExecuteEngine().getCommandPacket(payload, commandPacketType, backendConnection)).thenReturn(commandPacket);\n        when(engine.getCommandExecuteEngine().getCommandExecutor(commandPacketType, commandPacket, backendConnection)).thenReturn(commandExecutor);\n        when(engine.getCommandExecuteEngine().getCommandPacketType(payload)).thenReturn(commandPacketType);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(engine.getCodecEngine().createPacketPayload(message)).thenReturn(payload);\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(connectionStatus).switchToReleased();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n        verify(commandExecutor).close();\n        verify(backendConnection).closeDatabaseCommunicationEngines(true);\n    }\n","date":"2021-08-20 19:10:45","endLine":158,"groupId":"10855","id":34,"instanceNumber":2,"isCurCommit":1,"methodName":"assertRunByCommandExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1e/2f06377351c7de204f8fd0ec1db724a390f5e2.src","preCode":"    public void assertRunByCommandExecutor() throws SQLException {\n        when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true);\n        when(engine.getFrontendContext()).thenReturn(frontendContext);\n        when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket));\n        when(engine.getCommandExecuteEngine().getCommandPacket(payload, commandPacketType, backendConnection)).thenReturn(commandPacket);\n        when(engine.getCommandExecuteEngine().getCommandExecutor(commandPacketType, commandPacket, backendConnection)).thenReturn(commandExecutor);\n        when(engine.getCommandExecuteEngine().getCommandPacketType(payload)).thenReturn(commandPacketType);\n        when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus);\n        when(engine.getCodecEngine().createPacketPayload(message)).thenReturn(payload);\n        when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList());\n        when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList());\n        CommandExecutorTask actual = new CommandExecutorTask(engine, backendConnection, handlerContext, message);\n        actual.run();\n        verify(connectionStatus).waitUntilConnectionRelease();\n        verify(connectionStatus).switchToUsing();\n        verify(handlerContext).write(databasePacket);\n        verify(handlerContext).flush();\n        verify(commandExecutor).close();\n        verify(backendConnection).closeDatabaseCommunicationEngines(true);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/command/CommandExecutorTaskTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"afef48a701fbfe55fbc6a2e46a66f0369752b942","commitMessage":"@@@fix(transaction):fix transaction statement commit error while using shared thread pool and local transaction manager. add testcase #11583 (#11587)\n\n","date":"2021-08-20 19:10:45","modifiedFileCount":"4","status":"M","submitter":"jianliu"}]
