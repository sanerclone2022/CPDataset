[{"authorTime":"2021-01-15 18:06:21","codes":[{"authorDate":"2021-01-15 18:06:21","commitOrder":1,"curCode":"    public void assertMethod() {\n        advice.beforeMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        advice.afterMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        Span span = collector.pop();\n        assertNotNull(span);\n        assertThat(span.name(), is(\"/ShardingSphere/executeSQL/\".toLowerCase()));\n        Map<String, String> tags = span.tags();\n        assertFalse(tags == null || tags.isEmpty());\n        assertThat(tags.get(ZipkinConstants.Tags.COMPONENT), is(\"shardingsphere\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_INSTANCE), is(\"mock.db\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_STATEMENT), is(\"select 1\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_TYPE), is(\"shardingsphere-proxy\"));\n        assertThat(tags.get(ZipkinConstants.Tags.PEER_HOSTNAME), is(\"mock.host\"));\n        assertThat(tags.get(ZipkinConstants.Tags.PEER_PORT), is(\"1000\"));\n    }\n","date":"2021-01-15 18:06:21","endLine":65,"groupId":"8895","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/18/a3991b184447b8ff3334ba01889b2c2cca26c7.src","preCode":"    public void assertMethod() {\n        advice.beforeMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        advice.afterMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        Span span = collector.pop();\n        assertNotNull(span);\n        assertThat(span.name(), is(\"/ShardingSphere/executeSQL/\".toLowerCase()));\n        Map<String, String> tags = span.tags();\n        assertFalse(tags == null || tags.isEmpty());\n        assertThat(tags.get(ZipkinConstants.Tags.COMPONENT), is(\"shardingsphere\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_INSTANCE), is(\"mock.db\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_STATEMENT), is(\"select 1\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_TYPE), is(\"shardingsphere-proxy\"));\n        assertThat(tags.get(ZipkinConstants.Tags.PEER_HOSTNAME), is(\"mock.host\"));\n        assertThat(tags.get(ZipkinConstants.Tags.PEER_PORT), is(\"1000\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-zipkin/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/zipkin/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2021-01-15 18:06:21","commitOrder":1,"curCode":"    public void assertExceptionHandle() {\n        advice.beforeMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        advice.onThrowing(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new IOException());\n        advice.afterMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        Span span = collector.pop();\n        assertNotNull(span);\n        assertThat(span.name(), is(\"/ShardingSphere/executeSQL/\".toLowerCase()));\n        Map<String, String> tags = span.tags();\n        assertNotNull(tags);\n        assertThat(tags.get(ZipkinConstants.Tags.COMPONENT), is(\"shardingsphere\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_INSTANCE), is(\"mock.db\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_STATEMENT), is(\"select 1\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_TYPE), is(\"shardingsphere-proxy\"));\n        assertThat(tags.get(ZipkinConstants.Tags.PEER_HOSTNAME), is(\"mock.host\"));\n        assertThat(tags.get(ZipkinConstants.Tags.PEER_PORT), is(\"1000\"));\n        assertThat(tags.get(\"error\"), is(\"IOException\"));\n    }\n","date":"2021-01-15 18:06:21","endLine":84,"groupId":"1336","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExceptionHandle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/18/a3991b184447b8ff3334ba01889b2c2cca26c7.src","preCode":"    public void assertExceptionHandle() {\n        advice.beforeMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        advice.onThrowing(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new IOException());\n        advice.afterMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        Span span = collector.pop();\n        assertNotNull(span);\n        assertThat(span.name(), is(\"/ShardingSphere/executeSQL/\".toLowerCase()));\n        Map<String, String> tags = span.tags();\n        assertNotNull(tags);\n        assertThat(tags.get(ZipkinConstants.Tags.COMPONENT), is(\"shardingsphere\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_INSTANCE), is(\"mock.db\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_STATEMENT), is(\"select 1\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_TYPE), is(\"shardingsphere-proxy\"));\n        assertThat(tags.get(ZipkinConstants.Tags.PEER_HOSTNAME), is(\"mock.host\"));\n        assertThat(tags.get(ZipkinConstants.Tags.PEER_PORT), is(\"1000\"));\n        assertThat(tags.get(\"error\"), is(\"IOException\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-zipkin/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/zipkin/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"}],"commitId":"37fa49f31feb931a8b2d333b5aad17db7f36b2bd","commitMessage":"@@@refactor agent test (#9052)\n\n","date":"2021-01-15 18:06:21","modifiedFileCount":"6","status":"B","submitter":"xiaoyu"},{"authorTime":"2021-02-18 15:58:05","codes":[{"authorDate":"2021-02-18 15:58:05","commitOrder":2,"curCode":"    public void assertMethod() {\n        advice.beforeMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        advice.afterMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        Span span = COLLECTOR.pop();\n        assertNotNull(span);\n        assertThat(span.name(), is(\"/ShardingSphere/executeSQL/\".toLowerCase()));\n        Map<String, String> tags = span.tags();\n        assertFalse(tags == null || tags.isEmpty());\n        assertThat(tags.get(ZipkinConstants.Tags.COMPONENT), is(\"shardingsphere\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_INSTANCE), is(\"mock.db\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_STATEMENT), is(\"select 1\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_TYPE), is(\"shardingsphere-proxy\"));\n        assertThat(tags.get(ZipkinConstants.Tags.PEER_HOSTNAME), is(\"mock.host\"));\n        assertThat(tags.get(ZipkinConstants.Tags.PEER_PORT), is(\"1000\"));\n    }\n","date":"2021-02-18 15:58:05","endLine":65,"groupId":"1035","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c7/88f72da4e7df56cf869a0c6f72fd8054acd7f1.src","preCode":"    public void assertMethod() {\n        advice.beforeMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        advice.afterMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        Span span = collector.pop();\n        assertNotNull(span);\n        assertThat(span.name(), is(\"/ShardingSphere/executeSQL/\".toLowerCase()));\n        Map<String, String> tags = span.tags();\n        assertFalse(tags == null || tags.isEmpty());\n        assertThat(tags.get(ZipkinConstants.Tags.COMPONENT), is(\"shardingsphere\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_INSTANCE), is(\"mock.db\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_STATEMENT), is(\"select 1\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_TYPE), is(\"shardingsphere-proxy\"));\n        assertThat(tags.get(ZipkinConstants.Tags.PEER_HOSTNAME), is(\"mock.host\"));\n        assertThat(tags.get(ZipkinConstants.Tags.PEER_PORT), is(\"1000\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-zipkin/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/zipkin/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2021-02-18 15:58:05","commitOrder":2,"curCode":"    public void assertExceptionHandle() {\n        advice.beforeMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        advice.onThrowing(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new IOException());\n        advice.afterMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        Span span = COLLECTOR.pop();\n        assertNotNull(span);\n        assertThat(span.name(), is(\"/ShardingSphere/executeSQL/\".toLowerCase()));\n        Map<String, String> tags = span.tags();\n        assertNotNull(tags);\n        assertThat(tags.get(ZipkinConstants.Tags.COMPONENT), is(\"shardingsphere\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_INSTANCE), is(\"mock.db\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_STATEMENT), is(\"select 1\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_TYPE), is(\"shardingsphere-proxy\"));\n        assertThat(tags.get(ZipkinConstants.Tags.PEER_HOSTNAME), is(\"mock.host\"));\n        assertThat(tags.get(ZipkinConstants.Tags.PEER_PORT), is(\"1000\"));\n        assertThat(tags.get(\"error\"), is(\"IOException\"));\n    }\n","date":"2021-02-18 15:58:05","endLine":84,"groupId":"1035","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertExceptionHandle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c7/88f72da4e7df56cf869a0c6f72fd8054acd7f1.src","preCode":"    public void assertExceptionHandle() {\n        advice.beforeMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        advice.onThrowing(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new IOException());\n        advice.afterMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        Span span = collector.pop();\n        assertNotNull(span);\n        assertThat(span.name(), is(\"/ShardingSphere/executeSQL/\".toLowerCase()));\n        Map<String, String> tags = span.tags();\n        assertNotNull(tags);\n        assertThat(tags.get(ZipkinConstants.Tags.COMPONENT), is(\"shardingsphere\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_INSTANCE), is(\"mock.db\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_STATEMENT), is(\"select 1\"));\n        assertThat(tags.get(ZipkinConstants.Tags.DB_TYPE), is(\"shardingsphere-proxy\"));\n        assertThat(tags.get(ZipkinConstants.Tags.PEER_HOSTNAME), is(\"mock.host\"));\n        assertThat(tags.get(ZipkinConstants.Tags.PEER_PORT), is(\"1000\"));\n        assertThat(tags.get(\"error\"), is(\"IOException\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-zipkin/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/zipkin/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"ddc88a96c405bca47a8c611ce61af166657109b3","commitMessage":"@@@agent inspect code (#9425)\n\n* agent inspect code\n\n* fix checkstyle","date":"2021-02-18 15:58:05","modifiedFileCount":"19","status":"M","submitter":"xiaoyu"}]
