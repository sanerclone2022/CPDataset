[{"authorTime":"2021-07-03 16:36:59","codes":[{"authorDate":"2021-07-02 23:18:54","commitOrder":2,"curCode":"    private void checkToBeDroppedRuleNames(final String schemaName, final DropDatabaseDiscoveryRuleStatement sqlStatement, final DatabaseDiscoveryRuleConfiguration currentRuleConfig) {\n        Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistedRuleNames = sqlStatement.getRuleNames().stream().filter(each -> !currentRuleNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedRuleNames.isEmpty()) {\n            throw new DatabaseDiscoveryRuleNotExistedException(schemaName, notExistedRuleNames);\n        }\n    }\n","date":"2021-07-02 23:18:54","endLine":56,"groupId":"2326","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeDroppedRuleNames","params":"(finalStringschemaName@finalDropDatabaseDiscoveryRuleStatementsqlStatement@finalDatabaseDiscoveryRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/79/965c6c5a599f7a8cb6d26d88fb2360e9c65b3f.src","preCode":"    private void checkToBeDroppedRuleNames(final String schemaName, final DropDatabaseDiscoveryRuleStatement sqlStatement, final DatabaseDiscoveryRuleConfiguration currentRuleConfig) {\n        Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistedRuleNames = sqlStatement.getRuleNames().stream().filter(each -> !currentRuleNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedRuleNames.isEmpty()) {\n            throw new DatabaseDiscoveryRuleNotExistedException(schemaName, notExistedRuleNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/DropDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"NB"},{"authorDate":"2021-07-03 16:36:59","commitOrder":2,"curCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new ShardingTableRulesInUsedException(usedTableNames);\n        }\n    }\n","date":"2021-07-03 16:36:59","endLine":79,"groupId":"7107","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBindingTables","params":"(finalDropShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3e/c66cc42f614e2000487b35cdedc45ecd09d2e3.src","preCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new ShardingTableRulesInUsedException(usedTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/DropShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"}],"commitId":"70149d383a75b5b9986818226f18abd449e5ae80","commitMessage":"@@@Add shardingsphere-sharding-distsql-handler module (#11125)\n\n* Add shardingsphere-sharding-distsql-handler module\n\n* Fix test cases\n\n* Fix test cases\n\n* Fix test cases","date":"2021-07-03 16:36:59","modifiedFileCount":"1","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 01:26:11","codes":[{"authorDate":"2021-07-04 01:26:11","commitOrder":3,"curCode":"    private void checkToBeDroppedRuleNames(final String schemaName, final DropDatabaseDiscoveryRuleStatement sqlStatement, \n                                           final DatabaseDiscoveryRuleConfiguration currentRuleConfig) throws DatabaseDiscoveryRuleNotExistedException {\n        Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistedRuleNames = sqlStatement.getRuleNames().stream().filter(each -> !currentRuleNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedRuleNames.isEmpty()) {\n            throw new DatabaseDiscoveryRuleNotExistedException(schemaName, notExistedRuleNames);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":59,"groupId":"2326","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeDroppedRuleNames","params":"(finalStringschemaName@finalDropDatabaseDiscoveryRuleStatementsqlStatement@finalDatabaseDiscoveryRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e1/dd48b340713556b29b1e24f9e65e69be6fe927.src","preCode":"    private void checkToBeDroppedRuleNames(final String schemaName, final DropDatabaseDiscoveryRuleStatement sqlStatement, final DatabaseDiscoveryRuleConfiguration currentRuleConfig) {\n        Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistedRuleNames = sqlStatement.getRuleNames().stream().filter(each -> !currentRuleNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedRuleNames.isEmpty()) {\n            throw new DatabaseDiscoveryRuleNotExistedException(schemaName, notExistedRuleNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/DropDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2021-07-04 01:26:11","commitOrder":3,"curCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws ShardingTableRulesInUsedException {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new ShardingTableRulesInUsedException(usedTableNames);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":82,"groupId":"7107","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBindingTables","params":"(finalDropShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/67/75a723059393be30c12116c5f6ba10400f5295.src","preCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new ShardingTableRulesInUsedException(usedTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/DropShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"18ab59a5ac8de3a2c2d2c1dac39de3041b9c36f3","commitMessage":"@@@Refactor RuleDefinitionViolationException to extend SQLException (#11129)\n\n* Refactor RDLBackendHandler\n\n* Refactor RuleDefinitionViolationException to extend SQLException","date":"2021-07-04 01:26:11","modifiedFileCount":"66","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 01:26:11","codes":[{"authorDate":"2021-07-04 11:58:35","commitOrder":4,"curCode":"    private void checkToBeDroppedRuleNames(final String schemaName, final DropDatabaseDiscoveryRuleStatement sqlStatement, \n                                           final DatabaseDiscoveryRuleConfiguration currentRuleConfig) throws CurrentRuleNotExistedException {\n        Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistedRuleNames = sqlStatement.getRuleNames().stream().filter(each -> !currentRuleNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedRuleNames.isEmpty()) {\n            throw new CurrentRuleNotExistedException(\"Database discovery\", schemaName, notExistedRuleNames);\n        }\n    }\n","date":"2021-07-04 11:58:35","endLine":58,"groupId":"2326","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeDroppedRuleNames","params":"(finalStringschemaName@finalDropDatabaseDiscoveryRuleStatementsqlStatement@finalDatabaseDiscoveryRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c7/8ee2aa51cfda14699fb66e2c91059d6b905549.src","preCode":"    private void checkToBeDroppedRuleNames(final String schemaName, final DropDatabaseDiscoveryRuleStatement sqlStatement, \n                                           final DatabaseDiscoveryRuleConfiguration currentRuleConfig) throws DatabaseDiscoveryRuleNotExistedException {\n        Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistedRuleNames = sqlStatement.getRuleNames().stream().filter(each -> !currentRuleNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedRuleNames.isEmpty()) {\n            throw new DatabaseDiscoveryRuleNotExistedException(schemaName, notExistedRuleNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/DropDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2021-07-04 01:26:11","commitOrder":4,"curCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws ShardingTableRulesInUsedException {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new ShardingTableRulesInUsedException(usedTableNames);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":82,"groupId":"7107","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBindingTables","params":"(finalDropShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/67/75a723059393be30c12116c5f6ba10400f5295.src","preCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws ShardingTableRulesInUsedException {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new ShardingTableRulesInUsedException(usedTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/DropShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"}],"commitId":"2ae025c4f44535945a3c18f31ab3d8ca7cd8a298","commitMessage":"@@@Add CurrentRuleNotExistedException to refine Exception of current rule validation  (#11131)\n\n* Remove DatabaseDiscoveryRuleNotExistedException\n\n* Remove ReadwriteSplittingRuleNotExistedException\n\n* Remove EncryptRuleNotExistedException\n\n* Add CurrentRuleNotExistedException to refine Exception of current rule validation","date":"2021-07-04 11:58:35","modifiedFileCount":"19","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 01:26:11","codes":[{"authorDate":"2021-07-04 15:02:59","commitOrder":5,"curCode":"    private void checkToBeDroppedRuleNames(final String schemaName, final DropDatabaseDiscoveryRuleStatement sqlStatement, \n                                           final DatabaseDiscoveryRuleConfiguration currentRuleConfig) throws RequiredRuleMissedException {\n        Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistedRuleNames = sqlStatement.getRuleNames().stream().filter(each -> !currentRuleNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedRuleNames.isEmpty()) {\n            throw new RequiredRuleMissedException(\"Database discovery\", schemaName, notExistedRuleNames);\n        }\n    }\n","date":"2021-07-04 15:02:59","endLine":58,"groupId":"2326","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeDroppedRuleNames","params":"(finalStringschemaName@finalDropDatabaseDiscoveryRuleStatementsqlStatement@finalDatabaseDiscoveryRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9b/446314a37b9bfdc356f38ca5e036b5c7b9e35d.src","preCode":"    private void checkToBeDroppedRuleNames(final String schemaName, final DropDatabaseDiscoveryRuleStatement sqlStatement, \n                                           final DatabaseDiscoveryRuleConfiguration currentRuleConfig) throws CurrentRuleNotExistedException {\n        Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistedRuleNames = sqlStatement.getRuleNames().stream().filter(each -> !currentRuleNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedRuleNames.isEmpty()) {\n            throw new CurrentRuleNotExistedException(\"Database discovery\", schemaName, notExistedRuleNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/DropDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2021-07-04 01:26:11","commitOrder":5,"curCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws ShardingTableRulesInUsedException {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new ShardingTableRulesInUsedException(usedTableNames);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":82,"groupId":"7107","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBindingTables","params":"(finalDropShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/67/75a723059393be30c12116c5f6ba10400f5295.src","preCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws ShardingTableRulesInUsedException {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new ShardingTableRulesInUsedException(usedTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/DropShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"}],"commitId":"83216cb8e0d277c40d499d8c6ad41413990dc1b5","commitMessage":"@@@Add ResourceDefinitionViolationException (#11136)\n\n* Add ResourceDefinitionViolationException\n\n* Add ResourceDefinitionViolationException\n\n* Rename DuplicateRuleException\n\n* Rename RequiredRuleMissedException\n\n* Rename RequiredResourceMissedException","date":"2021-07-04 15:02:59","modifiedFileCount":"35","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 16:52:50","codes":[{"authorDate":"2021-07-04 15:02:59","commitOrder":6,"curCode":"    private void checkToBeDroppedRuleNames(final String schemaName, final DropDatabaseDiscoveryRuleStatement sqlStatement, \n                                           final DatabaseDiscoveryRuleConfiguration currentRuleConfig) throws RequiredRuleMissedException {\n        Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistedRuleNames = sqlStatement.getRuleNames().stream().filter(each -> !currentRuleNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedRuleNames.isEmpty()) {\n            throw new RequiredRuleMissedException(\"Database discovery\", schemaName, notExistedRuleNames);\n        }\n    }\n","date":"2021-07-04 15:02:59","endLine":58,"groupId":"2326","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeDroppedRuleNames","params":"(finalStringschemaName@finalDropDatabaseDiscoveryRuleStatementsqlStatement@finalDatabaseDiscoveryRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9b/446314a37b9bfdc356f38ca5e036b5c7b9e35d.src","preCode":"    private void checkToBeDroppedRuleNames(final String schemaName, final DropDatabaseDiscoveryRuleStatement sqlStatement, \n                                           final DatabaseDiscoveryRuleConfiguration currentRuleConfig) throws RequiredRuleMissedException {\n        Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistedRuleNames = sqlStatement.getRuleNames().stream().filter(each -> !currentRuleNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedRuleNames.isEmpty()) {\n            throw new RequiredRuleMissedException(\"Database discovery\", schemaName, notExistedRuleNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/DropDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2021-07-04 16:52:50","commitOrder":6,"curCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws RuleInUsedException {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new RuleInUsedException(\"Sharding\", usedTableNames);\n        }\n    }\n","date":"2021-07-04 16:52:50","endLine":82,"groupId":"7107","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBindingTables","params":"(finalDropShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3d/266581381be5d407f4c47bc8b66e011517fc2d.src","preCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws ShardingTableRulesInUsedException {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new ShardingTableRulesInUsedException(usedTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/DropShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"c040ac02afecdfad7de6782184cee4227aa0c5f8","commitMessage":"@@@Add RuleInUsedException (#11143)\n\n* Add RuleInUsedException\n\n* Add RuleInUsedException","date":"2021-07-04 16:52:50","modifiedFileCount":"2","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 17:13:42","codes":[{"authorDate":"2021-07-04 15:02:59","commitOrder":7,"curCode":"    private void checkToBeDroppedRuleNames(final String schemaName, final DropDatabaseDiscoveryRuleStatement sqlStatement, \n                                           final DatabaseDiscoveryRuleConfiguration currentRuleConfig) throws RequiredRuleMissedException {\n        Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistedRuleNames = sqlStatement.getRuleNames().stream().filter(each -> !currentRuleNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedRuleNames.isEmpty()) {\n            throw new RequiredRuleMissedException(\"Database discovery\", schemaName, notExistedRuleNames);\n        }\n    }\n","date":"2021-07-04 15:02:59","endLine":58,"groupId":"10316","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeDroppedRuleNames","params":"(finalStringschemaName@finalDropDatabaseDiscoveryRuleStatementsqlStatement@finalDatabaseDiscoveryRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9b/446314a37b9bfdc356f38ca5e036b5c7b9e35d.src","preCode":"    private void checkToBeDroppedRuleNames(final String schemaName, final DropDatabaseDiscoveryRuleStatement sqlStatement, \n                                           final DatabaseDiscoveryRuleConfiguration currentRuleConfig) throws RequiredRuleMissedException {\n        Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(DatabaseDiscoveryDataSourceRuleConfiguration::getName).collect(Collectors.toList());\n        Collection<String> notExistedRuleNames = sqlStatement.getRuleNames().stream().filter(each -> !currentRuleNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedRuleNames.isEmpty()) {\n            throw new RequiredRuleMissedException(\"Database discovery\", schemaName, notExistedRuleNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-distsql/shardingsphere-db-discovery-distsql-handler/src/main/java/org/apache/shardingsphere/dbdiscovery/distsql/handler/update/DropDatabaseDiscoveryRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2021-07-04 17:13:42","commitOrder":7,"curCode":"    private void checkBindingTables(final String schemaName, final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws RuleInUsedException {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new RuleInUsedException(\"Sharding\", schemaName, usedTableNames);\n        }\n    }\n","date":"2021-07-04 17:13:42","endLine":82,"groupId":"10316","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBindingTables","params":"(finalStringschemaName@finalDropShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/77/61fadc4ce454122074fe9f952bd491e08fff2b.src","preCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws RuleInUsedException {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new RuleInUsedException(\"Sharding\", usedTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/DropShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"7ddef35d306087926d185edf2104d83b03817450","commitMessage":"@@@Adjust error code of DistSQL exception (#11145)\n\n* Refactor RuleInUsedException\n\n* Adjust error code of DistSQL exception\n\n* Move package of DistSQL exception\n\n* Rename DistSQLException","date":"2021-07-04 17:13:42","modifiedFileCount":"43","status":"M","submitter":"Liang Zhang"}]
