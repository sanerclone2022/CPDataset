[{"authorTime":"2020-09-16 13:14:54","codes":[{"authorDate":"2020-09-16 13:14:54","commitOrder":1,"curCode":"    public void assertCloseConnectionsCorrectlyWhenNotForceRollback() {\n        Field field = backendConnection.getClass().getDeclaredField(\"cachedConnections\");\n        field.setAccessible(true);\n        Multimap<String, Connection> cachedConnections = (Multimap<String, Connection>) field.get(backendConnection);\n        Connection connection = prepareCachedConnections();\n        cachedConnections.put(\"ignoredDataSourceName\", connection);\n        ConnectionStatus connectionStatus = mock(ConnectionStatus.class);\n        prepareConnectionStatus(connectionStatus);\n        backendConnection.closeConnections(false);\n        verify(connection, times(1)).close();\n        assertTrue(cachedConnections.isEmpty());\n        verifyMethodInvocationsEmpty();\n        verify(connectionStatus, times(1)).switchToReleased();\n    }\n","date":"2020-09-16 13:14:54","endLine":354,"groupId":"2827","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertCloseConnectionsCorrectlyWhenNotForceRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b2/b00e2ff16c3ca851ad8e529cb43c2af5ffabc2.src","preCode":"    public void assertCloseConnectionsCorrectlyWhenNotForceRollback() {\n        Field field = backendConnection.getClass().getDeclaredField(\"cachedConnections\");\n        field.setAccessible(true);\n        Multimap<String, Connection> cachedConnections = (Multimap<String, Connection>) field.get(backendConnection);\n        Connection connection = prepareCachedConnections();\n        cachedConnections.put(\"ignoredDataSourceName\", connection);\n        ConnectionStatus connectionStatus = mock(ConnectionStatus.class);\n        prepareConnectionStatus(connectionStatus);\n        backendConnection.closeConnections(false);\n        verify(connection, times(1)).close();\n        assertTrue(cachedConnections.isEmpty());\n        verifyMethodInvocationsEmpty();\n        verify(connectionStatus, times(1)).switchToReleased();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/BackendConnectionTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":341,"status":"B"},{"authorDate":"2020-09-16 13:14:54","commitOrder":1,"curCode":"    private Connection prepareCachedConnections() {\n        Field field = backendConnection.getClass().getDeclaredField(\"cachedConnections\");\n        field.setAccessible(true);\n        Multimap<String, Connection> cachedConnections = (Multimap<String, Connection>) field.get(backendConnection);\n        Connection connection = mock(Connection.class);\n        cachedConnections.put(\"ignoredDataSourceName\", connection);\n        return connection;\n    }\n","date":"2020-09-16 13:14:54","endLine":409,"groupId":"2827","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareCachedConnections","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b2/b00e2ff16c3ca851ad8e529cb43c2af5ffabc2.src","preCode":"    private Connection prepareCachedConnections() {\n        Field field = backendConnection.getClass().getDeclaredField(\"cachedConnections\");\n        field.setAccessible(true);\n        Multimap<String, Connection> cachedConnections = (Multimap<String, Connection>) field.get(backendConnection);\n        Connection connection = mock(Connection.class);\n        cachedConnections.put(\"ignoredDataSourceName\", connection);\n        return connection;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/BackendConnectionTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"B"}],"commitId":"c9c6c66926dece7f30e7806781bfc18e75097a6f","commitMessage":"@@@Following test methods added: (#7472)\n\nassertCloseResultSetsCorrectly\nassertCloseResultSetsWithExceptionThrown\nassertCloseStatementsCorrectly\nassertCloseStatementsWithExceptionThrown\nassertCloseConnectionsCorrectlyWhenNotForceRollback\nassertCloseConnectionsCorrectlyWhenForceRollbackAndNotInTransaction\nassertCloseConnectionsCorrectlyWhenForceRollbackAndInTransaction\nassertCloseConnectionsCorrectlyWhenSQLExceptionThrown\nassertCreateStorageResourceCorrectlyWhenConnectionModeMemoryStrictly\n\nCo-authored-by: wangxichun <wangxichun@jd.com>","date":"2020-09-16 13:14:54","modifiedFileCount":"1","status":"B","submitter":"sluk3r"},{"authorTime":"2020-09-16 13:14:54","codes":[{"authorDate":"2020-10-04 16:42:27","commitOrder":2,"curCode":"    public void assertCloseConnectionsCorrectlyWhenNotForceRollback() throws NoSuchFieldException, IllegalAccessException, SQLException {\n        Field field = backendConnection.getClass().getDeclaredField(\"cachedConnections\");\n        field.setAccessible(true);\n        Multimap<String, Connection> cachedConnections = (Multimap<String, Connection>) field.get(backendConnection);\n        Connection connection = prepareCachedConnections();\n        cachedConnections.put(\"ignoredDataSourceName\", connection);\n        ConnectionStatus connectionStatus = mock(ConnectionStatus.class);\n        prepareConnectionStatus(connectionStatus);\n        backendConnection.closeConnections(false);\n        verify(connection, times(1)).close();\n        assertTrue(cachedConnections.isEmpty());\n        verifyMethodInvocationsEmpty();\n        verify(connectionStatus, times(1)).switchToReleased();\n    }\n","date":"2020-10-04 16:42:27","endLine":347,"groupId":"2827","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertCloseConnectionsCorrectlyWhenNotForceRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e3/32c4d29827af5b70ca23783acab8e1f1db2e3a.src","preCode":"    public void assertCloseConnectionsCorrectlyWhenNotForceRollback() {\n        Field field = backendConnection.getClass().getDeclaredField(\"cachedConnections\");\n        field.setAccessible(true);\n        Multimap<String, Connection> cachedConnections = (Multimap<String, Connection>) field.get(backendConnection);\n        Connection connection = prepareCachedConnections();\n        cachedConnections.put(\"ignoredDataSourceName\", connection);\n        ConnectionStatus connectionStatus = mock(ConnectionStatus.class);\n        prepareConnectionStatus(connectionStatus);\n        backendConnection.closeConnections(false);\n        verify(connection, times(1)).close();\n        assertTrue(cachedConnections.isEmpty());\n        verifyMethodInvocationsEmpty();\n        verify(connectionStatus, times(1)).switchToReleased();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/BackendConnectionTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"M"},{"authorDate":"2020-09-16 13:14:54","commitOrder":2,"curCode":"    private Connection prepareCachedConnections() {\n        Field field = backendConnection.getClass().getDeclaredField(\"cachedConnections\");\n        field.setAccessible(true);\n        Multimap<String, Connection> cachedConnections = (Multimap<String, Connection>) field.get(backendConnection);\n        Connection connection = mock(Connection.class);\n        cachedConnections.put(\"ignoredDataSourceName\", connection);\n        return connection;\n    }\n","date":"2020-09-16 13:14:54","endLine":409,"groupId":"2827","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareCachedConnections","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b2/b00e2ff16c3ca851ad8e529cb43c2af5ffabc2.src","preCode":"    private Connection prepareCachedConnections() {\n        Field field = backendConnection.getClass().getDeclaredField(\"cachedConnections\");\n        field.setAccessible(true);\n        Multimap<String, Connection> cachedConnections = (Multimap<String, Connection>) field.get(backendConnection);\n        Connection connection = mock(Connection.class);\n        cachedConnections.put(\"ignoredDataSourceName\", connection);\n        return connection;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/BackendConnectionTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"N"}],"commitId":"3fdee3f2341e32a55122c8e4cdd111ca4827c829","commitMessage":"@@@Remove useless @SneakyThrows (#7697)\n\n","date":"2020-10-04 16:42:27","modifiedFileCount":"85","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-09-16 13:14:54","codes":[{"authorDate":"2021-05-25 20:37:51","commitOrder":3,"curCode":"    public void assertCloseConnectionsCorrectlyWhenNotForceRollback() throws NoSuchFieldException, IllegalAccessException, SQLException {\n        Field field = backendConnection.getClass().getDeclaredField(\"cachedConnections\");\n        field.setAccessible(true);\n        Multimap<String, Connection> cachedConnections = (Multimap<String, Connection>) field.get(backendConnection);\n        Connection connection = prepareCachedConnections();\n        cachedConnections.put(\"ignoredDataSourceName\", connection);\n        ConnectionStatus connectionStatus = mock(ConnectionStatus.class);\n        prepareConnectionStatus(connectionStatus);\n        backendConnection.closeConnections(false);\n        verify(connection, times(1)).close();\n        assertTrue(cachedConnections.isEmpty());\n        verifyConnectionPostProcessorsEmpty();\n        verify(connectionStatus, times(1)).switchToReleased();\n    }\n","date":"2021-05-25 20:37:51","endLine":348,"groupId":"2827","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertCloseConnectionsCorrectlyWhenNotForceRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b7/498eb9ac241193df69fa5e557db95c925aa1b6.src","preCode":"    public void assertCloseConnectionsCorrectlyWhenNotForceRollback() throws NoSuchFieldException, IllegalAccessException, SQLException {\n        Field field = backendConnection.getClass().getDeclaredField(\"cachedConnections\");\n        field.setAccessible(true);\n        Multimap<String, Connection> cachedConnections = (Multimap<String, Connection>) field.get(backendConnection);\n        Connection connection = prepareCachedConnections();\n        cachedConnections.put(\"ignoredDataSourceName\", connection);\n        ConnectionStatus connectionStatus = mock(ConnectionStatus.class);\n        prepareConnectionStatus(connectionStatus);\n        backendConnection.closeConnections(false);\n        verify(connection, times(1)).close();\n        assertTrue(cachedConnections.isEmpty());\n        verifyMethodInvocationsEmpty();\n        verify(connectionStatus, times(1)).switchToReleased();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/BackendConnectionTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"M"},{"authorDate":"2020-09-16 13:14:54","commitOrder":3,"curCode":"    private Connection prepareCachedConnections() {\n        Field field = backendConnection.getClass().getDeclaredField(\"cachedConnections\");\n        field.setAccessible(true);\n        Multimap<String, Connection> cachedConnections = (Multimap<String, Connection>) field.get(backendConnection);\n        Connection connection = mock(Connection.class);\n        cachedConnections.put(\"ignoredDataSourceName\", connection);\n        return connection;\n    }\n","date":"2020-09-16 13:14:54","endLine":409,"groupId":"2827","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareCachedConnections","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b2/b00e2ff16c3ca851ad8e529cb43c2af5ffabc2.src","preCode":"    private Connection prepareCachedConnections() {\n        Field field = backendConnection.getClass().getDeclaredField(\"cachedConnections\");\n        field.setAccessible(true);\n        Multimap<String, Connection> cachedConnections = (Multimap<String, Connection>) field.get(backendConnection);\n        Connection connection = mock(Connection.class);\n        cachedConnections.put(\"ignoredDataSourceName\", connection);\n        return connection;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/BackendConnectionTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"N"}],"commitId":"b838c6ea1b684b2d6257c4792111439dbfee86bd","commitMessage":"@@@Replace reflection with lambda in BackendConnection (#10466)\n\n","date":"2021-05-25 20:37:51","modifiedFileCount":"3","status":"M","submitter":"???"},{"authorTime":"2020-09-16 13:14:54","codes":[{"authorDate":"2021-08-20 19:10:45","commitOrder":4,"curCode":"    public void assertCloseConnectionsCorrectlyWhenNotForceRollback() throws NoSuchFieldException, IllegalAccessException, SQLException {\n        Field field = backendConnection.getClass().getDeclaredField(\"cachedConnections\");\n        field.setAccessible(true);\n        Multimap<String, Connection> cachedConnections = (Multimap<String, Connection>) field.get(backendConnection);\n        Connection connection = prepareCachedConnections();\n        cachedConnections.put(\"ignoredDataSourceName\", connection);\n        ConnectionStatus connectionStatus = mock(ConnectionStatus.class);\n        prepareConnectionStatus(connectionStatus);\n        backendConnection.closeConnections(false);\n        verify(connection, times(1)).close();\n        assertTrue(cachedConnections.isEmpty());\n        verifyConnectionPostProcessorsEmpty();\n    }\n","date":"2021-08-20 19:10:45","endLine":277,"groupId":"10922","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertCloseConnectionsCorrectlyWhenNotForceRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ca/9a0431c10eb82e73a890d0da9aacc9cb709788.src","preCode":"    public void assertCloseConnectionsCorrectlyWhenNotForceRollback() throws NoSuchFieldException, IllegalAccessException, SQLException {\n        Field field = backendConnection.getClass().getDeclaredField(\"cachedConnections\");\n        field.setAccessible(true);\n        Multimap<String, Connection> cachedConnections = (Multimap<String, Connection>) field.get(backendConnection);\n        Connection connection = prepareCachedConnections();\n        cachedConnections.put(\"ignoredDataSourceName\", connection);\n        ConnectionStatus connectionStatus = mock(ConnectionStatus.class);\n        prepareConnectionStatus(connectionStatus);\n        backendConnection.closeConnections(false);\n        verify(connection, times(1)).close();\n        assertTrue(cachedConnections.isEmpty());\n        verifyConnectionPostProcessorsEmpty();\n        verify(connectionStatus, times(1)).switchToReleased();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/BackendConnectionTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"},{"authorDate":"2020-09-16 13:14:54","commitOrder":4,"curCode":"    private Connection prepareCachedConnections() {\n        Field field = backendConnection.getClass().getDeclaredField(\"cachedConnections\");\n        field.setAccessible(true);\n        Multimap<String, Connection> cachedConnections = (Multimap<String, Connection>) field.get(backendConnection);\n        Connection connection = mock(Connection.class);\n        cachedConnections.put(\"ignoredDataSourceName\", connection);\n        return connection;\n    }\n","date":"2020-09-16 13:14:54","endLine":409,"groupId":"10922","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareCachedConnections","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b2/b00e2ff16c3ca851ad8e529cb43c2af5ffabc2.src","preCode":"    private Connection prepareCachedConnections() {\n        Field field = backendConnection.getClass().getDeclaredField(\"cachedConnections\");\n        field.setAccessible(true);\n        Multimap<String, Connection> cachedConnections = (Multimap<String, Connection>) field.get(backendConnection);\n        Connection connection = mock(Connection.class);\n        cachedConnections.put(\"ignoredDataSourceName\", connection);\n        return connection;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/BackendConnectionTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"N"}],"commitId":"afef48a701fbfe55fbc6a2e46a66f0369752b942","commitMessage":"@@@fix(transaction):fix transaction statement commit error while using shared thread pool and local transaction manager. add testcase #11583 (#11587)\n\n","date":"2021-08-20 19:10:45","modifiedFileCount":"4","status":"M","submitter":"jianliu"}]
