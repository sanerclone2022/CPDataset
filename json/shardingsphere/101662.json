[{"authorTime":"2020-10-22 16:47:44","codes":[{"authorDate":"2020-10-22 16:47:44","commitOrder":1,"curCode":"    public ASTNode visitCreateDefinitionClause(final CreateDefinitionClauseContext ctx) {\n        CollectionValue<CreateDefinitionSegment> result = new CollectionValue<>();\n        for (RelationalPropertyContext each : ctx.relationalProperties().relationalProperty()) {\n            if (null != each.columnDefinition()) {\n                result.getValue().add((ColumnDefinitionSegment) visit(each.columnDefinition()));\n            }\n            if (null != each.outOfLineConstraint()) {\n                result.getValue().add((ConstraintDefinitionSegment) visit(each.outOfLineConstraint()));\n            }\n            if (null != each.outOfLineRefConstraint()) {\n                result.getValue().add((ConstraintDefinitionSegment) visit(each.outOfLineRefConstraint()));\n            }\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":105,"groupId":"12723","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"visitCreateDefinitionClause","params":"(finalCreateDefinitionClauseContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a7/4d52be93e05813661bd7e7bd4869a5cb986773.src","preCode":"    public ASTNode visitCreateDefinitionClause(final CreateDefinitionClauseContext ctx) {\n        CollectionValue<CreateDefinitionSegment> result = new CollectionValue<>();\n        for (RelationalPropertyContext each : ctx.relationalProperties().relationalProperty()) {\n            if (null != each.columnDefinition()) {\n                result.getValue().add((ColumnDefinitionSegment) visit(each.columnDefinition()));\n            }\n            if (null != each.outOfLineConstraint()) {\n                result.getValue().add((ConstraintDefinitionSegment) visit(each.outOfLineConstraint()));\n            }\n            if (null != each.outOfLineRefConstraint()) {\n                result.getValue().add((ConstraintDefinitionSegment) visit(each.outOfLineRefConstraint()));\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-oracle/src/main/java/org/apache/shardingsphere/sql/parser/oracle/visitor/statement/impl/OracleDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"},{"authorDate":"2020-10-22 16:47:44","commitOrder":1,"curCode":"    public ASTNode visitCreateDefinitionClause(final CreateDefinitionClauseContext ctx) {\n        CollectionValue<CreateDefinitionSegment> result = new CollectionValue<>();\n        for (CreateDefinitionContext each : ctx.createDefinition()) {\n            if (null != each.columnDefinition()) {\n                result.getValue().add((ColumnDefinitionSegment) visit(each.columnDefinition()));\n            }\n            if (null != each.tableConstraint()) {\n                result.getValue().add((ConstraintDefinitionSegment) visit(each.tableConstraint()));\n            }\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":129,"groupId":"2002","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCreateDefinitionClause","params":"(finalCreateDefinitionClauseContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fd/54293d12a8d03552cd285a0c05745abb148348.src","preCode":"    public ASTNode visitCreateDefinitionClause(final CreateDefinitionClauseContext ctx) {\n        CollectionValue<CreateDefinitionSegment> result = new CollectionValue<>();\n        for (CreateDefinitionContext each : ctx.createDefinition()) {\n            if (null != each.columnDefinition()) {\n                result.getValue().add((ColumnDefinitionSegment) visit(each.columnDefinition()));\n            }\n            if (null != each.tableConstraint()) {\n                result.getValue().add((ConstraintDefinitionSegment) visit(each.tableConstraint()));\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/java/org/apache/shardingsphere/sql/parser/postgresql/visitor/statement/impl/PostgreSQLDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"B"}],"commitId":"dca1684798205a6efd0d94b91aa1d3f86c8baefb","commitMessage":"@@@Add Statement SQL SQLVisitor (#7885)\n\n","date":"2020-10-22 16:47:44","modifiedFileCount":"7","status":"B","submitter":"Juan Pan(Trista)"},{"authorTime":"2020-10-22 16:47:44","codes":[{"authorDate":"2021-01-01 16:03:30","commitOrder":2,"curCode":"    public ASTNode visitCreateDefinitionClause(final CreateDefinitionClauseContext ctx) {\n        CollectionValue<CreateDefinitionSegment> result = new CollectionValue<>();\n        for (RelationalPropertyContext each : ctx.createRelationalTableClause().relationalProperties().relationalProperty()) {\n            if (null != each.columnDefinition()) {\n                result.getValue().add((ColumnDefinitionSegment) visit(each.columnDefinition()));\n            }\n            if (null != each.outOfLineConstraint()) {\n                result.getValue().add((ConstraintDefinitionSegment) visit(each.outOfLineConstraint()));\n            }\n            if (null != each.outOfLineRefConstraint()) {\n                result.getValue().add((ConstraintDefinitionSegment) visit(each.outOfLineRefConstraint()));\n            }\n        }\n        return result;\n    }\n","date":"2021-01-01 16:03:30","endLine":112,"groupId":"12723","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"visitCreateDefinitionClause","params":"(finalCreateDefinitionClauseContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/58/c54d7c06cf1eec770c478ee553cdbc00ee1e74.src","preCode":"    public ASTNode visitCreateDefinitionClause(final CreateDefinitionClauseContext ctx) {\n        CollectionValue<CreateDefinitionSegment> result = new CollectionValue<>();\n        for (RelationalPropertyContext each : ctx.relationalProperties().relationalProperty()) {\n            if (null != each.columnDefinition()) {\n                result.getValue().add((ColumnDefinitionSegment) visit(each.columnDefinition()));\n            }\n            if (null != each.outOfLineConstraint()) {\n                result.getValue().add((ConstraintDefinitionSegment) visit(each.outOfLineConstraint()));\n            }\n            if (null != each.outOfLineRefConstraint()) {\n                result.getValue().add((ConstraintDefinitionSegment) visit(each.outOfLineRefConstraint()));\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-oracle/src/main/java/org/apache/shardingsphere/sql/parser/oracle/visitor/statement/impl/OracleDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2020-10-22 16:47:44","commitOrder":2,"curCode":"    public ASTNode visitCreateDefinitionClause(final CreateDefinitionClauseContext ctx) {\n        CollectionValue<CreateDefinitionSegment> result = new CollectionValue<>();\n        for (CreateDefinitionContext each : ctx.createDefinition()) {\n            if (null != each.columnDefinition()) {\n                result.getValue().add((ColumnDefinitionSegment) visit(each.columnDefinition()));\n            }\n            if (null != each.tableConstraint()) {\n                result.getValue().add((ConstraintDefinitionSegment) visit(each.tableConstraint()));\n            }\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":129,"groupId":"2002","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCreateDefinitionClause","params":"(finalCreateDefinitionClauseContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fd/54293d12a8d03552cd285a0c05745abb148348.src","preCode":"    public ASTNode visitCreateDefinitionClause(final CreateDefinitionClauseContext ctx) {\n        CollectionValue<CreateDefinitionSegment> result = new CollectionValue<>();\n        for (CreateDefinitionContext each : ctx.createDefinition()) {\n            if (null != each.columnDefinition()) {\n                result.getValue().add((ColumnDefinitionSegment) visit(each.columnDefinition()));\n            }\n            if (null != each.tableConstraint()) {\n                result.getValue().add((ConstraintDefinitionSegment) visit(each.tableConstraint()));\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/java/org/apache/shardingsphere/sql/parser/postgresql/visitor/statement/impl/PostgreSQLDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"}],"commitId":"a7507202506c99632ad0618d08adf2061c62dc9a","commitMessage":"@@@Add some keywords in the \"CREATE TABLE\" in ORACLE. (#8854)\n\n* refactor: support for creating private temporary.  shared.  duplicated table in Oracle.\n\n* refactor: support for creating table with sharing.  optimize.  parent in Oracle.\n\n* style: keep one empty line in the end of file.","date":"2021-01-01 16:03:30","modifiedFileCount":"1","status":"M","submitter":"coco"},{"authorTime":"2020-10-22 16:47:44","codes":[{"authorDate":"2021-01-12 11:01:57","commitOrder":3,"curCode":"    public ASTNode visitCreateDefinitionClause(final CreateDefinitionClauseContext ctx) {\n        CollectionValue<CreateDefinitionSegment> result = new CollectionValue<>();\n        if (null == ctx.createRelationalTableClause()) {\n            return result;\n        }\n        for (RelationalPropertyContext each : ctx.createRelationalTableClause().relationalProperties().relationalProperty()) {\n            if (null != each.columnDefinition()) {\n                result.getValue().add((ColumnDefinitionSegment) visit(each.columnDefinition()));\n            }\n            if (null != each.outOfLineConstraint()) {\n                result.getValue().add((ConstraintDefinitionSegment) visit(each.outOfLineConstraint()));\n            }\n            if (null != each.outOfLineRefConstraint()) {\n                result.getValue().add((ConstraintDefinitionSegment) visit(each.outOfLineRefConstraint()));\n            }\n        }\n        return result;\n    }\n","date":"2021-01-12 11:01:57","endLine":115,"groupId":"101662","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"visitCreateDefinitionClause","params":"(finalCreateDefinitionClauseContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/11/fabf3aaafcf10c51bd3d42189b18d9477b8187.src","preCode":"    public ASTNode visitCreateDefinitionClause(final CreateDefinitionClauseContext ctx) {\n        CollectionValue<CreateDefinitionSegment> result = new CollectionValue<>();\n        for (RelationalPropertyContext each : ctx.createRelationalTableClause().relationalProperties().relationalProperty()) {\n            if (null != each.columnDefinition()) {\n                result.getValue().add((ColumnDefinitionSegment) visit(each.columnDefinition()));\n            }\n            if (null != each.outOfLineConstraint()) {\n                result.getValue().add((ConstraintDefinitionSegment) visit(each.outOfLineConstraint()));\n            }\n            if (null != each.outOfLineRefConstraint()) {\n                result.getValue().add((ConstraintDefinitionSegment) visit(each.outOfLineRefConstraint()));\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-oracle/src/main/java/org/apache/shardingsphere/sql/parser/oracle/visitor/statement/impl/OracleDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2020-10-22 16:47:44","commitOrder":3,"curCode":"    public ASTNode visitCreateDefinitionClause(final CreateDefinitionClauseContext ctx) {\n        CollectionValue<CreateDefinitionSegment> result = new CollectionValue<>();\n        for (CreateDefinitionContext each : ctx.createDefinition()) {\n            if (null != each.columnDefinition()) {\n                result.getValue().add((ColumnDefinitionSegment) visit(each.columnDefinition()));\n            }\n            if (null != each.tableConstraint()) {\n                result.getValue().add((ConstraintDefinitionSegment) visit(each.tableConstraint()));\n            }\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":129,"groupId":"101662","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCreateDefinitionClause","params":"(finalCreateDefinitionClauseContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fd/54293d12a8d03552cd285a0c05745abb148348.src","preCode":"    public ASTNode visitCreateDefinitionClause(final CreateDefinitionClauseContext ctx) {\n        CollectionValue<CreateDefinitionSegment> result = new CollectionValue<>();\n        for (CreateDefinitionContext each : ctx.createDefinition()) {\n            if (null != each.columnDefinition()) {\n                result.getValue().add((ColumnDefinitionSegment) visit(each.columnDefinition()));\n            }\n            if (null != each.tableConstraint()) {\n                result.getValue().add((ConstraintDefinitionSegment) visit(each.tableConstraint()));\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/java/org/apache/shardingsphere/sql/parser/postgresql/visitor/statement/impl/PostgreSQLDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"}],"commitId":"a415be91974a40fe32d685631eec3e069c4b6fdb","commitMessage":"@@@Support for create object table in Oracle. for 6480 (#8988)\n\n* refactor: support for creating private temporary.  shared.  duplicated table in Oracle.\n\n* refactor: support for creating table with sharing.  optimize.  parent in Oracle.\n\n* style: keep one empty line in the end of file.\n\n* style: keep one empty line in the end of file.\n\n* feat: support for create object table in Oracle.","date":"2021-01-12 11:01:57","modifiedFileCount":"1","status":"M","submitter":"coco"}]
