[{"authorTime":"2021-04-04 18:16:18","codes":[{"authorDate":"2021-06-11 13:29:00","commitOrder":17,"curCode":"    private boolean execute0(final String sql, final ExecuteCallback callback) throws SQLException {\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> results = rawExecutor.execute(createRawExecutionContext(), executionContext.getSqlStatementContext(), new RawSQLExecutorCallback());\n                return results.iterator().next() instanceof QueryResult;\n            }\n            if (executionContext.getRouteContext().isFederated()) {\n                List<QueryResult> queryResults = executeFederatedQuery();\n                return !queryResults.isEmpty();\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return execute(executionGroupContext, callback, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2021-06-11 13:29:00","endLine":354,"groupId":"3931","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"execute0","params":"(finalStringsql@finalExecuteCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/63/3047324008a302c0bd82c0a26d0ac571ef15dc.src","preCode":"    private boolean execute0(final String sql, final ExecuteCallback callback) throws SQLException {\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> results = rawExecutor.execute(createRawExecutionContext(), executionContext.getSqlStatementContext(), new RawSQLExecutorCallback());\n                return results.iterator().next() instanceof QueryResult;\n            }\n            if (executionContext.getRouteContext().isFederated()) {\n                List<QueryResult> queryResults = executeFederatedQuery();\n                return !queryResults.isEmpty();\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return execute(executionGroupContext, callback, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"B"},{"authorDate":"2021-04-04 18:16:18","commitOrder":17,"curCode":"    public int executeUpdate() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getSqlStatementContext(), new RawSQLExecutorCallback());\n                accumulate(executeResults);\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return driverJDBCExecutor.executeUpdate(executionGroupContext,\n                    executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), createExecuteUpdateCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2021-04-04 18:16:18","endLine":246,"groupId":"9110","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"executeUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/12/e08b0dc65176e884b04ce8c9b25f4f373ed891.src","preCode":"    public int executeUpdate() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getSqlStatementContext(), new RawSQLExecutorCallback());\n                accumulate(executeResults);\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return driverJDBCExecutor.executeUpdate(executionGroupContext,\n                    executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), createExecuteUpdateCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"NB"}],"commitId":"99166c491f1e3005946dc7324094a08e812121af","commitMessage":"@@@fix calcite select result merge error when call execute method (#10758)\n\n* fix calcite select result merge error when call execute method\n\n* fix test case","date":"2021-06-11 13:29:00","modifiedFileCount":"8","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-06-25 16:56:56","codes":[{"authorDate":"2021-06-25 16:56:56","commitOrder":18,"curCode":"    private boolean execute0(final String sql, final ExecuteCallback callback) throws SQLException {\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> results = rawExecutor.execute(createRawExecutionContext(), executionContext.getLogicSQL(), new RawSQLExecutorCallback());\n                return results.iterator().next() instanceof QueryResult;\n            }\n            if (executionContext.getRouteContext().isFederated()) {\n                List<QueryResult> queryResults = executeFederatedQuery();\n                return !queryResults.isEmpty();\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return execute(executionGroupContext, callback, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2021-06-25 16:56:56","endLine":353,"groupId":"13401","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"execute0","params":"(finalStringsql@finalExecuteCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/78/e40cf78edce2e2a429b3a21d5461f6041f4a18.src","preCode":"    private boolean execute0(final String sql, final ExecuteCallback callback) throws SQLException {\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> results = rawExecutor.execute(createRawExecutionContext(), executionContext.getSqlStatementContext(), new RawSQLExecutorCallback());\n                return results.iterator().next() instanceof QueryResult;\n            }\n            if (executionContext.getRouteContext().isFederated()) {\n                List<QueryResult> queryResults = executeFederatedQuery();\n                return !queryResults.isEmpty();\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return execute(executionGroupContext, callback, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"M"},{"authorDate":"2021-06-25 16:56:56","commitOrder":18,"curCode":"    public int executeUpdate() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getLogicSQL(), new RawSQLExecutorCallback());\n                accumulate(executeResults);\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return driverJDBCExecutor.executeUpdate(executionGroupContext,\n                    executionContext.getLogicSQL(), executionContext.getRouteContext().getRouteUnits(), createExecuteUpdateCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2021-06-25 16:56:56","endLine":240,"groupId":"13401","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"executeUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c4/81f13b7340f2a1b8b98d61f126aa884f3461a4.src","preCode":"    public int executeUpdate() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getSqlStatementContext(), new RawSQLExecutorCallback());\n                accumulate(executeResults);\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return driverJDBCExecutor.executeUpdate(executionGroupContext,\n                    executionContext.getSqlStatementContext(), executionContext.getRouteContext().getRouteUnits(), createExecuteUpdateCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"}],"commitId":"2fa8d9de63960f5a160b64306418d9007a7ed528","commitMessage":"@@@Show logic SQL in execution process list Info column (#11006)\n\n* Prepare LogicSQL for ExecuteProcessReporter\n\n* Persist logic SQL and show in Info column","date":"2021-06-25 16:56:56","modifiedFileCount":"17","status":"M","submitter":"sandynz"},{"authorTime":"2021-08-09 16:45:36","codes":[{"authorDate":"2021-08-09 16:45:36","commitOrder":19,"curCode":"    private boolean execute0(final String sql, final ExecuteCallback callback) throws SQLException {\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getMetaData(connection.getSchemaName()).getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> results = rawExecutor.execute(createRawExecutionContext(), executionContext.getLogicSQL(), new RawSQLExecutorCallback());\n                return results.iterator().next() instanceof QueryResult;\n            }\n            if (executionContext.getRouteContext().isFederated()) {\n                List<QueryResult> queryResults = executeFederatedQuery();\n                return !queryResults.isEmpty();\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return execute(executionGroupContext, callback, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","date":"2021-08-09 16:45:36","endLine":351,"groupId":"101198","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"execute0","params":"(finalStringsql@finalExecuteCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d2/e584707f24bd62d48cc852cbeea49da6462e7e.src","preCode":"    private boolean execute0(final String sql, final ExecuteCallback callback) throws SQLException {\n        try {\n            executionContext = createExecutionContext(sql);\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                \r\n                Collection<ExecuteResult> results = rawExecutor.execute(createRawExecutionContext(), executionContext.getLogicSQL(), new RawSQLExecutorCallback());\n                return results.iterator().next() instanceof QueryResult;\n            }\n            if (executionContext.getRouteContext().isFederated()) {\n                List<QueryResult> queryResults = executeFederatedQuery();\n                return !queryResults.isEmpty();\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return execute(executionGroupContext, callback, executionContext.getSqlStatementContext().getSqlStatement(), executionContext.getRouteContext().getRouteUnits());\n        } finally {\n            currentResultSet = null;\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"},{"authorDate":"2021-08-09 16:45:36","commitOrder":19,"curCode":"    public int executeUpdate() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getMetaData(connection.getSchemaName()).getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getLogicSQL(), new RawSQLExecutorCallback());\n                accumulate(executeResults);\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return driverJDBCExecutor.executeUpdate(executionGroupContext,\n                    executionContext.getLogicSQL(), executionContext.getRouteContext().getRouteUnits(), createExecuteUpdateCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","date":"2021-08-09 16:45:36","endLine":239,"groupId":"101198","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"executeUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/50/baeaf18c596da58f3517bd1589948bda40a605.src","preCode":"    public int executeUpdate() throws SQLException {\n        try {\n            clearPrevious();\n            executionContext = createExecutionContext();\n            if (metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules().stream().anyMatch(each -> each instanceof RawExecutionRule)) {\n                Collection<ExecuteResult> executeResults = rawExecutor.execute(createRawExecutionGroupContext(), executionContext.getLogicSQL(), new RawSQLExecutorCallback());\n                accumulate(executeResults);\n            }\n            ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext = createExecutionGroupContext();\n            cacheStatements(executionGroupContext.getInputGroups());\n            return driverJDBCExecutor.executeUpdate(executionGroupContext,\n                    executionContext.getLogicSQL(), executionContext.getRouteContext().getRouteUnits(), createExecuteUpdateCallback());\n        } finally {\n            clearBatch();\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"}],"commitId":"222aeb59cc07d5eb3edc858c68b9d95cc903bcec","commitMessage":"@@@JDBC-core module delete getDefaultMetaData() (#11714)\n\n* jdbc-core module delete getDefaultMetaData()\n\n* update\n\n* optimization","date":"2021-08-09 16:45:36","modifiedFileCount":"22","status":"M","submitter":"zhaojinchao"}]
