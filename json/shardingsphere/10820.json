[{"authorTime":"2020-10-02 18:49:45","codes":[{"authorDate":"2020-10-02 18:49:45","commitOrder":2,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"schema\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n        field.setAccessible(true);\n        Map<String, ShardingSphereSchema> schemas = Collections.singletonMap(\"schema\", mock(ShardingSphereSchema.class, RETURNS_DEEP_STUBS));\n        field.set(ProxyContext.getInstance(), new StandardSchemaContexts(schemas, \n                mock(ShardingSphereSQLParserEngine.class), mock(ExecutorKernel.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","date":"2020-10-02 18:49:45","endLine":79,"groupId":"10035","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f6/50d262f6a58b2d5332643b0514852d24d3cd3f.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"schema\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n        field.setAccessible(true);\n        Map<String, ShardingSphereSchema> schemas = Collections.singletonMap(\"schema\", mock(ShardingSphereSchema.class, RETURNS_DEEP_STUBS));\n        field.set(ProxyContext.getInstance(), new StandardSchemaContexts(schemas, \n                mock(ShardingSphereSQLParserEngine.class), mock(ExecutorKernel.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"MB"},{"authorDate":"2020-10-02 18:49:45","commitOrder":2,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        Field schemaContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n        schemaContexts.setAccessible(true);\n        Map<String, ShardingSphereSchema> schemas = Collections.singletonMap(\"schema\", mock(ShardingSphereSchema.class, RETURNS_DEEP_STUBS));\n        schemaContexts.set(ProxyContext.getInstance(), new StandardSchemaContexts(schemas, \n                mock(ShardingSphereSQLParserEngine.class), mock(ExecutorKernel.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","date":"2020-10-02 18:49:45","endLine":67,"groupId":"10035","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/60/323528248972f50a9e1289a2ce613adc69dfb1.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        Field schemaContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n        schemaContexts.setAccessible(true);\n        Map<String, ShardingSphereSchema> schemas = Collections.singletonMap(\"schema\", mock(ShardingSphereSchema.class, RETURNS_DEEP_STUBS));\n        schemaContexts.set(ProxyContext.getInstance(), new StandardSchemaContexts(schemas, \n                mock(ShardingSphereSQLParserEngine.class), mock(ExecutorKernel.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"}],"commitId":"794a35521634f921ecdd823d5a3f6833a8860df1","commitMessage":"@@@Simplify SchemaContexts (#7686)\n\n* Add SchemaContexts.getExecutorKernel()\n\n* Use SchemaContexts.getExecutorKernel()\n\n* Remove RuntimeContext.executorKernel\n\n* Remove RuntimeContext.executorKernel\n\n* Add SchemaContexts.getSQLParserEngine\n\n* Use SchemaContexts.getSQLParserEngine\n\n* Remove RuntimeContext.sqlParserEngine\n\n* Remove RuntimeContext\n\n* Refactor MySQLComStmtPrepareExecutor\n\n* Refactor SchemaContexts\n\n* Remove SchemaContext\n\n* Refactor SchemaContextsBuilder","date":"2020-10-02 18:49:45","modifiedFileCount":"73","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-18 17:03:19","codes":[{"authorDate":"2020-10-18 17:03:19","commitOrder":3,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n        field.setAccessible(true);\n        Map<String, ShardingSphereSchema> schemas = Collections.singletonMap(\"logic_db\", mock(ShardingSphereSchema.class, RETURNS_DEEP_STUBS));\n        field.set(ProxyContext.getInstance(), \n                new StandardSchemaContexts(schemas, mock(ExecutorKernel.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","date":"2020-10-18 17:03:19","endLine":78,"groupId":"10035","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/94/22e71199cdb9bff00ac84fd4fe36894b261ee8.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"schema\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n        field.setAccessible(true);\n        Map<String, ShardingSphereSchema> schemas = Collections.singletonMap(\"schema\", mock(ShardingSphereSchema.class, RETURNS_DEEP_STUBS));\n        field.set(ProxyContext.getInstance(), new StandardSchemaContexts(schemas, \n                mock(ShardingSphereSQLParserEngine.class), mock(ExecutorKernel.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-10-18 17:03:19","commitOrder":3,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        Field schemaContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n        schemaContexts.setAccessible(true);\n        Map<String, ShardingSphereSchema> schemas = Collections.singletonMap(\"logic_db\", mock(ShardingSphereSchema.class, RETURNS_DEEP_STUBS));\n        schemaContexts.set(ProxyContext.getInstance(), \n                new StandardSchemaContexts(schemas, mock(ExecutorKernel.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","date":"2020-10-18 17:03:19","endLine":66,"groupId":"10035","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/95/bb61f8da4879c3352cab5eecc621e6f235bdb5.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        Field schemaContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n        schemaContexts.setAccessible(true);\n        Map<String, ShardingSphereSchema> schemas = Collections.singletonMap(\"schema\", mock(ShardingSphereSchema.class, RETURNS_DEEP_STUBS));\n        schemaContexts.set(ProxyContext.getInstance(), new StandardSchemaContexts(schemas, \n                mock(ShardingSphereSQLParserEngine.class), mock(ExecutorKernel.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"8131f34f9307a0c6a7011a6f86ae6c9ce4fb3352","commitMessage":"@@@Remove ShardingSphereSQLParserEngine from SchemaContexts (#7832)\n\n* Remove ShardingSphereSQLParserEngineFactory\n\n* Remove ShardingSphereSQLParserEngineFactory\n\n* Remove ShardingSphereSQLParserEngine from SchemaContextsBuilder\n\n* Remove ShardingSphereSQLParserEngine from SchemaContexts\n\n* Delete DALStatement.interp\n\n* Delete DALStatement.tokens\n\n* Delete DALStatementLexer.tokens\n\n* Delete DALStatementLexer.interp\n\n* Delete DALStatementVisitor.java\n\n* Delete DALStatementParser.java\n\n* Delete DALStatementListener.java\n\n* Delete DALStatementLexer.java\n\n* Delete DALStatementBaseVisitor.java\n\n* Delete DALStatementBaseListener.java","date":"2020-10-18 17:03:19","modifiedFileCount":"35","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-04 18:35:25","codes":[{"authorDate":"2020-11-04 18:35:25","commitOrder":4,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n        field.setAccessible(true);\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS));\n        field.set(ProxyContext.getInstance(), \n                new StandardSchemaContexts(metaDataMap, mock(ExecutorKernel.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","date":"2020-11-04 18:35:25","endLine":78,"groupId":"8831","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/67/f15312ad7414285463e9512df6895feb73e196.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n        field.setAccessible(true);\n        Map<String, ShardingSphereSchema> schemas = Collections.singletonMap(\"logic_db\", mock(ShardingSphereSchema.class, RETURNS_DEEP_STUBS));\n        field.set(ProxyContext.getInstance(), \n                new StandardSchemaContexts(schemas, mock(ExecutorKernel.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-11-04 18:35:25","commitOrder":4,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        Field schemaContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n        schemaContexts.setAccessible(true);\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS));\n        schemaContexts.set(ProxyContext.getInstance(), \n                new StandardSchemaContexts(metaDataMap, mock(ExecutorKernel.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","date":"2020-11-04 18:35:25","endLine":66,"groupId":"4475","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/92/ff3d673240025a9e4cf0bf487145f36a21b90a.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        Field schemaContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n        schemaContexts.setAccessible(true);\n        Map<String, ShardingSphereSchema> schemas = Collections.singletonMap(\"logic_db\", mock(ShardingSphereSchema.class, RETURNS_DEEP_STUBS));\n        schemaContexts.set(ProxyContext.getInstance(), \n                new StandardSchemaContexts(schemas, mock(ExecutorKernel.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"d06c68303f2628c99ac5aa6e4a22d8e73bb07d7d","commitMessage":"@@@Switch class name of ShardingSphereMetaData and ShardingSphereSchema (#8026)\n\n* Remove useless ReplicaQueryTableAddressingMetaDataDecorator\n\n* Switch class name of ShardingSphereMetaData and ShardingSphereSchema","date":"2020-11-04 18:35:25","modifiedFileCount":"223","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-09 20:30:31","codes":[{"authorDate":"2020-11-09 20:30:31","commitOrder":5,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS));\n        field.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, mock(ExecutorKernel.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","date":"2020-11-09 20:30:31","endLine":78,"groupId":"8831","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/24/5bcaa820f466387bd294bd63c338887b53543f.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n        field.setAccessible(true);\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS));\n        field.set(ProxyContext.getInstance(), \n                new StandardSchemaContexts(metaDataMap, mock(ExecutorKernel.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-11-09 20:30:31","commitOrder":5,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        Field metaDataContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        metaDataContexts.setAccessible(true);\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS));\n        metaDataContexts.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, mock(ExecutorKernel.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","date":"2020-11-09 20:30:31","endLine":66,"groupId":"4475","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/35/86eabef8a260b70b4420c3073845a9fbececce.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        Field schemaContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n        schemaContexts.setAccessible(true);\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS));\n        schemaContexts.set(ProxyContext.getInstance(), \n                new StandardSchemaContexts(metaDataMap, mock(ExecutorKernel.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"a6b2375ce66834335447254a0309cba2b3f71510","commitMessage":"@@@Rename MetaDataContexts (#8101)\n\n* Rename MetaDataContexts\n\n* Rename package name","date":"2020-11-09 20:30:31","modifiedFileCount":"92","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-11-21 17:20:14","codes":[{"authorDate":"2020-11-21 17:20:14","commitOrder":6,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS));\n        field.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, mock(ExecutorEngine.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","date":"2020-11-21 17:20:14","endLine":78,"groupId":"8831","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3b/7ffd2b78f5311b44f91c53e17f96245f6f605a.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS));\n        field.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, mock(ExecutorKernel.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-11-21 17:20:14","commitOrder":6,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        Field metaDataContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        metaDataContexts.setAccessible(true);\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS));\n        metaDataContexts.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, mock(ExecutorEngine.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","date":"2020-11-21 17:20:14","endLine":66,"groupId":"4475","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/95/7ac6ae4715d246fd987bf930ed220029669c06.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        Field metaDataContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        metaDataContexts.setAccessible(true);\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS));\n        metaDataContexts.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, mock(ExecutorKernel.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"dc3af42b1328348d884e19281e4aae5a8b1cbd42","commitMessage":"@@@Refactor executor.kernel's domain (#8266)\n\n* Rename ExecutorServiceManager\n\n* Rename ExecutorThreadFactoryBuilder\n\n* Rename package to kernel.thread\n\n* Add kernel.model package\n\n* Rename ExecutorEngine","date":"2020-11-21 17:20:14","modifiedFileCount":"64","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-12-11 07:32:04","codes":[{"authorDate":"2020-12-11 07:32:04","commitOrder":7,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS));\n        field.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, mock(ExecutorEngine.class), new DefaultAuthentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","date":"2020-12-11 07:32:04","endLine":78,"groupId":"8831","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1e/3e8df3c4a6e48c3ad3f71851669a7263092afe.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS));\n        field.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, mock(ExecutorEngine.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-12-11 07:32:04","commitOrder":7,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        Field metaDataContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        metaDataContexts.setAccessible(true);\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS));\n        metaDataContexts.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, mock(ExecutorEngine.class), new DefaultAuthentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","date":"2020-12-11 07:32:04","endLine":67,"groupId":"4475","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/35/e760eeb92e85d42ca7a8a7f621cd6b68b78788.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        Field metaDataContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        metaDataContexts.setAccessible(true);\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS));\n        metaDataContexts.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, mock(ExecutorEngine.class), new Authentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"74a10c21f3c7d63c5dd4365b17873f6966ad0487","commitMessage":"@@@Add authentication SPI for external authentication (#8566)\n\n* Rename ShardingSphereUser\n\n* Add MemoryAuthentication\n\n* Rename UserYamlSwapper\n\n* Rename YamlUserConfiguration\n\n* Add memory package\n\n* Refactor usage of Authentication\n\n* Add AuthenticationEngine\n\n* Refactor StandardMetaDataContexts\n\n* Rename DefaultAuthentication\n\n* Resolve conflict","date":"2020-12-11 07:32:04","modifiedFileCount":"43","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-12-12 23:20:10","codes":[{"authorDate":"2020-12-12 23:20:10","commitOrder":8,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        field.set(ProxyContext.getInstance(), new StandardMetaDataContexts(metaDataMap, mock(ExecutorEngine.class), new DefaultAuthentication(), new ConfigurationProperties(new Properties())));\n    }\n","date":"2020-12-12 23:20:10","endLine":79,"groupId":"14408","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d7/a348b7eb953172fcdc8ed99248de4383e34105.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS));\n        field.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, mock(ExecutorEngine.class), new DefaultAuthentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-12-12 23:20:10","commitOrder":8,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        Field metaDataContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        metaDataContexts.setAccessible(true);\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        metaDataContexts.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, mock(ExecutorEngine.class), new DefaultAuthentication(), new ConfigurationProperties(new Properties())));\n    }\n","date":"2020-12-12 23:20:10","endLine":69,"groupId":"1315","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/19/f2eb503f024bc49ebd787d29f454c92ae80beb.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        Field metaDataContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        metaDataContexts.setAccessible(true);\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS));\n        metaDataContexts.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, mock(ExecutorEngine.class), new DefaultAuthentication(), new ConfigurationProperties(new Properties()), new MySQLDatabaseType()));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"efdd25f4b72a85c3040d089ff58f418141cc72b2","commitMessage":"@@@Split backend database type from same one to multiple with each schema (#8596)\n\n* Use database type map instead of single database type\n\n* Add MetaDataContexts.getAllSchemas\n\n* Remove MetaDataContexts.getDatabaseTypes()\n\n* Add ShardingSphereResource.databaseType\n\n* Remove MetaDataContexts.getDatabaseType()\n\n* Remove StandardMetaDataContexts.databaseTypes\n\n* Use MetaDataContexts.getDefaultMetaData\n\n* Use MetaDataContexts.getDefaultMetaData\n\n* Add MetaDataContexts.getMetaData(String schemaName)\n\n* Remove MetaDataContexts.getMetaDataMap()\n\n* refactor MetaDataContextsBuilder","date":"2020-12-12 23:20:10","modifiedFileCount":"59","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-04-01 18:29:09","codes":[{"authorDate":"2021-04-01 18:29:09","commitOrder":9,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        field.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, mock(ExecutorEngine.class), new ShardingSphereUsers(Collections.emptyList()), new ConfigurationProperties(new Properties())));\n    }\n","date":"2021-04-01 18:29:09","endLine":81,"groupId":"14408","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/89/8e66a0535bb17a83e39754a00f0f8239549244.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        field.set(ProxyContext.getInstance(), new StandardMetaDataContexts(metaDataMap, mock(ExecutorEngine.class), new DefaultAuthentication(), new ConfigurationProperties(new Properties())));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2021-04-01 18:29:09","commitOrder":9,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        Field metaDataContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        metaDataContexts.setAccessible(true);\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        metaDataContexts.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, mock(ExecutorEngine.class), new ShardingSphereUsers(Collections.emptyList()), new ConfigurationProperties(new Properties())));\n    }\n","date":"2021-04-01 18:29:09","endLine":69,"groupId":"1315","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/55/ef1a57c7273ca8bc36c6ae33dd080a48e13a29.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        Field metaDataContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        metaDataContexts.setAccessible(true);\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        metaDataContexts.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, mock(ExecutorEngine.class), new DefaultAuthentication(), new ConfigurationProperties(new Properties())));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"4954616af3db97b031b8a2005b2e40062b390929","commitMessage":"@@@Add AuthenticationContext and ShardingSphereUsers (#9906)\n\n* Add AuthenticationContext and ShardingSphereUsers\n\n* Remove MetaDataContexts.getAuthentication()\n\n* Fix test case\n\n* Move AuthenticationContext\n\n* Refactor SQLChecker\n\n* Use SQLChecker to check authrity\n\n* Fix compile error","date":"2021-04-01 18:29:09","modifiedFileCount":"53","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-04-08 16:15:03","codes":[{"authorDate":"2021-04-08 16:15:03","commitOrder":10,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        field.set(ProxyContext.getInstance(), new StandardMetaDataContexts(metaDataMap, \n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ShardingSphereUsers(Collections.emptyList()), new ConfigurationProperties(new Properties())));\n    }\n","date":"2021-04-08 16:15:03","endLine":82,"groupId":"14408","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3a/a92402420f98469e7963938cbdbf554140bd8a.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        field.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, mock(ExecutorEngine.class), new ShardingSphereUsers(Collections.emptyList()), new ConfigurationProperties(new Properties())));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2021-04-08 16:15:03","commitOrder":10,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        Field metaDataContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        metaDataContexts.setAccessible(true);\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        metaDataContexts.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, \n                        mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ShardingSphereUsers(Collections.emptyList()), new ConfigurationProperties(new Properties())));\n    }\n","date":"2021-04-08 16:15:03","endLine":71,"groupId":"1315","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b3/5763de858685dfcb902af9b88f6ece046a57a8.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        Field metaDataContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        metaDataContexts.setAccessible(true);\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        metaDataContexts.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, mock(ExecutorEngine.class), new ShardingSphereUsers(Collections.emptyList()), new ConfigurationProperties(new Properties())));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"d6fe7c187b7f3bd2c05cad2d9920b9f664de5d11","commitMessage":"@@@Use SchemaRule and GlobalRule interface (#9989)\n\n* Use SchemaRule and GlobalRule interface\n\n* Fix compile error","date":"2021-04-08 16:15:03","modifiedFileCount":"67","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-04-11 00:44:17","codes":[{"authorDate":"2021-04-11 00:44:17","commitOrder":11,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        MetaDataContexts metaDataContexts = new StandardMetaDataContexts(metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ShardingSphereUsers(Collections.emptyList()), new ConfigurationProperties(new Properties()));\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","date":"2021-04-11 00:44:17","endLine":83,"groupId":"2667","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c0/31d2f6cb9ce0e947fa9a4b7615bc4c7dfe4b86.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        field.set(ProxyContext.getInstance(), new StandardMetaDataContexts(metaDataMap, \n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ShardingSphereUsers(Collections.emptyList()), new ConfigurationProperties(new Properties())));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2021-04-11 00:44:17","commitOrder":11,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        StandardMetaDataContexts metaDataContexts = new StandardMetaDataContexts(metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ShardingSphereUsers(Collections.emptyList()), new ConfigurationProperties(new Properties()));\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","date":"2021-04-11 00:44:17","endLine":70,"groupId":"2667","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/eb/5102439d8c064cde87ad5d1140de377be38b52.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        Field metaDataContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        metaDataContexts.setAccessible(true);\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n        when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        metaDataContexts.set(ProxyContext.getInstance(), \n                new StandardMetaDataContexts(metaDataMap, \n                        mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ShardingSphereUsers(Collections.emptyList()), new ConfigurationProperties(new Properties())));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"609c28ea2eb3e7d86d6a0e46fef096bef1498119","commitMessage":"@@@Refactor AuthorityRule to hide getProvider() (#10033)\n\n* Refactor AuthorityRule\n\n* Fix test case\n\n* Fix test cases","date":"2021-04-11 00:44:17","modifiedFileCount":"7","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-05-18 13:23:30","codes":[{"authorDate":"2021-05-18 13:23:30","commitOrder":12,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        MetaDataContexts metaDataContexts = new StandardMetaDataContexts(metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()));\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","date":"2021-05-18 13:23:30","endLine":82,"groupId":"2667","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a0/2ab83252e830eb90b0347e78486159b986b63e.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        MetaDataContexts metaDataContexts = new StandardMetaDataContexts(metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ShardingSphereUsers(Collections.emptyList()), new ConfigurationProperties(new Properties()));\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2021-05-18 13:23:30","commitOrder":12,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        StandardMetaDataContexts metaDataContexts = new StandardMetaDataContexts(metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()));\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","date":"2021-05-18 13:23:30","endLine":69,"groupId":"2667","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1b/0cd48a4dd80fc8df77dd98b3fac31c501a20f1.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        StandardMetaDataContexts metaDataContexts = new StandardMetaDataContexts(metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ShardingSphereUsers(Collections.emptyList()), new ConfigurationProperties(new Properties()));\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"fe0ddc8c5d6c106f4f88af39bc42a4038f60b26b","commitMessage":"@@@Users  removed from StandardMetaDataContexts (#10310)\n\n* remove user\n\n* fix review\n\n* trigger ci\n\n* fix code\n\n* fix","date":"2021-05-18 13:23:30","modifiedFileCount":"39","status":"M","submitter":"Zhu jun"},{"authorTime":"2021-07-01 11:29:35","codes":[{"authorDate":"2021-07-01 11:29:35","commitOrder":13,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        MetaDataContexts metaDataContexts = new StandardMetaDataContexts(metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","date":"2021-07-01 11:29:35","endLine":85,"groupId":"2667","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2d/bd2efff89c42c96d509e9412360b0f8cbdb0a3.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        MetaDataContexts metaDataContexts = new StandardMetaDataContexts(metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()));\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2021-07-01 11:29:35","commitOrder":13,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        StandardMetaDataContexts metaDataContexts = new StandardMetaDataContexts(metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","date":"2021-07-01 11:29:35","endLine":72,"groupId":"2667","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d3/0e246b81adf642b862bd9eb956da77d32560a3.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        StandardMetaDataContexts metaDataContexts = new StandardMetaDataContexts(metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()));\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"e560dc4352de5abc7caf4fbdc03b747985508961","commitMessage":"@@@improve code for #10840 (#11028)\n\n* improve code style for 10678\n\n* Remove unnecessary submitted code.\n\n* improve code\n\n* improve code\n\n* improve code for 10678","date":"2021-07-01 11:29:35","modifiedFileCount":"61","status":"M","submitter":"totalo"},{"authorTime":"2021-07-01 11:29:35","codes":[{"authorDate":"2021-07-02 20:44:49","commitOrder":14,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        when(backendConnection.getDefaultSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        MetaDataContexts metaDataContexts = new StandardMetaDataContexts(metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","date":"2021-07-02 20:44:49","endLine":86,"groupId":"2667","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/81/5ab679a05e086da816f48888636793d0d5722a.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        MetaDataContexts metaDataContexts = new StandardMetaDataContexts(metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2021-07-01 11:29:35","commitOrder":14,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        StandardMetaDataContexts metaDataContexts = new StandardMetaDataContexts(metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","date":"2021-07-01 11:29:35","endLine":72,"groupId":"2667","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d3/0e246b81adf642b862bd9eb956da77d32560a3.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        StandardMetaDataContexts metaDataContexts = new StandardMetaDataContexts(metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"bfb784c9a0e47fd147c8a654c2f0b2a1e86c2c27","commitMessage":"@@@extract SchemaAvailable interface & add validate for SelectStatement (#11091)\n\n* refactor SchemaAvailable interface & add validate for SelectStatement\n\n* add final for InsertStatementContext field\n\n* fix test case error\n\n* fix rewrite test case error\n\n* refactor context new instance method\n\n* optimize test case\n\n* fix test case\n\n* optimize logic\n\n* fix test case\n\n* fix checkstyle","date":"2021-07-02 20:44:49","modifiedFileCount":"44","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-07-24 22:50:31","codes":[{"authorDate":"2021-07-24 22:50:31","commitOrder":15,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        when(backendConnection.getDefaultSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        MetaDataContexts metaDataContexts = new StandardMetaDataContexts(mock(ConfigCenter.class), metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","date":"2021-07-24 22:50:31","endLine":87,"groupId":"11982","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f7/0a816812b987ea41e59cad3b8a8eaf0704bcfe.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        when(backendConnection.getDefaultSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        MetaDataContexts metaDataContexts = new StandardMetaDataContexts(metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2021-07-24 22:50:31","commitOrder":15,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        StandardMetaDataContexts metaDataContexts = new StandardMetaDataContexts(mock(ConfigCenter.class), metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","date":"2021-07-24 22:50:31","endLine":73,"groupId":"11982","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e3/7b5a7854dfc98c6886351c3aa5efeb24cd36c9.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        StandardMetaDataContexts metaDataContexts = new StandardMetaDataContexts(metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"717c99918248f66d683ef60a4f961ee37470c687","commitMessage":"@@@Use direct call to instead of event post on AddResourceBackendHandler (#11488)\n\n* Add MetaDataContexts.getConfigCenter()\n\n* Use direct call to refactor AddResourceBackendHandler\n\n* Use direct call to refactor AddResourceBackendHandler\n\n* Fix test case\n\n* Add DataSourcePersistService.append()\n\n* Add test case","date":"2021-07-24 22:50:31","modifiedFileCount":"44","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-26 14:43:21","codes":[{"authorDate":"2021-07-26 14:43:21","commitOrder":16,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        when(backendConnection.getDefaultSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        MetaDataContexts metaDataContexts = new StandardMetaDataContexts(mock(DistMetaDataPersistService.class), metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","date":"2021-07-26 14:43:21","endLine":87,"groupId":"11982","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1a/91875f5a6bbf552eb0f5a05ee027fc245eaabf.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        when(backendConnection.getDefaultSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        MetaDataContexts metaDataContexts = new StandardMetaDataContexts(mock(ConfigCenter.class), metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2021-07-26 14:43:21","commitOrder":16,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        StandardMetaDataContexts metaDataContexts = new StandardMetaDataContexts(mock(DistMetaDataPersistService.class), metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","date":"2021-07-26 14:43:21","endLine":73,"groupId":"11982","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4a/a4a338777b36d30fe5459bb5d70b93c7c214e7.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        StandardMetaDataContexts metaDataContexts = new StandardMetaDataContexts(mock(ConfigCenter.class), metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"3073e94515f9556d995dbf3a2d409630801788f4","commitMessage":"@@@Rename ConfigCenter to DistMetaDataPersistService (#11505)\n\n* Rename DistMetaDataPersistService\n\n* Rename DistMetaDataPersistRepository\n\n* Rename DistMetaDataPersistRepository\n\n* For checkstyle\n\n* For checkstyle","date":"2021-07-26 14:43:21","modifiedFileCount":"59","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-15 02:33:31","codes":[{"authorDate":"2021-08-15 02:33:31","commitOrder":17,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        when(backendConnection.getDefaultSchemaName()).thenReturn(\"logic_db\");\n        Field contextManagerField = ProxyContext.getInstance().getClass().getDeclaredField(\"contextManager\");\n        contextManagerField.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        ContextManager contextManager = mock(ContextManager.class, RETURNS_DEEP_STUBS);\n        StandardMetaDataContexts metaDataContexts = new StandardMetaDataContexts(mock(DistMetaDataPersistService.class), metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        when(contextManager.getMetaDataContexts()).thenReturn(metaDataContexts);\n        contextManagerField.set(ProxyContext.getInstance(), contextManager);\n    }\n","date":"2021-08-15 02:33:31","endLine":88,"groupId":"3480","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/62/3c6899870a4db7e52d2507de859cd527bea1af.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        when(backendConnection.getDefaultSchemaName()).thenReturn(\"logic_db\");\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        MetaDataContexts metaDataContexts = new StandardMetaDataContexts(mock(DistMetaDataPersistService.class), metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2021-08-15 02:33:31","commitOrder":17,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        Field contextManagerField = ProxyContext.getInstance().getClass().getDeclaredField(\"contextManager\");\n        contextManagerField.setAccessible(true);\n        ShardingSphereMetaData metaData = mockMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        StandardMetaDataContexts metaDataContexts = new StandardMetaDataContexts(mock(DistMetaDataPersistService.class), metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        ContextManager contextManager = mock(ContextManager.class, RETURNS_DEEP_STUBS);\n        when(contextManager.getMetaDataContexts()).thenReturn(metaDataContexts);\n        contextManagerField.set(ProxyContext.getInstance(), contextManager);\n    }\n","date":"2021-08-15 02:33:31","endLine":75,"groupId":"7594","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f1/d58970bd594585174ef048cc8618c17c1b6e38.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n        field.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        StandardMetaDataContexts metaDataContexts = new StandardMetaDataContexts(mock(DistMetaDataPersistService.class), metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        field.set(ProxyContext.getInstance(), metaDataContexts);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"d6e424ba68c64ea1835a42b0f4b0fb7f69c95323","commitMessage":"@@@Add ContextManager (#11822)\n\n* Add ContextManager\n\n* Use ContextManager on GovernanceShardingSphereDataSource\n\n* Use ContextManager on ShardingSphereDataSource\n\n* Use ContextManager on ShardingSphereConnection\n\n* Use ContextManager on ShardingSphereConnection\n\n* Refactor AbstractBaseExecutorTest\n\n* Use ContextManager on proxy\n\n* Fix test case","date":"2021-08-15 02:33:31","modifiedFileCount":"118","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-15 11:55:34","codes":[{"authorDate":"2021-08-15 11:55:34","commitOrder":18,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        when(backendConnection.getDefaultSchemaName()).thenReturn(\"logic_db\");\n        Field contextManagerField = ProxyContext.getInstance().getClass().getDeclaredField(\"contextManager\");\n        contextManagerField.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        ContextManager contextManager = mock(ContextManager.class, RETURNS_DEEP_STUBS);\n        MetaDataContexts metaDataContexts = new MetaDataContexts(mock(DistMetaDataPersistService.class), metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        when(contextManager.getMetaDataContexts()).thenReturn(metaDataContexts);\n        contextManagerField.set(ProxyContext.getInstance(), contextManager);\n    }\n","date":"2021-08-15 11:55:34","endLine":88,"groupId":"3480","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/05/08543d531a6116cd5eb3631da149347b3c4e09.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        when(backendConnection.getDefaultSchemaName()).thenReturn(\"logic_db\");\n        Field contextManagerField = ProxyContext.getInstance().getClass().getDeclaredField(\"contextManager\");\n        contextManagerField.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        ContextManager contextManager = mock(ContextManager.class, RETURNS_DEEP_STUBS);\n        StandardMetaDataContexts metaDataContexts = new StandardMetaDataContexts(mock(DistMetaDataPersistService.class), metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        when(contextManager.getMetaDataContexts()).thenReturn(metaDataContexts);\n        contextManagerField.set(ProxyContext.getInstance(), contextManager);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2021-08-15 11:55:34","commitOrder":18,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        Field contextManagerField = ProxyContext.getInstance().getClass().getDeclaredField(\"contextManager\");\n        contextManagerField.setAccessible(true);\n        ShardingSphereMetaData metaData = mockMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        MetaDataContexts metaDataContexts = new MetaDataContexts(mock(DistMetaDataPersistService.class), metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        ContextManager contextManager = mock(ContextManager.class, RETURNS_DEEP_STUBS);\n        when(contextManager.getMetaDataContexts()).thenReturn(metaDataContexts);\n        contextManagerField.set(ProxyContext.getInstance(), contextManager);\n    }\n","date":"2021-08-15 11:55:34","endLine":75,"groupId":"7594","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0a/ec1e555c33de9795d37c2013dbb8e19782fe3a.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        Field contextManagerField = ProxyContext.getInstance().getClass().getDeclaredField(\"contextManager\");\n        contextManagerField.setAccessible(true);\n        ShardingSphereMetaData metaData = mockMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        StandardMetaDataContexts metaDataContexts = new StandardMetaDataContexts(mock(DistMetaDataPersistService.class), metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        ContextManager contextManager = mock(ContextManager.class, RETURNS_DEEP_STUBS);\n        when(contextManager.getMetaDataContexts()).thenReturn(metaDataContexts);\n        contextManagerField.set(ProxyContext.getInstance(), contextManager);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"21a22f867f1709d878330ac64794a8a8880a116c","commitMessage":"@@@Merge StandardContexts and Contexts interface (#11826)\n\n","date":"2021-08-15 11:55:34","modifiedFileCount":"53","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-21 23:24:02","codes":[{"authorDate":"2021-08-21 23:24:02","commitOrder":19,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        when(backendConnection.getDefaultSchemaName()).thenReturn(\"logic_db\");\n        Field contextManagerField = ProxyContext.getInstance().getClass().getDeclaredField(\"contextManager\");\n        contextManagerField.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        ContextManager contextManager = mock(ContextManager.class, RETURNS_DEEP_STUBS);\n        MetaDataContexts metaDataContexts = new MetaDataContexts(mock(PersistService.class), metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        when(contextManager.getMetaDataContexts()).thenReturn(metaDataContexts);\n        contextManagerField.set(ProxyContext.getInstance(), contextManager);\n    }\n","date":"2021-08-21 23:24:02","endLine":88,"groupId":"10820","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1c/86f9338644484bb122ba1301b65e8c337f5441.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        when(backendConnection.getSchemaName()).thenReturn(\"logic_db\");\n        when(backendConnection.getDefaultSchemaName()).thenReturn(\"logic_db\");\n        Field contextManagerField = ProxyContext.getInstance().getClass().getDeclaredField(\"contextManager\");\n        contextManagerField.setAccessible(true);\n        ShardingSphereMetaData metaData = mockShardingSphereMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        ContextManager contextManager = mock(ContextManager.class, RETURNS_DEEP_STUBS);\n        MetaDataContexts metaDataContexts = new MetaDataContexts(mock(DistMetaDataPersistService.class), metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        when(contextManager.getMetaDataContexts()).thenReturn(metaDataContexts);\n        contextManagerField.set(ProxyContext.getInstance(), contextManager);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2021-08-21 23:24:02","commitOrder":19,"curCode":"    public void setUp() throws ReflectiveOperationException {\n        Field contextManagerField = ProxyContext.getInstance().getClass().getDeclaredField(\"contextManager\");\n        contextManagerField.setAccessible(true);\n        ShardingSphereMetaData metaData = mockMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        MetaDataContexts metaDataContexts = new MetaDataContexts(mock(PersistService.class), metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        ContextManager contextManager = mock(ContextManager.class, RETURNS_DEEP_STUBS);\n        when(contextManager.getMetaDataContexts()).thenReturn(metaDataContexts);\n        contextManagerField.set(ProxyContext.getInstance(), contextManager);\n    }\n","date":"2021-08-21 23:24:02","endLine":75,"groupId":"10820","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/20/d3bdc6279b134f7f2bd684aac01c9b2516d2ba.src","preCode":"    public void setUp() throws ReflectiveOperationException {\n        Field contextManagerField = ProxyContext.getInstance().getClass().getDeclaredField(\"contextManager\");\n        contextManagerField.setAccessible(true);\n        ShardingSphereMetaData metaData = mockMetaData();\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"logic_db\", metaData);\n        MetaDataContexts metaDataContexts = new MetaDataContexts(mock(DistMetaDataPersistService.class), metaDataMap,\n                mock(ShardingSphereRuleMetaData.class), mock(ExecutorEngine.class), new ConfigurationProperties(new Properties()), mockOptimizeContextFactory());\n        ContextManager contextManager = mock(ContextManager.class, RETURNS_DEEP_STUBS);\n        when(contextManager.getMetaDataContexts()).thenReturn(metaDataContexts);\n        contextManagerField.set(ProxyContext.getInstance(), contextManager);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/binary/execute/MySQLComStmtExecuteExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"534fe5735969e87e2066a2087ba12618be530cbc","commitMessage":"@@@Refactor ShardingSphereMode (#11937)\n\n* Refactor ShardingSphereAutoConfiguration\n\n* Remove useless PersistRepositoryFactory\n\n* Add StandalonePersistRepository\n\n* Add generic type of ShardingSphereMode\n\n* Add generic type of ContextManagerBuilder\n\n* Refactor ShardingSphereMode\n\n* Rename LocalStandalonePersistRepository\n\n* Rename LocalRepository\n\n* Rename RegistryCenterRepository to ClusterPersistRepository\n\n* Rename ClusterPersistRepositoryFactory\n\n* Move StandalonePersistRepository\n\n* Move StandalonePersistRepositoryConfiguration\n\n* Rename DistMetaDataPersistService to PersistService","date":"2021-08-21 23:24:02","modifiedFileCount":"75","status":"M","submitter":"Liang Zhang"}]
