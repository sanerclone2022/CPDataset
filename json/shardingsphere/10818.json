[{"authorTime":"2020-12-23 00:59:04","codes":[{"authorDate":"2020-12-23 00:59:04","commitOrder":1,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2020-12-23 00:59:04","endLine":74,"groupId":"2329","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/45/0a1b1c224e8ebf3ccd9a30ed815eec99e1c1c9.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/ShowDatabasesExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2020-12-23 00:59:04","commitOrder":1,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(false);\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2020-12-23 00:59:04","endLine":67,"groupId":"3497","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c5/7006fcd4b766d4bd15351e4e8cfc2eadc5c162.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(false);\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/ShowTablesExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"}],"commitId":"3b5153296307e4fb7ab095ed4b51eeafbca1da3d","commitMessage":"@@@Add DatabaseAdminExecutor (#8723)\n\n* Refactor KernelProcessor\n\n* Refactor ShowTablesBackendHandler\n\n* Refactor QueryHeaderBuilder\n\n* Refactor ShowDatabasesBackendHandler\n\n* Refactor ShowCurrentDatabaseBackendHandler\n\n* Add DatabaseAdminExecutor\n\n* Fix test case\n\n* Fix test case\n\n* Move to executor package\n\n* Impl process multiple columns when gen QueryHeader\n\n* Add DatabaseAdminExecutorFactory\n\n* Rename mysql.executor\n\n* Refactor ShowTablesExecutor","date":"2020-12-23 00:59:04","modifiedFileCount":"8","status":"B","submitter":"Liang Zhang"},{"authorTime":"2020-12-23 00:59:04","codes":[{"authorDate":"2020-12-28 19:55:24","commitOrder":2,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2020-12-28 19:55:24","endLine":71,"groupId":"3483","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f8/2797dd89d25d92a2db98b0c49f79573d1d7879.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(), null, null, new MySQLDatabaseType()));\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/ShowDatabasesExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2020-12-23 00:59:04","commitOrder":2,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(false);\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2020-12-23 00:59:04","endLine":67,"groupId":"3497","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c5/7006fcd4b766d4bd15351e4e8cfc2eadc5c162.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(false);\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/ShowTablesExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"N"}],"commitId":"1ce30356524252ed9a4ce1809eba5f3aaddfe437","commitMessage":"@@@Rename and Refactor CalciteLogicSchemaFactory (#8791)\n\n* create Calcite executors\n\n* Rename and Refactor CalciteLogicSchemaFactory\n\n* fix ut\n\n* check style","date":"2020-12-28 19:55:24","modifiedFileCount":"8","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-01-07 22:10:53","codes":[{"authorDate":"2021-01-07 22:10:53","commitOrder":3,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-01-07 22:10:53","endLine":74,"groupId":"14219","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c7/a0e0ad5992f12801785fca89ad975ea31858ef.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/ShowDatabasesExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2021-01-07 22:10:53","commitOrder":3,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(false);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-01-07 22:10:53","endLine":69,"groupId":"3497","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0d/f200f3f74e900a6a42c32330010ae731242d47.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(false);\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/ShowTablesExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"064e4867c8fb55da9761dc9c9784e51452c9046d","commitMessage":"@@@Support different Database types for Query optimization and fixed some bugs (#8918)\n\n* Support different Database types for Query optimization and fix some bugs\n\n* Support different Database types for Query optimization and fix some bugs\n\n* fix some problem\n\n* fixed some related problems\n\n* fixed some related problems\n\n* fixed some related problems\n\n* maked more clear\n\n* fixed some problems\n\n* fixed some problems\n\n* fixed some problems","date":"2021-01-07 22:10:53","modifiedFileCount":"15","status":"M","submitter":"Jieker"},{"authorTime":"2021-01-07 22:10:53","codes":[{"authorDate":"2021-02-04 01:01:43","commitOrder":4,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-02-04 01:01:43","endLine":75,"groupId":"14219","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6c/4538a595b9367980e54c08984e40860f11d804.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/ShowDatabasesExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2021-01-07 22:10:53","commitOrder":4,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(false);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-01-07 22:10:53","endLine":69,"groupId":"3497","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0d/f200f3f74e900a6a42c32330010ae731242d47.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(false);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/ShowTablesExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"}],"commitId":"99cdd84826eb28cd3fe1e86ac22aa1a3ece8e5be","commitMessage":"@@@Fix test case: ShowDatabasesExecutorTest (#9305)\n\n","date":"2021-02-04 01:01:43","modifiedFileCount":"6","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-01-07 22:10:53","codes":[{"authorDate":"2021-06-24 15:39:40","commitOrder":5,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        }\n        return result;\n    }\n","date":"2021-06-24 15:39:40","endLine":69,"groupId":"3497","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bb/c15da40104d5b9f0adfad620fb7c9e7e92c817.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(), Collections.emptyList()));\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/ShowDatabasesExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2021-01-07 22:10:53","commitOrder":5,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(false);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-01-07 22:10:53","endLine":69,"groupId":"3497","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0d/f200f3f74e900a6a42c32330010ae731242d47.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(false);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/ShowTablesExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"}],"commitId":"b72ab3242674b4b64e61a3d4e1dd5c603c5bfcaa","commitMessage":"@@@Improve the initialization of OptimizeContextFactory for issue#10678 (#10840)\n\n* fixed 10678\n\n* fixed code\n\n* fixed 10678\n\n* test\n\n* fixed 10678\n\n* update test case\n\n* update test case\n\n* update test case\n\n* fix method error\n\n* checkstyle\n\n* fix ci and checkstyle\n\n* checkstyle\n\n* fix ci error\n\n* fix load table\n\n* Update StandardMetaDataContexts.java\n\n* Update dql-integration-test-cases.xml\n\n* Update FederateTableMetadata.java\n\n* Update OptimizeContextFactory.java\n\n* Update SchemaBuilder.java\n\n* Update FederateSchemaMetadatas.java","date":"2021-06-24 15:39:40","modifiedFileCount":"20","status":"M","submitter":"totalo"},{"authorTime":"2021-01-07 22:10:53","codes":[{"authorDate":"2021-06-25 13:51:40","commitOrder":6,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            when(metaData.getRuleMetaData().getRules()).thenReturn(Collections.emptyList());\n            result.put(String.format(SCHEMA_PATTERN, String.valueOf(i)), metaData);\n        }\n        return result;\n    }\n","date":"2021-06-25 13:51:40","endLine":72,"groupId":"3497","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/15/acf22037aae8d12cb8c8f49dd7a7b4db678147.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/ShowDatabasesExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2021-01-07 22:10:53","commitOrder":6,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(false);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-01-07 22:10:53","endLine":69,"groupId":"3497","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0d/f200f3f74e900a6a42c32330010ae731242d47.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(false);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/ShowTablesExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"}],"commitId":"b14b5415746afc739af1ed31cf442462a7605621","commitMessage":"@@@custom authority?schema can be assigned to proxy users (#10998)\n\n* submit [custom authority?schema can be assigned to proxy users] to\nmaster\n\n* modiy the code style\n\n* modify test case code\n\n* delete using imports","date":"2021-06-25 13:51:40","modifiedFileCount":"2","status":"M","submitter":"sunhangda"},{"authorTime":"2021-01-07 22:10:53","codes":[{"authorDate":"2021-07-07 00:03:35","commitOrder":7,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            when(metaData.getRuleMetaData().getRules()).thenReturn(Collections.emptyList());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-07-07 00:03:35","endLine":73,"groupId":"3497","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/50/0aa82ed196d457e84beb847214f3fda663fe7c.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            when(metaData.getRuleMetaData().getRules()).thenReturn(Collections.emptyList());\n            result.put(String.format(SCHEMA_PATTERN, String.valueOf(i)), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/ShowDatabasesExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2021-01-07 22:10:53","commitOrder":7,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(false);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-01-07 22:10:53","endLine":69,"groupId":"3497","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0d/f200f3f74e900a6a42c32330010ae731242d47.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(false);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/ShowTablesExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"}],"commitId":"961d2c1ed89b3a45a2ceb65768d0ba11c9ba4ae6","commitMessage":"@@@For checkstyle (#11182)\n\n","date":"2021-07-07 00:03:35","modifiedFileCount":"8","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-05 15:36:01","codes":[{"authorDate":"2021-07-07 00:03:35","commitOrder":8,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            when(metaData.getRuleMetaData().getRules()).thenReturn(Collections.emptyList());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-07-07 00:03:35","endLine":73,"groupId":"10818","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/50/0aa82ed196d457e84beb847214f3fda663fe7c.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new LinkedHashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            when(metaData.getRuleMetaData().getRules()).thenReturn(Collections.emptyList());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/ShowDatabasesExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2021-08-05 15:36:01","commitOrder":8,"curCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10, 1);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(false);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","date":"2021-08-05 15:36:01","endLine":71,"groupId":"10818","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"getMetaDataMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d2/4605e73c8a6df01b058a31cfc3ddb96263ea97.src","preCode":"    private Map<String, ShardingSphereMetaData> getMetaDataMap() {\n        Map<String, ShardingSphereMetaData> result = new HashMap<>(10);\n        for (int i = 0; i < 10; i++) {\n            ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n            when(metaData.isComplete()).thenReturn(false);\n            when(metaData.getResource().getDatabaseType()).thenReturn(new MySQLDatabaseType());\n            result.put(String.format(SCHEMA_PATTERN, i), metaData);\n        }\n        return result;\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/mysql/executor/ShowTablesExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"d6daa411a55ec225fb40ac205046f6a47d532fb2","commitMessage":"@@@Check the initial capacity of HashMap (#11544)\n\n","date":"2021-08-05 15:36:01","modifiedFileCount":"12","status":"M","submitter":"yx9o"}]
