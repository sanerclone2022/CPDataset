[{"authorTime":"2021-07-31 19:41:42","codes":[{"authorDate":"2021-07-31 19:41:42","commitOrder":1,"curCode":"    protected void mockRules(final Collection<ShardingSphereRule> rules) {\n        Optional<SingleTableRule> singleTableRule = rules.stream().filter(each -> each instanceof SingleTableRule).map(each -> (SingleTableRule) each).findFirst();\n        if (singleTableRule.isPresent()) {\n            singleTableRule.get().addSingleTableDataNode(\"t_single\", \"db\");\n            singleTableRule.get().addSingleTableDataNode(\"t_single_extend\", \"db\");\n        }\n    }\n","date":"2021-07-31 19:41:42","endLine":75,"groupId":"7900","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mockRules","params":"(finalCollection<ShardingSphereRule>rules)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/26/aab03b4c3494e9910b025a31229b13e3eb4af7.src","preCode":"    protected void mockRules(final Collection<ShardingSphereRule> rules) {\n        Optional<SingleTableRule> singleTableRule = rules.stream().filter(each -> each instanceof SingleTableRule).map(each -> (SingleTableRule) each).findFirst();\n        if (singleTableRule.isPresent()) {\n            singleTableRule.get().addSingleTableDataNode(\"t_single\", \"db\");\n            singleTableRule.get().addSingleTableDataNode(\"t_single_extend\", \"db\");\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-rewrite-test/src/test/java/org/apache/shardingsphere/sharding/rewrite/parameterized/scenario/ShardingSQLRewriterParameterizedTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"},{"authorDate":"2021-07-31 19:41:42","commitOrder":1,"curCode":"    protected void mockRules(final Collection<ShardingSphereRule> rules) {\n        Optional<SingleTableRule> singleTableRule = rules.stream().filter(each -> each instanceof SingleTableRule).map(each -> (SingleTableRule) each).findFirst();\n        if (singleTableRule.isPresent()) {\n            singleTableRule.get().addSingleTableDataNode(\"t_account\", \"encrypt_ds\");\n            singleTableRule.get().addSingleTableDataNode(\"t_account_bak\", \"encrypt_ds\");\n        }\n    }\n","date":"2021-07-31 19:41:42","endLine":76,"groupId":"7900","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mockRules","params":"(finalCollection<ShardingSphereRule>rules)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/45/66ce2a607353a17a1f19e6f38c4db0703f4c9d.src","preCode":"    protected void mockRules(final Collection<ShardingSphereRule> rules) {\n        Optional<SingleTableRule> singleTableRule = rules.stream().filter(each -> each instanceof SingleTableRule).map(each -> (SingleTableRule) each).findFirst();\n        if (singleTableRule.isPresent()) {\n            singleTableRule.get().addSingleTableDataNode(\"t_account\", \"encrypt_ds\");\n            singleTableRule.get().addSingleTableDataNode(\"t_account_bak\", \"encrypt_ds\");\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-rewrite-test/src/test/java/org/apache/shardingsphere/sharding/rewrite/parameterized/scenario/EncryptSQLRewriterParameterizedTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"}],"commitId":"16d2b99f9370f82b3c9b8a0d5df8e47dae5b3285","commitMessage":"@@@Simplify the rewrite-test. (#11527)\n\n* Simplify the rewrite-test.\n\n* merge master.\n\n* merge master.","date":"2021-07-31 19:41:42","modifiedFileCount":"4","status":"B","submitter":"totalo"},{"authorTime":"2021-09-04 18:58:22","codes":[{"authorDate":"2021-09-04 18:58:22","commitOrder":2,"curCode":"    protected void mockRules(final Collection<ShardingSphereRule> rules) {\n        Optional<SingleTableRule> singleTableRule = rules.stream().filter(each -> each instanceof SingleTableRule).map(each -> (SingleTableRule) each).findFirst();\n        if (singleTableRule.isPresent()) {\n            singleTableRule.get().addDataNode(\"t_single\", \"db\");\n            singleTableRule.get().addDataNode(\"t_single_extend\", \"db\");\n        }\n    }\n","date":"2021-09-04 18:58:22","endLine":76,"groupId":"102198","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"mockRules","params":"(finalCollection<ShardingSphereRule>rules)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/00/ebb0c34dacafde4d9671eab543c1558e6c3e55.src","preCode":"    protected void mockRules(final Collection<ShardingSphereRule> rules) {\n        Optional<SingleTableRule> singleTableRule = rules.stream().filter(each -> each instanceof SingleTableRule).map(each -> (SingleTableRule) each).findFirst();\n        if (singleTableRule.isPresent()) {\n            singleTableRule.get().addSingleTableDataNode(\"t_single\", \"db\");\n            singleTableRule.get().addSingleTableDataNode(\"t_single_extend\", \"db\");\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-rewrite-test/src/test/java/org/apache/shardingsphere/sharding/rewrite/parameterized/scenario/ShardingSQLRewriterParameterizedTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2021-09-04 18:58:22","commitOrder":2,"curCode":"    protected void mockRules(final Collection<ShardingSphereRule> rules) {\n        Optional<SingleTableRule> singleTableRule = rules.stream().filter(each -> each instanceof SingleTableRule).map(each -> (SingleTableRule) each).findFirst();\n        if (singleTableRule.isPresent()) {\n            singleTableRule.get().addDataNode(\"t_account\", \"encrypt_ds\");\n            singleTableRule.get().addDataNode(\"t_account_bak\", \"encrypt_ds\");\n        }\n    }\n","date":"2021-09-04 18:58:22","endLine":76,"groupId":"102198","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"mockRules","params":"(finalCollection<ShardingSphereRule>rules)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e9/25ea078e51f36c38eeaa66963bb20da16e0053.src","preCode":"    protected void mockRules(final Collection<ShardingSphereRule> rules) {\n        Optional<SingleTableRule> singleTableRule = rules.stream().filter(each -> each instanceof SingleTableRule).map(each -> (SingleTableRule) each).findFirst();\n        if (singleTableRule.isPresent()) {\n            singleTableRule.get().addSingleTableDataNode(\"t_account\", \"encrypt_ds\");\n            singleTableRule.get().addSingleTableDataNode(\"t_account_bak\", \"encrypt_ds\");\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-rewrite-test/src/test/java/org/apache/shardingsphere/sharding/rewrite/parameterized/scenario/EncryptSQLRewriterParameterizedTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"a8c655eaf51f230c724274dc0c1d6ba775c73d40","commitMessage":"@@@Add shardingsphere-single-table into kernel module (#12210)\n\n* Rename SchemaRulesBuilderMaterials\n\n* Add shardingsphere-single-table\n\n* Add shardingsphere-single-table\n\n* Revise javadoc\n\n* Move MetadataRefresher.findShardingSphereRulesByClass to ShardingSphereSchema\n\n* Add MutableDataNodeRule\n\n* Add SingleTableSchemaBuilderTest\n\n* Move single table rule\n\n* Move single table configuration\n\n* Revise java doc","date":"2021-09-04 18:58:22","modifiedFileCount":"54","status":"M","submitter":"Liang Zhang"}]
