[{"authorTime":"2021-05-11 18:12:40","codes":[{"authorDate":"2021-05-11 18:12:40","commitOrder":1,"curCode":"    public void assertExecuteEmptyBindPacket() throws SQLException {\n        PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(bindPacket, backendConnection);\n        Collection<DatabasePacket<?>> actual = executor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLBindCompletePacket.class)));\n        assertNull(executor.getResponseType());\n        assertFalse(executor.next());\n    }\n","date":"2021-05-11 18:12:40","endLine":78,"groupId":"4939","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteEmptyBindPacket","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b8/af72778c464893007b43d931a354617bce7dec.src","preCode":"    public void assertExecuteEmptyBindPacket() throws SQLException {\n        PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(bindPacket, backendConnection);\n        Collection<DatabasePacket<?>> actual = executor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLBindCompletePacket.class)));\n        assertNull(executor.getResponseType());\n        assertFalse(executor.next());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/query/binary/bind/PostgreSQLComBindExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"},{"authorDate":"2021-05-11 18:12:40","commitOrder":1,"curCode":"    public void assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult() throws SQLException {\n        QueryResponseHeader queryResponseHeader = mock(QueryResponseHeader.class);\n        when(databaseCommunicationEngine.execute()).thenReturn(queryResponseHeader);\n        PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(bindPacket, backendConnection);\n        setMockFieldIntoExecutor(executor);\n        Collection<DatabasePacket<?>> actual = executor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLBindCompletePacket.class)));\n        assertNull(executor.getResponseType());\n        verify(queryResponseHeader).getQueryHeaders();\n    }\n","date":"2021-05-11 18:12:40","endLine":91,"groupId":"4939","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b8/af72778c464893007b43d931a354617bce7dec.src","preCode":"    public void assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult() throws SQLException {\n        QueryResponseHeader queryResponseHeader = mock(QueryResponseHeader.class);\n        when(databaseCommunicationEngine.execute()).thenReturn(queryResponseHeader);\n        PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(bindPacket, backendConnection);\n        setMockFieldIntoExecutor(executor);\n        Collection<DatabasePacket<?>> actual = executor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLBindCompletePacket.class)));\n        assertNull(executor.getResponseType());\n        verify(queryResponseHeader).getQueryHeaders();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/query/binary/bind/PostgreSQLComBindExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"}],"commitId":"b87b4e43482e505ee56fa0ce45c5cb5e4709e26b","commitMessage":"@@@Add tests for PostgreSQL Proxy Query/Bind CommandExecutor (#10284)\n\n* Add test for PostgreSQLComBindExecutor\n\n* Add test for PostgreSQLComQueryExecutor","date":"2021-05-11 18:12:40","modifiedFileCount":"0","status":"B","submitter":"???"},{"authorTime":"2021-06-03 17:16:24","codes":[{"authorDate":"2021-05-11 18:12:40","commitOrder":2,"curCode":"    public void assertExecuteEmptyBindPacket() throws SQLException {\n        PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(bindPacket, backendConnection);\n        Collection<DatabasePacket<?>> actual = executor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLBindCompletePacket.class)));\n        assertNull(executor.getResponseType());\n        assertFalse(executor.next());\n    }\n","date":"2021-05-11 18:12:40","endLine":78,"groupId":"4939","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteEmptyBindPacket","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b8/af72778c464893007b43d931a354617bce7dec.src","preCode":"    public void assertExecuteEmptyBindPacket() throws SQLException {\n        PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(bindPacket, backendConnection);\n        Collection<DatabasePacket<?>> actual = executor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLBindCompletePacket.class)));\n        assertNull(executor.getResponseType());\n        assertFalse(executor.next());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/query/binary/bind/PostgreSQLComBindExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2021-06-03 17:16:24","commitOrder":2,"curCode":"    public void assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult() throws SQLException {\n        QueryResponseHeader queryResponseHeader = mock(QueryResponseHeader.class);\n        when(databaseCommunicationEngine.execute()).thenReturn(queryResponseHeader);\n        PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(bindPacket, backendConnection);\n        setMockFieldIntoExecutor(executor);\n        Collection<DatabasePacket<?>> actual = executor.execute();\n        assertThat(actual.size(), is(2));\n        Iterator<DatabasePacket<?>> actualPackets = actual.iterator();\n        assertThat(actualPackets.next(), is(instanceOf(PostgreSQLBindCompletePacket.class)));\n        assertThat(actualPackets.next(), is(instanceOf(PostgreSQLRowDescriptionPacket.class)));\n        assertThat(executor.getResponseType(), is(ResponseType.QUERY));\n        verify(queryResponseHeader).getQueryHeaders();\n    }\n","date":"2021-06-03 17:16:24","endLine":94,"groupId":"4939","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fa/7ac01b13b076057b773045670dd01976716d5e.src","preCode":"    public void assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult() throws SQLException {\n        QueryResponseHeader queryResponseHeader = mock(QueryResponseHeader.class);\n        when(databaseCommunicationEngine.execute()).thenReturn(queryResponseHeader);\n        PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(bindPacket, backendConnection);\n        setMockFieldIntoExecutor(executor);\n        Collection<DatabasePacket<?>> actual = executor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLBindCompletePacket.class)));\n        assertNull(executor.getResponseType());\n        verify(queryResponseHeader).getQueryHeaders();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/query/binary/bind/PostgreSQLComBindExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"dc033b4aa08c49bf9702b4efa57e1ec4f23d0b3f","commitMessage":"@@@Fix Row Description may be missing for PostgreSQL (#10636)\n\n* Fix Row Description may be missing for PostgreSQL\n\n* Fix testcase","date":"2021-06-03 17:16:24","modifiedFileCount":"2","status":"M","submitter":"???"},{"authorTime":"2021-06-09 18:43:06","codes":[{"authorDate":"2021-06-09 18:43:06","commitOrder":3,"curCode":"    public void assertExecuteEmptyBindPacket() throws SQLException {\n        PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(connectionContext, bindPacket, backendConnection);\n        Collection<DatabasePacket<?>> actual = executor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLBindCompletePacket.class)));\n        assertThat(executor.getResponseType(), is(ResponseType.UPDATE));\n        assertFalse(executor.next());\n    }\n","date":"2021-06-09 18:43:06","endLine":91,"groupId":"4939","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteEmptyBindPacket","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bc/e3b95a6cc587f80ba1205520b88d3fa54727c0.src","preCode":"    public void assertExecuteEmptyBindPacket() throws SQLException {\n        PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(bindPacket, backendConnection);\n        Collection<DatabasePacket<?>> actual = executor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLBindCompletePacket.class)));\n        assertNull(executor.getResponseType());\n        assertFalse(executor.next());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/query/binary/bind/PostgreSQLComBindExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2021-06-09 18:43:06","commitOrder":3,"curCode":"    public void assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult() throws SQLException {\n        when(connectionContext.getDescribeExecutor()).thenReturn(Optional.of(describeExecutor));\n        QueryResponseHeader queryResponseHeader = mock(QueryResponseHeader.class);\n        when(databaseCommunicationEngine.execute()).thenReturn(queryResponseHeader);\n        PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(connectionContext, bindPacket, backendConnection);\n        setMockFieldIntoExecutor(executor);\n        Collection<DatabasePacket<?>> actual = executor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLBindCompletePacket.class)));\n        assertThat(executor.getResponseType(), is(ResponseType.QUERY));\n        verify(queryResponseHeader).getQueryHeaders();\n    }\n","date":"2021-06-09 18:43:06","endLine":105,"groupId":"4939","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bc/e3b95a6cc587f80ba1205520b88d3fa54727c0.src","preCode":"    public void assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult() throws SQLException {\n        QueryResponseHeader queryResponseHeader = mock(QueryResponseHeader.class);\n        when(databaseCommunicationEngine.execute()).thenReturn(queryResponseHeader);\n        PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(bindPacket, backendConnection);\n        setMockFieldIntoExecutor(executor);\n        Collection<DatabasePacket<?>> actual = executor.execute();\n        assertThat(actual.size(), is(2));\n        Iterator<DatabasePacket<?>> actualPackets = actual.iterator();\n        assertThat(actualPackets.next(), is(instanceOf(PostgreSQLBindCompletePacket.class)));\n        assertThat(actualPackets.next(), is(instanceOf(PostgreSQLRowDescriptionPacket.class)));\n        assertThat(executor.getResponseType(), is(ResponseType.QUERY));\n        verify(queryResponseHeader).getQueryHeaders();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/query/binary/bind/PostgreSQLComBindExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"be59cca18523e6b2955c665f81a7ce64e834ef08","commitMessage":"@@@Refactor PostgreSQL Proxy (#10736)\n\n* Refactor PostgreSQL Proxy\n\n* Fix empty SQL cause NPE\n\n* Fix empty SQL parsing error\n\n* Fix checkstyle\n\n* Fix PostgreSQLComDescribeExecutorTest\n\n* Refactor PostgreSQL Proxy protocol\n\n* Fix no data packet may be missing\n\n* Fix get Optional class mistake\n\n* Fix SQL command not found\n\n* Fix PostgreSQL frontend test cases\n\n* Add PostgreSQLNoDataPacketTest\n\n* Replace ThreadLocal with ConnectionContextRegistry\n\n* Fix checkstyle\n\n* Fix test case\n\n* Polish test case","date":"2021-06-09 18:43:06","modifiedFileCount":"25","status":"M","submitter":"???"},{"authorTime":"2021-06-23 20:27:01","codes":[{"authorDate":"2021-06-23 20:27:01","commitOrder":4,"curCode":"    public void assertExecuteEmptyBindPacket() throws SQLException {\n        PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(connectionContext, bindPacket, backendConnection);\n        Collection<DatabasePacket<?>> actual = executor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLBindCompletePacket.class)));\n        verify(portal).execute();\n    }\n","date":"2021-06-23 20:27:01","endLine":78,"groupId":"10863","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteEmptyBindPacket","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/74/0f1b702582d33a51f60d17d4e411610ca8fd58.src","preCode":"    public void assertExecuteEmptyBindPacket() throws SQLException {\n        PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(connectionContext, bindPacket, backendConnection);\n        Collection<DatabasePacket<?>> actual = executor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLBindCompletePacket.class)));\n        assertThat(executor.getResponseType(), is(ResponseType.UPDATE));\n        assertFalse(executor.next());\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/query/binary/bind/PostgreSQLComBindExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2021-06-23 20:27:01","commitOrder":4,"curCode":"    public void assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult() throws SQLException {\n        PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(connectionContext, bindPacket, backendConnection);\n        Collection<DatabasePacket<?>> actual = executor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLBindCompletePacket.class)));\n        verify(portal).execute();\n    }\n","date":"2021-06-23 20:27:01","endLine":87,"groupId":"10863","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/74/0f1b702582d33a51f60d17d4e411610ca8fd58.src","preCode":"    public void assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult() throws SQLException {\n        when(connectionContext.getDescribeExecutor()).thenReturn(Optional.of(describeExecutor));\n        QueryResponseHeader queryResponseHeader = mock(QueryResponseHeader.class);\n        when(databaseCommunicationEngine.execute()).thenReturn(queryResponseHeader);\n        PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(connectionContext, bindPacket, backendConnection);\n        setMockFieldIntoExecutor(executor);\n        Collection<DatabasePacket<?>> actual = executor.execute();\n        assertThat(actual.size(), is(1));\n        assertThat(actual.iterator().next(), is(instanceOf(PostgreSQLBindCompletePacket.class)));\n        assertThat(executor.getResponseType(), is(ResponseType.QUERY));\n        verify(queryResponseHeader).getQueryHeaders();\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/command/query/binary/bind/PostgreSQLComBindExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"9094b20a512891fea7cc0f616231d94f3325431b","commitMessage":"@@@PostgreSQL Proxy support Portal (#10914)\n\n* Support portal for PostgreSQL Proxy\n\n* Support Close Portal for PostgreSQL\n\n* Enhance PostgreSQLComExecuteExecutor\n\n* Complete Portal implementation\n\n* Fix checkstyle\n\n* Fix test cases","date":"2021-06-23 20:27:01","modifiedFileCount":"14","status":"M","submitter":"???"}]
