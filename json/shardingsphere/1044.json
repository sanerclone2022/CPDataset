[{"authorTime":"2021-01-15 10:40:24","codes":[{"authorDate":"2021-01-15 10:40:24","commitOrder":1,"curCode":"    public void prepare() {\n        Object parserEngine = mock(ShardingSphereSQLParserEngine.class, invocation -> {\n            switch (invocation.getMethod().getName()) {\n                case \"getAttachment\":\n                    return attachment;\n                case \"setAttachment\":\n                    attachment = invocation.getArguments()[0];\n                    return null;\n                default:\n                    return invocation.callRealMethod();\n            }\n        });\n        targetObject = (AdviceTargetObject) parserEngine;\n    }\n","date":"2021-01-15 10:40:24","endLine":51,"groupId":"2805","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b4/2c93cb094340113c7dd943b78ac1dd01b8dda0.src","preCode":"    public void prepare() {\n        Object parserEngine = mock(ShardingSphereSQLParserEngine.class, invocation -> {\n            switch (invocation.getMethod().getName()) {\n                case \"getAttachment\":\n                    return attachment;\n                case \"setAttachment\":\n                    attachment = invocation.getArguments()[0];\n                    return null;\n                default:\n                    return invocation.callRealMethod();\n            }\n        });\n        targetObject = (AdviceTargetObject) parserEngine;\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/advice/AbstractSQLParserEngineAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"B"},{"authorDate":"2021-01-15 10:40:24","commitOrder":1,"curCode":"    public void prepare() {\n        extraMap = Maps.newHashMap();\n        Statement statement = mock(Statement.class);\n        Connection connection = mock(Connection.class);\n        DatabaseMetaData metaData = mock(DatabaseMetaData.class);\n        when(metaData.getURL()).thenReturn(\"mock_url\");\n        when(connection.getMetaData()).thenReturn(metaData);\n        when(statement.getConnection()).thenReturn(connection);\n        executionUnit = new JDBCExecutionUnit(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())), null, statement);\n        JDBCExecutorCallback mock = mock(JDBCExecutorCallback.class, invocation -> {\n            switch (invocation.getMethod().getName()) {\n                case \"getAttachment\":\n                    return attachment;\n                case \"setAttachment\":\n                    attachment = invocation.getArguments()[0];\n                    return null;\n                default:\n                    return invocation.callRealMethod();\n            }\n        });\n        Map<String, DataSourceMetaData> map = (Map<String, DataSourceMetaData>) new FieldReader(mock, JDBCExecutorCallback.class.getDeclaredField(\"CACHED_DATASOURCE_METADATA\")).read();\n        map.put(\"mock_url\", new MockDataSourceMetaData());\n        targetObject = (AdviceTargetObject) mock;\n    }\n","date":"2021-01-15 10:40:24","endLine":83,"groupId":"8457","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/59/5db4ba9eac9ffcadebf1062e9ed3c20b7f86b8.src","preCode":"    public void prepare() {\n        extraMap = Maps.newHashMap();\n        Statement statement = mock(Statement.class);\n        Connection connection = mock(Connection.class);\n        DatabaseMetaData metaData = mock(DatabaseMetaData.class);\n        when(metaData.getURL()).thenReturn(\"mock_url\");\n        when(connection.getMetaData()).thenReturn(metaData);\n        when(statement.getConnection()).thenReturn(connection);\n        executionUnit = new JDBCExecutionUnit(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())), null, statement);\n        JDBCExecutorCallback mock = mock(JDBCExecutorCallback.class, invocation -> {\n            switch (invocation.getMethod().getName()) {\n                case \"getAttachment\":\n                    return attachment;\n                case \"setAttachment\":\n                    attachment = invocation.getArguments()[0];\n                    return null;\n                default:\n                    return invocation.callRealMethod();\n            }\n        });\n        Map<String, DataSourceMetaData> map = (Map<String, DataSourceMetaData>) new FieldReader(mock, JDBCExecutorCallback.class.getDeclaredField(\"CACHED_DATASOURCE_METADATA\")).read();\n        map.put(\"mock_url\", new MockDataSourceMetaData());\n        targetObject = (AdviceTargetObject) mock;\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/advice/AbstractJDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"}],"commitId":"3d21ffcaa4b7aeb854496c403f46c0aa4ee6d611","commitMessage":"@@@rrefactor agent tracing plugin test (#9039)\n\n* refactor agent tracing plugin test\n\n* Update CommandExecutorTaskAdviceTest.java\n\nrename method\n\n* add license header","date":"2021-01-15 10:40:24","modifiedFileCount":"15","status":"B","submitter":"Daming"},{"authorTime":"2021-07-27 07:22:30","codes":[{"authorDate":"2021-01-15 10:40:24","commitOrder":2,"curCode":"    public void prepare() {\n        Object parserEngine = mock(ShardingSphereSQLParserEngine.class, invocation -> {\n            switch (invocation.getMethod().getName()) {\n                case \"getAttachment\":\n                    return attachment;\n                case \"setAttachment\":\n                    attachment = invocation.getArguments()[0];\n                    return null;\n                default:\n                    return invocation.callRealMethod();\n            }\n        });\n        targetObject = (AdviceTargetObject) parserEngine;\n    }\n","date":"2021-01-15 10:40:24","endLine":51,"groupId":"2805","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b4/2c93cb094340113c7dd943b78ac1dd01b8dda0.src","preCode":"    public void prepare() {\n        Object parserEngine = mock(ShardingSphereSQLParserEngine.class, invocation -> {\n            switch (invocation.getMethod().getName()) {\n                case \"getAttachment\":\n                    return attachment;\n                case \"setAttachment\":\n                    attachment = invocation.getArguments()[0];\n                    return null;\n                default:\n                    return invocation.callRealMethod();\n            }\n        });\n        targetObject = (AdviceTargetObject) parserEngine;\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/advice/AbstractSQLParserEngineAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"},{"authorDate":"2021-07-27 07:22:30","commitOrder":2,"curCode":"    public void prepare() {\n        extraMap = new HashMap<>();\n        Statement statement = mock(Statement.class);\n        Connection connection = mock(Connection.class);\n        DatabaseMetaData metaData = mock(DatabaseMetaData.class);\n        when(metaData.getURL()).thenReturn(\"mock_url\");\n        when(connection.getMetaData()).thenReturn(metaData);\n        when(statement.getConnection()).thenReturn(connection);\n        executionUnit = new JDBCExecutionUnit(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())), null, statement);\n        JDBCExecutorCallback mock = mock(JDBCExecutorCallback.class, invocation -> {\n            switch (invocation.getMethod().getName()) {\n                case \"getAttachment\":\n                    return attachment;\n                case \"setAttachment\":\n                    attachment = invocation.getArguments()[0];\n                    return null;\n                default:\n                    return invocation.callRealMethod();\n            }\n        });\n        Map<String, DataSourceMetaData> map = (Map<String, DataSourceMetaData>) new FieldReader(mock, JDBCExecutorCallback.class.getDeclaredField(\"CACHED_DATASOURCE_METADATA\")).read();\n        map.put(\"mock_url\", new MockDataSourceMetaData());\n        targetObject = (AdviceTargetObject) mock;\n    }\n","date":"2021-07-27 07:22:30","endLine":83,"groupId":"8457","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e9/000c9d6d0c4cb8ecbaaccb4c8bdf0f35a7cd30.src","preCode":"    public void prepare() {\n        extraMap = Maps.newHashMap();\n        Statement statement = mock(Statement.class);\n        Connection connection = mock(Connection.class);\n        DatabaseMetaData metaData = mock(DatabaseMetaData.class);\n        when(metaData.getURL()).thenReturn(\"mock_url\");\n        when(connection.getMetaData()).thenReturn(metaData);\n        when(statement.getConnection()).thenReturn(connection);\n        executionUnit = new JDBCExecutionUnit(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())), null, statement);\n        JDBCExecutorCallback mock = mock(JDBCExecutorCallback.class, invocation -> {\n            switch (invocation.getMethod().getName()) {\n                case \"getAttachment\":\n                    return attachment;\n                case \"setAttachment\":\n                    attachment = invocation.getArguments()[0];\n                    return null;\n                default:\n                    return invocation.callRealMethod();\n            }\n        });\n        Map<String, DataSourceMetaData> map = (Map<String, DataSourceMetaData>) new FieldReader(mock, JDBCExecutorCallback.class.getDeclaredField(\"CACHED_DATASOURCE_METADATA\")).read();\n        map.put(\"mock_url\", new MockDataSourceMetaData());\n        targetObject = (AdviceTargetObject) mock;\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/advice/AbstractJDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"6d7e3fe33533f8d8dd098e81d667ce57aabd625a","commitMessage":"@@@Use raw new HashMap to instead of guava (#11517)\n\n* Use raw new HashMap to instead of guava\n\n* Use raw new HashMap to instead of guava","date":"2021-07-27 07:22:30","modifiedFileCount":"69","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-27 07:22:30","codes":[{"authorDate":"2021-07-27 12:21:41","commitOrder":3,"curCode":"    public final void prepare() {\n        Object parserEngine = mock(ShardingSphereSQLParserEngine.class, invocation -> {\n            switch (invocation.getMethod().getName()) {\n                case \"getAttachment\":\n                    return attachment;\n                case \"setAttachment\":\n                    attachment = invocation.getArguments()[0];\n                    return null;\n                default:\n                    return invocation.callRealMethod();\n            }\n        });\n        targetObject = (AdviceTargetObject) parserEngine;\n    }\n","date":"2021-07-27 12:21:41","endLine":51,"groupId":"2805","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c0/a1302ceda33af4e3160a967b4ae2d3dd4a75db.src","preCode":"    public void prepare() {\n        Object parserEngine = mock(ShardingSphereSQLParserEngine.class, invocation -> {\n            switch (invocation.getMethod().getName()) {\n                case \"getAttachment\":\n                    return attachment;\n                case \"setAttachment\":\n                    attachment = invocation.getArguments()[0];\n                    return null;\n                default:\n                    return invocation.callRealMethod();\n            }\n        });\n        targetObject = (AdviceTargetObject) parserEngine;\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/advice/AbstractSQLParserEngineAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2021-07-27 07:22:30","commitOrder":3,"curCode":"    public void prepare() {\n        extraMap = new HashMap<>();\n        Statement statement = mock(Statement.class);\n        Connection connection = mock(Connection.class);\n        DatabaseMetaData metaData = mock(DatabaseMetaData.class);\n        when(metaData.getURL()).thenReturn(\"mock_url\");\n        when(connection.getMetaData()).thenReturn(metaData);\n        when(statement.getConnection()).thenReturn(connection);\n        executionUnit = new JDBCExecutionUnit(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())), null, statement);\n        JDBCExecutorCallback mock = mock(JDBCExecutorCallback.class, invocation -> {\n            switch (invocation.getMethod().getName()) {\n                case \"getAttachment\":\n                    return attachment;\n                case \"setAttachment\":\n                    attachment = invocation.getArguments()[0];\n                    return null;\n                default:\n                    return invocation.callRealMethod();\n            }\n        });\n        Map<String, DataSourceMetaData> map = (Map<String, DataSourceMetaData>) new FieldReader(mock, JDBCExecutorCallback.class.getDeclaredField(\"CACHED_DATASOURCE_METADATA\")).read();\n        map.put(\"mock_url\", new MockDataSourceMetaData());\n        targetObject = (AdviceTargetObject) mock;\n    }\n","date":"2021-07-27 07:22:30","endLine":83,"groupId":"8457","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e9/000c9d6d0c4cb8ecbaaccb4c8bdf0f35a7cd30.src","preCode":"    public void prepare() {\n        extraMap = new HashMap<>();\n        Statement statement = mock(Statement.class);\n        Connection connection = mock(Connection.class);\n        DatabaseMetaData metaData = mock(DatabaseMetaData.class);\n        when(metaData.getURL()).thenReturn(\"mock_url\");\n        when(connection.getMetaData()).thenReturn(metaData);\n        when(statement.getConnection()).thenReturn(connection);\n        executionUnit = new JDBCExecutionUnit(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())), null, statement);\n        JDBCExecutorCallback mock = mock(JDBCExecutorCallback.class, invocation -> {\n            switch (invocation.getMethod().getName()) {\n                case \"getAttachment\":\n                    return attachment;\n                case \"setAttachment\":\n                    attachment = invocation.getArguments()[0];\n                    return null;\n                default:\n                    return invocation.callRealMethod();\n            }\n        });\n        Map<String, DataSourceMetaData> map = (Map<String, DataSourceMetaData>) new FieldReader(mock, JDBCExecutorCallback.class.getDeclaredField(\"CACHED_DATASOURCE_METADATA\")).read();\n        map.put(\"mock_url\", new MockDataSourceMetaData());\n        targetObject = (AdviceTargetObject) mock;\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/advice/AbstractJDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"}],"commitId":"dcf6c2ec12c0c43ba1075012d2a4ea3cb1f05b28","commitMessage":"@@@Remove @SuppressWarnings(\"all\") (#11525)\n\n* Remove @SuppressWarnings(\"all\")\n\n* Remove @SuppressWarnings(\"all\")","date":"2021-07-27 12:21:41","modifiedFileCount":"5","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-29 01:03:53","codes":[{"authorDate":"2021-07-27 12:21:41","commitOrder":4,"curCode":"    public final void prepare() {\n        Object parserEngine = mock(ShardingSphereSQLParserEngine.class, invocation -> {\n            switch (invocation.getMethod().getName()) {\n                case \"getAttachment\":\n                    return attachment;\n                case \"setAttachment\":\n                    attachment = invocation.getArguments()[0];\n                    return null;\n                default:\n                    return invocation.callRealMethod();\n            }\n        });\n        targetObject = (AdviceTargetObject) parserEngine;\n    }\n","date":"2021-07-27 12:21:41","endLine":51,"groupId":"1044","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c0/a1302ceda33af4e3160a967b4ae2d3dd4a75db.src","preCode":"    public final void prepare() {\n        Object parserEngine = mock(ShardingSphereSQLParserEngine.class, invocation -> {\n            switch (invocation.getMethod().getName()) {\n                case \"getAttachment\":\n                    return attachment;\n                case \"setAttachment\":\n                    attachment = invocation.getArguments()[0];\n                    return null;\n                default:\n                    return invocation.callRealMethod();\n            }\n        });\n        targetObject = (AdviceTargetObject) parserEngine;\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/advice/AbstractSQLParserEngineAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"},{"authorDate":"2021-07-29 01:03:53","commitOrder":4,"curCode":"    public void prepare() {\n        extraMap = new HashMap<>();\n        Statement statement = mock(Statement.class);\n        Connection connection = mock(Connection.class);\n        DatabaseMetaData metaData = mock(DatabaseMetaData.class);\n        when(metaData.getURL()).thenReturn(\"mock_url\");\n        when(connection.getMetaData()).thenReturn(metaData);\n        when(statement.getConnection()).thenReturn(connection);\n        executionUnit = new JDBCExecutionUnit(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Collections.emptyList())), null, statement);\n        JDBCExecutorCallback mock = mock(JDBCExecutorCallback.class, invocation -> {\n            switch (invocation.getMethod().getName()) {\n                case \"getAttachment\":\n                    return attachment;\n                case \"setAttachment\":\n                    attachment = invocation.getArguments()[0];\n                    return null;\n                default:\n                    return invocation.callRealMethod();\n            }\n        });\n        Map<String, DataSourceMetaData> map = (Map<String, DataSourceMetaData>) new FieldReader(mock, JDBCExecutorCallback.class.getDeclaredField(\"CACHED_DATASOURCE_METADATA\")).read();\n        map.put(\"mock_url\", new MockDataSourceMetaData());\n        targetObject = (AdviceTargetObject) mock;\n    }\n","date":"2021-07-29 01:03:53","endLine":83,"groupId":"1044","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bf/6eb134da587f6c8131aa67f4a18e1947beedb9.src","preCode":"    public void prepare() {\n        extraMap = new HashMap<>();\n        Statement statement = mock(Statement.class);\n        Connection connection = mock(Connection.class);\n        DatabaseMetaData metaData = mock(DatabaseMetaData.class);\n        when(metaData.getURL()).thenReturn(\"mock_url\");\n        when(connection.getMetaData()).thenReturn(metaData);\n        when(statement.getConnection()).thenReturn(connection);\n        executionUnit = new JDBCExecutionUnit(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())), null, statement);\n        JDBCExecutorCallback mock = mock(JDBCExecutorCallback.class, invocation -> {\n            switch (invocation.getMethod().getName()) {\n                case \"getAttachment\":\n                    return attachment;\n                case \"setAttachment\":\n                    attachment = invocation.getArguments()[0];\n                    return null;\n                default:\n                    return invocation.callRealMethod();\n            }\n        });\n        Map<String, DataSourceMetaData> map = (Map<String, DataSourceMetaData>) new FieldReader(mock, JDBCExecutorCallback.class.getDeclaredField(\"CACHED_DATASOURCE_METADATA\")).read();\n        map.put(\"mock_url\", new MockDataSourceMetaData());\n        targetObject = (AdviceTargetObject) mock;\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/advice/AbstractJDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"6d2d2ba7b05c29bce74525f0437e04b22a556f66","commitMessage":"@@@Use java raw new List/Set/Map to instead of guava (#11561)\n\n* Use java raw new Map to instead of guava\n\n* Use java raw new List to instead of guava\n\n* Use java raw new Set to instead of guava","date":"2021-07-29 01:03:53","modifiedFileCount":"78","status":"M","submitter":"Liang Zhang"}]
