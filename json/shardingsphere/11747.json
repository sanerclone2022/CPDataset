[{"authorTime":"2021-06-04 22:49:49","codes":[{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public TableRule(final ShardingTableRuleConfiguration tableRuleConfig, final Collection<String> dataSourceNames, final String defaultGenerateKeyColumn) {\n        logicTable = tableRuleConfig.getLogicTable().toLowerCase();\n        List<String> dataNodes = new InlineExpressionParser(tableRuleConfig.getActualDataNodes()).splitAndEvaluate();\n        dataNodeIndexMap = new HashMap<>(dataNodes.size(), 1);\n        actualDataNodes = isEmptyDataNodes(dataNodes) ? generateDataNodes(tableRuleConfig.getLogicTable(), dataSourceNames) : generateDataNodes(dataNodes, dataSourceNames);\n        actualTables = getActualTables();\n        databaseShardingStrategyConfig = tableRuleConfig.getDatabaseShardingStrategy();\n        tableShardingStrategyConfig = tableRuleConfig.getTableShardingStrategy();\n        KeyGenerateStrategyConfiguration keyGeneratorConfig = tableRuleConfig.getKeyGenerateStrategy();\n        generateKeyColumn = null != keyGeneratorConfig && !Strings.isNullOrEmpty(keyGeneratorConfig.getColumn()) ? keyGeneratorConfig.getColumn() : defaultGenerateKeyColumn;\n        keyGeneratorName = null == keyGeneratorConfig ? null : keyGeneratorConfig.getKeyGeneratorName();\n        checkRule(dataNodes);\n    }\n","date":"2021-06-04 22:49:49","endLine":101,"groupId":"12488","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"TableRule","params":"(finalShardingTableRuleConfigurationtableRuleConfig@finalCollection<String>dataSourceNames@finalStringdefaultGenerateKeyColumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b1/494736a5df698971e6f939851f2ce131517d48.src","preCode":"    public TableRule(final ShardingTableRuleConfiguration tableRuleConfig, final Collection<String> dataSourceNames, final String defaultGenerateKeyColumn) {\n        logicTable = tableRuleConfig.getLogicTable().toLowerCase();\n        List<String> dataNodes = new InlineExpressionParser(tableRuleConfig.getActualDataNodes()).splitAndEvaluate();\n        dataNodeIndexMap = new HashMap<>(dataNodes.size(), 1);\n        actualDataNodes = isEmptyDataNodes(dataNodes) ? generateDataNodes(tableRuleConfig.getLogicTable(), dataSourceNames) : generateDataNodes(dataNodes, dataSourceNames);\n        actualTables = getActualTables();\n        databaseShardingStrategyConfig = tableRuleConfig.getDatabaseShardingStrategy();\n        tableShardingStrategyConfig = tableRuleConfig.getTableShardingStrategy();\n        KeyGenerateStrategyConfiguration keyGeneratorConfig = tableRuleConfig.getKeyGenerateStrategy();\n        generateKeyColumn = null != keyGeneratorConfig && !Strings.isNullOrEmpty(keyGeneratorConfig.getColumn()) ? keyGeneratorConfig.getColumn() : defaultGenerateKeyColumn;\n        keyGeneratorName = null == keyGeneratorConfig ? null : keyGeneratorConfig.getKeyGeneratorName();\n        checkRule(dataNodes);\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/rule/TableRule.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"},{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public TableRule(final ShardingAutoTableRuleConfiguration tableRuleConfig, \n                     final Collection<String> dataSourceNames, final ShardingAutoTableAlgorithm shardingAutoTableAlgorithm, final String defaultGenerateKeyColumn) {\n        logicTable = tableRuleConfig.getLogicTable().toLowerCase();\n        databaseShardingStrategyConfig = new NoneShardingStrategyConfiguration();\n        tableShardingStrategyConfig = tableRuleConfig.getShardingStrategy();\n        List<String> dataNodes = getDataNodes(tableRuleConfig, shardingAutoTableAlgorithm, dataSourceNames);\n        dataNodeIndexMap = new HashMap<>(dataNodes.size(), 1);\n        actualDataNodes = isEmptyDataNodes(dataNodes) ? generateDataNodes(tableRuleConfig.getLogicTable(), dataSourceNames) : generateDataNodes(dataNodes, dataSourceNames);\n        actualTables = getActualTables();\n        KeyGenerateStrategyConfiguration keyGeneratorConfig = tableRuleConfig.getKeyGenerateStrategy();\n        generateKeyColumn = null != keyGeneratorConfig && !Strings.isNullOrEmpty(keyGeneratorConfig.getColumn()) ? keyGeneratorConfig.getColumn() : defaultGenerateKeyColumn;\n        keyGeneratorName = null == keyGeneratorConfig ? null : keyGeneratorConfig.getKeyGeneratorName();\n        checkRule(dataNodes);\n    }\n","date":"2021-06-04 22:49:49","endLine":116,"groupId":"6179","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"TableRule","params":"(finalShardingAutoTableRuleConfigurationtableRuleConfig@finalCollection<String>dataSourceNames@finalShardingAutoTableAlgorithmshardingAutoTableAlgorithm@finalStringdefaultGenerateKeyColumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b1/494736a5df698971e6f939851f2ce131517d48.src","preCode":"    public TableRule(final ShardingAutoTableRuleConfiguration tableRuleConfig, \n                     final Collection<String> dataSourceNames, final ShardingAutoTableAlgorithm shardingAutoTableAlgorithm, final String defaultGenerateKeyColumn) {\n        logicTable = tableRuleConfig.getLogicTable().toLowerCase();\n        databaseShardingStrategyConfig = new NoneShardingStrategyConfiguration();\n        tableShardingStrategyConfig = tableRuleConfig.getShardingStrategy();\n        List<String> dataNodes = getDataNodes(tableRuleConfig, shardingAutoTableAlgorithm, dataSourceNames);\n        dataNodeIndexMap = new HashMap<>(dataNodes.size(), 1);\n        actualDataNodes = isEmptyDataNodes(dataNodes) ? generateDataNodes(tableRuleConfig.getLogicTable(), dataSourceNames) : generateDataNodes(dataNodes, dataSourceNames);\n        actualTables = getActualTables();\n        KeyGenerateStrategyConfiguration keyGeneratorConfig = tableRuleConfig.getKeyGenerateStrategy();\n        generateKeyColumn = null != keyGeneratorConfig && !Strings.isNullOrEmpty(keyGeneratorConfig.getColumn()) ? keyGeneratorConfig.getColumn() : defaultGenerateKeyColumn;\n        keyGeneratorName = null == keyGeneratorConfig ? null : keyGeneratorConfig.getKeyGeneratorName();\n        checkRule(dataNodes);\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/rule/TableRule.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"B"}],"commitId":"6b157b44d0336e4d9c61f940b0ec19c26758af84","commitMessage":"@@@Merge sharding feature to core module (#10662)\n\n* Merge dependencies\n\n* Merge sharding feature to api module\n\n* Merge sharding feature to core module","date":"2021-06-04 22:49:49","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-09-02 17:34:21","codes":[{"authorDate":"2021-09-02 17:34:21","commitOrder":2,"curCode":"    public TableRule(final ShardingTableRuleConfiguration tableRuleConfig, final Collection<String> dataSourceNames, final String defaultGenerateKeyColumn) {\n        logicTable = tableRuleConfig.getLogicTable();\n        List<String> dataNodes = new InlineExpressionParser(tableRuleConfig.getActualDataNodes()).splitAndEvaluate();\n        dataNodeIndexMap = new HashMap<>(dataNodes.size(), 1);\n        actualDataNodes = isEmptyDataNodes(dataNodes) ? generateDataNodes(tableRuleConfig.getLogicTable(), dataSourceNames) : generateDataNodes(dataNodes, dataSourceNames);\n        actualTables = getActualTables();\n        databaseShardingStrategyConfig = tableRuleConfig.getDatabaseShardingStrategy();\n        tableShardingStrategyConfig = tableRuleConfig.getTableShardingStrategy();\n        KeyGenerateStrategyConfiguration keyGeneratorConfig = tableRuleConfig.getKeyGenerateStrategy();\n        generateKeyColumn = null != keyGeneratorConfig && !Strings.isNullOrEmpty(keyGeneratorConfig.getColumn()) ? keyGeneratorConfig.getColumn() : defaultGenerateKeyColumn;\n        keyGeneratorName = null == keyGeneratorConfig ? null : keyGeneratorConfig.getKeyGeneratorName();\n        checkRule(dataNodes);\n    }\n","date":"2021-09-02 17:34:21","endLine":101,"groupId":"11747","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"TableRule","params":"(finalShardingTableRuleConfigurationtableRuleConfig@finalCollection<String>dataSourceNames@finalStringdefaultGenerateKeyColumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/74/3e795b6613236c1352567cc833a7f2d71a3536.src","preCode":"    public TableRule(final ShardingTableRuleConfiguration tableRuleConfig, final Collection<String> dataSourceNames, final String defaultGenerateKeyColumn) {\n        logicTable = tableRuleConfig.getLogicTable().toLowerCase();\n        List<String> dataNodes = new InlineExpressionParser(tableRuleConfig.getActualDataNodes()).splitAndEvaluate();\n        dataNodeIndexMap = new HashMap<>(dataNodes.size(), 1);\n        actualDataNodes = isEmptyDataNodes(dataNodes) ? generateDataNodes(tableRuleConfig.getLogicTable(), dataSourceNames) : generateDataNodes(dataNodes, dataSourceNames);\n        actualTables = getActualTables();\n        databaseShardingStrategyConfig = tableRuleConfig.getDatabaseShardingStrategy();\n        tableShardingStrategyConfig = tableRuleConfig.getTableShardingStrategy();\n        KeyGenerateStrategyConfiguration keyGeneratorConfig = tableRuleConfig.getKeyGenerateStrategy();\n        generateKeyColumn = null != keyGeneratorConfig && !Strings.isNullOrEmpty(keyGeneratorConfig.getColumn()) ? keyGeneratorConfig.getColumn() : defaultGenerateKeyColumn;\n        keyGeneratorName = null == keyGeneratorConfig ? null : keyGeneratorConfig.getKeyGeneratorName();\n        checkRule(dataNodes);\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/rule/TableRule.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2021-09-02 17:34:21","commitOrder":2,"curCode":"    public TableRule(final ShardingAutoTableRuleConfiguration tableRuleConfig, \n                     final Collection<String> dataSourceNames, final ShardingAutoTableAlgorithm shardingAutoTableAlgorithm, final String defaultGenerateKeyColumn) {\n        logicTable = tableRuleConfig.getLogicTable();\n        databaseShardingStrategyConfig = new NoneShardingStrategyConfiguration();\n        tableShardingStrategyConfig = tableRuleConfig.getShardingStrategy();\n        List<String> dataNodes = getDataNodes(tableRuleConfig, shardingAutoTableAlgorithm, dataSourceNames);\n        dataNodeIndexMap = new HashMap<>(dataNodes.size(), 1);\n        actualDataNodes = isEmptyDataNodes(dataNodes) ? generateDataNodes(tableRuleConfig.getLogicTable(), dataSourceNames) : generateDataNodes(dataNodes, dataSourceNames);\n        actualTables = getActualTables();\n        KeyGenerateStrategyConfiguration keyGeneratorConfig = tableRuleConfig.getKeyGenerateStrategy();\n        generateKeyColumn = null != keyGeneratorConfig && !Strings.isNullOrEmpty(keyGeneratorConfig.getColumn()) ? keyGeneratorConfig.getColumn() : defaultGenerateKeyColumn;\n        keyGeneratorName = null == keyGeneratorConfig ? null : keyGeneratorConfig.getKeyGeneratorName();\n        checkRule(dataNodes);\n    }\n","date":"2021-09-02 17:34:21","endLine":116,"groupId":"11747","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"TableRule","params":"(finalShardingAutoTableRuleConfigurationtableRuleConfig@finalCollection<String>dataSourceNames@finalShardingAutoTableAlgorithmshardingAutoTableAlgorithm@finalStringdefaultGenerateKeyColumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/74/3e795b6613236c1352567cc833a7f2d71a3536.src","preCode":"    public TableRule(final ShardingAutoTableRuleConfiguration tableRuleConfig, \n                     final Collection<String> dataSourceNames, final ShardingAutoTableAlgorithm shardingAutoTableAlgorithm, final String defaultGenerateKeyColumn) {\n        logicTable = tableRuleConfig.getLogicTable().toLowerCase();\n        databaseShardingStrategyConfig = new NoneShardingStrategyConfiguration();\n        tableShardingStrategyConfig = tableRuleConfig.getShardingStrategy();\n        List<String> dataNodes = getDataNodes(tableRuleConfig, shardingAutoTableAlgorithm, dataSourceNames);\n        dataNodeIndexMap = new HashMap<>(dataNodes.size(), 1);\n        actualDataNodes = isEmptyDataNodes(dataNodes) ? generateDataNodes(tableRuleConfig.getLogicTable(), dataSourceNames) : generateDataNodes(dataNodes, dataSourceNames);\n        actualTables = getActualTables();\n        KeyGenerateStrategyConfiguration keyGeneratorConfig = tableRuleConfig.getKeyGenerateStrategy();\n        generateKeyColumn = null != keyGeneratorConfig && !Strings.isNullOrEmpty(keyGeneratorConfig.getColumn()) ? keyGeneratorConfig.getColumn() : defaultGenerateKeyColumn;\n        keyGeneratorName = null == keyGeneratorConfig ? null : keyGeneratorConfig.getKeyGeneratorName();\n        checkRule(dataNodes);\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/rule/TableRule.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"1301a41807eda152b17ef78fe084bc2d4e9d368e","commitMessage":"@@@fix calcite exception when user execute sql with lowercase (#12125)\n\n* fix calcite execute error with oracle statement\n\n* add test case\n\n* modify map to case insensitive\n\n* fix test case\n\n* add test case for federate refresh test\n\n* optimize code\n\n* optimize code\n\n* optimize test case\n\n* optimize test case\n\n* optimize federate logic\n\n* optimize code","date":"2021-09-02 17:34:21","modifiedFileCount":"18","status":"M","submitter":"Zhengqiang Duan"}]
