[{"authorTime":"2021-07-03 16:36:59","codes":[{"authorDate":"2021-07-03 16:36:59","commitOrder":1,"curCode":"    private void checkToBeDroppedShardingTableNames(final String schemaName, final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) {\n        Collection<String> currentShardingTableNames = getCurrentShardingTableNames(currentRuleConfig);\n        Collection<String> notExistedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(each -> !currentShardingTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedTableNames.isEmpty()) {\n            throw new ShardingTableRuleNotExistedException(schemaName, notExistedTableNames);\n        }\n    }\n","date":"2021-07-03 16:36:59","endLine":64,"groupId":"7105","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeDroppedShardingTableNames","params":"(finalStringschemaName@finalDropShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3e/c66cc42f614e2000487b35cdedc45ecd09d2e3.src","preCode":"    private void checkToBeDroppedShardingTableNames(final String schemaName, final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) {\n        Collection<String> currentShardingTableNames = getCurrentShardingTableNames(currentRuleConfig);\n        Collection<String> notExistedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(each -> !currentShardingTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedTableNames.isEmpty()) {\n            throw new ShardingTableRuleNotExistedException(schemaName, notExistedTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/DropShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2021-07-03 16:36:59","commitOrder":1,"curCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new ShardingTableRulesInUsedException(usedTableNames);\n        }\n    }\n","date":"2021-07-03 16:36:59","endLine":79,"groupId":"7107","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBindingTables","params":"(finalDropShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3e/c66cc42f614e2000487b35cdedc45ecd09d2e3.src","preCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new ShardingTableRulesInUsedException(usedTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/DropShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"}],"commitId":"70149d383a75b5b9986818226f18abd449e5ae80","commitMessage":"@@@Add shardingsphere-sharding-distsql-handler module (#11125)\n\n* Add shardingsphere-sharding-distsql-handler module\n\n* Fix test cases\n\n* Fix test cases\n\n* Fix test cases","date":"2021-07-03 16:36:59","modifiedFileCount":"1","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 01:26:11","codes":[{"authorDate":"2021-07-04 01:26:11","commitOrder":2,"curCode":"    private void checkToBeDroppedShardingTableNames(final String schemaName, final DropShardingTableRuleStatement sqlStatement, \n                                                    final ShardingRuleConfiguration currentRuleConfig) throws ShardingTableRuleNotExistedException {\n        Collection<String> currentShardingTableNames = getCurrentShardingTableNames(currentRuleConfig);\n        Collection<String> notExistedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(each -> !currentShardingTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedTableNames.isEmpty()) {\n            throw new ShardingTableRuleNotExistedException(schemaName, notExistedTableNames);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":67,"groupId":"7105","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeDroppedShardingTableNames","params":"(finalStringschemaName@finalDropShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/67/75a723059393be30c12116c5f6ba10400f5295.src","preCode":"    private void checkToBeDroppedShardingTableNames(final String schemaName, final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) {\n        Collection<String> currentShardingTableNames = getCurrentShardingTableNames(currentRuleConfig);\n        Collection<String> notExistedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(each -> !currentShardingTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedTableNames.isEmpty()) {\n            throw new ShardingTableRuleNotExistedException(schemaName, notExistedTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/DropShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2021-07-04 01:26:11","commitOrder":2,"curCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws ShardingTableRulesInUsedException {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new ShardingTableRulesInUsedException(usedTableNames);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":82,"groupId":"7107","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBindingTables","params":"(finalDropShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/67/75a723059393be30c12116c5f6ba10400f5295.src","preCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new ShardingTableRulesInUsedException(usedTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/DropShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"18ab59a5ac8de3a2c2d2c1dac39de3041b9c36f3","commitMessage":"@@@Refactor RuleDefinitionViolationException to extend SQLException (#11129)\n\n* Refactor RDLBackendHandler\n\n* Refactor RuleDefinitionViolationException to extend SQLException","date":"2021-07-04 01:26:11","modifiedFileCount":"66","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 01:26:11","codes":[{"authorDate":"2021-07-04 16:12:25","commitOrder":3,"curCode":"    private void checkToBeDroppedShardingTableNames(final String schemaName, final DropShardingTableRuleStatement sqlStatement, \n                                                    final ShardingRuleConfiguration currentRuleConfig) throws DuplicateRuleException {\n        Collection<String> currentShardingTableNames = getCurrentShardingTableNames(currentRuleConfig);\n        Collection<String> notExistedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(each -> !currentShardingTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedTableNames.isEmpty()) {\n            throw new DuplicateRuleException(\"sharding\", schemaName, notExistedTableNames);\n        }\n    }\n","date":"2021-07-04 16:12:25","endLine":67,"groupId":"7105","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeDroppedShardingTableNames","params":"(finalStringschemaName@finalDropShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/cd/df85eaa0c9b99320ada8737f0fbf34dcf846bf.src","preCode":"    private void checkToBeDroppedShardingTableNames(final String schemaName, final DropShardingTableRuleStatement sqlStatement, \n                                                    final ShardingRuleConfiguration currentRuleConfig) throws ShardingTableRuleNotExistedException {\n        Collection<String> currentShardingTableNames = getCurrentShardingTableNames(currentRuleConfig);\n        Collection<String> notExistedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(each -> !currentShardingTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedTableNames.isEmpty()) {\n            throw new ShardingTableRuleNotExistedException(schemaName, notExistedTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/DropShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2021-07-04 01:26:11","commitOrder":3,"curCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws ShardingTableRulesInUsedException {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new ShardingTableRulesInUsedException(usedTableNames);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":82,"groupId":"7107","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBindingTables","params":"(finalDropShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/67/75a723059393be30c12116c5f6ba10400f5295.src","preCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws ShardingTableRulesInUsedException {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new ShardingTableRulesInUsedException(usedTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/DropShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"}],"commitId":"f9f00bd34d9590e749743c439309cb84ceb18ef8","commitMessage":"@@@Remove ShardingTableRuleNotExistedException (#11138)\n\n* Remove ShardingTableRuleNotExistedException\n\n* Fix checkstyle","date":"2021-07-04 16:12:25","modifiedFileCount":"8","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 16:52:50","codes":[{"authorDate":"2021-07-04 16:12:25","commitOrder":4,"curCode":"    private void checkToBeDroppedShardingTableNames(final String schemaName, final DropShardingTableRuleStatement sqlStatement, \n                                                    final ShardingRuleConfiguration currentRuleConfig) throws DuplicateRuleException {\n        Collection<String> currentShardingTableNames = getCurrentShardingTableNames(currentRuleConfig);\n        Collection<String> notExistedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(each -> !currentShardingTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedTableNames.isEmpty()) {\n            throw new DuplicateRuleException(\"sharding\", schemaName, notExistedTableNames);\n        }\n    }\n","date":"2021-07-04 16:12:25","endLine":67,"groupId":"7105","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeDroppedShardingTableNames","params":"(finalStringschemaName@finalDropShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/cd/df85eaa0c9b99320ada8737f0fbf34dcf846bf.src","preCode":"    private void checkToBeDroppedShardingTableNames(final String schemaName, final DropShardingTableRuleStatement sqlStatement, \n                                                    final ShardingRuleConfiguration currentRuleConfig) throws DuplicateRuleException {\n        Collection<String> currentShardingTableNames = getCurrentShardingTableNames(currentRuleConfig);\n        Collection<String> notExistedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(each -> !currentShardingTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedTableNames.isEmpty()) {\n            throw new DuplicateRuleException(\"sharding\", schemaName, notExistedTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/DropShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2021-07-04 16:52:50","commitOrder":4,"curCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws RuleInUsedException {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new RuleInUsedException(\"Sharding\", usedTableNames);\n        }\n    }\n","date":"2021-07-04 16:52:50","endLine":82,"groupId":"7107","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBindingTables","params":"(finalDropShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3d/266581381be5d407f4c47bc8b66e011517fc2d.src","preCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws ShardingTableRulesInUsedException {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new ShardingTableRulesInUsedException(usedTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/DropShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"c040ac02afecdfad7de6782184cee4227aa0c5f8","commitMessage":"@@@Add RuleInUsedException (#11143)\n\n* Add RuleInUsedException\n\n* Add RuleInUsedException","date":"2021-07-04 16:52:50","modifiedFileCount":"2","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 17:13:42","codes":[{"authorDate":"2021-07-04 16:12:25","commitOrder":5,"curCode":"    private void checkToBeDroppedShardingTableNames(final String schemaName, final DropShardingTableRuleStatement sqlStatement, \n                                                    final ShardingRuleConfiguration currentRuleConfig) throws DuplicateRuleException {\n        Collection<String> currentShardingTableNames = getCurrentShardingTableNames(currentRuleConfig);\n        Collection<String> notExistedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(each -> !currentShardingTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedTableNames.isEmpty()) {\n            throw new DuplicateRuleException(\"sharding\", schemaName, notExistedTableNames);\n        }\n    }\n","date":"2021-07-04 16:12:25","endLine":67,"groupId":"7105","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeDroppedShardingTableNames","params":"(finalStringschemaName@finalDropShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/cd/df85eaa0c9b99320ada8737f0fbf34dcf846bf.src","preCode":"    private void checkToBeDroppedShardingTableNames(final String schemaName, final DropShardingTableRuleStatement sqlStatement, \n                                                    final ShardingRuleConfiguration currentRuleConfig) throws DuplicateRuleException {\n        Collection<String> currentShardingTableNames = getCurrentShardingTableNames(currentRuleConfig);\n        Collection<String> notExistedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(each -> !currentShardingTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedTableNames.isEmpty()) {\n            throw new DuplicateRuleException(\"sharding\", schemaName, notExistedTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/DropShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2021-07-04 17:13:42","commitOrder":5,"curCode":"    private void checkBindingTables(final String schemaName, final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws RuleInUsedException {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new RuleInUsedException(\"Sharding\", schemaName, usedTableNames);\n        }\n    }\n","date":"2021-07-04 17:13:42","endLine":82,"groupId":"7107","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBindingTables","params":"(finalStringschemaName@finalDropShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/77/61fadc4ce454122074fe9f952bd491e08fff2b.src","preCode":"    private void checkBindingTables(final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws RuleInUsedException {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new RuleInUsedException(\"Sharding\", usedTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/DropShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"7ddef35d306087926d185edf2104d83b03817450","commitMessage":"@@@Adjust error code of DistSQL exception (#11145)\n\n* Refactor RuleInUsedException\n\n* Adjust error code of DistSQL exception\n\n* Move package of DistSQL exception\n\n* Rename DistSQLException","date":"2021-07-04 17:13:42","modifiedFileCount":"43","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 17:13:42","codes":[{"authorDate":"2021-07-22 14:01:44","commitOrder":6,"curCode":"    private void checkToBeDroppedShardingTableNames(final String schemaName, final DropShardingTableRuleStatement sqlStatement, \n                                                    final ShardingRuleConfiguration currentRuleConfig) throws RequiredRuleMissedException {\n        Collection<String> currentShardingTableNames = getCurrentShardingTableNames(currentRuleConfig);\n        Collection<String> notExistedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(each -> !currentShardingTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedTableNames.isEmpty()) {\n            throw new RequiredRuleMissedException(\"sharding\", schemaName, notExistedTableNames);\n        }\n    }\n","date":"2021-07-22 14:01:44","endLine":66,"groupId":"10323","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeDroppedShardingTableNames","params":"(finalStringschemaName@finalDropShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f0/208e18898650c6090c1dfc182000a075a1d8a8.src","preCode":"    private void checkToBeDroppedShardingTableNames(final String schemaName, final DropShardingTableRuleStatement sqlStatement, \n                                                    final ShardingRuleConfiguration currentRuleConfig) throws DuplicateRuleException {\n        Collection<String> currentShardingTableNames = getCurrentShardingTableNames(currentRuleConfig);\n        Collection<String> notExistedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(each -> !currentShardingTableNames.contains(each)).collect(Collectors.toList());\n        if (!notExistedTableNames.isEmpty()) {\n            throw new DuplicateRuleException(\"sharding\", schemaName, notExistedTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/DropShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2021-07-04 17:13:42","commitOrder":6,"curCode":"    private void checkBindingTables(final String schemaName, final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws RuleInUsedException {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new RuleInUsedException(\"Sharding\", schemaName, usedTableNames);\n        }\n    }\n","date":"2021-07-04 17:13:42","endLine":82,"groupId":"10323","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBindingTables","params":"(finalStringschemaName@finalDropShardingTableRuleStatementsqlStatement@finalShardingRuleConfigurationcurrentRuleConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/77/61fadc4ce454122074fe9f952bd491e08fff2b.src","preCode":"    private void checkBindingTables(final String schemaName, final DropShardingTableRuleStatement sqlStatement, final ShardingRuleConfiguration currentRuleConfig) throws RuleInUsedException {\n        Collection<String> bindingTables = getBindingTables(currentRuleConfig);\n        Collection<String> usedTableNames = getToBeDroppedShardingTableNames(sqlStatement).stream().filter(bindingTables::contains).collect(Collectors.toList());\n        if (!usedTableNames.isEmpty()) {\n            throw new RuleInUsedException(\"Sharding\", schemaName, usedTableNames);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/DropShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"}],"commitId":"98e734f51b56d50f308d86b5e0c30138b4b1f13f","commitMessage":"@@@Fix exception type error. (#11417)\n\n","date":"2021-07-22 14:01:44","modifiedFileCount":"2","status":"M","submitter":"Raigor"}]
