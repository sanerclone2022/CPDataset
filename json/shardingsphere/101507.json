[{"authorTime":"2020-10-22 16:47:44","codes":[{"authorDate":"2020-10-22 16:47:44","commitOrder":1,"curCode":"    private ASTNode createProjection(final ProjectionContext ctx, final AliasSegment alias) {\n        ASTNode projection = visit(ctx.expr());\n        if (projection instanceof AggregationProjectionSegment) {\n            ((AggregationProjectionSegment) projection).setAlias(alias);\n            return projection;\n        }\n        if (projection instanceof ExpressionProjectionSegment) {\n            ((ExpressionProjectionSegment) projection).setAlias(alias);\n            return projection;\n        }\n        if (projection instanceof CommonExpressionSegment) {\n            CommonExpressionSegment segment = (CommonExpressionSegment) projection;\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(segment.getStartIndex(), segment.getStopIndex(), segment.getText());\n            result.setAlias(alias);\n            return result;\n        }\n        \r\n        if (projection instanceof ColumnSegment) {\n            ColumnProjectionSegment result = new ColumnProjectionSegment((ColumnSegment) projection);\n            result.setAlias(alias);\n            return result;\n        }\n        if (projection instanceof SubqueryExpressionSegment) {\n            SubqueryProjectionSegment result = new SubqueryProjectionSegment(((SubqueryExpressionSegment) projection).getSubquery());\n            result.setAlias(alias);\n            return result;\n        }\n        if (projection instanceof BinaryOperationExpression) {\n            int startIndex = ((BinaryOperationExpression) projection).getStartIndex();\n            int stopIndex = null != alias ? alias.getStopIndex() : ((BinaryOperationExpression) projection).getStopIndex();\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(startIndex, stopIndex, ((BinaryOperationExpression) projection).getText());\n            result.setAlias(alias);\n            return result;\n        }\n        LiteralExpressionSegment column = (LiteralExpressionSegment) projection;\n        ExpressionProjectionSegment result = null == alias ? new ExpressionProjectionSegment(column.getStartIndex(), column.getStopIndex(), String.valueOf(column.getLiterals()))\n                : new ExpressionProjectionSegment(column.getStartIndex(), ctx.alias().stop.getStopIndex(), String.valueOf(column.getLiterals()));\n        result.setAlias(alias);\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":521,"groupId":"9576","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createProjection","params":"(finalProjectionContextctx@finalAliasSegmentalias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/54/efae3b1c34c073dd7620e0332712376daf7503.src","preCode":"    private ASTNode createProjection(final ProjectionContext ctx, final AliasSegment alias) {\n        ASTNode projection = visit(ctx.expr());\n        if (projection instanceof AggregationProjectionSegment) {\n            ((AggregationProjectionSegment) projection).setAlias(alias);\n            return projection;\n        }\n        if (projection instanceof ExpressionProjectionSegment) {\n            ((ExpressionProjectionSegment) projection).setAlias(alias);\n            return projection;\n        }\n        if (projection instanceof CommonExpressionSegment) {\n            CommonExpressionSegment segment = (CommonExpressionSegment) projection;\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(segment.getStartIndex(), segment.getStopIndex(), segment.getText());\n            result.setAlias(alias);\n            return result;\n        }\n        \r\n        if (projection instanceof ColumnSegment) {\n            ColumnProjectionSegment result = new ColumnProjectionSegment((ColumnSegment) projection);\n            result.setAlias(alias);\n            return result;\n        }\n        if (projection instanceof SubqueryExpressionSegment) {\n            SubqueryProjectionSegment result = new SubqueryProjectionSegment(((SubqueryExpressionSegment) projection).getSubquery());\n            result.setAlias(alias);\n            return result;\n        }\n        if (projection instanceof BinaryOperationExpression) {\n            int startIndex = ((BinaryOperationExpression) projection).getStartIndex();\n            int stopIndex = null != alias ? alias.getStopIndex() : ((BinaryOperationExpression) projection).getStopIndex();\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(startIndex, stopIndex, ((BinaryOperationExpression) projection).getText());\n            result.setAlias(alias);\n            return result;\n        }\n        LiteralExpressionSegment column = (LiteralExpressionSegment) projection;\n        ExpressionProjectionSegment result = null == alias ? new ExpressionProjectionSegment(column.getStartIndex(), column.getStopIndex(), String.valueOf(column.getLiterals()))\n                : new ExpressionProjectionSegment(column.getStartIndex(), ctx.alias().stop.getStopIndex(), String.valueOf(column.getLiterals()));\n        result.setAlias(alias);\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/statement/impl/SQLServerDMLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":482,"status":"B"},{"authorDate":"2020-10-22 16:47:44","commitOrder":1,"curCode":"    private ASTNode createProjection(final ProjectionContext ctx, final AliasSegment alias) {\n        ASTNode projection = visit(ctx.expr());\n        if (projection instanceof AggregationProjectionSegment) {\n            ((AggregationProjectionSegment) projection).setAlias(alias);\n            return projection;\n        }\n        if (projection instanceof ExpressionProjectionSegment) {\n            ((ExpressionProjectionSegment) projection).setAlias(alias);\n            return projection;\n        }\n        if (projection instanceof CommonExpressionSegment) {\n            CommonExpressionSegment segment = (CommonExpressionSegment) projection;\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(segment.getStartIndex(), segment.getStopIndex(), segment.getText());\n            result.setAlias(alias);\n            return result;\n        }\n        \r\n        if (projection instanceof ColumnSegment) {\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), ctx.getText());\n            result.setAlias(alias);\n            return result;\n        }\n        if (projection instanceof SubqueryExpressionSegment) {\n            SubqueryProjectionSegment result = new SubqueryProjectionSegment(((SubqueryExpressionSegment) projection).getSubquery());\n            result.setAlias(alias);\n            return result;\n        }\n        if (projection instanceof BinaryOperationExpression) {\n            int startIndex = ((BinaryOperationExpression) projection).getStartIndex();\n            int stopIndex = null != alias ? alias.getStopIndex() : ((BinaryOperationExpression) projection).getStopIndex();\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(startIndex, stopIndex, ((BinaryOperationExpression) projection).getText());\n            result.setAlias(alias);\n            return result;\n        }\n        LiteralExpressionSegment column = (LiteralExpressionSegment) projection;\n        ExpressionProjectionSegment result = null == alias ? new ExpressionProjectionSegment(column.getStartIndex(), column.getStopIndex(), String.valueOf(column.getLiterals()))\n                : new ExpressionProjectionSegment(column.getStartIndex(), ctx.alias().stop.getStopIndex(), String.valueOf(column.getLiterals()));\n        result.setAlias(alias);\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":325,"groupId":"747","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createProjection","params":"(finalProjectionContextctx@finalAliasSegmentalias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/85/a97b30faeab0c41cacc4170b7fefe965819968.src","preCode":"    private ASTNode createProjection(final ProjectionContext ctx, final AliasSegment alias) {\n        ASTNode projection = visit(ctx.expr());\n        if (projection instanceof AggregationProjectionSegment) {\n            ((AggregationProjectionSegment) projection).setAlias(alias);\n            return projection;\n        }\n        if (projection instanceof ExpressionProjectionSegment) {\n            ((ExpressionProjectionSegment) projection).setAlias(alias);\n            return projection;\n        }\n        if (projection instanceof CommonExpressionSegment) {\n            CommonExpressionSegment segment = (CommonExpressionSegment) projection;\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(segment.getStartIndex(), segment.getStopIndex(), segment.getText());\n            result.setAlias(alias);\n            return result;\n        }\n        \r\n        if (projection instanceof ColumnSegment) {\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), ctx.getText());\n            result.setAlias(alias);\n            return result;\n        }\n        if (projection instanceof SubqueryExpressionSegment) {\n            SubqueryProjectionSegment result = new SubqueryProjectionSegment(((SubqueryExpressionSegment) projection).getSubquery());\n            result.setAlias(alias);\n            return result;\n        }\n        if (projection instanceof BinaryOperationExpression) {\n            int startIndex = ((BinaryOperationExpression) projection).getStartIndex();\n            int stopIndex = null != alias ? alias.getStopIndex() : ((BinaryOperationExpression) projection).getStopIndex();\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(startIndex, stopIndex, ((BinaryOperationExpression) projection).getText());\n            result.setAlias(alias);\n            return result;\n        }\n        LiteralExpressionSegment column = (LiteralExpressionSegment) projection;\n        ExpressionProjectionSegment result = null == alias ? new ExpressionProjectionSegment(column.getStartIndex(), column.getStopIndex(), String.valueOf(column.getLiterals()))\n                : new ExpressionProjectionSegment(column.getStartIndex(), ctx.alias().stop.getStopIndex(), String.valueOf(column.getLiterals()));\n        result.setAlias(alias);\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sql92/src/main/java/org/apache/shardingsphere/sql/parser/sql92/visitor/statement/impl/SQL92DMLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"B"}],"commitId":"dca1684798205a6efd0d94b91aa1d3f86c8baefb","commitMessage":"@@@Add Statement SQL SQLVisitor (#7885)\n\n","date":"2020-10-22 16:47:44","modifiedFileCount":"7","status":"B","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-06-04 20:39:44","codes":[{"authorDate":"2021-06-04 20:39:44","commitOrder":2,"curCode":"    private ASTNode createProjection(final ProjectionContext ctx, final AliasSegment alias) {\n        ASTNode projection = visit(ctx.expr());\n        if (projection instanceof AggregationProjectionSegment) {\n            ((AggregationProjectionSegment) projection).setAlias(alias);\n            return projection;\n        }\n        if (projection instanceof ExpressionProjectionSegment) {\n            ((ExpressionProjectionSegment) projection).setAlias(alias);\n            return projection;\n        }\n        if (projection instanceof CommonExpressionSegment) {\n            CommonExpressionSegment segment = (CommonExpressionSegment) projection;\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(segment.getStartIndex(), segment.getStopIndex(), segment.getText());\n            result.setAlias(alias);\n            return result;\n        }\n        \r\n        if (projection instanceof ColumnSegment) {\n            ColumnProjectionSegment result = new ColumnProjectionSegment((ColumnSegment) projection);\n            result.setAlias(alias);\n            return result;\n        }\n        if (projection instanceof SubqueryExpressionSegment) {\n            SubqueryExpressionSegment subqueryExpressionSegment = (SubqueryExpressionSegment) projection;\n            String text = ctx.start.getInputStream().getText(new Interval(subqueryExpressionSegment.getStartIndex(), subqueryExpressionSegment.getStopIndex()));\n            SubqueryProjectionSegment result = new SubqueryProjectionSegment(((SubqueryExpressionSegment) projection).getSubquery(), text);\n            result.setAlias(alias);\n            return result;\n        }\n        if (projection instanceof BinaryOperationExpression) {\n            int startIndex = ((BinaryOperationExpression) projection).getStartIndex();\n            int stopIndex = null != alias ? alias.getStopIndex() : ((BinaryOperationExpression) projection).getStopIndex();\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(startIndex, stopIndex, ((BinaryOperationExpression) projection).getText());\n            result.setAlias(alias);\n            return result;\n        }\n        LiteralExpressionSegment column = (LiteralExpressionSegment) projection;\n        ExpressionProjectionSegment result = null == alias ? new ExpressionProjectionSegment(column.getStartIndex(), column.getStopIndex(), String.valueOf(column.getLiterals()))\n                : new ExpressionProjectionSegment(column.getStartIndex(), ctx.alias().stop.getStopIndex(), String.valueOf(column.getLiterals()));\n        result.setAlias(alias);\n        return result;\n    }\n","date":"2021-06-04 20:39:44","endLine":548,"groupId":"101507","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createProjection","params":"(finalProjectionContextctx@finalAliasSegmentalias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/19/4b968e28e6017a7f6c844e7f6dff292cf63966.src","preCode":"    private ASTNode createProjection(final ProjectionContext ctx, final AliasSegment alias) {\n        ASTNode projection = visit(ctx.expr());\n        if (projection instanceof AggregationProjectionSegment) {\n            ((AggregationProjectionSegment) projection).setAlias(alias);\n            return projection;\n        }\n        if (projection instanceof ExpressionProjectionSegment) {\n            ((ExpressionProjectionSegment) projection).setAlias(alias);\n            return projection;\n        }\n        if (projection instanceof CommonExpressionSegment) {\n            CommonExpressionSegment segment = (CommonExpressionSegment) projection;\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(segment.getStartIndex(), segment.getStopIndex(), segment.getText());\n            result.setAlias(alias);\n            return result;\n        }\n        \r\n        if (projection instanceof ColumnSegment) {\n            ColumnProjectionSegment result = new ColumnProjectionSegment((ColumnSegment) projection);\n            result.setAlias(alias);\n            return result;\n        }\n        if (projection instanceof SubqueryExpressionSegment) {\n            SubqueryProjectionSegment result = new SubqueryProjectionSegment(((SubqueryExpressionSegment) projection).getSubquery());\n            result.setAlias(alias);\n            return result;\n        }\n        if (projection instanceof BinaryOperationExpression) {\n            int startIndex = ((BinaryOperationExpression) projection).getStartIndex();\n            int stopIndex = null != alias ? alias.getStopIndex() : ((BinaryOperationExpression) projection).getStopIndex();\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(startIndex, stopIndex, ((BinaryOperationExpression) projection).getText());\n            result.setAlias(alias);\n            return result;\n        }\n        LiteralExpressionSegment column = (LiteralExpressionSegment) projection;\n        ExpressionProjectionSegment result = null == alias ? new ExpressionProjectionSegment(column.getStartIndex(), column.getStopIndex(), String.valueOf(column.getLiterals()))\n                : new ExpressionProjectionSegment(column.getStartIndex(), ctx.alias().stop.getStopIndex(), String.valueOf(column.getLiterals()));\n        result.setAlias(alias);\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/statement/impl/SQLServerDMLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":507,"status":"M"},{"authorDate":"2021-06-04 20:39:44","commitOrder":2,"curCode":"    private ASTNode createProjection(final ProjectionContext ctx, final AliasSegment alias) {\n        ASTNode projection = visit(ctx.expr());\n        if (projection instanceof AggregationProjectionSegment) {\n            ((AggregationProjectionSegment) projection).setAlias(alias);\n            return projection;\n        }\n        if (projection instanceof ExpressionProjectionSegment) {\n            ((ExpressionProjectionSegment) projection).setAlias(alias);\n            return projection;\n        }\n        if (projection instanceof CommonExpressionSegment) {\n            CommonExpressionSegment segment = (CommonExpressionSegment) projection;\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(segment.getStartIndex(), segment.getStopIndex(), segment.getText());\n            result.setAlias(alias);\n            return result;\n        }\n        \r\n        if (projection instanceof ColumnSegment) {\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), ctx.getText());\n            result.setAlias(alias);\n            return result;\n        }\n        if (projection instanceof SubqueryExpressionSegment) {\n            SubqueryExpressionSegment subqueryExpressionSegment = (SubqueryExpressionSegment) projection;\n            String text = ctx.start.getInputStream().getText(new Interval(subqueryExpressionSegment.getStartIndex(), subqueryExpressionSegment.getStopIndex()));\n            SubqueryProjectionSegment result = new SubqueryProjectionSegment(((SubqueryExpressionSegment) projection).getSubquery(), text);\n            result.setAlias(alias);\n            return result;\n        }\n        if (projection instanceof BinaryOperationExpression) {\n            int startIndex = ((BinaryOperationExpression) projection).getStartIndex();\n            int stopIndex = null != alias ? alias.getStopIndex() : ((BinaryOperationExpression) projection).getStopIndex();\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(startIndex, stopIndex, ((BinaryOperationExpression) projection).getText());\n            result.setAlias(alias);\n            return result;\n        }\n        LiteralExpressionSegment column = (LiteralExpressionSegment) projection;\n        ExpressionProjectionSegment result = null == alias ? new ExpressionProjectionSegment(column.getStartIndex(), column.getStopIndex(), String.valueOf(column.getLiterals()))\n                : new ExpressionProjectionSegment(column.getStartIndex(), ctx.alias().stop.getStopIndex(), String.valueOf(column.getLiterals()));\n        result.setAlias(alias);\n        return result;\n    }\n","date":"2021-06-04 20:39:44","endLine":346,"groupId":"101507","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createProjection","params":"(finalProjectionContextctx@finalAliasSegmentalias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b3/4b770e4ac1ffd5ddea472c8eaeef2a64fb91e0.src","preCode":"    private ASTNode createProjection(final ProjectionContext ctx, final AliasSegment alias) {\n        ASTNode projection = visit(ctx.expr());\n        if (projection instanceof AggregationProjectionSegment) {\n            ((AggregationProjectionSegment) projection).setAlias(alias);\n            return projection;\n        }\n        if (projection instanceof ExpressionProjectionSegment) {\n            ((ExpressionProjectionSegment) projection).setAlias(alias);\n            return projection;\n        }\n        if (projection instanceof CommonExpressionSegment) {\n            CommonExpressionSegment segment = (CommonExpressionSegment) projection;\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(segment.getStartIndex(), segment.getStopIndex(), segment.getText());\n            result.setAlias(alias);\n            return result;\n        }\n        \r\n        if (projection instanceof ColumnSegment) {\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(ctx.start.getStartIndex(), ctx.stop.getStopIndex(), ctx.getText());\n            result.setAlias(alias);\n            return result;\n        }\n        if (projection instanceof SubqueryExpressionSegment) {\n            SubqueryProjectionSegment result = new SubqueryProjectionSegment(((SubqueryExpressionSegment) projection).getSubquery());\n            result.setAlias(alias);\n            return result;\n        }\n        if (projection instanceof BinaryOperationExpression) {\n            int startIndex = ((BinaryOperationExpression) projection).getStartIndex();\n            int stopIndex = null != alias ? alias.getStopIndex() : ((BinaryOperationExpression) projection).getStopIndex();\n            ExpressionProjectionSegment result = new ExpressionProjectionSegment(startIndex, stopIndex, ((BinaryOperationExpression) projection).getText());\n            result.setAlias(alias);\n            return result;\n        }\n        LiteralExpressionSegment column = (LiteralExpressionSegment) projection;\n        ExpressionProjectionSegment result = null == alias ? new ExpressionProjectionSegment(column.getStartIndex(), column.getStopIndex(), String.valueOf(column.getLiterals()))\n                : new ExpressionProjectionSegment(column.getStartIndex(), ctx.alias().stop.getStopIndex(), String.valueOf(column.getLiterals()));\n        result.setAlias(alias);\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sql92/src/main/java/org/apache/shardingsphere/sql/parser/sql92/visitor/statement/impl/SQL92DMLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"M"}],"commitId":"a86cc42072b9a02367f925d704872fca25c3434a","commitMessage":"@@@fix select lost subquery projection (#10658)\n\n* fix select lost subquery projection\n\n* fix checkstyle","date":"2021-06-04 20:39:44","modifiedFileCount":"10","status":"M","submitter":"Zhengqiang Duan"}]
