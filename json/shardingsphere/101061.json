[{"authorTime":"2021-08-15 02:33:31","codes":[{"authorDate":"2021-08-15 02:33:31","commitOrder":5,"curCode":"    public ResponseHeader execute(final String schemaName, final AddResourceStatement sqlStatement) throws DistSQLException {\n        check(schemaName, sqlStatement);\n        Map<String, DataSourceConfiguration> dataSourceConfigs = DataSourceParameterConverter.getDataSourceConfigurationMap(\n                DataSourceParameterConverter.getDataSourceParameterMapFromYamlConfiguration(AddResourcesStatementConverter.convert(databaseType, sqlStatement)));\n        Collection<String> invalidDataSourceNames = dataSourceConfigs.entrySet()\n                .stream().filter(entry -> !dataSourceValidator.validate(entry.getValue())).map(Entry::getKey).collect(Collectors.toList());\n        if (!invalidDataSourceNames.isEmpty()) {\n            throw new InvalidResourceException(invalidDataSourceNames);\n        }\n        \r\n        ProxyContext.getInstance().getContextManager()\n                .getMetaDataContexts().getDistMetaDataPersistService().ifPresent(optional -> optional.getDataSourceService().append(schemaName, dataSourceConfigs));\n        return new UpdateResponseHeader(sqlStatement);\n    }\n","date":"2021-08-15 02:33:31","endLine":74,"groupId":"3481","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(finalStringschemaName@finalAddResourceStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/36/19c3fd278e7f8d455c5b486b57dd005e40f0da.src","preCode":"    public ResponseHeader execute(final String schemaName, final AddResourceStatement sqlStatement) throws DistSQLException {\n        check(schemaName, sqlStatement);\n        Map<String, DataSourceConfiguration> dataSourceConfigs = DataSourceParameterConverter.getDataSourceConfigurationMap(\n                DataSourceParameterConverter.getDataSourceParameterMapFromYamlConfiguration(AddResourcesStatementConverter.convert(databaseType, sqlStatement)));\n        Collection<String> invalidDataSourceNames = dataSourceConfigs.entrySet()\n                .stream().filter(entry -> !dataSourceValidator.validate(entry.getValue())).map(Entry::getKey).collect(Collectors.toList());\n        if (!invalidDataSourceNames.isEmpty()) {\n            throw new InvalidResourceException(invalidDataSourceNames);\n        }\n        \r\n        ProxyContext.getInstance().getContextManager()\n                .getMetaDataContexts().getDistMetaDataPersistService().ifPresent(optional -> optional.getDataSourceService().append(schemaName, dataSourceConfigs));\n        return new UpdateResponseHeader(sqlStatement);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/distsql/rdl/resource/AddResourceBackendHandler.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"MB"},{"authorDate":"2021-08-15 02:33:31","commitOrder":5,"curCode":"    public ResponseHeader execute() {\n        check(sqlStatement);\n        \r\n        ProxyContext.getInstance().getContextManager().getMetaDataContexts().getDistMetaDataPersistService().ifPresent(\n            optional -> optional.getSchemaMetaDataService().persist(sqlStatement.getDatabaseName(), null));\n        return new UpdateResponseHeader(sqlStatement);\n    }\n","date":"2021-08-15 02:33:31","endLine":43,"groupId":"11814","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/17/19acb631d6e7f02d3796e48782d6d87de2507e.src","preCode":"    public ResponseHeader execute() {\n        check(sqlStatement);\n        \r\n        ProxyContext.getInstance().getContextManager().getMetaDataContexts().getDistMetaDataPersistService().ifPresent(\n            optional -> optional.getSchemaMetaDataService().persist(sqlStatement.getDatabaseName(), null));\n        return new UpdateResponseHeader(sqlStatement);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/database/CreateDatabaseBackendHandler.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"}],"commitId":"d6e424ba68c64ea1835a42b0f4b0fb7f69c95323","commitMessage":"@@@Add ContextManager (#11822)\n\n* Add ContextManager\n\n* Use ContextManager on GovernanceShardingSphereDataSource\n\n* Use ContextManager on ShardingSphereDataSource\n\n* Use ContextManager on ShardingSphereConnection\n\n* Use ContextManager on ShardingSphereConnection\n\n* Refactor AbstractBaseExecutorTest\n\n* Use ContextManager on proxy\n\n* Fix test case","date":"2021-08-15 02:33:31","modifiedFileCount":"118","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-21 23:24:02","codes":[{"authorDate":"2021-08-21 23:24:02","commitOrder":6,"curCode":"    public ResponseHeader execute(final String schemaName, final AddResourceStatement sqlStatement) throws DistSQLException {\n        check(schemaName, sqlStatement);\n        Map<String, DataSourceConfiguration> dataSourceConfigs = DataSourceParameterConverter.getDataSourceConfigurationMap(\n                DataSourceParameterConverter.getDataSourceParameterMapFromYamlConfiguration(AddResourcesStatementConverter.convert(databaseType, sqlStatement)));\n        Collection<String> invalidDataSourceNames = dataSourceConfigs.entrySet()\n                .stream().filter(entry -> !dataSourceValidator.validate(entry.getValue())).map(Entry::getKey).collect(Collectors.toList());\n        if (!invalidDataSourceNames.isEmpty()) {\n            throw new InvalidResourceException(invalidDataSourceNames);\n        }\n        \r\n        ProxyContext.getInstance().getContextManager()\n                .getMetaDataContexts().getPersistService().ifPresent(optional -> optional.getDataSourceService().append(schemaName, dataSourceConfigs));\n        return new UpdateResponseHeader(sqlStatement);\n    }\n","date":"2021-08-21 23:24:02","endLine":74,"groupId":"3481","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(finalStringschemaName@finalAddResourceStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/77/8a6e43c176a05645b66bde393e54a2372c707e.src","preCode":"    public ResponseHeader execute(final String schemaName, final AddResourceStatement sqlStatement) throws DistSQLException {\n        check(schemaName, sqlStatement);\n        Map<String, DataSourceConfiguration> dataSourceConfigs = DataSourceParameterConverter.getDataSourceConfigurationMap(\n                DataSourceParameterConverter.getDataSourceParameterMapFromYamlConfiguration(AddResourcesStatementConverter.convert(databaseType, sqlStatement)));\n        Collection<String> invalidDataSourceNames = dataSourceConfigs.entrySet()\n                .stream().filter(entry -> !dataSourceValidator.validate(entry.getValue())).map(Entry::getKey).collect(Collectors.toList());\n        if (!invalidDataSourceNames.isEmpty()) {\n            throw new InvalidResourceException(invalidDataSourceNames);\n        }\n        \r\n        ProxyContext.getInstance().getContextManager()\n                .getMetaDataContexts().getDistMetaDataPersistService().ifPresent(optional -> optional.getDataSourceService().append(schemaName, dataSourceConfigs));\n        return new UpdateResponseHeader(sqlStatement);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/distsql/rdl/resource/AddResourceBackendHandler.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2021-08-21 23:24:02","commitOrder":6,"curCode":"    public ResponseHeader execute() {\n        check(sqlStatement);\n        \r\n        ProxyContext.getInstance().getContextManager().getMetaDataContexts().getPersistService().ifPresent(\n            optional -> optional.getSchemaMetaDataService().persist(sqlStatement.getDatabaseName(), null));\n        return new UpdateResponseHeader(sqlStatement);\n    }\n","date":"2021-08-21 23:24:02","endLine":43,"groupId":"11814","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/15/a8d6102429afd262da10209f2d30cf634aca6e.src","preCode":"    public ResponseHeader execute() {\n        check(sqlStatement);\n        \r\n        ProxyContext.getInstance().getContextManager().getMetaDataContexts().getDistMetaDataPersistService().ifPresent(\n            optional -> optional.getSchemaMetaDataService().persist(sqlStatement.getDatabaseName(), null));\n        return new UpdateResponseHeader(sqlStatement);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/database/CreateDatabaseBackendHandler.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"534fe5735969e87e2066a2087ba12618be530cbc","commitMessage":"@@@Refactor ShardingSphereMode (#11937)\n\n* Refactor ShardingSphereAutoConfiguration\n\n* Remove useless PersistRepositoryFactory\n\n* Add StandalonePersistRepository\n\n* Add generic type of ShardingSphereMode\n\n* Add generic type of ContextManagerBuilder\n\n* Refactor ShardingSphereMode\n\n* Rename LocalStandalonePersistRepository\n\n* Rename LocalRepository\n\n* Rename RegistryCenterRepository to ClusterPersistRepository\n\n* Rename ClusterPersistRepositoryFactory\n\n* Move StandalonePersistRepository\n\n* Move StandalonePersistRepositoryConfiguration\n\n* Rename DistMetaDataPersistService to PersistService","date":"2021-08-21 23:24:02","modifiedFileCount":"75","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-21 23:24:02","codes":[{"authorDate":"2021-09-12 16:46:07","commitOrder":7,"curCode":"    public ResponseHeader execute(final String schemaName, final AddResourceStatement sqlStatement) throws DistSQLException {\n        check(schemaName, sqlStatement);\n        Map<String, DataSourceConfiguration> dataSourceConfigs = DataSourceParameterConverter.getDataSourceConfigurationMap(\n                DataSourceParameterConverter.getDataSourceParameterMapFromYamlConfiguration(ResourceSegmentsConverter.convert(databaseType, sqlStatement.getDataSources())));\n        Collection<String> invalidDataSourceNames = dataSourceConfigs.entrySet()\n                .stream().filter(entry -> !dataSourceValidator.validate(entry.getValue())).map(Entry::getKey).collect(Collectors.toList());\n        if (!invalidDataSourceNames.isEmpty()) {\n            throw new InvalidResourceException(invalidDataSourceNames);\n        }\n        \r\n        ProxyContext.getInstance().getContextManager()\n                .getMetaDataContexts().getPersistService().ifPresent(optional -> optional.getDataSourceService().append(schemaName, dataSourceConfigs));\n        return new UpdateResponseHeader(sqlStatement);\n    }\n","date":"2021-09-12 16:46:07","endLine":74,"groupId":"3481","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"execute","params":"(finalStringschemaName@finalAddResourceStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b5/316e4e3c55f2dc4924c03443f04b5b8ece1206.src","preCode":"    public ResponseHeader execute(final String schemaName, final AddResourceStatement sqlStatement) throws DistSQLException {\n        check(schemaName, sqlStatement);\n        Map<String, DataSourceConfiguration> dataSourceConfigs = DataSourceParameterConverter.getDataSourceConfigurationMap(\n                DataSourceParameterConverter.getDataSourceParameterMapFromYamlConfiguration(AddResourcesStatementConverter.convert(databaseType, sqlStatement)));\n        Collection<String> invalidDataSourceNames = dataSourceConfigs.entrySet()\n                .stream().filter(entry -> !dataSourceValidator.validate(entry.getValue())).map(Entry::getKey).collect(Collectors.toList());\n        if (!invalidDataSourceNames.isEmpty()) {\n            throw new InvalidResourceException(invalidDataSourceNames);\n        }\n        \r\n        ProxyContext.getInstance().getContextManager()\n                .getMetaDataContexts().getPersistService().ifPresent(optional -> optional.getDataSourceService().append(schemaName, dataSourceConfigs));\n        return new UpdateResponseHeader(sqlStatement);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/distsql/rdl/resource/AddResourceBackendHandler.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2021-08-21 23:24:02","commitOrder":7,"curCode":"    public ResponseHeader execute() {\n        check(sqlStatement);\n        \r\n        ProxyContext.getInstance().getContextManager().getMetaDataContexts().getPersistService().ifPresent(\n            optional -> optional.getSchemaMetaDataService().persist(sqlStatement.getDatabaseName(), null));\n        return new UpdateResponseHeader(sqlStatement);\n    }\n","date":"2021-08-21 23:24:02","endLine":43,"groupId":"11814","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/15/a8d6102429afd262da10209f2d30cf634aca6e.src","preCode":"    public ResponseHeader execute() {\n        check(sqlStatement);\n        \r\n        ProxyContext.getInstance().getContextManager().getMetaDataContexts().getPersistService().ifPresent(\n            optional -> optional.getSchemaMetaDataService().persist(sqlStatement.getDatabaseName(), null));\n        return new UpdateResponseHeader(sqlStatement);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/database/CreateDatabaseBackendHandler.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"N"}],"commitId":"b5b941634383dd066fb7b8e73f92d653af6b7a17","commitMessage":"@@@Add `ALTER RESOURCE` syntax for DistSQL. (#12349)\n\n* Add DistSQL syntax: Alter Resource.\n\n* Update DistSQL document.","date":"2021-09-12 16:46:07","modifiedFileCount":"7","status":"M","submitter":"Raigor"},{"authorTime":"2021-09-17 09:29:38","codes":[{"authorDate":"2021-09-12 16:46:07","commitOrder":8,"curCode":"    public ResponseHeader execute(final String schemaName, final AddResourceStatement sqlStatement) throws DistSQLException {\n        check(schemaName, sqlStatement);\n        Map<String, DataSourceConfiguration> dataSourceConfigs = DataSourceParameterConverter.getDataSourceConfigurationMap(\n                DataSourceParameterConverter.getDataSourceParameterMapFromYamlConfiguration(ResourceSegmentsConverter.convert(databaseType, sqlStatement.getDataSources())));\n        Collection<String> invalidDataSourceNames = dataSourceConfigs.entrySet()\n                .stream().filter(entry -> !dataSourceValidator.validate(entry.getValue())).map(Entry::getKey).collect(Collectors.toList());\n        if (!invalidDataSourceNames.isEmpty()) {\n            throw new InvalidResourceException(invalidDataSourceNames);\n        }\n        \r\n        ProxyContext.getInstance().getContextManager()\n                .getMetaDataContexts().getPersistService().ifPresent(optional -> optional.getDataSourceService().append(schemaName, dataSourceConfigs));\n        return new UpdateResponseHeader(sqlStatement);\n    }\n","date":"2021-09-12 16:46:07","endLine":74,"groupId":"101061","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"execute","params":"(finalStringschemaName@finalAddResourceStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b5/316e4e3c55f2dc4924c03443f04b5b8ece1206.src","preCode":"    public ResponseHeader execute(final String schemaName, final AddResourceStatement sqlStatement) throws DistSQLException {\n        check(schemaName, sqlStatement);\n        Map<String, DataSourceConfiguration> dataSourceConfigs = DataSourceParameterConverter.getDataSourceConfigurationMap(\n                DataSourceParameterConverter.getDataSourceParameterMapFromYamlConfiguration(ResourceSegmentsConverter.convert(databaseType, sqlStatement.getDataSources())));\n        Collection<String> invalidDataSourceNames = dataSourceConfigs.entrySet()\n                .stream().filter(entry -> !dataSourceValidator.validate(entry.getValue())).map(Entry::getKey).collect(Collectors.toList());\n        if (!invalidDataSourceNames.isEmpty()) {\n            throw new InvalidResourceException(invalidDataSourceNames);\n        }\n        \r\n        ProxyContext.getInstance().getContextManager()\n                .getMetaDataContexts().getPersistService().ifPresent(optional -> optional.getDataSourceService().append(schemaName, dataSourceConfigs));\n        return new UpdateResponseHeader(sqlStatement);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/distsql/rdl/resource/AddResourceBackendHandler.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2021-09-17 09:29:38","commitOrder":8,"curCode":"    public ResponseHeader execute() {\n        check(sqlStatement);\n        \r\n        ProxyContext.getInstance().getContextManager().getMetaDataContexts().getPersistService().ifPresent(\n            optional -> optional.getSchemaMetaDataService().persist(sqlStatement.getDatabaseName()));\n        return new UpdateResponseHeader(sqlStatement);\n    }\n","date":"2021-09-17 09:29:38","endLine":43,"groupId":"101061","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5c/a92ec79300d43fca11f5b2dfea40fc1e85bd47.src","preCode":"    public ResponseHeader execute() {\n        check(sqlStatement);\n        \r\n        ProxyContext.getInstance().getContextManager().getMetaDataContexts().getPersistService().ifPresent(\n            optional -> optional.getSchemaMetaDataService().persist(sqlStatement.getDatabaseName(), null));\n        return new UpdateResponseHeader(sqlStatement);\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/database/CreateDatabaseBackendHandler.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"831b242b7cc243899ee244d14c96b20f223ec61e","commitMessage":"@@@change persist path when create database (#12493)\n\n","date":"2021-09-17 09:29:38","modifiedFileCount":"2","status":"M","submitter":"zhaojinchao"}]
