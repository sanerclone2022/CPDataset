[{"authorTime":"2021-06-04 22:49:49","codes":[{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertRouteForNormalTable() {\n        ShardingTableBroadcastRoutingEngine shardingTableBroadcastRoutingEngine = new ShardingTableBroadcastRoutingEngine(mock(ShardingSphereSchema.class),\n                createSQLStatementContext(Lists.newArrayList(\"t_order\")));\n\n        RouteContext routeContext = new RouteContext();\n        shardingTableBroadcastRoutingEngine.route(routeContext, createShardingRule(false));\n\n        assertThat(routeContext.getActualDataSourceNames().size(), is(2));\n        assertThat(routeContext.getRouteUnits().size(), is(4));\n        Iterator<RouteUnit> routeUnits = routeContext.getRouteUnits().iterator();\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_1\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_1\");\n    }\n","date":"2021-06-04 22:49:49","endLine":84,"groupId":"6441","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRouteForNormalTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/be/5c5c0fa33102b6d0f0b71ae17f4cad1356b0ca.src","preCode":"    public void assertRouteForNormalTable() {\n        ShardingTableBroadcastRoutingEngine shardingTableBroadcastRoutingEngine = new ShardingTableBroadcastRoutingEngine(mock(ShardingSphereSchema.class),\n                createSQLStatementContext(Lists.newArrayList(\"t_order\")));\n\n        RouteContext routeContext = new RouteContext();\n        shardingTableBroadcastRoutingEngine.route(routeContext, createShardingRule(false));\n\n        assertThat(routeContext.getActualDataSourceNames().size(), is(2));\n        assertThat(routeContext.getRouteUnits().size(), is(4));\n        Iterator<RouteUnit> routeUnits = routeContext.getRouteUnits().iterator();\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_1\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_1\");\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/type/broadcast/ShardingTableBroadcastRoutingEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertRouteForDropIndexStatement() {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class, RETURNS_DEEP_STUBS);\n        when(schema.getAllTableNames()).thenReturn(Sets.newHashSet(\"t_order\"));\n        when(schema.get(anyString()).getIndexes().containsKey(anyString())).thenReturn(true);\n\n        IndexSegment segment = mock(IndexSegment.class, RETURNS_DEEP_STUBS);\n        when(segment.getIdentifier().getValue()).thenReturn(\"t_order\");\n        DropIndexStatement dropIndexStatement = mock(DropIndexStatement.class, RETURNS_DEEP_STUBS);\n        SQLStatementContext<DropIndexStatement> sqlStatementContext = mock(DropIndexStatementContext.class, RETURNS_DEEP_STUBS);\n        when(sqlStatementContext.getTablesContext().getTableNames()).thenReturn(Collections.emptyList());\n        when(((TableAvailable) sqlStatementContext).getAllTables()).thenReturn(Collections.emptyList());\n        when(((IndexAvailable) sqlStatementContext).getIndexes()).thenReturn(Collections.singletonList(segment));\n\n        ShardingTableBroadcastRoutingEngine shardingTableBroadcastRoutingEngine = new ShardingTableBroadcastRoutingEngine(schema, sqlStatementContext);\n        \n        RouteContext routeContext = new RouteContext();\n        shardingTableBroadcastRoutingEngine.route(routeContext, createShardingRule(false));\n\n        assertThat(routeContext.getActualDataSourceNames().size(), is(2));\n        Iterator<RouteUnit> routeUnits = routeContext.getRouteUnits().iterator();\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_1\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_1\");\n    }\n","date":"2021-06-04 22:49:49","endLine":126,"groupId":"13865","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRouteForDropIndexStatement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/be/5c5c0fa33102b6d0f0b71ae17f4cad1356b0ca.src","preCode":"    public void assertRouteForDropIndexStatement() {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class, RETURNS_DEEP_STUBS);\n        when(schema.getAllTableNames()).thenReturn(Sets.newHashSet(\"t_order\"));\n        when(schema.get(anyString()).getIndexes().containsKey(anyString())).thenReturn(true);\n\n        IndexSegment segment = mock(IndexSegment.class, RETURNS_DEEP_STUBS);\n        when(segment.getIdentifier().getValue()).thenReturn(\"t_order\");\n        DropIndexStatement dropIndexStatement = mock(DropIndexStatement.class, RETURNS_DEEP_STUBS);\n        SQLStatementContext<DropIndexStatement> sqlStatementContext = mock(DropIndexStatementContext.class, RETURNS_DEEP_STUBS);\n        when(sqlStatementContext.getTablesContext().getTableNames()).thenReturn(Collections.emptyList());\n        when(((TableAvailable) sqlStatementContext).getAllTables()).thenReturn(Collections.emptyList());\n        when(((IndexAvailable) sqlStatementContext).getIndexes()).thenReturn(Collections.singletonList(segment));\n\n        ShardingTableBroadcastRoutingEngine shardingTableBroadcastRoutingEngine = new ShardingTableBroadcastRoutingEngine(schema, sqlStatementContext);\n        \n        RouteContext routeContext = new RouteContext();\n        shardingTableBroadcastRoutingEngine.route(routeContext, createShardingRule(false));\n\n        assertThat(routeContext.getActualDataSourceNames().size(), is(2));\n        Iterator<RouteUnit> routeUnits = routeContext.getRouteUnits().iterator();\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_1\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_1\");\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/type/broadcast/ShardingTableBroadcastRoutingEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"}],"commitId":"6b157b44d0336e4d9c61f940b0ec19c26758af84","commitMessage":"@@@Merge sharding feature to core module (#10662)\n\n* Merge dependencies\n\n* Merge sharding feature to api module\n\n* Merge sharding feature to core module","date":"2021-06-04 22:49:49","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-07-29 01:03:53","codes":[{"authorDate":"2021-07-29 01:03:53","commitOrder":2,"curCode":"    public void assertRouteForNormalTable() {\n        ShardingTableBroadcastRoutingEngine shardingTableBroadcastRoutingEngine = \n                new ShardingTableBroadcastRoutingEngine(mock(ShardingSphereSchema.class), createSQLStatementContext(Collections.singletonList(\"t_order\")));\n        RouteContext routeContext = new RouteContext();\n        shardingTableBroadcastRoutingEngine.route(routeContext, createShardingRule(false));\n        assertThat(routeContext.getActualDataSourceNames().size(), is(2));\n        assertThat(routeContext.getRouteUnits().size(), is(4));\n        Iterator<RouteUnit> routeUnits = routeContext.getRouteUnits().iterator();\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_1\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_1\");\n    }\n","date":"2021-07-29 01:03:53","endLine":77,"groupId":"6441","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRouteForNormalTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ac/183f4e6c3dc552f27ce301a230dc1ef121d57f.src","preCode":"    public void assertRouteForNormalTable() {\n        ShardingTableBroadcastRoutingEngine shardingTableBroadcastRoutingEngine = new ShardingTableBroadcastRoutingEngine(mock(ShardingSphereSchema.class),\n                createSQLStatementContext(Lists.newArrayList(\"t_order\")));\n\n        RouteContext routeContext = new RouteContext();\n        shardingTableBroadcastRoutingEngine.route(routeContext, createShardingRule(false));\n\n        assertThat(routeContext.getActualDataSourceNames().size(), is(2));\n        assertThat(routeContext.getRouteUnits().size(), is(4));\n        Iterator<RouteUnit> routeUnits = routeContext.getRouteUnits().iterator();\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_1\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_1\");\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/type/broadcast/ShardingTableBroadcastRoutingEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2021-07-29 01:03:53","commitOrder":2,"curCode":"    public void assertRouteForDropIndexStatement() {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class, RETURNS_DEEP_STUBS);\n        when(schema.getAllTableNames()).thenReturn(Collections.singleton(\"t_order\"));\n        when(schema.get(anyString()).getIndexes().containsKey(anyString())).thenReturn(true);\n        IndexSegment segment = mock(IndexSegment.class, RETURNS_DEEP_STUBS);\n        when(segment.getIdentifier().getValue()).thenReturn(\"t_order\");\n        SQLStatementContext<DropIndexStatement> sqlStatementContext = mock(DropIndexStatementContext.class, RETURNS_DEEP_STUBS);\n        when(sqlStatementContext.getTablesContext().getTableNames()).thenReturn(Collections.emptyList());\n        when(((TableAvailable) sqlStatementContext).getAllTables()).thenReturn(Collections.emptyList());\n        when(((IndexAvailable) sqlStatementContext).getIndexes()).thenReturn(Collections.singletonList(segment));\n        ShardingTableBroadcastRoutingEngine shardingTableBroadcastRoutingEngine = new ShardingTableBroadcastRoutingEngine(schema, sqlStatementContext);\n        RouteContext routeContext = new RouteContext();\n        shardingTableBroadcastRoutingEngine.route(routeContext, createShardingRule(false));\n        assertThat(routeContext.getActualDataSourceNames().size(), is(2));\n        Iterator<RouteUnit> routeUnits = routeContext.getRouteUnits().iterator();\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_1\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_1\");\n    }\n","date":"2021-07-29 01:03:53","endLine":112,"groupId":"321","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRouteForDropIndexStatement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ac/183f4e6c3dc552f27ce301a230dc1ef121d57f.src","preCode":"    public void assertRouteForDropIndexStatement() {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class, RETURNS_DEEP_STUBS);\n        when(schema.getAllTableNames()).thenReturn(Sets.newHashSet(\"t_order\"));\n        when(schema.get(anyString()).getIndexes().containsKey(anyString())).thenReturn(true);\n\n        IndexSegment segment = mock(IndexSegment.class, RETURNS_DEEP_STUBS);\n        when(segment.getIdentifier().getValue()).thenReturn(\"t_order\");\n        DropIndexStatement dropIndexStatement = mock(DropIndexStatement.class, RETURNS_DEEP_STUBS);\n        SQLStatementContext<DropIndexStatement> sqlStatementContext = mock(DropIndexStatementContext.class, RETURNS_DEEP_STUBS);\n        when(sqlStatementContext.getTablesContext().getTableNames()).thenReturn(Collections.emptyList());\n        when(((TableAvailable) sqlStatementContext).getAllTables()).thenReturn(Collections.emptyList());\n        when(((IndexAvailable) sqlStatementContext).getIndexes()).thenReturn(Collections.singletonList(segment));\n\n        ShardingTableBroadcastRoutingEngine shardingTableBroadcastRoutingEngine = new ShardingTableBroadcastRoutingEngine(schema, sqlStatementContext);\n        \n        RouteContext routeContext = new RouteContext();\n        shardingTableBroadcastRoutingEngine.route(routeContext, createShardingRule(false));\n\n        assertThat(routeContext.getActualDataSourceNames().size(), is(2));\n        Iterator<RouteUnit> routeUnits = routeContext.getRouteUnits().iterator();\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_1\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_1\");\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/type/broadcast/ShardingTableBroadcastRoutingEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"6d2d2ba7b05c29bce74525f0437e04b22a556f66","commitMessage":"@@@Use java raw new List/Set/Map to instead of guava (#11561)\n\n* Use java raw new Map to instead of guava\n\n* Use java raw new List to instead of guava\n\n* Use java raw new Set to instead of guava","date":"2021-07-29 01:03:53","modifiedFileCount":"78","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-26 18:48:04","codes":[{"authorDate":"2021-08-26 18:48:04","commitOrder":3,"curCode":"    public void assertRouteForNormalTable() {\n        Collection<String> tableNames = Collections.singletonList(\"t_order\");\n        ShardingTableBroadcastRoutingEngine shardingTableBroadcastRoutingEngine = \n                new ShardingTableBroadcastRoutingEngine(mock(ShardingSphereSchema.class), createSQLStatementContext(tableNames), tableNames);\n        RouteContext routeContext = new RouteContext();\n        shardingTableBroadcastRoutingEngine.route(routeContext, createShardingRule(false));\n        assertThat(routeContext.getActualDataSourceNames().size(), is(2));\n        assertThat(routeContext.getRouteUnits().size(), is(4));\n        Iterator<RouteUnit> routeUnits = routeContext.getRouteUnits().iterator();\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_1\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_1\");\n    }\n","date":"2021-08-26 18:48:04","endLine":78,"groupId":"6441","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRouteForNormalTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/50/34e96598b7df16b5e3d87ac9329fb0e3a4b8b4.src","preCode":"    public void assertRouteForNormalTable() {\n        ShardingTableBroadcastRoutingEngine shardingTableBroadcastRoutingEngine = \n                new ShardingTableBroadcastRoutingEngine(mock(ShardingSphereSchema.class), createSQLStatementContext(Collections.singletonList(\"t_order\")));\n        RouteContext routeContext = new RouteContext();\n        shardingTableBroadcastRoutingEngine.route(routeContext, createShardingRule(false));\n        assertThat(routeContext.getActualDataSourceNames().size(), is(2));\n        assertThat(routeContext.getRouteUnits().size(), is(4));\n        Iterator<RouteUnit> routeUnits = routeContext.getRouteUnits().iterator();\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_1\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_1\");\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/type/broadcast/ShardingTableBroadcastRoutingEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2021-08-26 18:48:04","commitOrder":3,"curCode":"    public void assertRouteForDropIndexStatement() {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class, RETURNS_DEEP_STUBS);\n        when(schema.getAllTableNames()).thenReturn(Collections.singleton(\"t_order\"));\n        when(schema.get(anyString()).getIndexes().containsKey(anyString())).thenReturn(true);\n        IndexSegment segment = mock(IndexSegment.class, RETURNS_DEEP_STUBS);\n        when(segment.getIdentifier().getValue()).thenReturn(\"t_order\");\n        SQLStatementContext<DropIndexStatement> sqlStatementContext = mock(DropIndexStatementContext.class, RETURNS_DEEP_STUBS);\n        Collection<String> tableNames = Collections.emptyList();\n        when(sqlStatementContext.getTablesContext().getTableNames()).thenReturn(tableNames);\n        when(((IndexAvailable) sqlStatementContext).getIndexes()).thenReturn(Collections.singletonList(segment));\n        ShardingTableBroadcastRoutingEngine shardingTableBroadcastRoutingEngine = new ShardingTableBroadcastRoutingEngine(schema, sqlStatementContext, tableNames);\n        RouteContext routeContext = new RouteContext();\n        shardingTableBroadcastRoutingEngine.route(routeContext, createShardingRule(false));\n        assertThat(routeContext.getActualDataSourceNames().size(), is(2));\n        Iterator<RouteUnit> routeUnits = routeContext.getRouteUnits().iterator();\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_1\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_1\");\n    }\n","date":"2021-08-26 18:48:04","endLine":114,"groupId":"321","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRouteForDropIndexStatement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/50/34e96598b7df16b5e3d87ac9329fb0e3a4b8b4.src","preCode":"    public void assertRouteForDropIndexStatement() {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class, RETURNS_DEEP_STUBS);\n        when(schema.getAllTableNames()).thenReturn(Collections.singleton(\"t_order\"));\n        when(schema.get(anyString()).getIndexes().containsKey(anyString())).thenReturn(true);\n        IndexSegment segment = mock(IndexSegment.class, RETURNS_DEEP_STUBS);\n        when(segment.getIdentifier().getValue()).thenReturn(\"t_order\");\n        SQLStatementContext<DropIndexStatement> sqlStatementContext = mock(DropIndexStatementContext.class, RETURNS_DEEP_STUBS);\n        when(sqlStatementContext.getTablesContext().getTableNames()).thenReturn(Collections.emptyList());\n        when(((TableAvailable) sqlStatementContext).getAllTables()).thenReturn(Collections.emptyList());\n        when(((IndexAvailable) sqlStatementContext).getIndexes()).thenReturn(Collections.singletonList(segment));\n        ShardingTableBroadcastRoutingEngine shardingTableBroadcastRoutingEngine = new ShardingTableBroadcastRoutingEngine(schema, sqlStatementContext);\n        RouteContext routeContext = new RouteContext();\n        shardingTableBroadcastRoutingEngine.route(routeContext, createShardingRule(false));\n        assertThat(routeContext.getActualDataSourceNames().size(), is(2));\n        Iterator<RouteUnit> routeUnits = routeContext.getRouteUnits().iterator();\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_1\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_1\");\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/type/broadcast/ShardingTableBroadcastRoutingEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"7f18db4a97c97aa9621591865b146e1c626ff068","commitMessage":"@@@optimize sharding route logic and single table route logic (#12028)\n\n* optimize sharding engine logic\n\n* optimize sharding engine logic\n\n* fix test\n\n* fix test\n\n* remove duplicate method call","date":"2021-08-26 18:48:04","modifiedFileCount":"10","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-09-16 10:44:49","codes":[{"authorDate":"2021-09-16 10:44:49","commitOrder":4,"curCode":"    public void assertRouteForNormalTable() {\n        Collection<String> tableNames = Collections.singletonList(\"t_order\");\n        ShardingTableBroadcastRoutingEngine shardingTableBroadcastRoutingEngine = \n                new ShardingTableBroadcastRoutingEngine(mock(ShardingSphereSchema.class), createSQLStatementContext(tableNames), tableNames);\n        RouteContext routeContext = shardingTableBroadcastRoutingEngine.route(createShardingRule(false));\n        assertThat(routeContext.getActualDataSourceNames().size(), is(2));\n        assertThat(routeContext.getRouteUnits().size(), is(4));\n        Iterator<RouteUnit> routeUnits = routeContext.getRouteUnits().iterator();\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_1\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_1\");\n    }\n","date":"2021-09-16 10:44:49","endLine":76,"groupId":"10429","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"assertRouteForNormalTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/75/6d1d018eacc27c9b0b5e8d8ef9143e00f42510.src","preCode":"    public void assertRouteForNormalTable() {\n        Collection<String> tableNames = Collections.singletonList(\"t_order\");\n        ShardingTableBroadcastRoutingEngine shardingTableBroadcastRoutingEngine = \n                new ShardingTableBroadcastRoutingEngine(mock(ShardingSphereSchema.class), createSQLStatementContext(tableNames), tableNames);\n        RouteContext routeContext = new RouteContext();\n        shardingTableBroadcastRoutingEngine.route(routeContext, createShardingRule(false));\n        assertThat(routeContext.getActualDataSourceNames().size(), is(2));\n        assertThat(routeContext.getRouteUnits().size(), is(4));\n        Iterator<RouteUnit> routeUnits = routeContext.getRouteUnits().iterator();\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_1\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_1\");\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/type/broadcast/ShardingTableBroadcastRoutingEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2021-09-16 10:44:49","commitOrder":4,"curCode":"    public void assertRouteForDropIndexStatement() {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class, RETURNS_DEEP_STUBS);\n        when(schema.getAllTableNames()).thenReturn(Collections.singleton(\"t_order\"));\n        when(schema.get(anyString()).getIndexes().containsKey(anyString())).thenReturn(true);\n        IndexSegment segment = mock(IndexSegment.class, RETURNS_DEEP_STUBS);\n        when(segment.getIdentifier().getValue()).thenReturn(\"t_order\");\n        SQLStatementContext<DropIndexStatement> sqlStatementContext = mock(DropIndexStatementContext.class, RETURNS_DEEP_STUBS);\n        Collection<String> tableNames = Collections.emptyList();\n        when(sqlStatementContext.getTablesContext().getTableNames()).thenReturn(tableNames);\n        when(((IndexAvailable) sqlStatementContext).getIndexes()).thenReturn(Collections.singletonList(segment));\n        ShardingTableBroadcastRoutingEngine shardingTableBroadcastRoutingEngine = new ShardingTableBroadcastRoutingEngine(schema, sqlStatementContext, tableNames);\n        RouteContext routeContext = shardingTableBroadcastRoutingEngine.route(createShardingRule(false));\n        assertThat(routeContext.getActualDataSourceNames().size(), is(2));\n        Iterator<RouteUnit> routeUnits = routeContext.getRouteUnits().iterator();\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_1\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_1\");\n    }\n","date":"2021-09-16 10:44:49","endLine":110,"groupId":"10429","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"assertRouteForDropIndexStatement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/75/6d1d018eacc27c9b0b5e8d8ef9143e00f42510.src","preCode":"    public void assertRouteForDropIndexStatement() {\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class, RETURNS_DEEP_STUBS);\n        when(schema.getAllTableNames()).thenReturn(Collections.singleton(\"t_order\"));\n        when(schema.get(anyString()).getIndexes().containsKey(anyString())).thenReturn(true);\n        IndexSegment segment = mock(IndexSegment.class, RETURNS_DEEP_STUBS);\n        when(segment.getIdentifier().getValue()).thenReturn(\"t_order\");\n        SQLStatementContext<DropIndexStatement> sqlStatementContext = mock(DropIndexStatementContext.class, RETURNS_DEEP_STUBS);\n        Collection<String> tableNames = Collections.emptyList();\n        when(sqlStatementContext.getTablesContext().getTableNames()).thenReturn(tableNames);\n        when(((IndexAvailable) sqlStatementContext).getIndexes()).thenReturn(Collections.singletonList(segment));\n        ShardingTableBroadcastRoutingEngine shardingTableBroadcastRoutingEngine = new ShardingTableBroadcastRoutingEngine(schema, sqlStatementContext, tableNames);\n        RouteContext routeContext = new RouteContext();\n        shardingTableBroadcastRoutingEngine.route(routeContext, createShardingRule(false));\n        assertThat(routeContext.getActualDataSourceNames().size(), is(2));\n        Iterator<RouteUnit> routeUnits = routeContext.getRouteUnits().iterator();\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds0\", \"t_order_1\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_0\");\n        assertRouteUnit(routeUnits.next(), \"ds1\", \"t_order_1\");\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/type/broadcast/ShardingTableBroadcastRoutingEngineTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"da387e577c285547374f3bec611c3b27e978b3e3","commitMessage":"@@@optimize sharding route logic (#12457)\n\n* remove sharding condition merge logic\n\n* optimize route logic\n\n* fix checkstyle\n\n* optimize param name\n\n* fix checkstyle\n\n* fix unit test\n\n* optimize merge logic\n\n* optimize java doc\n\n* optimize java collection type","date":"2021-09-16 10:44:49","modifiedFileCount":"26","status":"M","submitter":"Zhengqiang Duan"}]
