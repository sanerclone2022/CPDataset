[{"authorTime":"2021-07-03 15:12:51","codes":[{"authorDate":"2021-07-03 15:12:51","commitOrder":1,"curCode":"    private void checkToBeAlteredResources(final String schemaName, final AlterReadwriteSplittingRuleStatement sqlStatement, final ShardingSphereResource resource) {\n        Collection<String> resources = new LinkedHashSet<>();\n        sqlStatement.getRules().stream().filter(each -> Strings.isNullOrEmpty(each.getAutoAwareResource())).forEach(each -> {\n            resources.add(each.getWriteDataSource());\n            resources.addAll(each.getReadDataSources());\n        });\n        Collection<String> notExistedResources = resource.getNotExistedResources(resources);\n        if (!notExistedResources.isEmpty()) {\n            throw new ResourceNotExistedException(schemaName, notExistedResources);\n        }\n    }\n","date":"2021-07-03 15:12:51","endLine":97,"groupId":"213","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeAlteredResources","params":"(finalStringschemaName@finalAlterReadwriteSplittingRuleStatementsqlStatement@finalShardingSphereResourceresource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1b/fcacfb6e81b484964e7eec6967b34f965ec202.src","preCode":"    private void checkToBeAlteredResources(final String schemaName, final AlterReadwriteSplittingRuleStatement sqlStatement, final ShardingSphereResource resource) {\n        Collection<String> resources = new LinkedHashSet<>();\n        sqlStatement.getRules().stream().filter(each -> Strings.isNullOrEmpty(each.getAutoAwareResource())).forEach(each -> {\n            resources.add(each.getWriteDataSource());\n            resources.addAll(each.getReadDataSources());\n        });\n        Collection<String> notExistedResources = resource.getNotExistedResources(resources);\n        if (!notExistedResources.isEmpty()) {\n            throw new ResourceNotExistedException(schemaName, notExistedResources);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-distsql/shardingsphere-readwrite-splitting-distsql-handler/src/main/java/org/apache/shardingsphere/readwritesplitting/distsql/handler/update/AlterReadwriteSplittingRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"B"},{"authorDate":"2021-07-03 15:12:51","commitOrder":1,"curCode":"    private Collection<String> getToBeCreatedResources(final CreateReadwriteSplittingRuleStatement sqlStatement) {\n        Collection<String> result = new LinkedHashSet<>();\n        sqlStatement.getRules().stream().filter(each -> Strings.isNullOrEmpty(each.getAutoAwareResource())).forEach(each -> {\n            result.add(each.getWriteDataSource());\n            result.addAll(each.getReadDataSources());\n        });\n        return result;\n    }\n","date":"2021-07-03 15:12:51","endLine":82,"groupId":"213","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getToBeCreatedResources","params":"(finalCreateReadwriteSplittingRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/14/a9e22fb0fc5475cdf2e917c4354b61400d339d.src","preCode":"    private Collection<String> getToBeCreatedResources(final CreateReadwriteSplittingRuleStatement sqlStatement) {\n        Collection<String> result = new LinkedHashSet<>();\n        sqlStatement.getRules().stream().filter(each -> Strings.isNullOrEmpty(each.getAutoAwareResource())).forEach(each -> {\n            result.add(each.getWriteDataSource());\n            result.addAll(each.getReadDataSources());\n        });\n        return result;\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-distsql/shardingsphere-readwrite-splitting-distsql-handler/src/main/java/org/apache/shardingsphere/readwritesplitting/distsql/handler/update/CreateReadwriteSplittingRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"}],"commitId":"2f7f7f5e0627c094d508f37554ec49c87874bb9e","commitMessage":"@@@Add shardingsphere-readwrite-splitting-distsql-handler module (#11124)\n\n","date":"2021-07-03 15:12:51","modifiedFileCount":"2","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-07-03 15:12:51","codes":[{"authorDate":"2021-07-04 01:26:11","commitOrder":2,"curCode":"    private void checkToBeAlteredResources(final String schemaName, final AlterReadwriteSplittingRuleStatement sqlStatement, \n                                           final ShardingSphereResource resource) throws ResourceNotExistedException {\n        Collection<String> resources = new LinkedHashSet<>();\n        sqlStatement.getRules().stream().filter(each -> Strings.isNullOrEmpty(each.getAutoAwareResource())).forEach(each -> {\n            resources.add(each.getWriteDataSource());\n            resources.addAll(each.getReadDataSources());\n        });\n        Collection<String> notExistedResources = resource.getNotExistedResources(resources);\n        if (!notExistedResources.isEmpty()) {\n            throw new ResourceNotExistedException(schemaName, notExistedResources);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":101,"groupId":"213","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeAlteredResources","params":"(finalStringschemaName@finalAlterReadwriteSplittingRuleStatementsqlStatement@finalShardingSphereResourceresource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bc/8d8803ac3eeee5eec67bd4a44a9e8fb11834b3.src","preCode":"    private void checkToBeAlteredResources(final String schemaName, final AlterReadwriteSplittingRuleStatement sqlStatement, final ShardingSphereResource resource) {\n        Collection<String> resources = new LinkedHashSet<>();\n        sqlStatement.getRules().stream().filter(each -> Strings.isNullOrEmpty(each.getAutoAwareResource())).forEach(each -> {\n            resources.add(each.getWriteDataSource());\n            resources.addAll(each.getReadDataSources());\n        });\n        Collection<String> notExistedResources = resource.getNotExistedResources(resources);\n        if (!notExistedResources.isEmpty()) {\n            throw new ResourceNotExistedException(schemaName, notExistedResources);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-distsql/shardingsphere-readwrite-splitting-distsql-handler/src/main/java/org/apache/shardingsphere/readwritesplitting/distsql/handler/update/AlterReadwriteSplittingRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2021-07-03 15:12:51","commitOrder":2,"curCode":"    private Collection<String> getToBeCreatedResources(final CreateReadwriteSplittingRuleStatement sqlStatement) {\n        Collection<String> result = new LinkedHashSet<>();\n        sqlStatement.getRules().stream().filter(each -> Strings.isNullOrEmpty(each.getAutoAwareResource())).forEach(each -> {\n            result.add(each.getWriteDataSource());\n            result.addAll(each.getReadDataSources());\n        });\n        return result;\n    }\n","date":"2021-07-03 15:12:51","endLine":82,"groupId":"213","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getToBeCreatedResources","params":"(finalCreateReadwriteSplittingRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/14/a9e22fb0fc5475cdf2e917c4354b61400d339d.src","preCode":"    private Collection<String> getToBeCreatedResources(final CreateReadwriteSplittingRuleStatement sqlStatement) {\n        Collection<String> result = new LinkedHashSet<>();\n        sqlStatement.getRules().stream().filter(each -> Strings.isNullOrEmpty(each.getAutoAwareResource())).forEach(each -> {\n            result.add(each.getWriteDataSource());\n            result.addAll(each.getReadDataSources());\n        });\n        return result;\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-distsql/shardingsphere-readwrite-splitting-distsql-handler/src/main/java/org/apache/shardingsphere/readwritesplitting/distsql/handler/update/CreateReadwriteSplittingRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"}],"commitId":"18ab59a5ac8de3a2c2d2c1dac39de3041b9c36f3","commitMessage":"@@@Refactor RuleDefinitionViolationException to extend SQLException (#11129)\n\n* Refactor RDLBackendHandler\n\n* Refactor RuleDefinitionViolationException to extend SQLException","date":"2021-07-04 01:26:11","modifiedFileCount":"66","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-03 15:12:51","codes":[{"authorDate":"2021-07-04 15:02:59","commitOrder":3,"curCode":"    private void checkToBeAlteredResources(final String schemaName, final AlterReadwriteSplittingRuleStatement sqlStatement, final ShardingSphereResource resource) throws RequiredResourceMissedException {\n        Collection<String> resources = new LinkedHashSet<>();\n        sqlStatement.getRules().stream().filter(each -> Strings.isNullOrEmpty(each.getAutoAwareResource())).forEach(each -> {\n            resources.add(each.getWriteDataSource());\n            resources.addAll(each.getReadDataSources());\n        });\n        Collection<String> notExistedResources = resource.getNotExistedResources(resources);\n        if (!notExistedResources.isEmpty()) {\n            throw new RequiredResourceMissedException(schemaName, notExistedResources);\n        }\n    }\n","date":"2021-07-04 15:02:59","endLine":99,"groupId":"10290","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeAlteredResources","params":"(finalStringschemaName@finalAlterReadwriteSplittingRuleStatementsqlStatement@finalShardingSphereResourceresource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2d/1c7f97781ebf0710cb1608c82f7a9bc69dfdd8.src","preCode":"    private void checkToBeAlteredResources(final String schemaName, final AlterReadwriteSplittingRuleStatement sqlStatement, final ShardingSphereResource resource) throws ResourceNotExistedException {\n        Collection<String> resources = new LinkedHashSet<>();\n        sqlStatement.getRules().stream().filter(each -> Strings.isNullOrEmpty(each.getAutoAwareResource())).forEach(each -> {\n            resources.add(each.getWriteDataSource());\n            resources.addAll(each.getReadDataSources());\n        });\n        Collection<String> notExistedResources = resource.getNotExistedResources(resources);\n        if (!notExistedResources.isEmpty()) {\n            throw new ResourceNotExistedException(schemaName, notExistedResources);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-distsql/shardingsphere-readwrite-splitting-distsql-handler/src/main/java/org/apache/shardingsphere/readwritesplitting/distsql/handler/update/AlterReadwriteSplittingRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2021-07-03 15:12:51","commitOrder":3,"curCode":"    private Collection<String> getToBeCreatedResources(final CreateReadwriteSplittingRuleStatement sqlStatement) {\n        Collection<String> result = new LinkedHashSet<>();\n        sqlStatement.getRules().stream().filter(each -> Strings.isNullOrEmpty(each.getAutoAwareResource())).forEach(each -> {\n            result.add(each.getWriteDataSource());\n            result.addAll(each.getReadDataSources());\n        });\n        return result;\n    }\n","date":"2021-07-03 15:12:51","endLine":82,"groupId":"10290","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getToBeCreatedResources","params":"(finalCreateReadwriteSplittingRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/14/a9e22fb0fc5475cdf2e917c4354b61400d339d.src","preCode":"    private Collection<String> getToBeCreatedResources(final CreateReadwriteSplittingRuleStatement sqlStatement) {\n        Collection<String> result = new LinkedHashSet<>();\n        sqlStatement.getRules().stream().filter(each -> Strings.isNullOrEmpty(each.getAutoAwareResource())).forEach(each -> {\n            result.add(each.getWriteDataSource());\n            result.addAll(each.getReadDataSources());\n        });\n        return result;\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-distsql/shardingsphere-readwrite-splitting-distsql-handler/src/main/java/org/apache/shardingsphere/readwritesplitting/distsql/handler/update/CreateReadwriteSplittingRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"}],"commitId":"83216cb8e0d277c40d499d8c6ad41413990dc1b5","commitMessage":"@@@Add ResourceDefinitionViolationException (#11136)\n\n* Add ResourceDefinitionViolationException\n\n* Add ResourceDefinitionViolationException\n\n* Rename DuplicateRuleException\n\n* Rename RequiredRuleMissedException\n\n* Rename RequiredResourceMissedException","date":"2021-07-04 15:02:59","modifiedFileCount":"35","status":"M","submitter":"Liang Zhang"}]
