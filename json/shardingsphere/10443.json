[{"authorTime":"2021-06-04 22:49:49","codes":[{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertNewInstanceForShowCreateTableWithTableRule() {\n        DALStatement dalStatement = mock(MySQLShowCreateTableStatement.class);\n        when(sqlStatementContext.getSqlStatement()).thenReturn(dalStatement);\n        when(shardingRule.tableRuleExists(tableNames)).thenReturn(true);\n        tableNames.add(\"table_1\");\n        ShardingRouteEngine actual = ShardingRouteEngineFactory.newInstance(shardingRule, metaData, sqlStatementContext, shardingConditions, props);\n        assertThat(actual, instanceOf(ShardingUnicastRoutingEngine.class));\n    }\n","date":"2021-06-04 22:49:49","endLine":308,"groupId":"11549","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertNewInstanceForShowCreateTableWithTableRule","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d2/babfad3a862835fe6904549978905a33c9aeda.src","preCode":"    public void assertNewInstanceForShowCreateTableWithTableRule() {\n        DALStatement dalStatement = mock(MySQLShowCreateTableStatement.class);\n        when(sqlStatementContext.getSqlStatement()).thenReturn(dalStatement);\n        when(shardingRule.tableRuleExists(tableNames)).thenReturn(true);\n        tableNames.add(\"table_1\");\n        ShardingRouteEngine actual = ShardingRouteEngineFactory.newInstance(shardingRule, metaData, sqlStatementContext, shardingConditions, props);\n        assertThat(actual, instanceOf(ShardingUnicastRoutingEngine.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/type/ShardingRouteEngineFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"B"},{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertNewInstanceForShowColumnsWithTableRule() {\n        DALStatement dalStatement = mock(MySQLShowColumnsStatement.class);\n        when(sqlStatementContext.getSqlStatement()).thenReturn(dalStatement);\n        when(shardingRule.tableRuleExists(tableNames)).thenReturn(true);\n        tableNames.add(\"table_1\");\n        ShardingRouteEngine actual = ShardingRouteEngineFactory.newInstance(shardingRule, metaData, sqlStatementContext, shardingConditions, props);\n        assertThat(actual, instanceOf(ShardingUnicastRoutingEngine.class));\n    }\n","date":"2021-06-04 22:49:49","endLine":328,"groupId":"11549","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertNewInstanceForShowColumnsWithTableRule","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d2/babfad3a862835fe6904549978905a33c9aeda.src","preCode":"    public void assertNewInstanceForShowColumnsWithTableRule() {\n        DALStatement dalStatement = mock(MySQLShowColumnsStatement.class);\n        when(sqlStatementContext.getSqlStatement()).thenReturn(dalStatement);\n        when(shardingRule.tableRuleExists(tableNames)).thenReturn(true);\n        tableNames.add(\"table_1\");\n        ShardingRouteEngine actual = ShardingRouteEngineFactory.newInstance(shardingRule, metaData, sqlStatementContext, shardingConditions, props);\n        assertThat(actual, instanceOf(ShardingUnicastRoutingEngine.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/type/ShardingRouteEngineFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"B"}],"commitId":"6b157b44d0336e4d9c61f940b0ec19c26758af84","commitMessage":"@@@Merge sharding feature to core module (#10662)\n\n* Merge dependencies\n\n* Merge sharding feature to api module\n\n* Merge sharding feature to core module","date":"2021-06-04 22:49:49","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-07-14 11:08:04","codes":[{"authorDate":"2021-07-14 11:08:04","commitOrder":2,"curCode":"    public void assertNewInstanceForShowCreateTableWithTableRule() {\n        DALStatement dalStatement = mock(MySQLShowCreateTableStatement.class);\n        when(sqlStatementContext.getSqlStatement()).thenReturn(dalStatement);\n        tableNames.add(\"table_1\");\n        when(shardingRule.getShardingBroadcastTableNames(tableNames)).thenReturn(Collections.singletonList(\"table_1\"));\n        ShardingRouteEngine actual = ShardingRouteEngineFactory.newInstance(shardingRule, metaData, sqlStatementContext, shardingConditions, props, Collections.emptyList());\n        assertThat(actual, instanceOf(ShardingUnicastRoutingEngine.class));\n    }\n","date":"2021-07-14 11:08:04","endLine":274,"groupId":"6569","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertNewInstanceForShowCreateTableWithTableRule","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5c/a9b8070f93151b4eb1213d0f9829f6e0a9f047.src","preCode":"    public void assertNewInstanceForShowCreateTableWithTableRule() {\n        DALStatement dalStatement = mock(MySQLShowCreateTableStatement.class);\n        when(sqlStatementContext.getSqlStatement()).thenReturn(dalStatement);\n        when(shardingRule.tableRuleExists(tableNames)).thenReturn(true);\n        tableNames.add(\"table_1\");\n        ShardingRouteEngine actual = ShardingRouteEngineFactory.newInstance(shardingRule, metaData, sqlStatementContext, shardingConditions, props);\n        assertThat(actual, instanceOf(ShardingUnicastRoutingEngine.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/type/ShardingRouteEngineFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"},{"authorDate":"2021-07-14 11:08:04","commitOrder":2,"curCode":"    public void assertNewInstanceForShowColumnsWithTableRule() {\n        DALStatement dalStatement = mock(MySQLShowColumnsStatement.class);\n        when(sqlStatementContext.getSqlStatement()).thenReturn(dalStatement);\n        tableNames.add(\"table_1\");\n        when(shardingRule.getShardingBroadcastTableNames(tableNames)).thenReturn(Collections.singletonList(\"table_1\"));\n        ShardingRouteEngine actual = ShardingRouteEngineFactory.newInstance(shardingRule, metaData, sqlStatementContext, shardingConditions, props, Collections.emptyList());\n        assertThat(actual, instanceOf(ShardingUnicastRoutingEngine.class));\n    }\n","date":"2021-07-14 11:08:04","endLine":284,"groupId":"6569","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertNewInstanceForShowColumnsWithTableRule","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5c/a9b8070f93151b4eb1213d0f9829f6e0a9f047.src","preCode":"    public void assertNewInstanceForShowColumnsWithTableRule() {\n        DALStatement dalStatement = mock(MySQLShowColumnsStatement.class);\n        when(sqlStatementContext.getSqlStatement()).thenReturn(dalStatement);\n        when(shardingRule.tableRuleExists(tableNames)).thenReturn(true);\n        tableNames.add(\"table_1\");\n        ShardingRouteEngine actual = ShardingRouteEngineFactory.newInstance(shardingRule, metaData, sqlStatementContext, shardingConditions, props);\n        assertThat(actual, instanceOf(ShardingUnicastRoutingEngine.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/type/ShardingRouteEngineFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"M"}],"commitId":"5784be8b09de36e14e3b24c2d71568145f9063e8","commitMessage":"@@@add default single table rule router (#11324)\n\n* add default single table rule\n\n* optimize single table router logic\n\n* optimize single table router logic\n\n* fix checkstyle\n\n* adjust package\n\n* minor refactor\n\n* adjust test cases\n\n* optimize route code\n\n* remove useless single table test cases\n\n* add test case\n\n* optimize single table route for create table\n\n* fix test case error\n\n* optimize exclude table logic\n\n* optimize exclude table logic","date":"2021-07-14 11:08:04","modifiedFileCount":"38","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-07-20 19:26:57","codes":[{"authorDate":"2021-07-20 19:26:57","commitOrder":3,"curCode":"    public void assertNewInstanceForShowCreateTableWithTableRule() {\n        DALStatement dalStatement = mock(MySQLShowCreateTableStatement.class);\n        when(sqlStatementContext.getSqlStatement()).thenReturn(dalStatement);\n        tableNames.add(\"table_1\");\n        when(shardingRule.tableRuleExists(tableNames)).thenReturn(true);\n        ShardingRouteEngine actual = ShardingRouteEngineFactory.newInstance(shardingRule, metaData, sqlStatementContext, shardingConditions, props);\n        assertThat(actual, instanceOf(ShardingUnicastRoutingEngine.class));\n    }\n","date":"2021-07-20 19:26:57","endLine":276,"groupId":"14369","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertNewInstanceForShowCreateTableWithTableRule","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1d/1c9d76141fb89286ade37a9c16cec57f4d1d6b.src","preCode":"    public void assertNewInstanceForShowCreateTableWithTableRule() {\n        DALStatement dalStatement = mock(MySQLShowCreateTableStatement.class);\n        when(sqlStatementContext.getSqlStatement()).thenReturn(dalStatement);\n        tableNames.add(\"table_1\");\n        when(shardingRule.getShardingBroadcastTableNames(tableNames)).thenReturn(Collections.singletonList(\"table_1\"));\n        ShardingRouteEngine actual = ShardingRouteEngineFactory.newInstance(shardingRule, metaData, sqlStatementContext, shardingConditions, props, Collections.emptyList());\n        assertThat(actual, instanceOf(ShardingUnicastRoutingEngine.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/type/ShardingRouteEngineFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"M"},{"authorDate":"2021-07-20 19:26:57","commitOrder":3,"curCode":"    public void assertNewInstanceForShowColumnsWithTableRule() {\n        DALStatement dalStatement = mock(MySQLShowColumnsStatement.class);\n        when(sqlStatementContext.getSqlStatement()).thenReturn(dalStatement);\n        tableNames.add(\"table_1\");\n        when(shardingRule.tableRuleExists(tableNames)).thenReturn(true);\n        ShardingRouteEngine actual = ShardingRouteEngineFactory.newInstance(shardingRule, metaData, sqlStatementContext, shardingConditions, props);\n        assertThat(actual, instanceOf(ShardingUnicastRoutingEngine.class));\n    }\n","date":"2021-07-20 19:26:57","endLine":286,"groupId":"14369","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertNewInstanceForShowColumnsWithTableRule","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1d/1c9d76141fb89286ade37a9c16cec57f4d1d6b.src","preCode":"    public void assertNewInstanceForShowColumnsWithTableRule() {\n        DALStatement dalStatement = mock(MySQLShowColumnsStatement.class);\n        when(sqlStatementContext.getSqlStatement()).thenReturn(dalStatement);\n        tableNames.add(\"table_1\");\n        when(shardingRule.getShardingBroadcastTableNames(tableNames)).thenReturn(Collections.singletonList(\"table_1\"));\n        ShardingRouteEngine actual = ShardingRouteEngineFactory.newInstance(shardingRule, metaData, sqlStatementContext, shardingConditions, props, Collections.emptyList());\n        assertThat(actual, instanceOf(ShardingUnicastRoutingEngine.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/type/ShardingRouteEngineFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"512cec6beb35cb3fedb2f0e282eb5394b553a479","commitMessage":"@@@optimize single table rule & router load logic (#11402)\n\n* optimize single table rule & router load logic\n\n* modify encrypt proxy config file\n\n* optimize single table route logic\n\n* fix integrate test error\n\n* remove useless param & rename getExcludedTables\n\n* remove useless param in test case\n\n* fix checkstyle","date":"2021-07-20 19:26:57","modifiedFileCount":"44","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-08-26 18:48:04","codes":[{"authorDate":"2021-08-26 18:48:04","commitOrder":4,"curCode":"    public void assertNewInstanceForShowCreateTableWithTableRule() {\n        DALStatement dalStatement = mock(MySQLShowCreateTableStatement.class);\n        when(sqlStatementContext.getSqlStatement()).thenReturn(dalStatement);\n        tableNames.add(\"table_1\");\n        when(shardingRule.getShardingRuleTableNames(tableNames)).thenReturn(tableNames);\n        ShardingRouteEngine actual = ShardingRouteEngineFactory.newInstance(shardingRule, metaData, sqlStatementContext, shardingConditions, props);\n        assertThat(actual, instanceOf(ShardingUnicastRoutingEngine.class));\n    }\n","date":"2021-08-26 18:48:04","endLine":276,"groupId":"10443","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"assertNewInstanceForShowCreateTableWithTableRule","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a7/4c282ae3963ca44f7bf806ad92bbc26c81e36e.src","preCode":"    public void assertNewInstanceForShowCreateTableWithTableRule() {\n        DALStatement dalStatement = mock(MySQLShowCreateTableStatement.class);\n        when(sqlStatementContext.getSqlStatement()).thenReturn(dalStatement);\n        tableNames.add(\"table_1\");\n        when(shardingRule.tableRuleExists(tableNames)).thenReturn(true);\n        ShardingRouteEngine actual = ShardingRouteEngineFactory.newInstance(shardingRule, metaData, sqlStatementContext, shardingConditions, props);\n        assertThat(actual, instanceOf(ShardingUnicastRoutingEngine.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/type/ShardingRouteEngineFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"M"},{"authorDate":"2021-08-26 18:48:04","commitOrder":4,"curCode":"    public void assertNewInstanceForShowColumnsWithTableRule() {\n        DALStatement dalStatement = mock(MySQLShowColumnsStatement.class);\n        when(sqlStatementContext.getSqlStatement()).thenReturn(dalStatement);\n        tableNames.add(\"table_1\");\n        when(shardingRule.getShardingRuleTableNames(tableNames)).thenReturn(tableNames);\n        ShardingRouteEngine actual = ShardingRouteEngineFactory.newInstance(shardingRule, metaData, sqlStatementContext, shardingConditions, props);\n        assertThat(actual, instanceOf(ShardingUnicastRoutingEngine.class));\n    }\n","date":"2021-08-26 18:48:04","endLine":286,"groupId":"10443","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"assertNewInstanceForShowColumnsWithTableRule","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a7/4c282ae3963ca44f7bf806ad92bbc26c81e36e.src","preCode":"    public void assertNewInstanceForShowColumnsWithTableRule() {\n        DALStatement dalStatement = mock(MySQLShowColumnsStatement.class);\n        when(sqlStatementContext.getSqlStatement()).thenReturn(dalStatement);\n        tableNames.add(\"table_1\");\n        when(shardingRule.tableRuleExists(tableNames)).thenReturn(true);\n        ShardingRouteEngine actual = ShardingRouteEngineFactory.newInstance(shardingRule, metaData, sqlStatementContext, shardingConditions, props);\n        assertThat(actual, instanceOf(ShardingUnicastRoutingEngine.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/route/engine/type/ShardingRouteEngineFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"7f18db4a97c97aa9621591865b146e1c626ff068","commitMessage":"@@@optimize sharding route logic and single table route logic (#12028)\n\n* optimize sharding engine logic\n\n* optimize sharding engine logic\n\n* fix test\n\n* fix test\n\n* remove duplicate method call","date":"2021-08-26 18:48:04","modifiedFileCount":"10","status":"M","submitter":"Zhengqiang Duan"}]
