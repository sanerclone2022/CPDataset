[{"authorTime":"2021-02-22 13:36:27","codes":[{"authorDate":"2021-02-22 13:36:27","commitOrder":1,"curCode":"    public void assertDataConsistencyCheck() {\n        Optional<Long> jobId = scalingAPI.start(ResourceUtil.mockJobConfig());\n        assertTrue(jobId.isPresent());\n        JobConfiguration jobConfig = scalingAPI.getJobConfig(jobId.get());\n        initTableData(jobConfig.getRuleConfig());\n        Map<String, DataConsistencyCheckResult> checkResultMap = scalingAPI.dataConsistencyCheck(jobId.get());\n        assertThat(checkResultMap.size(), is(1));\n        assertTrue(checkResultMap.get(\"t_order\").isCountValid());\n        assertFalse(checkResultMap.get(\"t_order\").isDataValid());\n        assertThat(checkResultMap.get(\"t_order\").getTargetCount(), is(2L));\n    }\n","date":"2021-02-22 13:36:27","endLine":127,"groupId":"9362","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertDataConsistencyCheck","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/14/2c8fcaa83b4bcf72f18eeab5c8f9b4b9f99f07.src","preCode":"    public void assertDataConsistencyCheck() {\n        Optional<Long> jobId = scalingAPI.start(ResourceUtil.mockJobConfig());\n        assertTrue(jobId.isPresent());\n        JobConfiguration jobConfig = scalingAPI.getJobConfig(jobId.get());\n        initTableData(jobConfig.getRuleConfig());\n        Map<String, DataConsistencyCheckResult> checkResultMap = scalingAPI.dataConsistencyCheck(jobId.get());\n        assertThat(checkResultMap.size(), is(1));\n        assertTrue(checkResultMap.get(\"t_order\").isCountValid());\n        assertFalse(checkResultMap.get(\"t_order\").isDataValid());\n        assertThat(checkResultMap.get(\"t_order\").getTargetCount(), is(2L));\n    }\n","realPath":"shardingsphere-scaling/shardingsphere-scaling-core/src/test/java/org/apache/shardingsphere/scaling/core/api/impl/ScalingAPIImplTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"},{"authorDate":"2021-02-22 13:36:27","commitOrder":1,"curCode":"    public void assertResetTargetTable() {\n        Optional<Long> jobId = scalingAPI.start(ResourceUtil.mockJobConfig());\n        assertTrue(jobId.isPresent());\n        JobConfiguration jobConfig = scalingAPI.getJobConfig(jobId.get());\n        initTableData(jobConfig.getRuleConfig());\n        scalingAPI.resetTargetTable(jobId.get());\n        Map<String, DataConsistencyCheckResult> checkResultMap = scalingAPI.dataConsistencyCheck(jobId.get());\n        assertThat(checkResultMap.get(\"t_order\").getTargetCount(), is(0L));\n    }\n","date":"2021-02-22 13:36:27","endLine":139,"groupId":"11656","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertResetTargetTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/14/2c8fcaa83b4bcf72f18eeab5c8f9b4b9f99f07.src","preCode":"    public void assertResetTargetTable() {\n        Optional<Long> jobId = scalingAPI.start(ResourceUtil.mockJobConfig());\n        assertTrue(jobId.isPresent());\n        JobConfiguration jobConfig = scalingAPI.getJobConfig(jobId.get());\n        initTableData(jobConfig.getRuleConfig());\n        scalingAPI.resetTargetTable(jobId.get());\n        Map<String, DataConsistencyCheckResult> checkResultMap = scalingAPI.dataConsistencyCheck(jobId.get());\n        assertThat(checkResultMap.get(\"t_order\").getTargetCount(), is(0L));\n    }\n","realPath":"shardingsphere-scaling/shardingsphere-scaling-core/src/test/java/org/apache/shardingsphere/scaling/core/api/impl/ScalingAPIImplTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"}],"commitId":"4dc30fadc0a368f6936fe40f2cc1a477d8069046","commitMessage":"@@@Add RegistryRepositoryAPIImplTest (#9466)\n\n* Add tests for ScalingAPIImplTest\n\n* Add RegistryRepositoryAPIImplTest\n\n* Optimize ScalingAPIImplTest\n\nCo-authored-by: qiulu3 <Lucas209910>","date":"2021-02-22 13:36:27","modifiedFileCount":"1","status":"B","submitter":"?? Lucas"},{"authorTime":"2021-02-26 21:39:24","codes":[{"authorDate":"2021-02-22 13:36:27","commitOrder":2,"curCode":"    public void assertDataConsistencyCheck() {\n        Optional<Long> jobId = scalingAPI.start(ResourceUtil.mockJobConfig());\n        assertTrue(jobId.isPresent());\n        JobConfiguration jobConfig = scalingAPI.getJobConfig(jobId.get());\n        initTableData(jobConfig.getRuleConfig());\n        Map<String, DataConsistencyCheckResult> checkResultMap = scalingAPI.dataConsistencyCheck(jobId.get());\n        assertThat(checkResultMap.size(), is(1));\n        assertTrue(checkResultMap.get(\"t_order\").isCountValid());\n        assertFalse(checkResultMap.get(\"t_order\").isDataValid());\n        assertThat(checkResultMap.get(\"t_order\").getTargetCount(), is(2L));\n    }\n","date":"2021-02-22 13:36:27","endLine":127,"groupId":"9362","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertDataConsistencyCheck","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/14/2c8fcaa83b4bcf72f18eeab5c8f9b4b9f99f07.src","preCode":"    public void assertDataConsistencyCheck() {\n        Optional<Long> jobId = scalingAPI.start(ResourceUtil.mockJobConfig());\n        assertTrue(jobId.isPresent());\n        JobConfiguration jobConfig = scalingAPI.getJobConfig(jobId.get());\n        initTableData(jobConfig.getRuleConfig());\n        Map<String, DataConsistencyCheckResult> checkResultMap = scalingAPI.dataConsistencyCheck(jobId.get());\n        assertThat(checkResultMap.size(), is(1));\n        assertTrue(checkResultMap.get(\"t_order\").isCountValid());\n        assertFalse(checkResultMap.get(\"t_order\").isDataValid());\n        assertThat(checkResultMap.get(\"t_order\").getTargetCount(), is(2L));\n    }\n","realPath":"shardingsphere-scaling/shardingsphere-scaling-core/src/test/java/org/apache/shardingsphere/scaling/core/api/impl/ScalingAPIImplTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"N"},{"authorDate":"2021-02-26 21:39:24","commitOrder":2,"curCode":"    public void assertResetTargetTable() {\n        Optional<Long> jobId = scalingAPI.start(ResourceUtil.mockJobConfig());\n        assertTrue(jobId.isPresent());\n        JobConfiguration jobConfig = scalingAPI.getJobConfig(jobId.get());\n        initTableData(jobConfig.getRuleConfig());\n        scalingAPI.reset(jobId.get());\n        Map<String, DataConsistencyCheckResult> checkResultMap = scalingAPI.dataConsistencyCheck(jobId.get());\n        assertThat(checkResultMap.get(\"t_order\").getTargetCount(), is(0L));\n    }\n","date":"2021-02-26 21:39:24","endLine":135,"groupId":"6444","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertResetTargetTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d9/32eb2fb3853b23b6b06a270c0d7ad46028ed26.src","preCode":"    public void assertResetTargetTable() {\n        Optional<Long> jobId = scalingAPI.start(ResourceUtil.mockJobConfig());\n        assertTrue(jobId.isPresent());\n        JobConfiguration jobConfig = scalingAPI.getJobConfig(jobId.get());\n        initTableData(jobConfig.getRuleConfig());\n        scalingAPI.resetTargetTable(jobId.get());\n        Map<String, DataConsistencyCheckResult> checkResultMap = scalingAPI.dataConsistencyCheck(jobId.get());\n        assertThat(checkResultMap.get(\"t_order\").getTargetCount(), is(0L));\n    }\n","realPath":"shardingsphere-scaling/shardingsphere-scaling-core/src/test/java/org/apache/shardingsphere/scaling/core/api/impl/ScalingAPIImplTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"144f067f67e3a778672f6ce9a2fba5d812aa6a96","commitMessage":"@@@Optimize reset scaling job (#9523)\n\n* rename ScalingOperateExecuteException to ScalingJobOperateException\n\n* Optimize ScalingJobNotFoundException\n\n* rename function\n\n* Optimize reset scaling job\n\nCo-authored-by: qiulu3 <Lucas209910>","date":"2021-02-26 21:39:24","modifiedFileCount":"10","status":"M","submitter":"?? Lucas"},{"authorTime":"2021-02-28 21:00:16","codes":[{"authorDate":"2021-02-22 13:36:27","commitOrder":3,"curCode":"    public void assertDataConsistencyCheck() {\n        Optional<Long> jobId = scalingAPI.start(ResourceUtil.mockJobConfig());\n        assertTrue(jobId.isPresent());\n        JobConfiguration jobConfig = scalingAPI.getJobConfig(jobId.get());\n        initTableData(jobConfig.getRuleConfig());\n        Map<String, DataConsistencyCheckResult> checkResultMap = scalingAPI.dataConsistencyCheck(jobId.get());\n        assertThat(checkResultMap.size(), is(1));\n        assertTrue(checkResultMap.get(\"t_order\").isCountValid());\n        assertFalse(checkResultMap.get(\"t_order\").isDataValid());\n        assertThat(checkResultMap.get(\"t_order\").getTargetCount(), is(2L));\n    }\n","date":"2021-02-22 13:36:27","endLine":127,"groupId":"9362","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertDataConsistencyCheck","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/14/2c8fcaa83b4bcf72f18eeab5c8f9b4b9f99f07.src","preCode":"    public void assertDataConsistencyCheck() {\n        Optional<Long> jobId = scalingAPI.start(ResourceUtil.mockJobConfig());\n        assertTrue(jobId.isPresent());\n        JobConfiguration jobConfig = scalingAPI.getJobConfig(jobId.get());\n        initTableData(jobConfig.getRuleConfig());\n        Map<String, DataConsistencyCheckResult> checkResultMap = scalingAPI.dataConsistencyCheck(jobId.get());\n        assertThat(checkResultMap.size(), is(1));\n        assertTrue(checkResultMap.get(\"t_order\").isCountValid());\n        assertFalse(checkResultMap.get(\"t_order\").isDataValid());\n        assertThat(checkResultMap.get(\"t_order\").getTargetCount(), is(2L));\n    }\n","realPath":"shardingsphere-scaling/shardingsphere-scaling-core/src/test/java/org/apache/shardingsphere/scaling/core/api/impl/ScalingAPIImplTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"N"},{"authorDate":"2021-02-28 21:00:16","commitOrder":3,"curCode":"    public void assertResetTargetTable() {\n        Optional<Long> jobId = scalingAPI.start(ResourceUtil.mockJobConfig());\n        assertTrue(jobId.isPresent());\n        JobConfiguration jobConfig = scalingAPI.getJobConfig(jobId.get());\n        initTableData(jobConfig.getRuleConfig());\n        scalingAPI.resetTargetTable(jobId.get());\n        Map<String, DataConsistencyCheckResult> checkResultMap = scalingAPI.dataConsistencyCheck(jobId.get());\n        assertThat(checkResultMap.get(\"t_order\").getTargetCount(), is(0L));\n    }\n","date":"2021-02-28 21:00:16","endLine":135,"groupId":"11656","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertResetTargetTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/bf/742e13490a019a372b199e519a9a69164a214a.src","preCode":"    public void assertResetTargetTable() {\n        Optional<Long> jobId = scalingAPI.start(ResourceUtil.mockJobConfig());\n        assertTrue(jobId.isPresent());\n        JobConfiguration jobConfig = scalingAPI.getJobConfig(jobId.get());\n        initTableData(jobConfig.getRuleConfig());\n        scalingAPI.reset(jobId.get());\n        Map<String, DataConsistencyCheckResult> checkResultMap = scalingAPI.dataConsistencyCheck(jobId.get());\n        assertThat(checkResultMap.get(\"t_order\").getTargetCount(), is(0L));\n    }\n","realPath":"shardingsphere-scaling/shardingsphere-scaling-core/src/test/java/org/apache/shardingsphere/scaling/core/api/impl/ScalingAPIImplTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"dde3bb99e090f32338fc81d09bb6a427efd2aba9","commitMessage":"@@@Support sharding join SQLs using calcite executor (#9518)\n\n* Support sharding join SQLs using calcite executor\n\n* fix test\n\n* check style\n\n* Refactor YamlDataSourceConfigurationSwapper (#9519)\n\n* Add issue NO for test cases\n\n* Refactor YamlDataSourceConfigurationSwapper\n\n* add dql cases of encrypt (#9503)\n\n* add dql cases of encrypt\n\n* rename pwd\n\n* add scenarioTypes feature (#9516)\n\n* add scenarioTypes\n\n* ci fixed\n\n* Refactor YamlDataSourceConfigurationSwapper (#9522)\n\n* Optimize reset scaling job (#9523)\n\n* rename ScalingOperateExecuteException to ScalingJobOperateException\n\n* Optimize ScalingJobNotFoundException\n\n* rename function\n\n* Optimize reset scaling job\n\nCo-authored-by: qiulu3 <Lucas209910>\n\n* fix put()\n\n* reverse\n\n* Revert \"reverse\"\n\nThis reverts commit dc64b913\n\n* reverse\n\n* reverse\n\n* reverse\n\nCo-authored-by: Liang Zhang <terrymanu@163.com>\nCo-authored-by: Jieker <jieker_mail@163.com>\nCo-authored-by: ?? Lucas <lucas307@163.com>","date":"2021-02-28 21:00:16","modifiedFileCount":"19","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-03-01 11:26:46","codes":[{"authorDate":"2021-02-22 13:36:27","commitOrder":4,"curCode":"    public void assertDataConsistencyCheck() {\n        Optional<Long> jobId = scalingAPI.start(ResourceUtil.mockJobConfig());\n        assertTrue(jobId.isPresent());\n        JobConfiguration jobConfig = scalingAPI.getJobConfig(jobId.get());\n        initTableData(jobConfig.getRuleConfig());\n        Map<String, DataConsistencyCheckResult> checkResultMap = scalingAPI.dataConsistencyCheck(jobId.get());\n        assertThat(checkResultMap.size(), is(1));\n        assertTrue(checkResultMap.get(\"t_order\").isCountValid());\n        assertFalse(checkResultMap.get(\"t_order\").isDataValid());\n        assertThat(checkResultMap.get(\"t_order\").getTargetCount(), is(2L));\n    }\n","date":"2021-02-22 13:36:27","endLine":127,"groupId":"101983","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertDataConsistencyCheck","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/14/2c8fcaa83b4bcf72f18eeab5c8f9b4b9f99f07.src","preCode":"    public void assertDataConsistencyCheck() {\n        Optional<Long> jobId = scalingAPI.start(ResourceUtil.mockJobConfig());\n        assertTrue(jobId.isPresent());\n        JobConfiguration jobConfig = scalingAPI.getJobConfig(jobId.get());\n        initTableData(jobConfig.getRuleConfig());\n        Map<String, DataConsistencyCheckResult> checkResultMap = scalingAPI.dataConsistencyCheck(jobId.get());\n        assertThat(checkResultMap.size(), is(1));\n        assertTrue(checkResultMap.get(\"t_order\").isCountValid());\n        assertFalse(checkResultMap.get(\"t_order\").isDataValid());\n        assertThat(checkResultMap.get(\"t_order\").getTargetCount(), is(2L));\n    }\n","realPath":"shardingsphere-scaling/shardingsphere-scaling-core/src/test/java/org/apache/shardingsphere/scaling/core/api/impl/ScalingAPIImplTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"N"},{"authorDate":"2021-03-01 11:26:46","commitOrder":4,"curCode":"    public void assertResetTargetTable() {\n        Optional<Long> jobId = scalingAPI.start(ResourceUtil.mockJobConfig());\n        assertTrue(jobId.isPresent());\n        JobConfiguration jobConfig = scalingAPI.getJobConfig(jobId.get());\n        initTableData(jobConfig.getRuleConfig());\n        scalingAPI.reset(jobId.get());\n        Map<String, DataConsistencyCheckResult> checkResultMap = scalingAPI.dataConsistencyCheck(jobId.get());\n        assertThat(checkResultMap.get(\"t_order\").getTargetCount(), is(0L));\n    }\n","date":"2021-03-01 11:26:46","endLine":135,"groupId":"101983","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertResetTargetTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d9/32eb2fb3853b23b6b06a270c0d7ad46028ed26.src","preCode":"    public void assertResetTargetTable() {\n        Optional<Long> jobId = scalingAPI.start(ResourceUtil.mockJobConfig());\n        assertTrue(jobId.isPresent());\n        JobConfiguration jobConfig = scalingAPI.getJobConfig(jobId.get());\n        initTableData(jobConfig.getRuleConfig());\n        scalingAPI.resetTargetTable(jobId.get());\n        Map<String, DataConsistencyCheckResult> checkResultMap = scalingAPI.dataConsistencyCheck(jobId.get());\n        assertThat(checkResultMap.get(\"t_order\").getTargetCount(), is(0L));\n    }\n","realPath":"shardingsphere-scaling/shardingsphere-scaling-core/src/test/java/org/apache/shardingsphere/scaling/core/api/impl/ScalingAPIImplTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"8230af11202a6bb921866f05b731073e8e745b3f","commitMessage":"@@@Revert \"Support sharding join SQLs using calcite executor (#9518)\" (#9533)\n\nThis reverts commit dde3bb99e090f32338fc81d09bb6a427efd2aba9.","date":"2021-03-01 11:26:46","modifiedFileCount":"19","status":"M","submitter":"Juan Pan(Trista)"}]
