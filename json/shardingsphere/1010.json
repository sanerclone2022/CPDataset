[{"authorTime":"2021-01-06 16:11:47","codes":[{"authorDate":"2021-01-06 16:11:47","commitOrder":1,"curCode":"    public void assertMethod() {\n        MockTargetObject targetObject = new MockTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertThat(spans.get(0).logEntries().size(), is(0));\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-01-06 16:11:47","endLine":90,"groupId":"11704","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ce/5ad13e903ba06ad97d079c00b0e7602947d901.src","preCode":"    public void assertMethod() {\n        MockTargetObject targetObject = new MockTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertThat(spans.get(0).logEntries().size(), is(0));\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-jaeger/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/jaeger/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"},{"authorDate":"2021-01-06 16:11:47","commitOrder":1,"curCode":"    public void assertExceptionHandle() {\n        MockTargetObject targetObject = new MockTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.onThrowing(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new IOException());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-01-06 16:11:47","endLine":115,"groupId":"11788","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExceptionHandle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ce/5ad13e903ba06ad97d079c00b0e7602947d901.src","preCode":"    public void assertExceptionHandle() {\n        MockTargetObject targetObject = new MockTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.onThrowing(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new IOException());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-jaeger/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/jaeger/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"190d66495ea798024b782d96fe4ca71a9d007797","commitMessage":"@@@add agent tracing test (#8910)\n\n","date":"2021-01-06 16:11:47","modifiedFileCount":"7","status":"B","submitter":"xiaoyu"},{"authorTime":"2021-01-12 10:35:24","codes":[{"authorDate":"2021-01-12 10:35:24","commitOrder":2,"curCode":"    public void assertMethod() {\n        MockAdviceTargetObject targetObject = new MockAdviceTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertThat(spans.get(0).logEntries().size(), is(0));\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-01-12 10:35:24","endLine":90,"groupId":"11704","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/77/4dd2c14d5989b4b404424e0ce628385185326b.src","preCode":"    public void assertMethod() {\n        MockTargetObject targetObject = new MockTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertThat(spans.get(0).logEntries().size(), is(0));\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-jaeger/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/jaeger/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2021-01-12 10:35:24","commitOrder":2,"curCode":"    public void assertExceptionHandle() {\n        MockAdviceTargetObject targetObject = new MockAdviceTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.onThrowing(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new IOException());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-01-12 10:35:24","endLine":115,"groupId":"11788","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExceptionHandle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/77/4dd2c14d5989b4b404424e0ce628385185326b.src","preCode":"    public void assertExceptionHandle() {\n        MockTargetObject targetObject = new MockTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.onThrowing(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new IOException());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-jaeger/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/jaeger/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"c75652dbf13f60b4572abc2f7a68c24bb84e6bd4","commitMessage":"@@@support to instrument the same method repeatedly (#8986)\n\n* support to instrument the same method repeatedly\n\n* fix wrong hand","date":"2021-01-12 10:35:24","modifiedFileCount":"32","status":"M","submitter":"Daming"},{"authorTime":"2021-01-15 10:40:24","codes":[{"authorDate":"2021-01-15 10:40:24","commitOrder":3,"curCode":"    public void assertMethod() {\n        ADVICE.beforeMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        ADVICE.afterMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        List<MockSpan> spans = collector.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertThat(spans.get(0).logEntries().size(), is(0));\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(JaegerConstants.DB_TYPE_VALUE));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-01-15 10:40:24","endLine":62,"groupId":"1854","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/63/8868798bc2944faadeac5b3ff711bedf7f9a32.src","preCode":"    public void assertMethod() {\n        MockAdviceTargetObject targetObject = new MockAdviceTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertThat(spans.get(0).logEntries().size(), is(0));\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-jaeger/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/jaeger/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2021-01-15 10:40:24","commitOrder":3,"curCode":"    public void assertExceptionHandle() {\n        ADVICE.beforeMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        ADVICE.onThrowing(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new IOException());\n        ADVICE.afterMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        List<MockSpan> spans = collector.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(JaegerConstants.ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(JaegerConstants.ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(JaegerConstants.DB_TYPE_VALUE));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-01-15 10:40:24","endLine":82,"groupId":"1855","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExceptionHandle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/63/8868798bc2944faadeac5b3ff711bedf7f9a32.src","preCode":"    public void assertExceptionHandle() {\n        MockAdviceTargetObject targetObject = new MockAdviceTargetObject();\n        Map<String, Object> extraMap = Maps.newHashMap();\n        extraMap.put(\"_root_span_\", null);\n        JDBCExecutionUnit executionUnit = mock(JDBCExecutionUnit.class);\n        when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\", new SQLUnit(\"select 1\", Lists.newArrayList())));\n        ADVICE.beforeMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        ADVICE.onThrowing(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new IOException());\n        ADVICE.afterMethod(targetObject, executeMethod, new Object[]{executionUnit, false, extraMap}, new MethodInvocationResult());\n        List<MockSpan> spans = tracer.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(\"sql\"));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-jaeger/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/jaeger/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"3d21ffcaa4b7aeb854496c403f46c0aa4ee6d611","commitMessage":"@@@rrefactor agent tracing plugin test (#9039)\n\n* refactor agent tracing plugin test\n\n* Update CommandExecutorTaskAdviceTest.java\n\nrename method\n\n* add license header","date":"2021-01-15 10:40:24","modifiedFileCount":"15","status":"M","submitter":"Daming"},{"authorTime":"2021-02-18 15:58:05","codes":[{"authorDate":"2021-02-18 15:58:05","commitOrder":4,"curCode":"    public void assertMethod() {\n        ADVICE.beforeMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        ADVICE.afterMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        List<MockSpan> spans = COLLECTOR.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertThat(spans.get(0).logEntries().size(), is(0));\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(JaegerConstants.DB_TYPE_VALUE));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-02-18 15:58:05","endLine":62,"groupId":"1854","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/67/eb3f616ae2a37f9a684d24e0895acc632ad72a.src","preCode":"    public void assertMethod() {\n        ADVICE.beforeMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        ADVICE.afterMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        List<MockSpan> spans = collector.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertThat(spans.get(0).logEntries().size(), is(0));\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(JaegerConstants.DB_TYPE_VALUE));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-jaeger/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/jaeger/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2021-02-18 15:58:05","commitOrder":4,"curCode":"    public void assertExceptionHandle() {\n        ADVICE.beforeMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        ADVICE.onThrowing(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new IOException());\n        ADVICE.afterMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        List<MockSpan> spans = COLLECTOR.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(JaegerConstants.ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(JaegerConstants.ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(JaegerConstants.DB_TYPE_VALUE));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-02-18 15:58:05","endLine":82,"groupId":"1855","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExceptionHandle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/67/eb3f616ae2a37f9a684d24e0895acc632ad72a.src","preCode":"    public void assertExceptionHandle() {\n        ADVICE.beforeMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        ADVICE.onThrowing(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new IOException());\n        ADVICE.afterMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        List<MockSpan> spans = collector.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(JaegerConstants.ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(JaegerConstants.ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(JaegerConstants.DB_TYPE_VALUE));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-jaeger/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/jaeger/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"ddc88a96c405bca47a8c611ce61af166657109b3","commitMessage":"@@@agent inspect code (#9425)\n\n* agent inspect code\n\n* fix checkstyle","date":"2021-02-18 15:58:05","modifiedFileCount":"19","status":"M","submitter":"xiaoyu"},{"authorTime":"2021-02-18 15:58:05","codes":[{"authorDate":"2021-07-27 13:57:46","commitOrder":5,"curCode":"    public void assertMethod() {\n        ADVICE.beforeMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        ADVICE.afterMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        List<MockSpan> spans = COLLECTOR.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertTrue(spans.get(0).logEntries().isEmpty());\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(JaegerConstants.DB_TYPE_VALUE));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-07-27 13:57:46","endLine":63,"groupId":"1010","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"assertMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/64/48406a4c8b9202ca976244d2fc85853a7803f8.src","preCode":"    public void assertMethod() {\n        ADVICE.beforeMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        ADVICE.afterMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        List<MockSpan> spans = COLLECTOR.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        Map<String, Object> tags = span.tags();\n        assertThat(spans.get(0).logEntries().size(), is(0));\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(JaegerConstants.DB_TYPE_VALUE));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-jaeger/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/jaeger/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2021-02-18 15:58:05","commitOrder":5,"curCode":"    public void assertExceptionHandle() {\n        ADVICE.beforeMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        ADVICE.onThrowing(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new IOException());\n        ADVICE.afterMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        List<MockSpan> spans = COLLECTOR.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(JaegerConstants.ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(JaegerConstants.ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(JaegerConstants.DB_TYPE_VALUE));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","date":"2021-02-18 15:58:05","endLine":82,"groupId":"1010","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExceptionHandle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/67/eb3f616ae2a37f9a684d24e0895acc632ad72a.src","preCode":"    public void assertExceptionHandle() {\n        ADVICE.beforeMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        ADVICE.onThrowing(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new IOException());\n        ADVICE.afterMethod(getTargetObject(), null, new Object[]{getExecutionUnit(), false, getExtraMap()}, new MethodInvocationResult());\n        List<MockSpan> spans = COLLECTOR.finishedSpans();\n        assertThat(spans.size(), is(1));\n        MockSpan span = spans.get(0);\n        List<MockSpan.LogEntry> entries = span.logEntries();\n        Map<String, ?> fields = entries.get(0).fields();\n        assertThat(fields.get(JaegerConstants.ErrorLogTagKeys.EVENT), is(\"error\"));\n        assertThat(fields.get(JaegerConstants.ErrorLogTagKeys.ERROR_KIND), is(\"java.io.IOException\"));\n        Map<String, Object> tags = span.tags();\n        assertThat(span.operationName(), is(\"/ShardingSphere/executeSQL/\"));\n        assertThat(tags.get(\"db.instance\"), is(\"mock.db\"));\n        assertThat(tags.get(\"db.type\"), is(JaegerConstants.DB_TYPE_VALUE));\n        assertThat(tags.get(\"span.kind\"), is(\"client\"));\n        assertThat(tags.get(\"db.statement\"), is(\"select 1\"));\n    }\n","realPath":"shardingsphere-agent/shardingsphere-agent-plugins/shardingsphere-agent-plugin-tracing/shardingsphere-agent-tracing-jaeger/src/test/java/org/apache/shardingsphere/agent/plugin/tracing/jaeger/advice/JDBCExecutorCallbackAdviceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"}],"commitId":"a2a03362cd71d2e11d4067f9215ca2bd344b5a5d","commitMessage":"@@@Use assertTrue(xxx.isEmpty()) to instead of assertThat(xxx.size().  is(0)) (#11531)\n\n","date":"2021-07-27 13:57:46","modifiedFileCount":"21","status":"M","submitter":"Liang Zhang"}]
