[{"authorTime":"2021-06-04 22:49:49","codes":[{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertRangeDoShardingWithPartTargets() {\n        List<String> availableTargetNames = Lists.newArrayList(\"t_order_0\", \"t_order_1\", \"t_order_2\", \"t_order_3\");\n        Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames, new RangeShardingValue<>(\"t_order\", \"order_id\", Range.closed(11L, 12L)));\n        assertThat(actual.size(), is(2));\n        assertTrue(actual.contains(\"t_order_3\"));\n        assertTrue(actual.contains(\"t_order_0\"));\n    }\n","date":"2021-06-04 22:49:49","endLine":65,"groupId":"8558","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertRangeDoShardingWithPartTargets","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/81/6939e2578c0ad2cd5f57a9fc51e22123e7597c.src","preCode":"    public void assertRangeDoShardingWithPartTargets() {\n        List<String> availableTargetNames = Lists.newArrayList(\"t_order_0\", \"t_order_1\", \"t_order_2\", \"t_order_3\");\n        Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames, new RangeShardingValue<>(\"t_order\", \"order_id\", Range.closed(11L, 12L)));\n        assertThat(actual.size(), is(2));\n        assertTrue(actual.contains(\"t_order_3\"));\n        assertTrue(actual.contains(\"t_order_0\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/algorithm/sharding/mod/ModShardingAlgorithmTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"},{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertRangeDoSharding() {\n        List<String> availableTargetNames = Lists.newArrayList(\"t_order_0\", \"t_order_1\", \"t_order_2\", \"t_order_3\");\n        Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames, new RangeShardingValue<>(\"t_order\", \"order_id\", Range.closed(2L, 15L)));\n        assertThat(actual.size(), is(3));\n        assertTrue(actual.contains(\"t_order_1\"));\n        assertTrue(actual.contains(\"t_order_2\"));\n        assertTrue(actual.contains(\"t_order_3\"));\n    }\n","date":"2021-06-04 22:49:49","endLine":59,"groupId":"8558","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRangeDoSharding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9a/0f7e1a7d3744af869c51bd3f010b51d2478aa9.src","preCode":"    public void assertRangeDoSharding() {\n        List<String> availableTargetNames = Lists.newArrayList(\"t_order_0\", \"t_order_1\", \"t_order_2\", \"t_order_3\");\n        Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames, new RangeShardingValue<>(\"t_order\", \"order_id\", Range.closed(2L, 15L)));\n        assertThat(actual.size(), is(3));\n        assertTrue(actual.contains(\"t_order_1\"));\n        assertTrue(actual.contains(\"t_order_2\"));\n        assertTrue(actual.contains(\"t_order_3\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/algorithm/sharding/range/BoundaryBasedRangeShardingAlgorithmTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"}],"commitId":"6b157b44d0336e4d9c61f940b0ec19c26758af84","commitMessage":"@@@Merge sharding feature to core module (#10662)\n\n* Merge dependencies\n\n* Merge sharding feature to api module\n\n* Merge sharding feature to core module","date":"2021-06-04 22:49:49","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-07-29 01:03:53","codes":[{"authorDate":"2021-07-29 01:03:53","commitOrder":2,"curCode":"    public void assertRangeDoShardingWithPartTargets() {\n        List<String> availableTargetNames = Arrays.asList(\"t_order_0\", \"t_order_1\", \"t_order_2\", \"t_order_3\");\n        Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames, new RangeShardingValue<>(\"t_order\", \"order_id\", Range.closed(11L, 12L)));\n        assertThat(actual.size(), is(2));\n        assertTrue(actual.contains(\"t_order_3\"));\n        assertTrue(actual.contains(\"t_order_0\"));\n    }\n","date":"2021-07-29 01:03:53","endLine":65,"groupId":"10568","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertRangeDoShardingWithPartTargets","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/26/0821f94cfa6c87f495db5cbc1d5d0c25b8ff29.src","preCode":"    public void assertRangeDoShardingWithPartTargets() {\n        List<String> availableTargetNames = Lists.newArrayList(\"t_order_0\", \"t_order_1\", \"t_order_2\", \"t_order_3\");\n        Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames, new RangeShardingValue<>(\"t_order\", \"order_id\", Range.closed(11L, 12L)));\n        assertThat(actual.size(), is(2));\n        assertTrue(actual.contains(\"t_order_3\"));\n        assertTrue(actual.contains(\"t_order_0\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/algorithm/sharding/mod/ModShardingAlgorithmTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2021-07-29 01:03:53","commitOrder":2,"curCode":"    public void assertRangeDoSharding() {\n        List<String> availableTargetNames = Arrays.asList(\"t_order_0\", \"t_order_1\", \"t_order_2\", \"t_order_3\");\n        Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames, new RangeShardingValue<>(\"t_order\", \"order_id\", Range.closed(2L, 15L)));\n        assertThat(actual.size(), is(3));\n        assertTrue(actual.contains(\"t_order_1\"));\n        assertTrue(actual.contains(\"t_order_2\"));\n        assertTrue(actual.contains(\"t_order_3\"));\n    }\n","date":"2021-07-29 01:03:53","endLine":59,"groupId":"10568","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertRangeDoSharding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/21/cbb27549b8af6164fc329fd03cab34efbb0dd8.src","preCode":"    public void assertRangeDoSharding() {\n        List<String> availableTargetNames = Lists.newArrayList(\"t_order_0\", \"t_order_1\", \"t_order_2\", \"t_order_3\");\n        Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames, new RangeShardingValue<>(\"t_order\", \"order_id\", Range.closed(2L, 15L)));\n        assertThat(actual.size(), is(3));\n        assertTrue(actual.contains(\"t_order_1\"));\n        assertTrue(actual.contains(\"t_order_2\"));\n        assertTrue(actual.contains(\"t_order_3\"));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/algorithm/sharding/range/BoundaryBasedRangeShardingAlgorithmTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"6d2d2ba7b05c29bce74525f0437e04b22a556f66","commitMessage":"@@@Use java raw new List/Set/Map to instead of guava (#11561)\n\n* Use java raw new Map to instead of guava\n\n* Use java raw new List to instead of guava\n\n* Use java raw new Set to instead of guava","date":"2021-07-29 01:03:53","modifiedFileCount":"78","status":"M","submitter":"Liang Zhang"}]
