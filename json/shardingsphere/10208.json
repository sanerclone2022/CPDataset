[{"authorTime":"2020-06-03 19:35:58","codes":[{"authorDate":"2020-05-22 15:07:52","commitOrder":3,"curCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfiguration), null);\n    }\n","date":"2020-05-22 15:07:52","endLine":40,"groupId":"7964","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b7/f336dcb465f74958fdc65274bdd2bd303617cb.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfiguration), null);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"NB"},{"authorDate":"2020-06-03 19:35:58","commitOrder":3,"curCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfiguration = new EncryptRuleConfiguration(getEncryptorConfiguration(), getEncryptTableRuleConfigurations());\n        Properties properties = new Properties();\n        properties.setProperty(\"sql.show\", \"true\");\n        properties.setProperty(\"query.with.cipher.column\", \"true\");\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfiguration, encryptRuleConfiguration), properties);\n    }\n","date":"2020-06-03 19:35:58","endLine":52,"groupId":"3404","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3d/1c79cb7b4580994ffb325482c4e321805dc513.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfiguration = new EncryptRuleConfiguration(getEncryptorConfiguration(), getEncryptTableRuleConfigurations());\n        Properties properties = new Properties();\n        properties.setProperty(\"sql.show\", \"true\");\n        properties.setProperty(\"query.with.cipher.column\", \"true\");\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfiguration, encryptRuleConfiguration), properties);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/EncryptShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"MB"}],"commitId":"d6b80a4786517e87a875ac5274a1563e0960e74b","commitMessage":"@@@Refactor Encrypt Configuration Java API (#5905)\n\n* Rename EncryptorRuleConfiguration to EncryptorConfiguration\n\n* Rename EncryptColumnRuleConfiguration to EncryptColumnConfiguration\n\n* remove @NoArgsConstructor of EncryptTableRuleConfiguration\n\n* refactor EncryptRuleConfiguration\n\n* refactor EncryptColumnConfiguration\n\n* rename EncryptColumnConfiguration.name\n\n* update doc\n\n* refactor YamlEncryptorConfiguration\n\n* rename EncryptColumnConfiguration.encryptorName\n\n* fix test case","date":"2020-06-03 19:35:58","modifiedFileCount":"21","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-06-04 16:29:29","codes":[{"authorDate":"2020-05-22 15:07:52","commitOrder":4,"curCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfiguration), null);\n    }\n","date":"2020-05-22 15:07:52","endLine":40,"groupId":"7964","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b7/f336dcb465f74958fdc65274bdd2bd303617cb.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfiguration), null);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"},{"authorDate":"2020-06-04 16:29:29","commitOrder":4,"curCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfiguration = new EncryptRuleConfiguration(getEncryptStrategyConfiguration(), getEncryptTableRuleConfigurations());\n        Properties properties = new Properties();\n        properties.setProperty(\"sql.show\", \"true\");\n        properties.setProperty(\"query.with.cipher.column\", \"true\");\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfiguration, encryptRuleConfiguration), properties);\n    }\n","date":"2020-06-04 16:29:29","endLine":52,"groupId":"3404","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e1/f27b662119e011d64077363aa33727b2b88296.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfiguration = new EncryptRuleConfiguration(getEncryptorConfiguration(), getEncryptTableRuleConfigurations());\n        Properties properties = new Properties();\n        properties.setProperty(\"sql.show\", \"true\");\n        properties.setProperty(\"query.with.cipher.column\", \"true\");\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfiguration, encryptRuleConfiguration), properties);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/EncryptShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"6534cd49343211472e85a7619978635016dbabbb","commitMessage":"@@@Split encryptor to encrypt strategy and encrypt algorithm (#5918)\n\n* rename EncryptColumnRuleConfiguration\n\n* rename EncryptStrategyConfiguration\n\n* rename EncryptStrategyConfiguration.encryptStrategies\n\n* rename Encryptor to EncryptAlgorithm\n\n* rename EncryptColumnRuleConfiguration.encryptStrategyName\n\n* rename all encrypts","date":"2020-06-04 16:29:29","modifiedFileCount":"42","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-06-08 19:08:57","codes":[{"authorDate":"2020-05-22 15:07:52","commitOrder":5,"curCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfiguration), null);\n    }\n","date":"2020-05-22 15:07:52","endLine":40,"groupId":"7964","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b7/f336dcb465f74958fdc65274bdd2bd303617cb.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfiguration), null);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"},{"authorDate":"2020-06-08 19:08:57","commitOrder":5,"curCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfiguration = new EncryptRuleConfiguration(getEncryptStrategyConfigurations(), getEncryptTableRuleConfigurations());\n        Properties properties = new Properties();\n        properties.setProperty(\"sql.show\", \"true\");\n        properties.setProperty(\"query.with.cipher.column\", \"true\");\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfiguration, encryptRuleConfiguration), properties);\n    }\n","date":"2020-06-08 19:08:57","endLine":53,"groupId":"8239","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8e/556b5fd8218ba6db936f203dda1f6c97e20ebf.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfiguration = new EncryptRuleConfiguration(getEncryptStrategyConfiguration(), getEncryptTableRuleConfigurations());\n        Properties properties = new Properties();\n        properties.setProperty(\"sql.show\", \"true\");\n        properties.setProperty(\"query.with.cipher.column\", \"true\");\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfiguration, encryptRuleConfiguration), properties);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/EncryptShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"e40adbdbf39c4ce1daf87c7a90b8758bcc4d9b33","commitMessage":"@@@Add RawEncryptStrategyConfiguration and SPIEncryptStrategyConfiguration (#5952)\n\n* Add RawEncryptStrategyConfiguration and SPIEncryptStrategyConfiguration\n\n* Add RawLoadBalanceStrategyConfiguration and SPILoadBalanceStrategyConfiguration\n\n* add StrategyConfiguration in infra\n\n* remove useless constructor of TypedSPIConfiguration\n\n* fix typo with MasterSlaveRule\n\n* split MasterSlaveLoadBalanceAlgorithm and SPIMasterSlaveLoadBalanceAlgorithm\n\n* split EncryptAlgorithm and SPIEncryptAlgorithm\n\n* Add ShardingSphereAlgorithmPostProcessor\n\n* for code style","date":"2020-06-08 19:08:57","modifiedFileCount":"59","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-06-10 17:43:23","codes":[{"authorDate":"2020-05-22 15:07:52","commitOrder":6,"curCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfiguration), null);\n    }\n","date":"2020-05-22 15:07:52","endLine":40,"groupId":"7964","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b7/f336dcb465f74958fdc65274bdd2bd303617cb.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfiguration), null);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"},{"authorDate":"2020-06-10 17:43:23","commitOrder":6,"curCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfiguration = new EncryptRuleConfiguration(getEncryptTableRuleConfigurations(), getEncryptAlgorithmConfigurations());\n        Properties properties = new Properties();\n        properties.setProperty(\"sql.show\", \"true\");\n        properties.setProperty(\"query.with.cipher.column\", \"true\");\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfiguration, encryptRuleConfiguration), properties);\n    }\n","date":"2020-06-10 17:43:23","endLine":53,"groupId":"8239","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0a/849a91256a78944a31387383489817d3bcda74.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfiguration = new EncryptRuleConfiguration(getEncryptStrategyConfigurations(), getEncryptTableRuleConfigurations());\n        Properties properties = new Properties();\n        properties.setProperty(\"sql.show\", \"true\");\n        properties.setProperty(\"query.with.cipher.column\", \"true\");\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfiguration, encryptRuleConfiguration), properties);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/EncryptShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"954ac884c599e85bc00cbb92e64dbb4d03767ca2","commitMessage":"@@@Determine Encrypt API (#5981)\n\n* Add ShardingSphereSPIAlgorithm\n\n* fix SPIQueryAssistedEncryptAlgorithm\n\n* refactor EncryptRuleConfiguration\n\n* rename org.apache.shardingsphere.encrypt.strategy to org.apache.shardingsphere.encrypt.algorithm\n\n* merge EncryptAlgorithm and SPIEncryptAlgorithm\n\n* Add EncryptAlgorithmFactoryBean\n\n* Merge SPILoadBalanceStrategyConfiguration and RawLoadBalanceStrategyConfiguration\n\n* Add MasterSlaveLoadBalanceAlgorithmFactoryBean\n\n* remove RawStrategyConfiguration\n\n* remove StrategyConfiguration\n\n* rename SPIStrategyConfiguration to StrategyConfiguration\n\n* remove StrategyConfiguration\n\n* rename EncryptStrategyConfiguration to EncryptAlgorithmConfiguration\n\n* refactor EncryptRuleConfiguration.encryptAlgorithms\n\n* rename EncryptRuleConfiguration.encryptors\n\n* rename AlgorithmProvidedEncryptRuleConfiguration.AlgorithmProvidedEncryptRuleConfiguration to encryptors\n\n* refactor yaml from encryptStrategies to encryptors\n\n* refactor yaml from encryptStrategies to encryptors\n\n* refactor org.apache.shardingsphere.encrypt.yaml package\n\n* fix test cases\n\n* refactor YamlEncryptRuleConfiguration\n\n* refactor EncryptRuleConfiguration\n\n* refactor Encrypt spring namespace\n\n* unify usage of encryptor\n\n* update docs","date":"2020-06-10 17:43:23","modifiedFileCount":"67","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-06-13 11:39:32","codes":[{"authorDate":"2020-05-22 15:07:52","commitOrder":7,"curCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfiguration), null);\n    }\n","date":"2020-05-22 15:07:52","endLine":40,"groupId":"7964","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b7/f336dcb465f74958fdc65274bdd2bd303617cb.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfiguration), null);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"},{"authorDate":"2020-06-13 11:39:32","commitOrder":7,"curCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfiguration = new EncryptRuleConfiguration(getEncryptTableRuleConfigurations(), getEncryptAlgorithmConfigurations());\n        Properties props = new Properties();\n        props.setProperty(\"sql.show\", \"true\");\n        props.setProperty(\"query.with.cipher.column\", \"true\");\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfiguration, encryptRuleConfiguration), props);\n    }\n","date":"2020-06-13 11:39:32","endLine":53,"groupId":"6446","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fc/f5e8761bf70ff04769f0851a965b801a58a1c9.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfiguration = new EncryptRuleConfiguration(getEncryptTableRuleConfigurations(), getEncryptAlgorithmConfigurations());\n        Properties properties = new Properties();\n        properties.setProperty(\"sql.show\", \"true\");\n        properties.setProperty(\"query.with.cipher.column\", \"true\");\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfiguration, encryptRuleConfiguration), properties);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/EncryptShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"75824a28d2ffe9387ccaf9849f4fbc91a0037257","commitMessage":"@@@Unify properties and props (#6019)\n\n* Unify properties and props\n\n* Unify properties and props\n\n* Merge branch 'master' into dev\n\n# Conflicts:\n#\tshardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/strategy/algorithm/sharding/ModuloShardingAlgorithm.java\n#\tshardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/type/standard/ShardingStandardRoutingEngine.java\n#\tshardingsphere-proxy/shardingsphere-proxy-bootstrap/src/main/java/org/apache/shardingsphere/proxy/Bootstrap.java","date":"2020-06-13 11:39:32","modifiedFileCount":"243","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-09-11 19:43:21","codes":[{"authorDate":"2020-05-22 15:07:52","commitOrder":8,"curCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfiguration), null);\n    }\n","date":"2020-05-22 15:07:52","endLine":40,"groupId":"7964","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b7/f336dcb465f74958fdc65274bdd2bd303617cb.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfiguration), null);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"},{"authorDate":"2020-09-11 19:43:21","commitOrder":8,"curCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfiguration = new EncryptRuleConfiguration(getEncryptTableRuleConfigurations(), getEncryptAlgorithmConfigurations());\n        Properties props = new Properties();\n        props.setProperty(ConfigurationPropertyKey.SQL_SHOW.getKey(), \"true\");\n        props.setProperty(ConfigurationPropertyKey.QUERY_WITH_CIPHER_COLUMN.getKey(), \"true\");\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfiguration, encryptRuleConfiguration), props);\n    }\n","date":"2020-09-11 19:43:21","endLine":54,"groupId":"6446","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/2a/4fd4104a4e191ac2c577a7fb18c35f4a211540.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfiguration = new EncryptRuleConfiguration(getEncryptTableRuleConfigurations(), getEncryptAlgorithmConfigurations());\n        Properties props = new Properties();\n        props.setProperty(\"sql.show\", \"true\");\n        props.setProperty(\"query.with.cipher.column\", \"true\");\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfiguration, encryptRuleConfiguration), props);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/EncryptShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"78d53ffa47c977662449115afccf79ee4969c92c","commitMessage":"@@@Merge pull request #7410 from kimmking/dev\n\nrefactor replace dot with hyphen ","date":"2020-09-11 19:43:21","modifiedFileCount":"13","status":"M","submitter":"Juan Pan(Trista)"},{"authorTime":"2020-09-16 15:23:30","codes":[{"authorDate":"2020-09-16 15:23:30","commitOrder":9,"curCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfiguration), null);\n    }\n","date":"2020-09-16 15:23:30","endLine":40,"groupId":"7964","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/03/a188333d45a381d98e06fe5c6b6fcd9354766e.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfiguration), null);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2020-09-16 15:23:30","commitOrder":9,"curCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfiguration = new EncryptRuleConfiguration(getEncryptTableRuleConfigurations(), getEncryptAlgorithmConfigurations());\n        Properties props = new Properties();\n        props.setProperty(ConfigurationPropertyKey.SQL_SHOW.getKey(), \"true\");\n        props.setProperty(ConfigurationPropertyKey.QUERY_WITH_CIPHER_COLUMN.getKey(), \"true\");\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfiguration, encryptRuleConfiguration), props);\n    }\n","date":"2020-09-16 15:23:30","endLine":54,"groupId":"6446","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ec/14b5f035f76cb38dd356b7e40d4fb5be38d20b.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfiguration = new EncryptRuleConfiguration(getEncryptTableRuleConfigurations(), getEncryptAlgorithmConfigurations());\n        Properties props = new Properties();\n        props.setProperty(ConfigurationPropertyKey.SQL_SHOW.getKey(), \"true\");\n        props.setProperty(ConfigurationPropertyKey.QUERY_WITH_CIPHER_COLUMN.getKey(), \"true\");\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonMap(\"ds\", \"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfiguration, encryptRuleConfiguration), props);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/EncryptShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"324cffdb2b1d57281a44740a211c960afffae980","commitMessage":"@@@reactor shadow api (#7474)\n\n* reactor shadow api\n\n* fix miss examples\n\nCo-authored-by: yanick.xia <yann.xia@daocloud.io>","date":"2020-09-16 15:23:30","modifiedFileCount":"21","status":"M","submitter":"Yanick.xia"},{"authorTime":"2020-10-04 15:31:28","codes":[{"authorDate":"2020-10-04 15:31:28","commitOrder":10,"curCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfig), null);\n    }\n","date":"2020-10-04 15:31:28","endLine":40,"groupId":"1737","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c8/51209ec779b563d6f2752f858b5aebcf651b89.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfiguration), null);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2020-10-04 15:31:28","commitOrder":10,"curCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfig = new EncryptRuleConfiguration(getEncryptTableRuleConfigurations(), getEncryptAlgorithmConfigurations());\n        Properties props = new Properties();\n        props.setProperty(ConfigurationPropertyKey.SQL_SHOW.getKey(), \"true\");\n        props.setProperty(ConfigurationPropertyKey.QUERY_WITH_CIPHER_COLUMN.getKey(), \"true\");\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfig, encryptRuleConfig), props);\n    }\n","date":"2020-10-04 15:31:28","endLine":54,"groupId":"13549","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/59/669cf0a5c448ee759341c613075f3e21553f56.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>();\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfiguration = new EncryptRuleConfiguration(getEncryptTableRuleConfigurations(), getEncryptAlgorithmConfigurations());\n        Properties props = new Properties();\n        props.setProperty(ConfigurationPropertyKey.SQL_SHOW.getKey(), \"true\");\n        props.setProperty(ConfigurationPropertyKey.QUERY_WITH_CIPHER_COLUMN.getKey(), \"true\");\n        ShadowRuleConfiguration shadowRuleConfiguration = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfiguration, encryptRuleConfiguration), props);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/EncryptShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"f349cef933891b95ba134e877b2c50f303d987e7","commitMessage":"@@@Rename configuration to config for variable name (#7695)\n\n","date":"2020-10-04 15:31:28","modifiedFileCount":"145","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-05-12 17:28:54","codes":[{"authorDate":"2020-10-04 15:31:28","commitOrder":11,"curCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfig), null);\n    }\n","date":"2020-10-04 15:31:28","endLine":40,"groupId":"1737","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c8/51209ec779b563d6f2752f858b5aebcf651b89.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfig), null);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"},{"authorDate":"2021-05-12 17:28:54","commitOrder":11,"curCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfig = new EncryptRuleConfiguration(getEncryptTableRuleConfigurations(), getEncryptAlgorithmConfigurations());\n        Properties props = new Properties();\n        props.setProperty(ConfigurationPropertyKey.SQL_SHOW.getKey(), \"true\");\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfig, encryptRuleConfig), props);\n    }\n","date":"2021-05-12 17:28:54","endLine":53,"groupId":"13549","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/01/d35cd3de9a90a393f4ce72770683fdd9804bd0.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfig = new EncryptRuleConfiguration(getEncryptTableRuleConfigurations(), getEncryptAlgorithmConfigurations());\n        Properties props = new Properties();\n        props.setProperty(ConfigurationPropertyKey.SQL_SHOW.getKey(), \"true\");\n        props.setProperty(ConfigurationPropertyKey.QUERY_WITH_CIPHER_COLUMN.getKey(), \"true\");\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfig, encryptRuleConfig), props);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/EncryptShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"3aedaaa99634e7e7a5d0a182db749f537873aa5f","commitMessage":"@@@Move queryWithCipherColumn configuration from props to encrypt rule (#10313)\n\n* Move queryWithCipherColumn configuration from props to encrypt rule\n\n* Update spring namespace\n\n* Update docs","date":"2021-05-12 17:28:54","modifiedFileCount":"19","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-05-12 17:28:54","codes":[{"authorDate":"2021-08-05 15:11:16","commitOrder":12,"curCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfig), null, DefaultSchema.LOGIC_NAME);\n    }\n","date":"2021-08-05 15:11:16","endLine":41,"groupId":"1737","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/06/334679f8e3c499e9c9055b356e6e2d9a694d51.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfig), null);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2021-05-12 17:28:54","commitOrder":12,"curCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfig = new EncryptRuleConfiguration(getEncryptTableRuleConfigurations(), getEncryptAlgorithmConfigurations());\n        Properties props = new Properties();\n        props.setProperty(ConfigurationPropertyKey.SQL_SHOW.getKey(), \"true\");\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfig, encryptRuleConfig), props);\n    }\n","date":"2021-05-12 17:28:54","endLine":53,"groupId":"13549","id":20,"instanceNumber":2,"isCurCommit":1,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/01/d35cd3de9a90a393f4ce72770683fdd9804bd0.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfig = new EncryptRuleConfiguration(getEncryptTableRuleConfigurations(), getEncryptAlgorithmConfigurations());\n        Properties props = new Properties();\n        props.setProperty(ConfigurationPropertyKey.SQL_SHOW.getKey(), \"true\");\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfig, encryptRuleConfig), props);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/EncryptShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"}],"commitId":"c5c5aaa7261d172f7f7bb65512c2b0f9b3155015","commitMessage":"@@@Schema name properties xml jdbc (#11655)\n\n* shardingsphere-jdbc-core yml config add schemaName\n\n* update\n\n* modify todo\n\n* update\n\n* properties and xml add schema name\n\n* reset code\n\n* add final\n\n* first letter capitalized","date":"2021-08-05 15:11:16","modifiedFileCount":"8","status":"M","submitter":"zhaojinchao"},{"authorTime":"2021-05-12 17:28:54","codes":[{"authorDate":"2021-08-09 00:30:18","commitOrder":13,"curCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfig), null);\n    }\n","date":"2021-08-09 00:30:18","endLine":40,"groupId":"10208","id":21,"instanceNumber":1,"isCurCommit":1,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/13/ebaf8b581ce11f981ff7cce8f37cba4ee904eb.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Collections.singleton(shadowRuleConfig), null, DefaultSchema.LOGIC_NAME);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2021-05-12 17:28:54","commitOrder":13,"curCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfig = new EncryptRuleConfiguration(getEncryptTableRuleConfigurations(), getEncryptAlgorithmConfigurations());\n        Properties props = new Properties();\n        props.setProperty(ConfigurationPropertyKey.SQL_SHOW.getKey(), \"true\");\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfig, encryptRuleConfig), props);\n    }\n","date":"2021-05-12 17:28:54","endLine":53,"groupId":"10208","id":22,"instanceNumber":2,"isCurCommit":1,"methodName":"getDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/01/d35cd3de9a90a393f4ce72770683fdd9804bd0.src","preCode":"    public DataSource getDataSource() throws SQLException {\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2, 1);\n        dataSourceMap.put(\"ds\", DataSourceUtil.createDataSource(\"demo_ds\"));\n        dataSourceMap.put(\"ds_0\", DataSourceUtil.createDataSource(\"shadow_demo_ds\"));\n        EncryptRuleConfiguration encryptRuleConfig = new EncryptRuleConfiguration(getEncryptTableRuleConfigurations(), getEncryptAlgorithmConfigurations());\n        Properties props = new Properties();\n        props.setProperty(ConfigurationPropertyKey.SQL_SHOW.getKey(), \"true\");\n        ShadowRuleConfiguration shadowRuleConfig = new ShadowRuleConfiguration(\"shadow\", Collections.singletonList(\"ds\"), Collections.singletonList(\"ds_0\"));\n        return ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, Arrays.asList(shadowRuleConfig, encryptRuleConfig), props);\n    }\n","realPath":"examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/EncryptShadowDatabasesConfiguration.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"}],"commitId":"1df6c3bf0e0938e9a15500dd5fa2447492cb9d4a","commitMessage":"@@@Fix compile error for example (#11707)\n\n","date":"2021-08-09 00:30:18","modifiedFileCount":"1","status":"M","submitter":"Liang Zhang"}]
