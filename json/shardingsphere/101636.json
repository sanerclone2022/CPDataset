[{"authorTime":"2020-10-22 16:47:44","codes":[{"authorDate":"2020-10-22 16:47:44","commitOrder":1,"curCode":"    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n        OracleCreateTableStatement result = new OracleCreateTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableName()));\n        if (null != ctx.createDefinitionClause()) {\n            CollectionValue<CreateDefinitionSegment> createDefinitions = (CollectionValue<CreateDefinitionSegment>) visit(ctx.createDefinitionClause());\n            for (CreateDefinitionSegment each : createDefinitions.getValue()) {\n                if (each instanceof ColumnDefinitionSegment) {\n                    result.getColumnDefinitions().add((ColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":88,"groupId":"10641","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"visitCreateTable","params":"(finalCreateTableContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a7/4d52be93e05813661bd7e7bd4869a5cb986773.src","preCode":"    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n        OracleCreateTableStatement result = new OracleCreateTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableName()));\n        if (null != ctx.createDefinitionClause()) {\n            CollectionValue<CreateDefinitionSegment> createDefinitions = (CollectionValue<CreateDefinitionSegment>) visit(ctx.createDefinitionClause());\n            for (CreateDefinitionSegment each : createDefinitions.getValue()) {\n                if (each instanceof ColumnDefinitionSegment) {\n                    result.getColumnDefinitions().add((ColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-oracle/src/main/java/org/apache/shardingsphere/sql/parser/oracle/visitor/statement/impl/OracleDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"},{"authorDate":"2020-10-22 16:47:44","commitOrder":1,"curCode":"    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n        PostgreSQLCreateTableStatement result = new PostgreSQLCreateTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableName()));\n        result.setNotExisted(null != ctx.tableNotExistClause());\n        if (null != ctx.createDefinitionClause()) {\n            CollectionValue<CreateDefinitionSegment> createDefinitions = (CollectionValue<CreateDefinitionSegment>) visit(ctx.createDefinitionClause());\n            for (CreateDefinitionSegment each : createDefinitions.getValue()) {\n                if (each instanceof ColumnDefinitionSegment) {\n                    result.getColumnDefinitions().add((ColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":115,"groupId":"10641","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCreateTable","params":"(finalCreateTableContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/fd/54293d12a8d03552cd285a0c05745abb148348.src","preCode":"    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n        PostgreSQLCreateTableStatement result = new PostgreSQLCreateTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableName()));\n        result.setNotExisted(null != ctx.tableNotExistClause());\n        if (null != ctx.createDefinitionClause()) {\n            CollectionValue<CreateDefinitionSegment> createDefinitions = (CollectionValue<CreateDefinitionSegment>) visit(ctx.createDefinitionClause());\n            for (CreateDefinitionSegment each : createDefinitions.getValue()) {\n                if (each instanceof ColumnDefinitionSegment) {\n                    result.getColumnDefinitions().add((ColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/java/org/apache/shardingsphere/sql/parser/postgresql/visitor/statement/impl/PostgreSQLDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"}],"commitId":"dca1684798205a6efd0d94b91aa1d3f86c8baefb","commitMessage":"@@@Add Statement SQL SQLVisitor (#7885)\n\n","date":"2020-10-22 16:47:44","modifiedFileCount":"7","status":"B","submitter":"Juan Pan(Trista)"},{"authorTime":"2021-05-29 15:03:40","codes":[{"authorDate":"2020-10-22 16:47:44","commitOrder":2,"curCode":"    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n        OracleCreateTableStatement result = new OracleCreateTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableName()));\n        if (null != ctx.createDefinitionClause()) {\n            CollectionValue<CreateDefinitionSegment> createDefinitions = (CollectionValue<CreateDefinitionSegment>) visit(ctx.createDefinitionClause());\n            for (CreateDefinitionSegment each : createDefinitions.getValue()) {\n                if (each instanceof ColumnDefinitionSegment) {\n                    result.getColumnDefinitions().add((ColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2020-10-22 16:47:44","endLine":88,"groupId":"101636","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"visitCreateTable","params":"(finalCreateTableContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a7/4d52be93e05813661bd7e7bd4869a5cb986773.src","preCode":"    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n        OracleCreateTableStatement result = new OracleCreateTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableName()));\n        if (null != ctx.createDefinitionClause()) {\n            CollectionValue<CreateDefinitionSegment> createDefinitions = (CollectionValue<CreateDefinitionSegment>) visit(ctx.createDefinitionClause());\n            for (CreateDefinitionSegment each : createDefinitions.getValue()) {\n                if (each instanceof ColumnDefinitionSegment) {\n                    result.getColumnDefinitions().add((ColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-oracle/src/main/java/org/apache/shardingsphere/sql/parser/oracle/visitor/statement/impl/OracleDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"},{"authorDate":"2021-05-29 15:03:40","commitOrder":2,"curCode":"    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n        PostgreSQLCreateTableStatement result = new PostgreSQLCreateTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableName()));\n        result.setContainsNotExistClause(null != ctx.notExistClause());\n        if (null != ctx.createDefinitionClause()) {\n            CollectionValue<CreateDefinitionSegment> createDefinitions = (CollectionValue<CreateDefinitionSegment>) visit(ctx.createDefinitionClause());\n            for (CreateDefinitionSegment each : createDefinitions.getValue()) {\n                if (each instanceof ColumnDefinitionSegment) {\n                    result.getColumnDefinitions().add((ColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-05-29 15:03:40","endLine":138,"groupId":"101636","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCreateTable","params":"(finalCreateTableContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/90/e4a5e6f30a4755b7d9bd80ce6b6a789b7cb457.src","preCode":"    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n        PostgreSQLCreateTableStatement result = new PostgreSQLCreateTableStatement();\n        result.setTable((SimpleTableSegment) visit(ctx.tableName()));\n        result.setNotExisted(null != ctx.tableNotExistClause());\n        if (null != ctx.createDefinitionClause()) {\n            CollectionValue<CreateDefinitionSegment> createDefinitions = (CollectionValue<CreateDefinitionSegment>) visit(ctx.createDefinitionClause());\n            for (CreateDefinitionSegment each : createDefinitions.getValue()) {\n                if (each instanceof ColumnDefinitionSegment) {\n                    result.getColumnDefinitions().add((ColumnDefinitionSegment) each);\n                } else if (each instanceof ConstraintDefinitionSegment) {\n                    result.getConstraintDefinitions().add((ConstraintDefinitionSegment) each);\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/java/org/apache/shardingsphere/sql/parser/postgresql/visitor/statement/impl/PostgreSQLDDLStatementSQLVisitor.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"}],"commitId":"b79b994442d39c10bcc1a8e949515b485b227280","commitMessage":"@@@optimize drop table & drop index post validate logic (#10540)\n\n* optimize drop table & drop index post validate logic\n\n* modify variable name\n\n* fix rewrite test case","date":"2021-05-29 15:03:40","modifiedFileCount":"23","status":"M","submitter":"Zhengqiang Duan"}]
