[{"authorTime":"2021-06-05 16:48:03","codes":[{"authorDate":"2021-06-05 16:48:03","commitOrder":1,"curCode":"    private void addAssistedQueryAssignment(final String tableName, final AssignmentSegment assignmentSegment, final EncryptLiteralAssignmentToken token) {\n        getEncryptRule().findAssistedQueryColumn(tableName, assignmentSegment.getColumn().getIdentifier().getValue()).ifPresent(assistedQueryColumn -> {\n            Object originalValue = ((LiteralExpressionSegment) assignmentSegment.getValue()).getLiterals();\n            Object assistedQueryValue = getEncryptRule().getEncryptAssistedQueryValues(tableName, assignmentSegment.getColumn().getIdentifier().getValue(), Collections.singletonList(originalValue))\n                    .iterator().next();\n            token.addAssignment(assistedQueryColumn, assistedQueryValue);\n        });\n    }\n","date":"2021-06-05 16:48:03","endLine":122,"groupId":"13135","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addAssistedQueryAssignment","params":"(finalStringtableName@finalAssignmentSegmentassignmentSegment@finalEncryptLiteralAssignmentTokentoken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ce/9f614430300cb622a6a52131be7464f95992f5.src","preCode":"    private void addAssistedQueryAssignment(final String tableName, final AssignmentSegment assignmentSegment, final EncryptLiteralAssignmentToken token) {\n        getEncryptRule().findAssistedQueryColumn(tableName, assignmentSegment.getColumn().getIdentifier().getValue()).ifPresent(assistedQueryColumn -> {\n            Object originalValue = ((LiteralExpressionSegment) assignmentSegment.getValue()).getLiterals();\n            Object assistedQueryValue = getEncryptRule().getEncryptAssistedQueryValues(tableName, assignmentSegment.getColumn().getIdentifier().getValue(), Collections.singletonList(originalValue))\n                    .iterator().next();\n            token.addAssignment(assistedQueryColumn, assistedQueryValue);\n        });\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptInsertOnUpdateTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"},{"authorDate":"2021-06-05 16:48:03","commitOrder":1,"curCode":"    private void addAssistedQueryAssignment(final String tableName, final AssignmentSegment assignmentSegment, final EncryptLiteralAssignmentToken token) {\n        Object originalValue = ((LiteralExpressionSegment) assignmentSegment.getValue()).getLiterals();\n        Optional<String> assistedQueryColumn = getEncryptRule().findAssistedQueryColumn(tableName, assignmentSegment.getColumn().getIdentifier().getValue());\n        assistedQueryColumn.ifPresent(s -> {\n            Object assistedQueryValue = getEncryptRule().getEncryptAssistedQueryValues(\n                    tableName, assignmentSegment.getColumn().getIdentifier().getValue(), Collections.singletonList(originalValue)).iterator().next();\n            token.addAssignment(s, assistedQueryValue);\n        });\n    }\n","date":"2021-06-05 16:48:03","endLine":129,"groupId":"6770","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addAssistedQueryAssignment","params":"(finalStringtableName@finalAssignmentSegmentassignmentSegment@finalEncryptLiteralAssignmentTokentoken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/55/931b678fe1a3b8c793c12d3187b47fc07f9fcf.src","preCode":"    private void addAssistedQueryAssignment(final String tableName, final AssignmentSegment assignmentSegment, final EncryptLiteralAssignmentToken token) {\n        Object originalValue = ((LiteralExpressionSegment) assignmentSegment.getValue()).getLiterals();\n        Optional<String> assistedQueryColumn = getEncryptRule().findAssistedQueryColumn(tableName, assignmentSegment.getColumn().getIdentifier().getValue());\n        assistedQueryColumn.ifPresent(s -> {\n            Object assistedQueryValue = getEncryptRule().getEncryptAssistedQueryValues(\n                    tableName, assignmentSegment.getColumn().getIdentifier().getValue(), Collections.singletonList(originalValue)).iterator().next();\n            token.addAssignment(s, assistedQueryValue);\n        });\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptAssignmentTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"B"}],"commitId":"78da9d03eb0ae28c28d4d8f4f45f84303a69986e","commitMessage":"@@@Merge encrypt feature to core module (#10667)\n\n* Merge encrypt feature to core module\n\n* Merge encrypt feature to core module\n\n* Merge encrypt feature to core module","date":"2021-06-05 16:48:03","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-08-22 12:23:28","codes":[{"authorDate":"2021-08-22 12:23:28","commitOrder":2,"curCode":"    private void addAssistedQueryAssignment(final String tableName, final AssignmentSegment assignmentSegment, final EncryptLiteralAssignmentToken token) {\n        getEncryptRule().findAssistedQueryColumn(tableName, assignmentSegment.getColumns().get(0).getIdentifier().getValue()).ifPresent(assistedQueryColumn -> {\n            Object originalValue = ((LiteralExpressionSegment) assignmentSegment.getValue()).getLiterals();\n            Object assistedQueryValue = getEncryptRule()\n                    .getEncryptAssistedQueryValues(tableName, assignmentSegment.getColumns().get(0).getIdentifier().getValue(), Collections.singletonList(originalValue))\n                    .iterator().next();\n            token.addAssignment(assistedQueryColumn, assistedQueryValue);\n        });\n    }\n","date":"2021-08-22 12:23:28","endLine":123,"groupId":"6034","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addAssistedQueryAssignment","params":"(finalStringtableName@finalAssignmentSegmentassignmentSegment@finalEncryptLiteralAssignmentTokentoken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/66/ca4eee61a7667fcb80101051d120d03c2752c2.src","preCode":"    private void addAssistedQueryAssignment(final String tableName, final AssignmentSegment assignmentSegment, final EncryptLiteralAssignmentToken token) {\n        getEncryptRule().findAssistedQueryColumn(tableName, assignmentSegment.getColumn().getIdentifier().getValue()).ifPresent(assistedQueryColumn -> {\n            Object originalValue = ((LiteralExpressionSegment) assignmentSegment.getValue()).getLiterals();\n            Object assistedQueryValue = getEncryptRule().getEncryptAssistedQueryValues(tableName, assignmentSegment.getColumn().getIdentifier().getValue(), Collections.singletonList(originalValue))\n                    .iterator().next();\n            token.addAssignment(assistedQueryColumn, assistedQueryValue);\n        });\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptInsertOnUpdateTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2021-08-22 12:23:28","commitOrder":2,"curCode":"    private void addAssistedQueryAssignment(final String tableName, final AssignmentSegment assignmentSegment, final EncryptLiteralAssignmentToken token) {\n        Object originalValue = ((LiteralExpressionSegment) assignmentSegment.getValue()).getLiterals();\n        Optional<String> assistedQueryColumn = getEncryptRule().findAssistedQueryColumn(tableName, assignmentSegment.getColumns().get(0).getIdentifier().getValue());\n        assistedQueryColumn.ifPresent(s -> {\n            Object assistedQueryValue = getEncryptRule().getEncryptAssistedQueryValues(\n                    tableName, assignmentSegment.getColumns().get(0).getIdentifier().getValue(), Collections.singletonList(originalValue)).iterator().next();\n            token.addAssignment(s, assistedQueryValue);\n        });\n    }\n","date":"2021-08-22 12:23:28","endLine":129,"groupId":"4276","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addAssistedQueryAssignment","params":"(finalStringtableName@finalAssignmentSegmentassignmentSegment@finalEncryptLiteralAssignmentTokentoken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c9/898d81ec22062d6a11cc3cbbe98277e064c0a4.src","preCode":"    private void addAssistedQueryAssignment(final String tableName, final AssignmentSegment assignmentSegment, final EncryptLiteralAssignmentToken token) {\n        Object originalValue = ((LiteralExpressionSegment) assignmentSegment.getValue()).getLiterals();\n        Optional<String> assistedQueryColumn = getEncryptRule().findAssistedQueryColumn(tableName, assignmentSegment.getColumn().getIdentifier().getValue());\n        assistedQueryColumn.ifPresent(s -> {\n            Object assistedQueryValue = getEncryptRule().getEncryptAssistedQueryValues(\n                    tableName, assignmentSegment.getColumn().getIdentifier().getValue(), Collections.singletonList(originalValue)).iterator().next();\n            token.addAssignment(s, assistedQueryValue);\n        });\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptAssignmentTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"3c51144dafb300617a9a84558b6d87704f826c6a","commitMessage":"@@@Add Oracle SQL - Update statement (#11692)\n\n* add oracle update definition\n\n* add multi-column in an assignment\n\n* make AssignmentSegment into abstract.  define new ColumnAssignmentSegment and refactor AssignmentSegment related code.\n\n* utilize ColumnAssignmentSegment to create an instance type of AssignmentSegment\n\n* set ColumnAssignmentSegment's columns field to final and uninitialize it\n\n* remove commented code","date":"2021-08-22 12:23:28","modifiedFileCount":"27","status":"M","submitter":"Thanoshan MV"},{"authorTime":"2021-09-15 16:43:12","codes":[{"authorDate":"2021-09-15 16:43:12","commitOrder":3,"curCode":"    private void addAssistedQueryAssignment(final String schemaName, final String tableName, final AssignmentSegment assignmentSegment, final EncryptLiteralAssignmentToken token) {\n        getEncryptRule().findAssistedQueryColumn(tableName, assignmentSegment.getColumns().get(0).getIdentifier().getValue()).ifPresent(assistedQueryColumn -> {\n            Object originalValue = ((LiteralExpressionSegment) assignmentSegment.getValue()).getLiterals();\n            Object assistedQueryValue = getEncryptRule()\n                    .getEncryptAssistedQueryValues(schemaName, tableName, assignmentSegment.getColumns().get(0).getIdentifier().getValue(), Collections.singletonList(originalValue))\n                    .iterator().next();\n            token.addAssignment(assistedQueryColumn, assistedQueryValue);\n        });\n    }\n","date":"2021-09-15 16:43:12","endLine":125,"groupId":"1084","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"addAssistedQueryAssignment","params":"(finalStringschemaName@finalStringtableName@finalAssignmentSegmentassignmentSegment@finalEncryptLiteralAssignmentTokentoken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/24/4b27f136b97525a32bdc1de9d2b69e547341a0.src","preCode":"    private void addAssistedQueryAssignment(final String tableName, final AssignmentSegment assignmentSegment, final EncryptLiteralAssignmentToken token) {\n        getEncryptRule().findAssistedQueryColumn(tableName, assignmentSegment.getColumns().get(0).getIdentifier().getValue()).ifPresent(assistedQueryColumn -> {\n            Object originalValue = ((LiteralExpressionSegment) assignmentSegment.getValue()).getLiterals();\n            Object assistedQueryValue = getEncryptRule()\n                    .getEncryptAssistedQueryValues(tableName, assignmentSegment.getColumns().get(0).getIdentifier().getValue(), Collections.singletonList(originalValue))\n                    .iterator().next();\n            token.addAssignment(assistedQueryColumn, assistedQueryValue);\n        });\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptInsertOnUpdateTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2021-09-15 16:43:12","commitOrder":3,"curCode":"    private void addAssistedQueryAssignment(final String schemaName, final String tableName, final AssignmentSegment assignmentSegment, final EncryptLiteralAssignmentToken token) {\n        Object originalValue = ((LiteralExpressionSegment) assignmentSegment.getValue()).getLiterals();\n        Optional<String> assistedQueryColumn = getEncryptRule().findAssistedQueryColumn(tableName, assignmentSegment.getColumns().get(0).getIdentifier().getValue());\n        assistedQueryColumn.ifPresent(s -> {\n            Object assistedQueryValue = getEncryptRule().getEncryptAssistedQueryValues(schemaName, \n                    tableName, assignmentSegment.getColumns().get(0).getIdentifier().getValue(), Collections.singletonList(originalValue)).iterator().next();\n            token.addAssignment(s, assistedQueryValue);\n        });\n    }\n","date":"2021-09-15 16:43:12","endLine":132,"groupId":"1084","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"addAssistedQueryAssignment","params":"(finalStringschemaName@finalStringtableName@finalAssignmentSegmentassignmentSegment@finalEncryptLiteralAssignmentTokentoken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/20/3cc51d5690f552dfa1dfc7d2d8de9da6c2a31c.src","preCode":"    private void addAssistedQueryAssignment(final String tableName, final AssignmentSegment assignmentSegment, final EncryptLiteralAssignmentToken token) {\n        Object originalValue = ((LiteralExpressionSegment) assignmentSegment.getValue()).getLiterals();\n        Optional<String> assistedQueryColumn = getEncryptRule().findAssistedQueryColumn(tableName, assignmentSegment.getColumns().get(0).getIdentifier().getValue());\n        assistedQueryColumn.ifPresent(s -> {\n            Object assistedQueryValue = getEncryptRule().getEncryptAssistedQueryValues(\n                    tableName, assignmentSegment.getColumns().get(0).getIdentifier().getValue(), Collections.singletonList(originalValue)).iterator().next();\n            token.addAssignment(s, assistedQueryValue);\n        });\n    }\n","realPath":"shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptAssignmentTokenGenerator.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"}],"commitId":"619b0a53d69772fe1035482275430e1baa9d7743","commitMessage":"@@@using SchemaAvailable & EncryptPropertiesBuilder to pass schema. owner. table. column value into EncryptAlgorithm (#12372)\n\n* modify .gitignore to ignore .factorypath\n\n* using SchemaAvailable & EncryptPropertiesBuilder to pass schema. owner. table. column value into EncryptAlgorithm\n\n* fix testcase of EncryptAlgorithmMetaDataTest\n\n* refactor on process multiple tables\n\n* revert on process multiple tables\n\n* revert changes on EncryptProjectionTokenGenerator\n\n* remove unused imports\n\n* fix bug: properties override while set props in findEncryptor\n\n* fix bug: properties override while set props in findEncryptor\n\n* remove unused imports\n\n* fix bug: properties override while set props in findEncryptor\n\n* revoke pass schemaName on ddl statement\n\n* using simplify new properties to set schema.  owner.  table and column\n\n* fix to match develop rule\n\n* change method name to simpilify\n\n* implements schemaAvailable from DMLStatementContext\n\n* performance improvement and rat fix\n\n* revert schemaName on create and alter table statement\n\n* remove unused import","date":"2021-09-15 16:43:12","modifiedFileCount":"29","status":"M","submitter":"cheese8"}]
