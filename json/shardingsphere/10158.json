[{"authorTime":"2020-06-12 16:34:42","codes":[{"authorDate":"2020-06-12 16:34:42","commitOrder":1,"curCode":"    private ShardingRuleConfiguration createShardingRuleConfiguration() {\n        ShardingRuleConfiguration result = new ShardingRuleConfiguration();\n        result.getTables().add(getOrderTableRuleConfiguration());\n        result.getTables().add(getOrderItemTableRuleConfiguration());\n        result.getBindingTableGroups().add(\"t_order, t_order_item\");\n        result.getBroadcastTables().add(\"t_address\");\n        result.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"order_id\", new StandardModuloShardingTableAlgorithm()));\n        result.getKeyGenerators().put(\"snowflake\", new KeyGenerateAlgorithmConfiguration(\"SNOWFLAKE\", getProperties()));\n        return result;\n    }\n","date":"2020-06-12 16:34:42","endLine":53,"groupId":"365","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createShardingRuleConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/84/bbf99a655409d9f603c395f55e7f06ccc09f41.src","preCode":"    private ShardingRuleConfiguration createShardingRuleConfiguration() {\n        ShardingRuleConfiguration result = new ShardingRuleConfiguration();\n        result.getTables().add(getOrderTableRuleConfiguration());\n        result.getTables().add(getOrderItemTableRuleConfiguration());\n        result.getBindingTableGroups().add(\"t_order, t_order_item\");\n        result.getBroadcastTables().add(\"t_address\");\n        result.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"order_id\", new StandardModuloShardingTableAlgorithm()));\n        result.getKeyGenerators().put(\"snowflake\", new KeyGenerateAlgorithmConfiguration(\"SNOWFLAKE\", getProperties()));\n        return result;\n    }\n","realPath":"examples/shardingsphere-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/config/ShardingTablesConfigurationPrecise.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2020-06-12 16:34:42","commitOrder":1,"curCode":"    private ShardingRuleConfiguration createShardingRuleConfiguration() {\n        ShardingRuleConfiguration result = new ShardingRuleConfiguration();\n        result.getTables().add(getOrderTableRuleConfiguration());\n        result.getTables().add(getOrderItemTableRuleConfiguration());\n        result.getBindingTableGroups().add(\"t_order, t_order_item\");\n        result.getBroadcastTables().add(\"t_address\");\n        result.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"order_id\", new StandardModuloShardingTableAlgorithm()));\n        result.getKeyGenerators().put(\"snowflake\", new KeyGenerateAlgorithmConfiguration(\"SNOWFLAKE\", getProperties()));\n        return result;\n    }\n","date":"2020-06-12 16:34:42","endLine":53,"groupId":"365","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createShardingRuleConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/9f/049da3ffd6c096b27af6a3b2245b9286d241f0.src","preCode":"    private ShardingRuleConfiguration createShardingRuleConfiguration() {\n        ShardingRuleConfiguration result = new ShardingRuleConfiguration();\n        result.getTables().add(getOrderTableRuleConfiguration());\n        result.getTables().add(getOrderItemTableRuleConfiguration());\n        result.getBindingTableGroups().add(\"t_order, t_order_item\");\n        result.getBroadcastTables().add(\"t_address\");\n        result.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"order_id\", new StandardModuloShardingTableAlgorithm()));\n        result.getKeyGenerators().put(\"snowflake\", new KeyGenerateAlgorithmConfiguration(\"SNOWFLAKE\", getProperties()));\n        return result;\n    }\n","realPath":"examples/shardingsphere-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/config/ShardingTablesConfigurationRange.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"}],"commitId":"b200ed8e6833ebdfa95f88f7cbd1b16af1f65d16","commitMessage":"@@@Refactor key generator api (#6010)\n\n* rename KeyGeneratorConfiguration.algorithm\n\n* rename KeyGenerateStrategyConfiguration\n\n* refactor org.apache.shardingsphere.sharding.api.config.strategy package\n\n* add builder package\n\n* refactor key generator api\n\n* refactor key generator api\n\n* unify props and properties","date":"2020-06-12 16:34:42","modifiedFileCount":"79","status":"B","submitter":"Liang Zhang"},{"authorTime":"2020-06-14 18:29:20","codes":[{"authorDate":"2020-06-14 18:29:20","commitOrder":2,"curCode":"    private ShardingRuleConfiguration createShardingRuleConfiguration() {\n        ShardingRuleConfiguration result = new ShardingRuleConfiguration();\n        result.getTables().add(getOrderTableRuleConfiguration());\n        result.getTables().add(getOrderItemTableRuleConfiguration());\n        result.getBindingTableGroups().add(\"t_order, t_order_item\");\n        result.getBroadcastTables().add(\"t_address\");\n        result.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"order_id\", \"standard_test_tbl\"));\n        result.getShardingAlgorithms() .put(\"standard_test_tbl\", new ShardingAlgorithmConfiguration(\"STANDARD_TEST_TBL\", new Properties()));\n        result.getKeyGenerators().put(\"snowflake\", new KeyGenerateAlgorithmConfiguration(\"SNOWFLAKE\", getProperties()));\n        return result;\n    }\n","date":"2020-06-14 18:29:20","endLine":54,"groupId":"2461","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createShardingRuleConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/38/c8c80e1c12a4c547e741429aa9946a9e018aa6.src","preCode":"    private ShardingRuleConfiguration createShardingRuleConfiguration() {\n        ShardingRuleConfiguration result = new ShardingRuleConfiguration();\n        result.getTables().add(getOrderTableRuleConfiguration());\n        result.getTables().add(getOrderItemTableRuleConfiguration());\n        result.getBindingTableGroups().add(\"t_order, t_order_item\");\n        result.getBroadcastTables().add(\"t_address\");\n        result.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"order_id\", new StandardModuloShardingTableAlgorithm()));\n        result.getKeyGenerators().put(\"snowflake\", new KeyGenerateAlgorithmConfiguration(\"SNOWFLAKE\", getProperties()));\n        return result;\n    }\n","realPath":"examples/shardingsphere-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/config/ShardingTablesConfigurationPrecise.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2020-06-14 18:29:20","commitOrder":2,"curCode":"    private ShardingRuleConfiguration createShardingRuleConfiguration() {\n        ShardingRuleConfiguration result = new ShardingRuleConfiguration();\n        result.getTables().add(getOrderTableRuleConfiguration());\n        result.getTables().add(getOrderItemTableRuleConfiguration());\n        result.getBindingTableGroups().add(\"t_order, t_order_item\");\n        result.getBroadcastTables().add(\"t_address\");\n        result.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"order_id\", \"standard_test_tbl\"));\n        result.getShardingAlgorithms() .put(\"standard_test_tbl\", new ShardingAlgorithmConfiguration(\"STANDARD_TEST_TBL\", new Properties()));\n        result.getKeyGenerators().put(\"snowflake\", new KeyGenerateAlgorithmConfiguration(\"SNOWFLAKE\", getProperties()));\n        return result;\n    }\n","date":"2020-06-14 18:29:20","endLine":54,"groupId":"2461","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createShardingRuleConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ab/771b8e7c4eaefa44568fd8999ee2d03f5561c0.src","preCode":"    private ShardingRuleConfiguration createShardingRuleConfiguration() {\n        ShardingRuleConfiguration result = new ShardingRuleConfiguration();\n        result.getTables().add(getOrderTableRuleConfiguration());\n        result.getTables().add(getOrderItemTableRuleConfiguration());\n        result.getBindingTableGroups().add(\"t_order, t_order_item\");\n        result.getBroadcastTables().add(\"t_address\");\n        result.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"order_id\", new StandardModuloShardingTableAlgorithm()));\n        result.getKeyGenerators().put(\"snowflake\", new KeyGenerateAlgorithmConfiguration(\"SNOWFLAKE\", getProperties()));\n        return result;\n    }\n","realPath":"examples/shardingsphere-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/config/ShardingTablesConfigurationRange.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"ad6c97b5ff97c7ed37cece0ef40f1c53dc504a5e","commitMessage":"@@@Determine sharding algorithm API (#6031)\n\n* code style for ShardingAlgorithm\n\n* Determine Sharding Java API\n\n* refactor ShardingRule\n\n* Determine YAML configuration for sharding algorithm\n\n* Determine SpringBoot configuration for sharding algorithm\n\n* fix test cases\n\n* remove useless ShardingStrategyBeanDefinition\n\n* Fix spring namespace's problems\n\n* Fix test cases\n\n* Fix test cases","date":"2020-06-14 18:29:20","modifiedFileCount":"75","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-06-14 22:11:48","codes":[{"authorDate":"2020-06-14 22:11:48","commitOrder":3,"curCode":"    private ShardingRuleConfiguration createShardingRuleConfiguration() {\n        ShardingRuleConfiguration result = new ShardingRuleConfiguration();\n        result.getTables().add(getOrderTableRuleConfiguration());\n        result.getTables().add(getOrderItemTableRuleConfiguration());\n        result.getBindingTableGroups().add(\"t_order, t_order_item\");\n        result.getBroadcastTables().add(\"t_address\");\n        result.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"order_id\", \"standard_test_tbl\"));\n        result.getShardingAlgorithms() .put(\"standard_test_tbl\", new ShardingSphereAlgorithmConfiguration(\"STANDARD_TEST_TBL\", new Properties()));\n        result.getKeyGenerators().put(\"snowflake\", new ShardingSphereAlgorithmConfiguration(\"SNOWFLAKE\", getProperties()));\n        return result;\n    }\n","date":"2020-06-14 22:11:48","endLine":53,"groupId":"10158","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createShardingRuleConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/4d/af3ecb8907967532bbd90c17e00d3477ef9b5e.src","preCode":"    private ShardingRuleConfiguration createShardingRuleConfiguration() {\n        ShardingRuleConfiguration result = new ShardingRuleConfiguration();\n        result.getTables().add(getOrderTableRuleConfiguration());\n        result.getTables().add(getOrderItemTableRuleConfiguration());\n        result.getBindingTableGroups().add(\"t_order, t_order_item\");\n        result.getBroadcastTables().add(\"t_address\");\n        result.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"order_id\", \"standard_test_tbl\"));\n        result.getShardingAlgorithms() .put(\"standard_test_tbl\", new ShardingAlgorithmConfiguration(\"STANDARD_TEST_TBL\", new Properties()));\n        result.getKeyGenerators().put(\"snowflake\", new KeyGenerateAlgorithmConfiguration(\"SNOWFLAKE\", getProperties()));\n        return result;\n    }\n","realPath":"examples/shardingsphere-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/config/ShardingTablesConfigurationPrecise.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2020-06-14 22:11:48","commitOrder":3,"curCode":"    private ShardingRuleConfiguration createShardingRuleConfiguration() {\n        ShardingRuleConfiguration result = new ShardingRuleConfiguration();\n        result.getTables().add(getOrderTableRuleConfiguration());\n        result.getTables().add(getOrderItemTableRuleConfiguration());\n        result.getBindingTableGroups().add(\"t_order, t_order_item\");\n        result.getBroadcastTables().add(\"t_address\");\n        result.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"order_id\", \"standard_test_tbl\"));\n        result.getShardingAlgorithms() .put(\"standard_test_tbl\", new ShardingSphereAlgorithmConfiguration(\"STANDARD_TEST_TBL\", new Properties()));\n        result.getKeyGenerators().put(\"snowflake\", new ShardingSphereAlgorithmConfiguration(\"SNOWFLAKE\", getProperties()));\n        return result;\n    }\n","date":"2020-06-14 22:11:48","endLine":53,"groupId":"10158","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createShardingRuleConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/56/bbfbd28076bad7b6c2cdba57f67c74a52aa2ce.src","preCode":"    private ShardingRuleConfiguration createShardingRuleConfiguration() {\n        ShardingRuleConfiguration result = new ShardingRuleConfiguration();\n        result.getTables().add(getOrderTableRuleConfiguration());\n        result.getTables().add(getOrderItemTableRuleConfiguration());\n        result.getBindingTableGroups().add(\"t_order, t_order_item\");\n        result.getBroadcastTables().add(\"t_address\");\n        result.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(\"order_id\", \"standard_test_tbl\"));\n        result.getShardingAlgorithms() .put(\"standard_test_tbl\", new ShardingAlgorithmConfiguration(\"STANDARD_TEST_TBL\", new Properties()));\n        result.getKeyGenerators().put(\"snowflake\", new KeyGenerateAlgorithmConfiguration(\"SNOWFLAKE\", getProperties()));\n        return result;\n    }\n","realPath":"examples/shardingsphere-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/config/ShardingTablesConfigurationRange.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"1708dbd407473acafe5fc4c874e6a21b87e71b42","commitMessage":"@@@Add ShardingSphereAlgorithmConfiguration to abstract algorithm configuration (#6034)\n\n* remove ShardingAlgorithmConfiguration\n\n* remove KeyGenerateAlgorithmConfiguration\n\n* remove LoadBalanceAlgorithmConfiguration\n\n* remove EncryptAlgorithmConfiguration\n\n* for checkstyle","date":"2020-06-14 22:11:48","modifiedFileCount":"37","status":"M","submitter":"Liang Zhang"}]
