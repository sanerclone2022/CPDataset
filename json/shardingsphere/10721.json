[{"authorTime":"2021-08-30 12:03:48","codes":[{"authorDate":"2021-08-30 12:03:48","commitOrder":1,"curCode":"    public void assertGenerateSQLTokens() {\n        ConstraintSegment constraintSegment = mock(ConstraintSegment.class);\n        when(constraintSegment.getStartIndex()).thenReturn(TEST_START_INDEX);\n        when(constraintSegment.getStopIndex()).thenReturn(TEST_STOP_INDEX);\n        IdentifierValue constraintIdentifier = mock(IdentifierValue.class);\n        when(constraintSegment.getIdentifier()).thenReturn(constraintIdentifier);\n        Collection<ConstraintSegment> constraintSegmentCollection = new LinkedList<>();\n        constraintSegmentCollection.add(constraintSegment);\n        AlterTableStatementContext alterTableStatementContext = mock(AlterTableStatementContext.class);\n        when(alterTableStatementContext.getConstraints()).thenReturn(constraintSegmentCollection);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        ConstraintTokenGenerator constraintTokenGenerator = new ConstraintTokenGenerator();\n        constraintTokenGenerator.setShardingRule(shardingRule);\n        Collection<ConstraintToken> result = constraintTokenGenerator.generateSQLTokens(alterTableStatementContext);\n        assertThat(result.size(), is(1));\n        assertThat(result.stream().collect(Collectors.toList()).get(0).getStartIndex(), is(TEST_START_INDEX));\n    }\n","date":"2021-08-30 12:03:48","endLine":76,"groupId":"12308","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertGenerateSQLTokens","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/76/a1e23b7742498e33dced58ccb71f12849d5207.src","preCode":"    public void assertGenerateSQLTokens() {\n        ConstraintSegment constraintSegment = mock(ConstraintSegment.class);\n        when(constraintSegment.getStartIndex()).thenReturn(TEST_START_INDEX);\n        when(constraintSegment.getStopIndex()).thenReturn(TEST_STOP_INDEX);\n        IdentifierValue constraintIdentifier = mock(IdentifierValue.class);\n        when(constraintSegment.getIdentifier()).thenReturn(constraintIdentifier);\n        Collection<ConstraintSegment> constraintSegmentCollection = new LinkedList<>();\n        constraintSegmentCollection.add(constraintSegment);\n        AlterTableStatementContext alterTableStatementContext = mock(AlterTableStatementContext.class);\n        when(alterTableStatementContext.getConstraints()).thenReturn(constraintSegmentCollection);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        ConstraintTokenGenerator constraintTokenGenerator = new ConstraintTokenGenerator();\n        constraintTokenGenerator.setShardingRule(shardingRule);\n        Collection<ConstraintToken> result = constraintTokenGenerator.generateSQLTokens(alterTableStatementContext);\n        assertThat(result.size(), is(1));\n        assertThat(result.stream().collect(Collectors.toList()).get(0).getStartIndex(), is(TEST_START_INDEX));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rewrite/token/ConstraintTokenGeneratorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"},{"authorDate":"2021-08-30 12:03:48","commitOrder":1,"curCode":"    public void assertGenerateSQLTokens() {\n        IndexSegment indexSegment = mock(IndexSegment.class);\n        when(indexSegment.getStartIndex()).thenReturn(TEST_START_INDEX);\n        when(indexSegment.getStopIndex()).thenReturn(TEST_STOP_INDEX);\n        IdentifierValue identifierValue = mock(IdentifierValue.class);\n        when(indexSegment.getIdentifier()).thenReturn(identifierValue);\n        Collection<IndexSegment> indexSegmentCollection = new LinkedList<>();\n        indexSegmentCollection.add(indexSegment);\n        AlterIndexStatementContext alterIndexStatementContext = mock(AlterIndexStatementContext.class);\n        when(alterIndexStatementContext.getIndexes()).thenReturn(indexSegmentCollection);\n        IndexTokenGenerator indexTokenGenerator = new IndexTokenGenerator();\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        indexTokenGenerator.setShardingRule(shardingRule);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        indexTokenGenerator.setSchema(schema);\n        Collection<IndexToken> result = indexTokenGenerator.generateSQLTokens(alterIndexStatementContext);\n        assertThat(result.size(), is(1));\n        assertThat(result.stream().collect(Collectors.toList()).get(0).getStartIndex(), is(TEST_START_INDEX));\n    }\n","date":"2021-08-30 12:03:48","endLine":79,"groupId":"197","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertGenerateSQLTokens","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/64/4ddaf7f5a12c8d20d392d4d36178d6bed5bdb6.src","preCode":"    public void assertGenerateSQLTokens() {\n        IndexSegment indexSegment = mock(IndexSegment.class);\n        when(indexSegment.getStartIndex()).thenReturn(TEST_START_INDEX);\n        when(indexSegment.getStopIndex()).thenReturn(TEST_STOP_INDEX);\n        IdentifierValue identifierValue = mock(IdentifierValue.class);\n        when(indexSegment.getIdentifier()).thenReturn(identifierValue);\n        Collection<IndexSegment> indexSegmentCollection = new LinkedList<>();\n        indexSegmentCollection.add(indexSegment);\n        AlterIndexStatementContext alterIndexStatementContext = mock(AlterIndexStatementContext.class);\n        when(alterIndexStatementContext.getIndexes()).thenReturn(indexSegmentCollection);\n        IndexTokenGenerator indexTokenGenerator = new IndexTokenGenerator();\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        indexTokenGenerator.setShardingRule(shardingRule);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        indexTokenGenerator.setSchema(schema);\n        Collection<IndexToken> result = indexTokenGenerator.generateSQLTokens(alterIndexStatementContext);\n        assertThat(result.size(), is(1));\n        assertThat(result.stream().collect(Collectors.toList()).get(0).getStartIndex(), is(TEST_START_INDEX));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rewrite/token/IndexTokenGeneratorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"}],"commitId":"70bf3b050f06fbc133d3d1f8643e62894043f643","commitMessage":"@@@Issue10968 (#12080)\n\n* Migrate YAML Configuration change history from\n4.1.2.Configuration Manual->YAML Configuration->Change History to\n7.2.API Change History->7.2.1.ShardingSphere-JDBC->YAML Configuration;\n\n* Add content of change history\n\n* add unit test of ShardingGeneratedKeyInsertValueParameterRewriter.\n\n* define the constant as static final.\n\n* Add test code of ShardingPaginationParameterRewriter and GeneratedKeyAssignmentTokenGenerator.\nremove ShardingGeneratedKeyInsertValueParameterRewriterTest from *.rewrite to *.rewrite.parameter.\n\n* add final.\n\n* Add unit test of GeneratedKeyForUseDefaultInsertColumnsTokenGenerator.  GeneratedKeyInsertColumnTokenGenerator and GeneratedKeyInsertValuesTokenGenerator.\n\n* Add unit test of AggregationDistinctTokenGenerator.\n\n* Add unit test of ConstraintTokenGenerator and DistinctProjectionPrefixTokenGenerator.\n\n* Add unit test of IndexTokenGenerator and OffsetTokenGenerator.\n\n* Add unit test of OrderByTokenGenerator.","date":"2021-08-30 12:03:48","modifiedFileCount":"0","status":"B","submitter":"fwhdzh"},{"authorTime":"2021-09-08 15:23:51","codes":[{"authorDate":"2021-09-08 15:23:51","commitOrder":2,"curCode":"    public void assertGenerateSQLTokens() {\n        ConstraintSegment constraintSegment = mock(ConstraintSegment.class);\n        final int testStartIndex = 1;\n        when(constraintSegment.getStartIndex()).thenReturn(testStartIndex);\n        final int testStopIndex = 3;\n        when(constraintSegment.getStopIndex()).thenReturn(testStopIndex);\n        IdentifierValue constraintIdentifier = mock(IdentifierValue.class);\n        when(constraintSegment.getIdentifier()).thenReturn(constraintIdentifier);\n        Collection<ConstraintSegment> constraintSegmentCollection = new LinkedList<>();\n        constraintSegmentCollection.add(constraintSegment);\n        AlterTableStatementContext alterTableStatementContext = mock(AlterTableStatementContext.class);\n        when(alterTableStatementContext.getConstraints()).thenReturn(constraintSegmentCollection);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        ConstraintTokenGenerator constraintTokenGenerator = new ConstraintTokenGenerator();\n        constraintTokenGenerator.setShardingRule(shardingRule);\n        Collection<ConstraintToken> result = constraintTokenGenerator.generateSQLTokens(alterTableStatementContext);\n        assertThat(result.size(), is(1));\n        assertThat((new LinkedList<>(result)).get(0).getStartIndex(), is(testStartIndex));\n    }\n","date":"2021-09-08 15:23:51","endLine":73,"groupId":"10721","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertGenerateSQLTokens","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/5d/0b05237b879a538c2f478fec5e20e120b4d58f.src","preCode":"    public void assertGenerateSQLTokens() {\n        ConstraintSegment constraintSegment = mock(ConstraintSegment.class);\n        when(constraintSegment.getStartIndex()).thenReturn(TEST_START_INDEX);\n        when(constraintSegment.getStopIndex()).thenReturn(TEST_STOP_INDEX);\n        IdentifierValue constraintIdentifier = mock(IdentifierValue.class);\n        when(constraintSegment.getIdentifier()).thenReturn(constraintIdentifier);\n        Collection<ConstraintSegment> constraintSegmentCollection = new LinkedList<>();\n        constraintSegmentCollection.add(constraintSegment);\n        AlterTableStatementContext alterTableStatementContext = mock(AlterTableStatementContext.class);\n        when(alterTableStatementContext.getConstraints()).thenReturn(constraintSegmentCollection);\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        ConstraintTokenGenerator constraintTokenGenerator = new ConstraintTokenGenerator();\n        constraintTokenGenerator.setShardingRule(shardingRule);\n        Collection<ConstraintToken> result = constraintTokenGenerator.generateSQLTokens(alterTableStatementContext);\n        assertThat(result.size(), is(1));\n        assertThat(result.stream().collect(Collectors.toList()).get(0).getStartIndex(), is(TEST_START_INDEX));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rewrite/token/ConstraintTokenGeneratorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2021-09-08 15:23:51","commitOrder":2,"curCode":"    public void assertGenerateSQLTokens() {\n        IndexSegment indexSegment = mock(IndexSegment.class);\n        final int testStartIndex = 1;\n        when(indexSegment.getStartIndex()).thenReturn(testStartIndex);\n        final int testStopIndex = 3;\n        when(indexSegment.getStopIndex()).thenReturn(testStopIndex);\n        IdentifierValue identifierValue = mock(IdentifierValue.class);\n        when(indexSegment.getIdentifier()).thenReturn(identifierValue);\n        Collection<IndexSegment> indexSegmentCollection = new LinkedList<>();\n        indexSegmentCollection.add(indexSegment);\n        AlterIndexStatementContext alterIndexStatementContext = mock(AlterIndexStatementContext.class);\n        when(alterIndexStatementContext.getIndexes()).thenReturn(indexSegmentCollection);\n        IndexTokenGenerator indexTokenGenerator = new IndexTokenGenerator();\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        indexTokenGenerator.setShardingRule(shardingRule);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        indexTokenGenerator.setSchema(schema);\n        Collection<IndexToken> result = indexTokenGenerator.generateSQLTokens(alterIndexStatementContext);\n        assertThat(result.size(), is(1));\n        assertThat((new LinkedList<>(result)).get(0).getStartIndex(), is(testStartIndex));\n    }\n","date":"2021-09-08 15:23:51","endLine":76,"groupId":"10721","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertGenerateSQLTokens","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ef/79cb96197a49e0b467fb3ed3041f97f578f18b.src","preCode":"    public void assertGenerateSQLTokens() {\n        IndexSegment indexSegment = mock(IndexSegment.class);\n        when(indexSegment.getStartIndex()).thenReturn(TEST_START_INDEX);\n        when(indexSegment.getStopIndex()).thenReturn(TEST_STOP_INDEX);\n        IdentifierValue identifierValue = mock(IdentifierValue.class);\n        when(indexSegment.getIdentifier()).thenReturn(identifierValue);\n        Collection<IndexSegment> indexSegmentCollection = new LinkedList<>();\n        indexSegmentCollection.add(indexSegment);\n        AlterIndexStatementContext alterIndexStatementContext = mock(AlterIndexStatementContext.class);\n        when(alterIndexStatementContext.getIndexes()).thenReturn(indexSegmentCollection);\n        IndexTokenGenerator indexTokenGenerator = new IndexTokenGenerator();\n        ShardingRule shardingRule = mock(ShardingRule.class);\n        indexTokenGenerator.setShardingRule(shardingRule);\n        ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n        indexTokenGenerator.setSchema(schema);\n        Collection<IndexToken> result = indexTokenGenerator.generateSQLTokens(alterIndexStatementContext);\n        assertThat(result.size(), is(1));\n        assertThat(result.stream().collect(Collectors.toList()).get(0).getStartIndex(), is(TEST_START_INDEX));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/rewrite/token/IndexTokenGeneratorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"b99668c759ca546ed605f4e29d17c6504240485c","commitMessage":"@@@Issue10968 (#12159)\n\n* Migrate YAML Configuration change history from\n4.1.2.Configuration Manual->YAML Configuration->Change History to\n7.2.API Change History->7.2.1.ShardingSphere-JDBC->YAML Configuration;\n\n* Add content of change history\n\n* add unit test of ShardingGeneratedKeyInsertValueParameterRewriter.\n\n* define the constant as static final.\n\n* Add test code of ShardingPaginationParameterRewriter and GeneratedKeyAssignmentTokenGenerator.\nremove ShardingGeneratedKeyInsertValueParameterRewriterTest from *.rewrite to *.rewrite.parameter.\n\n* add final.\n\n* Add unit test of GeneratedKeyForUseDefaultInsertColumnsTokenGenerator.  GeneratedKeyInsertColumnTokenGenerator and GeneratedKeyInsertValuesTokenGenerator.\n\n* Add unit test of AggregationDistinctTokenGenerator.\n\n* Add unit test of ConstraintTokenGenerator and DistinctProjectionPrefixTokenGenerator.\n\n* Add unit test of IndexTokenGenerator and OffsetTokenGenerator.\n\n* Add unit test of OrderByTokenGenerator.\n\n* Add unit test of ProjectionsTokenGenerator.\n\n* Add unit test of RowCountTokenGenerator and ShardingInsertValuesTokenGenerator.\n\n* Add unit test of RowCountTokenGenerator and ShardingInsertValuesTokenGenerator.\n\n* modify the problem mentioned.\n\n* add unit test of TableTokenGenerator.\n\n* Minimize the use of variables:\nIf a variable is only used in one method.  I use local variables instead of static variables.\nIf a variable of String type is only used once.  I use the content of the String directly instead of a variable.\nIf a variable of Int or Long type is only used once.  I still use a local variables in afraid of confusion of magic number.\nIf a variable is used in many method.  I use it as static variable.","date":"2021-09-08 15:23:51","modifiedFileCount":"10","status":"M","submitter":"fwhdzh"}]
