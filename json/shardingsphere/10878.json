[{"authorTime":"2021-04-13 22:58:14","codes":[{"authorDate":"2021-04-13 22:58:14","commitOrder":1,"curCode":"    public void assertPSQLExceptionWithServerErrorMessageNotNull() throws NoSuchFieldException, IllegalAccessException {\n        ServerErrorMessage serverErrorMessage = mock(ServerErrorMessage.class);\n        when(serverErrorMessage.getSeverity()).thenReturn(\"severity\");\n        when(serverErrorMessage.getSQLState()).thenReturn(\"sqlState\");\n        when(serverErrorMessage.getMessage()).thenReturn(\"message\");\n        when(serverErrorMessage.getPosition()).thenReturn(1);\n        PostgreSQLErrorResponsePacket actual = PostgreSQLErrPacketFactory.newInstance(new PSQLException(serverErrorMessage));\n        Field packetField = PostgreSQLErrorResponsePacket.class.getDeclaredField(\"fields\");\n        packetField.setAccessible(true);\n        Map<Character, String> fields = (Map<Character, String>) packetField.get(actual);\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_SEVERITY), is(\"severity\"));\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_CODE), is(\"sqlState\"));\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_MESSAGE), is(\"message\"));\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_POSITION), is(\"1\"));\n    }\n","date":"2021-04-13 22:58:14","endLine":51,"groupId":"225","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertPSQLExceptionWithServerErrorMessageNotNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6b/b7e94c35875c795fb0d6c3654906a98fbad5bc.src","preCode":"    public void assertPSQLExceptionWithServerErrorMessageNotNull() throws NoSuchFieldException, IllegalAccessException {\n        ServerErrorMessage serverErrorMessage = mock(ServerErrorMessage.class);\n        when(serverErrorMessage.getSeverity()).thenReturn(\"severity\");\n        when(serverErrorMessage.getSQLState()).thenReturn(\"sqlState\");\n        when(serverErrorMessage.getMessage()).thenReturn(\"message\");\n        when(serverErrorMessage.getPosition()).thenReturn(1);\n        PostgreSQLErrorResponsePacket actual = PostgreSQLErrPacketFactory.newInstance(new PSQLException(serverErrorMessage));\n        Field packetField = PostgreSQLErrorResponsePacket.class.getDeclaredField(\"fields\");\n        packetField.setAccessible(true);\n        Map<Character, String> fields = (Map<Character, String>) packetField.get(actual);\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_SEVERITY), is(\"severity\"));\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_CODE), is(\"sqlState\"));\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_MESSAGE), is(\"message\"));\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_POSITION), is(\"1\"));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/err/PostgreSQLErrPacketFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"},{"authorDate":"2021-04-13 22:58:14","commitOrder":1,"curCode":"    public void assertRuntimeException() throws NoSuchFieldException, IllegalAccessException {\n        PostgreSQLErrorResponsePacket actual = PostgreSQLErrPacketFactory.newInstance(new RuntimeException(\"test\"));\n        Field packetField = PostgreSQLErrorResponsePacket.class.getDeclaredField(\"fields\");\n        packetField.setAccessible(true);\n        Map<Character, String> fields = (Map<Character, String>) packetField.get(actual);\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_MESSAGE), is(\"test\"));\n    }\n","date":"2021-04-13 22:58:14","endLine":70,"groupId":"225","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRuntimeException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6b/b7e94c35875c795fb0d6c3654906a98fbad5bc.src","preCode":"    public void assertRuntimeException() throws NoSuchFieldException, IllegalAccessException {\n        PostgreSQLErrorResponsePacket actual = PostgreSQLErrPacketFactory.newInstance(new RuntimeException(\"test\"));\n        Field packetField = PostgreSQLErrorResponsePacket.class.getDeclaredField(\"fields\");\n        packetField.setAccessible(true);\n        Map<Character, String> fields = (Map<Character, String>) packetField.get(actual);\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_MESSAGE), is(\"test\"));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/err/PostgreSQLErrPacketFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"}],"commitId":"18ea1966282f8198ce5ef167e59c916501c826d1","commitMessage":"@@@Move ErrPacketFactory to err package (#10080)\n\n* Refactor PostgreSQLPacketCodecEngine\n\n* Refactor PostgreSQLRowDescriptionPacket\n\n* Move ErrPacketFactory to err package\n\n* Refactor PostgreSQLErrPacketFactory","date":"2021-04-13 22:58:14","modifiedFileCount":"3","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-04-13 22:58:14","codes":[{"authorDate":"2021-04-24 10:49:24","commitOrder":2,"curCode":"    public void assertPSQLExceptionWithServerErrorMessageNotNull() throws NoSuchFieldException, IllegalAccessException {\n        ServerErrorMessage serverErrorMessage = mock(ServerErrorMessage.class);\n        when(serverErrorMessage.getSeverity()).thenReturn(PostgreSQLMessageSeverityLevel.FATAL.name());\n        when(serverErrorMessage.getSQLState()).thenReturn(\"sqlState\");\n        when(serverErrorMessage.getMessage()).thenReturn(\"message\");\n        when(serverErrorMessage.getPosition()).thenReturn(1);\n        PostgreSQLErrorResponsePacket actual = PostgreSQLErrPacketFactory.newInstance(new PSQLException(serverErrorMessage));\n        Field packetField = PostgreSQLErrorResponsePacket.class.getDeclaredField(\"fields\");\n        packetField.setAccessible(true);\n        Map<Character, String> fields = (Map<Character, String>) packetField.get(actual);\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_SEVERITY), is(PostgreSQLMessageSeverityLevel.FATAL.name()));\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_CODE), is(\"sqlState\"));\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_MESSAGE), is(\"message\"));\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_POSITION), is(\"1\"));\n    }\n","date":"2021-04-24 10:49:24","endLine":52,"groupId":"10878","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertPSQLExceptionWithServerErrorMessageNotNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/94/10ec9f3ed7c1869a1116d067fde5449acdfa99.src","preCode":"    public void assertPSQLExceptionWithServerErrorMessageNotNull() throws NoSuchFieldException, IllegalAccessException {\n        ServerErrorMessage serverErrorMessage = mock(ServerErrorMessage.class);\n        when(serverErrorMessage.getSeverity()).thenReturn(\"severity\");\n        when(serverErrorMessage.getSQLState()).thenReturn(\"sqlState\");\n        when(serverErrorMessage.getMessage()).thenReturn(\"message\");\n        when(serverErrorMessage.getPosition()).thenReturn(1);\n        PostgreSQLErrorResponsePacket actual = PostgreSQLErrPacketFactory.newInstance(new PSQLException(serverErrorMessage));\n        Field packetField = PostgreSQLErrorResponsePacket.class.getDeclaredField(\"fields\");\n        packetField.setAccessible(true);\n        Map<Character, String> fields = (Map<Character, String>) packetField.get(actual);\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_SEVERITY), is(\"severity\"));\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_CODE), is(\"sqlState\"));\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_MESSAGE), is(\"message\"));\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_POSITION), is(\"1\"));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/err/PostgreSQLErrPacketFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2021-04-13 22:58:14","commitOrder":2,"curCode":"    public void assertRuntimeException() throws NoSuchFieldException, IllegalAccessException {\n        PostgreSQLErrorResponsePacket actual = PostgreSQLErrPacketFactory.newInstance(new RuntimeException(\"test\"));\n        Field packetField = PostgreSQLErrorResponsePacket.class.getDeclaredField(\"fields\");\n        packetField.setAccessible(true);\n        Map<Character, String> fields = (Map<Character, String>) packetField.get(actual);\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_MESSAGE), is(\"test\"));\n    }\n","date":"2021-04-13 22:58:14","endLine":70,"groupId":"10878","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertRuntimeException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/6b/b7e94c35875c795fb0d6c3654906a98fbad5bc.src","preCode":"    public void assertRuntimeException() throws NoSuchFieldException, IllegalAccessException {\n        PostgreSQLErrorResponsePacket actual = PostgreSQLErrPacketFactory.newInstance(new RuntimeException(\"test\"));\n        Field packetField = PostgreSQLErrorResponsePacket.class.getDeclaredField(\"fields\");\n        packetField.setAccessible(true);\n        Map<Character, String> fields = (Map<Character, String>) packetField.get(actual);\n        assertThat(fields.get(PostgreSQLErrorResponsePacket.FIELD_TYPE_MESSAGE), is(\"test\"));\n    }\n","realPath":"shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/test/java/org/apache/shardingsphere/proxy/frontend/postgresql/err/PostgreSQLErrPacketFactoryTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"29bbb992ae0ca17f8da677fcb815e770988c73ee","commitMessage":"@@@Replace magic values with enums in PostgreSQLErrorResponsePacket (#10167)\n\n* Refactor PostgreSQLErrorResponsePacket\n\n* Checkstyle and complete testcases","date":"2021-04-24 10:49:24","modifiedFileCount":"6","status":"M","submitter":"???"}]
