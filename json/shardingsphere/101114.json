[{"authorTime":"2020-05-16 19:36:14","codes":[{"authorDate":"2020-05-16 19:36:14","commitOrder":1,"curCode":"    public void assertGetXaConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypes.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        assertThat(shardingSphereDataSource.getDataSourceMap().size(), is(1));\n        ShardingSphereConnection connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n    }\n","date":"2020-05-16 19:36:14","endLine":158,"groupId":"7859","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertGetXaConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a9/41f9c3f2ca7b65881be2678173328fd43d627b.src","preCode":"    public void assertGetXaConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypes.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        assertThat(shardingSphereDataSource.getDataSourceMap().size(), is(1));\n        ShardingSphereConnection connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/datasource/ShardingSphereDataSourceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"},{"authorDate":"2020-05-16 19:36:14","commitOrder":1,"curCode":"    public void assertGetXaConnectionThenGetLocalConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypes.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        ShardingSphereConnection connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n        assertThat(connection.getTransactionType(), is(TransactionType.XA));\n        assertThat(connection.getShardingTransactionManager(), instanceOf(XAShardingTransactionManagerFixture.class));\n        TransactionTypeHolder.set(TransactionType.LOCAL);\n        connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getConnection(\"ds\"), is(dataSource.getConnection()));\n        assertThat(connection.getDataSourceMap(), is(dataSourceMap));\n        assertThat(connection.getTransactionType(), is(TransactionType.LOCAL));\n        assertThat(connection.getShardingTransactionManager() == null, is(true));\n    }\n","date":"2020-05-16 19:36:14","endLine":177,"groupId":"4357","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertGetXaConnectionThenGetLocalConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a9/41f9c3f2ca7b65881be2678173328fd43d627b.src","preCode":"    public void assertGetXaConnectionThenGetLocalConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypes.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        ShardingSphereConnection connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n        assertThat(connection.getTransactionType(), is(TransactionType.XA));\n        assertThat(connection.getShardingTransactionManager(), instanceOf(XAShardingTransactionManagerFixture.class));\n        TransactionTypeHolder.set(TransactionType.LOCAL);\n        connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getConnection(\"ds\"), is(dataSource.getConnection()));\n        assertThat(connection.getDataSourceMap(), is(dataSourceMap));\n        assertThat(connection.getTransactionType(), is(TransactionType.LOCAL));\n        assertThat(connection.getShardingTransactionManager() == null, is(true));\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/datasource/ShardingSphereDataSourceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"B"}],"commitId":"468e4540f107bacea98e9785b7312b2e5bad0c7e","commitMessage":"@@@Rename sharding-jdbc to shardingsphere-jdbc (#5641)\n\n* Rename sharding-jdbc to shardingsphere-jdbc\n\n* rename org.apache.shardingsphere.shardingjdbc to org.apache.shardingsphere.driver\n\n* rename org.apache.shardingsphere.shardingjdbc to org.apache.shardingsphere.driver","date":"2020-05-16 19:36:14","modifiedFileCount":"32","status":"B","submitter":"Liang Zhang"},{"authorTime":"2020-08-08 21:28:12","codes":[{"authorDate":"2020-05-16 19:36:14","commitOrder":2,"curCode":"    public void assertGetXaConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypes.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        assertThat(shardingSphereDataSource.getDataSourceMap().size(), is(1));\n        ShardingSphereConnection connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n    }\n","date":"2020-05-16 19:36:14","endLine":158,"groupId":"7859","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertGetXaConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a9/41f9c3f2ca7b65881be2678173328fd43d627b.src","preCode":"    public void assertGetXaConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypes.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        assertThat(shardingSphereDataSource.getDataSourceMap().size(), is(1));\n        ShardingSphereConnection connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/datasource/ShardingSphereDataSourceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"},{"authorDate":"2020-08-08 21:28:12","commitOrder":2,"curCode":"    public void assertGetXaConnectionThenGetLocalConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypes.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        ShardingSphereConnection connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n        assertThat(connection.getTransactionType(), is(TransactionType.XA));\n        assertThat(connection.getShardingTransactionManager(), instanceOf(XAShardingTransactionManagerFixture.class));\n        TransactionTypeHolder.set(TransactionType.LOCAL);\n        connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getConnection(\"ds\"), is(dataSource.getConnection()));\n        assertThat(connection.getDataSourceMap(), is(dataSourceMap));\n        assertThat(connection.getTransactionType(), is(TransactionType.LOCAL));\n        assertNull(connection.getShardingTransactionManager());\n    }\n","date":"2020-08-08 21:28:12","endLine":179,"groupId":"4357","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertGetXaConnectionThenGetLocalConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/51/781e643b989a0ed3fd7d1a35aeec77928dd847.src","preCode":"    public void assertGetXaConnectionThenGetLocalConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypes.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        ShardingSphereConnection connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n        assertThat(connection.getTransactionType(), is(TransactionType.XA));\n        assertThat(connection.getShardingTransactionManager(), instanceOf(XAShardingTransactionManagerFixture.class));\n        TransactionTypeHolder.set(TransactionType.LOCAL);\n        connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getConnection(\"ds\"), is(dataSource.getConnection()));\n        assertThat(connection.getDataSourceMap(), is(dataSourceMap));\n        assertThat(connection.getTransactionType(), is(TransactionType.LOCAL));\n        assertThat(connection.getShardingTransactionManager() == null, is(true));\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/datasource/ShardingSphereDataSourceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"3183d871230a695b57f4b9f9f80ae0a41d952bcd","commitMessage":"@@@Unify assert usage for test cases (#6718)\n\n* Add generic type for MetaDataRefreshStrategyFactory\n\n* Add generic type for MetaDataRefreshStrategy\n\n* Add test case for CreateIndexStatementMetaDataRefreshStrategy\n\n* Use assertTrue instead of assertThat\n\n* refactor YamlDataSourceParameterMergerTest\n\n* Use assertFalse instead of assertThat\n\n* Use static import with Assert","date":"2020-08-08 21:28:12","modifiedFileCount":"42","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-18 18:03:07","codes":[{"authorDate":"2020-10-18 18:03:07","commitOrder":3,"curCode":"    public void assertGetXaConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        assertThat(shardingSphereDataSource.getDataSourceMap().size(), is(1));\n        ShardingSphereConnection connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n    }\n","date":"2020-10-18 18:03:07","endLine":159,"groupId":"7859","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertGetXaConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1f/484dc00b91350944ea5c77d088894fb2800e4b.src","preCode":"    public void assertGetXaConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypes.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        assertThat(shardingSphereDataSource.getDataSourceMap().size(), is(1));\n        ShardingSphereConnection connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/datasource/ShardingSphereDataSourceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"},{"authorDate":"2020-10-18 18:03:07","commitOrder":3,"curCode":"    public void assertGetXaConnectionThenGetLocalConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        ShardingSphereConnection connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n        assertThat(connection.getTransactionType(), is(TransactionType.XA));\n        assertThat(connection.getShardingTransactionManager(), instanceOf(XAShardingTransactionManagerFixture.class));\n        TransactionTypeHolder.set(TransactionType.LOCAL);\n        connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getConnection(\"ds\"), is(dataSource.getConnection()));\n        assertThat(connection.getDataSourceMap(), is(dataSourceMap));\n        assertThat(connection.getTransactionType(), is(TransactionType.LOCAL));\n        assertNull(connection.getShardingTransactionManager());\n    }\n","date":"2020-10-18 18:03:07","endLine":178,"groupId":"4357","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertGetXaConnectionThenGetLocalConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1f/484dc00b91350944ea5c77d088894fb2800e4b.src","preCode":"    public void assertGetXaConnectionThenGetLocalConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypes.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        ShardingSphereConnection connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n        assertThat(connection.getTransactionType(), is(TransactionType.XA));\n        assertThat(connection.getShardingTransactionManager(), instanceOf(XAShardingTransactionManagerFixture.class));\n        TransactionTypeHolder.set(TransactionType.LOCAL);\n        connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getConnection(\"ds\"), is(dataSource.getConnection()));\n        assertThat(connection.getDataSourceMap(), is(dataSourceMap));\n        assertThat(connection.getTransactionType(), is(TransactionType.LOCAL));\n        assertNull(connection.getShardingTransactionManager());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/datasource/ShardingSphereDataSourceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"c82441ba41bc9913a997147b70dbcc9dbb47ae60","commitMessage":"@@@Rename DatabaseTypes to DatabaseTypeRegistry (#7834)\n\n","date":"2020-10-18 18:03:07","modifiedFileCount":"76","status":"M","submitter":"Liang Zhang"},{"authorTime":"2020-10-18 18:03:07","codes":[{"authorDate":"2021-08-19 00:59:59","commitOrder":4,"curCode":"    public void assertGetXaConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        assertThat(shardingSphereDataSource.getContextManager().getMetaDataContexts().getMetaData(DefaultSchema.LOGIC_NAME).getResource().getDataSources().size(), is(1));\n        ShardingSphereConnection connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n    }\n","date":"2021-08-19 00:59:59","endLine":163,"groupId":"5547","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertGetXaConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/13/64b5e907a069a4939db89e5858c0121015a501.src","preCode":"    public void assertGetXaConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        assertThat(shardingSphereDataSource.getDataSourceMap().size(), is(1));\n        ShardingSphereConnection connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/datasource/ShardingSphereDataSourceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"},{"authorDate":"2020-10-18 18:03:07","commitOrder":4,"curCode":"    public void assertGetXaConnectionThenGetLocalConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        ShardingSphereConnection connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n        assertThat(connection.getTransactionType(), is(TransactionType.XA));\n        assertThat(connection.getShardingTransactionManager(), instanceOf(XAShardingTransactionManagerFixture.class));\n        TransactionTypeHolder.set(TransactionType.LOCAL);\n        connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getConnection(\"ds\"), is(dataSource.getConnection()));\n        assertThat(connection.getDataSourceMap(), is(dataSourceMap));\n        assertThat(connection.getTransactionType(), is(TransactionType.LOCAL));\n        assertNull(connection.getShardingTransactionManager());\n    }\n","date":"2020-10-18 18:03:07","endLine":178,"groupId":"4357","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertGetXaConnectionThenGetLocalConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1f/484dc00b91350944ea5c77d088894fb2800e4b.src","preCode":"    public void assertGetXaConnectionThenGetLocalConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        ShardingSphereConnection connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n        assertThat(connection.getTransactionType(), is(TransactionType.XA));\n        assertThat(connection.getShardingTransactionManager(), instanceOf(XAShardingTransactionManagerFixture.class));\n        TransactionTypeHolder.set(TransactionType.LOCAL);\n        connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getConnection(\"ds\"), is(dataSource.getConnection()));\n        assertThat(connection.getDataSourceMap(), is(dataSourceMap));\n        assertThat(connection.getTransactionType(), is(TransactionType.LOCAL));\n        assertNull(connection.getShardingTransactionManager());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/datasource/ShardingSphereDataSourceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"}],"commitId":"dcc1d366c8fe7fd4762c92784125bfa8e602fcc8","commitMessage":"@@@Remove dependencies of ShardingSphereDataSource.getDataSourceMap() and test cases (#11890)\n\n","date":"2021-08-19 00:59:59","modifiedFileCount":"4","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-19 20:45:22","codes":[{"authorDate":"2021-08-19 20:45:22","commitOrder":5,"curCode":"    public void assertGetXaConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        assertThat(shardingSphereDataSource.getContextManager().getMetaDataContexts().getMetaData(DefaultSchema.LOGIC_NAME).getResource().getDataSources().size(), is(1));\n        ShardingSphereConnection connection = (ShardingSphereConnection) shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n    }\n","date":"2021-08-19 20:45:22","endLine":163,"groupId":"5547","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"assertGetXaConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f6/262fab24fd7108d2ac984b5d26a208aee92bef.src","preCode":"    public void assertGetXaConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        assertThat(shardingSphereDataSource.getContextManager().getMetaDataContexts().getMetaData(DefaultSchema.LOGIC_NAME).getResource().getDataSources().size(), is(1));\n        ShardingSphereConnection connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/datasource/ShardingSphereDataSourceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"},{"authorDate":"2021-08-19 20:45:22","commitOrder":5,"curCode":"    public void assertGetXaConnectionThenGetLocalConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        ShardingSphereConnection connection = (ShardingSphereConnection) shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n        assertThat(connection.getTransactionType(), is(TransactionType.XA));\n        assertThat(connection.getShardingTransactionManager(), instanceOf(XAShardingTransactionManagerFixture.class));\n        TransactionTypeHolder.set(TransactionType.LOCAL);\n        connection = (ShardingSphereConnection) shardingSphereDataSource.getConnection();\n        assertThat(connection.getConnection(\"ds\"), is(dataSource.getConnection()));\n        assertThat(connection.getDataSourceMap(), is(dataSourceMap));\n        assertThat(connection.getTransactionType(), is(TransactionType.LOCAL));\n        assertNull(connection.getShardingTransactionManager());\n    }\n","date":"2021-08-19 20:45:22","endLine":182,"groupId":"5548","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"assertGetXaConnectionThenGetLocalConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f6/262fab24fd7108d2ac984b5d26a208aee92bef.src","preCode":"    public void assertGetXaConnectionThenGetLocalConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        ShardingSphereConnection connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n        assertThat(connection.getTransactionType(), is(TransactionType.XA));\n        assertThat(connection.getShardingTransactionManager(), instanceOf(XAShardingTransactionManagerFixture.class));\n        TransactionTypeHolder.set(TransactionType.LOCAL);\n        connection = shardingSphereDataSource.getConnection();\n        assertThat(connection.getConnection(\"ds\"), is(dataSource.getConnection()));\n        assertThat(connection.getDataSourceMap(), is(dataSourceMap));\n        assertThat(connection.getTransactionType(), is(TransactionType.LOCAL));\n        assertNull(connection.getShardingTransactionManager());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/datasource/ShardingSphereDataSourceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"c2df0553596ccd24646fafe1ab11b63baa81c8d3","commitMessage":"@@@Use SPI for DriverStateContext (#11905)\n\n* private ShardingSphereDataSource.getDataSourceMap()\n\n* private ShardingSphereDataSource.getDataSourceMap()\n\n* Remove StateType\n\n* Use SPI for DriverStateContext\n\n* Use SPI for DriverStateContext\n\n* Unify ShardingSphereDataSource and GovernanceShardingSphereDataSource","date":"2021-08-19 20:45:22","modifiedFileCount":"13","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-08-29 11:55:51","codes":[{"authorDate":"2021-08-19 20:45:22","commitOrder":6,"curCode":"    public void assertGetXaConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        assertThat(shardingSphereDataSource.getContextManager().getMetaDataContexts().getMetaData(DefaultSchema.LOGIC_NAME).getResource().getDataSources().size(), is(1));\n        ShardingSphereConnection connection = (ShardingSphereConnection) shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n    }\n","date":"2021-08-19 20:45:22","endLine":163,"groupId":"101114","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"assertGetXaConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f6/262fab24fd7108d2ac984b5d26a208aee92bef.src","preCode":"    public void assertGetXaConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        assertThat(shardingSphereDataSource.getContextManager().getMetaDataContexts().getMetaData(DefaultSchema.LOGIC_NAME).getResource().getDataSources().size(), is(1));\n        ShardingSphereConnection connection = (ShardingSphereConnection) shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/datasource/ShardingSphereDataSourceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"N"},{"authorDate":"2021-08-29 11:55:51","commitOrder":6,"curCode":"    public void assertGetXaConnectionThenGetLocalConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        ShardingSphereConnection connection = (ShardingSphereConnection) shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n        assertThat(connection.getTransactionType(), is(TransactionType.XA));\n        assertThat(connection.getTransactionManager(), instanceOf(XAShardingSphereTransactionManagerFixture.class));\n        TransactionTypeHolder.set(TransactionType.LOCAL);\n        connection = (ShardingSphereConnection) shardingSphereDataSource.getConnection();\n        assertThat(connection.getConnection(\"ds\"), is(dataSource.getConnection()));\n        assertThat(connection.getDataSourceMap(), is(dataSourceMap));\n        assertThat(connection.getTransactionType(), is(TransactionType.LOCAL));\n        assertNull(connection.getTransactionManager());\n    }\n","date":"2021-08-29 11:55:51","endLine":181,"groupId":"101114","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"assertGetXaConnectionThenGetLocalConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/b2/075a642c790ef30846c40e8e7a1225aed559dc.src","preCode":"    public void assertGetXaConnectionThenGetLocalConnection() throws SQLException {\n        DataSource dataSource = mockDataSource(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        Map<String, DataSource> dataSourceMap = new HashMap<>(1, 1);\n        dataSourceMap.put(\"ds\", dataSource);\n        TransactionTypeHolder.set(TransactionType.XA);\n        ShardingSphereDataSource shardingSphereDataSource = createShardingSphereDataSource(dataSourceMap);\n        ShardingSphereConnection connection = (ShardingSphereConnection) shardingSphereDataSource.getConnection();\n        assertThat(connection.getDataSourceMap().size(), is(1));\n        assertThat(connection.getTransactionType(), is(TransactionType.XA));\n        assertThat(connection.getShardingTransactionManager(), instanceOf(XAShardingTransactionManagerFixture.class));\n        TransactionTypeHolder.set(TransactionType.LOCAL);\n        connection = (ShardingSphereConnection) shardingSphereDataSource.getConnection();\n        assertThat(connection.getConnection(\"ds\"), is(dataSource.getConnection()));\n        assertThat(connection.getDataSourceMap(), is(dataSourceMap));\n        assertThat(connection.getTransactionType(), is(TransactionType.LOCAL));\n        assertNull(connection.getShardingTransactionManager());\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/core/datasource/ShardingSphereDataSourceTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"d19a34f471034ad6f640477ee180752c9b37dfe8","commitMessage":"@@@Unify class name of transaction module (#12084)\n\n* Rename ShardingSphereTransactionManagerEngine\n\n* Unify class name of transaction module","date":"2021-08-29 11:55:51","modifiedFileCount":"26","status":"M","submitter":"Liang Zhang"}]
