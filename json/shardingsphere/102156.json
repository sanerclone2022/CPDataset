[{"authorTime":"2021-01-07 20:03:25","codes":[{"authorDate":"2021-01-07 20:03:25","commitOrder":1,"curCode":"    private void assertExecuteQueryForStatementWithResultSetTypeAndResultSetConcurrency(final Connection connection) throws SQLException, ParseException {\n        try (\n                Statement statement = connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n                ResultSet resultSet = statement.executeQuery(String.format(getSql(), assertion.getSQLValues().toArray()))) {\n            assertResultSet(resultSet);\n        }\n    }\n","date":"2021-01-07 20:03:25","endLine":75,"groupId":"6593","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteQueryForStatementWithResultSetTypeAndResultSetConcurrency","params":"(finalConnectionconnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/87/3d9fed641bc4e36f6498cc1497dafb6f761b07.src","preCode":"    private void assertExecuteQueryForStatementWithResultSetTypeAndResultSetConcurrency(final Connection connection) throws SQLException, ParseException {\n        try (\n                Statement statement = connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n                ResultSet resultSet = statement.executeQuery(String.format(getSql(), assertion.getSQLValues().toArray()))) {\n            assertResultSet(resultSet);\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dql/AdditionalDQLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"},{"authorDate":"2021-01-07 20:03:25","commitOrder":1,"curCode":"    private void assertExecuteForStatementWithResultSetTypeAndResultSetConcurrency(final Connection connection) throws SQLException, ParseException {\n        try (Statement statement = connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)) {\n            assertTrue(\"Not a query statement.\", statement.execute(String.format(getSql(), assertion.getSQLValues().toArray())));\n            try (ResultSet resultSet = statement.getResultSet()) {\n                assertResultSet(resultSet);\n            }\n        }\n    }\n","date":"2021-01-07 20:03:25","endLine":138,"groupId":"4215","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteForStatementWithResultSetTypeAndResultSetConcurrency","params":"(finalConnectionconnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/87/3d9fed641bc4e36f6498cc1497dafb6f761b07.src","preCode":"    private void assertExecuteForStatementWithResultSetTypeAndResultSetConcurrency(final Connection connection) throws SQLException, ParseException {\n        try (Statement statement = connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)) {\n            assertTrue(\"Not a query statement.\", statement.execute(String.format(getSql(), assertion.getSQLValues().toArray())));\n            try (ResultSet resultSet = statement.getResultSet()) {\n                assertResultSet(resultSet);\n            }\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dql/AdditionalDQLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"}],"commitId":"d71f881256c447c7fe6d88f7563a38486d36fbb0","commitMessage":"@@@Add back loss files (#8939)\n\n","date":"2021-01-07 20:03:25","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-03-24 18:00:29","codes":[{"authorDate":"2021-03-24 18:00:29","commitOrder":2,"curCode":"    private void assertExecuteQueryForStatementWithResultSetTypeAndResultSetConcurrency(final Connection connection) throws SQLException, ParseException {\n        try (\n                Statement statement = connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n                ResultSet resultSet = statement.executeQuery(String.format(getStatement(), getAssertion().getSQLValues().toArray()))) {\n            assertResultSet(resultSet);\n        }\n    }\n","date":"2021-03-24 18:00:29","endLine":59,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteQueryForStatementWithResultSetTypeAndResultSetConcurrency","params":"(finalConnectionconnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f2/6ccf7b234ce5ac199b0eb2691b7617677312f6.src","preCode":"    private void assertExecuteQueryForStatementWithResultSetTypeAndResultSetConcurrency(final Connection connection) throws SQLException, ParseException {\n        try (\n                Statement statement = connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n                ResultSet resultSet = statement.executeQuery(String.format(getSql(), assertion.getSQLValues().toArray()))) {\n            assertResultSet(resultSet);\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dql/AdditionalDQLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2021-03-24 18:00:29","commitOrder":2,"curCode":"    private void assertExecuteForStatementWithResultSetTypeAndResultSetConcurrency(final Connection connection) throws SQLException, ParseException {\n        try (Statement statement = connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)) {\n            assertTrue(\"Not a query statement.\", statement.execute(String.format(getStatement(), getAssertion().getSQLValues().toArray())));\n            try (ResultSet resultSet = statement.getResultSet()) {\n                assertResultSet(resultSet);\n            }\n        }\n    }\n","date":"2021-03-24 18:00:29","endLine":122,"groupId":"13776","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteForStatementWithResultSetTypeAndResultSetConcurrency","params":"(finalConnectionconnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/f2/6ccf7b234ce5ac199b0eb2691b7617677312f6.src","preCode":"    private void assertExecuteForStatementWithResultSetTypeAndResultSetConcurrency(final Connection connection) throws SQLException, ParseException {\n        try (Statement statement = connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)) {\n            assertTrue(\"Not a query statement.\", statement.execute(String.format(getSql(), assertion.getSQLValues().toArray())));\n            try (ResultSet resultSet = statement.getResultSet()) {\n                assertResultSet(resultSet);\n            }\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dql/AdditionalDQLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"70176a68c9d7d55a47f4dde8391fdbb0d52cb231","commitMessage":"@@@refactor: it engine (#9725)\n\n* move packages\n\n* refactor dockerfile\n\n* Refactor IT engine\n\n* fix checkstyle and update it.yaml\n\n* optimize\n\n* fix\n\n* fix ci/it script\n\n* fix null pointer\n\n* fix checkstyle\n\n* fix nullpointer\n\n* code polish\n\n* revert\n\n* make adapter=jdbc available\n\n* fix\n\n* fix\n\n* following reviews\n\n* fix ci\n\n* Compatible with ci\n\n* support parallel\n\n* fix\n\n* fix\n\n* fix\n\n* fix\n\n* disable fail-fast\n\n* polish\n\n* fix health-chek\n\n* fix health-chek\n\n* fix health-chek\n\n* code polish\n\n* code polish\n\n* code polish\n\n* rollback\n\n* fix missing case\n\n* fix\n\n* fix skip dockerfile build\n\n* revert removed profile\n\n* remove dead code\n\nCo-authored-by: root <root@daming.sgp>","date":"2021-03-24 18:00:29","modifiedFileCount":"14","status":"M","submitter":"Daming"},{"authorTime":"2021-03-25 20:19:33","codes":[{"authorDate":"2021-03-25 20:19:33","commitOrder":3,"curCode":"    private void assertExecuteQueryForStatementWithResultSetTypeAndResultSetConcurrency(final Connection connection) throws SQLException, ParseException {\n        try (\n                Statement statement = connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n                ResultSet resultSet = statement.executeQuery(String.format(getSQL(), getAssertion().getSQLValues().toArray()))) {\n            assertResultSet(resultSet);\n        }\n    }\n","date":"2021-03-25 20:19:33","endLine":59,"groupId":"102156","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteQueryForStatementWithResultSetTypeAndResultSetConcurrency","params":"(finalConnectionconnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/70/bec280b84a25e5ad844dedede6ade42fb4b2f9.src","preCode":"    private void assertExecuteQueryForStatementWithResultSetTypeAndResultSetConcurrency(final Connection connection) throws SQLException, ParseException {\n        try (\n                Statement statement = connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n                ResultSet resultSet = statement.executeQuery(String.format(getStatement(), getAssertion().getSQLValues().toArray()))) {\n            assertResultSet(resultSet);\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dql/AdditionalDQLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2021-03-25 20:19:33","commitOrder":3,"curCode":"    private void assertExecuteForStatementWithResultSetTypeAndResultSetConcurrency(final Connection connection) throws SQLException, ParseException {\n        try (Statement statement = connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)) {\n            assertTrue(\"Not a query statement.\", statement.execute(String.format(getSQL(), getAssertion().getSQLValues().toArray())));\n            try (ResultSet resultSet = statement.getResultSet()) {\n                assertResultSet(resultSet);\n            }\n        }\n    }\n","date":"2021-03-25 20:19:33","endLine":122,"groupId":"102156","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteForStatementWithResultSetTypeAndResultSetConcurrency","params":"(finalConnectionconnection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/70/bec280b84a25e5ad844dedede6ade42fb4b2f9.src","preCode":"    private void assertExecuteForStatementWithResultSetTypeAndResultSetConcurrency(final Connection connection) throws SQLException, ParseException {\n        try (Statement statement = connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)) {\n            assertTrue(\"Not a query statement.\", statement.execute(String.format(getStatement(), getAssertion().getSQLValues().toArray())));\n            try (ResultSet resultSet = statement.getResultSet()) {\n                assertResultSet(resultSet);\n            }\n        }\n    }\n","realPath":"shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/src/test/java/org/apache/shardingsphere/test/integration/engine/it/dql/AdditionalDQLIT.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"652d77b94230abd176abeeb4daa2e56789bc94a3","commitMessage":"@@@Rename BaseITCase.getStatement to getSQL (#9821)\n\n* Rename BaseITCase.getStatement to getSQL\n\n* Refactor ContainerCompose","date":"2021-03-25 20:19:33","modifiedFileCount":"14","status":"M","submitter":"Liang Zhang"}]
