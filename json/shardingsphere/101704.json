[{"authorTime":"2020-11-22 18:26:20","codes":[{"authorDate":"2020-11-22 18:26:20","commitOrder":1,"curCode":"    public void assertExecuteSQLException() {\n        try {\n            ExecutorEngine executorEngine = mock(ExecutorEngine.class);\n            when(executorEngine.execute(anyCollection(), any(), any(), anyBoolean())).thenThrow(new SQLException(\"TestSQLException\"));\n            JDBCExecutor jdbcExecutor = new JDBCExecutor(executorEngine, false);\n            jdbcExecutor.execute(Collections.emptyList(), null);\n        } catch (final SQLException ex) {\n            assertThat(ex.getMessage(), is(\"TestSQLException\"));\n        }\n    }\n","date":"2020-11-22 18:26:20","endLine":60,"groupId":"5653","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteSQLException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7e/c16fb411ed76ef0c4d4c51e088ced0d084341b.src","preCode":"    public void assertExecuteSQLException() {\n        try {\n            ExecutorEngine executorEngine = mock(ExecutorEngine.class);\n            when(executorEngine.execute(anyCollection(), any(), any(), anyBoolean())).thenThrow(new SQLException(\"TestSQLException\"));\n            JDBCExecutor jdbcExecutor = new JDBCExecutor(executorEngine, false);\n            jdbcExecutor.execute(Collections.emptyList(), null);\n        } catch (final SQLException ex) {\n            assertThat(ex.getMessage(), is(\"TestSQLException\"));\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/execute/engine/jdbc/JDBCExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2020-11-22 18:26:20","commitOrder":1,"curCode":"    public void assertExecuteNotThrownSQLException() throws SQLException {\n        ExecutorEngine executorEngine = mock(ExecutorEngine.class);\n        when(executorEngine.execute(anyCollection(), any(), any(), anyBoolean())).thenThrow(new SQLException(\"TestSQLException\"));\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(executorEngine, false);\n        ExecutorExceptionHandler.setExceptionThrown(false);\n        List<?> actual = jdbcExecutor.execute(Collections.emptyList(), null);\n        assertThat(actual, is(Collections.emptyList()));\n    }\n","date":"2020-11-22 18:26:20","endLine":70,"groupId":"4820","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteNotThrownSQLException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7e/c16fb411ed76ef0c4d4c51e088ced0d084341b.src","preCode":"    public void assertExecuteNotThrownSQLException() throws SQLException {\n        ExecutorEngine executorEngine = mock(ExecutorEngine.class);\n        when(executorEngine.execute(anyCollection(), any(), any(), anyBoolean())).thenThrow(new SQLException(\"TestSQLException\"));\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(executorEngine, false);\n        ExecutorExceptionHandler.setExceptionThrown(false);\n        List<?> actual = jdbcExecutor.execute(Collections.emptyList(), null);\n        assertThat(actual, is(Collections.emptyList()));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/execute/engine/jdbc/JDBCExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"}],"commitId":"aa0956454c826e007e3db6173282c86fe3e1ac61","commitMessage":"@@@Rename JDBCExecutor (#8291)\n\n* Move SQLExecutionUnit and ConnectionMode to engine package\n\n* Add jdbc.callback package\n\n* Move ExecutorExceptionHandler to engine package\n\n* Rename JDBCExecutor\n\n* Rename DefaultJDBCExecutorCallback\n\n* Rename ProxySQLExecutorCallback\n\n* Rename JDBCExecutorCallback","date":"2020-11-22 18:26:20","modifiedFileCount":"30","status":"B","submitter":"Liang Zhang"},{"authorTime":"2020-11-26 16:38:39","codes":[{"authorDate":"2020-11-22 18:26:20","commitOrder":2,"curCode":"    public void assertExecuteSQLException() {\n        try {\n            ExecutorEngine executorEngine = mock(ExecutorEngine.class);\n            when(executorEngine.execute(anyCollection(), any(), any(), anyBoolean())).thenThrow(new SQLException(\"TestSQLException\"));\n            JDBCExecutor jdbcExecutor = new JDBCExecutor(executorEngine, false);\n            jdbcExecutor.execute(Collections.emptyList(), null);\n        } catch (final SQLException ex) {\n            assertThat(ex.getMessage(), is(\"TestSQLException\"));\n        }\n    }\n","date":"2020-11-22 18:26:20","endLine":60,"groupId":"5653","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertExecuteSQLException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7e/c16fb411ed76ef0c4d4c51e088ced0d084341b.src","preCode":"    public void assertExecuteSQLException() {\n        try {\n            ExecutorEngine executorEngine = mock(ExecutorEngine.class);\n            when(executorEngine.execute(anyCollection(), any(), any(), anyBoolean())).thenThrow(new SQLException(\"TestSQLException\"));\n            JDBCExecutor jdbcExecutor = new JDBCExecutor(executorEngine, false);\n            jdbcExecutor.execute(Collections.emptyList(), null);\n        } catch (final SQLException ex) {\n            assertThat(ex.getMessage(), is(\"TestSQLException\"));\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/execute/engine/jdbc/JDBCExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2020-11-26 16:38:39","commitOrder":2,"curCode":"    public void assertExecuteNotThrownSQLException() throws SQLException {\n        ExecutorEngine executorEngine = mock(ExecutorEngine.class);\n        when(executorEngine.execute(anyCollection(), any(), any(), anyBoolean())).thenThrow(new SQLException(\"TestSQLException\"));\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(executorEngine, false);\n        SQLExecutorExceptionHandler.setExceptionThrown(false);\n        List<?> actual = jdbcExecutor.execute(Collections.emptyList(), null);\n        assertThat(actual, is(Collections.emptyList()));\n    }\n","date":"2020-11-26 16:38:39","endLine":70,"groupId":"4820","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertExecuteNotThrownSQLException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c2/404403eb6d8356f2bd22af6bcebea0514b8ffc.src","preCode":"    public void assertExecuteNotThrownSQLException() throws SQLException {\n        ExecutorEngine executorEngine = mock(ExecutorEngine.class);\n        when(executorEngine.execute(anyCollection(), any(), any(), anyBoolean())).thenThrow(new SQLException(\"TestSQLException\"));\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(executorEngine, false);\n        ExecutorExceptionHandler.setExceptionThrown(false);\n        List<?> actual = jdbcExecutor.execute(Collections.emptyList(), null);\n        assertThat(actual, is(Collections.emptyList()));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/execute/engine/jdbc/JDBCExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"8e406d00871c8a6273173644998e568468f8c399","commitMessage":"@@@Use default method to simplify typed SPI (#8360)\n\n* Rename SQLExecutorExceptionHandler\n\n* Use default method to simplify typed SPI","date":"2020-11-26 16:38:39","modifiedFileCount":"80","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-03-12 17:12:30","codes":[{"authorDate":"2021-03-12 17:12:30","commitOrder":3,"curCode":"    public void assertExecuteSQLException() {\n        try {\n            ExecutorEngine executorEngine = mock(ExecutorEngine.class);\n            when(executorEngine.execute(new ExecutionGroupContext<>(anyCollection()), any(), any(), anyBoolean())).thenThrow(new SQLException(\"TestSQLException\"));\n            JDBCExecutor jdbcExecutor = new JDBCExecutor(executorEngine, false);\n            jdbcExecutor.execute(new ExecutionGroupContext<>(Collections.emptyList()), null);\n        } catch (final SQLException ex) {\n            assertThat(ex.getMessage(), is(\"TestSQLException\"));\n        }\n    }\n","date":"2021-03-12 17:12:30","endLine":65,"groupId":"101704","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"assertExecuteSQLException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3d/c4d6994b71b8ee0428bfa33c55b4c77daedb09.src","preCode":"    public void assertExecuteSQLException() {\n        try {\n            ExecutorEngine executorEngine = mock(ExecutorEngine.class);\n            when(executorEngine.execute(anyCollection(), any(), any(), anyBoolean())).thenThrow(new SQLException(\"TestSQLException\"));\n            JDBCExecutor jdbcExecutor = new JDBCExecutor(executorEngine, false);\n            jdbcExecutor.execute(Collections.emptyList(), null);\n        } catch (final SQLException ex) {\n            assertThat(ex.getMessage(), is(\"TestSQLException\"));\n        }\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/execute/engine/jdbc/JDBCExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2021-03-12 17:12:30","commitOrder":3,"curCode":"    public void assertExecuteNotThrownSQLException() throws SQLException {\n        ExecutorEngine executorEngine = mock(ExecutorEngine.class);\n        when(executorEngine.execute(new ExecutionGroupContext<>(anyCollection()), any(), any(), anyBoolean())).thenThrow(new SQLException(\"TestSQLException\"));\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(executorEngine, false);\n        SQLExecutorExceptionHandler.setExceptionThrown(false);\n        List<?> actual = jdbcExecutor.execute(new ExecutionGroupContext<>(Collections.emptyList()), null);\n        assertThat(actual, is(Collections.emptyList()));\n    }\n","date":"2021-03-12 17:12:30","endLine":75,"groupId":"101704","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"assertExecuteNotThrownSQLException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/3d/c4d6994b71b8ee0428bfa33c55b4c77daedb09.src","preCode":"    public void assertExecuteNotThrownSQLException() throws SQLException {\n        ExecutorEngine executorEngine = mock(ExecutorEngine.class);\n        when(executorEngine.execute(anyCollection(), any(), any(), anyBoolean())).thenThrow(new SQLException(\"TestSQLException\"));\n        JDBCExecutor jdbcExecutor = new JDBCExecutor(executorEngine, false);\n        SQLExecutorExceptionHandler.setExceptionThrown(false);\n        List<?> actual = jdbcExecutor.execute(Collections.emptyList(), null);\n        assertThat(actual, is(Collections.emptyList()));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/execute/engine/jdbc/JDBCExecutorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"30ebff26e8734ce0809baf9be78cd2513ee1ae98","commitMessage":"@@@Create executionGroup context (#9643)\n\n* Show ddl/dml process\n\n* fix unit test\n\n* fix java doc","date":"2021-03-12 17:12:30","modifiedFileCount":"15","status":"M","submitter":"Juan Pan(Trista)"}]
