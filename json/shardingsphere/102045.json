[{"authorTime":"2021-03-02 16:00:33","codes":[{"authorDate":"2021-03-02 16:00:33","commitOrder":1,"curCode":"    private void handleWriteRowsEvent(final WriteRowsEvent event) {\n        TableMetaData tableMetaData = metaDataManager.getTableMetaData(event.getTableName());\n        for (Serializable[] each : event.getAfterRows()) {\n            DataRecord record = createDataRecord(event, each.length);\n            record.setType(ScalingConstant.INSERT);\n            for (int i = 0; i < each.length; i++) {\n                record.addColumn(new Column(tableMetaData.getColumnMetaData(i).getName(), each[i], true, tableMetaData.isPrimaryKey(i)));\n            }\n            pushRecord(record);\n        }\n    }\n","date":"2021-03-02 16:00:33","endLine":129,"groupId":"4760","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"handleWriteRowsEvent","params":"(finalWriteRowsEventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8a/0a9b16638db578bb2b2bc7d3ea1c4b2b3f1e3a.src","preCode":"    private void handleWriteRowsEvent(final WriteRowsEvent event) {\n        TableMetaData tableMetaData = metaDataManager.getTableMetaData(event.getTableName());\n        for (Serializable[] each : event.getAfterRows()) {\n            DataRecord record = createDataRecord(event, each.length);\n            record.setType(ScalingConstant.INSERT);\n            for (int i = 0; i < each.length; i++) {\n                record.addColumn(new Column(tableMetaData.getColumnMetaData(i).getName(), each[i], true, tableMetaData.isPrimaryKey(i)));\n            }\n            pushRecord(record);\n        }\n    }\n","realPath":"shardingsphere-scaling/shardingsphere-scaling-dialect/shardingsphere-scaling-mysql/src/main/java/org/apache/shardingsphere/scaling/mysql/component/MySQLIncrementalDumper.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"},{"authorDate":"2021-03-02 16:00:33","commitOrder":1,"curCode":"    private void handleDeleteRowsEvent(final DeleteRowsEvent event) {\n        TableMetaData tableMetaData = metaDataManager.getTableMetaData(event.getTableName());\n        for (Serializable[] each : event.getBeforeRows()) {\n            DataRecord record = createDataRecord(event, each.length);\n            record.setType(ScalingConstant.DELETE);\n            for (int i = 0; i < each.length; i++) {\n                record.addColumn(new Column(tableMetaData.getColumnMetaData(i).getName(), each[i], true, tableMetaData.isPrimaryKey(i)));\n            }\n            pushRecord(record);\n        }\n    }\n","date":"2021-03-02 16:00:33","endLine":160,"groupId":"9158","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"handleDeleteRowsEvent","params":"(finalDeleteRowsEventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8a/0a9b16638db578bb2b2bc7d3ea1c4b2b3f1e3a.src","preCode":"    private void handleDeleteRowsEvent(final DeleteRowsEvent event) {\n        TableMetaData tableMetaData = metaDataManager.getTableMetaData(event.getTableName());\n        for (Serializable[] each : event.getBeforeRows()) {\n            DataRecord record = createDataRecord(event, each.length);\n            record.setType(ScalingConstant.DELETE);\n            for (int i = 0; i < each.length; i++) {\n                record.addColumn(new Column(tableMetaData.getColumnMetaData(i).getName(), each[i], true, tableMetaData.isPrimaryKey(i)));\n            }\n            pushRecord(record);\n        }\n    }\n","realPath":"shardingsphere-scaling/shardingsphere-scaling-dialect/shardingsphere-scaling-mysql/src/main/java/org/apache/shardingsphere/scaling/mysql/component/MySQLIncrementalDumper.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"}],"commitId":"6e07d0e425d74a1e40fc68c595229ad4067fafb3","commitMessage":"@@@Optimize ScalingEntry (#9562)\n\n* Optimize ScalingEntry\n\n* Optimize FixtureScalingEntry\n\nCo-authored-by: qiulu3 <Lucas209910>","date":"2021-03-02 16:00:33","modifiedFileCount":"19","status":"B","submitter":"?? Lucas"},{"authorTime":"2021-05-26 16:33:30","codes":[{"authorDate":"2021-05-26 16:33:30","commitOrder":2,"curCode":"    private void handleWriteRowsEvent(final WriteRowsEvent event) {\n        List<MySQLColumnMetaData> tableMetaData = columnMetaDataLoader.load(event.getTableName());\n        for (Serializable[] each : event.getAfterRows()) {\n            DataRecord record = createDataRecord(event, each.length);\n            record.setType(ScalingConstant.INSERT);\n            for (int i = 0; i < each.length; i++) {\n                record.addColumn(new Column(tableMetaData.get(i).getName(), handleValue(tableMetaData.get(i), each[i]), true, tableMetaData.get(i).isPrimaryKey()));\n            }\n            pushRecord(record);\n        }\n    }\n","date":"2021-05-26 16:33:30","endLine":142,"groupId":"102045","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"handleWriteRowsEvent","params":"(finalWriteRowsEventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c4/061f02251fc7ae9ff674861ac9b46bf6b1c27b.src","preCode":"    private void handleWriteRowsEvent(final WriteRowsEvent event) {\n        TableMetaData tableMetaData = metaDataManager.getTableMetaData(event.getTableName());\n        for (Serializable[] each : event.getAfterRows()) {\n            DataRecord record = createDataRecord(event, each.length);\n            record.setType(ScalingConstant.INSERT);\n            for (int i = 0; i < each.length; i++) {\n                record.addColumn(new Column(tableMetaData.getColumnMetaData(i).getName(), each[i], true, tableMetaData.isPrimaryKey(i)));\n            }\n            pushRecord(record);\n        }\n    }\n","realPath":"shardingsphere-scaling/shardingsphere-scaling-dialect/shardingsphere-scaling-mysql/src/main/java/org/apache/shardingsphere/scaling/mysql/component/MySQLIncrementalDumper.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2021-05-26 16:33:30","commitOrder":2,"curCode":"    private void handleDeleteRowsEvent(final DeleteRowsEvent event) {\n        List<MySQLColumnMetaData> tableMetaData = columnMetaDataLoader.load(event.getTableName());\n        for (Serializable[] each : event.getBeforeRows()) {\n            DataRecord record = createDataRecord(event, each.length);\n            record.setType(ScalingConstant.DELETE);\n            for (int i = 0; i < each.length; i++) {\n                record.addColumn(new Column(tableMetaData.get(i).getName(), handleValue(tableMetaData.get(i), each[i]), true, tableMetaData.get(i).isPrimaryKey()));\n            }\n            pushRecord(record);\n        }\n    }\n","date":"2021-05-26 16:33:30","endLine":173,"groupId":"102045","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"handleDeleteRowsEvent","params":"(finalDeleteRowsEventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c4/061f02251fc7ae9ff674861ac9b46bf6b1c27b.src","preCode":"    private void handleDeleteRowsEvent(final DeleteRowsEvent event) {\n        TableMetaData tableMetaData = metaDataManager.getTableMetaData(event.getTableName());\n        for (Serializable[] each : event.getBeforeRows()) {\n            DataRecord record = createDataRecord(event, each.length);\n            record.setType(ScalingConstant.DELETE);\n            for (int i = 0; i < each.length; i++) {\n                record.addColumn(new Column(tableMetaData.getColumnMetaData(i).getName(), each[i], true, tableMetaData.isPrimaryKey(i)));\n            }\n            pushRecord(record);\n        }\n    }\n","realPath":"shardingsphere-scaling/shardingsphere-scaling-dialect/shardingsphere-scaling-mysql/src/main/java/org/apache/shardingsphere/scaling/mysql/component/MySQLIncrementalDumper.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"dcc0eb3fd5c8cc95c1771736b1f923dc3a95418a","commitMessage":"@@@Fix read binlog unsigned integer (#10478)\n\n* Fix read binlog integer value\n\n* Fix read binlog unsigned integer value\n\n* Fix ci\n\n* For checkstyle\n\n* For checkstyle","date":"2021-05-26 16:33:30","modifiedFileCount":"5","status":"M","submitter":"avalon5666"}]
