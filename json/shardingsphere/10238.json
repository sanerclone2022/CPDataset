[{"authorTime":"2021-07-03 15:12:51","codes":[{"authorDate":"2021-07-03 16:36:59","commitOrder":2,"curCode":"    private void checkToBeCreatedKeyGenerators(final CreateShardingTableRuleStatement sqlStatement) {\n        Collection<String> invalidKeyGenerators = getToBeCreatedKeyGenerators(sqlStatement).stream().distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(KeyGenerateAlgorithm.class, each, new Properties()).isPresent())\n                .collect(Collectors.toList());\n        if (!invalidKeyGenerators.isEmpty()) {\n            throw new InvalidKeyGeneratorsException(invalidKeyGenerators);\n        }\n    }\n","date":"2021-07-03 16:36:59","endLine":113,"groupId":"213","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeCreatedKeyGenerators","params":"(finalCreateShardingTableRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/e5/1d75470ee0b17a10d7452afe4333a6dcd8c87f.src","preCode":"    private void checkToBeCreatedKeyGenerators(final CreateShardingTableRuleStatement sqlStatement) {\n        Collection<String> invalidKeyGenerators = getToBeCreatedKeyGenerators(sqlStatement).stream().distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(KeyGenerateAlgorithm.class, each, new Properties()).isPresent())\n                .collect(Collectors.toList());\n        if (!invalidKeyGenerators.isEmpty()) {\n            throw new InvalidKeyGeneratorsException(invalidKeyGenerators);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/CreateShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"},{"authorDate":"2021-07-03 15:12:51","commitOrder":2,"curCode":"    private void checkToBeCreatedLoadBalancers(final CreateReadwriteSplittingRuleStatement sqlStatement) {\n        Collection<String> notExistedLoadBalancers = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getLoadBalancer).distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(ReplicaLoadBalanceAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedLoadBalancers.isEmpty()) {\n            throw new InvalidLoadBalancersException(notExistedLoadBalancers);\n        }\n    }\n","date":"2021-07-03 15:12:51","endLine":90,"groupId":"213","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkToBeCreatedLoadBalancers","params":"(finalCreateReadwriteSplittingRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/14/a9e22fb0fc5475cdf2e917c4354b61400d339d.src","preCode":"    private void checkToBeCreatedLoadBalancers(final CreateReadwriteSplittingRuleStatement sqlStatement) {\n        Collection<String> notExistedLoadBalancers = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getLoadBalancer).distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(ReplicaLoadBalanceAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedLoadBalancers.isEmpty()) {\n            throw new InvalidLoadBalancersException(notExistedLoadBalancers);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-distsql/shardingsphere-readwrite-splitting-distsql-handler/src/main/java/org/apache/shardingsphere/readwritesplitting/distsql/handler/update/CreateReadwriteSplittingRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"NB"}],"commitId":"70149d383a75b5b9986818226f18abd449e5ae80","commitMessage":"@@@Add shardingsphere-sharding-distsql-handler module (#11125)\n\n* Add shardingsphere-sharding-distsql-handler module\n\n* Fix test cases\n\n* Fix test cases\n\n* Fix test cases","date":"2021-07-03 16:36:59","modifiedFileCount":"1","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 01:26:11","codes":[{"authorDate":"2021-07-04 01:26:11","commitOrder":3,"curCode":"    private void checkToBeCreatedKeyGenerators(final CreateShardingTableRuleStatement sqlStatement) throws InvalidKeyGeneratorsException {\n        Collection<String> invalidKeyGenerators = getToBeCreatedKeyGenerators(sqlStatement).stream().distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(KeyGenerateAlgorithm.class, each, new Properties()).isPresent())\n                .collect(Collectors.toList());\n        if (!invalidKeyGenerators.isEmpty()) {\n            throw new InvalidKeyGeneratorsException(invalidKeyGenerators);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":114,"groupId":"213","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeCreatedKeyGenerators","params":"(finalCreateShardingTableRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/7a/d6dafc95f371f48033b501ca8152df1a6e8eac.src","preCode":"    private void checkToBeCreatedKeyGenerators(final CreateShardingTableRuleStatement sqlStatement) {\n        Collection<String> invalidKeyGenerators = getToBeCreatedKeyGenerators(sqlStatement).stream().distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(KeyGenerateAlgorithm.class, each, new Properties()).isPresent())\n                .collect(Collectors.toList());\n        if (!invalidKeyGenerators.isEmpty()) {\n            throw new InvalidKeyGeneratorsException(invalidKeyGenerators);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/CreateShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2021-07-04 01:26:11","commitOrder":3,"curCode":"    private void checkToBeCreatedLoadBalancers(final CreateReadwriteSplittingRuleStatement sqlStatement) throws InvalidLoadBalancersException {\n        Collection<String> notExistedLoadBalancers = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getLoadBalancer).distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(ReplicaLoadBalanceAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedLoadBalancers.isEmpty()) {\n            throw new InvalidLoadBalancersException(notExistedLoadBalancers);\n        }\n    }\n","date":"2021-07-04 01:26:11","endLine":93,"groupId":"213","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkToBeCreatedLoadBalancers","params":"(finalCreateReadwriteSplittingRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/80/d65d5c656fedb4a3e6de7abf36b68e04d980f9.src","preCode":"    private void checkToBeCreatedLoadBalancers(final CreateReadwriteSplittingRuleStatement sqlStatement) {\n        Collection<String> notExistedLoadBalancers = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getLoadBalancer).distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(ReplicaLoadBalanceAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedLoadBalancers.isEmpty()) {\n            throw new InvalidLoadBalancersException(notExistedLoadBalancers);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-distsql/shardingsphere-readwrite-splitting-distsql-handler/src/main/java/org/apache/shardingsphere/readwritesplitting/distsql/handler/update/CreateReadwriteSplittingRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"18ab59a5ac8de3a2c2d2c1dac39de3041b9c36f3","commitMessage":"@@@Refactor RuleDefinitionViolationException to extend SQLException (#11129)\n\n* Refactor RDLBackendHandler\n\n* Refactor RuleDefinitionViolationException to extend SQLException","date":"2021-07-04 01:26:11","modifiedFileCount":"66","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-04 12:43:06","codes":[{"authorDate":"2021-07-04 12:43:06","commitOrder":4,"curCode":"    private void checkToBeCreatedKeyGenerators(final CreateShardingTableRuleStatement sqlStatement) throws InvalidAlgorithmConfigurationException {\n        Collection<String> invalidKeyGenerators = getToBeCreatedKeyGenerators(sqlStatement).stream().distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(KeyGenerateAlgorithm.class, each, new Properties()).isPresent())\n                .collect(Collectors.toList());\n        if (!invalidKeyGenerators.isEmpty()) {\n            throw new InvalidAlgorithmConfigurationException(\"key generator\", invalidKeyGenerators);\n        }\n    }\n","date":"2021-07-04 12:43:06","endLine":113,"groupId":"10238","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkToBeCreatedKeyGenerators","params":"(finalCreateShardingTableRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/be/998104b231ac5bcf36e946ba32f08e051ce8c2.src","preCode":"    private void checkToBeCreatedKeyGenerators(final CreateShardingTableRuleStatement sqlStatement) throws InvalidKeyGeneratorsException {\n        Collection<String> invalidKeyGenerators = getToBeCreatedKeyGenerators(sqlStatement).stream().distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(KeyGenerateAlgorithm.class, each, new Properties()).isPresent())\n                .collect(Collectors.toList());\n        if (!invalidKeyGenerators.isEmpty()) {\n            throw new InvalidKeyGeneratorsException(invalidKeyGenerators);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-distsql/shardingsphere-sharding-distsql-handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/update/CreateShardingTableRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2021-07-04 12:43:06","commitOrder":4,"curCode":"    private void checkToBeCreatedLoadBalancers(final CreateReadwriteSplittingRuleStatement sqlStatement) throws InvalidAlgorithmConfigurationException {\n        Collection<String> notExistedLoadBalancers = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getLoadBalancer).distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(ReplicaLoadBalanceAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedLoadBalancers.isEmpty()) {\n            throw new InvalidAlgorithmConfigurationException(\"Load balancers\", notExistedLoadBalancers);\n        }\n    }\n","date":"2021-07-04 12:43:06","endLine":93,"groupId":"10238","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkToBeCreatedLoadBalancers","params":"(finalCreateReadwriteSplittingRuleStatementsqlStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/0f/2aa69ead2b167d670a30a4972178645d404f15.src","preCode":"    private void checkToBeCreatedLoadBalancers(final CreateReadwriteSplittingRuleStatement sqlStatement) throws InvalidLoadBalancersException {\n        Collection<String> notExistedLoadBalancers = sqlStatement.getRules().stream().map(ReadwriteSplittingRuleSegment::getLoadBalancer).distinct()\n                .filter(each -> !TypedSPIRegistry.findRegisteredService(ReplicaLoadBalanceAlgorithm.class, each, new Properties()).isPresent()).collect(Collectors.toList());\n        if (!notExistedLoadBalancers.isEmpty()) {\n            throw new InvalidLoadBalancersException(notExistedLoadBalancers);\n        }\n    }\n","realPath":"shardingsphere-features/shardingsphere-readwrite-splitting/shardingsphere-readwrite-splitting-distsql/shardingsphere-readwrite-splitting-distsql-handler/src/main/java/org/apache/shardingsphere/readwritesplitting/distsql/handler/update/CreateReadwriteSplittingRuleStatementUpdater.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"3ddeaf7ab2e64f7ff1a935c0ed598227a3ddf765","commitMessage":"@@@Add CurrentRuleNotExistedException to refine Exception of current rule validation (#11133)\n\n* Remove InvalidDatabaseDiscoveryTypesException\n\n* Remove InvalidDatabaseDiscoveryTypesException\n\n* Remove InvalidEncryptorsException\n\n* Remove InvalidLoadBalancersException\n\n* Remove InvalidShardingAlgorithmsException\n\n* Remove InvalidKeyGeneratorsException","date":"2021-07-04 12:43:06","modifiedFileCount":"16","status":"M","submitter":"Liang Zhang"}]
