[{"authorTime":"2020-05-16 19:36:14","codes":[{"authorDate":"2020-05-16 19:36:14","commitOrder":1,"curCode":"    public void assertSetAsciiStream() throws SQLException, IOException {\n        for (PreparedStatement each : preparedStatements) {\n            try (InputStream inputStream = new ByteArrayInputStream(new byte[]{})) {\n                each.setAsciiStream(1, inputStream);\n                each.setAsciiStream(2, inputStream, 100);\n                each.setAsciiStream(3, inputStream, 100L);\n                assertParameter(each, 1, inputStream);\n                assertParameter(each, 2, inputStream);\n                assertParameter(each, 3, inputStream);\n            }\n        }\n    }\n","date":"2020-05-16 19:36:14","endLine":235,"groupId":"1774","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertSetAsciiStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d5/8fc78f3a1b641fd3b1747cb8da4f4359698e40.src","preCode":"    public void assertSetAsciiStream() throws SQLException, IOException {\n        for (PreparedStatement each : preparedStatements) {\n            try (InputStream inputStream = new ByteArrayInputStream(new byte[]{})) {\n                each.setAsciiStream(1, inputStream);\n                each.setAsciiStream(2, inputStream, 100);\n                each.setAsciiStream(3, inputStream, 100L);\n                assertParameter(each, 1, inputStream);\n                assertParameter(each, 2, inputStream);\n                assertParameter(each, 3, inputStream);\n            }\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/adapter/PreparedStatementAdapterTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"B"},{"authorDate":"2020-05-16 19:36:14","commitOrder":1,"curCode":"    public void assertSetBinaryStream() throws SQLException, IOException {\n        for (PreparedStatement each : preparedStatements) {\n            try (InputStream inputStream = new ByteArrayInputStream(new byte[]{})) {\n                each.setBinaryStream(1, inputStream);\n                each.setBinaryStream(2, inputStream, 100);\n                each.setBinaryStream(3, inputStream, 100L);\n                assertParameter(each, 1, inputStream);\n                assertParameter(each, 2, inputStream);\n                assertParameter(each, 3, inputStream);\n            }\n        }\n    }\n","date":"2020-05-16 19:36:14","endLine":260,"groupId":"1774","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertSetBinaryStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/d5/8fc78f3a1b641fd3b1747cb8da4f4359698e40.src","preCode":"    public void assertSetBinaryStream() throws SQLException, IOException {\n        for (PreparedStatement each : preparedStatements) {\n            try (InputStream inputStream = new ByteArrayInputStream(new byte[]{})) {\n                each.setBinaryStream(1, inputStream);\n                each.setBinaryStream(2, inputStream, 100);\n                each.setBinaryStream(3, inputStream, 100L);\n                assertParameter(each, 1, inputStream);\n                assertParameter(each, 2, inputStream);\n                assertParameter(each, 3, inputStream);\n            }\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/adapter/PreparedStatementAdapterTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"B"}],"commitId":"468e4540f107bacea98e9785b7312b2e5bad0c7e","commitMessage":"@@@Rename sharding-jdbc to shardingsphere-jdbc (#5641)\n\n* Rename sharding-jdbc to shardingsphere-jdbc\n\n* rename org.apache.shardingsphere.shardingjdbc to org.apache.shardingsphere.driver\n\n* rename org.apache.shardingsphere.shardingjdbc to org.apache.shardingsphere.driver","date":"2020-05-16 19:36:14","modifiedFileCount":"32","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-01-29 10:11:55","codes":[{"authorDate":"2021-01-29 10:11:55","commitOrder":2,"curCode":"    public void assertSetAsciiStream() throws IOException {\n        try (InputStream inputStream = new ByteArrayInputStream(new byte[]{})) {\n            shardingSpherePreparedStatement.setAsciiStream(1, inputStream);\n            shardingSpherePreparedStatement.setAsciiStream(2, inputStream, 100);\n            shardingSpherePreparedStatement.setAsciiStream(3, inputStream, 100L);\n            assertParameter(shardingSpherePreparedStatement, 1, inputStream);\n            assertParameter(shardingSpherePreparedStatement, 2, inputStream);\n            assertParameter(shardingSpherePreparedStatement, 3, inputStream);\n        }\n    }\n","date":"2021-01-29 10:11:55","endLine":188,"groupId":"101079","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertSetAsciiStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c3/b9407363a77ad4d2abcec601023f1f6948f643.src","preCode":"    public void assertSetAsciiStream() throws SQLException, IOException {\n        for (PreparedStatement each : preparedStatements) {\n            try (InputStream inputStream = new ByteArrayInputStream(new byte[]{})) {\n                each.setAsciiStream(1, inputStream);\n                each.setAsciiStream(2, inputStream, 100);\n                each.setAsciiStream(3, inputStream, 100L);\n                assertParameter(each, 1, inputStream);\n                assertParameter(each, 2, inputStream);\n                assertParameter(each, 3, inputStream);\n            }\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/adapter/PreparedStatementAdapterTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"},{"authorDate":"2021-01-29 10:11:55","commitOrder":2,"curCode":"    public void assertSetBinaryStream() throws IOException {\n        try (InputStream inputStream = new ByteArrayInputStream(new byte[]{})) {\n            shardingSpherePreparedStatement.setBinaryStream(1, inputStream);\n            shardingSpherePreparedStatement.setBinaryStream(2, inputStream, 100);\n            shardingSpherePreparedStatement.setBinaryStream(3, inputStream, 100L);\n            assertParameter(shardingSpherePreparedStatement, 1, inputStream);\n            assertParameter(shardingSpherePreparedStatement, 2, inputStream);\n            assertParameter(shardingSpherePreparedStatement, 3, inputStream);\n        }\n    }\n","date":"2021-01-29 10:11:55","endLine":208,"groupId":"101079","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertSetBinaryStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c3/b9407363a77ad4d2abcec601023f1f6948f643.src","preCode":"    public void assertSetBinaryStream() throws SQLException, IOException {\n        for (PreparedStatement each : preparedStatements) {\n            try (InputStream inputStream = new ByteArrayInputStream(new byte[]{})) {\n                each.setBinaryStream(1, inputStream);\n                each.setBinaryStream(2, inputStream, 100);\n                each.setBinaryStream(3, inputStream, 100L);\n                assertParameter(each, 1, inputStream);\n                assertParameter(each, 2, inputStream);\n                assertParameter(each, 3, inputStream);\n            }\n        }\n    }\n","realPath":"shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/adapter/PreparedStatementAdapterTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"}],"commitId":"dbb34e096238f57d51a41e7edb203e4d6838f9e3","commitMessage":"@@@Simplify PreparedStatementAdapterTest (#9211)\n\n","date":"2021-01-29 10:11:55","modifiedFileCount":"1","status":"M","submitter":"Liang Zhang"}]
