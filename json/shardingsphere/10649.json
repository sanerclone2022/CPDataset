[{"authorTime":"2021-06-04 22:49:49","codes":[{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    private SelectStatementContext createSelectStatementContext() {\n        AggregationProjection aggregationProjection1 = new AggregationProjection(AggregationType.COUNT, \"(*)\", null);\n        aggregationProjection1.setIndex(1);\n        AggregationProjection aggregationProjection2 = new AggregationProjection(AggregationType.AVG, \"(num)\", null);\n        aggregationProjection2.setIndex(2);\n        AggregationProjection derivedAggregationProjection1 = new AggregationProjection(AggregationType.COUNT, \"(num)\", \"AVG_DERIVED_COUNT_0\");\n        aggregationProjection2.setIndex(4);\n        aggregationProjection2.getDerivedAggregationProjections().add(derivedAggregationProjection1);\n        AggregationProjection derivedAggregationProjection2 = new AggregationProjection(AggregationType.SUM, \"(num)\", \"AVG_DERIVED_SUM_0\");\n        aggregationProjection2.setIndex(5);\n        aggregationProjection2.getDerivedAggregationProjections().add(derivedAggregationProjection2);\n        ProjectionsContext projectionsContext = new ProjectionsContext(0, 0, false, Arrays.asList(aggregationProjection1, aggregationProjection2));\n        SelectStatement selectStatement = new MySQLSelectStatement();\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        selectStatement.setProjections(projectionsSegment);\n        return new SelectStatementContext(selectStatement,\n                new GroupByContext(Collections.singletonList(createOrderByItem(new IndexOrderByItemSegment(0, 0, 3, OrderDirection.ASC, OrderDirection.ASC)))),\n                new OrderByContext(Collections.singletonList(createOrderByItem(new IndexOrderByItemSegment(0, 0, 3, OrderDirection.DESC, OrderDirection.ASC))), false),\n                projectionsContext, new PaginationContext(null, null, Collections.emptyList()));\n    }\n","date":"2021-06-04 22:49:49","endLine":118,"groupId":"14499","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createSelectStatementContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/eb/cb8fde6732e75412e953f5596c189fc70f1464.src","preCode":"    private SelectStatementContext createSelectStatementContext() {\n        AggregationProjection aggregationProjection1 = new AggregationProjection(AggregationType.COUNT, \"(*)\", null);\n        aggregationProjection1.setIndex(1);\n        AggregationProjection aggregationProjection2 = new AggregationProjection(AggregationType.AVG, \"(num)\", null);\n        aggregationProjection2.setIndex(2);\n        AggregationProjection derivedAggregationProjection1 = new AggregationProjection(AggregationType.COUNT, \"(num)\", \"AVG_DERIVED_COUNT_0\");\n        aggregationProjection2.setIndex(4);\n        aggregationProjection2.getDerivedAggregationProjections().add(derivedAggregationProjection1);\n        AggregationProjection derivedAggregationProjection2 = new AggregationProjection(AggregationType.SUM, \"(num)\", \"AVG_DERIVED_SUM_0\");\n        aggregationProjection2.setIndex(5);\n        aggregationProjection2.getDerivedAggregationProjections().add(derivedAggregationProjection2);\n        ProjectionsContext projectionsContext = new ProjectionsContext(0, 0, false, Arrays.asList(aggregationProjection1, aggregationProjection2));\n        SelectStatement selectStatement = new MySQLSelectStatement();\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        selectStatement.setProjections(projectionsSegment);\n        return new SelectStatementContext(selectStatement,\n                new GroupByContext(Collections.singletonList(createOrderByItem(new IndexOrderByItemSegment(0, 0, 3, OrderDirection.ASC, OrderDirection.ASC)))),\n                new OrderByContext(Collections.singletonList(createOrderByItem(new IndexOrderByItemSegment(0, 0, 3, OrderDirection.DESC, OrderDirection.ASC))), false),\n                projectionsContext, new PaginationContext(null, null, Collections.emptyList()));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/groupby/GroupByMemoryMergedResultTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"B"},{"authorDate":"2021-06-04 22:49:49","commitOrder":1,"curCode":"    public void assertBuildGroupByMemoryMergedResultWithMySQLLimit() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(buildSelectStatement(new MySQLSelectStatement()),\n                new GroupByContext(Collections.singletonList(new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC)))), \n                new OrderByContext(Collections.emptyList(), false), new ProjectionsContext(0, 0, false, Collections.emptyList()),\n                new PaginationContext(new NumberLiteralLimitValueSegment(0, 0, 1), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(LimitDecoratorMergedResult.class));\n        assertThat(((LimitDecoratorMergedResult) actual).getMergedResult(), instanceOf(GroupByMemoryMergedResult.class));\n    }\n","date":"2021-06-04 22:49:49","endLine":242,"groupId":"5391","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuildGroupByMemoryMergedResultWithMySQLLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a7/bca3b50963f7ff9d074f650320fc67b78f00ea.src","preCode":"    public void assertBuildGroupByMemoryMergedResultWithMySQLLimit() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(buildSelectStatement(new MySQLSelectStatement()),\n                new GroupByContext(Collections.singletonList(new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC)))), \n                new OrderByContext(Collections.emptyList(), false), new ProjectionsContext(0, 0, false, Collections.emptyList()),\n                new PaginationContext(new NumberLiteralLimitValueSegment(0, 0, 1), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(LimitDecoratorMergedResult.class));\n        assertThat(((LimitDecoratorMergedResult) actual).getMergedResult(), instanceOf(GroupByMemoryMergedResult.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/ShardingDQLResultMergerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"B"}],"commitId":"6b157b44d0336e4d9c61f940b0ec19c26758af84","commitMessage":"@@@Merge sharding feature to core module (#10662)\n\n* Merge dependencies\n\n* Merge sharding feature to api module\n\n* Merge sharding feature to core module","date":"2021-06-04 22:49:49","modifiedFileCount":"0","status":"B","submitter":"Liang Zhang"},{"authorTime":"2021-08-06 15:37:24","codes":[{"authorDate":"2021-08-06 15:37:24","commitOrder":2,"curCode":"    private SelectStatementContext createSelectStatementContext() {\n        SelectStatement selectStatement = new MySQLSelectStatement();\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        projectionsSegment.getProjections().add(new AggregationProjectionSegment(0, 0, AggregationType.COUNT, \"(*)\"));\n        projectionsSegment.getProjections().add(new AggregationProjectionSegment(0, 0, AggregationType.AVG, \"(num)\"));\n        selectStatement.setProjections(projectionsSegment);\n        selectStatement.setGroupBy(new GroupBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 3, OrderDirection.ASC, OrderDirection.ASC))));\n        selectStatement.setOrderBy(new OrderBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 3, OrderDirection.DESC, OrderDirection.ASC))));\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n        when(metaData.getSchema()).thenReturn(mock(ShardingSphereSchema.class));\n        selectStatement.setProjections(projectionsSegment);\n        return new SelectStatementContext(Collections.singletonMap(DefaultSchema.LOGIC_NAME, metaData), Collections.emptyList(), selectStatement, DefaultSchema.LOGIC_NAME);\n    }\n","date":"2021-08-06 15:37:24","endLine":112,"groupId":"10649","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"createSelectStatementContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/8a/8350967579d23f3e450cbad1a60c4cfad7fd7f.src","preCode":"    private SelectStatementContext createSelectStatementContext() {\n        AggregationProjection aggregationProjection1 = new AggregationProjection(AggregationType.COUNT, \"(*)\", null);\n        aggregationProjection1.setIndex(1);\n        AggregationProjection aggregationProjection2 = new AggregationProjection(AggregationType.AVG, \"(num)\", null);\n        aggregationProjection2.setIndex(2);\n        AggregationProjection derivedAggregationProjection1 = new AggregationProjection(AggregationType.COUNT, \"(num)\", \"AVG_DERIVED_COUNT_0\");\n        aggregationProjection2.setIndex(4);\n        aggregationProjection2.getDerivedAggregationProjections().add(derivedAggregationProjection1);\n        AggregationProjection derivedAggregationProjection2 = new AggregationProjection(AggregationType.SUM, \"(num)\", \"AVG_DERIVED_SUM_0\");\n        aggregationProjection2.setIndex(5);\n        aggregationProjection2.getDerivedAggregationProjections().add(derivedAggregationProjection2);\n        ProjectionsContext projectionsContext = new ProjectionsContext(0, 0, false, Arrays.asList(aggregationProjection1, aggregationProjection2));\n        SelectStatement selectStatement = new MySQLSelectStatement();\n        ProjectionsSegment projectionsSegment = new ProjectionsSegment(0, 0);\n        selectStatement.setProjections(projectionsSegment);\n        return new SelectStatementContext(selectStatement,\n                new GroupByContext(Collections.singletonList(createOrderByItem(new IndexOrderByItemSegment(0, 0, 3, OrderDirection.ASC, OrderDirection.ASC)))),\n                new OrderByContext(Collections.singletonList(createOrderByItem(new IndexOrderByItemSegment(0, 0, 3, OrderDirection.DESC, OrderDirection.ASC))), false),\n                projectionsContext, new PaginationContext(null, null, Collections.emptyList()));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/groupby/GroupByMemoryMergedResultTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2021-08-06 15:37:24","commitOrder":2,"curCode":"    public void assertBuildGroupByMemoryMergedResultWithMySQLLimit() throws SQLException {\n        final ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n        when(metaData.getSchema()).thenReturn(mock(ShardingSphereSchema.class));\n        MySQLSelectStatement selectStatement = (MySQLSelectStatement) buildSelectStatement(new MySQLSelectStatement());\n        selectStatement.setGroupBy(new GroupBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC))));\n        selectStatement.setProjections(new ProjectionsSegment(0, 0));\n        selectStatement.setLimit(new LimitSegment(0, 0, new NumberLiteralLimitValueSegment(0, 0, 1), null));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(Collections.singletonMap(DefaultSchema.LOGIC_NAME, metaData), Collections.emptyList(),\n                selectStatement, DefaultSchema.LOGIC_NAME);\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(LimitDecoratorMergedResult.class));\n        assertThat(((LimitDecoratorMergedResult) actual).getMergedResult(), instanceOf(GroupByStreamMergedResult.class));\n    }\n","date":"2021-08-06 15:37:24","endLine":350,"groupId":"10649","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuildGroupByMemoryMergedResultWithMySQLLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/91/b157c5938e6bd21ce8cab39304e3baf016c15b.src","preCode":"    public void assertBuildGroupByMemoryMergedResultWithMySQLLimit() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(buildSelectStatement(new MySQLSelectStatement()),\n                new GroupByContext(Collections.singletonList(new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC)))), \n                new OrderByContext(Collections.emptyList(), false), new ProjectionsContext(0, 0, false, Collections.emptyList()),\n                new PaginationContext(new NumberLiteralLimitValueSegment(0, 0, 1), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(LimitDecoratorMergedResult.class));\n        assertThat(((LimitDecoratorMergedResult) actual).getMergedResult(), instanceOf(GroupByMemoryMergedResult.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/ShardingDQLResultMergerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":337,"status":"M"}],"commitId":"2843f408e67d98d3e62485c8ed89dbe08e9cb202","commitMessage":"@@@Remove test only constructor of SelectStatementContext (#11675)\n\n* TopAndRowNumberDecoratorMergedResultTest use SelectStatementContext's second constructor\n\n* PreparedShadowDataSourceRouterTest use SelectStatementContext's second constructor\n\n* GroupByMemoryMergedResultTest use SelectStatementContext's second constructor\n\n* GroupByRowComparatorTest use SelectStatementContext's second constructor\n\n* ShardingResultMergerEngineTest use SelectStatementContext's second constructor\n\n* ShardingDQLResultMergerTest use SelectStatementContext's second constructor\n\n* ShardingDQLResultMergerTest use SelectStatementContext's second constructor2\n\n* GroupByStreamMergedResultTest use SelectStatementContext's second constructor\n\n* IteratorStreamMergedResultTest use SelectStatementContext's second constructor\n\n* OrderByStreamMergedResultTest use SelectStatementContext's second constructor\n\n* SelectStatementContextTest use SelectStatementContext's second constructor\n\n* LimitDecoratorMergedResultTest use SelectStatementContext's second constructor\n\n* RowNumberDecoratorMergedResultTest use SelectStatementContext's second constructor\n\n* OrderByValueTest use SelectStatementContext's second constructor\n\n* code style\n\n* merge code","date":"2021-08-06 15:37:24","modifiedFileCount":"14","status":"M","submitter":"liguoping"}]
