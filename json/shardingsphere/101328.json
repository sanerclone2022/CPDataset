[{"authorTime":"2021-02-05 18:17:20","codes":[{"authorDate":"2021-02-05 18:17:20","commitOrder":2,"curCode":"    public void assertSQLStats() {\n        CodePointBuffer buffer = CodePointBuffer.withChars(CharBuffer.wrap(inputSql.toCharArray()));\n        MySQLLexer lexer = new MySQLLexer(CodePointCharStream.fromBuffer(buffer));\n        MySQLParser parser = new MySQLParser(new CommonTokenStream(lexer));\n        ParseTree tree = ((ParseASTNode) parser.parse()).getRootNode();\n        MySQLSQLStatVisitor visitor = new MySQLSQLStatVisitor();\n        SqlStats sqlStats = visitor.visit(tree);\n        assertThat(\"table assert error\", sqlStats.getTables().keySet().size(), is(tableNum));\n        assertThat(\"column assert error\", sqlStats.getColumns().keySet().size(), is(columnNum));\n    }\n","date":"2021-02-05 18:17:20","endLine":86,"groupId":"3936","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertSQLStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/c5/4e3006f5b6b5d2eeed5c55e34a4ea4dbca0ef4.src","preCode":"    public void assertSQLStats() {\n        CodePointBuffer buffer = CodePointBuffer.withChars(CharBuffer.wrap(inputSql.toCharArray()));\n        MySQLLexer lexer = new MySQLLexer(CodePointCharStream.fromBuffer(buffer));\n        MySQLParser parser = new MySQLParser(new CommonTokenStream(lexer));\n        ParseTree tree = ((ParseASTNode) parser.parse()).getRootNode();\n        MySQLSQLStatVisitor visitor = new MySQLSQLStatVisitor();\n        SqlStats sqlStats = visitor.visit(tree);\n        assertThat(\"table assert error\", sqlStats.getTables().keySet().size(), is(tableNum));\n        assertThat(\"column assert error\", sqlStats.getColumns().keySet().size(), is(columnNum));\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/test/java/org/apache/shardingsphere/sql/parser/mysql/MySQLTableVistorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2021-02-05 18:17:20","commitOrder":2,"curCode":"    public void assertSQLFormat() {\n        CodePointBuffer buffer = CodePointBuffer.withChars(CharBuffer.wrap(inputSql.toCharArray()));\n        MySQLLexer lexer = new MySQLLexer(CodePointCharStream.fromBuffer(buffer));\n        MySQLParser parser = new MySQLParser(new CommonTokenStream(lexer));\n        ParseTree tree = ((ParseASTNode) parser.parse()).getRootNode();\n        MySQLFormatSQLVisitor visitor = new MySQLDMLFormatSQLVisitor();\n        visitor.setParameterized(false);\n        assertThat(\"SQL format error\", expectFormattedSQL, is(visitor.visit(tree)));\n    }\n","date":"2021-02-05 18:17:20","endLine":159,"groupId":"3936","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertSQLFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ca/fd78385b2b3845b3037923838ddfc72dd90922.src","preCode":"    public void assertSQLFormat() {\n        CodePointBuffer buffer = CodePointBuffer.withChars(CharBuffer.wrap(inputSql.toCharArray()));\n        MySQLLexer lexer = new MySQLLexer(CodePointCharStream.fromBuffer(buffer));\n        MySQLParser parser = new MySQLParser(new CommonTokenStream(lexer));\n        ParseTree tree = ((ParseASTNode) parser.parse()).getRootNode();\n        MySQLFormatSQLVisitor visitor = new MySQLDMLFormatSQLVisitor();\n        visitor.setParameterized(false);\n        assertThat(\"SQL format error\", expectFormattedSQL, is(visitor.visit(tree)));\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/test/java/org/apache/shardingsphere/sql/parser/mysql/MySQLFormatTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"MB"}],"commitId":"78c9ec39e2b8aabeb6c050e02b06b202dbbf899e","commitMessage":"@@@For code format of MySQL format test (#9354)\n\n* Fix #9240\n\n* Fix test case\n\n* For code format of MySQL format test","date":"2021-02-05 18:17:20","modifiedFileCount":"2","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-02-05 18:17:20","codes":[{"authorDate":"2021-03-16 16:29:05","commitOrder":3,"curCode":"    public void assertSQLStats() {\n        CodePointBuffer buffer = CodePointBuffer.withChars(CharBuffer.wrap(inputSql.toCharArray()));\n        MySQLLexer lexer = new MySQLLexer(CodePointCharStream.fromBuffer(buffer));\n        MySQLParser parser = new MySQLParser(new CommonTokenStream(lexer));\n        ParseTree tree = ((ParseASTNode) parser.parse()).getRootNode();\n        MySQLSQLStatVisitor visitor = new MySQLSQLStatVisitor();\n        SQLStats sqlStats = visitor.visit(tree);\n        assertThat(\"table assert error\", sqlStats.getTables().keySet().size(), is(tableNum));\n        assertThat(\"column assert error\", sqlStats.getColumns().keySet().size(), is(columnNum));\n    }\n","date":"2021-03-16 16:29:05","endLine":86,"groupId":"101328","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertSQLStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a6/e99fb224ce85fa411325fbf5ee396451bd5528.src","preCode":"    public void assertSQLStats() {\n        CodePointBuffer buffer = CodePointBuffer.withChars(CharBuffer.wrap(inputSql.toCharArray()));\n        MySQLLexer lexer = new MySQLLexer(CodePointCharStream.fromBuffer(buffer));\n        MySQLParser parser = new MySQLParser(new CommonTokenStream(lexer));\n        ParseTree tree = ((ParseASTNode) parser.parse()).getRootNode();\n        MySQLSQLStatVisitor visitor = new MySQLSQLStatVisitor();\n        SqlStats sqlStats = visitor.visit(tree);\n        assertThat(\"table assert error\", sqlStats.getTables().keySet().size(), is(tableNum));\n        assertThat(\"column assert error\", sqlStats.getColumns().keySet().size(), is(columnNum));\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/test/java/org/apache/shardingsphere/sql/parser/mysql/MySQLTableVistorTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2021-02-05 18:17:20","commitOrder":3,"curCode":"    public void assertSQLFormat() {\n        CodePointBuffer buffer = CodePointBuffer.withChars(CharBuffer.wrap(inputSql.toCharArray()));\n        MySQLLexer lexer = new MySQLLexer(CodePointCharStream.fromBuffer(buffer));\n        MySQLParser parser = new MySQLParser(new CommonTokenStream(lexer));\n        ParseTree tree = ((ParseASTNode) parser.parse()).getRootNode();\n        MySQLFormatSQLVisitor visitor = new MySQLDMLFormatSQLVisitor();\n        visitor.setParameterized(false);\n        assertThat(\"SQL format error\", expectFormattedSQL, is(visitor.visit(tree)));\n    }\n","date":"2021-02-05 18:17:20","endLine":159,"groupId":"101328","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertSQLFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/ca/fd78385b2b3845b3037923838ddfc72dd90922.src","preCode":"    public void assertSQLFormat() {\n        CodePointBuffer buffer = CodePointBuffer.withChars(CharBuffer.wrap(inputSql.toCharArray()));\n        MySQLLexer lexer = new MySQLLexer(CodePointCharStream.fromBuffer(buffer));\n        MySQLParser parser = new MySQLParser(new CommonTokenStream(lexer));\n        ParseTree tree = ((ParseASTNode) parser.parse()).getRootNode();\n        MySQLFormatSQLVisitor visitor = new MySQLDMLFormatSQLVisitor();\n        visitor.setParameterized(false);\n        assertThat(\"SQL format error\", expectFormattedSQL, is(visitor.visit(tree)));\n    }\n","realPath":"shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/test/java/org/apache/shardingsphere/sql/parser/mysql/MySQLFormatTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"N"}],"commitId":"c99aa1ff41573ef989bb4f78115d10fc79232938","commitMessage":"@@@Minor changes for code format (#9688)\n\n* Revise #9658\n\n* For code format\n\n* Revise javadoc\n\n* Rename SQLStats\n\n* Refactor MetadataRefreshEngine","date":"2021-03-16 16:29:05","modifiedFileCount":"11","status":"M","submitter":"Liang Zhang"}]
