[{"authorTime":"2020-10-11 18:46:54","codes":[{"authorDate":"2021-06-04 22:49:49","commitOrder":2,"curCode":"    public void assertBuildGroupByMemoryMergedResultWithMySQLLimit() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(buildSelectStatement(new MySQLSelectStatement()),\n                new GroupByContext(Collections.singletonList(new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC)))), \n                new OrderByContext(Collections.emptyList(), false), new ProjectionsContext(0, 0, false, Collections.emptyList()),\n                new PaginationContext(new NumberLiteralLimitValueSegment(0, 0, 1), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(LimitDecoratorMergedResult.class));\n        assertThat(((LimitDecoratorMergedResult) actual).getMergedResult(), instanceOf(GroupByMemoryMergedResult.class));\n    }\n","date":"2021-06-04 22:49:49","endLine":242,"groupId":"5391","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildGroupByMemoryMergedResultWithMySQLLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a7/bca3b50963f7ff9d074f650320fc67b78f00ea.src","preCode":"    public void assertBuildGroupByMemoryMergedResultWithMySQLLimit() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(buildSelectStatement(new MySQLSelectStatement()),\n                new GroupByContext(Collections.singletonList(new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC)))), \n                new OrderByContext(Collections.emptyList(), false), new ProjectionsContext(0, 0, false, Collections.emptyList()),\n                new PaginationContext(new NumberLiteralLimitValueSegment(0, 0, 1), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(LimitDecoratorMergedResult.class));\n        assertThat(((LimitDecoratorMergedResult) actual).getMergedResult(), instanceOf(GroupByMemoryMergedResult.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/ShardingDQLResultMergerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"B"},{"authorDate":"2020-10-11 18:46:54","commitOrder":2,"curCode":"    private void getRevisedRowCountWithMax(final SelectStatement selectStatement) {\n        selectStatement.setProjections(new ProjectionsSegment(0, 0));\n        selectStatement.setGroupBy(new GroupBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.DESC))));\n        selectStatement.setOrderBy(new OrderBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.DESC))));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(null, Collections.emptyList(), selectStatement);\n        assertThat(new PaginationContext(getOffsetSegment(), getRowCountSegment(), getParameters()).getRevisedRowCount(selectStatementContext), is((long) Integer.MAX_VALUE));\n    }\n","date":"2020-10-11 18:46:54","endLine":195,"groupId":"13627","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getRevisedRowCountWithMax","params":"(finalSelectStatementselectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1b/13b15a6dcd45765911c9f7965384e34e133b03.src","preCode":"    private void getRevisedRowCountWithMax(final SelectStatement selectStatement) {\n        selectStatement.setProjections(new ProjectionsSegment(0, 0));\n        selectStatement.setGroupBy(new GroupBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.DESC))));\n        selectStatement.setOrderBy(new OrderBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.DESC))));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(null, Collections.emptyList(), selectStatement);\n        assertThat(new PaginationContext(getOffsetSegment(), getRowCountSegment(), getParameters()).getRevisedRowCount(selectStatementContext), is((long) Integer.MAX_VALUE));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/segment/select/pagination/PaginationContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"NB"}],"commitId":"6b157b44d0336e4d9c61f940b0ec19c26758af84","commitMessage":"@@@Merge sharding feature to core module (#10662)\n\n* Merge dependencies\n\n* Merge sharding feature to api module\n\n* Merge sharding feature to core module","date":"2021-06-04 22:49:49","modifiedFileCount":"0","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-02 20:44:49","codes":[{"authorDate":"2021-06-04 22:49:49","commitOrder":3,"curCode":"    public void assertBuildGroupByMemoryMergedResultWithMySQLLimit() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(buildSelectStatement(new MySQLSelectStatement()),\n                new GroupByContext(Collections.singletonList(new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC)))), \n                new OrderByContext(Collections.emptyList(), false), new ProjectionsContext(0, 0, false, Collections.emptyList()),\n                new PaginationContext(new NumberLiteralLimitValueSegment(0, 0, 1), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(LimitDecoratorMergedResult.class));\n        assertThat(((LimitDecoratorMergedResult) actual).getMergedResult(), instanceOf(GroupByMemoryMergedResult.class));\n    }\n","date":"2021-06-04 22:49:49","endLine":242,"groupId":"5391","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildGroupByMemoryMergedResultWithMySQLLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a7/bca3b50963f7ff9d074f650320fc67b78f00ea.src","preCode":"    public void assertBuildGroupByMemoryMergedResultWithMySQLLimit() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(buildSelectStatement(new MySQLSelectStatement()),\n                new GroupByContext(Collections.singletonList(new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC)))), \n                new OrderByContext(Collections.emptyList(), false), new ProjectionsContext(0, 0, false, Collections.emptyList()),\n                new PaginationContext(new NumberLiteralLimitValueSegment(0, 0, 1), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(LimitDecoratorMergedResult.class));\n        assertThat(((LimitDecoratorMergedResult) actual).getMergedResult(), instanceOf(GroupByMemoryMergedResult.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/ShardingDQLResultMergerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"N"},{"authorDate":"2021-07-02 20:44:49","commitOrder":3,"curCode":"    private void getRevisedRowCountWithMax(final SelectStatement selectStatement) {\n        selectStatement.setProjections(new ProjectionsSegment(0, 0));\n        selectStatement.setGroupBy(new GroupBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.DESC))));\n        selectStatement.setOrderBy(new OrderBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.DESC))));\n        Map<String, ShardingSphereMetaData> metaDataMap = new HashMap<>();\n        metaDataMap.put(DefaultSchema.LOGIC_NAME, mock(ShardingSphereMetaData.class));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(metaDataMap, Collections.emptyList(), selectStatement, DefaultSchema.LOGIC_NAME);\n        assertThat(new PaginationContext(getOffsetSegment(), getRowCountSegment(), getParameters()).getRevisedRowCount(selectStatementContext), is((long) Integer.MAX_VALUE));\n    }\n","date":"2021-07-02 20:44:49","endLine":204,"groupId":"13627","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getRevisedRowCountWithMax","params":"(finalSelectStatementselectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/1f/284e444cf21713efabd6c8586ee5b828b051e7.src","preCode":"    private void getRevisedRowCountWithMax(final SelectStatement selectStatement) {\n        selectStatement.setProjections(new ProjectionsSegment(0, 0));\n        selectStatement.setGroupBy(new GroupBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.DESC))));\n        selectStatement.setOrderBy(new OrderBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.DESC))));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(null, Collections.emptyList(), selectStatement);\n        assertThat(new PaginationContext(getOffsetSegment(), getRowCountSegment(), getParameters()).getRevisedRowCount(selectStatementContext), is((long) Integer.MAX_VALUE));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/segment/select/pagination/PaginationContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"bfb784c9a0e47fd147c8a654c2f0b2a1e86c2c27","commitMessage":"@@@extract SchemaAvailable interface & add validate for SelectStatement (#11091)\n\n* refactor SchemaAvailable interface & add validate for SelectStatement\n\n* add final for InsertStatementContext field\n\n* fix test case error\n\n* fix rewrite test case error\n\n* refactor context new instance method\n\n* optimize test case\n\n* fix test case\n\n* optimize logic\n\n* fix test case\n\n* fix checkstyle","date":"2021-07-02 20:44:49","modifiedFileCount":"44","status":"M","submitter":"Zhengqiang Duan"},{"authorTime":"2021-07-27 07:22:30","codes":[{"authorDate":"2021-06-04 22:49:49","commitOrder":4,"curCode":"    public void assertBuildGroupByMemoryMergedResultWithMySQLLimit() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(buildSelectStatement(new MySQLSelectStatement()),\n                new GroupByContext(Collections.singletonList(new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC)))), \n                new OrderByContext(Collections.emptyList(), false), new ProjectionsContext(0, 0, false, Collections.emptyList()),\n                new PaginationContext(new NumberLiteralLimitValueSegment(0, 0, 1), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(LimitDecoratorMergedResult.class));\n        assertThat(((LimitDecoratorMergedResult) actual).getMergedResult(), instanceOf(GroupByMemoryMergedResult.class));\n    }\n","date":"2021-06-04 22:49:49","endLine":242,"groupId":"5391","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildGroupByMemoryMergedResultWithMySQLLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/a7/bca3b50963f7ff9d074f650320fc67b78f00ea.src","preCode":"    public void assertBuildGroupByMemoryMergedResultWithMySQLLimit() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(buildSelectStatement(new MySQLSelectStatement()),\n                new GroupByContext(Collections.singletonList(new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC)))), \n                new OrderByContext(Collections.emptyList(), false), new ProjectionsContext(0, 0, false, Collections.emptyList()),\n                new PaginationContext(new NumberLiteralLimitValueSegment(0, 0, 1), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(LimitDecoratorMergedResult.class));\n        assertThat(((LimitDecoratorMergedResult) actual).getMergedResult(), instanceOf(GroupByMemoryMergedResult.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/ShardingDQLResultMergerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"N"},{"authorDate":"2021-07-27 07:22:30","commitOrder":4,"curCode":"    private void getRevisedRowCountWithMax(final SelectStatement selectStatement) {\n        selectStatement.setProjections(new ProjectionsSegment(0, 0));\n        selectStatement.setGroupBy(new GroupBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.DESC))));\n        selectStatement.setOrderBy(new OrderBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.DESC))));\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(DefaultSchema.LOGIC_NAME, mock(ShardingSphereMetaData.class));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(metaDataMap, Collections.emptyList(), selectStatement, DefaultSchema.LOGIC_NAME);\n        assertThat(new PaginationContext(getOffsetSegment(), getRowCountSegment(), getParameters()).getRevisedRowCount(selectStatementContext), is((long) Integer.MAX_VALUE));\n    }\n","date":"2021-07-27 07:22:30","endLine":201,"groupId":"8582","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getRevisedRowCountWithMax","params":"(finalSelectStatementselectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/26/5c5116a864f1600c59e2c1581f7b17b1a8fc2a.src","preCode":"    private void getRevisedRowCountWithMax(final SelectStatement selectStatement) {\n        selectStatement.setProjections(new ProjectionsSegment(0, 0));\n        selectStatement.setGroupBy(new GroupBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.DESC))));\n        selectStatement.setOrderBy(new OrderBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.DESC))));\n        Map<String, ShardingSphereMetaData> metaDataMap = new HashMap<>();\n        metaDataMap.put(DefaultSchema.LOGIC_NAME, mock(ShardingSphereMetaData.class));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(metaDataMap, Collections.emptyList(), selectStatement, DefaultSchema.LOGIC_NAME);\n        assertThat(new PaginationContext(getOffsetSegment(), getRowCountSegment(), getParameters()).getRevisedRowCount(selectStatementContext), is((long) Integer.MAX_VALUE));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/segment/select/pagination/PaginationContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"6d7e3fe33533f8d8dd098e81d667ce57aabd625a","commitMessage":"@@@Use raw new HashMap to instead of guava (#11517)\n\n* Use raw new HashMap to instead of guava\n\n* Use raw new HashMap to instead of guava","date":"2021-07-27 07:22:30","modifiedFileCount":"69","status":"M","submitter":"Liang Zhang"},{"authorTime":"2021-07-27 07:22:30","codes":[{"authorDate":"2021-08-06 15:37:24","commitOrder":5,"curCode":"    public void assertBuildGroupByMemoryMergedResultWithMySQLLimit() throws SQLException {\n        final ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n        when(metaData.getSchema()).thenReturn(mock(ShardingSphereSchema.class));\n        MySQLSelectStatement selectStatement = (MySQLSelectStatement) buildSelectStatement(new MySQLSelectStatement());\n        selectStatement.setGroupBy(new GroupBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC))));\n        selectStatement.setProjections(new ProjectionsSegment(0, 0));\n        selectStatement.setLimit(new LimitSegment(0, 0, new NumberLiteralLimitValueSegment(0, 0, 1), null));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(Collections.singletonMap(DefaultSchema.LOGIC_NAME, metaData), Collections.emptyList(),\n                selectStatement, DefaultSchema.LOGIC_NAME);\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(LimitDecoratorMergedResult.class));\n        assertThat(((LimitDecoratorMergedResult) actual).getMergedResult(), instanceOf(GroupByStreamMergedResult.class));\n    }\n","date":"2021-08-06 15:37:24","endLine":350,"groupId":"10668","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuildGroupByMemoryMergedResultWithMySQLLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/91/b157c5938e6bd21ce8cab39304e3baf016c15b.src","preCode":"    public void assertBuildGroupByMemoryMergedResultWithMySQLLimit() throws SQLException {\n        ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"MySQL\"));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(buildSelectStatement(new MySQLSelectStatement()),\n                new GroupByContext(Collections.singletonList(new OrderByItem(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.ASC)))), \n                new OrderByContext(Collections.emptyList(), false), new ProjectionsContext(0, 0, false, Collections.emptyList()),\n                new PaginationContext(new NumberLiteralLimitValueSegment(0, 0, 1), null, Collections.emptyList()));\n        MergedResult actual = resultMerger.merge(createQueryResults(), selectStatementContext, buildSchema());\n        assertThat(actual, instanceOf(LimitDecoratorMergedResult.class));\n        assertThat(((LimitDecoratorMergedResult) actual).getMergedResult(), instanceOf(GroupByMemoryMergedResult.class));\n    }\n","realPath":"shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/test/java/org/apache/shardingsphere/sharding/merge/dql/ShardingDQLResultMergerTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":337,"status":"M"},{"authorDate":"2021-07-27 07:22:30","commitOrder":5,"curCode":"    private void getRevisedRowCountWithMax(final SelectStatement selectStatement) {\n        selectStatement.setProjections(new ProjectionsSegment(0, 0));\n        selectStatement.setGroupBy(new GroupBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.DESC))));\n        selectStatement.setOrderBy(new OrderBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.DESC))));\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(DefaultSchema.LOGIC_NAME, mock(ShardingSphereMetaData.class));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(metaDataMap, Collections.emptyList(), selectStatement, DefaultSchema.LOGIC_NAME);\n        assertThat(new PaginationContext(getOffsetSegment(), getRowCountSegment(), getParameters()).getRevisedRowCount(selectStatementContext), is((long) Integer.MAX_VALUE));\n    }\n","date":"2021-07-27 07:22:30","endLine":201,"groupId":"10668","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getRevisedRowCountWithMax","params":"(finalSelectStatementselectStatement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-shardingsphere-10-0.7/blobInfo/CC_OUT/blobs/26/5c5116a864f1600c59e2c1581f7b17b1a8fc2a.src","preCode":"    private void getRevisedRowCountWithMax(final SelectStatement selectStatement) {\n        selectStatement.setProjections(new ProjectionsSegment(0, 0));\n        selectStatement.setGroupBy(new GroupBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.ASC, OrderDirection.DESC))));\n        selectStatement.setOrderBy(new OrderBySegment(0, 0, Collections.singletonList(new IndexOrderByItemSegment(0, 0, 1, OrderDirection.DESC, OrderDirection.DESC))));\n        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(DefaultSchema.LOGIC_NAME, mock(ShardingSphereMetaData.class));\n        SelectStatementContext selectStatementContext = new SelectStatementContext(metaDataMap, Collections.emptyList(), selectStatement, DefaultSchema.LOGIC_NAME);\n        assertThat(new PaginationContext(getOffsetSegment(), getRowCountSegment(), getParameters()).getRevisedRowCount(selectStatementContext), is((long) Integer.MAX_VALUE));\n    }\n","realPath":"shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/segment/select/pagination/PaginationContextTest.java","repoName":"shardingsphere","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"N"}],"commitId":"2843f408e67d98d3e62485c8ed89dbe08e9cb202","commitMessage":"@@@Remove test only constructor of SelectStatementContext (#11675)\n\n* TopAndRowNumberDecoratorMergedResultTest use SelectStatementContext's second constructor\n\n* PreparedShadowDataSourceRouterTest use SelectStatementContext's second constructor\n\n* GroupByMemoryMergedResultTest use SelectStatementContext's second constructor\n\n* GroupByRowComparatorTest use SelectStatementContext's second constructor\n\n* ShardingResultMergerEngineTest use SelectStatementContext's second constructor\n\n* ShardingDQLResultMergerTest use SelectStatementContext's second constructor\n\n* ShardingDQLResultMergerTest use SelectStatementContext's second constructor2\n\n* GroupByStreamMergedResultTest use SelectStatementContext's second constructor\n\n* IteratorStreamMergedResultTest use SelectStatementContext's second constructor\n\n* OrderByStreamMergedResultTest use SelectStatementContext's second constructor\n\n* SelectStatementContextTest use SelectStatementContext's second constructor\n\n* LimitDecoratorMergedResultTest use SelectStatementContext's second constructor\n\n* RowNumberDecoratorMergedResultTest use SelectStatementContext's second constructor\n\n* OrderByValueTest use SelectStatementContext's second constructor\n\n* code style\n\n* merge code","date":"2021-08-06 15:37:24","modifiedFileCount":"14","status":"M","submitter":"liguoping"}]
